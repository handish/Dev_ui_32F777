
Dev_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016fec  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001288  080171f0  080171f0  000271f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018478  08018478  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  08018478  08018478  00028478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018480  08018480  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018480  08018480  00028480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018484  08018484  00028484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  08018488  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00030804  20000378  08018800  00030378  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20030b7c  08018800  00030b7c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003225c  00000000  00000000  000303a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005335  00000000  00000000  00062602  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022d8  00000000  00000000  00067938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002090  00000000  00000000  00069c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007013  00000000  00000000  0006bca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d73a  00000000  00000000  00072cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011b8d6  00000000  00000000  000903ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001abcc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3f8  00000000  00000000  001abd40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000378 	.word	0x20000378
 800021c:	00000000 	.word	0x00000000
 8000220:	080171d4 	.word	0x080171d4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000037c 	.word	0x2000037c
 800023c:	080171d4 	.word	0x080171d4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__reverse8bit>:
#define SWAP_VARS(A, B) do { (A) ^= (B); (B) ^= (A); (A) ^= (B); } while (0)


#if (!SMLCD_FLUSH_LUT)
// Reverse bits order in byte
__STATIC_INLINE uint8_t __reverse8bit(uint8_t byte) {
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
#if 1
	// Using ARM RBIT instruction
	// Since it operates with 32-bit values only, result must be shifted by 24 bits to the right
	return (uint8_t)(__RBIT(byte) >> 24);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	fa93 f3a3 	rbit	r3, r3
 8000604:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	0e1b      	lsrs	r3, r3, #24
 800060a:	b2db      	uxtb	r3, r3
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;

	return byte;
#endif
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <SMLCD_InitGPIO>:
#endif // SMLCD_FLUSH_LUT


// Initialize display control GPIO pins
void SMLCD_InitGPIO(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	//RCC->AHB2ENR |= SMLCD_GPIO_PERIPH;

	// Configure DISP pin
	//GPIO_set_mode(SMLCD_DISP_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_DISP_PIN);
	//GPIO_out_cfg(SMLCD_DISP_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_DISP_PIN);
	SMLCD_DISP_L;
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000622:	f00a fbb1 	bl	800ad88 <HAL_GPIO_WritePin>

	// Configure SCS pin
	//GPIO_set_mode(SMLCD_SCS_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_SCS_PIN);
	//GPIO_out_cfg(SMLCD_SCS_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_SCS_PIN);
	SMLCD_SCS_L;
 8000626:	2200      	movs	r2, #0
 8000628:	2110      	movs	r1, #16
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <SMLCD_InitGPIO+0x38>)
 800062c:	f00a fbac 	bl	800ad88 <HAL_GPIO_WritePin>
	LCD_EXCOMM_L;
 8000630:	2200      	movs	r2, #0
 8000632:	2101      	movs	r1, #1
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000636:	f00a fba7 	bl	800ad88 <HAL_GPIO_WritePin>
	LCD_FRONTLIGHT_H;
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <SMLCD_InitGPIO+0x3c>)
 8000642:	f00a fba1 	bl	800ad88 <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022400 	.word	0x40022400
 8000650:	40021000 	.word	0x40021000
 8000654:	40021c00 	.word	0x40021c00

08000658 <SMLCD_Init>:

// Initialize display
// note: SPI and GPIO must be initialized before calling this function
void SMLCD_Init(SPI_HandleTypeDef hspi) {
 8000658:	b084      	sub	sp, #16
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
 800065e:	f107 0c08 	add.w	ip, r7, #8
 8000662:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Set default drawing mode
	LCD_PixelMode = LCD_PSET;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <SMLCD_Init+0x38>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	SMLCD_SPI_PORT = hspi;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <SMLCD_Init+0x3c>)
 800066e:	4618      	mov	r0, r3
 8000670:	f107 0108 	add.w	r1, r7, #8
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	461a      	mov	r2, r3
 8000678:	f012 fd84 	bl	8013184 <memcpy>

	// Set initial image orientation
	SMLCD_Orientation(LCD_ORIENT_NORMAL);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 f94d 	bl	800091c <SMLCD_Orientation>
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800068a:	b004      	add	sp, #16
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20028aa8 	.word	0x20028aa8
 8000694:	20028ab0 	.word	0x20028ab0

08000698 <SMLCD_Clear>:

// Clear display memory (clear screen)
void SMLCD_Clear(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	// Send "Clear Screen" command
	uint8_t sendBytes[2];
	SMLCD_SCS_H;
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <SMLCD_Clear+0x38>)
 80006a4:	f00a fb70 	bl	800ad88 <HAL_GPIO_WritePin>
	sendBytes[0]=SMLCD_CMD_CLS;
 80006a8:	2320      	movs	r3, #32
 80006aa:	713b      	strb	r3, [r7, #4]
	sendBytes[1]=SMLCD_CMD_NOP;
 80006ac:	2300      	movs	r3, #0
 80006ae:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, sendBytes, sizeof(sendBytes), 100);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	2202      	movs	r2, #2
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <SMLCD_Clear+0x3c>)
 80006b8:	f00d f818 	bl	800d6ec <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_CLS, 1, 100);
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_CLS);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <SMLCD_Clear+0x38>)
 80006c2:	f00a fb61 	bl	800ad88 <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	20028ab0 	.word	0x20028ab0

080006d8 <SMLCD_Flush>:
	SMLCD_SCS_L;
}
#endif // SMLCD_VCOM_SOFT

// Send vRAM buffer into display
void SMLCD_Flush(void) {
 80006d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006dc:	b08a      	sub	sp, #40	; 0x28
 80006de:	af00      	add	r7, sp, #0
 80006e0:	466b      	mov	r3, sp
 80006e2:	4698      	mov	r8, r3
	int commandByte=1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
	int lineByte=1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61fb      	str	r3, [r7, #28]
	int lineAmount=SCR_H;
 80006ec:	23f0      	movs	r3, #240	; 0xf0
 80006ee:	61bb      	str	r3, [r7, #24]
	int nopBytesPerLine= 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
	int dataBytesPerLine=SCR_W/8;
 80006f4:	2332      	movs	r3, #50	; 0x32
 80006f6:	613b      	str	r3, [r7, #16]
	int finalNOPByte=1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
	uint8_t transmitBuffer[commandByte + lineByte+nopBytesPerLine+dataBytesPerLine + finalNOPByte];
 80006fc:	6a3a      	ldr	r2, [r7, #32]
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	441a      	add	r2, r3
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	441a      	add	r2, r3
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	441a      	add	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	18d6      	adds	r6, r2, r3
 800070e:	1e73      	subs	r3, r6, #1
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4633      	mov	r3, r6
 8000714:	4619      	mov	r1, r3
 8000716:	f04f 0200 	mov.w	r2, #0
 800071a:	f04f 0300 	mov.w	r3, #0
 800071e:	f04f 0400 	mov.w	r4, #0
 8000722:	00d4      	lsls	r4, r2, #3
 8000724:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000728:	00cb      	lsls	r3, r1, #3
 800072a:	4633      	mov	r3, r6
 800072c:	4619      	mov	r1, r3
 800072e:	f04f 0200 	mov.w	r2, #0
 8000732:	f04f 0300 	mov.w	r3, #0
 8000736:	f04f 0400 	mov.w	r4, #0
 800073a:	00d4      	lsls	r4, r2, #3
 800073c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000740:	00cb      	lsls	r3, r1, #3
 8000742:	4633      	mov	r3, r6
 8000744:	3307      	adds	r3, #7
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	ebad 0d03 	sub.w	sp, sp, r3
 800074e:	466b      	mov	r3, sp
 8000750:	3300      	adds	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
	memset(transmitBuffer,0x0,sizeof(transmitBuffer));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4632      	mov	r2, r6
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f012 fd1d 	bl	801319a <memset>
	#if 1

	register uint8_t *ptr = vRAM;
 8000760:	4d69      	ldr	r5, [pc, #420]	; (8000908 <SMLCD_Flush+0x230>)
	register uint8_t line = 0;
 8000762:	2400      	movs	r4, #0
	register uint32_t idx;
	int bufferCounter=1;
 8000764:	2301      	movs	r3, #1
 8000766:	603b      	str	r3, [r7, #0]
	int x=0;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24

	// Send "Write Line" command
	transmitBuffer[0]=SMLCD_CMD_WRITE;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2288      	movs	r2, #136	; 0x88
 8000770:	701a      	strb	r2, [r3, #0]
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE);
	switch (lcd_orientation) {
 8000772:	4b66      	ldr	r3, [pc, #408]	; (800090c <SMLCD_Flush+0x234>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b04      	cmp	r3, #4
 8000778:	d03b      	beq.n	80007f2 <SMLCD_Flush+0x11a>
 800077a:	2b08      	cmp	r3, #8
 800077c:	d05f      	beq.n	800083e <SMLCD_Flush+0x166>
 800077e:	2b02      	cmp	r3, #2
 8000780:	f040 8084 	bne.w	800088c <SMLCD_Flush+0x1b4>
		case LCD_ORIENT_CW:
			line = SCR_H + 1;
 8000784:	24f1      	movs	r4, #241	; 0xf1
			while (--line > 0) {
 8000786:	e02f      	b.n	80007e8 <SMLCD_Flush+0x110>
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2288      	movs	r2, #136	; 0x88
 800078c:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4622      	mov	r2, r4
 8000796:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000798:	2302      	movs	r3, #2
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
 800079c:	e009      	b.n	80007b2 <SMLCD_Flush+0xda>
					transmitBuffer[x]=*ptr;
 800079e:	7829      	ldrb	r1, [r5, #0]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a4:	4413      	add	r3, r2
 80007a6:	460a      	mov	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
					ptr++;
 80007aa:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	3301      	adds	r3, #1
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	2b33      	cmp	r3, #51	; 0x33
 80007b6:	ddf2      	ble.n	800079e <SMLCD_Flush+0xc6>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80007c8:	2201      	movs	r2, #1
 80007ca:	2110      	movs	r1, #16
 80007cc:	4850      	ldr	r0, [pc, #320]	; (8000910 <SMLCD_Flush+0x238>)
 80007ce:	f00a fadb 	bl	800ad88 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	b2b2      	uxth	r2, r6
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	484e      	ldr	r0, [pc, #312]	; (8000914 <SMLCD_Flush+0x23c>)
 80007da:	f00c ff87 	bl	800d6ec <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80007de:	2200      	movs	r2, #0
 80007e0:	2110      	movs	r1, #16
 80007e2:	484b      	ldr	r0, [pc, #300]	; (8000910 <SMLCD_Flush+0x238>)
 80007e4:	f00a fad0 	bl	800ad88 <HAL_GPIO_WritePin>
			while (--line > 0) {
 80007e8:	1e63      	subs	r3, r4, #1
 80007ea:	b2dc      	uxtb	r4, r3
 80007ec:	2c00      	cmp	r4, #0
 80007ee:	d1cb      	bne.n	8000788 <SMLCD_Flush+0xb0>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80007f0:	e084      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_CCW:
			line = SCR_H + 1;
 80007f2:	24f1      	movs	r4, #241	; 0xf1
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 80007f4:	4d48      	ldr	r5, [pc, #288]	; (8000918 <SMLCD_Flush+0x240>)
			while (--line > 0) {
 80007f6:	e01d      	b.n	8000834 <SMLCD_Flush+0x15c>

				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 80007f8:	4620      	mov	r0, r4
 80007fa:	f7ff fef9 	bl	80005f0 <__reverse8bit>
 80007fe:	4603      	mov	r3, r0
 8000800:	4619      	mov	r1, r3
 8000802:	2364      	movs	r3, #100	; 0x64
 8000804:	2201      	movs	r2, #1
 8000806:	4843      	ldr	r0, [pc, #268]	; (8000914 <SMLCD_Flush+0x23c>)
 8000808:	f00c ff70 	bl	800d6ec <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800080c:	2600      	movs	r6, #0
 800080e:	e009      	b.n	8000824 <SMLCD_Flush+0x14c>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 8000810:	462b      	mov	r3, r5
 8000812:	1e5d      	subs	r5, r3, #1
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	4619      	mov	r1, r3
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	2201      	movs	r2, #1
 800081c:	483d      	ldr	r0, [pc, #244]	; (8000914 <SMLCD_Flush+0x23c>)
 800081e:	f00c ff65 	bl	800d6ec <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000822:	3601      	adds	r6, #1
 8000824:	2e31      	cmp	r6, #49	; 0x31
 8000826:	d9f3      	bls.n	8000810 <SMLCD_Flush+0x138>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	2201      	movs	r2, #1
 800082c:	2100      	movs	r1, #0
 800082e:	4839      	ldr	r0, [pc, #228]	; (8000914 <SMLCD_Flush+0x23c>)
 8000830:	f00c ff5c 	bl	800d6ec <HAL_SPI_Transmit>
			while (--line > 0) {
 8000834:	1e63      	subs	r3, r4, #1
 8000836:	b2dc      	uxtb	r4, r3
 8000838:	2c00      	cmp	r4, #0
 800083a:	d1dd      	bne.n	80007f8 <SMLCD_Flush+0x120>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800083c:	e05e      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_180:
			line = 0;
 800083e:	2400      	movs	r4, #0
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 8000840:	4d35      	ldr	r5, [pc, #212]	; (8000918 <SMLCD_Flush+0x240>)
			while (line++ < SCR_H + 1) {
 8000842:	e01d      	b.n	8000880 <SMLCD_Flush+0x1a8>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 8000844:	4620      	mov	r0, r4
 8000846:	f7ff fed3 	bl	80005f0 <__reverse8bit>
 800084a:	4603      	mov	r3, r0
 800084c:	4619      	mov	r1, r3
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	2201      	movs	r2, #1
 8000852:	4830      	ldr	r0, [pc, #192]	; (8000914 <SMLCD_Flush+0x23c>)
 8000854:	f00c ff4a 	bl	800d6ec <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000858:	2600      	movs	r6, #0
 800085a:	e009      	b.n	8000870 <SMLCD_Flush+0x198>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 800085c:	462b      	mov	r3, r5
 800085e:	1e5d      	subs	r5, r3, #1
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	2201      	movs	r2, #1
 8000868:	482a      	ldr	r0, [pc, #168]	; (8000914 <SMLCD_Flush+0x23c>)
 800086a:	f00c ff3f 	bl	800d6ec <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800086e:	3601      	adds	r6, #1
 8000870:	2e31      	cmp	r6, #49	; 0x31
 8000872:	d9f3      	bls.n	800085c <SMLCD_Flush+0x184>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000874:	2364      	movs	r3, #100	; 0x64
 8000876:	2201      	movs	r2, #1
 8000878:	2100      	movs	r1, #0
 800087a:	4826      	ldr	r0, [pc, #152]	; (8000914 <SMLCD_Flush+0x23c>)
 800087c:	f00c ff36 	bl	800d6ec <HAL_SPI_Transmit>
			while (line++ < SCR_H + 1) {
 8000880:	4623      	mov	r3, r4
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	b2d4      	uxtb	r4, r2
 8000886:	2bf0      	cmp	r3, #240	; 0xf0
 8000888:	d9dc      	bls.n	8000844 <SMLCD_Flush+0x16c>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800088a:	e037      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_NORMAL:
		default:
			line = 0;
 800088c:	2400      	movs	r4, #0
			while (line++ < SCR_H + 1) {
 800088e:	e02f      	b.n	80008f0 <SMLCD_Flush+0x218>
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, ptr, SCR_W >> 3, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2288      	movs	r2, #136	; 0x88
 8000894:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4622      	mov	r2, r4
 800089e:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008a0:	2302      	movs	r3, #2
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
 80008a4:	e009      	b.n	80008ba <SMLCD_Flush+0x1e2>
					transmitBuffer[x]=*ptr;
 80008a6:	7829      	ldrb	r1, [r5, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	4413      	add	r3, r2
 80008ae:	460a      	mov	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
					ptr++;
 80008b2:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b6:	3301      	adds	r3, #1
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	2b33      	cmp	r3, #51	; 0x33
 80008be:	ddf2      	ble.n	80008a6 <SMLCD_Flush+0x1ce>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	480e      	ldr	r0, [pc, #56]	; (8000910 <SMLCD_Flush+0x238>)
 80008d6:	f00a fa57 	bl	800ad88 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	b2b2      	uxth	r2, r6
 80008de:	2364      	movs	r3, #100	; 0x64
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <SMLCD_Flush+0x23c>)
 80008e2:	f00c ff03 	bl	800d6ec <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80008e6:	2200      	movs	r2, #0
 80008e8:	2110      	movs	r1, #16
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <SMLCD_Flush+0x238>)
 80008ec:	f00a fa4c 	bl	800ad88 <HAL_GPIO_WritePin>
			while (line++ < SCR_H + 1) {
 80008f0:	4623      	mov	r3, r4
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	b2d4      	uxtb	r4, r2
 80008f6:	2bf0      	cmp	r3, #240	; 0xf0
 80008f8:	d9ca      	bls.n	8000890 <SMLCD_Flush+0x1b8>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80008fa:	bf00      	nop
 80008fc:	46c5      	mov	sp, r8
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;

#endif
}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000908:	20000394 	.word	0x20000394
 800090c:	20000000 	.word	0x20000000
 8000910:	40021000 	.word	0x40021000
 8000914:	20028ab0 	.word	0x20028ab0
 8000918:	20003273 	.word	0x20003273

0800091c <SMLCD_Orientation>:

// Set screen orientation
// input:
//   orientation - one of LCD_ORIENT_xx values
void SMLCD_Orientation(uint8_t orientation) {
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	if (orientation & (LCD_ORIENT_CW | LCD_ORIENT_CCW)) {
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 0306 	and.w	r3, r3, #6
 800092c:	2b00      	cmp	r3, #0
 800092e:	d007      	beq.n	8000940 <SMLCD_Orientation+0x24>
		scr_width  = SCR_H;
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <SMLCD_Orientation+0x44>)
 8000932:	22f0      	movs	r2, #240	; 0xf0
 8000934:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_W;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <SMLCD_Orientation+0x48>)
 8000938:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800093c:	801a      	strh	r2, [r3, #0]
 800093e:	e006      	b.n	800094e <SMLCD_Orientation+0x32>
	} else {
		scr_width  = SCR_W;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <SMLCD_Orientation+0x44>)
 8000942:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000946:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_H;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SMLCD_Orientation+0x48>)
 800094a:	22f0      	movs	r2, #240	; 0xf0
 800094c:	801a      	strh	r2, [r3, #0]
	}
	lcd_orientation = orientation;
 800094e:	4a06      	ldr	r2, [pc, #24]	; (8000968 <SMLCD_Orientation+0x4c>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	7013      	strb	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	20028aaa 	.word	0x20028aaa
 8000964:	20028aac 	.word	0x20028aac
 8000968:	20000000 	.word	0x20000000

0800096c <LCD_Clear>:

// Clear the vRAM memory
// note: size of video buffer must be a multiple of 4
void LCD_Clear(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
#if 1
	// This variant can be faster, speed depends on libraries used
	// But also needs include of "string.h"
	//memset(vRAM, 0x0, (sizeof(vRAM) >> 2));
	memset(vRAM, 0xFFFFFFFF, sizeof(vRAM));
 8000970:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <LCD_Clear+0x18>)
 800097a:	f012 fc0e 	bl	801319a <memset>

	while (i--) {
		*ptr++ = 0xFFFFFFFF;
	}
#endif
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000394 	.word	0x20000394

08000988 <LCD_Pixel>:
// input:
//   X, Y - coordinates of pixel
// note: value of LCD_PixelMode will be used as a drawing mode of a pixel
// note: X and Y coordinates are declared as "register uint32_t" for performance
//       for other compilers/CPUs this can/or should be changed to other type (16-bit)
void LCD_Pixel(register uint32_t X, register uint32_t Y) {
 8000988:	b4b0      	push	{r4, r5, r7}
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	460a      	mov	r2, r1
	register uint32_t offset;
	register uint8_t bpos;

#if (SMLCD_PIXEL_METHOD)
	switch (lcd_orientation) {
 8000990:	4928      	ldr	r1, [pc, #160]	; (8000a34 <LCD_Pixel+0xac>)
 8000992:	7809      	ldrb	r1, [r1, #0]
 8000994:	2904      	cmp	r1, #4
 8000996:	d009      	beq.n	80009ac <LCD_Pixel+0x24>
 8000998:	2908      	cmp	r1, #8
 800099a:	d002      	beq.n	80009a2 <LCD_Pixel+0x1a>
 800099c:	2902      	cmp	r1, #2
 800099e:	d00d      	beq.n	80009bc <LCD_Pixel+0x34>
		case LCD_ORIENT_CW:
			SWAP_VARS(X, Y);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 80009a0:	e010      	b.n	80009c4 <LCD_Pixel+0x3c>
			X = SCR_W - 1 - X;
 80009a2:	f240 118f 	movw	r1, #399	; 0x18f
 80009a6:	1ac9      	subs	r1, r1, r3
 80009a8:	460b      	mov	r3, r1
			break;
 80009aa:	e00b      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009ac:	4053      	eors	r3, r2
 80009ae:	405a      	eors	r2, r3
 80009b0:	4053      	eors	r3, r2
			X = SCR_W - 1 - X;
 80009b2:	f240 118f 	movw	r1, #399	; 0x18f
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	460b      	mov	r3, r1
			break;
 80009ba:	e003      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009bc:	4053      	eors	r3, r2
 80009be:	405a      	eors	r2, r3
 80009c0:	4053      	eors	r3, r2
			break;
 80009c2:	bf00      	nop
		X = SCR_W - 1 - X;
	}
#endif

	// Offset in video buffer
	offset = ((Y * SCR_W) + X) >> 3;
 80009c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80009c8:	fb01 f202 	mul.w	r2, r1, r2
 80009cc:	441a      	add	r2, r3
 80009ce:	08d4      	lsrs	r4, r2, #3

#if (SMLCD_PIXEL_SAFE)
	// Ensure offset is inside of video buffer
	if (offset > ((SCR_W * SCR_H) >> 3) - 1) {
 80009d0:	f642 62df 	movw	r2, #11999	; 0x2edf
 80009d4:	4294      	cmp	r4, r2
 80009d6:	d829      	bhi.n	8000a2c <LCD_Pixel+0xa4>
		return;
	}
#endif // SMLCD_PIXEL_SAFE

	// Bit position in byte
	bpos = X & 0x07;
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	b2dd      	uxtb	r5, r3
			break;
	}
#else // SMLCD_USE_BITBAND
	// Using access via array

	switch (LCD_PixelMode) {
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <LCD_Pixel+0xb0>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d002      	beq.n	80009ee <LCD_Pixel+0x66>
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d00a      	beq.n	8000a02 <LCD_Pixel+0x7a>
 80009ec:	e013      	b.n	8000a16 <LCD_Pixel+0x8e>
		case LCD_PRES:
			vRAM[offset] |= LUT_PRST[bpos];
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <LCD_Pixel+0xb4>)
 80009f0:	5d1a      	ldrb	r2, [r3, r4]
 80009f2:	4629      	mov	r1, r5
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <LCD_Pixel+0xb8>)
 80009f6:	5c5b      	ldrb	r3, [r3, r1]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <LCD_Pixel+0xb4>)
 80009fe:	551a      	strb	r2, [r3, r4]
			break;
 8000a00:	e015      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PINV:
			vRAM[offset] ^= LUT_PRST[bpos];
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a04:	5d1a      	ldrb	r2, [r3, r4]
 8000a06:	4629      	mov	r1, r5
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <LCD_Pixel+0xb8>)
 8000a0a:	5c5b      	ldrb	r3, [r3, r1]
 8000a0c:	4053      	eors	r3, r2
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a12:	551a      	strb	r2, [r3, r4]
			break;
 8000a14:	e00b      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PSET:
		default:
			vRAM[offset] &= LUT_PSET[bpos];
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a18:	5d1a      	ldrb	r2, [r3, r4]
 8000a1a:	4629      	mov	r1, r5
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <LCD_Pixel+0xbc>)
 8000a1e:	5c5b      	ldrb	r3, [r3, r1]
 8000a20:	4013      	ands	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a26:	551a      	strb	r2, [r3, r4]
			break;
 8000a28:	bf00      	nop
 8000a2a:	e000      	b.n	8000a2e <LCD_Pixel+0xa6>
		return;
 8000a2c:	bf00      	nop
	}
#endif // SMLCD_USE_BITBAND
}
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bcb0      	pop	{r4, r5, r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20028aa8 	.word	0x20028aa8
 8000a3c:	20000394 	.word	0x20000394
 8000a40:	0801797c 	.word	0x0801797c
 8000a44:	08017974 	.word	0x08017974

08000a48 <LCD_VLineInt>:
// Optimized vertical line drawing (without regard of screen rotation)
// input:
//   X - horizontal coordinate
//   Y - vertical coordinate
//   H - line height
static void LCD_VLineInt(uint16_t X, uint16_t Y, uint16_t H) {
 8000a48:	b4b0      	push	{r4, r5, r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
 8000a52:	460b      	mov	r3, r1
 8000a54:	80bb      	strh	r3, [r7, #4]
 8000a56:	4613      	mov	r3, r2
 8000a58:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a60:	fb02 f203 	mul.w	r2, r2, r3
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	4413      	add	r3, r2
 8000a68:	10db      	asrs	r3, r3, #3
 8000a6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <LCD_VLineInt+0xa0>)
 8000a6c:	189c      	adds	r4, r3, r2
	register uint8_t mask;

	// Draw line
	X &= 0x07;
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	80fb      	strh	r3, [r7, #6]
	switch (LCD_PixelMode) {
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <LCD_VLineInt+0xa4>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d002      	beq.n	8000a84 <LCD_VLineInt+0x3c>
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d00f      	beq.n	8000aa2 <LCD_VLineInt+0x5a>
 8000a82:	e01d      	b.n	8000ac0 <LCD_VLineInt+0x78>
		case LCD_PRES:
			mask = LUT_PRST[X];
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000a88:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000a8a:	e004      	b.n	8000a96 <LCD_VLineInt+0x4e>
				*ptr |= mask;
 8000a8c:	7823      	ldrb	r3, [r4, #0]
 8000a8e:	432b      	orrs	r3, r5
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000a94:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000a96:	887b      	ldrh	r3, [r7, #2]
 8000a98:	1e5a      	subs	r2, r3, #1
 8000a9a:	807a      	strh	r2, [r7, #2]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f5      	bne.n	8000a8c <LCD_VLineInt+0x44>
			}
			break;
 8000aa0:	e01d      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PINV:
			mask = LUT_PRST[X];
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000aa6:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000aa8:	e004      	b.n	8000ab4 <LCD_VLineInt+0x6c>
				*ptr ^= mask;
 8000aaa:	7823      	ldrb	r3, [r4, #0]
 8000aac:	406b      	eors	r3, r5
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ab2:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	807a      	strh	r2, [r7, #2]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f5      	bne.n	8000aaa <LCD_VLineInt+0x62>
			}
			break;
 8000abe:	e00e      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PSET:
		default:
			mask = LUT_PSET[X];
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <LCD_VLineInt+0xac>)
 8000ac4:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000ac6:	e004      	b.n	8000ad2 <LCD_VLineInt+0x8a>
				*ptr &= mask;
 8000ac8:	7823      	ldrb	r3, [r4, #0]
 8000aca:	402b      	ands	r3, r5
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ad0:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	807a      	strh	r2, [r7, #2]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1f5      	bne.n	8000ac8 <LCD_VLineInt+0x80>
			}
			break;
 8000adc:	bf00      	nop
	}
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bcb0      	pop	{r4, r5, r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	20000394 	.word	0x20000394
 8000aec:	20028aa8 	.word	0x20028aa8
 8000af0:	0801797c 	.word	0x0801797c
 8000af4:	08017974 	.word	0x08017974

08000af8 <LCD_HLineInt>:
// Optimized draw horizontal line (without regard of screen rotation)
// input:
//   X - horizontal coordinate of line start
//   Y - vertical coordinate
//   W - line width
static void LCD_HLineInt(uint16_t X, uint16_t Y, uint16_t W) {
 8000af8:	b4f0      	push	{r4, r5, r6, r7}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
 8000b02:	460b      	mov	r3, r1
 8000b04:	80bb      	strh	r3, [r7, #4]
 8000b06:	4613      	mov	r3, r2
 8000b08:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000b0a:	88bb      	ldrh	r3, [r7, #4]
 8000b0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b10:	fb02 f203 	mul.w	r2, r2, r3
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	4413      	add	r3, r2
 8000b18:	10db      	asrs	r3, r3, #3
 8000b1a:	4a69      	ldr	r2, [pc, #420]	; (8000cc0 <LCD_HLineInt+0x1c8>)
 8000b1c:	189c      	adds	r4, r3, r2
	register uint8_t modulo = X & 0x07;
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	b2de      	uxtb	r6, r3
	// Look-up tables
	static const uint8_t LUT_B1[] = { 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80 };
	static const uint8_t LUT_B2[] = { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

	// First partial byte
	if (modulo) {
 8000b28:	2e00      	cmp	r6, #0
 8000b2a:	d03a      	beq.n	8000ba2 <LCD_HLineInt+0xaa>
		// Get bit mask for first partial byte
		modulo = 8 - modulo;
 8000b2c:	f1c6 0308 	rsb	r3, r6, #8
 8000b30:	b2de      	uxtb	r6, r3
		mask = LUT_B1[modulo];
 8000b32:	4632      	mov	r2, r6
 8000b34:	4b63      	ldr	r3, [pc, #396]	; (8000cc4 <LCD_HLineInt+0x1cc>)
 8000b36:	5c9d      	ldrb	r5, [r3, r2]

		if (modulo > W) {
 8000b38:	b2b3      	uxth	r3, r6
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d206      	bcs.n	8000b4e <LCD_HLineInt+0x56>
			// Trim bit mask if line will not go out from a current byte
			mask |= LUT_B2[modulo - W];
 8000b40:	4632      	mov	r2, r6
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	4a60      	ldr	r2, [pc, #384]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000b48:	5cd3      	ldrb	r3, [r2, r3]
 8000b4a:	432b      	orrs	r3, r5
 8000b4c:	b2dd      	uxtb	r5, r3
		}

		// Update first partial byte
		switch (LCD_PixelMode) {
 8000b4e:	4b5f      	ldr	r3, [pc, #380]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d002      	beq.n	8000b5c <LCD_HLineInt+0x64>
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d00a      	beq.n	8000b70 <LCD_HLineInt+0x78>
 8000b5a:	e013      	b.n	8000b84 <LCD_HLineInt+0x8c>
			case LCD_PRES:
				*ptr |= ~mask;
 8000b5c:	7823      	ldrb	r3, [r4, #0]
 8000b5e:	b25a      	sxtb	r2, r3
 8000b60:	b26b      	sxtb	r3, r5
 8000b62:	43db      	mvns	r3, r3
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	7023      	strb	r3, [r4, #0]
				break;
 8000b6e:	e00e      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000b70:	7823      	ldrb	r3, [r4, #0]
 8000b72:	b25a      	sxtb	r2, r3
 8000b74:	b26b      	sxtb	r3, r5
 8000b76:	43db      	mvns	r3, r3
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	4053      	eors	r3, r2
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	7023      	strb	r3, [r4, #0]
				break;
 8000b82:	e004      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PSET:
			default:
				*ptr &=  mask;
 8000b84:	7823      	ldrb	r3, [r4, #0]
 8000b86:	402b      	ands	r3, r5
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	7023      	strb	r3, [r4, #0]
				break;
 8000b8c:	bf00      	nop
		}

		// Line is over?
		if (modulo > W) {
 8000b8e:	b2b3      	uxth	r3, r6
 8000b90:	887a      	ldrh	r2, [r7, #2]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f0c0 808f 	bcc.w	8000cb6 <LCD_HLineInt+0x1be>
			return;
		}

		// Shift pointer to the next byte in line and decrease line height counter
		ptr++;
 8000b98:	3401      	adds	r4, #1
		W -= modulo;
 8000b9a:	b2b3      	uxth	r3, r6
 8000b9c:	887a      	ldrh	r2, [r7, #2]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	807b      	strh	r3, [r7, #2]
	}

	// Fill solid bytes
	if (W > 32) {
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	2b20      	cmp	r3, #32
 8000ba6:	d92c      	bls.n	8000c02 <LCD_HLineInt+0x10a>
		// Modify 32 pixels at once
		register uint32_t *ptr32 = (uint32_t *)ptr;
		switch (LCD_PixelMode) {
 8000ba8:	4b48      	ldr	r3, [pc, #288]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d003      	beq.n	8000bb8 <LCD_HLineInt+0xc0>
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d00e      	beq.n	8000bd2 <LCD_HLineInt+0xda>
 8000bb4:	e01a      	b.n	8000bec <LCD_HLineInt+0xf4>
			case LCD_PRES:
 8000bb6:	bf00      	nop
				do {
					*ptr32++ = 0xFFFFFFFF;
 8000bb8:	4623      	mov	r3, r4
 8000bba:	1d1c      	adds	r4, r3, #4
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	3b20      	subs	r3, #32
 8000bc6:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	2b1f      	cmp	r3, #31
 8000bcc:	d8f3      	bhi.n	8000bb6 <LCD_HLineInt+0xbe>
				break;
 8000bce:	e018      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PINV:
 8000bd0:	bf00      	nop
				do {
					*ptr32++ ^= 0xFFFFFFFF;
 8000bd2:	4623      	mov	r3, r4
 8000bd4:	1d1c      	adds	r4, r3, #4
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	43d2      	mvns	r2, r2
 8000bda:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bdc:	887b      	ldrh	r3, [r7, #2]
 8000bde:	3b20      	subs	r3, #32
 8000be0:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	2b1f      	cmp	r3, #31
 8000be6:	d8f3      	bhi.n	8000bd0 <LCD_HLineInt+0xd8>
				break;
 8000be8:	e00b      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PSET:
 8000bea:	bf00      	nop
			default:
				do {
					*ptr32++ = 0x00000000;
 8000bec:	4623      	mov	r3, r4
 8000bee:	1d1c      	adds	r4, r3, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	3b20      	subs	r3, #32
 8000bf8:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	2b1f      	cmp	r3, #31
 8000bfe:	d8f4      	bhi.n	8000bea <LCD_HLineInt+0xf2>
				break;
 8000c00:	bf00      	nop
		}
		ptr = (uint8_t *)ptr32;
	}
	if (W > 7) {
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	2b07      	cmp	r3, #7
 8000c06:	d92c      	bls.n	8000c62 <LCD_HLineInt+0x16a>
		// Modify full bytes (8 pixels at once)
		switch (LCD_PixelMode) {
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d003      	beq.n	8000c18 <LCD_HLineInt+0x120>
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d00d      	beq.n	8000c30 <LCD_HLineInt+0x138>
 8000c14:	e01a      	b.n	8000c4c <LCD_HLineInt+0x154>
			case LCD_PRES:
 8000c16:	bf00      	nop
				do {
					*ptr++ = 0xFF;
 8000c18:	4623      	mov	r3, r4
 8000c1a:	1c5c      	adds	r4, r3, #1
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	3b08      	subs	r3, #8
 8000c24:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d8f4      	bhi.n	8000c16 <LCD_HLineInt+0x11e>
				break;
 8000c2c:	e01a      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PINV:
 8000c2e:	bf00      	nop
				do {
					*ptr++ ^= 0xFF;
 8000c30:	4623      	mov	r3, r4
 8000c32:	1c5c      	adds	r4, r3, #1
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	43d2      	mvns	r2, r2
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	3b08      	subs	r3, #8
 8000c40:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d8f2      	bhi.n	8000c2e <LCD_HLineInt+0x136>
				break;
 8000c48:	e00c      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PSET:
 8000c4a:	bf00      	nop
			default:
				do {
					*ptr++ = 0x00;
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	1c5c      	adds	r4, r3, #1
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	3b08      	subs	r3, #8
 8000c58:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	d8f4      	bhi.n	8000c4a <LCD_HLineInt+0x152>
				break;
 8000c60:	e000      	b.n	8000c64 <LCD_HLineInt+0x16c>
		}
	}
 8000c62:	bf00      	nop

	// Last partial byte?
	if (W) {
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d026      	beq.n	8000cb8 <LCD_HLineInt+0x1c0>
		mask = LUT_B2[8 - W];
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	f1c3 0308 	rsb	r3, r3, #8
 8000c70:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000c72:	5cd5      	ldrb	r5, [r2, r3]
		switch (LCD_PixelMode) {
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d002      	beq.n	8000c82 <LCD_HLineInt+0x18a>
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d00a      	beq.n	8000c96 <LCD_HLineInt+0x19e>
 8000c80:	e013      	b.n	8000caa <LCD_HLineInt+0x1b2>
			case LCD_PRES:
				*ptr |= ~mask;
 8000c82:	7823      	ldrb	r3, [r4, #0]
 8000c84:	b25a      	sxtb	r2, r3
 8000c86:	b26b      	sxtb	r3, r5
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	7023      	strb	r3, [r4, #0]
				break;
 8000c94:	e010      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000c96:	7823      	ldrb	r3, [r4, #0]
 8000c98:	b25a      	sxtb	r2, r3
 8000c9a:	b26b      	sxtb	r3, r5
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	4053      	eors	r3, r2
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	7023      	strb	r3, [r4, #0]
				break;
 8000ca8:	e006      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PSET:
			default:
				*ptr &= mask;
 8000caa:	7823      	ldrb	r3, [r4, #0]
 8000cac:	402b      	ands	r3, r5
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	7023      	strb	r3, [r4, #0]
				break;
 8000cb2:	bf00      	nop
 8000cb4:	e000      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			return;
 8000cb6:	bf00      	nop
		}
	}
}
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	20000394 	.word	0x20000394
 8000cc4:	08017984 	.word	0x08017984
 8000cc8:	0801798c 	.word	0x0801798c
 8000ccc:	20028aa8 	.word	0x20028aa8

08000cd0 <LCD_HLine>:

// Draw horizontal line
// input:
//   X1, X2 - left and right horizontal coordinates
//   Y - vertical coordinate
void LCD_HLine(uint16_t X1, uint16_t X2, uint16_t Y) {
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	80bb      	strh	r3, [r7, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	807b      	strh	r3, [r7, #2]
	register uint16_t X;
	register uint16_t L;

	if (X1 > X2) {
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d905      	bls.n	8000cf6 <LCD_HLine+0x26>
		X = X2; L = X1 - X2;
 8000cea:	88bd      	ldrh	r5, [r7, #4]
 8000cec:	88fa      	ldrh	r2, [r7, #6]
 8000cee:	88bb      	ldrh	r3, [r7, #4]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b29c      	uxth	r4, r3
 8000cf4:	e004      	b.n	8000d00 <LCD_HLine+0x30>
	} else {
		X = X1; L = X2 - X1;
 8000cf6:	88fd      	ldrh	r5, [r7, #6]
 8000cf8:	88ba      	ldrh	r2, [r7, #4]
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	b29c      	uxth	r4, r3
	}
	L++;
 8000d00:	4623      	mov	r3, r4
 8000d02:	3301      	adds	r3, #1
 8000d04:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <LCD_HLine+0x9c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d00a      	beq.n	8000d24 <LCD_HLine+0x54>
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d013      	beq.n	8000d3a <LCD_HLine+0x6a>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d11f      	bne.n	8000d56 <LCD_HLine+0x86>
		case LCD_ORIENT_CW:
			LCD_VLineInt(Y, X, L);
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	4622      	mov	r2, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe93 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d22:	e01f      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_VLineInt(SCR_W - 1 - Y, X, L);
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4622      	mov	r2, r4
 8000d30:	4629      	mov	r1, r5
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fe88 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d38:	e014      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_180:
			LCD_HLineInt(SCR_W - X - L, Y, L);
 8000d3a:	462b      	mov	r3, r5
 8000d3c:	425b      	negs	r3, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	1b1b      	subs	r3, r3, r4
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	8879      	ldrh	r1, [r7, #2]
 8000d4c:	4622      	mov	r2, r4
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fed2 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d54:	e006      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_HLineInt(X, Y, L);
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	4622      	mov	r2, r4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f7ff fecb 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d62:	bf00      	nop
	}
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d6c:	20000000 	.word	0x20000000

08000d70 <LCD_VLine>:

// Draw vertical line
// input:
//   X - horizontal coordinate
//   Y1,Y2 - top and bottom vertical coordinates
void LCD_VLine(uint16_t X, uint16_t Y1, uint16_t Y2) {
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	80bb      	strh	r3, [r7, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	807b      	strh	r3, [r7, #2]
	register uint16_t Y;
	register uint16_t L;

	if (Y1 > Y2) {
 8000d82:	88ba      	ldrh	r2, [r7, #4]
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d905      	bls.n	8000d96 <LCD_VLine+0x26>
		Y = Y2; L = Y1 - Y2;
 8000d8a:	887d      	ldrh	r5, [r7, #2]
 8000d8c:	88ba      	ldrh	r2, [r7, #4]
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	b29c      	uxth	r4, r3
 8000d94:	e004      	b.n	8000da0 <LCD_VLine+0x30>
	} else {
		Y = Y1; L = Y2 - Y1;
 8000d96:	88bd      	ldrh	r5, [r7, #4]
 8000d98:	887a      	ldrh	r2, [r7, #2]
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	b29c      	uxth	r4, r3
	}
	L++;
 8000da0:	4623      	mov	r3, r4
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <LCD_VLine+0x9c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d00a      	beq.n	8000dc4 <LCD_VLine+0x54>
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d016      	beq.n	8000de0 <LCD_VLine+0x70>
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d11f      	bne.n	8000df6 <LCD_VLine+0x86>
		case LCD_ORIENT_CW:
			LCD_HLineInt(Y, X, L);
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	4622      	mov	r2, r4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	f7ff fe9b 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dc2:	e01f      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_HLineInt(SCR_W - Y - L, X, L);
 8000dc4:	462b      	mov	r3, r5
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	1b1b      	subs	r3, r3, r4
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	88f9      	ldrh	r1, [r7, #6]
 8000dd6:	4622      	mov	r2, r4
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fe8d 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dde:	e011      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_180:
			LCD_VLineInt(SCR_W - 1 - X, Y, L);
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000de6:	3301      	adds	r3, #1
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4622      	mov	r2, r4
 8000dec:	4629      	mov	r1, r5
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fe2a 	bl	8000a48 <LCD_VLineInt>
			break;
 8000df4:	e006      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_VLineInt(X, Y, L);
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	4622      	mov	r2, r4
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe23 	bl	8000a48 <LCD_VLineInt>
			break;
 8000e02:	bf00      	nop
	}
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0c:	20000000 	.word	0x20000000

08000e10 <LCD_Rect>:

// Draw rectangle
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Rect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4604      	mov	r4, r0
 8000e18:	4608      	mov	r0, r1
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4623      	mov	r3, r4
 8000e20:	80fb      	strh	r3, [r7, #6]
 8000e22:	4603      	mov	r3, r0
 8000e24:	80bb      	strh	r3, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	807b      	strh	r3, [r7, #2]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	803b      	strh	r3, [r7, #0]
	LCD_HLine(X1, X2, Y1);
 8000e2e:	88ba      	ldrh	r2, [r7, #4]
 8000e30:	8879      	ldrh	r1, [r7, #2]
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff4b 	bl	8000cd0 <LCD_HLine>
	LCD_HLine(X1, X2, Y2);
 8000e3a:	883a      	ldrh	r2, [r7, #0]
 8000e3c:	8879      	ldrh	r1, [r7, #2]
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff45 	bl	8000cd0 <LCD_HLine>
	if (Y1 > Y2) {
 8000e46:	88ba      	ldrh	r2, [r7, #4]
 8000e48:	883b      	ldrh	r3, [r7, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d90b      	bls.n	8000e66 <LCD_Rect+0x56>
		SWAP_VARS(Y1, Y2);
 8000e4e:	88ba      	ldrh	r2, [r7, #4]
 8000e50:	883b      	ldrh	r3, [r7, #0]
 8000e52:	4053      	eors	r3, r2
 8000e54:	80bb      	strh	r3, [r7, #4]
 8000e56:	883a      	ldrh	r2, [r7, #0]
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	4053      	eors	r3, r2
 8000e5c:	803b      	strh	r3, [r7, #0]
 8000e5e:	88ba      	ldrh	r2, [r7, #4]
 8000e60:	883b      	ldrh	r3, [r7, #0]
 8000e62:	4053      	eors	r3, r2
 8000e64:	80bb      	strh	r3, [r7, #4]
	}
	Y1++;
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	80bb      	strh	r3, [r7, #4]
	Y2--;
 8000e6c:	883b      	ldrh	r3, [r7, #0]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	803b      	strh	r3, [r7, #0]
	LCD_VLine(X1, Y1, Y2);
 8000e72:	883a      	ldrh	r2, [r7, #0]
 8000e74:	88b9      	ldrh	r1, [r7, #4]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff79 	bl	8000d70 <LCD_VLine>
	LCD_VLine(X2, Y1, Y2);
 8000e7e:	883a      	ldrh	r2, [r7, #0]
 8000e80:	88b9      	ldrh	r1, [r7, #4]
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff73 	bl	8000d70 <LCD_VLine>
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd90      	pop	{r4, r7, pc}
	...

08000e94 <LCD_FillRect>:
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
// note: doesn't check vRAM boundaries, so caller must respect
//       screen width and height while specifying X and Y coordinates
void LCD_FillRect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e94:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	80fb      	strh	r3, [r7, #6]
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	80bb      	strh	r3, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	803b      	strh	r3, [r7, #0]
	static const uint8_t LUT_B1[] = { 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01 };
	static const uint8_t LUT_B2[] = { 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF };

	if (X1 > X2) {
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d90b      	bls.n	8000ed4 <LCD_FillRect+0x40>
		SWAP_VARS(X1, X2);
 8000ebc:	88fa      	ldrh	r2, [r7, #6]
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	4053      	eors	r3, r2
 8000ec2:	80fb      	strh	r3, [r7, #6]
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4053      	eors	r3, r2
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	4053      	eors	r3, r2
 8000ed2:	80fb      	strh	r3, [r7, #6]
	}

	if (Y1 > Y2) {
 8000ed4:	88ba      	ldrh	r2, [r7, #4]
 8000ed6:	883b      	ldrh	r3, [r7, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d90b      	bls.n	8000ef4 <LCD_FillRect+0x60>
		SWAP_VARS(Y1, Y2);
 8000edc:	88ba      	ldrh	r2, [r7, #4]
 8000ede:	883b      	ldrh	r3, [r7, #0]
 8000ee0:	4053      	eors	r3, r2
 8000ee2:	80bb      	strh	r3, [r7, #4]
 8000ee4:	883a      	ldrh	r2, [r7, #0]
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	4053      	eors	r3, r2
 8000eea:	803b      	strh	r3, [r7, #0]
 8000eec:	88ba      	ldrh	r2, [r7, #4]
 8000eee:	883b      	ldrh	r3, [r7, #0]
 8000ef0:	4053      	eors	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
	}

	uint16_t dW;

	switch (lcd_orientation) {
 8000ef4:	4b95      	ldr	r3, [pc, #596]	; (800114c <LCD_FillRect+0x2b8>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d011      	beq.n	8000f20 <LCD_FillRect+0x8c>
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d002      	beq.n	8000f06 <LCD_FillRect+0x72>
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d032      	beq.n	8000f6a <LCD_FillRect+0xd6>
			SWAP_VARS(X1, Y1);
			SWAP_VARS(X2, Y2);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 8000f04:	e04a      	b.n	8000f9c <LCD_FillRect+0x108>
			dW = SCR_W - 1 - X2;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f16:	3301      	adds	r3, #1
 8000f18:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f1a:	897b      	ldrh	r3, [r7, #10]
 8000f1c:	80fb      	strh	r3, [r7, #6]
			break;
 8000f1e:	e03d      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f20:	88fa      	ldrh	r2, [r7, #6]
 8000f22:	88bb      	ldrh	r3, [r7, #4]
 8000f24:	4053      	eors	r3, r2
 8000f26:	80fb      	strh	r3, [r7, #6]
 8000f28:	88ba      	ldrh	r2, [r7, #4]
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	4053      	eors	r3, r2
 8000f2e:	80bb      	strh	r3, [r7, #4]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	4053      	eors	r3, r2
 8000f36:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	883b      	ldrh	r3, [r7, #0]
 8000f3c:	4053      	eors	r3, r2
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	883a      	ldrh	r2, [r7, #0]
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	4053      	eors	r3, r2
 8000f46:	803b      	strh	r3, [r7, #0]
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	883b      	ldrh	r3, [r7, #0]
 8000f4c:	4053      	eors	r3, r2
 8000f4e:	807b      	strh	r3, [r7, #2]
			dW = SCR_W - 1 - X2;
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f56:	3301      	adds	r3, #1
 8000f58:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f60:	3301      	adds	r3, #1
 8000f62:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f64:	897b      	ldrh	r3, [r7, #10]
 8000f66:	80fb      	strh	r3, [r7, #6]
			break;
 8000f68:	e018      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f6a:	88fa      	ldrh	r2, [r7, #6]
 8000f6c:	88bb      	ldrh	r3, [r7, #4]
 8000f6e:	4053      	eors	r3, r2
 8000f70:	80fb      	strh	r3, [r7, #6]
 8000f72:	88ba      	ldrh	r2, [r7, #4]
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	4053      	eors	r3, r2
 8000f78:	80bb      	strh	r3, [r7, #4]
 8000f7a:	88fa      	ldrh	r2, [r7, #6]
 8000f7c:	88bb      	ldrh	r3, [r7, #4]
 8000f7e:	4053      	eors	r3, r2
 8000f80:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	883b      	ldrh	r3, [r7, #0]
 8000f86:	4053      	eors	r3, r2
 8000f88:	807b      	strh	r3, [r7, #2]
 8000f8a:	883a      	ldrh	r2, [r7, #0]
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	4053      	eors	r3, r2
 8000f90:	803b      	strh	r3, [r7, #0]
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	883b      	ldrh	r3, [r7, #0]
 8000f96:	4053      	eors	r3, r2
 8000f98:	807b      	strh	r3, [r7, #2]
			break;
 8000f9a:	bf00      	nop
	}

	// Mask for first and last byte
	register uint8_t mask_fb = LUT_B1[X1 & 0x07];
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	4a6b      	ldr	r2, [pc, #428]	; (8001150 <LCD_FillRect+0x2bc>)
 8000fa4:	5cd5      	ldrb	r5, [r2, r3]
	register uint8_t mask_lb = LUT_B2[X2 & 0x07];
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	4a69      	ldr	r2, [pc, #420]	; (8001154 <LCD_FillRect+0x2c0>)
 8000fae:	f812 8003 	ldrb.w	r8, [r2, r3]

	// Offset in vRAM
	uint8_t *ptr_base = &vRAM[(((Y1 * SCR_W) + X1) >> 3)];
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000fb8:	fb02 f203 	mul.w	r2, r2, r3
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	10db      	asrs	r3, r3, #3
 8000fc2:	4a65      	ldr	r2, [pc, #404]	; (8001158 <LCD_FillRect+0x2c4>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

	// Line width in bytes
	dW = (X2 >> 3) - (X1 >> 3);
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	08db      	lsrs	r3, r3, #3
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	817b      	strh	r3, [r7, #10]

	if (dW) {
 8000fd8:	897b      	ldrh	r3, [r7, #10]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d071      	beq.n	80010c2 <LCD_FillRect+0x22e>
		// Multiple bytes
		register uint16_t cntr;
		register uint8_t *ptr;

		switch (LCD_PixelMode) {
 8000fde:	4b5f      	ldr	r3, [pc, #380]	; (800115c <LCD_FillRect+0x2c8>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d003      	beq.n	8000fee <LCD_FillRect+0x15a>
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d022      	beq.n	8001030 <LCD_FillRect+0x19c>
 8000fea:	e043      	b.n	8001074 <LCD_FillRect+0x1e0>
			case LCD_PRES:
 8000fec:	bf00      	nop
				do {
					cntr = dW;
 8000fee:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8000ff0:	68fc      	ldr	r4, [r7, #12]
					*ptr++ |= mask_fb;
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	1c5c      	adds	r4, r3, #1
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	432a      	orrs	r2, r5
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8000ffe:	e003      	b.n	8001008 <LCD_FillRect+0x174>
						*ptr++ = 0xFF;
 8001000:	4623      	mov	r3, r4
 8001002:	1c5c      	adds	r4, r3, #1
 8001004:	22ff      	movs	r2, #255	; 0xff
 8001006:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001008:	1e73      	subs	r3, r6, #1
 800100a:	b29e      	uxth	r6, r3
 800100c:	2e00      	cmp	r6, #0
 800100e:	d1f7      	bne.n	8001000 <LCD_FillRect+0x16c>
					};
					*ptr |= mask_lb;
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	ea48 0303 	orr.w	r3, r8, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3332      	adds	r3, #50	; 0x32
 800101e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001020:	88bb      	ldrh	r3, [r7, #4]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	80ba      	strh	r2, [r7, #4]
 8001026:	883a      	ldrh	r2, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8df      	bhi.n	8000fec <LCD_FillRect+0x158>
				break;
 800102c:	e087      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 800102e:	bf00      	nop
				do {
					cntr = dW;
 8001030:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001032:	68fc      	ldr	r4, [r7, #12]
					*ptr++ ^= mask_fb;
 8001034:	4623      	mov	r3, r4
 8001036:	1c5c      	adds	r4, r3, #1
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	406a      	eors	r2, r5
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001040:	e005      	b.n	800104e <LCD_FillRect+0x1ba>
						*ptr++ ^= 0xFF;
 8001042:	4623      	mov	r3, r4
 8001044:	1c5c      	adds	r4, r3, #1
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	43d2      	mvns	r2, r2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800104e:	1e73      	subs	r3, r6, #1
 8001050:	b29e      	uxth	r6, r3
 8001052:	2e00      	cmp	r6, #0
 8001054:	d1f5      	bne.n	8001042 <LCD_FillRect+0x1ae>
					};
					*ptr ^= mask_lb;
 8001056:	7823      	ldrb	r3, [r4, #0]
 8001058:	ea88 0303 	eor.w	r3, r8, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3332      	adds	r3, #50	; 0x32
 8001064:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	80ba      	strh	r2, [r7, #4]
 800106c:	883a      	ldrh	r2, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d8dd      	bhi.n	800102e <LCD_FillRect+0x19a>
				break;
 8001072:	e064      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 8001074:	43eb      	mvns	r3, r5
 8001076:	b2dd      	uxtb	r5, r3
				mask_lb = ~mask_lb;
 8001078:	ea6f 0308 	mvn.w	r3, r8
 800107c:	fa5f f883 	uxtb.w	r8, r3
				do {
					cntr = dW;
 8001080:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001082:	68fc      	ldr	r4, [r7, #12]
					*ptr++ &= mask_fb;
 8001084:	4623      	mov	r3, r4
 8001086:	1c5c      	adds	r4, r3, #1
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	402a      	ands	r2, r5
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001090:	e003      	b.n	800109a <LCD_FillRect+0x206>
						*ptr++ = 0x00;
 8001092:	4623      	mov	r3, r4
 8001094:	1c5c      	adds	r4, r3, #1
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800109a:	1e73      	subs	r3, r6, #1
 800109c:	b29e      	uxth	r6, r3
 800109e:	2e00      	cmp	r6, #0
 80010a0:	d1f7      	bne.n	8001092 <LCD_FillRect+0x1fe>
					};
					*ptr &= mask_lb;
 80010a2:	7823      	ldrb	r3, [r4, #0]
 80010a4:	ea08 0303 	and.w	r3, r8, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3332      	adds	r3, #50	; 0x32
 80010b0:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	80ba      	strh	r2, [r7, #4]
 80010b8:	883a      	ldrh	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d8e0      	bhi.n	8001080 <LCD_FillRect+0x1ec>
				break;
 80010be:	bf00      	nop
 80010c0:	e03d      	b.n	800113e <LCD_FillRect+0x2aa>
		}
	} else {
		// Single byte
		mask_fb &= mask_lb;
 80010c2:	ea05 0308 	and.w	r3, r5, r8
 80010c6:	b2dd      	uxtb	r5, r3

		switch (LCD_PixelMode) {
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <LCD_FillRect+0x2c8>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d003      	beq.n	80010d8 <LCD_FillRect+0x244>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d012      	beq.n	80010fa <LCD_FillRect+0x266>
 80010d4:	e021      	b.n	800111a <LCD_FillRect+0x286>
			case LCD_PRES:
 80010d6:	bf00      	nop
				do {
					*ptr_base |= mask_fb;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	432b      	orrs	r3, r5
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3332      	adds	r3, #50	; 0x32
 80010e8:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	80ba      	strh	r2, [r7, #4]
 80010f0:	883a      	ldrh	r2, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d8ef      	bhi.n	80010d6 <LCD_FillRect+0x242>
				break;
 80010f6:	e022      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 80010f8:	bf00      	nop
				do {
					*ptr_base ^= mask_fb;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	406b      	eors	r3, r5
 8001100:	b2da      	uxtb	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3332      	adds	r3, #50	; 0x32
 800110a:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	80ba      	strh	r2, [r7, #4]
 8001112:	883a      	ldrh	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8ef      	bhi.n	80010f8 <LCD_FillRect+0x264>
				break;
 8001118:	e011      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 800111a:	43eb      	mvns	r3, r5
 800111c:	b2dd      	uxtb	r5, r3
				do {
					*ptr_base &= mask_fb;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	402b      	ands	r3, r5
 8001124:	b2da      	uxtb	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3332      	adds	r3, #50	; 0x32
 800112e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	80ba      	strh	r2, [r7, #4]
 8001136:	883a      	ldrh	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f0      	bhi.n	800111e <LCD_FillRect+0x28a>
				break;
 800113c:	bf00      	nop
		}
	}
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000000 	.word	0x20000000
 8001150:	08017994 	.word	0x08017994
 8001154:	0801799c 	.word	0x0801799c
 8001158:	20000394 	.word	0x20000394
 800115c:	20028aa8 	.word	0x20028aa8

08001160 <LCD_Line>:

// Draw line
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Line(int16_t X1, int16_t Y1, int16_t X2, int16_t Y2) {
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	4603      	mov	r3, r0
 8001174:	80bb      	strh	r3, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	807b      	strh	r3, [r7, #2]
 800117a:	4613      	mov	r3, r2
 800117c:	803b      	strh	r3, [r7, #0]
	int16_t dX = X2 - X1;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	82bb      	strh	r3, [r7, #20]
	int16_t dY = Y2 - Y1;
 8001188:	883a      	ldrh	r2, [r7, #0]
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	827b      	strh	r3, [r7, #18]
	int16_t dXsym = (dX > 0) ? 1 : -1;
 8001192:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	dd01      	ble.n	800119e <LCD_Line+0x3e>
 800119a:	2301      	movs	r3, #1
 800119c:	e001      	b.n	80011a2 <LCD_Line+0x42>
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	823b      	strh	r3, [r7, #16]
	int16_t dYsym = (dY > 0) ? 1 : -1;
 80011a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dd01      	ble.n	80011b0 <LCD_Line+0x50>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e001      	b.n	80011b4 <LCD_Line+0x54>
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	81fb      	strh	r3, [r7, #14]

	if (dX == 0) {
 80011b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d106      	bne.n	80011cc <LCD_Line+0x6c>
		LCD_VLine(X1, Y1, Y2);
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	88b9      	ldrh	r1, [r7, #4]
 80011c2:	883a      	ldrh	r2, [r7, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fdd3 	bl	8000d70 <LCD_VLine>
		return;
 80011ca:	e08d      	b.n	80012e8 <LCD_Line+0x188>
	}
	if (dY == 0) {
 80011cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d106      	bne.n	80011e2 <LCD_Line+0x82>
		LCD_HLine(X1, X2, Y1);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	8879      	ldrh	r1, [r7, #2]
 80011d8:	88ba      	ldrh	r2, [r7, #4]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd78 	bl	8000cd0 <LCD_HLine>
		return;
 80011e0:	e082      	b.n	80012e8 <LCD_Line+0x188>
	}

	dX *= dXsym;
 80011e2:	8aba      	ldrh	r2, [r7, #20]
 80011e4:	8a3b      	ldrh	r3, [r7, #16]
 80011e6:	fb12 f303 	smulbb	r3, r2, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	82bb      	strh	r3, [r7, #20]
	dY *= dYsym;
 80011ee:	8a7a      	ldrh	r2, [r7, #18]
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	fb12 f303 	smulbb	r3, r2, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	827b      	strh	r3, [r7, #18]
	int16_t dX2 = dX << 1;
 80011fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	81bb      	strh	r3, [r7, #12]
	int16_t dY2 = dY << 1;
 8001202:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	817b      	strh	r3, [r7, #10]
	int16_t di;

	if (dX >= dY) {
 800120a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800120e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001212:	429a      	cmp	r2, r3
 8001214:	db30      	blt.n	8001278 <LCD_Line+0x118>
		di = dY2 - dX;
 8001216:	897a      	ldrh	r2, [r7, #10]
 8001218:	8abb      	ldrh	r3, [r7, #20]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	b29b      	uxth	r3, r3
 800121e:	82fb      	strh	r3, [r7, #22]
		while (X1 != X2) {
 8001220:	e023      	b.n	800126a <LCD_Line+0x10a>
			LCD_Pixel(X1, Y1);
 8001222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001226:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fbab 	bl	8000988 <LCD_Pixel>
			X1 += dXsym;
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	8a3b      	ldrh	r3, [r7, #16]
 8001236:	4413      	add	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	80fb      	strh	r3, [r7, #6]
			if (di < 0) {
 800123c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001240:	2b00      	cmp	r3, #0
 8001242:	da05      	bge.n	8001250 <LCD_Line+0xf0>
				di += dY2;
 8001244:	8afa      	ldrh	r2, [r7, #22]
 8001246:	897b      	ldrh	r3, [r7, #10]
 8001248:	4413      	add	r3, r2
 800124a:	b29b      	uxth	r3, r3
 800124c:	82fb      	strh	r3, [r7, #22]
 800124e:	e00c      	b.n	800126a <LCD_Line+0x10a>
			} else {
				di += dY2 - dX2;
 8001250:	897a      	ldrh	r2, [r7, #10]
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	b29a      	uxth	r2, r3
 8001258:	8afb      	ldrh	r3, [r7, #22]
 800125a:	4413      	add	r3, r2
 800125c:	b29b      	uxth	r3, r3
 800125e:	82fb      	strh	r3, [r7, #22]
				Y1 += dYsym;
 8001260:	88ba      	ldrh	r2, [r7, #4]
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	4413      	add	r3, r2
 8001266:	b29b      	uxth	r3, r3
 8001268:	80bb      	strh	r3, [r7, #4]
		while (X1 != X2) {
 800126a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800126e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001272:	429a      	cmp	r2, r3
 8001274:	d1d5      	bne.n	8001222 <LCD_Line+0xc2>
 8001276:	e02f      	b.n	80012d8 <LCD_Line+0x178>
			}
		}
	} else {
		di = dX2 - dY;
 8001278:	89ba      	ldrh	r2, [r7, #12]
 800127a:	8a7b      	ldrh	r3, [r7, #18]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	b29b      	uxth	r3, r3
 8001280:	82fb      	strh	r3, [r7, #22]
		while (Y1 != Y2) {
 8001282:	e023      	b.n	80012cc <LCD_Line+0x16c>
			LCD_Pixel(X1, Y1);
 8001284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001288:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fb7a 	bl	8000988 <LCD_Pixel>
			Y1 += dYsym;
 8001294:	88ba      	ldrh	r2, [r7, #4]
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	4413      	add	r3, r2
 800129a:	b29b      	uxth	r3, r3
 800129c:	80bb      	strh	r3, [r7, #4]
			if (di < 0) {
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	da05      	bge.n	80012b2 <LCD_Line+0x152>
				di += dX2;
 80012a6:	8afa      	ldrh	r2, [r7, #22]
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	82fb      	strh	r3, [r7, #22]
 80012b0:	e00c      	b.n	80012cc <LCD_Line+0x16c>
			} else {
				di += dX2 - dY2;
 80012b2:	89ba      	ldrh	r2, [r7, #12]
 80012b4:	897b      	ldrh	r3, [r7, #10]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	8afb      	ldrh	r3, [r7, #22]
 80012bc:	4413      	add	r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	82fb      	strh	r3, [r7, #22]
				X1 += dXsym;
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	8a3b      	ldrh	r3, [r7, #16]
 80012c6:	4413      	add	r3, r2
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	80fb      	strh	r3, [r7, #6]
		while (Y1 != Y2) {
 80012cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d1d5      	bne.n	8001284 <LCD_Line+0x124>
			}
		}
	}
	LCD_Pixel(X1, Y1);
 80012d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012dc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fb50 	bl	8000988 <LCD_Pixel>
}
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <LCD_PutChar>:
// input:
//   X,Y - character top left corner coordinates
//   chr - character to be drawn
//   font - pointer to font
// return: character width in pixels
uint8_t LCD_PutChar(uint16_t X, uint16_t Y, uint8_t chr, const Font_TypeDef *font) {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b088      	sub	sp, #32
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4603      	mov	r3, r0
 80012f8:	81fb      	strh	r3, [r7, #14]
 80012fa:	460b      	mov	r3, r1
 80012fc:	81bb      	strh	r3, [r7, #12]
 80012fe:	4613      	mov	r3, r2
 8001300:	72fb      	strb	r3, [r7, #11]
	uint8_t tmpCh;
	uint8_t bL;
	const uint8_t *pCh;

	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	7afa      	ldrb	r2, [r7, #11]
 8001308:	429a      	cmp	r2, r3
 800130a:	d304      	bcc.n	8001316 <LCD_PutChar+0x28>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	795b      	ldrb	r3, [r3, #5]
 8001310:	7afa      	ldrb	r2, [r7, #11]
 8001312:	429a      	cmp	r2, r3
 8001314:	d902      	bls.n	800131c <LCD_PutChar+0x2e>
		chr = font->font_UnknownChar;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	799b      	ldrb	r3, [r3, #6]
 800131a:	72fb      	strb	r3, [r7, #11]
	}

	// Pointer to the first byte of character in font data array
	pCh = &font->font_Data[(chr - font->font_MinChar) * font->font_BPC];
 800131c:	7afb      	ldrb	r3, [r7, #11]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	7912      	ldrb	r2, [r2, #4]
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	7892      	ldrb	r2, [r2, #2]
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	3307      	adds	r3, #7
 8001332:	617b      	str	r3, [r7, #20]

	// Draw character
	if (font->font_Scan == FONT_V) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	78db      	ldrb	r3, [r3, #3]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d177      	bne.n	800142c <LCD_PutChar+0x13e>
		// Vertical pixels order
		if (font->font_Height < 9) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	785b      	ldrb	r3, [r3, #1]
 8001340:	2b08      	cmp	r3, #8
 8001342:	d829      	bhi.n	8001398 <LCD_PutChar+0xaa>
			// Height is 8 pixels or less (one byte per column)
			pX = X;
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001348:	e01e      	b.n	8001388 <LCD_PutChar+0x9a>
				pY = Y;
 800134a:	89bb      	ldrh	r3, [r7, #12]
 800134c:	83bb      	strh	r3, [r7, #28]
				tmpCh = *pCh++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	617a      	str	r2, [r7, #20]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001358:	e010      	b.n	800137c <LCD_PutChar+0x8e>
					if (tmpCh & 0x01) {
 800135a:	7efb      	ldrb	r3, [r7, #27]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <LCD_PutChar+0x82>
						LCD_Pixel(pX, pY);
 8001364:	8bfb      	ldrh	r3, [r7, #30]
 8001366:	8bba      	ldrh	r2, [r7, #28]
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fb0c 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001370:	7efb      	ldrb	r3, [r7, #27]
 8001372:	085b      	lsrs	r3, r3, #1
 8001374:	76fb      	strb	r3, [r7, #27]
					pY++;
 8001376:	8bbb      	ldrh	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	83bb      	strh	r3, [r7, #28]
				while (tmpCh) {
 800137c:	7efb      	ldrb	r3, [r7, #27]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1eb      	bne.n	800135a <LCD_PutChar+0x6c>
				}
				pX++;
 8001382:	8bfb      	ldrh	r3, [r7, #30]
 8001384:	3301      	adds	r3, #1
 8001386:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001388:	8bfa      	ldrh	r2, [r7, #30]
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	7809      	ldrb	r1, [r1, #0]
 8001390:	440b      	add	r3, r1
 8001392:	429a      	cmp	r2, r3
 8001394:	dbd9      	blt.n	800134a <LCD_PutChar+0x5c>
 8001396:	e0c0      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Height is more than 8 pixels (several bytes per column)
			pX = X;
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800139c:	e03e      	b.n	800141c <LCD_PutChar+0x12e>
				pY = Y;
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 80013a2:	e031      	b.n	8001408 <LCD_PutChar+0x11a>
					bL = 8;
 80013a4:	2308      	movs	r3, #8
 80013a6:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	617a      	str	r2, [r7, #20]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80013b2:	7efb      	ldrb	r3, [r7, #27]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d022      	beq.n	80013fe <LCD_PutChar+0x110>
						while (bL) {
 80013b8:	e01d      	b.n	80013f6 <LCD_PutChar+0x108>
							if (tmpCh & 0x01) {
 80013ba:	7efb      	ldrb	r3, [r7, #27]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <LCD_PutChar+0xe2>
								LCD_Pixel(pX, pY);
 80013c4:	8bfb      	ldrh	r3, [r7, #30]
 80013c6:	8bba      	ldrh	r2, [r7, #28]
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fadc 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80013d0:	7efb      	ldrb	r3, [r7, #27]
 80013d2:	085b      	lsrs	r3, r3, #1
 80013d4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80013d6:	7efb      	ldrb	r3, [r7, #27]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <LCD_PutChar+0xfc>
								pY++;
 80013dc:	8bbb      	ldrh	r3, [r7, #28]
 80013de:	3301      	adds	r3, #1
 80013e0:	83bb      	strh	r3, [r7, #28]
								bL--;
 80013e2:	7ebb      	ldrb	r3, [r7, #26]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	76bb      	strb	r3, [r7, #26]
 80013e8:	e005      	b.n	80013f6 <LCD_PutChar+0x108>
							} else {
								pY += bL;
 80013ea:	7ebb      	ldrb	r3, [r7, #26]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	8bbb      	ldrh	r3, [r7, #28]
 80013f0:	4413      	add	r3, r2
 80013f2:	83bb      	strh	r3, [r7, #28]
								break;
 80013f4:	e008      	b.n	8001408 <LCD_PutChar+0x11a>
						while (bL) {
 80013f6:	7ebb      	ldrb	r3, [r7, #26]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1de      	bne.n	80013ba <LCD_PutChar+0xcc>
 80013fc:	e004      	b.n	8001408 <LCD_PutChar+0x11a>
							}
						}
					} else {
						pY += bL;
 80013fe:	7ebb      	ldrb	r3, [r7, #26]
 8001400:	b29a      	uxth	r2, r3
 8001402:	8bbb      	ldrh	r3, [r7, #28]
 8001404:	4413      	add	r3, r2
 8001406:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 8001408:	8bba      	ldrh	r2, [r7, #28]
 800140a:	89bb      	ldrh	r3, [r7, #12]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	7849      	ldrb	r1, [r1, #1]
 8001410:	440b      	add	r3, r1
 8001412:	429a      	cmp	r2, r3
 8001414:	dbc6      	blt.n	80013a4 <LCD_PutChar+0xb6>
					}
				}
				pX++;
 8001416:	8bfb      	ldrh	r3, [r7, #30]
 8001418:	3301      	adds	r3, #1
 800141a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800141c:	8bfa      	ldrh	r2, [r7, #30]
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	7809      	ldrb	r1, [r1, #0]
 8001424:	440b      	add	r3, r1
 8001426:	429a      	cmp	r2, r3
 8001428:	dbb9      	blt.n	800139e <LCD_PutChar+0xb0>
 800142a:	e076      	b.n	800151a <LCD_PutChar+0x22c>
			}
		}
	} else {
		// Horizontal pixels order
		if (font->font_Width < 9) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d829      	bhi.n	8001488 <LCD_PutChar+0x19a>
			// Width is 8 pixels or less (one byte per row)
			pY = Y;
 8001434:	89bb      	ldrh	r3, [r7, #12]
 8001436:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001438:	e01e      	b.n	8001478 <LCD_PutChar+0x18a>
				pX = X;
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	83fb      	strh	r3, [r7, #30]
				tmpCh = *pCh++;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	617a      	str	r2, [r7, #20]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001448:	e010      	b.n	800146c <LCD_PutChar+0x17e>
					if (tmpCh & 0x01) {
 800144a:	7efb      	ldrb	r3, [r7, #27]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <LCD_PutChar+0x172>
						LCD_Pixel(pX, pY);
 8001454:	8bfb      	ldrh	r3, [r7, #30]
 8001456:	8bba      	ldrh	r2, [r7, #28]
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fa94 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001460:	7efb      	ldrb	r3, [r7, #27]
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	76fb      	strb	r3, [r7, #27]
					pX++;
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	3301      	adds	r3, #1
 800146a:	83fb      	strh	r3, [r7, #30]
				while (tmpCh) {
 800146c:	7efb      	ldrb	r3, [r7, #27]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1eb      	bne.n	800144a <LCD_PutChar+0x15c>
				}
				pY++;
 8001472:	8bbb      	ldrh	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001478:	8bba      	ldrh	r2, [r7, #28]
 800147a:	89bb      	ldrh	r3, [r7, #12]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	7849      	ldrb	r1, [r1, #1]
 8001480:	440b      	add	r3, r1
 8001482:	429a      	cmp	r2, r3
 8001484:	dbd9      	blt.n	800143a <LCD_PutChar+0x14c>
 8001486:	e048      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Width is more than 8 pixels (several bytes per row)
			pY = Y;
 8001488:	89bb      	ldrh	r3, [r7, #12]
 800148a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800148c:	e03e      	b.n	800150c <LCD_PutChar+0x21e>
				pX = X;
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 8001492:	e031      	b.n	80014f8 <LCD_PutChar+0x20a>
					bL = 8;
 8001494:	2308      	movs	r3, #8
 8001496:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	617a      	str	r2, [r7, #20]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80014a2:	7efb      	ldrb	r3, [r7, #27]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <LCD_PutChar+0x200>
						while (bL) {
 80014a8:	e01d      	b.n	80014e6 <LCD_PutChar+0x1f8>
							if (tmpCh & 0x01) {
 80014aa:	7efb      	ldrb	r3, [r7, #27]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <LCD_PutChar+0x1d2>
								LCD_Pixel(pX, pY);
 80014b4:	8bfb      	ldrh	r3, [r7, #30]
 80014b6:	8bba      	ldrh	r2, [r7, #28]
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fa64 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80014c0:	7efb      	ldrb	r3, [r7, #27]
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80014c6:	7efb      	ldrb	r3, [r7, #27]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <LCD_PutChar+0x1ec>
								pX++;
 80014cc:	8bfb      	ldrh	r3, [r7, #30]
 80014ce:	3301      	adds	r3, #1
 80014d0:	83fb      	strh	r3, [r7, #30]
								bL--;
 80014d2:	7ebb      	ldrb	r3, [r7, #26]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	76bb      	strb	r3, [r7, #26]
 80014d8:	e005      	b.n	80014e6 <LCD_PutChar+0x1f8>
							} else {
								pX += bL;
 80014da:	7ebb      	ldrb	r3, [r7, #26]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	8bfb      	ldrh	r3, [r7, #30]
 80014e0:	4413      	add	r3, r2
 80014e2:	83fb      	strh	r3, [r7, #30]
								break;
 80014e4:	e008      	b.n	80014f8 <LCD_PutChar+0x20a>
						while (bL) {
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1de      	bne.n	80014aa <LCD_PutChar+0x1bc>
 80014ec:	e004      	b.n	80014f8 <LCD_PutChar+0x20a>
							}
						}
					} else {
						pX += bL;
 80014ee:	7ebb      	ldrb	r3, [r7, #26]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	8bfb      	ldrh	r3, [r7, #30]
 80014f4:	4413      	add	r3, r2
 80014f6:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 80014f8:	8bfa      	ldrh	r2, [r7, #30]
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	7809      	ldrb	r1, [r1, #0]
 8001500:	440b      	add	r3, r1
 8001502:	429a      	cmp	r2, r3
 8001504:	dbc6      	blt.n	8001494 <LCD_PutChar+0x1a6>
					}
				}
				pY++;
 8001506:	8bbb      	ldrh	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800150c:	8bba      	ldrh	r2, [r7, #28]
 800150e:	89bb      	ldrh	r3, [r7, #12]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	7849      	ldrb	r1, [r1, #1]
 8001514:	440b      	add	r3, r1
 8001516:	429a      	cmp	r2, r3
 8001518:	dbb9      	blt.n	800148e <LCD_PutChar+0x1a0>
			}
		}
	}

	return font->font_Width + 1;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	b2db      	uxtb	r3, r3
}
 8001522:	4618      	mov	r0, r3
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <LCD_PutStr>:
// input:
//   X,Y - top left coordinates of first character
//   str - pointer to zero-terminated string
//   font - pointer to font
// return: string width in pixels
uint16_t LCD_PutStr(uint16_t X, uint16_t Y, const char *str, const Font_TypeDef *font) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60ba      	str	r2, [r7, #8]
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4603      	mov	r3, r0
 8001538:	81fb      	strh	r3, [r7, #14]
 800153a:	460b      	mov	r3, r1
 800153c:	81bb      	strh	r3, [r7, #12]
	uint16_t pX = X;
 800153e:	89fb      	ldrh	r3, [r7, #14]
 8001540:	82fb      	strh	r3, [r7, #22]
	uint16_t eX = scr_width - font->font_Width - 1;
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <LCD_PutStr+0x6c>)
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	82bb      	strh	r3, [r7, #20]

	while (*str) {
 8001554:	e011      	b.n	800157a <LCD_PutStr+0x4e>
		pX += LCD_PutChar(pX, Y, *str++, font);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	60ba      	str	r2, [r7, #8]
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	89b9      	ldrh	r1, [r7, #12]
 8001560:	8af8      	ldrh	r0, [r7, #22]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f7ff fec3 	bl	80012ee <LCD_PutChar>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	8afb      	ldrh	r3, [r7, #22]
 800156e:	4413      	add	r3, r2
 8001570:	82fb      	strh	r3, [r7, #22]
		if (pX > eX) break;
 8001572:	8afa      	ldrh	r2, [r7, #22]
 8001574:	8abb      	ldrh	r3, [r7, #20]
 8001576:	429a      	cmp	r2, r3
 8001578:	d804      	bhi.n	8001584 <LCD_PutStr+0x58>
	while (*str) {
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1e9      	bne.n	8001556 <LCD_PutStr+0x2a>
 8001582:	e000      	b.n	8001586 <LCD_PutStr+0x5a>
		if (pX > eX) break;
 8001584:	bf00      	nop
	}

	return (pX - X);
 8001586:	8afa      	ldrh	r2, [r7, #22]
 8001588:	89fb      	ldrh	r3, [r7, #14]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	b29b      	uxth	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20028aaa 	.word	0x20028aaa

0800159c <LCD_PutInt>:
// input:
//   X,Y - top left coordinates of first symbol
//   num - signed integer value
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutInt(uint16_t X, uint16_t Y, int32_t num, const Font_TypeDef *font) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4603      	mov	r3, r0
 80015a8:	81fb      	strh	r3, [r7, #14]
 80015aa:	460b      	mov	r3, r1
 80015ac:	81bb      	strh	r3, [r7, #12]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t pX = X;
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	843b      	strh	r3, [r7, #32]

	// String termination character
	*pStr++ = '\0';
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	627a      	str	r2, [r7, #36]	; 0x24
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]

	// Convert number to characters
	if (num < 0) {
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da05      	bge.n	80015da <LCD_PutInt+0x3e>
		neg = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	425b      	negs	r3, r3
 80015d8:	60bb      	str	r3, [r7, #8]
	}
	do { *pStr++ = (num % 10) + '0'; } while (num /= 10);
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <LCD_PutInt+0xc8>)
 80015de:	fb83 1302 	smull	r1, r3, r3, r2
 80015e2:	1099      	asrs	r1, r3, #2
 80015e4:	17d3      	asrs	r3, r2, #31
 80015e6:	1ac9      	subs	r1, r1, r3
 80015e8:	460b      	mov	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	1ad1      	subs	r1, r2, r3
 80015f2:	b2ca      	uxtb	r2, r1
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	1c59      	adds	r1, r3, #1
 80015f8:	6279      	str	r1, [r7, #36]	; 0x24
 80015fa:	3230      	adds	r2, #48	; 0x30
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <LCD_PutInt+0xc8>)
 8001604:	fb82 1203 	smull	r1, r2, r2, r3
 8001608:	1092      	asrs	r2, r2, #2
 800160a:	17db      	asrs	r3, r3, #31
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1e1      	bne.n	80015da <LCD_PutInt+0x3e>
	if (neg) {
 8001616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800161a:	2b00      	cmp	r3, #0
 800161c:	d011      	beq.n	8001642 <LCD_PutInt+0xa6>
		*pStr++ = '-';
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	627a      	str	r2, [r7, #36]	; 0x24
 8001624:	222d      	movs	r2, #45	; 0x2d
 8001626:	701a      	strb	r2, [r3, #0]
	}

	// Draw a number
	while (*--pStr) {
 8001628:	e00b      	b.n	8001642 <LCD_PutInt+0xa6>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	89b9      	ldrh	r1, [r7, #12]
 8001630:	8c38      	ldrh	r0, [r7, #32]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f7ff fe5b 	bl	80012ee <LCD_PutChar>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	8c3b      	ldrh	r3, [r7, #32]
 800163e:	4413      	add	r3, r2
 8001640:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	3b01      	subs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ec      	bne.n	800162a <LCD_PutInt+0x8e>
	}

	return (pX - X);
 8001650:	8c3b      	ldrh	r3, [r7, #32]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b2db      	uxtb	r3, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	66666667 	.word	0x66666667

08001668 <LCD_PutIntF>:
//   X,Y - top left coordinates of first symbol
//   num - unsigned integer value
//   decimals - number of digits after decimal point
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutIntF(uint16_t X, uint16_t Y, int32_t num, uint8_t decimals, const Font_TypeDef *font) {
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b08b      	sub	sp, #44	; 0x2c
 800166c:	af00      	add	r7, sp, #0
 800166e:	60ba      	str	r2, [r7, #8]
 8001670:	461a      	mov	r2, r3
 8001672:	4603      	mov	r3, r0
 8001674:	81fb      	strh	r3, [r7, #14]
 8001676:	460b      	mov	r3, r1
 8001678:	81bb      	strh	r3, [r7, #12]
 800167a:	4613      	mov	r3, r2
 800167c:	71fb      	strb	r3, [r7, #7]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t strLen = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint16_t pX = X;
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	843b      	strh	r3, [r7, #32]

	// Convert number to characters
	*pStr++ = '\0'; // String termination character
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	627a      	str	r2, [r7, #36]	; 0x24
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
	if (num < 0) {
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da05      	bge.n	80016b0 <LCD_PutIntF+0x48>
		neg = 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	425b      	negs	r3, r3
 80016ae:	60bb      	str	r3, [r7, #8]
	}
	do {
		*pStr++ = (num % 10) + '0';
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <LCD_PutIntF+0x160>)
 80016b4:	fb83 1302 	smull	r1, r3, r3, r2
 80016b8:	1099      	asrs	r1, r3, #2
 80016ba:	17d3      	asrs	r3, r2, #31
 80016bc:	1ac9      	subs	r1, r1, r3
 80016be:	460b      	mov	r3, r1
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	1ad1      	subs	r1, r2, r3
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	1c59      	adds	r1, r3, #1
 80016ce:	6279      	str	r1, [r7, #36]	; 0x24
 80016d0:	3230      	adds	r2, #48	; 0x30
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]
		strLen++;
 80016d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80016da:	3301      	adds	r3, #1
 80016dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	} while (num /= 10);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4a39      	ldr	r2, [pc, #228]	; (80017c8 <LCD_PutIntF+0x160>)
 80016e4:	fb82 1203 	smull	r1, r2, r2, r3
 80016e8:	1092      	asrs	r2, r2, #2
 80016ea:	17db      	asrs	r3, r3, #31
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1dc      	bne.n	80016b0 <LCD_PutIntF+0x48>

	// Add leading zeroes
	if (strLen <= decimals) {
 80016f6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d80f      	bhi.n	8001720 <LCD_PutIntF+0xb8>
		while (strLen <= decimals) {
 8001700:	e009      	b.n	8001716 <LCD_PutIntF+0xae>
			*pStr++ = '0';
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	627a      	str	r2, [r7, #36]	; 0x24
 8001708:	2230      	movs	r2, #48	; 0x30
 800170a:	701a      	strb	r2, [r3, #0]
			strLen++;
 800170c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001710:	3301      	adds	r3, #1
 8001712:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		while (strLen <= decimals) {
 8001716:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	429a      	cmp	r2, r3
 800171e:	d9f0      	bls.n	8001702 <LCD_PutIntF+0x9a>
		}
	}

	// Minus sign?
	if (neg) {
 8001720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03d      	beq.n	80017a4 <LCD_PutIntF+0x13c>
		*pStr++ = '-';
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	627a      	str	r2, [r7, #36]	; 0x24
 800172e:	222d      	movs	r2, #45	; 0x2d
 8001730:	701a      	strb	r2, [r3, #0]
		strLen++;
 8001732:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001736:	3301      	adds	r3, #1
 8001738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	}

	// Draw a number
	while (*--pStr) {
 800173c:	e032      	b.n	80017a4 <LCD_PutIntF+0x13c>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	781a      	ldrb	r2, [r3, #0]
 8001742:	89b9      	ldrh	r1, [r7, #12]
 8001744:	8c38      	ldrh	r0, [r7, #32]
 8001746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001748:	f7ff fdd1 	bl	80012ee <LCD_PutChar>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	8c3b      	ldrh	r3, [r7, #32]
 8001752:	4413      	add	r3, r2
 8001754:	843b      	strh	r3, [r7, #32]
		if (decimals && (--strLen == decimals)) {
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <LCD_PutIntF+0x13c>
 800175c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001760:	3b01      	subs	r3, #1
 8001762:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001766:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	429a      	cmp	r2, r3
 800176e:	d119      	bne.n	80017a4 <LCD_PutIntF+0x13c>
			// Draw decimal point
			LCD_Rect(pX, Y + font->font_Height - 2, pX + 1, Y + font->font_Height - 1);
 8001770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	b29a      	uxth	r2, r3
 8001776:	89bb      	ldrh	r3, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b02      	subs	r3, #2
 800177e:	b299      	uxth	r1, r3
 8001780:	8c3b      	ldrh	r3, [r7, #32]
 8001782:	3301      	adds	r3, #1
 8001784:	b29c      	uxth	r4, r3
 8001786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001788:	785b      	ldrb	r3, [r3, #1]
 800178a:	b29a      	uxth	r2, r3
 800178c:	89bb      	ldrh	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29b      	uxth	r3, r3
 8001796:	8c38      	ldrh	r0, [r7, #32]
 8001798:	4622      	mov	r2, r4
 800179a:	f7ff fb39 	bl	8000e10 <LCD_Rect>
			pX += 3;
 800179e:	8c3b      	ldrh	r3, [r7, #32]
 80017a0:	3303      	adds	r3, #3
 80017a2:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	3b01      	subs	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1c5      	bne.n	800173e <LCD_PutIntF+0xd6>
		}
	}

	return (pX - X);
 80017b2:	8c3b      	ldrh	r3, [r7, #32]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	89fb      	ldrh	r3, [r7, #14]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	b2db      	uxtb	r3, r3
}
 80017be:	4618      	mov	r0, r3
 80017c0:	372c      	adds	r7, #44	; 0x2c
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	66666667 	.word	0x66666667

080017cc <drawUpDownArrow>:
		   HAL_SPI_Transmit(&hspi4, (uint8_t *)test, sizeof(test), 100);
	   	   SMLCD_SCS_L;
		   HAL_Delay(5);
	   }
}
void drawUpDownArrow(uint16_t X, uint16_t Y, uint16_t S, uint16_t dir){
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4623      	mov	r3, r4
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	4603      	mov	r3, r0
 80017e0:	80bb      	strh	r3, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	803b      	strh	r3, [r7, #0]
	int i=X;
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	61bb      	str	r3, [r7, #24]
	int j=Y;
 80017ee:	88bb      	ldrh	r3, [r7, #4]
 80017f0:	617b      	str	r3, [r7, #20]
	int size=S;
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	613b      	str	r3, [r7, #16]
	int direction = dir;
 80017f6:	883b      	ldrh	r3, [r7, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
	int lineCounter;
	if((direction==0)||(direction==1)){
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <drawUpDownArrow+0x3a>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d11f      	bne.n	8001846 <drawUpDownArrow+0x7a>
		LCD_FillRect(i-size, j-(size*2), i+size, j+(size*2));
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	b29a      	uxth	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	b29b      	uxth	r3, r3
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	b298      	uxth	r0, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	b29a      	uxth	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	b29b      	uxth	r3, r3
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	b29b      	uxth	r3, r3
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	b299      	uxth	r1, r3
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	b29a      	uxth	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	b29b      	uxth	r3, r3
 800182a:	4413      	add	r3, r2
 800182c:	b29c      	uxth	r4, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	b29b      	uxth	r3, r3
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4413      	add	r3, r2
 800183c:	b29b      	uxth	r3, r3
 800183e:	4622      	mov	r2, r4
 8001840:	f7ff fb28 	bl	8000e94 <LCD_FillRect>
 8001844:	e01e      	b.n	8001884 <drawUpDownArrow+0xb8>
	}
	else{
		LCD_FillRect(i-(size*2), j-size, i+(size*2), j+size);
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	b29a      	uxth	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	b29b      	uxth	r3, r3
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	b298      	uxth	r0, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	b29a      	uxth	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	b29b      	uxth	r3, r3
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b299      	uxth	r1, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	b29b      	uxth	r3, r3
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	b29b      	uxth	r3, r3
 800186e:	4413      	add	r3, r2
 8001870:	b29c      	uxth	r4, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	b29a      	uxth	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4413      	add	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	4622      	mov	r2, r4
 8001880:	f7ff fb08 	bl	8000e94 <LCD_FillRect>
	}
	switch(direction)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b03      	cmp	r3, #3
 8001888:	f200 8234 	bhi.w	8001cf4 <drawUpDownArrow+0x528>
 800188c:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <drawUpDownArrow+0xc8>)
 800188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001892:	bf00      	nop
 8001894:	080018a5 	.word	0x080018a5
 8001898:	080019bb 	.word	0x080019bb
 800189c:	08001ad1 	.word	0x08001ad1
 80018a0:	08001be3 	.word	0x08001be3
	{
	case 0: //upwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e03d      	b.n	8001926 <drawUpDownArrow+0x15a>
			LCD_Line(i-(size*2)+lineCounter,j-(size*2 +1)-lineCounter, i+(size*2)-lineCounter, j-(size*2 +1)-lineCounter);
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b218      	sxth	r0, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29b      	uxth	r3, r3
 80018e0:	b219      	sxth	r1, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b21c      	sxth	r4, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	b29b      	uxth	r3, r3
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	b29b      	uxth	r3, r3
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	b29a      	uxth	r2, r3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	b29b      	uxth	r3, r3
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	b21b      	sxth	r3, r3
 800191a:	4622      	mov	r2, r4
 800191c:	f7ff fc20 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3301      	adds	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbbc      	blt.n	80018aa <drawUpDownArrow+0xde>
		}
		LCD_Line(i-(size*2),j-(size*2 +1),i,j-(size*4));
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	b29a      	uxth	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	b29b      	uxth	r3, r3
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	b29b      	uxth	r3, r3
 8001940:	b218      	sxth	r0, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	b29a      	uxth	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	b29b      	uxth	r3, r3
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	b29b      	uxth	r3, r3
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b01      	subs	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	b219      	sxth	r1, r3
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	b21c      	sxth	r4, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	b29a      	uxth	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	b29b      	uxth	r3, r3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	b29b      	uxth	r3, r3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	b29b      	uxth	r3, r3
 800196c:	b21b      	sxth	r3, r3
 800196e:	4622      	mov	r2, r4
 8001970:	f7ff fbf6 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j-(size*2 +1),i,j-(size*4));
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	b29b      	uxth	r3, r3
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b29b      	uxth	r3, r3
 8001984:	b218      	sxth	r0, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	b29a      	uxth	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	b29b      	uxth	r3, r3
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	b29b      	uxth	r3, r3
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b29b      	uxth	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	b29b      	uxth	r3, r3
 800199a:	b219      	sxth	r1, r3
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	b21c      	sxth	r4, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	4622      	mov	r2, r4
 80019b4:	f7ff fbd4 	bl	8001160 <LCD_Line>
		break;
 80019b8:	e19c      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 1:  //downwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e03d      	b.n	8001a3c <drawUpDownArrow+0x270>
			LCD_Line(i-(size*2)+lineCounter,j+(size*2 +1)+lineCounter, i+(size*2)-lineCounter, j+(size*2 +1)+lineCounter);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	b218      	sxth	r0, r3
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3301      	adds	r3, #1
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b219      	sxth	r1, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	b21c      	sxth	r4, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	4622      	mov	r2, r4
 8001a32:	f7ff fb95 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbbc      	blt.n	80019c0 <drawUpDownArrow+0x1f4>
		}
		LCD_Line(i-(size*2),j+(size*2 +1),i,j+(size*4));
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b218      	sxth	r0, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b219      	sxth	r1, r3
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	b21c      	sxth	r4, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4622      	mov	r2, r4
 8001a86:	f7ff fb6b 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j+(size*2 +1),i,j+(size*4));
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b218      	sxth	r0, r3
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b219      	sxth	r1, r3
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	b21c      	sxth	r4, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	4622      	mov	r2, r4
 8001aca:	f7ff fb49 	bl	8001160 <LCD_Line>
		break;
 8001ace:	e111      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 2:{   //rightwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	e03d      	b.n	8001b52 <drawUpDownArrow+0x386>
			LCD_Line(i+(size*2+1)+lineCounter,j+(size*2)-lineCounter, i+(size*2+1)+lineCounter, j-(size*2)+lineCounter);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	b218      	sxth	r0, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	b219      	sxth	r1, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21c      	sxth	r4, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4622      	mov	r2, r4
 8001b48:	f7ff fb0a 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbbc      	blt.n	8001ad6 <drawUpDownArrow+0x30a>
		}
		LCD_Line(i+(size*2+1),j+(size*2),i+(size*4),j);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b218      	sxth	r0, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b219      	sxth	r1, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	f7ff fae1 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2+1),j-(size*2),i+(size*4),j);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	b218      	sxth	r0, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b219      	sxth	r1, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	f7ff fac0 	bl	8001160 <LCD_Line>
		break;
 8001be0:	e088      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 3:{   //leftwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e03d      	b.n	8001c64 <drawUpDownArrow+0x498>
			LCD_Line(i-(size*2+1)-lineCounter,j+(size*2)-lineCounter, i-(size*2+1)-lineCounter, j-(size*2)+lineCounter);
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b218      	sxth	r0, r3
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b219      	sxth	r1, r3
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	b21c      	sxth	r4, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4622      	mov	r2, r4
 8001c5a:	f7ff fa81 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	dbbc      	blt.n	8001be8 <drawUpDownArrow+0x41c>
		}
		LCD_Line(i-(size*2+1),j+(size*2),i-(size*4),j);
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b218      	sxth	r0, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	b219      	sxth	r1, r3
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	f7ff fa58 	bl	8001160 <LCD_Line>
		LCD_Line(i-(size*2+1),j-(size*2),i-(size*4),j);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b218      	sxth	r0, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b219      	sxth	r1, r3
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	f7ff fa37 	bl	8001160 <LCD_Line>
		break;
 8001cf2:	bf00      	nop
	}
	}

}
 8001cf4:	bf00      	nop
 8001cf6:	3724      	adds	r7, #36	; 0x24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b09d      	sub	sp, #116	; 0x74
 8001d00:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d02:	f007 fb9a 	bl	800943a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d06:	f000 fa0f 	bl	8002128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0a:	f001 f845 	bl	8002d98 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d0e:	f001 f801 	bl	8002d14 <MX_DMA_Init>
  MX_ADC1_Init();
 8001d12:	f000 fab1 	bl	8002278 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001d16:	f000 fb8d 	bl	8002434 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001d1a:	f000 fc07 	bl	800252c <MX_ADC3_Init>
  MX_I2C1_Init();
 8001d1e:	f000 fc9d 	bl	800265c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d22:	f000 fcdb 	bl	80026dc <MX_I2C2_Init>
  MX_I2C3_Init();
 8001d26:	f000 fd19 	bl	800275c <MX_I2C3_Init>
  MX_I2C4_Init();
 8001d2a:	f000 fd59 	bl	80027e0 <MX_I2C4_Init>
  MX_RTC_Init();
 8001d2e:	f000 fd97 	bl	8002860 <MX_RTC_Init>
  MX_SPI4_Init();
 8001d32:	f000 fdbb 	bl	80028ac <MX_SPI4_Init>
  MX_SPI5_Init();
 8001d36:	f000 fdf7 	bl	8002928 <MX_SPI5_Init>
  MX_TIM4_Init();
 8001d3a:	f000 fe33 	bl	80029a4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001d3e:	f000 fea9 	bl	8002a94 <MX_TIM5_Init>
  MX_UART4_Init();
 8001d42:	f000 ff29 	bl	8002b98 <MX_UART4_Init>
  MX_UART5_Init();
 8001d46:	f000 ff57 	bl	8002bf8 <MX_UART5_Init>
  MX_UART7_Init();
 8001d4a:	f000 ff85 	bl	8002c58 <MX_UART7_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d4e:	f000 ffb3 	bl	8002cb8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_ConfigChannel();
  outputGPIOBufInitialization();
 8001d52:	f001 f9d1 	bl	80030f8 <outputGPIOBufInitialization>
  memset(errorLEDState,0,sizeof(errorLEDState));
 8001d56:	220c      	movs	r2, #12
 8001d58:	2100      	movs	r1, #0
 8001d5a:	48ce      	ldr	r0, [pc, #824]	; (8002094 <main+0x398>)
 8001d5c:	f011 fa1d 	bl	801319a <memset>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	49cc      	ldr	r1, [pc, #816]	; (8002098 <main+0x39c>)
 8001d66:	48cd      	ldr	r0, [pc, #820]	; (800209c <main+0x3a0>)
 8001d68:	f007 fd3c 	bl	80097e4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	49cb      	ldr	r1, [pc, #812]	; (80020a0 <main+0x3a4>)
 8001d72:	48cc      	ldr	r0, [pc, #816]	; (80020a4 <main+0x3a8>)
 8001d74:	f007 fd36 	bl	80097e4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8001d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7c:	49ca      	ldr	r1, [pc, #808]	; (80020a8 <main+0x3ac>)
 8001d7e:	48cb      	ldr	r0, [pc, #812]	; (80020ac <main+0x3b0>)
 8001d80:	f007 fd30 	bl	80097e4 <HAL_ADC_Start_DMA>
  uint8_t data[5];
  int x;
  for(x=0;x<5;x++){
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e00c      	b.n	8001da4 <main+0xa8>
	  data[x]=0xfa+x;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	3b06      	subs	r3, #6
 8001d90:	b2d9      	uxtb	r1, r3
 8001d92:	f107 0208 	add.w	r2, r7, #8
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	4413      	add	r3, r2
 8001d9a:	460a      	mov	r2, r1
 8001d9c:	701a      	strb	r2, [r3, #0]
  for(x=0;x<5;x++){
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3301      	adds	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	ddef      	ble.n	8001d8a <main+0x8e>
  }
  writeDataToSpareEEPROM((uint8_t*)data,SPARE_ADDRESS,0x00,sizeof(data),100);
 8001daa:	f107 0008 	add.w	r0, r7, #8
 8001dae:	2364      	movs	r3, #100	; 0x64
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2305      	movs	r3, #5
 8001db4:	2200      	movs	r2, #0
 8001db6:	21a6      	movs	r1, #166	; 0xa6
 8001db8:	f007 faba 	bl	8009330 <writeDataToSpareEEPROM>
  for(int x=0;x<5;x++){
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	e008      	b.n	8001dd4 <main+0xd8>
	  data[x]=0;
 8001dc2:	f107 0208 	add.w	r2, r7, #8
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4413      	add	r3, r2
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
  for(int x=0;x<5;x++){
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	ddf3      	ble.n	8001dc2 <main+0xc6>
  }
  readDataFromSpareEEPROM((uint8_t*)data,SPARE_ADDRESS,0x00,sizeof(data),100);
 8001dda:	f107 0008 	add.w	r0, r7, #8
 8001dde:	2364      	movs	r3, #100	; 0x64
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2305      	movs	r3, #5
 8001de4:	2200      	movs	r2, #0
 8001de6:	21a6      	movs	r1, #166	; 0xa6
 8001de8:	f007 fae0 	bl	80093ac <readDataFromSpareEEPROM>
  data[1]=0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	727b      	strb	r3, [r7, #9]
  uint8_t spiDataRead[6];
  memset(data,0x00, sizeof(data));
 8001df0:	f107 0308 	add.w	r3, r7, #8
 8001df4:	2205      	movs	r2, #5
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f011 f9ce 	bl	801319a <memset>
  winbondSPIDeviceIDRead(hspi5,(uint8_t*)spiDataRead);
 8001dfe:	4cac      	ldr	r4, [pc, #688]	; (80020b0 <main+0x3b4>)
 8001e00:	463b      	mov	r3, r7
 8001e02:	9315      	str	r3, [sp, #84]	; 0x54
 8001e04:	4668      	mov	r0, sp
 8001e06:	f104 0310 	add.w	r3, r4, #16
 8001e0a:	2254      	movs	r2, #84	; 0x54
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f011 f9b9 	bl	8013184 <memcpy>
 8001e12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e16:	f002 f9ff 	bl	8004218 <winbondSPIDeviceIDRead>
  //char buf[30];
  spareUartTransmitRead("Lets see what comes out!");
 8001e1a:	48a6      	ldr	r0, [pc, #664]	; (80020b4 <main+0x3b8>)
 8001e1c:	f002 fa22 	bl	8004264 <spareUartTransmitRead>
  x=0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]


  configureLEDDriver();
 8001e24:	f001 fc0c 	bl	8003640 <configureLEDDriver>
    setErrorLED(0,ON);
 8001e28:	2101      	movs	r1, #1
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f001 fc94 	bl	8003758 <setErrorLED>
    HAL_Delay(1000);
 8001e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e34:	f007 fb2e 	bl	8009494 <HAL_Delay>
    setErrorLED(1,OFF);
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f001 fc8c 	bl	8003758 <setErrorLED>
    setErrorLED(8,ON);
 8001e40:	2101      	movs	r1, #1
 8001e42:	2008      	movs	r0, #8
 8001e44:	f001 fc88 	bl	8003758 <setErrorLED>
    HAL_Delay(1000);
 8001e48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e4c:	f007 fb22 	bl	8009494 <HAL_Delay>
    setErrorLED(8,OFF);
 8001e50:	2100      	movs	r1, #0
 8001e52:	2008      	movs	r0, #8
 8001e54:	f001 fc80 	bl	8003758 <setErrorLED>
    setErrorLED(9,ON);
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2009      	movs	r0, #9
 8001e5c:	f001 fc7c 	bl	8003758 <setErrorLED>
    HAL_Delay(1000);
 8001e60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e64:	f007 fb16 	bl	8009494 <HAL_Delay>
    setErrorLED(8,ON);
 8001e68:	2101      	movs	r1, #1
 8001e6a:	2008      	movs	r0, #8
 8001e6c:	f001 fc74 	bl	8003758 <setErrorLED>
    setErrorLED(9,ON);
 8001e70:	2101      	movs	r1, #1
 8001e72:	2009      	movs	r0, #9
 8001e74:	f001 fc70 	bl	8003758 <setErrorLED>
    HAL_Delay(1000);
 8001e78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e7c:	f007 fb0a 	bl	8009494 <HAL_Delay>
    setErrorLED(9,OFF);
 8001e80:	2100      	movs	r1, #0
 8001e82:	2009      	movs	r0, #9
 8001e84:	f001 fc68 	bl	8003758 <setErrorLED>
    BTN0_ON;
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2104      	movs	r1, #4
 8001e8c:	488a      	ldr	r0, [pc, #552]	; (80020b8 <main+0x3bc>)
 8001e8e:	f008 ff7b 	bl	800ad88 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e92:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e96:	f007 fafd 	bl	8009494 <HAL_Delay>
    BTN1_ON;
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	2108      	movs	r1, #8
 8001e9e:	4886      	ldr	r0, [pc, #536]	; (80020b8 <main+0x3bc>)
 8001ea0:	f008 ff72 	bl	800ad88 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001ea4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ea8:	f007 faf4 	bl	8009494 <HAL_Delay>
    BTN2_ON;
 8001eac:	2201      	movs	r2, #1
 8001eae:	2110      	movs	r1, #16
 8001eb0:	4881      	ldr	r0, [pc, #516]	; (80020b8 <main+0x3bc>)
 8001eb2:	f008 ff69 	bl	800ad88 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001eb6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001eba:	f007 faeb 	bl	8009494 <HAL_Delay>
    BTN3_ON;
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2120      	movs	r1, #32
 8001ec2:	487d      	ldr	r0, [pc, #500]	; (80020b8 <main+0x3bc>)
 8001ec4:	f008 ff60 	bl	800ad88 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001ec8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ecc:	f007 fae2 	bl	8009494 <HAL_Delay>
    BTN4_ON;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed6:	4878      	ldr	r0, [pc, #480]	; (80020b8 <main+0x3bc>)
 8001ed8:	f008 ff56 	bl	800ad88 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001edc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ee0:	f007 fad8 	bl	8009494 <HAL_Delay>
    BTN5_ON;
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eea:	4873      	ldr	r0, [pc, #460]	; (80020b8 <main+0x3bc>)
 8001eec:	f008 ff4c 	bl	800ad88 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001ef0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ef4:	f007 face 	bl	8009494 <HAL_Delay>
    EDL_SW_ON;
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001efe:	486f      	ldr	r0, [pc, #444]	; (80020bc <main+0x3c0>)
 8001f00:	f008 ff42 	bl	800ad88 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f04:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f08:	f007 fac4 	bl	8009494 <HAL_Delay>
    EX_SW_ON;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f12:	486a      	ldr	r0, [pc, #424]	; (80020bc <main+0x3c0>)
 8001f14:	f008 ff38 	bl	800ad88 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f18:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f1c:	f007 faba 	bl	8009494 <HAL_Delay>
    BTN0_OFF;
 8001f20:	2200      	movs	r2, #0
 8001f22:	2104      	movs	r1, #4
 8001f24:	4864      	ldr	r0, [pc, #400]	; (80020b8 <main+0x3bc>)
 8001f26:	f008 ff2f 	bl	800ad88 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f2e:	f007 fab1 	bl	8009494 <HAL_Delay>
    BTN1_OFF;
 8001f32:	2200      	movs	r2, #0
 8001f34:	2108      	movs	r1, #8
 8001f36:	4860      	ldr	r0, [pc, #384]	; (80020b8 <main+0x3bc>)
 8001f38:	f008 ff26 	bl	800ad88 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f3c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f40:	f007 faa8 	bl	8009494 <HAL_Delay>
    BTN2_OFF;
 8001f44:	2200      	movs	r2, #0
 8001f46:	2110      	movs	r1, #16
 8001f48:	485b      	ldr	r0, [pc, #364]	; (80020b8 <main+0x3bc>)
 8001f4a:	f008 ff1d 	bl	800ad88 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f4e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f52:	f007 fa9f 	bl	8009494 <HAL_Delay>
    BTN3_OFF;
 8001f56:	2200      	movs	r2, #0
 8001f58:	2120      	movs	r1, #32
 8001f5a:	4857      	ldr	r0, [pc, #348]	; (80020b8 <main+0x3bc>)
 8001f5c:	f008 ff14 	bl	800ad88 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f60:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f64:	f007 fa96 	bl	8009494 <HAL_Delay>
    BTN4_OFF;
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6e:	4852      	ldr	r0, [pc, #328]	; (80020b8 <main+0x3bc>)
 8001f70:	f008 ff0a 	bl	800ad88 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f74:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f78:	f007 fa8c 	bl	8009494 <HAL_Delay>
    BTN5_OFF;
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f82:	484d      	ldr	r0, [pc, #308]	; (80020b8 <main+0x3bc>)
 8001f84:	f008 ff00 	bl	800ad88 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f8c:	f007 fa82 	bl	8009494 <HAL_Delay>
    EDL_SW_OFF;
 8001f90:	2200      	movs	r2, #0
 8001f92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f96:	4849      	ldr	r0, [pc, #292]	; (80020bc <main+0x3c0>)
 8001f98:	f008 fef6 	bl	800ad88 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001fa0:	f007 fa78 	bl	8009494 <HAL_Delay>
    EX_SW_OFF;
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001faa:	4844      	ldr	r0, [pc, #272]	; (80020bc <main+0x3c0>)
 8001fac:	f008 feec 	bl	800ad88 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001fb0:	f00e f9aa 	bl	8010308 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(startHeartbeat, NULL, &Heartbeat_attributes);
 8001fb4:	4a42      	ldr	r2, [pc, #264]	; (80020c0 <main+0x3c4>)
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4842      	ldr	r0, [pc, #264]	; (80020c4 <main+0x3c8>)
 8001fba:	f00e fa0f 	bl	80103dc <osThreadNew>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <main+0x3cc>)
 8001fc2:	601a      	str	r2, [r3, #0]

  /* creation of adcRead */
  adcReadHandle = osThreadNew(startADCRead, NULL, &adcRead_attributes);
 8001fc4:	4a41      	ldr	r2, [pc, #260]	; (80020cc <main+0x3d0>)
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4841      	ldr	r0, [pc, #260]	; (80020d0 <main+0x3d4>)
 8001fca:	f00e fa07 	bl	80103dc <osThreadNew>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <main+0x3d8>)
 8001fd2:	601a      	str	r2, [r3, #0]

  /* creation of DatScreenBlink */
  DatScreenBlinkHandle = osThreadNew(GetDaScreenBlink, NULL, &DatScreenBlink_attributes);
 8001fd4:	4a40      	ldr	r2, [pc, #256]	; (80020d8 <main+0x3dc>)
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4840      	ldr	r0, [pc, #256]	; (80020dc <main+0x3e0>)
 8001fda:	f00e f9ff 	bl	80103dc <osThreadNew>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	4b3f      	ldr	r3, [pc, #252]	; (80020e0 <main+0x3e4>)
 8001fe2:	601a      	str	r2, [r3, #0]

  /* creation of gpioInputRead */
  gpioInputReadHandle = osThreadNew(startGpioInputRead, NULL, &gpioInputRead_attributes);
 8001fe4:	4a3f      	ldr	r2, [pc, #252]	; (80020e4 <main+0x3e8>)
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	483f      	ldr	r0, [pc, #252]	; (80020e8 <main+0x3ec>)
 8001fea:	f00e f9f7 	bl	80103dc <osThreadNew>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	4b3e      	ldr	r3, [pc, #248]	; (80020ec <main+0x3f0>)
 8001ff2:	601a      	str	r2, [r3, #0]

  /* creation of navigationTask */
  navigationTaskHandle = osThreadNew(startNavigationTask, NULL, &navigationTask_attributes);
 8001ff4:	4a3e      	ldr	r2, [pc, #248]	; (80020f0 <main+0x3f4>)
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	483e      	ldr	r0, [pc, #248]	; (80020f4 <main+0x3f8>)
 8001ffa:	f00e f9ef 	bl	80103dc <osThreadNew>
 8001ffe:	4602      	mov	r2, r0
 8002000:	4b3d      	ldr	r3, [pc, #244]	; (80020f8 <main+0x3fc>)
 8002002:	601a      	str	r2, [r3, #0]

  /* creation of errorLEDs */
  errorLEDsHandle = osThreadNew(startErrorLEDs, NULL, &errorLEDs_attributes);
 8002004:	4a3d      	ldr	r2, [pc, #244]	; (80020fc <main+0x400>)
 8002006:	2100      	movs	r1, #0
 8002008:	483d      	ldr	r0, [pc, #244]	; (8002100 <main+0x404>)
 800200a:	f00e f9e7 	bl	80103dc <osThreadNew>
 800200e:	4602      	mov	r2, r0
 8002010:	4b3c      	ldr	r3, [pc, #240]	; (8002104 <main+0x408>)
 8002012:	601a      	str	r2, [r3, #0]

  /* creation of zionRead */
  zionReadHandle = osThreadNew(startZionRead, NULL, &zionRead_attributes);
 8002014:	4a3c      	ldr	r2, [pc, #240]	; (8002108 <main+0x40c>)
 8002016:	2100      	movs	r1, #0
 8002018:	483c      	ldr	r0, [pc, #240]	; (800210c <main+0x410>)
 800201a:	f00e f9df 	bl	80103dc <osThreadNew>
 800201e:	4602      	mov	r2, r0
 8002020:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <main+0x414>)
 8002022:	601a      	str	r2, [r3, #0]

  /* creation of bootButtons */
  bootButtonsHandle = osThreadNew(startBootButtons, NULL, &bootButtons_attributes);
 8002024:	4a3b      	ldr	r2, [pc, #236]	; (8002114 <main+0x418>)
 8002026:	2100      	movs	r1, #0
 8002028:	483b      	ldr	r0, [pc, #236]	; (8002118 <main+0x41c>)
 800202a:	f00e f9d7 	bl	80103dc <osThreadNew>
 800202e:	4602      	mov	r2, r0
 8002030:	4b3a      	ldr	r3, [pc, #232]	; (800211c <main+0x420>)
 8002032:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002034:	f00e f99c 	bl	8010370 <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_Delay(1000);
 8002038:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800203c:	f007 fa2a 	bl	8009494 <HAL_Delay>
	  if (!x) {
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d112      	bne.n	800206c <main+0x370>
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
 8002046:	2201      	movs	r2, #1
 8002048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800204c:	4834      	ldr	r0, [pc, #208]	; (8002120 <main+0x424>)
 800204e:	f008 fe9b 	bl	800ad88 <HAL_GPIO_WritePin>
		  x=1;
 8002052:	2301      	movs	r3, #1
 8002054:	617b      	str	r3, [r7, #20]

		  //uartTransmitChar("hello\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8002056:	2201      	movs	r2, #1
 8002058:	2110      	movs	r1, #16
 800205a:	4832      	ldr	r0, [pc, #200]	; (8002124 <main+0x428>)
 800205c:	f008 fe94 	bl	800ad88 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8002060:	2200      	movs	r2, #0
 8002062:	2110      	movs	r1, #16
 8002064:	482f      	ldr	r0, [pc, #188]	; (8002124 <main+0x428>)
 8002066:	f008 fe8f 	bl	800ad88 <HAL_GPIO_WritePin>
 800206a:	e7e5      	b.n	8002038 <main+0x33c>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
 800206c:	2200      	movs	r2, #0
 800206e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002072:	482b      	ldr	r0, [pc, #172]	; (8002120 <main+0x424>)
 8002074:	f008 fe88 	bl	800ad88 <HAL_GPIO_WritePin>
		  x=0;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
		  //uartTransmitChar("here\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 800207c:	2201      	movs	r2, #1
 800207e:	2110      	movs	r1, #16
 8002080:	4828      	ldr	r0, [pc, #160]	; (8002124 <main+0x428>)
 8002082:	f008 fe81 	bl	800ad88 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8002086:	2200      	movs	r2, #0
 8002088:	2110      	movs	r1, #16
 800208a:	4826      	ldr	r0, [pc, #152]	; (8002124 <main+0x428>)
 800208c:	f008 fe7c 	bl	800ad88 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8002090:	e7d2      	b.n	8002038 <main+0x33c>
 8002092:	bf00      	nop
 8002094:	2002e234 	.word	0x2002e234
 8002098:	20029268 	.word	0x20029268
 800209c:	2002b9fc 	.word	0x2002b9fc
 80020a0:	2002e2c8 	.word	0x2002e2c8
 80020a4:	20028ce0 	.word	0x20028ce0
 80020a8:	2002bb24 	.word	0x2002bb24
 80020ac:	2002ba48 	.word	0x2002ba48
 80020b0:	20028c2c 	.word	0x20028c2c
 80020b4:	08017258 	.word	0x08017258
 80020b8:	40021400 	.word	0x40021400
 80020bc:	40020400 	.word	0x40020400
 80020c0:	080179a4 	.word	0x080179a4
 80020c4:	080042b5 	.word	0x080042b5
 80020c8:	2002e2c4 	.word	0x2002e2c4
 80020cc:	080179c8 	.word	0x080179c8
 80020d0:	080042d5 	.word	0x080042d5
 80020d4:	20030a9c 	.word	0x20030a9c
 80020d8:	080179ec 	.word	0x080179ec
 80020dc:	08004355 	.word	0x08004355
 80020e0:	20030a98 	.word	0x20030a98
 80020e4:	08017a10 	.word	0x08017a10
 80020e8:	0800441d 	.word	0x0800441d
 80020ec:	2002ba44 	.word	0x2002ba44
 80020f0:	08017a34 	.word	0x08017a34
 80020f4:	08004549 	.word	0x08004549
 80020f8:	2002bb20 	.word	0x2002bb20
 80020fc:	08017a58 	.word	0x08017a58
 8002100:	080046c9 	.word	0x080046c9
 8002104:	20028cd0 	.word	0x20028cd0
 8002108:	08017a7c 	.word	0x08017a7c
 800210c:	0800497d 	.word	0x0800497d
 8002110:	2002e240 	.word	0x2002e240
 8002114:	08017aa0 	.word	0x08017aa0
 8002118:	08004b8d 	.word	0x08004b8d
 800211c:	2002b978 	.word	0x2002b978
 8002120:	40022000 	.word	0x40022000
 8002124:	40021000 	.word	0x40021000

08002128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b0b8      	sub	sp, #224	; 0xe0
 800212c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800212e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002132:	2234      	movs	r2, #52	; 0x34
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f011 f82f 	bl	801319a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800213c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800214c:	f107 0308 	add.w	r3, r7, #8
 8002150:	2290      	movs	r2, #144	; 0x90
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f011 f820 	bl	801319a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800215a:	f00a f8a5 	bl	800c2a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800215e:	4b43      	ldr	r3, [pc, #268]	; (800226c <SystemClock_Config+0x144>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	4a42      	ldr	r2, [pc, #264]	; (800226c <SystemClock_Config+0x144>)
 8002164:	f023 0318 	bic.w	r3, r3, #24
 8002168:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	4b40      	ldr	r3, [pc, #256]	; (800226c <SystemClock_Config+0x144>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	4a3f      	ldr	r2, [pc, #252]	; (800226c <SystemClock_Config+0x144>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002174:	6413      	str	r3, [r2, #64]	; 0x40
 8002176:	4b3d      	ldr	r3, [pc, #244]	; (800226c <SystemClock_Config+0x144>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002182:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <SystemClock_Config+0x148>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800218a:	4a39      	ldr	r2, [pc, #228]	; (8002270 <SystemClock_Config+0x148>)
 800218c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b37      	ldr	r3, [pc, #220]	; (8002270 <SystemClock_Config+0x148>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800219e:	2305      	movs	r3, #5
 80021a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021b2:	2302      	movs	r3, #2
 80021b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 15;
 80021c0:	230f      	movs	r3, #15
 80021c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 80021c6:	2390      	movs	r3, #144	; 0x90
 80021c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021cc:	2302      	movs	r3, #2
 80021ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80021d2:	2305      	movs	r3, #5
 80021d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021dc:	4618      	mov	r0, r3
 80021de:	f00a f873 	bl	800c2c8 <HAL_RCC_OscConfig>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80021e8:	f002 feec 	bl	8004fc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ec:	230f      	movs	r3, #15
 80021ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021f2:	2302      	movs	r3, #2
 80021f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800220e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002212:	2103      	movs	r1, #3
 8002214:	4618      	mov	r0, r3
 8002216:	f00a fb05 	bl	800c824 <HAL_RCC_ClockConfig>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8002220:	f002 fed0 	bl	8004fc4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8002224:	4b13      	ldr	r3, [pc, #76]	; (8002274 <SystemClock_Config+0x14c>)
 8002226:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002228:	f44f 7380 	mov.w	r3, #256	; 0x100
 800222c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800222e:	2300      	movs	r3, #0
 8002230:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002232:	2300      	movs	r3, #0
 8002234:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8002236:	2300      	movs	r3, #0
 8002238:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800223a:	2300      	movs	r3, #0
 800223c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800223e:	2300      	movs	r3, #0
 8002240:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002242:	2300      	movs	r3, #0
 8002244:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002246:	2300      	movs	r3, #0
 8002248:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800224a:	2300      	movs	r3, #0
 800224c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002250:	f107 0308 	add.w	r3, r7, #8
 8002254:	4618      	mov	r0, r3
 8002256:	f00a fce9 	bl	800cc2c <HAL_RCCEx_PeriphCLKConfig>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8002260:	f002 feb0 	bl	8004fc4 <Error_Handler>
  }
}
 8002264:	bf00      	nop
 8002266:	37e0      	adds	r7, #224	; 0xe0
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40023800 	.word	0x40023800
 8002270:	40007000 	.word	0x40007000
 8002274:	0023d620 	.word	0x0023d620

08002278 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800227e:	463b      	mov	r3, r7
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800228a:	4b67      	ldr	r3, [pc, #412]	; (8002428 <MX_ADC1_Init+0x1b0>)
 800228c:	4a67      	ldr	r2, [pc, #412]	; (800242c <MX_ADC1_Init+0x1b4>)
 800228e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002290:	4b65      	ldr	r3, [pc, #404]	; (8002428 <MX_ADC1_Init+0x1b0>)
 8002292:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002296:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002298:	4b63      	ldr	r3, [pc, #396]	; (8002428 <MX_ADC1_Init+0x1b0>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800229e:	4b62      	ldr	r3, [pc, #392]	; (8002428 <MX_ADC1_Init+0x1b0>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022a4:	4b60      	ldr	r3, [pc, #384]	; (8002428 <MX_ADC1_Init+0x1b0>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022aa:	4b5f      	ldr	r3, [pc, #380]	; (8002428 <MX_ADC1_Init+0x1b0>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022b2:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <MX_ADC1_Init+0x1b0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022b8:	4b5b      	ldr	r3, [pc, #364]	; (8002428 <MX_ADC1_Init+0x1b0>)
 80022ba:	4a5d      	ldr	r2, [pc, #372]	; (8002430 <MX_ADC1_Init+0x1b8>)
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022be:	4b5a      	ldr	r3, [pc, #360]	; (8002428 <MX_ADC1_Init+0x1b0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 80022c4:	4b58      	ldr	r3, [pc, #352]	; (8002428 <MX_ADC1_Init+0x1b0>)
 80022c6:	220b      	movs	r2, #11
 80022c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80022ca:	4b57      	ldr	r3, [pc, #348]	; (8002428 <MX_ADC1_Init+0x1b0>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022d2:	4b55      	ldr	r3, [pc, #340]	; (8002428 <MX_ADC1_Init+0x1b0>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022d8:	4853      	ldr	r0, [pc, #332]	; (8002428 <MX_ADC1_Init+0x1b0>)
 80022da:	f007 f8fd 	bl	80094d8 <HAL_ADC_Init>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80022e4:	f002 fe6e 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80022e8:	2303      	movs	r3, #3
 80022ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022ec:	2301      	movs	r3, #1
 80022ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80022f0:	2307      	movs	r3, #7
 80022f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022f4:	463b      	mov	r3, r7
 80022f6:	4619      	mov	r1, r3
 80022f8:	484b      	ldr	r0, [pc, #300]	; (8002428 <MX_ADC1_Init+0x1b0>)
 80022fa:	f007 fbc9 	bl	8009a90 <HAL_ADC_ConfigChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002304:	f002 fe5e 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002308:	2304      	movs	r3, #4
 800230a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800230c:	2302      	movs	r3, #2
 800230e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002310:	463b      	mov	r3, r7
 8002312:	4619      	mov	r1, r3
 8002314:	4844      	ldr	r0, [pc, #272]	; (8002428 <MX_ADC1_Init+0x1b0>)
 8002316:	f007 fbbb 	bl	8009a90 <HAL_ADC_ConfigChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002320:	f002 fe50 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002324:	2305      	movs	r3, #5
 8002326:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002328:	2303      	movs	r3, #3
 800232a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800232c:	463b      	mov	r3, r7
 800232e:	4619      	mov	r1, r3
 8002330:	483d      	ldr	r0, [pc, #244]	; (8002428 <MX_ADC1_Init+0x1b0>)
 8002332:	f007 fbad 	bl	8009a90 <HAL_ADC_ConfigChannel>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800233c:	f002 fe42 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002340:	2306      	movs	r3, #6
 8002342:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002344:	2304      	movs	r3, #4
 8002346:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002348:	463b      	mov	r3, r7
 800234a:	4619      	mov	r1, r3
 800234c:	4836      	ldr	r0, [pc, #216]	; (8002428 <MX_ADC1_Init+0x1b0>)
 800234e:	f007 fb9f 	bl	8009a90 <HAL_ADC_ConfigChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002358:	f002 fe34 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800235c:	2307      	movs	r3, #7
 800235e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002360:	2305      	movs	r3, #5
 8002362:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002364:	463b      	mov	r3, r7
 8002366:	4619      	mov	r1, r3
 8002368:	482f      	ldr	r0, [pc, #188]	; (8002428 <MX_ADC1_Init+0x1b0>)
 800236a:	f007 fb91 	bl	8009a90 <HAL_ADC_ConfigChannel>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002374:	f002 fe26 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002378:	2308      	movs	r3, #8
 800237a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800237c:	2306      	movs	r3, #6
 800237e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002380:	463b      	mov	r3, r7
 8002382:	4619      	mov	r1, r3
 8002384:	4828      	ldr	r0, [pc, #160]	; (8002428 <MX_ADC1_Init+0x1b0>)
 8002386:	f007 fb83 	bl	8009a90 <HAL_ADC_ConfigChannel>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002390:	f002 fe18 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002394:	2309      	movs	r3, #9
 8002396:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002398:	2307      	movs	r3, #7
 800239a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800239c:	463b      	mov	r3, r7
 800239e:	4619      	mov	r1, r3
 80023a0:	4821      	ldr	r0, [pc, #132]	; (8002428 <MX_ADC1_Init+0x1b0>)
 80023a2:	f007 fb75 	bl	8009a90 <HAL_ADC_ConfigChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80023ac:	f002 fe0a 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80023b0:	230a      	movs	r3, #10
 80023b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80023b4:	2308      	movs	r3, #8
 80023b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023b8:	463b      	mov	r3, r7
 80023ba:	4619      	mov	r1, r3
 80023bc:	481a      	ldr	r0, [pc, #104]	; (8002428 <MX_ADC1_Init+0x1b0>)
 80023be:	f007 fb67 	bl	8009a90 <HAL_ADC_ConfigChannel>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80023c8:	f002 fdfc 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80023cc:	230b      	movs	r3, #11
 80023ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80023d0:	2309      	movs	r3, #9
 80023d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023d4:	463b      	mov	r3, r7
 80023d6:	4619      	mov	r1, r3
 80023d8:	4813      	ldr	r0, [pc, #76]	; (8002428 <MX_ADC1_Init+0x1b0>)
 80023da:	f007 fb59 	bl	8009a90 <HAL_ADC_ConfigChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80023e4:	f002 fdee 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80023e8:	230c      	movs	r3, #12
 80023ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80023ec:	230a      	movs	r3, #10
 80023ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023f0:	463b      	mov	r3, r7
 80023f2:	4619      	mov	r1, r3
 80023f4:	480c      	ldr	r0, [pc, #48]	; (8002428 <MX_ADC1_Init+0x1b0>)
 80023f6:	f007 fb4b 	bl	8009a90 <HAL_ADC_ConfigChannel>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002400:	f002 fde0 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002404:	230d      	movs	r3, #13
 8002406:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8002408:	230b      	movs	r3, #11
 800240a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800240c:	463b      	mov	r3, r7
 800240e:	4619      	mov	r1, r3
 8002410:	4805      	ldr	r0, [pc, #20]	; (8002428 <MX_ADC1_Init+0x1b0>)
 8002412:	f007 fb3d 	bl	8009a90 <HAL_ADC_ConfigChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800241c:	f002 fdd2 	bl	8004fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	2002b9fc 	.word	0x2002b9fc
 800242c:	40012000 	.word	0x40012000
 8002430:	0f000001 	.word	0x0f000001

08002434 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800243a:	463b      	mov	r3, r7
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002446:	4b36      	ldr	r3, [pc, #216]	; (8002520 <MX_ADC2_Init+0xec>)
 8002448:	4a36      	ldr	r2, [pc, #216]	; (8002524 <MX_ADC2_Init+0xf0>)
 800244a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800244c:	4b34      	ldr	r3, [pc, #208]	; (8002520 <MX_ADC2_Init+0xec>)
 800244e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002452:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002454:	4b32      	ldr	r3, [pc, #200]	; (8002520 <MX_ADC2_Init+0xec>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800245a:	4b31      	ldr	r3, [pc, #196]	; (8002520 <MX_ADC2_Init+0xec>)
 800245c:	2201      	movs	r2, #1
 800245e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002460:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <MX_ADC2_Init+0xec>)
 8002462:	2201      	movs	r2, #1
 8002464:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002466:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <MX_ADC2_Init+0xec>)
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800246e:	4b2c      	ldr	r3, [pc, #176]	; (8002520 <MX_ADC2_Init+0xec>)
 8002470:	2200      	movs	r2, #0
 8002472:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002474:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <MX_ADC2_Init+0xec>)
 8002476:	4a2c      	ldr	r2, [pc, #176]	; (8002528 <MX_ADC2_Init+0xf4>)
 8002478:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800247a:	4b29      	ldr	r3, [pc, #164]	; (8002520 <MX_ADC2_Init+0xec>)
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8002480:	4b27      	ldr	r3, [pc, #156]	; (8002520 <MX_ADC2_Init+0xec>)
 8002482:	2204      	movs	r2, #4
 8002484:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002486:	4b26      	ldr	r3, [pc, #152]	; (8002520 <MX_ADC2_Init+0xec>)
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800248e:	4b24      	ldr	r3, [pc, #144]	; (8002520 <MX_ADC2_Init+0xec>)
 8002490:	2201      	movs	r2, #1
 8002492:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002494:	4822      	ldr	r0, [pc, #136]	; (8002520 <MX_ADC2_Init+0xec>)
 8002496:	f007 f81f 	bl	80094d8 <HAL_ADC_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80024a0:	f002 fd90 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024a8:	2301      	movs	r3, #1
 80024aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80024ac:	2307      	movs	r3, #7
 80024ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024b0:	463b      	mov	r3, r7
 80024b2:	4619      	mov	r1, r3
 80024b4:	481a      	ldr	r0, [pc, #104]	; (8002520 <MX_ADC2_Init+0xec>)
 80024b6:	f007 faeb 	bl	8009a90 <HAL_ADC_ConfigChannel>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80024c0:	f002 fd80 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80024c4:	2301      	movs	r3, #1
 80024c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80024c8:	2302      	movs	r3, #2
 80024ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024cc:	463b      	mov	r3, r7
 80024ce:	4619      	mov	r1, r3
 80024d0:	4813      	ldr	r0, [pc, #76]	; (8002520 <MX_ADC2_Init+0xec>)
 80024d2:	f007 fadd 	bl	8009a90 <HAL_ADC_ConfigChannel>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80024dc:	f002 fd72 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80024e0:	230e      	movs	r3, #14
 80024e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80024e4:	2303      	movs	r3, #3
 80024e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024e8:	463b      	mov	r3, r7
 80024ea:	4619      	mov	r1, r3
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <MX_ADC2_Init+0xec>)
 80024ee:	f007 facf 	bl	8009a90 <HAL_ADC_ConfigChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80024f8:	f002 fd64 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80024fc:	230f      	movs	r3, #15
 80024fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002500:	2304      	movs	r3, #4
 8002502:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002504:	463b      	mov	r3, r7
 8002506:	4619      	mov	r1, r3
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <MX_ADC2_Init+0xec>)
 800250a:	f007 fac1 	bl	8009a90 <HAL_ADC_ConfigChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8002514:	f002 fd56 	bl	8004fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20028ce0 	.word	0x20028ce0
 8002524:	40012100 	.word	0x40012100
 8002528:	0f000001 	.word	0x0f000001

0800252c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002532:	463b      	mov	r3, r7
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800253e:	4b44      	ldr	r3, [pc, #272]	; (8002650 <MX_ADC3_Init+0x124>)
 8002540:	4a44      	ldr	r2, [pc, #272]	; (8002654 <MX_ADC3_Init+0x128>)
 8002542:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002544:	4b42      	ldr	r3, [pc, #264]	; (8002650 <MX_ADC3_Init+0x124>)
 8002546:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800254a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800254c:	4b40      	ldr	r3, [pc, #256]	; (8002650 <MX_ADC3_Init+0x124>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002552:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <MX_ADC3_Init+0x124>)
 8002554:	2201      	movs	r2, #1
 8002556:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002558:	4b3d      	ldr	r3, [pc, #244]	; (8002650 <MX_ADC3_Init+0x124>)
 800255a:	2201      	movs	r2, #1
 800255c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800255e:	4b3c      	ldr	r3, [pc, #240]	; (8002650 <MX_ADC3_Init+0x124>)
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002566:	4b3a      	ldr	r3, [pc, #232]	; (8002650 <MX_ADC3_Init+0x124>)
 8002568:	2200      	movs	r2, #0
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800256c:	4b38      	ldr	r3, [pc, #224]	; (8002650 <MX_ADC3_Init+0x124>)
 800256e:	4a3a      	ldr	r2, [pc, #232]	; (8002658 <MX_ADC3_Init+0x12c>)
 8002570:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <MX_ADC3_Init+0x124>)
 8002574:	2200      	movs	r2, #0
 8002576:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8002578:	4b35      	ldr	r3, [pc, #212]	; (8002650 <MX_ADC3_Init+0x124>)
 800257a:	2206      	movs	r2, #6
 800257c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800257e:	4b34      	ldr	r3, [pc, #208]	; (8002650 <MX_ADC3_Init+0x124>)
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002586:	4b32      	ldr	r3, [pc, #200]	; (8002650 <MX_ADC3_Init+0x124>)
 8002588:	2201      	movs	r2, #1
 800258a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800258c:	4830      	ldr	r0, [pc, #192]	; (8002650 <MX_ADC3_Init+0x124>)
 800258e:	f006 ffa3 	bl	80094d8 <HAL_ADC_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002598:	f002 fd14 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800259c:	2302      	movs	r3, #2
 800259e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025a0:	2301      	movs	r3, #1
 80025a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80025a4:	2307      	movs	r3, #7
 80025a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80025a8:	463b      	mov	r3, r7
 80025aa:	4619      	mov	r1, r3
 80025ac:	4828      	ldr	r0, [pc, #160]	; (8002650 <MX_ADC3_Init+0x124>)
 80025ae:	f007 fa6f 	bl	8009a90 <HAL_ADC_ConfigChannel>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80025b8:	f002 fd04 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80025bc:	2304      	movs	r3, #4
 80025be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80025c0:	2302      	movs	r3, #2
 80025c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80025c4:	463b      	mov	r3, r7
 80025c6:	4619      	mov	r1, r3
 80025c8:	4821      	ldr	r0, [pc, #132]	; (8002650 <MX_ADC3_Init+0x124>)
 80025ca:	f007 fa61 	bl	8009a90 <HAL_ADC_ConfigChannel>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 80025d4:	f002 fcf6 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80025d8:	2305      	movs	r3, #5
 80025da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80025dc:	2303      	movs	r3, #3
 80025de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80025e0:	463b      	mov	r3, r7
 80025e2:	4619      	mov	r1, r3
 80025e4:	481a      	ldr	r0, [pc, #104]	; (8002650 <MX_ADC3_Init+0x124>)
 80025e6:	f007 fa53 	bl	8009a90 <HAL_ADC_ConfigChannel>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80025f0:	f002 fce8 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80025f4:	2306      	movs	r3, #6
 80025f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80025f8:	2304      	movs	r3, #4
 80025fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80025fc:	463b      	mov	r3, r7
 80025fe:	4619      	mov	r1, r3
 8002600:	4813      	ldr	r0, [pc, #76]	; (8002650 <MX_ADC3_Init+0x124>)
 8002602:	f007 fa45 	bl	8009a90 <HAL_ADC_ConfigChannel>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 800260c:	f002 fcda 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002610:	2307      	movs	r3, #7
 8002612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002614:	2305      	movs	r3, #5
 8002616:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002618:	463b      	mov	r3, r7
 800261a:	4619      	mov	r1, r3
 800261c:	480c      	ldr	r0, [pc, #48]	; (8002650 <MX_ADC3_Init+0x124>)
 800261e:	f007 fa37 	bl	8009a90 <HAL_ADC_ConfigChannel>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8002628:	f002 fccc 	bl	8004fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800262c:	2308      	movs	r3, #8
 800262e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002630:	2306      	movs	r3, #6
 8002632:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002634:	463b      	mov	r3, r7
 8002636:	4619      	mov	r1, r3
 8002638:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_ADC3_Init+0x124>)
 800263a:	f007 fa29 	bl	8009a90 <HAL_ADC_ConfigChannel>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8002644:	f002 fcbe 	bl	8004fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  /* USER CODE END ADC3_Init 2 */

}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	2002ba48 	.word	0x2002ba48
 8002654:	40012200 	.word	0x40012200
 8002658:	0f000001 	.word	0x0f000001

0800265c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <MX_I2C1_Init+0x74>)
 8002662:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <MX_I2C1_Init+0x78>)
 8002664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007074AF;
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <MX_I2C1_Init+0x74>)
 8002668:	4a1b      	ldr	r2, [pc, #108]	; (80026d8 <MX_I2C1_Init+0x7c>)
 800266a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800266c:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <MX_I2C1_Init+0x74>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <MX_I2C1_Init+0x74>)
 8002674:	2201      	movs	r2, #1
 8002676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002678:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <MX_I2C1_Init+0x74>)
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <MX_I2C1_Init+0x74>)
 8002680:	2200      	movs	r2, #0
 8002682:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <MX_I2C1_Init+0x74>)
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <MX_I2C1_Init+0x74>)
 800268c:	2200      	movs	r2, #0
 800268e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002690:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <MX_I2C1_Init+0x74>)
 8002692:	2200      	movs	r2, #0
 8002694:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002696:	480e      	ldr	r0, [pc, #56]	; (80026d0 <MX_I2C1_Init+0x74>)
 8002698:	f008 fbce 	bl	800ae38 <HAL_I2C_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026a2:	f002 fc8f 	bl	8004fc4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026a6:	2100      	movs	r1, #0
 80026a8:	4809      	ldr	r0, [pc, #36]	; (80026d0 <MX_I2C1_Init+0x74>)
 80026aa:	f009 fbfd 	bl	800bea8 <HAL_I2CEx_ConfigAnalogFilter>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026b4:	f002 fc86 	bl	8004fc4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026b8:	2100      	movs	r1, #0
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <MX_I2C1_Init+0x74>)
 80026bc:	f009 fc3f 	bl	800bf3e <HAL_I2CEx_ConfigDigitalFilter>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026c6:	f002 fc7d 	bl	8004fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20028d28 	.word	0x20028d28
 80026d4:	40005400 	.word	0x40005400
 80026d8:	007074af 	.word	0x007074af

080026dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026e0:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <MX_I2C2_Init+0x74>)
 80026e2:	4a1c      	ldr	r2, [pc, #112]	; (8002754 <MX_I2C2_Init+0x78>)
 80026e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x007074AF;
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <MX_I2C2_Init+0x74>)
 80026e8:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <MX_I2C2_Init+0x7c>)
 80026ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80026ec:	4b18      	ldr	r3, [pc, #96]	; (8002750 <MX_I2C2_Init+0x74>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026f2:	4b17      	ldr	r3, [pc, #92]	; (8002750 <MX_I2C2_Init+0x74>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026f8:	4b15      	ldr	r3, [pc, #84]	; (8002750 <MX_I2C2_Init+0x74>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80026fe:	4b14      	ldr	r3, [pc, #80]	; (8002750 <MX_I2C2_Init+0x74>)
 8002700:	2200      	movs	r2, #0
 8002702:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <MX_I2C2_Init+0x74>)
 8002706:	2200      	movs	r2, #0
 8002708:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <MX_I2C2_Init+0x74>)
 800270c:	2200      	movs	r2, #0
 800270e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002710:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <MX_I2C2_Init+0x74>)
 8002712:	2200      	movs	r2, #0
 8002714:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002716:	480e      	ldr	r0, [pc, #56]	; (8002750 <MX_I2C2_Init+0x74>)
 8002718:	f008 fb8e 	bl	800ae38 <HAL_I2C_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002722:	f002 fc4f 	bl	8004fc4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002726:	2100      	movs	r1, #0
 8002728:	4809      	ldr	r0, [pc, #36]	; (8002750 <MX_I2C2_Init+0x74>)
 800272a:	f009 fbbd 	bl	800bea8 <HAL_I2CEx_ConfigAnalogFilter>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002734:	f002 fc46 	bl	8004fc4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002738:	2100      	movs	r1, #0
 800273a:	4805      	ldr	r0, [pc, #20]	; (8002750 <MX_I2C2_Init+0x74>)
 800273c:	f009 fbff 	bl	800bf3e <HAL_I2CEx_ConfigDigitalFilter>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002746:	f002 fc3d 	bl	8004fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20029178 	.word	0x20029178
 8002754:	40005800 	.word	0x40005800
 8002758:	007074af 	.word	0x007074af

0800275c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002760:	4b1c      	ldr	r3, [pc, #112]	; (80027d4 <MX_I2C3_Init+0x78>)
 8002762:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <MX_I2C3_Init+0x7c>)
 8002764:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x100029FE;
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <MX_I2C3_Init+0x78>)
 8002768:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <MX_I2C3_Init+0x80>)
 800276a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 152;
 800276c:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <MX_I2C3_Init+0x78>)
 800276e:	2298      	movs	r2, #152	; 0x98
 8002770:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002772:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <MX_I2C3_Init+0x78>)
 8002774:	2201      	movs	r2, #1
 8002776:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <MX_I2C3_Init+0x78>)
 800277a:	2200      	movs	r2, #0
 800277c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <MX_I2C3_Init+0x78>)
 8002780:	2200      	movs	r2, #0
 8002782:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <MX_I2C3_Init+0x78>)
 8002786:	2200      	movs	r2, #0
 8002788:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800278a:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <MX_I2C3_Init+0x78>)
 800278c:	2200      	movs	r2, #0
 800278e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002790:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <MX_I2C3_Init+0x78>)
 8002792:	2200      	movs	r2, #0
 8002794:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002796:	480f      	ldr	r0, [pc, #60]	; (80027d4 <MX_I2C3_Init+0x78>)
 8002798:	f008 fb4e 	bl	800ae38 <HAL_I2C_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80027a2:	f002 fc0f 	bl	8004fc4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027a6:	2100      	movs	r1, #0
 80027a8:	480a      	ldr	r0, [pc, #40]	; (80027d4 <MX_I2C3_Init+0x78>)
 80027aa:	f009 fb7d 	bl	800bea8 <HAL_I2CEx_ConfigAnalogFilter>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80027b4:	f002 fc06 	bl	8004fc4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80027b8:	2100      	movs	r1, #0
 80027ba:	4806      	ldr	r0, [pc, #24]	; (80027d4 <MX_I2C3_Init+0x78>)
 80027bc:	f009 fbbf 	bl	800bf3e <HAL_I2CEx_ConfigDigitalFilter>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80027c6:	f002 fbfd 	bl	8004fc4 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80027ca:	2004      	movs	r0, #4
 80027cc:	f009 fc04 	bl	800bfd8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20028b14 	.word	0x20028b14
 80027d8:	40005c00 	.word	0x40005c00
 80027dc:	100029fe 	.word	0x100029fe

080027e0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <MX_I2C4_Init+0x74>)
 80027e6:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <MX_I2C4_Init+0x78>)
 80027e8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x007074AF;
 80027ea:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <MX_I2C4_Init+0x74>)
 80027ec:	4a1b      	ldr	r2, [pc, #108]	; (800285c <MX_I2C4_Init+0x7c>)
 80027ee:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <MX_I2C4_Init+0x74>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027f6:	4b17      	ldr	r3, [pc, #92]	; (8002854 <MX_I2C4_Init+0x74>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027fc:	4b15      	ldr	r3, [pc, #84]	; (8002854 <MX_I2C4_Init+0x74>)
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <MX_I2C4_Init+0x74>)
 8002804:	2200      	movs	r2, #0
 8002806:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <MX_I2C4_Init+0x74>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800280e:	4b11      	ldr	r3, [pc, #68]	; (8002854 <MX_I2C4_Init+0x74>)
 8002810:	2200      	movs	r2, #0
 8002812:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <MX_I2C4_Init+0x74>)
 8002816:	2200      	movs	r2, #0
 8002818:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800281a:	480e      	ldr	r0, [pc, #56]	; (8002854 <MX_I2C4_Init+0x74>)
 800281c:	f008 fb0c 	bl	800ae38 <HAL_I2C_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002826:	f002 fbcd 	bl	8004fc4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800282a:	2100      	movs	r1, #0
 800282c:	4809      	ldr	r0, [pc, #36]	; (8002854 <MX_I2C4_Init+0x74>)
 800282e:	f009 fb3b 	bl	800bea8 <HAL_I2CEx_ConfigAnalogFilter>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002838:	f002 fbc4 	bl	8004fc4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800283c:	2100      	movs	r1, #0
 800283e:	4805      	ldr	r0, [pc, #20]	; (8002854 <MX_I2C4_Init+0x74>)
 8002840:	f009 fb7d 	bl	800bf3e <HAL_I2CEx_ConfigDigitalFilter>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800284a:	f002 fbbb 	bl	8004fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20028b60 	.word	0x20028b60
 8002858:	40006000 	.word	0x40006000
 800285c:	007074af 	.word	0x007074af

08002860 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <MX_RTC_Init+0x44>)
 8002866:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <MX_RTC_Init+0x48>)
 8002868:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <MX_RTC_Init+0x44>)
 800286c:	2200      	movs	r2, #0
 800286e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <MX_RTC_Init+0x44>)
 8002872:	227f      	movs	r2, #127	; 0x7f
 8002874:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <MX_RTC_Init+0x44>)
 8002878:	22ff      	movs	r2, #255	; 0xff
 800287a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <MX_RTC_Init+0x44>)
 800287e:	2200      	movs	r2, #0
 8002880:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <MX_RTC_Init+0x44>)
 8002884:	2200      	movs	r2, #0
 8002886:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <MX_RTC_Init+0x44>)
 800288a:	2200      	movs	r2, #0
 800288c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800288e:	4805      	ldr	r0, [pc, #20]	; (80028a4 <MX_RTC_Init+0x44>)
 8002890:	f00a fdf2 	bl	800d478 <HAL_RTC_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800289a:	f002 fb93 	bl	8004fc4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	2002bb00 	.word	0x2002bb00
 80028a8:	40002800 	.word	0x40002800

080028ac <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <MX_SPI4_Init+0x74>)
 80028b2:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <MX_SPI4_Init+0x78>)
 80028b4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80028b6:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <MX_SPI4_Init+0x74>)
 80028b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028bc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80028be:	4b18      	ldr	r3, [pc, #96]	; (8002920 <MX_SPI4_Init+0x74>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <MX_SPI4_Init+0x74>)
 80028c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028ca:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028cc:	4b14      	ldr	r3, [pc, #80]	; (8002920 <MX_SPI4_Init+0x74>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028d2:	4b13      	ldr	r3, [pc, #76]	; (8002920 <MX_SPI4_Init+0x74>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <MX_SPI4_Init+0x74>)
 80028da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028de:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <MX_SPI4_Init+0x74>)
 80028e2:	2210      	movs	r2, #16
 80028e4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <MX_SPI4_Init+0x74>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <MX_SPI4_Init+0x74>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <MX_SPI4_Init+0x74>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <MX_SPI4_Init+0x74>)
 80028fa:	2207      	movs	r2, #7
 80028fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <MX_SPI4_Init+0x74>)
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <MX_SPI4_Init+0x74>)
 8002906:	2200      	movs	r2, #0
 8002908:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800290a:	4805      	ldr	r0, [pc, #20]	; (8002920 <MX_SPI4_Init+0x74>)
 800290c:	f00a fe5c 	bl	800d5c8 <HAL_SPI_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002916:	f002 fb55 	bl	8004fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20028ab0 	.word	0x20028ab0
 8002924:	40013400 	.word	0x40013400

08002928 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <MX_SPI5_Init+0x74>)
 800292e:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <MX_SPI5_Init+0x78>)
 8002930:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002932:	4b1a      	ldr	r3, [pc, #104]	; (800299c <MX_SPI5_Init+0x74>)
 8002934:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002938:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800293a:	4b18      	ldr	r3, [pc, #96]	; (800299c <MX_SPI5_Init+0x74>)
 800293c:	2200      	movs	r2, #0
 800293e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002940:	4b16      	ldr	r3, [pc, #88]	; (800299c <MX_SPI5_Init+0x74>)
 8002942:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002946:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <MX_SPI5_Init+0x74>)
 800294a:	2200      	movs	r2, #0
 800294c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800294e:	4b13      	ldr	r3, [pc, #76]	; (800299c <MX_SPI5_Init+0x74>)
 8002950:	2200      	movs	r2, #0
 8002952:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <MX_SPI5_Init+0x74>)
 8002956:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800295a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <MX_SPI5_Init+0x74>)
 800295e:	2218      	movs	r2, #24
 8002960:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <MX_SPI5_Init+0x74>)
 8002964:	2200      	movs	r2, #0
 8002966:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <MX_SPI5_Init+0x74>)
 800296a:	2200      	movs	r2, #0
 800296c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <MX_SPI5_Init+0x74>)
 8002970:	2200      	movs	r2, #0
 8002972:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002974:	4b09      	ldr	r3, [pc, #36]	; (800299c <MX_SPI5_Init+0x74>)
 8002976:	2207      	movs	r2, #7
 8002978:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <MX_SPI5_Init+0x74>)
 800297c:	2200      	movs	r2, #0
 800297e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <MX_SPI5_Init+0x74>)
 8002982:	2200      	movs	r2, #0
 8002984:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002986:	4805      	ldr	r0, [pc, #20]	; (800299c <MX_SPI5_Init+0x74>)
 8002988:	f00a fe1e 	bl	800d5c8 <HAL_SPI_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8002992:	f002 fb17 	bl	8004fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20028c2c 	.word	0x20028c2c
 80029a0:	40015000 	.word	0x40015000

080029a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08e      	sub	sp, #56	; 0x38
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b8:	f107 031c 	add.w	r3, r7, #28
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029c4:	463b      	mov	r3, r7
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	60da      	str	r2, [r3, #12]
 80029d0:	611a      	str	r2, [r3, #16]
 80029d2:	615a      	str	r2, [r3, #20]
 80029d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029d6:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <MX_TIM4_Init+0xe8>)
 80029d8:	4a2d      	ldr	r2, [pc, #180]	; (8002a90 <MX_TIM4_Init+0xec>)
 80029da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80029dc:	4b2b      	ldr	r3, [pc, #172]	; (8002a8c <MX_TIM4_Init+0xe8>)
 80029de:	2200      	movs	r2, #0
 80029e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e2:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <MX_TIM4_Init+0xe8>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80029e8:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <MX_TIM4_Init+0xe8>)
 80029ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f0:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <MX_TIM4_Init+0xe8>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f6:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <MX_TIM4_Init+0xe8>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80029fc:	4823      	ldr	r0, [pc, #140]	; (8002a8c <MX_TIM4_Init+0xe8>)
 80029fe:	f00b fc2b 	bl	800e258 <HAL_TIM_Base_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002a08:	f002 fadc 	bl	8004fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a16:	4619      	mov	r1, r3
 8002a18:	481c      	ldr	r0, [pc, #112]	; (8002a8c <MX_TIM4_Init+0xe8>)
 8002a1a:	f00b fedf 	bl	800e7dc <HAL_TIM_ConfigClockSource>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002a24:	f002 face 	bl	8004fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a28:	4818      	ldr	r0, [pc, #96]	; (8002a8c <MX_TIM4_Init+0xe8>)
 8002a2a:	f00b fc6b 	bl	800e304 <HAL_TIM_PWM_Init>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002a34:	f002 fac6 	bl	8004fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a40:	f107 031c 	add.w	r3, r7, #28
 8002a44:	4619      	mov	r1, r3
 8002a46:	4811      	ldr	r0, [pc, #68]	; (8002a8c <MX_TIM4_Init+0xe8>)
 8002a48:	f00c fb42 	bl	800f0d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002a52:	f002 fab7 	bl	8004fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a56:	2360      	movs	r3, #96	; 0x60
 8002a58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a66:	463b      	mov	r3, r7
 8002a68:	2200      	movs	r2, #0
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4807      	ldr	r0, [pc, #28]	; (8002a8c <MX_TIM4_Init+0xe8>)
 8002a6e:	f00b fd9d 	bl	800e5ac <HAL_TIM_PWM_ConfigChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002a78:	f002 faa4 	bl	8004fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002a7c:	4803      	ldr	r0, [pc, #12]	; (8002a8c <MX_TIM4_Init+0xe8>)
 8002a7e:	f005 fdbb 	bl	80085f8 <HAL_TIM_MspPostInit>

}
 8002a82:	bf00      	nop
 8002a84:	3738      	adds	r7, #56	; 0x38
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20028c90 	.word	0x20028c90
 8002a90:	40000800 	.word	0x40000800

08002a94 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08e      	sub	sp, #56	; 0x38
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ab4:	463b      	mov	r3, r7
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]
 8002ac0:	611a      	str	r2, [r3, #16]
 8002ac2:	615a      	str	r2, [r3, #20]
 8002ac4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ac6:	4b32      	ldr	r3, [pc, #200]	; (8002b90 <MX_TIM5_Init+0xfc>)
 8002ac8:	4a32      	ldr	r2, [pc, #200]	; (8002b94 <MX_TIM5_Init+0x100>)
 8002aca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002acc:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <MX_TIM5_Init+0xfc>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad2:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <MX_TIM5_Init+0xfc>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002ad8:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <MX_TIM5_Init+0xfc>)
 8002ada:	f04f 32ff 	mov.w	r2, #4294967295
 8002ade:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae0:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <MX_TIM5_Init+0xfc>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae6:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <MX_TIM5_Init+0xfc>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002aec:	4828      	ldr	r0, [pc, #160]	; (8002b90 <MX_TIM5_Init+0xfc>)
 8002aee:	f00b fbb3 	bl	800e258 <HAL_TIM_Base_Init>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002af8:	f002 fa64 	bl	8004fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b06:	4619      	mov	r1, r3
 8002b08:	4821      	ldr	r0, [pc, #132]	; (8002b90 <MX_TIM5_Init+0xfc>)
 8002b0a:	f00b fe67 	bl	800e7dc <HAL_TIM_ConfigClockSource>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002b14:	f002 fa56 	bl	8004fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b18:	481d      	ldr	r0, [pc, #116]	; (8002b90 <MX_TIM5_Init+0xfc>)
 8002b1a:	f00b fbf3 	bl	800e304 <HAL_TIM_PWM_Init>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002b24:	f002 fa4e 	bl	8004fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b30:	f107 031c 	add.w	r3, r7, #28
 8002b34:	4619      	mov	r1, r3
 8002b36:	4816      	ldr	r0, [pc, #88]	; (8002b90 <MX_TIM5_Init+0xfc>)
 8002b38:	f00c faca 	bl	800f0d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002b42:	f002 fa3f 	bl	8004fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b46:	2360      	movs	r3, #96	; 0x60
 8002b48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b56:	463b      	mov	r3, r7
 8002b58:	2200      	movs	r2, #0
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	480c      	ldr	r0, [pc, #48]	; (8002b90 <MX_TIM5_Init+0xfc>)
 8002b5e:	f00b fd25 	bl	800e5ac <HAL_TIM_PWM_ConfigChannel>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002b68:	f002 fa2c 	bl	8004fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b6c:	463b      	mov	r3, r7
 8002b6e:	2204      	movs	r2, #4
 8002b70:	4619      	mov	r1, r3
 8002b72:	4807      	ldr	r0, [pc, #28]	; (8002b90 <MX_TIM5_Init+0xfc>)
 8002b74:	f00b fd1a 	bl	800e5ac <HAL_TIM_PWM_ConfigChannel>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8002b7e:	f002 fa21 	bl	8004fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002b82:	4803      	ldr	r0, [pc, #12]	; (8002b90 <MX_TIM5_Init+0xfc>)
 8002b84:	f005 fd38 	bl	80085f8 <HAL_TIM_MspPostInit>

}
 8002b88:	bf00      	nop
 8002b8a:	3738      	adds	r7, #56	; 0x38
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20029228 	.word	0x20029228
 8002b94:	40000c00 	.word	0x40000c00

08002b98 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002b9c:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <MX_UART4_Init+0x58>)
 8002b9e:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <MX_UART4_Init+0x5c>)
 8002ba0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002ba2:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <MX_UART4_Init+0x58>)
 8002ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ba8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002baa:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <MX_UART4_Init+0x58>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <MX_UART4_Init+0x58>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <MX_UART4_Init+0x58>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <MX_UART4_Init+0x58>)
 8002bbe:	220c      	movs	r2, #12
 8002bc0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <MX_UART4_Init+0x58>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc8:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <MX_UART4_Init+0x58>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <MX_UART4_Init+0x58>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <MX_UART4_Init+0x58>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002bda:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <MX_UART4_Init+0x58>)
 8002bdc:	f00c fb24 	bl	800f228 <HAL_UART_Init>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002be6:	f002 f9ed 	bl	8004fc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	2002e244 	.word	0x2002e244
 8002bf4:	40004c00 	.word	0x40004c00

08002bf8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002bfc:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <MX_UART5_Init+0x58>)
 8002bfe:	4a15      	ldr	r2, [pc, #84]	; (8002c54 <MX_UART5_Init+0x5c>)
 8002c00:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002c02:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <MX_UART5_Init+0x58>)
 8002c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c08:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002c0a:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <MX_UART5_Init+0x58>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <MX_UART5_Init+0x58>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <MX_UART5_Init+0x58>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <MX_UART5_Init+0x58>)
 8002c1e:	220c      	movs	r2, #12
 8002c20:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <MX_UART5_Init+0x58>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <MX_UART5_Init+0x58>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <MX_UART5_Init+0x58>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <MX_UART5_Init+0x58>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002c3a:	4805      	ldr	r0, [pc, #20]	; (8002c50 <MX_UART5_Init+0x58>)
 8002c3c:	f00c faf4 	bl	800f228 <HAL_UART_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002c46:	f002 f9bd 	bl	8004fc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2002b97c 	.word	0x2002b97c
 8002c54:	40005000 	.word	0x40005000

08002c58 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002c5c:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <MX_UART7_Init+0x58>)
 8002c5e:	4a15      	ldr	r2, [pc, #84]	; (8002cb4 <MX_UART7_Init+0x5c>)
 8002c60:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002c62:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <MX_UART7_Init+0x58>)
 8002c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c68:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <MX_UART7_Init+0x58>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <MX_UART7_Init+0x58>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <MX_UART7_Init+0x58>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <MX_UART7_Init+0x58>)
 8002c7e:	220c      	movs	r2, #12
 8002c80:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002c82:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <MX_UART7_Init+0x58>)
 8002c84:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002c88:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <MX_UART7_Init+0x58>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <MX_UART7_Init+0x58>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <MX_UART7_Init+0x58>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002c9c:	4804      	ldr	r0, [pc, #16]	; (8002cb0 <MX_UART7_Init+0x58>)
 8002c9e:	f00c fac3 	bl	800f228 <HAL_UART_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_UART7_Init+0x54>
  {
    Error_Handler();
 8002ca8:	f002 f98c 	bl	8004fc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20028bac 	.word	0x20028bac
 8002cb4:	40007800 	.word	0x40007800

08002cb8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002cbc:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002cc2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cc6:	2206      	movs	r2, #6
 8002cc8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ccc:	2202      	movs	r2, #2
 8002cce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cd8:	2202      	movs	r2, #2
 8002cda:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002ce8:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002cfa:	4805      	ldr	r0, [pc, #20]	; (8002d10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cfc:	f009 f98c 	bl	800c018 <HAL_PCD_Init>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002d06:	f002 f95d 	bl	8004fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20028d74 	.word	0x20028d74

08002d14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <MX_DMA_Init+0x80>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <MX_DMA_Init+0x80>)
 8002d20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <MX_DMA_Init+0x80>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d32:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <MX_DMA_Init+0x80>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	4a17      	ldr	r2, [pc, #92]	; (8002d94 <MX_DMA_Init+0x80>)
 8002d38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3e:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <MX_DMA_Init+0x80>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2105      	movs	r1, #5
 8002d4e:	200b      	movs	r0, #11
 8002d50:	f007 fa26 	bl	800a1a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002d54:	200b      	movs	r0, #11
 8002d56:	f007 fa3f 	bl	800a1d8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2105      	movs	r1, #5
 8002d5e:	2038      	movs	r0, #56	; 0x38
 8002d60:	f007 fa1e 	bl	800a1a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002d64:	2038      	movs	r0, #56	; 0x38
 8002d66:	f007 fa37 	bl	800a1d8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2105      	movs	r1, #5
 8002d6e:	2039      	movs	r0, #57	; 0x39
 8002d70:	f007 fa16 	bl	800a1a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002d74:	2039      	movs	r0, #57	; 0x39
 8002d76:	f007 fa2f 	bl	800a1d8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2105      	movs	r1, #5
 8002d7e:	203a      	movs	r0, #58	; 0x3a
 8002d80:	f007 fa0e 	bl	800a1a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002d84:	203a      	movs	r0, #58	; 0x3a
 8002d86:	f007 fa27 	bl	800a1d8 <HAL_NVIC_EnableIRQ>

}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800

08002d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b090      	sub	sp, #64	; 0x40
 8002d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	60da      	str	r2, [r3, #12]
 8002dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dae:	4bb0      	ldr	r3, [pc, #704]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	4aaf      	ldr	r2, [pc, #700]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002db4:	f043 0310 	orr.w	r3, r3, #16
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dba:	4bad      	ldr	r3, [pc, #692]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dc6:	4baa      	ldr	r3, [pc, #680]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4aa9      	ldr	r2, [pc, #676]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4ba7      	ldr	r3, [pc, #668]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dde:	4ba4      	ldr	r3, [pc, #656]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	4aa3      	ldr	r2, [pc, #652]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002de4:	f043 0302 	orr.w	r3, r3, #2
 8002de8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dea:	4ba1      	ldr	r3, [pc, #644]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	623b      	str	r3, [r7, #32]
 8002df4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df6:	4b9e      	ldr	r3, [pc, #632]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a9d      	ldr	r2, [pc, #628]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002dfc:	f043 0304 	orr.w	r3, r3, #4
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b9b      	ldr	r3, [pc, #620]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	61fb      	str	r3, [r7, #28]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0e:	4b98      	ldr	r3, [pc, #608]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a97      	ldr	r2, [pc, #604]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b95      	ldr	r3, [pc, #596]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e26:	4b92      	ldr	r3, [pc, #584]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a91      	ldr	r2, [pc, #580]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b8f      	ldr	r3, [pc, #572]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002e3e:	4b8c      	ldr	r3, [pc, #560]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a8b      	ldr	r2, [pc, #556]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b89      	ldr	r3, [pc, #548]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e56:	4b86      	ldr	r3, [pc, #536]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a85      	ldr	r2, [pc, #532]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e5c:	f043 0320 	orr.w	r3, r3, #32
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b83      	ldr	r3, [pc, #524]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e6e:	4b80      	ldr	r3, [pc, #512]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	4a7f      	ldr	r2, [pc, #508]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e74:	f043 0308 	orr.w	r3, r3, #8
 8002e78:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7a:	4b7d      	ldr	r3, [pc, #500]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e86:	4b7a      	ldr	r3, [pc, #488]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	4a79      	ldr	r2, [pc, #484]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e90:	6313      	str	r3, [r2, #48]	; 0x30
 8002e92:	4b77      	ldr	r3, [pc, #476]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002e9e:	4b74      	ldr	r3, [pc, #464]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a73      	ldr	r2, [pc, #460]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002ea4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b71      	ldr	r3, [pc, #452]	; (8003070 <MX_GPIO_Init+0x2d8>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2110      	movs	r1, #16
 8002eba:	486e      	ldr	r0, [pc, #440]	; (8003074 <MX_GPIO_Init+0x2dc>)
 8002ebc:	f007 ff64 	bl	800ad88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f244 012f 	movw	r1, #16431	; 0x402f
 8002ec6:	486c      	ldr	r0, [pc, #432]	; (8003078 <MX_GPIO_Init+0x2e0>)
 8002ec8:	f007 ff5e 	bl	800ad88 <HAL_GPIO_WritePin>
                          |OUT0_1V8_Pin|OUT2_1V8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f241 1150 	movw	r1, #4432	; 0x1150
 8002ed2:	486a      	ldr	r0, [pc, #424]	; (800307c <MX_GPIO_Init+0x2e4>)
 8002ed4:	f007 ff58 	bl	800ad88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MCU_CTRL2_Pin|MCU_CTRL1_Pin, GPIO_PIN_RESET);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2103      	movs	r1, #3
 8002edc:	4868      	ldr	r0, [pc, #416]	; (8003080 <MX_GPIO_Init+0x2e8>)
 8002ede:	f007 ff53 	bl	800ad88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f243 013c 	movw	r1, #12348	; 0x303c
 8002ee8:	4866      	ldr	r0, [pc, #408]	; (8003084 <MX_GPIO_Init+0x2ec>)
 8002eea:	f007 ff4d 	bl	800ad88 <HAL_GPIO_WritePin>
                          |BTN4_Pin|BTN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin, GPIO_PIN_RESET);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f241 0104 	movw	r1, #4100	; 0x1004
 8002ef4:	4864      	ldr	r0, [pc, #400]	; (8003088 <MX_GPIO_Init+0x2f0>)
 8002ef6:	f007 ff47 	bl	800ad88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin, GPIO_PIN_RESET);
 8002efa:	2200      	movs	r2, #0
 8002efc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002f00:	4862      	ldr	r0, [pc, #392]	; (800308c <MX_GPIO_Init+0x2f4>)
 8002f02:	f007 ff41 	bl	800ad88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8002f06:	2200      	movs	r2, #0
 8002f08:	211b      	movs	r1, #27
 8002f0a:	4861      	ldr	r0, [pc, #388]	; (8003090 <MX_GPIO_Init+0x2f8>)
 8002f0c:	f007 ff3c 	bl	800ad88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_SS_Pin;
 8002f10:	2310      	movs	r3, #16
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f14:	2301      	movs	r3, #1
 8002f16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_SS_GPIO_Port, &GPIO_InitStruct);
 8002f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f24:	4619      	mov	r1, r3
 8002f26:	4853      	ldr	r0, [pc, #332]	; (8003074 <MX_GPIO_Init+0x2dc>)
 8002f28:	f007 fd6c 	bl	800aa04 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT11_Pin */
  GPIO_InitStruct.Pin = UI_INPUT11_Pin;
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f30:	2300      	movs	r3, #0
 8002f32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT11_GPIO_Port, &GPIO_InitStruct);
 8002f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	484d      	ldr	r0, [pc, #308]	; (8003074 <MX_GPIO_Init+0x2dc>)
 8002f40:	f007 fd60 	bl	800aa04 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_1V8_Pin OUT1_1V8_Pin OUT1_OD_Pin OUT0_OD_Pin
                           OUT0_1V8_Pin OUT2_1V8_Pin */
  GPIO_InitStruct.Pin = OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002f44:	f244 032f 	movw	r3, #16431	; 0x402f
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |OUT0_1V8_Pin|OUT2_1V8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f52:	2300      	movs	r3, #0
 8002f54:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4846      	ldr	r0, [pc, #280]	; (8003078 <MX_GPIO_Init+0x2e0>)
 8002f5e:	f007 fd51 	bl	800aa04 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT0_Pin */
  GPIO_InitStruct.Pin = UI_INPUT0_Pin;
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f66:	2300      	movs	r3, #0
 8002f68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT0_GPIO_Port, &GPIO_InitStruct);
 8002f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f72:	4619      	mov	r1, r3
 8002f74:	4845      	ldr	r0, [pc, #276]	; (800308c <MX_GPIO_Init+0x2f4>)
 8002f76:	f007 fd45 	bl	800aa04 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_CONFIG_Pin OUT1_CONFIG_Pin OUT2_CONFIG_Pin MCU_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin;
 8002f7a:	f241 1350 	movw	r3, #4432	; 0x1150
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f80:	2301      	movs	r3, #1
 8002f82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f90:	4619      	mov	r1, r3
 8002f92:	483a      	ldr	r0, [pc, #232]	; (800307c <MX_GPIO_Init+0x2e4>)
 8002f94:	f007 fd36 	bl	800aa04 <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin BACK_BTN_Pin */
  GPIO_InitStruct.Pin = DWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin|BACK_BTN_Pin;
 8002f98:	23f0      	movs	r3, #240	; 0xf0
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f9c:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <MX_GPIO_Init+0x2fc>)
 8002f9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4835      	ldr	r0, [pc, #212]	; (8003080 <MX_GPIO_Init+0x2e8>)
 8002fac:	f007 fd2a 	bl	800aa04 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT1_Pin */
  GPIO_InitStruct.Pin = UI_INPUT1_Pin;
 8002fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT1_GPIO_Port, &GPIO_InitStruct);
 8002fbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4834      	ldr	r0, [pc, #208]	; (8003098 <MX_GPIO_Init+0x300>)
 8002fc6:	f007 fd1d 	bl	800aa04 <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_INPUT2_Pin UI_INPUT10_Pin UI_INPUT5_Pin UI_INPUT9_Pin
                           UI_INPUT4_Pin UI_INPUT3_Pin UI_INPUT7_Pin UI_INPUT8_Pin
                           UI_INPUT6_Pin */
  GPIO_InitStruct.Pin = UI_INPUT2_Pin|UI_INPUT10_Pin|UI_INPUT5_Pin|UI_INPUT9_Pin
 8002fca:	f64f 7310 	movw	r3, #65296	; 0xff10
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |UI_INPUT4_Pin|UI_INPUT3_Pin|UI_INPUT7_Pin|UI_INPUT8_Pin
                          |UI_INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fdc:	4619      	mov	r1, r3
 8002fde:	482f      	ldr	r0, [pc, #188]	; (800309c <MX_GPIO_Init+0x304>)
 8002fe0:	f007 fd10 	bl	800aa04 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL2_Pin MCU_CTRL1_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL2_Pin|MCU_CTRL1_Pin;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4821      	ldr	r0, [pc, #132]	; (8003080 <MX_GPIO_Init+0x2e8>)
 8002ffc:	f007 fd02 	bl	800aa04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8003000:	f243 033c 	movw	r3, #12348	; 0x303c
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BTN4_Pin|BTN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003006:	2301      	movs	r3, #1
 8003008:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300e:	2300      	movs	r3, #0
 8003010:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003012:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003016:	4619      	mov	r1, r3
 8003018:	481a      	ldr	r0, [pc, #104]	; (8003084 <MX_GPIO_Init+0x2ec>)
 800301a:	f007 fcf3 	bl	800aa04 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_CONFIG_Pin FRONT_LED_CTRL_Pin */
  GPIO_InitStruct.Pin = OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin;
 800301e:	f241 0304 	movw	r3, #4100	; 0x1004
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003024:	2301      	movs	r3, #1
 8003026:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302c:	2300      	movs	r3, #0
 800302e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003034:	4619      	mov	r1, r3
 8003036:	4814      	ldr	r0, [pc, #80]	; (8003088 <MX_GPIO_Init+0x2f0>)
 8003038:	f007 fce4 	bl	800aa04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ZION_PWR_EN_Pin EDL_EN_Pin SPARE_SW_EN_Pin */
  GPIO_InitStruct.Pin = ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin;
 800303c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003042:	2301      	movs	r3, #1
 8003044:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	2300      	movs	r3, #0
 8003048:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304a:	2300      	movs	r3, #0
 800304c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800304e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003052:	4619      	mov	r1, r3
 8003054:	480d      	ldr	r0, [pc, #52]	; (800308c <MX_GPIO_Init+0x2f4>)
 8003056:	f007 fcd5 	bl	800aa04 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL0_Pin UART_MUX_CTRL_Pin LCD_EXTMODE_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin;
 800305a:	231b      	movs	r3, #27
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800305e:	2301      	movs	r3, #1
 8003060:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003066:	2300      	movs	r3, #0
 8003068:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800306a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800306e:	e017      	b.n	80030a0 <MX_GPIO_Init+0x308>
 8003070:	40023800 	.word	0x40023800
 8003074:	40021000 	.word	0x40021000
 8003078:	40021800 	.word	0x40021800
 800307c:	40022000 	.word	0x40022000
 8003080:	40022800 	.word	0x40022800
 8003084:	40021400 	.word	0x40021400
 8003088:	40021c00 	.word	0x40021c00
 800308c:	40020400 	.word	0x40020400
 8003090:	40022400 	.word	0x40022400
 8003094:	10210000 	.word	0x10210000
 8003098:	40020800 	.word	0x40020800
 800309c:	40020c00 	.word	0x40020c00
 80030a0:	4619      	mov	r1, r3
 80030a2:	480b      	ldr	r0, [pc, #44]	; (80030d0 <MX_GPIO_Init+0x338>)
 80030a4:	f007 fcae 	bl	800aa04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80030a8:	2200      	movs	r2, #0
 80030aa:	2105      	movs	r1, #5
 80030ac:	200a      	movs	r0, #10
 80030ae:	f007 f877 	bl	800a1a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80030b2:	200a      	movs	r0, #10
 80030b4:	f007 f890 	bl	800a1d8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80030b8:	2200      	movs	r2, #0
 80030ba:	2105      	movs	r1, #5
 80030bc:	2017      	movs	r0, #23
 80030be:	f007 f86f 	bl	800a1a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030c2:	2017      	movs	r0, #23
 80030c4:	f007 f888 	bl	800a1d8 <HAL_NVIC_EnableIRQ>

}
 80030c8:	bf00      	nop
 80030ca:	3740      	adds	r7, #64	; 0x40
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40022400 	.word	0x40022400

080030d4 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 80030dc:	1d39      	adds	r1, r7, #4
 80030de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030e2:	2201      	movs	r2, #1
 80030e4:	4803      	ldr	r0, [pc, #12]	; (80030f4 <__io_putchar+0x20>)
 80030e6:	f00c f8ed 	bl	800f2c4 <HAL_UART_Transmit>

	return ch;
 80030ea:	687b      	ldr	r3, [r7, #4]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20028bac 	.word	0x20028bac

080030f8 <outputGPIOBufInitialization>:

void outputGPIOBufInitialization(){
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
	memset(gpioOutputState,0,sizeof(gpioOutputState));
 80030fc:	220e      	movs	r2, #14
 80030fe:	2100      	movs	r1, #0
 8003100:	480d      	ldr	r0, [pc, #52]	; (8003138 <outputGPIOBufInitialization+0x40>)
 8003102:	f010 f84a 	bl	801319a <memset>
	setOutputGPIOState(outputGPIOs.odOut_0, ON); //set OD to high impediance
 8003106:	4b0d      	ldr	r3, [pc, #52]	; (800313c <outputGPIOBufInitialization+0x44>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	2101      	movs	r1, #1
 800310c:	4618      	mov	r0, r3
 800310e:	f000 f817 	bl	8003140 <setOutputGPIOState>
	setOutputGPIOState(outputGPIOs.odOut_1, ON); //set OD to high impediance
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <outputGPIOBufInitialization+0x44>)
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	2101      	movs	r1, #1
 8003118:	4618      	mov	r0, r3
 800311a:	f000 f811 	bl	8003140 <setOutputGPIOState>
	gpioOutputState[outputGPIOs.odOut_0]=1;
 800311e:	4b07      	ldr	r3, [pc, #28]	; (800313c <outputGPIOBufInitialization+0x44>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	4a05      	ldr	r2, [pc, #20]	; (8003138 <outputGPIOBufInitialization+0x40>)
 8003124:	2101      	movs	r1, #1
 8003126:	54d1      	strb	r1, [r2, r3]
	gpioOutputState[outputGPIOs.odOut_1]=1;
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <outputGPIOBufInitialization+0x44>)
 800312a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312c:	4a02      	ldr	r2, [pc, #8]	; (8003138 <outputGPIOBufInitialization+0x40>)
 800312e:	2101      	movs	r1, #1
 8003130:	54d1      	strb	r1, [r2, r3]
}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	2002baf0 	.word	0x2002baf0
 800313c:	20000044 	.word	0x20000044

08003140 <setOutputGPIOState>:

void setOutputGPIOState(int gpio, int state){
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]

	if(gpio == outputGPIOs.configOut_0){
 800314a:	4b87      	ldr	r3, [pc, #540]	; (8003368 <setOutputGPIOState+0x228>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	429a      	cmp	r2, r3
 8003152:	d10d      	bne.n	8003170 <setOutputGPIOState+0x30>
		HAL_GPIO_WritePin(GPIOH,OUT0_CONFIG_Pin,state);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	2104      	movs	r1, #4
 800315c:	4883      	ldr	r0, [pc, #524]	; (800336c <setOutputGPIOState+0x22c>)
 800315e:	f007 fe13 	bl	800ad88 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_0] = state;
 8003162:	4b81      	ldr	r3, [pc, #516]	; (8003368 <setOutputGPIOState+0x228>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	b2d1      	uxtb	r1, r2
 800316a:	4a81      	ldr	r2, [pc, #516]	; (8003370 <setOutputGPIOState+0x230>)
 800316c:	54d1      	strb	r1, [r2, r3]

	else if(gpio == outputGPIOs.odOut_1){
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
		gpioOutputState[outputGPIOs.odOut_1] = state;
	}
}
 800316e:	e0f7      	b.n	8003360 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_1){
 8003170:	4b7d      	ldr	r3, [pc, #500]	; (8003368 <setOutputGPIOState+0x228>)
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	429a      	cmp	r2, r3
 8003178:	d10d      	bne.n	8003196 <setOutputGPIOState+0x56>
		HAL_GPIO_WritePin(GPIOI,OUT1_CONFIG_Pin,state);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	2110      	movs	r1, #16
 8003182:	487c      	ldr	r0, [pc, #496]	; (8003374 <setOutputGPIOState+0x234>)
 8003184:	f007 fe00 	bl	800ad88 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_1] = state;
 8003188:	4b77      	ldr	r3, [pc, #476]	; (8003368 <setOutputGPIOState+0x228>)
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	b2d1      	uxtb	r1, r2
 8003190:	4a77      	ldr	r2, [pc, #476]	; (8003370 <setOutputGPIOState+0x230>)
 8003192:	54d1      	strb	r1, [r2, r3]
}
 8003194:	e0e4      	b.n	8003360 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_2){
 8003196:	4b74      	ldr	r3, [pc, #464]	; (8003368 <setOutputGPIOState+0x228>)
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	429a      	cmp	r2, r3
 800319e:	d10d      	bne.n	80031bc <setOutputGPIOState+0x7c>
		HAL_GPIO_WritePin(GPIOI,OUT2_CONFIG_Pin,state);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	2140      	movs	r1, #64	; 0x40
 80031a8:	4872      	ldr	r0, [pc, #456]	; (8003374 <setOutputGPIOState+0x234>)
 80031aa:	f007 fded 	bl	800ad88 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_2] = state;
 80031ae:	4b6e      	ldr	r3, [pc, #440]	; (8003368 <setOutputGPIOState+0x228>)
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	b2d1      	uxtb	r1, r2
 80031b6:	4a6e      	ldr	r2, [pc, #440]	; (8003370 <setOutputGPIOState+0x230>)
 80031b8:	54d1      	strb	r1, [r2, r3]
}
 80031ba:	e0d1      	b.n	8003360 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_3){
 80031bc:	4b6a      	ldr	r3, [pc, #424]	; (8003368 <setOutputGPIOState+0x228>)
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d10e      	bne.n	80031e4 <setOutputGPIOState+0xa4>
		HAL_GPIO_WritePin(GPIOI,OUT3_CONFIG_Pin,state);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031d0:	4868      	ldr	r0, [pc, #416]	; (8003374 <setOutputGPIOState+0x234>)
 80031d2:	f007 fdd9 	bl	800ad88 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_3] = state;
 80031d6:	4b64      	ldr	r3, [pc, #400]	; (8003368 <setOutputGPIOState+0x228>)
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	b2d1      	uxtb	r1, r2
 80031de:	4a64      	ldr	r2, [pc, #400]	; (8003370 <setOutputGPIOState+0x230>)
 80031e0:	54d1      	strb	r1, [r2, r3]
}
 80031e2:	e0bd      	b.n	8003360 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_0){
 80031e4:	4b60      	ldr	r3, [pc, #384]	; (8003368 <setOutputGPIOState+0x228>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d10d      	bne.n	800320a <setOutputGPIOState+0xca>
		HAL_GPIO_WritePin(GPIOJ,MCU_CTRL0_Pin,state);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	2110      	movs	r1, #16
 80031f6:	4860      	ldr	r0, [pc, #384]	; (8003378 <setOutputGPIOState+0x238>)
 80031f8:	f007 fdc6 	bl	800ad88 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_0] = state;
 80031fc:	4b5a      	ldr	r3, [pc, #360]	; (8003368 <setOutputGPIOState+0x228>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	b2d1      	uxtb	r1, r2
 8003204:	4a5a      	ldr	r2, [pc, #360]	; (8003370 <setOutputGPIOState+0x230>)
 8003206:	54d1      	strb	r1, [r2, r3]
}
 8003208:	e0aa      	b.n	8003360 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_1){
 800320a:	4b57      	ldr	r3, [pc, #348]	; (8003368 <setOutputGPIOState+0x228>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	429a      	cmp	r2, r3
 8003212:	d10d      	bne.n	8003230 <setOutputGPIOState+0xf0>
		HAL_GPIO_WritePin(GPIOK,MCU_CTRL1_Pin,state);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	2101      	movs	r1, #1
 800321c:	4857      	ldr	r0, [pc, #348]	; (800337c <setOutputGPIOState+0x23c>)
 800321e:	f007 fdb3 	bl	800ad88 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_1] = state;
 8003222:	4b51      	ldr	r3, [pc, #324]	; (8003368 <setOutputGPIOState+0x228>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	b2d1      	uxtb	r1, r2
 800322a:	4a51      	ldr	r2, [pc, #324]	; (8003370 <setOutputGPIOState+0x230>)
 800322c:	54d1      	strb	r1, [r2, r3]
}
 800322e:	e097      	b.n	8003360 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_2){
 8003230:	4b4d      	ldr	r3, [pc, #308]	; (8003368 <setOutputGPIOState+0x228>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	429a      	cmp	r2, r3
 8003238:	d10d      	bne.n	8003256 <setOutputGPIOState+0x116>
		HAL_GPIO_WritePin(GPIOK,MCU_CTRL2_Pin,state);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	2102      	movs	r1, #2
 8003242:	484e      	ldr	r0, [pc, #312]	; (800337c <setOutputGPIOState+0x23c>)
 8003244:	f007 fda0 	bl	800ad88 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_2] = state;
 8003248:	4b47      	ldr	r3, [pc, #284]	; (8003368 <setOutputGPIOState+0x228>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	b2d1      	uxtb	r1, r2
 8003250:	4a47      	ldr	r2, [pc, #284]	; (8003370 <setOutputGPIOState+0x230>)
 8003252:	54d1      	strb	r1, [r2, r3]
}
 8003254:	e084      	b.n	8003360 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_3){
 8003256:	4b44      	ldr	r3, [pc, #272]	; (8003368 <setOutputGPIOState+0x228>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	d10d      	bne.n	800327c <setOutputGPIOState+0x13c>
		HAL_GPIO_WritePin(GPIOJ,UART_MUX_CTRL_Pin,state);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	2108      	movs	r1, #8
 8003268:	4843      	ldr	r0, [pc, #268]	; (8003378 <setOutputGPIOState+0x238>)
 800326a:	f007 fd8d 	bl	800ad88 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_3] = state;
 800326e:	4b3e      	ldr	r3, [pc, #248]	; (8003368 <setOutputGPIOState+0x228>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	b2d1      	uxtb	r1, r2
 8003276:	4a3e      	ldr	r2, [pc, #248]	; (8003370 <setOutputGPIOState+0x230>)
 8003278:	54d1      	strb	r1, [r2, r3]
}
 800327a:	e071      	b.n	8003360 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_0){
 800327c:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <setOutputGPIOState+0x228>)
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	429a      	cmp	r2, r3
 8003284:	d10d      	bne.n	80032a2 <setOutputGPIOState+0x162>
		HAL_GPIO_WritePin(GPIOG,OUT0_1V8_Pin,state);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	2101      	movs	r1, #1
 800328e:	483c      	ldr	r0, [pc, #240]	; (8003380 <setOutputGPIOState+0x240>)
 8003290:	f007 fd7a 	bl	800ad88 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_0] = state;
 8003294:	4b34      	ldr	r3, [pc, #208]	; (8003368 <setOutputGPIOState+0x228>)
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	b2d1      	uxtb	r1, r2
 800329c:	4a34      	ldr	r2, [pc, #208]	; (8003370 <setOutputGPIOState+0x230>)
 800329e:	54d1      	strb	r1, [r2, r3]
}
 80032a0:	e05e      	b.n	8003360 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_1){
 80032a2:	4b31      	ldr	r3, [pc, #196]	; (8003368 <setOutputGPIOState+0x228>)
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d10d      	bne.n	80032c8 <setOutputGPIOState+0x188>
		HAL_GPIO_WritePin(GPIOG,OUT1_1V8_Pin,state);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	2102      	movs	r1, #2
 80032b4:	4832      	ldr	r0, [pc, #200]	; (8003380 <setOutputGPIOState+0x240>)
 80032b6:	f007 fd67 	bl	800ad88 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_1] = state;
 80032ba:	4b2b      	ldr	r3, [pc, #172]	; (8003368 <setOutputGPIOState+0x228>)
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	b2d1      	uxtb	r1, r2
 80032c2:	4a2b      	ldr	r2, [pc, #172]	; (8003370 <setOutputGPIOState+0x230>)
 80032c4:	54d1      	strb	r1, [r2, r3]
}
 80032c6:	e04b      	b.n	8003360 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_2){
 80032c8:	4b27      	ldr	r3, [pc, #156]	; (8003368 <setOutputGPIOState+0x228>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d10d      	bne.n	80032ee <setOutputGPIOState+0x1ae>
		HAL_GPIO_WritePin(GPIOG,OUT2_1V8_Pin,state);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	2120      	movs	r1, #32
 80032da:	4829      	ldr	r0, [pc, #164]	; (8003380 <setOutputGPIOState+0x240>)
 80032dc:	f007 fd54 	bl	800ad88 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_2] = state;
 80032e0:	4b21      	ldr	r3, [pc, #132]	; (8003368 <setOutputGPIOState+0x228>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	b2d1      	uxtb	r1, r2
 80032e8:	4a21      	ldr	r2, [pc, #132]	; (8003370 <setOutputGPIOState+0x230>)
 80032ea:	54d1      	strb	r1, [r2, r3]
}
 80032ec:	e038      	b.n	8003360 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_3){
 80032ee:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <setOutputGPIOState+0x228>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d10e      	bne.n	8003316 <setOutputGPIOState+0x1d6>
		HAL_GPIO_WritePin(GPIOG,OUT3_1V8_Pin,state);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003302:	481f      	ldr	r0, [pc, #124]	; (8003380 <setOutputGPIOState+0x240>)
 8003304:	f007 fd40 	bl	800ad88 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_3] = state;
 8003308:	4b17      	ldr	r3, [pc, #92]	; (8003368 <setOutputGPIOState+0x228>)
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	b2d1      	uxtb	r1, r2
 8003310:	4a17      	ldr	r2, [pc, #92]	; (8003370 <setOutputGPIOState+0x230>)
 8003312:	54d1      	strb	r1, [r2, r3]
}
 8003314:	e024      	b.n	8003360 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.odOut_0){
 8003316:	4b14      	ldr	r3, [pc, #80]	; (8003368 <setOutputGPIOState+0x228>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	429a      	cmp	r2, r3
 800331e:	d10d      	bne.n	800333c <setOutputGPIOState+0x1fc>
		HAL_GPIO_WritePin(GPIOG,OUT0_OD_Pin,state);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	2104      	movs	r1, #4
 8003328:	4815      	ldr	r0, [pc, #84]	; (8003380 <setOutputGPIOState+0x240>)
 800332a:	f007 fd2d 	bl	800ad88 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.odOut_0] = state;
 800332e:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <setOutputGPIOState+0x228>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	b2d1      	uxtb	r1, r2
 8003336:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <setOutputGPIOState+0x230>)
 8003338:	54d1      	strb	r1, [r2, r3]
}
 800333a:	e011      	b.n	8003360 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.odOut_1){
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <setOutputGPIOState+0x228>)
 800333e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	429a      	cmp	r2, r3
 8003344:	d10c      	bne.n	8003360 <setOutputGPIOState+0x220>
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	2108      	movs	r1, #8
 800334e:	480c      	ldr	r0, [pc, #48]	; (8003380 <setOutputGPIOState+0x240>)
 8003350:	f007 fd1a 	bl	800ad88 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.odOut_1] = state;
 8003354:	4b04      	ldr	r3, [pc, #16]	; (8003368 <setOutputGPIOState+0x228>)
 8003356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	b2d1      	uxtb	r1, r2
 800335c:	4a04      	ldr	r2, [pc, #16]	; (8003370 <setOutputGPIOState+0x230>)
 800335e:	54d1      	strb	r1, [r2, r3]
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000044 	.word	0x20000044
 800336c:	40021c00 	.word	0x40021c00
 8003370:	2002baf0 	.word	0x2002baf0
 8003374:	40022000 	.word	0x40022000
 8003378:	40022400 	.word	0x40022400
 800337c:	40022800 	.word	0x40022800
 8003380:	40021800 	.word	0x40021800

08003384 <uartTransmitInt>:
	uart_buf_len = sprintf(uart_buf, message);
	if (uart == 7){
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}
}
void uartTransmitInt(uint16_t *number, int uart){
 8003384:	b580      	push	{r7, lr}
 8003386:	b098      	sub	sp, #96	; 0x60
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
	char uart_buf[80];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, "0x%x\r\n", number);
 800338e:	f107 030c 	add.w	r3, r7, #12
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	4909      	ldr	r1, [pc, #36]	; (80033bc <uartTransmitInt+0x38>)
 8003396:	4618      	mov	r0, r3
 8003398:	f010 fd84 	bl	8013ea4 <siprintf>
 800339c:	65f8      	str	r0, [r7, #92]	; 0x5c
	if (uart == 7){
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b07      	cmp	r3, #7
 80033a2:	d107      	bne.n	80033b4 <uartTransmitInt+0x30>
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
 80033a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	f107 010c 	add.w	r1, r7, #12
 80033ac:	2364      	movs	r3, #100	; 0x64
 80033ae:	4804      	ldr	r0, [pc, #16]	; (80033c0 <uartTransmitInt+0x3c>)
 80033b0:	f00b ff88 	bl	800f2c4 <HAL_UART_Transmit>
	}

}
 80033b4:	bf00      	nop
 80033b6:	3760      	adds	r7, #96	; 0x60
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	08017274 	.word	0x08017274
 80033c0:	20028bac 	.word	0x20028bac

080033c4 <readI2CRegister>:
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}

}

uint8_t * readI2CRegister(uint8_t address, uint8_t reg, int bytes, int i2CBank){
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60ba      	str	r2, [r7, #8]
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	4603      	mov	r3, r0
 80033d0:	73fb      	strb	r3, [r7, #15]
 80033d2:	460b      	mov	r3, r1
 80033d4:	73bb      	strb	r3, [r7, #14]
	static uint8_t buf[20];
	HAL_StatusTypeDef ret;
	buf[0]=reg;
 80033d6:	4a4f      	ldr	r2, [pc, #316]	; (8003514 <readI2CRegister+0x150>)
 80033d8:	7bbb      	ldrb	r3, [r7, #14]
 80033da:	7013      	strb	r3, [r2, #0]
  	if(i2CBank == 1){
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d10c      	bne.n	80033fc <readI2CRegister+0x38>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	b299      	uxth	r1, r3
 80033e6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2301      	movs	r3, #1
 80033ee:	4a49      	ldr	r2, [pc, #292]	; (8003514 <readI2CRegister+0x150>)
 80033f0:	4849      	ldr	r0, [pc, #292]	; (8003518 <readI2CRegister+0x154>)
 80033f2:	f007 fdb1 	bl	800af58 <HAL_I2C_Master_Transmit>
 80033f6:	4603      	mov	r3, r0
 80033f8:	75fb      	strb	r3, [r7, #23]
 80033fa:	e02e      	b.n	800345a <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 2){
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d10c      	bne.n	800341c <readI2CRegister+0x58>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	b299      	uxth	r1, r3
 8003406:	f04f 33ff 	mov.w	r3, #4294967295
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	2301      	movs	r3, #1
 800340e:	4a41      	ldr	r2, [pc, #260]	; (8003514 <readI2CRegister+0x150>)
 8003410:	4842      	ldr	r0, [pc, #264]	; (800351c <readI2CRegister+0x158>)
 8003412:	f007 fda1 	bl	800af58 <HAL_I2C_Master_Transmit>
 8003416:	4603      	mov	r3, r0
 8003418:	75fb      	strb	r3, [r7, #23]
 800341a:	e01e      	b.n	800345a <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 3){
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b03      	cmp	r3, #3
 8003420:	d10c      	bne.n	800343c <readI2CRegister+0x78>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, 1, HAL_MAX_DELAY);
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	b299      	uxth	r1, r3
 8003426:	f04f 33ff 	mov.w	r3, #4294967295
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	2301      	movs	r3, #1
 800342e:	4a39      	ldr	r2, [pc, #228]	; (8003514 <readI2CRegister+0x150>)
 8003430:	483b      	ldr	r0, [pc, #236]	; (8003520 <readI2CRegister+0x15c>)
 8003432:	f007 fd91 	bl	800af58 <HAL_I2C_Master_Transmit>
 8003436:	4603      	mov	r3, r0
 8003438:	75fb      	strb	r3, [r7, #23]
 800343a:	e00e      	b.n	800345a <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 4){
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b04      	cmp	r3, #4
 8003440:	d10b      	bne.n	800345a <readI2CRegister+0x96>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, 1, HAL_MAX_DELAY);
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	b299      	uxth	r1, r3
 8003446:	f04f 33ff 	mov.w	r3, #4294967295
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	2301      	movs	r3, #1
 800344e:	4a31      	ldr	r2, [pc, #196]	; (8003514 <readI2CRegister+0x150>)
 8003450:	4834      	ldr	r0, [pc, #208]	; (8003524 <readI2CRegister+0x160>)
 8003452:	f007 fd81 	bl	800af58 <HAL_I2C_Master_Transmit>
 8003456:	4603      	mov	r3, r0
 8003458:	75fb      	strb	r3, [r7, #23]
  	}
	  if ( ret != HAL_OK ) {
 800345a:	7dfb      	ldrb	r3, [r7, #23]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <readI2CRegister+0xa0>
	          return (uint8_t*)0xfe;
 8003460:	23fe      	movs	r3, #254	; 0xfe
 8003462:	e052      	b.n	800350a <readI2CRegister+0x146>
	        }
	  else {
		  if(i2CBank == 1){
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d10e      	bne.n	8003488 <readI2CRegister+0xc4>
				ret = HAL_I2C_Master_Receive(&hi2c1, address, buf, bytes, HAL_MAX_DELAY);
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	b299      	uxth	r1, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	b29a      	uxth	r2, r3
 8003472:	f04f 33ff 	mov.w	r3, #4294967295
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	4613      	mov	r3, r2
 800347a:	4a26      	ldr	r2, [pc, #152]	; (8003514 <readI2CRegister+0x150>)
 800347c:	4826      	ldr	r0, [pc, #152]	; (8003518 <readI2CRegister+0x154>)
 800347e:	f007 fe5f 	bl	800b140 <HAL_I2C_Master_Receive>
 8003482:	4603      	mov	r3, r0
 8003484:	75fb      	strb	r3, [r7, #23]
 8003486:	e034      	b.n	80034f2 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 2){
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d10e      	bne.n	80034ac <readI2CRegister+0xe8>
				ret = HAL_I2C_Master_Receive(&hi2c2, address, buf, bytes, HAL_MAX_DELAY);
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	b299      	uxth	r1, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	b29a      	uxth	r2, r3
 8003496:	f04f 33ff 	mov.w	r3, #4294967295
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <readI2CRegister+0x150>)
 80034a0:	481e      	ldr	r0, [pc, #120]	; (800351c <readI2CRegister+0x158>)
 80034a2:	f007 fe4d 	bl	800b140 <HAL_I2C_Master_Receive>
 80034a6:	4603      	mov	r3, r0
 80034a8:	75fb      	strb	r3, [r7, #23]
 80034aa:	e022      	b.n	80034f2 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 3){
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d10e      	bne.n	80034d0 <readI2CRegister+0x10c>
				ret = HAL_I2C_Master_Receive(&hi2c3, address, buf, bytes, HAL_MAX_DELAY);
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	b299      	uxth	r1, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	4a14      	ldr	r2, [pc, #80]	; (8003514 <readI2CRegister+0x150>)
 80034c4:	4816      	ldr	r0, [pc, #88]	; (8003520 <readI2CRegister+0x15c>)
 80034c6:	f007 fe3b 	bl	800b140 <HAL_I2C_Master_Receive>
 80034ca:	4603      	mov	r3, r0
 80034cc:	75fb      	strb	r3, [r7, #23]
 80034ce:	e010      	b.n	80034f2 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 4){
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d10d      	bne.n	80034f2 <readI2CRegister+0x12e>
				ret = HAL_I2C_Master_Receive(&hi2c4, address, buf, bytes, HAL_MAX_DELAY);
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	b299      	uxth	r1, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	b29a      	uxth	r2, r3
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	4613      	mov	r3, r2
 80034e6:	4a0b      	ldr	r2, [pc, #44]	; (8003514 <readI2CRegister+0x150>)
 80034e8:	480e      	ldr	r0, [pc, #56]	; (8003524 <readI2CRegister+0x160>)
 80034ea:	f007 fe29 	bl	800b140 <HAL_I2C_Master_Receive>
 80034ee:	4603      	mov	r3, r0
 80034f0:	75fb      	strb	r3, [r7, #23]
			}
		  if ( ret != HAL_OK ) {
 80034f2:	7dfb      	ldrb	r3, [r7, #23]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <readI2CRegister+0x138>
		          return (uint8_t*)0xfe;
 80034f8:	23fe      	movs	r3, #254	; 0xfe
 80034fa:	e006      	b.n	800350a <readI2CRegister+0x146>
		        }
		  else{
			  uartTransmitInt(buf[0],7);
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <readI2CRegister+0x150>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2107      	movs	r1, #7
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff ff3e 	bl	8003384 <uartTransmitInt>
			  return buf;
 8003508:	4b02      	ldr	r3, [pc, #8]	; (8003514 <readI2CRegister+0x150>)
		  }
}
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	2000330c 	.word	0x2000330c
 8003518:	20028d28 	.word	0x20028d28
 800351c:	20029178 	.word	0x20029178
 8003520:	20028b14 	.word	0x20028b14
 8003524:	20028b60 	.word	0x20028b60

08003528 <writeI2CRegister>:
int writeI2CRegister(uint8_t address, uint8_t reg, uint8_t * bytes, int numBytes, int i2CBank){
 8003528:	b580      	push	{r7, lr}
 800352a:	b08e      	sub	sp, #56	; 0x38
 800352c:	af02      	add	r7, sp, #8
 800352e:	60ba      	str	r2, [r7, #8]
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	4603      	mov	r3, r0
 8003534:	73fb      	strb	r3, [r7, #15]
 8003536:	460b      	mov	r3, r1
 8003538:	73bb      	strb	r3, [r7, #14]
	  	uint8_t buf[20];
	  	HAL_StatusTypeDef ret;
	  	buf[0]=reg;
 800353a:	7bbb      	ldrb	r3, [r7, #14]
 800353c:	753b      	strb	r3, [r7, #20]
	  	int x = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 8003542:	2300      	movs	r3, #0
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
 8003546:	e00d      	b.n	8003564 <writeI2CRegister+0x3c>
	  		buf[1+x] = bytes[x];
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	441a      	add	r2, r3
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	3301      	adds	r3, #1
 8003552:	7812      	ldrb	r2, [r2, #0]
 8003554:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003558:	440b      	add	r3, r1
 800355a:	f803 2c1c 	strb.w	r2, [r3, #-28]
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	3301      	adds	r3, #1
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
 8003564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003566:	2b02      	cmp	r3, #2
 8003568:	d9ee      	bls.n	8003548 <writeI2CRegister+0x20>
	  	}
	  	if(i2CBank == 1){
 800356a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356c:	2b01      	cmp	r3, #1
 800356e:	d112      	bne.n	8003596 <writeI2CRegister+0x6e>
	  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	b299      	uxth	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	b29b      	uxth	r3, r3
 8003578:	3301      	adds	r3, #1
 800357a:	b298      	uxth	r0, r3
 800357c:	f107 0214 	add.w	r2, r7, #20
 8003580:	f04f 33ff 	mov.w	r3, #4294967295
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	4603      	mov	r3, r0
 8003588:	4829      	ldr	r0, [pc, #164]	; (8003630 <writeI2CRegister+0x108>)
 800358a:	f007 fce5 	bl	800af58 <HAL_I2C_Master_Transmit>
 800358e:	4603      	mov	r3, r0
 8003590:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003594:	e040      	b.n	8003618 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 2){
 8003596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003598:	2b02      	cmp	r3, #2
 800359a:	d112      	bne.n	80035c2 <writeI2CRegister+0x9a>
	  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, numBytes+1, HAL_MAX_DELAY);
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	b299      	uxth	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3301      	adds	r3, #1
 80035a6:	b298      	uxth	r0, r3
 80035a8:	f107 0214 	add.w	r2, r7, #20
 80035ac:	f04f 33ff 	mov.w	r3, #4294967295
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	4603      	mov	r3, r0
 80035b4:	481f      	ldr	r0, [pc, #124]	; (8003634 <writeI2CRegister+0x10c>)
 80035b6:	f007 fccf 	bl	800af58 <HAL_I2C_Master_Transmit>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80035c0:	e02a      	b.n	8003618 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 3){
 80035c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d112      	bne.n	80035ee <writeI2CRegister+0xc6>
	  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, numBytes+1, HAL_MAX_DELAY);
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	b299      	uxth	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	b298      	uxth	r0, r3
 80035d4:	f107 0214 	add.w	r2, r7, #20
 80035d8:	f04f 33ff 	mov.w	r3, #4294967295
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	4603      	mov	r3, r0
 80035e0:	4815      	ldr	r0, [pc, #84]	; (8003638 <writeI2CRegister+0x110>)
 80035e2:	f007 fcb9 	bl	800af58 <HAL_I2C_Master_Transmit>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80035ec:	e014      	b.n	8003618 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 4){
 80035ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d111      	bne.n	8003618 <writeI2CRegister+0xf0>
	  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, numBytes+1, HAL_MAX_DELAY);
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	b299      	uxth	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3301      	adds	r3, #1
 80035fe:	b298      	uxth	r0, r3
 8003600:	f107 0214 	add.w	r2, r7, #20
 8003604:	f04f 33ff 	mov.w	r3, #4294967295
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	4603      	mov	r3, r0
 800360c:	480b      	ldr	r0, [pc, #44]	; (800363c <writeI2CRegister+0x114>)
 800360e:	f007 fca3 	bl	800af58 <HAL_I2C_Master_Transmit>
 8003612:	4603      	mov	r3, r0
 8003614:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  	}
	  	if ( ret != HAL_OK ) {
 8003618:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <writeI2CRegister+0xfc>
	  	          return 0;
 8003620:	2300      	movs	r3, #0
 8003622:	e000      	b.n	8003626 <writeI2CRegister+0xfe>
	  	        }
	  	else {
	  		  return 1;
 8003624:	2301      	movs	r3, #1
	  }
}
 8003626:	4618      	mov	r0, r3
 8003628:	3730      	adds	r7, #48	; 0x30
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20028d28 	.word	0x20028d28
 8003634:	20029178 	.word	0x20029178
 8003638:	20028b14 	.word	0x20028b14
 800363c:	20028b60 	.word	0x20028b60

08003640 <configureLEDDriver>:
void configureLEDDriver(){
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af02      	add	r7, sp, #8
	uint8_t currentMultiplier = 0b00000001;
 8003646:	2301      	movs	r3, #1
 8003648:	71fb      	strb	r3, [r7, #7]
	static uint8_t* clear[1];
	clear[0]=0x0;
 800364a:	4b41      	ldr	r3, [pc, #260]	; (8003750 <configureLEDDriver+0x110>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
	uint8_t * buf;
	//reduce the current multiplier to set brightness lower. See if this works. If not, we can work with PWM.
	writeI2CRegister(LED.address, LED.iref_reg, (uint8_t*)currentMultiplier,1,LED.i2cBank);
 8003650:	4b40      	ldr	r3, [pc, #256]	; (8003754 <configureLEDDriver+0x114>)
 8003652:	7818      	ldrb	r0, [r3, #0]
 8003654:	4b3f      	ldr	r3, [pc, #252]	; (8003754 <configureLEDDriver+0x114>)
 8003656:	7999      	ldrb	r1, [r3, #6]
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	461a      	mov	r2, r3
 800365c:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <configureLEDDriver+0x114>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	2301      	movs	r3, #1
 8003664:	f7ff ff60 	bl	8003528 <writeI2CRegister>
	buf = readI2CRegister(LED.address,LED.iref_reg,1,LED.i2cBank);
 8003668:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <configureLEDDriver+0x114>)
 800366a:	7818      	ldrb	r0, [r3, #0]
 800366c:	4b39      	ldr	r3, [pc, #228]	; (8003754 <configureLEDDriver+0x114>)
 800366e:	7999      	ldrb	r1, [r3, #6]
 8003670:	4b38      	ldr	r3, [pc, #224]	; (8003754 <configureLEDDriver+0x114>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	f7ff fea5 	bl	80033c4 <readI2CRegister>
 800367a:	6038      	str	r0, [r7, #0]
	uartTransmitInt(buf[0],7);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2107      	movs	r1, #7
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fe7e 	bl	8003384 <uartTransmitInt>
	//Turn on oscillator. Must be turned on before LED driver functions
	writeI2CRegister(LED.address,LED.mode0_reg,(uint8_t*)LED.mode0_oscon_value,1,LED.i2cBank);
 8003688:	4b32      	ldr	r3, [pc, #200]	; (8003754 <configureLEDDriver+0x114>)
 800368a:	7818      	ldrb	r0, [r3, #0]
 800368c:	4b31      	ldr	r3, [pc, #196]	; (8003754 <configureLEDDriver+0x114>)
 800368e:	7859      	ldrb	r1, [r3, #1]
 8003690:	4b30      	ldr	r3, [pc, #192]	; (8003754 <configureLEDDriver+0x114>)
 8003692:	79db      	ldrb	r3, [r3, #7]
 8003694:	461a      	mov	r2, r3
 8003696:	4b2f      	ldr	r3, [pc, #188]	; (8003754 <configureLEDDriver+0x114>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	2301      	movs	r3, #1
 800369e:	f7ff ff43 	bl	8003528 <writeI2CRegister>
	//clear the default state of the led register.
	writeI2CRegister(LED.address,LED.led0_reg,(uint8_t*)clear,1,LED.i2cBank);
 80036a2:	4b2c      	ldr	r3, [pc, #176]	; (8003754 <configureLEDDriver+0x114>)
 80036a4:	7818      	ldrb	r0, [r3, #0]
 80036a6:	4b2b      	ldr	r3, [pc, #172]	; (8003754 <configureLEDDriver+0x114>)
 80036a8:	7899      	ldrb	r1, [r3, #2]
 80036aa:	4b2a      	ldr	r3, [pc, #168]	; (8003754 <configureLEDDriver+0x114>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	2301      	movs	r3, #1
 80036b2:	4a27      	ldr	r2, [pc, #156]	; (8003750 <configureLEDDriver+0x110>)
 80036b4:	f7ff ff38 	bl	8003528 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led1_reg,(uint8_t*)clear,1,LED.i2cBank);
 80036b8:	4b26      	ldr	r3, [pc, #152]	; (8003754 <configureLEDDriver+0x114>)
 80036ba:	7818      	ldrb	r0, [r3, #0]
 80036bc:	4b25      	ldr	r3, [pc, #148]	; (8003754 <configureLEDDriver+0x114>)
 80036be:	78d9      	ldrb	r1, [r3, #3]
 80036c0:	4b24      	ldr	r3, [pc, #144]	; (8003754 <configureLEDDriver+0x114>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2301      	movs	r3, #1
 80036c8:	4a21      	ldr	r2, [pc, #132]	; (8003750 <configureLEDDriver+0x110>)
 80036ca:	f7ff ff2d 	bl	8003528 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led2_reg,(uint8_t*)clear,1,LED.i2cBank);
 80036ce:	4b21      	ldr	r3, [pc, #132]	; (8003754 <configureLEDDriver+0x114>)
 80036d0:	7818      	ldrb	r0, [r3, #0]
 80036d2:	4b20      	ldr	r3, [pc, #128]	; (8003754 <configureLEDDriver+0x114>)
 80036d4:	7919      	ldrb	r1, [r3, #4]
 80036d6:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <configureLEDDriver+0x114>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	2301      	movs	r3, #1
 80036de:	4a1c      	ldr	r2, [pc, #112]	; (8003750 <configureLEDDriver+0x110>)
 80036e0:	f7ff ff22 	bl	8003528 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led3_reg,(uint8_t*)clear,1,LED.i2cBank);
 80036e4:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <configureLEDDriver+0x114>)
 80036e6:	7818      	ldrb	r0, [r3, #0]
 80036e8:	4b1a      	ldr	r3, [pc, #104]	; (8003754 <configureLEDDriver+0x114>)
 80036ea:	7959      	ldrb	r1, [r3, #5]
 80036ec:	4b19      	ldr	r3, [pc, #100]	; (8003754 <configureLEDDriver+0x114>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	2301      	movs	r3, #1
 80036f4:	4a16      	ldr	r2, [pc, #88]	; (8003750 <configureLEDDriver+0x110>)
 80036f6:	f7ff ff17 	bl	8003528 <writeI2CRegister>
	//set the PWM for the tri-color led. Thing is bright so PWM is very low.
	writeI2CRegister(LED.address,LED.led7_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 80036fa:	4b16      	ldr	r3, [pc, #88]	; (8003754 <configureLEDDriver+0x114>)
 80036fc:	7818      	ldrb	r0, [r3, #0]
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <configureLEDDriver+0x114>)
 8003700:	7a19      	ldrb	r1, [r3, #8]
 8003702:	4b14      	ldr	r3, [pc, #80]	; (8003754 <configureLEDDriver+0x114>)
 8003704:	7adb      	ldrb	r3, [r3, #11]
 8003706:	461a      	mov	r2, r3
 8003708:	4b12      	ldr	r3, [pc, #72]	; (8003754 <configureLEDDriver+0x114>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	2301      	movs	r3, #1
 8003710:	f7ff ff0a 	bl	8003528 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led8_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 8003714:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <configureLEDDriver+0x114>)
 8003716:	7818      	ldrb	r0, [r3, #0]
 8003718:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <configureLEDDriver+0x114>)
 800371a:	7a59      	ldrb	r1, [r3, #9]
 800371c:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <configureLEDDriver+0x114>)
 800371e:	7adb      	ldrb	r3, [r3, #11]
 8003720:	461a      	mov	r2, r3
 8003722:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <configureLEDDriver+0x114>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	2301      	movs	r3, #1
 800372a:	f7ff fefd 	bl	8003528 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led9_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <configureLEDDriver+0x114>)
 8003730:	7818      	ldrb	r0, [r3, #0]
 8003732:	4b08      	ldr	r3, [pc, #32]	; (8003754 <configureLEDDriver+0x114>)
 8003734:	7a99      	ldrb	r1, [r3, #10]
 8003736:	4b07      	ldr	r3, [pc, #28]	; (8003754 <configureLEDDriver+0x114>)
 8003738:	7adb      	ldrb	r3, [r3, #11]
 800373a:	461a      	mov	r2, r3
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <configureLEDDriver+0x114>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	2301      	movs	r3, #1
 8003744:	f7ff fef0 	bl	8003528 <writeI2CRegister>
}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20003320 	.word	0x20003320
 8003754:	20000004 	.word	0x20000004

08003758 <setErrorLED>:

//Configures specified LED to either fully on or off.
void setErrorLED(int led,_Bool change){
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	; 0x28
 800375c:	af02      	add	r7, sp, #8
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	70fb      	strb	r3, [r7, #3]
	const uint8_t led0 = 0b00000001;
 8003764:	2301      	movs	r3, #1
 8003766:	76bb      	strb	r3, [r7, #26]
	const uint8_t led1 = 0b00000100;
 8003768:	2304      	movs	r3, #4
 800376a:	767b      	strb	r3, [r7, #25]
	const uint8_t led2 = 0b00010000;
 800376c:	2310      	movs	r3, #16
 800376e:	763b      	strb	r3, [r7, #24]
	const uint8_t led3 = 0b01000000;
 8003770:	2340      	movs	r3, #64	; 0x40
 8003772:	75fb      	strb	r3, [r7, #23]
	const uint8_t led0_pwm = 0b00000010;
 8003774:	2302      	movs	r3, #2
 8003776:	75bb      	strb	r3, [r7, #22]
	const uint8_t led1_pwm = 0b00001000;
 8003778:	2308      	movs	r3, #8
 800377a:	757b      	strb	r3, [r7, #21]
	const uint8_t led2_pwm = 0b00100000;
 800377c:	2320      	movs	r3, #32
 800377e:	753b      	strb	r3, [r7, #20]
	const uint8_t led3_pwm = 0b10000000;
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	74fb      	strb	r3, [r7, #19]
  	uint8_t* ledRegisterContents;
  	int ledBitNumber;
  	uint8_t ledRegister;
	if(led <4){
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b03      	cmp	r3, #3
 8003788:	dc05      	bgt.n	8003796 <setErrorLED+0x3e>
		ledRegister = LED.led0_reg;
 800378a:	4b80      	ldr	r3, [pc, #512]	; (800398c <setErrorLED+0x234>)
 800378c:	789b      	ldrb	r3, [r3, #2]
 800378e:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	e019      	b.n	80037ca <setErrorLED+0x72>
	}
	else if(led <8){
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b07      	cmp	r3, #7
 800379a:	dc06      	bgt.n	80037aa <setErrorLED+0x52>
		ledRegister = LED.led1_reg;
 800379c:	4b7b      	ldr	r3, [pc, #492]	; (800398c <setErrorLED+0x234>)
 800379e:	78db      	ldrb	r3, [r3, #3]
 80037a0:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-4;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3b04      	subs	r3, #4
 80037a6:	61fb      	str	r3, [r7, #28]
 80037a8:	e00f      	b.n	80037ca <setErrorLED+0x72>
	}
	else if(led <12){
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b0b      	cmp	r3, #11
 80037ae:	dc06      	bgt.n	80037be <setErrorLED+0x66>
		ledRegister = LED.led2_reg;
 80037b0:	4b76      	ldr	r3, [pc, #472]	; (800398c <setErrorLED+0x234>)
 80037b2:	791b      	ldrb	r3, [r3, #4]
 80037b4:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-8;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3b08      	subs	r3, #8
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	e005      	b.n	80037ca <setErrorLED+0x72>
	}
	else{ //put this in to humor those who want to try using unconnected LEDs
		ledRegister = LED.led3_reg;
 80037be:	4b73      	ldr	r3, [pc, #460]	; (800398c <setErrorLED+0x234>)
 80037c0:	795b      	ldrb	r3, [r3, #5]
 80037c2:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-12;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3b0c      	subs	r3, #12
 80037c8:	61fb      	str	r3, [r7, #28]
	}
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 80037ca:	4b70      	ldr	r3, [pc, #448]	; (800398c <setErrorLED+0x234>)
 80037cc:	7818      	ldrb	r0, [r3, #0]
 80037ce:	4b6f      	ldr	r3, [pc, #444]	; (800398c <setErrorLED+0x234>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	7ef9      	ldrb	r1, [r7, #27]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f7ff fdf5 	bl	80033c4 <readI2CRegister>
 80037da:	60f8      	str	r0, [r7, #12]
	switch(ledBitNumber){
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	f200 80bd 	bhi.w	800395e <setErrorLED+0x206>
 80037e4:	a201      	add	r2, pc, #4	; (adr r2, 80037ec <setErrorLED+0x94>)
 80037e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ea:	bf00      	nop
 80037ec:	080037fd 	.word	0x080037fd
 80037f0:	08003863 	.word	0x08003863
 80037f4:	080038c9 	.word	0x080038c9
 80037f8:	080038f9 	.word	0x080038f9

	case 0:
		if(change){
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d012      	beq.n	8003828 <setErrorLED+0xd0>
			if(led == 8){
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b08      	cmp	r3, #8
 8003806:	d107      	bne.n	8003818 <setErrorLED+0xc0>
				ledRegisterContents[0] |= led0_pwm;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	781a      	ldrb	r2, [r3, #0]
 800380c:	7dbb      	ldrb	r3, [r7, #22]
 800380e:	4313      	orrs	r3, r2
 8003810:	b2da      	uxtb	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led0;
			}
		}
		break;
 8003816:	e0a2      	b.n	800395e <setErrorLED+0x206>
				ledRegisterContents[0] |= led0;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	781a      	ldrb	r2, [r3, #0]
 800381c:	7ebb      	ldrb	r3, [r7, #26]
 800381e:	4313      	orrs	r3, r2
 8003820:	b2da      	uxtb	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	701a      	strb	r2, [r3, #0]
		break;
 8003826:	e09a      	b.n	800395e <setErrorLED+0x206>
			if(led == 8){
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b08      	cmp	r3, #8
 800382c:	d10c      	bne.n	8003848 <setErrorLED+0xf0>
				ledRegisterContents[0] &= ~led0_pwm;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	b25a      	sxtb	r2, r3
 8003834:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003838:	43db      	mvns	r3, r3
 800383a:	b25b      	sxtb	r3, r3
 800383c:	4013      	ands	r3, r2
 800383e:	b25b      	sxtb	r3, r3
 8003840:	b2da      	uxtb	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	701a      	strb	r2, [r3, #0]
		break;
 8003846:	e08a      	b.n	800395e <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led0;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b25a      	sxtb	r2, r3
 800384e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003852:	43db      	mvns	r3, r3
 8003854:	b25b      	sxtb	r3, r3
 8003856:	4013      	ands	r3, r2
 8003858:	b25b      	sxtb	r3, r3
 800385a:	b2da      	uxtb	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	701a      	strb	r2, [r3, #0]
		break;
 8003860:	e07d      	b.n	800395e <setErrorLED+0x206>

	case 1:
		if(change){
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d012      	beq.n	800388e <setErrorLED+0x136>
			if(led == 9){
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b09      	cmp	r3, #9
 800386c:	d107      	bne.n	800387e <setErrorLED+0x126>
				ledRegisterContents[0] |= led1_pwm;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	7d7b      	ldrb	r3, [r7, #21]
 8003874:	4313      	orrs	r3, r2
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led1;
			}
		}
		break;
 800387c:	e06f      	b.n	800395e <setErrorLED+0x206>
				ledRegisterContents[0] |= led1;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	781a      	ldrb	r2, [r3, #0]
 8003882:	7e7b      	ldrb	r3, [r7, #25]
 8003884:	4313      	orrs	r3, r2
 8003886:	b2da      	uxtb	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	701a      	strb	r2, [r3, #0]
		break;
 800388c:	e067      	b.n	800395e <setErrorLED+0x206>
			if(led == 9){
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b09      	cmp	r3, #9
 8003892:	d10c      	bne.n	80038ae <setErrorLED+0x156>
				ledRegisterContents[0] &= ~led1_pwm;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	b25a      	sxtb	r2, r3
 800389a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800389e:	43db      	mvns	r3, r3
 80038a0:	b25b      	sxtb	r3, r3
 80038a2:	4013      	ands	r3, r2
 80038a4:	b25b      	sxtb	r3, r3
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	701a      	strb	r2, [r3, #0]
		break;
 80038ac:	e057      	b.n	800395e <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led1;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	b25a      	sxtb	r2, r3
 80038b4:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80038b8:	43db      	mvns	r3, r3
 80038ba:	b25b      	sxtb	r3, r3
 80038bc:	4013      	ands	r3, r2
 80038be:	b25b      	sxtb	r3, r3
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	701a      	strb	r2, [r3, #0]
		break;
 80038c6:	e04a      	b.n	800395e <setErrorLED+0x206>

	case 2:
		if(change){
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d007      	beq.n	80038de <setErrorLED+0x186>
				ledRegisterContents[0] |= led2;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	781a      	ldrb	r2, [r3, #0]
 80038d2:	7e3b      	ldrb	r3, [r7, #24]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	701a      	strb	r2, [r3, #0]
		}
		else{

			ledRegisterContents[0] &= ~led2;
		}
		break;
 80038dc:	e03f      	b.n	800395e <setErrorLED+0x206>
			ledRegisterContents[0] &= ~led2;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b25a      	sxtb	r2, r3
 80038e4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80038e8:	43db      	mvns	r3, r3
 80038ea:	b25b      	sxtb	r3, r3
 80038ec:	4013      	ands	r3, r2
 80038ee:	b25b      	sxtb	r3, r3
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	701a      	strb	r2, [r3, #0]
		break;
 80038f6:	e032      	b.n	800395e <setErrorLED+0x206>

	case 3:
		if(change){
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d012      	beq.n	8003924 <setErrorLED+0x1cc>
			if(led == 7){
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b07      	cmp	r3, #7
 8003902:	d107      	bne.n	8003914 <setErrorLED+0x1bc>
				ledRegisterContents[0] |= led3_pwm;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	7cfb      	ldrb	r3, [r7, #19]
 800390a:	4313      	orrs	r3, r2
 800390c:	b2da      	uxtb	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led3;
			}
		}
		break;
 8003912:	e023      	b.n	800395c <setErrorLED+0x204>
				ledRegisterContents[0] |= led3;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	781a      	ldrb	r2, [r3, #0]
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	4313      	orrs	r3, r2
 800391c:	b2da      	uxtb	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	701a      	strb	r2, [r3, #0]
		break;
 8003922:	e01b      	b.n	800395c <setErrorLED+0x204>
			if(led == 7){
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b07      	cmp	r3, #7
 8003928:	d10c      	bne.n	8003944 <setErrorLED+0x1ec>
				ledRegisterContents[0] &= ~led3_pwm;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	b25a      	sxtb	r2, r3
 8003930:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003934:	43db      	mvns	r3, r3
 8003936:	b25b      	sxtb	r3, r3
 8003938:	4013      	ands	r3, r2
 800393a:	b25b      	sxtb	r3, r3
 800393c:	b2da      	uxtb	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	701a      	strb	r2, [r3, #0]
		break;
 8003942:	e00b      	b.n	800395c <setErrorLED+0x204>
				ledRegisterContents[0] &= ~led3;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	b25a      	sxtb	r2, r3
 800394a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800394e:	43db      	mvns	r3, r3
 8003950:	b25b      	sxtb	r3, r3
 8003952:	4013      	ands	r3, r2
 8003954:	b25b      	sxtb	r3, r3
 8003956:	b2da      	uxtb	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	701a      	strb	r2, [r3, #0]
		break;
 800395c:	bf00      	nop
	}
	writeI2CRegister(LED.address,ledRegister,ledRegisterContents,1,LED.i2cBank);
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <setErrorLED+0x234>)
 8003960:	7818      	ldrb	r0, [r3, #0]
 8003962:	4b0a      	ldr	r3, [pc, #40]	; (800398c <setErrorLED+0x234>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	7ef9      	ldrb	r1, [r7, #27]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	2301      	movs	r3, #1
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	f7ff fddb 	bl	8003528 <writeI2CRegister>
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8003972:	4b06      	ldr	r3, [pc, #24]	; (800398c <setErrorLED+0x234>)
 8003974:	7818      	ldrb	r0, [r3, #0]
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <setErrorLED+0x234>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	7ef9      	ldrb	r1, [r7, #27]
 800397c:	2201      	movs	r2, #1
 800397e:	f7ff fd21 	bl	80033c4 <readI2CRegister>
 8003982:	60f8      	str	r0, [r7, #12]
}
 8003984:	bf00      	nop
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000004 	.word	0x20000004

08003990 <getADCValues>:


float* getADCValues(){
 8003990:	b580      	push	{r7, lr}
 8003992:	b09e      	sub	sp, #120	; 0x78
 8003994:	af00      	add	r7, sp, #0
	//intialize a static float array to return from the method. Make static to avoid the data changing on return
	static float adcValues[21];
	//make an integer array to store the adc counts. ADC counts are out of 4096
	int avgADCCounterValues[21];
	//empty the integer array
	memset(avgADCCounterValues, 0, sizeof(avgADCCounterValues));
 8003996:	463b      	mov	r3, r7
 8003998:	2254      	movs	r2, #84	; 0x54
 800399a:	2100      	movs	r1, #0
 800399c:	4618      	mov	r0, r3
 800399e:	f00f fbfc 	bl	801319a <memset>
	int adcChannelCounter,avgCounter,adcIndex;
	//variables to denote what interval the data in the adc buffers repeats. ADC format is [data0, 0x00, data1, 0x00...]
	//the interval is (#ofchannels activated on bank) * 2
	int adc1DataRepeat=22;
 80039a2:	2316      	movs	r3, #22
 80039a4:	66bb      	str	r3, [r7, #104]	; 0x68
	int adc2DataRepeat=8;
 80039a6:	2308      	movs	r3, #8
 80039a8:	667b      	str	r3, [r7, #100]	; 0x64
	int adc3DataRepeat=12;
 80039aa:	230c      	movs	r3, #12
 80039ac:	663b      	str	r3, [r7, #96]	; 0x60
	//iterate through all 21 adc channels...
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 80039ae:	2300      	movs	r3, #0
 80039b0:	677b      	str	r3, [r7, #116]	; 0x74
 80039b2:	e171      	b.n	8003c98 <getADCValues+0x308>
		//for the first channels of the adc banks (ADC Bank 1's first channel is ADC3, ADC bank 2's first channel is ADC0, ADC bank 3's first channel is adc2
		if((adcChannelCounter==Adc.adc0) || (adcChannelCounter==Adc.adc2) || (adcChannelCounter==Adc.adc3)){
 80039b4:	4b97      	ldr	r3, [pc, #604]	; (8003c14 <getADCValues+0x284>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d009      	beq.n	80039d2 <getADCValues+0x42>
 80039be:	4b95      	ldr	r3, [pc, #596]	; (8003c14 <getADCValues+0x284>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d004      	beq.n	80039d2 <getADCValues+0x42>
 80039c8:	4b92      	ldr	r3, [pc, #584]	; (8003c14 <getADCValues+0x284>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d102      	bne.n	80039d8 <getADCValues+0x48>
			//first data entry for each buffer will be the data for these adcs
			adcIndex=0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039d6:	e071      	b.n	8003abc <getADCValues+0x12c>
		}
		//for the second channels of the adc banks (ADC Bank 1's second channel is ADC4, ADC bank 2's second channel is ADC1, ADC bank 3's second channel is adc14
		else if((adcChannelCounter==Adc.adc1) || (adcChannelCounter==Adc.adc14) || (adcChannelCounter==Adc.adc4)){
 80039d8:	4b8e      	ldr	r3, [pc, #568]	; (8003c14 <getADCValues+0x284>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039de:	429a      	cmp	r2, r3
 80039e0:	d009      	beq.n	80039f6 <getADCValues+0x66>
 80039e2:	4b8c      	ldr	r3, [pc, #560]	; (8003c14 <getADCValues+0x284>)
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d004      	beq.n	80039f6 <getADCValues+0x66>
 80039ec:	4b89      	ldr	r3, [pc, #548]	; (8003c14 <getADCValues+0x284>)
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d102      	bne.n	80039fc <getADCValues+0x6c>
			adcIndex=2;
 80039f6:	2302      	movs	r3, #2
 80039f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039fa:	e05f      	b.n	8003abc <getADCValues+0x12c>
		}
		//for the third channels of the adc banks (ADC Bank 1's third channel is ADC5, ADC bank 2's third channel is spareSpiADC, ADC bank 3's third channel is adc15
		else if((adcChannelCounter==Adc.spareSpiADC) || (adcChannelCounter==Adc.adc15) || (adcChannelCounter==Adc.adc5)){
 80039fc:	4b85      	ldr	r3, [pc, #532]	; (8003c14 <getADCValues+0x284>)
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d009      	beq.n	8003a1a <getADCValues+0x8a>
 8003a06:	4b83      	ldr	r3, [pc, #524]	; (8003c14 <getADCValues+0x284>)
 8003a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d004      	beq.n	8003a1a <getADCValues+0x8a>
 8003a10:	4b80      	ldr	r3, [pc, #512]	; (8003c14 <getADCValues+0x284>)
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d102      	bne.n	8003a20 <getADCValues+0x90>
			adcIndex=4;
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a1e:	e04d      	b.n	8003abc <getADCValues+0x12c>
		}
		//for the fourth channels of the adc banks (ADC Bank 1's fourth channel is adc6, ADC bank 2's fourth channel is spareUARTADC, ADC bank 3's fourth channel is configADC
		else if((adcChannelCounter == Adc.spareUartADC) || (adcChannelCounter==Adc.configADC) || (adcChannelCounter==Adc.adc6)){
 8003a20:	4b7c      	ldr	r3, [pc, #496]	; (8003c14 <getADCValues+0x284>)
 8003a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a24:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d009      	beq.n	8003a3e <getADCValues+0xae>
 8003a2a:	4b7a      	ldr	r3, [pc, #488]	; (8003c14 <getADCValues+0x284>)
 8003a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d004      	beq.n	8003a3e <getADCValues+0xae>
 8003a34:	4b77      	ldr	r3, [pc, #476]	; (8003c14 <getADCValues+0x284>)
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d102      	bne.n	8003a44 <getADCValues+0xb4>
			adcIndex=6;
 8003a3e:	2306      	movs	r3, #6
 8003a40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a42:	e03b      	b.n	8003abc <getADCValues+0x12c>
		}
		//for the fifth channels of the adc banks (ADC Bank 1's fifth channel is ADC7, ADC bank 3's fifth channel is zionADC
		else if((adcChannelCounter==Adc.zionADC) || (adcChannelCounter==Adc.adc7)){
 8003a44:	4b73      	ldr	r3, [pc, #460]	; (8003c14 <getADCValues+0x284>)
 8003a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a48:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d004      	beq.n	8003a58 <getADCValues+0xc8>
 8003a4e:	4b71      	ldr	r3, [pc, #452]	; (8003c14 <getADCValues+0x284>)
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d102      	bne.n	8003a5e <getADCValues+0xce>
			adcIndex=8;
 8003a58:	2308      	movs	r3, #8
 8003a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a5c:	e02e      	b.n	8003abc <getADCValues+0x12c>
		}
		//for the sixth channels of the adc banks (ADC Bank 1's sixth channel is ADC8, ADC bank 3's sixth channel is spareI2cADC
		else if((adcChannelCounter == Adc.spareI2cADC) || (adcChannelCounter==Adc.adc8)){
 8003a5e:	4b6d      	ldr	r3, [pc, #436]	; (8003c14 <getADCValues+0x284>)
 8003a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d004      	beq.n	8003a72 <getADCValues+0xe2>
 8003a68:	4b6a      	ldr	r3, [pc, #424]	; (8003c14 <getADCValues+0x284>)
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d102      	bne.n	8003a78 <getADCValues+0xe8>
			adcIndex=10;
 8003a72:	230a      	movs	r3, #10
 8003a74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a76:	e021      	b.n	8003abc <getADCValues+0x12c>
		}
		//for the seventh channels of the adc banks (ADC Bank 1's seventh channel is ADC9)
		else if(adcChannelCounter==Adc.adc9){
 8003a78:	4b66      	ldr	r3, [pc, #408]	; (8003c14 <getADCValues+0x284>)
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d102      	bne.n	8003a88 <getADCValues+0xf8>
			adcIndex=12;
 8003a82:	230c      	movs	r3, #12
 8003a84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a86:	e019      	b.n	8003abc <getADCValues+0x12c>
		}
		//for the eighth channels of the adc banks (ADC Bank 1's eighth channel is ADC10)
		else if(adcChannelCounter==Adc.adc10){
 8003a88:	4b62      	ldr	r3, [pc, #392]	; (8003c14 <getADCValues+0x284>)
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d102      	bne.n	8003a98 <getADCValues+0x108>
			adcIndex=14;
 8003a92:	230e      	movs	r3, #14
 8003a94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a96:	e011      	b.n	8003abc <getADCValues+0x12c>
		}
		//for the nineth channels of the adc banks (ADC Bank 1's nineth channel is ADC11)
		else if(adcChannelCounter==Adc.adc11){
 8003a98:	4b5e      	ldr	r3, [pc, #376]	; (8003c14 <getADCValues+0x284>)
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d102      	bne.n	8003aa8 <getADCValues+0x118>
			adcIndex=16;
 8003aa2:	2310      	movs	r3, #16
 8003aa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003aa6:	e009      	b.n	8003abc <getADCValues+0x12c>
		}
		//for the tenth channels of the adc banks (ADC Bank 1's tenth channel is ADC12)
		else if(adcChannelCounter==Adc.adc12){
 8003aa8:	4b5a      	ldr	r3, [pc, #360]	; (8003c14 <getADCValues+0x284>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d102      	bne.n	8003ab8 <getADCValues+0x128>
			adcIndex=18;
 8003ab2:	2312      	movs	r3, #18
 8003ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ab6:	e001      	b.n	8003abc <getADCValues+0x12c>
		}
		//for the eleventh channels of the adc banks (ADC Bank 1's eleventh channel is ADC13)
		else{
			adcIndex=20;
 8003ab8:	2314      	movs	r3, #20
 8003aba:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		//for the channels that belong to the second ADC bank
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8003abc:	4b55      	ldr	r3, [pc, #340]	; (8003c14 <getADCValues+0x284>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d00e      	beq.n	8003ae4 <getADCValues+0x154>
 8003ac6:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <getADCValues+0x284>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d009      	beq.n	8003ae4 <getADCValues+0x154>
 8003ad0:	4b50      	ldr	r3, [pc, #320]	; (8003c14 <getADCValues+0x284>)
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d004      	beq.n	8003ae4 <getADCValues+0x154>
 8003ada:	4b4e      	ldr	r3, [pc, #312]	; (8003c14 <getADCValues+0x284>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d13a      	bne.n	8003b5a <getADCValues+0x1ca>
			//parse through the buffers to grab enough values to make the asked for average amount
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	673b      	str	r3, [r7, #112]	; 0x70
 8003ae8:	e033      	b.n	8003b52 <getADCValues+0x1c2>
				//adjust the index to match the next data point in the buffer
				int shiftedIndex = adcIndex + (adc2DataRepeat*avgCounter);
 8003aea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003aee:	fb02 f303 	mul.w	r3, r2, r3
 8003af2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003af4:	4413      	add	r3, r2
 8003af6:	657b      	str	r3, [r7, #84]	; 0x54
				//add it to the rolling average count
				avgADCCounterValues[adcChannelCounter]+=adc2_buf[shiftedIndex];
 8003af8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b00:	4413      	add	r3, r2
 8003b02:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b06:	4944      	ldr	r1, [pc, #272]	; (8003c18 <getADCValues+0x288>)
 8003b08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b0a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003b0e:	441a      	add	r2, r3
 8003b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003b18:	440b      	add	r3, r1
 8003b1a:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b20:	2b13      	cmp	r3, #19
 8003b22:	d113      	bne.n	8003b4c <getADCValues+0x1bc>
					//at the end, divide the total amount to get our averaged Value
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b32:	4a3a      	ldr	r2, [pc, #232]	; (8003c1c <getADCValues+0x28c>)
 8003b34:	fb82 1203 	smull	r1, r2, r2, r3
 8003b38:	10d2      	asrs	r2, r2, #3
 8003b3a:	17db      	asrs	r3, r3, #31
 8003b3c:	1ad2      	subs	r2, r2, r3
 8003b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003b46:	440b      	add	r3, r1
 8003b48:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b4e:	3301      	adds	r3, #1
 8003b50:	673b      	str	r3, [r7, #112]	; 0x70
 8003b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b54:	2b13      	cmp	r3, #19
 8003b56:	ddc8      	ble.n	8003aea <getADCValues+0x15a>
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8003b58:	e09b      	b.n	8003c92 <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the third ADC bank
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 8003b5a:	4b2e      	ldr	r3, [pc, #184]	; (8003c14 <getADCValues+0x284>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d018      	beq.n	8003b96 <getADCValues+0x206>
 8003b64:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <getADCValues+0x284>)
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d013      	beq.n	8003b96 <getADCValues+0x206>
 8003b6e:	4b29      	ldr	r3, [pc, #164]	; (8003c14 <getADCValues+0x284>)
 8003b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d00e      	beq.n	8003b96 <getADCValues+0x206>
 8003b78:	4b26      	ldr	r3, [pc, #152]	; (8003c14 <getADCValues+0x284>)
 8003b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d009      	beq.n	8003b96 <getADCValues+0x206>
 8003b82:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <getADCValues+0x284>)
 8003b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d004      	beq.n	8003b96 <getADCValues+0x206>
 8003b8c:	4b21      	ldr	r3, [pc, #132]	; (8003c14 <getADCValues+0x284>)
 8003b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d13a      	bne.n	8003c0c <getADCValues+0x27c>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003b96:	2300      	movs	r3, #0
 8003b98:	673b      	str	r3, [r7, #112]	; 0x70
 8003b9a:	e033      	b.n	8003c04 <getADCValues+0x274>
				int shiftedIndex = adcIndex + (adc3DataRepeat*avgCounter);
 8003b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b9e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003ba0:	fb02 f303 	mul.w	r3, r2, r3
 8003ba4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ba6:	4413      	add	r3, r2
 8003ba8:	65bb      	str	r3, [r7, #88]	; 0x58
				avgADCCounterValues[adcChannelCounter]+=adc3_buf[shiftedIndex];
 8003baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003bb8:	4919      	ldr	r1, [pc, #100]	; (8003c20 <getADCValues+0x290>)
 8003bba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bbc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003bc0:	441a      	add	r2, r3
 8003bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003bca:	440b      	add	r3, r1
 8003bcc:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003bd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bd2:	2b13      	cmp	r3, #19
 8003bd4:	d113      	bne.n	8003bfe <getADCValues+0x26e>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003bde:	4413      	add	r3, r2
 8003be0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003be4:	4a0d      	ldr	r2, [pc, #52]	; (8003c1c <getADCValues+0x28c>)
 8003be6:	fb82 1203 	smull	r1, r2, r2, r3
 8003bea:	10d2      	asrs	r2, r2, #3
 8003bec:	17db      	asrs	r3, r3, #31
 8003bee:	1ad2      	subs	r2, r2, r3
 8003bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003bf8:	440b      	add	r3, r1
 8003bfa:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c00:	3301      	adds	r3, #1
 8003c02:	673b      	str	r3, [r7, #112]	; 0x70
 8003c04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c06:	2b13      	cmp	r3, #19
 8003c08:	ddc8      	ble.n	8003b9c <getADCValues+0x20c>
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 8003c0a:	e042      	b.n	8003c92 <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the first ADC bank
		else{
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	673b      	str	r3, [r7, #112]	; 0x70
 8003c10:	e03c      	b.n	8003c8c <getADCValues+0x2fc>
 8003c12:	bf00      	nop
 8003c14:	2000007c 	.word	0x2000007c
 8003c18:	2002e2c8 	.word	0x2002e2c8
 8003c1c:	66666667 	.word	0x66666667
 8003c20:	2002bb24 	.word	0x2002bb24
				int shiftedIndex = adcIndex + (adc1DataRepeat*avgCounter);
 8003c24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003c28:	fb02 f303 	mul.w	r3, r2, r3
 8003c2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c2e:	4413      	add	r3, r2
 8003c30:	65fb      	str	r3, [r7, #92]	; 0x5c
				avgADCCounterValues[adcChannelCounter]+=adc1_buf[shiftedIndex];
 8003c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c40:	49c9      	ldr	r1, [pc, #804]	; (8003f68 <getADCValues+0x5d8>)
 8003c42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c44:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003c48:	441a      	add	r2, r3
 8003c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003c52:	440b      	add	r3, r1
 8003c54:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003c58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c5a:	2b13      	cmp	r3, #19
 8003c5c:	d113      	bne.n	8003c86 <getADCValues+0x2f6>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c66:	4413      	add	r3, r2
 8003c68:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c6c:	4abf      	ldr	r2, [pc, #764]	; (8003f6c <getADCValues+0x5dc>)
 8003c6e:	fb82 1203 	smull	r1, r2, r2, r3
 8003c72:	10d2      	asrs	r2, r2, #3
 8003c74:	17db      	asrs	r3, r3, #31
 8003c76:	1ad2      	subs	r2, r2, r3
 8003c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003c80:	440b      	add	r3, r1
 8003c82:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c88:	3301      	adds	r3, #1
 8003c8a:	673b      	str	r3, [r7, #112]	; 0x70
 8003c8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c8e:	2b13      	cmp	r3, #19
 8003c90:	ddc8      	ble.n	8003c24 <getADCValues+0x294>
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 8003c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c94:	3301      	adds	r3, #1
 8003c96:	677b      	str	r3, [r7, #116]	; 0x74
 8003c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c9a:	2b14      	cmp	r3, #20
 8003c9c:	f77f ae8a 	ble.w	80039b4 <getADCValues+0x24>
				}
			}
		}
	}
	//for adc inputs with names ADC#, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (3)
	adcValues[Adc.adc0] = (avgADCCounterValues[Adc.adc0] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003ca0:	4bb3      	ldr	r3, [pc, #716]	; (8003f70 <getADCValues+0x5e0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003caa:	4413      	add	r3, r2
 8003cac:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003cb0:	ee07 3a90 	vmov	s15, r3
 8003cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cb8:	4bad      	ldr	r3, [pc, #692]	; (8003f70 <getADCValues+0x5e0>)
 8003cba:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003cbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cc2:	4bab      	ldr	r3, [pc, #684]	; (8003f70 <getADCValues+0x5e0>)
 8003cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cce:	4ba8      	ldr	r3, [pc, #672]	; (8003f70 <getADCValues+0x5e0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd6:	4aa7      	ldr	r2, [pc, #668]	; (8003f74 <getADCValues+0x5e4>)
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc1] = (avgADCCounterValues[Adc.adc1] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003ce0:	4ba3      	ldr	r3, [pc, #652]	; (8003f70 <getADCValues+0x5e0>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003cea:	4413      	add	r3, r2
 8003cec:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003cf0:	ee07 3a90 	vmov	s15, r3
 8003cf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cf8:	4b9d      	ldr	r3, [pc, #628]	; (8003f70 <getADCValues+0x5e0>)
 8003cfa:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d02:	4b9b      	ldr	r3, [pc, #620]	; (8003f70 <getADCValues+0x5e0>)
 8003d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d0e:	4b98      	ldr	r3, [pc, #608]	; (8003f70 <getADCValues+0x5e0>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d16:	4a97      	ldr	r2, [pc, #604]	; (8003f74 <getADCValues+0x5e4>)
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc2] = (avgADCCounterValues[Adc.adc2] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003d20:	4b93      	ldr	r3, [pc, #588]	; (8003f70 <getADCValues+0x5e0>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d30:	ee07 3a90 	vmov	s15, r3
 8003d34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d38:	4b8d      	ldr	r3, [pc, #564]	; (8003f70 <getADCValues+0x5e0>)
 8003d3a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d42:	4b8b      	ldr	r3, [pc, #556]	; (8003f70 <getADCValues+0x5e0>)
 8003d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d46:	ee07 3a90 	vmov	s15, r3
 8003d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d4e:	4b88      	ldr	r3, [pc, #544]	; (8003f70 <getADCValues+0x5e0>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d56:	4a87      	ldr	r2, [pc, #540]	; (8003f74 <getADCValues+0x5e4>)
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc3] = (avgADCCounterValues[Adc.adc3] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003d60:	4b83      	ldr	r3, [pc, #524]	; (8003f70 <getADCValues+0x5e0>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d70:	ee07 3a90 	vmov	s15, r3
 8003d74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d78:	4b7d      	ldr	r3, [pc, #500]	; (8003f70 <getADCValues+0x5e0>)
 8003d7a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d82:	4b7b      	ldr	r3, [pc, #492]	; (8003f70 <getADCValues+0x5e0>)
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8e:	4b78      	ldr	r3, [pc, #480]	; (8003f70 <getADCValues+0x5e0>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d96:	4a77      	ldr	r2, [pc, #476]	; (8003f74 <getADCValues+0x5e4>)
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc4] = (avgADCCounterValues[Adc.adc4] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003da0:	4b73      	ldr	r3, [pc, #460]	; (8003f70 <getADCValues+0x5e0>)
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003daa:	4413      	add	r3, r2
 8003dac:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003db0:	ee07 3a90 	vmov	s15, r3
 8003db4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003db8:	4b6d      	ldr	r3, [pc, #436]	; (8003f70 <getADCValues+0x5e0>)
 8003dba:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003dbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dc2:	4b6b      	ldr	r3, [pc, #428]	; (8003f70 <getADCValues+0x5e0>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dce:	4b68      	ldr	r3, [pc, #416]	; (8003f70 <getADCValues+0x5e0>)
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd6:	4a67      	ldr	r2, [pc, #412]	; (8003f74 <getADCValues+0x5e4>)
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc5] = (avgADCCounterValues[Adc.adc5] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003de0:	4b63      	ldr	r3, [pc, #396]	; (8003f70 <getADCValues+0x5e0>)
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003dea:	4413      	add	r3, r2
 8003dec:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003df0:	ee07 3a90 	vmov	s15, r3
 8003df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003df8:	4b5d      	ldr	r3, [pc, #372]	; (8003f70 <getADCValues+0x5e0>)
 8003dfa:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003dfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e02:	4b5b      	ldr	r3, [pc, #364]	; (8003f70 <getADCValues+0x5e0>)
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e0e:	4b58      	ldr	r3, [pc, #352]	; (8003f70 <getADCValues+0x5e0>)
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e16:	4a57      	ldr	r2, [pc, #348]	; (8003f74 <getADCValues+0x5e4>)
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc6] = (avgADCCounterValues[Adc.adc6] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003e20:	4b53      	ldr	r3, [pc, #332]	; (8003f70 <getADCValues+0x5e0>)
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003e30:	ee07 3a90 	vmov	s15, r3
 8003e34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e38:	4b4d      	ldr	r3, [pc, #308]	; (8003f70 <getADCValues+0x5e0>)
 8003e3a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e42:	4b4b      	ldr	r3, [pc, #300]	; (8003f70 <getADCValues+0x5e0>)
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e46:	ee07 3a90 	vmov	s15, r3
 8003e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e4e:	4b48      	ldr	r3, [pc, #288]	; (8003f70 <getADCValues+0x5e0>)
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e56:	4a47      	ldr	r2, [pc, #284]	; (8003f74 <getADCValues+0x5e4>)
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc7] = (avgADCCounterValues[Adc.adc7] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003e60:	4b43      	ldr	r3, [pc, #268]	; (8003f70 <getADCValues+0x5e0>)
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003e70:	ee07 3a90 	vmov	s15, r3
 8003e74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e78:	4b3d      	ldr	r3, [pc, #244]	; (8003f70 <getADCValues+0x5e0>)
 8003e7a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e82:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <getADCValues+0x5e0>)
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	ee07 3a90 	vmov	s15, r3
 8003e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e8e:	4b38      	ldr	r3, [pc, #224]	; (8003f70 <getADCValues+0x5e0>)
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e96:	4a37      	ldr	r2, [pc, #220]	; (8003f74 <getADCValues+0x5e4>)
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc8] = (avgADCCounterValues[Adc.adc8] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003ea0:	4b33      	ldr	r3, [pc, #204]	; (8003f70 <getADCValues+0x5e0>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003eaa:	4413      	add	r3, r2
 8003eac:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003eb0:	ee07 3a90 	vmov	s15, r3
 8003eb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eb8:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <getADCValues+0x5e0>)
 8003eba:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ec2:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <getADCValues+0x5e0>)
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ece:	4b28      	ldr	r3, [pc, #160]	; (8003f70 <getADCValues+0x5e0>)
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed6:	4a27      	ldr	r2, [pc, #156]	; (8003f74 <getADCValues+0x5e4>)
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc9] = (avgADCCounterValues[Adc.adc9] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003ee0:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <getADCValues+0x5e0>)
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003eea:	4413      	add	r3, r2
 8003eec:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003ef0:	ee07 3a90 	vmov	s15, r3
 8003ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <getADCValues+0x5e0>)
 8003efa:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003efe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f02:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <getADCValues+0x5e0>)
 8003f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f0e:	4b18      	ldr	r3, [pc, #96]	; (8003f70 <getADCValues+0x5e0>)
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f16:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <getADCValues+0x5e4>)
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc10] = (avgADCCounterValues[Adc.adc10] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003f20:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <getADCValues+0x5e0>)
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003f30:	ee07 3a90 	vmov	s15, r3
 8003f34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f38:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <getADCValues+0x5e0>)
 8003f3a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f42:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <getADCValues+0x5e0>)
 8003f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <getADCValues+0x5e0>)
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f56:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <getADCValues+0x5e4>)
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc11] = (avgADCCounterValues[Adc.adc11] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003f60:	4b03      	ldr	r3, [pc, #12]	; (8003f70 <getADCValues+0x5e0>)
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	e007      	b.n	8003f78 <getADCValues+0x5e8>
 8003f68:	20029268 	.word	0x20029268
 8003f6c:	66666667 	.word	0x66666667
 8003f70:	2000007c 	.word	0x2000007c
 8003f74:	20003324 	.word	0x20003324
 8003f78:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f8a:	4b9c      	ldr	r3, [pc, #624]	; (80041fc <getADCValues+0x86c>)
 8003f8c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003f90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f94:	4b99      	ldr	r3, [pc, #612]	; (80041fc <getADCValues+0x86c>)
 8003f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f98:	ee07 3a90 	vmov	s15, r3
 8003f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa0:	4b96      	ldr	r3, [pc, #600]	; (80041fc <getADCValues+0x86c>)
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa8:	4a95      	ldr	r2, [pc, #596]	; (8004200 <getADCValues+0x870>)
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc12] = (avgADCCounterValues[Adc.adc12] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003fb2:	4b92      	ldr	r3, [pc, #584]	; (80041fc <getADCValues+0x86c>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fca:	4b8c      	ldr	r3, [pc, #560]	; (80041fc <getADCValues+0x86c>)
 8003fcc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003fd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fd4:	4b89      	ldr	r3, [pc, #548]	; (80041fc <getADCValues+0x86c>)
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd8:	ee07 3a90 	vmov	s15, r3
 8003fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fe0:	4b86      	ldr	r3, [pc, #536]	; (80041fc <getADCValues+0x86c>)
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe8:	4a85      	ldr	r2, [pc, #532]	; (8004200 <getADCValues+0x870>)
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc13] = (avgADCCounterValues[Adc.adc13] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003ff2:	4b82      	ldr	r3, [pc, #520]	; (80041fc <getADCValues+0x86c>)
 8003ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800400a:	4b7c      	ldr	r3, [pc, #496]	; (80041fc <getADCValues+0x86c>)
 800400c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004014:	4b79      	ldr	r3, [pc, #484]	; (80041fc <getADCValues+0x86c>)
 8004016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004018:	ee07 3a90 	vmov	s15, r3
 800401c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004020:	4b76      	ldr	r3, [pc, #472]	; (80041fc <getADCValues+0x86c>)
 8004022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004028:	4a75      	ldr	r2, [pc, #468]	; (8004200 <getADCValues+0x870>)
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc14] = (avgADCCounterValues[Adc.adc14] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004032:	4b72      	ldr	r3, [pc, #456]	; (80041fc <getADCValues+0x86c>)
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800403c:	4413      	add	r3, r2
 800403e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004042:	ee07 3a90 	vmov	s15, r3
 8004046:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800404a:	4b6c      	ldr	r3, [pc, #432]	; (80041fc <getADCValues+0x86c>)
 800404c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004050:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004054:	4b69      	ldr	r3, [pc, #420]	; (80041fc <getADCValues+0x86c>)
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004060:	4b66      	ldr	r3, [pc, #408]	; (80041fc <getADCValues+0x86c>)
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004068:	4a65      	ldr	r2, [pc, #404]	; (8004200 <getADCValues+0x870>)
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc15] = (avgADCCounterValues[Adc.adc15] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004072:	4b62      	ldr	r3, [pc, #392]	; (80041fc <getADCValues+0x86c>)
 8004074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800407c:	4413      	add	r3, r2
 800407e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800408a:	4b5c      	ldr	r3, [pc, #368]	; (80041fc <getADCValues+0x86c>)
 800408c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004090:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004094:	4b59      	ldr	r3, [pc, #356]	; (80041fc <getADCValues+0x86c>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004098:	ee07 3a90 	vmov	s15, r3
 800409c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040a0:	4b56      	ldr	r3, [pc, #344]	; (80041fc <getADCValues+0x86c>)
 80040a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a8:	4a55      	ldr	r2, [pc, #340]	; (8004200 <getADCValues+0x870>)
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	edc3 7a00 	vstr	s15, [r3]
	//for other adc inputs, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (2)
	adcValues[Adc.spareSpiADC] = (avgADCCounterValues[Adc.spareSpiADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 80040b2:	4b52      	ldr	r3, [pc, #328]	; (80041fc <getADCValues+0x86c>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80040bc:	4413      	add	r3, r2
 80040be:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040ca:	4b4c      	ldr	r3, [pc, #304]	; (80041fc <getADCValues+0x86c>)
 80040cc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80040d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040d4:	4b49      	ldr	r3, [pc, #292]	; (80041fc <getADCValues+0x86c>)
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	ee07 3a90 	vmov	s15, r3
 80040dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040e0:	4b46      	ldr	r3, [pc, #280]	; (80041fc <getADCValues+0x86c>)
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e8:	4a45      	ldr	r2, [pc, #276]	; (8004200 <getADCValues+0x870>)
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareUartADC] = (avgADCCounterValues[Adc.spareUartADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 80040f2:	4b42      	ldr	r3, [pc, #264]	; (80041fc <getADCValues+0x86c>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80040fc:	4413      	add	r3, r2
 80040fe:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800410a:	4b3c      	ldr	r3, [pc, #240]	; (80041fc <getADCValues+0x86c>)
 800410c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004110:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004114:	4b39      	ldr	r3, [pc, #228]	; (80041fc <getADCValues+0x86c>)
 8004116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004118:	ee07 3a90 	vmov	s15, r3
 800411c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004120:	4b36      	ldr	r3, [pc, #216]	; (80041fc <getADCValues+0x86c>)
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004128:	4a35      	ldr	r2, [pc, #212]	; (8004200 <getADCValues+0x870>)
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.configADC] = (avgADCCounterValues[Adc.configADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8004132:	4b32      	ldr	r3, [pc, #200]	; (80041fc <getADCValues+0x86c>)
 8004134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800413c:	4413      	add	r3, r2
 800413e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800414a:	4b2c      	ldr	r3, [pc, #176]	; (80041fc <getADCValues+0x86c>)
 800414c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004150:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004154:	4b29      	ldr	r3, [pc, #164]	; (80041fc <getADCValues+0x86c>)
 8004156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004158:	ee07 3a90 	vmov	s15, r3
 800415c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004160:	4b26      	ldr	r3, [pc, #152]	; (80041fc <getADCValues+0x86c>)
 8004162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004168:	4a25      	ldr	r2, [pc, #148]	; (8004200 <getADCValues+0x870>)
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.zionADC] = (avgADCCounterValues[Adc.zionADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8004172:	4b22      	ldr	r3, [pc, #136]	; (80041fc <getADCValues+0x86c>)
 8004174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800417c:	4413      	add	r3, r2
 800417e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004182:	ee07 3a90 	vmov	s15, r3
 8004186:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800418a:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <getADCValues+0x86c>)
 800418c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004190:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004194:	4b19      	ldr	r3, [pc, #100]	; (80041fc <getADCValues+0x86c>)
 8004196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004198:	ee07 3a90 	vmov	s15, r3
 800419c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041a0:	4b16      	ldr	r3, [pc, #88]	; (80041fc <getADCValues+0x86c>)
 80041a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a8:	4a15      	ldr	r2, [pc, #84]	; (8004200 <getADCValues+0x870>)
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareI2cADC] = (avgADCCounterValues[Adc.spareI2cADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 80041b2:	4b12      	ldr	r3, [pc, #72]	; (80041fc <getADCValues+0x86c>)
 80041b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80041bc:	4413      	add	r3, r2
 80041be:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041ca:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <getADCValues+0x86c>)
 80041cc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80041d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041d4:	4b09      	ldr	r3, [pc, #36]	; (80041fc <getADCValues+0x86c>)
 80041d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d8:	ee07 3a90 	vmov	s15, r3
 80041dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <getADCValues+0x86c>)
 80041e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e8:	4a05      	ldr	r2, [pc, #20]	; (8004200 <getADCValues+0x870>)
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	edc3 7a00 	vstr	s15, [r3]
	return adcValues;
 80041f2:	4b03      	ldr	r3, [pc, #12]	; (8004200 <getADCValues+0x870>)
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3778      	adds	r7, #120	; 0x78
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	2000007c 	.word	0x2000007c
 8004200:	20003324 	.word	0x20003324

08004204 <HAL_ADC_ConvCpltCallback>:
//// Called when first half of buffer is filled
//void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
//}
//
//// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <winbondSPIDeviceIDRead>:

void winbondSPIDeviceIDRead(SPI_HandleTypeDef hspi, uint8_t* data){
 8004218:	b084      	sub	sp, #16
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af02      	add	r7, sp, #8
 8004220:	f107 0c10 	add.w	ip, r7, #16
 8004224:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t dataSent[1] = {0x9f};
 8004228:	239f      	movs	r3, #159	; 0x9f
 800422a:	713b      	strb	r3, [r7, #4]
	SPARE_SS_ON;
 800422c:	2201      	movs	r2, #1
 800422e:	2120      	movs	r1, #32
 8004230:	480b      	ldr	r0, [pc, #44]	; (8004260 <winbondSPIDeviceIDRead+0x48>)
 8004232:	f006 fda9 	bl	800ad88 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi, (uint8_t*)dataSent, data,4,100);
 8004236:	1d39      	adds	r1, r7, #4
 8004238:	2364      	movs	r3, #100	; 0x64
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	2304      	movs	r3, #4
 800423e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004240:	f107 0010 	add.w	r0, r7, #16
 8004244:	f009 fbb8 	bl	800d9b8 <HAL_SPI_TransmitReceive>
	SPARE_SS_OFF;
 8004248:	2200      	movs	r2, #0
 800424a:	2120      	movs	r1, #32
 800424c:	4804      	ldr	r0, [pc, #16]	; (8004260 <winbondSPIDeviceIDRead+0x48>)
 800424e:	f006 fd9b 	bl	800ad88 <HAL_GPIO_WritePin>
	int x;
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800425c:	b004      	add	sp, #16
 800425e:	4770      	bx	lr
 8004260:	40021c00 	.word	0x40021c00

08004264 <spareUartTransmitRead>:

void spareUartTransmitRead(char *message){
 8004264:	b580      	push	{r7, lr}
 8004266:	b0e8      	sub	sp, #416	; 0x1a0
 8004268:	af00      	add	r7, sp, #0
 800426a:	1d3b      	adds	r3, r7, #4
 800426c:	6018      	str	r0, [r3, #0]
	char uart_buf[200];
	char uart_receive_buf[200];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, message);
 800426e:	1d3b      	adds	r3, r7, #4
 8004270:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8004274:	6819      	ldr	r1, [r3, #0]
 8004276:	4610      	mov	r0, r2
 8004278:	f00f fe14 	bl	8013ea4 <siprintf>
 800427c:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
	HAL_UART_Transmit(&SPARE_UART,(uint8_t *)uart_buf, uart_buf_len,1000);
 8004280:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004284:	b29a      	uxth	r2, r3
 8004286:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 800428a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800428e:	4808      	ldr	r0, [pc, #32]	; (80042b0 <spareUartTransmitRead+0x4c>)
 8004290:	f00b f818 	bl	800f2c4 <HAL_UART_Transmit>
	HAL_UART_Receive(&SPARE_UART,(uint8_t*)uart_receive_buf, sizeof(uart_receive_buf),1000);
 8004294:	f107 010c 	add.w	r1, r7, #12
 8004298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800429c:	22c8      	movs	r2, #200	; 0xc8
 800429e:	4804      	ldr	r0, [pc, #16]	; (80042b0 <spareUartTransmitRead+0x4c>)
 80042a0:	f00b f8a1 	bl	800f3e6 <HAL_UART_Receive>
	int x;
}
 80042a4:	bf00      	nop
 80042a6:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	2002e244 	.word	0x2002e244

080042b4 <startHeartbeat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startHeartbeat */
void startHeartbeat(void *argument)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 80042bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042c0:	4803      	ldr	r0, [pc, #12]	; (80042d0 <startHeartbeat+0x1c>)
 80042c2:	f006 fd7a 	bl	800adba <HAL_GPIO_TogglePin>
	  osDelay(500);
 80042c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042ca:	f00c f933 	bl	8010534 <osDelay>
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 80042ce:	e7f5      	b.n	80042bc <startHeartbeat+0x8>
 80042d0:	40022000 	.word	0x40022000

080042d4 <startADCRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCRead */
void startADCRead(void *argument)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCRead */
  /* Infinite loop */
  for(;;)
  {
	  //empty out the data ready variables and the adc3_bufs
	memset(adcRestart,0,sizeof(adcRestart));
 80042dc:	2203      	movs	r2, #3
 80042de:	2100      	movs	r1, #0
 80042e0:	4815      	ldr	r0, [pc, #84]	; (8004338 <startADCRead+0x64>)
 80042e2:	f00e ff5a 	bl	801319a <memset>
	memset(adc1_buf, 0, sizeof(adc1_buf));
 80042e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80042ea:	2100      	movs	r1, #0
 80042ec:	4813      	ldr	r0, [pc, #76]	; (800433c <startADCRead+0x68>)
 80042ee:	f00e ff54 	bl	801319a <memset>
	memset(adc2_buf, 0, sizeof(adc2_buf));
 80042f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80042f6:	2100      	movs	r1, #0
 80042f8:	4811      	ldr	r0, [pc, #68]	; (8004340 <startADCRead+0x6c>)
 80042fa:	f00e ff4e 	bl	801319a <memset>
	memset(adc3_buf, 0, sizeof(adc3_buf));
 80042fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8004302:	2100      	movs	r1, #0
 8004304:	480f      	ldr	r0, [pc, #60]	; (8004344 <startADCRead+0x70>)
 8004306:	f00e ff48 	bl	801319a <memset>
	//restart the DMAs.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 800430a:	f241 3288 	movw	r2, #5000	; 0x1388
 800430e:	490b      	ldr	r1, [pc, #44]	; (800433c <startADCRead+0x68>)
 8004310:	480d      	ldr	r0, [pc, #52]	; (8004348 <startADCRead+0x74>)
 8004312:	f005 fa67 	bl	80097e4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8004316:	f241 3288 	movw	r2, #5000	; 0x1388
 800431a:	4909      	ldr	r1, [pc, #36]	; (8004340 <startADCRead+0x6c>)
 800431c:	480b      	ldr	r0, [pc, #44]	; (800434c <startADCRead+0x78>)
 800431e:	f005 fa61 	bl	80097e4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8004322:	f241 3288 	movw	r2, #5000	; 0x1388
 8004326:	4907      	ldr	r1, [pc, #28]	; (8004344 <startADCRead+0x70>)
 8004328:	4809      	ldr	r0, [pc, #36]	; (8004350 <startADCRead+0x7c>)
 800432a:	f005 fa5b 	bl	80097e4 <HAL_ADC_Start_DMA>
    osDelay(600);
 800432e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8004332:	f00c f8ff 	bl	8010534 <osDelay>
	memset(adcRestart,0,sizeof(adcRestart));
 8004336:	e7d1      	b.n	80042dc <startADCRead+0x8>
 8004338:	20029224 	.word	0x20029224
 800433c:	20029268 	.word	0x20029268
 8004340:	2002e2c8 	.word	0x2002e2c8
 8004344:	2002bb24 	.word	0x2002bb24
 8004348:	2002b9fc 	.word	0x2002b9fc
 800434c:	20028ce0 	.word	0x20028ce0
 8004350:	2002ba48 	.word	0x2002ba48

08004354 <GetDaScreenBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetDaScreenBlink */
void GetDaScreenBlink(void *argument)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDaScreenBlink */
  /* Infinite loop */
//	 int x = 0;
//	 float *adcValues;
//	 HAL_StatusTypeDef ret;
	 initializeDisplay();
 800435c:	f000 fe42 	bl	8004fe4 <initializeDisplay>
	 uint32_t ulNotifiedValue;
	 uint8_t button_val = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]
	 uint8_t menu_val = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	73bb      	strb	r3, [r7, #14]
	 uint8_t running_menu = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	737b      	strb	r3, [r7, #13]
//	 int *readI2c;
//	 int zionCleared=0;
	   for(;;)
	   {
	 	  ulNotifiedValue = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	60bb      	str	r3, [r7, #8]
	 	  xTaskNotifyWait(NOTIFY_NOCLEAR, NOTIFY_CLEARALL, &ulNotifiedValue, portMAX_DELAY);
 8004370:	f107 0208 	add.w	r2, r7, #8
 8004374:	f04f 33ff 	mov.w	r3, #4294967295
 8004378:	21ff      	movs	r1, #255	; 0xff
 800437a:	2000      	movs	r0, #0
 800437c:	f00d fe10 	bl	8011fa0 <xTaskNotifyWait>
	 	  // button press decode
	 	  button_val = (ulNotifiedValue & NOTIFY_BTN_MASK);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	73fb      	strb	r3, [r7, #15]
	 	  menu_val = ((ulNotifiedValue & NOTIFY_MENU_MASK) >> NOTIFY_MENU_BIT);
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	73bb      	strb	r3, [r7, #14]
	 	  running_menu = ((ulNotifiedValue & NOTIFY_RUN_MENU_MASK) >> NOTIFY_MENU_RUN_BIT);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	0a1b      	lsrs	r3, r3, #8
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	737b      	strb	r3, [r7, #13]
	 //	  printf("highlighed menu: %d\n\r", menu_val);
	 //	  printf("button_press: %d\r\n", button_val);

	 	  // If the BACK button was pressed, just run the SEL button case with the previous menu

		  switch(running_menu)
 80043a2:	7b7b      	ldrb	r3, [r7, #13]
 80043a4:	3b01      	subs	r3, #1
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d82c      	bhi.n	8004404 <GetDaScreenBlink+0xb0>
 80043aa:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <GetDaScreenBlink+0x5c>)
 80043ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043c1 	.word	0x080043c1
 80043b8:	080043e5 	.word	0x080043e5
 80043bc:	080043f5 	.word	0x080043f5
		  {
		  case BOOT_MENU:
		  {
			  printf("BOOT_MENU\r\n");
 80043c0:	4812      	ldr	r0, [pc, #72]	; (800440c <GetDaScreenBlink+0xb8>)
 80043c2:	f00f fd61 	bl	8013e88 <puts>
			  drawBootMenu(menu_val, button_val, running_menu);
 80043c6:	7bbb      	ldrb	r3, [r7, #14]
 80043c8:	7b7a      	ldrb	r2, [r7, #13]
 80043ca:	7bf9      	ldrb	r1, [r7, #15]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f002 ff1d 	bl	800720c <drawBootMenu>
			  //uartTransmitChar("switch BOOT_MENU\r\n",7);
			  break;
 80043d2:	e017      	b.n	8004404 <GetDaScreenBlink+0xb0>
		  }
		  case MAIN_MENU:
		  {
			  printf("MAIN_MENU\r\n");
 80043d4:	480e      	ldr	r0, [pc, #56]	; (8004410 <GetDaScreenBlink+0xbc>)
 80043d6:	f00f fd57 	bl	8013e88 <puts>
			  drawMainMenu(menu_val);
 80043da:	7bbb      	ldrb	r3, [r7, #14]
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fe2b 	bl	8005038 <drawMainMenu>
			  //uartTransmitChar("switch MAIN_MENU\r\n",7);
			  break;
 80043e2:	e00f      	b.n	8004404 <GetDaScreenBlink+0xb0>
		  }
		  case STATUS_MENU:
		  {
			  printf("STATUS_MENU\r\n");
 80043e4:	480b      	ldr	r0, [pc, #44]	; (8004414 <GetDaScreenBlink+0xc0>)
 80043e6:	f00f fd4f 	bl	8013e88 <puts>
			  drawStatusMenu(menu_val);
 80043ea:	7bbb      	ldrb	r3, [r7, #14]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f001 f921 	bl	8005634 <drawStatusMenu>
			  //uartTransmitChar("switch STATUS_MENU\r\n",7);
			  break;
 80043f2:	e007      	b.n	8004404 <GetDaScreenBlink+0xb0>
		  }
		  case SYSTEM_INFO_MENU:
		  {
			  printf("SYSTEM INFO MENU\r\n");
 80043f4:	4808      	ldr	r0, [pc, #32]	; (8004418 <GetDaScreenBlink+0xc4>)
 80043f6:	f00f fd47 	bl	8013e88 <puts>
			  //uartTransmitChar("switch SYSTEM INFO_MENU\r\n",7);
			  drawSystemInfoMenu(menu_val);
 80043fa:	7bbb      	ldrb	r3, [r7, #14]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f002 fab5 	bl	800696c <drawSystemInfoMenu>
			  break;
 8004402:	bf00      	nop
		  }
		  }
	 	  osDelay(100);
 8004404:	2064      	movs	r0, #100	; 0x64
 8004406:	f00c f895 	bl	8010534 <osDelay>
	 	  ulNotifiedValue = 0;
 800440a:	e7af      	b.n	800436c <GetDaScreenBlink+0x18>
 800440c:	08017284 	.word	0x08017284
 8004410:	08017290 	.word	0x08017290
 8004414:	0801729c 	.word	0x0801729c
 8004418:	080172ac 	.word	0x080172ac

0800441c <startGpioInputRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGpioInputRead */
void startGpioInputRead(void *argument)
{
 800441c:	b590      	push	{r4, r7, lr}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGpioInputRead */
  /* Infinite loop */
  for(;;)
  {
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8004424:	4b42      	ldr	r3, [pc, #264]	; (8004530 <startGpioInputRead+0x114>)
 8004426:	681c      	ldr	r4, [r3, #0]
 8004428:	2180      	movs	r1, #128	; 0x80
 800442a:	4842      	ldr	r0, [pc, #264]	; (8004534 <startGpioInputRead+0x118>)
 800442c:	f006 fc94 	bl	800ad58 <HAL_GPIO_ReadPin>
 8004430:	4603      	mov	r3, r0
 8004432:	461a      	mov	r2, r3
 8004434:	4b40      	ldr	r3, [pc, #256]	; (8004538 <startGpioInputRead+0x11c>)
 8004436:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input1] = HAL_GPIO_ReadPin(UI_INPUT1_GPIO_Port,UI_INPUT1_Pin);
 8004438:	4b3d      	ldr	r3, [pc, #244]	; (8004530 <startGpioInputRead+0x114>)
 800443a:	685c      	ldr	r4, [r3, #4]
 800443c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004440:	483e      	ldr	r0, [pc, #248]	; (800453c <startGpioInputRead+0x120>)
 8004442:	f006 fc89 	bl	800ad58 <HAL_GPIO_ReadPin>
 8004446:	4603      	mov	r3, r0
 8004448:	461a      	mov	r2, r3
 800444a:	4b3b      	ldr	r3, [pc, #236]	; (8004538 <startGpioInputRead+0x11c>)
 800444c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input2] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT2_Pin);
 800444e:	4b38      	ldr	r3, [pc, #224]	; (8004530 <startGpioInputRead+0x114>)
 8004450:	689c      	ldr	r4, [r3, #8]
 8004452:	2110      	movs	r1, #16
 8004454:	483a      	ldr	r0, [pc, #232]	; (8004540 <startGpioInputRead+0x124>)
 8004456:	f006 fc7f 	bl	800ad58 <HAL_GPIO_ReadPin>
 800445a:	4603      	mov	r3, r0
 800445c:	461a      	mov	r2, r3
 800445e:	4b36      	ldr	r3, [pc, #216]	; (8004538 <startGpioInputRead+0x11c>)
 8004460:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input3] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT3_Pin);
 8004462:	4b33      	ldr	r3, [pc, #204]	; (8004530 <startGpioInputRead+0x114>)
 8004464:	68dc      	ldr	r4, [r3, #12]
 8004466:	f44f 7180 	mov.w	r1, #256	; 0x100
 800446a:	4835      	ldr	r0, [pc, #212]	; (8004540 <startGpioInputRead+0x124>)
 800446c:	f006 fc74 	bl	800ad58 <HAL_GPIO_ReadPin>
 8004470:	4603      	mov	r3, r0
 8004472:	461a      	mov	r2, r3
 8004474:	4b30      	ldr	r3, [pc, #192]	; (8004538 <startGpioInputRead+0x11c>)
 8004476:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input4] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT4_Pin);
 8004478:	4b2d      	ldr	r3, [pc, #180]	; (8004530 <startGpioInputRead+0x114>)
 800447a:	691c      	ldr	r4, [r3, #16]
 800447c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004480:	482f      	ldr	r0, [pc, #188]	; (8004540 <startGpioInputRead+0x124>)
 8004482:	f006 fc69 	bl	800ad58 <HAL_GPIO_ReadPin>
 8004486:	4603      	mov	r3, r0
 8004488:	461a      	mov	r2, r3
 800448a:	4b2b      	ldr	r3, [pc, #172]	; (8004538 <startGpioInputRead+0x11c>)
 800448c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input5] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT5_Pin);
 800448e:	4b28      	ldr	r3, [pc, #160]	; (8004530 <startGpioInputRead+0x114>)
 8004490:	695c      	ldr	r4, [r3, #20]
 8004492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004496:	482a      	ldr	r0, [pc, #168]	; (8004540 <startGpioInputRead+0x124>)
 8004498:	f006 fc5e 	bl	800ad58 <HAL_GPIO_ReadPin>
 800449c:	4603      	mov	r3, r0
 800449e:	461a      	mov	r2, r3
 80044a0:	4b25      	ldr	r3, [pc, #148]	; (8004538 <startGpioInputRead+0x11c>)
 80044a2:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input6] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT6_Pin);
 80044a4:	4b22      	ldr	r3, [pc, #136]	; (8004530 <startGpioInputRead+0x114>)
 80044a6:	699c      	ldr	r4, [r3, #24]
 80044a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044ac:	4824      	ldr	r0, [pc, #144]	; (8004540 <startGpioInputRead+0x124>)
 80044ae:	f006 fc53 	bl	800ad58 <HAL_GPIO_ReadPin>
 80044b2:	4603      	mov	r3, r0
 80044b4:	461a      	mov	r2, r3
 80044b6:	4b20      	ldr	r3, [pc, #128]	; (8004538 <startGpioInputRead+0x11c>)
 80044b8:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input7] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT7_Pin);
 80044ba:	4b1d      	ldr	r3, [pc, #116]	; (8004530 <startGpioInputRead+0x114>)
 80044bc:	69dc      	ldr	r4, [r3, #28]
 80044be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044c2:	481f      	ldr	r0, [pc, #124]	; (8004540 <startGpioInputRead+0x124>)
 80044c4:	f006 fc48 	bl	800ad58 <HAL_GPIO_ReadPin>
 80044c8:	4603      	mov	r3, r0
 80044ca:	461a      	mov	r2, r3
 80044cc:	4b1a      	ldr	r3, [pc, #104]	; (8004538 <startGpioInputRead+0x11c>)
 80044ce:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input8] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT8_Pin);
 80044d0:	4b17      	ldr	r3, [pc, #92]	; (8004530 <startGpioInputRead+0x114>)
 80044d2:	6a1c      	ldr	r4, [r3, #32]
 80044d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044d8:	4819      	ldr	r0, [pc, #100]	; (8004540 <startGpioInputRead+0x124>)
 80044da:	f006 fc3d 	bl	800ad58 <HAL_GPIO_ReadPin>
 80044de:	4603      	mov	r3, r0
 80044e0:	461a      	mov	r2, r3
 80044e2:	4b15      	ldr	r3, [pc, #84]	; (8004538 <startGpioInputRead+0x11c>)
 80044e4:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input9] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT9_Pin);
 80044e6:	4b12      	ldr	r3, [pc, #72]	; (8004530 <startGpioInputRead+0x114>)
 80044e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80044ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80044ee:	4814      	ldr	r0, [pc, #80]	; (8004540 <startGpioInputRead+0x124>)
 80044f0:	f006 fc32 	bl	800ad58 <HAL_GPIO_ReadPin>
 80044f4:	4603      	mov	r3, r0
 80044f6:	461a      	mov	r2, r3
 80044f8:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <startGpioInputRead+0x11c>)
 80044fa:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input10] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT10_Pin);
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <startGpioInputRead+0x114>)
 80044fe:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004504:	480e      	ldr	r0, [pc, #56]	; (8004540 <startGpioInputRead+0x124>)
 8004506:	f006 fc27 	bl	800ad58 <HAL_GPIO_ReadPin>
 800450a:	4603      	mov	r3, r0
 800450c:	461a      	mov	r2, r3
 800450e:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <startGpioInputRead+0x11c>)
 8004510:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input11] = HAL_GPIO_ReadPin(UI_INPUT11_GPIO_Port,UI_INPUT11_Pin);
 8004512:	4b07      	ldr	r3, [pc, #28]	; (8004530 <startGpioInputRead+0x114>)
 8004514:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004516:	2108      	movs	r1, #8
 8004518:	480a      	ldr	r0, [pc, #40]	; (8004544 <startGpioInputRead+0x128>)
 800451a:	f006 fc1d 	bl	800ad58 <HAL_GPIO_ReadPin>
 800451e:	4603      	mov	r3, r0
 8004520:	461a      	mov	r2, r3
 8004522:	4b05      	ldr	r3, [pc, #20]	; (8004538 <startGpioInputRead+0x11c>)
 8004524:	551a      	strb	r2, [r3, r4]
	  osDelay(950);
 8004526:	f240 30b6 	movw	r0, #950	; 0x3b6
 800452a:	f00c f803 	bl	8010534 <osDelay>
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 800452e:	e779      	b.n	8004424 <startGpioInputRead+0x8>
 8004530:	20000014 	.word	0x20000014
 8004534:	40020400 	.word	0x40020400
 8004538:	20028cd4 	.word	0x20028cd4
 800453c:	40020800 	.word	0x40020800
 8004540:	40020c00 	.word	0x40020c00
 8004544:	40021000 	.word	0x40021000

08004548 <startNavigationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startNavigationTask */
void startNavigationTask(void *argument)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startNavigationTask */
	uint8_t menu_highlight = MENU_TOP;	// variable indicates what menu item is currently being highlighted
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
	uint8_t	menu_run = MAIN_MENU;		// variable to track what menu is currently running
 8004554:	2301      	movs	r3, #1
 8004556:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_menu = menu_run;		// variable to track what the previous menu running was, this is used for the BACK button
 8004558:	7bbb      	ldrb	r3, [r7, #14]
 800455a:	737b      	strb	r3, [r7, #13]
	uint8_t menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 800455c:	2303      	movs	r3, #3
 800455e:	733b      	strb	r3, [r7, #12]
	uint8_t prev_menu_highlight = menu_highlight; //variable to track previous menu highlight
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	72fb      	strb	r3, [r7, #11]
	// Clear button flags here

  /* Infinite loop */
  for(;;)
  {
	switch(inputButtonSet)
 8004564:	4b55      	ldr	r3, [pc, #340]	; (80046bc <startNavigationTask+0x174>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	3b01      	subs	r3, #1
 800456a:	2b03      	cmp	r3, #3
 800456c:	d86f      	bhi.n	800464e <startNavigationTask+0x106>
 800456e:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <startNavigationTask+0x2c>)
 8004570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004574:	08004585 	.word	0x08004585
 8004578:	080045b7 	.word	0x080045b7
 800457c:	080045eb 	.word	0x080045eb
 8004580:	08004619 	.word	0x08004619
	{
	case UP:
	{
		if ((menu_highlight == MENU_TOP) || bootButtons.bootModeSet)
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d070      	beq.n	800466c <startNavigationTask+0x124>
 800458a:	4b4d      	ldr	r3, [pc, #308]	; (80046c0 <startNavigationTask+0x178>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d16c      	bne.n	800466c <startNavigationTask+0x124>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight - 1;
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	3b01      	subs	r3, #1
 8004596:	73fb      	strb	r3, [r7, #15]
			// task notify the display task with UP and current highlighted item
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu indicator highlight flags
			// [8:11]: currently running menu flags
			xTaskNotify(DatScreenBlinkHandle, (UP | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004598:	4b4a      	ldr	r3, [pc, #296]	; (80046c4 <startNavigationTask+0x17c>)
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	f043 0201 	orr.w	r2, r3, #1
 80045a4:	7bbb      	ldrb	r3, [r7, #14]
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	4313      	orrs	r3, r2
 80045aa:	4619      	mov	r1, r3
 80045ac:	2300      	movs	r3, #0
 80045ae:	2204      	movs	r2, #4
 80045b0:	f00d fd50 	bl	8012054 <xTaskGenericNotify>
		}
		break;
 80045b4:	e05a      	b.n	800466c <startNavigationTask+0x124>
	}
	case DWN:
	{
		if ((menu_highlight >= menu_Max_Items) || (bootButtons.bootModeSet))
 80045b6:	7bfa      	ldrb	r2, [r7, #15]
 80045b8:	7b3b      	ldrb	r3, [r7, #12]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d258      	bcs.n	8004670 <startNavigationTask+0x128>
 80045be:	4b40      	ldr	r3, [pc, #256]	; (80046c0 <startNavigationTask+0x178>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d154      	bne.n	8004670 <startNavigationTask+0x128>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight + 1;
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	3301      	adds	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu selection flags
			// [8:11]: currently running menu flags
			// [12:15]: previously running menu flags
			xTaskNotify(DatScreenBlinkHandle, (DWN | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80045cc:	4b3d      	ldr	r3, [pc, #244]	; (80046c4 <startNavigationTask+0x17c>)
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	f043 0202 	orr.w	r2, r3, #2
 80045d8:	7bbb      	ldrb	r3, [r7, #14]
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	4313      	orrs	r3, r2
 80045de:	4619      	mov	r1, r3
 80045e0:	2300      	movs	r3, #0
 80045e2:	2204      	movs	r2, #4
 80045e4:	f00d fd36 	bl	8012054 <xTaskGenericNotify>
		}
		break;
 80045e8:	e042      	b.n	8004670 <startNavigationTask+0x128>
	}
	case BACK:
	{
		if(!(bootButtons.bootModeSet)){
 80045ea:	4b35      	ldr	r3, [pc, #212]	; (80046c0 <startNavigationTask+0x178>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d103      	bne.n	80045fa <startNavigationTask+0xb2>
			menu_run = prev_menu;
 80045f2:	7b7b      	ldrb	r3, [r7, #13]
 80045f4:	73bb      	strb	r3, [r7, #14]
			menu_highlight = prev_menu_highlight; //set the highlight back to where it was for the previous menu.
 80045f6:	7afb      	ldrb	r3, [r7, #11]
 80045f8:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (BACK | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80045fa:	4b32      	ldr	r3, [pc, #200]	; (80046c4 <startNavigationTask+0x17c>)
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	f043 0203 	orr.w	r2, r3, #3
 8004606:	7bbb      	ldrb	r3, [r7, #14]
 8004608:	021b      	lsls	r3, r3, #8
 800460a:	4313      	orrs	r3, r2
 800460c:	4619      	mov	r1, r3
 800460e:	2300      	movs	r3, #0
 8004610:	2204      	movs	r2, #4
 8004612:	f00d fd1f 	bl	8012054 <xTaskGenericNotify>
		break;
 8004616:	e02c      	b.n	8004672 <startNavigationTask+0x12a>
	}
	case SEL:
	{
		if(menu_run==MAIN_MENU){
 8004618:	7bbb      	ldrb	r3, [r7, #14]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d108      	bne.n	8004630 <startNavigationTask+0xe8>
			prev_menu = menu_run;		// save currently running menu for BACK button
 800461e:	7bbb      	ldrb	r3, [r7, #14]
 8004620:	737b      	strb	r3, [r7, #13]
			menu_run = menu_highlight+1;	// update the currently running menu to what the user SELECTED. Requires +1 to match with menu values
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	3301      	adds	r3, #1
 8004626:	73bb      	strb	r3, [r7, #14]
			prev_menu_highlight = menu_highlight; //keep track of the previous menu's highlight for when back is pressed
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	72fb      	strb	r3, [r7, #11]
			menu_highlight=MENU_TOP; //reset the menu highlight for the next menu
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (SEL | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004630:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <startNavigationTask+0x17c>)
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	f043 0204 	orr.w	r2, r3, #4
 800463c:	7bbb      	ldrb	r3, [r7, #14]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	4313      	orrs	r3, r2
 8004642:	4619      	mov	r1, r3
 8004644:	2300      	movs	r3, #0
 8004646:	2204      	movs	r2, #4
 8004648:	f00d fd04 	bl	8012054 <xTaskGenericNotify>
		break;
 800464c:	e011      	b.n	8004672 <startNavigationTask+0x12a>
	}
	default:
		// task notify the display task with no button press.  Just refresh the current running menu.
		xTaskNotify(DatScreenBlinkHandle, (NO_BTN_PRESS | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 800464e:	4b1d      	ldr	r3, [pc, #116]	; (80046c4 <startNavigationTask+0x17c>)
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	f043 0205 	orr.w	r2, r3, #5
 800465a:	7bbb      	ldrb	r3, [r7, #14]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	4313      	orrs	r3, r2
 8004660:	4619      	mov	r1, r3
 8004662:	2300      	movs	r3, #0
 8004664:	2204      	movs	r2, #4
 8004666:	f00d fcf5 	bl	8012054 <xTaskGenericNotify>
		break;
 800466a:	e002      	b.n	8004672 <startNavigationTask+0x12a>
		break;
 800466c:	bf00      	nop
 800466e:	e000      	b.n	8004672 <startNavigationTask+0x12a>
		break;
 8004670:	bf00      	nop
	}
	//initialize the max indicator for each menu
	switch(menu_run){
 8004672:	7bbb      	ldrb	r3, [r7, #14]
 8004674:	3b01      	subs	r3, #1
 8004676:	2b03      	cmp	r3, #3
 8004678:	d816      	bhi.n	80046a8 <startNavigationTask+0x160>
 800467a:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <startNavigationTask+0x138>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	08004697 	.word	0x08004697
 8004684:	08004691 	.word	0x08004691
 8004688:	0800469d 	.word	0x0800469d
 800468c:	080046a3 	.word	0x080046a3

	case BOOT_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 8004690:	2305      	movs	r3, #5
 8004692:	733b      	strb	r3, [r7, #12]
		break;
 8004694:	e00b      	b.n	80046ae <startNavigationTask+0x166>
	}
	case MAIN_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 8004696:	2303      	movs	r3, #3
 8004698:	733b      	strb	r3, [r7, #12]
		break;
 800469a:	e008      	b.n	80046ae <startNavigationTask+0x166>
	}
	case STATUS_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_STATUS_MENU;
 800469c:	2303      	movs	r3, #3
 800469e:	733b      	strb	r3, [r7, #12]
		break;
 80046a0:	e005      	b.n	80046ae <startNavigationTask+0x166>
	}
	case SYSTEM_INFO_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_SYSTEM_INFO_MENU;
 80046a2:	2302      	movs	r3, #2
 80046a4:	733b      	strb	r3, [r7, #12]
		break;
 80046a6:	e002      	b.n	80046ae <startNavigationTask+0x166>
	}
	default:
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 80046a8:	2305      	movs	r3, #5
 80046aa:	733b      	strb	r3, [r7, #12]
		break;
 80046ac:	bf00      	nop
	}
	inputButtonSet = NO_BTN_PRESS;
 80046ae:	4b03      	ldr	r3, [pc, #12]	; (80046bc <startNavigationTask+0x174>)
 80046b0:	2205      	movs	r2, #5
 80046b2:	701a      	strb	r2, [r3, #0]
    osDelay(200);
 80046b4:	20c8      	movs	r0, #200	; 0xc8
 80046b6:	f00b ff3d 	bl	8010534 <osDelay>
	switch(inputButtonSet)
 80046ba:	e753      	b.n	8004564 <startNavigationTask+0x1c>
 80046bc:	200000dc 	.word	0x200000dc
 80046c0:	200032ac 	.word	0x200032ac
 80046c4:	20030a98 	.word	0x20030a98

080046c8 <startErrorLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startErrorLEDs */
void startErrorLEDs(void *argument)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	int i2cCheck;
	float * presentADCValues;
  for(;;)
  {
	  if(adcRestart[0] && adcRestart[1] && adcRestart[2]){
 80046d0:	4ba4      	ldr	r3, [pc, #656]	; (8004964 <startErrorLEDs+0x29c>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <startErrorLEDs+0x26>
 80046d8:	4ba2      	ldr	r3, [pc, #648]	; (8004964 <startErrorLEDs+0x29c>)
 80046da:	785b      	ldrb	r3, [r3, #1]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d006      	beq.n	80046ee <startErrorLEDs+0x26>
 80046e0:	4ba0      	ldr	r3, [pc, #640]	; (8004964 <startErrorLEDs+0x29c>)
 80046e2:	789b      	ldrb	r3, [r3, #2]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <startErrorLEDs+0x26>
		  presentADCValues = getADCValues();
 80046e8:	f7ff f952 	bl	8003990 <getADCValues>
 80046ec:	60f8      	str	r0, [r7, #12]
	  }
	  if(*(presentADCValues+Adc.adc0) > 3.5){
 80046ee:	4b9e      	ldr	r3, [pc, #632]	; (8004968 <startErrorLEDs+0x2a0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	edd3 7a00 	vldr	s15, [r3]
 80046fc:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8004700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004708:	dd03      	ble.n	8004712 <startErrorLEDs+0x4a>
		  errorLED.vsysPMIFault=0;
 800470a:	4b98      	ldr	r3, [pc, #608]	; (800496c <startErrorLEDs+0x2a4>)
 800470c:	2200      	movs	r2, #0
 800470e:	605a      	str	r2, [r3, #4]
 8004710:	e002      	b.n	8004718 <startErrorLEDs+0x50>
	  }
	  else{
		  errorLED.vsysPMIFault=1;
 8004712:	4b96      	ldr	r3, [pc, #600]	; (800496c <startErrorLEDs+0x2a4>)
 8004714:	2201      	movs	r2, #1
 8004716:	605a      	str	r2, [r3, #4]
	  }
	  if((!ZION.SOC_EEPROM_Detected && ZION.zionFinished) || (ZION.SOC_BoardFab <0)){
 8004718:	4b95      	ldr	r3, [pc, #596]	; (8004970 <startErrorLEDs+0x2a8>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d103      	bne.n	8004728 <startErrorLEDs+0x60>
 8004720:	4b93      	ldr	r3, [pc, #588]	; (8004970 <startErrorLEDs+0x2a8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d103      	bne.n	8004730 <startErrorLEDs+0x68>
 8004728:	4b91      	ldr	r3, [pc, #580]	; (8004970 <startErrorLEDs+0x2a8>)
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	2b00      	cmp	r3, #0
 800472e:	da03      	bge.n	8004738 <startErrorLEDs+0x70>
		  errorLED.zionFault=1;
 8004730:	4b8e      	ldr	r3, [pc, #568]	; (800496c <startErrorLEDs+0x2a4>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	e002      	b.n	800473e <startErrorLEDs+0x76>
	  }
	  else{
		  errorLED.zionFault=0;
 8004738:	4b8c      	ldr	r3, [pc, #560]	; (800496c <startErrorLEDs+0x2a4>)
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
	  }
	  i2cCheck=writeI2CRegister(LED.address, 0xf0, 0x00,1,LED.i2cBank);
 800473e:	4b8d      	ldr	r3, [pc, #564]	; (8004974 <startErrorLEDs+0x2ac>)
 8004740:	7818      	ldrb	r0, [r3, #0]
 8004742:	4b8c      	ldr	r3, [pc, #560]	; (8004974 <startErrorLEDs+0x2ac>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	2301      	movs	r3, #1
 800474a:	2200      	movs	r2, #0
 800474c:	21f0      	movs	r1, #240	; 0xf0
 800474e:	f7fe feeb 	bl	8003528 <writeI2CRegister>
 8004752:	60b8      	str	r0, [r7, #8]

	  if(i2cCheck){
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <startErrorLEDs+0x9a>
		  errorLED.ledDriver=0;
 800475a:	4b84      	ldr	r3, [pc, #528]	; (800496c <startErrorLEDs+0x2a4>)
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	; 0x30
 8004760:	e002      	b.n	8004768 <startErrorLEDs+0xa0>
	  }
	  else{
		  errorLED.ledDriver=1;
 8004762:	4b82      	ldr	r3, [pc, #520]	; (800496c <startErrorLEDs+0x2a4>)
 8004764:	2201      	movs	r2, #1
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
	  }
	  //only allow the error led write commands if the led driver responds.
	  if(errorLED.ledDriver){
 8004768:	4b80      	ldr	r3, [pc, #512]	; (800496c <startErrorLEDs+0x2a4>)
 800476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80f4 	beq.w	800495a <startErrorLEDs+0x292>
		  setErrorLED(ZION_FAULT,errorLED.zionFault);
 8004772:	4b7e      	ldr	r3, [pc, #504]	; (800496c <startErrorLEDs+0x2a4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	bf14      	ite	ne
 800477a:	2301      	movne	r3, #1
 800477c:	2300      	moveq	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	4619      	mov	r1, r3
 8004782:	2000      	movs	r0, #0
 8004784:	f7fe ffe8 	bl	8003758 <setErrorLED>
		  osDelay(20);
 8004788:	2014      	movs	r0, #20
 800478a:	f00b fed3 	bl	8010534 <osDelay>
		  setErrorLED(VSYSPMI_FAULT, errorLED.vsysPMIFault);
 800478e:	4b77      	ldr	r3, [pc, #476]	; (800496c <startErrorLEDs+0x2a4>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	bf14      	ite	ne
 8004796:	2301      	movne	r3, #1
 8004798:	2300      	moveq	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	4619      	mov	r1, r3
 800479e:	2001      	movs	r0, #1
 80047a0:	f7fe ffda 	bl	8003758 <setErrorLED>
		  osDelay(20);
 80047a4:	2014      	movs	r0, #20
 80047a6:	f00b fec5 	bl	8010534 <osDelay>
		  switch(bootButtons.bootMode){
 80047aa:	4b73      	ldr	r3, [pc, #460]	; (8004978 <startErrorLEDs+0x2b0>)
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	2b05      	cmp	r3, #5
 80047b0:	d84a      	bhi.n	8004848 <startErrorLEDs+0x180>
 80047b2:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <startErrorLEDs+0xf0>)
 80047b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b8:	080047d1 	.word	0x080047d1
 80047bc:	080047e5 	.word	0x080047e5
 80047c0:	080047f9 	.word	0x080047f9
 80047c4:	0800480d 	.word	0x0800480d
 80047c8:	08004835 	.word	0x08004835
 80047cc:	08004821 	.word	0x08004821
				case UNINITIALIZED:
					errorLED.standard_boot=0;
 80047d0:	4b66      	ldr	r3, [pc, #408]	; (800496c <startErrorLEDs+0x2a4>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=0;
 80047d6:	4b65      	ldr	r3, [pc, #404]	; (800496c <startErrorLEDs+0x2a4>)
 80047d8:	2200      	movs	r2, #0
 80047da:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=0;
 80047dc:	4b63      	ldr	r3, [pc, #396]	; (800496c <startErrorLEDs+0x2a4>)
 80047de:	2200      	movs	r2, #0
 80047e0:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 80047e2:	e031      	b.n	8004848 <startErrorLEDs+0x180>
				case STANDARD:
					errorLED.standard_boot=1;
 80047e4:	4b61      	ldr	r3, [pc, #388]	; (800496c <startErrorLEDs+0x2a4>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=0;
 80047ea:	4b60      	ldr	r3, [pc, #384]	; (800496c <startErrorLEDs+0x2a4>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=0;
 80047f0:	4b5e      	ldr	r3, [pc, #376]	; (800496c <startErrorLEDs+0x2a4>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 80047f6:	e027      	b.n	8004848 <startErrorLEDs+0x180>
				case UEFI:
					errorLED.standard_boot=0;
 80047f8:	4b5c      	ldr	r3, [pc, #368]	; (800496c <startErrorLEDs+0x2a4>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=1;
 80047fe:	4b5b      	ldr	r3, [pc, #364]	; (800496c <startErrorLEDs+0x2a4>)
 8004800:	2201      	movs	r2, #1
 8004802:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=0;
 8004804:	4b59      	ldr	r3, [pc, #356]	; (800496c <startErrorLEDs+0x2a4>)
 8004806:	2200      	movs	r2, #0
 8004808:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 800480a:	e01d      	b.n	8004848 <startErrorLEDs+0x180>
				case EDL:
					errorLED.standard_boot=0;
 800480c:	4b57      	ldr	r3, [pc, #348]	; (800496c <startErrorLEDs+0x2a4>)
 800480e:	2200      	movs	r2, #0
 8004810:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=0;
 8004812:	4b56      	ldr	r3, [pc, #344]	; (800496c <startErrorLEDs+0x2a4>)
 8004814:	2200      	movs	r2, #0
 8004816:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=1;
 8004818:	4b54      	ldr	r3, [pc, #336]	; (800496c <startErrorLEDs+0x2a4>)
 800481a:	2201      	movs	r2, #1
 800481c:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 800481e:	e013      	b.n	8004848 <startErrorLEDs+0x180>
				case MASS_STORAGE:
					errorLED.standard_boot=1;
 8004820:	4b52      	ldr	r3, [pc, #328]	; (800496c <startErrorLEDs+0x2a4>)
 8004822:	2201      	movs	r2, #1
 8004824:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=0;
 8004826:	4b51      	ldr	r3, [pc, #324]	; (800496c <startErrorLEDs+0x2a4>)
 8004828:	2200      	movs	r2, #0
 800482a:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=1;
 800482c:	4b4f      	ldr	r3, [pc, #316]	; (800496c <startErrorLEDs+0x2a4>)
 800482e:	2201      	movs	r2, #1
 8004830:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 8004832:	e009      	b.n	8004848 <startErrorLEDs+0x180>
				case RECOVERY:
					errorLED.standard_boot=0;
 8004834:	4b4d      	ldr	r3, [pc, #308]	; (800496c <startErrorLEDs+0x2a4>)
 8004836:	2200      	movs	r2, #0
 8004838:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=1;
 800483a:	4b4c      	ldr	r3, [pc, #304]	; (800496c <startErrorLEDs+0x2a4>)
 800483c:	2201      	movs	r2, #1
 800483e:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=1;
 8004840:	4b4a      	ldr	r3, [pc, #296]	; (800496c <startErrorLEDs+0x2a4>)
 8004842:	2201      	movs	r2, #1
 8004844:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 8004846:	bf00      	nop
				}
		  setErrorLED(STANDARD_LED,errorLED.standard_boot);
 8004848:	4b48      	ldr	r3, [pc, #288]	; (800496c <startErrorLEDs+0x2a4>)
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	2b00      	cmp	r3, #0
 800484e:	bf14      	ite	ne
 8004850:	2301      	movne	r3, #1
 8004852:	2300      	moveq	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	4619      	mov	r1, r3
 8004858:	2007      	movs	r0, #7
 800485a:	f7fe ff7d 	bl	8003758 <setErrorLED>
		  osDelay(20);
 800485e:	2014      	movs	r0, #20
 8004860:	f00b fe68 	bl	8010534 <osDelay>
		  setErrorLED(UEFI_LED,errorLED.uefi_boot);
 8004864:	4b41      	ldr	r3, [pc, #260]	; (800496c <startErrorLEDs+0x2a4>)
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf14      	ite	ne
 800486c:	2301      	movne	r3, #1
 800486e:	2300      	moveq	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	4619      	mov	r1, r3
 8004874:	2008      	movs	r0, #8
 8004876:	f7fe ff6f 	bl	8003758 <setErrorLED>
		  osDelay(20);
 800487a:	2014      	movs	r0, #20
 800487c:	f00b fe5a 	bl	8010534 <osDelay>
		  setErrorLED(EDL_LED,errorLED.edl_boot);
 8004880:	4b3a      	ldr	r3, [pc, #232]	; (800496c <startErrorLEDs+0x2a4>)
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	2b00      	cmp	r3, #0
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	4619      	mov	r1, r3
 8004890:	2009      	movs	r0, #9
 8004892:	f7fe ff61 	bl	8003758 <setErrorLED>
		  osDelay(20);
 8004896:	2014      	movs	r0, #20
 8004898:	f00b fe4c 	bl	8010534 <osDelay>
		  setErrorLED(FAULT3,errorLED.fault3);
 800489c:	4b33      	ldr	r3, [pc, #204]	; (800496c <startErrorLEDs+0x2a4>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bf14      	ite	ne
 80048a4:	2301      	movne	r3, #1
 80048a6:	2300      	moveq	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	4619      	mov	r1, r3
 80048ac:	2002      	movs	r0, #2
 80048ae:	f7fe ff53 	bl	8003758 <setErrorLED>
		  osDelay(20);
 80048b2:	2014      	movs	r0, #20
 80048b4:	f00b fe3e 	bl	8010534 <osDelay>
		  setErrorLED(FAULT4,errorLED.fault4);
 80048b8:	4b2c      	ldr	r3, [pc, #176]	; (800496c <startErrorLEDs+0x2a4>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bf14      	ite	ne
 80048c0:	2301      	movne	r3, #1
 80048c2:	2300      	moveq	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	4619      	mov	r1, r3
 80048c8:	2003      	movs	r0, #3
 80048ca:	f7fe ff45 	bl	8003758 <setErrorLED>
		  osDelay(20);
 80048ce:	2014      	movs	r0, #20
 80048d0:	f00b fe30 	bl	8010534 <osDelay>
		  setErrorLED(FAULT5,errorLED.fault5);
 80048d4:	4b25      	ldr	r3, [pc, #148]	; (800496c <startErrorLEDs+0x2a4>)
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	4619      	mov	r1, r3
 80048e4:	2004      	movs	r0, #4
 80048e6:	f7fe ff37 	bl	8003758 <setErrorLED>
		  osDelay(20);
 80048ea:	2014      	movs	r0, #20
 80048ec:	f00b fe22 	bl	8010534 <osDelay>
		  setErrorLED(FAULT6,errorLED.fault6);
 80048f0:	4b1e      	ldr	r3, [pc, #120]	; (800496c <startErrorLEDs+0x2a4>)
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	4619      	mov	r1, r3
 8004900:	2005      	movs	r0, #5
 8004902:	f7fe ff29 	bl	8003758 <setErrorLED>
		  osDelay(20);
 8004906:	2014      	movs	r0, #20
 8004908:	f00b fe14 	bl	8010534 <osDelay>
		  setErrorLED(FAULT7,errorLED.fault7);
 800490c:	4b17      	ldr	r3, [pc, #92]	; (800496c <startErrorLEDs+0x2a4>)
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	2b00      	cmp	r3, #0
 8004912:	bf14      	ite	ne
 8004914:	2301      	movne	r3, #1
 8004916:	2300      	moveq	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	4619      	mov	r1, r3
 800491c:	2006      	movs	r0, #6
 800491e:	f7fe ff1b 	bl	8003758 <setErrorLED>
		  osDelay(20);
 8004922:	2014      	movs	r0, #20
 8004924:	f00b fe06 	bl	8010534 <osDelay>
		  setErrorLED(FAULT8,errorLED.fault8);
 8004928:	4b10      	ldr	r3, [pc, #64]	; (800496c <startErrorLEDs+0x2a4>)
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf14      	ite	ne
 8004930:	2301      	movne	r3, #1
 8004932:	2300      	moveq	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	4619      	mov	r1, r3
 8004938:	200a      	movs	r0, #10
 800493a:	f7fe ff0d 	bl	8003758 <setErrorLED>
		  osDelay(20);
 800493e:	2014      	movs	r0, #20
 8004940:	f00b fdf8 	bl	8010534 <osDelay>
		  setErrorLED(FAULT9,errorLED.fault9);
 8004944:	4b09      	ldr	r3, [pc, #36]	; (800496c <startErrorLEDs+0x2a4>)
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	2b00      	cmp	r3, #0
 800494a:	bf14      	ite	ne
 800494c:	2301      	movne	r3, #1
 800494e:	2300      	moveq	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	4619      	mov	r1, r3
 8004954:	200b      	movs	r0, #11
 8004956:	f7fe feff 	bl	8003758 <setErrorLED>
	  }

    osDelay(500);
 800495a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800495e:	f00b fde9 	bl	8010534 <osDelay>
	  if(adcRestart[0] && adcRestart[1] && adcRestart[2]){
 8004962:	e6b5      	b.n	80046d0 <startErrorLEDs+0x8>
 8004964:	20029224 	.word	0x20029224
 8004968:	2000007c 	.word	0x2000007c
 800496c:	200032d8 	.word	0x200032d8
 8004970:	20003274 	.word	0x20003274
 8004974:	20000004 	.word	0x20000004
 8004978:	200032ac 	.word	0x200032ac

0800497c <startZionRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startZionRead */
void startZionRead(void *argument)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startZionRead */
  /* Infinite loop */
	float * adcValuePointer;
	int * zionEEPROMPresent;
	int * zionHeaderData;
	int switchOn=0;
 8004984:	2300      	movs	r3, #0
 8004986:	61fb      	str	r3, [r7, #28]
	float zionVoltage=77;
 8004988:	4b79      	ldr	r3, [pc, #484]	; (8004b70 <startZionRead+0x1f4>)
 800498a:	61bb      	str	r3, [r7, #24]

  for(;;)
  {
	  if(!ZION.zionFinished){
 800498c:	4b79      	ldr	r3, [pc, #484]	; (8004b74 <startZionRead+0x1f8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	f040 80e5 	bne.w	8004b60 <startZionRead+0x1e4>
		  if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8004996:	4b78      	ldr	r3, [pc, #480]	; (8004b78 <startZionRead+0x1fc>)
 8004998:	781a      	ldrb	r2, [r3, #0]
 800499a:	4b77      	ldr	r3, [pc, #476]	; (8004b78 <startZionRead+0x1fc>)
 800499c:	785b      	ldrb	r3, [r3, #1]
 800499e:	4013      	ands	r3, r2
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	4b75      	ldr	r3, [pc, #468]	; (8004b78 <startZionRead+0x1fc>)
 80049a4:	789b      	ldrb	r3, [r3, #2]
 80049a6:	4013      	ands	r3, r2
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d009      	beq.n	80049c2 <startZionRead+0x46>
			  adcValuePointer = getADCValues();
 80049ae:	f7fe ffef 	bl	8003990 <getADCValues>
 80049b2:	6178      	str	r0, [r7, #20]
			  zionVoltage = *(adcValuePointer + Adc.zionADC);
 80049b4:	4b71      	ldr	r3, [pc, #452]	; (8004b7c <startZionRead+0x200>)
 80049b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4413      	add	r3, r2
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	61bb      	str	r3, [r7, #24]
		  }
		  if(zionVoltage != 77){
 80049c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80049c6:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8004b80 <startZionRead+0x204>
 80049ca:	eef4 7a47 	vcmp.f32	s15, s14
 80049ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d2:	f000 80c8 	beq.w	8004b66 <startZionRead+0x1ea>
			  if(zionVoltage > 3.0 && (!switchOn)){
 80049d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80049da:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80049de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e6:	dd5d      	ble.n	8004aa4 <startZionRead+0x128>
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d15a      	bne.n	8004aa4 <startZionRead+0x128>
				  int runtime = (HAL_GetTick()/1000);
 80049ee:	f004 fd45 	bl	800947c <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	4b63      	ldr	r3, [pc, #396]	; (8004b84 <startZionRead+0x208>)
 80049f6:	fba3 2302 	umull	r2, r3, r3, r2
 80049fa:	099b      	lsrs	r3, r3, #6
 80049fc:	613b      	str	r3, [r7, #16]
				  if(runtime > 15){
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2b0f      	cmp	r3, #15
 8004a02:	f340 80af 	ble.w	8004b64 <startZionRead+0x1e8>
					  zionEEPROMPresent= zionEEPROMPresence();
 8004a06:	f004 f9dd 	bl	8008dc4 <zionEEPROMPresence>
 8004a0a:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d012      	beq.n	8004a3a <startZionRead+0xbe>
						  ZION.SOC_EEPROM_Detected = 1;
 8004a14:	4b57      	ldr	r3, [pc, #348]	; (8004b74 <startZionRead+0x1f8>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 8004a1a:	20a6      	movs	r0, #166	; 0xa6
 8004a1c:	f004 fa22 	bl	8008e64 <parseZionEEPROM>
 8004a20:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a53      	ldr	r2, [pc, #332]	; (8004b74 <startZionRead+0x1f8>)
 8004a28:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	4a51      	ldr	r2, [pc, #324]	; (8004b74 <startZionRead+0x1f8>)
 8004a30:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	4a4f      	ldr	r2, [pc, #316]	; (8004b74 <startZionRead+0x1f8>)
 8004a38:	61d3      	str	r3, [r2, #28]
					  }

					  if(*(zionEEPROMPresent+1)){
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d012      	beq.n	8004a6a <startZionRead+0xee>
						  ZION.ASIC_EEPROM_Detected = 1;
 8004a44:	4b4b      	ldr	r3, [pc, #300]	; (8004b74 <startZionRead+0x1f8>)
 8004a46:	2201      	movs	r2, #1
 8004a48:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 8004a4a:	20a8      	movs	r0, #168	; 0xa8
 8004a4c:	f004 fa0a 	bl	8008e64 <parseZionEEPROM>
 8004a50:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a47      	ldr	r2, [pc, #284]	; (8004b74 <startZionRead+0x1f8>)
 8004a58:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	4a45      	ldr	r2, [pc, #276]	; (8004b74 <startZionRead+0x1f8>)
 8004a60:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	4a43      	ldr	r2, [pc, #268]	; (8004b74 <startZionRead+0x1f8>)
 8004a68:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d012      	beq.n	8004a9a <startZionRead+0x11e>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 8004a74:	4b3f      	ldr	r3, [pc, #252]	; (8004b74 <startZionRead+0x1f8>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 8004a7a:	20aa      	movs	r0, #170	; 0xaa
 8004a7c:	f004 f9f2 	bl	8008e64 <parseZionEEPROM>
 8004a80:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a3b      	ldr	r2, [pc, #236]	; (8004b74 <startZionRead+0x1f8>)
 8004a88:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	4a39      	ldr	r2, [pc, #228]	; (8004b74 <startZionRead+0x1f8>)
 8004a90:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	4a37      	ldr	r2, [pc, #220]	; (8004b74 <startZionRead+0x1f8>)
 8004a98:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 8004a9a:	4b36      	ldr	r3, [pc, #216]	; (8004b74 <startZionRead+0x1f8>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 8004aa0:	f00b fd42 	bl	8010528 <osThreadExit>
				  }
			  }
			  else{
				  if(!switchOn){
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10b      	bne.n	8004ac2 <startZionRead+0x146>
					  HAL_GPIO_WritePin(ZION_PWR_EN_GPIO_Port,ZION_PWR_EN_Pin,1);
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ab0:	4835      	ldr	r0, [pc, #212]	; (8004b88 <startZionRead+0x20c>)
 8004ab2:	f006 f969 	bl	800ad88 <HAL_GPIO_WritePin>
					  ZION.zionSwitch = 1;
 8004ab6:	4b2f      	ldr	r3, [pc, #188]	; (8004b74 <startZionRead+0x1f8>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	605a      	str	r2, [r3, #4]
					  switchOn=1;
 8004abc:	2301      	movs	r3, #1
 8004abe:	61fb      	str	r3, [r7, #28]
 8004ac0:	e051      	b.n	8004b66 <startZionRead+0x1ea>
				  }
				  else{
					  zionEEPROMPresent= zionEEPROMPresence();
 8004ac2:	f004 f97f 	bl	8008dc4 <zionEEPROMPresence>
 8004ac6:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d012      	beq.n	8004af6 <startZionRead+0x17a>
						  ZION.SOC_EEPROM_Detected = 1;
 8004ad0:	4b28      	ldr	r3, [pc, #160]	; (8004b74 <startZionRead+0x1f8>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 8004ad6:	20a6      	movs	r0, #166	; 0xa6
 8004ad8:	f004 f9c4 	bl	8008e64 <parseZionEEPROM>
 8004adc:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a24      	ldr	r2, [pc, #144]	; (8004b74 <startZionRead+0x1f8>)
 8004ae4:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	4a22      	ldr	r2, [pc, #136]	; (8004b74 <startZionRead+0x1f8>)
 8004aec:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	4a20      	ldr	r2, [pc, #128]	; (8004b74 <startZionRead+0x1f8>)
 8004af4:	61d3      	str	r3, [r2, #28]
					  }
					  if(*(zionEEPROMPresent+1)){
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3304      	adds	r3, #4
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d012      	beq.n	8004b26 <startZionRead+0x1aa>
						  ZION.ASIC_EEPROM_Detected = 1;
 8004b00:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <startZionRead+0x1f8>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 8004b06:	20a8      	movs	r0, #168	; 0xa8
 8004b08:	f004 f9ac 	bl	8008e64 <parseZionEEPROM>
 8004b0c:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a18      	ldr	r2, [pc, #96]	; (8004b74 <startZionRead+0x1f8>)
 8004b14:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	4a16      	ldr	r2, [pc, #88]	; (8004b74 <startZionRead+0x1f8>)
 8004b1c:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	4a14      	ldr	r2, [pc, #80]	; (8004b74 <startZionRead+0x1f8>)
 8004b24:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3308      	adds	r3, #8
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d012      	beq.n	8004b56 <startZionRead+0x1da>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 8004b30:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <startZionRead+0x1f8>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 8004b36:	20aa      	movs	r0, #170	; 0xaa
 8004b38:	f004 f994 	bl	8008e64 <parseZionEEPROM>
 8004b3c:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <startZionRead+0x1f8>)
 8004b44:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	4a0a      	ldr	r2, [pc, #40]	; (8004b74 <startZionRead+0x1f8>)
 8004b4c:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	4a08      	ldr	r2, [pc, #32]	; (8004b74 <startZionRead+0x1f8>)
 8004b54:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 8004b56:	4b07      	ldr	r3, [pc, #28]	; (8004b74 <startZionRead+0x1f8>)
 8004b58:	2201      	movs	r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 8004b5c:	f00b fce4 	bl	8010528 <osThreadExit>
			  }
		  }
	  }
	  else{
		  //should never get here but added for completeness
		  osThreadExit();
 8004b60:	f00b fce2 	bl	8010528 <osThreadExit>
			  if(zionVoltage > 3.0 && (!switchOn)){
 8004b64:	bf00      	nop
	  }
    osDelay(400);
 8004b66:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004b6a:	f00b fce3 	bl	8010534 <osDelay>
	  if(!ZION.zionFinished){
 8004b6e:	e70d      	b.n	800498c <startZionRead+0x10>
 8004b70:	429a0000 	.word	0x429a0000
 8004b74:	20003274 	.word	0x20003274
 8004b78:	20029224 	.word	0x20029224
 8004b7c:	2000007c 	.word	0x2000007c
 8004b80:	429a0000 	.word	0x429a0000
 8004b84:	10624dd3 	.word	0x10624dd3
 8004b88:	40020400 	.word	0x40020400

08004b8c <startBootButtons>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBootButtons */
void startBootButtons(void *argument)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBootButtons */
  /* Infinite loop */
	int pwrBtnReady=0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
	int timeTurnedOn=0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	613b      	str	r3, [r7, #16]
	int pwrOn=0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]
	int presentTime=0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
	  if(bootButtons.bootModeSet){
 8004ba4:	4b92      	ldr	r3, [pc, #584]	; (8004df0 <startBootButtons+0x264>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 81ed 	beq.w	8004f88 <startBootButtons+0x3fc>
		  presentTime = (HAL_GetTick());
 8004bae:	f004 fc65 	bl	800947c <HAL_GetTick>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	60bb      	str	r3, [r7, #8]
		  if(timeTurnedOn==0){
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <startBootButtons+0x34>
			  timeTurnedOn=presentTime;
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	613b      	str	r3, [r7, #16]
		  }
		  if(bootButtons.bootMode !=0){
 8004bc0:	4b8b      	ldr	r3, [pc, #556]	; (8004df0 <startBootButtons+0x264>)
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 80ce 	beq.w	8004d66 <startBootButtons+0x1da>
			  if(bootButtons.btn1){ //DPAD UP
 8004bca:	4b89      	ldr	r3, [pc, #548]	; (8004df0 <startBootButtons+0x264>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d006      	beq.n	8004be0 <startBootButtons+0x54>
				  BTN1_ON;
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	2108      	movs	r1, #8
 8004bd6:	4887      	ldr	r0, [pc, #540]	; (8004df4 <startBootButtons+0x268>)
 8004bd8:	f006 f8d6 	bl	800ad88 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn2){ //DPAD RIGHT
 8004be0:	4b83      	ldr	r3, [pc, #524]	; (8004df0 <startBootButtons+0x264>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d006      	beq.n	8004bf6 <startBootButtons+0x6a>
				  BTN2_ON;
 8004be8:	2201      	movs	r2, #1
 8004bea:	2110      	movs	r1, #16
 8004bec:	4881      	ldr	r0, [pc, #516]	; (8004df4 <startBootButtons+0x268>)
 8004bee:	f006 f8cb 	bl	800ad88 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn3){ //DPAD LEFT
 8004bf6:	4b7e      	ldr	r3, [pc, #504]	; (8004df0 <startBootButtons+0x264>)
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d006      	beq.n	8004c0c <startBootButtons+0x80>
				  BTN3_ON;
 8004bfe:	2201      	movs	r2, #1
 8004c00:	2120      	movs	r1, #32
 8004c02:	487c      	ldr	r0, [pc, #496]	; (8004df4 <startBootButtons+0x268>)
 8004c04:	f006 f8c0 	bl	800ad88 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn4){
 8004c0c:	4b78      	ldr	r3, [pc, #480]	; (8004df0 <startBootButtons+0x264>)
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <startBootButtons+0x98>
				  BTN4_ON;
 8004c14:	2201      	movs	r2, #1
 8004c16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c1a:	4876      	ldr	r0, [pc, #472]	; (8004df4 <startBootButtons+0x268>)
 8004c1c:	f006 f8b4 	bl	800ad88 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004c20:	2301      	movs	r3, #1
 8004c22:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn5){
 8004c24:	4b72      	ldr	r3, [pc, #456]	; (8004df0 <startBootButtons+0x264>)
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <startBootButtons+0xb0>
				  BTN5_ON;
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c32:	4870      	ldr	r0, [pc, #448]	; (8004df4 <startBootButtons+0x268>)
 8004c34:	f006 f8a8 	bl	800ad88 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.edl_sw){
 8004c3c:	4b6c      	ldr	r3, [pc, #432]	; (8004df0 <startBootButtons+0x264>)
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d007      	beq.n	8004c54 <startBootButtons+0xc8>
				  EDL_SW_ON;
 8004c44:	2201      	movs	r2, #1
 8004c46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c4a:	486b      	ldr	r0, [pc, #428]	; (8004df8 <startBootButtons+0x26c>)
 8004c4c:	f006 f89c 	bl	800ad88 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004c50:	2301      	movs	r3, #1
 8004c52:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.ex_sw){
 8004c54:	4b66      	ldr	r3, [pc, #408]	; (8004df0 <startBootButtons+0x264>)
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d007      	beq.n	8004c6c <startBootButtons+0xe0>
				  EX_SW_ON;
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c62:	4865      	ldr	r0, [pc, #404]	; (8004df8 <startBootButtons+0x26c>)
 8004c64:	f006 f890 	bl	800ad88 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	617b      	str	r3, [r7, #20]
			  }
			  setOutputGPIOState(outputGPIOs.odOut_0, OFF); //set the reset GPIO.
 8004c6c:	4b63      	ldr	r3, [pc, #396]	; (8004dfc <startBootButtons+0x270>)
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c70:	2100      	movs	r1, #0
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe fa64 	bl	8003140 <setOutputGPIOState>
			  osDelay(500);
 8004c78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c7c:	f00b fc5a 	bl	8010534 <osDelay>
			  setOutputGPIOState(outputGPIOs.odOut_0, ON); //turn off the reset GPIO
 8004c80:	4b5e      	ldr	r3, [pc, #376]	; (8004dfc <startBootButtons+0x270>)
 8004c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c84:	2101      	movs	r1, #1
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fe fa5a 	bl	8003140 <setOutputGPIOState>
			  osDelay(500);
 8004c8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c90:	f00b fc50 	bl	8010534 <osDelay>
			  BTN1_OFF;
 8004c94:	2200      	movs	r2, #0
 8004c96:	2108      	movs	r1, #8
 8004c98:	4856      	ldr	r0, [pc, #344]	; (8004df4 <startBootButtons+0x268>)
 8004c9a:	f006 f875 	bl	800ad88 <HAL_GPIO_WritePin>
			  BTN2_OFF;
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2110      	movs	r1, #16
 8004ca2:	4854      	ldr	r0, [pc, #336]	; (8004df4 <startBootButtons+0x268>)
 8004ca4:	f006 f870 	bl	800ad88 <HAL_GPIO_WritePin>
			  BTN3_OFF;
 8004ca8:	2200      	movs	r2, #0
 8004caa:	2120      	movs	r1, #32
 8004cac:	4851      	ldr	r0, [pc, #324]	; (8004df4 <startBootButtons+0x268>)
 8004cae:	f006 f86b 	bl	800ad88 <HAL_GPIO_WritePin>
			  BTN4_OFF;
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004cb8:	484e      	ldr	r0, [pc, #312]	; (8004df4 <startBootButtons+0x268>)
 8004cba:	f006 f865 	bl	800ad88 <HAL_GPIO_WritePin>
			  BTN5_OFF;
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cc4:	484b      	ldr	r0, [pc, #300]	; (8004df4 <startBootButtons+0x268>)
 8004cc6:	f006 f85f 	bl	800ad88 <HAL_GPIO_WritePin>
			  EDL_SW_OFF;
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cd0:	4849      	ldr	r0, [pc, #292]	; (8004df8 <startBootButtons+0x26c>)
 8004cd2:	f006 f859 	bl	800ad88 <HAL_GPIO_WritePin>
			  EX_SW_OFF;
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cdc:	4846      	ldr	r0, [pc, #280]	; (8004df8 <startBootButtons+0x26c>)
 8004cde:	f006 f853 	bl	800ad88 <HAL_GPIO_WritePin>
			  if(bootButtons.btn1){
 8004ce2:	4b43      	ldr	r3, [pc, #268]	; (8004df0 <startBootButtons+0x264>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <startBootButtons+0x166>
				  bootButtons.bootMode= RECOVERY;
 8004cea:	4b41      	ldr	r3, [pc, #260]	; (8004df0 <startBootButtons+0x264>)
 8004cec:	2204      	movs	r2, #4
 8004cee:	629a      	str	r2, [r3, #40]	; 0x28
 8004cf0:	e01a      	b.n	8004d28 <startBootButtons+0x19c>
				  //errorLEDState[RECOVERY_LED]=1;
			  }
			  else if(bootButtons.btn2){
 8004cf2:	4b3f      	ldr	r3, [pc, #252]	; (8004df0 <startBootButtons+0x264>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <startBootButtons+0x176>
				  bootButtons.bootMode= MASS_STORAGE;
 8004cfa:	4b3d      	ldr	r3, [pc, #244]	; (8004df0 <startBootButtons+0x264>)
 8004cfc:	2205      	movs	r2, #5
 8004cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8004d00:	e012      	b.n	8004d28 <startBootButtons+0x19c>
				 // errorLEDState[MASS_STORAGE_LED]=1;
			  }
			  else if(bootButtons.btn3){
 8004d02:	4b3b      	ldr	r3, [pc, #236]	; (8004df0 <startBootButtons+0x264>)
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <startBootButtons+0x186>
				  bootButtons.bootMode= UEFI;
 8004d0a:	4b39      	ldr	r3, [pc, #228]	; (8004df0 <startBootButtons+0x264>)
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	629a      	str	r2, [r3, #40]	; 0x28
 8004d10:	e00a      	b.n	8004d28 <startBootButtons+0x19c>
				  //errorLEDState[UEFI_LED]=1;
			  }
			  else if(bootButtons.edl_sw){
 8004d12:	4b37      	ldr	r3, [pc, #220]	; (8004df0 <startBootButtons+0x264>)
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <startBootButtons+0x196>
				  bootButtons.bootMode= EDL;
 8004d1a:	4b35      	ldr	r3, [pc, #212]	; (8004df0 <startBootButtons+0x264>)
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004d20:	e002      	b.n	8004d28 <startBootButtons+0x19c>
				  //errorLEDState[EDL_LED]=1;
			  }
			  else{
				  bootButtons.bootMode=STANDARD;
 8004d22:	4b33      	ldr	r3, [pc, #204]	; (8004df0 <startBootButtons+0x264>)
 8004d24:	2201      	movs	r2, #1
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28
				  //errorLEDState[STANDARD_LED]=1;
			  }
			  bootButtons.btn0=0;
 8004d28:	4b31      	ldr	r3, [pc, #196]	; (8004df0 <startBootButtons+0x264>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	605a      	str	r2, [r3, #4]
			  bootButtons.btn1=0;
 8004d2e:	4b30      	ldr	r3, [pc, #192]	; (8004df0 <startBootButtons+0x264>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	609a      	str	r2, [r3, #8]
			  bootButtons.btn2=0;
 8004d34:	4b2e      	ldr	r3, [pc, #184]	; (8004df0 <startBootButtons+0x264>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	60da      	str	r2, [r3, #12]
			  bootButtons.btn3=0;
 8004d3a:	4b2d      	ldr	r3, [pc, #180]	; (8004df0 <startBootButtons+0x264>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	611a      	str	r2, [r3, #16]
			  bootButtons.btn4=0;
 8004d40:	4b2b      	ldr	r3, [pc, #172]	; (8004df0 <startBootButtons+0x264>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	615a      	str	r2, [r3, #20]
			  bootButtons.btn5=0;
 8004d46:	4b2a      	ldr	r3, [pc, #168]	; (8004df0 <startBootButtons+0x264>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	619a      	str	r2, [r3, #24]
			  bootButtons.edl_sw=0;
 8004d4c:	4b28      	ldr	r3, [pc, #160]	; (8004df0 <startBootButtons+0x264>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	61da      	str	r2, [r3, #28]
			  bootButtons.ex_sw=0;
 8004d52:	4b27      	ldr	r3, [pc, #156]	; (8004df0 <startBootButtons+0x264>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	621a      	str	r2, [r3, #32]
			  bootButtons.modeClear=1;
 8004d58:	4b25      	ldr	r3, [pc, #148]	; (8004df0 <startBootButtons+0x264>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	625a      	str	r2, [r3, #36]	; 0x24
			  bootButtons.bootModeSet=0;
 8004d5e:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <startBootButtons+0x264>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	e110      	b.n	8004f88 <startBootButtons+0x3fc>

		  }
		  else{
			  if((bootButtons.btn0) || pwrBtnReady){ //power button
 8004d66:	4b22      	ldr	r3, [pc, #136]	; (8004df0 <startBootButtons+0x264>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d102      	bne.n	8004d74 <startBootButtons+0x1e8>
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d06a      	beq.n	8004e4a <startBootButtons+0x2be>
				  BTN0_ON;
 8004d74:	2201      	movs	r2, #1
 8004d76:	2104      	movs	r1, #4
 8004d78:	481e      	ldr	r0, [pc, #120]	; (8004df4 <startBootButtons+0x268>)
 8004d7a:	f006 f805 	bl	800ad88 <HAL_GPIO_WritePin>
				  timeTurnedOn = (HAL_GetTick());
 8004d7e:	f004 fb7d 	bl	800947c <HAL_GetTick>
 8004d82:	4603      	mov	r3, r0
 8004d84:	613b      	str	r3, [r7, #16]
				  pwrBtnReady=0;
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
				  pwrOn = 1;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	60fb      	str	r3, [r7, #12]
				  osDelay(500);
 8004d8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d92:	f00b fbcf 	bl	8010534 <osDelay>
				  BTN0_OFF;
 8004d96:	2200      	movs	r2, #0
 8004d98:	2104      	movs	r1, #4
 8004d9a:	4816      	ldr	r0, [pc, #88]	; (8004df4 <startBootButtons+0x268>)
 8004d9c:	f005 fff4 	bl	800ad88 <HAL_GPIO_WritePin>
				  osDelay(500);
 8004da0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004da4:	f00b fbc6 	bl	8010534 <osDelay>
				  pwrOn=0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
				  timeTurnedOn=0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	613b      	str	r3, [r7, #16]
				  if(bootButtons.btn0){
 8004db0:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <startBootButtons+0x264>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <startBootButtons+0x234>
					  bootButtons.bootMode= STANDARD;
 8004db8:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <startBootButtons+0x264>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	629a      	str	r2, [r3, #40]	; 0x28
 8004dbe:	e026      	b.n	8004e0e <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn1){
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <startBootButtons+0x264>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <startBootButtons+0x244>
					  bootButtons.bootMode= RECOVERY;
 8004dc8:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <startBootButtons+0x264>)
 8004dca:	2204      	movs	r2, #4
 8004dcc:	629a      	str	r2, [r3, #40]	; 0x28
 8004dce:	e01e      	b.n	8004e0e <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn2){
 8004dd0:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <startBootButtons+0x264>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <startBootButtons+0x254>
					  bootButtons.bootMode= MASS_STORAGE;
 8004dd8:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <startBootButtons+0x264>)
 8004dda:	2205      	movs	r2, #5
 8004ddc:	629a      	str	r2, [r3, #40]	; 0x28
 8004dde:	e016      	b.n	8004e0e <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn3){
 8004de0:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <startBootButtons+0x264>)
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00b      	beq.n	8004e00 <startBootButtons+0x274>
					  bootButtons.bootMode= UEFI;
 8004de8:	4b01      	ldr	r3, [pc, #4]	; (8004df0 <startBootButtons+0x264>)
 8004dea:	2202      	movs	r2, #2
 8004dec:	629a      	str	r2, [r3, #40]	; 0x28
 8004dee:	e00e      	b.n	8004e0e <startBootButtons+0x282>
 8004df0:	200032ac 	.word	0x200032ac
 8004df4:	40021400 	.word	0x40021400
 8004df8:	40020400 	.word	0x40020400
 8004dfc:	20000044 	.word	0x20000044
				  }
				  else if(bootButtons.edl_sw){
 8004e00:	4b64      	ldr	r3, [pc, #400]	; (8004f94 <startBootButtons+0x408>)
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <startBootButtons+0x282>
					  bootButtons.bootMode= EDL;
 8004e08:	4b62      	ldr	r3, [pc, #392]	; (8004f94 <startBootButtons+0x408>)
 8004e0a:	2203      	movs	r2, #3
 8004e0c:	629a      	str	r2, [r3, #40]	; 0x28
				  }
				  bootButtons.btn0=0;
 8004e0e:	4b61      	ldr	r3, [pc, #388]	; (8004f94 <startBootButtons+0x408>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	605a      	str	r2, [r3, #4]
				  bootButtons.btn1=0;
 8004e14:	4b5f      	ldr	r3, [pc, #380]	; (8004f94 <startBootButtons+0x408>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	609a      	str	r2, [r3, #8]
				  bootButtons.btn2=0;
 8004e1a:	4b5e      	ldr	r3, [pc, #376]	; (8004f94 <startBootButtons+0x408>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	60da      	str	r2, [r3, #12]
				  bootButtons.btn3=0;
 8004e20:	4b5c      	ldr	r3, [pc, #368]	; (8004f94 <startBootButtons+0x408>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	611a      	str	r2, [r3, #16]
				  bootButtons.btn4=0;
 8004e26:	4b5b      	ldr	r3, [pc, #364]	; (8004f94 <startBootButtons+0x408>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	615a      	str	r2, [r3, #20]
				  bootButtons.btn5=0;
 8004e2c:	4b59      	ldr	r3, [pc, #356]	; (8004f94 <startBootButtons+0x408>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	619a      	str	r2, [r3, #24]
				  bootButtons.edl_sw=0;
 8004e32:	4b58      	ldr	r3, [pc, #352]	; (8004f94 <startBootButtons+0x408>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	61da      	str	r2, [r3, #28]
				  bootButtons.ex_sw=0;
 8004e38:	4b56      	ldr	r3, [pc, #344]	; (8004f94 <startBootButtons+0x408>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	621a      	str	r2, [r3, #32]
				  bootButtons.modeClear=1;
 8004e3e:	4b55      	ldr	r3, [pc, #340]	; (8004f94 <startBootButtons+0x408>)
 8004e40:	2201      	movs	r2, #1
 8004e42:	625a      	str	r2, [r3, #36]	; 0x24
				  bootButtons.bootModeSet=0;
 8004e44:	4b53      	ldr	r3, [pc, #332]	; (8004f94 <startBootButtons+0x408>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
				  //osDelay(300);
			  }
			  if(bootButtons.btn1){ //DPAD UP
 8004e4a:	4b52      	ldr	r3, [pc, #328]	; (8004f94 <startBootButtons+0x408>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <startBootButtons+0x2d6>
				  BTN1_ON;
 8004e52:	2201      	movs	r2, #1
 8004e54:	2108      	movs	r1, #8
 8004e56:	4850      	ldr	r0, [pc, #320]	; (8004f98 <startBootButtons+0x40c>)
 8004e58:	f005 ff96 	bl	800ad88 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	e008      	b.n	8004e74 <startBootButtons+0x2e8>
			  }
			  else if(!(bootButtons.btn1)){ //DPAD UP
 8004e62:	4b4c      	ldr	r3, [pc, #304]	; (8004f94 <startBootButtons+0x408>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d104      	bne.n	8004e74 <startBootButtons+0x2e8>
				  BTN1_OFF;
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2108      	movs	r1, #8
 8004e6e:	484a      	ldr	r0, [pc, #296]	; (8004f98 <startBootButtons+0x40c>)
 8004e70:	f005 ff8a 	bl	800ad88 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn2){ //DPAD RIGHT
 8004e74:	4b47      	ldr	r3, [pc, #284]	; (8004f94 <startBootButtons+0x408>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d007      	beq.n	8004e8c <startBootButtons+0x300>
				  BTN2_ON;
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	2110      	movs	r1, #16
 8004e80:	4845      	ldr	r0, [pc, #276]	; (8004f98 <startBootButtons+0x40c>)
 8004e82:	f005 ff81 	bl	800ad88 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004e86:	2301      	movs	r3, #1
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	e008      	b.n	8004e9e <startBootButtons+0x312>
			  }
			  else if(!(bootButtons.btn2)){ //DPAD RIGHT
 8004e8c:	4b41      	ldr	r3, [pc, #260]	; (8004f94 <startBootButtons+0x408>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d104      	bne.n	8004e9e <startBootButtons+0x312>
				  BTN2_OFF;
 8004e94:	2200      	movs	r2, #0
 8004e96:	2110      	movs	r1, #16
 8004e98:	483f      	ldr	r0, [pc, #252]	; (8004f98 <startBootButtons+0x40c>)
 8004e9a:	f005 ff75 	bl	800ad88 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn3){ //DPAD LEFT
 8004e9e:	4b3d      	ldr	r3, [pc, #244]	; (8004f94 <startBootButtons+0x408>)
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d007      	beq.n	8004eb6 <startBootButtons+0x32a>
				  BTN3_ON;
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	2120      	movs	r1, #32
 8004eaa:	483b      	ldr	r0, [pc, #236]	; (8004f98 <startBootButtons+0x40c>)
 8004eac:	f005 ff6c 	bl	800ad88 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	e008      	b.n	8004ec8 <startBootButtons+0x33c>
			  }
			  else if(!(bootButtons.btn3)){ //DPAD LEFT
 8004eb6:	4b37      	ldr	r3, [pc, #220]	; (8004f94 <startBootButtons+0x408>)
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d104      	bne.n	8004ec8 <startBootButtons+0x33c>
				  BTN3_OFF;
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2120      	movs	r1, #32
 8004ec2:	4835      	ldr	r0, [pc, #212]	; (8004f98 <startBootButtons+0x40c>)
 8004ec4:	f005 ff60 	bl	800ad88 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn4){
 8004ec8:	4b32      	ldr	r3, [pc, #200]	; (8004f94 <startBootButtons+0x408>)
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <startBootButtons+0x356>
				  BTN4_ON;
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ed6:	4830      	ldr	r0, [pc, #192]	; (8004f98 <startBootButtons+0x40c>)
 8004ed8:	f005 ff56 	bl	800ad88 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004edc:	2301      	movs	r3, #1
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	e00d      	b.n	8004efe <startBootButtons+0x372>
			  }
			  else if(!(bootButtons.btn4)){
 8004ee2:	4b2c      	ldr	r3, [pc, #176]	; (8004f94 <startBootButtons+0x408>)
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d109      	bne.n	8004efe <startBootButtons+0x372>
				  BTN4_OFF;
 8004eea:	2200      	movs	r2, #0
 8004eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ef0:	4829      	ldr	r0, [pc, #164]	; (8004f98 <startBootButtons+0x40c>)
 8004ef2:	f005 ff49 	bl	800ad88 <HAL_GPIO_WritePin>
				  osDelay(300);
 8004ef6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004efa:	f00b fb1b 	bl	8010534 <osDelay>
			  }
			  if(bootButtons.btn5){
 8004efe:	4b25      	ldr	r3, [pc, #148]	; (8004f94 <startBootButtons+0x408>)
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <startBootButtons+0x38c>
				  BTN5_ON;
 8004f06:	2201      	movs	r2, #1
 8004f08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f0c:	4822      	ldr	r0, [pc, #136]	; (8004f98 <startBootButtons+0x40c>)
 8004f0e:	f005 ff3b 	bl	800ad88 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004f12:	2301      	movs	r3, #1
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	e009      	b.n	8004f2c <startBootButtons+0x3a0>
			  }
			  else if(!(bootButtons.btn5)){
 8004f18:	4b1e      	ldr	r3, [pc, #120]	; (8004f94 <startBootButtons+0x408>)
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d105      	bne.n	8004f2c <startBootButtons+0x3a0>
				  BTN5_OFF;
 8004f20:	2200      	movs	r2, #0
 8004f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f26:	481c      	ldr	r0, [pc, #112]	; (8004f98 <startBootButtons+0x40c>)
 8004f28:	f005 ff2e 	bl	800ad88 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.edl_sw){
 8004f2c:	4b19      	ldr	r3, [pc, #100]	; (8004f94 <startBootButtons+0x408>)
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d008      	beq.n	8004f46 <startBootButtons+0x3ba>
				  EDL_SW_ON;
 8004f34:	2201      	movs	r2, #1
 8004f36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f3a:	4818      	ldr	r0, [pc, #96]	; (8004f9c <startBootButtons+0x410>)
 8004f3c:	f005 ff24 	bl	800ad88 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004f40:	2301      	movs	r3, #1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	e009      	b.n	8004f5a <startBootButtons+0x3ce>
			  }
			  else if(!(bootButtons.edl_sw)){
 8004f46:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <startBootButtons+0x408>)
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d105      	bne.n	8004f5a <startBootButtons+0x3ce>
				  EDL_SW_OFF;
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f54:	4811      	ldr	r0, [pc, #68]	; (8004f9c <startBootButtons+0x410>)
 8004f56:	f005 ff17 	bl	800ad88 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.ex_sw){
 8004f5a:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <startBootButtons+0x408>)
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d008      	beq.n	8004f74 <startBootButtons+0x3e8>
				  EX_SW_ON;
 8004f62:	2201      	movs	r2, #1
 8004f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f68:	480c      	ldr	r0, [pc, #48]	; (8004f9c <startBootButtons+0x410>)
 8004f6a:	f005 ff0d 	bl	800ad88 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	e009      	b.n	8004f88 <startBootButtons+0x3fc>
			  }
			  else if(!(bootButtons.ex_sw)){
 8004f74:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <startBootButtons+0x408>)
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d105      	bne.n	8004f88 <startBootButtons+0x3fc>
				  EX_SW_OFF;
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f82:	4806      	ldr	r0, [pc, #24]	; (8004f9c <startBootButtons+0x410>)
 8004f84:	f005 ff00 	bl	800ad88 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
		  }
	  }
    osDelay(800);
 8004f88:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004f8c:	f00b fad2 	bl	8010534 <osDelay>
	  if(bootButtons.bootModeSet){
 8004f90:	e608      	b.n	8004ba4 <startBootButtons+0x18>
 8004f92:	bf00      	nop
 8004f94:	200032ac 	.word	0x200032ac
 8004f98:	40021400 	.word	0x40021400
 8004f9c:	40020400 	.word	0x40020400

08004fa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d101      	bne.n	8004fb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004fb2:	f004 fa4f 	bl	8009454 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004fb6:	bf00      	nop
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40001000 	.word	0x40001000

08004fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004fc8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004fca:	e7fe      	b.n	8004fca <Error_Handler+0x6>

08004fcc <SMLCD_Enable>:

#define SMLCD_SPI_PORT             hspi4
// Public macros and functions

// Enable the display (using DISP pin)
__STATIC_INLINE void SMLCD_Enable(void) {
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
	SMLCD_DISP_H;
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	2102      	movs	r1, #2
 8004fd4:	4802      	ldr	r0, [pc, #8]	; (8004fe0 <SMLCD_Enable+0x14>)
 8004fd6:	f005 fed7 	bl	800ad88 <HAL_GPIO_WritePin>
}
 8004fda:	bf00      	nop
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40022400 	.word	0x40022400

08004fe4 <initializeDisplay>:

int previousMenu = 0;
float displayAdcValues[21];
int setIndicator=0;

void initializeDisplay(){
 8004fe4:	b590      	push	{r4, r7, lr}
 8004fe6:	b099      	sub	sp, #100	; 0x64
 8004fe8:	af16      	add	r7, sp, #88	; 0x58
	SMLCD_InitGPIO();
 8004fea:	f7fb fb15 	bl	8000618 <SMLCD_InitGPIO>
	SMLCD_Init(hspi4);
 8004fee:	4c10      	ldr	r4, [pc, #64]	; (8005030 <initializeDisplay+0x4c>)
 8004ff0:	4668      	mov	r0, sp
 8004ff2:	f104 0310 	add.w	r3, r4, #16
 8004ff6:	2254      	movs	r2, #84	; 0x54
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	f00e f8c3 	bl	8013184 <memcpy>
 8004ffe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005002:	f7fb fb29 	bl	8000658 <SMLCD_Init>
	SMLCD_Enable();
 8005006:	f7ff ffe1 	bl	8004fcc <SMLCD_Enable>
	SMLCD_Clear();
 800500a:	f7fb fb45 	bl	8000698 <SMLCD_Clear>
#define ORI 0
	uint8_t ori;
	if (ORI == 0){
		ori = LCD_ORIENT_NORMAL;
 800500e:	2301      	movs	r3, #1
 8005010:	71fb      	strb	r3, [r7, #7]
	}
	SMLCD_Orientation(ori);
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	4618      	mov	r0, r3
 8005016:	f7fb fc81 	bl	800091c <SMLCD_Orientation>
	LCD_Clear();
 800501a:	f7fb fca7 	bl	800096c <LCD_Clear>
	memset(displayAdcValues,0,sizeof(displayAdcValues));
 800501e:	2254      	movs	r2, #84	; 0x54
 8005020:	2100      	movs	r1, #0
 8005022:	4804      	ldr	r0, [pc, #16]	; (8005034 <initializeDisplay+0x50>)
 8005024:	f00e f8b9 	bl	801319a <memset>
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	bd90      	pop	{r4, r7, pc}
 8005030:	20028ab0 	.word	0x20028ab0
 8005034:	20030aa0 	.word	0x20030aa0

08005038 <drawMainMenu>:

void drawMainMenu(int indicator){
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	int i,j;
	previousMenu=0;
 8005040:	4b48      	ldr	r3, [pc, #288]	; (8005164 <drawMainMenu+0x12c>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
	getLatestADC();
 8005046:	f002 fdb9 	bl	8007bbc <getLatestADC>
	LCD_Clear();
 800504a:	f7fb fc8f 	bl	800096c <LCD_Clear>
	LCD_PixelMode = LCD_PSET;
 800504e:	4b46      	ldr	r3, [pc, #280]	; (8005168 <drawMainMenu+0x130>)
 8005050:	2200      	movs	r2, #0
 8005052:	701a      	strb	r2, [r3, #0]
	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8005054:	4b45      	ldr	r3, [pc, #276]	; (800516c <drawMainMenu+0x134>)
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	4b44      	ldr	r3, [pc, #272]	; (8005170 <drawMainMenu+0x138>)
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	3b01      	subs	r3, #1
 8005062:	b29b      	uxth	r3, r3
 8005064:	2100      	movs	r1, #0
 8005066:	2000      	movs	r0, #0
 8005068:	f7fb fed2 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 800506c:	4b3f      	ldr	r3, [pc, #252]	; (800516c <drawMainMenu+0x134>)
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	3b03      	subs	r3, #3
 8005072:	b29a      	uxth	r2, r3
 8005074:	4b3e      	ldr	r3, [pc, #248]	; (8005170 <drawMainMenu+0x138>)
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	3b03      	subs	r3, #3
 800507a:	b29b      	uxth	r3, r3
 800507c:	2102      	movs	r1, #2
 800507e:	2002      	movs	r0, #2
 8005080:	f7fb fec6 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8005084:	230a      	movs	r3, #10
 8005086:	60bb      	str	r3, [r7, #8]
	j  = 10;
 8005088:	230a      	movs	r3, #10
 800508a:	60fb      	str	r3, [r7, #12]
	printFaults(i,j);
 800508c:	68f9      	ldr	r1, [r7, #12]
 800508e:	68b8      	ldr	r0, [r7, #8]
 8005090:	f002 fdc2 	bl	8007c18 <printFaults>
	//i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
	//i += LCD_PutStr(i, j, "So many!", fnt7x10);
	i=150;
 8005094:	2396      	movs	r3, #150	; 0x96
 8005096:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	b298      	uxth	r0, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	b299      	uxth	r1, r3
 80050a0:	4b34      	ldr	r3, [pc, #208]	; (8005174 <drawMainMenu+0x13c>)
 80050a2:	4a35      	ldr	r2, [pc, #212]	; (8005178 <drawMainMenu+0x140>)
 80050a4:	f7fc fa42 	bl	800152c <LCD_PutStr>
 80050a8:	4603      	mov	r3, r0
 80050aa:	461a      	mov	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4413      	add	r3, r2
 80050b0:	60bb      	str	r3, [r7, #8]
	if(displayAdcValues[Adc.adc0] >3.5){
 80050b2:	4b32      	ldr	r3, [pc, #200]	; (800517c <drawMainMenu+0x144>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a32      	ldr	r2, [pc, #200]	; (8005180 <drawMainMenu+0x148>)
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	edd3 7a00 	vldr	s15, [r3]
 80050c0:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80050c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050cc:	dd68      	ble.n	80051a0 <drawMainMenu+0x168>
		//errorLED.vsysPMIFault=0;
		switch(bootButtons.bootMode){
 80050ce:	4b2d      	ldr	r3, [pc, #180]	; (8005184 <drawMainMenu+0x14c>)
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	2b05      	cmp	r3, #5
 80050d4:	d86c      	bhi.n	80051b0 <drawMainMenu+0x178>
 80050d6:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <drawMainMenu+0xa4>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	080050f5 	.word	0x080050f5
 80050e0:	08005107 	.word	0x08005107
 80050e4:	08005119 	.word	0x08005119
 80050e8:	0800512b 	.word	0x0800512b
 80050ec:	0800514f 	.word	0x0800514f
 80050f0:	0800513d 	.word	0x0800513d
		case UNINITIALIZED:
			LCD_PutStr(i, j, "OFF", fnt7x10);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	b298      	uxth	r0, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	b299      	uxth	r1, r3
 80050fc:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <drawMainMenu+0x13c>)
 80050fe:	4a22      	ldr	r2, [pc, #136]	; (8005188 <drawMainMenu+0x150>)
 8005100:	f7fc fa14 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 0;
			//errorLED.edl_boot  = 0;
			break;
 8005104:	e054      	b.n	80051b0 <drawMainMenu+0x178>
		case STANDARD:
			LCD_PutStr(i, j, "OS", fnt7x10);
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	b298      	uxth	r0, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	b299      	uxth	r1, r3
 800510e:	4b19      	ldr	r3, [pc, #100]	; (8005174 <drawMainMenu+0x13c>)
 8005110:	4a1e      	ldr	r2, [pc, #120]	; (800518c <drawMainMenu+0x154>)
 8005112:	f7fc fa0b 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 1;
			//errorLED.uefi_boot  = 0;
			//errorLED.edl_boot  = 0;
			break;
 8005116:	e04b      	b.n	80051b0 <drawMainMenu+0x178>
		case UEFI:
			LCD_PutStr(i, j, "UEFI", fnt7x10);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	b298      	uxth	r0, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	b299      	uxth	r1, r3
 8005120:	4b14      	ldr	r3, [pc, #80]	; (8005174 <drawMainMenu+0x13c>)
 8005122:	4a1b      	ldr	r2, [pc, #108]	; (8005190 <drawMainMenu+0x158>)
 8005124:	f7fc fa02 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 1;
			//errorLED.edl_boot  = 0;
			break;
 8005128:	e042      	b.n	80051b0 <drawMainMenu+0x178>
		case EDL:
			LCD_PutStr(i, j, "EDL", fnt7x10);
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	b298      	uxth	r0, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	b299      	uxth	r1, r3
 8005132:	4b10      	ldr	r3, [pc, #64]	; (8005174 <drawMainMenu+0x13c>)
 8005134:	4a17      	ldr	r2, [pc, #92]	; (8005194 <drawMainMenu+0x15c>)
 8005136:	f7fc f9f9 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 0;
			//errorLED.edl_boot  = 1;
			break;
 800513a:	e039      	b.n	80051b0 <drawMainMenu+0x178>
		case MASS_STORAGE:
			LCD_PutStr(i, j, "MASS", fnt7x10);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	b298      	uxth	r0, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	b299      	uxth	r1, r3
 8005144:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <drawMainMenu+0x13c>)
 8005146:	4a14      	ldr	r2, [pc, #80]	; (8005198 <drawMainMenu+0x160>)
 8005148:	f7fc f9f0 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 1;
			//errorLED.uefi_boot  = 1;
			//errorLED.edl_boot  = 0;
			break;
 800514c:	e030      	b.n	80051b0 <drawMainMenu+0x178>
		case RECOVERY:
			LCD_PutStr(i, j, "FFU", fnt7x10);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	b298      	uxth	r0, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	b299      	uxth	r1, r3
 8005156:	4b07      	ldr	r3, [pc, #28]	; (8005174 <drawMainMenu+0x13c>)
 8005158:	4a10      	ldr	r2, [pc, #64]	; (800519c <drawMainMenu+0x164>)
 800515a:	f7fc f9e7 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 1;
			//errorLED.edl_boot  = 1;
			break;
 800515e:	bf00      	nop
 8005160:	e026      	b.n	80051b0 <drawMainMenu+0x178>
 8005162:	bf00      	nop
 8005164:	20003378 	.word	0x20003378
 8005168:	20028aa8 	.word	0x20028aa8
 800516c:	20028aaa 	.word	0x20028aaa
 8005170:	20028aac 	.word	0x20028aac
 8005174:	08017ac4 	.word	0x08017ac4
 8005178:	080172c0 	.word	0x080172c0
 800517c:	20000128 	.word	0x20000128
 8005180:	20030aa0 	.word	0x20030aa0
 8005184:	200032ac 	.word	0x200032ac
 8005188:	080172c8 	.word	0x080172c8
 800518c:	080172cc 	.word	0x080172cc
 8005190:	080172d0 	.word	0x080172d0
 8005194:	080172d8 	.word	0x080172d8
 8005198:	080172dc 	.word	0x080172dc
 800519c:	080172e4 	.word	0x080172e4
		}
	}
	else{
		LCD_PutStr(i, j, "OFF", fnt7x10);
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	b298      	uxth	r0, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	b299      	uxth	r1, r3
 80051a8:	4b96      	ldr	r3, [pc, #600]	; (8005404 <drawMainMenu+0x3cc>)
 80051aa:	4a97      	ldr	r2, [pc, #604]	; (8005408 <drawMainMenu+0x3d0>)
 80051ac:	f7fc f9be 	bl	800152c <LCD_PutStr>
		//errorLED.standard_boot = 0;
		//errorLED.uefi_boot  = 0;
		//errorLED.edl_boot  = 0;

	}
	i  = 135;
 80051b0:	2387      	movs	r3, #135	; 0x87
 80051b2:	60bb      	str	r3, [r7, #8]
	j += 14;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	330e      	adds	r3, #14
 80051b8:	60fb      	str	r3, [r7, #12]

	// Horizontal divider
	LCD_FillRect(2, j, scr_width - 94, j + 3);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	b299      	uxth	r1, r3
 80051be:	4b93      	ldr	r3, [pc, #588]	; (800540c <drawMainMenu+0x3d4>)
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	3b5e      	subs	r3, #94	; 0x5e
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3303      	adds	r3, #3
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2002      	movs	r0, #2
 80051d0:	f7fb fe60 	bl	8000e94 <LCD_FillRect>

	// Vertical divider
	LCD_FillRect(i + 5, 2, i + 8, j);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3305      	adds	r3, #5
 80051da:	b298      	uxth	r0, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3308      	adds	r3, #8
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2102      	movs	r1, #2
 80051ea:	f7fb fe53 	bl	8000e94 <LCD_FillRect>
	LCD_FillRect(scr_width-97, 2, scr_width-94,scr_height-1);
 80051ee:	4b87      	ldr	r3, [pc, #540]	; (800540c <drawMainMenu+0x3d4>)
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	3b61      	subs	r3, #97	; 0x61
 80051f4:	b298      	uxth	r0, r3
 80051f6:	4b85      	ldr	r3, [pc, #532]	; (800540c <drawMainMenu+0x3d4>)
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	3b5e      	subs	r3, #94	; 0x5e
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	4b84      	ldr	r3, [pc, #528]	; (8005410 <drawMainMenu+0x3d8>)
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	3b01      	subs	r3, #1
 8005204:	b29b      	uxth	r3, r3
 8005206:	2102      	movs	r1, #2
 8005208:	f7fb fe44 	bl	8000e94 <LCD_FillRect>
	i  = scr_width-90;
 800520c:	4b7f      	ldr	r3, [pc, #508]	; (800540c <drawMainMenu+0x3d4>)
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	3b5a      	subs	r3, #90	; 0x5a
 8005212:	60bb      	str	r3, [r7, #8]
	j  = 3;
 8005214:	2303      	movs	r3, #3
 8005216:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	b298      	uxth	r0, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b02      	subs	r3, #2
 8005222:	b299      	uxth	r1, r3
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	b29b      	uxth	r3, r3
 8005228:	330c      	adds	r3, #12
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	b29b      	uxth	r3, r3
 8005230:	3308      	adds	r3, #8
 8005232:	b29b      	uxth	r3, r3
 8005234:	f7fb fe2e 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	3314      	adds	r3, #20
 800523c:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "ZION FLT", fnt7x10);
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	b298      	uxth	r0, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	b299      	uxth	r1, r3
 8005246:	4b6f      	ldr	r3, [pc, #444]	; (8005404 <drawMainMenu+0x3cc>)
 8005248:	4a72      	ldr	r2, [pc, #456]	; (8005414 <drawMainMenu+0x3dc>)
 800524a:	f7fc f96f 	bl	800152c <LCD_PutStr>
	j+=22;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3316      	adds	r3, #22
 8005252:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 8005254:	4b6d      	ldr	r3, [pc, #436]	; (800540c <drawMainMenu+0x3d4>)
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	3b5a      	subs	r3, #90	; 0x5a
 800525a:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	b298      	uxth	r0, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b02      	subs	r3, #2
 8005266:	b299      	uxth	r1, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	b29b      	uxth	r3, r3
 800526c:	330c      	adds	r3, #12
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	b29b      	uxth	r3, r3
 8005274:	3308      	adds	r3, #8
 8005276:	b29b      	uxth	r3, r3
 8005278:	f7fb fe0c 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	3314      	adds	r3, #20
 8005280:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "VSYS FLT", fnt7x10);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	b298      	uxth	r0, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	b299      	uxth	r1, r3
 800528a:	4b5e      	ldr	r3, [pc, #376]	; (8005404 <drawMainMenu+0x3cc>)
 800528c:	4a62      	ldr	r2, [pc, #392]	; (8005418 <drawMainMenu+0x3e0>)
 800528e:	f7fc f94d 	bl	800152c <LCD_PutStr>
	i  = scr_width-90;
 8005292:	4b5e      	ldr	r3, [pc, #376]	; (800540c <drawMainMenu+0x3d4>)
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	3b5a      	subs	r3, #90	; 0x5a
 8005298:	60bb      	str	r3, [r7, #8]
	j  += 22;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3316      	adds	r3, #22
 800529e:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	b298      	uxth	r0, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b02      	subs	r3, #2
 80052aa:	b299      	uxth	r1, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	330c      	adds	r3, #12
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3308      	adds	r3, #8
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	f7fb fdea 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	3314      	adds	r3, #20
 80052c4:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT3", fnt7x10);
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	b298      	uxth	r0, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	b299      	uxth	r1, r3
 80052ce:	4b4d      	ldr	r3, [pc, #308]	; (8005404 <drawMainMenu+0x3cc>)
 80052d0:	4a52      	ldr	r2, [pc, #328]	; (800541c <drawMainMenu+0x3e4>)
 80052d2:	f7fc f92b 	bl	800152c <LCD_PutStr>
	j+=22;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3316      	adds	r3, #22
 80052da:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 80052dc:	4b4b      	ldr	r3, [pc, #300]	; (800540c <drawMainMenu+0x3d4>)
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	3b5a      	subs	r3, #90	; 0x5a
 80052e2:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	b298      	uxth	r0, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b02      	subs	r3, #2
 80052ee:	b299      	uxth	r1, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	330c      	adds	r3, #12
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3308      	adds	r3, #8
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f7fb fdc8 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	3314      	adds	r3, #20
 8005308:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT4", fnt7x10);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	b298      	uxth	r0, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	b299      	uxth	r1, r3
 8005312:	4b3c      	ldr	r3, [pc, #240]	; (8005404 <drawMainMenu+0x3cc>)
 8005314:	4a42      	ldr	r2, [pc, #264]	; (8005420 <drawMainMenu+0x3e8>)
 8005316:	f7fc f909 	bl	800152c <LCD_PutStr>
	i  = scr_width-90;
 800531a:	4b3c      	ldr	r3, [pc, #240]	; (800540c <drawMainMenu+0x3d4>)
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	3b5a      	subs	r3, #90	; 0x5a
 8005320:	60bb      	str	r3, [r7, #8]
	j  += 22;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3316      	adds	r3, #22
 8005326:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	b298      	uxth	r0, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b02      	subs	r3, #2
 8005332:	b299      	uxth	r1, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	b29b      	uxth	r3, r3
 8005338:	330c      	adds	r3, #12
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	b29b      	uxth	r3, r3
 8005340:	3308      	adds	r3, #8
 8005342:	b29b      	uxth	r3, r3
 8005344:	f7fb fda6 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	3314      	adds	r3, #20
 800534c:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT5", fnt7x10);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	b298      	uxth	r0, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	b299      	uxth	r1, r3
 8005356:	4b2b      	ldr	r3, [pc, #172]	; (8005404 <drawMainMenu+0x3cc>)
 8005358:	4a32      	ldr	r2, [pc, #200]	; (8005424 <drawMainMenu+0x3ec>)
 800535a:	f7fc f8e7 	bl	800152c <LCD_PutStr>
	j+=22;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3316      	adds	r3, #22
 8005362:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 8005364:	4b29      	ldr	r3, [pc, #164]	; (800540c <drawMainMenu+0x3d4>)
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	3b5a      	subs	r3, #90	; 0x5a
 800536a:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	b298      	uxth	r0, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b02      	subs	r3, #2
 8005376:	b299      	uxth	r1, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	b29b      	uxth	r3, r3
 800537c:	330c      	adds	r3, #12
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	b29b      	uxth	r3, r3
 8005384:	3308      	adds	r3, #8
 8005386:	b29b      	uxth	r3, r3
 8005388:	f7fb fd84 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	3314      	adds	r3, #20
 8005390:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT6", fnt7x10);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	b298      	uxth	r0, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	b299      	uxth	r1, r3
 800539a:	4b1a      	ldr	r3, [pc, #104]	; (8005404 <drawMainMenu+0x3cc>)
 800539c:	4a22      	ldr	r2, [pc, #136]	; (8005428 <drawMainMenu+0x3f0>)
 800539e:	f7fc f8c5 	bl	800152c <LCD_PutStr>
	i  = scr_width-90;
 80053a2:	4b1a      	ldr	r3, [pc, #104]	; (800540c <drawMainMenu+0x3d4>)
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	3b5a      	subs	r3, #90	; 0x5a
 80053a8:	60bb      	str	r3, [r7, #8]
	j  +=22;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3316      	adds	r3, #22
 80053ae:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	b298      	uxth	r0, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b02      	subs	r3, #2
 80053ba:	b299      	uxth	r1, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	330c      	adds	r3, #12
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3308      	adds	r3, #8
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f7fb fd62 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	3314      	adds	r3, #20
 80053d4:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT7", fnt7x10);
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	b298      	uxth	r0, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	b299      	uxth	r1, r3
 80053de:	4b09      	ldr	r3, [pc, #36]	; (8005404 <drawMainMenu+0x3cc>)
 80053e0:	4a12      	ldr	r2, [pc, #72]	; (800542c <drawMainMenu+0x3f4>)
 80053e2:	f7fc f8a3 	bl	800152c <LCD_PutStr>
	j+=22;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3316      	adds	r3, #22
 80053ea:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 80053ec:	4b07      	ldr	r3, [pc, #28]	; (800540c <drawMainMenu+0x3d4>)
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	3b5a      	subs	r3, #90	; 0x5a
 80053f2:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	b298      	uxth	r0, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	3b02      	subs	r3, #2
 80053fe:	b299      	uxth	r1, r3
 8005400:	e016      	b.n	8005430 <drawMainMenu+0x3f8>
 8005402:	bf00      	nop
 8005404:	08017ac4 	.word	0x08017ac4
 8005408:	080172c8 	.word	0x080172c8
 800540c:	20028aaa 	.word	0x20028aaa
 8005410:	20028aac 	.word	0x20028aac
 8005414:	080172e8 	.word	0x080172e8
 8005418:	080172f4 	.word	0x080172f4
 800541c:	08017300 	.word	0x08017300
 8005420:	08017308 	.word	0x08017308
 8005424:	08017310 	.word	0x08017310
 8005428:	08017318 	.word	0x08017318
 800542c:	08017320 	.word	0x08017320
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	b29b      	uxth	r3, r3
 8005434:	330c      	adds	r3, #12
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	b29b      	uxth	r3, r3
 800543c:	3308      	adds	r3, #8
 800543e:	b29b      	uxth	r3, r3
 8005440:	f7fb fd28 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	3314      	adds	r3, #20
 8005448:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT8", fnt7x10);
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	b298      	uxth	r0, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	b299      	uxth	r1, r3
 8005452:	4b6f      	ldr	r3, [pc, #444]	; (8005610 <drawMainMenu+0x5d8>)
 8005454:	4a6f      	ldr	r2, [pc, #444]	; (8005614 <drawMainMenu+0x5dc>)
 8005456:	f7fc f869 	bl	800152c <LCD_PutStr>
	i  = scr_width-90;
 800545a:	4b6f      	ldr	r3, [pc, #444]	; (8005618 <drawMainMenu+0x5e0>)
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	3b5a      	subs	r3, #90	; 0x5a
 8005460:	60bb      	str	r3, [r7, #8]
	j  +=22;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	3316      	adds	r3, #22
 8005466:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	b298      	uxth	r0, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b02      	subs	r3, #2
 8005472:	b299      	uxth	r1, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	b29b      	uxth	r3, r3
 8005478:	330c      	adds	r3, #12
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	b29b      	uxth	r3, r3
 8005480:	3308      	adds	r3, #8
 8005482:	b29b      	uxth	r3, r3
 8005484:	f7fb fd06 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	3314      	adds	r3, #20
 800548c:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT9", fnt7x10);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	b298      	uxth	r0, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	b299      	uxth	r1, r3
 8005496:	4b5e      	ldr	r3, [pc, #376]	; (8005610 <drawMainMenu+0x5d8>)
 8005498:	4a60      	ldr	r2, [pc, #384]	; (800561c <drawMainMenu+0x5e4>)
 800549a:	f7fc f847 	bl	800152c <LCD_PutStr>
	j = scr_height-20;
 800549e:	4b60      	ldr	r3, [pc, #384]	; (8005620 <drawMainMenu+0x5e8>)
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	3b14      	subs	r3, #20
 80054a4:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 80054a6:	4b5c      	ldr	r3, [pc, #368]	; (8005618 <drawMainMenu+0x5e0>)
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	3b5a      	subs	r3, #90	; 0x5a
 80054ac:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	b298      	uxth	r0, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3b02      	subs	r3, #2
 80054b8:	b299      	uxth	r1, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	330c      	adds	r3, #12
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3308      	adds	r3, #8
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f7fb fce3 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	3314      	adds	r3, #20
 80054d2:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "MODE", fnt7x10);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	b298      	uxth	r0, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	b299      	uxth	r1, r3
 80054dc:	4b4c      	ldr	r3, [pc, #304]	; (8005610 <drawMainMenu+0x5d8>)
 80054de:	4a51      	ldr	r2, [pc, #324]	; (8005624 <drawMainMenu+0x5ec>)
 80054e0:	f7fc f824 	bl	800152c <LCD_PutStr>

	i=100;
 80054e4:	2364      	movs	r3, #100	; 0x64
 80054e6:	60bb      	str	r3, [r7, #8]
	j=75;
 80054e8:	234b      	movs	r3, #75	; 0x4b
 80054ea:	60fb      	str	r3, [r7, #12]
	i+=20;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	3314      	adds	r3, #20
 80054f0:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "BOOT MODE", fnt7x10);
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	b298      	uxth	r0, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	b299      	uxth	r1, r3
 80054fa:	4b45      	ldr	r3, [pc, #276]	; (8005610 <drawMainMenu+0x5d8>)
 80054fc:	4a4a      	ldr	r2, [pc, #296]	; (8005628 <drawMainMenu+0x5f0>)
 80054fe:	f7fc f815 	bl	800152c <LCD_PutStr>
	j+=15;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	330f      	adds	r3, #15
 8005506:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 71, j + 2);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b03      	subs	r3, #3
 800550e:	b298      	uxth	r0, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b02      	subs	r3, #2
 8005516:	b299      	uxth	r1, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	b29b      	uxth	r3, r3
 800551c:	3347      	adds	r3, #71	; 0x47
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	b29b      	uxth	r3, r3
 8005524:	3302      	adds	r3, #2
 8005526:	b29b      	uxth	r3, r3
 8005528:	f7fb fcb4 	bl	8000e94 <LCD_FillRect>

	i=100;
 800552c:	2364      	movs	r3, #100	; 0x64
 800552e:	60bb      	str	r3, [r7, #8]
	j=110;
 8005530:	236e      	movs	r3, #110	; 0x6e
 8005532:	60fb      	str	r3, [r7, #12]
	i+=20;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	3314      	adds	r3, #20
 8005538:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "STATUS", fnt7x10);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	b298      	uxth	r0, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	b299      	uxth	r1, r3
 8005542:	4b33      	ldr	r3, [pc, #204]	; (8005610 <drawMainMenu+0x5d8>)
 8005544:	4a39      	ldr	r2, [pc, #228]	; (800562c <drawMainMenu+0x5f4>)
 8005546:	f7fb fff1 	bl	800152c <LCD_PutStr>
	j+=15;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	330f      	adds	r3, #15
 800554e:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 50, j + 2);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b03      	subs	r3, #3
 8005556:	b298      	uxth	r0, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b02      	subs	r3, #2
 800555e:	b299      	uxth	r1, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	b29b      	uxth	r3, r3
 8005564:	3332      	adds	r3, #50	; 0x32
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	b29b      	uxth	r3, r3
 800556c:	3302      	adds	r3, #2
 800556e:	b29b      	uxth	r3, r3
 8005570:	f7fb fc90 	bl	8000e94 <LCD_FillRect>

	i=100;
 8005574:	2364      	movs	r3, #100	; 0x64
 8005576:	60bb      	str	r3, [r7, #8]
	j=145;
 8005578:	2391      	movs	r3, #145	; 0x91
 800557a:	60fb      	str	r3, [r7, #12]
	i+=20;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	3314      	adds	r3, #20
 8005580:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "SYSTEM INFO", fnt7x10);
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	b298      	uxth	r0, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	b299      	uxth	r1, r3
 800558a:	4b21      	ldr	r3, [pc, #132]	; (8005610 <drawMainMenu+0x5d8>)
 800558c:	4a28      	ldr	r2, [pc, #160]	; (8005630 <drawMainMenu+0x5f8>)
 800558e:	f7fb ffcd 	bl	800152c <LCD_PutStr>
	j+=15;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	330f      	adds	r3, #15
 8005596:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 85, j + 2);
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	b29b      	uxth	r3, r3
 800559c:	3b03      	subs	r3, #3
 800559e:	b298      	uxth	r0, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	3b02      	subs	r3, #2
 80055a6:	b299      	uxth	r1, r3
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	3355      	adds	r3, #85	; 0x55
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3302      	adds	r3, #2
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f7fb fc6c 	bl	8000e94 <LCD_FillRect>
	i=100;
 80055bc:	2364      	movs	r3, #100	; 0x64
 80055be:	60bb      	str	r3, [r7, #8]
	switch(indicator){
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d006      	beq.n	80055d4 <drawMainMenu+0x59c>
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d007      	beq.n	80055da <drawMainMenu+0x5a2>
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d108      	bne.n	80055e0 <drawMainMenu+0x5a8>
	case FIRST:
	{
		j=75;
 80055ce:	234b      	movs	r3, #75	; 0x4b
 80055d0:	60fb      	str	r3, [r7, #12]
		break;
 80055d2:	e008      	b.n	80055e6 <drawMainMenu+0x5ae>
	}
	case SECOND:
	{
		j=110;
 80055d4:	236e      	movs	r3, #110	; 0x6e
 80055d6:	60fb      	str	r3, [r7, #12]
		break;
 80055d8:	e005      	b.n	80055e6 <drawMainMenu+0x5ae>
	}
	case THIRD:
	{
		j=145;
 80055da:	2391      	movs	r3, #145	; 0x91
 80055dc:	60fb      	str	r3, [r7, #12]
		break;
 80055de:	e002      	b.n	80055e6 <drawMainMenu+0x5ae>
	}
	default:
	{
		j=75;
 80055e0:	234b      	movs	r3, #75	; 0x4b
 80055e2:	60fb      	str	r3, [r7, #12]
		break;
 80055e4:	bf00      	nop
	}
	}
	LCD_FillRect(i, j, i + 12, j + 10);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	b298      	uxth	r0, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	b299      	uxth	r1, r3
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	330c      	adds	r3, #12
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	330a      	adds	r3, #10
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	f7fb fc49 	bl	8000e94 <LCD_FillRect>
	SMLCD_Flush();
 8005602:	f7fb f869 	bl	80006d8 <SMLCD_Flush>
}
 8005606:	bf00      	nop
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	08017ac4 	.word	0x08017ac4
 8005614:	08017328 	.word	0x08017328
 8005618:	20028aaa 	.word	0x20028aaa
 800561c:	08017330 	.word	0x08017330
 8005620:	20028aac 	.word	0x20028aac
 8005624:	08017338 	.word	0x08017338
 8005628:	08017340 	.word	0x08017340
 800562c:	0801734c 	.word	0x0801734c
 8005630:	08017354 	.word	0x08017354

08005634 <drawStatusMenu>:

void drawStatusMenu(int indicator){
 8005634:	b580      	push	{r7, lr}
 8005636:	b090      	sub	sp, #64	; 0x40
 8005638:	af02      	add	r7, sp, #8
 800563a:	6078      	str	r0, [r7, #4]
	int i,j;
	//float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 800563c:	2314      	movs	r3, #20
 800563e:	637b      	str	r3, [r7, #52]	; 0x34
	int inputGpioAlignment=245;
 8005640:	23f5      	movs	r3, #245	; 0xf5
 8005642:	633b      	str	r3, [r7, #48]	; 0x30
	int daughterCardAlignment=240;
 8005644:	23f0      	movs	r3, #240	; 0xf0
 8005646:	62fb      	str	r3, [r7, #44]	; 0x2c
	int i2cCheck;
	int arrowUp = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	62bb      	str	r3, [r7, #40]	; 0x28
	int arrowDown=1;
 800564c:	2301      	movs	r3, #1
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
	int arrowSize=3;
 8005650:	2303      	movs	r3, #3
 8005652:	623b      	str	r3, [r7, #32]
	previousMenu=0;
 8005654:	4b95      	ldr	r3, [pc, #596]	; (80058ac <drawStatusMenu+0x278>)
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 800565a:	f7fb f987 	bl	800096c <LCD_Clear>
	getLatestADC();
 800565e:	f002 faad 	bl	8007bbc <getLatestADC>
	drawMenuHeader();
 8005662:	f002 f9ef 	bl	8007a44 <drawMenuHeader>
	i  = 135;
 8005666:	2387      	movs	r3, #135	; 0x87
 8005668:	61fb      	str	r3, [r7, #28]
	j = 24;
 800566a:	2318      	movs	r3, #24
 800566c:	61bb      	str	r3, [r7, #24]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	b299      	uxth	r1, r3
 8005672:	4b8f      	ldr	r3, [pc, #572]	; (80058b0 <drawStatusMenu+0x27c>)
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	3b02      	subs	r3, #2
 8005678:	b29a      	uxth	r2, r3
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	b29b      	uxth	r3, r3
 800567e:	3303      	adds	r3, #3
 8005680:	b29b      	uxth	r3, r3
 8005682:	2002      	movs	r0, #2
 8005684:	f7fb fc06 	bl	8000e94 <LCD_FillRect>
//	i  = 135;
//	j += 12;
//
//	//horizontal divider
//	LCD_FillRect(2, j, scr_width - 2, j + 3);
	switch(indicator){
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b02      	cmp	r3, #2
 800568c:	f000 829a 	beq.w	8005bc4 <drawStatusMenu+0x590>
 8005690:	2b03      	cmp	r3, #3
 8005692:	f001 8037 	beq.w	8006704 <drawStatusMenu+0x10d0>
 8005696:	2b01      	cmp	r3, #1
 8005698:	f041 813f 	bne.w	800691a <drawStatusMenu+0x12e6>
	case 1:{
		i=35;
 800569c:	2323      	movs	r3, #35	; 0x23
 800569e:	61fb      	str	r3, [r7, #28]
		j=90;
 80056a0:	235a      	movs	r3, #90	; 0x5a
 80056a2:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3b02      	subs	r3, #2
 80056aa:	b299      	uxth	r1, r3
 80056ac:	4b80      	ldr	r3, [pc, #512]	; (80058b0 <drawStatusMenu+0x27c>)
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	3b02      	subs	r3, #2
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3302      	adds	r3, #2
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2002      	movs	r0, #2
 80056be:	f7fb fbe9 	bl	8000e94 <LCD_FillRect>
		j=75;
 80056c2:	234b      	movs	r3, #75	; 0x4b
 80056c4:	61bb      	str	r3, [r7, #24]
		i=62;
 80056c6:	233e      	movs	r3, #62	; 0x3e
 80056c8:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	b298      	uxth	r0, r3
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	b299      	uxth	r1, r3
 80056d2:	4b78      	ldr	r3, [pc, #480]	; (80058b4 <drawStatusMenu+0x280>)
 80056d4:	4a78      	ldr	r2, [pc, #480]	; (80058b8 <drawStatusMenu+0x284>)
 80056d6:	f7fb ff29 	bl	800152c <LCD_PutStr>
 80056da:	4603      	mov	r3, r0
 80056dc:	461a      	mov	r2, r3
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	4413      	add	r3, r2
 80056e2:	61fb      	str	r3, [r7, #28]
		i+=145;
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	3391      	adds	r3, #145	; 0x91
 80056e8:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "DAUGHTER CARDS:", fnt7x10);
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	b298      	uxth	r0, r3
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	b299      	uxth	r1, r3
 80056f2:	4b70      	ldr	r3, [pc, #448]	; (80058b4 <drawStatusMenu+0x280>)
 80056f4:	4a71      	ldr	r2, [pc, #452]	; (80058bc <drawStatusMenu+0x288>)
 80056f6:	f7fb ff19 	bl	800152c <LCD_PutStr>

		i=10;
 80056fa:	230a      	movs	r3, #10
 80056fc:	61fb      	str	r3, [r7, #28]
		j=95;
 80056fe:	235f      	movs	r3, #95	; 0x5f
 8005700:	61bb      	str	r3, [r7, #24]

		i+= LCD_PutStr(i, j, "ZION FLT: ", fnt7x10);
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	b298      	uxth	r0, r3
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	b299      	uxth	r1, r3
 800570a:	4b6a      	ldr	r3, [pc, #424]	; (80058b4 <drawStatusMenu+0x280>)
 800570c:	4a6c      	ldr	r2, [pc, #432]	; (80058c0 <drawStatusMenu+0x28c>)
 800570e:	f7fb ff0d 	bl	800152c <LCD_PutStr>
 8005712:	4603      	mov	r3, r0
 8005714:	461a      	mov	r2, r3
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4413      	add	r3, r2
 800571a:	61fb      	str	r3, [r7, #28]
		if(errorLED.zionFault){
 800571c:	4b69      	ldr	r3, [pc, #420]	; (80058c4 <drawStatusMenu+0x290>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d008      	beq.n	8005736 <drawStatusMenu+0x102>
			LCD_PutStr(i, j, "SOC ZION ERROR", fnt7x10);
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	b298      	uxth	r0, r3
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	b299      	uxth	r1, r3
 800572c:	4b61      	ldr	r3, [pc, #388]	; (80058b4 <drawStatusMenu+0x280>)
 800572e:	4a66      	ldr	r2, [pc, #408]	; (80058c8 <drawStatusMenu+0x294>)
 8005730:	f7fb fefc 	bl	800152c <LCD_PutStr>
 8005734:	e007      	b.n	8005746 <drawStatusMenu+0x112>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	b298      	uxth	r0, r3
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	b299      	uxth	r1, r3
 800573e:	4b5d      	ldr	r3, [pc, #372]	; (80058b4 <drawStatusMenu+0x280>)
 8005740:	4a62      	ldr	r2, [pc, #392]	; (80058cc <drawStatusMenu+0x298>)
 8005742:	f7fb fef3 	bl	800152c <LCD_PutStr>
		}
		i=daughterCardAlignment;
 8005746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005748:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "SOC: ", fnt7x10);
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	b298      	uxth	r0, r3
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	b299      	uxth	r1, r3
 8005752:	4b58      	ldr	r3, [pc, #352]	; (80058b4 <drawStatusMenu+0x280>)
 8005754:	4a5e      	ldr	r2, [pc, #376]	; (80058d0 <drawStatusMenu+0x29c>)
 8005756:	f7fb fee9 	bl	800152c <LCD_PutStr>
 800575a:	4603      	mov	r3, r0
 800575c:	461a      	mov	r2, r3
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	4413      	add	r3, r2
 8005762:	61fb      	str	r3, [r7, #28]
		if(ZION.SOC_EEPROM_Detected){
 8005764:	4b5b      	ldr	r3, [pc, #364]	; (80058d4 <drawStatusMenu+0x2a0>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d008      	beq.n	800577e <drawStatusMenu+0x14a>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	b298      	uxth	r0, r3
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	b299      	uxth	r1, r3
 8005774:	4b4f      	ldr	r3, [pc, #316]	; (80058b4 <drawStatusMenu+0x280>)
 8005776:	4a58      	ldr	r2, [pc, #352]	; (80058d8 <drawStatusMenu+0x2a4>)
 8005778:	f7fb fed8 	bl	800152c <LCD_PutStr>
 800577c:	e007      	b.n	800578e <drawStatusMenu+0x15a>
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	b298      	uxth	r0, r3
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	b299      	uxth	r1, r3
 8005786:	4b4b      	ldr	r3, [pc, #300]	; (80058b4 <drawStatusMenu+0x280>)
 8005788:	4a54      	ldr	r2, [pc, #336]	; (80058dc <drawStatusMenu+0x2a8>)
 800578a:	f7fb fecf 	bl	800152c <LCD_PutStr>
		}
		i=10;
 800578e:	230a      	movs	r3, #10
 8005790:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	330f      	adds	r3, #15
 8005796:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "VSYS_PMI: ", fnt7x10);
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	b298      	uxth	r0, r3
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	b299      	uxth	r1, r3
 80057a0:	4b44      	ldr	r3, [pc, #272]	; (80058b4 <drawStatusMenu+0x280>)
 80057a2:	4a4f      	ldr	r2, [pc, #316]	; (80058e0 <drawStatusMenu+0x2ac>)
 80057a4:	f7fb fec2 	bl	800152c <LCD_PutStr>
 80057a8:	4603      	mov	r3, r0
 80057aa:	461a      	mov	r2, r3
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	61fb      	str	r3, [r7, #28]
		if(errorLED.vsysPMIFault){
 80057b2:	4b44      	ldr	r3, [pc, #272]	; (80058c4 <drawStatusMenu+0x290>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d008      	beq.n	80057cc <drawStatusMenu+0x198>
			LCD_PutStr(i, j, "VSYS PMI LOW", fnt7x10);
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	b298      	uxth	r0, r3
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	b299      	uxth	r1, r3
 80057c2:	4b3c      	ldr	r3, [pc, #240]	; (80058b4 <drawStatusMenu+0x280>)
 80057c4:	4a47      	ldr	r2, [pc, #284]	; (80058e4 <drawStatusMenu+0x2b0>)
 80057c6:	f7fb feb1 	bl	800152c <LCD_PutStr>
 80057ca:	e007      	b.n	80057dc <drawStatusMenu+0x1a8>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	b298      	uxth	r0, r3
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	b299      	uxth	r1, r3
 80057d4:	4b37      	ldr	r3, [pc, #220]	; (80058b4 <drawStatusMenu+0x280>)
 80057d6:	4a3d      	ldr	r2, [pc, #244]	; (80058cc <drawStatusMenu+0x298>)
 80057d8:	f7fb fea8 	bl	800152c <LCD_PutStr>
		}
		i=daughterCardAlignment;
 80057dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057de:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	b298      	uxth	r0, r3
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	b299      	uxth	r1, r3
 80057e8:	4b32      	ldr	r3, [pc, #200]	; (80058b4 <drawStatusMenu+0x280>)
 80057ea:	4a3f      	ldr	r2, [pc, #252]	; (80058e8 <drawStatusMenu+0x2b4>)
 80057ec:	f7fb fe9e 	bl	800152c <LCD_PutStr>
 80057f0:	4603      	mov	r3, r0
 80057f2:	461a      	mov	r2, r3
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	4413      	add	r3, r2
 80057f8:	61fb      	str	r3, [r7, #28]
		if(ZION.ASIC_EEPROM_Detected){
 80057fa:	4b36      	ldr	r3, [pc, #216]	; (80058d4 <drawStatusMenu+0x2a0>)
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d008      	beq.n	8005814 <drawStatusMenu+0x1e0>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	b298      	uxth	r0, r3
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	b299      	uxth	r1, r3
 800580a:	4b2a      	ldr	r3, [pc, #168]	; (80058b4 <drawStatusMenu+0x280>)
 800580c:	4a32      	ldr	r2, [pc, #200]	; (80058d8 <drawStatusMenu+0x2a4>)
 800580e:	f7fb fe8d 	bl	800152c <LCD_PutStr>
 8005812:	e007      	b.n	8005824 <drawStatusMenu+0x1f0>
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	b298      	uxth	r0, r3
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	b299      	uxth	r1, r3
 800581c:	4b25      	ldr	r3, [pc, #148]	; (80058b4 <drawStatusMenu+0x280>)
 800581e:	4a2f      	ldr	r2, [pc, #188]	; (80058dc <drawStatusMenu+0x2a8>)
 8005820:	f7fb fe84 	bl	800152c <LCD_PutStr>
		}
		i=10;
 8005824:	230a      	movs	r3, #10
 8005826:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	330f      	adds	r3, #15
 800582c:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault3: ", fnt7x10);
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	b298      	uxth	r0, r3
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	b299      	uxth	r1, r3
 8005836:	4b1f      	ldr	r3, [pc, #124]	; (80058b4 <drawStatusMenu+0x280>)
 8005838:	4a2c      	ldr	r2, [pc, #176]	; (80058ec <drawStatusMenu+0x2b8>)
 800583a:	f7fb fe77 	bl	800152c <LCD_PutStr>
 800583e:	4603      	mov	r3, r0
 8005840:	461a      	mov	r2, r3
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	4413      	add	r3, r2
 8005846:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault3){
 8005848:	4b1e      	ldr	r3, [pc, #120]	; (80058c4 <drawStatusMenu+0x290>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d008      	beq.n	8005862 <drawStatusMenu+0x22e>
			LCD_PutStr(i, j, "FAULT 3 Triggered", fnt7x10);
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	b298      	uxth	r0, r3
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	b299      	uxth	r1, r3
 8005858:	4b16      	ldr	r3, [pc, #88]	; (80058b4 <drawStatusMenu+0x280>)
 800585a:	4a25      	ldr	r2, [pc, #148]	; (80058f0 <drawStatusMenu+0x2bc>)
 800585c:	f7fb fe66 	bl	800152c <LCD_PutStr>
 8005860:	e007      	b.n	8005872 <drawStatusMenu+0x23e>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	b298      	uxth	r0, r3
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	b299      	uxth	r1, r3
 800586a:	4b12      	ldr	r3, [pc, #72]	; (80058b4 <drawStatusMenu+0x280>)
 800586c:	4a17      	ldr	r2, [pc, #92]	; (80058cc <drawStatusMenu+0x298>)
 800586e:	f7fb fe5d 	bl	800152c <LCD_PutStr>
		}
		i=daughterCardAlignment;
 8005872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005874:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "Display: ", fnt7x10);
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	b298      	uxth	r0, r3
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	b299      	uxth	r1, r3
 800587e:	4b0d      	ldr	r3, [pc, #52]	; (80058b4 <drawStatusMenu+0x280>)
 8005880:	4a1c      	ldr	r2, [pc, #112]	; (80058f4 <drawStatusMenu+0x2c0>)
 8005882:	f7fb fe53 	bl	800152c <LCD_PutStr>
 8005886:	4603      	mov	r3, r0
 8005888:	461a      	mov	r2, r3
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	4413      	add	r3, r2
 800588e:	61fb      	str	r3, [r7, #28]
		if(ZION.DISPLAY_EEPROM_Detected){
 8005890:	4b10      	ldr	r3, [pc, #64]	; (80058d4 <drawStatusMenu+0x2a0>)
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d02f      	beq.n	80058f8 <drawStatusMenu+0x2c4>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	b298      	uxth	r0, r3
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	b299      	uxth	r1, r3
 80058a0:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <drawStatusMenu+0x280>)
 80058a2:	4a0d      	ldr	r2, [pc, #52]	; (80058d8 <drawStatusMenu+0x2a4>)
 80058a4:	f7fb fe42 	bl	800152c <LCD_PutStr>
 80058a8:	e02e      	b.n	8005908 <drawStatusMenu+0x2d4>
 80058aa:	bf00      	nop
 80058ac:	20003378 	.word	0x20003378
 80058b0:	20028aaa 	.word	0x20028aaa
 80058b4:	08017ac4 	.word	0x08017ac4
 80058b8:	08017360 	.word	0x08017360
 80058bc:	08017368 	.word	0x08017368
 80058c0:	08017378 	.word	0x08017378
 80058c4:	200032d8 	.word	0x200032d8
 80058c8:	08017384 	.word	0x08017384
 80058cc:	08017394 	.word	0x08017394
 80058d0:	0801739c 	.word	0x0801739c
 80058d4:	20003274 	.word	0x20003274
 80058d8:	080173a4 	.word	0x080173a4
 80058dc:	080173b0 	.word	0x080173b0
 80058e0:	080173bc 	.word	0x080173bc
 80058e4:	080173c8 	.word	0x080173c8
 80058e8:	080173d8 	.word	0x080173d8
 80058ec:	080173e0 	.word	0x080173e0
 80058f0:	080173ec 	.word	0x080173ec
 80058f4:	08017400 	.word	0x08017400
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	b298      	uxth	r0, r3
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	b299      	uxth	r1, r3
 8005900:	4b72      	ldr	r3, [pc, #456]	; (8005acc <drawStatusMenu+0x498>)
 8005902:	4a73      	ldr	r2, [pc, #460]	; (8005ad0 <drawStatusMenu+0x49c>)
 8005904:	f7fb fe12 	bl	800152c <LCD_PutStr>
		}

		i=10;
 8005908:	230a      	movs	r3, #10
 800590a:	61fb      	str	r3, [r7, #28]
		j+=15;
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	330f      	adds	r3, #15
 8005910:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault4: ", fnt7x10);
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	b298      	uxth	r0, r3
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	b299      	uxth	r1, r3
 800591a:	4b6c      	ldr	r3, [pc, #432]	; (8005acc <drawStatusMenu+0x498>)
 800591c:	4a6d      	ldr	r2, [pc, #436]	; (8005ad4 <drawStatusMenu+0x4a0>)
 800591e:	f7fb fe05 	bl	800152c <LCD_PutStr>
 8005922:	4603      	mov	r3, r0
 8005924:	461a      	mov	r2, r3
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	4413      	add	r3, r2
 800592a:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault4){
 800592c:	4b6a      	ldr	r3, [pc, #424]	; (8005ad8 <drawStatusMenu+0x4a4>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d008      	beq.n	8005946 <drawStatusMenu+0x312>
			LCD_PutStr(i, j, "FAULT 4 Triggered", fnt7x10);
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	b298      	uxth	r0, r3
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	b299      	uxth	r1, r3
 800593c:	4b63      	ldr	r3, [pc, #396]	; (8005acc <drawStatusMenu+0x498>)
 800593e:	4a67      	ldr	r2, [pc, #412]	; (8005adc <drawStatusMenu+0x4a8>)
 8005940:	f7fb fdf4 	bl	800152c <LCD_PutStr>
 8005944:	e007      	b.n	8005956 <drawStatusMenu+0x322>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	b298      	uxth	r0, r3
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	b299      	uxth	r1, r3
 800594e:	4b5f      	ldr	r3, [pc, #380]	; (8005acc <drawStatusMenu+0x498>)
 8005950:	4a63      	ldr	r2, [pc, #396]	; (8005ae0 <drawStatusMenu+0x4ac>)
 8005952:	f7fb fdeb 	bl	800152c <LCD_PutStr>
		}

		i=10;
 8005956:	230a      	movs	r3, #10
 8005958:	61fb      	str	r3, [r7, #28]
		j+=15;
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	330f      	adds	r3, #15
 800595e:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault5: ", fnt7x10);
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	b298      	uxth	r0, r3
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	b299      	uxth	r1, r3
 8005968:	4b58      	ldr	r3, [pc, #352]	; (8005acc <drawStatusMenu+0x498>)
 800596a:	4a5e      	ldr	r2, [pc, #376]	; (8005ae4 <drawStatusMenu+0x4b0>)
 800596c:	f7fb fdde 	bl	800152c <LCD_PutStr>
 8005970:	4603      	mov	r3, r0
 8005972:	461a      	mov	r2, r3
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	4413      	add	r3, r2
 8005978:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault5){
 800597a:	4b57      	ldr	r3, [pc, #348]	; (8005ad8 <drawStatusMenu+0x4a4>)
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d008      	beq.n	8005994 <drawStatusMenu+0x360>
			LCD_PutStr(i, j, "FAULT 5 Triggered", fnt7x10);
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	b298      	uxth	r0, r3
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	b299      	uxth	r1, r3
 800598a:	4b50      	ldr	r3, [pc, #320]	; (8005acc <drawStatusMenu+0x498>)
 800598c:	4a56      	ldr	r2, [pc, #344]	; (8005ae8 <drawStatusMenu+0x4b4>)
 800598e:	f7fb fdcd 	bl	800152c <LCD_PutStr>
 8005992:	e007      	b.n	80059a4 <drawStatusMenu+0x370>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	b298      	uxth	r0, r3
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	b299      	uxth	r1, r3
 800599c:	4b4b      	ldr	r3, [pc, #300]	; (8005acc <drawStatusMenu+0x498>)
 800599e:	4a50      	ldr	r2, [pc, #320]	; (8005ae0 <drawStatusMenu+0x4ac>)
 80059a0:	f7fb fdc4 	bl	800152c <LCD_PutStr>
		}

		i=10;
 80059a4:	230a      	movs	r3, #10
 80059a6:	61fb      	str	r3, [r7, #28]
		j+=15;
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	330f      	adds	r3, #15
 80059ac:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault6: ", fnt7x10);
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	b298      	uxth	r0, r3
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	b299      	uxth	r1, r3
 80059b6:	4b45      	ldr	r3, [pc, #276]	; (8005acc <drawStatusMenu+0x498>)
 80059b8:	4a4c      	ldr	r2, [pc, #304]	; (8005aec <drawStatusMenu+0x4b8>)
 80059ba:	f7fb fdb7 	bl	800152c <LCD_PutStr>
 80059be:	4603      	mov	r3, r0
 80059c0:	461a      	mov	r2, r3
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	4413      	add	r3, r2
 80059c6:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault6){
 80059c8:	4b43      	ldr	r3, [pc, #268]	; (8005ad8 <drawStatusMenu+0x4a4>)
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <drawStatusMenu+0x3ae>
			LCD_PutStr(i, j, "FAULT 6 Triggered", fnt7x10);
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	b298      	uxth	r0, r3
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	b299      	uxth	r1, r3
 80059d8:	4b3c      	ldr	r3, [pc, #240]	; (8005acc <drawStatusMenu+0x498>)
 80059da:	4a45      	ldr	r2, [pc, #276]	; (8005af0 <drawStatusMenu+0x4bc>)
 80059dc:	f7fb fda6 	bl	800152c <LCD_PutStr>
 80059e0:	e007      	b.n	80059f2 <drawStatusMenu+0x3be>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	b298      	uxth	r0, r3
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	b299      	uxth	r1, r3
 80059ea:	4b38      	ldr	r3, [pc, #224]	; (8005acc <drawStatusMenu+0x498>)
 80059ec:	4a3c      	ldr	r2, [pc, #240]	; (8005ae0 <drawStatusMenu+0x4ac>)
 80059ee:	f7fb fd9d 	bl	800152c <LCD_PutStr>
		}

		i=10;
 80059f2:	230a      	movs	r3, #10
 80059f4:	61fb      	str	r3, [r7, #28]
		j+=15;
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	330f      	adds	r3, #15
 80059fa:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault7: ", fnt7x10);
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	b298      	uxth	r0, r3
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	b299      	uxth	r1, r3
 8005a04:	4b31      	ldr	r3, [pc, #196]	; (8005acc <drawStatusMenu+0x498>)
 8005a06:	4a3b      	ldr	r2, [pc, #236]	; (8005af4 <drawStatusMenu+0x4c0>)
 8005a08:	f7fb fd90 	bl	800152c <LCD_PutStr>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	461a      	mov	r2, r3
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault7){
 8005a16:	4b30      	ldr	r3, [pc, #192]	; (8005ad8 <drawStatusMenu+0x4a4>)
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d008      	beq.n	8005a30 <drawStatusMenu+0x3fc>
			LCD_PutStr(i, j, "FAULT 7 Triggered", fnt7x10);
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	b298      	uxth	r0, r3
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	b299      	uxth	r1, r3
 8005a26:	4b29      	ldr	r3, [pc, #164]	; (8005acc <drawStatusMenu+0x498>)
 8005a28:	4a33      	ldr	r2, [pc, #204]	; (8005af8 <drawStatusMenu+0x4c4>)
 8005a2a:	f7fb fd7f 	bl	800152c <LCD_PutStr>
 8005a2e:	e007      	b.n	8005a40 <drawStatusMenu+0x40c>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	b298      	uxth	r0, r3
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	b299      	uxth	r1, r3
 8005a38:	4b24      	ldr	r3, [pc, #144]	; (8005acc <drawStatusMenu+0x498>)
 8005a3a:	4a29      	ldr	r2, [pc, #164]	; (8005ae0 <drawStatusMenu+0x4ac>)
 8005a3c:	f7fb fd76 	bl	800152c <LCD_PutStr>
		}

		i=10;
 8005a40:	230a      	movs	r3, #10
 8005a42:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	330f      	adds	r3, #15
 8005a48:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault8: ", fnt7x10);
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	b298      	uxth	r0, r3
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	b299      	uxth	r1, r3
 8005a52:	4b1e      	ldr	r3, [pc, #120]	; (8005acc <drawStatusMenu+0x498>)
 8005a54:	4a29      	ldr	r2, [pc, #164]	; (8005afc <drawStatusMenu+0x4c8>)
 8005a56:	f7fb fd69 	bl	800152c <LCD_PutStr>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault8){
 8005a64:	4b1c      	ldr	r3, [pc, #112]	; (8005ad8 <drawStatusMenu+0x4a4>)
 8005a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <drawStatusMenu+0x44a>
			LCD_PutStr(i, j, "FAULT 8 Triggered", fnt7x10);
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	b298      	uxth	r0, r3
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	b299      	uxth	r1, r3
 8005a74:	4b15      	ldr	r3, [pc, #84]	; (8005acc <drawStatusMenu+0x498>)
 8005a76:	4a22      	ldr	r2, [pc, #136]	; (8005b00 <drawStatusMenu+0x4cc>)
 8005a78:	f7fb fd58 	bl	800152c <LCD_PutStr>
 8005a7c:	e007      	b.n	8005a8e <drawStatusMenu+0x45a>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	b298      	uxth	r0, r3
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	b299      	uxth	r1, r3
 8005a86:	4b11      	ldr	r3, [pc, #68]	; (8005acc <drawStatusMenu+0x498>)
 8005a88:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <drawStatusMenu+0x4ac>)
 8005a8a:	f7fb fd4f 	bl	800152c <LCD_PutStr>
		}

		i=10;
 8005a8e:	230a      	movs	r3, #10
 8005a90:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	330f      	adds	r3, #15
 8005a96:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault9: ", fnt7x10);
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	b298      	uxth	r0, r3
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	b299      	uxth	r1, r3
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <drawStatusMenu+0x498>)
 8005aa2:	4a18      	ldr	r2, [pc, #96]	; (8005b04 <drawStatusMenu+0x4d0>)
 8005aa4:	f7fb fd42 	bl	800152c <LCD_PutStr>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	461a      	mov	r2, r3
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	4413      	add	r3, r2
 8005ab0:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault9){
 8005ab2:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <drawStatusMenu+0x4a4>)
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d028      	beq.n	8005b0c <drawStatusMenu+0x4d8>
			LCD_PutStr(i, j, "FAULT 9 Triggered", fnt7x10);
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	b298      	uxth	r0, r3
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	b299      	uxth	r1, r3
 8005ac2:	4b02      	ldr	r3, [pc, #8]	; (8005acc <drawStatusMenu+0x498>)
 8005ac4:	4a10      	ldr	r2, [pc, #64]	; (8005b08 <drawStatusMenu+0x4d4>)
 8005ac6:	f7fb fd31 	bl	800152c <LCD_PutStr>
 8005aca:	e027      	b.n	8005b1c <drawStatusMenu+0x4e8>
 8005acc:	08017ac4 	.word	0x08017ac4
 8005ad0:	080173b0 	.word	0x080173b0
 8005ad4:	0801740c 	.word	0x0801740c
 8005ad8:	200032d8 	.word	0x200032d8
 8005adc:	08017418 	.word	0x08017418
 8005ae0:	08017394 	.word	0x08017394
 8005ae4:	0801742c 	.word	0x0801742c
 8005ae8:	08017438 	.word	0x08017438
 8005aec:	0801744c 	.word	0x0801744c
 8005af0:	08017458 	.word	0x08017458
 8005af4:	0801746c 	.word	0x0801746c
 8005af8:	08017478 	.word	0x08017478
 8005afc:	0801748c 	.word	0x0801748c
 8005b00:	08017498 	.word	0x08017498
 8005b04:	080174ac 	.word	0x080174ac
 8005b08:	080174b8 	.word	0x080174b8
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	b298      	uxth	r0, r3
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	b299      	uxth	r1, r3
 8005b14:	4b27      	ldr	r3, [pc, #156]	; (8005bb4 <drawStatusMenu+0x580>)
 8005b16:	4a28      	ldr	r2, [pc, #160]	; (8005bb8 <drawStatusMenu+0x584>)
 8005b18:	f7fb fd08 	bl	800152c <LCD_PutStr>
		}


		//horizontal divider
		j=65;
 8005b1c:	2341      	movs	r3, #65	; 0x41
 8005b1e:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b299      	uxth	r1, r3
 8005b28:	4b24      	ldr	r3, [pc, #144]	; (8005bbc <drawStatusMenu+0x588>)
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	3b02      	subs	r3, #2
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	3301      	adds	r3, #1
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2002      	movs	r0, #2
 8005b3a:	f7fb f9ab 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 8005b3e:	23e6      	movs	r3, #230	; 0xe6
 8005b40:	61fb      	str	r3, [r7, #28]
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b03      	subs	r3, #3
 8005b48:	b298      	uxth	r0, r3
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	b299      	uxth	r1, r3
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3303      	adds	r3, #3
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	4b1a      	ldr	r3, [pc, #104]	; (8005bc0 <drawStatusMenu+0x58c>)
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	3b02      	subs	r3, #2
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f7fb f999 	bl	8000e94 <LCD_FillRect>

		i=200;
 8005b62:	23c8      	movs	r3, #200	; 0xc8
 8005b64:	61fb      	str	r3, [r7, #28]
		j=220;
 8005b66:	23dc      	movs	r3, #220	; 0xdc
 8005b68:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	b298      	uxth	r0, r3
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	b299      	uxth	r1, r3
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f7fb fe27 	bl	80017cc <drawUpDownArrow>
		i=180;
 8005b7e:	23b4      	movs	r3, #180	; 0xb4
 8005b80:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	b298      	uxth	r0, r3
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	b299      	uxth	r1, r3
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f7fb fe1b 	bl	80017cc <drawUpDownArrow>
		i=220;
 8005b96:	23dc      	movs	r3, #220	; 0xdc
 8005b98:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	b298      	uxth	r0, r3
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	b299      	uxth	r1, r3
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f7fb fe0f 	bl	80017cc <drawUpDownArrow>
		break;
 8005bae:	f000 beb4 	b.w	800691a <drawStatusMenu+0x12e6>
 8005bb2:	bf00      	nop
 8005bb4:	08017ac4 	.word	0x08017ac4
 8005bb8:	08017394 	.word	0x08017394
 8005bbc:	20028aaa 	.word	0x20028aaa
 8005bc0:	20028aac 	.word	0x20028aac
	}
	case 2:{
		i=35;
 8005bc4:	2323      	movs	r3, #35	; 0x23
 8005bc6:	61fb      	str	r3, [r7, #28]
		j=90;
 8005bc8:	235a      	movs	r3, #90	; 0x5a
 8005bca:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	3b02      	subs	r3, #2
 8005bd2:	b299      	uxth	r1, r3
 8005bd4:	4ba4      	ldr	r3, [pc, #656]	; (8005e68 <drawStatusMenu+0x834>)
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	3b02      	subs	r3, #2
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3302      	adds	r3, #2
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2002      	movs	r0, #2
 8005be6:	f7fb f955 	bl	8000e94 <LCD_FillRect>
		j=75;
 8005bea:	234b      	movs	r3, #75	; 0x4b
 8005bec:	61bb      	str	r3, [r7, #24]
		i=42;
 8005bee:	232a      	movs	r3, #42	; 0x2a
 8005bf0:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "AI VOLTAGES:", fnt7x10);
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	b298      	uxth	r0, r3
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	b299      	uxth	r1, r3
 8005bfa:	4b9c      	ldr	r3, [pc, #624]	; (8005e6c <drawStatusMenu+0x838>)
 8005bfc:	4a9c      	ldr	r2, [pc, #624]	; (8005e70 <drawStatusMenu+0x83c>)
 8005bfe:	f7fb fc95 	bl	800152c <LCD_PutStr>
 8005c02:	4603      	mov	r3, r0
 8005c04:	461a      	mov	r2, r3
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	4413      	add	r3, r2
 8005c0a:	61fb      	str	r3, [r7, #28]
		i+=125;
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	337d      	adds	r3, #125	; 0x7d
 8005c10:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "GPIO INPUTS:", fnt7x10);
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	b298      	uxth	r0, r3
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	b299      	uxth	r1, r3
 8005c1a:	4b94      	ldr	r3, [pc, #592]	; (8005e6c <drawStatusMenu+0x838>)
 8005c1c:	4a95      	ldr	r2, [pc, #596]	; (8005e74 <drawStatusMenu+0x840>)
 8005c1e:	f7fb fc85 	bl	800152c <LCD_PutStr>

		i=10;
 8005c22:	230a      	movs	r3, #10
 8005c24:	61fb      	str	r3, [r7, #28]
		j=95;
 8005c26:	235f      	movs	r3, #95	; 0x5f
 8005c28:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI0: ", fnt7x10);
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	b298      	uxth	r0, r3
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	b299      	uxth	r1, r3
 8005c32:	4b8e      	ldr	r3, [pc, #568]	; (8005e6c <drawStatusMenu+0x838>)
 8005c34:	4a90      	ldr	r2, [pc, #576]	; (8005e78 <drawStatusMenu+0x844>)
 8005c36:	f7fb fc79 	bl	800152c <LCD_PutStr>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	4413      	add	r3, r2
 8005c42:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc0];
 8005c44:	4b8d      	ldr	r3, [pc, #564]	; (8005e7c <drawStatusMenu+0x848>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a8d      	ldr	r2, [pc, #564]	; (8005e80 <drawStatusMenu+0x84c>)
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	edd3 7a00 	vldr	s15, [r3]
 8005c52:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8005e84 <drawStatusMenu+0x850>
 8005c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c5e:	ee17 3a90 	vmov	r3, s15
 8005c62:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	b298      	uxth	r0, r3
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	b299      	uxth	r1, r3
 8005c6c:	4b7f      	ldr	r3, [pc, #508]	; (8005e6c <drawStatusMenu+0x838>)
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	2303      	movs	r3, #3
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	f7fb fcf8 	bl	8001668 <LCD_PutIntF>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7e:	4413      	add	r3, r2
 8005c80:	69fa      	ldr	r2, [r7, #28]
 8005c82:	4413      	add	r3, r2
 8005c84:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI9: ", fnt7x10);
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	b298      	uxth	r0, r3
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	b299      	uxth	r1, r3
 8005c8e:	4b77      	ldr	r3, [pc, #476]	; (8005e6c <drawStatusMenu+0x838>)
 8005c90:	4a7d      	ldr	r2, [pc, #500]	; (8005e88 <drawStatusMenu+0x854>)
 8005c92:	f7fb fc4b 	bl	800152c <LCD_PutStr>
 8005c96:	4603      	mov	r3, r0
 8005c98:	461a      	mov	r2, r3
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc9];
 8005ca0:	4b76      	ldr	r3, [pc, #472]	; (8005e7c <drawStatusMenu+0x848>)
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	4a76      	ldr	r2, [pc, #472]	; (8005e80 <drawStatusMenu+0x84c>)
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	edd3 7a00 	vldr	s15, [r3]
 8005cae:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8005e84 <drawStatusMenu+0x850>
 8005cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cba:	ee17 3a90 	vmov	r3, s15
 8005cbe:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	b298      	uxth	r0, r3
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	b299      	uxth	r1, r3
 8005cc8:	4b68      	ldr	r3, [pc, #416]	; (8005e6c <drawStatusMenu+0x838>)
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	2303      	movs	r3, #3
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	f7fb fcca 	bl	8001668 <LCD_PutIntF>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	4413      	add	r3, r2
 8005cdc:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In0: ", fnt7x10);
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	b298      	uxth	r0, r3
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	b299      	uxth	r1, r3
 8005cea:	4b60      	ldr	r3, [pc, #384]	; (8005e6c <drawStatusMenu+0x838>)
 8005cec:	4a67      	ldr	r2, [pc, #412]	; (8005e8c <drawStatusMenu+0x858>)
 8005cee:	f7fb fc1d 	bl	800152c <LCD_PutStr>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input0], fnt7x10)+adjacentSpacing;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	b298      	uxth	r0, r3
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	b299      	uxth	r1, r3
 8005d04:	4b62      	ldr	r3, [pc, #392]	; (8005e90 <drawStatusMenu+0x85c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a62      	ldr	r2, [pc, #392]	; (8005e94 <drawStatusMenu+0x860>)
 8005d0a:	5cd3      	ldrb	r3, [r2, r3]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	4b57      	ldr	r3, [pc, #348]	; (8005e6c <drawStatusMenu+0x838>)
 8005d10:	f7fb fc44 	bl	800159c <LCD_PutInt>
 8005d14:	4603      	mov	r3, r0
 8005d16:	461a      	mov	r2, r3
 8005d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d1a:	4413      	add	r3, r2
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	4413      	add	r3, r2
 8005d20:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In9: ", fnt7x10);
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	b298      	uxth	r0, r3
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	b299      	uxth	r1, r3
 8005d2a:	4b50      	ldr	r3, [pc, #320]	; (8005e6c <drawStatusMenu+0x838>)
 8005d2c:	4a5a      	ldr	r2, [pc, #360]	; (8005e98 <drawStatusMenu+0x864>)
 8005d2e:	f7fb fbfd 	bl	800152c <LCD_PutStr>
 8005d32:	4603      	mov	r3, r0
 8005d34:	461a      	mov	r2, r3
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	4413      	add	r3, r2
 8005d3a:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input9], fnt7x10);
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	b298      	uxth	r0, r3
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	b299      	uxth	r1, r3
 8005d44:	4b52      	ldr	r3, [pc, #328]	; (8005e90 <drawStatusMenu+0x85c>)
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	4a52      	ldr	r2, [pc, #328]	; (8005e94 <drawStatusMenu+0x860>)
 8005d4a:	5cd3      	ldrb	r3, [r2, r3]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	4b47      	ldr	r3, [pc, #284]	; (8005e6c <drawStatusMenu+0x838>)
 8005d50:	f7fb fc24 	bl	800159c <LCD_PutInt>
 8005d54:	4603      	mov	r3, r0
 8005d56:	461a      	mov	r2, r3
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	61fb      	str	r3, [r7, #28]


		i=10;
 8005d5e:	230a      	movs	r3, #10
 8005d60:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	330f      	adds	r3, #15
 8005d66:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI1: ", fnt7x10);
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	b298      	uxth	r0, r3
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	b299      	uxth	r1, r3
 8005d70:	4b3e      	ldr	r3, [pc, #248]	; (8005e6c <drawStatusMenu+0x838>)
 8005d72:	4a4a      	ldr	r2, [pc, #296]	; (8005e9c <drawStatusMenu+0x868>)
 8005d74:	f7fb fbda 	bl	800152c <LCD_PutStr>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc1];
 8005d82:	4b3e      	ldr	r3, [pc, #248]	; (8005e7c <drawStatusMenu+0x848>)
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	4a3e      	ldr	r2, [pc, #248]	; (8005e80 <drawStatusMenu+0x84c>)
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	edd3 7a00 	vldr	s15, [r3]
 8005d90:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8005e84 <drawStatusMenu+0x850>
 8005d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d9c:	ee17 3a90 	vmov	r3, s15
 8005da0:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	b298      	uxth	r0, r3
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	b299      	uxth	r1, r3
 8005daa:	4b30      	ldr	r3, [pc, #192]	; (8005e6c <drawStatusMenu+0x838>)
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	2303      	movs	r3, #3
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	f7fb fc59 	bl	8001668 <LCD_PutIntF>
 8005db6:	4603      	mov	r3, r0
 8005db8:	461a      	mov	r2, r3
 8005dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dbc:	4413      	add	r3, r2
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI10: ", fnt7x10);
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	b298      	uxth	r0, r3
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	b299      	uxth	r1, r3
 8005dcc:	4b27      	ldr	r3, [pc, #156]	; (8005e6c <drawStatusMenu+0x838>)
 8005dce:	4a34      	ldr	r2, [pc, #208]	; (8005ea0 <drawStatusMenu+0x86c>)
 8005dd0:	f7fb fbac 	bl	800152c <LCD_PutStr>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	4413      	add	r3, r2
 8005ddc:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc10];
 8005dde:	4b27      	ldr	r3, [pc, #156]	; (8005e7c <drawStatusMenu+0x848>)
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	4a27      	ldr	r2, [pc, #156]	; (8005e80 <drawStatusMenu+0x84c>)
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	edd3 7a00 	vldr	s15, [r3]
 8005dec:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8005e84 <drawStatusMenu+0x850>
 8005df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005df8:	ee17 3a90 	vmov	r3, s15
 8005dfc:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	b298      	uxth	r0, r3
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	b299      	uxth	r1, r3
 8005e06:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <drawStatusMenu+0x838>)
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	f7fb fc2b 	bl	8001668 <LCD_PutIntF>
 8005e12:	4603      	mov	r3, r0
 8005e14:	461a      	mov	r2, r3
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	4413      	add	r3, r2
 8005e1a:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1e:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In1: ", fnt7x10);
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	b298      	uxth	r0, r3
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	b299      	uxth	r1, r3
 8005e28:	4b10      	ldr	r3, [pc, #64]	; (8005e6c <drawStatusMenu+0x838>)
 8005e2a:	4a1e      	ldr	r2, [pc, #120]	; (8005ea4 <drawStatusMenu+0x870>)
 8005e2c:	f7fb fb7e 	bl	800152c <LCD_PutStr>
 8005e30:	4603      	mov	r3, r0
 8005e32:	461a      	mov	r2, r3
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	4413      	add	r3, r2
 8005e38:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input1], fnt7x10)+adjacentSpacing;
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	b298      	uxth	r0, r3
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	b299      	uxth	r1, r3
 8005e42:	4b13      	ldr	r3, [pc, #76]	; (8005e90 <drawStatusMenu+0x85c>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <drawStatusMenu+0x860>)
 8005e48:	5cd3      	ldrb	r3, [r2, r3]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <drawStatusMenu+0x838>)
 8005e4e:	f7fb fba5 	bl	800159c <LCD_PutInt>
 8005e52:	4603      	mov	r3, r0
 8005e54:	461a      	mov	r2, r3
 8005e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e58:	4413      	add	r3, r2
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In10: ", fnt7x10);
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	b298      	uxth	r0, r3
 8005e64:	e020      	b.n	8005ea8 <drawStatusMenu+0x874>
 8005e66:	bf00      	nop
 8005e68:	20028aaa 	.word	0x20028aaa
 8005e6c:	08017ac4 	.word	0x08017ac4
 8005e70:	080174cc 	.word	0x080174cc
 8005e74:	080174dc 	.word	0x080174dc
 8005e78:	080174ec 	.word	0x080174ec
 8005e7c:	20000128 	.word	0x20000128
 8005e80:	20030aa0 	.word	0x20030aa0
 8005e84:	447a0000 	.word	0x447a0000
 8005e88:	080174f4 	.word	0x080174f4
 8005e8c:	080174fc 	.word	0x080174fc
 8005e90:	200000f8 	.word	0x200000f8
 8005e94:	20028cd4 	.word	0x20028cd4
 8005e98:	08017504 	.word	0x08017504
 8005e9c:	0801750c 	.word	0x0801750c
 8005ea0:	08017514 	.word	0x08017514
 8005ea4:	0801751c 	.word	0x0801751c
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	b299      	uxth	r1, r3
 8005eac:	4ba3      	ldr	r3, [pc, #652]	; (800613c <drawStatusMenu+0xb08>)
 8005eae:	4aa4      	ldr	r2, [pc, #656]	; (8006140 <drawStatusMenu+0xb0c>)
 8005eb0:	f7fb fb3c 	bl	800152c <LCD_PutStr>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	4413      	add	r3, r2
 8005ebc:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input10], fnt7x10);
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	b298      	uxth	r0, r3
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	b299      	uxth	r1, r3
 8005ec6:	4b9f      	ldr	r3, [pc, #636]	; (8006144 <drawStatusMenu+0xb10>)
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	4a9f      	ldr	r2, [pc, #636]	; (8006148 <drawStatusMenu+0xb14>)
 8005ecc:	5cd3      	ldrb	r3, [r2, r3]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	4b9a      	ldr	r3, [pc, #616]	; (800613c <drawStatusMenu+0xb08>)
 8005ed2:	f7fb fb63 	bl	800159c <LCD_PutInt>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	461a      	mov	r2, r3
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	61fb      	str	r3, [r7, #28]

		i=10;
 8005ee0:	230a      	movs	r3, #10
 8005ee2:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	330f      	adds	r3, #15
 8005ee8:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI2: ", fnt7x10);
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	b298      	uxth	r0, r3
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	b299      	uxth	r1, r3
 8005ef2:	4b92      	ldr	r3, [pc, #584]	; (800613c <drawStatusMenu+0xb08>)
 8005ef4:	4a95      	ldr	r2, [pc, #596]	; (800614c <drawStatusMenu+0xb18>)
 8005ef6:	f7fb fb19 	bl	800152c <LCD_PutStr>
 8005efa:	4603      	mov	r3, r0
 8005efc:	461a      	mov	r2, r3
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	4413      	add	r3, r2
 8005f02:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc2];
 8005f04:	4b92      	ldr	r3, [pc, #584]	; (8006150 <drawStatusMenu+0xb1c>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	4a92      	ldr	r2, [pc, #584]	; (8006154 <drawStatusMenu+0xb20>)
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	edd3 7a00 	vldr	s15, [r3]
 8005f12:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8006158 <drawStatusMenu+0xb24>
 8005f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f1e:	ee17 3a90 	vmov	r3, s15
 8005f22:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	b298      	uxth	r0, r3
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	b299      	uxth	r1, r3
 8005f2c:	4b83      	ldr	r3, [pc, #524]	; (800613c <drawStatusMenu+0xb08>)
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	2303      	movs	r3, #3
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	f7fb fb98 	bl	8001668 <LCD_PutIntF>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3e:	4413      	add	r3, r2
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	4413      	add	r3, r2
 8005f44:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI11: ", fnt7x10);
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	b298      	uxth	r0, r3
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	b299      	uxth	r1, r3
 8005f4e:	4b7b      	ldr	r3, [pc, #492]	; (800613c <drawStatusMenu+0xb08>)
 8005f50:	4a82      	ldr	r2, [pc, #520]	; (800615c <drawStatusMenu+0xb28>)
 8005f52:	f7fb faeb 	bl	800152c <LCD_PutStr>
 8005f56:	4603      	mov	r3, r0
 8005f58:	461a      	mov	r2, r3
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc11];
 8005f60:	4b7b      	ldr	r3, [pc, #492]	; (8006150 <drawStatusMenu+0xb1c>)
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	4a7b      	ldr	r2, [pc, #492]	; (8006154 <drawStatusMenu+0xb20>)
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	edd3 7a00 	vldr	s15, [r3]
 8005f6e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8006158 <drawStatusMenu+0xb24>
 8005f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f7a:	ee17 3a90 	vmov	r3, s15
 8005f7e:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	b298      	uxth	r0, r3
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	b299      	uxth	r1, r3
 8005f88:	4b6c      	ldr	r3, [pc, #432]	; (800613c <drawStatusMenu+0xb08>)
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	f7fb fb6a 	bl	8001668 <LCD_PutIntF>
 8005f94:	4603      	mov	r3, r0
 8005f96:	461a      	mov	r2, r3
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In2: ", fnt7x10);
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	b298      	uxth	r0, r3
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	b299      	uxth	r1, r3
 8005faa:	4b64      	ldr	r3, [pc, #400]	; (800613c <drawStatusMenu+0xb08>)
 8005fac:	4a6c      	ldr	r2, [pc, #432]	; (8006160 <drawStatusMenu+0xb2c>)
 8005fae:	f7fb fabd 	bl	800152c <LCD_PutStr>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input2], fnt7x10)+adjacentSpacing;
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	b298      	uxth	r0, r3
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	b299      	uxth	r1, r3
 8005fc4:	4b5f      	ldr	r3, [pc, #380]	; (8006144 <drawStatusMenu+0xb10>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	4a5f      	ldr	r2, [pc, #380]	; (8006148 <drawStatusMenu+0xb14>)
 8005fca:	5cd3      	ldrb	r3, [r2, r3]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4b5b      	ldr	r3, [pc, #364]	; (800613c <drawStatusMenu+0xb08>)
 8005fd0:	f7fb fae4 	bl	800159c <LCD_PutInt>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fda:	4413      	add	r3, r2
 8005fdc:	69fa      	ldr	r2, [r7, #28]
 8005fde:	4413      	add	r3, r2
 8005fe0:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In11: ", fnt7x10);
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	b298      	uxth	r0, r3
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	b299      	uxth	r1, r3
 8005fea:	4b54      	ldr	r3, [pc, #336]	; (800613c <drawStatusMenu+0xb08>)
 8005fec:	4a5d      	ldr	r2, [pc, #372]	; (8006164 <drawStatusMenu+0xb30>)
 8005fee:	f7fb fa9d 	bl	800152c <LCD_PutStr>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input11], fnt7x10);
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	b298      	uxth	r0, r3
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	b299      	uxth	r1, r3
 8006004:	4b4f      	ldr	r3, [pc, #316]	; (8006144 <drawStatusMenu+0xb10>)
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	4a4f      	ldr	r2, [pc, #316]	; (8006148 <drawStatusMenu+0xb14>)
 800600a:	5cd3      	ldrb	r3, [r2, r3]
 800600c:	461a      	mov	r2, r3
 800600e:	4b4b      	ldr	r3, [pc, #300]	; (800613c <drawStatusMenu+0xb08>)
 8006010:	f7fb fac4 	bl	800159c <LCD_PutInt>
 8006014:	4603      	mov	r3, r0
 8006016:	461a      	mov	r2, r3
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	4413      	add	r3, r2
 800601c:	61fb      	str	r3, [r7, #28]

		i=10;
 800601e:	230a      	movs	r3, #10
 8006020:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	330f      	adds	r3, #15
 8006026:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI3: ", fnt7x10);
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	b298      	uxth	r0, r3
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	b299      	uxth	r1, r3
 8006030:	4b42      	ldr	r3, [pc, #264]	; (800613c <drawStatusMenu+0xb08>)
 8006032:	4a4d      	ldr	r2, [pc, #308]	; (8006168 <drawStatusMenu+0xb34>)
 8006034:	f7fb fa7a 	bl	800152c <LCD_PutStr>
 8006038:	4603      	mov	r3, r0
 800603a:	461a      	mov	r2, r3
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	4413      	add	r3, r2
 8006040:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc3];
 8006042:	4b43      	ldr	r3, [pc, #268]	; (8006150 <drawStatusMenu+0xb1c>)
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	4a43      	ldr	r2, [pc, #268]	; (8006154 <drawStatusMenu+0xb20>)
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	edd3 7a00 	vldr	s15, [r3]
 8006050:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006158 <drawStatusMenu+0xb24>
 8006054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006058:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800605c:	ee17 3a90 	vmov	r3, s15
 8006060:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	b298      	uxth	r0, r3
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	b299      	uxth	r1, r3
 800606a:	4b34      	ldr	r3, [pc, #208]	; (800613c <drawStatusMenu+0xb08>)
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	2303      	movs	r3, #3
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	f7fb faf9 	bl	8001668 <LCD_PutIntF>
 8006076:	4603      	mov	r3, r0
 8006078:	461a      	mov	r2, r3
 800607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607c:	4413      	add	r3, r2
 800607e:	69fa      	ldr	r2, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI12: ", fnt7x10);
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	b298      	uxth	r0, r3
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	b299      	uxth	r1, r3
 800608c:	4b2b      	ldr	r3, [pc, #172]	; (800613c <drawStatusMenu+0xb08>)
 800608e:	4a37      	ldr	r2, [pc, #220]	; (800616c <drawStatusMenu+0xb38>)
 8006090:	f7fb fa4c 	bl	800152c <LCD_PutStr>
 8006094:	4603      	mov	r3, r0
 8006096:	461a      	mov	r2, r3
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc12];
 800609e:	4b2c      	ldr	r3, [pc, #176]	; (8006150 <drawStatusMenu+0xb1c>)
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	4a2c      	ldr	r2, [pc, #176]	; (8006154 <drawStatusMenu+0xb20>)
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	edd3 7a00 	vldr	s15, [r3]
 80060ac:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006158 <drawStatusMenu+0xb24>
 80060b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060b8:	ee17 3a90 	vmov	r3, s15
 80060bc:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	b298      	uxth	r0, r3
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	b299      	uxth	r1, r3
 80060c6:	4b1d      	ldr	r3, [pc, #116]	; (800613c <drawStatusMenu+0xb08>)
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	2303      	movs	r3, #3
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	f7fb facb 	bl	8001668 <LCD_PutIntF>
 80060d2:	4603      	mov	r3, r0
 80060d4:	461a      	mov	r2, r3
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In3: ", fnt7x10);
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	b298      	uxth	r0, r3
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	b299      	uxth	r1, r3
 80060e8:	4b14      	ldr	r3, [pc, #80]	; (800613c <drawStatusMenu+0xb08>)
 80060ea:	4a21      	ldr	r2, [pc, #132]	; (8006170 <drawStatusMenu+0xb3c>)
 80060ec:	f7fb fa1e 	bl	800152c <LCD_PutStr>
 80060f0:	4603      	mov	r3, r0
 80060f2:	461a      	mov	r2, r3
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	4413      	add	r3, r2
 80060f8:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input3], fnt7x10);
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	b298      	uxth	r0, r3
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	b299      	uxth	r1, r3
 8006102:	4b10      	ldr	r3, [pc, #64]	; (8006144 <drawStatusMenu+0xb10>)
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	4a10      	ldr	r2, [pc, #64]	; (8006148 <drawStatusMenu+0xb14>)
 8006108:	5cd3      	ldrb	r3, [r2, r3]
 800610a:	461a      	mov	r2, r3
 800610c:	4b0b      	ldr	r3, [pc, #44]	; (800613c <drawStatusMenu+0xb08>)
 800610e:	f7fb fa45 	bl	800159c <LCD_PutInt>


		i=10;
 8006112:	230a      	movs	r3, #10
 8006114:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	330f      	adds	r3, #15
 800611a:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI4: ", fnt7x10);
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	b298      	uxth	r0, r3
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	b299      	uxth	r1, r3
 8006124:	4b05      	ldr	r3, [pc, #20]	; (800613c <drawStatusMenu+0xb08>)
 8006126:	4a13      	ldr	r2, [pc, #76]	; (8006174 <drawStatusMenu+0xb40>)
 8006128:	f7fb fa00 	bl	800152c <LCD_PutStr>
 800612c:	4603      	mov	r3, r0
 800612e:	461a      	mov	r2, r3
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	4413      	add	r3, r2
 8006134:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc4];
 8006136:	4b06      	ldr	r3, [pc, #24]	; (8006150 <drawStatusMenu+0xb1c>)
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	e01d      	b.n	8006178 <drawStatusMenu+0xb44>
 800613c:	08017ac4 	.word	0x08017ac4
 8006140:	08017524 	.word	0x08017524
 8006144:	200000f8 	.word	0x200000f8
 8006148:	20028cd4 	.word	0x20028cd4
 800614c:	0801752c 	.word	0x0801752c
 8006150:	20000128 	.word	0x20000128
 8006154:	20030aa0 	.word	0x20030aa0
 8006158:	447a0000 	.word	0x447a0000
 800615c:	08017534 	.word	0x08017534
 8006160:	0801753c 	.word	0x0801753c
 8006164:	08017544 	.word	0x08017544
 8006168:	0801754c 	.word	0x0801754c
 800616c:	08017554 	.word	0x08017554
 8006170:	0801755c 	.word	0x0801755c
 8006174:	08017564 	.word	0x08017564
 8006178:	4aa7      	ldr	r2, [pc, #668]	; (8006418 <drawStatusMenu+0xde4>)
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	edd3 7a00 	vldr	s15, [r3]
 8006182:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800641c <drawStatusMenu+0xde8>
 8006186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800618a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800618e:	ee17 3a90 	vmov	r3, s15
 8006192:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	b298      	uxth	r0, r3
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	b299      	uxth	r1, r3
 800619c:	4ba0      	ldr	r3, [pc, #640]	; (8006420 <drawStatusMenu+0xdec>)
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	2303      	movs	r3, #3
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	f7fb fa60 	bl	8001668 <LCD_PutIntF>
 80061a8:	4603      	mov	r3, r0
 80061aa:	461a      	mov	r2, r3
 80061ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ae:	4413      	add	r3, r2
 80061b0:	69fa      	ldr	r2, [r7, #28]
 80061b2:	4413      	add	r3, r2
 80061b4:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI13: ", fnt7x10);
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	b298      	uxth	r0, r3
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	b299      	uxth	r1, r3
 80061be:	4b98      	ldr	r3, [pc, #608]	; (8006420 <drawStatusMenu+0xdec>)
 80061c0:	4a98      	ldr	r2, [pc, #608]	; (8006424 <drawStatusMenu+0xdf0>)
 80061c2:	f7fb f9b3 	bl	800152c <LCD_PutStr>
 80061c6:	4603      	mov	r3, r0
 80061c8:	461a      	mov	r2, r3
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	4413      	add	r3, r2
 80061ce:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc13];
 80061d0:	4b95      	ldr	r3, [pc, #596]	; (8006428 <drawStatusMenu+0xdf4>)
 80061d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d4:	4a90      	ldr	r2, [pc, #576]	; (8006418 <drawStatusMenu+0xde4>)
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	edd3 7a00 	vldr	s15, [r3]
 80061de:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 800641c <drawStatusMenu+0xde8>
 80061e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061ea:	ee17 3a90 	vmov	r3, s15
 80061ee:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	b298      	uxth	r0, r3
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	b299      	uxth	r1, r3
 80061f8:	4b89      	ldr	r3, [pc, #548]	; (8006420 <drawStatusMenu+0xdec>)
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	2303      	movs	r3, #3
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	f7fb fa32 	bl	8001668 <LCD_PutIntF>
 8006204:	4603      	mov	r3, r0
 8006206:	461a      	mov	r2, r3
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	4413      	add	r3, r2
 800620c:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In4: ", fnt7x10);
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	b298      	uxth	r0, r3
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	b299      	uxth	r1, r3
 800621a:	4b81      	ldr	r3, [pc, #516]	; (8006420 <drawStatusMenu+0xdec>)
 800621c:	4a83      	ldr	r2, [pc, #524]	; (800642c <drawStatusMenu+0xdf8>)
 800621e:	f7fb f985 	bl	800152c <LCD_PutStr>
 8006222:	4603      	mov	r3, r0
 8006224:	461a      	mov	r2, r3
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	4413      	add	r3, r2
 800622a:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input4], fnt7x10);
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	b298      	uxth	r0, r3
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	b299      	uxth	r1, r3
 8006234:	4b7e      	ldr	r3, [pc, #504]	; (8006430 <drawStatusMenu+0xdfc>)
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	4a7e      	ldr	r2, [pc, #504]	; (8006434 <drawStatusMenu+0xe00>)
 800623a:	5cd3      	ldrb	r3, [r2, r3]
 800623c:	461a      	mov	r2, r3
 800623e:	4b78      	ldr	r3, [pc, #480]	; (8006420 <drawStatusMenu+0xdec>)
 8006240:	f7fb f9ac 	bl	800159c <LCD_PutInt>

		i=10;
 8006244:	230a      	movs	r3, #10
 8006246:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	330f      	adds	r3, #15
 800624c:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI5: ", fnt7x10);
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	b298      	uxth	r0, r3
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	b299      	uxth	r1, r3
 8006256:	4b72      	ldr	r3, [pc, #456]	; (8006420 <drawStatusMenu+0xdec>)
 8006258:	4a77      	ldr	r2, [pc, #476]	; (8006438 <drawStatusMenu+0xe04>)
 800625a:	f7fb f967 	bl	800152c <LCD_PutStr>
 800625e:	4603      	mov	r3, r0
 8006260:	461a      	mov	r2, r3
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc5];
 8006268:	4b6f      	ldr	r3, [pc, #444]	; (8006428 <drawStatusMenu+0xdf4>)
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	4a6a      	ldr	r2, [pc, #424]	; (8006418 <drawStatusMenu+0xde4>)
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	edd3 7a00 	vldr	s15, [r3]
 8006276:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800641c <drawStatusMenu+0xde8>
 800627a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800627e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006282:	ee17 3a90 	vmov	r3, s15
 8006286:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	b298      	uxth	r0, r3
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	b299      	uxth	r1, r3
 8006290:	4b63      	ldr	r3, [pc, #396]	; (8006420 <drawStatusMenu+0xdec>)
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	2303      	movs	r3, #3
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	f7fb f9e6 	bl	8001668 <LCD_PutIntF>
 800629c:	4603      	mov	r3, r0
 800629e:	461a      	mov	r2, r3
 80062a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a2:	4413      	add	r3, r2
 80062a4:	69fa      	ldr	r2, [r7, #28]
 80062a6:	4413      	add	r3, r2
 80062a8:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI14: ", fnt7x10);
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	b298      	uxth	r0, r3
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	b299      	uxth	r1, r3
 80062b2:	4b5b      	ldr	r3, [pc, #364]	; (8006420 <drawStatusMenu+0xdec>)
 80062b4:	4a61      	ldr	r2, [pc, #388]	; (800643c <drawStatusMenu+0xe08>)
 80062b6:	f7fb f939 	bl	800152c <LCD_PutStr>
 80062ba:	4603      	mov	r3, r0
 80062bc:	461a      	mov	r2, r3
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	4413      	add	r3, r2
 80062c2:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc14];
 80062c4:	4b58      	ldr	r3, [pc, #352]	; (8006428 <drawStatusMenu+0xdf4>)
 80062c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c8:	4a53      	ldr	r2, [pc, #332]	; (8006418 <drawStatusMenu+0xde4>)
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	edd3 7a00 	vldr	s15, [r3]
 80062d2:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800641c <drawStatusMenu+0xde8>
 80062d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062de:	ee17 3a90 	vmov	r3, s15
 80062e2:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	b298      	uxth	r0, r3
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	b299      	uxth	r1, r3
 80062ec:	4b4c      	ldr	r3, [pc, #304]	; (8006420 <drawStatusMenu+0xdec>)
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	2303      	movs	r3, #3
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	f7fb f9b8 	bl	8001668 <LCD_PutIntF>
 80062f8:	4603      	mov	r3, r0
 80062fa:	461a      	mov	r2, r3
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	4413      	add	r3, r2
 8006300:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In5: ", fnt7x10);
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	b298      	uxth	r0, r3
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	b299      	uxth	r1, r3
 800630e:	4b44      	ldr	r3, [pc, #272]	; (8006420 <drawStatusMenu+0xdec>)
 8006310:	4a4b      	ldr	r2, [pc, #300]	; (8006440 <drawStatusMenu+0xe0c>)
 8006312:	f7fb f90b 	bl	800152c <LCD_PutStr>
 8006316:	4603      	mov	r3, r0
 8006318:	461a      	mov	r2, r3
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4413      	add	r3, r2
 800631e:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input5], fnt7x10);
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	b298      	uxth	r0, r3
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	b299      	uxth	r1, r3
 8006328:	4b41      	ldr	r3, [pc, #260]	; (8006430 <drawStatusMenu+0xdfc>)
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	4a41      	ldr	r2, [pc, #260]	; (8006434 <drawStatusMenu+0xe00>)
 800632e:	5cd3      	ldrb	r3, [r2, r3]
 8006330:	461a      	mov	r2, r3
 8006332:	4b3b      	ldr	r3, [pc, #236]	; (8006420 <drawStatusMenu+0xdec>)
 8006334:	f7fb f932 	bl	800159c <LCD_PutInt>

		i=10;
 8006338:	230a      	movs	r3, #10
 800633a:	61fb      	str	r3, [r7, #28]
		j+=15;
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	330f      	adds	r3, #15
 8006340:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI6: ", fnt7x10);
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	b298      	uxth	r0, r3
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	b299      	uxth	r1, r3
 800634a:	4b35      	ldr	r3, [pc, #212]	; (8006420 <drawStatusMenu+0xdec>)
 800634c:	4a3d      	ldr	r2, [pc, #244]	; (8006444 <drawStatusMenu+0xe10>)
 800634e:	f7fb f8ed 	bl	800152c <LCD_PutStr>
 8006352:	4603      	mov	r3, r0
 8006354:	461a      	mov	r2, r3
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	4413      	add	r3, r2
 800635a:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc6];
 800635c:	4b32      	ldr	r3, [pc, #200]	; (8006428 <drawStatusMenu+0xdf4>)
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	4a2d      	ldr	r2, [pc, #180]	; (8006418 <drawStatusMenu+0xde4>)
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	edd3 7a00 	vldr	s15, [r3]
 800636a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800641c <drawStatusMenu+0xde8>
 800636e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006376:	ee17 3a90 	vmov	r3, s15
 800637a:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	b298      	uxth	r0, r3
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	b299      	uxth	r1, r3
 8006384:	4b26      	ldr	r3, [pc, #152]	; (8006420 <drawStatusMenu+0xdec>)
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	2303      	movs	r3, #3
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	f7fb f96c 	bl	8001668 <LCD_PutIntF>
 8006390:	4603      	mov	r3, r0
 8006392:	461a      	mov	r2, r3
 8006394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006396:	4413      	add	r3, r2
 8006398:	69fa      	ldr	r2, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI15: ", fnt7x10);
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	b298      	uxth	r0, r3
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	b299      	uxth	r1, r3
 80063a6:	4b1e      	ldr	r3, [pc, #120]	; (8006420 <drawStatusMenu+0xdec>)
 80063a8:	4a27      	ldr	r2, [pc, #156]	; (8006448 <drawStatusMenu+0xe14>)
 80063aa:	f7fb f8bf 	bl	800152c <LCD_PutStr>
 80063ae:	4603      	mov	r3, r0
 80063b0:	461a      	mov	r2, r3
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	4413      	add	r3, r2
 80063b6:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc15];
 80063b8:	4b1b      	ldr	r3, [pc, #108]	; (8006428 <drawStatusMenu+0xdf4>)
 80063ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063bc:	4a16      	ldr	r2, [pc, #88]	; (8006418 <drawStatusMenu+0xde4>)
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	edd3 7a00 	vldr	s15, [r3]
 80063c6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800641c <drawStatusMenu+0xde8>
 80063ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063d2:	ee17 3a90 	vmov	r3, s15
 80063d6:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	b298      	uxth	r0, r3
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	b299      	uxth	r1, r3
 80063e0:	4b0f      	ldr	r3, [pc, #60]	; (8006420 <drawStatusMenu+0xdec>)
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	2303      	movs	r3, #3
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	f7fb f93e 	bl	8001668 <LCD_PutIntF>
 80063ec:	4603      	mov	r3, r0
 80063ee:	461a      	mov	r2, r3
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4413      	add	r3, r2
 80063f4:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In6: ", fnt7x10);
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	b298      	uxth	r0, r3
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	b299      	uxth	r1, r3
 8006402:	4b07      	ldr	r3, [pc, #28]	; (8006420 <drawStatusMenu+0xdec>)
 8006404:	4a11      	ldr	r2, [pc, #68]	; (800644c <drawStatusMenu+0xe18>)
 8006406:	f7fb f891 	bl	800152c <LCD_PutStr>
 800640a:	4603      	mov	r3, r0
 800640c:	461a      	mov	r2, r3
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	4413      	add	r3, r2
 8006412:	61fb      	str	r3, [r7, #28]
 8006414:	e01c      	b.n	8006450 <drawStatusMenu+0xe1c>
 8006416:	bf00      	nop
 8006418:	20030aa0 	.word	0x20030aa0
 800641c:	447a0000 	.word	0x447a0000
 8006420:	08017ac4 	.word	0x08017ac4
 8006424:	0801756c 	.word	0x0801756c
 8006428:	20000128 	.word	0x20000128
 800642c:	08017574 	.word	0x08017574
 8006430:	200000f8 	.word	0x200000f8
 8006434:	20028cd4 	.word	0x20028cd4
 8006438:	0801757c 	.word	0x0801757c
 800643c:	08017584 	.word	0x08017584
 8006440:	0801758c 	.word	0x0801758c
 8006444:	08017594 	.word	0x08017594
 8006448:	0801759c 	.word	0x0801759c
 800644c:	080175a4 	.word	0x080175a4
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input6], fnt7x10);
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	b298      	uxth	r0, r3
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	b299      	uxth	r1, r3
 8006458:	4b9b      	ldr	r3, [pc, #620]	; (80066c8 <drawStatusMenu+0x1094>)
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	4a9b      	ldr	r2, [pc, #620]	; (80066cc <drawStatusMenu+0x1098>)
 800645e:	5cd3      	ldrb	r3, [r2, r3]
 8006460:	461a      	mov	r2, r3
 8006462:	4b9b      	ldr	r3, [pc, #620]	; (80066d0 <drawStatusMenu+0x109c>)
 8006464:	f7fb f89a 	bl	800159c <LCD_PutInt>

		i=10;
 8006468:	230a      	movs	r3, #10
 800646a:	61fb      	str	r3, [r7, #28]
		j+=15;
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	330f      	adds	r3, #15
 8006470:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI7: ", fnt7x10);
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	b298      	uxth	r0, r3
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	b299      	uxth	r1, r3
 800647a:	4b95      	ldr	r3, [pc, #596]	; (80066d0 <drawStatusMenu+0x109c>)
 800647c:	4a95      	ldr	r2, [pc, #596]	; (80066d4 <drawStatusMenu+0x10a0>)
 800647e:	f7fb f855 	bl	800152c <LCD_PutStr>
 8006482:	4603      	mov	r3, r0
 8006484:	461a      	mov	r2, r3
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	4413      	add	r3, r2
 800648a:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc7];
 800648c:	4b92      	ldr	r3, [pc, #584]	; (80066d8 <drawStatusMenu+0x10a4>)
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	4a92      	ldr	r2, [pc, #584]	; (80066dc <drawStatusMenu+0x10a8>)
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	edd3 7a00 	vldr	s15, [r3]
 800649a:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80066e0 <drawStatusMenu+0x10ac>
 800649e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064a6:	ee17 3a90 	vmov	r3, s15
 80064aa:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	b298      	uxth	r0, r3
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	b299      	uxth	r1, r3
 80064b4:	4b86      	ldr	r3, [pc, #536]	; (80066d0 <drawStatusMenu+0x109c>)
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	2303      	movs	r3, #3
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	f7fb f8d4 	bl	8001668 <LCD_PutIntF>
 80064c0:	4603      	mov	r3, r0
 80064c2:	461a      	mov	r2, r3
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In7: ", fnt7x10);
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	b298      	uxth	r0, r3
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	b299      	uxth	r1, r3
 80064d6:	4b7e      	ldr	r3, [pc, #504]	; (80066d0 <drawStatusMenu+0x109c>)
 80064d8:	4a82      	ldr	r2, [pc, #520]	; (80066e4 <drawStatusMenu+0x10b0>)
 80064da:	f7fb f827 	bl	800152c <LCD_PutStr>
 80064de:	4603      	mov	r3, r0
 80064e0:	461a      	mov	r2, r3
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	4413      	add	r3, r2
 80064e6:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input7], fnt7x10);
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	b298      	uxth	r0, r3
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	b299      	uxth	r1, r3
 80064f0:	4b75      	ldr	r3, [pc, #468]	; (80066c8 <drawStatusMenu+0x1094>)
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	4a75      	ldr	r2, [pc, #468]	; (80066cc <drawStatusMenu+0x1098>)
 80064f6:	5cd3      	ldrb	r3, [r2, r3]
 80064f8:	461a      	mov	r2, r3
 80064fa:	4b75      	ldr	r3, [pc, #468]	; (80066d0 <drawStatusMenu+0x109c>)
 80064fc:	f7fb f84e 	bl	800159c <LCD_PutInt>

		i=10;
 8006500:	230a      	movs	r3, #10
 8006502:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	330f      	adds	r3, #15
 8006508:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI8: ", fnt7x10);
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	b298      	uxth	r0, r3
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	b299      	uxth	r1, r3
 8006512:	4b6f      	ldr	r3, [pc, #444]	; (80066d0 <drawStatusMenu+0x109c>)
 8006514:	4a74      	ldr	r2, [pc, #464]	; (80066e8 <drawStatusMenu+0x10b4>)
 8006516:	f7fb f809 	bl	800152c <LCD_PutStr>
 800651a:	4603      	mov	r3, r0
 800651c:	461a      	mov	r2, r3
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc8];
 8006524:	4b6c      	ldr	r3, [pc, #432]	; (80066d8 <drawStatusMenu+0x10a4>)
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	4a6c      	ldr	r2, [pc, #432]	; (80066dc <drawStatusMenu+0x10a8>)
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	edd3 7a00 	vldr	s15, [r3]
 8006532:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80066e0 <drawStatusMenu+0x10ac>
 8006536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800653a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800653e:	ee17 3a90 	vmov	r3, s15
 8006542:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	b298      	uxth	r0, r3
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	b299      	uxth	r1, r3
 800654c:	4b60      	ldr	r3, [pc, #384]	; (80066d0 <drawStatusMenu+0x109c>)
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	2303      	movs	r3, #3
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	f7fb f888 	bl	8001668 <LCD_PutIntF>
 8006558:	4603      	mov	r3, r0
 800655a:	461a      	mov	r2, r3
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	4413      	add	r3, r2
 8006560:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In8: ", fnt7x10);
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	b298      	uxth	r0, r3
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	b299      	uxth	r1, r3
 800656e:	4b58      	ldr	r3, [pc, #352]	; (80066d0 <drawStatusMenu+0x109c>)
 8006570:	4a5e      	ldr	r2, [pc, #376]	; (80066ec <drawStatusMenu+0x10b8>)
 8006572:	f7fa ffdb 	bl	800152c <LCD_PutStr>
 8006576:	4603      	mov	r3, r0
 8006578:	461a      	mov	r2, r3
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	4413      	add	r3, r2
 800657e:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input8], fnt7x10);
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	b298      	uxth	r0, r3
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	b299      	uxth	r1, r3
 8006588:	4b4f      	ldr	r3, [pc, #316]	; (80066c8 <drawStatusMenu+0x1094>)
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	4a4f      	ldr	r2, [pc, #316]	; (80066cc <drawStatusMenu+0x1098>)
 800658e:	5cd3      	ldrb	r3, [r2, r3]
 8006590:	461a      	mov	r2, r3
 8006592:	4b4f      	ldr	r3, [pc, #316]	; (80066d0 <drawStatusMenu+0x109c>)
 8006594:	f7fb f802 	bl	800159c <LCD_PutInt>
		//horizontal divider
		j=65;
 8006598:	2341      	movs	r3, #65	; 0x41
 800659a:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b299      	uxth	r1, r3
 80065a4:	4b52      	ldr	r3, [pc, #328]	; (80066f0 <drawStatusMenu+0x10bc>)
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	3b02      	subs	r3, #2
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3301      	adds	r3, #1
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	2002      	movs	r0, #2
 80065b6:	f7fa fc6d 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 80065ba:	23e6      	movs	r3, #230	; 0xe6
 80065bc:	61fb      	str	r3, [r7, #28]
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b03      	subs	r3, #3
 80065c4:	b298      	uxth	r0, r3
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	b299      	uxth	r1, r3
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3303      	adds	r3, #3
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	4b48      	ldr	r3, [pc, #288]	; (80066f4 <drawStatusMenu+0x10c0>)
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	3b02      	subs	r3, #2
 80065d8:	b29b      	uxth	r3, r3
 80065da:	f7fa fc5b 	bl	8000e94 <LCD_FillRect>

		i=155;
 80065de:	239b      	movs	r3, #155	; 0x9b
 80065e0:	61fb      	str	r3, [r7, #28]
		j=35;
 80065e2:	2323      	movs	r3, #35	; 0x23
 80065e4:	61bb      	str	r3, [r7, #24]
		LCD_PutStr(i,j,"YOUR AD HERE!",fnt7x10);
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	b298      	uxth	r0, r3
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	b299      	uxth	r1, r3
 80065ee:	4b38      	ldr	r3, [pc, #224]	; (80066d0 <drawStatusMenu+0x109c>)
 80065f0:	4a41      	ldr	r2, [pc, #260]	; (80066f8 <drawStatusMenu+0x10c4>)
 80065f2:	f7fa ff9b 	bl	800152c <LCD_PutStr>
		i=155;
 80065f6:	239b      	movs	r3, #155	; 0x9b
 80065f8:	61fb      	str	r3, [r7, #28]
		j=50;
 80065fa:	2332      	movs	r3, #50	; 0x32
 80065fc:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i,j,"Monthly fee: $",fnt7x10)+8;
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	b298      	uxth	r0, r3
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	b299      	uxth	r1, r3
 8006606:	4b32      	ldr	r3, [pc, #200]	; (80066d0 <drawStatusMenu+0x109c>)
 8006608:	4a3c      	ldr	r2, [pc, #240]	; (80066fc <drawStatusMenu+0x10c8>)
 800660a:	f7fa ff8f 	bl	800152c <LCD_PutStr>
 800660e:	4603      	mov	r3, r0
 8006610:	3308      	adds	r3, #8
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	4413      	add	r3, r2
 8006616:	61fb      	str	r3, [r7, #28]
		j=28;
 8006618:	231c      	movs	r3, #28
 800661a:	61bb      	str	r3, [r7, #24]
		LCD_PutIntF(i,j,3999, 2,fnt_dig_big);
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	b298      	uxth	r0, r3
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	b299      	uxth	r1, r3
 8006624:	4b36      	ldr	r3, [pc, #216]	; (8006700 <drawStatusMenu+0x10cc>)
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	2302      	movs	r3, #2
 800662a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800662e:	f7fb f81b 	bl	8001668 <LCD_PutIntF>

		//draw the additional pages available indicators
		i=200;
 8006632:	23c8      	movs	r3, #200	; 0xc8
 8006634:	61fb      	str	r3, [r7, #28]
		j=220;
 8006636:	23dc      	movs	r3, #220	; 0xdc
 8006638:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	b298      	uxth	r0, r3
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	b299      	uxth	r1, r3
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	b29a      	uxth	r2, r3
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	b29b      	uxth	r3, r3
 800664a:	f7fb f8bf 	bl	80017cc <drawUpDownArrow>
		j=15;
 800664e:	230f      	movs	r3, #15
 8006650:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	b298      	uxth	r0, r3
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	b299      	uxth	r1, r3
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	b29a      	uxth	r2, r3
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	b29b      	uxth	r3, r3
 8006662:	f7fb f8b3 	bl	80017cc <drawUpDownArrow>
		i=180;
 8006666:	23b4      	movs	r3, #180	; 0xb4
 8006668:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	b298      	uxth	r0, r3
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	b299      	uxth	r1, r3
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	b29a      	uxth	r2, r3
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	b29b      	uxth	r3, r3
 800667a:	f7fb f8a7 	bl	80017cc <drawUpDownArrow>
		j=220;
 800667e:	23dc      	movs	r3, #220	; 0xdc
 8006680:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	b298      	uxth	r0, r3
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	b299      	uxth	r1, r3
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	b29a      	uxth	r2, r3
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	b29b      	uxth	r3, r3
 8006692:	f7fb f89b 	bl	80017cc <drawUpDownArrow>
		i=220;
 8006696:	23dc      	movs	r3, #220	; 0xdc
 8006698:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	b298      	uxth	r0, r3
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	b299      	uxth	r1, r3
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	f7fb f88f 	bl	80017cc <drawUpDownArrow>
		j=15;
 80066ae:	230f      	movs	r3, #15
 80066b0:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	b298      	uxth	r0, r3
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	b299      	uxth	r1, r3
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	b29a      	uxth	r2, r3
 80066be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f7fb f883 	bl	80017cc <drawUpDownArrow>
		break;
 80066c6:	e128      	b.n	800691a <drawStatusMenu+0x12e6>
 80066c8:	200000f8 	.word	0x200000f8
 80066cc:	20028cd4 	.word	0x20028cd4
 80066d0:	08017ac4 	.word	0x08017ac4
 80066d4:	080175ac 	.word	0x080175ac
 80066d8:	20000128 	.word	0x20000128
 80066dc:	20030aa0 	.word	0x20030aa0
 80066e0:	447a0000 	.word	0x447a0000
 80066e4:	080175b4 	.word	0x080175b4
 80066e8:	080175bc 	.word	0x080175bc
 80066ec:	080175c4 	.word	0x080175c4
 80066f0:	20028aaa 	.word	0x20028aaa
 80066f4:	20028aac 	.word	0x20028aac
 80066f8:	080175cc 	.word	0x080175cc
 80066fc:	080175dc 	.word	0x080175dc
 8006700:	08017e84 	.word	0x08017e84
	}
	case 3:{
		i=35;
 8006704:	2323      	movs	r3, #35	; 0x23
 8006706:	61fb      	str	r3, [r7, #28]
		j=75;
 8006708:	234b      	movs	r3, #75	; 0x4b
 800670a:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	b29b      	uxth	r3, r3
 8006710:	3b02      	subs	r3, #2
 8006712:	b299      	uxth	r1, r3
 8006714:	4b84      	ldr	r3, [pc, #528]	; (8006928 <drawStatusMenu+0x12f4>)
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	3b02      	subs	r3, #2
 800671a:	b29a      	uxth	r2, r3
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	b29b      	uxth	r3, r3
 8006720:	3302      	adds	r3, #2
 8006722:	b29b      	uxth	r3, r3
 8006724:	2002      	movs	r0, #2
 8006726:	f7fa fbb5 	bl	8000e94 <LCD_FillRect>
		j=55;
 800672a:	2337      	movs	r3, #55	; 0x37
 800672c:	61bb      	str	r3, [r7, #24]
		i=150;
 800672e:	2396      	movs	r3, #150	; 0x96
 8006730:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "DEV UI HEALTH:", fnt7x10);
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	b298      	uxth	r0, r3
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	b299      	uxth	r1, r3
 800673a:	4b7c      	ldr	r3, [pc, #496]	; (800692c <drawStatusMenu+0x12f8>)
 800673c:	4a7c      	ldr	r2, [pc, #496]	; (8006930 <drawStatusMenu+0x12fc>)
 800673e:	f7fa fef5 	bl	800152c <LCD_PutStr>
 8006742:	4603      	mov	r3, r0
 8006744:	461a      	mov	r2, r3
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	4413      	add	r3, r2
 800674a:	61fb      	str	r3, [r7, #28]

		i=40;
 800674c:	2328      	movs	r3, #40	; 0x28
 800674e:	61fb      	str	r3, [r7, #28]
		j=85;
 8006750:	2355      	movs	r3, #85	; 0x55
 8006752:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "LCD: ", fnt7x10);
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	b298      	uxth	r0, r3
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	b299      	uxth	r1, r3
 800675c:	4b73      	ldr	r3, [pc, #460]	; (800692c <drawStatusMenu+0x12f8>)
 800675e:	4a75      	ldr	r2, [pc, #468]	; (8006934 <drawStatusMenu+0x1300>)
 8006760:	f7fa fee4 	bl	800152c <LCD_PutStr>
 8006764:	4603      	mov	r3, r0
 8006766:	461a      	mov	r2, r3
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	4413      	add	r3, r2
 800676c:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "Do you see me? Must be working!", fnt7x10);
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	b298      	uxth	r0, r3
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	b299      	uxth	r1, r3
 8006776:	4b6d      	ldr	r3, [pc, #436]	; (800692c <drawStatusMenu+0x12f8>)
 8006778:	4a6f      	ldr	r2, [pc, #444]	; (8006938 <drawStatusMenu+0x1304>)
 800677a:	f7fa fed7 	bl	800152c <LCD_PutStr>

		i=40;
 800677e:	2328      	movs	r3, #40	; 0x28
 8006780:	61fb      	str	r3, [r7, #28]
		j+=25;
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	3319      	adds	r3, #25
 8006786:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "LED Driver: ", fnt7x10);
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	b298      	uxth	r0, r3
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	b299      	uxth	r1, r3
 8006790:	4b66      	ldr	r3, [pc, #408]	; (800692c <drawStatusMenu+0x12f8>)
 8006792:	4a6a      	ldr	r2, [pc, #424]	; (800693c <drawStatusMenu+0x1308>)
 8006794:	f7fa feca 	bl	800152c <LCD_PutStr>
 8006798:	4603      	mov	r3, r0
 800679a:	461a      	mov	r2, r3
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	4413      	add	r3, r2
 80067a0:	61fb      	str	r3, [r7, #28]
		if(!(errorLED.ledDriver)){
 80067a2:	4b67      	ldr	r3, [pc, #412]	; (8006940 <drawStatusMenu+0x130c>)
 80067a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d108      	bne.n	80067bc <drawStatusMenu+0x1188>
			LCD_PutStr(i, j, "Present", fnt7x10);
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	b298      	uxth	r0, r3
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	b299      	uxth	r1, r3
 80067b2:	4b5e      	ldr	r3, [pc, #376]	; (800692c <drawStatusMenu+0x12f8>)
 80067b4:	4a63      	ldr	r2, [pc, #396]	; (8006944 <drawStatusMenu+0x1310>)
 80067b6:	f7fa feb9 	bl	800152c <LCD_PutStr>
 80067ba:	e007      	b.n	80067cc <drawStatusMenu+0x1198>
		}
		else{
			LCD_PutStr(i, j, "Unresponsive", fnt7x10);
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	b298      	uxth	r0, r3
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	b299      	uxth	r1, r3
 80067c4:	4b59      	ldr	r3, [pc, #356]	; (800692c <drawStatusMenu+0x12f8>)
 80067c6:	4a60      	ldr	r2, [pc, #384]	; (8006948 <drawStatusMenu+0x1314>)
 80067c8:	f7fa feb0 	bl	800152c <LCD_PutStr>
		}

		i=40;
 80067cc:	2328      	movs	r3, #40	; 0x28
 80067ce:	61fb      	str	r3, [r7, #28]
		j+=25;
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	3319      	adds	r3, #25
 80067d4:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "SOC UART: ", fnt7x10);
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	b298      	uxth	r0, r3
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	b299      	uxth	r1, r3
 80067de:	4b53      	ldr	r3, [pc, #332]	; (800692c <drawStatusMenu+0x12f8>)
 80067e0:	4a5a      	ldr	r2, [pc, #360]	; (800694c <drawStatusMenu+0x1318>)
 80067e2:	f7fa fea3 	bl	800152c <LCD_PutStr>
 80067e6:	4603      	mov	r3, r0
 80067e8:	461a      	mov	r2, r3
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	4413      	add	r3, r2
 80067ee:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "Am I reading this now?", fnt7x10);
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	b298      	uxth	r0, r3
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	b299      	uxth	r1, r3
 80067f8:	4b4c      	ldr	r3, [pc, #304]	; (800692c <drawStatusMenu+0x12f8>)
 80067fa:	4a55      	ldr	r2, [pc, #340]	; (8006950 <drawStatusMenu+0x131c>)
 80067fc:	f7fa fe96 	bl	800152c <LCD_PutStr>

		i=40;
 8006800:	2328      	movs	r3, #40	; 0x28
 8006802:	61fb      	str	r3, [r7, #28]
		j+=25;
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	3319      	adds	r3, #25
 8006808:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "SOC I2C: ", fnt7x10);
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	b298      	uxth	r0, r3
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	b299      	uxth	r1, r3
 8006812:	4b46      	ldr	r3, [pc, #280]	; (800692c <drawStatusMenu+0x12f8>)
 8006814:	4a4f      	ldr	r2, [pc, #316]	; (8006954 <drawStatusMenu+0x1320>)
 8006816:	f7fa fe89 	bl	800152c <LCD_PutStr>
 800681a:	4603      	mov	r3, r0
 800681c:	461a      	mov	r2, r3
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	4413      	add	r3, r2
 8006822:	61fb      	str	r3, [r7, #28]
		i2cCheck=writeI2CRegister(socI2cVoltageMux.address, 0x11, 0x00,1,socI2cVoltageMux.i2cBank);
 8006824:	4b4c      	ldr	r3, [pc, #304]	; (8006958 <drawStatusMenu+0x1324>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	4618      	mov	r0, r3
 800682a:	4b4b      	ldr	r3, [pc, #300]	; (8006958 <drawStatusMenu+0x1324>)
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	2301      	movs	r3, #1
 8006832:	2200      	movs	r2, #0
 8006834:	2111      	movs	r1, #17
 8006836:	f7fc fe77 	bl	8003528 <writeI2CRegister>
 800683a:	6178      	str	r0, [r7, #20]
		if(i2cCheck){
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d008      	beq.n	8006854 <drawStatusMenu+0x1220>
			LCD_PutStr(i, j, "Present", fnt7x10);
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	b298      	uxth	r0, r3
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	b299      	uxth	r1, r3
 800684a:	4b38      	ldr	r3, [pc, #224]	; (800692c <drawStatusMenu+0x12f8>)
 800684c:	4a3d      	ldr	r2, [pc, #244]	; (8006944 <drawStatusMenu+0x1310>)
 800684e:	f7fa fe6d 	bl	800152c <LCD_PutStr>
 8006852:	e007      	b.n	8006864 <drawStatusMenu+0x1230>
		}
		else{
			LCD_PutStr(i, j, "Undetected", fnt7x10);
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	b298      	uxth	r0, r3
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	b299      	uxth	r1, r3
 800685c:	4b33      	ldr	r3, [pc, #204]	; (800692c <drawStatusMenu+0x12f8>)
 800685e:	4a3f      	ldr	r2, [pc, #252]	; (800695c <drawStatusMenu+0x1328>)
 8006860:	f7fa fe64 	bl	800152c <LCD_PutStr>
		}


		i=40;
 8006864:	2328      	movs	r3, #40	; 0x28
 8006866:	61fb      	str	r3, [r7, #28]
		j+=25;
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	3319      	adds	r3, #25
 800686c:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Dev UI Runtime: ", fnt7x10);
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	b298      	uxth	r0, r3
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	b299      	uxth	r1, r3
 8006876:	4b2d      	ldr	r3, [pc, #180]	; (800692c <drawStatusMenu+0x12f8>)
 8006878:	4a39      	ldr	r2, [pc, #228]	; (8006960 <drawStatusMenu+0x132c>)
 800687a:	f7fa fe57 	bl	800152c <LCD_PutStr>
 800687e:	4603      	mov	r3, r0
 8006880:	461a      	mov	r2, r3
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	4413      	add	r3, r2
 8006886:	61fb      	str	r3, [r7, #28]
		//GetTick provides runtime in milliseconds
		int runtime = (HAL_GetTick()/1000);
 8006888:	f002 fdf8 	bl	800947c <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	4b35      	ldr	r3, [pc, #212]	; (8006964 <drawStatusMenu+0x1330>)
 8006890:	fba3 2302 	umull	r2, r3, r3, r2
 8006894:	099b      	lsrs	r3, r3, #6
 8006896:	613b      	str	r3, [r7, #16]
		i+= LCD_PutInt(i, j, runtime, fnt7x10);
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	b298      	uxth	r0, r3
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	b299      	uxth	r1, r3
 80068a0:	4b22      	ldr	r3, [pc, #136]	; (800692c <drawStatusMenu+0x12f8>)
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	f7fa fe7a 	bl	800159c <LCD_PutInt>
 80068a8:	4603      	mov	r3, r0
 80068aa:	461a      	mov	r2, r3
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	4413      	add	r3, r2
 80068b0:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, " seconds", fnt7x10);
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	b298      	uxth	r0, r3
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	b299      	uxth	r1, r3
 80068ba:	4b1c      	ldr	r3, [pc, #112]	; (800692c <drawStatusMenu+0x12f8>)
 80068bc:	4a2a      	ldr	r2, [pc, #168]	; (8006968 <drawStatusMenu+0x1334>)
 80068be:	f7fa fe35 	bl	800152c <LCD_PutStr>
 80068c2:	4603      	mov	r3, r0
 80068c4:	461a      	mov	r2, r3
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	4413      	add	r3, r2
 80068ca:	61fb      	str	r3, [r7, #28]

		i=200;
 80068cc:	23c8      	movs	r3, #200	; 0xc8
 80068ce:	61fb      	str	r3, [r7, #28]
		j=15;
 80068d0:	230f      	movs	r3, #15
 80068d2:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	b298      	uxth	r0, r3
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	b299      	uxth	r1, r3
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	b29a      	uxth	r2, r3
 80068e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	f7fa ff72 	bl	80017cc <drawUpDownArrow>
		i=180;
 80068e8:	23b4      	movs	r3, #180	; 0xb4
 80068ea:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	b298      	uxth	r0, r3
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	b299      	uxth	r1, r3
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	f7fa ff66 	bl	80017cc <drawUpDownArrow>
		i=220;
 8006900:	23dc      	movs	r3, #220	; 0xdc
 8006902:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	b298      	uxth	r0, r3
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	b299      	uxth	r1, r3
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	b29a      	uxth	r2, r3
 8006910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006912:	b29b      	uxth	r3, r3
 8006914:	f7fa ff5a 	bl	80017cc <drawUpDownArrow>

		break;
 8006918:	bf00      	nop
	}
	}

	SMLCD_Flush();
 800691a:	f7f9 fedd 	bl	80006d8 <SMLCD_Flush>



}
 800691e:	bf00      	nop
 8006920:	3738      	adds	r7, #56	; 0x38
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20028aaa 	.word	0x20028aaa
 800692c:	08017ac4 	.word	0x08017ac4
 8006930:	080175ec 	.word	0x080175ec
 8006934:	080175fc 	.word	0x080175fc
 8006938:	08017604 	.word	0x08017604
 800693c:	08017624 	.word	0x08017624
 8006940:	200032d8 	.word	0x200032d8
 8006944:	08017634 	.word	0x08017634
 8006948:	0801763c 	.word	0x0801763c
 800694c:	0801764c 	.word	0x0801764c
 8006950:	08017658 	.word	0x08017658
 8006954:	08017670 	.word	0x08017670
 8006958:	200000e0 	.word	0x200000e0
 800695c:	080173b0 	.word	0x080173b0
 8006960:	0801767c 	.word	0x0801767c
 8006964:	10624dd3 	.word	0x10624dd3
 8006968:	08017690 	.word	0x08017690

0800696c <drawSystemInfoMenu>:

void drawSystemInfoMenu(int indicator){
 800696c:	b580      	push	{r7, lr}
 800696e:	b08e      	sub	sp, #56	; 0x38
 8006970:	af02      	add	r7, sp, #8
 8006972:	6078      	str	r0, [r7, #4]
	int i,j;
	//float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8006974:	2314      	movs	r3, #20
 8006976:	62fb      	str	r3, [r7, #44]	; 0x2c
	int indentAlignment=20;
 8006978:	2314      	movs	r3, #20
 800697a:	62bb      	str	r3, [r7, #40]	; 0x28
	int arrowUp = 0;
 800697c:	2300      	movs	r3, #0
 800697e:	627b      	str	r3, [r7, #36]	; 0x24
	int arrowDown=1;
 8006980:	2301      	movs	r3, #1
 8006982:	623b      	str	r3, [r7, #32]
	int arrowSize=3;
 8006984:	2303      	movs	r3, #3
 8006986:	61fb      	str	r3, [r7, #28]
	int otherBoardAlignment = 230;
 8006988:	23e6      	movs	r3, #230	; 0xe6
 800698a:	61bb      	str	r3, [r7, #24]
	previousMenu=0;
 800698c:	4b8f      	ldr	r3, [pc, #572]	; (8006bcc <drawSystemInfoMenu+0x260>)
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8006992:	f7f9 ffeb 	bl	800096c <LCD_Clear>
	getLatestADC();
 8006996:	f001 f911 	bl	8007bbc <getLatestADC>
	drawMenuHeader();
 800699a:	f001 f853 	bl	8007a44 <drawMenuHeader>
	i  = 135;
 800699e:	2387      	movs	r3, #135	; 0x87
 80069a0:	617b      	str	r3, [r7, #20]
	j = 24;
 80069a2:	2318      	movs	r3, #24
 80069a4:	613b      	str	r3, [r7, #16]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	b299      	uxth	r1, r3
 80069aa:	4b89      	ldr	r3, [pc, #548]	; (8006bd0 <drawSystemInfoMenu+0x264>)
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	3b02      	subs	r3, #2
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	3303      	adds	r3, #3
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2002      	movs	r0, #2
 80069bc:	f7fa fa6a 	bl	8000e94 <LCD_FillRect>
//	i  = 135;
//	j += 12;
//	//horizontal divider
//	LCD_FillRect(2, j, scr_width - 2, j + 3);

	switch(indicator){
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d003      	beq.n	80069ce <drawSystemInfoMenu+0x62>
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	f000 82be 	beq.w	8006f48 <drawSystemInfoMenu+0x5dc>
 80069cc:	e3fe      	b.n	80071cc <drawSystemInfoMenu+0x860>
	case 1:{
		//i=35;
		//j=90;
		//LCD_FillRect(2, j - 2, scr_width-2, j + 2);

		j=45;
 80069ce:	232d      	movs	r3, #45	; 0x2d
 80069d0:	613b      	str	r3, [r7, #16]
		i=42;
 80069d2:	232a      	movs	r3, #42	; 0x2a
 80069d4:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "FFU Version:", fnt7x10);
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	b298      	uxth	r0, r3
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	b299      	uxth	r1, r3
 80069de:	4b7d      	ldr	r3, [pc, #500]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 80069e0:	4a7d      	ldr	r2, [pc, #500]	; (8006bd8 <drawSystemInfoMenu+0x26c>)
 80069e2:	f7fa fda3 	bl	800152c <LCD_PutStr>
 80069e6:	4603      	mov	r3, r0
 80069e8:	461a      	mov	r2, r3
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	4413      	add	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Unknown", fnt7x10);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	b298      	uxth	r0, r3
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	b299      	uxth	r1, r3
 80069f8:	4b76      	ldr	r3, [pc, #472]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 80069fa:	4a78      	ldr	r2, [pc, #480]	; (8006bdc <drawSystemInfoMenu+0x270>)
 80069fc:	f7fa fd96 	bl	800152c <LCD_PutStr>

		j+=15;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	330f      	adds	r3, #15
 8006a04:	613b      	str	r3, [r7, #16]
		i=42;
 8006a06:	232a      	movs	r3, #42	; 0x2a
 8006a08:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "UI Firmware Version: ", fnt7x10);
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	b298      	uxth	r0, r3
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	b299      	uxth	r1, r3
 8006a12:	4b70      	ldr	r3, [pc, #448]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 8006a14:	4a72      	ldr	r2, [pc, #456]	; (8006be0 <drawSystemInfoMenu+0x274>)
 8006a16:	f7fa fd89 	bl	800152c <LCD_PutStr>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	4413      	add	r3, r2
 8006a22:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "V0.0.1", fnt7x10);
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	b298      	uxth	r0, r3
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	b299      	uxth	r1, r3
 8006a2c:	4b69      	ldr	r3, [pc, #420]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 8006a2e:	4a6d      	ldr	r2, [pc, #436]	; (8006be4 <drawSystemInfoMenu+0x278>)
 8006a30:	f7fa fd7c 	bl	800152c <LCD_PutStr>

		j+=30;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	331e      	adds	r3, #30
 8006a38:	613b      	str	r3, [r7, #16]
		i=10;
 8006a3a:	230a      	movs	r3, #10
 8006a3c:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Project:", fnt7x10);
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	b298      	uxth	r0, r3
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	b299      	uxth	r1, r3
 8006a46:	4b63      	ldr	r3, [pc, #396]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 8006a48:	4a67      	ldr	r2, [pc, #412]	; (8006be8 <drawSystemInfoMenu+0x27c>)
 8006a4a:	f7fa fd6f 	bl	800152c <LCD_PutStr>

		j+=15;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	330f      	adds	r3, #15
 8006a52:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a56:	617b      	str	r3, [r7, #20]
		if((ZION.SOC_BoardID==1) || (ZION.ASIC_BoardID==1) || (ZION.DISPLAY_BoardID==1)){
 8006a58:	4b64      	ldr	r3, [pc, #400]	; (8006bec <drawSystemInfoMenu+0x280>)
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d007      	beq.n	8006a70 <drawSystemInfoMenu+0x104>
 8006a60:	4b62      	ldr	r3, [pc, #392]	; (8006bec <drawSystemInfoMenu+0x280>)
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d003      	beq.n	8006a70 <drawSystemInfoMenu+0x104>
 8006a68:	4b60      	ldr	r3, [pc, #384]	; (8006bec <drawSystemInfoMenu+0x280>)
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d108      	bne.n	8006a82 <drawSystemInfoMenu+0x116>
			LCD_PutStr(i, j, "Atlas", fnt7x10);
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	b298      	uxth	r0, r3
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	b299      	uxth	r1, r3
 8006a78:	4b56      	ldr	r3, [pc, #344]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 8006a7a:	4a5d      	ldr	r2, [pc, #372]	; (8006bf0 <drawSystemInfoMenu+0x284>)
 8006a7c:	f7fa fd56 	bl	800152c <LCD_PutStr>
 8006a80:	e007      	b.n	8006a92 <drawSystemInfoMenu+0x126>
		}
		else{
			LCD_PutStr(i, j, "Unknown", fnt7x10);
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	b298      	uxth	r0, r3
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	b299      	uxth	r1, r3
 8006a8a:	4b52      	ldr	r3, [pc, #328]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 8006a8c:	4a53      	ldr	r2, [pc, #332]	; (8006bdc <drawSystemInfoMenu+0x270>)
 8006a8e:	f7fa fd4d 	bl	800152c <LCD_PutStr>
		}

		j+=15;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	330f      	adds	r3, #15
 8006a96:	613b      	str	r3, [r7, #16]
		i=10;
 8006a98:	230a      	movs	r3, #10
 8006a9a:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "Board Versions: ", fnt7x10);
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	b298      	uxth	r0, r3
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	b299      	uxth	r1, r3
 8006aa4:	4b4b      	ldr	r3, [pc, #300]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 8006aa6:	4a53      	ldr	r2, [pc, #332]	; (8006bf4 <drawSystemInfoMenu+0x288>)
 8006aa8:	f7fa fd40 	bl	800152c <LCD_PutStr>
 8006aac:	4603      	mov	r3, r0
 8006aae:	461a      	mov	r2, r3
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]
		i=otherBoardAlignment;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Other Boards: ", fnt7x10);
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	b298      	uxth	r0, r3
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	b299      	uxth	r1, r3
 8006ac2:	4b44      	ldr	r3, [pc, #272]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 8006ac4:	4a4c      	ldr	r2, [pc, #304]	; (8006bf8 <drawSystemInfoMenu+0x28c>)
 8006ac6:	f7fa fd31 	bl	800152c <LCD_PutStr>

		j+=15;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	330f      	adds	r3, #15
 8006ace:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	b298      	uxth	r0, r3
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	b299      	uxth	r1, r3
 8006adc:	4b3d      	ldr	r3, [pc, #244]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 8006ade:	4a47      	ldr	r2, [pc, #284]	; (8006bfc <drawSystemInfoMenu+0x290>)
 8006ae0:	f7fa fd24 	bl	800152c <LCD_PutStr>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	4413      	add	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]
		if(ZION.SOC_BoardID==1){
 8006aee:	4b3f      	ldr	r3, [pc, #252]	; (8006bec <drawSystemInfoMenu+0x280>)
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d14a      	bne.n	8006b8c <drawSystemInfoMenu+0x220>
			i+=LCD_PutStr(i, j, "TRIDENT ", fnt7x10);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	b298      	uxth	r0, r3
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	b299      	uxth	r1, r3
 8006afe:	4b35      	ldr	r3, [pc, #212]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 8006b00:	4a3f      	ldr	r2, [pc, #252]	; (8006c00 <drawSystemInfoMenu+0x294>)
 8006b02:	f7fa fd13 	bl	800152c <LCD_PutStr>
 8006b06:	4603      	mov	r3, r0
 8006b08:	461a      	mov	r2, r3
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]
			switch(ZION.SOC_BoardFab){
 8006b10:	4b36      	ldr	r3, [pc, #216]	; (8006bec <drawSystemInfoMenu+0x280>)
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d82e      	bhi.n	8006b78 <drawSystemInfoMenu+0x20c>
 8006b1a:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <drawSystemInfoMenu+0x1b4>)
 8006b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b20:	08006b31 	.word	0x08006b31
 8006b24:	08006b43 	.word	0x08006b43
 8006b28:	08006b55 	.word	0x08006b55
 8006b2c:	08006b67 	.word	0x08006b67
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	b298      	uxth	r0, r3
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	b299      	uxth	r1, r3
 8006b38:	4b26      	ldr	r3, [pc, #152]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 8006b3a:	4a32      	ldr	r2, [pc, #200]	; (8006c04 <drawSystemInfoMenu+0x298>)
 8006b3c:	f7fa fcf6 	bl	800152c <LCD_PutStr>
				break;
 8006b40:	e076      	b.n	8006c30 <drawSystemInfoMenu+0x2c4>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	b298      	uxth	r0, r3
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	b299      	uxth	r1, r3
 8006b4a:	4b22      	ldr	r3, [pc, #136]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 8006b4c:	4a2e      	ldr	r2, [pc, #184]	; (8006c08 <drawSystemInfoMenu+0x29c>)
 8006b4e:	f7fa fced 	bl	800152c <LCD_PutStr>
				break;
 8006b52:	e06d      	b.n	8006c30 <drawSystemInfoMenu+0x2c4>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	b298      	uxth	r0, r3
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	b299      	uxth	r1, r3
 8006b5c:	4b1d      	ldr	r3, [pc, #116]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 8006b5e:	4a2b      	ldr	r2, [pc, #172]	; (8006c0c <drawSystemInfoMenu+0x2a0>)
 8006b60:	f7fa fce4 	bl	800152c <LCD_PutStr>
				break;
 8006b64:	e064      	b.n	8006c30 <drawSystemInfoMenu+0x2c4>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	b298      	uxth	r0, r3
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	b299      	uxth	r1, r3
 8006b6e:	4b19      	ldr	r3, [pc, #100]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 8006b70:	4a27      	ldr	r2, [pc, #156]	; (8006c10 <drawSystemInfoMenu+0x2a4>)
 8006b72:	f7fa fcdb 	bl	800152c <LCD_PutStr>
				break;
 8006b76:	e05b      	b.n	8006c30 <drawSystemInfoMenu+0x2c4>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	b298      	uxth	r0, r3
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	b299      	uxth	r1, r3
 8006b80:	4b14      	ldr	r3, [pc, #80]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 8006b82:	4a24      	ldr	r2, [pc, #144]	; (8006c14 <drawSystemInfoMenu+0x2a8>)
 8006b84:	f7fa fcd2 	bl	800152c <LCD_PutStr>
				break;
 8006b88:	bf00      	nop
 8006b8a:	e051      	b.n	8006c30 <drawSystemInfoMenu+0x2c4>
			}
			}
		}
		else{
			if(ZION.SOC_EEPROM_Detected){
 8006b8c:	4b17      	ldr	r3, [pc, #92]	; (8006bec <drawSystemInfoMenu+0x280>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d045      	beq.n	8006c20 <drawSystemInfoMenu+0x2b4>
				if(ZION.SOC_BoardFab == -2){
 8006b94:	4b15      	ldr	r3, [pc, #84]	; (8006bec <drawSystemInfoMenu+0x280>)
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	f113 0f02 	cmn.w	r3, #2
 8006b9c:	d108      	bne.n	8006bb0 <drawSystemInfoMenu+0x244>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	b298      	uxth	r0, r3
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	b299      	uxth	r1, r3
 8006ba6:	4b0b      	ldr	r3, [pc, #44]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 8006ba8:	4a1b      	ldr	r2, [pc, #108]	; (8006c18 <drawSystemInfoMenu+0x2ac>)
 8006baa:	f7fa fcbf 	bl	800152c <LCD_PutStr>
 8006bae:	e03f      	b.n	8006c30 <drawSystemInfoMenu+0x2c4>
				}
				else if(ZION.SOC_BoardFab ==-1){
 8006bb0:	4b0e      	ldr	r3, [pc, #56]	; (8006bec <drawSystemInfoMenu+0x280>)
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb8:	d13a      	bne.n	8006c30 <drawSystemInfoMenu+0x2c4>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	b298      	uxth	r0, r3
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	b299      	uxth	r1, r3
 8006bc2:	4b04      	ldr	r3, [pc, #16]	; (8006bd4 <drawSystemInfoMenu+0x268>)
 8006bc4:	4a15      	ldr	r2, [pc, #84]	; (8006c1c <drawSystemInfoMenu+0x2b0>)
 8006bc6:	f7fa fcb1 	bl	800152c <LCD_PutStr>
 8006bca:	e031      	b.n	8006c30 <drawSystemInfoMenu+0x2c4>
 8006bcc:	20003378 	.word	0x20003378
 8006bd0:	20028aaa 	.word	0x20028aaa
 8006bd4:	08017ac4 	.word	0x08017ac4
 8006bd8:	0801769c 	.word	0x0801769c
 8006bdc:	080176ac 	.word	0x080176ac
 8006be0:	080176b4 	.word	0x080176b4
 8006be4:	080176cc 	.word	0x080176cc
 8006be8:	080176d4 	.word	0x080176d4
 8006bec:	20003274 	.word	0x20003274
 8006bf0:	080176e0 	.word	0x080176e0
 8006bf4:	080176e8 	.word	0x080176e8
 8006bf8:	080176fc 	.word	0x080176fc
 8006bfc:	0801739c 	.word	0x0801739c
 8006c00:	0801770c 	.word	0x0801770c
 8006c04:	08017718 	.word	0x08017718
 8006c08:	08017720 	.word	0x08017720
 8006c0c:	08017728 	.word	0x08017728
 8006c10:	08017730 	.word	0x08017730
 8006c14:	08017738 	.word	0x08017738
 8006c18:	08017740 	.word	0x08017740
 8006c1c:	08017758 	.word	0x08017758
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	b298      	uxth	r0, r3
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	b299      	uxth	r1, r3
 8006c28:	4b93      	ldr	r3, [pc, #588]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006c2a:	4a94      	ldr	r2, [pc, #592]	; (8006e7c <drawSystemInfoMenu+0x510>)
 8006c2c:	f7fa fc7e 	bl	800152c <LCD_PutStr>
			}
		}
		i=otherBoardAlignment+indentAlignment;
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	4413      	add	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	b298      	uxth	r0, r3
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	b299      	uxth	r1, r3
 8006c40:	4b8d      	ldr	r3, [pc, #564]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006c42:	4a8f      	ldr	r2, [pc, #572]	; (8006e80 <drawSystemInfoMenu+0x514>)
 8006c44:	f7fa fc72 	bl	800152c <LCD_PutStr>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	4413      	add	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]
		if(ZION.zionSwitch){
 8006c52:	4b8c      	ldr	r3, [pc, #560]	; (8006e84 <drawSystemInfoMenu+0x518>)
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d008      	beq.n	8006c6c <drawSystemInfoMenu+0x300>
			LCD_PutStr(i, j, "Not detected", fnt7x10);
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	b298      	uxth	r0, r3
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	b299      	uxth	r1, r3
 8006c62:	4b85      	ldr	r3, [pc, #532]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006c64:	4a88      	ldr	r2, [pc, #544]	; (8006e88 <drawSystemInfoMenu+0x51c>)
 8006c66:	f7fa fc61 	bl	800152c <LCD_PutStr>
 8006c6a:	e007      	b.n	8006c7c <drawSystemInfoMenu+0x310>
		}
		else{
			LCD_PutStr(i, j, "Detected", fnt7x10);
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	b298      	uxth	r0, r3
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	b299      	uxth	r1, r3
 8006c74:	4b80      	ldr	r3, [pc, #512]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006c76:	4a85      	ldr	r2, [pc, #532]	; (8006e8c <drawSystemInfoMenu+0x520>)
 8006c78:	f7fa fc58 	bl	800152c <LCD_PutStr>
		}

		j+=15;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	330f      	adds	r3, #15
 8006c80:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	b298      	uxth	r0, r3
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	b299      	uxth	r1, r3
 8006c8e:	4b7a      	ldr	r3, [pc, #488]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006c90:	4a7f      	ldr	r2, [pc, #508]	; (8006e90 <drawSystemInfoMenu+0x524>)
 8006c92:	f7fa fc4b 	bl	800152c <LCD_PutStr>
 8006c96:	4603      	mov	r3, r0
 8006c98:	461a      	mov	r2, r3
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]
		if(ZION.ASIC_BoardID==1){
 8006ca0:	4b78      	ldr	r3, [pc, #480]	; (8006e84 <drawSystemInfoMenu+0x518>)
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d14b      	bne.n	8006d40 <drawSystemInfoMenu+0x3d4>
			i+=LCD_PutStr(i, j, "TOGA ", fnt7x10);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	b298      	uxth	r0, r3
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	b299      	uxth	r1, r3
 8006cb0:	4b71      	ldr	r3, [pc, #452]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006cb2:	4a78      	ldr	r2, [pc, #480]	; (8006e94 <drawSystemInfoMenu+0x528>)
 8006cb4:	f7fa fc3a 	bl	800152c <LCD_PutStr>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	461a      	mov	r2, r3
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	617b      	str	r3, [r7, #20]
			switch(ZION.ASIC_BoardFab){
 8006cc2:	4b70      	ldr	r3, [pc, #448]	; (8006e84 <drawSystemInfoMenu+0x518>)
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d82f      	bhi.n	8006d2c <drawSystemInfoMenu+0x3c0>
 8006ccc:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <drawSystemInfoMenu+0x368>)
 8006cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd2:	bf00      	nop
 8006cd4:	08006ce5 	.word	0x08006ce5
 8006cd8:	08006cf7 	.word	0x08006cf7
 8006cdc:	08006d09 	.word	0x08006d09
 8006ce0:	08006d1b 	.word	0x08006d1b
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	b298      	uxth	r0, r3
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	b299      	uxth	r1, r3
 8006cec:	4b62      	ldr	r3, [pc, #392]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006cee:	4a6a      	ldr	r2, [pc, #424]	; (8006e98 <drawSystemInfoMenu+0x52c>)
 8006cf0:	f7fa fc1c 	bl	800152c <LCD_PutStr>
				break;
 8006cf4:	e04c      	b.n	8006d90 <drawSystemInfoMenu+0x424>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	b298      	uxth	r0, r3
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	b299      	uxth	r1, r3
 8006cfe:	4b5e      	ldr	r3, [pc, #376]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006d00:	4a66      	ldr	r2, [pc, #408]	; (8006e9c <drawSystemInfoMenu+0x530>)
 8006d02:	f7fa fc13 	bl	800152c <LCD_PutStr>
				break;
 8006d06:	e043      	b.n	8006d90 <drawSystemInfoMenu+0x424>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	b298      	uxth	r0, r3
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	b299      	uxth	r1, r3
 8006d10:	4b59      	ldr	r3, [pc, #356]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006d12:	4a63      	ldr	r2, [pc, #396]	; (8006ea0 <drawSystemInfoMenu+0x534>)
 8006d14:	f7fa fc0a 	bl	800152c <LCD_PutStr>
				break;
 8006d18:	e03a      	b.n	8006d90 <drawSystemInfoMenu+0x424>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	b298      	uxth	r0, r3
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	b299      	uxth	r1, r3
 8006d22:	4b55      	ldr	r3, [pc, #340]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006d24:	4a5f      	ldr	r2, [pc, #380]	; (8006ea4 <drawSystemInfoMenu+0x538>)
 8006d26:	f7fa fc01 	bl	800152c <LCD_PutStr>
				break;
 8006d2a:	e031      	b.n	8006d90 <drawSystemInfoMenu+0x424>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	b298      	uxth	r0, r3
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	b299      	uxth	r1, r3
 8006d34:	4b50      	ldr	r3, [pc, #320]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006d36:	4a5c      	ldr	r2, [pc, #368]	; (8006ea8 <drawSystemInfoMenu+0x53c>)
 8006d38:	f7fa fbf8 	bl	800152c <LCD_PutStr>
				break;
 8006d3c:	bf00      	nop
 8006d3e:	e027      	b.n	8006d90 <drawSystemInfoMenu+0x424>
			}
			}
		}
		else{
			if(ZION.ASIC_EEPROM_Detected){
 8006d40:	4b50      	ldr	r3, [pc, #320]	; (8006e84 <drawSystemInfoMenu+0x518>)
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01b      	beq.n	8006d80 <drawSystemInfoMenu+0x414>
				if(ZION.ASIC_BoardFab == -2){
 8006d48:	4b4e      	ldr	r3, [pc, #312]	; (8006e84 <drawSystemInfoMenu+0x518>)
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	f113 0f02 	cmn.w	r3, #2
 8006d50:	d108      	bne.n	8006d64 <drawSystemInfoMenu+0x3f8>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	b298      	uxth	r0, r3
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	b299      	uxth	r1, r3
 8006d5a:	4b47      	ldr	r3, [pc, #284]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006d5c:	4a53      	ldr	r2, [pc, #332]	; (8006eac <drawSystemInfoMenu+0x540>)
 8006d5e:	f7fa fbe5 	bl	800152c <LCD_PutStr>
 8006d62:	e015      	b.n	8006d90 <drawSystemInfoMenu+0x424>
				}
				else if(ZION.ASIC_BoardFab ==-1){
 8006d64:	4b47      	ldr	r3, [pc, #284]	; (8006e84 <drawSystemInfoMenu+0x518>)
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d110      	bne.n	8006d90 <drawSystemInfoMenu+0x424>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	b298      	uxth	r0, r3
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	b299      	uxth	r1, r3
 8006d76:	4b40      	ldr	r3, [pc, #256]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006d78:	4a4d      	ldr	r2, [pc, #308]	; (8006eb0 <drawSystemInfoMenu+0x544>)
 8006d7a:	f7fa fbd7 	bl	800152c <LCD_PutStr>
 8006d7e:	e007      	b.n	8006d90 <drawSystemInfoMenu+0x424>
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	b298      	uxth	r0, r3
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	b299      	uxth	r1, r3
 8006d88:	4b3b      	ldr	r3, [pc, #236]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006d8a:	4a3c      	ldr	r2, [pc, #240]	; (8006e7c <drawSystemInfoMenu+0x510>)
 8006d8c:	f7fa fbce 	bl	800152c <LCD_PutStr>
			}
		}

		j+=15;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	330f      	adds	r3, #15
 8006d94:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d98:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "DISPLAY: ", fnt7x10);
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	b298      	uxth	r0, r3
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	b299      	uxth	r1, r3
 8006da2:	4b35      	ldr	r3, [pc, #212]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006da4:	4a43      	ldr	r2, [pc, #268]	; (8006eb4 <drawSystemInfoMenu+0x548>)
 8006da6:	f7fa fbc1 	bl	800152c <LCD_PutStr>
 8006daa:	4603      	mov	r3, r0
 8006dac:	461a      	mov	r2, r3
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	4413      	add	r3, r2
 8006db2:	617b      	str	r3, [r7, #20]
		if(ZION.DISPLAY_BoardID==1){
 8006db4:	4b33      	ldr	r3, [pc, #204]	; (8006e84 <drawSystemInfoMenu+0x518>)
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d14b      	bne.n	8006e54 <drawSystemInfoMenu+0x4e8>
			i+=LCD_PutStr(i, j, "KANU ", fnt7x10);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	b298      	uxth	r0, r3
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	b299      	uxth	r1, r3
 8006dc4:	4b2c      	ldr	r3, [pc, #176]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006dc6:	4a3c      	ldr	r2, [pc, #240]	; (8006eb8 <drawSystemInfoMenu+0x54c>)
 8006dc8:	f7fa fbb0 	bl	800152c <LCD_PutStr>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	461a      	mov	r2, r3
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]
			switch(ZION.DISPLAY_BoardFab){
 8006dd6:	4b2b      	ldr	r3, [pc, #172]	; (8006e84 <drawSystemInfoMenu+0x518>)
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d82f      	bhi.n	8006e40 <drawSystemInfoMenu+0x4d4>
 8006de0:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <drawSystemInfoMenu+0x47c>)
 8006de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de6:	bf00      	nop
 8006de8:	08006df9 	.word	0x08006df9
 8006dec:	08006e0b 	.word	0x08006e0b
 8006df0:	08006e1d 	.word	0x08006e1d
 8006df4:	08006e2f 	.word	0x08006e2f
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	b298      	uxth	r0, r3
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	b299      	uxth	r1, r3
 8006e00:	4b1d      	ldr	r3, [pc, #116]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006e02:	4a25      	ldr	r2, [pc, #148]	; (8006e98 <drawSystemInfoMenu+0x52c>)
 8006e04:	f7fa fb92 	bl	800152c <LCD_PutStr>
				break;
 8006e08:	e06e      	b.n	8006ee8 <drawSystemInfoMenu+0x57c>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	b298      	uxth	r0, r3
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	b299      	uxth	r1, r3
 8006e12:	4b19      	ldr	r3, [pc, #100]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006e14:	4a21      	ldr	r2, [pc, #132]	; (8006e9c <drawSystemInfoMenu+0x530>)
 8006e16:	f7fa fb89 	bl	800152c <LCD_PutStr>
				break;
 8006e1a:	e065      	b.n	8006ee8 <drawSystemInfoMenu+0x57c>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	b298      	uxth	r0, r3
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	b299      	uxth	r1, r3
 8006e24:	4b14      	ldr	r3, [pc, #80]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006e26:	4a1e      	ldr	r2, [pc, #120]	; (8006ea0 <drawSystemInfoMenu+0x534>)
 8006e28:	f7fa fb80 	bl	800152c <LCD_PutStr>
				break;
 8006e2c:	e05c      	b.n	8006ee8 <drawSystemInfoMenu+0x57c>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	b298      	uxth	r0, r3
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	b299      	uxth	r1, r3
 8006e36:	4b10      	ldr	r3, [pc, #64]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006e38:	4a1a      	ldr	r2, [pc, #104]	; (8006ea4 <drawSystemInfoMenu+0x538>)
 8006e3a:	f7fa fb77 	bl	800152c <LCD_PutStr>
				break;
 8006e3e:	e053      	b.n	8006ee8 <drawSystemInfoMenu+0x57c>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	b298      	uxth	r0, r3
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	b299      	uxth	r1, r3
 8006e48:	4b0b      	ldr	r3, [pc, #44]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006e4a:	4a17      	ldr	r2, [pc, #92]	; (8006ea8 <drawSystemInfoMenu+0x53c>)
 8006e4c:	f7fa fb6e 	bl	800152c <LCD_PutStr>
				break;
 8006e50:	bf00      	nop
 8006e52:	e049      	b.n	8006ee8 <drawSystemInfoMenu+0x57c>
			}
			}
		}
		else{
			if(ZION.DISPLAY_EEPROM_Detected){
 8006e54:	4b0b      	ldr	r3, [pc, #44]	; (8006e84 <drawSystemInfoMenu+0x518>)
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d03d      	beq.n	8006ed8 <drawSystemInfoMenu+0x56c>
				if(ZION.DISPLAY_BoardFab == -2){
 8006e5c:	4b09      	ldr	r3, [pc, #36]	; (8006e84 <drawSystemInfoMenu+0x518>)
 8006e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e60:	f113 0f02 	cmn.w	r3, #2
 8006e64:	d12a      	bne.n	8006ebc <drawSystemInfoMenu+0x550>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	b298      	uxth	r0, r3
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	b299      	uxth	r1, r3
 8006e6e:	4b02      	ldr	r3, [pc, #8]	; (8006e78 <drawSystemInfoMenu+0x50c>)
 8006e70:	4a0e      	ldr	r2, [pc, #56]	; (8006eac <drawSystemInfoMenu+0x540>)
 8006e72:	f7fa fb5b 	bl	800152c <LCD_PutStr>
 8006e76:	e037      	b.n	8006ee8 <drawSystemInfoMenu+0x57c>
 8006e78:	08017ac4 	.word	0x08017ac4
 8006e7c:	08017770 	.word	0x08017770
 8006e80:	08017784 	.word	0x08017784
 8006e84:	20003274 	.word	0x20003274
 8006e88:	0801778c 	.word	0x0801778c
 8006e8c:	080173a4 	.word	0x080173a4
 8006e90:	080173d8 	.word	0x080173d8
 8006e94:	0801779c 	.word	0x0801779c
 8006e98:	08017718 	.word	0x08017718
 8006e9c:	08017720 	.word	0x08017720
 8006ea0:	08017728 	.word	0x08017728
 8006ea4:	08017730 	.word	0x08017730
 8006ea8:	08017738 	.word	0x08017738
 8006eac:	08017740 	.word	0x08017740
 8006eb0:	08017758 	.word	0x08017758
 8006eb4:	080177a4 	.word	0x080177a4
 8006eb8:	080177b0 	.word	0x080177b0
				}
				else if(ZION.DISPLAY_BoardFab ==-1){
 8006ebc:	4b1e      	ldr	r3, [pc, #120]	; (8006f38 <drawSystemInfoMenu+0x5cc>)
 8006ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec4:	d110      	bne.n	8006ee8 <drawSystemInfoMenu+0x57c>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	b298      	uxth	r0, r3
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	b299      	uxth	r1, r3
 8006ece:	4b1b      	ldr	r3, [pc, #108]	; (8006f3c <drawSystemInfoMenu+0x5d0>)
 8006ed0:	4a1b      	ldr	r2, [pc, #108]	; (8006f40 <drawSystemInfoMenu+0x5d4>)
 8006ed2:	f7fa fb2b 	bl	800152c <LCD_PutStr>
 8006ed6:	e007      	b.n	8006ee8 <drawSystemInfoMenu+0x57c>
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	b298      	uxth	r0, r3
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	b299      	uxth	r1, r3
 8006ee0:	4b16      	ldr	r3, [pc, #88]	; (8006f3c <drawSystemInfoMenu+0x5d0>)
 8006ee2:	4a18      	ldr	r2, [pc, #96]	; (8006f44 <drawSystemInfoMenu+0x5d8>)
 8006ee4:	f7fa fb22 	bl	800152c <LCD_PutStr>
			}
		}

		i=200;
 8006ee8:	23c8      	movs	r3, #200	; 0xc8
 8006eea:	617b      	str	r3, [r7, #20]
		j=220;
 8006eec:	23dc      	movs	r3, #220	; 0xdc
 8006eee:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	b298      	uxth	r0, r3
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	b299      	uxth	r1, r3
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f7fa fc64 	bl	80017cc <drawUpDownArrow>
		i=180;
 8006f04:	23b4      	movs	r3, #180	; 0xb4
 8006f06:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	b298      	uxth	r0, r3
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	b299      	uxth	r1, r3
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	f7fa fc58 	bl	80017cc <drawUpDownArrow>
		i=220;
 8006f1c:	23dc      	movs	r3, #220	; 0xdc
 8006f1e:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	b298      	uxth	r0, r3
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	b299      	uxth	r1, r3
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f7fa fc4c 	bl	80017cc <drawUpDownArrow>
		break;
 8006f34:	e14a      	b.n	80071cc <drawSystemInfoMenu+0x860>
 8006f36:	bf00      	nop
 8006f38:	20003274 	.word	0x20003274
 8006f3c:	08017ac4 	.word	0x08017ac4
 8006f40:	08017758 	.word	0x08017758
 8006f44:	08017770 	.word	0x08017770
	}
	case 2:{
		j=45;
 8006f48:	232d      	movs	r3, #45	; 0x2d
 8006f4a:	613b      	str	r3, [r7, #16]
		i=10;
 8006f4c:	230a      	movs	r3, #10
 8006f4e:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "DEV UI BANK VOLTAGES:", fnt7x10);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	b298      	uxth	r0, r3
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	b299      	uxth	r1, r3
 8006f58:	4b9f      	ldr	r3, [pc, #636]	; (80071d8 <drawSystemInfoMenu+0x86c>)
 8006f5a:	4aa0      	ldr	r2, [pc, #640]	; (80071dc <drawSystemInfoMenu+0x870>)
 8006f5c:	f7fa fae6 	bl	800152c <LCD_PutStr>

		j+=25;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	3319      	adds	r3, #25
 8006f64:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE UART: ", fnt7x10);
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	b298      	uxth	r0, r3
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	b299      	uxth	r1, r3
 8006f72:	4b99      	ldr	r3, [pc, #612]	; (80071d8 <drawSystemInfoMenu+0x86c>)
 8006f74:	4a9a      	ldr	r2, [pc, #616]	; (80071e0 <drawSystemInfoMenu+0x874>)
 8006f76:	f7fa fad9 	bl	800152c <LCD_PutStr>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	4413      	add	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareUartADC];
 8006f84:	4b97      	ldr	r3, [pc, #604]	; (80071e4 <drawSystemInfoMenu+0x878>)
 8006f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f88:	4a97      	ldr	r2, [pc, #604]	; (80071e8 <drawSystemInfoMenu+0x87c>)
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	edd3 7a00 	vldr	s15, [r3]
 8006f92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006f96:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006f9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f9e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006fa2:	ee17 3a90 	vmov	r3, s15
 8006fa6:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	b298      	uxth	r0, r3
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	b299      	uxth	r1, r3
 8006fb0:	4b89      	ldr	r3, [pc, #548]	; (80071d8 <drawSystemInfoMenu+0x86c>)
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	f7fa fb56 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	3319      	adds	r3, #25
 8006fc0:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc4:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE I2C: ", fnt7x10);
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	b298      	uxth	r0, r3
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	b299      	uxth	r1, r3
 8006fce:	4b82      	ldr	r3, [pc, #520]	; (80071d8 <drawSystemInfoMenu+0x86c>)
 8006fd0:	4a86      	ldr	r2, [pc, #536]	; (80071ec <drawSystemInfoMenu+0x880>)
 8006fd2:	f7fa faab 	bl	800152c <LCD_PutStr>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	461a      	mov	r2, r3
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	4413      	add	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareI2cADC];
 8006fe0:	4b80      	ldr	r3, [pc, #512]	; (80071e4 <drawSystemInfoMenu+0x878>)
 8006fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe4:	4a80      	ldr	r2, [pc, #512]	; (80071e8 <drawSystemInfoMenu+0x87c>)
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	edd3 7a00 	vldr	s15, [r3]
 8006fee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006ff2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006ff6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006ffa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006ffe:	ee17 3a90 	vmov	r3, s15
 8007002:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	b298      	uxth	r0, r3
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	b299      	uxth	r1, r3
 800700c:	4b72      	ldr	r3, [pc, #456]	; (80071d8 <drawSystemInfoMenu+0x86c>)
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	2301      	movs	r3, #1
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	f7fa fb28 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	3319      	adds	r3, #25
 800701c:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 800701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007020:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE SPI: ", fnt7x10);
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	b298      	uxth	r0, r3
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	b299      	uxth	r1, r3
 800702a:	4b6b      	ldr	r3, [pc, #428]	; (80071d8 <drawSystemInfoMenu+0x86c>)
 800702c:	4a70      	ldr	r2, [pc, #448]	; (80071f0 <drawSystemInfoMenu+0x884>)
 800702e:	f7fa fa7d 	bl	800152c <LCD_PutStr>
 8007032:	4603      	mov	r3, r0
 8007034:	461a      	mov	r2, r3
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	4413      	add	r3, r2
 800703a:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareSpiADC];
 800703c:	4b69      	ldr	r3, [pc, #420]	; (80071e4 <drawSystemInfoMenu+0x878>)
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	4a69      	ldr	r2, [pc, #420]	; (80071e8 <drawSystemInfoMenu+0x87c>)
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	edd3 7a00 	vldr	s15, [r3]
 800704a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800704e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007052:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007056:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800705a:	ee17 3a90 	vmov	r3, s15
 800705e:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	b298      	uxth	r0, r3
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	b299      	uxth	r1, r3
 8007068:	4b5b      	ldr	r3, [pc, #364]	; (80071d8 <drawSystemInfoMenu+0x86c>)
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	2301      	movs	r3, #1
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	f7fa fafa 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	3319      	adds	r3, #25
 8007078:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 800707a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707c:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "CONFIG: ", fnt7x10);
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	b298      	uxth	r0, r3
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	b299      	uxth	r1, r3
 8007086:	4b54      	ldr	r3, [pc, #336]	; (80071d8 <drawSystemInfoMenu+0x86c>)
 8007088:	4a5a      	ldr	r2, [pc, #360]	; (80071f4 <drawSystemInfoMenu+0x888>)
 800708a:	f7fa fa4f 	bl	800152c <LCD_PutStr>
 800708e:	4603      	mov	r3, r0
 8007090:	461a      	mov	r2, r3
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	4413      	add	r3, r2
 8007096:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.configADC];
 8007098:	4b52      	ldr	r3, [pc, #328]	; (80071e4 <drawSystemInfoMenu+0x878>)
 800709a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800709c:	4a52      	ldr	r2, [pc, #328]	; (80071e8 <drawSystemInfoMenu+0x87c>)
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	edd3 7a00 	vldr	s15, [r3]
 80070a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80070aa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80070ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80070b2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80070b6:	ee17 3a90 	vmov	r3, s15
 80070ba:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	b298      	uxth	r0, r3
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	b299      	uxth	r1, r3
 80070c4:	4b44      	ldr	r3, [pc, #272]	; (80071d8 <drawSystemInfoMenu+0x86c>)
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	2301      	movs	r3, #1
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	f7fa facc 	bl	8001668 <LCD_PutIntF>

		j+=25;
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	3319      	adds	r3, #25
 80070d4:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 80070d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d8:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	b298      	uxth	r0, r3
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	b299      	uxth	r1, r3
 80070e2:	4b3d      	ldr	r3, [pc, #244]	; (80071d8 <drawSystemInfoMenu+0x86c>)
 80070e4:	4a44      	ldr	r2, [pc, #272]	; (80071f8 <drawSystemInfoMenu+0x88c>)
 80070e6:	f7fa fa21 	bl	800152c <LCD_PutStr>
 80070ea:	4603      	mov	r3, r0
 80070ec:	461a      	mov	r2, r3
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	4413      	add	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.zionADC];
 80070f4:	4b3b      	ldr	r3, [pc, #236]	; (80071e4 <drawSystemInfoMenu+0x878>)
 80070f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f8:	4a3b      	ldr	r2, [pc, #236]	; (80071e8 <drawSystemInfoMenu+0x87c>)
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	edd3 7a00 	vldr	s15, [r3]
 8007102:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007106:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800710a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800710e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007112:	ee17 3a90 	vmov	r3, s15
 8007116:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10) + adjacentSpacing;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	b298      	uxth	r0, r3
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	b299      	uxth	r1, r3
 8007120:	4b2d      	ldr	r3, [pc, #180]	; (80071d8 <drawSystemInfoMenu+0x86c>)
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	2301      	movs	r3, #1
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	f7fa fa9e 	bl	8001668 <LCD_PutIntF>
 800712c:	4603      	mov	r3, r0
 800712e:	461a      	mov	r2, r3
 8007130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007132:	4413      	add	r3, r2
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	4413      	add	r3, r2
 8007138:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "Zion Switch: ", fnt7x10);
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	b298      	uxth	r0, r3
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	b299      	uxth	r1, r3
 8007142:	4b25      	ldr	r3, [pc, #148]	; (80071d8 <drawSystemInfoMenu+0x86c>)
 8007144:	4a2d      	ldr	r2, [pc, #180]	; (80071fc <drawSystemInfoMenu+0x890>)
 8007146:	f7fa f9f1 	bl	800152c <LCD_PutStr>
 800714a:	4603      	mov	r3, r0
 800714c:	461a      	mov	r2, r3
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	4413      	add	r3, r2
 8007152:	617b      	str	r3, [r7, #20]
		if(ZION.zionSwitch ==1){
 8007154:	4b2a      	ldr	r3, [pc, #168]	; (8007200 <drawSystemInfoMenu+0x894>)
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d108      	bne.n	800716e <drawSystemInfoMenu+0x802>
			LCD_PutStr(i, j, "ACTIVE", fnt7x10);
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	b298      	uxth	r0, r3
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	b299      	uxth	r1, r3
 8007164:	4b1c      	ldr	r3, [pc, #112]	; (80071d8 <drawSystemInfoMenu+0x86c>)
 8007166:	4a27      	ldr	r2, [pc, #156]	; (8007204 <drawSystemInfoMenu+0x898>)
 8007168:	f7fa f9e0 	bl	800152c <LCD_PutStr>
 800716c:	e007      	b.n	800717e <drawSystemInfoMenu+0x812>
		}
		else{
			LCD_PutStr(i, j, "INACTIVE", fnt7x10);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	b298      	uxth	r0, r3
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	b299      	uxth	r1, r3
 8007176:	4b18      	ldr	r3, [pc, #96]	; (80071d8 <drawSystemInfoMenu+0x86c>)
 8007178:	4a23      	ldr	r2, [pc, #140]	; (8007208 <drawSystemInfoMenu+0x89c>)
 800717a:	f7fa f9d7 	bl	800152c <LCD_PutStr>
		}



		i=200;
 800717e:	23c8      	movs	r3, #200	; 0xc8
 8007180:	617b      	str	r3, [r7, #20]
		j=15;
 8007182:	230f      	movs	r3, #15
 8007184:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	b298      	uxth	r0, r3
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	b299      	uxth	r1, r3
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	b29a      	uxth	r2, r3
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	b29b      	uxth	r3, r3
 8007196:	f7fa fb19 	bl	80017cc <drawUpDownArrow>
		i=180;
 800719a:	23b4      	movs	r3, #180	; 0xb4
 800719c:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	b298      	uxth	r0, r3
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	b299      	uxth	r1, r3
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	f7fa fb0d 	bl	80017cc <drawUpDownArrow>
		i=220;
 80071b2:	23dc      	movs	r3, #220	; 0xdc
 80071b4:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	b298      	uxth	r0, r3
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	b299      	uxth	r1, r3
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	f7fa fb01 	bl	80017cc <drawUpDownArrow>

		break;
 80071ca:	bf00      	nop
	}
	}
	SMLCD_Flush();
 80071cc:	f7f9 fa84 	bl	80006d8 <SMLCD_Flush>
}
 80071d0:	bf00      	nop
 80071d2:	3730      	adds	r7, #48	; 0x30
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	08017ac4 	.word	0x08017ac4
 80071dc:	080177b8 	.word	0x080177b8
 80071e0:	080177d0 	.word	0x080177d0
 80071e4:	20000128 	.word	0x20000128
 80071e8:	20030aa0 	.word	0x20030aa0
 80071ec:	080177e0 	.word	0x080177e0
 80071f0:	080177ec 	.word	0x080177ec
 80071f4:	080177f8 	.word	0x080177f8
 80071f8:	08017784 	.word	0x08017784
 80071fc:	08017804 	.word	0x08017804
 8007200:	20003274 	.word	0x20003274
 8007204:	08017814 	.word	0x08017814
 8007208:	0801781c 	.word	0x0801781c

0800720c <drawBootMenu>:

void drawBootMenu(int indicator, uint8_t button, int menu){
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	460b      	mov	r3, r1
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	72fb      	strb	r3, [r7, #11]
	int i,j;
		int adjacentSpacing = 20;
 800721a:	2314      	movs	r3, #20
 800721c:	61bb      	str	r3, [r7, #24]
		int indentAlignment=50;
 800721e:	2332      	movs	r3, #50	; 0x32
 8007220:	617b      	str	r3, [r7, #20]


		LCD_Clear();
 8007222:	f7f9 fba3 	bl	800096c <LCD_Clear>
		getLatestADC();
 8007226:	f000 fcc9 	bl	8007bbc <getLatestADC>
		drawMenuHeader();
 800722a:	f000 fc0b 	bl	8007a44 <drawMenuHeader>
		i  = 135;
 800722e:	2387      	movs	r3, #135	; 0x87
 8007230:	613b      	str	r3, [r7, #16]
		j = 24;
 8007232:	2318      	movs	r3, #24
 8007234:	61fb      	str	r3, [r7, #28]
		//horizontal divider
		LCD_FillRect(2, j, scr_width - 2, j + 3);
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	b299      	uxth	r1, r3
 800723a:	4b8d      	ldr	r3, [pc, #564]	; (8007470 <drawBootMenu+0x264>)
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	3b02      	subs	r3, #2
 8007240:	b29a      	uxth	r2, r3
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	b29b      	uxth	r3, r3
 8007246:	3303      	adds	r3, #3
 8007248:	b29b      	uxth	r3, r3
 800724a:	2002      	movs	r0, #2
 800724c:	f7f9 fe22 	bl	8000e94 <LCD_FillRect>
		if(displayAdcValues[Adc.adc0] >3.5){
 8007250:	4b88      	ldr	r3, [pc, #544]	; (8007474 <drawBootMenu+0x268>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a88      	ldr	r2, [pc, #544]	; (8007478 <drawBootMenu+0x26c>)
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	edd3 7a00 	vldr	s15, [r3]
 800725e:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8007262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726a:	f340 839a 	ble.w	80079a2 <drawBootMenu+0x796>
			if(ZION.zionFinished){
 800726e:	4b83      	ldr	r3, [pc, #524]	; (800747c <drawBootMenu+0x270>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 82d1 	beq.w	800781a <drawBootMenu+0x60e>
				if((ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS)){
 8007278:	4b80      	ldr	r3, [pc, #512]	; (800747c <drawBootMenu+0x270>)
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d008      	beq.n	8007292 <drawBootMenu+0x86>
 8007280:	4b7e      	ldr	r3, [pc, #504]	; (800747c <drawBootMenu+0x270>)
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	2b01      	cmp	r3, #1
 8007286:	d004      	beq.n	8007292 <drawBootMenu+0x86>
 8007288:	4b7c      	ldr	r3, [pc, #496]	; (800747c <drawBootMenu+0x270>)
 800728a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728c:	2b01      	cmp	r3, #1
 800728e:	f040 820d 	bne.w	80076ac <drawBootMenu+0x4a0>
					j=45;
 8007292:	232d      	movs	r3, #45	; 0x2d
 8007294:	61fb      	str	r3, [r7, #28]
					i=5;
 8007296:	2305      	movs	r3, #5
 8007298:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i,j, "ATLAS RECOGNIZED. PROVIDING ATLAS BOOT MODES:", fnt7x10);
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	b298      	uxth	r0, r3
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	b299      	uxth	r1, r3
 80072a2:	4b77      	ldr	r3, [pc, #476]	; (8007480 <drawBootMenu+0x274>)
 80072a4:	4a77      	ldr	r2, [pc, #476]	; (8007484 <drawBootMenu+0x278>)
 80072a6:	f7fa f941 	bl	800152c <LCD_PutStr>
					j+=30;
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	331e      	adds	r3, #30
 80072ae:	61fb      	str	r3, [r7, #28]
					i=42;
 80072b0:	232a      	movs	r3, #42	; 0x2a
 80072b2:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	b298      	uxth	r0, r3
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	b299      	uxth	r1, r3
 80072bc:	4b70      	ldr	r3, [pc, #448]	; (8007480 <drawBootMenu+0x274>)
 80072be:	4a72      	ldr	r2, [pc, #456]	; (8007488 <drawBootMenu+0x27c>)
 80072c0:	f7fa f934 	bl	800152c <LCD_PutStr>
					i=indentAlignment;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	613b      	str	r3, [r7, #16]
					j+=20;
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	3314      	adds	r3, #20
 80072cc:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "STANDARD", fnt7x10);
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	b298      	uxth	r0, r3
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	b299      	uxth	r1, r3
 80072d6:	4b6a      	ldr	r3, [pc, #424]	; (8007480 <drawBootMenu+0x274>)
 80072d8:	4a6c      	ldr	r2, [pc, #432]	; (800748c <drawBootMenu+0x280>)
 80072da:	f7fa f927 	bl	800152c <LCD_PutStr>
					j+=20;
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	3314      	adds	r3, #20
 80072e2:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "EMERGENCY DOWNLOAD", fnt7x10);
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	b298      	uxth	r0, r3
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	b299      	uxth	r1, r3
 80072ec:	4b64      	ldr	r3, [pc, #400]	; (8007480 <drawBootMenu+0x274>)
 80072ee:	4a68      	ldr	r2, [pc, #416]	; (8007490 <drawBootMenu+0x284>)
 80072f0:	f7fa f91c 	bl	800152c <LCD_PutStr>
					j+=20;
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	3314      	adds	r3, #20
 80072f8:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "RECOVERY", fnt7x10);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	b298      	uxth	r0, r3
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	b299      	uxth	r1, r3
 8007302:	4b5f      	ldr	r3, [pc, #380]	; (8007480 <drawBootMenu+0x274>)
 8007304:	4a63      	ldr	r2, [pc, #396]	; (8007494 <drawBootMenu+0x288>)
 8007306:	f7fa f911 	bl	800152c <LCD_PutStr>
					j+=20;
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	3314      	adds	r3, #20
 800730e:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "MASS STORAGE", fnt7x10);
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	b298      	uxth	r0, r3
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	b299      	uxth	r1, r3
 8007318:	4b59      	ldr	r3, [pc, #356]	; (8007480 <drawBootMenu+0x274>)
 800731a:	4a5f      	ldr	r2, [pc, #380]	; (8007498 <drawBootMenu+0x28c>)
 800731c:	f7fa f906 	bl	800152c <LCD_PutStr>
					j+=20;
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	3314      	adds	r3, #20
 8007324:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "UEFI", fnt7x10);
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	b298      	uxth	r0, r3
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	b299      	uxth	r1, r3
 800732e:	4b54      	ldr	r3, [pc, #336]	; (8007480 <drawBootMenu+0x274>)
 8007330:	4a5a      	ldr	r2, [pc, #360]	; (800749c <drawBootMenu+0x290>)
 8007332:	f7fa f8fb 	bl	800152c <LCD_PutStr>
					i-= 17;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	3b11      	subs	r3, #17
 800733a:	613b      	str	r3, [r7, #16]
					if(setIndicator==0){
 800733c:	4b58      	ldr	r3, [pc, #352]	; (80074a0 <drawBootMenu+0x294>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	f040 810d 	bne.w	8007560 <drawBootMenu+0x354>
						switch(indicator){
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	3b01      	subs	r3, #1
 800734a:	2b04      	cmp	r3, #4
 800734c:	f200 8104 	bhi.w	8007558 <drawBootMenu+0x34c>
 8007350:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <drawBootMenu+0x14c>)
 8007352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007356:	bf00      	nop
 8007358:	0800736d 	.word	0x0800736d
 800735c:	080073c3 	.word	0x080073c3
 8007360:	08007419 	.word	0x08007419
 8007364:	080074ad 	.word	0x080074ad
 8007368:	08007503 	.word	0x08007503
						case FIRST:
						{
							j=95;
 800736c:	235f      	movs	r3, #95	; 0x5f
 800736e:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007370:	7afb      	ldrb	r3, [r7, #11]
 8007372:	2b04      	cmp	r3, #4
 8007374:	bf0c      	ite	eq
 8007376:	2301      	moveq	r3, #1
 8007378:	2300      	movne	r3, #0
 800737a:	b2da      	uxtb	r2, r3
 800737c:	4b49      	ldr	r3, [pc, #292]	; (80074a4 <drawBootMenu+0x298>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6879      	ldr	r1, [r7, #4]
 8007382:	4299      	cmp	r1, r3
 8007384:	bf0c      	ite	eq
 8007386:	2301      	moveq	r3, #1
 8007388:	2300      	movne	r3, #0
 800738a:	b2db      	uxtb	r3, r3
 800738c:	4013      	ands	r3, r2
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 8170 	beq.w	8007676 <drawBootMenu+0x46a>
								i=140;
 8007396:	238c      	movs	r3, #140	; 0x8c
 8007398:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	b298      	uxth	r0, r3
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3305      	adds	r3, #5
 80073a4:	b299      	uxth	r1, r3
 80073a6:	2303      	movs	r3, #3
 80073a8:	2203      	movs	r2, #3
 80073aa:	f7fa fa0f 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn0=1;
 80073ae:	4b3e      	ldr	r3, [pc, #248]	; (80074a8 <drawBootMenu+0x29c>)
 80073b0:	2201      	movs	r2, #1
 80073b2:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 80073b4:	4b3c      	ldr	r3, [pc, #240]	; (80074a8 <drawBootMenu+0x29c>)
 80073b6:	2201      	movs	r2, #1
 80073b8:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 80073ba:	4b39      	ldr	r3, [pc, #228]	; (80074a0 <drawBootMenu+0x294>)
 80073bc:	2201      	movs	r2, #1
 80073be:	601a      	str	r2, [r3, #0]
							}

							break;
 80073c0:	e159      	b.n	8007676 <drawBootMenu+0x46a>
						}
						case SECOND:
						{
							j=115;
 80073c2:	2373      	movs	r3, #115	; 0x73
 80073c4:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 80073c6:	7afb      	ldrb	r3, [r7, #11]
 80073c8:	2b04      	cmp	r3, #4
 80073ca:	bf0c      	ite	eq
 80073cc:	2301      	moveq	r3, #1
 80073ce:	2300      	movne	r3, #0
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	4b34      	ldr	r3, [pc, #208]	; (80074a4 <drawBootMenu+0x298>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	4299      	cmp	r1, r3
 80073da:	bf0c      	ite	eq
 80073dc:	2301      	moveq	r3, #1
 80073de:	2300      	movne	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	4013      	ands	r3, r2
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 8147 	beq.w	800767a <drawBootMenu+0x46e>
								i=220;
 80073ec:	23dc      	movs	r3, #220	; 0xdc
 80073ee:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	b298      	uxth	r0, r3
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	3305      	adds	r3, #5
 80073fa:	b299      	uxth	r1, r3
 80073fc:	2303      	movs	r3, #3
 80073fe:	2203      	movs	r2, #3
 8007400:	f7fa f9e4 	bl	80017cc <drawUpDownArrow>
								bootButtons.edl_sw=1;
 8007404:	4b28      	ldr	r3, [pc, #160]	; (80074a8 <drawBootMenu+0x29c>)
 8007406:	2201      	movs	r2, #1
 8007408:	61da      	str	r2, [r3, #28]
								bootButtons.bootModeSet=1;
 800740a:	4b27      	ldr	r3, [pc, #156]	; (80074a8 <drawBootMenu+0x29c>)
 800740c:	2201      	movs	r2, #1
 800740e:	601a      	str	r2, [r3, #0]
								setIndicator=2;
 8007410:	4b23      	ldr	r3, [pc, #140]	; (80074a0 <drawBootMenu+0x294>)
 8007412:	2202      	movs	r2, #2
 8007414:	601a      	str	r2, [r3, #0]
							}

							break;
 8007416:	e130      	b.n	800767a <drawBootMenu+0x46e>
						}
						case THIRD:
						{
							j=135;
 8007418:	2387      	movs	r3, #135	; 0x87
 800741a:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 800741c:	7afb      	ldrb	r3, [r7, #11]
 800741e:	2b04      	cmp	r3, #4
 8007420:	bf0c      	ite	eq
 8007422:	2301      	moveq	r3, #1
 8007424:	2300      	movne	r3, #0
 8007426:	b2da      	uxtb	r2, r3
 8007428:	4b1e      	ldr	r3, [pc, #120]	; (80074a4 <drawBootMenu+0x298>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6879      	ldr	r1, [r7, #4]
 800742e:	4299      	cmp	r1, r3
 8007430:	bf0c      	ite	eq
 8007432:	2301      	moveq	r3, #1
 8007434:	2300      	movne	r3, #0
 8007436:	b2db      	uxtb	r3, r3
 8007438:	4013      	ands	r3, r2
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 811e 	beq.w	800767e <drawBootMenu+0x472>
								i=130;
 8007442:	2382      	movs	r3, #130	; 0x82
 8007444:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	b298      	uxth	r0, r3
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	b29b      	uxth	r3, r3
 800744e:	3305      	adds	r3, #5
 8007450:	b299      	uxth	r1, r3
 8007452:	2303      	movs	r3, #3
 8007454:	2203      	movs	r2, #3
 8007456:	f7fa f9b9 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn1=1;
 800745a:	4b13      	ldr	r3, [pc, #76]	; (80074a8 <drawBootMenu+0x29c>)
 800745c:	2201      	movs	r2, #1
 800745e:	609a      	str	r2, [r3, #8]
								bootButtons.bootModeSet=1;
 8007460:	4b11      	ldr	r3, [pc, #68]	; (80074a8 <drawBootMenu+0x29c>)
 8007462:	2201      	movs	r2, #1
 8007464:	601a      	str	r2, [r3, #0]
								setIndicator=3;
 8007466:	4b0e      	ldr	r3, [pc, #56]	; (80074a0 <drawBootMenu+0x294>)
 8007468:	2203      	movs	r2, #3
 800746a:	601a      	str	r2, [r3, #0]
							}

							break;
 800746c:	e107      	b.n	800767e <drawBootMenu+0x472>
 800746e:	bf00      	nop
 8007470:	20028aaa 	.word	0x20028aaa
 8007474:	20000128 	.word	0x20000128
 8007478:	20030aa0 	.word	0x20030aa0
 800747c:	20003274 	.word	0x20003274
 8007480:	08017ac4 	.word	0x08017ac4
 8007484:	08017828 	.word	0x08017828
 8007488:	08017858 	.word	0x08017858
 800748c:	08017874 	.word	0x08017874
 8007490:	08017880 	.word	0x08017880
 8007494:	08017894 	.word	0x08017894
 8007498:	080178a0 	.word	0x080178a0
 800749c:	080172d0 	.word	0x080172d0
 80074a0:	2000337c 	.word	0x2000337c
 80074a4:	20003378 	.word	0x20003378
 80074a8:	200032ac 	.word	0x200032ac
						}
						case FOURTH:
						{
							j=155;
 80074ac:	239b      	movs	r3, #155	; 0x9b
 80074ae:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 80074b0:	7afb      	ldrb	r3, [r7, #11]
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	bf0c      	ite	eq
 80074b6:	2301      	moveq	r3, #1
 80074b8:	2300      	movne	r3, #0
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	4b78      	ldr	r3, [pc, #480]	; (80076a0 <drawBootMenu+0x494>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6879      	ldr	r1, [r7, #4]
 80074c2:	4299      	cmp	r1, r3
 80074c4:	bf0c      	ite	eq
 80074c6:	2301      	moveq	r3, #1
 80074c8:	2300      	movne	r3, #0
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	4013      	ands	r3, r2
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 80d6 	beq.w	8007682 <drawBootMenu+0x476>
								i=160;
 80074d6:	23a0      	movs	r3, #160	; 0xa0
 80074d8:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	b298      	uxth	r0, r3
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	3305      	adds	r3, #5
 80074e4:	b299      	uxth	r1, r3
 80074e6:	2303      	movs	r3, #3
 80074e8:	2203      	movs	r2, #3
 80074ea:	f7fa f96f 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn2=1;
 80074ee:	4b6d      	ldr	r3, [pc, #436]	; (80076a4 <drawBootMenu+0x498>)
 80074f0:	2201      	movs	r2, #1
 80074f2:	60da      	str	r2, [r3, #12]
								bootButtons.bootModeSet=1;
 80074f4:	4b6b      	ldr	r3, [pc, #428]	; (80076a4 <drawBootMenu+0x498>)
 80074f6:	2201      	movs	r2, #1
 80074f8:	601a      	str	r2, [r3, #0]
								setIndicator=4;
 80074fa:	4b6b      	ldr	r3, [pc, #428]	; (80076a8 <drawBootMenu+0x49c>)
 80074fc:	2204      	movs	r2, #4
 80074fe:	601a      	str	r2, [r3, #0]
							}

							break;
 8007500:	e0bf      	b.n	8007682 <drawBootMenu+0x476>
						}
						case FIFTH:
						{
							j=175;
 8007502:	23af      	movs	r3, #175	; 0xaf
 8007504:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007506:	7afb      	ldrb	r3, [r7, #11]
 8007508:	2b04      	cmp	r3, #4
 800750a:	bf0c      	ite	eq
 800750c:	2301      	moveq	r3, #1
 800750e:	2300      	movne	r3, #0
 8007510:	b2da      	uxtb	r2, r3
 8007512:	4b63      	ldr	r3, [pc, #396]	; (80076a0 <drawBootMenu+0x494>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6879      	ldr	r1, [r7, #4]
 8007518:	4299      	cmp	r1, r3
 800751a:	bf0c      	ite	eq
 800751c:	2301      	moveq	r3, #1
 800751e:	2300      	movne	r3, #0
 8007520:	b2db      	uxtb	r3, r3
 8007522:	4013      	ands	r3, r2
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 80ad 	beq.w	8007686 <drawBootMenu+0x47a>
								i=100;
 800752c:	2364      	movs	r3, #100	; 0x64
 800752e:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	b298      	uxth	r0, r3
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	b29b      	uxth	r3, r3
 8007538:	3305      	adds	r3, #5
 800753a:	b299      	uxth	r1, r3
 800753c:	2303      	movs	r3, #3
 800753e:	2203      	movs	r2, #3
 8007540:	f7fa f944 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn3=1;
 8007544:	4b57      	ldr	r3, [pc, #348]	; (80076a4 <drawBootMenu+0x498>)
 8007546:	2201      	movs	r2, #1
 8007548:	611a      	str	r2, [r3, #16]
								bootButtons.bootModeSet=1;
 800754a:	4b56      	ldr	r3, [pc, #344]	; (80076a4 <drawBootMenu+0x498>)
 800754c:	2201      	movs	r2, #1
 800754e:	601a      	str	r2, [r3, #0]
								setIndicator=5;
 8007550:	4b55      	ldr	r3, [pc, #340]	; (80076a8 <drawBootMenu+0x49c>)
 8007552:	2205      	movs	r2, #5
 8007554:	601a      	str	r2, [r3, #0]
							}

							break;
 8007556:	e096      	b.n	8007686 <drawBootMenu+0x47a>
						}
						default:
						{
							j=95;
 8007558:	235f      	movs	r3, #95	; 0x5f
 800755a:	61fb      	str	r3, [r7, #28]
							break;
 800755c:	bf00      	nop
 800755e:	e09d      	b.n	800769c <drawBootMenu+0x490>
						}
						}
					}
					else{
						switch(setIndicator){
 8007560:	4b51      	ldr	r3, [pc, #324]	; (80076a8 <drawBootMenu+0x49c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3b01      	subs	r3, #1
 8007566:	2b04      	cmp	r3, #4
 8007568:	d87a      	bhi.n	8007660 <drawBootMenu+0x454>
 800756a:	a201      	add	r2, pc, #4	; (adr r2, 8007570 <drawBootMenu+0x364>)
 800756c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007570:	08007585 	.word	0x08007585
 8007574:	080075b1 	.word	0x080075b1
 8007578:	080075dd 	.word	0x080075dd
 800757c:	08007609 	.word	0x08007609
 8007580:	08007635 	.word	0x08007635
						case FIRST:
						{
							j=95;
 8007584:	235f      	movs	r3, #95	; 0x5f
 8007586:	61fb      	str	r3, [r7, #28]
							i=140;
 8007588:	238c      	movs	r3, #140	; 0x8c
 800758a:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	b298      	uxth	r0, r3
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	b29b      	uxth	r3, r3
 8007594:	3305      	adds	r3, #5
 8007596:	b299      	uxth	r1, r3
 8007598:	2303      	movs	r3, #3
 800759a:	2203      	movs	r2, #3
 800759c:	f7fa f916 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 80075a0:	4b40      	ldr	r3, [pc, #256]	; (80076a4 <drawBootMenu+0x498>)
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d070      	beq.n	800768a <drawBootMenu+0x47e>
								setIndicator=0;
 80075a8:	4b3f      	ldr	r3, [pc, #252]	; (80076a8 <drawBootMenu+0x49c>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	601a      	str	r2, [r3, #0]
							}
							break;
 80075ae:	e06c      	b.n	800768a <drawBootMenu+0x47e>
						}
						case SECOND:
						{
							j=115;
 80075b0:	2373      	movs	r3, #115	; 0x73
 80075b2:	61fb      	str	r3, [r7, #28]
							i=220;
 80075b4:	23dc      	movs	r3, #220	; 0xdc
 80075b6:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	b298      	uxth	r0, r3
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	b29b      	uxth	r3, r3
 80075c0:	3305      	adds	r3, #5
 80075c2:	b299      	uxth	r1, r3
 80075c4:	2303      	movs	r3, #3
 80075c6:	2203      	movs	r2, #3
 80075c8:	f7fa f900 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 80075cc:	4b35      	ldr	r3, [pc, #212]	; (80076a4 <drawBootMenu+0x498>)
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d05c      	beq.n	800768e <drawBootMenu+0x482>
								setIndicator=0;
 80075d4:	4b34      	ldr	r3, [pc, #208]	; (80076a8 <drawBootMenu+0x49c>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	601a      	str	r2, [r3, #0]
							}
							break;
 80075da:	e058      	b.n	800768e <drawBootMenu+0x482>
						}
						case THIRD:
						{
							j=135;
 80075dc:	2387      	movs	r3, #135	; 0x87
 80075de:	61fb      	str	r3, [r7, #28]
							i=130;
 80075e0:	2382      	movs	r3, #130	; 0x82
 80075e2:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	b298      	uxth	r0, r3
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	3305      	adds	r3, #5
 80075ee:	b299      	uxth	r1, r3
 80075f0:	2303      	movs	r3, #3
 80075f2:	2203      	movs	r2, #3
 80075f4:	f7fa f8ea 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 80075f8:	4b2a      	ldr	r3, [pc, #168]	; (80076a4 <drawBootMenu+0x498>)
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d048      	beq.n	8007692 <drawBootMenu+0x486>
								setIndicator=0;
 8007600:	4b29      	ldr	r3, [pc, #164]	; (80076a8 <drawBootMenu+0x49c>)
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]
							}
							break;
 8007606:	e044      	b.n	8007692 <drawBootMenu+0x486>
						}
						case FOURTH:
						{
							j=155;
 8007608:	239b      	movs	r3, #155	; 0x9b
 800760a:	61fb      	str	r3, [r7, #28]
							i=160;
 800760c:	23a0      	movs	r3, #160	; 0xa0
 800760e:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	b298      	uxth	r0, r3
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	b29b      	uxth	r3, r3
 8007618:	3305      	adds	r3, #5
 800761a:	b299      	uxth	r1, r3
 800761c:	2303      	movs	r3, #3
 800761e:	2203      	movs	r2, #3
 8007620:	f7fa f8d4 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007624:	4b1f      	ldr	r3, [pc, #124]	; (80076a4 <drawBootMenu+0x498>)
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	2b00      	cmp	r3, #0
 800762a:	d034      	beq.n	8007696 <drawBootMenu+0x48a>
								setIndicator=0;
 800762c:	4b1e      	ldr	r3, [pc, #120]	; (80076a8 <drawBootMenu+0x49c>)
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]
							}
							break;
 8007632:	e030      	b.n	8007696 <drawBootMenu+0x48a>
						}
						case FIFTH:
						{
							j=175;
 8007634:	23af      	movs	r3, #175	; 0xaf
 8007636:	61fb      	str	r3, [r7, #28]
							i=100;
 8007638:	2364      	movs	r3, #100	; 0x64
 800763a:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	b298      	uxth	r0, r3
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	b29b      	uxth	r3, r3
 8007644:	3305      	adds	r3, #5
 8007646:	b299      	uxth	r1, r3
 8007648:	2303      	movs	r3, #3
 800764a:	2203      	movs	r2, #3
 800764c:	f7fa f8be 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007650:	4b14      	ldr	r3, [pc, #80]	; (80076a4 <drawBootMenu+0x498>)
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	2b00      	cmp	r3, #0
 8007656:	d020      	beq.n	800769a <drawBootMenu+0x48e>
								setIndicator=0;
 8007658:	4b13      	ldr	r3, [pc, #76]	; (80076a8 <drawBootMenu+0x49c>)
 800765a:	2200      	movs	r2, #0
 800765c:	601a      	str	r2, [r3, #0]
							}
							break;
 800765e:	e01c      	b.n	800769a <drawBootMenu+0x48e>
						}
						default:
						{
							drawUpDownArrow(i, j+5, 3, 3);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	b298      	uxth	r0, r3
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	b29b      	uxth	r3, r3
 8007668:	3305      	adds	r3, #5
 800766a:	b299      	uxth	r1, r3
 800766c:	2303      	movs	r3, #3
 800766e:	2203      	movs	r2, #3
 8007670:	f7fa f8ac 	bl	80017cc <drawUpDownArrow>
							break;
 8007674:	e012      	b.n	800769c <drawBootMenu+0x490>
							break;
 8007676:	bf00      	nop
 8007678:	e1bf      	b.n	80079fa <drawBootMenu+0x7ee>
							break;
 800767a:	bf00      	nop
 800767c:	e1bd      	b.n	80079fa <drawBootMenu+0x7ee>
							break;
 800767e:	bf00      	nop
 8007680:	e1bb      	b.n	80079fa <drawBootMenu+0x7ee>
							break;
 8007682:	bf00      	nop
 8007684:	e1b9      	b.n	80079fa <drawBootMenu+0x7ee>
							break;
 8007686:	bf00      	nop
 8007688:	e1b7      	b.n	80079fa <drawBootMenu+0x7ee>
							break;
 800768a:	bf00      	nop
 800768c:	e1b5      	b.n	80079fa <drawBootMenu+0x7ee>
							break;
 800768e:	bf00      	nop
 8007690:	e1b3      	b.n	80079fa <drawBootMenu+0x7ee>
							break;
 8007692:	bf00      	nop
 8007694:	e1b1      	b.n	80079fa <drawBootMenu+0x7ee>
							break;
 8007696:	bf00      	nop
 8007698:	e1af      	b.n	80079fa <drawBootMenu+0x7ee>
							break;
 800769a:	bf00      	nop
					if(setIndicator==0){
 800769c:	e1ad      	b.n	80079fa <drawBootMenu+0x7ee>
 800769e:	bf00      	nop
 80076a0:	20003378 	.word	0x20003378
 80076a4:	200032ac 	.word	0x200032ac
 80076a8:	2000337c 	.word	0x2000337c
						}
						}
					}
				}
				else{
					j=45;
 80076ac:	232d      	movs	r3, #45	; 0x2d
 80076ae:	61fb      	str	r3, [r7, #28]
					i=5;
 80076b0:	2305      	movs	r3, #5
 80076b2:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i,j, "UNKNOWN SYSTEM. STANDARD MODE ONLY:", fnt7x10);
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	b298      	uxth	r0, r3
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	b299      	uxth	r1, r3
 80076bc:	4b98      	ldr	r3, [pc, #608]	; (8007920 <drawBootMenu+0x714>)
 80076be:	4a99      	ldr	r2, [pc, #612]	; (8007924 <drawBootMenu+0x718>)
 80076c0:	f7f9 ff34 	bl	800152c <LCD_PutStr>
					j+=30;
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	331e      	adds	r3, #30
 80076c8:	61fb      	str	r3, [r7, #28]
					i=42;
 80076ca:	232a      	movs	r3, #42	; 0x2a
 80076cc:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	b298      	uxth	r0, r3
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	b299      	uxth	r1, r3
 80076d6:	4b92      	ldr	r3, [pc, #584]	; (8007920 <drawBootMenu+0x714>)
 80076d8:	4a93      	ldr	r2, [pc, #588]	; (8007928 <drawBootMenu+0x71c>)
 80076da:	f7f9 ff27 	bl	800152c <LCD_PutStr>
					i=indentAlignment;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	613b      	str	r3, [r7, #16]
					j+=20;
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	3314      	adds	r3, #20
 80076e6:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "STANDARD", fnt7x10);
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	b298      	uxth	r0, r3
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	b299      	uxth	r1, r3
 80076f0:	4b8b      	ldr	r3, [pc, #556]	; (8007920 <drawBootMenu+0x714>)
 80076f2:	4a8e      	ldr	r2, [pc, #568]	; (800792c <drawBootMenu+0x720>)
 80076f4:	f7f9 ff1a 	bl	800152c <LCD_PutStr>
					if(setIndicator==0){
 80076f8:	4b8d      	ldr	r3, [pc, #564]	; (8007930 <drawBootMenu+0x724>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d159      	bne.n	80077b4 <drawBootMenu+0x5a8>
						switch(indicator){
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d12a      	bne.n	800775c <drawBootMenu+0x550>
						case FIRST:
						{
							j=95;
 8007706:	235f      	movs	r3, #95	; 0x5f
 8007708:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 800770a:	7afb      	ldrb	r3, [r7, #11]
 800770c:	2b04      	cmp	r3, #4
 800770e:	bf0c      	ite	eq
 8007710:	2301      	moveq	r3, #1
 8007712:	2300      	movne	r3, #0
 8007714:	b2da      	uxtb	r2, r3
 8007716:	4b87      	ldr	r3, [pc, #540]	; (8007934 <drawBootMenu+0x728>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6879      	ldr	r1, [r7, #4]
 800771c:	4299      	cmp	r1, r3
 800771e:	bf0c      	ite	eq
 8007720:	2301      	moveq	r3, #1
 8007722:	2300      	movne	r3, #0
 8007724:	b2db      	uxtb	r3, r3
 8007726:	4013      	ands	r3, r2
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 8156 	beq.w	80079dc <drawBootMenu+0x7d0>
								i=140;
 8007730:	238c      	movs	r3, #140	; 0x8c
 8007732:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	b298      	uxth	r0, r3
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	b29b      	uxth	r3, r3
 800773c:	3305      	adds	r3, #5
 800773e:	b299      	uxth	r1, r3
 8007740:	2303      	movs	r3, #3
 8007742:	2203      	movs	r2, #3
 8007744:	f7fa f842 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn0=1;
 8007748:	4b7b      	ldr	r3, [pc, #492]	; (8007938 <drawBootMenu+0x72c>)
 800774a:	2201      	movs	r2, #1
 800774c:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 800774e:	4b7a      	ldr	r3, [pc, #488]	; (8007938 <drawBootMenu+0x72c>)
 8007750:	2201      	movs	r2, #1
 8007752:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 8007754:	4b76      	ldr	r3, [pc, #472]	; (8007930 <drawBootMenu+0x724>)
 8007756:	2201      	movs	r2, #1
 8007758:	601a      	str	r2, [r3, #0]
							}
							break;
 800775a:	e13f      	b.n	80079dc <drawBootMenu+0x7d0>
						}
						default:
						{
							j=95;
 800775c:	235f      	movs	r3, #95	; 0x5f
 800775e:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007760:	7afb      	ldrb	r3, [r7, #11]
 8007762:	2b04      	cmp	r3, #4
 8007764:	bf0c      	ite	eq
 8007766:	2301      	moveq	r3, #1
 8007768:	2300      	movne	r3, #0
 800776a:	b2da      	uxtb	r2, r3
 800776c:	4b71      	ldr	r3, [pc, #452]	; (8007934 <drawBootMenu+0x728>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6879      	ldr	r1, [r7, #4]
 8007772:	4299      	cmp	r1, r3
 8007774:	bf0c      	ite	eq
 8007776:	2301      	moveq	r3, #1
 8007778:	2300      	movne	r3, #0
 800777a:	b2db      	uxtb	r3, r3
 800777c:	4013      	ands	r3, r2
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 812d 	beq.w	80079e0 <drawBootMenu+0x7d4>
								i=140;
 8007786:	238c      	movs	r3, #140	; 0x8c
 8007788:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	b298      	uxth	r0, r3
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	b29b      	uxth	r3, r3
 8007792:	3305      	adds	r3, #5
 8007794:	b299      	uxth	r1, r3
 8007796:	2303      	movs	r3, #3
 8007798:	2203      	movs	r2, #3
 800779a:	f7fa f817 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn0=1;
 800779e:	4b66      	ldr	r3, [pc, #408]	; (8007938 <drawBootMenu+0x72c>)
 80077a0:	2201      	movs	r2, #1
 80077a2:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 80077a4:	4b64      	ldr	r3, [pc, #400]	; (8007938 <drawBootMenu+0x72c>)
 80077a6:	2201      	movs	r2, #1
 80077a8:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 80077aa:	4b61      	ldr	r3, [pc, #388]	; (8007930 <drawBootMenu+0x724>)
 80077ac:	2201      	movs	r2, #1
 80077ae:	601a      	str	r2, [r3, #0]
							}
							break;
 80077b0:	bf00      	nop
 80077b2:	e115      	b.n	80079e0 <drawBootMenu+0x7d4>
						}
						}
					}
					else{
						switch(setIndicator){
 80077b4:	4b5e      	ldr	r3, [pc, #376]	; (8007930 <drawBootMenu+0x724>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d116      	bne.n	80077ea <drawBootMenu+0x5de>
						case FIRST:
						{
							j=95;
 80077bc:	235f      	movs	r3, #95	; 0x5f
 80077be:	61fb      	str	r3, [r7, #28]
							i=140;
 80077c0:	238c      	movs	r3, #140	; 0x8c
 80077c2:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	b298      	uxth	r0, r3
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	3305      	adds	r3, #5
 80077ce:	b299      	uxth	r1, r3
 80077d0:	2303      	movs	r3, #3
 80077d2:	2203      	movs	r2, #3
 80077d4:	f7f9 fffa 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 80077d8:	4b57      	ldr	r3, [pc, #348]	; (8007938 <drawBootMenu+0x72c>)
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 8101 	beq.w	80079e4 <drawBootMenu+0x7d8>
								setIndicator=0;
 80077e2:	4b53      	ldr	r3, [pc, #332]	; (8007930 <drawBootMenu+0x724>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	601a      	str	r2, [r3, #0]
							}
							break;
 80077e8:	e0fc      	b.n	80079e4 <drawBootMenu+0x7d8>
						}
						default:
						{
							j=95;
 80077ea:	235f      	movs	r3, #95	; 0x5f
 80077ec:	61fb      	str	r3, [r7, #28]
							i=140;
 80077ee:	238c      	movs	r3, #140	; 0x8c
 80077f0:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	b298      	uxth	r0, r3
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	3305      	adds	r3, #5
 80077fc:	b299      	uxth	r1, r3
 80077fe:	2303      	movs	r3, #3
 8007800:	2203      	movs	r2, #3
 8007802:	f7f9 ffe3 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007806:	4b4c      	ldr	r3, [pc, #304]	; (8007938 <drawBootMenu+0x72c>)
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 80ec 	beq.w	80079e8 <drawBootMenu+0x7dc>
								setIndicator=0;
 8007810:	4b47      	ldr	r3, [pc, #284]	; (8007930 <drawBootMenu+0x724>)
 8007812:	2200      	movs	r2, #0
 8007814:	601a      	str	r2, [r3, #0]
							}
							break;
 8007816:	bf00      	nop
 8007818:	e0e6      	b.n	80079e8 <drawBootMenu+0x7dc>
						}
					}
				}
			}
			else{
				j=45;
 800781a:	232d      	movs	r3, #45	; 0x2d
 800781c:	61fb      	str	r3, [r7, #28]
				i=15;
 800781e:	230f      	movs	r3, #15
 8007820:	613b      	str	r3, [r7, #16]
				LCD_PutStr(i,j, "WAITING ON ZION INFO. STANDARD MODE ONLY:", fnt7x10);
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	b298      	uxth	r0, r3
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	b299      	uxth	r1, r3
 800782a:	4b3d      	ldr	r3, [pc, #244]	; (8007920 <drawBootMenu+0x714>)
 800782c:	4a43      	ldr	r2, [pc, #268]	; (800793c <drawBootMenu+0x730>)
 800782e:	f7f9 fe7d 	bl	800152c <LCD_PutStr>
				j+=30;
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	331e      	adds	r3, #30
 8007836:	61fb      	str	r3, [r7, #28]
				i=42;
 8007838:	232a      	movs	r3, #42	; 0x2a
 800783a:	613b      	str	r3, [r7, #16]
				LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	b298      	uxth	r0, r3
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	b299      	uxth	r1, r3
 8007844:	4b36      	ldr	r3, [pc, #216]	; (8007920 <drawBootMenu+0x714>)
 8007846:	4a38      	ldr	r2, [pc, #224]	; (8007928 <drawBootMenu+0x71c>)
 8007848:	f7f9 fe70 	bl	800152c <LCD_PutStr>
				i=indentAlignment;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	613b      	str	r3, [r7, #16]
				j+=20;
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	3314      	adds	r3, #20
 8007854:	61fb      	str	r3, [r7, #28]
				LCD_PutStr(i, j, "STANDARD", fnt7x10);
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	b298      	uxth	r0, r3
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	b299      	uxth	r1, r3
 800785e:	4b30      	ldr	r3, [pc, #192]	; (8007920 <drawBootMenu+0x714>)
 8007860:	4a32      	ldr	r2, [pc, #200]	; (800792c <drawBootMenu+0x720>)
 8007862:	f7f9 fe63 	bl	800152c <LCD_PutStr>
				if(setIndicator==0){
 8007866:	4b32      	ldr	r3, [pc, #200]	; (8007930 <drawBootMenu+0x724>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d168      	bne.n	8007940 <drawBootMenu+0x734>
					switch(indicator){
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d12a      	bne.n	80078ca <drawBootMenu+0x6be>
					case FIRST:
					{
						j=95;
 8007874:	235f      	movs	r3, #95	; 0x5f
 8007876:	61fb      	str	r3, [r7, #28]
						if((button == SEL) & (previousMenu == menu)){
 8007878:	7afb      	ldrb	r3, [r7, #11]
 800787a:	2b04      	cmp	r3, #4
 800787c:	bf0c      	ite	eq
 800787e:	2301      	moveq	r3, #1
 8007880:	2300      	movne	r3, #0
 8007882:	b2da      	uxtb	r2, r3
 8007884:	4b2b      	ldr	r3, [pc, #172]	; (8007934 <drawBootMenu+0x728>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6879      	ldr	r1, [r7, #4]
 800788a:	4299      	cmp	r1, r3
 800788c:	bf0c      	ite	eq
 800788e:	2301      	moveq	r3, #1
 8007890:	2300      	movne	r3, #0
 8007892:	b2db      	uxtb	r3, r3
 8007894:	4013      	ands	r3, r2
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 80a7 	beq.w	80079ec <drawBootMenu+0x7e0>
							i=140;
 800789e:	238c      	movs	r3, #140	; 0x8c
 80078a0:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	b298      	uxth	r0, r3
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3305      	adds	r3, #5
 80078ac:	b299      	uxth	r1, r3
 80078ae:	2303      	movs	r3, #3
 80078b0:	2203      	movs	r2, #3
 80078b2:	f7f9 ff8b 	bl	80017cc <drawUpDownArrow>
							bootButtons.btn0=1;
 80078b6:	4b20      	ldr	r3, [pc, #128]	; (8007938 <drawBootMenu+0x72c>)
 80078b8:	2201      	movs	r2, #1
 80078ba:	605a      	str	r2, [r3, #4]
							bootButtons.bootModeSet=1;
 80078bc:	4b1e      	ldr	r3, [pc, #120]	; (8007938 <drawBootMenu+0x72c>)
 80078be:	2201      	movs	r2, #1
 80078c0:	601a      	str	r2, [r3, #0]
							setIndicator=1;
 80078c2:	4b1b      	ldr	r3, [pc, #108]	; (8007930 <drawBootMenu+0x724>)
 80078c4:	2201      	movs	r2, #1
 80078c6:	601a      	str	r2, [r3, #0]
						}
						break;
 80078c8:	e090      	b.n	80079ec <drawBootMenu+0x7e0>
					}
					default:
					{
						j=95;
 80078ca:	235f      	movs	r3, #95	; 0x5f
 80078cc:	61fb      	str	r3, [r7, #28]
						if((button == SEL) & (previousMenu == menu)){
 80078ce:	7afb      	ldrb	r3, [r7, #11]
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	bf0c      	ite	eq
 80078d4:	2301      	moveq	r3, #1
 80078d6:	2300      	movne	r3, #0
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	4b16      	ldr	r3, [pc, #88]	; (8007934 <drawBootMenu+0x728>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	4299      	cmp	r1, r3
 80078e2:	bf0c      	ite	eq
 80078e4:	2301      	moveq	r3, #1
 80078e6:	2300      	movne	r3, #0
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	4013      	ands	r3, r2
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d07e      	beq.n	80079f0 <drawBootMenu+0x7e4>
							i=140;
 80078f2:	238c      	movs	r3, #140	; 0x8c
 80078f4:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	b298      	uxth	r0, r3
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	3305      	adds	r3, #5
 8007900:	b299      	uxth	r1, r3
 8007902:	2303      	movs	r3, #3
 8007904:	2203      	movs	r2, #3
 8007906:	f7f9 ff61 	bl	80017cc <drawUpDownArrow>
							bootButtons.btn0=1;
 800790a:	4b0b      	ldr	r3, [pc, #44]	; (8007938 <drawBootMenu+0x72c>)
 800790c:	2201      	movs	r2, #1
 800790e:	605a      	str	r2, [r3, #4]
							bootButtons.bootModeSet=1;
 8007910:	4b09      	ldr	r3, [pc, #36]	; (8007938 <drawBootMenu+0x72c>)
 8007912:	2201      	movs	r2, #1
 8007914:	601a      	str	r2, [r3, #0]
							setIndicator=1;
 8007916:	4b06      	ldr	r3, [pc, #24]	; (8007930 <drawBootMenu+0x724>)
 8007918:	2201      	movs	r2, #1
 800791a:	601a      	str	r2, [r3, #0]
						}
						break;
 800791c:	bf00      	nop
 800791e:	e067      	b.n	80079f0 <drawBootMenu+0x7e4>
 8007920:	08017ac4 	.word	0x08017ac4
 8007924:	080178b0 	.word	0x080178b0
 8007928:	08017858 	.word	0x08017858
 800792c:	08017874 	.word	0x08017874
 8007930:	2000337c 	.word	0x2000337c
 8007934:	20003378 	.word	0x20003378
 8007938:	200032ac 	.word	0x200032ac
 800793c:	080178d4 	.word	0x080178d4
					}
					}
				}
				else{
					switch(setIndicator){
 8007940:	4b3a      	ldr	r3, [pc, #232]	; (8007a2c <drawBootMenu+0x820>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d115      	bne.n	8007974 <drawBootMenu+0x768>
					case FIRST:
					{
						j=95;
 8007948:	235f      	movs	r3, #95	; 0x5f
 800794a:	61fb      	str	r3, [r7, #28]
						i=140;
 800794c:	238c      	movs	r3, #140	; 0x8c
 800794e:	613b      	str	r3, [r7, #16]
						drawUpDownArrow(i, j+5, 3, 3);
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	b298      	uxth	r0, r3
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	b29b      	uxth	r3, r3
 8007958:	3305      	adds	r3, #5
 800795a:	b299      	uxth	r1, r3
 800795c:	2303      	movs	r3, #3
 800795e:	2203      	movs	r2, #3
 8007960:	f7f9 ff34 	bl	80017cc <drawUpDownArrow>
						if(bootButtons.modeClear){
 8007964:	4b32      	ldr	r3, [pc, #200]	; (8007a30 <drawBootMenu+0x824>)
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	2b00      	cmp	r3, #0
 800796a:	d043      	beq.n	80079f4 <drawBootMenu+0x7e8>
							setIndicator=0;
 800796c:	4b2f      	ldr	r3, [pc, #188]	; (8007a2c <drawBootMenu+0x820>)
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]
						}
						break;
 8007972:	e03f      	b.n	80079f4 <drawBootMenu+0x7e8>
					}
					default:
					{
						j=95;
 8007974:	235f      	movs	r3, #95	; 0x5f
 8007976:	61fb      	str	r3, [r7, #28]
						i=140;
 8007978:	238c      	movs	r3, #140	; 0x8c
 800797a:	613b      	str	r3, [r7, #16]
						drawUpDownArrow(i, j+5, 3, 3);
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	b298      	uxth	r0, r3
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	b29b      	uxth	r3, r3
 8007984:	3305      	adds	r3, #5
 8007986:	b299      	uxth	r1, r3
 8007988:	2303      	movs	r3, #3
 800798a:	2203      	movs	r2, #3
 800798c:	f7f9 ff1e 	bl	80017cc <drawUpDownArrow>
						if(bootButtons.modeClear){
 8007990:	4b27      	ldr	r3, [pc, #156]	; (8007a30 <drawBootMenu+0x824>)
 8007992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007994:	2b00      	cmp	r3, #0
 8007996:	d02f      	beq.n	80079f8 <drawBootMenu+0x7ec>
							setIndicator=0;
 8007998:	4b24      	ldr	r3, [pc, #144]	; (8007a2c <drawBootMenu+0x820>)
 800799a:	2200      	movs	r2, #0
 800799c:	601a      	str	r2, [r3, #0]
						}
						break;
 800799e:	bf00      	nop
 80079a0:	e02a      	b.n	80079f8 <drawBootMenu+0x7ec>
					}
				}
			}
		}
		else{
			j=110;
 80079a2:	236e      	movs	r3, #110	; 0x6e
 80079a4:	61fb      	str	r3, [r7, #28]
			i=120;
 80079a6:	2378      	movs	r3, #120	; 0x78
 80079a8:	613b      	str	r3, [r7, #16]
			bootButtons.bootMode=0;
 80079aa:	4b21      	ldr	r3, [pc, #132]	; (8007a30 <drawBootMenu+0x824>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	629a      	str	r2, [r3, #40]	; 0x28
			LCD_PutStr(i,j, "POWER SWITCH DISABLED!", fnt7x10);
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	b298      	uxth	r0, r3
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	b299      	uxth	r1, r3
 80079b8:	4b1e      	ldr	r3, [pc, #120]	; (8007a34 <drawBootMenu+0x828>)
 80079ba:	4a1f      	ldr	r2, [pc, #124]	; (8007a38 <drawBootMenu+0x82c>)
 80079bc:	f7f9 fdb6 	bl	800152c <LCD_PutStr>
			j+=14;
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	330e      	adds	r3, #14
 80079c4:	61fb      	str	r3, [r7, #28]
			i=75;
 80079c6:	234b      	movs	r3, #75	; 0x4b
 80079c8:	613b      	str	r3, [r7, #16]
			LCD_PutStr(i,j, "Flip Switch to enable Boot Options!", fnt7x10);
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	b298      	uxth	r0, r3
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	b299      	uxth	r1, r3
 80079d2:	4b18      	ldr	r3, [pc, #96]	; (8007a34 <drawBootMenu+0x828>)
 80079d4:	4a19      	ldr	r2, [pc, #100]	; (8007a3c <drawBootMenu+0x830>)
 80079d6:	f7f9 fda9 	bl	800152c <LCD_PutStr>
 80079da:	e00e      	b.n	80079fa <drawBootMenu+0x7ee>
							break;
 80079dc:	bf00      	nop
 80079de:	e00c      	b.n	80079fa <drawBootMenu+0x7ee>
							break;
 80079e0:	bf00      	nop
 80079e2:	e00a      	b.n	80079fa <drawBootMenu+0x7ee>
							break;
 80079e4:	bf00      	nop
 80079e6:	e008      	b.n	80079fa <drawBootMenu+0x7ee>
							break;
 80079e8:	bf00      	nop
 80079ea:	e006      	b.n	80079fa <drawBootMenu+0x7ee>
						break;
 80079ec:	bf00      	nop
 80079ee:	e004      	b.n	80079fa <drawBootMenu+0x7ee>
						break;
 80079f0:	bf00      	nop
 80079f2:	e002      	b.n	80079fa <drawBootMenu+0x7ee>
						break;
 80079f4:	bf00      	nop
 80079f6:	e000      	b.n	80079fa <drawBootMenu+0x7ee>
						break;
 80079f8:	bf00      	nop
		}
		previousMenu=menu;
 80079fa:	4a11      	ldr	r2, [pc, #68]	; (8007a40 <drawBootMenu+0x834>)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6013      	str	r3, [r2, #0]
		i=25;
 8007a00:	2319      	movs	r3, #25
 8007a02:	613b      	str	r3, [r7, #16]
		LCD_FillRect(i, j, i + 12, j + 10);
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	b298      	uxth	r0, r3
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	b299      	uxth	r1, r3
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	330c      	adds	r3, #12
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	330a      	adds	r3, #10
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	f7f9 fa3a 	bl	8000e94 <LCD_FillRect>
		SMLCD_Flush();
 8007a20:	f7f8 fe5a 	bl	80006d8 <SMLCD_Flush>
}
 8007a24:	bf00      	nop
 8007a26:	3720      	adds	r7, #32
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	2000337c 	.word	0x2000337c
 8007a30:	200032ac 	.word	0x200032ac
 8007a34:	08017ac4 	.word	0x08017ac4
 8007a38:	08017900 	.word	0x08017900
 8007a3c:	08017918 	.word	0x08017918
 8007a40:	20003378 	.word	0x20003378

08007a44 <drawMenuHeader>:

void drawMenuHeader(){
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
	int i, j;
	LCD_PixelMode = LCD_PSET;
 8007a4a:	4b4e      	ldr	r3, [pc, #312]	; (8007b84 <drawMenuHeader+0x140>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8007a50:	4b4d      	ldr	r3, [pc, #308]	; (8007b88 <drawMenuHeader+0x144>)
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	4b4c      	ldr	r3, [pc, #304]	; (8007b8c <drawMenuHeader+0x148>)
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	2100      	movs	r1, #0
 8007a62:	2000      	movs	r0, #0
 8007a64:	f7f9 f9d4 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8007a68:	4b47      	ldr	r3, [pc, #284]	; (8007b88 <drawMenuHeader+0x144>)
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	3b03      	subs	r3, #3
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	4b46      	ldr	r3, [pc, #280]	; (8007b8c <drawMenuHeader+0x148>)
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	3b03      	subs	r3, #3
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2102      	movs	r1, #2
 8007a7a:	2002      	movs	r0, #2
 8007a7c:	f7f9 f9c8 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8007a80:	230a      	movs	r3, #10
 8007a82:	607b      	str	r3, [r7, #4]
	j  = 10;
 8007a84:	230a      	movs	r3, #10
 8007a86:	603b      	str	r3, [r7, #0]
	printFaults(i,j);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f8c4 	bl	8007c18 <printFaults>
	i=275;
 8007a90:	f240 1313 	movw	r3, #275	; 0x113
 8007a94:	607b      	str	r3, [r7, #4]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	b298      	uxth	r0, r3
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	b299      	uxth	r1, r3
 8007a9e:	4b3c      	ldr	r3, [pc, #240]	; (8007b90 <drawMenuHeader+0x14c>)
 8007aa0:	4a3c      	ldr	r2, [pc, #240]	; (8007b94 <drawMenuHeader+0x150>)
 8007aa2:	f7f9 fd43 	bl	800152c <LCD_PutStr>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4413      	add	r3, r2
 8007aae:	607b      	str	r3, [r7, #4]
	if(displayAdcValues[Adc.adc0] >3.5){
 8007ab0:	4b39      	ldr	r3, [pc, #228]	; (8007b98 <drawMenuHeader+0x154>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a39      	ldr	r2, [pc, #228]	; (8007b9c <drawMenuHeader+0x158>)
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	edd3 7a00 	vldr	s15, [r3]
 8007abe:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8007ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aca:	dd4a      	ble.n	8007b62 <drawMenuHeader+0x11e>
		switch(bootButtons.bootMode){
 8007acc:	4b34      	ldr	r3, [pc, #208]	; (8007ba0 <drawMenuHeader+0x15c>)
 8007ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad0:	2b05      	cmp	r3, #5
 8007ad2:	d84e      	bhi.n	8007b72 <drawMenuHeader+0x12e>
 8007ad4:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <drawMenuHeader+0x98>)
 8007ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ada:	bf00      	nop
 8007adc:	08007af5 	.word	0x08007af5
 8007ae0:	08007b07 	.word	0x08007b07
 8007ae4:	08007b19 	.word	0x08007b19
 8007ae8:	08007b2b 	.word	0x08007b2b
 8007aec:	08007b4f 	.word	0x08007b4f
 8007af0:	08007b3d 	.word	0x08007b3d
		case UNINITIALIZED:
			LCD_PutStr(i, j, "OFF", fnt7x10);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	b298      	uxth	r0, r3
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	b299      	uxth	r1, r3
 8007afc:	4b24      	ldr	r3, [pc, #144]	; (8007b90 <drawMenuHeader+0x14c>)
 8007afe:	4a29      	ldr	r2, [pc, #164]	; (8007ba4 <drawMenuHeader+0x160>)
 8007b00:	f7f9 fd14 	bl	800152c <LCD_PutStr>
			break;
 8007b04:	e035      	b.n	8007b72 <drawMenuHeader+0x12e>
		case STANDARD:
			LCD_PutStr(i, j, "OS", fnt7x10);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	b298      	uxth	r0, r3
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	b299      	uxth	r1, r3
 8007b0e:	4b20      	ldr	r3, [pc, #128]	; (8007b90 <drawMenuHeader+0x14c>)
 8007b10:	4a25      	ldr	r2, [pc, #148]	; (8007ba8 <drawMenuHeader+0x164>)
 8007b12:	f7f9 fd0b 	bl	800152c <LCD_PutStr>
			break;
 8007b16:	e02c      	b.n	8007b72 <drawMenuHeader+0x12e>
		case UEFI:
			LCD_PutStr(i, j, "UEFI", fnt7x10);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	b298      	uxth	r0, r3
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	b299      	uxth	r1, r3
 8007b20:	4b1b      	ldr	r3, [pc, #108]	; (8007b90 <drawMenuHeader+0x14c>)
 8007b22:	4a22      	ldr	r2, [pc, #136]	; (8007bac <drawMenuHeader+0x168>)
 8007b24:	f7f9 fd02 	bl	800152c <LCD_PutStr>
			break;
 8007b28:	e023      	b.n	8007b72 <drawMenuHeader+0x12e>
		case EDL:
			LCD_PutStr(i, j, "EDL", fnt7x10);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	b298      	uxth	r0, r3
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	b299      	uxth	r1, r3
 8007b32:	4b17      	ldr	r3, [pc, #92]	; (8007b90 <drawMenuHeader+0x14c>)
 8007b34:	4a1e      	ldr	r2, [pc, #120]	; (8007bb0 <drawMenuHeader+0x16c>)
 8007b36:	f7f9 fcf9 	bl	800152c <LCD_PutStr>
			break;
 8007b3a:	e01a      	b.n	8007b72 <drawMenuHeader+0x12e>
		case MASS_STORAGE:
			LCD_PutStr(i, j, "MASS", fnt7x10);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	b298      	uxth	r0, r3
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	b299      	uxth	r1, r3
 8007b44:	4b12      	ldr	r3, [pc, #72]	; (8007b90 <drawMenuHeader+0x14c>)
 8007b46:	4a1b      	ldr	r2, [pc, #108]	; (8007bb4 <drawMenuHeader+0x170>)
 8007b48:	f7f9 fcf0 	bl	800152c <LCD_PutStr>
			break;
 8007b4c:	e011      	b.n	8007b72 <drawMenuHeader+0x12e>
		case RECOVERY:
			LCD_PutStr(i, j, "FFU", fnt7x10);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	b298      	uxth	r0, r3
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	b299      	uxth	r1, r3
 8007b56:	4b0e      	ldr	r3, [pc, #56]	; (8007b90 <drawMenuHeader+0x14c>)
 8007b58:	4a17      	ldr	r2, [pc, #92]	; (8007bb8 <drawMenuHeader+0x174>)
 8007b5a:	f7f9 fce7 	bl	800152c <LCD_PutStr>
			break;
 8007b5e:	bf00      	nop
 8007b60:	e007      	b.n	8007b72 <drawMenuHeader+0x12e>
		}
	}
	else{
		LCD_PutStr(i, j, "OFF", fnt7x10);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	b298      	uxth	r0, r3
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	b299      	uxth	r1, r3
 8007b6a:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <drawMenuHeader+0x14c>)
 8007b6c:	4a0d      	ldr	r2, [pc, #52]	; (8007ba4 <drawMenuHeader+0x160>)
 8007b6e:	f7f9 fcdd 	bl	800152c <LCD_PutStr>
	}

	i  = 135;
 8007b72:	2387      	movs	r3, #135	; 0x87
 8007b74:	607b      	str	r3, [r7, #4]
	j += 14;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	330e      	adds	r3, #14
 8007b7a:	603b      	str	r3, [r7, #0]


}
 8007b7c:	bf00      	nop
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	20028aa8 	.word	0x20028aa8
 8007b88:	20028aaa 	.word	0x20028aaa
 8007b8c:	20028aac 	.word	0x20028aac
 8007b90:	08017ac4 	.word	0x08017ac4
 8007b94:	080172c0 	.word	0x080172c0
 8007b98:	20000128 	.word	0x20000128
 8007b9c:	20030aa0 	.word	0x20030aa0
 8007ba0:	200032ac 	.word	0x200032ac
 8007ba4:	080172c8 	.word	0x080172c8
 8007ba8:	080172cc 	.word	0x080172cc
 8007bac:	080172d0 	.word	0x080172d0
 8007bb0:	080172d8 	.word	0x080172d8
 8007bb4:	080172dc 	.word	0x080172dc
 8007bb8:	080172e4 	.word	0x080172e4

08007bbc <getLatestADC>:

void getLatestADC(){
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
	int i;
	float * adcValuePointer;
	 if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8007bc2:	4b13      	ldr	r3, [pc, #76]	; (8007c10 <getLatestADC+0x54>)
 8007bc4:	781a      	ldrb	r2, [r3, #0]
 8007bc6:	4b12      	ldr	r3, [pc, #72]	; (8007c10 <getLatestADC+0x54>)
 8007bc8:	785b      	ldrb	r3, [r3, #1]
 8007bca:	4013      	ands	r3, r2
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	4b10      	ldr	r3, [pc, #64]	; (8007c10 <getLatestADC+0x54>)
 8007bd0:	789b      	ldrb	r3, [r3, #2]
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d016      	beq.n	8007c08 <getLatestADC+0x4c>
		  adcValuePointer = getADCValues();
 8007bda:	f7fb fed9 	bl	8003990 <getADCValues>
 8007bde:	4603      	mov	r3, r0
 8007be0:	603b      	str	r3, [r7, #0]
		  for(i=0;i<21;i++){
 8007be2:	2300      	movs	r3, #0
 8007be4:	607b      	str	r3, [r7, #4]
 8007be6:	e00c      	b.n	8007c02 <getLatestADC+0x46>
	  		  displayAdcValues[i]=*(adcValuePointer+i);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	4413      	add	r3, r2
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	4908      	ldr	r1, [pc, #32]	; (8007c14 <getLatestADC+0x58>)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	440b      	add	r3, r1
 8007bfa:	601a      	str	r2, [r3, #0]
		  for(i=0;i<21;i++){
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	607b      	str	r3, [r7, #4]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b14      	cmp	r3, #20
 8007c06:	ddef      	ble.n	8007be8 <getLatestADC+0x2c>
		  }
	 }
}
 8007c08:	bf00      	nop
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	20029224 	.word	0x20029224
 8007c14:	20030aa0 	.word	0x20030aa0

08007c18 <printFaults>:
//print only the critical faults. Order is VSYS_PMI, ZION, FAULT3-9
int printFaults(int i, int j){
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
	int x = i;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	60fb      	str	r3, [r7, #12]
	int y = j;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	60bb      	str	r3, [r7, #8]
	x += LCD_PutStr(x, y, "FAULTS:", fnt7x10);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	b298      	uxth	r0, r3
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	b299      	uxth	r1, r3
 8007c32:	4b67      	ldr	r3, [pc, #412]	; (8007dd0 <printFaults+0x1b8>)
 8007c34:	4a67      	ldr	r2, [pc, #412]	; (8007dd4 <printFaults+0x1bc>)
 8007c36:	f7f9 fc79 	bl	800152c <LCD_PutStr>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	4413      	add	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]
	if(errorLED.vsysPMIFault){
 8007c44:	4b64      	ldr	r3, [pc, #400]	; (8007dd8 <printFaults+0x1c0>)
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00d      	beq.n	8007c68 <printFaults+0x50>
		x += LCD_PutStr(x, y, "VSYS", fnt7x10);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	b298      	uxth	r0, r3
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	b299      	uxth	r1, r3
 8007c54:	4b5e      	ldr	r3, [pc, #376]	; (8007dd0 <printFaults+0x1b8>)
 8007c56:	4a61      	ldr	r2, [pc, #388]	; (8007ddc <printFaults+0x1c4>)
 8007c58:	f7f9 fc68 	bl	800152c <LCD_PutStr>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	461a      	mov	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4413      	add	r3, r2
 8007c64:	60fb      	str	r3, [r7, #12]
 8007c66:	e0ae      	b.n	8007dc6 <printFaults+0x1ae>
	}
	else if(errorLED.zionFault){
 8007c68:	4b5b      	ldr	r3, [pc, #364]	; (8007dd8 <printFaults+0x1c0>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00d      	beq.n	8007c8c <printFaults+0x74>
		x += LCD_PutStr(x, y, "ZION", fnt7x10);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	b298      	uxth	r0, r3
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	b299      	uxth	r1, r3
 8007c78:	4b55      	ldr	r3, [pc, #340]	; (8007dd0 <printFaults+0x1b8>)
 8007c7a:	4a59      	ldr	r2, [pc, #356]	; (8007de0 <printFaults+0x1c8>)
 8007c7c:	f7f9 fc56 	bl	800152c <LCD_PutStr>
 8007c80:	4603      	mov	r3, r0
 8007c82:	461a      	mov	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	4413      	add	r3, r2
 8007c88:	60fb      	str	r3, [r7, #12]
 8007c8a:	e09c      	b.n	8007dc6 <printFaults+0x1ae>
	}
	else if(errorLED.fault3){
 8007c8c:	4b52      	ldr	r3, [pc, #328]	; (8007dd8 <printFaults+0x1c0>)
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00d      	beq.n	8007cb0 <printFaults+0x98>
		x += LCD_PutStr(x, y, "FAULT3", fnt7x10);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	b298      	uxth	r0, r3
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	b299      	uxth	r1, r3
 8007c9c:	4b4c      	ldr	r3, [pc, #304]	; (8007dd0 <printFaults+0x1b8>)
 8007c9e:	4a51      	ldr	r2, [pc, #324]	; (8007de4 <printFaults+0x1cc>)
 8007ca0:	f7f9 fc44 	bl	800152c <LCD_PutStr>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4413      	add	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]
 8007cae:	e08a      	b.n	8007dc6 <printFaults+0x1ae>
	}
	else if(errorLED.fault4){
 8007cb0:	4b49      	ldr	r3, [pc, #292]	; (8007dd8 <printFaults+0x1c0>)
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00d      	beq.n	8007cd4 <printFaults+0xbc>
		x += LCD_PutStr(x, y, "FAULT4", fnt7x10);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	b298      	uxth	r0, r3
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	b299      	uxth	r1, r3
 8007cc0:	4b43      	ldr	r3, [pc, #268]	; (8007dd0 <printFaults+0x1b8>)
 8007cc2:	4a49      	ldr	r2, [pc, #292]	; (8007de8 <printFaults+0x1d0>)
 8007cc4:	f7f9 fc32 	bl	800152c <LCD_PutStr>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	461a      	mov	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	e078      	b.n	8007dc6 <printFaults+0x1ae>
	}
	else if(errorLED.fault5){
 8007cd4:	4b40      	ldr	r3, [pc, #256]	; (8007dd8 <printFaults+0x1c0>)
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00d      	beq.n	8007cf8 <printFaults+0xe0>
		x += LCD_PutStr(x, y, "FAULT5", fnt7x10);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	b298      	uxth	r0, r3
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	b299      	uxth	r1, r3
 8007ce4:	4b3a      	ldr	r3, [pc, #232]	; (8007dd0 <printFaults+0x1b8>)
 8007ce6:	4a41      	ldr	r2, [pc, #260]	; (8007dec <printFaults+0x1d4>)
 8007ce8:	f7f9 fc20 	bl	800152c <LCD_PutStr>
 8007cec:	4603      	mov	r3, r0
 8007cee:	461a      	mov	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	e066      	b.n	8007dc6 <printFaults+0x1ae>
	}
	else if(errorLED.fault6){
 8007cf8:	4b37      	ldr	r3, [pc, #220]	; (8007dd8 <printFaults+0x1c0>)
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00d      	beq.n	8007d1c <printFaults+0x104>
		x += LCD_PutStr(x, y, "FAULT6", fnt7x10);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	b298      	uxth	r0, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	b299      	uxth	r1, r3
 8007d08:	4b31      	ldr	r3, [pc, #196]	; (8007dd0 <printFaults+0x1b8>)
 8007d0a:	4a39      	ldr	r2, [pc, #228]	; (8007df0 <printFaults+0x1d8>)
 8007d0c:	f7f9 fc0e 	bl	800152c <LCD_PutStr>
 8007d10:	4603      	mov	r3, r0
 8007d12:	461a      	mov	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	4413      	add	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	e054      	b.n	8007dc6 <printFaults+0x1ae>
	}
	else if(errorLED.fault7){
 8007d1c:	4b2e      	ldr	r3, [pc, #184]	; (8007dd8 <printFaults+0x1c0>)
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00d      	beq.n	8007d40 <printFaults+0x128>
		x += LCD_PutStr(x, y, "FAULT7", fnt7x10);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	b298      	uxth	r0, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	b299      	uxth	r1, r3
 8007d2c:	4b28      	ldr	r3, [pc, #160]	; (8007dd0 <printFaults+0x1b8>)
 8007d2e:	4a31      	ldr	r2, [pc, #196]	; (8007df4 <printFaults+0x1dc>)
 8007d30:	f7f9 fbfc 	bl	800152c <LCD_PutStr>
 8007d34:	4603      	mov	r3, r0
 8007d36:	461a      	mov	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	e042      	b.n	8007dc6 <printFaults+0x1ae>
	}
	else if(errorLED.fault8){
 8007d40:	4b25      	ldr	r3, [pc, #148]	; (8007dd8 <printFaults+0x1c0>)
 8007d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00d      	beq.n	8007d64 <printFaults+0x14c>
		x += LCD_PutStr(x, y, "FAULT8", fnt7x10);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	b298      	uxth	r0, r3
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	b299      	uxth	r1, r3
 8007d50:	4b1f      	ldr	r3, [pc, #124]	; (8007dd0 <printFaults+0x1b8>)
 8007d52:	4a29      	ldr	r2, [pc, #164]	; (8007df8 <printFaults+0x1e0>)
 8007d54:	f7f9 fbea 	bl	800152c <LCD_PutStr>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4413      	add	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	e030      	b.n	8007dc6 <printFaults+0x1ae>
	}
	else if(errorLED.fault9){
 8007d64:	4b1c      	ldr	r3, [pc, #112]	; (8007dd8 <printFaults+0x1c0>)
 8007d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00d      	beq.n	8007d88 <printFaults+0x170>
		x += LCD_PutStr(x, y, "FAULT9", fnt7x10);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	b298      	uxth	r0, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	b299      	uxth	r1, r3
 8007d74:	4b16      	ldr	r3, [pc, #88]	; (8007dd0 <printFaults+0x1b8>)
 8007d76:	4a21      	ldr	r2, [pc, #132]	; (8007dfc <printFaults+0x1e4>)
 8007d78:	f7f9 fbd8 	bl	800152c <LCD_PutStr>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	461a      	mov	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4413      	add	r3, r2
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	e01e      	b.n	8007dc6 <printFaults+0x1ae>
	}
	else if(errorLED.ledDriver){
 8007d88:	4b13      	ldr	r3, [pc, #76]	; (8007dd8 <printFaults+0x1c0>)
 8007d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00d      	beq.n	8007dac <printFaults+0x194>
		x += LCD_PutStr(x, y, "LED DVR", fnt7x10);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	b298      	uxth	r0, r3
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	b299      	uxth	r1, r3
 8007d98:	4b0d      	ldr	r3, [pc, #52]	; (8007dd0 <printFaults+0x1b8>)
 8007d9a:	4a19      	ldr	r2, [pc, #100]	; (8007e00 <printFaults+0x1e8>)
 8007d9c:	f7f9 fbc6 	bl	800152c <LCD_PutStr>
 8007da0:	4603      	mov	r3, r0
 8007da2:	461a      	mov	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4413      	add	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]
 8007daa:	e00c      	b.n	8007dc6 <printFaults+0x1ae>
	}
	else{
		x += LCD_PutStr(x, y, "NONE!", fnt7x10);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	b298      	uxth	r0, r3
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	b299      	uxth	r1, r3
 8007db4:	4b06      	ldr	r3, [pc, #24]	; (8007dd0 <printFaults+0x1b8>)
 8007db6:	4a13      	ldr	r2, [pc, #76]	; (8007e04 <printFaults+0x1ec>)
 8007db8:	f7f9 fbb8 	bl	800152c <LCD_PutStr>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]
	}
	return x;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	08017ac4 	.word	0x08017ac4
 8007dd4:	08017360 	.word	0x08017360
 8007dd8:	200032d8 	.word	0x200032d8
 8007ddc:	0801793c 	.word	0x0801793c
 8007de0:	08017944 	.word	0x08017944
 8007de4:	08017300 	.word	0x08017300
 8007de8:	08017308 	.word	0x08017308
 8007dec:	08017310 	.word	0x08017310
 8007df0:	08017318 	.word	0x08017318
 8007df4:	08017320 	.word	0x08017320
 8007df8:	08017328 	.word	0x08017328
 8007dfc:	08017330 	.word	0x08017330
 8007e00:	0801794c 	.word	0x0801794c
 8007e04:	08017954 	.word	0x08017954

08007e08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007e0e:	4b11      	ldr	r3, [pc, #68]	; (8007e54 <HAL_MspInit+0x4c>)
 8007e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e12:	4a10      	ldr	r2, [pc, #64]	; (8007e54 <HAL_MspInit+0x4c>)
 8007e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e18:	6413      	str	r3, [r2, #64]	; 0x40
 8007e1a:	4b0e      	ldr	r3, [pc, #56]	; (8007e54 <HAL_MspInit+0x4c>)
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e22:	607b      	str	r3, [r7, #4]
 8007e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e26:	4b0b      	ldr	r3, [pc, #44]	; (8007e54 <HAL_MspInit+0x4c>)
 8007e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2a:	4a0a      	ldr	r2, [pc, #40]	; (8007e54 <HAL_MspInit+0x4c>)
 8007e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e30:	6453      	str	r3, [r2, #68]	; 0x44
 8007e32:	4b08      	ldr	r3, [pc, #32]	; (8007e54 <HAL_MspInit+0x4c>)
 8007e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007e3e:	2200      	movs	r2, #0
 8007e40:	210f      	movs	r1, #15
 8007e42:	f06f 0001 	mvn.w	r0, #1
 8007e46:	f002 f9ab 	bl	800a1a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e4a:	bf00      	nop
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	40023800 	.word	0x40023800

08007e58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b094      	sub	sp, #80	; 0x50
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007e64:	2200      	movs	r2, #0
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	605a      	str	r2, [r3, #4]
 8007e6a:	609a      	str	r2, [r3, #8]
 8007e6c:	60da      	str	r2, [r3, #12]
 8007e6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a91      	ldr	r2, [pc, #580]	; (80080bc <HAL_ADC_MspInit+0x264>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	f040 808c 	bne.w	8007f94 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007e7c:	4b90      	ldr	r3, [pc, #576]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e80:	4a8f      	ldr	r2, [pc, #572]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e86:	6453      	str	r3, [r2, #68]	; 0x44
 8007e88:	4b8d      	ldr	r3, [pc, #564]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e90:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e94:	4b8a      	ldr	r3, [pc, #552]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e98:	4a89      	ldr	r2, [pc, #548]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007e9a:	f043 0304 	orr.w	r3, r3, #4
 8007e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8007ea0:	4b87      	ldr	r3, [pc, #540]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea4:	f003 0304 	and.w	r3, r3, #4
 8007ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007eac:	4b84      	ldr	r3, [pc, #528]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb0:	4a83      	ldr	r2, [pc, #524]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007eb2:	f043 0301 	orr.w	r3, r3, #1
 8007eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8007eb8:	4b81      	ldr	r3, [pc, #516]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ec4:	4b7e      	ldr	r3, [pc, #504]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec8:	4a7d      	ldr	r2, [pc, #500]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007eca:	f043 0302 	orr.w	r3, r3, #2
 8007ece:	6313      	str	r3, [r2, #48]	; 0x30
 8007ed0:	4b7b      	ldr	r3, [pc, #492]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed4:	f003 0302 	and.w	r3, r3, #2
 8007ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8007edc:	230f      	movs	r3, #15
 8007ede:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ee8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007eec:	4619      	mov	r1, r3
 8007eee:	4875      	ldr	r0, [pc, #468]	; (80080c4 <HAL_ADC_MspInit+0x26c>)
 8007ef0:	f002 fd88 	bl	800aa04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC6_Pin|ADC5_Pin|ADC3_Pin
 8007ef4:	23f8      	movs	r3, #248	; 0xf8
 8007ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007efc:	2300      	movs	r3, #0
 8007efe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007f04:	4619      	mov	r1, r3
 8007f06:	4870      	ldr	r0, [pc, #448]	; (80080c8 <HAL_ADC_MspInit+0x270>)
 8007f08:	f002 fd7c 	bl	800aa04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC9_Pin|ADC8_Pin;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007f10:	2303      	movs	r3, #3
 8007f12:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f14:	2300      	movs	r3, #0
 8007f16:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	486b      	ldr	r0, [pc, #428]	; (80080cc <HAL_ADC_MspInit+0x274>)
 8007f20:	f002 fd70 	bl	800aa04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8007f24:	4b6a      	ldr	r3, [pc, #424]	; (80080d0 <HAL_ADC_MspInit+0x278>)
 8007f26:	4a6b      	ldr	r2, [pc, #428]	; (80080d4 <HAL_ADC_MspInit+0x27c>)
 8007f28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007f2a:	4b69      	ldr	r3, [pc, #420]	; (80080d0 <HAL_ADC_MspInit+0x278>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007f30:	4b67      	ldr	r3, [pc, #412]	; (80080d0 <HAL_ADC_MspInit+0x278>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f36:	4b66      	ldr	r3, [pc, #408]	; (80080d0 <HAL_ADC_MspInit+0x278>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007f3c:	4b64      	ldr	r3, [pc, #400]	; (80080d0 <HAL_ADC_MspInit+0x278>)
 8007f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007f44:	4b62      	ldr	r3, [pc, #392]	; (80080d0 <HAL_ADC_MspInit+0x278>)
 8007f46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007f4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007f4c:	4b60      	ldr	r3, [pc, #384]	; (80080d0 <HAL_ADC_MspInit+0x278>)
 8007f4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007f52:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8007f54:	4b5e      	ldr	r3, [pc, #376]	; (80080d0 <HAL_ADC_MspInit+0x278>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007f5a:	4b5d      	ldr	r3, [pc, #372]	; (80080d0 <HAL_ADC_MspInit+0x278>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007f60:	4b5b      	ldr	r3, [pc, #364]	; (80080d0 <HAL_ADC_MspInit+0x278>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007f66:	485a      	ldr	r0, [pc, #360]	; (80080d0 <HAL_ADC_MspInit+0x278>)
 8007f68:	f002 f944 	bl	800a1f4 <HAL_DMA_Init>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 8007f72:	f7fd f827 	bl	8004fc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a55      	ldr	r2, [pc, #340]	; (80080d0 <HAL_ADC_MspInit+0x278>)
 8007f7a:	639a      	str	r2, [r3, #56]	; 0x38
 8007f7c:	4a54      	ldr	r2, [pc, #336]	; (80080d0 <HAL_ADC_MspInit+0x278>)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8007f82:	2200      	movs	r2, #0
 8007f84:	2105      	movs	r1, #5
 8007f86:	2012      	movs	r0, #18
 8007f88:	f002 f90a 	bl	800a1a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007f8c:	2012      	movs	r0, #18
 8007f8e:	f002 f923 	bl	800a1d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8007f92:	e13a      	b.n	800820a <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a4f      	ldr	r2, [pc, #316]	; (80080d8 <HAL_ADC_MspInit+0x280>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	f040 80a2 	bne.w	80080e4 <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007fa0:	4b47      	ldr	r3, [pc, #284]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa4:	4a46      	ldr	r2, [pc, #280]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007faa:	6453      	str	r3, [r2, #68]	; 0x44
 8007fac:	4b44      	ldr	r3, [pc, #272]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fb8:	4b41      	ldr	r3, [pc, #260]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbc:	4a40      	ldr	r2, [pc, #256]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007fbe:	f043 0304 	orr.w	r3, r3, #4
 8007fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8007fc4:	4b3e      	ldr	r3, [pc, #248]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fd0:	4b3b      	ldr	r3, [pc, #236]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd4:	4a3a      	ldr	r2, [pc, #232]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007fd6:	f043 0301 	orr.w	r3, r3, #1
 8007fda:	6313      	str	r3, [r2, #48]	; 0x30
 8007fdc:	4b38      	ldr	r3, [pc, #224]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	623b      	str	r3, [r7, #32]
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fe8:	4b35      	ldr	r3, [pc, #212]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fec:	4a34      	ldr	r2, [pc, #208]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007fee:	f043 0302 	orr.w	r3, r3, #2
 8007ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8007ff4:	4b32      	ldr	r3, [pc, #200]	; (80080c0 <HAL_ADC_MspInit+0x268>)
 8007ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	61fb      	str	r3, [r7, #28]
 8007ffe:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin
 8008000:	233f      	movs	r3, #63	; 0x3f
 8008002:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008004:	2303      	movs	r3, #3
 8008006:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008008:	2300      	movs	r3, #0
 800800a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800800c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008010:	4619      	mov	r1, r3
 8008012:	482c      	ldr	r0, [pc, #176]	; (80080c4 <HAL_ADC_MspInit+0x26c>)
 8008014:	f002 fcf6 	bl	800aa04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin|ADC4_Pin|ADC6_Pin
 8008018:	237b      	movs	r3, #123	; 0x7b
 800801a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800801c:	2303      	movs	r3, #3
 800801e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008020:	2300      	movs	r3, #0
 8008022:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008024:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008028:	4619      	mov	r1, r3
 800802a:	4827      	ldr	r0, [pc, #156]	; (80080c8 <HAL_ADC_MspInit+0x270>)
 800802c:	f002 fcea 	bl	800aa04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC9_Pin;
 8008030:	2302      	movs	r3, #2
 8008032:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008034:	2303      	movs	r3, #3
 8008036:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008038:	2300      	movs	r3, #0
 800803a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ADC9_GPIO_Port, &GPIO_InitStruct);
 800803c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008040:	4619      	mov	r1, r3
 8008042:	4822      	ldr	r0, [pc, #136]	; (80080cc <HAL_ADC_MspInit+0x274>)
 8008044:	f002 fcde 	bl	800aa04 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8008048:	4b24      	ldr	r3, [pc, #144]	; (80080dc <HAL_ADC_MspInit+0x284>)
 800804a:	4a25      	ldr	r2, [pc, #148]	; (80080e0 <HAL_ADC_MspInit+0x288>)
 800804c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800804e:	4b23      	ldr	r3, [pc, #140]	; (80080dc <HAL_ADC_MspInit+0x284>)
 8008050:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008054:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008056:	4b21      	ldr	r3, [pc, #132]	; (80080dc <HAL_ADC_MspInit+0x284>)
 8008058:	2200      	movs	r2, #0
 800805a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800805c:	4b1f      	ldr	r3, [pc, #124]	; (80080dc <HAL_ADC_MspInit+0x284>)
 800805e:	2200      	movs	r2, #0
 8008060:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8008062:	4b1e      	ldr	r3, [pc, #120]	; (80080dc <HAL_ADC_MspInit+0x284>)
 8008064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008068:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800806a:	4b1c      	ldr	r3, [pc, #112]	; (80080dc <HAL_ADC_MspInit+0x284>)
 800806c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008070:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008072:	4b1a      	ldr	r3, [pc, #104]	; (80080dc <HAL_ADC_MspInit+0x284>)
 8008074:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008078:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800807a:	4b18      	ldr	r3, [pc, #96]	; (80080dc <HAL_ADC_MspInit+0x284>)
 800807c:	2200      	movs	r2, #0
 800807e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8008080:	4b16      	ldr	r3, [pc, #88]	; (80080dc <HAL_ADC_MspInit+0x284>)
 8008082:	2200      	movs	r2, #0
 8008084:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008086:	4b15      	ldr	r3, [pc, #84]	; (80080dc <HAL_ADC_MspInit+0x284>)
 8008088:	2200      	movs	r2, #0
 800808a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800808c:	4813      	ldr	r0, [pc, #76]	; (80080dc <HAL_ADC_MspInit+0x284>)
 800808e:	f002 f8b1 	bl	800a1f4 <HAL_DMA_Init>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <HAL_ADC_MspInit+0x244>
      Error_Handler();
 8008098:	f7fc ff94 	bl	8004fc4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a0f      	ldr	r2, [pc, #60]	; (80080dc <HAL_ADC_MspInit+0x284>)
 80080a0:	639a      	str	r2, [r3, #56]	; 0x38
 80080a2:	4a0e      	ldr	r2, [pc, #56]	; (80080dc <HAL_ADC_MspInit+0x284>)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80080a8:	2200      	movs	r2, #0
 80080aa:	2105      	movs	r1, #5
 80080ac:	2012      	movs	r0, #18
 80080ae:	f002 f877 	bl	800a1a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80080b2:	2012      	movs	r0, #18
 80080b4:	f002 f890 	bl	800a1d8 <HAL_NVIC_EnableIRQ>
}
 80080b8:	e0a7      	b.n	800820a <HAL_ADC_MspInit+0x3b2>
 80080ba:	bf00      	nop
 80080bc:	40012000 	.word	0x40012000
 80080c0:	40023800 	.word	0x40023800
 80080c4:	40020800 	.word	0x40020800
 80080c8:	40020000 	.word	0x40020000
 80080cc:	40020400 	.word	0x40020400
 80080d0:	2002ba90 	.word	0x2002ba90
 80080d4:	40026410 	.word	0x40026410
 80080d8:	40012100 	.word	0x40012100
 80080dc:	200309d8 	.word	0x200309d8
 80080e0:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a4a      	ldr	r2, [pc, #296]	; (8008214 <HAL_ADC_MspInit+0x3bc>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	f040 808d 	bne.w	800820a <HAL_ADC_MspInit+0x3b2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80080f0:	4b49      	ldr	r3, [pc, #292]	; (8008218 <HAL_ADC_MspInit+0x3c0>)
 80080f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f4:	4a48      	ldr	r2, [pc, #288]	; (8008218 <HAL_ADC_MspInit+0x3c0>)
 80080f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080fa:	6453      	str	r3, [r2, #68]	; 0x44
 80080fc:	4b46      	ldr	r3, [pc, #280]	; (8008218 <HAL_ADC_MspInit+0x3c0>)
 80080fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008104:	61bb      	str	r3, [r7, #24]
 8008106:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008108:	4b43      	ldr	r3, [pc, #268]	; (8008218 <HAL_ADC_MspInit+0x3c0>)
 800810a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810c:	4a42      	ldr	r2, [pc, #264]	; (8008218 <HAL_ADC_MspInit+0x3c0>)
 800810e:	f043 0320 	orr.w	r3, r3, #32
 8008112:	6313      	str	r3, [r2, #48]	; 0x30
 8008114:	4b40      	ldr	r3, [pc, #256]	; (8008218 <HAL_ADC_MspInit+0x3c0>)
 8008116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008118:	f003 0320 	and.w	r3, r3, #32
 800811c:	617b      	str	r3, [r7, #20]
 800811e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008120:	4b3d      	ldr	r3, [pc, #244]	; (8008218 <HAL_ADC_MspInit+0x3c0>)
 8008122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008124:	4a3c      	ldr	r2, [pc, #240]	; (8008218 <HAL_ADC_MspInit+0x3c0>)
 8008126:	f043 0304 	orr.w	r3, r3, #4
 800812a:	6313      	str	r3, [r2, #48]	; 0x30
 800812c:	4b3a      	ldr	r3, [pc, #232]	; (8008218 <HAL_ADC_MspInit+0x3c0>)
 800812e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008130:	f003 0304 	and.w	r3, r3, #4
 8008134:	613b      	str	r3, [r7, #16]
 8008136:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008138:	4b37      	ldr	r3, [pc, #220]	; (8008218 <HAL_ADC_MspInit+0x3c0>)
 800813a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813c:	4a36      	ldr	r2, [pc, #216]	; (8008218 <HAL_ADC_MspInit+0x3c0>)
 800813e:	f043 0301 	orr.w	r3, r3, #1
 8008142:	6313      	str	r3, [r2, #48]	; 0x30
 8008144:	4b34      	ldr	r3, [pc, #208]	; (8008218 <HAL_ADC_MspInit+0x3c0>)
 8008146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC15_Pin|ADC14_Pin|PP_SPARE_I2C_ADC_Pin|ZION_SENSE_Pin
 8008150:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8008154:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008156:	2303      	movs	r3, #3
 8008158:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800815a:	2300      	movs	r3, #0
 800815c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800815e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008162:	4619      	mov	r1, r3
 8008164:	482d      	ldr	r0, [pc, #180]	; (800821c <HAL_ADC_MspInit+0x3c4>)
 8008166:	f002 fc4d 	bl	800aa04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 800816a:	230f      	movs	r3, #15
 800816c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800816e:	2303      	movs	r3, #3
 8008170:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008172:	2300      	movs	r3, #0
 8008174:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008176:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800817a:	4619      	mov	r1, r3
 800817c:	4828      	ldr	r0, [pc, #160]	; (8008220 <HAL_ADC_MspInit+0x3c8>)
 800817e:	f002 fc41 	bl	800aa04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 8008182:	230c      	movs	r3, #12
 8008184:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008186:	2303      	movs	r3, #3
 8008188:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800818a:	2300      	movs	r3, #0
 800818c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800818e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008192:	4619      	mov	r1, r3
 8008194:	4823      	ldr	r0, [pc, #140]	; (8008224 <HAL_ADC_MspInit+0x3cc>)
 8008196:	f002 fc35 	bl	800aa04 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800819a:	4b23      	ldr	r3, [pc, #140]	; (8008228 <HAL_ADC_MspInit+0x3d0>)
 800819c:	4a23      	ldr	r2, [pc, #140]	; (800822c <HAL_ADC_MspInit+0x3d4>)
 800819e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80081a0:	4b21      	ldr	r3, [pc, #132]	; (8008228 <HAL_ADC_MspInit+0x3d0>)
 80081a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80081a6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80081a8:	4b1f      	ldr	r3, [pc, #124]	; (8008228 <HAL_ADC_MspInit+0x3d0>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80081ae:	4b1e      	ldr	r3, [pc, #120]	; (8008228 <HAL_ADC_MspInit+0x3d0>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80081b4:	4b1c      	ldr	r3, [pc, #112]	; (8008228 <HAL_ADC_MspInit+0x3d0>)
 80081b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081ba:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80081bc:	4b1a      	ldr	r3, [pc, #104]	; (8008228 <HAL_ADC_MspInit+0x3d0>)
 80081be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80081c2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80081c4:	4b18      	ldr	r3, [pc, #96]	; (8008228 <HAL_ADC_MspInit+0x3d0>)
 80081c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80081ca:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80081cc:	4b16      	ldr	r3, [pc, #88]	; (8008228 <HAL_ADC_MspInit+0x3d0>)
 80081ce:	2200      	movs	r2, #0
 80081d0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80081d2:	4b15      	ldr	r3, [pc, #84]	; (8008228 <HAL_ADC_MspInit+0x3d0>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80081d8:	4b13      	ldr	r3, [pc, #76]	; (8008228 <HAL_ADC_MspInit+0x3d0>)
 80081da:	2200      	movs	r2, #0
 80081dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80081de:	4812      	ldr	r0, [pc, #72]	; (8008228 <HAL_ADC_MspInit+0x3d0>)
 80081e0:	f002 f808 	bl	800a1f4 <HAL_DMA_Init>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <HAL_ADC_MspInit+0x396>
      Error_Handler();
 80081ea:	f7fc feeb 	bl	8004fc4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a0d      	ldr	r2, [pc, #52]	; (8008228 <HAL_ADC_MspInit+0x3d0>)
 80081f2:	639a      	str	r2, [r3, #56]	; 0x38
 80081f4:	4a0c      	ldr	r2, [pc, #48]	; (8008228 <HAL_ADC_MspInit+0x3d0>)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80081fa:	2200      	movs	r2, #0
 80081fc:	2105      	movs	r1, #5
 80081fe:	2012      	movs	r0, #18
 8008200:	f001 ffce 	bl	800a1a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8008204:	2012      	movs	r0, #18
 8008206:	f001 ffe7 	bl	800a1d8 <HAL_NVIC_EnableIRQ>
}
 800820a:	bf00      	nop
 800820c:	3750      	adds	r7, #80	; 0x50
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	40012200 	.word	0x40012200
 8008218:	40023800 	.word	0x40023800
 800821c:	40021400 	.word	0x40021400
 8008220:	40020800 	.word	0x40020800
 8008224:	40020000 	.word	0x40020000
 8008228:	200291c4 	.word	0x200291c4
 800822c:	40026428 	.word	0x40026428

08008230 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b090      	sub	sp, #64	; 0x40
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008238:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800823c:	2200      	movs	r2, #0
 800823e:	601a      	str	r2, [r3, #0]
 8008240:	605a      	str	r2, [r3, #4]
 8008242:	609a      	str	r2, [r3, #8]
 8008244:	60da      	str	r2, [r3, #12]
 8008246:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a6c      	ldr	r2, [pc, #432]	; (8008400 <HAL_I2C_MspInit+0x1d0>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d129      	bne.n	80082a6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008252:	4b6c      	ldr	r3, [pc, #432]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 8008254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008256:	4a6b      	ldr	r2, [pc, #428]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 8008258:	f043 0302 	orr.w	r3, r3, #2
 800825c:	6313      	str	r3, [r2, #48]	; 0x30
 800825e:	4b69      	ldr	r3, [pc, #420]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 8008260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	62bb      	str	r3, [r7, #40]	; 0x28
 8008268:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LED_I2C_SCL_Pin|LED_I2C_SDA_Pin;
 800826a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800826e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008270:	2312      	movs	r3, #18
 8008272:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008274:	2301      	movs	r3, #1
 8008276:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008278:	2303      	movs	r3, #3
 800827a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800827c:	2304      	movs	r3, #4
 800827e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008284:	4619      	mov	r1, r3
 8008286:	4860      	ldr	r0, [pc, #384]	; (8008408 <HAL_I2C_MspInit+0x1d8>)
 8008288:	f002 fbbc 	bl	800aa04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800828c:	4b5d      	ldr	r3, [pc, #372]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 800828e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008290:	4a5c      	ldr	r2, [pc, #368]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 8008292:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008296:	6413      	str	r3, [r2, #64]	; 0x40
 8008298:	4b5a      	ldr	r3, [pc, #360]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 800829a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082a0:	627b      	str	r3, [r7, #36]	; 0x24
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80082a4:	e0a7      	b.n	80083f6 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a58      	ldr	r2, [pc, #352]	; (800840c <HAL_I2C_MspInit+0x1dc>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d128      	bne.n	8008302 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80082b0:	4b54      	ldr	r3, [pc, #336]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 80082b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b4:	4a53      	ldr	r2, [pc, #332]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 80082b6:	f043 0320 	orr.w	r3, r3, #32
 80082ba:	6313      	str	r3, [r2, #48]	; 0x30
 80082bc:	4b51      	ldr	r3, [pc, #324]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 80082be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	623b      	str	r3, [r7, #32]
 80082c6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SPARE_I2C_SDA_3V3_Pin|SPARE_I2C_SCL_3V3_Pin;
 80082c8:	2303      	movs	r3, #3
 80082ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80082cc:	2312      	movs	r3, #18
 80082ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80082d0:	2301      	movs	r3, #1
 80082d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082d4:	2303      	movs	r3, #3
 80082d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80082d8:	2304      	movs	r3, #4
 80082da:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80082dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082e0:	4619      	mov	r1, r3
 80082e2:	484b      	ldr	r0, [pc, #300]	; (8008410 <HAL_I2C_MspInit+0x1e0>)
 80082e4:	f002 fb8e 	bl	800aa04 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80082e8:	4b46      	ldr	r3, [pc, #280]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 80082ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ec:	4a45      	ldr	r2, [pc, #276]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 80082ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80082f2:	6413      	str	r3, [r2, #64]	; 0x40
 80082f4:	4b43      	ldr	r3, [pc, #268]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 80082f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082fc:	61fb      	str	r3, [r7, #28]
 80082fe:	69fb      	ldr	r3, [r7, #28]
}
 8008300:	e079      	b.n	80083f6 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a43      	ldr	r2, [pc, #268]	; (8008414 <HAL_I2C_MspInit+0x1e4>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d146      	bne.n	800839a <HAL_I2C_MspInit+0x16a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800830c:	4b3d      	ldr	r3, [pc, #244]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 800830e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008310:	4a3c      	ldr	r2, [pc, #240]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 8008312:	f043 0304 	orr.w	r3, r3, #4
 8008316:	6313      	str	r3, [r2, #48]	; 0x30
 8008318:	4b3a      	ldr	r3, [pc, #232]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 800831a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	61bb      	str	r3, [r7, #24]
 8008322:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008324:	4b37      	ldr	r3, [pc, #220]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 8008326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008328:	4a36      	ldr	r2, [pc, #216]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 800832a:	f043 0301 	orr.w	r3, r3, #1
 800832e:	6313      	str	r3, [r2, #48]	; 0x30
 8008330:	4b34      	ldr	r3, [pc, #208]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 8008332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	617b      	str	r3, [r7, #20]
 800833a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SOC_I2C_SDA_3V3_Pin;
 800833c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008340:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008342:	2312      	movs	r3, #18
 8008344:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008346:	2301      	movs	r3, #1
 8008348:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800834a:	2303      	movs	r3, #3
 800834c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800834e:	2304      	movs	r3, #4
 8008350:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SDA_3V3_GPIO_Port, &GPIO_InitStruct);
 8008352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008356:	4619      	mov	r1, r3
 8008358:	482f      	ldr	r0, [pc, #188]	; (8008418 <HAL_I2C_MspInit+0x1e8>)
 800835a:	f002 fb53 	bl	800aa04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_I2C_SCL_3V3_Pin;
 800835e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008362:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008364:	2312      	movs	r3, #18
 8008366:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008368:	2301      	movs	r3, #1
 800836a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800836c:	2303      	movs	r3, #3
 800836e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8008370:	2304      	movs	r3, #4
 8008372:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SCL_3V3_GPIO_Port, &GPIO_InitStruct);
 8008374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008378:	4619      	mov	r1, r3
 800837a:	4828      	ldr	r0, [pc, #160]	; (800841c <HAL_I2C_MspInit+0x1ec>)
 800837c:	f002 fb42 	bl	800aa04 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8008380:	4b20      	ldr	r3, [pc, #128]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 8008382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008384:	4a1f      	ldr	r2, [pc, #124]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 8008386:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800838a:	6413      	str	r3, [r2, #64]	; 0x40
 800838c:	4b1d      	ldr	r3, [pc, #116]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 800838e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008390:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008394:	613b      	str	r3, [r7, #16]
 8008396:	693b      	ldr	r3, [r7, #16]
}
 8008398:	e02d      	b.n	80083f6 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C4)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a20      	ldr	r2, [pc, #128]	; (8008420 <HAL_I2C_MspInit+0x1f0>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d128      	bne.n	80083f6 <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80083a4:	4b17      	ldr	r3, [pc, #92]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 80083a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a8:	4a16      	ldr	r2, [pc, #88]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 80083aa:	f043 0320 	orr.w	r3, r3, #32
 80083ae:	6313      	str	r3, [r2, #48]	; 0x30
 80083b0:	4b14      	ldr	r3, [pc, #80]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 80083b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_ZION_I2C_SDA_Pin|STM_ZION_I2C_SCL_Pin;
 80083bc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80083c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083c2:	2312      	movs	r3, #18
 80083c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80083c6:	2301      	movs	r3, #1
 80083c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083ca:	2303      	movs	r3, #3
 80083cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80083ce:	2304      	movs	r3, #4
 80083d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80083d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80083d6:	4619      	mov	r1, r3
 80083d8:	480d      	ldr	r0, [pc, #52]	; (8008410 <HAL_I2C_MspInit+0x1e0>)
 80083da:	f002 fb13 	bl	800aa04 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80083de:	4b09      	ldr	r3, [pc, #36]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 80083e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e2:	4a08      	ldr	r2, [pc, #32]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 80083e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083e8:	6413      	str	r3, [r2, #64]	; 0x40
 80083ea:	4b06      	ldr	r3, [pc, #24]	; (8008404 <HAL_I2C_MspInit+0x1d4>)
 80083ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083f2:	60bb      	str	r3, [r7, #8]
 80083f4:	68bb      	ldr	r3, [r7, #8]
}
 80083f6:	bf00      	nop
 80083f8:	3740      	adds	r7, #64	; 0x40
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	40005400 	.word	0x40005400
 8008404:	40023800 	.word	0x40023800
 8008408:	40020400 	.word	0x40020400
 800840c:	40005800 	.word	0x40005800
 8008410:	40021400 	.word	0x40021400
 8008414:	40005c00 	.word	0x40005c00
 8008418:	40020800 	.word	0x40020800
 800841c:	40020000 	.word	0x40020000
 8008420:	40006000 	.word	0x40006000

08008424 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a07      	ldr	r2, [pc, #28]	; (8008450 <HAL_RTC_MspInit+0x2c>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d105      	bne.n	8008442 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008436:	4b07      	ldr	r3, [pc, #28]	; (8008454 <HAL_RTC_MspInit+0x30>)
 8008438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800843a:	4a06      	ldr	r2, [pc, #24]	; (8008454 <HAL_RTC_MspInit+0x30>)
 800843c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008440:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8008442:	bf00      	nop
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	40002800 	.word	0x40002800
 8008454:	40023800 	.word	0x40023800

08008458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b08c      	sub	sp, #48	; 0x30
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008460:	f107 031c 	add.w	r3, r7, #28
 8008464:	2200      	movs	r2, #0
 8008466:	601a      	str	r2, [r3, #0]
 8008468:	605a      	str	r2, [r3, #4]
 800846a:	609a      	str	r2, [r3, #8]
 800846c:	60da      	str	r2, [r3, #12]
 800846e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a40      	ldr	r2, [pc, #256]	; (8008578 <HAL_SPI_MspInit+0x120>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d130      	bne.n	80084dc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800847a:	4b40      	ldr	r3, [pc, #256]	; (800857c <HAL_SPI_MspInit+0x124>)
 800847c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800847e:	4a3f      	ldr	r2, [pc, #252]	; (800857c <HAL_SPI_MspInit+0x124>)
 8008480:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008484:	6453      	str	r3, [r2, #68]	; 0x44
 8008486:	4b3d      	ldr	r3, [pc, #244]	; (800857c <HAL_SPI_MspInit+0x124>)
 8008488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800848a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800848e:	61bb      	str	r3, [r7, #24]
 8008490:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008492:	4b3a      	ldr	r3, [pc, #232]	; (800857c <HAL_SPI_MspInit+0x124>)
 8008494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008496:	4a39      	ldr	r2, [pc, #228]	; (800857c <HAL_SPI_MspInit+0x124>)
 8008498:	f043 0310 	orr.w	r3, r3, #16
 800849c:	6313      	str	r3, [r2, #48]	; 0x30
 800849e:	4b37      	ldr	r3, [pc, #220]	; (800857c <HAL_SPI_MspInit+0x124>)
 80084a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a2:	f003 0310 	and.w	r3, r3, #16
 80084a6:	617b      	str	r3, [r7, #20]
 80084a8:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 80084aa:	2364      	movs	r3, #100	; 0x64
 80084ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ae:	2302      	movs	r3, #2
 80084b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084b6:	2303      	movs	r3, #3
 80084b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80084ba:	2305      	movs	r3, #5
 80084bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80084be:	f107 031c 	add.w	r3, r7, #28
 80084c2:	4619      	mov	r1, r3
 80084c4:	482e      	ldr	r0, [pc, #184]	; (8008580 <HAL_SPI_MspInit+0x128>)
 80084c6:	f002 fa9d 	bl	800aa04 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80084ca:	2200      	movs	r2, #0
 80084cc:	2105      	movs	r1, #5
 80084ce:	2054      	movs	r0, #84	; 0x54
 80084d0:	f001 fe66 	bl	800a1a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80084d4:	2054      	movs	r0, #84	; 0x54
 80084d6:	f001 fe7f 	bl	800a1d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80084da:	e049      	b.n	8008570 <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI5)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a28      	ldr	r2, [pc, #160]	; (8008584 <HAL_SPI_MspInit+0x12c>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d144      	bne.n	8008570 <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80084e6:	4b25      	ldr	r3, [pc, #148]	; (800857c <HAL_SPI_MspInit+0x124>)
 80084e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ea:	4a24      	ldr	r2, [pc, #144]	; (800857c <HAL_SPI_MspInit+0x124>)
 80084ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084f0:	6453      	str	r3, [r2, #68]	; 0x44
 80084f2:	4b22      	ldr	r3, [pc, #136]	; (800857c <HAL_SPI_MspInit+0x124>)
 80084f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084fa:	613b      	str	r3, [r7, #16]
 80084fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80084fe:	4b1f      	ldr	r3, [pc, #124]	; (800857c <HAL_SPI_MspInit+0x124>)
 8008500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008502:	4a1e      	ldr	r2, [pc, #120]	; (800857c <HAL_SPI_MspInit+0x124>)
 8008504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008508:	6313      	str	r3, [r2, #48]	; 0x30
 800850a:	4b1c      	ldr	r3, [pc, #112]	; (800857c <HAL_SPI_MspInit+0x124>)
 800850c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008516:	4b19      	ldr	r3, [pc, #100]	; (800857c <HAL_SPI_MspInit+0x124>)
 8008518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851a:	4a18      	ldr	r2, [pc, #96]	; (800857c <HAL_SPI_MspInit+0x124>)
 800851c:	f043 0320 	orr.w	r3, r3, #32
 8008520:	6313      	str	r3, [r2, #48]	; 0x30
 8008522:	4b16      	ldr	r3, [pc, #88]	; (800857c <HAL_SPI_MspInit+0x124>)
 8008524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008526:	f003 0320 	and.w	r3, r3, #32
 800852a:	60bb      	str	r3, [r7, #8]
 800852c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPARE_SS_L_3V3_Pin|SPARE_MISO_3V3_Pin|SPARE_SCLK_3V3_Pin;
 800852e:	23e0      	movs	r3, #224	; 0xe0
 8008530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008532:	2302      	movs	r3, #2
 8008534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008536:	2300      	movs	r3, #0
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800853a:	2303      	movs	r3, #3
 800853c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800853e:	2305      	movs	r3, #5
 8008540:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008542:	f107 031c 	add.w	r3, r7, #28
 8008546:	4619      	mov	r1, r3
 8008548:	480f      	ldr	r0, [pc, #60]	; (8008588 <HAL_SPI_MspInit+0x130>)
 800854a:	f002 fa5b 	bl	800aa04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPARE_MOSI_3V3_Pin;
 800854e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008554:	2302      	movs	r3, #2
 8008556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008558:	2300      	movs	r3, #0
 800855a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800855c:	2303      	movs	r3, #3
 800855e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008560:	2305      	movs	r3, #5
 8008562:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPARE_MOSI_3V3_GPIO_Port, &GPIO_InitStruct);
 8008564:	f107 031c 	add.w	r3, r7, #28
 8008568:	4619      	mov	r1, r3
 800856a:	4808      	ldr	r0, [pc, #32]	; (800858c <HAL_SPI_MspInit+0x134>)
 800856c:	f002 fa4a 	bl	800aa04 <HAL_GPIO_Init>
}
 8008570:	bf00      	nop
 8008572:	3730      	adds	r7, #48	; 0x30
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	40013400 	.word	0x40013400
 800857c:	40023800 	.word	0x40023800
 8008580:	40021000 	.word	0x40021000
 8008584:	40015000 	.word	0x40015000
 8008588:	40021c00 	.word	0x40021c00
 800858c:	40021400 	.word	0x40021400

08008590 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a13      	ldr	r2, [pc, #76]	; (80085ec <HAL_TIM_Base_MspInit+0x5c>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d10c      	bne.n	80085bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80085a2:	4b13      	ldr	r3, [pc, #76]	; (80085f0 <HAL_TIM_Base_MspInit+0x60>)
 80085a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a6:	4a12      	ldr	r2, [pc, #72]	; (80085f0 <HAL_TIM_Base_MspInit+0x60>)
 80085a8:	f043 0304 	orr.w	r3, r3, #4
 80085ac:	6413      	str	r3, [r2, #64]	; 0x40
 80085ae:	4b10      	ldr	r3, [pc, #64]	; (80085f0 <HAL_TIM_Base_MspInit+0x60>)
 80085b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b2:	f003 0304 	and.w	r3, r3, #4
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80085ba:	e010      	b.n	80085de <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a0c      	ldr	r2, [pc, #48]	; (80085f4 <HAL_TIM_Base_MspInit+0x64>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d10b      	bne.n	80085de <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80085c6:	4b0a      	ldr	r3, [pc, #40]	; (80085f0 <HAL_TIM_Base_MspInit+0x60>)
 80085c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ca:	4a09      	ldr	r2, [pc, #36]	; (80085f0 <HAL_TIM_Base_MspInit+0x60>)
 80085cc:	f043 0308 	orr.w	r3, r3, #8
 80085d0:	6413      	str	r3, [r2, #64]	; 0x40
 80085d2:	4b07      	ldr	r3, [pc, #28]	; (80085f0 <HAL_TIM_Base_MspInit+0x60>)
 80085d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d6:	f003 0308 	and.w	r3, r3, #8
 80085da:	60bb      	str	r3, [r7, #8]
 80085dc:	68bb      	ldr	r3, [r7, #8]
}
 80085de:	bf00      	nop
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	40000800 	.word	0x40000800
 80085f0:	40023800 	.word	0x40023800
 80085f4:	40000c00 	.word	0x40000c00

080085f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b08a      	sub	sp, #40	; 0x28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008600:	f107 0314 	add.w	r3, r7, #20
 8008604:	2200      	movs	r2, #0
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	605a      	str	r2, [r3, #4]
 800860a:	609a      	str	r2, [r3, #8]
 800860c:	60da      	str	r2, [r3, #12]
 800860e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a22      	ldr	r2, [pc, #136]	; (80086a0 <HAL_TIM_MspPostInit+0xa8>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d11c      	bne.n	8008654 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800861a:	4b22      	ldr	r3, [pc, #136]	; (80086a4 <HAL_TIM_MspPostInit+0xac>)
 800861c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861e:	4a21      	ldr	r2, [pc, #132]	; (80086a4 <HAL_TIM_MspPostInit+0xac>)
 8008620:	f043 0302 	orr.w	r3, r3, #2
 8008624:	6313      	str	r3, [r2, #48]	; 0x30
 8008626:	4b1f      	ldr	r3, [pc, #124]	; (80086a4 <HAL_TIM_MspPostInit+0xac>)
 8008628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	613b      	str	r3, [r7, #16]
 8008630:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SPARE_TIM_Pin;
 8008632:	2340      	movs	r3, #64	; 0x40
 8008634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008636:	2302      	movs	r3, #2
 8008638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800863a:	2300      	movs	r3, #0
 800863c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800863e:	2300      	movs	r3, #0
 8008640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008642:	2302      	movs	r3, #2
 8008644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPARE_TIM_GPIO_Port, &GPIO_InitStruct);
 8008646:	f107 0314 	add.w	r3, r7, #20
 800864a:	4619      	mov	r1, r3
 800864c:	4816      	ldr	r0, [pc, #88]	; (80086a8 <HAL_TIM_MspPostInit+0xb0>)
 800864e:	f002 f9d9 	bl	800aa04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8008652:	e021      	b.n	8008698 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a14      	ldr	r2, [pc, #80]	; (80086ac <HAL_TIM_MspPostInit+0xb4>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d11c      	bne.n	8008698 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800865e:	4b11      	ldr	r3, [pc, #68]	; (80086a4 <HAL_TIM_MspPostInit+0xac>)
 8008660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008662:	4a10      	ldr	r2, [pc, #64]	; (80086a4 <HAL_TIM_MspPostInit+0xac>)
 8008664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008668:	6313      	str	r3, [r2, #48]	; 0x30
 800866a:	4b0e      	ldr	r3, [pc, #56]	; (80086a4 <HAL_TIM_MspPostInit+0xac>)
 800866c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|LCD_EXTCOMM_Pin;
 8008676:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800867a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800867c:	2302      	movs	r3, #2
 800867e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008680:	2300      	movs	r3, #0
 8008682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008684:	2300      	movs	r3, #0
 8008686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008688:	2302      	movs	r3, #2
 800868a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800868c:	f107 0314 	add.w	r3, r7, #20
 8008690:	4619      	mov	r1, r3
 8008692:	4807      	ldr	r0, [pc, #28]	; (80086b0 <HAL_TIM_MspPostInit+0xb8>)
 8008694:	f002 f9b6 	bl	800aa04 <HAL_GPIO_Init>
}
 8008698:	bf00      	nop
 800869a:	3728      	adds	r7, #40	; 0x28
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	40000800 	.word	0x40000800
 80086a4:	40023800 	.word	0x40023800
 80086a8:	40020400 	.word	0x40020400
 80086ac:	40000c00 	.word	0x40000c00
 80086b0:	40021c00 	.word	0x40021c00

080086b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08e      	sub	sp, #56	; 0x38
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086c0:	2200      	movs	r2, #0
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	605a      	str	r2, [r3, #4]
 80086c6:	609a      	str	r2, [r3, #8]
 80086c8:	60da      	str	r2, [r3, #12]
 80086ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a6c      	ldr	r2, [pc, #432]	; (8008884 <HAL_UART_MspInit+0x1d0>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d129      	bne.n	800872a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80086d6:	4b6c      	ldr	r3, [pc, #432]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 80086d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086da:	4a6b      	ldr	r2, [pc, #428]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 80086dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086e0:	6413      	str	r3, [r2, #64]	; 0x40
 80086e2:	4b69      	ldr	r3, [pc, #420]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 80086e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086ea:	623b      	str	r3, [r7, #32]
 80086ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80086ee:	4b66      	ldr	r3, [pc, #408]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 80086f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f2:	4a65      	ldr	r2, [pc, #404]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 80086f4:	f043 0304 	orr.w	r3, r3, #4
 80086f8:	6313      	str	r3, [r2, #48]	; 0x30
 80086fa:	4b63      	ldr	r3, [pc, #396]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 80086fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fe:	f003 0304 	and.w	r3, r3, #4
 8008702:	61fb      	str	r3, [r7, #28]
 8008704:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = SPARE_UART_RX_3V3_Pin|SPARE_UART_TX_3V3_Pin;
 8008706:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800870a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800870c:	2302      	movs	r3, #2
 800870e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008710:	2300      	movs	r3, #0
 8008712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008714:	2303      	movs	r3, #3
 8008716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008718:	2308      	movs	r3, #8
 800871a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800871c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008720:	4619      	mov	r1, r3
 8008722:	485a      	ldr	r0, [pc, #360]	; (800888c <HAL_UART_MspInit+0x1d8>)
 8008724:	f002 f96e 	bl	800aa04 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8008728:	e0a7      	b.n	800887a <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART5)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a58      	ldr	r2, [pc, #352]	; (8008890 <HAL_UART_MspInit+0x1dc>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d174      	bne.n	800881e <HAL_UART_MspInit+0x16a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8008734:	4b54      	ldr	r3, [pc, #336]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 8008736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008738:	4a53      	ldr	r2, [pc, #332]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 800873a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800873e:	6413      	str	r3, [r2, #64]	; 0x40
 8008740:	4b51      	ldr	r3, [pc, #324]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 8008742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008748:	61bb      	str	r3, [r7, #24]
 800874a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800874c:	4b4e      	ldr	r3, [pc, #312]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 800874e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008750:	4a4d      	ldr	r2, [pc, #308]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 8008752:	f043 0304 	orr.w	r3, r3, #4
 8008756:	6313      	str	r3, [r2, #48]	; 0x30
 8008758:	4b4b      	ldr	r3, [pc, #300]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 800875a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875c:	f003 0304 	and.w	r3, r3, #4
 8008760:	617b      	str	r3, [r7, #20]
 8008762:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008764:	4b48      	ldr	r3, [pc, #288]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 8008766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008768:	4a47      	ldr	r2, [pc, #284]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 800876a:	f043 0308 	orr.w	r3, r3, #8
 800876e:	6313      	str	r3, [r2, #48]	; 0x30
 8008770:	4b45      	ldr	r3, [pc, #276]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 8008772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008774:	f003 0308 	and.w	r3, r3, #8
 8008778:	613b      	str	r3, [r7, #16]
 800877a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SOC_UART_TX_3V3_Pin;
 800877c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008782:	2302      	movs	r3, #2
 8008784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008786:	2300      	movs	r3, #0
 8008788:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800878a:	2303      	movs	r3, #3
 800878c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800878e:	2308      	movs	r3, #8
 8008790:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_TX_3V3_GPIO_Port, &GPIO_InitStruct);
 8008792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008796:	4619      	mov	r1, r3
 8008798:	483c      	ldr	r0, [pc, #240]	; (800888c <HAL_UART_MspInit+0x1d8>)
 800879a:	f002 f933 	bl	800aa04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_UART_RX_3V3_Pin;
 800879e:	2304      	movs	r3, #4
 80087a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087a2:	2302      	movs	r3, #2
 80087a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087aa:	2303      	movs	r3, #3
 80087ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80087ae:	2308      	movs	r3, #8
 80087b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_RX_3V3_GPIO_Port, &GPIO_InitStruct);
 80087b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087b6:	4619      	mov	r1, r3
 80087b8:	4836      	ldr	r0, [pc, #216]	; (8008894 <HAL_UART_MspInit+0x1e0>)
 80087ba:	f002 f923 	bl	800aa04 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80087be:	4b36      	ldr	r3, [pc, #216]	; (8008898 <HAL_UART_MspInit+0x1e4>)
 80087c0:	4a36      	ldr	r2, [pc, #216]	; (800889c <HAL_UART_MspInit+0x1e8>)
 80087c2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80087c4:	4b34      	ldr	r3, [pc, #208]	; (8008898 <HAL_UART_MspInit+0x1e4>)
 80087c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80087ca:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80087cc:	4b32      	ldr	r3, [pc, #200]	; (8008898 <HAL_UART_MspInit+0x1e4>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80087d2:	4b31      	ldr	r3, [pc, #196]	; (8008898 <HAL_UART_MspInit+0x1e4>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80087d8:	4b2f      	ldr	r3, [pc, #188]	; (8008898 <HAL_UART_MspInit+0x1e4>)
 80087da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087de:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80087e0:	4b2d      	ldr	r3, [pc, #180]	; (8008898 <HAL_UART_MspInit+0x1e4>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80087e6:	4b2c      	ldr	r3, [pc, #176]	; (8008898 <HAL_UART_MspInit+0x1e4>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80087ec:	4b2a      	ldr	r3, [pc, #168]	; (8008898 <HAL_UART_MspInit+0x1e4>)
 80087ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087f2:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80087f4:	4b28      	ldr	r3, [pc, #160]	; (8008898 <HAL_UART_MspInit+0x1e4>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80087fa:	4b27      	ldr	r3, [pc, #156]	; (8008898 <HAL_UART_MspInit+0x1e4>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8008800:	4825      	ldr	r0, [pc, #148]	; (8008898 <HAL_UART_MspInit+0x1e4>)
 8008802:	f001 fcf7 	bl	800a1f4 <HAL_DMA_Init>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 800880c:	f7fc fbda 	bl	8004fc4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a21      	ldr	r2, [pc, #132]	; (8008898 <HAL_UART_MspInit+0x1e4>)
 8008814:	66da      	str	r2, [r3, #108]	; 0x6c
 8008816:	4a20      	ldr	r2, [pc, #128]	; (8008898 <HAL_UART_MspInit+0x1e4>)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800881c:	e02d      	b.n	800887a <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART7)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a1f      	ldr	r2, [pc, #124]	; (80088a0 <HAL_UART_MspInit+0x1ec>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d128      	bne.n	800887a <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_UART7_CLK_ENABLE();
 8008828:	4b17      	ldr	r3, [pc, #92]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 800882a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882c:	4a16      	ldr	r2, [pc, #88]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 800882e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008832:	6413      	str	r3, [r2, #64]	; 0x40
 8008834:	4b14      	ldr	r3, [pc, #80]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 8008836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008838:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800883c:	60fb      	str	r3, [r7, #12]
 800883e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008840:	4b11      	ldr	r3, [pc, #68]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 8008842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008844:	4a10      	ldr	r2, [pc, #64]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 8008846:	f043 0310 	orr.w	r3, r3, #16
 800884a:	6313      	str	r3, [r2, #48]	; 0x30
 800884c:	4b0e      	ldr	r3, [pc, #56]	; (8008888 <HAL_UART_MspInit+0x1d4>)
 800884e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008850:	f003 0310 	and.w	r3, r3, #16
 8008854:	60bb      	str	r3, [r7, #8]
 8008856:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FTDI_UART_RX_Pin|FTDI_UART_CTS_L_Pin|FTDI_UART_TX_Pin|FTDI_UART_RTS_L_Pin;
 8008858:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800885c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800885e:	2302      	movs	r3, #2
 8008860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008862:	2300      	movs	r3, #0
 8008864:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008866:	2303      	movs	r3, #3
 8008868:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800886a:	2308      	movs	r3, #8
 800886c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800886e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008872:	4619      	mov	r1, r3
 8008874:	480b      	ldr	r0, [pc, #44]	; (80088a4 <HAL_UART_MspInit+0x1f0>)
 8008876:	f002 f8c5 	bl	800aa04 <HAL_GPIO_Init>
}
 800887a:	bf00      	nop
 800887c:	3738      	adds	r7, #56	; 0x38
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	40004c00 	.word	0x40004c00
 8008888:	40023800 	.word	0x40023800
 800888c:	40020800 	.word	0x40020800
 8008890:	40005000 	.word	0x40005000
 8008894:	40020c00 	.word	0x40020c00
 8008898:	20030a38 	.word	0x20030a38
 800889c:	40026010 	.word	0x40026010
 80088a0:	40007800 	.word	0x40007800
 80088a4:	40021000 	.word	0x40021000

080088a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08a      	sub	sp, #40	; 0x28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088b0:	f107 0314 	add.w	r3, r7, #20
 80088b4:	2200      	movs	r2, #0
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	605a      	str	r2, [r3, #4]
 80088ba:	609a      	str	r2, [r3, #8]
 80088bc:	60da      	str	r2, [r3, #12]
 80088be:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088c8:	d134      	bne.n	8008934 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088ca:	4b1c      	ldr	r3, [pc, #112]	; (800893c <HAL_PCD_MspInit+0x94>)
 80088cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ce:	4a1b      	ldr	r2, [pc, #108]	; (800893c <HAL_PCD_MspInit+0x94>)
 80088d0:	f043 0301 	orr.w	r3, r3, #1
 80088d4:	6313      	str	r3, [r2, #48]	; 0x30
 80088d6:	4b19      	ldr	r3, [pc, #100]	; (800893c <HAL_PCD_MspInit+0x94>)
 80088d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088da:	f003 0301 	and.w	r3, r3, #1
 80088de:	613b      	str	r3, [r7, #16]
 80088e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 80088e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80088e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088e8:	2302      	movs	r3, #2
 80088ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ec:	2300      	movs	r3, #0
 80088ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088f0:	2303      	movs	r3, #3
 80088f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088f4:	230a      	movs	r3, #10
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088f8:	f107 0314 	add.w	r3, r7, #20
 80088fc:	4619      	mov	r1, r3
 80088fe:	4810      	ldr	r0, [pc, #64]	; (8008940 <HAL_PCD_MspInit+0x98>)
 8008900:	f002 f880 	bl	800aa04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008904:	4b0d      	ldr	r3, [pc, #52]	; (800893c <HAL_PCD_MspInit+0x94>)
 8008906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008908:	4a0c      	ldr	r2, [pc, #48]	; (800893c <HAL_PCD_MspInit+0x94>)
 800890a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800890e:	6353      	str	r3, [r2, #52]	; 0x34
 8008910:	4b0a      	ldr	r3, [pc, #40]	; (800893c <HAL_PCD_MspInit+0x94>)
 8008912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008918:	60fb      	str	r3, [r7, #12]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	4b07      	ldr	r3, [pc, #28]	; (800893c <HAL_PCD_MspInit+0x94>)
 800891e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008920:	4a06      	ldr	r2, [pc, #24]	; (800893c <HAL_PCD_MspInit+0x94>)
 8008922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008926:	6453      	str	r3, [r2, #68]	; 0x44
 8008928:	4b04      	ldr	r3, [pc, #16]	; (800893c <HAL_PCD_MspInit+0x94>)
 800892a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800892c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008930:	60bb      	str	r3, [r7, #8]
 8008932:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8008934:	bf00      	nop
 8008936:	3728      	adds	r7, #40	; 0x28
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	40023800 	.word	0x40023800
 8008940:	40020000 	.word	0x40020000

08008944 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08c      	sub	sp, #48	; 0x30
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800894c:	2300      	movs	r3, #0
 800894e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008950:	2300      	movs	r3, #0
 8008952:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8008954:	2200      	movs	r2, #0
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	2036      	movs	r0, #54	; 0x36
 800895a:	f001 fc21 	bl	800a1a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800895e:	2036      	movs	r0, #54	; 0x36
 8008960:	f001 fc3a 	bl	800a1d8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008964:	4b1f      	ldr	r3, [pc, #124]	; (80089e4 <HAL_InitTick+0xa0>)
 8008966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008968:	4a1e      	ldr	r2, [pc, #120]	; (80089e4 <HAL_InitTick+0xa0>)
 800896a:	f043 0310 	orr.w	r3, r3, #16
 800896e:	6413      	str	r3, [r2, #64]	; 0x40
 8008970:	4b1c      	ldr	r3, [pc, #112]	; (80089e4 <HAL_InitTick+0xa0>)
 8008972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008974:	f003 0310 	and.w	r3, r3, #16
 8008978:	60fb      	str	r3, [r7, #12]
 800897a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800897c:	f107 0210 	add.w	r2, r7, #16
 8008980:	f107 0314 	add.w	r3, r7, #20
 8008984:	4611      	mov	r1, r2
 8008986:	4618      	mov	r0, r3
 8008988:	f004 f91e 	bl	800cbc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800898c:	f004 f8f4 	bl	800cb78 <HAL_RCC_GetPCLK1Freq>
 8008990:	4603      	mov	r3, r0
 8008992:	005b      	lsls	r3, r3, #1
 8008994:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008998:	4a13      	ldr	r2, [pc, #76]	; (80089e8 <HAL_InitTick+0xa4>)
 800899a:	fba2 2303 	umull	r2, r3, r2, r3
 800899e:	0c9b      	lsrs	r3, r3, #18
 80089a0:	3b01      	subs	r3, #1
 80089a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80089a4:	4b11      	ldr	r3, [pc, #68]	; (80089ec <HAL_InitTick+0xa8>)
 80089a6:	4a12      	ldr	r2, [pc, #72]	; (80089f0 <HAL_InitTick+0xac>)
 80089a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80089aa:	4b10      	ldr	r3, [pc, #64]	; (80089ec <HAL_InitTick+0xa8>)
 80089ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80089b0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80089b2:	4a0e      	ldr	r2, [pc, #56]	; (80089ec <HAL_InitTick+0xa8>)
 80089b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80089b8:	4b0c      	ldr	r3, [pc, #48]	; (80089ec <HAL_InitTick+0xa8>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80089be:	4b0b      	ldr	r3, [pc, #44]	; (80089ec <HAL_InitTick+0xa8>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80089c4:	4809      	ldr	r0, [pc, #36]	; (80089ec <HAL_InitTick+0xa8>)
 80089c6:	f005 fc47 	bl	800e258 <HAL_TIM_Base_Init>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d104      	bne.n	80089da <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80089d0:	4806      	ldr	r0, [pc, #24]	; (80089ec <HAL_InitTick+0xa8>)
 80089d2:	f005 fc6d 	bl	800e2b0 <HAL_TIM_Base_Start_IT>
 80089d6:	4603      	mov	r3, r0
 80089d8:	e000      	b.n	80089dc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3730      	adds	r7, #48	; 0x30
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	40023800 	.word	0x40023800
 80089e8:	431bde83 	.word	0x431bde83
 80089ec:	20030af4 	.word	0x20030af4
 80089f0:	40001000 	.word	0x40001000

080089f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80089f4:	b480      	push	{r7}
 80089f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80089f8:	e7fe      	b.n	80089f8 <NMI_Handler+0x4>

080089fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80089fa:	b480      	push	{r7}
 80089fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80089fe:	e7fe      	b.n	80089fe <HardFault_Handler+0x4>

08008a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008a00:	b480      	push	{r7}
 8008a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008a04:	e7fe      	b.n	8008a04 <MemManage_Handler+0x4>

08008a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a06:	b480      	push	{r7}
 8008a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a0a:	e7fe      	b.n	8008a0a <BusFault_Handler+0x4>

08008a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008a10:	e7fe      	b.n	8008a10 <UsageFault_Handler+0x4>

08008a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008a12:	b480      	push	{r7}
 8008a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008a16:	bf00      	nop
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	int currentTicks = HAL_GetTick();
 8008a26:	f000 fd29 	bl	800947c <HAL_GetTick>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	607b      	str	r3, [r7, #4]
	int currentDiff = currentTicks-timestamp;
 8008a2e:	4b10      	ldr	r3, [pc, #64]	; (8008a70 <EXTI4_IRQHandler+0x50>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	603b      	str	r3, [r7, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8008a38:	2010      	movs	r0, #16
 8008a3a:	f002 f9d9 	bl	800adf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if((inputButtonSet>buttonPriority.back) && (currentDiff>150)){
 8008a3e:	4b0d      	ldr	r3, [pc, #52]	; (8008a74 <EXTI4_IRQHandler+0x54>)
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	4b0c      	ldr	r3, [pc, #48]	; (8008a78 <EXTI4_IRQHandler+0x58>)
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	dd07      	ble.n	8008a5c <EXTI4_IRQHandler+0x3c>
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2b96      	cmp	r3, #150	; 0x96
 8008a50:	dd04      	ble.n	8008a5c <EXTI4_IRQHandler+0x3c>
	  inputButtonSet = buttonPriority.back;
 8008a52:	4b09      	ldr	r3, [pc, #36]	; (8008a78 <EXTI4_IRQHandler+0x58>)
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	4b06      	ldr	r3, [pc, #24]	; (8008a74 <EXTI4_IRQHandler+0x54>)
 8008a5a:	701a      	strb	r2, [r3, #0]
  }
  timestamp = HAL_GetTick();
 8008a5c:	f000 fd0e 	bl	800947c <HAL_GetTick>
 8008a60:	4603      	mov	r3, r0
 8008a62:	461a      	mov	r2, r3
 8008a64:	4b02      	ldr	r3, [pc, #8]	; (8008a70 <EXTI4_IRQHandler+0x50>)
 8008a66:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 8008a68:	bf00      	nop
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	20003380 	.word	0x20003380
 8008a74:	200000dc 	.word	0x200000dc
 8008a78:	20000188 	.word	0x20000188

08008a7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8008a80:	4802      	ldr	r0, [pc, #8]	; (8008a8c <DMA1_Stream0_IRQHandler+0x10>)
 8008a82:	f001 fd57 	bl	800a534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008a86:	bf00      	nop
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20030a38 	.word	0x20030a38

08008a90 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008a94:	4805      	ldr	r0, [pc, #20]	; (8008aac <ADC_IRQHandler+0x1c>)
 8008a96:	f000 fd63 	bl	8009560 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8008a9a:	4805      	ldr	r0, [pc, #20]	; (8008ab0 <ADC_IRQHandler+0x20>)
 8008a9c:	f000 fd60 	bl	8009560 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8008aa0:	4804      	ldr	r0, [pc, #16]	; (8008ab4 <ADC_IRQHandler+0x24>)
 8008aa2:	f000 fd5d 	bl	8009560 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008aa6:	bf00      	nop
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	2002b9fc 	.word	0x2002b9fc
 8008ab0:	20028ce0 	.word	0x20028ce0
 8008ab4:	2002ba48 	.word	0x2002ba48

08008ab8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint8_t buttonStates[3];
	int currentTicks = HAL_GetTick();
 8008abe:	f000 fcdd 	bl	800947c <HAL_GetTick>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	60fb      	str	r3, [r7, #12]
	int currentDiff = currentTicks-timestamp;
 8008ac6:	4b35      	ldr	r3, [pc, #212]	; (8008b9c <EXTI9_5_IRQHandler+0xe4>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	60bb      	str	r3, [r7, #8]
	buttonStates[0] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_5);
 8008ad0:	2120      	movs	r1, #32
 8008ad2:	4833      	ldr	r0, [pc, #204]	; (8008ba0 <EXTI9_5_IRQHandler+0xe8>)
 8008ad4:	f002 f940 	bl	800ad58 <HAL_GPIO_ReadPin>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	713b      	strb	r3, [r7, #4]
	buttonStates[1] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_6);
 8008adc:	2140      	movs	r1, #64	; 0x40
 8008ade:	4830      	ldr	r0, [pc, #192]	; (8008ba0 <EXTI9_5_IRQHandler+0xe8>)
 8008ae0:	f002 f93a 	bl	800ad58 <HAL_GPIO_ReadPin>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	717b      	strb	r3, [r7, #5]
	buttonStates[2] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_7);
 8008ae8:	2180      	movs	r1, #128	; 0x80
 8008aea:	482d      	ldr	r0, [pc, #180]	; (8008ba0 <EXTI9_5_IRQHandler+0xe8>)
 8008aec:	f002 f934 	bl	800ad58 <HAL_GPIO_ReadPin>
 8008af0:	4603      	mov	r3, r0
 8008af2:	71bb      	strb	r3, [r7, #6]
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5) && (currentDiff>150)){ //up button
 8008af4:	4b2b      	ldr	r3, [pc, #172]	; (8008ba4 <EXTI9_5_IRQHandler+0xec>)
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	f003 0320 	and.w	r3, r3, #32
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00f      	beq.n	8008b20 <EXTI9_5_IRQHandler+0x68>
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2b96      	cmp	r3, #150	; 0x96
 8008b04:	dd0c      	ble.n	8008b20 <EXTI9_5_IRQHandler+0x68>
		if(inputButtonSet > buttonPriority.up){
 8008b06:	4b28      	ldr	r3, [pc, #160]	; (8008ba8 <EXTI9_5_IRQHandler+0xf0>)
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	4b27      	ldr	r3, [pc, #156]	; (8008bac <EXTI9_5_IRQHandler+0xf4>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	dd30      	ble.n	8008b76 <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.up;
 8008b14:	4b25      	ldr	r3, [pc, #148]	; (8008bac <EXTI9_5_IRQHandler+0xf4>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	b2da      	uxtb	r2, r3
 8008b1a:	4b23      	ldr	r3, [pc, #140]	; (8008ba8 <EXTI9_5_IRQHandler+0xf0>)
 8008b1c:	701a      	strb	r2, [r3, #0]
		if(inputButtonSet > buttonPriority.up){
 8008b1e:	e02a      	b.n	8008b76 <EXTI9_5_IRQHandler+0xbe>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6) && (currentDiff>150)){ //sel button
 8008b20:	4b20      	ldr	r3, [pc, #128]	; (8008ba4 <EXTI9_5_IRQHandler+0xec>)
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00f      	beq.n	8008b4c <EXTI9_5_IRQHandler+0x94>
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2b96      	cmp	r3, #150	; 0x96
 8008b30:	dd0c      	ble.n	8008b4c <EXTI9_5_IRQHandler+0x94>
		if(inputButtonSet > buttonPriority.sel){
 8008b32:	4b1d      	ldr	r3, [pc, #116]	; (8008ba8 <EXTI9_5_IRQHandler+0xf0>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	461a      	mov	r2, r3
 8008b38:	4b1c      	ldr	r3, [pc, #112]	; (8008bac <EXTI9_5_IRQHandler+0xf4>)
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	dd1a      	ble.n	8008b76 <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.sel;
 8008b40:	4b1a      	ldr	r3, [pc, #104]	; (8008bac <EXTI9_5_IRQHandler+0xf4>)
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	4b18      	ldr	r3, [pc, #96]	; (8008ba8 <EXTI9_5_IRQHandler+0xf0>)
 8008b48:	701a      	strb	r2, [r3, #0]
		if(inputButtonSet > buttonPriority.sel){
 8008b4a:	e014      	b.n	8008b76 <EXTI9_5_IRQHandler+0xbe>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7) && (currentDiff>150)){ //down button
 8008b4c:	4b15      	ldr	r3, [pc, #84]	; (8008ba4 <EXTI9_5_IRQHandler+0xec>)
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00e      	beq.n	8008b76 <EXTI9_5_IRQHandler+0xbe>
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b96      	cmp	r3, #150	; 0x96
 8008b5c:	dd0b      	ble.n	8008b76 <EXTI9_5_IRQHandler+0xbe>
		if(inputButtonSet > buttonPriority.down){
 8008b5e:	4b12      	ldr	r3, [pc, #72]	; (8008ba8 <EXTI9_5_IRQHandler+0xf0>)
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	461a      	mov	r2, r3
 8008b64:	4b11      	ldr	r3, [pc, #68]	; (8008bac <EXTI9_5_IRQHandler+0xf4>)
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	dd04      	ble.n	8008b76 <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.down;
 8008b6c:	4b0f      	ldr	r3, [pc, #60]	; (8008bac <EXTI9_5_IRQHandler+0xf4>)
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	4b0d      	ldr	r3, [pc, #52]	; (8008ba8 <EXTI9_5_IRQHandler+0xf0>)
 8008b74:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8008b76:	2020      	movs	r0, #32
 8008b78:	f002 f93a 	bl	800adf0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8008b7c:	2040      	movs	r0, #64	; 0x40
 8008b7e:	f002 f937 	bl	800adf0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8008b82:	2080      	movs	r0, #128	; 0x80
 8008b84:	f002 f934 	bl	800adf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  timestamp = HAL_GetTick();
 8008b88:	f000 fc78 	bl	800947c <HAL_GetTick>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	461a      	mov	r2, r3
 8008b90:	4b02      	ldr	r3, [pc, #8]	; (8008b9c <EXTI9_5_IRQHandler+0xe4>)
 8008b92:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008b94:	bf00      	nop
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	20003380 	.word	0x20003380
 8008ba0:	40022800 	.word	0x40022800
 8008ba4:	40013c00 	.word	0x40013c00
 8008ba8:	200000dc 	.word	0x200000dc
 8008bac:	20000188 	.word	0x20000188

08008bb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008bb4:	4802      	ldr	r0, [pc, #8]	; (8008bc0 <TIM6_DAC_IRQHandler+0x10>)
 8008bb6:	f005 fbda 	bl	800e36e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008bba:	bf00      	nop
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	20030af4 	.word	0x20030af4

08008bc4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008bc8:	4805      	ldr	r0, [pc, #20]	; (8008be0 <DMA2_Stream0_IRQHandler+0x1c>)
 8008bca:	f001 fcb3 	bl	800a534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc1);
 8008bce:	4805      	ldr	r0, [pc, #20]	; (8008be4 <DMA2_Stream0_IRQHandler+0x20>)
 8008bd0:	f000 fef6 	bl	80099c0 <HAL_ADC_Stop_DMA>
  adcRestart[0]=1;
 8008bd4:	4b04      	ldr	r3, [pc, #16]	; (8008be8 <DMA2_Stream0_IRQHandler+0x24>)
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008bda:	bf00      	nop
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	2002ba90 	.word	0x2002ba90
 8008be4:	2002b9fc 	.word	0x2002b9fc
 8008be8:	20029224 	.word	0x20029224

08008bec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8008bf0:	4805      	ldr	r0, [pc, #20]	; (8008c08 <DMA2_Stream1_IRQHandler+0x1c>)
 8008bf2:	f001 fc9f 	bl	800a534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 8008bf6:	4805      	ldr	r0, [pc, #20]	; (8008c0c <DMA2_Stream1_IRQHandler+0x20>)
 8008bf8:	f000 fee2 	bl	80099c0 <HAL_ADC_Stop_DMA>
  adcRestart[2]=1;
 8008bfc:	4b04      	ldr	r3, [pc, #16]	; (8008c10 <DMA2_Stream1_IRQHandler+0x24>)
 8008bfe:	2201      	movs	r2, #1
 8008c00:	709a      	strb	r2, [r3, #2]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8008c02:	bf00      	nop
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	200291c4 	.word	0x200291c4
 8008c0c:	2002ba48 	.word	0x2002ba48
 8008c10:	20029224 	.word	0x20029224

08008c14 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008c18:	4805      	ldr	r0, [pc, #20]	; (8008c30 <DMA2_Stream2_IRQHandler+0x1c>)
 8008c1a:	f001 fc8b 	bl	800a534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc2);
 8008c1e:	4805      	ldr	r0, [pc, #20]	; (8008c34 <DMA2_Stream2_IRQHandler+0x20>)
 8008c20:	f000 fece 	bl	80099c0 <HAL_ADC_Stop_DMA>
  adcRestart[1]=1;
 8008c24:	4b04      	ldr	r3, [pc, #16]	; (8008c38 <DMA2_Stream2_IRQHandler+0x24>)
 8008c26:	2201      	movs	r2, #1
 8008c28:	705a      	strb	r2, [r3, #1]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8008c2a:	bf00      	nop
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	200309d8 	.word	0x200309d8
 8008c34:	20028ce0 	.word	0x20028ce0
 8008c38:	20029224 	.word	0x20029224

08008c3c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8008c40:	4802      	ldr	r0, [pc, #8]	; (8008c4c <SPI4_IRQHandler+0x10>)
 8008c42:	f005 f8cd 	bl	800dde0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8008c46:	bf00      	nop
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20028ab0 	.word	0x20028ab0

08008c50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	e00a      	b.n	8008c78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008c62:	f3af 8000 	nop.w
 8008c66:	4601      	mov	r1, r0
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	60ba      	str	r2, [r7, #8]
 8008c6e:	b2ca      	uxtb	r2, r1
 8008c70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	3301      	adds	r3, #1
 8008c76:	617b      	str	r3, [r7, #20]
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	dbf0      	blt.n	8008c62 <_read+0x12>
	}

return len;
 8008c80:	687b      	ldr	r3, [r7, #4]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3718      	adds	r7, #24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b086      	sub	sp, #24
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c96:	2300      	movs	r3, #0
 8008c98:	617b      	str	r3, [r7, #20]
 8008c9a:	e009      	b.n	8008cb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	1c5a      	adds	r2, r3, #1
 8008ca0:	60ba      	str	r2, [r7, #8]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7fa fa15 	bl	80030d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	3301      	adds	r3, #1
 8008cae:	617b      	str	r3, [r7, #20]
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	dbf1      	blt.n	8008c9c <_write+0x12>
	}
	return len;
 8008cb8:	687b      	ldr	r3, [r7, #4]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3718      	adds	r7, #24
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <_close>:

int _close(int file)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b083      	sub	sp, #12
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
	return -1;
 8008cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008cda:	b480      	push	{r7}
 8008cdc:	b083      	sub	sp, #12
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008cea:	605a      	str	r2, [r3, #4]
	return 0;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <_isatty>:

int _isatty(int file)
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b083      	sub	sp, #12
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
	return 1;
 8008d02:	2301      	movs	r3, #1
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
	return 0;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
	...

08008d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008d34:	4a14      	ldr	r2, [pc, #80]	; (8008d88 <_sbrk+0x5c>)
 8008d36:	4b15      	ldr	r3, [pc, #84]	; (8008d8c <_sbrk+0x60>)
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008d40:	4b13      	ldr	r3, [pc, #76]	; (8008d90 <_sbrk+0x64>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d102      	bne.n	8008d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008d48:	4b11      	ldr	r3, [pc, #68]	; (8008d90 <_sbrk+0x64>)
 8008d4a:	4a12      	ldr	r2, [pc, #72]	; (8008d94 <_sbrk+0x68>)
 8008d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008d4e:	4b10      	ldr	r3, [pc, #64]	; (8008d90 <_sbrk+0x64>)
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4413      	add	r3, r2
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d207      	bcs.n	8008d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008d5c:	f00a f9e8 	bl	8013130 <__errno>
 8008d60:	4602      	mov	r2, r0
 8008d62:	230c      	movs	r3, #12
 8008d64:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8008d66:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6a:	e009      	b.n	8008d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008d6c:	4b08      	ldr	r3, [pc, #32]	; (8008d90 <_sbrk+0x64>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008d72:	4b07      	ldr	r3, [pc, #28]	; (8008d90 <_sbrk+0x64>)
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4413      	add	r3, r2
 8008d7a:	4a05      	ldr	r2, [pc, #20]	; (8008d90 <_sbrk+0x64>)
 8008d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	20080000 	.word	0x20080000
 8008d8c:	00000400 	.word	0x00000400
 8008d90:	20003384 	.word	0x20003384
 8008d94:	20030b80 	.word	0x20030b80

08008d98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008d9c:	4b08      	ldr	r3, [pc, #32]	; (8008dc0 <SystemInit+0x28>)
 8008d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008da2:	4a07      	ldr	r2, [pc, #28]	; (8008dc0 <SystemInit+0x28>)
 8008da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008dac:	4b04      	ldr	r3, [pc, #16]	; (8008dc0 <SystemInit+0x28>)
 8008dae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008db2:	609a      	str	r2, [r3, #8]
#endif
}
 8008db4:	bf00      	nop
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	e000ed00 	.word	0xe000ed00

08008dc4 <zionEEPROMPresence>:
 *      Author: auphilli
 */

#include "zionEeprom.h"

int * zionEEPROMPresence(){
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	af00      	add	r7, sp, #0
	static int eepromPresent[3];
	memset(eepromPresent, 0x00, sizeof(eepromPresent));
 8008dc8:	220c      	movs	r2, #12
 8008dca:	2100      	movs	r1, #0
 8008dcc:	4814      	ldr	r0, [pc, #80]	; (8008e20 <zionEEPROMPresence+0x5c>)
 8008dce:	f00a f9e4 	bl	801319a <memset>
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, SOC_ADDRESS, 2, 100)== HAL_OK){
 8008dd2:	2364      	movs	r3, #100	; 0x64
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	21a6      	movs	r1, #166	; 0xa6
 8008dd8:	4812      	ldr	r0, [pc, #72]	; (8008e24 <zionEEPROMPresence+0x60>)
 8008dda:	f002 fcd5 	bl	800b788 <HAL_I2C_IsDeviceReady>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d102      	bne.n	8008dea <zionEEPROMPresence+0x26>
		eepromPresent[0]=1;
 8008de4:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <zionEEPROMPresence+0x5c>)
 8008de6:	2201      	movs	r2, #1
 8008de8:	601a      	str	r2, [r3, #0]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, ASIC_ADDRESS, 2, 100)== HAL_OK){
 8008dea:	2364      	movs	r3, #100	; 0x64
 8008dec:	2202      	movs	r2, #2
 8008dee:	21a8      	movs	r1, #168	; 0xa8
 8008df0:	480c      	ldr	r0, [pc, #48]	; (8008e24 <zionEEPROMPresence+0x60>)
 8008df2:	f002 fcc9 	bl	800b788 <HAL_I2C_IsDeviceReady>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d102      	bne.n	8008e02 <zionEEPROMPresence+0x3e>
		eepromPresent[1]=1;
 8008dfc:	4b08      	ldr	r3, [pc, #32]	; (8008e20 <zionEEPROMPresence+0x5c>)
 8008dfe:	2201      	movs	r2, #1
 8008e00:	605a      	str	r2, [r3, #4]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, DISPLAY_ADDRESS, 2, 100)== HAL_OK){
 8008e02:	2364      	movs	r3, #100	; 0x64
 8008e04:	2202      	movs	r2, #2
 8008e06:	21aa      	movs	r1, #170	; 0xaa
 8008e08:	4806      	ldr	r0, [pc, #24]	; (8008e24 <zionEEPROMPresence+0x60>)
 8008e0a:	f002 fcbd 	bl	800b788 <HAL_I2C_IsDeviceReady>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d102      	bne.n	8008e1a <zionEEPROMPresence+0x56>
		eepromPresent[2]=1;
 8008e14:	4b02      	ldr	r3, [pc, #8]	; (8008e20 <zionEEPROMPresence+0x5c>)
 8008e16:	2201      	movs	r2, #1
 8008e18:	609a      	str	r2, [r3, #8]
	}
	return eepromPresent;
 8008e1a:	4b01      	ldr	r3, [pc, #4]	; (8008e20 <zionEEPROMPresence+0x5c>)
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	20003388 	.word	0x20003388
 8008e24:	20028b60 	.word	0x20028b60

08008e28 <readDataFromEEPROM>:
		bytes+=32;
	}

}
//reads from the EEPROM can be continuous
void readDataFromEEPROM(uint8_t * data, uint8_t chipAddress, uint16_t memoryAddress, int len,uint16_t timeout){
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b088      	sub	sp, #32
 8008e2c:	af04      	add	r7, sp, #16
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	607b      	str	r3, [r7, #4]
 8008e32:	460b      	mov	r3, r1
 8008e34:	72fb      	strb	r3, [r7, #11]
 8008e36:	4613      	mov	r3, r2
 8008e38:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(&EEPROM_I2C,chipAddress,memoryAddress, I2C_MEMADD_SIZE_16BIT,data,len,timeout);
 8008e3a:	7afb      	ldrb	r3, [r7, #11]
 8008e3c:	b299      	uxth	r1, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	8b3a      	ldrh	r2, [r7, #24]
 8008e44:	8938      	ldrh	r0, [r7, #8]
 8008e46:	9202      	str	r2, [sp, #8]
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	2302      	movs	r3, #2
 8008e50:	4602      	mov	r2, r0
 8008e52:	4803      	ldr	r0, [pc, #12]	; (8008e60 <readDataFromEEPROM+0x38>)
 8008e54:	f002 fb7e 	bl	800b554 <HAL_I2C_Mem_Read>
}
 8008e58:	bf00      	nop
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	20028b60 	.word	0x20028b60

08008e64 <parseZionEEPROM>:
		 writeDataToEEPROM((uint8_t*)zionEEPROMKanu,DISPLAY_ADDRESS,0x0,sizeof(zionEEPROMKanu), 500);
		 HAL_Delay(100);
	  }
}

int * parseZionEEPROM(uint8_t chipAddress){
 8008e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e68:	b0a6      	sub	sp, #152	; 0x98
 8008e6a:	af02      	add	r7, sp, #8
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	71fb      	strb	r3, [r7, #7]
 8008e70:	466b      	mov	r3, sp
 8008e72:	4698      	mov	r8, r3
	int foundTheEnd = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int x=0;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int size = 100;
 8008e80:	2364      	movs	r3, #100	; 0x64
 8008e82:	673b      	str	r3, [r7, #112]	; 0x70
	int counter=6;
 8008e84:	2306      	movs	r3, #6
 8008e86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int zeroWas5A=0;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int validHeader=0;
 8008e90:	2300      	movs	r3, #0
 8008e92:	67fb      	str	r3, [r7, #124]	; 0x7c
	int previousByteOfHeader[20];
	int index=0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	67bb      	str	r3, [r7, #120]	; 0x78
	int indexSubtractor = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	677b      	str	r3, [r7, #116]	; 0x74
	uint8_t letsParseSomeBytes[size];
 8008e9c:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8008e9e:	1e6b      	subs	r3, r5, #1
 8008ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ea2:	462b      	mov	r3, r5
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	f04f 0200 	mov.w	r2, #0
 8008eaa:	f04f 0300 	mov.w	r3, #0
 8008eae:	f04f 0400 	mov.w	r4, #0
 8008eb2:	00d4      	lsls	r4, r2, #3
 8008eb4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008eb8:	00cb      	lsls	r3, r1, #3
 8008eba:	462b      	mov	r3, r5
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	f04f 0200 	mov.w	r2, #0
 8008ec2:	f04f 0300 	mov.w	r3, #0
 8008ec6:	f04f 0400 	mov.w	r4, #0
 8008eca:	00d4      	lsls	r4, r2, #3
 8008ecc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008ed0:	00cb      	lsls	r3, r1, #3
 8008ed2:	462b      	mov	r3, r5
 8008ed4:	3307      	adds	r3, #7
 8008ed6:	08db      	lsrs	r3, r3, #3
 8008ed8:	00db      	lsls	r3, r3, #3
 8008eda:	ebad 0d03 	sub.w	sp, sp, r3
 8008ede:	ab02      	add	r3, sp, #8
 8008ee0:	3300      	adds	r3, #0
 8008ee2:	66bb      	str	r3, [r7, #104]	; 0x68
	uint8_t pastParsedBytes[size];
 8008ee4:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8008ee6:	1e73      	subs	r3, r6, #1
 8008ee8:	667b      	str	r3, [r7, #100]	; 0x64
 8008eea:	4633      	mov	r3, r6
 8008eec:	4619      	mov	r1, r3
 8008eee:	f04f 0200 	mov.w	r2, #0
 8008ef2:	f04f 0300 	mov.w	r3, #0
 8008ef6:	f04f 0400 	mov.w	r4, #0
 8008efa:	00d4      	lsls	r4, r2, #3
 8008efc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008f00:	00cb      	lsls	r3, r1, #3
 8008f02:	4633      	mov	r3, r6
 8008f04:	4619      	mov	r1, r3
 8008f06:	f04f 0200 	mov.w	r2, #0
 8008f0a:	f04f 0300 	mov.w	r3, #0
 8008f0e:	f04f 0400 	mov.w	r4, #0
 8008f12:	00d4      	lsls	r4, r2, #3
 8008f14:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008f18:	00cb      	lsls	r3, r1, #3
 8008f1a:	4633      	mov	r3, r6
 8008f1c:	3307      	adds	r3, #7
 8008f1e:	08db      	lsrs	r3, r3, #3
 8008f20:	00db      	lsls	r3, r3, #3
 8008f22:	ebad 0d03 	sub.w	sp, sp, r3
 8008f26:	ab02      	add	r3, sp, #8
 8008f28:	3300      	adds	r3, #0
 8008f2a:	663b      	str	r3, [r7, #96]	; 0x60
	static int deviceHeaderBytes[5];

	memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 8008f2c:	f107 0308 	add.w	r3, r7, #8
 8008f30:	2250      	movs	r2, #80	; 0x50
 8008f32:	2100      	movs	r1, #0
 8008f34:	4618      	mov	r0, r3
 8008f36:	f00a f930 	bl	801319a <memset>
	memset(pastParsedBytes,0,sizeof(pastParsedBytes));
 8008f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f3c:	4632      	mov	r2, r6
 8008f3e:	2100      	movs	r1, #0
 8008f40:	4618      	mov	r0, r3
 8008f42:	f00a f92a 	bl	801319a <memset>
	memset(letsParseSomeBytes,0,sizeof(letsParseSomeBytes));
 8008f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f48:	462a      	mov	r2, r5
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f00a f924 	bl	801319a <memset>
	readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,0x00,sizeof(letsParseSomeBytes),100);
 8008f52:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008f54:	79f9      	ldrb	r1, [r7, #7]
 8008f56:	2364      	movs	r3, #100	; 0x64
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	462b      	mov	r3, r5
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f7ff ff63 	bl	8008e28 <readDataFromEEPROM>
	//if the eeprom is uninitialized and/or improperly formated, just end.
	if(letsParseSomeBytes[0] == 0xff){
 8008f62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	2bff      	cmp	r3, #255	; 0xff
 8008f68:	f040 811b 	bne.w	80091a2 <parseZionEEPROM+0x33e>
		foundTheEnd=1;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		previousByteOfHeader[0]= -2;
 8008f72:	f06f 0301 	mvn.w	r3, #1
 8008f76:	60bb      	str	r3, [r7, #8]
	}
	while(!foundTheEnd){
 8008f78:	e113      	b.n	80091a2 <parseZionEEPROM+0x33e>
		//every time we reach the end of our data, store it in the past buffer and get more!
		if(!(index%size) & (index>0)){
 8008f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f7c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008f7e:	fb93 f2f2 	sdiv	r2, r3, r2
 8008f82:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008f84:	fb01 f202 	mul.w	r2, r1, r2
 8008f88:	1a9b      	subs	r3, r3, r2
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	bf0c      	ite	eq
 8008f8e:	2301      	moveq	r3, #1
 8008f90:	2300      	movne	r3, #0
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	bfcc      	ite	gt
 8008f9a:	2301      	movgt	r3, #1
 8008f9c:	2300      	movle	r3, #0
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d025      	beq.n	8008ff4 <parseZionEEPROM+0x190>
			for(x=0;x<size;x++){
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008fae:	e00f      	b.n	8008fd0 <parseZionEEPROM+0x16c>
				pastParsedBytes[x] = letsParseSomeBytes[x];
 8008fb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fb6:	4413      	add	r3, r2
 8008fb8:	7819      	ldrb	r1, [r3, #0]
 8008fba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fc0:	4413      	add	r3, r2
 8008fc2:	460a      	mov	r2, r1
 8008fc4:	701a      	strb	r2, [r3, #0]
			for(x=0;x<size;x++){
 8008fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fca:	3301      	adds	r3, #1
 8008fcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008fd0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008fd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	dbea      	blt.n	8008fb0 <parseZionEEPROM+0x14c>
			}
			readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,index,sizeof(letsParseSomeBytes),100);
 8008fda:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	79f9      	ldrb	r1, [r7, #7]
 8008fe2:	2364      	movs	r3, #100	; 0x64
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	462b      	mov	r3, r5
 8008fe8:	f7ff ff1e 	bl	8008e28 <readDataFromEEPROM>
			indexSubtractor+=size;
 8008fec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ff0:	4413      	add	r3, r2
 8008ff2:	677b      	str	r3, [r7, #116]	; 0x74
		}
		//if 5 consecutive bits in a read operation are 0xff, time to give up finding the legit header
		if((letsParseSomeBytes[0] == 0xff) && (letsParseSomeBytes[1] == 0xff) && (letsParseSomeBytes[2] == 0xff) && (letsParseSomeBytes[3] == 0xff) && (letsParseSomeBytes[5] == 0xff)){
 8008ff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	2bff      	cmp	r3, #255	; 0xff
 8008ffa:	d116      	bne.n	800902a <parseZionEEPROM+0x1c6>
 8008ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ffe:	785b      	ldrb	r3, [r3, #1]
 8009000:	2bff      	cmp	r3, #255	; 0xff
 8009002:	d112      	bne.n	800902a <parseZionEEPROM+0x1c6>
 8009004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009006:	789b      	ldrb	r3, [r3, #2]
 8009008:	2bff      	cmp	r3, #255	; 0xff
 800900a:	d10e      	bne.n	800902a <parseZionEEPROM+0x1c6>
 800900c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800900e:	78db      	ldrb	r3, [r3, #3]
 8009010:	2bff      	cmp	r3, #255	; 0xff
 8009012:	d10a      	bne.n	800902a <parseZionEEPROM+0x1c6>
 8009014:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009016:	795b      	ldrb	r3, [r3, #5]
 8009018:	2bff      	cmp	r3, #255	; 0xff
 800901a:	d106      	bne.n	800902a <parseZionEEPROM+0x1c6>
			previousByteOfHeader[0]=-1;
 800901c:	f04f 33ff 	mov.w	r3, #4294967295
 8009020:	60bb      	str	r3, [r7, #8]
			foundTheEnd=1;
 8009022:	2301      	movs	r3, #1
 8009024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009028:	e0b8      	b.n	800919c <parseZionEEPROM+0x338>
		}
		//if((letsParseSomeBytes[index] == 0xff)){
		else if(((letsParseSomeBytes[index-indexSubtractor] == 0x5a))|| ((letsParseSomeBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20)) || ((pastParsedBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20))){
 800902a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800902c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009032:	5cd3      	ldrb	r3, [r2, r3]
 8009034:	2b5a      	cmp	r3, #90	; 0x5a
 8009036:	d023      	beq.n	8009080 <parseZionEEPROM+0x21c>
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800903c:	fb93 f2f2 	sdiv	r2, r3, r2
 8009040:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009042:	fb01 f202 	mul.w	r2, r1, r2
 8009046:	1a9b      	subs	r3, r3, r2
 8009048:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800904a:	5cd3      	ldrb	r3, [r2, r3]
 800904c:	2b5a      	cmp	r3, #90	; 0x5a
 800904e:	d104      	bne.n	800905a <parseZionEEPROM+0x1f6>
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	3314      	adds	r3, #20
 8009054:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009056:	429a      	cmp	r2, r3
 8009058:	db12      	blt.n	8009080 <parseZionEEPROM+0x21c>
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800905e:	fb93 f2f2 	sdiv	r2, r3, r2
 8009062:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009064:	fb01 f202 	mul.w	r2, r1, r2
 8009068:	1a9b      	subs	r3, r3, r2
 800906a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800906c:	5cd3      	ldrb	r3, [r2, r3]
 800906e:	2b5a      	cmp	r3, #90	; 0x5a
 8009070:	f040 8094 	bne.w	800919c <parseZionEEPROM+0x338>
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	3314      	adds	r3, #20
 8009078:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800907a:	429a      	cmp	r2, r3
 800907c:	f280 808e 	bge.w	800919c <parseZionEEPROM+0x338>
			if((previousByteOfHeader[0] == 0) & (!zeroWas5A) & ((letsParseSomeBytes[index-indexSubtractor] == 0x5a))){
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009086:	4313      	orrs	r3, r2
 8009088:	2b00      	cmp	r3, #0
 800908a:	bf0c      	ite	eq
 800908c:	2301      	moveq	r3, #1
 800908e:	2300      	movne	r3, #0
 8009090:	b2da      	uxtb	r2, r3
 8009092:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009096:	1acb      	subs	r3, r1, r3
 8009098:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800909a:	5ccb      	ldrb	r3, [r1, r3]
 800909c:	2b5a      	cmp	r3, #90	; 0x5a
 800909e:	bf0c      	ite	eq
 80090a0:	2301      	moveq	r3, #1
 80090a2:	2300      	movne	r3, #0
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	4013      	ands	r3, r2
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d008      	beq.n	80090c0 <parseZionEEPROM+0x25c>
				previousByteOfHeader[0] = index;
 80090ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090b0:	60bb      	str	r3, [r7, #8]
				if(index==0){
 80090b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d171      	bne.n	800919c <parseZionEEPROM+0x338>
					zeroWas5A=1;
 80090b8:	2301      	movs	r3, #1
 80090ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090be:	e06d      	b.n	800919c <parseZionEEPROM+0x338>
				}
			}
			//if validHeader was set, we just need the next 14 bytes of data
			else if(validHeader){
 80090c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d015      	beq.n	80090f2 <parseZionEEPROM+0x28e>
				previousByteOfHeader[counter]=index;
 80090c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80090d0:	4413      	add	r3, r2
 80090d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80090d4:	f843 2c88 	str.w	r2, [r3, #-136]
				if(counter==19){
 80090d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090dc:	2b13      	cmp	r3, #19
 80090de:	d102      	bne.n	80090e6 <parseZionEEPROM+0x282>
					foundTheEnd=1;
 80090e0:	2301      	movs	r3, #1
 80090e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				}
				counter++;
 80090e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090ea:	3301      	adds	r3, #1
 80090ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090f0:	e054      	b.n	800919c <parseZionEEPROM+0x338>
			}
			else{
				if((letsParseSomeBytes[index-indexSubtractor] == 0x45)){
 80090f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80090f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090fa:	5cd3      	ldrb	r3, [r2, r3]
 80090fc:	2b45      	cmp	r3, #69	; 0x45
 80090fe:	d102      	bne.n	8009106 <parseZionEEPROM+0x2a2>
					previousByteOfHeader[1] = index;
 8009100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009102:	60fb      	str	r3, [r7, #12]
 8009104:	e04a      	b.n	800919c <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x46)) && (previousByteOfHeader[1] == index -1)){
 8009106:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800910e:	5cd3      	ldrb	r3, [r2, r3]
 8009110:	2b46      	cmp	r3, #70	; 0x46
 8009112:	d107      	bne.n	8009124 <parseZionEEPROM+0x2c0>
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009118:	3b01      	subs	r3, #1
 800911a:	429a      	cmp	r2, r3
 800911c:	d102      	bne.n	8009124 <parseZionEEPROM+0x2c0>
					previousByteOfHeader[2] = index;
 800911e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009120:	613b      	str	r3, [r7, #16]
 8009122:	e03b      	b.n	800919c <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[2] == index -1)){
 8009124:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800912c:	5cd3      	ldrb	r3, [r2, r3]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d107      	bne.n	8009142 <parseZionEEPROM+0x2de>
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009136:	3b01      	subs	r3, #1
 8009138:	429a      	cmp	r2, r3
 800913a:	d102      	bne.n	8009142 <parseZionEEPROM+0x2de>
					previousByteOfHeader[3] = index;
 800913c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800913e:	617b      	str	r3, [r7, #20]
 8009140:	e02c      	b.n	800919c <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[3] == index -1)){
 8009142:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800914a:	5cd3      	ldrb	r3, [r2, r3]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d107      	bne.n	8009160 <parseZionEEPROM+0x2fc>
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009154:	3b01      	subs	r3, #1
 8009156:	429a      	cmp	r2, r3
 8009158:	d102      	bne.n	8009160 <parseZionEEPROM+0x2fc>
					previousByteOfHeader[4] = index;
 800915a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800915c:	61bb      	str	r3, [r7, #24]
 800915e:	e01d      	b.n	800919c <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x04)) && (previousByteOfHeader[4] == index -1)){
 8009160:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009168:	5cd3      	ldrb	r3, [r2, r3]
 800916a:	2b04      	cmp	r3, #4
 800916c:	d109      	bne.n	8009182 <parseZionEEPROM+0x31e>
 800916e:	69ba      	ldr	r2, [r7, #24]
 8009170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009172:	3b01      	subs	r3, #1
 8009174:	429a      	cmp	r2, r3
 8009176:	d104      	bne.n	8009182 <parseZionEEPROM+0x31e>
					previousByteOfHeader[5] = index;
 8009178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800917a:	61fb      	str	r3, [r7, #28]
					validHeader=1;
 800917c:	2301      	movs	r3, #1
 800917e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009180:	e00c      	b.n	800919c <parseZionEEPROM+0x338>
				}
				//if things didn't look good, erase it!
				else if (!validHeader){
 8009182:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009184:	2b00      	cmp	r3, #0
 8009186:	d109      	bne.n	800919c <parseZionEEPROM+0x338>
					memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 8009188:	f107 0308 	add.w	r3, r7, #8
 800918c:	2250      	movs	r2, #80	; 0x50
 800918e:	2100      	movs	r1, #0
 8009190:	4618      	mov	r0, r3
 8009192:	f00a f802 	bl	801319a <memset>
					zeroWas5A=0;
 8009196:	2300      	movs	r3, #0
 8009198:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				}

			}
		}
		index++;
 800919c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800919e:	3301      	adds	r3, #1
 80091a0:	67bb      	str	r3, [r7, #120]	; 0x78
	while(!foundTheEnd){
 80091a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f43f aee7 	beq.w	8008f7a <parseZionEEPROM+0x116>
	}
	//if the eemprom is initialized
	if(previousByteOfHeader[0]>=0){
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f2c0 8085 	blt.w	80092be <parseZionEEPROM+0x45a>
		//figure out on which index our data started
		int remainder = previousByteOfHeader[16]%size;
 80091b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80091b8:	fb93 f2f2 	sdiv	r2, r3, r2
 80091bc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80091be:	fb01 f202 	mul.w	r2, r1, r2
 80091c2:	1a9b      	subs	r3, r3, r2
 80091c4:	65fb      	str	r3, [r7, #92]	; 0x5c
		//if some of our data is split between past read and present read
		if(remainder >((size-1)-4)){
 80091c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091c8:	3b05      	subs	r3, #5
 80091ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091cc:	429a      	cmp	r2, r3
 80091ce:	dd50      	ble.n	8009272 <parseZionEEPROM+0x40e>
			//amount of bytes in the previous read
			int bytesInPreviousRead = (size-1) - remainder;
 80091d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091d2:	1e5a      	subs	r2, r3, #1
 80091d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	65bb      	str	r3, [r7, #88]	; 0x58
			//grab those bytes and store them in the buffer
			for(x=0;x<bytesInPreviousRead;x++){
 80091da:	2300      	movs	r3, #0
 80091dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80091e0:	e01c      	b.n	800921c <parseZionEEPROM+0x3b8>
				//deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfFF[0]-5+x];
				deviceHeaderBytes[x] = pastParsedBytes[previousByteOfHeader[16+x]%size];
 80091e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091e6:	3310      	adds	r3, #16
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80091ee:	4413      	add	r3, r2
 80091f0:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80091f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80091f6:	fb93 f2f2 	sdiv	r2, r3, r2
 80091fa:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80091fc:	fb01 f202 	mul.w	r2, r1, r2
 8009200:	1a9b      	subs	r3, r3, r2
 8009202:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009204:	5cd3      	ldrb	r3, [r2, r3]
 8009206:	4619      	mov	r1, r3
 8009208:	4a48      	ldr	r2, [pc, #288]	; (800932c <parseZionEEPROM+0x4c8>)
 800920a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800920e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<bytesInPreviousRead;x++){
 8009212:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009216:	3301      	adds	r3, #1
 8009218:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800921c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009220:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009222:	429a      	cmp	r2, r3
 8009224:	dbdd      	blt.n	80091e2 <parseZionEEPROM+0x37e>
			}
			//grab the remaining bytes from the present buffer
			for(x=bytesInPreviousRead;x<4;x++){
 8009226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009228:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800922c:	e01c      	b.n	8009268 <parseZionEEPROM+0x404>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 800922e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009232:	3310      	adds	r3, #16
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800923a:	4413      	add	r3, r2
 800923c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009240:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009242:	fb93 f2f2 	sdiv	r2, r3, r2
 8009246:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009248:	fb01 f202 	mul.w	r2, r1, r2
 800924c:	1a9b      	subs	r3, r3, r2
 800924e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009250:	5cd3      	ldrb	r3, [r2, r3]
 8009252:	4619      	mov	r1, r3
 8009254:	4a35      	ldr	r2, [pc, #212]	; (800932c <parseZionEEPROM+0x4c8>)
 8009256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800925a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=bytesInPreviousRead;x<4;x++){
 800925e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009262:	3301      	adds	r3, #1
 8009264:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009268:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800926c:	2b03      	cmp	r3, #3
 800926e:	ddde      	ble.n	800922e <parseZionEEPROM+0x3ca>
 8009270:	e052      	b.n	8009318 <parseZionEEPROM+0x4b4>
			}
		}
		else{
			//easy! all bytes are in the recent array. Grab them and store them.
			for(x=0;x<4;x++){
 8009272:	2300      	movs	r3, #0
 8009274:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009278:	e01c      	b.n	80092b4 <parseZionEEPROM+0x450>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 800927a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800927e:	3310      	adds	r3, #16
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8009286:	4413      	add	r3, r2
 8009288:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800928c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800928e:	fb93 f2f2 	sdiv	r2, r3, r2
 8009292:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009294:	fb01 f202 	mul.w	r2, r1, r2
 8009298:	1a9b      	subs	r3, r3, r2
 800929a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800929c:	5cd3      	ldrb	r3, [r2, r3]
 800929e:	4619      	mov	r1, r3
 80092a0:	4a22      	ldr	r2, [pc, #136]	; (800932c <parseZionEEPROM+0x4c8>)
 80092a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 80092aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092ae:	3301      	adds	r3, #1
 80092b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80092b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092b8:	2b03      	cmp	r3, #3
 80092ba:	ddde      	ble.n	800927a <parseZionEEPROM+0x416>
 80092bc:	e02c      	b.n	8009318 <parseZionEEPROM+0x4b4>
			}
		}
	}
	else{
		//send invalid data
		if(previousByteOfHeader[0] == -1){
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c4:	d114      	bne.n	80092f0 <parseZionEEPROM+0x48c>
			//if eeprom is initialized but no device header data
			for(x=0;x<4;x++){
 80092c6:	2300      	movs	r3, #0
 80092c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80092cc:	e00b      	b.n	80092e6 <parseZionEEPROM+0x482>
				deviceHeaderBytes[x] = -2;
 80092ce:	4a17      	ldr	r2, [pc, #92]	; (800932c <parseZionEEPROM+0x4c8>)
 80092d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092d4:	f06f 0101 	mvn.w	r1, #1
 80092d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 80092dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092e0:	3301      	adds	r3, #1
 80092e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80092e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092ea:	2b03      	cmp	r3, #3
 80092ec:	ddef      	ble.n	80092ce <parseZionEEPROM+0x46a>
 80092ee:	e013      	b.n	8009318 <parseZionEEPROM+0x4b4>
			}
		}
		//if eeprom is uninitialized
		else{
			for(x=0;x<4;x++){
 80092f0:	2300      	movs	r3, #0
 80092f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80092f6:	e00b      	b.n	8009310 <parseZionEEPROM+0x4ac>
				deviceHeaderBytes[x] = -1;
 80092f8:	4a0c      	ldr	r2, [pc, #48]	; (800932c <parseZionEEPROM+0x4c8>)
 80092fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092fe:	f04f 31ff 	mov.w	r1, #4294967295
 8009302:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 8009306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800930a:	3301      	adds	r3, #1
 800930c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009310:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009314:	2b03      	cmp	r3, #3
 8009316:	ddef      	ble.n	80092f8 <parseZionEEPROM+0x494>
			}
		}
	}
	deviceHeaderBytes[4] = previousByteOfHeader[0];
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	4a04      	ldr	r2, [pc, #16]	; (800932c <parseZionEEPROM+0x4c8>)
 800931c:	6113      	str	r3, [r2, #16]
	return deviceHeaderBytes;
 800931e:	4b03      	ldr	r3, [pc, #12]	; (800932c <parseZionEEPROM+0x4c8>)
 8009320:	46c5      	mov	sp, r8
}
 8009322:	4618      	mov	r0, r3
 8009324:	3790      	adds	r7, #144	; 0x90
 8009326:	46bd      	mov	sp, r7
 8009328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800932c:	20003394 	.word	0x20003394

08009330 <writeDataToSpareEEPROM>:


void writeDataToSpareEEPROM(uint8_t * data, uint8_t chipAddress, uint16_t memoryAddress, int len,uint16_t timeout){
 8009330:	b590      	push	{r4, r7, lr}
 8009332:	b08b      	sub	sp, #44	; 0x2c
 8009334:	af04      	add	r7, sp, #16
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	607b      	str	r3, [r7, #4]
 800933a:	460b      	mov	r3, r1
 800933c:	72fb      	strb	r3, [r7, #11]
 800933e:	4613      	mov	r3, r2
 8009340:	813b      	strh	r3, [r7, #8]
	int bytes = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	617b      	str	r3, [r7, #20]
	int writeSize=32; //32 bytes of data write are allowed per Page Write command
 8009346:	2320      	movs	r3, #32
 8009348:	613b      	str	r3, [r7, #16]
	while(bytes < len){
 800934a:	e024      	b.n	8009396 <writeDataToSpareEEPROM+0x66>
		if((bytes+32)>len){
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	3320      	adds	r3, #32
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	429a      	cmp	r2, r3
 8009354:	da03      	bge.n	800935e <writeDataToSpareEEPROM+0x2e>
			writeSize=len-bytes; //partial page writes are allowed.
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	1ad3      	subs	r3, r2, r3
 800935c:	613b      	str	r3, [r7, #16]
		}
		HAL_I2C_Mem_Write(&SPARE_I2C,chipAddress,memoryAddress+bytes, I2C_MEMADD_SIZE_16BIT,data+bytes,writeSize,timeout);
 800935e:	7afb      	ldrb	r3, [r7, #11]
 8009360:	b298      	uxth	r0, r3
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	b29a      	uxth	r2, r3
 8009366:	893b      	ldrh	r3, [r7, #8]
 8009368:	4413      	add	r3, r2
 800936a:	b29c      	uxth	r4, r3
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	4413      	add	r3, r2
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	b292      	uxth	r2, r2
 8009376:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8009378:	9102      	str	r1, [sp, #8]
 800937a:	9201      	str	r2, [sp, #4]
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	2302      	movs	r3, #2
 8009380:	4622      	mov	r2, r4
 8009382:	4601      	mov	r1, r0
 8009384:	4808      	ldr	r0, [pc, #32]	; (80093a8 <writeDataToSpareEEPROM+0x78>)
 8009386:	f001 ffd1 	bl	800b32c <HAL_I2C_Mem_Write>
		HAL_Delay(10); //give delay for EEPROM to write data to memory
 800938a:	200a      	movs	r0, #10
 800938c:	f000 f882 	bl	8009494 <HAL_Delay>
		bytes+=32;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	3320      	adds	r3, #32
 8009394:	617b      	str	r3, [r7, #20]
	while(bytes < len){
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	429a      	cmp	r2, r3
 800939c:	dbd6      	blt.n	800934c <writeDataToSpareEEPROM+0x1c>
	}

}
 800939e:	bf00      	nop
 80093a0:	371c      	adds	r7, #28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd90      	pop	{r4, r7, pc}
 80093a6:	bf00      	nop
 80093a8:	20029178 	.word	0x20029178

080093ac <readDataFromSpareEEPROM>:
//reads from the EEPROM can be continuous
void readDataFromSpareEEPROM(uint8_t * data, uint8_t chipAddress, uint16_t memoryAddress, int len,uint16_t timeout){
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b088      	sub	sp, #32
 80093b0:	af04      	add	r7, sp, #16
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	607b      	str	r3, [r7, #4]
 80093b6:	460b      	mov	r3, r1
 80093b8:	72fb      	strb	r3, [r7, #11]
 80093ba:	4613      	mov	r3, r2
 80093bc:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(&SPARE_I2C,chipAddress,memoryAddress, I2C_MEMADD_SIZE_16BIT,data,len,timeout);
 80093be:	7afb      	ldrb	r3, [r7, #11]
 80093c0:	b299      	uxth	r1, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	8b3a      	ldrh	r2, [r7, #24]
 80093c8:	8938      	ldrh	r0, [r7, #8]
 80093ca:	9202      	str	r2, [sp, #8]
 80093cc:	9301      	str	r3, [sp, #4]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	9300      	str	r3, [sp, #0]
 80093d2:	2302      	movs	r3, #2
 80093d4:	4602      	mov	r2, r0
 80093d6:	4803      	ldr	r0, [pc, #12]	; (80093e4 <readDataFromSpareEEPROM+0x38>)
 80093d8:	f002 f8bc 	bl	800b554 <HAL_I2C_Mem_Read>
}
 80093dc:	bf00      	nop
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	20029178 	.word	0x20029178

080093e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80093e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009420 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80093ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80093ee:	e003      	b.n	80093f8 <LoopCopyDataInit>

080093f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80093f0:	4b0c      	ldr	r3, [pc, #48]	; (8009424 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80093f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80093f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80093f6:	3104      	adds	r1, #4

080093f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80093f8:	480b      	ldr	r0, [pc, #44]	; (8009428 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80093fa:	4b0c      	ldr	r3, [pc, #48]	; (800942c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80093fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80093fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009400:	d3f6      	bcc.n	80093f0 <CopyDataInit>
  ldr  r2, =_sbss
 8009402:	4a0b      	ldr	r2, [pc, #44]	; (8009430 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009404:	e002      	b.n	800940c <LoopFillZerobss>

08009406 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009406:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009408:	f842 3b04 	str.w	r3, [r2], #4

0800940c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800940c:	4b09      	ldr	r3, [pc, #36]	; (8009434 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800940e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009410:	d3f9      	bcc.n	8009406 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009412:	f7ff fcc1 	bl	8008d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009416:	f009 fe91 	bl	801313c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800941a:	f7f8 fc6f 	bl	8001cfc <main>
  bx  lr    
 800941e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009420:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8009424:	08018488 	.word	0x08018488
  ldr  r0, =_sdata
 8009428:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800942c:	20000378 	.word	0x20000378
  ldr  r2, =_sbss
 8009430:	20000378 	.word	0x20000378
  ldr  r3, = _ebss
 8009434:	20030b7c 	.word	0x20030b7c

08009438 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009438:	e7fe      	b.n	8009438 <CAN1_RX0_IRQHandler>

0800943a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800943e:	2003      	movs	r0, #3
 8009440:	f000 fea3 	bl	800a18a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009444:	2000      	movs	r0, #0
 8009446:	f7ff fa7d 	bl	8008944 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800944a:	f7fe fcdd 	bl	8007e08 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	bd80      	pop	{r7, pc}

08009454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009454:	b480      	push	{r7}
 8009456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009458:	4b06      	ldr	r3, [pc, #24]	; (8009474 <HAL_IncTick+0x20>)
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	461a      	mov	r2, r3
 800945e:	4b06      	ldr	r3, [pc, #24]	; (8009478 <HAL_IncTick+0x24>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4413      	add	r3, r2
 8009464:	4a04      	ldr	r2, [pc, #16]	; (8009478 <HAL_IncTick+0x24>)
 8009466:	6013      	str	r3, [r2, #0]
}
 8009468:	bf00      	nop
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	200001a0 	.word	0x200001a0
 8009478:	20030b34 	.word	0x20030b34

0800947c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800947c:	b480      	push	{r7}
 800947e:	af00      	add	r7, sp, #0
  return uwTick;
 8009480:	4b03      	ldr	r3, [pc, #12]	; (8009490 <HAL_GetTick+0x14>)
 8009482:	681b      	ldr	r3, [r3, #0]
}
 8009484:	4618      	mov	r0, r3
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	20030b34 	.word	0x20030b34

08009494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800949c:	f7ff ffee 	bl	800947c <HAL_GetTick>
 80094a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ac:	d005      	beq.n	80094ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80094ae:	4b09      	ldr	r3, [pc, #36]	; (80094d4 <HAL_Delay+0x40>)
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	461a      	mov	r2, r3
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	4413      	add	r3, r2
 80094b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80094ba:	bf00      	nop
 80094bc:	f7ff ffde 	bl	800947c <HAL_GetTick>
 80094c0:	4602      	mov	r2, r0
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d8f7      	bhi.n	80094bc <HAL_Delay+0x28>
  {
  }
}
 80094cc:	bf00      	nop
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	200001a0 	.word	0x200001a0

080094d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e031      	b.n	8009552 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d109      	bne.n	800950a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7fe fcae 	bl	8007e58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950e:	f003 0310 	and.w	r3, r3, #16
 8009512:	2b00      	cmp	r3, #0
 8009514:	d116      	bne.n	8009544 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800951a:	4b10      	ldr	r3, [pc, #64]	; (800955c <HAL_ADC_Init+0x84>)
 800951c:	4013      	ands	r3, r2
 800951e:	f043 0202 	orr.w	r2, r3, #2
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fbfc 	bl	8009d24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009536:	f023 0303 	bic.w	r3, r3, #3
 800953a:	f043 0201 	orr.w	r2, r3, #1
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	641a      	str	r2, [r3, #64]	; 0x40
 8009542:	e001      	b.n	8009548 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009550:	7bfb      	ldrb	r3, [r7, #15]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	ffffeefd 	.word	0xffffeefd

08009560 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8009568:	2300      	movs	r3, #0
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	2300      	movs	r3, #0
 800956e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b02      	cmp	r3, #2
 800957c:	bf0c      	ite	eq
 800957e:	2301      	moveq	r3, #1
 8009580:	2300      	movne	r3, #0
 8009582:	b2db      	uxtb	r3, r3
 8009584:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f003 0320 	and.w	r3, r3, #32
 8009590:	2b20      	cmp	r3, #32
 8009592:	bf0c      	ite	eq
 8009594:	2301      	moveq	r3, #1
 8009596:	2300      	movne	r3, #0
 8009598:	b2db      	uxtb	r3, r3
 800959a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d049      	beq.n	8009636 <HAL_ADC_IRQHandler+0xd6>
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d046      	beq.n	8009636 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ac:	f003 0310 	and.w	r3, r3, #16
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d105      	bne.n	80095c0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d12b      	bne.n	8009626 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d127      	bne.n	8009626 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095dc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d006      	beq.n	80095f2 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d119      	bne.n	8009626 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 0220 	bic.w	r2, r2, #32
 8009600:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009616:	2b00      	cmp	r3, #0
 8009618:	d105      	bne.n	8009626 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961e:	f043 0201 	orr.w	r2, r3, #1
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7fa fdec 	bl	8004204 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f06f 0212 	mvn.w	r2, #18
 8009634:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0304 	and.w	r3, r3, #4
 8009640:	2b04      	cmp	r3, #4
 8009642:	bf0c      	ite	eq
 8009644:	2301      	moveq	r3, #1
 8009646:	2300      	movne	r3, #0
 8009648:	b2db      	uxtb	r3, r3
 800964a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009656:	2b80      	cmp	r3, #128	; 0x80
 8009658:	bf0c      	ite	eq
 800965a:	2301      	moveq	r3, #1
 800965c:	2300      	movne	r3, #0
 800965e:	b2db      	uxtb	r3, r3
 8009660:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d057      	beq.n	8009718 <HAL_ADC_IRQHandler+0x1b8>
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d054      	beq.n	8009718 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009672:	f003 0310 	and.w	r3, r3, #16
 8009676:	2b00      	cmp	r3, #0
 8009678:	d105      	bne.n	8009686 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d139      	bne.n	8009708 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d006      	beq.n	80096b0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d12b      	bne.n	8009708 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d124      	bne.n	8009708 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d11d      	bne.n	8009708 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d119      	bne.n	8009708 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d105      	bne.n	8009708 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009700:	f043 0201 	orr.w	r2, r3, #1
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fc87 	bl	800a01c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f06f 020c 	mvn.w	r2, #12
 8009716:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	2b01      	cmp	r3, #1
 8009724:	bf0c      	ite	eq
 8009726:	2301      	moveq	r3, #1
 8009728:	2300      	movne	r3, #0
 800972a:	b2db      	uxtb	r3, r3
 800972c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009738:	2b40      	cmp	r3, #64	; 0x40
 800973a:	bf0c      	ite	eq
 800973c:	2301      	moveq	r3, #1
 800973e:	2300      	movne	r3, #0
 8009740:	b2db      	uxtb	r3, r3
 8009742:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d017      	beq.n	800977a <HAL_ADC_IRQHandler+0x21a>
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d014      	beq.n	800977a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 0301 	and.w	r3, r3, #1
 800975a:	2b01      	cmp	r3, #1
 800975c:	d10d      	bne.n	800977a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009762:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f97c 	bl	8009a68 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f06f 0201 	mvn.w	r2, #1
 8009778:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0320 	and.w	r3, r3, #32
 8009784:	2b20      	cmp	r3, #32
 8009786:	bf0c      	ite	eq
 8009788:	2301      	moveq	r3, #1
 800978a:	2300      	movne	r3, #0
 800978c:	b2db      	uxtb	r3, r3
 800978e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800979a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800979e:	bf0c      	ite	eq
 80097a0:	2301      	moveq	r3, #1
 80097a2:	2300      	movne	r3, #0
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d015      	beq.n	80097da <HAL_ADC_IRQHandler+0x27a>
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d012      	beq.n	80097da <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097b8:	f043 0202 	orr.w	r2, r3, #2
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f06f 0220 	mvn.w	r2, #32
 80097c8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f956 	bl	8009a7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f06f 0220 	mvn.w	r2, #32
 80097d8:	601a      	str	r2, [r3, #0]
  }
}
 80097da:	bf00      	nop
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
	...

080097e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d101      	bne.n	8009802 <HAL_ADC_Start_DMA+0x1e>
 80097fe:	2302      	movs	r3, #2
 8009800:	e0c7      	b.n	8009992 <HAL_ADC_Start_DMA+0x1ae>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2201      	movs	r2, #1
 8009806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	2b01      	cmp	r3, #1
 8009816:	d018      	beq.n	800984a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	689a      	ldr	r2, [r3, #8]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f042 0201 	orr.w	r2, r2, #1
 8009826:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8009828:	4b5c      	ldr	r3, [pc, #368]	; (800999c <HAL_ADC_Start_DMA+0x1b8>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a5c      	ldr	r2, [pc, #368]	; (80099a0 <HAL_ADC_Start_DMA+0x1bc>)
 800982e:	fba2 2303 	umull	r2, r3, r2, r3
 8009832:	0c9a      	lsrs	r2, r3, #18
 8009834:	4613      	mov	r3, r2
 8009836:	005b      	lsls	r3, r3, #1
 8009838:	4413      	add	r3, r2
 800983a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800983c:	e002      	b.n	8009844 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	3b01      	subs	r3, #1
 8009842:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1f9      	bne.n	800983e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f003 0301 	and.w	r3, r3, #1
 8009854:	2b01      	cmp	r3, #1
 8009856:	f040 809b 	bne.w	8009990 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800985e:	4b51      	ldr	r3, [pc, #324]	; (80099a4 <HAL_ADC_Start_DMA+0x1c0>)
 8009860:	4013      	ands	r3, r2
 8009862:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009874:	2b00      	cmp	r3, #0
 8009876:	d007      	beq.n	8009888 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009880:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009894:	d106      	bne.n	80098a4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800989a:	f023 0206 	bic.w	r2, r3, #6
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	645a      	str	r2, [r3, #68]	; 0x44
 80098a2:	e002      	b.n	80098aa <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b6:	4a3c      	ldr	r2, [pc, #240]	; (80099a8 <HAL_ADC_Start_DMA+0x1c4>)
 80098b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098be:	4a3b      	ldr	r2, [pc, #236]	; (80099ac <HAL_ADC_Start_DMA+0x1c8>)
 80098c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c6:	4a3a      	ldr	r2, [pc, #232]	; (80099b0 <HAL_ADC_Start_DMA+0x1cc>)
 80098c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80098d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685a      	ldr	r2, [r3, #4]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80098e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	689a      	ldr	r2, [r3, #8]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	334c      	adds	r3, #76	; 0x4c
 80098fe:	4619      	mov	r1, r3
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f000 fd24 	bl	800a350 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8009908:	4b2a      	ldr	r3, [pc, #168]	; (80099b4 <HAL_ADC_Start_DMA+0x1d0>)
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	f003 031f 	and.w	r3, r3, #31
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10f      	bne.n	8009934 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d136      	bne.n	8009990 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	689a      	ldr	r2, [r3, #8]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009930:	609a      	str	r2, [r3, #8]
 8009932:	e02d      	b.n	8009990 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a1f      	ldr	r2, [pc, #124]	; (80099b8 <HAL_ADC_Start_DMA+0x1d4>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d10e      	bne.n	800995c <HAL_ADC_Start_DMA+0x178>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d107      	bne.n	800995c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	689a      	ldr	r2, [r3, #8]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800995a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800995c:	4b15      	ldr	r3, [pc, #84]	; (80099b4 <HAL_ADC_Start_DMA+0x1d0>)
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	f003 0310 	and.w	r3, r3, #16
 8009964:	2b00      	cmp	r3, #0
 8009966:	d113      	bne.n	8009990 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a13      	ldr	r2, [pc, #76]	; (80099bc <HAL_ADC_Start_DMA+0x1d8>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d10e      	bne.n	8009990 <HAL_ADC_Start_DMA+0x1ac>
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d107      	bne.n	8009990 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	689a      	ldr	r2, [r3, #8]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800998e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20000198 	.word	0x20000198
 80099a0:	431bde83 	.word	0x431bde83
 80099a4:	fffff8fe 	.word	0xfffff8fe
 80099a8:	08009f19 	.word	0x08009f19
 80099ac:	08009fd3 	.word	0x08009fd3
 80099b0:	08009fef 	.word	0x08009fef
 80099b4:	40012300 	.word	0x40012300
 80099b8:	40012000 	.word	0x40012000
 80099bc:	40012200 	.word	0x40012200

080099c0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d101      	bne.n	80099da <HAL_ADC_Stop_DMA+0x1a>
 80099d6:	2302      	movs	r3, #2
 80099d8:	e036      	b.n	8009a48 <HAL_ADC_Stop_DMA+0x88>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	689a      	ldr	r2, [r3, #8]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f022 0201 	bic.w	r2, r2, #1
 80099f0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f003 0301 	and.w	r3, r3, #1
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d11e      	bne.n	8009a3e <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	689a      	ldr	r2, [r3, #8]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a0e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 fcfb 	bl	800a410 <HAL_DMA_Abort>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8009a2c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a32:	4b07      	ldr	r3, [pc, #28]	; (8009a50 <HAL_ADC_Stop_DMA+0x90>)
 8009a34:	4013      	ands	r3, r2
 8009a36:	f043 0201 	orr.w	r2, r3, #1
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	ffffeefe 	.word	0xffffeefe

08009a54 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009a5c:	bf00      	nop
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d101      	bne.n	8009aac <HAL_ADC_ConfigChannel+0x1c>
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	e12a      	b.n	8009d02 <HAL_ADC_ConfigChannel+0x272>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b09      	cmp	r3, #9
 8009aba:	d93a      	bls.n	8009b32 <HAL_ADC_ConfigChannel+0xa2>
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ac4:	d035      	beq.n	8009b32 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68d9      	ldr	r1, [r3, #12]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	005b      	lsls	r3, r3, #1
 8009ad8:	4413      	add	r3, r2
 8009ada:	3b1e      	subs	r3, #30
 8009adc:	2207      	movs	r2, #7
 8009ade:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae2:	43da      	mvns	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	400a      	ands	r2, r1
 8009aea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a87      	ldr	r2, [pc, #540]	; (8009d10 <HAL_ADC_ConfigChannel+0x280>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d10a      	bne.n	8009b0c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68d9      	ldr	r1, [r3, #12]
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	061a      	lsls	r2, r3, #24
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009b0a:	e035      	b.n	8009b78 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68d9      	ldr	r1, [r3, #12]
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	689a      	ldr	r2, [r3, #8]
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	4603      	mov	r3, r0
 8009b20:	005b      	lsls	r3, r3, #1
 8009b22:	4403      	add	r3, r0
 8009b24:	3b1e      	subs	r3, #30
 8009b26:	409a      	lsls	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009b30:	e022      	b.n	8009b78 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	6919      	ldr	r1, [r3, #16]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	461a      	mov	r2, r3
 8009b40:	4613      	mov	r3, r2
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	4413      	add	r3, r2
 8009b46:	2207      	movs	r2, #7
 8009b48:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4c:	43da      	mvns	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	400a      	ands	r2, r1
 8009b54:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	6919      	ldr	r1, [r3, #16]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	689a      	ldr	r2, [r3, #8]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	4618      	mov	r0, r3
 8009b68:	4603      	mov	r3, r0
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	4403      	add	r3, r0
 8009b6e:	409a      	lsls	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	430a      	orrs	r2, r1
 8009b76:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	2b06      	cmp	r3, #6
 8009b7e:	d824      	bhi.n	8009bca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	685a      	ldr	r2, [r3, #4]
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	4413      	add	r3, r2
 8009b90:	3b05      	subs	r3, #5
 8009b92:	221f      	movs	r2, #31
 8009b94:	fa02 f303 	lsl.w	r3, r2, r3
 8009b98:	43da      	mvns	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	400a      	ands	r2, r1
 8009ba0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	4618      	mov	r0, r3
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	685a      	ldr	r2, [r3, #4]
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	3b05      	subs	r3, #5
 8009bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	430a      	orrs	r2, r1
 8009bc6:	635a      	str	r2, [r3, #52]	; 0x34
 8009bc8:	e04c      	b.n	8009c64 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	2b0c      	cmp	r3, #12
 8009bd0:	d824      	bhi.n	8009c1c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	4413      	add	r3, r2
 8009be2:	3b23      	subs	r3, #35	; 0x23
 8009be4:	221f      	movs	r2, #31
 8009be6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bea:	43da      	mvns	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	400a      	ands	r2, r1
 8009bf2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	4618      	mov	r0, r3
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	685a      	ldr	r2, [r3, #4]
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	3b23      	subs	r3, #35	; 0x23
 8009c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	430a      	orrs	r2, r1
 8009c18:	631a      	str	r2, [r3, #48]	; 0x30
 8009c1a:	e023      	b.n	8009c64 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	685a      	ldr	r2, [r3, #4]
 8009c26:	4613      	mov	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	3b41      	subs	r3, #65	; 0x41
 8009c2e:	221f      	movs	r2, #31
 8009c30:	fa02 f303 	lsl.w	r3, r2, r3
 8009c34:	43da      	mvns	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	400a      	ands	r2, r1
 8009c3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	685a      	ldr	r2, [r3, #4]
 8009c50:	4613      	mov	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	3b41      	subs	r3, #65	; 0x41
 8009c58:	fa00 f203 	lsl.w	r2, r0, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	430a      	orrs	r2, r1
 8009c62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a2a      	ldr	r2, [pc, #168]	; (8009d14 <HAL_ADC_ConfigChannel+0x284>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d10a      	bne.n	8009c84 <HAL_ADC_ConfigChannel+0x1f4>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c76:	d105      	bne.n	8009c84 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8009c78:	4b27      	ldr	r3, [pc, #156]	; (8009d18 <HAL_ADC_ConfigChannel+0x288>)
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	4a26      	ldr	r2, [pc, #152]	; (8009d18 <HAL_ADC_ConfigChannel+0x288>)
 8009c7e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8009c82:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a22      	ldr	r2, [pc, #136]	; (8009d14 <HAL_ADC_ConfigChannel+0x284>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d109      	bne.n	8009ca2 <HAL_ADC_ConfigChannel+0x212>
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b12      	cmp	r3, #18
 8009c94:	d105      	bne.n	8009ca2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8009c96:	4b20      	ldr	r3, [pc, #128]	; (8009d18 <HAL_ADC_ConfigChannel+0x288>)
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	4a1f      	ldr	r2, [pc, #124]	; (8009d18 <HAL_ADC_ConfigChannel+0x288>)
 8009c9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009ca0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a1b      	ldr	r2, [pc, #108]	; (8009d14 <HAL_ADC_ConfigChannel+0x284>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d125      	bne.n	8009cf8 <HAL_ADC_ConfigChannel+0x268>
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a17      	ldr	r2, [pc, #92]	; (8009d10 <HAL_ADC_ConfigChannel+0x280>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d003      	beq.n	8009cbe <HAL_ADC_ConfigChannel+0x22e>
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b11      	cmp	r3, #17
 8009cbc:	d11c      	bne.n	8009cf8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8009cbe:	4b16      	ldr	r3, [pc, #88]	; (8009d18 <HAL_ADC_ConfigChannel+0x288>)
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	4a15      	ldr	r2, [pc, #84]	; (8009d18 <HAL_ADC_ConfigChannel+0x288>)
 8009cc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009cc8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a10      	ldr	r2, [pc, #64]	; (8009d10 <HAL_ADC_ConfigChannel+0x280>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d111      	bne.n	8009cf8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8009cd4:	4b11      	ldr	r3, [pc, #68]	; (8009d1c <HAL_ADC_ConfigChannel+0x28c>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a11      	ldr	r2, [pc, #68]	; (8009d20 <HAL_ADC_ConfigChannel+0x290>)
 8009cda:	fba2 2303 	umull	r2, r3, r2, r3
 8009cde:	0c9a      	lsrs	r2, r3, #18
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	005b      	lsls	r3, r3, #1
 8009ce8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8009cea:	e002      	b.n	8009cf2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1f9      	bne.n	8009cec <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3714      	adds	r7, #20
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	10000012 	.word	0x10000012
 8009d14:	40012000 	.word	0x40012000
 8009d18:	40012300 	.word	0x40012300
 8009d1c:	20000198 	.word	0x20000198
 8009d20:	431bde83 	.word	0x431bde83

08009d24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8009d2c:	4b78      	ldr	r3, [pc, #480]	; (8009f10 <ADC_Init+0x1ec>)
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	4a77      	ldr	r2, [pc, #476]	; (8009f10 <ADC_Init+0x1ec>)
 8009d32:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009d36:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8009d38:	4b75      	ldr	r3, [pc, #468]	; (8009f10 <ADC_Init+0x1ec>)
 8009d3a:	685a      	ldr	r2, [r3, #4]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	4973      	ldr	r1, [pc, #460]	; (8009f10 <ADC_Init+0x1ec>)
 8009d42:	4313      	orrs	r3, r2
 8009d44:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	6859      	ldr	r1, [r3, #4]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	021a      	lsls	r2, r3, #8
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	430a      	orrs	r2, r1
 8009d68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009d78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	6859      	ldr	r1, [r3, #4]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689a      	ldr	r2, [r3, #8]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	430a      	orrs	r2, r1
 8009d8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	689a      	ldr	r2, [r3, #8]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6899      	ldr	r1, [r3, #8]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	68da      	ldr	r2, [r3, #12]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	430a      	orrs	r2, r1
 8009dac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db2:	4a58      	ldr	r2, [pc, #352]	; (8009f14 <ADC_Init+0x1f0>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d022      	beq.n	8009dfe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	689a      	ldr	r2, [r3, #8]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009dc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6899      	ldr	r1, [r3, #8]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689a      	ldr	r2, [r3, #8]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009de8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	6899      	ldr	r1, [r3, #8]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	609a      	str	r2, [r3, #8]
 8009dfc:	e00f      	b.n	8009e1e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	689a      	ldr	r2, [r3, #8]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009e0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689a      	ldr	r2, [r3, #8]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009e1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	689a      	ldr	r2, [r3, #8]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f022 0202 	bic.w	r2, r2, #2
 8009e2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	6899      	ldr	r1, [r3, #8]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	005a      	lsls	r2, r3, #1
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d01b      	beq.n	8009e84 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	685a      	ldr	r2, [r3, #4]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009e6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6859      	ldr	r1, [r3, #4]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e76:	3b01      	subs	r3, #1
 8009e78:	035a      	lsls	r2, r3, #13
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	605a      	str	r2, [r3, #4]
 8009e82:	e007      	b.n	8009e94 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	69db      	ldr	r3, [r3, #28]
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	051a      	lsls	r2, r3, #20
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	689a      	ldr	r2, [r3, #8]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009ec8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6899      	ldr	r1, [r3, #8]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009ed6:	025a      	lsls	r2, r3, #9
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	430a      	orrs	r2, r1
 8009ede:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	689a      	ldr	r2, [r3, #8]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009eee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6899      	ldr	r1, [r3, #8]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	029a      	lsls	r2, r3, #10
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	430a      	orrs	r2, r1
 8009f02:	609a      	str	r2, [r3, #8]
}
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	40012300 	.word	0x40012300
 8009f14:	0f000001 	.word	0x0f000001

08009f18 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f24:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d13c      	bne.n	8009fac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d12b      	bne.n	8009fa4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d127      	bne.n	8009fa4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d006      	beq.n	8009f70 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d119      	bne.n	8009fa4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	685a      	ldr	r2, [r3, #4]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f022 0220 	bic.w	r2, r2, #32
 8009f7e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d105      	bne.n	8009fa4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f9c:	f043 0201 	orr.w	r2, r3, #1
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f7fa f92d 	bl	8004204 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009faa:	e00e      	b.n	8009fca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb0:	f003 0310 	and.w	r3, r3, #16
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d003      	beq.n	8009fc0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f7ff fd5f 	bl	8009a7c <HAL_ADC_ErrorCallback>
}
 8009fbe:	e004      	b.n	8009fca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	4798      	blx	r3
}
 8009fca:	bf00      	nop
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b084      	sub	sp, #16
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fde:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f7ff fd37 	bl	8009a54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009fe6:	bf00      	nop
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ffa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2240      	movs	r2, #64	; 0x40
 800a000:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a006:	f043 0204 	orr.w	r2, r3, #4
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f7ff fd34 	bl	8009a7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a014:	bf00      	nop
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f003 0307 	and.w	r3, r3, #7
 800a03e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a040:	4b0b      	ldr	r3, [pc, #44]	; (800a070 <__NVIC_SetPriorityGrouping+0x40>)
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a04c:	4013      	ands	r3, r2
 800a04e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a058:	4b06      	ldr	r3, [pc, #24]	; (800a074 <__NVIC_SetPriorityGrouping+0x44>)
 800a05a:	4313      	orrs	r3, r2
 800a05c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a05e:	4a04      	ldr	r2, [pc, #16]	; (800a070 <__NVIC_SetPriorityGrouping+0x40>)
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	60d3      	str	r3, [r2, #12]
}
 800a064:	bf00      	nop
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	e000ed00 	.word	0xe000ed00
 800a074:	05fa0000 	.word	0x05fa0000

0800a078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a078:	b480      	push	{r7}
 800a07a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a07c:	4b04      	ldr	r3, [pc, #16]	; (800a090 <__NVIC_GetPriorityGrouping+0x18>)
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	0a1b      	lsrs	r3, r3, #8
 800a082:	f003 0307 	and.w	r3, r3, #7
}
 800a086:	4618      	mov	r0, r3
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	e000ed00 	.word	0xe000ed00

0800a094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	4603      	mov	r3, r0
 800a09c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a09e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	db0b      	blt.n	800a0be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a0a6:	79fb      	ldrb	r3, [r7, #7]
 800a0a8:	f003 021f 	and.w	r2, r3, #31
 800a0ac:	4907      	ldr	r1, [pc, #28]	; (800a0cc <__NVIC_EnableIRQ+0x38>)
 800a0ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0b2:	095b      	lsrs	r3, r3, #5
 800a0b4:	2001      	movs	r0, #1
 800a0b6:	fa00 f202 	lsl.w	r2, r0, r2
 800a0ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a0be:	bf00      	nop
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	e000e100 	.word	0xe000e100

0800a0d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	6039      	str	r1, [r7, #0]
 800a0da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	db0a      	blt.n	800a0fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	b2da      	uxtb	r2, r3
 800a0e8:	490c      	ldr	r1, [pc, #48]	; (800a11c <__NVIC_SetPriority+0x4c>)
 800a0ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0ee:	0112      	lsls	r2, r2, #4
 800a0f0:	b2d2      	uxtb	r2, r2
 800a0f2:	440b      	add	r3, r1
 800a0f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a0f8:	e00a      	b.n	800a110 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	b2da      	uxtb	r2, r3
 800a0fe:	4908      	ldr	r1, [pc, #32]	; (800a120 <__NVIC_SetPriority+0x50>)
 800a100:	79fb      	ldrb	r3, [r7, #7]
 800a102:	f003 030f 	and.w	r3, r3, #15
 800a106:	3b04      	subs	r3, #4
 800a108:	0112      	lsls	r2, r2, #4
 800a10a:	b2d2      	uxtb	r2, r2
 800a10c:	440b      	add	r3, r1
 800a10e:	761a      	strb	r2, [r3, #24]
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr
 800a11c:	e000e100 	.word	0xe000e100
 800a120:	e000ed00 	.word	0xe000ed00

0800a124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a124:	b480      	push	{r7}
 800a126:	b089      	sub	sp, #36	; 0x24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f003 0307 	and.w	r3, r3, #7
 800a136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	f1c3 0307 	rsb	r3, r3, #7
 800a13e:	2b04      	cmp	r3, #4
 800a140:	bf28      	it	cs
 800a142:	2304      	movcs	r3, #4
 800a144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	3304      	adds	r3, #4
 800a14a:	2b06      	cmp	r3, #6
 800a14c:	d902      	bls.n	800a154 <NVIC_EncodePriority+0x30>
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	3b03      	subs	r3, #3
 800a152:	e000      	b.n	800a156 <NVIC_EncodePriority+0x32>
 800a154:	2300      	movs	r3, #0
 800a156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a158:	f04f 32ff 	mov.w	r2, #4294967295
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	fa02 f303 	lsl.w	r3, r2, r3
 800a162:	43da      	mvns	r2, r3
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	401a      	ands	r2, r3
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a16c:	f04f 31ff 	mov.w	r1, #4294967295
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	fa01 f303 	lsl.w	r3, r1, r3
 800a176:	43d9      	mvns	r1, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a17c:	4313      	orrs	r3, r2
         );
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3724      	adds	r7, #36	; 0x24
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr

0800a18a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b082      	sub	sp, #8
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f7ff ff4c 	bl	800a030 <__NVIC_SetPriorityGrouping>
}
 800a198:	bf00      	nop
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
 800a1ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a1b2:	f7ff ff61 	bl	800a078 <__NVIC_GetPriorityGrouping>
 800a1b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	68b9      	ldr	r1, [r7, #8]
 800a1bc:	6978      	ldr	r0, [r7, #20]
 800a1be:	f7ff ffb1 	bl	800a124 <NVIC_EncodePriority>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7ff ff80 	bl	800a0d0 <__NVIC_SetPriority>
}
 800a1d0:	bf00      	nop
 800a1d2:	3718      	adds	r7, #24
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a1e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7ff ff54 	bl	800a094 <__NVIC_EnableIRQ>
}
 800a1ec:	bf00      	nop
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a200:	f7ff f93c 	bl	800947c <HAL_GetTick>
 800a204:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d101      	bne.n	800a210 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e099      	b.n	800a344 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2202      	movs	r2, #2
 800a21c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f022 0201 	bic.w	r2, r2, #1
 800a22e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a230:	e00f      	b.n	800a252 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a232:	f7ff f923 	bl	800947c <HAL_GetTick>
 800a236:	4602      	mov	r2, r0
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	2b05      	cmp	r3, #5
 800a23e:	d908      	bls.n	800a252 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2220      	movs	r2, #32
 800a244:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2203      	movs	r2, #3
 800a24a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a24e:	2303      	movs	r3, #3
 800a250:	e078      	b.n	800a344 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f003 0301 	and.w	r3, r3, #1
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1e8      	bne.n	800a232 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	4b38      	ldr	r3, [pc, #224]	; (800a34c <HAL_DMA_Init+0x158>)
 800a26c:	4013      	ands	r3, r2
 800a26e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	685a      	ldr	r2, [r3, #4]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a27e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	691b      	ldr	r3, [r3, #16]
 800a284:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a28a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a1b      	ldr	r3, [r3, #32]
 800a29c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	d107      	bne.n	800a2bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	695b      	ldr	r3, [r3, #20]
 800a2ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	f023 0307 	bic.w	r3, r3, #7
 800a2d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e2:	2b04      	cmp	r3, #4
 800a2e4:	d117      	bne.n	800a316 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ea:	697a      	ldr	r2, [r7, #20]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00e      	beq.n	800a316 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 fb09 	bl	800a910 <DMA_CheckFifoParam>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d008      	beq.n	800a316 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2240      	movs	r2, #64	; 0x40
 800a308:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a312:	2301      	movs	r3, #1
 800a314:	e016      	b.n	800a344 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	697a      	ldr	r2, [r7, #20]
 800a31c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fac0 	bl	800a8a4 <DMA_CalcBaseAndBitshift>
 800a324:	4603      	mov	r3, r0
 800a326:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a32c:	223f      	movs	r2, #63	; 0x3f
 800a32e:	409a      	lsls	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a342:	2300      	movs	r3, #0
}
 800a344:	4618      	mov	r0, r3
 800a346:	3718      	adds	r7, #24
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	e010803f 	.word	0xe010803f

0800a350 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	607a      	str	r2, [r7, #4]
 800a35c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a366:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d101      	bne.n	800a376 <HAL_DMA_Start_IT+0x26>
 800a372:	2302      	movs	r3, #2
 800a374:	e048      	b.n	800a408 <HAL_DMA_Start_IT+0xb8>
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b01      	cmp	r3, #1
 800a388:	d137      	bne.n	800a3fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2202      	movs	r2, #2
 800a38e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2200      	movs	r2, #0
 800a396:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	68b9      	ldr	r1, [r7, #8]
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f000 fa52 	bl	800a848 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3a8:	223f      	movs	r2, #63	; 0x3f
 800a3aa:	409a      	lsls	r2, r3
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f042 0216 	orr.w	r2, r2, #22
 800a3be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	695a      	ldr	r2, [r3, #20]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a3ce:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d007      	beq.n	800a3e8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f042 0208 	orr.w	r2, r2, #8
 800a3e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f042 0201 	orr.w	r2, r2, #1
 800a3f6:	601a      	str	r2, [r3, #0]
 800a3f8:	e005      	b.n	800a406 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a402:	2302      	movs	r3, #2
 800a404:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a406:	7dfb      	ldrb	r3, [r7, #23]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a41c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a41e:	f7ff f82d 	bl	800947c <HAL_GetTick>
 800a422:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d008      	beq.n	800a442 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2280      	movs	r2, #128	; 0x80
 800a434:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	e052      	b.n	800a4e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f022 0216 	bic.w	r2, r2, #22
 800a450:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	695a      	ldr	r2, [r3, #20]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a460:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a466:	2b00      	cmp	r3, #0
 800a468:	d103      	bne.n	800a472 <HAL_DMA_Abort+0x62>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d007      	beq.n	800a482 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f022 0208 	bic.w	r2, r2, #8
 800a480:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f022 0201 	bic.w	r2, r2, #1
 800a490:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a492:	e013      	b.n	800a4bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a494:	f7fe fff2 	bl	800947c <HAL_GetTick>
 800a498:	4602      	mov	r2, r0
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	2b05      	cmp	r3, #5
 800a4a0:	d90c      	bls.n	800a4bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2220      	movs	r2, #32
 800a4a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2203      	movs	r2, #3
 800a4b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e015      	b.n	800a4e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f003 0301 	and.w	r3, r3, #1
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d1e4      	bne.n	800a494 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4ce:	223f      	movs	r2, #63	; 0x3f
 800a4d0:	409a      	lsls	r2, r3
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	2b02      	cmp	r3, #2
 800a502:	d004      	beq.n	800a50e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2280      	movs	r2, #128	; 0x80
 800a508:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e00c      	b.n	800a528 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2205      	movs	r2, #5
 800a512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f022 0201 	bic.w	r2, r2, #1
 800a524:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b086      	sub	sp, #24
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800a53c:	2300      	movs	r3, #0
 800a53e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800a540:	4b92      	ldr	r3, [pc, #584]	; (800a78c <HAL_DMA_IRQHandler+0x258>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a92      	ldr	r2, [pc, #584]	; (800a790 <HAL_DMA_IRQHandler+0x25c>)
 800a546:	fba2 2303 	umull	r2, r3, r2, r3
 800a54a:	0a9b      	lsrs	r3, r3, #10
 800a54c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a552:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a55e:	2208      	movs	r2, #8
 800a560:	409a      	lsls	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	4013      	ands	r3, r2
 800a566:	2b00      	cmp	r3, #0
 800a568:	d01a      	beq.n	800a5a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 0304 	and.w	r3, r3, #4
 800a574:	2b00      	cmp	r3, #0
 800a576:	d013      	beq.n	800a5a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f022 0204 	bic.w	r2, r2, #4
 800a586:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a58c:	2208      	movs	r2, #8
 800a58e:	409a      	lsls	r2, r3
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a598:	f043 0201 	orr.w	r2, r3, #1
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	409a      	lsls	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d012      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00b      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	409a      	lsls	r2, r3
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ce:	f043 0202 	orr.w	r2, r3, #2
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5da:	2204      	movs	r2, #4
 800a5dc:	409a      	lsls	r2, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d012      	beq.n	800a60c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 0302 	and.w	r3, r3, #2
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00b      	beq.n	800a60c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5f8:	2204      	movs	r2, #4
 800a5fa:	409a      	lsls	r2, r3
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a604:	f043 0204 	orr.w	r2, r3, #4
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a610:	2210      	movs	r2, #16
 800a612:	409a      	lsls	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	4013      	ands	r3, r2
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d043      	beq.n	800a6a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 0308 	and.w	r3, r3, #8
 800a626:	2b00      	cmp	r3, #0
 800a628:	d03c      	beq.n	800a6a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a62e:	2210      	movs	r2, #16
 800a630:	409a      	lsls	r2, r3
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a640:	2b00      	cmp	r3, #0
 800a642:	d018      	beq.n	800a676 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d108      	bne.n	800a664 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a656:	2b00      	cmp	r3, #0
 800a658:	d024      	beq.n	800a6a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	4798      	blx	r3
 800a662:	e01f      	b.n	800a6a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d01b      	beq.n	800a6a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	4798      	blx	r3
 800a674:	e016      	b.n	800a6a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a680:	2b00      	cmp	r3, #0
 800a682:	d107      	bne.n	800a694 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f022 0208 	bic.w	r2, r2, #8
 800a692:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d003      	beq.n	800a6a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6a8:	2220      	movs	r2, #32
 800a6aa:	409a      	lsls	r2, r3
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f000 808e 	beq.w	800a7d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 0310 	and.w	r3, r3, #16
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f000 8086 	beq.w	800a7d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6ca:	2220      	movs	r2, #32
 800a6cc:	409a      	lsls	r2, r3
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	2b05      	cmp	r3, #5
 800a6dc:	d136      	bne.n	800a74c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 0216 	bic.w	r2, r2, #22
 800a6ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	695a      	ldr	r2, [r3, #20]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a6fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a702:	2b00      	cmp	r3, #0
 800a704:	d103      	bne.n	800a70e <HAL_DMA_IRQHandler+0x1da>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d007      	beq.n	800a71e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f022 0208 	bic.w	r2, r2, #8
 800a71c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a722:	223f      	movs	r2, #63	; 0x3f
 800a724:	409a      	lsls	r2, r3
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d07d      	beq.n	800a83e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	4798      	blx	r3
        }
        return;
 800a74a:	e078      	b.n	800a83e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d01c      	beq.n	800a794 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a764:	2b00      	cmp	r3, #0
 800a766:	d108      	bne.n	800a77a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d030      	beq.n	800a7d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	4798      	blx	r3
 800a778:	e02b      	b.n	800a7d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d027      	beq.n	800a7d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	4798      	blx	r3
 800a78a:	e022      	b.n	800a7d2 <HAL_DMA_IRQHandler+0x29e>
 800a78c:	20000198 	.word	0x20000198
 800a790:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10f      	bne.n	800a7c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f022 0210 	bic.w	r2, r2, #16
 800a7b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d032      	beq.n	800a840 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7de:	f003 0301 	and.w	r3, r3, #1
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d022      	beq.n	800a82c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2205      	movs	r2, #5
 800a7ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f022 0201 	bic.w	r2, r2, #1
 800a7fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	3301      	adds	r3, #1
 800a802:	60bb      	str	r3, [r7, #8]
 800a804:	697a      	ldr	r2, [r7, #20]
 800a806:	429a      	cmp	r2, r3
 800a808:	d307      	bcc.n	800a81a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 0301 	and.w	r3, r3, #1
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1f2      	bne.n	800a7fe <HAL_DMA_IRQHandler+0x2ca>
 800a818:	e000      	b.n	800a81c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a81a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a830:	2b00      	cmp	r3, #0
 800a832:	d005      	beq.n	800a840 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	4798      	blx	r3
 800a83c:	e000      	b.n	800a840 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a83e:	bf00      	nop
    }
  }
}
 800a840:	3718      	adds	r7, #24
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop

0800a848 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
 800a854:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a864:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	2b40      	cmp	r3, #64	; 0x40
 800a874:	d108      	bne.n	800a888 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a886:	e007      	b.n	800a898 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	60da      	str	r2, [r3, #12]
}
 800a898:	bf00      	nop
 800a89a:	3714      	adds	r7, #20
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	3b10      	subs	r3, #16
 800a8b4:	4a13      	ldr	r2, [pc, #76]	; (800a904 <DMA_CalcBaseAndBitshift+0x60>)
 800a8b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ba:	091b      	lsrs	r3, r3, #4
 800a8bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a8be:	4a12      	ldr	r2, [pc, #72]	; (800a908 <DMA_CalcBaseAndBitshift+0x64>)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2b03      	cmp	r3, #3
 800a8d0:	d908      	bls.n	800a8e4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	4b0c      	ldr	r3, [pc, #48]	; (800a90c <DMA_CalcBaseAndBitshift+0x68>)
 800a8da:	4013      	ands	r3, r2
 800a8dc:	1d1a      	adds	r2, r3, #4
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	659a      	str	r2, [r3, #88]	; 0x58
 800a8e2:	e006      	b.n	800a8f2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	4b08      	ldr	r3, [pc, #32]	; (800a90c <DMA_CalcBaseAndBitshift+0x68>)
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	aaaaaaab 	.word	0xaaaaaaab
 800a908:	0801814c 	.word	0x0801814c
 800a90c:	fffffc00 	.word	0xfffffc00

0800a910 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a920:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d11f      	bne.n	800a96a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	2b03      	cmp	r3, #3
 800a92e:	d855      	bhi.n	800a9dc <DMA_CheckFifoParam+0xcc>
 800a930:	a201      	add	r2, pc, #4	; (adr r2, 800a938 <DMA_CheckFifoParam+0x28>)
 800a932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a936:	bf00      	nop
 800a938:	0800a949 	.word	0x0800a949
 800a93c:	0800a95b 	.word	0x0800a95b
 800a940:	0800a949 	.word	0x0800a949
 800a944:	0800a9dd 	.word	0x0800a9dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a94c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a950:	2b00      	cmp	r3, #0
 800a952:	d045      	beq.n	800a9e0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a958:	e042      	b.n	800a9e0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a962:	d13f      	bne.n	800a9e4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a968:	e03c      	b.n	800a9e4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a972:	d121      	bne.n	800a9b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	2b03      	cmp	r3, #3
 800a978:	d836      	bhi.n	800a9e8 <DMA_CheckFifoParam+0xd8>
 800a97a:	a201      	add	r2, pc, #4	; (adr r2, 800a980 <DMA_CheckFifoParam+0x70>)
 800a97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a980:	0800a991 	.word	0x0800a991
 800a984:	0800a997 	.word	0x0800a997
 800a988:	0800a991 	.word	0x0800a991
 800a98c:	0800a9a9 	.word	0x0800a9a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	73fb      	strb	r3, [r7, #15]
      break;
 800a994:	e02f      	b.n	800a9f6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d024      	beq.n	800a9ec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9a6:	e021      	b.n	800a9ec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a9b0:	d11e      	bne.n	800a9f0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a9b6:	e01b      	b.n	800a9f0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d902      	bls.n	800a9c4 <DMA_CheckFifoParam+0xb4>
 800a9be:	2b03      	cmp	r3, #3
 800a9c0:	d003      	beq.n	800a9ca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a9c2:	e018      	b.n	800a9f6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a9c8:	e015      	b.n	800a9f6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00e      	beq.n	800a9f4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a9da:	e00b      	b.n	800a9f4 <DMA_CheckFifoParam+0xe4>
      break;
 800a9dc:	bf00      	nop
 800a9de:	e00a      	b.n	800a9f6 <DMA_CheckFifoParam+0xe6>
      break;
 800a9e0:	bf00      	nop
 800a9e2:	e008      	b.n	800a9f6 <DMA_CheckFifoParam+0xe6>
      break;
 800a9e4:	bf00      	nop
 800a9e6:	e006      	b.n	800a9f6 <DMA_CheckFifoParam+0xe6>
      break;
 800a9e8:	bf00      	nop
 800a9ea:	e004      	b.n	800a9f6 <DMA_CheckFifoParam+0xe6>
      break;
 800a9ec:	bf00      	nop
 800a9ee:	e002      	b.n	800a9f6 <DMA_CheckFifoParam+0xe6>
      break;   
 800a9f0:	bf00      	nop
 800a9f2:	e000      	b.n	800a9f6 <DMA_CheckFifoParam+0xe6>
      break;
 800a9f4:	bf00      	nop
    }
  } 
  
  return status; 
 800a9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b089      	sub	sp, #36	; 0x24
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800aa12:	2300      	movs	r3, #0
 800aa14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800aa16:	2300      	movs	r3, #0
 800aa18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800aa1e:	2300      	movs	r3, #0
 800aa20:	61fb      	str	r3, [r7, #28]
 800aa22:	e175      	b.n	800ad10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800aa24:	2201      	movs	r2, #1
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	fa02 f303 	lsl.w	r3, r2, r3
 800aa2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	4013      	ands	r3, r2
 800aa36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800aa38:	693a      	ldr	r2, [r7, #16]
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	f040 8164 	bne.w	800ad0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d00b      	beq.n	800aa62 <HAL_GPIO_Init+0x5e>
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	d007      	beq.n	800aa62 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aa56:	2b11      	cmp	r3, #17
 800aa58:	d003      	beq.n	800aa62 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	2b12      	cmp	r3, #18
 800aa60:	d130      	bne.n	800aac4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	2203      	movs	r2, #3
 800aa6e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa72:	43db      	mvns	r3, r3
 800aa74:	69ba      	ldr	r2, [r7, #24]
 800aa76:	4013      	ands	r3, r2
 800aa78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	68da      	ldr	r2, [r3, #12]
 800aa7e:	69fb      	ldr	r3, [r7, #28]
 800aa80:	005b      	lsls	r3, r3, #1
 800aa82:	fa02 f303 	lsl.w	r3, r2, r3
 800aa86:	69ba      	ldr	r2, [r7, #24]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	69ba      	ldr	r2, [r7, #24]
 800aa90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800aa98:	2201      	movs	r2, #1
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa0:	43db      	mvns	r3, r3
 800aaa2:	69ba      	ldr	r2, [r7, #24]
 800aaa4:	4013      	ands	r3, r2
 800aaa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	091b      	lsrs	r3, r3, #4
 800aaae:	f003 0201 	and.w	r2, r3, #1
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	fa02 f303 	lsl.w	r3, r2, r3
 800aab8:	69ba      	ldr	r2, [r7, #24]
 800aaba:	4313      	orrs	r3, r2
 800aabc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	69ba      	ldr	r2, [r7, #24]
 800aac2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	005b      	lsls	r3, r3, #1
 800aace:	2203      	movs	r2, #3
 800aad0:	fa02 f303 	lsl.w	r3, r2, r3
 800aad4:	43db      	mvns	r3, r3
 800aad6:	69ba      	ldr	r2, [r7, #24]
 800aad8:	4013      	ands	r3, r2
 800aada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	689a      	ldr	r2, [r3, #8]
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	005b      	lsls	r3, r3, #1
 800aae4:	fa02 f303 	lsl.w	r3, r2, r3
 800aae8:	69ba      	ldr	r2, [r7, #24]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	69ba      	ldr	r2, [r7, #24]
 800aaf2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d003      	beq.n	800ab04 <HAL_GPIO_Init+0x100>
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	2b12      	cmp	r3, #18
 800ab02:	d123      	bne.n	800ab4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	08da      	lsrs	r2, r3, #3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	3208      	adds	r2, #8
 800ab0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	f003 0307 	and.w	r3, r3, #7
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	220f      	movs	r2, #15
 800ab1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab20:	43db      	mvns	r3, r3
 800ab22:	69ba      	ldr	r2, [r7, #24]
 800ab24:	4013      	ands	r3, r2
 800ab26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	691a      	ldr	r2, [r3, #16]
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	f003 0307 	and.w	r3, r3, #7
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	fa02 f303 	lsl.w	r3, r2, r3
 800ab38:	69ba      	ldr	r2, [r7, #24]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	08da      	lsrs	r2, r3, #3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	3208      	adds	r2, #8
 800ab46:	69b9      	ldr	r1, [r7, #24]
 800ab48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	005b      	lsls	r3, r3, #1
 800ab56:	2203      	movs	r2, #3
 800ab58:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5c:	43db      	mvns	r3, r3
 800ab5e:	69ba      	ldr	r2, [r7, #24]
 800ab60:	4013      	ands	r3, r2
 800ab62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	f003 0203 	and.w	r2, r3, #3
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	005b      	lsls	r3, r3, #1
 800ab70:	fa02 f303 	lsl.w	r3, r2, r3
 800ab74:	69ba      	ldr	r2, [r7, #24]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 80be 	beq.w	800ad0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ab8e:	4b65      	ldr	r3, [pc, #404]	; (800ad24 <HAL_GPIO_Init+0x320>)
 800ab90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab92:	4a64      	ldr	r2, [pc, #400]	; (800ad24 <HAL_GPIO_Init+0x320>)
 800ab94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab98:	6453      	str	r3, [r2, #68]	; 0x44
 800ab9a:	4b62      	ldr	r3, [pc, #392]	; (800ad24 <HAL_GPIO_Init+0x320>)
 800ab9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aba2:	60fb      	str	r3, [r7, #12]
 800aba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800aba6:	4a60      	ldr	r2, [pc, #384]	; (800ad28 <HAL_GPIO_Init+0x324>)
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	089b      	lsrs	r3, r3, #2
 800abac:	3302      	adds	r3, #2
 800abae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	f003 0303 	and.w	r3, r3, #3
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	220f      	movs	r2, #15
 800abbe:	fa02 f303 	lsl.w	r3, r2, r3
 800abc2:	43db      	mvns	r3, r3
 800abc4:	69ba      	ldr	r2, [r7, #24]
 800abc6:	4013      	ands	r3, r2
 800abc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a57      	ldr	r2, [pc, #348]	; (800ad2c <HAL_GPIO_Init+0x328>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d037      	beq.n	800ac42 <HAL_GPIO_Init+0x23e>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a56      	ldr	r2, [pc, #344]	; (800ad30 <HAL_GPIO_Init+0x32c>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d031      	beq.n	800ac3e <HAL_GPIO_Init+0x23a>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a55      	ldr	r2, [pc, #340]	; (800ad34 <HAL_GPIO_Init+0x330>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d02b      	beq.n	800ac3a <HAL_GPIO_Init+0x236>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a54      	ldr	r2, [pc, #336]	; (800ad38 <HAL_GPIO_Init+0x334>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d025      	beq.n	800ac36 <HAL_GPIO_Init+0x232>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a53      	ldr	r2, [pc, #332]	; (800ad3c <HAL_GPIO_Init+0x338>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d01f      	beq.n	800ac32 <HAL_GPIO_Init+0x22e>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a52      	ldr	r2, [pc, #328]	; (800ad40 <HAL_GPIO_Init+0x33c>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d019      	beq.n	800ac2e <HAL_GPIO_Init+0x22a>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a51      	ldr	r2, [pc, #324]	; (800ad44 <HAL_GPIO_Init+0x340>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d013      	beq.n	800ac2a <HAL_GPIO_Init+0x226>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4a50      	ldr	r2, [pc, #320]	; (800ad48 <HAL_GPIO_Init+0x344>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d00d      	beq.n	800ac26 <HAL_GPIO_Init+0x222>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a4f      	ldr	r2, [pc, #316]	; (800ad4c <HAL_GPIO_Init+0x348>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d007      	beq.n	800ac22 <HAL_GPIO_Init+0x21e>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a4e      	ldr	r2, [pc, #312]	; (800ad50 <HAL_GPIO_Init+0x34c>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d101      	bne.n	800ac1e <HAL_GPIO_Init+0x21a>
 800ac1a:	2309      	movs	r3, #9
 800ac1c:	e012      	b.n	800ac44 <HAL_GPIO_Init+0x240>
 800ac1e:	230a      	movs	r3, #10
 800ac20:	e010      	b.n	800ac44 <HAL_GPIO_Init+0x240>
 800ac22:	2308      	movs	r3, #8
 800ac24:	e00e      	b.n	800ac44 <HAL_GPIO_Init+0x240>
 800ac26:	2307      	movs	r3, #7
 800ac28:	e00c      	b.n	800ac44 <HAL_GPIO_Init+0x240>
 800ac2a:	2306      	movs	r3, #6
 800ac2c:	e00a      	b.n	800ac44 <HAL_GPIO_Init+0x240>
 800ac2e:	2305      	movs	r3, #5
 800ac30:	e008      	b.n	800ac44 <HAL_GPIO_Init+0x240>
 800ac32:	2304      	movs	r3, #4
 800ac34:	e006      	b.n	800ac44 <HAL_GPIO_Init+0x240>
 800ac36:	2303      	movs	r3, #3
 800ac38:	e004      	b.n	800ac44 <HAL_GPIO_Init+0x240>
 800ac3a:	2302      	movs	r3, #2
 800ac3c:	e002      	b.n	800ac44 <HAL_GPIO_Init+0x240>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e000      	b.n	800ac44 <HAL_GPIO_Init+0x240>
 800ac42:	2300      	movs	r3, #0
 800ac44:	69fa      	ldr	r2, [r7, #28]
 800ac46:	f002 0203 	and.w	r2, r2, #3
 800ac4a:	0092      	lsls	r2, r2, #2
 800ac4c:	4093      	lsls	r3, r2
 800ac4e:	69ba      	ldr	r2, [r7, #24]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800ac54:	4934      	ldr	r1, [pc, #208]	; (800ad28 <HAL_GPIO_Init+0x324>)
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	089b      	lsrs	r3, r3, #2
 800ac5a:	3302      	adds	r3, #2
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ac62:	4b3c      	ldr	r3, [pc, #240]	; (800ad54 <HAL_GPIO_Init+0x350>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	43db      	mvns	r3, r3
 800ac6c:	69ba      	ldr	r2, [r7, #24]
 800ac6e:	4013      	ands	r3, r2
 800ac70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d003      	beq.n	800ac86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800ac7e:	69ba      	ldr	r2, [r7, #24]
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ac86:	4a33      	ldr	r2, [pc, #204]	; (800ad54 <HAL_GPIO_Init+0x350>)
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ac8c:	4b31      	ldr	r3, [pc, #196]	; (800ad54 <HAL_GPIO_Init+0x350>)
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	43db      	mvns	r3, r3
 800ac96:	69ba      	ldr	r2, [r7, #24]
 800ac98:	4013      	ands	r3, r2
 800ac9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d003      	beq.n	800acb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800aca8:	69ba      	ldr	r2, [r7, #24]
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	4313      	orrs	r3, r2
 800acae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800acb0:	4a28      	ldr	r2, [pc, #160]	; (800ad54 <HAL_GPIO_Init+0x350>)
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800acb6:	4b27      	ldr	r3, [pc, #156]	; (800ad54 <HAL_GPIO_Init+0x350>)
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	43db      	mvns	r3, r3
 800acc0:	69ba      	ldr	r2, [r7, #24]
 800acc2:	4013      	ands	r3, r2
 800acc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d003      	beq.n	800acda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800acd2:	69ba      	ldr	r2, [r7, #24]
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800acda:	4a1e      	ldr	r2, [pc, #120]	; (800ad54 <HAL_GPIO_Init+0x350>)
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ace0:	4b1c      	ldr	r3, [pc, #112]	; (800ad54 <HAL_GPIO_Init+0x350>)
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	43db      	mvns	r3, r3
 800acea:	69ba      	ldr	r2, [r7, #24]
 800acec:	4013      	ands	r3, r2
 800acee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d003      	beq.n	800ad04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800acfc:	69ba      	ldr	r2, [r7, #24]
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ad04:	4a13      	ldr	r2, [pc, #76]	; (800ad54 <HAL_GPIO_Init+0x350>)
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	61fb      	str	r3, [r7, #28]
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	2b0f      	cmp	r3, #15
 800ad14:	f67f ae86 	bls.w	800aa24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800ad18:	bf00      	nop
 800ad1a:	3724      	adds	r7, #36	; 0x24
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr
 800ad24:	40023800 	.word	0x40023800
 800ad28:	40013800 	.word	0x40013800
 800ad2c:	40020000 	.word	0x40020000
 800ad30:	40020400 	.word	0x40020400
 800ad34:	40020800 	.word	0x40020800
 800ad38:	40020c00 	.word	0x40020c00
 800ad3c:	40021000 	.word	0x40021000
 800ad40:	40021400 	.word	0x40021400
 800ad44:	40021800 	.word	0x40021800
 800ad48:	40021c00 	.word	0x40021c00
 800ad4c:	40022000 	.word	0x40022000
 800ad50:	40022400 	.word	0x40022400
 800ad54:	40013c00 	.word	0x40013c00

0800ad58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	460b      	mov	r3, r1
 800ad62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	691a      	ldr	r2, [r3, #16]
 800ad68:	887b      	ldrh	r3, [r7, #2]
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d002      	beq.n	800ad76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ad70:	2301      	movs	r3, #1
 800ad72:	73fb      	strb	r3, [r7, #15]
 800ad74:	e001      	b.n	800ad7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ad76:	2300      	movs	r3, #0
 800ad78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3714      	adds	r7, #20
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	460b      	mov	r3, r1
 800ad92:	807b      	strh	r3, [r7, #2]
 800ad94:	4613      	mov	r3, r2
 800ad96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ad98:	787b      	ldrb	r3, [r7, #1]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d003      	beq.n	800ada6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ad9e:	887a      	ldrh	r2, [r7, #2]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800ada4:	e003      	b.n	800adae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800ada6:	887b      	ldrh	r3, [r7, #2]
 800ada8:	041a      	lsls	r2, r3, #16
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	619a      	str	r2, [r3, #24]
}
 800adae:	bf00      	nop
 800adb0:	370c      	adds	r7, #12
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800adba:	b480      	push	{r7}
 800adbc:	b083      	sub	sp, #12
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	460b      	mov	r3, r1
 800adc4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	695a      	ldr	r2, [r3, #20]
 800adca:	887b      	ldrh	r3, [r7, #2]
 800adcc:	4013      	ands	r3, r2
 800adce:	2b00      	cmp	r3, #0
 800add0:	d004      	beq.n	800addc <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800add2:	887b      	ldrh	r3, [r7, #2]
 800add4:	041a      	lsls	r2, r3, #16
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800adda:	e002      	b.n	800ade2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800addc:	887a      	ldrh	r2, [r7, #2]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	619a      	str	r2, [r3, #24]
}
 800ade2:	bf00      	nop
 800ade4:	370c      	adds	r7, #12
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
	...

0800adf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	4603      	mov	r3, r0
 800adf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800adfa:	4b08      	ldr	r3, [pc, #32]	; (800ae1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800adfc:	695a      	ldr	r2, [r3, #20]
 800adfe:	88fb      	ldrh	r3, [r7, #6]
 800ae00:	4013      	ands	r3, r2
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d006      	beq.n	800ae14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ae06:	4a05      	ldr	r2, [pc, #20]	; (800ae1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ae08:	88fb      	ldrh	r3, [r7, #6]
 800ae0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ae0c:	88fb      	ldrh	r3, [r7, #6]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f000 f806 	bl	800ae20 <HAL_GPIO_EXTI_Callback>
  }
}
 800ae14:	bf00      	nop
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	40013c00 	.word	0x40013c00

0800ae20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	4603      	mov	r3, r0
 800ae28:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800ae2a:	bf00      	nop
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
	...

0800ae38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d101      	bne.n	800ae4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	e07f      	b.n	800af4a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d106      	bne.n	800ae64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7fd f9e6 	bl	8008230 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2224      	movs	r2, #36	; 0x24
 800ae68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f022 0201 	bic.w	r2, r2, #1
 800ae7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	685a      	ldr	r2, [r3, #4]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ae88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	689a      	ldr	r2, [r3, #8]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ae98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d107      	bne.n	800aeb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	689a      	ldr	r2, [r3, #8]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aeae:	609a      	str	r2, [r3, #8]
 800aeb0:	e006      	b.n	800aec0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	689a      	ldr	r2, [r3, #8]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800aebe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d104      	bne.n	800aed2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aed0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	6859      	ldr	r1, [r3, #4]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	4b1d      	ldr	r3, [pc, #116]	; (800af54 <HAL_I2C_Init+0x11c>)
 800aede:	430b      	orrs	r3, r1
 800aee0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	68da      	ldr	r2, [r3, #12]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aef0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	691a      	ldr	r2, [r3, #16]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	695b      	ldr	r3, [r3, #20]
 800aefa:	ea42 0103 	orr.w	r1, r2, r3
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	699b      	ldr	r3, [r3, #24]
 800af02:	021a      	lsls	r2, r3, #8
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	430a      	orrs	r2, r1
 800af0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	69d9      	ldr	r1, [r3, #28]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a1a      	ldr	r2, [r3, #32]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	430a      	orrs	r2, r1
 800af1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f042 0201 	orr.w	r2, r2, #1
 800af2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2220      	movs	r2, #32
 800af36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2200      	movs	r2, #0
 800af3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	02008000 	.word	0x02008000

0800af58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af02      	add	r7, sp, #8
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	607a      	str	r2, [r7, #4]
 800af62:	461a      	mov	r2, r3
 800af64:	460b      	mov	r3, r1
 800af66:	817b      	strh	r3, [r7, #10]
 800af68:	4613      	mov	r3, r2
 800af6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af72:	b2db      	uxtb	r3, r3
 800af74:	2b20      	cmp	r3, #32
 800af76:	f040 80da 	bne.w	800b12e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af80:	2b01      	cmp	r3, #1
 800af82:	d101      	bne.n	800af88 <HAL_I2C_Master_Transmit+0x30>
 800af84:	2302      	movs	r3, #2
 800af86:	e0d3      	b.n	800b130 <HAL_I2C_Master_Transmit+0x1d8>
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800af90:	f7fe fa74 	bl	800947c <HAL_GetTick>
 800af94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	9300      	str	r3, [sp, #0]
 800af9a:	2319      	movs	r3, #25
 800af9c:	2201      	movs	r2, #1
 800af9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f000 fdc4 	bl	800bb30 <I2C_WaitOnFlagUntilTimeout>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d001      	beq.n	800afb2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	e0be      	b.n	800b130 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2221      	movs	r2, #33	; 0x21
 800afb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2210      	movs	r2, #16
 800afbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	893a      	ldrh	r2, [r7, #8]
 800afd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2200      	movs	r2, #0
 800afd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afde:	b29b      	uxth	r3, r3
 800afe0:	2bff      	cmp	r3, #255	; 0xff
 800afe2:	d90e      	bls.n	800b002 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	22ff      	movs	r2, #255	; 0xff
 800afe8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afee:	b2da      	uxtb	r2, r3
 800aff0:	8979      	ldrh	r1, [r7, #10]
 800aff2:	4b51      	ldr	r3, [pc, #324]	; (800b138 <HAL_I2C_Master_Transmit+0x1e0>)
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f000 ff26 	bl	800be4c <I2C_TransferConfig>
 800b000:	e06c      	b.n	800b0dc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b006:	b29a      	uxth	r2, r3
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b010:	b2da      	uxtb	r2, r3
 800b012:	8979      	ldrh	r1, [r7, #10]
 800b014:	4b48      	ldr	r3, [pc, #288]	; (800b138 <HAL_I2C_Master_Transmit+0x1e0>)
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f000 ff15 	bl	800be4c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b022:	e05b      	b.n	800b0dc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b024:	697a      	ldr	r2, [r7, #20]
 800b026:	6a39      	ldr	r1, [r7, #32]
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f000 fdc1 	bl	800bbb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	e07b      	b.n	800b130 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03c:	781a      	ldrb	r2, [r3, #0]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b048:	1c5a      	adds	r2, r3, #1
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b052:	b29b      	uxth	r3, r3
 800b054:	3b01      	subs	r3, #1
 800b056:	b29a      	uxth	r2, r3
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b060:	3b01      	subs	r3, #1
 800b062:	b29a      	uxth	r2, r3
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d034      	beq.n	800b0dc <HAL_I2C_Master_Transmit+0x184>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b076:	2b00      	cmp	r3, #0
 800b078:	d130      	bne.n	800b0dc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	6a3b      	ldr	r3, [r7, #32]
 800b080:	2200      	movs	r2, #0
 800b082:	2180      	movs	r1, #128	; 0x80
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f000 fd53 	bl	800bb30 <I2C_WaitOnFlagUntilTimeout>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	e04d      	b.n	800b130 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b098:	b29b      	uxth	r3, r3
 800b09a:	2bff      	cmp	r3, #255	; 0xff
 800b09c:	d90e      	bls.n	800b0bc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	22ff      	movs	r2, #255	; 0xff
 800b0a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0a8:	b2da      	uxtb	r2, r3
 800b0aa:	8979      	ldrh	r1, [r7, #10]
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f000 fec9 	bl	800be4c <I2C_TransferConfig>
 800b0ba:	e00f      	b.n	800b0dc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0ca:	b2da      	uxtb	r2, r3
 800b0cc:	8979      	ldrh	r1, [r7, #10]
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f000 feb8 	bl	800be4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d19e      	bne.n	800b024 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0e6:	697a      	ldr	r2, [r7, #20]
 800b0e8:	6a39      	ldr	r1, [r7, #32]
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	f000 fda0 	bl	800bc30 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d001      	beq.n	800b0fa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e01a      	b.n	800b130 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2220      	movs	r2, #32
 800b100:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	6859      	ldr	r1, [r3, #4]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	4b0b      	ldr	r3, [pc, #44]	; (800b13c <HAL_I2C_Master_Transmit+0x1e4>)
 800b10e:	400b      	ands	r3, r1
 800b110:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2220      	movs	r2, #32
 800b116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b12a:	2300      	movs	r3, #0
 800b12c:	e000      	b.n	800b130 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b12e:	2302      	movs	r3, #2
  }
}
 800b130:	4618      	mov	r0, r3
 800b132:	3718      	adds	r7, #24
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	80002000 	.word	0x80002000
 800b13c:	fe00e800 	.word	0xfe00e800

0800b140 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b088      	sub	sp, #32
 800b144:	af02      	add	r7, sp, #8
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	607a      	str	r2, [r7, #4]
 800b14a:	461a      	mov	r2, r3
 800b14c:	460b      	mov	r3, r1
 800b14e:	817b      	strh	r3, [r7, #10]
 800b150:	4613      	mov	r3, r2
 800b152:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	2b20      	cmp	r3, #32
 800b15e:	f040 80db 	bne.w	800b318 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d101      	bne.n	800b170 <HAL_I2C_Master_Receive+0x30>
 800b16c:	2302      	movs	r3, #2
 800b16e:	e0d4      	b.n	800b31a <HAL_I2C_Master_Receive+0x1da>
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b178:	f7fe f980 	bl	800947c <HAL_GetTick>
 800b17c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	2319      	movs	r3, #25
 800b184:	2201      	movs	r2, #1
 800b186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b18a:	68f8      	ldr	r0, [r7, #12]
 800b18c:	f000 fcd0 	bl	800bb30 <I2C_WaitOnFlagUntilTimeout>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d001      	beq.n	800b19a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	e0bf      	b.n	800b31a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2222      	movs	r2, #34	; 0x22
 800b19e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2210      	movs	r2, #16
 800b1a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	893a      	ldrh	r2, [r7, #8]
 800b1ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	2bff      	cmp	r3, #255	; 0xff
 800b1ca:	d90e      	bls.n	800b1ea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	22ff      	movs	r2, #255	; 0xff
 800b1d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1d6:	b2da      	uxtb	r2, r3
 800b1d8:	8979      	ldrh	r1, [r7, #10]
 800b1da:	4b52      	ldr	r3, [pc, #328]	; (800b324 <HAL_I2C_Master_Receive+0x1e4>)
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f000 fe32 	bl	800be4c <I2C_TransferConfig>
 800b1e8:	e06d      	b.n	800b2c6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1ee:	b29a      	uxth	r2, r3
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	8979      	ldrh	r1, [r7, #10]
 800b1fc:	4b49      	ldr	r3, [pc, #292]	; (800b324 <HAL_I2C_Master_Receive+0x1e4>)
 800b1fe:	9300      	str	r3, [sp, #0]
 800b200:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	f000 fe21 	bl	800be4c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b20a:	e05c      	b.n	800b2c6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b20c:	697a      	ldr	r2, [r7, #20]
 800b20e:	6a39      	ldr	r1, [r7, #32]
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f000 fd49 	bl	800bca8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d001      	beq.n	800b220 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	e07c      	b.n	800b31a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22a:	b2d2      	uxtb	r2, r2
 800b22c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b232:	1c5a      	adds	r2, r3, #1
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b23c:	3b01      	subs	r3, #1
 800b23e:	b29a      	uxth	r2, r3
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b248:	b29b      	uxth	r3, r3
 800b24a:	3b01      	subs	r3, #1
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b256:	b29b      	uxth	r3, r3
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d034      	beq.n	800b2c6 <HAL_I2C_Master_Receive+0x186>
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b260:	2b00      	cmp	r3, #0
 800b262:	d130      	bne.n	800b2c6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	9300      	str	r3, [sp, #0]
 800b268:	6a3b      	ldr	r3, [r7, #32]
 800b26a:	2200      	movs	r2, #0
 800b26c:	2180      	movs	r1, #128	; 0x80
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f000 fc5e 	bl	800bb30 <I2C_WaitOnFlagUntilTimeout>
 800b274:	4603      	mov	r3, r0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d001      	beq.n	800b27e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	e04d      	b.n	800b31a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b282:	b29b      	uxth	r3, r3
 800b284:	2bff      	cmp	r3, #255	; 0xff
 800b286:	d90e      	bls.n	800b2a6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	22ff      	movs	r2, #255	; 0xff
 800b28c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b292:	b2da      	uxtb	r2, r3
 800b294:	8979      	ldrh	r1, [r7, #10]
 800b296:	2300      	movs	r3, #0
 800b298:	9300      	str	r3, [sp, #0]
 800b29a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	f000 fdd4 	bl	800be4c <I2C_TransferConfig>
 800b2a4:	e00f      	b.n	800b2c6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2b4:	b2da      	uxtb	r2, r3
 800b2b6:	8979      	ldrh	r1, [r7, #10]
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f000 fdc3 	bl	800be4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d19d      	bne.n	800b20c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2d0:	697a      	ldr	r2, [r7, #20]
 800b2d2:	6a39      	ldr	r1, [r7, #32]
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f000 fcab 	bl	800bc30 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d001      	beq.n	800b2e4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e01a      	b.n	800b31a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	2220      	movs	r2, #32
 800b2ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	6859      	ldr	r1, [r3, #4]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	4b0c      	ldr	r3, [pc, #48]	; (800b328 <HAL_I2C_Master_Receive+0x1e8>)
 800b2f8:	400b      	ands	r3, r1
 800b2fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2220      	movs	r2, #32
 800b300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b314:	2300      	movs	r3, #0
 800b316:	e000      	b.n	800b31a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b318:	2302      	movs	r3, #2
  }
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3718      	adds	r7, #24
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	80002400 	.word	0x80002400
 800b328:	fe00e800 	.word	0xfe00e800

0800b32c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b088      	sub	sp, #32
 800b330:	af02      	add	r7, sp, #8
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	4608      	mov	r0, r1
 800b336:	4611      	mov	r1, r2
 800b338:	461a      	mov	r2, r3
 800b33a:	4603      	mov	r3, r0
 800b33c:	817b      	strh	r3, [r7, #10]
 800b33e:	460b      	mov	r3, r1
 800b340:	813b      	strh	r3, [r7, #8]
 800b342:	4613      	mov	r3, r2
 800b344:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	2b20      	cmp	r3, #32
 800b350:	f040 80f9 	bne.w	800b546 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b354:	6a3b      	ldr	r3, [r7, #32]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d002      	beq.n	800b360 <HAL_I2C_Mem_Write+0x34>
 800b35a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d105      	bne.n	800b36c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b366:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e0ed      	b.n	800b548 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b372:	2b01      	cmp	r3, #1
 800b374:	d101      	bne.n	800b37a <HAL_I2C_Mem_Write+0x4e>
 800b376:	2302      	movs	r3, #2
 800b378:	e0e6      	b.n	800b548 <HAL_I2C_Mem_Write+0x21c>
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2201      	movs	r2, #1
 800b37e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b382:	f7fe f87b 	bl	800947c <HAL_GetTick>
 800b386:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	2319      	movs	r3, #25
 800b38e:	2201      	movs	r2, #1
 800b390:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f000 fbcb 	bl	800bb30 <I2C_WaitOnFlagUntilTimeout>
 800b39a:	4603      	mov	r3, r0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d001      	beq.n	800b3a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e0d1      	b.n	800b548 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2221      	movs	r2, #33	; 0x21
 800b3a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2240      	movs	r2, #64	; 0x40
 800b3b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6a3a      	ldr	r2, [r7, #32]
 800b3be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b3c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b3cc:	88f8      	ldrh	r0, [r7, #6]
 800b3ce:	893a      	ldrh	r2, [r7, #8]
 800b3d0:	8979      	ldrh	r1, [r7, #10]
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	9301      	str	r3, [sp, #4]
 800b3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	4603      	mov	r3, r0
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f000 fadb 	bl	800b998 <I2C_RequestMemoryWrite>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d005      	beq.n	800b3f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e0a9      	b.n	800b548 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	2bff      	cmp	r3, #255	; 0xff
 800b3fc:	d90e      	bls.n	800b41c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	22ff      	movs	r2, #255	; 0xff
 800b402:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b408:	b2da      	uxtb	r2, r3
 800b40a:	8979      	ldrh	r1, [r7, #10]
 800b40c:	2300      	movs	r3, #0
 800b40e:	9300      	str	r3, [sp, #0]
 800b410:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	f000 fd19 	bl	800be4c <I2C_TransferConfig>
 800b41a:	e00f      	b.n	800b43c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b420:	b29a      	uxth	r2, r3
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b42a:	b2da      	uxtb	r2, r3
 800b42c:	8979      	ldrh	r1, [r7, #10]
 800b42e:	2300      	movs	r3, #0
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f000 fd08 	bl	800be4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b43c:	697a      	ldr	r2, [r7, #20]
 800b43e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f000 fbb5 	bl	800bbb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d001      	beq.n	800b450 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b44c:	2301      	movs	r3, #1
 800b44e:	e07b      	b.n	800b548 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b454:	781a      	ldrb	r2, [r3, #0]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b460:	1c5a      	adds	r2, r3, #1
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	3b01      	subs	r3, #1
 800b46e:	b29a      	uxth	r2, r3
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b478:	3b01      	subs	r3, #1
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b484:	b29b      	uxth	r3, r3
 800b486:	2b00      	cmp	r3, #0
 800b488:	d034      	beq.n	800b4f4 <HAL_I2C_Mem_Write+0x1c8>
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d130      	bne.n	800b4f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b498:	2200      	movs	r2, #0
 800b49a:	2180      	movs	r1, #128	; 0x80
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f000 fb47 	bl	800bb30 <I2C_WaitOnFlagUntilTimeout>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d001      	beq.n	800b4ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e04d      	b.n	800b548 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	2bff      	cmp	r3, #255	; 0xff
 800b4b4:	d90e      	bls.n	800b4d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	22ff      	movs	r2, #255	; 0xff
 800b4ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4c0:	b2da      	uxtb	r2, r3
 800b4c2:	8979      	ldrh	r1, [r7, #10]
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f000 fcbd 	bl	800be4c <I2C_TransferConfig>
 800b4d2:	e00f      	b.n	800b4f4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4e2:	b2da      	uxtb	r2, r3
 800b4e4:	8979      	ldrh	r1, [r7, #10]
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	f000 fcac 	bl	800be4c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d19e      	bne.n	800b43c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4fe:	697a      	ldr	r2, [r7, #20]
 800b500:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	f000 fb94 	bl	800bc30 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d001      	beq.n	800b512 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	e01a      	b.n	800b548 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2220      	movs	r2, #32
 800b518:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	6859      	ldr	r1, [r3, #4]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	4b0a      	ldr	r3, [pc, #40]	; (800b550 <HAL_I2C_Mem_Write+0x224>)
 800b526:	400b      	ands	r3, r1
 800b528:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2220      	movs	r2, #32
 800b52e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2200      	movs	r2, #0
 800b536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2200      	movs	r2, #0
 800b53e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b542:	2300      	movs	r3, #0
 800b544:	e000      	b.n	800b548 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b546:	2302      	movs	r3, #2
  }
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	fe00e800 	.word	0xfe00e800

0800b554 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b088      	sub	sp, #32
 800b558:	af02      	add	r7, sp, #8
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	4608      	mov	r0, r1
 800b55e:	4611      	mov	r1, r2
 800b560:	461a      	mov	r2, r3
 800b562:	4603      	mov	r3, r0
 800b564:	817b      	strh	r3, [r7, #10]
 800b566:	460b      	mov	r3, r1
 800b568:	813b      	strh	r3, [r7, #8]
 800b56a:	4613      	mov	r3, r2
 800b56c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b574:	b2db      	uxtb	r3, r3
 800b576:	2b20      	cmp	r3, #32
 800b578:	f040 80fd 	bne.w	800b776 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b57c:	6a3b      	ldr	r3, [r7, #32]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d002      	beq.n	800b588 <HAL_I2C_Mem_Read+0x34>
 800b582:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b584:	2b00      	cmp	r3, #0
 800b586:	d105      	bne.n	800b594 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b58e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	e0f1      	b.n	800b778 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d101      	bne.n	800b5a2 <HAL_I2C_Mem_Read+0x4e>
 800b59e:	2302      	movs	r3, #2
 800b5a0:	e0ea      	b.n	800b778 <HAL_I2C_Mem_Read+0x224>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b5aa:	f7fd ff67 	bl	800947c <HAL_GetTick>
 800b5ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	2319      	movs	r3, #25
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f000 fab7 	bl	800bb30 <I2C_WaitOnFlagUntilTimeout>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d001      	beq.n	800b5cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e0d5      	b.n	800b778 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2222      	movs	r2, #34	; 0x22
 800b5d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2240      	movs	r2, #64	; 0x40
 800b5d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6a3a      	ldr	r2, [r7, #32]
 800b5e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b5ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b5f4:	88f8      	ldrh	r0, [r7, #6]
 800b5f6:	893a      	ldrh	r2, [r7, #8]
 800b5f8:	8979      	ldrh	r1, [r7, #10]
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	9301      	str	r3, [sp, #4]
 800b5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	4603      	mov	r3, r0
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f000 fa1b 	bl	800ba40 <I2C_RequestMemoryRead>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d005      	beq.n	800b61c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2200      	movs	r2, #0
 800b614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b618:	2301      	movs	r3, #1
 800b61a:	e0ad      	b.n	800b778 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b620:	b29b      	uxth	r3, r3
 800b622:	2bff      	cmp	r3, #255	; 0xff
 800b624:	d90e      	bls.n	800b644 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	22ff      	movs	r2, #255	; 0xff
 800b62a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b630:	b2da      	uxtb	r2, r3
 800b632:	8979      	ldrh	r1, [r7, #10]
 800b634:	4b52      	ldr	r3, [pc, #328]	; (800b780 <HAL_I2C_Mem_Read+0x22c>)
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f000 fc05 	bl	800be4c <I2C_TransferConfig>
 800b642:	e00f      	b.n	800b664 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b648:	b29a      	uxth	r2, r3
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b652:	b2da      	uxtb	r2, r3
 800b654:	8979      	ldrh	r1, [r7, #10]
 800b656:	4b4a      	ldr	r3, [pc, #296]	; (800b780 <HAL_I2C_Mem_Read+0x22c>)
 800b658:	9300      	str	r3, [sp, #0]
 800b65a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	f000 fbf4 	bl	800be4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66a:	2200      	movs	r2, #0
 800b66c:	2104      	movs	r1, #4
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	f000 fa5e 	bl	800bb30 <I2C_WaitOnFlagUntilTimeout>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	e07c      	b.n	800b778 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b688:	b2d2      	uxtb	r2, r2
 800b68a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b690:	1c5a      	adds	r2, r3, #1
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b69a:	3b01      	subs	r3, #1
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	3b01      	subs	r3, #1
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d034      	beq.n	800b724 <HAL_I2C_Mem_Read+0x1d0>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d130      	bne.n	800b724 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	2180      	movs	r1, #128	; 0x80
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f000 fa2f 	bl	800bb30 <I2C_WaitOnFlagUntilTimeout>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d001      	beq.n	800b6dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	e04d      	b.n	800b778 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	2bff      	cmp	r3, #255	; 0xff
 800b6e4:	d90e      	bls.n	800b704 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	22ff      	movs	r2, #255	; 0xff
 800b6ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6f0:	b2da      	uxtb	r2, r3
 800b6f2:	8979      	ldrh	r1, [r7, #10]
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	9300      	str	r3, [sp, #0]
 800b6f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f000 fba5 	bl	800be4c <I2C_TransferConfig>
 800b702:	e00f      	b.n	800b724 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b708:	b29a      	uxth	r2, r3
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b712:	b2da      	uxtb	r2, r3
 800b714:	8979      	ldrh	r1, [r7, #10]
 800b716:	2300      	movs	r3, #0
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f000 fb94 	bl	800be4c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b728:	b29b      	uxth	r3, r3
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d19a      	bne.n	800b664 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b72e:	697a      	ldr	r2, [r7, #20]
 800b730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f000 fa7c 	bl	800bc30 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b738:	4603      	mov	r3, r0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d001      	beq.n	800b742 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b73e:	2301      	movs	r3, #1
 800b740:	e01a      	b.n	800b778 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2220      	movs	r2, #32
 800b748:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	6859      	ldr	r1, [r3, #4]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	4b0b      	ldr	r3, [pc, #44]	; (800b784 <HAL_I2C_Mem_Read+0x230>)
 800b756:	400b      	ands	r3, r1
 800b758:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2220      	movs	r2, #32
 800b75e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2200      	movs	r2, #0
 800b766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b772:	2300      	movs	r3, #0
 800b774:	e000      	b.n	800b778 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b776:	2302      	movs	r3, #2
  }
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3718      	adds	r7, #24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	80002400 	.word	0x80002400
 800b784:	fe00e800 	.word	0xfe00e800

0800b788 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b08a      	sub	sp, #40	; 0x28
 800b78c:	af02      	add	r7, sp, #8
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	607a      	str	r2, [r7, #4]
 800b792:	603b      	str	r3, [r7, #0]
 800b794:	460b      	mov	r3, r1
 800b796:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800b798:	2300      	movs	r3, #0
 800b79a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	2b20      	cmp	r3, #32
 800b7a6:	f040 80ef 	bne.w	800b988 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	699b      	ldr	r3, [r3, #24]
 800b7b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7b8:	d101      	bne.n	800b7be <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800b7ba:	2302      	movs	r3, #2
 800b7bc:	e0e5      	b.n	800b98a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d101      	bne.n	800b7cc <HAL_I2C_IsDeviceReady+0x44>
 800b7c8:	2302      	movs	r3, #2
 800b7ca:	e0de      	b.n	800b98a <HAL_I2C_IsDeviceReady+0x202>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2224      	movs	r2, #36	; 0x24
 800b7d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d105      	bne.n	800b7f6 <HAL_I2C_IsDeviceReady+0x6e>
 800b7ea:	897b      	ldrh	r3, [r7, #10]
 800b7ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b7f0:	4b68      	ldr	r3, [pc, #416]	; (800b994 <HAL_I2C_IsDeviceReady+0x20c>)
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	e004      	b.n	800b800 <HAL_I2C_IsDeviceReady+0x78>
 800b7f6:	897b      	ldrh	r3, [r7, #10]
 800b7f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7fc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	6812      	ldr	r2, [r2, #0]
 800b804:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800b806:	f7fd fe39 	bl	800947c <HAL_GetTick>
 800b80a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	699b      	ldr	r3, [r3, #24]
 800b812:	f003 0320 	and.w	r3, r3, #32
 800b816:	2b20      	cmp	r3, #32
 800b818:	bf0c      	ite	eq
 800b81a:	2301      	moveq	r3, #1
 800b81c:	2300      	movne	r3, #0
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	699b      	ldr	r3, [r3, #24]
 800b828:	f003 0310 	and.w	r3, r3, #16
 800b82c:	2b10      	cmp	r3, #16
 800b82e:	bf0c      	ite	eq
 800b830:	2301      	moveq	r3, #1
 800b832:	2300      	movne	r3, #0
 800b834:	b2db      	uxtb	r3, r3
 800b836:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b838:	e034      	b.n	800b8a4 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b840:	d01a      	beq.n	800b878 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b842:	f7fd fe1b 	bl	800947c <HAL_GetTick>
 800b846:	4602      	mov	r2, r0
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	1ad3      	subs	r3, r2, r3
 800b84c:	683a      	ldr	r2, [r7, #0]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d302      	bcc.n	800b858 <HAL_I2C_IsDeviceReady+0xd0>
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d10f      	bne.n	800b878 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2220      	movs	r2, #32
 800b85c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b864:	f043 0220 	orr.w	r2, r3, #32
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	e088      	b.n	800b98a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	699b      	ldr	r3, [r3, #24]
 800b87e:	f003 0320 	and.w	r3, r3, #32
 800b882:	2b20      	cmp	r3, #32
 800b884:	bf0c      	ite	eq
 800b886:	2301      	moveq	r3, #1
 800b888:	2300      	movne	r3, #0
 800b88a:	b2db      	uxtb	r3, r3
 800b88c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	699b      	ldr	r3, [r3, #24]
 800b894:	f003 0310 	and.w	r3, r3, #16
 800b898:	2b10      	cmp	r3, #16
 800b89a:	bf0c      	ite	eq
 800b89c:	2301      	moveq	r3, #1
 800b89e:	2300      	movne	r3, #0
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b8a4:	7ffb      	ldrb	r3, [r7, #31]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d102      	bne.n	800b8b0 <HAL_I2C_IsDeviceReady+0x128>
 800b8aa:	7fbb      	ldrb	r3, [r7, #30]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d0c4      	beq.n	800b83a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	699b      	ldr	r3, [r3, #24]
 800b8b6:	f003 0310 	and.w	r3, r3, #16
 800b8ba:	2b10      	cmp	r3, #16
 800b8bc:	d01a      	beq.n	800b8f4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b8be:	69bb      	ldr	r3, [r7, #24]
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	2120      	movs	r1, #32
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f000 f931 	bl	800bb30 <I2C_WaitOnFlagUntilTimeout>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e058      	b.n	800b98a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2220      	movs	r2, #32
 800b8de:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2220      	movs	r2, #32
 800b8e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	e04a      	b.n	800b98a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	2120      	movs	r1, #32
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f000 f916 	bl	800bb30 <I2C_WaitOnFlagUntilTimeout>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	d001      	beq.n	800b90e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800b90a:	2301      	movs	r3, #1
 800b90c:	e03d      	b.n	800b98a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2210      	movs	r2, #16
 800b914:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2220      	movs	r2, #32
 800b91c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	429a      	cmp	r2, r3
 800b924:	d118      	bne.n	800b958 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b934:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	2200      	movs	r2, #0
 800b93e:	2120      	movs	r1, #32
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f000 f8f5 	bl	800bb30 <I2C_WaitOnFlagUntilTimeout>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d001      	beq.n	800b950 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	e01c      	b.n	800b98a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2220      	movs	r2, #32
 800b956:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	3301      	adds	r3, #1
 800b95c:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	429a      	cmp	r2, r3
 800b964:	f63f af3d 	bhi.w	800b7e2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2220      	movs	r2, #32
 800b96c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b974:	f043 0220 	orr.w	r2, r3, #32
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b984:	2301      	movs	r3, #1
 800b986:	e000      	b.n	800b98a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800b988:	2302      	movs	r3, #2
  }
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3720      	adds	r7, #32
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	02002000 	.word	0x02002000

0800b998 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b086      	sub	sp, #24
 800b99c:	af02      	add	r7, sp, #8
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	4608      	mov	r0, r1
 800b9a2:	4611      	mov	r1, r2
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	817b      	strh	r3, [r7, #10]
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	813b      	strh	r3, [r7, #8]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b9b2:	88fb      	ldrh	r3, [r7, #6]
 800b9b4:	b2da      	uxtb	r2, r3
 800b9b6:	8979      	ldrh	r1, [r7, #10]
 800b9b8:	4b20      	ldr	r3, [pc, #128]	; (800ba3c <I2C_RequestMemoryWrite+0xa4>)
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f000 fa43 	bl	800be4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b9c6:	69fa      	ldr	r2, [r7, #28]
 800b9c8:	69b9      	ldr	r1, [r7, #24]
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f000 f8f0 	bl	800bbb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d001      	beq.n	800b9da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e02c      	b.n	800ba34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b9da:	88fb      	ldrh	r3, [r7, #6]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d105      	bne.n	800b9ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b9e0:	893b      	ldrh	r3, [r7, #8]
 800b9e2:	b2da      	uxtb	r2, r3
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	629a      	str	r2, [r3, #40]	; 0x28
 800b9ea:	e015      	b.n	800ba18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b9ec:	893b      	ldrh	r3, [r7, #8]
 800b9ee:	0a1b      	lsrs	r3, r3, #8
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	b2da      	uxtb	r2, r3
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b9fa:	69fa      	ldr	r2, [r7, #28]
 800b9fc:	69b9      	ldr	r1, [r7, #24]
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f000 f8d6 	bl	800bbb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d001      	beq.n	800ba0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e012      	b.n	800ba34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ba0e:	893b      	ldrh	r3, [r7, #8]
 800ba10:	b2da      	uxtb	r2, r3
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	9300      	str	r3, [sp, #0]
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	2180      	movs	r1, #128	; 0x80
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f000 f884 	bl	800bb30 <I2C_WaitOnFlagUntilTimeout>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d001      	beq.n	800ba32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e000      	b.n	800ba34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	80002000 	.word	0x80002000

0800ba40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b086      	sub	sp, #24
 800ba44:	af02      	add	r7, sp, #8
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	4608      	mov	r0, r1
 800ba4a:	4611      	mov	r1, r2
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	4603      	mov	r3, r0
 800ba50:	817b      	strh	r3, [r7, #10]
 800ba52:	460b      	mov	r3, r1
 800ba54:	813b      	strh	r3, [r7, #8]
 800ba56:	4613      	mov	r3, r2
 800ba58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ba5a:	88fb      	ldrh	r3, [r7, #6]
 800ba5c:	b2da      	uxtb	r2, r3
 800ba5e:	8979      	ldrh	r1, [r7, #10]
 800ba60:	4b20      	ldr	r3, [pc, #128]	; (800bae4 <I2C_RequestMemoryRead+0xa4>)
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	2300      	movs	r3, #0
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f000 f9f0 	bl	800be4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba6c:	69fa      	ldr	r2, [r7, #28]
 800ba6e:	69b9      	ldr	r1, [r7, #24]
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f000 f89d 	bl	800bbb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e02c      	b.n	800bada <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ba80:	88fb      	ldrh	r3, [r7, #6]
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d105      	bne.n	800ba92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ba86:	893b      	ldrh	r3, [r7, #8]
 800ba88:	b2da      	uxtb	r2, r3
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	629a      	str	r2, [r3, #40]	; 0x28
 800ba90:	e015      	b.n	800babe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ba92:	893b      	ldrh	r3, [r7, #8]
 800ba94:	0a1b      	lsrs	r3, r3, #8
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	b2da      	uxtb	r2, r3
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800baa0:	69fa      	ldr	r2, [r7, #28]
 800baa2:	69b9      	ldr	r1, [r7, #24]
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f000 f883 	bl	800bbb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d001      	beq.n	800bab4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	e012      	b.n	800bada <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bab4:	893b      	ldrh	r3, [r7, #8]
 800bab6:	b2da      	uxtb	r2, r3
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	9300      	str	r3, [sp, #0]
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	2200      	movs	r2, #0
 800bac6:	2140      	movs	r1, #64	; 0x40
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f000 f831 	bl	800bb30 <I2C_WaitOnFlagUntilTimeout>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d001      	beq.n	800bad8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	e000      	b.n	800bada <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	80002000 	.word	0x80002000

0800bae8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	f003 0302 	and.w	r3, r3, #2
 800bafa:	2b02      	cmp	r3, #2
 800bafc:	d103      	bne.n	800bb06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2200      	movs	r2, #0
 800bb04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	f003 0301 	and.w	r3, r3, #1
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d007      	beq.n	800bb24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	699a      	ldr	r2, [r3, #24]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f042 0201 	orr.w	r2, r2, #1
 800bb22:	619a      	str	r2, [r3, #24]
  }
}
 800bb24:	bf00      	nop
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	603b      	str	r3, [r7, #0]
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb40:	e022      	b.n	800bb88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb48:	d01e      	beq.n	800bb88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb4a:	f7fd fc97 	bl	800947c <HAL_GetTick>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	683a      	ldr	r2, [r7, #0]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d302      	bcc.n	800bb60 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d113      	bne.n	800bb88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb64:	f043 0220 	orr.w	r2, r3, #32
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2220      	movs	r2, #32
 800bb70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	e00f      	b.n	800bba8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	699a      	ldr	r2, [r3, #24]
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	4013      	ands	r3, r2
 800bb92:	68ba      	ldr	r2, [r7, #8]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	bf0c      	ite	eq
 800bb98:	2301      	moveq	r3, #1
 800bb9a:	2300      	movne	r3, #0
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	461a      	mov	r2, r3
 800bba0:	79fb      	ldrb	r3, [r7, #7]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d0cd      	beq.n	800bb42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bba6:	2300      	movs	r3, #0
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bbbc:	e02c      	b.n	800bc18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	68b9      	ldr	r1, [r7, #8]
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	f000 f8dc 	bl	800bd80 <I2C_IsAcknowledgeFailed>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d001      	beq.n	800bbd2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e02a      	b.n	800bc28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd8:	d01e      	beq.n	800bc18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbda:	f7fd fc4f 	bl	800947c <HAL_GetTick>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d302      	bcc.n	800bbf0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d113      	bne.n	800bc18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbf4:	f043 0220 	orr.w	r2, r3, #32
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2220      	movs	r2, #32
 800bc00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2200      	movs	r2, #0
 800bc08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bc14:	2301      	movs	r3, #1
 800bc16:	e007      	b.n	800bc28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	699b      	ldr	r3, [r3, #24]
 800bc1e:	f003 0302 	and.w	r3, r3, #2
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	d1cb      	bne.n	800bbbe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc3c:	e028      	b.n	800bc90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	68b9      	ldr	r1, [r7, #8]
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f000 f89c 	bl	800bd80 <I2C_IsAcknowledgeFailed>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d001      	beq.n	800bc52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e026      	b.n	800bca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc52:	f7fd fc13 	bl	800947c <HAL_GetTick>
 800bc56:	4602      	mov	r2, r0
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	68ba      	ldr	r2, [r7, #8]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d302      	bcc.n	800bc68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d113      	bne.n	800bc90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc6c:	f043 0220 	orr.w	r2, r3, #32
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2220      	movs	r2, #32
 800bc78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2200      	movs	r2, #0
 800bc88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e007      	b.n	800bca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	f003 0320 	and.w	r3, r3, #32
 800bc9a:	2b20      	cmp	r3, #32
 800bc9c:	d1cf      	bne.n	800bc3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bcb4:	e055      	b.n	800bd62 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	68b9      	ldr	r1, [r7, #8]
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f000 f860 	bl	800bd80 <I2C_IsAcknowledgeFailed>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d001      	beq.n	800bcca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e053      	b.n	800bd72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	699b      	ldr	r3, [r3, #24]
 800bcd0:	f003 0320 	and.w	r3, r3, #32
 800bcd4:	2b20      	cmp	r3, #32
 800bcd6:	d129      	bne.n	800bd2c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	699b      	ldr	r3, [r3, #24]
 800bcde:	f003 0304 	and.w	r3, r3, #4
 800bce2:	2b04      	cmp	r3, #4
 800bce4:	d105      	bne.n	800bcf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d001      	beq.n	800bcf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	e03f      	b.n	800bd72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2220      	movs	r2, #32
 800bcf8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	6859      	ldr	r1, [r3, #4]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	4b1d      	ldr	r3, [pc, #116]	; (800bd7c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800bd06:	400b      	ands	r3, r1
 800bd08:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2220      	movs	r2, #32
 800bd14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e022      	b.n	800bd72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd2c:	f7fd fba6 	bl	800947c <HAL_GetTick>
 800bd30:	4602      	mov	r2, r0
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	1ad3      	subs	r3, r2, r3
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d302      	bcc.n	800bd42 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10f      	bne.n	800bd62 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd46:	f043 0220 	orr.w	r2, r3, #32
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2220      	movs	r2, #32
 800bd52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e007      	b.n	800bd72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	699b      	ldr	r3, [r3, #24]
 800bd68:	f003 0304 	and.w	r3, r3, #4
 800bd6c:	2b04      	cmp	r3, #4
 800bd6e:	d1a2      	bne.n	800bcb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	fe00e800 	.word	0xfe00e800

0800bd80 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	699b      	ldr	r3, [r3, #24]
 800bd92:	f003 0310 	and.w	r3, r3, #16
 800bd96:	2b10      	cmp	r3, #16
 800bd98:	d151      	bne.n	800be3e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd9a:	e022      	b.n	800bde2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda2:	d01e      	beq.n	800bde2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bda4:	f7fd fb6a 	bl	800947c <HAL_GetTick>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	68ba      	ldr	r2, [r7, #8]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d302      	bcc.n	800bdba <I2C_IsAcknowledgeFailed+0x3a>
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d113      	bne.n	800bde2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdbe:	f043 0220 	orr.w	r2, r3, #32
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2220      	movs	r2, #32
 800bdca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	e02e      	b.n	800be40 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	699b      	ldr	r3, [r3, #24]
 800bde8:	f003 0320 	and.w	r3, r3, #32
 800bdec:	2b20      	cmp	r3, #32
 800bdee:	d1d5      	bne.n	800bd9c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2210      	movs	r2, #16
 800bdf6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2220      	movs	r2, #32
 800bdfe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f7ff fe71 	bl	800bae8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	6859      	ldr	r1, [r3, #4]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	4b0d      	ldr	r3, [pc, #52]	; (800be48 <I2C_IsAcknowledgeFailed+0xc8>)
 800be12:	400b      	ands	r3, r1
 800be14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be1a:	f043 0204 	orr.w	r2, r3, #4
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2220      	movs	r2, #32
 800be26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2200      	movs	r2, #0
 800be36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	e000      	b.n	800be40 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800be3e:	2300      	movs	r3, #0
}
 800be40:	4618      	mov	r0, r3
 800be42:	3710      	adds	r7, #16
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	fe00e800 	.word	0xfe00e800

0800be4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	607b      	str	r3, [r7, #4]
 800be56:	460b      	mov	r3, r1
 800be58:	817b      	strh	r3, [r7, #10]
 800be5a:	4613      	mov	r3, r2
 800be5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	685a      	ldr	r2, [r3, #4]
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	0d5b      	lsrs	r3, r3, #21
 800be68:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800be6c:	4b0d      	ldr	r3, [pc, #52]	; (800bea4 <I2C_TransferConfig+0x58>)
 800be6e:	430b      	orrs	r3, r1
 800be70:	43db      	mvns	r3, r3
 800be72:	ea02 0103 	and.w	r1, r2, r3
 800be76:	897b      	ldrh	r3, [r7, #10]
 800be78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800be7c:	7a7b      	ldrb	r3, [r7, #9]
 800be7e:	041b      	lsls	r3, r3, #16
 800be80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800be84:	431a      	orrs	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	431a      	orrs	r2, r3
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	431a      	orrs	r2, r3
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	430a      	orrs	r2, r1
 800be94:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800be96:	bf00      	nop
 800be98:	3714      	adds	r7, #20
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	03ff63ff 	.word	0x03ff63ff

0800bea8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b083      	sub	sp, #12
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	2b20      	cmp	r3, #32
 800bebc:	d138      	bne.n	800bf30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d101      	bne.n	800becc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bec8:	2302      	movs	r3, #2
 800beca:	e032      	b.n	800bf32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2201      	movs	r2, #1
 800bed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2224      	movs	r2, #36	; 0x24
 800bed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f022 0201 	bic.w	r2, r2, #1
 800beea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800befa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	6819      	ldr	r1, [r3, #0]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	683a      	ldr	r2, [r7, #0]
 800bf08:	430a      	orrs	r2, r1
 800bf0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f042 0201 	orr.w	r2, r2, #1
 800bf1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2220      	movs	r2, #32
 800bf20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	e000      	b.n	800bf32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bf30:	2302      	movs	r3, #2
  }
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	370c      	adds	r7, #12
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bf3e:	b480      	push	{r7}
 800bf40:	b085      	sub	sp, #20
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	2b20      	cmp	r3, #32
 800bf52:	d139      	bne.n	800bfc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d101      	bne.n	800bf62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bf5e:	2302      	movs	r3, #2
 800bf60:	e033      	b.n	800bfca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2201      	movs	r2, #1
 800bf66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2224      	movs	r2, #36	; 0x24
 800bf6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f022 0201 	bic.w	r2, r2, #1
 800bf80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bf90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	021b      	lsls	r3, r3, #8
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f042 0201 	orr.w	r2, r2, #1
 800bfb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2220      	movs	r2, #32
 800bfb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	e000      	b.n	800bfca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bfc8:	2302      	movs	r3, #2
  }
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3714      	adds	r7, #20
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr
	...

0800bfd8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bfe0:	4b0b      	ldr	r3, [pc, #44]	; (800c010 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800bfe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfe4:	4a0a      	ldr	r2, [pc, #40]	; (800c010 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800bfe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bfea:	6453      	str	r3, [r2, #68]	; 0x44
 800bfec:	4b08      	ldr	r3, [pc, #32]	; (800c010 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800bfee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bff4:	60fb      	str	r3, [r7, #12]
 800bff6:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 800bff8:	4b06      	ldr	r3, [pc, #24]	; (800c014 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800bffa:	685a      	ldr	r2, [r3, #4]
 800bffc:	4905      	ldr	r1, [pc, #20]	; (800c014 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4313      	orrs	r3, r2
 800c002:	604b      	str	r3, [r1, #4]
}
 800c004:	bf00      	nop
 800c006:	3714      	adds	r7, #20
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr
 800c010:	40023800 	.word	0x40023800
 800c014:	40013800 	.word	0x40013800

0800c018 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c01a:	b08f      	sub	sp, #60	; 0x3c
 800c01c:	af0a      	add	r7, sp, #40	; 0x28
 800c01e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d101      	bne.n	800c02a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c026:	2301      	movs	r3, #1
 800c028:	e116      	b.n	800c258 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c036:	b2db      	uxtb	r3, r3
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d106      	bne.n	800c04a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f7fc fc2f 	bl	80088a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2203      	movs	r2, #3
 800c04e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d102      	bne.n	800c064 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4618      	mov	r0, r3
 800c06a:	f003 feed 	bl	800fe48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	603b      	str	r3, [r7, #0]
 800c074:	687e      	ldr	r6, [r7, #4]
 800c076:	466d      	mov	r5, sp
 800c078:	f106 0410 	add.w	r4, r6, #16
 800c07c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c07e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c084:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c088:	e885 0003 	stmia.w	r5, {r0, r1}
 800c08c:	1d33      	adds	r3, r6, #4
 800c08e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c090:	6838      	ldr	r0, [r7, #0]
 800c092:	f003 fe81 	bl	800fd98 <USB_CoreInit>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d005      	beq.n	800c0a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2202      	movs	r2, #2
 800c0a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e0d7      	b.n	800c258 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2100      	movs	r1, #0
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f003 fedb 	bl	800fe6a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	73fb      	strb	r3, [r7, #15]
 800c0b8:	e04a      	b.n	800c150 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c0ba:	7bfa      	ldrb	r2, [r7, #15]
 800c0bc:	6879      	ldr	r1, [r7, #4]
 800c0be:	4613      	mov	r3, r2
 800c0c0:	00db      	lsls	r3, r3, #3
 800c0c2:	1a9b      	subs	r3, r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	440b      	add	r3, r1
 800c0c8:	333d      	adds	r3, #61	; 0x3d
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c0ce:	7bfa      	ldrb	r2, [r7, #15]
 800c0d0:	6879      	ldr	r1, [r7, #4]
 800c0d2:	4613      	mov	r3, r2
 800c0d4:	00db      	lsls	r3, r3, #3
 800c0d6:	1a9b      	subs	r3, r3, r2
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	440b      	add	r3, r1
 800c0dc:	333c      	adds	r3, #60	; 0x3c
 800c0de:	7bfa      	ldrb	r2, [r7, #15]
 800c0e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c0e2:	7bfa      	ldrb	r2, [r7, #15]
 800c0e4:	7bfb      	ldrb	r3, [r7, #15]
 800c0e6:	b298      	uxth	r0, r3
 800c0e8:	6879      	ldr	r1, [r7, #4]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	00db      	lsls	r3, r3, #3
 800c0ee:	1a9b      	subs	r3, r3, r2
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	440b      	add	r3, r1
 800c0f4:	3342      	adds	r3, #66	; 0x42
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c0fa:	7bfa      	ldrb	r2, [r7, #15]
 800c0fc:	6879      	ldr	r1, [r7, #4]
 800c0fe:	4613      	mov	r3, r2
 800c100:	00db      	lsls	r3, r3, #3
 800c102:	1a9b      	subs	r3, r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	440b      	add	r3, r1
 800c108:	333f      	adds	r3, #63	; 0x3f
 800c10a:	2200      	movs	r2, #0
 800c10c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c10e:	7bfa      	ldrb	r2, [r7, #15]
 800c110:	6879      	ldr	r1, [r7, #4]
 800c112:	4613      	mov	r3, r2
 800c114:	00db      	lsls	r3, r3, #3
 800c116:	1a9b      	subs	r3, r3, r2
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	440b      	add	r3, r1
 800c11c:	3344      	adds	r3, #68	; 0x44
 800c11e:	2200      	movs	r2, #0
 800c120:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c122:	7bfa      	ldrb	r2, [r7, #15]
 800c124:	6879      	ldr	r1, [r7, #4]
 800c126:	4613      	mov	r3, r2
 800c128:	00db      	lsls	r3, r3, #3
 800c12a:	1a9b      	subs	r3, r3, r2
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	440b      	add	r3, r1
 800c130:	3348      	adds	r3, #72	; 0x48
 800c132:	2200      	movs	r2, #0
 800c134:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c136:	7bfa      	ldrb	r2, [r7, #15]
 800c138:	6879      	ldr	r1, [r7, #4]
 800c13a:	4613      	mov	r3, r2
 800c13c:	00db      	lsls	r3, r3, #3
 800c13e:	1a9b      	subs	r3, r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	440b      	add	r3, r1
 800c144:	3350      	adds	r3, #80	; 0x50
 800c146:	2200      	movs	r2, #0
 800c148:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c14a:	7bfb      	ldrb	r3, [r7, #15]
 800c14c:	3301      	adds	r3, #1
 800c14e:	73fb      	strb	r3, [r7, #15]
 800c150:	7bfa      	ldrb	r2, [r7, #15]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	429a      	cmp	r2, r3
 800c158:	d3af      	bcc.n	800c0ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c15a:	2300      	movs	r3, #0
 800c15c:	73fb      	strb	r3, [r7, #15]
 800c15e:	e044      	b.n	800c1ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c160:	7bfa      	ldrb	r2, [r7, #15]
 800c162:	6879      	ldr	r1, [r7, #4]
 800c164:	4613      	mov	r3, r2
 800c166:	00db      	lsls	r3, r3, #3
 800c168:	1a9b      	subs	r3, r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	440b      	add	r3, r1
 800c16e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c172:	2200      	movs	r2, #0
 800c174:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c176:	7bfa      	ldrb	r2, [r7, #15]
 800c178:	6879      	ldr	r1, [r7, #4]
 800c17a:	4613      	mov	r3, r2
 800c17c:	00db      	lsls	r3, r3, #3
 800c17e:	1a9b      	subs	r3, r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	440b      	add	r3, r1
 800c184:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c188:	7bfa      	ldrb	r2, [r7, #15]
 800c18a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c18c:	7bfa      	ldrb	r2, [r7, #15]
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	4613      	mov	r3, r2
 800c192:	00db      	lsls	r3, r3, #3
 800c194:	1a9b      	subs	r3, r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	440b      	add	r3, r1
 800c19a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c19e:	2200      	movs	r2, #0
 800c1a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c1a2:	7bfa      	ldrb	r2, [r7, #15]
 800c1a4:	6879      	ldr	r1, [r7, #4]
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	00db      	lsls	r3, r3, #3
 800c1aa:	1a9b      	subs	r3, r3, r2
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	440b      	add	r3, r1
 800c1b0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c1b8:	7bfa      	ldrb	r2, [r7, #15]
 800c1ba:	6879      	ldr	r1, [r7, #4]
 800c1bc:	4613      	mov	r3, r2
 800c1be:	00db      	lsls	r3, r3, #3
 800c1c0:	1a9b      	subs	r3, r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	440b      	add	r3, r1
 800c1c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c1ce:	7bfa      	ldrb	r2, [r7, #15]
 800c1d0:	6879      	ldr	r1, [r7, #4]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	00db      	lsls	r3, r3, #3
 800c1d6:	1a9b      	subs	r3, r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	440b      	add	r3, r1
 800c1dc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c1e4:	7bfb      	ldrb	r3, [r7, #15]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	73fb      	strb	r3, [r7, #15]
 800c1ea:	7bfa      	ldrb	r2, [r7, #15]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d3b5      	bcc.n	800c160 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	603b      	str	r3, [r7, #0]
 800c1fa:	687e      	ldr	r6, [r7, #4]
 800c1fc:	466d      	mov	r5, sp
 800c1fe:	f106 0410 	add.w	r4, r6, #16
 800c202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c20a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c20e:	e885 0003 	stmia.w	r5, {r0, r1}
 800c212:	1d33      	adds	r3, r6, #4
 800c214:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c216:	6838      	ldr	r0, [r7, #0]
 800c218:	f003 fe52 	bl	800fec0 <USB_DevInit>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d005      	beq.n	800c22e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2202      	movs	r2, #2
 800c226:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c22a:	2301      	movs	r3, #1
 800c22c:	e014      	b.n	800c258 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2200      	movs	r2, #0
 800c232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2201      	movs	r2, #1
 800c23a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c242:	2b01      	cmp	r3, #1
 800c244:	d102      	bne.n	800c24c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 f80a 	bl	800c260 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4618      	mov	r0, r3
 800c252:	f004 f804 	bl	801025e <USB_DevDisconnect>

  return HAL_OK;
 800c256:	2300      	movs	r3, #0
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3714      	adds	r7, #20
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c260 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c260:	b480      	push	{r7}
 800c262:	b085      	sub	sp, #20
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2201      	movs	r2, #1
 800c272:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	699b      	ldr	r3, [r3, #24]
 800c282:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c28e:	4b05      	ldr	r3, [pc, #20]	; (800c2a4 <HAL_PCDEx_ActivateLPM+0x44>)
 800c290:	4313      	orrs	r3, r2
 800c292:	68fa      	ldr	r2, [r7, #12]
 800c294:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800c296:	2300      	movs	r3, #0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3714      	adds	r7, #20
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr
 800c2a4:	10000003 	.word	0x10000003

0800c2a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c2ac:	4b05      	ldr	r3, [pc, #20]	; (800c2c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a04      	ldr	r2, [pc, #16]	; (800c2c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c2b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2b6:	6013      	str	r3, [r2, #0]
}
 800c2b8:	bf00      	nop
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	40007000 	.word	0x40007000

0800c2c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b086      	sub	sp, #24
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d101      	bne.n	800c2de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e29b      	b.n	800c816 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f003 0301 	and.w	r3, r3, #1
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f000 8087 	beq.w	800c3fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c2ec:	4b96      	ldr	r3, [pc, #600]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	f003 030c 	and.w	r3, r3, #12
 800c2f4:	2b04      	cmp	r3, #4
 800c2f6:	d00c      	beq.n	800c312 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c2f8:	4b93      	ldr	r3, [pc, #588]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	f003 030c 	and.w	r3, r3, #12
 800c300:	2b08      	cmp	r3, #8
 800c302:	d112      	bne.n	800c32a <HAL_RCC_OscConfig+0x62>
 800c304:	4b90      	ldr	r3, [pc, #576]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c30c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c310:	d10b      	bne.n	800c32a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c312:	4b8d      	ldr	r3, [pc, #564]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d06c      	beq.n	800c3f8 <HAL_RCC_OscConfig+0x130>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d168      	bne.n	800c3f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	e275      	b.n	800c816 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c332:	d106      	bne.n	800c342 <HAL_RCC_OscConfig+0x7a>
 800c334:	4b84      	ldr	r3, [pc, #528]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a83      	ldr	r2, [pc, #524]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c33a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c33e:	6013      	str	r3, [r2, #0]
 800c340:	e02e      	b.n	800c3a0 <HAL_RCC_OscConfig+0xd8>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10c      	bne.n	800c364 <HAL_RCC_OscConfig+0x9c>
 800c34a:	4b7f      	ldr	r3, [pc, #508]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a7e      	ldr	r2, [pc, #504]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c354:	6013      	str	r3, [r2, #0]
 800c356:	4b7c      	ldr	r3, [pc, #496]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a7b      	ldr	r2, [pc, #492]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c35c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c360:	6013      	str	r3, [r2, #0]
 800c362:	e01d      	b.n	800c3a0 <HAL_RCC_OscConfig+0xd8>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c36c:	d10c      	bne.n	800c388 <HAL_RCC_OscConfig+0xc0>
 800c36e:	4b76      	ldr	r3, [pc, #472]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4a75      	ldr	r2, [pc, #468]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c378:	6013      	str	r3, [r2, #0]
 800c37a:	4b73      	ldr	r3, [pc, #460]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a72      	ldr	r2, [pc, #456]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c384:	6013      	str	r3, [r2, #0]
 800c386:	e00b      	b.n	800c3a0 <HAL_RCC_OscConfig+0xd8>
 800c388:	4b6f      	ldr	r3, [pc, #444]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a6e      	ldr	r2, [pc, #440]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c38e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c392:	6013      	str	r3, [r2, #0]
 800c394:	4b6c      	ldr	r3, [pc, #432]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a6b      	ldr	r2, [pc, #428]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c39a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c39e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d013      	beq.n	800c3d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3a8:	f7fd f868 	bl	800947c <HAL_GetTick>
 800c3ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c3ae:	e008      	b.n	800c3c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c3b0:	f7fd f864 	bl	800947c <HAL_GetTick>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	2b64      	cmp	r3, #100	; 0x64
 800c3bc:	d901      	bls.n	800c3c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c3be:	2303      	movs	r3, #3
 800c3c0:	e229      	b.n	800c816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c3c2:	4b61      	ldr	r3, [pc, #388]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d0f0      	beq.n	800c3b0 <HAL_RCC_OscConfig+0xe8>
 800c3ce:	e014      	b.n	800c3fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3d0:	f7fd f854 	bl	800947c <HAL_GetTick>
 800c3d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c3d6:	e008      	b.n	800c3ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c3d8:	f7fd f850 	bl	800947c <HAL_GetTick>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	1ad3      	subs	r3, r2, r3
 800c3e2:	2b64      	cmp	r3, #100	; 0x64
 800c3e4:	d901      	bls.n	800c3ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c3e6:	2303      	movs	r3, #3
 800c3e8:	e215      	b.n	800c816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c3ea:	4b57      	ldr	r3, [pc, #348]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1f0      	bne.n	800c3d8 <HAL_RCC_OscConfig+0x110>
 800c3f6:	e000      	b.n	800c3fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f003 0302 	and.w	r3, r3, #2
 800c402:	2b00      	cmp	r3, #0
 800c404:	d069      	beq.n	800c4da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c406:	4b50      	ldr	r3, [pc, #320]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c408:	689b      	ldr	r3, [r3, #8]
 800c40a:	f003 030c 	and.w	r3, r3, #12
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00b      	beq.n	800c42a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c412:	4b4d      	ldr	r3, [pc, #308]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	f003 030c 	and.w	r3, r3, #12
 800c41a:	2b08      	cmp	r3, #8
 800c41c:	d11c      	bne.n	800c458 <HAL_RCC_OscConfig+0x190>
 800c41e:	4b4a      	ldr	r3, [pc, #296]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c426:	2b00      	cmp	r3, #0
 800c428:	d116      	bne.n	800c458 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c42a:	4b47      	ldr	r3, [pc, #284]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f003 0302 	and.w	r3, r3, #2
 800c432:	2b00      	cmp	r3, #0
 800c434:	d005      	beq.n	800c442 <HAL_RCC_OscConfig+0x17a>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d001      	beq.n	800c442 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c43e:	2301      	movs	r3, #1
 800c440:	e1e9      	b.n	800c816 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c442:	4b41      	ldr	r3, [pc, #260]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	00db      	lsls	r3, r3, #3
 800c450:	493d      	ldr	r1, [pc, #244]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c452:	4313      	orrs	r3, r2
 800c454:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c456:	e040      	b.n	800c4da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d023      	beq.n	800c4a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c460:	4b39      	ldr	r3, [pc, #228]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a38      	ldr	r2, [pc, #224]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c466:	f043 0301 	orr.w	r3, r3, #1
 800c46a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c46c:	f7fd f806 	bl	800947c <HAL_GetTick>
 800c470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c472:	e008      	b.n	800c486 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c474:	f7fd f802 	bl	800947c <HAL_GetTick>
 800c478:	4602      	mov	r2, r0
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	1ad3      	subs	r3, r2, r3
 800c47e:	2b02      	cmp	r3, #2
 800c480:	d901      	bls.n	800c486 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c482:	2303      	movs	r3, #3
 800c484:	e1c7      	b.n	800c816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c486:	4b30      	ldr	r3, [pc, #192]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f003 0302 	and.w	r3, r3, #2
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d0f0      	beq.n	800c474 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c492:	4b2d      	ldr	r3, [pc, #180]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	691b      	ldr	r3, [r3, #16]
 800c49e:	00db      	lsls	r3, r3, #3
 800c4a0:	4929      	ldr	r1, [pc, #164]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	600b      	str	r3, [r1, #0]
 800c4a6:	e018      	b.n	800c4da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c4a8:	4b27      	ldr	r3, [pc, #156]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a26      	ldr	r2, [pc, #152]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c4ae:	f023 0301 	bic.w	r3, r3, #1
 800c4b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4b4:	f7fc ffe2 	bl	800947c <HAL_GetTick>
 800c4b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c4ba:	e008      	b.n	800c4ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c4bc:	f7fc ffde 	bl	800947c <HAL_GetTick>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	1ad3      	subs	r3, r2, r3
 800c4c6:	2b02      	cmp	r3, #2
 800c4c8:	d901      	bls.n	800c4ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c4ca:	2303      	movs	r3, #3
 800c4cc:	e1a3      	b.n	800c816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c4ce:	4b1e      	ldr	r3, [pc, #120]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f003 0302 	and.w	r3, r3, #2
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1f0      	bne.n	800c4bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f003 0308 	and.w	r3, r3, #8
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d038      	beq.n	800c558 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	695b      	ldr	r3, [r3, #20]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d019      	beq.n	800c522 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c4ee:	4b16      	ldr	r3, [pc, #88]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c4f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4f2:	4a15      	ldr	r2, [pc, #84]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c4f4:	f043 0301 	orr.w	r3, r3, #1
 800c4f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4fa:	f7fc ffbf 	bl	800947c <HAL_GetTick>
 800c4fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c500:	e008      	b.n	800c514 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c502:	f7fc ffbb 	bl	800947c <HAL_GetTick>
 800c506:	4602      	mov	r2, r0
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	1ad3      	subs	r3, r2, r3
 800c50c:	2b02      	cmp	r3, #2
 800c50e:	d901      	bls.n	800c514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c510:	2303      	movs	r3, #3
 800c512:	e180      	b.n	800c816 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c514:	4b0c      	ldr	r3, [pc, #48]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c518:	f003 0302 	and.w	r3, r3, #2
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d0f0      	beq.n	800c502 <HAL_RCC_OscConfig+0x23a>
 800c520:	e01a      	b.n	800c558 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c522:	4b09      	ldr	r3, [pc, #36]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c526:	4a08      	ldr	r2, [pc, #32]	; (800c548 <HAL_RCC_OscConfig+0x280>)
 800c528:	f023 0301 	bic.w	r3, r3, #1
 800c52c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c52e:	f7fc ffa5 	bl	800947c <HAL_GetTick>
 800c532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c534:	e00a      	b.n	800c54c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c536:	f7fc ffa1 	bl	800947c <HAL_GetTick>
 800c53a:	4602      	mov	r2, r0
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	1ad3      	subs	r3, r2, r3
 800c540:	2b02      	cmp	r3, #2
 800c542:	d903      	bls.n	800c54c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c544:	2303      	movs	r3, #3
 800c546:	e166      	b.n	800c816 <HAL_RCC_OscConfig+0x54e>
 800c548:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c54c:	4b92      	ldr	r3, [pc, #584]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c54e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c550:	f003 0302 	and.w	r3, r3, #2
 800c554:	2b00      	cmp	r3, #0
 800c556:	d1ee      	bne.n	800c536 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f003 0304 	and.w	r3, r3, #4
 800c560:	2b00      	cmp	r3, #0
 800c562:	f000 80a4 	beq.w	800c6ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c566:	4b8c      	ldr	r3, [pc, #560]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c56a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d10d      	bne.n	800c58e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c572:	4b89      	ldr	r3, [pc, #548]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c576:	4a88      	ldr	r2, [pc, #544]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c57c:	6413      	str	r3, [r2, #64]	; 0x40
 800c57e:	4b86      	ldr	r3, [pc, #536]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c586:	60bb      	str	r3, [r7, #8]
 800c588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c58a:	2301      	movs	r3, #1
 800c58c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c58e:	4b83      	ldr	r3, [pc, #524]	; (800c79c <HAL_RCC_OscConfig+0x4d4>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c596:	2b00      	cmp	r3, #0
 800c598:	d118      	bne.n	800c5cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c59a:	4b80      	ldr	r3, [pc, #512]	; (800c79c <HAL_RCC_OscConfig+0x4d4>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a7f      	ldr	r2, [pc, #508]	; (800c79c <HAL_RCC_OscConfig+0x4d4>)
 800c5a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c5a6:	f7fc ff69 	bl	800947c <HAL_GetTick>
 800c5aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c5ac:	e008      	b.n	800c5c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c5ae:	f7fc ff65 	bl	800947c <HAL_GetTick>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	1ad3      	subs	r3, r2, r3
 800c5b8:	2b64      	cmp	r3, #100	; 0x64
 800c5ba:	d901      	bls.n	800c5c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c5bc:	2303      	movs	r3, #3
 800c5be:	e12a      	b.n	800c816 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c5c0:	4b76      	ldr	r3, [pc, #472]	; (800c79c <HAL_RCC_OscConfig+0x4d4>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d0f0      	beq.n	800c5ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d106      	bne.n	800c5e2 <HAL_RCC_OscConfig+0x31a>
 800c5d4:	4b70      	ldr	r3, [pc, #448]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c5d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5d8:	4a6f      	ldr	r2, [pc, #444]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c5da:	f043 0301 	orr.w	r3, r3, #1
 800c5de:	6713      	str	r3, [r2, #112]	; 0x70
 800c5e0:	e02d      	b.n	800c63e <HAL_RCC_OscConfig+0x376>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d10c      	bne.n	800c604 <HAL_RCC_OscConfig+0x33c>
 800c5ea:	4b6b      	ldr	r3, [pc, #428]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c5ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ee:	4a6a      	ldr	r2, [pc, #424]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c5f0:	f023 0301 	bic.w	r3, r3, #1
 800c5f4:	6713      	str	r3, [r2, #112]	; 0x70
 800c5f6:	4b68      	ldr	r3, [pc, #416]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5fa:	4a67      	ldr	r2, [pc, #412]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c5fc:	f023 0304 	bic.w	r3, r3, #4
 800c600:	6713      	str	r3, [r2, #112]	; 0x70
 800c602:	e01c      	b.n	800c63e <HAL_RCC_OscConfig+0x376>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	2b05      	cmp	r3, #5
 800c60a:	d10c      	bne.n	800c626 <HAL_RCC_OscConfig+0x35e>
 800c60c:	4b62      	ldr	r3, [pc, #392]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c60e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c610:	4a61      	ldr	r2, [pc, #388]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c612:	f043 0304 	orr.w	r3, r3, #4
 800c616:	6713      	str	r3, [r2, #112]	; 0x70
 800c618:	4b5f      	ldr	r3, [pc, #380]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c61c:	4a5e      	ldr	r2, [pc, #376]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c61e:	f043 0301 	orr.w	r3, r3, #1
 800c622:	6713      	str	r3, [r2, #112]	; 0x70
 800c624:	e00b      	b.n	800c63e <HAL_RCC_OscConfig+0x376>
 800c626:	4b5c      	ldr	r3, [pc, #368]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c62a:	4a5b      	ldr	r2, [pc, #364]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c62c:	f023 0301 	bic.w	r3, r3, #1
 800c630:	6713      	str	r3, [r2, #112]	; 0x70
 800c632:	4b59      	ldr	r3, [pc, #356]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c636:	4a58      	ldr	r2, [pc, #352]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c638:	f023 0304 	bic.w	r3, r3, #4
 800c63c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	689b      	ldr	r3, [r3, #8]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d015      	beq.n	800c672 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c646:	f7fc ff19 	bl	800947c <HAL_GetTick>
 800c64a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c64c:	e00a      	b.n	800c664 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c64e:	f7fc ff15 	bl	800947c <HAL_GetTick>
 800c652:	4602      	mov	r2, r0
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	1ad3      	subs	r3, r2, r3
 800c658:	f241 3288 	movw	r2, #5000	; 0x1388
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d901      	bls.n	800c664 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c660:	2303      	movs	r3, #3
 800c662:	e0d8      	b.n	800c816 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c664:	4b4c      	ldr	r3, [pc, #304]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c668:	f003 0302 	and.w	r3, r3, #2
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d0ee      	beq.n	800c64e <HAL_RCC_OscConfig+0x386>
 800c670:	e014      	b.n	800c69c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c672:	f7fc ff03 	bl	800947c <HAL_GetTick>
 800c676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c678:	e00a      	b.n	800c690 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c67a:	f7fc feff 	bl	800947c <HAL_GetTick>
 800c67e:	4602      	mov	r2, r0
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	f241 3288 	movw	r2, #5000	; 0x1388
 800c688:	4293      	cmp	r3, r2
 800c68a:	d901      	bls.n	800c690 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c68c:	2303      	movs	r3, #3
 800c68e:	e0c2      	b.n	800c816 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c690:	4b41      	ldr	r3, [pc, #260]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c694:	f003 0302 	and.w	r3, r3, #2
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d1ee      	bne.n	800c67a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c69c:	7dfb      	ldrb	r3, [r7, #23]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d105      	bne.n	800c6ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c6a2:	4b3d      	ldr	r3, [pc, #244]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a6:	4a3c      	ldr	r2, [pc, #240]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c6a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	699b      	ldr	r3, [r3, #24]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	f000 80ae 	beq.w	800c814 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c6b8:	4b37      	ldr	r3, [pc, #220]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	f003 030c 	and.w	r3, r3, #12
 800c6c0:	2b08      	cmp	r3, #8
 800c6c2:	d06d      	beq.n	800c7a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	699b      	ldr	r3, [r3, #24]
 800c6c8:	2b02      	cmp	r3, #2
 800c6ca:	d14b      	bne.n	800c764 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c6cc:	4b32      	ldr	r3, [pc, #200]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a31      	ldr	r2, [pc, #196]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c6d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c6d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6d8:	f7fc fed0 	bl	800947c <HAL_GetTick>
 800c6dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c6de:	e008      	b.n	800c6f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c6e0:	f7fc fecc 	bl	800947c <HAL_GetTick>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	2b02      	cmp	r3, #2
 800c6ec:	d901      	bls.n	800c6f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c6ee:	2303      	movs	r3, #3
 800c6f0:	e091      	b.n	800c816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c6f2:	4b29      	ldr	r3, [pc, #164]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d1f0      	bne.n	800c6e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	69da      	ldr	r2, [r3, #28]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a1b      	ldr	r3, [r3, #32]
 800c706:	431a      	orrs	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c70c:	019b      	lsls	r3, r3, #6
 800c70e:	431a      	orrs	r2, r3
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c714:	085b      	lsrs	r3, r3, #1
 800c716:	3b01      	subs	r3, #1
 800c718:	041b      	lsls	r3, r3, #16
 800c71a:	431a      	orrs	r2, r3
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c720:	061b      	lsls	r3, r3, #24
 800c722:	431a      	orrs	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c728:	071b      	lsls	r3, r3, #28
 800c72a:	491b      	ldr	r1, [pc, #108]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c72c:	4313      	orrs	r3, r2
 800c72e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c730:	4b19      	ldr	r3, [pc, #100]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a18      	ldr	r2, [pc, #96]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c73a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c73c:	f7fc fe9e 	bl	800947c <HAL_GetTick>
 800c740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c742:	e008      	b.n	800c756 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c744:	f7fc fe9a 	bl	800947c <HAL_GetTick>
 800c748:	4602      	mov	r2, r0
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	1ad3      	subs	r3, r2, r3
 800c74e:	2b02      	cmp	r3, #2
 800c750:	d901      	bls.n	800c756 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800c752:	2303      	movs	r3, #3
 800c754:	e05f      	b.n	800c816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c756:	4b10      	ldr	r3, [pc, #64]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d0f0      	beq.n	800c744 <HAL_RCC_OscConfig+0x47c>
 800c762:	e057      	b.n	800c814 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c764:	4b0c      	ldr	r3, [pc, #48]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a0b      	ldr	r2, [pc, #44]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c76a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c76e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c770:	f7fc fe84 	bl	800947c <HAL_GetTick>
 800c774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c776:	e008      	b.n	800c78a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c778:	f7fc fe80 	bl	800947c <HAL_GetTick>
 800c77c:	4602      	mov	r2, r0
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	1ad3      	subs	r3, r2, r3
 800c782:	2b02      	cmp	r3, #2
 800c784:	d901      	bls.n	800c78a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800c786:	2303      	movs	r3, #3
 800c788:	e045      	b.n	800c816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c78a:	4b03      	ldr	r3, [pc, #12]	; (800c798 <HAL_RCC_OscConfig+0x4d0>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c792:	2b00      	cmp	r3, #0
 800c794:	d1f0      	bne.n	800c778 <HAL_RCC_OscConfig+0x4b0>
 800c796:	e03d      	b.n	800c814 <HAL_RCC_OscConfig+0x54c>
 800c798:	40023800 	.word	0x40023800
 800c79c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c7a0:	4b1f      	ldr	r3, [pc, #124]	; (800c820 <HAL_RCC_OscConfig+0x558>)
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	699b      	ldr	r3, [r3, #24]
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d030      	beq.n	800c810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d129      	bne.n	800c810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d122      	bne.n	800c810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c7d0:	4013      	ands	r3, r2
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c7d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d119      	bne.n	800c810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e6:	085b      	lsrs	r3, r3, #1
 800c7e8:	3b01      	subs	r3, #1
 800c7ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d10f      	bne.n	800c810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d107      	bne.n	800c810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c80a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d001      	beq.n	800c814 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800c810:	2301      	movs	r3, #1
 800c812:	e000      	b.n	800c816 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800c814:	2300      	movs	r3, #0
}
 800c816:	4618      	mov	r0, r3
 800c818:	3718      	adds	r7, #24
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	40023800 	.word	0x40023800

0800c824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c82e:	2300      	movs	r3, #0
 800c830:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d101      	bne.n	800c83c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c838:	2301      	movs	r3, #1
 800c83a:	e0d0      	b.n	800c9de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c83c:	4b6a      	ldr	r3, [pc, #424]	; (800c9e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f003 030f 	and.w	r3, r3, #15
 800c844:	683a      	ldr	r2, [r7, #0]
 800c846:	429a      	cmp	r2, r3
 800c848:	d910      	bls.n	800c86c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c84a:	4b67      	ldr	r3, [pc, #412]	; (800c9e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f023 020f 	bic.w	r2, r3, #15
 800c852:	4965      	ldr	r1, [pc, #404]	; (800c9e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	4313      	orrs	r3, r2
 800c858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c85a:	4b63      	ldr	r3, [pc, #396]	; (800c9e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f003 030f 	and.w	r3, r3, #15
 800c862:	683a      	ldr	r2, [r7, #0]
 800c864:	429a      	cmp	r2, r3
 800c866:	d001      	beq.n	800c86c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	e0b8      	b.n	800c9de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f003 0302 	and.w	r3, r3, #2
 800c874:	2b00      	cmp	r3, #0
 800c876:	d020      	beq.n	800c8ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f003 0304 	and.w	r3, r3, #4
 800c880:	2b00      	cmp	r3, #0
 800c882:	d005      	beq.n	800c890 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c884:	4b59      	ldr	r3, [pc, #356]	; (800c9ec <HAL_RCC_ClockConfig+0x1c8>)
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	4a58      	ldr	r2, [pc, #352]	; (800c9ec <HAL_RCC_ClockConfig+0x1c8>)
 800c88a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c88e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f003 0308 	and.w	r3, r3, #8
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d005      	beq.n	800c8a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c89c:	4b53      	ldr	r3, [pc, #332]	; (800c9ec <HAL_RCC_ClockConfig+0x1c8>)
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	4a52      	ldr	r2, [pc, #328]	; (800c9ec <HAL_RCC_ClockConfig+0x1c8>)
 800c8a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c8a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c8a8:	4b50      	ldr	r3, [pc, #320]	; (800c9ec <HAL_RCC_ClockConfig+0x1c8>)
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	689b      	ldr	r3, [r3, #8]
 800c8b4:	494d      	ldr	r1, [pc, #308]	; (800c9ec <HAL_RCC_ClockConfig+0x1c8>)
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f003 0301 	and.w	r3, r3, #1
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d040      	beq.n	800c948 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d107      	bne.n	800c8de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c8ce:	4b47      	ldr	r3, [pc, #284]	; (800c9ec <HAL_RCC_ClockConfig+0x1c8>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d115      	bne.n	800c906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	e07f      	b.n	800c9de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	2b02      	cmp	r3, #2
 800c8e4:	d107      	bne.n	800c8f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c8e6:	4b41      	ldr	r3, [pc, #260]	; (800c9ec <HAL_RCC_ClockConfig+0x1c8>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d109      	bne.n	800c906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	e073      	b.n	800c9de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c8f6:	4b3d      	ldr	r3, [pc, #244]	; (800c9ec <HAL_RCC_ClockConfig+0x1c8>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f003 0302 	and.w	r3, r3, #2
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d101      	bne.n	800c906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c902:	2301      	movs	r3, #1
 800c904:	e06b      	b.n	800c9de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c906:	4b39      	ldr	r3, [pc, #228]	; (800c9ec <HAL_RCC_ClockConfig+0x1c8>)
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	f023 0203 	bic.w	r2, r3, #3
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	4936      	ldr	r1, [pc, #216]	; (800c9ec <HAL_RCC_ClockConfig+0x1c8>)
 800c914:	4313      	orrs	r3, r2
 800c916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c918:	f7fc fdb0 	bl	800947c <HAL_GetTick>
 800c91c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c91e:	e00a      	b.n	800c936 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c920:	f7fc fdac 	bl	800947c <HAL_GetTick>
 800c924:	4602      	mov	r2, r0
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	1ad3      	subs	r3, r2, r3
 800c92a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c92e:	4293      	cmp	r3, r2
 800c930:	d901      	bls.n	800c936 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800c932:	2303      	movs	r3, #3
 800c934:	e053      	b.n	800c9de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c936:	4b2d      	ldr	r3, [pc, #180]	; (800c9ec <HAL_RCC_ClockConfig+0x1c8>)
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	f003 020c 	and.w	r2, r3, #12
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	429a      	cmp	r2, r3
 800c946:	d1eb      	bne.n	800c920 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c948:	4b27      	ldr	r3, [pc, #156]	; (800c9e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f003 030f 	and.w	r3, r3, #15
 800c950:	683a      	ldr	r2, [r7, #0]
 800c952:	429a      	cmp	r2, r3
 800c954:	d210      	bcs.n	800c978 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c956:	4b24      	ldr	r3, [pc, #144]	; (800c9e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f023 020f 	bic.w	r2, r3, #15
 800c95e:	4922      	ldr	r1, [pc, #136]	; (800c9e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	4313      	orrs	r3, r2
 800c964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c966:	4b20      	ldr	r3, [pc, #128]	; (800c9e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f003 030f 	and.w	r3, r3, #15
 800c96e:	683a      	ldr	r2, [r7, #0]
 800c970:	429a      	cmp	r2, r3
 800c972:	d001      	beq.n	800c978 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800c974:	2301      	movs	r3, #1
 800c976:	e032      	b.n	800c9de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f003 0304 	and.w	r3, r3, #4
 800c980:	2b00      	cmp	r3, #0
 800c982:	d008      	beq.n	800c996 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c984:	4b19      	ldr	r3, [pc, #100]	; (800c9ec <HAL_RCC_ClockConfig+0x1c8>)
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	4916      	ldr	r1, [pc, #88]	; (800c9ec <HAL_RCC_ClockConfig+0x1c8>)
 800c992:	4313      	orrs	r3, r2
 800c994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f003 0308 	and.w	r3, r3, #8
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d009      	beq.n	800c9b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c9a2:	4b12      	ldr	r3, [pc, #72]	; (800c9ec <HAL_RCC_ClockConfig+0x1c8>)
 800c9a4:	689b      	ldr	r3, [r3, #8]
 800c9a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	691b      	ldr	r3, [r3, #16]
 800c9ae:	00db      	lsls	r3, r3, #3
 800c9b0:	490e      	ldr	r1, [pc, #56]	; (800c9ec <HAL_RCC_ClockConfig+0x1c8>)
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c9b6:	f000 f821 	bl	800c9fc <HAL_RCC_GetSysClockFreq>
 800c9ba:	4601      	mov	r1, r0
 800c9bc:	4b0b      	ldr	r3, [pc, #44]	; (800c9ec <HAL_RCC_ClockConfig+0x1c8>)
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	091b      	lsrs	r3, r3, #4
 800c9c2:	f003 030f 	and.w	r3, r3, #15
 800c9c6:	4a0a      	ldr	r2, [pc, #40]	; (800c9f0 <HAL_RCC_ClockConfig+0x1cc>)
 800c9c8:	5cd3      	ldrb	r3, [r2, r3]
 800c9ca:	fa21 f303 	lsr.w	r3, r1, r3
 800c9ce:	4a09      	ldr	r2, [pc, #36]	; (800c9f4 <HAL_RCC_ClockConfig+0x1d0>)
 800c9d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c9d2:	4b09      	ldr	r3, [pc, #36]	; (800c9f8 <HAL_RCC_ClockConfig+0x1d4>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fb ffb4 	bl	8008944 <HAL_InitTick>

  return HAL_OK;
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3710      	adds	r7, #16
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	40023c00 	.word	0x40023c00
 800c9ec:	40023800 	.word	0x40023800
 800c9f0:	08018134 	.word	0x08018134
 800c9f4:	20000198 	.word	0x20000198
 800c9f8:	2000019c 	.word	0x2000019c

0800c9fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9fe:	b085      	sub	sp, #20
 800ca00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800ca02:	2300      	movs	r3, #0
 800ca04:	607b      	str	r3, [r7, #4]
 800ca06:	2300      	movs	r3, #0
 800ca08:	60fb      	str	r3, [r7, #12]
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ca12:	4b50      	ldr	r3, [pc, #320]	; (800cb54 <HAL_RCC_GetSysClockFreq+0x158>)
 800ca14:	689b      	ldr	r3, [r3, #8]
 800ca16:	f003 030c 	and.w	r3, r3, #12
 800ca1a:	2b04      	cmp	r3, #4
 800ca1c:	d007      	beq.n	800ca2e <HAL_RCC_GetSysClockFreq+0x32>
 800ca1e:	2b08      	cmp	r3, #8
 800ca20:	d008      	beq.n	800ca34 <HAL_RCC_GetSysClockFreq+0x38>
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f040 808d 	bne.w	800cb42 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ca28:	4b4b      	ldr	r3, [pc, #300]	; (800cb58 <HAL_RCC_GetSysClockFreq+0x15c>)
 800ca2a:	60bb      	str	r3, [r7, #8]
      break;
 800ca2c:	e08c      	b.n	800cb48 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ca2e:	4b4b      	ldr	r3, [pc, #300]	; (800cb5c <HAL_RCC_GetSysClockFreq+0x160>)
 800ca30:	60bb      	str	r3, [r7, #8]
      break;
 800ca32:	e089      	b.n	800cb48 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ca34:	4b47      	ldr	r3, [pc, #284]	; (800cb54 <HAL_RCC_GetSysClockFreq+0x158>)
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca3c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ca3e:	4b45      	ldr	r3, [pc, #276]	; (800cb54 <HAL_RCC_GetSysClockFreq+0x158>)
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d023      	beq.n	800ca92 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ca4a:	4b42      	ldr	r3, [pc, #264]	; (800cb54 <HAL_RCC_GetSysClockFreq+0x158>)
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	099b      	lsrs	r3, r3, #6
 800ca50:	f04f 0400 	mov.w	r4, #0
 800ca54:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ca58:	f04f 0200 	mov.w	r2, #0
 800ca5c:	ea03 0501 	and.w	r5, r3, r1
 800ca60:	ea04 0602 	and.w	r6, r4, r2
 800ca64:	4a3d      	ldr	r2, [pc, #244]	; (800cb5c <HAL_RCC_GetSysClockFreq+0x160>)
 800ca66:	fb02 f106 	mul.w	r1, r2, r6
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	fb02 f205 	mul.w	r2, r2, r5
 800ca70:	440a      	add	r2, r1
 800ca72:	493a      	ldr	r1, [pc, #232]	; (800cb5c <HAL_RCC_GetSysClockFreq+0x160>)
 800ca74:	fba5 0101 	umull	r0, r1, r5, r1
 800ca78:	1853      	adds	r3, r2, r1
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f04f 0400 	mov.w	r4, #0
 800ca82:	461a      	mov	r2, r3
 800ca84:	4623      	mov	r3, r4
 800ca86:	f7f3 fc33 	bl	80002f0 <__aeabi_uldivmod>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	460c      	mov	r4, r1
 800ca8e:	60fb      	str	r3, [r7, #12]
 800ca90:	e049      	b.n	800cb26 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ca92:	4b30      	ldr	r3, [pc, #192]	; (800cb54 <HAL_RCC_GetSysClockFreq+0x158>)
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	099b      	lsrs	r3, r3, #6
 800ca98:	f04f 0400 	mov.w	r4, #0
 800ca9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800caa0:	f04f 0200 	mov.w	r2, #0
 800caa4:	ea03 0501 	and.w	r5, r3, r1
 800caa8:	ea04 0602 	and.w	r6, r4, r2
 800caac:	4629      	mov	r1, r5
 800caae:	4632      	mov	r2, r6
 800cab0:	f04f 0300 	mov.w	r3, #0
 800cab4:	f04f 0400 	mov.w	r4, #0
 800cab8:	0154      	lsls	r4, r2, #5
 800caba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800cabe:	014b      	lsls	r3, r1, #5
 800cac0:	4619      	mov	r1, r3
 800cac2:	4622      	mov	r2, r4
 800cac4:	1b49      	subs	r1, r1, r5
 800cac6:	eb62 0206 	sbc.w	r2, r2, r6
 800caca:	f04f 0300 	mov.w	r3, #0
 800cace:	f04f 0400 	mov.w	r4, #0
 800cad2:	0194      	lsls	r4, r2, #6
 800cad4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cad8:	018b      	lsls	r3, r1, #6
 800cada:	1a5b      	subs	r3, r3, r1
 800cadc:	eb64 0402 	sbc.w	r4, r4, r2
 800cae0:	f04f 0100 	mov.w	r1, #0
 800cae4:	f04f 0200 	mov.w	r2, #0
 800cae8:	00e2      	lsls	r2, r4, #3
 800caea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800caee:	00d9      	lsls	r1, r3, #3
 800caf0:	460b      	mov	r3, r1
 800caf2:	4614      	mov	r4, r2
 800caf4:	195b      	adds	r3, r3, r5
 800caf6:	eb44 0406 	adc.w	r4, r4, r6
 800cafa:	f04f 0100 	mov.w	r1, #0
 800cafe:	f04f 0200 	mov.w	r2, #0
 800cb02:	02a2      	lsls	r2, r4, #10
 800cb04:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800cb08:	0299      	lsls	r1, r3, #10
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	4614      	mov	r4, r2
 800cb0e:	4618      	mov	r0, r3
 800cb10:	4621      	mov	r1, r4
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f04f 0400 	mov.w	r4, #0
 800cb18:	461a      	mov	r2, r3
 800cb1a:	4623      	mov	r3, r4
 800cb1c:	f7f3 fbe8 	bl	80002f0 <__aeabi_uldivmod>
 800cb20:	4603      	mov	r3, r0
 800cb22:	460c      	mov	r4, r1
 800cb24:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800cb26:	4b0b      	ldr	r3, [pc, #44]	; (800cb54 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	0c1b      	lsrs	r3, r3, #16
 800cb2c:	f003 0303 	and.w	r3, r3, #3
 800cb30:	3301      	adds	r3, #1
 800cb32:	005b      	lsls	r3, r3, #1
 800cb34:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800cb36:	68fa      	ldr	r2, [r7, #12]
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb3e:	60bb      	str	r3, [r7, #8]
      break;
 800cb40:	e002      	b.n	800cb48 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cb42:	4b05      	ldr	r3, [pc, #20]	; (800cb58 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cb44:	60bb      	str	r3, [r7, #8]
      break;
 800cb46:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cb48:	68bb      	ldr	r3, [r7, #8]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3714      	adds	r7, #20
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb52:	bf00      	nop
 800cb54:	40023800 	.word	0x40023800
 800cb58:	00f42400 	.word	0x00f42400
 800cb5c:	017d7840 	.word	0x017d7840

0800cb60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cb60:	b480      	push	{r7}
 800cb62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cb64:	4b03      	ldr	r3, [pc, #12]	; (800cb74 <HAL_RCC_GetHCLKFreq+0x14>)
 800cb66:	681b      	ldr	r3, [r3, #0]
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	20000198 	.word	0x20000198

0800cb78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cb7c:	f7ff fff0 	bl	800cb60 <HAL_RCC_GetHCLKFreq>
 800cb80:	4601      	mov	r1, r0
 800cb82:	4b05      	ldr	r3, [pc, #20]	; (800cb98 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cb84:	689b      	ldr	r3, [r3, #8]
 800cb86:	0a9b      	lsrs	r3, r3, #10
 800cb88:	f003 0307 	and.w	r3, r3, #7
 800cb8c:	4a03      	ldr	r2, [pc, #12]	; (800cb9c <HAL_RCC_GetPCLK1Freq+0x24>)
 800cb8e:	5cd3      	ldrb	r3, [r2, r3]
 800cb90:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	40023800 	.word	0x40023800
 800cb9c:	08018144 	.word	0x08018144

0800cba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cba4:	f7ff ffdc 	bl	800cb60 <HAL_RCC_GetHCLKFreq>
 800cba8:	4601      	mov	r1, r0
 800cbaa:	4b05      	ldr	r3, [pc, #20]	; (800cbc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	0b5b      	lsrs	r3, r3, #13
 800cbb0:	f003 0307 	and.w	r3, r3, #7
 800cbb4:	4a03      	ldr	r2, [pc, #12]	; (800cbc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cbb6:	5cd3      	ldrb	r3, [r2, r3]
 800cbb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	40023800 	.word	0x40023800
 800cbc4:	08018144 	.word	0x08018144

0800cbc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	220f      	movs	r2, #15
 800cbd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cbd8:	4b12      	ldr	r3, [pc, #72]	; (800cc24 <HAL_RCC_GetClockConfig+0x5c>)
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	f003 0203 	and.w	r2, r3, #3
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cbe4:	4b0f      	ldr	r3, [pc, #60]	; (800cc24 <HAL_RCC_GetClockConfig+0x5c>)
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cbf0:	4b0c      	ldr	r3, [pc, #48]	; (800cc24 <HAL_RCC_GetClockConfig+0x5c>)
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cbfc:	4b09      	ldr	r3, [pc, #36]	; (800cc24 <HAL_RCC_GetClockConfig+0x5c>)
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	08db      	lsrs	r3, r3, #3
 800cc02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cc0a:	4b07      	ldr	r3, [pc, #28]	; (800cc28 <HAL_RCC_GetClockConfig+0x60>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f003 020f 	and.w	r2, r3, #15
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	601a      	str	r2, [r3, #0]
}
 800cc16:	bf00      	nop
 800cc18:	370c      	adds	r7, #12
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	40023800 	.word	0x40023800
 800cc28:	40023c00 	.word	0x40023c00

0800cc2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b088      	sub	sp, #32
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800cc34:	2300      	movs	r3, #0
 800cc36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800cc40:	2300      	movs	r3, #0
 800cc42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800cc44:	2300      	movs	r3, #0
 800cc46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f003 0301 	and.w	r3, r3, #1
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d012      	beq.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cc54:	4b69      	ldr	r3, [pc, #420]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	4a68      	ldr	r2, [pc, #416]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cc5e:	6093      	str	r3, [r2, #8]
 800cc60:	4b66      	ldr	r3, [pc, #408]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc62:	689a      	ldr	r2, [r3, #8]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc68:	4964      	ldr	r1, [pc, #400]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d101      	bne.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800cc76:	2301      	movs	r3, #1
 800cc78:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d017      	beq.n	800ccb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cc86:	4b5d      	ldr	r3, [pc, #372]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc94:	4959      	ldr	r1, [pc, #356]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc96:	4313      	orrs	r3, r2
 800cc98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cca4:	d101      	bne.n	800ccaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800cca6:	2301      	movs	r3, #1
 800cca8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d101      	bne.n	800ccb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d017      	beq.n	800ccf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ccc2:	4b4e      	ldr	r3, [pc, #312]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ccc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccd0:	494a      	ldr	r1, [pc, #296]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cce0:	d101      	bne.n	800cce6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800cce2:	2301      	movs	r3, #1
 800cce4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d101      	bne.n	800ccf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ccee:	2301      	movs	r3, #1
 800ccf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d001      	beq.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f003 0320 	and.w	r3, r3, #32
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f000 808b 	beq.w	800ce26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cd10:	4b3a      	ldr	r3, [pc, #232]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd14:	4a39      	ldr	r2, [pc, #228]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd1a:	6413      	str	r3, [r2, #64]	; 0x40
 800cd1c:	4b37      	ldr	r3, [pc, #220]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd24:	60bb      	str	r3, [r7, #8]
 800cd26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cd28:	4b35      	ldr	r3, [pc, #212]	; (800ce00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a34      	ldr	r2, [pc, #208]	; (800ce00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cd2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd34:	f7fc fba2 	bl	800947c <HAL_GetTick>
 800cd38:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cd3a:	e008      	b.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd3c:	f7fc fb9e 	bl	800947c <HAL_GetTick>
 800cd40:	4602      	mov	r2, r0
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	1ad3      	subs	r3, r2, r3
 800cd46:	2b64      	cmp	r3, #100	; 0x64
 800cd48:	d901      	bls.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800cd4a:	2303      	movs	r3, #3
 800cd4c:	e38d      	b.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cd4e:	4b2c      	ldr	r3, [pc, #176]	; (800ce00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d0f0      	beq.n	800cd3c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cd5a:	4b28      	ldr	r3, [pc, #160]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd62:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d035      	beq.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd72:	693a      	ldr	r2, [r7, #16]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d02e      	beq.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cd78:	4b20      	ldr	r3, [pc, #128]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd80:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cd82:	4b1e      	ldr	r3, [pc, #120]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd86:	4a1d      	ldr	r2, [pc, #116]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd8c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cd8e:	4b1b      	ldr	r3, [pc, #108]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd92:	4a1a      	ldr	r2, [pc, #104]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800cd9a:	4a18      	ldr	r2, [pc, #96]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cda0:	4b16      	ldr	r3, [pc, #88]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cda2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cda4:	f003 0301 	and.w	r3, r3, #1
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d114      	bne.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdac:	f7fc fb66 	bl	800947c <HAL_GetTick>
 800cdb0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cdb2:	e00a      	b.n	800cdca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cdb4:	f7fc fb62 	bl	800947c <HAL_GetTick>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	1ad3      	subs	r3, r2, r3
 800cdbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d901      	bls.n	800cdca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800cdc6:	2303      	movs	r3, #3
 800cdc8:	e34f      	b.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cdca:	4b0c      	ldr	r3, [pc, #48]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdce:	f003 0302 	and.w	r3, r3, #2
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d0ee      	beq.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cde2:	d111      	bne.n	800ce08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800cde4:	4b05      	ldr	r3, [pc, #20]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cde6:	689b      	ldr	r3, [r3, #8]
 800cde8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cdf0:	4b04      	ldr	r3, [pc, #16]	; (800ce04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800cdf2:	400b      	ands	r3, r1
 800cdf4:	4901      	ldr	r1, [pc, #4]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	608b      	str	r3, [r1, #8]
 800cdfa:	e00b      	b.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800cdfc:	40023800 	.word	0x40023800
 800ce00:	40007000 	.word	0x40007000
 800ce04:	0ffffcff 	.word	0x0ffffcff
 800ce08:	4bb3      	ldr	r3, [pc, #716]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	4ab2      	ldr	r2, [pc, #712]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ce0e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ce12:	6093      	str	r3, [r2, #8]
 800ce14:	4bb0      	ldr	r3, [pc, #704]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ce16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce20:	49ad      	ldr	r1, [pc, #692]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ce22:	4313      	orrs	r3, r2
 800ce24:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f003 0310 	and.w	r3, r3, #16
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d010      	beq.n	800ce54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ce32:	4ba9      	ldr	r3, [pc, #676]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ce34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce38:	4aa7      	ldr	r2, [pc, #668]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ce3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ce3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ce42:	4ba5      	ldr	r3, [pc, #660]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ce44:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce4c:	49a2      	ldr	r1, [pc, #648]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00a      	beq.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ce60:	4b9d      	ldr	r3, [pc, #628]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ce62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce6e:	499a      	ldr	r1, [pc, #616]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ce70:	4313      	orrs	r3, r2
 800ce72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00a      	beq.n	800ce98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ce82:	4b95      	ldr	r3, [pc, #596]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ce84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce90:	4991      	ldr	r1, [pc, #580]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ce92:	4313      	orrs	r3, r2
 800ce94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00a      	beq.n	800ceba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cea4:	4b8c      	ldr	r3, [pc, #560]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ceaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ceb2:	4989      	ldr	r1, [pc, #548]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00a      	beq.n	800cedc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cec6:	4b84      	ldr	r3, [pc, #528]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cecc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ced4:	4980      	ldr	r1, [pc, #512]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ced6:	4313      	orrs	r3, r2
 800ced8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d00a      	beq.n	800cefe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cee8:	4b7b      	ldr	r3, [pc, #492]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ceea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ceee:	f023 0203 	bic.w	r2, r3, #3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cef6:	4978      	ldr	r1, [pc, #480]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cef8:	4313      	orrs	r3, r2
 800cefa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00a      	beq.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cf0a:	4b73      	ldr	r3, [pc, #460]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf10:	f023 020c 	bic.w	r2, r3, #12
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf18:	496f      	ldr	r1, [pc, #444]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d00a      	beq.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cf2c:	4b6a      	ldr	r3, [pc, #424]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf3a:	4967      	ldr	r1, [pc, #412]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d00a      	beq.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cf4e:	4b62      	ldr	r3, [pc, #392]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf54:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf5c:	495e      	ldr	r1, [pc, #376]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00a      	beq.n	800cf86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800cf70:	4b59      	ldr	r3, [pc, #356]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf7e:	4956      	ldr	r1, [pc, #344]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf80:	4313      	orrs	r3, r2
 800cf82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d00a      	beq.n	800cfa8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800cf92:	4b51      	ldr	r3, [pc, #324]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfa0:	494d      	ldr	r1, [pc, #308]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00a      	beq.n	800cfca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800cfb4:	4b48      	ldr	r3, [pc, #288]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfc2:	4945      	ldr	r1, [pc, #276]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d00a      	beq.n	800cfec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800cfd6:	4b40      	ldr	r3, [pc, #256]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cfe4:	493c      	ldr	r1, [pc, #240]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d00a      	beq.n	800d00e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cff8:	4b37      	ldr	r3, [pc, #220]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cffe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d006:	4934      	ldr	r1, [pc, #208]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d008:	4313      	orrs	r3, r2
 800d00a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d016:	2b00      	cmp	r3, #0
 800d018:	d011      	beq.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d01a:	4b2f      	ldr	r3, [pc, #188]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d01c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d020:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d028:	492b      	ldr	r1, [pc, #172]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d02a:	4313      	orrs	r3, r2
 800d02c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d034:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d038:	d101      	bne.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d03a:	2301      	movs	r3, #1
 800d03c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f003 0308 	and.w	r3, r3, #8
 800d046:	2b00      	cmp	r3, #0
 800d048:	d001      	beq.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d04a:	2301      	movs	r3, #1
 800d04c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00a      	beq.n	800d070 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d05a:	4b1f      	ldr	r3, [pc, #124]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d05c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d060:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d068:	491b      	ldr	r1, [pc, #108]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d06a:	4313      	orrs	r3, r2
 800d06c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d00b      	beq.n	800d094 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d07c:	4b16      	ldr	r3, [pc, #88]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d07e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d082:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d08c:	4912      	ldr	r1, [pc, #72]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d08e:	4313      	orrs	r3, r2
 800d090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00b      	beq.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d0a0:	4b0d      	ldr	r3, [pc, #52]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0b0:	4909      	ldr	r1, [pc, #36]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00f      	beq.n	800d0e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d0c4:	4b04      	ldr	r3, [pc, #16]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0d4:	e002      	b.n	800d0dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800d0d6:	bf00      	nop
 800d0d8:	40023800 	.word	0x40023800
 800d0dc:	4985      	ldr	r1, [pc, #532]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d00b      	beq.n	800d108 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800d0f0:	4b80      	ldr	r3, [pc, #512]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d0f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d100:	497c      	ldr	r1, [pc, #496]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d102:	4313      	orrs	r3, r2
 800d104:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	d005      	beq.n	800d11a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d116:	f040 80d6 	bne.w	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d11a:	4b76      	ldr	r3, [pc, #472]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4a75      	ldr	r2, [pc, #468]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d120:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d126:	f7fc f9a9 	bl	800947c <HAL_GetTick>
 800d12a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d12c:	e008      	b.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d12e:	f7fc f9a5 	bl	800947c <HAL_GetTick>
 800d132:	4602      	mov	r2, r0
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	1ad3      	subs	r3, r2, r3
 800d138:	2b64      	cmp	r3, #100	; 0x64
 800d13a:	d901      	bls.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d13c:	2303      	movs	r3, #3
 800d13e:	e194      	b.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d140:	4b6c      	ldr	r3, [pc, #432]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d1f0      	bne.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f003 0301 	and.w	r3, r3, #1
 800d154:	2b00      	cmp	r3, #0
 800d156:	d021      	beq.n	800d19c <HAL_RCCEx_PeriphCLKConfig+0x570>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d11d      	bne.n	800d19c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d160:	4b64      	ldr	r3, [pc, #400]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d166:	0c1b      	lsrs	r3, r3, #16
 800d168:	f003 0303 	and.w	r3, r3, #3
 800d16c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d16e:	4b61      	ldr	r3, [pc, #388]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d174:	0e1b      	lsrs	r3, r3, #24
 800d176:	f003 030f 	and.w	r3, r3, #15
 800d17a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	019a      	lsls	r2, r3, #6
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	041b      	lsls	r3, r3, #16
 800d186:	431a      	orrs	r2, r3
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	061b      	lsls	r3, r3, #24
 800d18c:	431a      	orrs	r2, r3
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	689b      	ldr	r3, [r3, #8]
 800d192:	071b      	lsls	r3, r3, #28
 800d194:	4957      	ldr	r1, [pc, #348]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d196:	4313      	orrs	r3, r2
 800d198:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d004      	beq.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d1b0:	d00a      	beq.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d02e      	beq.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d1c6:	d129      	bne.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d1c8:	4b4a      	ldr	r3, [pc, #296]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d1ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1ce:	0c1b      	lsrs	r3, r3, #16
 800d1d0:	f003 0303 	and.w	r3, r3, #3
 800d1d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d1d6:	4b47      	ldr	r3, [pc, #284]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d1d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1dc:	0f1b      	lsrs	r3, r3, #28
 800d1de:	f003 0307 	and.w	r3, r3, #7
 800d1e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	019a      	lsls	r2, r3, #6
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	041b      	lsls	r3, r3, #16
 800d1ee:	431a      	orrs	r2, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	061b      	lsls	r3, r3, #24
 800d1f6:	431a      	orrs	r2, r3
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	071b      	lsls	r3, r3, #28
 800d1fc:	493d      	ldr	r1, [pc, #244]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d1fe:	4313      	orrs	r3, r2
 800d200:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d204:	4b3b      	ldr	r3, [pc, #236]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d20a:	f023 021f 	bic.w	r2, r3, #31
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d212:	3b01      	subs	r3, #1
 800d214:	4937      	ldr	r1, [pc, #220]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d216:	4313      	orrs	r3, r2
 800d218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d224:	2b00      	cmp	r3, #0
 800d226:	d01d      	beq.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d228:	4b32      	ldr	r3, [pc, #200]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d22a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d22e:	0e1b      	lsrs	r3, r3, #24
 800d230:	f003 030f 	and.w	r3, r3, #15
 800d234:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d236:	4b2f      	ldr	r3, [pc, #188]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d23c:	0f1b      	lsrs	r3, r3, #28
 800d23e:	f003 0307 	and.w	r3, r3, #7
 800d242:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	019a      	lsls	r2, r3, #6
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	041b      	lsls	r3, r3, #16
 800d250:	431a      	orrs	r2, r3
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	061b      	lsls	r3, r3, #24
 800d256:	431a      	orrs	r2, r3
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	071b      	lsls	r3, r3, #28
 800d25c:	4925      	ldr	r1, [pc, #148]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d25e:	4313      	orrs	r3, r2
 800d260:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d011      	beq.n	800d294 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	019a      	lsls	r2, r3, #6
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	691b      	ldr	r3, [r3, #16]
 800d27a:	041b      	lsls	r3, r3, #16
 800d27c:	431a      	orrs	r2, r3
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	68db      	ldr	r3, [r3, #12]
 800d282:	061b      	lsls	r3, r3, #24
 800d284:	431a      	orrs	r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	071b      	lsls	r3, r3, #28
 800d28c:	4919      	ldr	r1, [pc, #100]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d28e:	4313      	orrs	r3, r2
 800d290:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d294:	4b17      	ldr	r3, [pc, #92]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4a16      	ldr	r2, [pc, #88]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d29a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d29e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2a0:	f7fc f8ec 	bl	800947c <HAL_GetTick>
 800d2a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d2a6:	e008      	b.n	800d2ba <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d2a8:	f7fc f8e8 	bl	800947c <HAL_GetTick>
 800d2ac:	4602      	mov	r2, r0
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	2b64      	cmp	r3, #100	; 0x64
 800d2b4:	d901      	bls.n	800d2ba <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d2b6:	2303      	movs	r3, #3
 800d2b8:	e0d7      	b.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d2ba:	4b0e      	ldr	r3, [pc, #56]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d0f0      	beq.n	800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	f040 80cd 	bne.w	800d468 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d2ce:	4b09      	ldr	r3, [pc, #36]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4a08      	ldr	r2, [pc, #32]	; (800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2da:	f7fc f8cf 	bl	800947c <HAL_GetTick>
 800d2de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d2e0:	e00a      	b.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d2e2:	f7fc f8cb 	bl	800947c <HAL_GetTick>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	1ad3      	subs	r3, r2, r3
 800d2ec:	2b64      	cmp	r3, #100	; 0x64
 800d2ee:	d903      	bls.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d2f0:	2303      	movs	r3, #3
 800d2f2:	e0ba      	b.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800d2f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d2f8:	4b5e      	ldr	r3, [pc, #376]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d304:	d0ed      	beq.n	800d2e2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d003      	beq.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d316:	2b00      	cmp	r3, #0
 800d318:	d009      	beq.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d322:	2b00      	cmp	r3, #0
 800d324:	d02e      	beq.n	800d384 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d12a      	bne.n	800d384 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d32e:	4b51      	ldr	r3, [pc, #324]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d334:	0c1b      	lsrs	r3, r3, #16
 800d336:	f003 0303 	and.w	r3, r3, #3
 800d33a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d33c:	4b4d      	ldr	r3, [pc, #308]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d342:	0f1b      	lsrs	r3, r3, #28
 800d344:	f003 0307 	and.w	r3, r3, #7
 800d348:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	695b      	ldr	r3, [r3, #20]
 800d34e:	019a      	lsls	r2, r3, #6
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	041b      	lsls	r3, r3, #16
 800d354:	431a      	orrs	r2, r3
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	699b      	ldr	r3, [r3, #24]
 800d35a:	061b      	lsls	r3, r3, #24
 800d35c:	431a      	orrs	r2, r3
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	071b      	lsls	r3, r3, #28
 800d362:	4944      	ldr	r1, [pc, #272]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d364:	4313      	orrs	r3, r2
 800d366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d36a:	4b42      	ldr	r3, [pc, #264]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d36c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d370:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d378:	3b01      	subs	r3, #1
 800d37a:	021b      	lsls	r3, r3, #8
 800d37c:	493d      	ldr	r1, [pc, #244]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d37e:	4313      	orrs	r3, r2
 800d380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d022      	beq.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d398:	d11d      	bne.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d39a:	4b36      	ldr	r3, [pc, #216]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d39c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3a0:	0e1b      	lsrs	r3, r3, #24
 800d3a2:	f003 030f 	and.w	r3, r3, #15
 800d3a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d3a8:	4b32      	ldr	r3, [pc, #200]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d3aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3ae:	0f1b      	lsrs	r3, r3, #28
 800d3b0:	f003 0307 	and.w	r3, r3, #7
 800d3b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	695b      	ldr	r3, [r3, #20]
 800d3ba:	019a      	lsls	r2, r3, #6
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6a1b      	ldr	r3, [r3, #32]
 800d3c0:	041b      	lsls	r3, r3, #16
 800d3c2:	431a      	orrs	r2, r3
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	061b      	lsls	r3, r3, #24
 800d3c8:	431a      	orrs	r2, r3
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	071b      	lsls	r3, r3, #28
 800d3ce:	4929      	ldr	r1, [pc, #164]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f003 0308 	and.w	r3, r3, #8
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d028      	beq.n	800d434 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d3e2:	4b24      	ldr	r3, [pc, #144]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d3e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3e8:	0e1b      	lsrs	r3, r3, #24
 800d3ea:	f003 030f 	and.w	r3, r3, #15
 800d3ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d3f0:	4b20      	ldr	r3, [pc, #128]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d3f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3f6:	0c1b      	lsrs	r3, r3, #16
 800d3f8:	f003 0303 	and.w	r3, r3, #3
 800d3fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	695b      	ldr	r3, [r3, #20]
 800d402:	019a      	lsls	r2, r3, #6
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	041b      	lsls	r3, r3, #16
 800d408:	431a      	orrs	r2, r3
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	061b      	lsls	r3, r3, #24
 800d40e:	431a      	orrs	r2, r3
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	69db      	ldr	r3, [r3, #28]
 800d414:	071b      	lsls	r3, r3, #28
 800d416:	4917      	ldr	r1, [pc, #92]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d418:	4313      	orrs	r3, r2
 800d41a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d41e:	4b15      	ldr	r3, [pc, #84]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d424:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d42c:	4911      	ldr	r1, [pc, #68]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d42e:	4313      	orrs	r3, r2
 800d430:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d434:	4b0f      	ldr	r3, [pc, #60]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4a0e      	ldr	r2, [pc, #56]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d43a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d43e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d440:	f7fc f81c 	bl	800947c <HAL_GetTick>
 800d444:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d446:	e008      	b.n	800d45a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d448:	f7fc f818 	bl	800947c <HAL_GetTick>
 800d44c:	4602      	mov	r2, r0
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	1ad3      	subs	r3, r2, r3
 800d452:	2b64      	cmp	r3, #100	; 0x64
 800d454:	d901      	bls.n	800d45a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d456:	2303      	movs	r3, #3
 800d458:	e007      	b.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d45a:	4b06      	ldr	r3, [pc, #24]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d466:	d1ef      	bne.n	800d448 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800d468:	2300      	movs	r3, #0
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3720      	adds	r7, #32
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
 800d472:	bf00      	nop
 800d474:	40023800 	.word	0x40023800

0800d478 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d101      	bne.n	800d48a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800d486:	2301      	movs	r3, #1
 800d488:	e06b      	b.n	800d562 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	7f5b      	ldrb	r3, [r3, #29]
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	2b00      	cmp	r3, #0
 800d492:	d105      	bne.n	800d4a0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2200      	movs	r2, #0
 800d498:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f7fa ffc2 	bl	8008424 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2202      	movs	r2, #2
 800d4a4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	22ca      	movs	r2, #202	; 0xca
 800d4ac:	625a      	str	r2, [r3, #36]	; 0x24
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	2253      	movs	r2, #83	; 0x53
 800d4b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 f85a 	bl	800d570 <RTC_EnterInitMode>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d008      	beq.n	800d4d4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	22ff      	movs	r2, #255	; 0xff
 800d4c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2204      	movs	r2, #4
 800d4ce:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e046      	b.n	800d562 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	6899      	ldr	r1, [r3, #8]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	4b23      	ldr	r3, [pc, #140]	; (800d56c <HAL_RTC_Init+0xf4>)
 800d4e0:	400b      	ands	r3, r1
 800d4e2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	6899      	ldr	r1, [r3, #8]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	685a      	ldr	r2, [r3, #4]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	691b      	ldr	r3, [r3, #16]
 800d4f2:	431a      	orrs	r2, r3
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	695b      	ldr	r3, [r3, #20]
 800d4f8:	431a      	orrs	r2, r3
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	430a      	orrs	r2, r1
 800d500:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	687a      	ldr	r2, [r7, #4]
 800d508:	68d2      	ldr	r2, [r2, #12]
 800d50a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	6919      	ldr	r1, [r3, #16]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	041a      	lsls	r2, r3, #16
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	430a      	orrs	r2, r1
 800d51e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	68da      	ldr	r2, [r3, #12]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d52e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f022 0208 	bic.w	r2, r2, #8
 800d53e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	699a      	ldr	r2, [r3, #24]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	430a      	orrs	r2, r1
 800d550:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	22ff      	movs	r2, #255	; 0xff
 800d558:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2201      	movs	r2, #1
 800d55e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800d560:	2300      	movs	r3, #0
  }
}
 800d562:	4618      	mov	r0, r3
 800d564:	3708      	adds	r7, #8
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	ff8fffbf 	.word	0xff8fffbf

0800d570 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d578:	2300      	movs	r3, #0
 800d57a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	68db      	ldr	r3, [r3, #12]
 800d582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d586:	2b00      	cmp	r3, #0
 800d588:	d119      	bne.n	800d5be <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f04f 32ff 	mov.w	r2, #4294967295
 800d592:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d594:	f7fb ff72 	bl	800947c <HAL_GetTick>
 800d598:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d59a:	e009      	b.n	800d5b0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d59c:	f7fb ff6e 	bl	800947c <HAL_GetTick>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	1ad3      	subs	r3, r2, r3
 800d5a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d5aa:	d901      	bls.n	800d5b0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d5ac:	2303      	movs	r3, #3
 800d5ae:	e007      	b.n	800d5c0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d0ee      	beq.n	800d59c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d5be:	2300      	movs	r3, #0
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d101      	bne.n	800d5da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	e084      	b.n	800d6e4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d106      	bne.n	800d5fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f7fa ff2f 	bl	8008458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2202      	movs	r2, #2
 800d5fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d610:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	68db      	ldr	r3, [r3, #12]
 800d616:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d61a:	d902      	bls.n	800d622 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d61c:	2300      	movs	r3, #0
 800d61e:	60fb      	str	r3, [r7, #12]
 800d620:	e002      	b.n	800d628 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d626:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	68db      	ldr	r3, [r3, #12]
 800d62c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d630:	d007      	beq.n	800d642 <HAL_SPI_Init+0x7a>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d63a:	d002      	beq.n	800d642 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d646:	2b00      	cmp	r3, #0
 800d648:	d10b      	bne.n	800d662 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d652:	d903      	bls.n	800d65c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2202      	movs	r2, #2
 800d658:	631a      	str	r2, [r3, #48]	; 0x30
 800d65a:	e002      	b.n	800d662 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2201      	movs	r2, #1
 800d660:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	685a      	ldr	r2, [r3, #4]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	431a      	orrs	r2, r3
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	691b      	ldr	r3, [r3, #16]
 800d670:	431a      	orrs	r2, r3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	695b      	ldr	r3, [r3, #20]
 800d676:	431a      	orrs	r2, r3
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	699b      	ldr	r3, [r3, #24]
 800d67c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d680:	431a      	orrs	r2, r3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	69db      	ldr	r3, [r3, #28]
 800d686:	431a      	orrs	r2, r3
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6a1b      	ldr	r3, [r3, #32]
 800d68c:	ea42 0103 	orr.w	r1, r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	430a      	orrs	r2, r1
 800d69a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	699b      	ldr	r3, [r3, #24]
 800d6a0:	0c1b      	lsrs	r3, r3, #16
 800d6a2:	f003 0204 	and.w	r2, r3, #4
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6aa:	431a      	orrs	r2, r3
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b0:	431a      	orrs	r2, r3
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	ea42 0103 	orr.w	r1, r2, r3
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	430a      	orrs	r2, r1
 800d6c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	69da      	ldr	r2, [r3, #28]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d6d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2201      	movs	r2, #1
 800d6de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d6e2:	2300      	movs	r3, #0
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3710      	adds	r7, #16
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b088      	sub	sp, #32
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	603b      	str	r3, [r7, #0]
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d706:	2b01      	cmp	r3, #1
 800d708:	d101      	bne.n	800d70e <HAL_SPI_Transmit+0x22>
 800d70a:	2302      	movs	r3, #2
 800d70c:	e150      	b.n	800d9b0 <HAL_SPI_Transmit+0x2c4>
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2201      	movs	r2, #1
 800d712:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d716:	f7fb feb1 	bl	800947c <HAL_GetTick>
 800d71a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d71c:	88fb      	ldrh	r3, [r7, #6]
 800d71e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d002      	beq.n	800d732 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d72c:	2302      	movs	r3, #2
 800d72e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d730:	e135      	b.n	800d99e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <HAL_SPI_Transmit+0x52>
 800d738:	88fb      	ldrh	r3, [r7, #6]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d102      	bne.n	800d744 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d73e:	2301      	movs	r3, #1
 800d740:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d742:	e12c      	b.n	800d99e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2203      	movs	r2, #3
 800d748:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2200      	movs	r2, #0
 800d750:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	68ba      	ldr	r2, [r7, #8]
 800d756:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	88fa      	ldrh	r2, [r7, #6]
 800d75c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	88fa      	ldrh	r2, [r7, #6]
 800d762:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2200      	movs	r2, #0
 800d768:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2200      	movs	r2, #0
 800d76e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2200      	movs	r2, #0
 800d776:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2200      	movs	r2, #0
 800d77e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2200      	movs	r2, #0
 800d784:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	689b      	ldr	r3, [r3, #8]
 800d78a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d78e:	d107      	bne.n	800d7a0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d79e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7aa:	2b40      	cmp	r3, #64	; 0x40
 800d7ac:	d007      	beq.n	800d7be <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d7bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	68db      	ldr	r3, [r3, #12]
 800d7c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d7c6:	d94b      	bls.n	800d860 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d002      	beq.n	800d7d6 <HAL_SPI_Transmit+0xea>
 800d7d0:	8afb      	ldrh	r3, [r7, #22]
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d13e      	bne.n	800d854 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7da:	881a      	ldrh	r2, [r3, #0]
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e6:	1c9a      	adds	r2, r3, #2
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d7fa:	e02b      	b.n	800d854 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	689b      	ldr	r3, [r3, #8]
 800d802:	f003 0302 	and.w	r3, r3, #2
 800d806:	2b02      	cmp	r3, #2
 800d808:	d112      	bne.n	800d830 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80e:	881a      	ldrh	r2, [r3, #0]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d81a:	1c9a      	adds	r2, r3, #2
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d824:	b29b      	uxth	r3, r3
 800d826:	3b01      	subs	r3, #1
 800d828:	b29a      	uxth	r2, r3
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d82e:	e011      	b.n	800d854 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d830:	f7fb fe24 	bl	800947c <HAL_GetTick>
 800d834:	4602      	mov	r2, r0
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	1ad3      	subs	r3, r2, r3
 800d83a:	683a      	ldr	r2, [r7, #0]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d803      	bhi.n	800d848 <HAL_SPI_Transmit+0x15c>
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d846:	d102      	bne.n	800d84e <HAL_SPI_Transmit+0x162>
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d102      	bne.n	800d854 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800d84e:	2303      	movs	r3, #3
 800d850:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d852:	e0a4      	b.n	800d99e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d858:	b29b      	uxth	r3, r3
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d1ce      	bne.n	800d7fc <HAL_SPI_Transmit+0x110>
 800d85e:	e07c      	b.n	800d95a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d002      	beq.n	800d86e <HAL_SPI_Transmit+0x182>
 800d868:	8afb      	ldrh	r3, [r7, #22]
 800d86a:	2b01      	cmp	r3, #1
 800d86c:	d170      	bne.n	800d950 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d872:	b29b      	uxth	r3, r3
 800d874:	2b01      	cmp	r3, #1
 800d876:	d912      	bls.n	800d89e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d87c:	881a      	ldrh	r2, [r3, #0]
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d888:	1c9a      	adds	r2, r3, #2
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d892:	b29b      	uxth	r3, r3
 800d894:	3b02      	subs	r3, #2
 800d896:	b29a      	uxth	r2, r3
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d89c:	e058      	b.n	800d950 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	330c      	adds	r3, #12
 800d8a8:	7812      	ldrb	r2, [r2, #0]
 800d8aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b0:	1c5a      	adds	r2, r3, #1
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	3b01      	subs	r3, #1
 800d8be:	b29a      	uxth	r2, r3
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d8c4:	e044      	b.n	800d950 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	689b      	ldr	r3, [r3, #8]
 800d8cc:	f003 0302 	and.w	r3, r3, #2
 800d8d0:	2b02      	cmp	r3, #2
 800d8d2:	d12b      	bne.n	800d92c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d912      	bls.n	800d904 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8e2:	881a      	ldrh	r2, [r3, #0]
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ee:	1c9a      	adds	r2, r3, #2
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	3b02      	subs	r3, #2
 800d8fc:	b29a      	uxth	r2, r3
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d902:	e025      	b.n	800d950 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	330c      	adds	r3, #12
 800d90e:	7812      	ldrb	r2, [r2, #0]
 800d910:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d916:	1c5a      	adds	r2, r3, #1
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d920:	b29b      	uxth	r3, r3
 800d922:	3b01      	subs	r3, #1
 800d924:	b29a      	uxth	r2, r3
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d92a:	e011      	b.n	800d950 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d92c:	f7fb fda6 	bl	800947c <HAL_GetTick>
 800d930:	4602      	mov	r2, r0
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	1ad3      	subs	r3, r2, r3
 800d936:	683a      	ldr	r2, [r7, #0]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d803      	bhi.n	800d944 <HAL_SPI_Transmit+0x258>
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d942:	d102      	bne.n	800d94a <HAL_SPI_Transmit+0x25e>
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d102      	bne.n	800d950 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800d94a:	2303      	movs	r3, #3
 800d94c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d94e:	e026      	b.n	800d99e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d954:	b29b      	uxth	r3, r3
 800d956:	2b00      	cmp	r3, #0
 800d958:	d1b5      	bne.n	800d8c6 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d95a:	69ba      	ldr	r2, [r7, #24]
 800d95c:	6839      	ldr	r1, [r7, #0]
 800d95e:	68f8      	ldr	r0, [r7, #12]
 800d960:	f000 fc34 	bl	800e1cc <SPI_EndRxTxTransaction>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d002      	beq.n	800d970 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2220      	movs	r2, #32
 800d96e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	689b      	ldr	r3, [r3, #8]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d10a      	bne.n	800d98e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d978:	2300      	movs	r3, #0
 800d97a:	613b      	str	r3, [r7, #16]
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	68db      	ldr	r3, [r3, #12]
 800d982:	613b      	str	r3, [r7, #16]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	689b      	ldr	r3, [r3, #8]
 800d98a:	613b      	str	r3, [r7, #16]
 800d98c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d992:	2b00      	cmp	r3, #0
 800d994:	d002      	beq.n	800d99c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800d996:	2301      	movs	r3, #1
 800d998:	77fb      	strb	r3, [r7, #31]
 800d99a:	e000      	b.n	800d99e <HAL_SPI_Transmit+0x2b2>
  }

error:
 800d99c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d9ae:	7ffb      	ldrb	r3, [r7, #31]
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3720      	adds	r7, #32
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b08a      	sub	sp, #40	; 0x28
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	60b9      	str	r1, [r7, #8]
 800d9c2:	607a      	str	r2, [r7, #4]
 800d9c4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d101      	bne.n	800d9de <HAL_SPI_TransmitReceive+0x26>
 800d9da:	2302      	movs	r3, #2
 800d9dc:	e1fb      	b.n	800ddd6 <HAL_SPI_TransmitReceive+0x41e>
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d9e6:	f7fb fd49 	bl	800947c <HAL_GetTick>
 800d9ea:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d9f2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800d9fa:	887b      	ldrh	r3, [r7, #2]
 800d9fc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800d9fe:	887b      	ldrh	r3, [r7, #2]
 800da00:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800da02:	7efb      	ldrb	r3, [r7, #27]
 800da04:	2b01      	cmp	r3, #1
 800da06:	d00e      	beq.n	800da26 <HAL_SPI_TransmitReceive+0x6e>
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da0e:	d106      	bne.n	800da1e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	689b      	ldr	r3, [r3, #8]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d102      	bne.n	800da1e <HAL_SPI_TransmitReceive+0x66>
 800da18:	7efb      	ldrb	r3, [r7, #27]
 800da1a:	2b04      	cmp	r3, #4
 800da1c:	d003      	beq.n	800da26 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800da1e:	2302      	movs	r3, #2
 800da20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800da24:	e1cd      	b.n	800ddc2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d005      	beq.n	800da38 <HAL_SPI_TransmitReceive+0x80>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d002      	beq.n	800da38 <HAL_SPI_TransmitReceive+0x80>
 800da32:	887b      	ldrh	r3, [r7, #2]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d103      	bne.n	800da40 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800da38:	2301      	movs	r3, #1
 800da3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800da3e:	e1c0      	b.n	800ddc2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800da46:	b2db      	uxtb	r3, r3
 800da48:	2b04      	cmp	r3, #4
 800da4a:	d003      	beq.n	800da54 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2205      	movs	r2, #5
 800da50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2200      	movs	r2, #0
 800da58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	687a      	ldr	r2, [r7, #4]
 800da5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	887a      	ldrh	r2, [r7, #2]
 800da64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	887a      	ldrh	r2, [r7, #2]
 800da6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	68ba      	ldr	r2, [r7, #8]
 800da74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	887a      	ldrh	r2, [r7, #2]
 800da7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	887a      	ldrh	r2, [r7, #2]
 800da80:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2200      	movs	r2, #0
 800da86:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2200      	movs	r2, #0
 800da8c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	68db      	ldr	r3, [r3, #12]
 800da92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800da96:	d802      	bhi.n	800da9e <HAL_SPI_TransmitReceive+0xe6>
 800da98:	8a3b      	ldrh	r3, [r7, #16]
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d908      	bls.n	800dab0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	685a      	ldr	r2, [r3, #4]
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800daac:	605a      	str	r2, [r3, #4]
 800daae:	e007      	b.n	800dac0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	685a      	ldr	r2, [r3, #4]
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dabe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daca:	2b40      	cmp	r3, #64	; 0x40
 800dacc:	d007      	beq.n	800dade <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dadc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	68db      	ldr	r3, [r3, #12]
 800dae2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dae6:	d97c      	bls.n	800dbe2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d002      	beq.n	800daf6 <HAL_SPI_TransmitReceive+0x13e>
 800daf0:	8a7b      	ldrh	r3, [r7, #18]
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d169      	bne.n	800dbca <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dafa:	881a      	ldrh	r2, [r3, #0]
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db06:	1c9a      	adds	r2, r3, #2
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db10:	b29b      	uxth	r3, r3
 800db12:	3b01      	subs	r3, #1
 800db14:	b29a      	uxth	r2, r3
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800db1a:	e056      	b.n	800dbca <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	f003 0302 	and.w	r3, r3, #2
 800db26:	2b02      	cmp	r3, #2
 800db28:	d11b      	bne.n	800db62 <HAL_SPI_TransmitReceive+0x1aa>
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db2e:	b29b      	uxth	r3, r3
 800db30:	2b00      	cmp	r3, #0
 800db32:	d016      	beq.n	800db62 <HAL_SPI_TransmitReceive+0x1aa>
 800db34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db36:	2b01      	cmp	r3, #1
 800db38:	d113      	bne.n	800db62 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db3e:	881a      	ldrh	r2, [r3, #0]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db4a:	1c9a      	adds	r2, r3, #2
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db54:	b29b      	uxth	r3, r3
 800db56:	3b01      	subs	r3, #1
 800db58:	b29a      	uxth	r2, r3
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800db5e:	2300      	movs	r3, #0
 800db60:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	689b      	ldr	r3, [r3, #8]
 800db68:	f003 0301 	and.w	r3, r3, #1
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d11c      	bne.n	800dbaa <HAL_SPI_TransmitReceive+0x1f2>
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800db76:	b29b      	uxth	r3, r3
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d016      	beq.n	800dbaa <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	68da      	ldr	r2, [r3, #12]
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db86:	b292      	uxth	r2, r2
 800db88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db8e:	1c9a      	adds	r2, r3, #2
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	3b01      	subs	r3, #1
 800db9e:	b29a      	uxth	r2, r3
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dba6:	2301      	movs	r3, #1
 800dba8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dbaa:	f7fb fc67 	bl	800947c <HAL_GetTick>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	69fb      	ldr	r3, [r7, #28]
 800dbb2:	1ad3      	subs	r3, r2, r3
 800dbb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d807      	bhi.n	800dbca <HAL_SPI_TransmitReceive+0x212>
 800dbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc0:	d003      	beq.n	800dbca <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800dbc2:	2303      	movs	r3, #3
 800dbc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800dbc8:	e0fb      	b.n	800ddc2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d1a3      	bne.n	800db1c <HAL_SPI_TransmitReceive+0x164>
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d19d      	bne.n	800db1c <HAL_SPI_TransmitReceive+0x164>
 800dbe0:	e0df      	b.n	800dda2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d003      	beq.n	800dbf2 <HAL_SPI_TransmitReceive+0x23a>
 800dbea:	8a7b      	ldrh	r3, [r7, #18]
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	f040 80cb 	bne.w	800dd88 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d912      	bls.n	800dc22 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc00:	881a      	ldrh	r2, [r3, #0]
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc0c:	1c9a      	adds	r2, r3, #2
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	3b02      	subs	r3, #2
 800dc1a:	b29a      	uxth	r2, r3
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dc20:	e0b2      	b.n	800dd88 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	330c      	adds	r3, #12
 800dc2c:	7812      	ldrb	r2, [r2, #0]
 800dc2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc34:	1c5a      	adds	r2, r3, #1
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	3b01      	subs	r3, #1
 800dc42:	b29a      	uxth	r2, r3
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dc48:	e09e      	b.n	800dd88 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	f003 0302 	and.w	r3, r3, #2
 800dc54:	2b02      	cmp	r3, #2
 800dc56:	d134      	bne.n	800dcc2 <HAL_SPI_TransmitReceive+0x30a>
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc5c:	b29b      	uxth	r3, r3
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d02f      	beq.n	800dcc2 <HAL_SPI_TransmitReceive+0x30a>
 800dc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d12c      	bne.n	800dcc2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d912      	bls.n	800dc98 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc76:	881a      	ldrh	r2, [r3, #0]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc82:	1c9a      	adds	r2, r3, #2
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc8c:	b29b      	uxth	r3, r3
 800dc8e:	3b02      	subs	r3, #2
 800dc90:	b29a      	uxth	r2, r3
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dc96:	e012      	b.n	800dcbe <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	330c      	adds	r3, #12
 800dca2:	7812      	ldrb	r2, [r2, #0]
 800dca4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcaa:	1c5a      	adds	r2, r3, #1
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	3b01      	subs	r3, #1
 800dcb8:	b29a      	uxth	r2, r3
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	689b      	ldr	r3, [r3, #8]
 800dcc8:	f003 0301 	and.w	r3, r3, #1
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d148      	bne.n	800dd62 <HAL_SPI_TransmitReceive+0x3aa>
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d042      	beq.n	800dd62 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d923      	bls.n	800dd30 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	68da      	ldr	r2, [r3, #12]
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcf2:	b292      	uxth	r2, r2
 800dcf4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcfa:	1c9a      	adds	r2, r3, #2
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd06:	b29b      	uxth	r3, r3
 800dd08:	3b02      	subs	r3, #2
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d81f      	bhi.n	800dd5e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	685a      	ldr	r2, [r3, #4]
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dd2c:	605a      	str	r2, [r3, #4]
 800dd2e:	e016      	b.n	800dd5e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f103 020c 	add.w	r2, r3, #12
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd3c:	7812      	ldrb	r2, [r2, #0]
 800dd3e:	b2d2      	uxtb	r2, r2
 800dd40:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd46:	1c5a      	adds	r2, r3, #1
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd52:	b29b      	uxth	r3, r3
 800dd54:	3b01      	subs	r3, #1
 800dd56:	b29a      	uxth	r2, r3
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800dd62:	f7fb fb8b 	bl	800947c <HAL_GetTick>
 800dd66:	4602      	mov	r2, r0
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	1ad3      	subs	r3, r2, r3
 800dd6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d803      	bhi.n	800dd7a <HAL_SPI_TransmitReceive+0x3c2>
 800dd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd78:	d102      	bne.n	800dd80 <HAL_SPI_TransmitReceive+0x3c8>
 800dd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d103      	bne.n	800dd88 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800dd80:	2303      	movs	r3, #3
 800dd82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800dd86:	e01c      	b.n	800ddc2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	f47f af5b 	bne.w	800dc4a <HAL_SPI_TransmitReceive+0x292>
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	f47f af54 	bne.w	800dc4a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dda2:	69fa      	ldr	r2, [r7, #28]
 800dda4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dda6:	68f8      	ldr	r0, [r7, #12]
 800dda8:	f000 fa10 	bl	800e1cc <SPI_EndRxTxTransaction>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d006      	beq.n	800ddc0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	2220      	movs	r2, #32
 800ddbc:	661a      	str	r2, [r3, #96]	; 0x60
 800ddbe:	e000      	b.n	800ddc2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800ddc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ddd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3728      	adds	r7, #40	; 0x28
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
	...

0800dde0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b088      	sub	sp, #32
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	689b      	ldr	r3, [r3, #8]
 800ddf6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ddf8:	69bb      	ldr	r3, [r7, #24]
 800ddfa:	099b      	lsrs	r3, r3, #6
 800ddfc:	f003 0301 	and.w	r3, r3, #1
 800de00:	2b00      	cmp	r3, #0
 800de02:	d10f      	bne.n	800de24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800de04:	69bb      	ldr	r3, [r7, #24]
 800de06:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00a      	beq.n	800de24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800de0e:	69fb      	ldr	r3, [r7, #28]
 800de10:	099b      	lsrs	r3, r3, #6
 800de12:	f003 0301 	and.w	r3, r3, #1
 800de16:	2b00      	cmp	r3, #0
 800de18:	d004      	beq.n	800de24 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	4798      	blx	r3
    return;
 800de22:	e0d8      	b.n	800dfd6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	085b      	lsrs	r3, r3, #1
 800de28:	f003 0301 	and.w	r3, r3, #1
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d00a      	beq.n	800de46 <HAL_SPI_IRQHandler+0x66>
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	09db      	lsrs	r3, r3, #7
 800de34:	f003 0301 	and.w	r3, r3, #1
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d004      	beq.n	800de46 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	4798      	blx	r3
    return;
 800de44:	e0c7      	b.n	800dfd6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800de46:	69bb      	ldr	r3, [r7, #24]
 800de48:	095b      	lsrs	r3, r3, #5
 800de4a:	f003 0301 	and.w	r3, r3, #1
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d10c      	bne.n	800de6c <HAL_SPI_IRQHandler+0x8c>
 800de52:	69bb      	ldr	r3, [r7, #24]
 800de54:	099b      	lsrs	r3, r3, #6
 800de56:	f003 0301 	and.w	r3, r3, #1
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d106      	bne.n	800de6c <HAL_SPI_IRQHandler+0x8c>
 800de5e:	69bb      	ldr	r3, [r7, #24]
 800de60:	0a1b      	lsrs	r3, r3, #8
 800de62:	f003 0301 	and.w	r3, r3, #1
 800de66:	2b00      	cmp	r3, #0
 800de68:	f000 80b5 	beq.w	800dfd6 <HAL_SPI_IRQHandler+0x1f6>
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	095b      	lsrs	r3, r3, #5
 800de70:	f003 0301 	and.w	r3, r3, #1
 800de74:	2b00      	cmp	r3, #0
 800de76:	f000 80ae 	beq.w	800dfd6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	099b      	lsrs	r3, r3, #6
 800de7e:	f003 0301 	and.w	r3, r3, #1
 800de82:	2b00      	cmp	r3, #0
 800de84:	d023      	beq.n	800dece <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	2b03      	cmp	r3, #3
 800de90:	d011      	beq.n	800deb6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de96:	f043 0204 	orr.w	r2, r3, #4
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800de9e:	2300      	movs	r3, #0
 800dea0:	617b      	str	r3, [r7, #20]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	68db      	ldr	r3, [r3, #12]
 800dea8:	617b      	str	r3, [r7, #20]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	617b      	str	r3, [r7, #20]
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	e00b      	b.n	800dece <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800deb6:	2300      	movs	r3, #0
 800deb8:	613b      	str	r3, [r7, #16]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	613b      	str	r3, [r7, #16]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	689b      	ldr	r3, [r3, #8]
 800dec8:	613b      	str	r3, [r7, #16]
 800deca:	693b      	ldr	r3, [r7, #16]
        return;
 800decc:	e083      	b.n	800dfd6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	095b      	lsrs	r3, r3, #5
 800ded2:	f003 0301 	and.w	r3, r3, #1
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d014      	beq.n	800df04 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dede:	f043 0201 	orr.w	r2, r3, #1
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800dee6:	2300      	movs	r3, #0
 800dee8:	60fb      	str	r3, [r7, #12]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	689b      	ldr	r3, [r3, #8]
 800def0:	60fb      	str	r3, [r7, #12]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df00:	601a      	str	r2, [r3, #0]
 800df02:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800df04:	69bb      	ldr	r3, [r7, #24]
 800df06:	0a1b      	lsrs	r3, r3, #8
 800df08:	f003 0301 	and.w	r3, r3, #1
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d00c      	beq.n	800df2a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df14:	f043 0208 	orr.w	r2, r3, #8
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800df1c:	2300      	movs	r3, #0
 800df1e:	60bb      	str	r3, [r7, #8]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	689b      	ldr	r3, [r3, #8]
 800df26:	60bb      	str	r3, [r7, #8]
 800df28:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d050      	beq.n	800dfd4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	685a      	ldr	r2, [r3, #4]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800df40:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2201      	movs	r2, #1
 800df46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	f003 0302 	and.w	r3, r3, #2
 800df50:	2b00      	cmp	r3, #0
 800df52:	d104      	bne.n	800df5e <HAL_SPI_IRQHandler+0x17e>
 800df54:	69fb      	ldr	r3, [r7, #28]
 800df56:	f003 0301 	and.w	r3, r3, #1
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d034      	beq.n	800dfc8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	685a      	ldr	r2, [r3, #4]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f022 0203 	bic.w	r2, r2, #3
 800df6c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df72:	2b00      	cmp	r3, #0
 800df74:	d011      	beq.n	800df9a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df7a:	4a18      	ldr	r2, [pc, #96]	; (800dfdc <HAL_SPI_IRQHandler+0x1fc>)
 800df7c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df82:	4618      	mov	r0, r3
 800df84:	f7fc fab4 	bl	800a4f0 <HAL_DMA_Abort_IT>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d005      	beq.n	800df9a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d016      	beq.n	800dfd0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfa6:	4a0d      	ldr	r2, [pc, #52]	; (800dfdc <HAL_SPI_IRQHandler+0x1fc>)
 800dfa8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fc fa9e 	bl	800a4f0 <HAL_DMA_Abort_IT>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d00a      	beq.n	800dfd0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800dfc6:	e003      	b.n	800dfd0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f000 f809 	bl	800dfe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800dfce:	e000      	b.n	800dfd2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800dfd0:	bf00      	nop
    return;
 800dfd2:	bf00      	nop
 800dfd4:	bf00      	nop
  }
}
 800dfd6:	3720      	adds	r7, #32
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	0800dff5 	.word	0x0800dff5

0800dfe0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e000:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2200      	movs	r2, #0
 800e006:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2200      	movs	r2, #0
 800e00e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e010:	68f8      	ldr	r0, [r7, #12]
 800e012:	f7ff ffe5 	bl	800dfe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e016:	bf00      	nop
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e01e:	b580      	push	{r7, lr}
 800e020:	b084      	sub	sp, #16
 800e022:	af00      	add	r7, sp, #0
 800e024:	60f8      	str	r0, [r7, #12]
 800e026:	60b9      	str	r1, [r7, #8]
 800e028:	603b      	str	r3, [r7, #0]
 800e02a:	4613      	mov	r3, r2
 800e02c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e02e:	e04c      	b.n	800e0ca <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e036:	d048      	beq.n	800e0ca <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e038:	f7fb fa20 	bl	800947c <HAL_GetTick>
 800e03c:	4602      	mov	r2, r0
 800e03e:	69bb      	ldr	r3, [r7, #24]
 800e040:	1ad3      	subs	r3, r2, r3
 800e042:	683a      	ldr	r2, [r7, #0]
 800e044:	429a      	cmp	r2, r3
 800e046:	d902      	bls.n	800e04e <SPI_WaitFlagStateUntilTimeout+0x30>
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d13d      	bne.n	800e0ca <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	685a      	ldr	r2, [r3, #4]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e05c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e066:	d111      	bne.n	800e08c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	689b      	ldr	r3, [r3, #8]
 800e06c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e070:	d004      	beq.n	800e07c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	689b      	ldr	r3, [r3, #8]
 800e076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e07a:	d107      	bne.n	800e08c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e08a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e094:	d10f      	bne.n	800e0b6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e0a4:	601a      	str	r2, [r3, #0]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e0b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e0c6:	2303      	movs	r3, #3
 800e0c8:	e00f      	b.n	800e0ea <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	689a      	ldr	r2, [r3, #8]
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	4013      	ands	r3, r2
 800e0d4:	68ba      	ldr	r2, [r7, #8]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	bf0c      	ite	eq
 800e0da:	2301      	moveq	r3, #1
 800e0dc:	2300      	movne	r3, #0
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	79fb      	ldrb	r3, [r7, #7]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d1a3      	bne.n	800e030 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e0e8:	2300      	movs	r3, #0
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e0f2:	b580      	push	{r7, lr}
 800e0f4:	b084      	sub	sp, #16
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	60f8      	str	r0, [r7, #12]
 800e0fa:	60b9      	str	r1, [r7, #8]
 800e0fc:	607a      	str	r2, [r7, #4]
 800e0fe:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800e100:	e057      	b.n	800e1b2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e108:	d106      	bne.n	800e118 <SPI_WaitFifoStateUntilTimeout+0x26>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d103      	bne.n	800e118 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	330c      	adds	r3, #12
 800e116:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e11e:	d048      	beq.n	800e1b2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e120:	f7fb f9ac 	bl	800947c <HAL_GetTick>
 800e124:	4602      	mov	r2, r0
 800e126:	69bb      	ldr	r3, [r7, #24]
 800e128:	1ad3      	subs	r3, r2, r3
 800e12a:	683a      	ldr	r2, [r7, #0]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d902      	bls.n	800e136 <SPI_WaitFifoStateUntilTimeout+0x44>
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d13d      	bne.n	800e1b2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	685a      	ldr	r2, [r3, #4]
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e144:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e14e:	d111      	bne.n	800e174 <SPI_WaitFifoStateUntilTimeout+0x82>
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e158:	d004      	beq.n	800e164 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	689b      	ldr	r3, [r3, #8]
 800e15e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e162:	d107      	bne.n	800e174 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e172:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e17c:	d10f      	bne.n	800e19e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e18c:	601a      	str	r2, [r3, #0]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e19c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e1ae:	2303      	movs	r3, #3
 800e1b0:	e008      	b.n	800e1c4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	689a      	ldr	r2, [r3, #8]
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	4013      	ands	r3, r2
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d19f      	bne.n	800e102 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800e1c2:	2300      	movs	r3, #0
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3710      	adds	r7, #16
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b086      	sub	sp, #24
 800e1d0:	af02      	add	r7, sp, #8
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	9300      	str	r3, [sp, #0]
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e1e4:	68f8      	ldr	r0, [r7, #12]
 800e1e6:	f7ff ff84 	bl	800e0f2 <SPI_WaitFifoStateUntilTimeout>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d007      	beq.n	800e200 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1f4:	f043 0220 	orr.w	r2, r3, #32
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e1fc:	2303      	movs	r3, #3
 800e1fe:	e027      	b.n	800e250 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	2200      	movs	r2, #0
 800e208:	2180      	movs	r1, #128	; 0x80
 800e20a:	68f8      	ldr	r0, [r7, #12]
 800e20c:	f7ff ff07 	bl	800e01e <SPI_WaitFlagStateUntilTimeout>
 800e210:	4603      	mov	r3, r0
 800e212:	2b00      	cmp	r3, #0
 800e214:	d007      	beq.n	800e226 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e21a:	f043 0220 	orr.w	r2, r3, #32
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e222:	2303      	movs	r3, #3
 800e224:	e014      	b.n	800e250 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	2200      	movs	r2, #0
 800e22e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e232:	68f8      	ldr	r0, [r7, #12]
 800e234:	f7ff ff5d 	bl	800e0f2 <SPI_WaitFifoStateUntilTimeout>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d007      	beq.n	800e24e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e242:	f043 0220 	orr.w	r2, r3, #32
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e24a:	2303      	movs	r3, #3
 800e24c:	e000      	b.n	800e250 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e24e:	2300      	movs	r3, #0
}
 800e250:	4618      	mov	r0, r3
 800e252:	3710      	adds	r7, #16
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d101      	bne.n	800e26a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e266:	2301      	movs	r3, #1
 800e268:	e01d      	b.n	800e2a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e270:	b2db      	uxtb	r3, r3
 800e272:	2b00      	cmp	r3, #0
 800e274:	d106      	bne.n	800e284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2200      	movs	r2, #0
 800e27a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f7fa f986 	bl	8008590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2202      	movs	r2, #2
 800e288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	3304      	adds	r3, #4
 800e294:	4619      	mov	r1, r3
 800e296:	4610      	mov	r0, r2
 800e298:	f000 fb82 	bl	800e9a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2201      	movs	r2, #1
 800e2a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e2a4:	2300      	movs	r3, #0
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3708      	adds	r7, #8
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
	...

0800e2b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b085      	sub	sp, #20
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	68da      	ldr	r2, [r3, #12]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	f042 0201 	orr.w	r2, r2, #1
 800e2c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	689a      	ldr	r2, [r3, #8]
 800e2ce:	4b0c      	ldr	r3, [pc, #48]	; (800e300 <HAL_TIM_Base_Start_IT+0x50>)
 800e2d0:	4013      	ands	r3, r2
 800e2d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2b06      	cmp	r3, #6
 800e2d8:	d00b      	beq.n	800e2f2 <HAL_TIM_Base_Start_IT+0x42>
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2e0:	d007      	beq.n	800e2f2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f042 0201 	orr.w	r2, r2, #1
 800e2f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e2f2:	2300      	movs	r3, #0
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3714      	adds	r7, #20
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr
 800e300:	00010007 	.word	0x00010007

0800e304 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d101      	bne.n	800e316 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e312:	2301      	movs	r3, #1
 800e314:	e01d      	b.n	800e352 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d106      	bne.n	800e330 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2200      	movs	r2, #0
 800e326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 f815 	bl	800e35a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2202      	movs	r2, #2
 800e334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681a      	ldr	r2, [r3, #0]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	3304      	adds	r3, #4
 800e340:	4619      	mov	r1, r3
 800e342:	4610      	mov	r0, r2
 800e344:	f000 fb2c 	bl	800e9a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2201      	movs	r2, #1
 800e34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e350:	2300      	movs	r3, #0
}
 800e352:	4618      	mov	r0, r3
 800e354:	3708      	adds	r7, #8
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e35a:	b480      	push	{r7}
 800e35c:	b083      	sub	sp, #12
 800e35e:	af00      	add	r7, sp, #0
 800e360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e362:	bf00      	nop
 800e364:	370c      	adds	r7, #12
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr

0800e36e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e36e:	b580      	push	{r7, lr}
 800e370:	b082      	sub	sp, #8
 800e372:	af00      	add	r7, sp, #0
 800e374:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	691b      	ldr	r3, [r3, #16]
 800e37c:	f003 0302 	and.w	r3, r3, #2
 800e380:	2b02      	cmp	r3, #2
 800e382:	d122      	bne.n	800e3ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	f003 0302 	and.w	r3, r3, #2
 800e38e:	2b02      	cmp	r3, #2
 800e390:	d11b      	bne.n	800e3ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f06f 0202 	mvn.w	r2, #2
 800e39a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2201      	movs	r2, #1
 800e3a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	699b      	ldr	r3, [r3, #24]
 800e3a8:	f003 0303 	and.w	r3, r3, #3
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d003      	beq.n	800e3b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 fad7 	bl	800e964 <HAL_TIM_IC_CaptureCallback>
 800e3b6:	e005      	b.n	800e3c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 fac9 	bl	800e950 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f000 fada 	bl	800e978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	691b      	ldr	r3, [r3, #16]
 800e3d0:	f003 0304 	and.w	r3, r3, #4
 800e3d4:	2b04      	cmp	r3, #4
 800e3d6:	d122      	bne.n	800e41e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	68db      	ldr	r3, [r3, #12]
 800e3de:	f003 0304 	and.w	r3, r3, #4
 800e3e2:	2b04      	cmp	r3, #4
 800e3e4:	d11b      	bne.n	800e41e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f06f 0204 	mvn.w	r2, #4
 800e3ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2202      	movs	r2, #2
 800e3f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	699b      	ldr	r3, [r3, #24]
 800e3fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e400:	2b00      	cmp	r3, #0
 800e402:	d003      	beq.n	800e40c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 faad 	bl	800e964 <HAL_TIM_IC_CaptureCallback>
 800e40a:	e005      	b.n	800e418 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f000 fa9f 	bl	800e950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 fab0 	bl	800e978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2200      	movs	r2, #0
 800e41c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	691b      	ldr	r3, [r3, #16]
 800e424:	f003 0308 	and.w	r3, r3, #8
 800e428:	2b08      	cmp	r3, #8
 800e42a:	d122      	bne.n	800e472 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	68db      	ldr	r3, [r3, #12]
 800e432:	f003 0308 	and.w	r3, r3, #8
 800e436:	2b08      	cmp	r3, #8
 800e438:	d11b      	bne.n	800e472 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f06f 0208 	mvn.w	r2, #8
 800e442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2204      	movs	r2, #4
 800e448:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	69db      	ldr	r3, [r3, #28]
 800e450:	f003 0303 	and.w	r3, r3, #3
 800e454:	2b00      	cmp	r3, #0
 800e456:	d003      	beq.n	800e460 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 fa83 	bl	800e964 <HAL_TIM_IC_CaptureCallback>
 800e45e:	e005      	b.n	800e46c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 fa75 	bl	800e950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 fa86 	bl	800e978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2200      	movs	r2, #0
 800e470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	691b      	ldr	r3, [r3, #16]
 800e478:	f003 0310 	and.w	r3, r3, #16
 800e47c:	2b10      	cmp	r3, #16
 800e47e:	d122      	bne.n	800e4c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	68db      	ldr	r3, [r3, #12]
 800e486:	f003 0310 	and.w	r3, r3, #16
 800e48a:	2b10      	cmp	r3, #16
 800e48c:	d11b      	bne.n	800e4c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f06f 0210 	mvn.w	r2, #16
 800e496:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2208      	movs	r2, #8
 800e49c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	69db      	ldr	r3, [r3, #28]
 800e4a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d003      	beq.n	800e4b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 fa59 	bl	800e964 <HAL_TIM_IC_CaptureCallback>
 800e4b2:	e005      	b.n	800e4c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f000 fa4b 	bl	800e950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f000 fa5c 	bl	800e978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	691b      	ldr	r3, [r3, #16]
 800e4cc:	f003 0301 	and.w	r3, r3, #1
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d10e      	bne.n	800e4f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	68db      	ldr	r3, [r3, #12]
 800e4da:	f003 0301 	and.w	r3, r3, #1
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	d107      	bne.n	800e4f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	f06f 0201 	mvn.w	r2, #1
 800e4ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f7f6 fd57 	bl	8004fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	691b      	ldr	r3, [r3, #16]
 800e4f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4fc:	2b80      	cmp	r3, #128	; 0x80
 800e4fe:	d10e      	bne.n	800e51e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e50a:	2b80      	cmp	r3, #128	; 0x80
 800e50c:	d107      	bne.n	800e51e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 fe71 	bl	800f200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	691b      	ldr	r3, [r3, #16]
 800e524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e52c:	d10e      	bne.n	800e54c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	68db      	ldr	r3, [r3, #12]
 800e534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e538:	2b80      	cmp	r3, #128	; 0x80
 800e53a:	d107      	bne.n	800e54c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f000 fe64 	bl	800f214 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	691b      	ldr	r3, [r3, #16]
 800e552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e556:	2b40      	cmp	r3, #64	; 0x40
 800e558:	d10e      	bne.n	800e578 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e564:	2b40      	cmp	r3, #64	; 0x40
 800e566:	d107      	bne.n	800e578 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 fa0a 	bl	800e98c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	691b      	ldr	r3, [r3, #16]
 800e57e:	f003 0320 	and.w	r3, r3, #32
 800e582:	2b20      	cmp	r3, #32
 800e584:	d10e      	bne.n	800e5a4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	68db      	ldr	r3, [r3, #12]
 800e58c:	f003 0320 	and.w	r3, r3, #32
 800e590:	2b20      	cmp	r3, #32
 800e592:	d107      	bne.n	800e5a4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f06f 0220 	mvn.w	r2, #32
 800e59c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 fe24 	bl	800f1ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e5a4:	bf00      	nop
 800e5a6:	3708      	adds	r7, #8
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	60f8      	str	r0, [r7, #12]
 800e5b4:	60b9      	str	r1, [r7, #8]
 800e5b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d101      	bne.n	800e5c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e5c2:	2302      	movs	r3, #2
 800e5c4:	e105      	b.n	800e7d2 <HAL_TIM_PWM_ConfigChannel+0x226>
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2201      	movs	r2, #1
 800e5ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2202      	movs	r2, #2
 800e5d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2b14      	cmp	r3, #20
 800e5da:	f200 80f0 	bhi.w	800e7be <HAL_TIM_PWM_ConfigChannel+0x212>
 800e5de:	a201      	add	r2, pc, #4	; (adr r2, 800e5e4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5e4:	0800e639 	.word	0x0800e639
 800e5e8:	0800e7bf 	.word	0x0800e7bf
 800e5ec:	0800e7bf 	.word	0x0800e7bf
 800e5f0:	0800e7bf 	.word	0x0800e7bf
 800e5f4:	0800e679 	.word	0x0800e679
 800e5f8:	0800e7bf 	.word	0x0800e7bf
 800e5fc:	0800e7bf 	.word	0x0800e7bf
 800e600:	0800e7bf 	.word	0x0800e7bf
 800e604:	0800e6bb 	.word	0x0800e6bb
 800e608:	0800e7bf 	.word	0x0800e7bf
 800e60c:	0800e7bf 	.word	0x0800e7bf
 800e610:	0800e7bf 	.word	0x0800e7bf
 800e614:	0800e6fb 	.word	0x0800e6fb
 800e618:	0800e7bf 	.word	0x0800e7bf
 800e61c:	0800e7bf 	.word	0x0800e7bf
 800e620:	0800e7bf 	.word	0x0800e7bf
 800e624:	0800e73d 	.word	0x0800e73d
 800e628:	0800e7bf 	.word	0x0800e7bf
 800e62c:	0800e7bf 	.word	0x0800e7bf
 800e630:	0800e7bf 	.word	0x0800e7bf
 800e634:	0800e77d 	.word	0x0800e77d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	68b9      	ldr	r1, [r7, #8]
 800e63e:	4618      	mov	r0, r3
 800e640:	f000 fa4e 	bl	800eae0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	699a      	ldr	r2, [r3, #24]
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f042 0208 	orr.w	r2, r2, #8
 800e652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	699a      	ldr	r2, [r3, #24]
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f022 0204 	bic.w	r2, r2, #4
 800e662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	6999      	ldr	r1, [r3, #24]
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	691a      	ldr	r2, [r3, #16]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	430a      	orrs	r2, r1
 800e674:	619a      	str	r2, [r3, #24]
      break;
 800e676:	e0a3      	b.n	800e7c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	68b9      	ldr	r1, [r7, #8]
 800e67e:	4618      	mov	r0, r3
 800e680:	f000 faa0 	bl	800ebc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	699a      	ldr	r2, [r3, #24]
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	699a      	ldr	r2, [r3, #24]
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	6999      	ldr	r1, [r3, #24]
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	691b      	ldr	r3, [r3, #16]
 800e6ae:	021a      	lsls	r2, r3, #8
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	430a      	orrs	r2, r1
 800e6b6:	619a      	str	r2, [r3, #24]
      break;
 800e6b8:	e082      	b.n	800e7c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	68b9      	ldr	r1, [r7, #8]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f000 faf7 	bl	800ecb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	69da      	ldr	r2, [r3, #28]
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f042 0208 	orr.w	r2, r2, #8
 800e6d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	69da      	ldr	r2, [r3, #28]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f022 0204 	bic.w	r2, r2, #4
 800e6e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	69d9      	ldr	r1, [r3, #28]
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	691a      	ldr	r2, [r3, #16]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	430a      	orrs	r2, r1
 800e6f6:	61da      	str	r2, [r3, #28]
      break;
 800e6f8:	e062      	b.n	800e7c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	68b9      	ldr	r1, [r7, #8]
 800e700:	4618      	mov	r0, r3
 800e702:	f000 fb4d 	bl	800eda0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	69da      	ldr	r2, [r3, #28]
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	69da      	ldr	r2, [r3, #28]
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	69d9      	ldr	r1, [r3, #28]
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	691b      	ldr	r3, [r3, #16]
 800e730:	021a      	lsls	r2, r3, #8
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	430a      	orrs	r2, r1
 800e738:	61da      	str	r2, [r3, #28]
      break;
 800e73a:	e041      	b.n	800e7c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	68b9      	ldr	r1, [r7, #8]
 800e742:	4618      	mov	r0, r3
 800e744:	f000 fb84 	bl	800ee50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f042 0208 	orr.w	r2, r2, #8
 800e756:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f022 0204 	bic.w	r2, r2, #4
 800e766:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	691a      	ldr	r2, [r3, #16]
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	430a      	orrs	r2, r1
 800e778:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e77a:	e021      	b.n	800e7c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	68b9      	ldr	r1, [r7, #8]
 800e782:	4618      	mov	r0, r3
 800e784:	f000 fbb6 	bl	800eef4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e796:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e7a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	691b      	ldr	r3, [r3, #16]
 800e7b2:	021a      	lsls	r2, r3, #8
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	430a      	orrs	r2, r1
 800e7ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e7bc:	e000      	b.n	800e7c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800e7be:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e7d0:	2300      	movs	r3, #0
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3710      	adds	r7, #16
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop

0800e7dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	d101      	bne.n	800e7f4 <HAL_TIM_ConfigClockSource+0x18>
 800e7f0:	2302      	movs	r3, #2
 800e7f2:	e0a6      	b.n	800e942 <HAL_TIM_ConfigClockSource+0x166>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2202      	movs	r2, #2
 800e800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	689b      	ldr	r3, [r3, #8]
 800e80a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e80c:	68fa      	ldr	r2, [r7, #12]
 800e80e:	4b4f      	ldr	r3, [pc, #316]	; (800e94c <HAL_TIM_ConfigClockSource+0x170>)
 800e810:	4013      	ands	r3, r2
 800e812:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e81a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	68fa      	ldr	r2, [r7, #12]
 800e822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	2b40      	cmp	r3, #64	; 0x40
 800e82a:	d067      	beq.n	800e8fc <HAL_TIM_ConfigClockSource+0x120>
 800e82c:	2b40      	cmp	r3, #64	; 0x40
 800e82e:	d80b      	bhi.n	800e848 <HAL_TIM_ConfigClockSource+0x6c>
 800e830:	2b10      	cmp	r3, #16
 800e832:	d073      	beq.n	800e91c <HAL_TIM_ConfigClockSource+0x140>
 800e834:	2b10      	cmp	r3, #16
 800e836:	d802      	bhi.n	800e83e <HAL_TIM_ConfigClockSource+0x62>
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d06f      	beq.n	800e91c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e83c:	e078      	b.n	800e930 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e83e:	2b20      	cmp	r3, #32
 800e840:	d06c      	beq.n	800e91c <HAL_TIM_ConfigClockSource+0x140>
 800e842:	2b30      	cmp	r3, #48	; 0x30
 800e844:	d06a      	beq.n	800e91c <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e846:	e073      	b.n	800e930 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e848:	2b70      	cmp	r3, #112	; 0x70
 800e84a:	d00d      	beq.n	800e868 <HAL_TIM_ConfigClockSource+0x8c>
 800e84c:	2b70      	cmp	r3, #112	; 0x70
 800e84e:	d804      	bhi.n	800e85a <HAL_TIM_ConfigClockSource+0x7e>
 800e850:	2b50      	cmp	r3, #80	; 0x50
 800e852:	d033      	beq.n	800e8bc <HAL_TIM_ConfigClockSource+0xe0>
 800e854:	2b60      	cmp	r3, #96	; 0x60
 800e856:	d041      	beq.n	800e8dc <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e858:	e06a      	b.n	800e930 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e85a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e85e:	d066      	beq.n	800e92e <HAL_TIM_ConfigClockSource+0x152>
 800e860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e864:	d017      	beq.n	800e896 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e866:	e063      	b.n	800e930 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6818      	ldr	r0, [r3, #0]
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	6899      	ldr	r1, [r3, #8]
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	685a      	ldr	r2, [r3, #4]
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	f000 fc0a 	bl	800f090 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	689b      	ldr	r3, [r3, #8]
 800e882:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e88a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	68fa      	ldr	r2, [r7, #12]
 800e892:	609a      	str	r2, [r3, #8]
      break;
 800e894:	e04c      	b.n	800e930 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6818      	ldr	r0, [r3, #0]
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	6899      	ldr	r1, [r3, #8]
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	685a      	ldr	r2, [r3, #4]
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	f000 fbf3 	bl	800f090 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	689a      	ldr	r2, [r3, #8]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e8b8:	609a      	str	r2, [r3, #8]
      break;
 800e8ba:	e039      	b.n	800e930 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6818      	ldr	r0, [r3, #0]
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	6859      	ldr	r1, [r3, #4]
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	f000 fb67 	bl	800ef9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	2150      	movs	r1, #80	; 0x50
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f000 fbc0 	bl	800f05a <TIM_ITRx_SetConfig>
      break;
 800e8da:	e029      	b.n	800e930 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6818      	ldr	r0, [r3, #0]
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	6859      	ldr	r1, [r3, #4]
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	68db      	ldr	r3, [r3, #12]
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	f000 fb86 	bl	800effa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	2160      	movs	r1, #96	; 0x60
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f000 fbb0 	bl	800f05a <TIM_ITRx_SetConfig>
      break;
 800e8fa:	e019      	b.n	800e930 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6818      	ldr	r0, [r3, #0]
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	6859      	ldr	r1, [r3, #4]
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	461a      	mov	r2, r3
 800e90a:	f000 fb47 	bl	800ef9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	2140      	movs	r1, #64	; 0x40
 800e914:	4618      	mov	r0, r3
 800e916:	f000 fba0 	bl	800f05a <TIM_ITRx_SetConfig>
      break;
 800e91a:	e009      	b.n	800e930 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681a      	ldr	r2, [r3, #0]
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4619      	mov	r1, r3
 800e926:	4610      	mov	r0, r2
 800e928:	f000 fb97 	bl	800f05a <TIM_ITRx_SetConfig>
      break;
 800e92c:	e000      	b.n	800e930 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e92e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2201      	movs	r2, #1
 800e934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2200      	movs	r2, #0
 800e93c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e940:	2300      	movs	r3, #0
}
 800e942:	4618      	mov	r0, r3
 800e944:	3710      	adds	r7, #16
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	fffeff88 	.word	0xfffeff88

0800e950 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e958:	bf00      	nop
 800e95a:	370c      	adds	r7, #12
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr

0800e964 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e96c:	bf00      	nop
 800e96e:	370c      	adds	r7, #12
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr

0800e978 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e978:	b480      	push	{r7}
 800e97a:	b083      	sub	sp, #12
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e980:	bf00      	nop
 800e982:	370c      	adds	r7, #12
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr

0800e98c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e98c:	b480      	push	{r7}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e994:	bf00      	nop
 800e996:	370c      	adds	r7, #12
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr

0800e9a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b085      	sub	sp, #20
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	4a40      	ldr	r2, [pc, #256]	; (800eab4 <TIM_Base_SetConfig+0x114>)
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d013      	beq.n	800e9e0 <TIM_Base_SetConfig+0x40>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9be:	d00f      	beq.n	800e9e0 <TIM_Base_SetConfig+0x40>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	4a3d      	ldr	r2, [pc, #244]	; (800eab8 <TIM_Base_SetConfig+0x118>)
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d00b      	beq.n	800e9e0 <TIM_Base_SetConfig+0x40>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	4a3c      	ldr	r2, [pc, #240]	; (800eabc <TIM_Base_SetConfig+0x11c>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d007      	beq.n	800e9e0 <TIM_Base_SetConfig+0x40>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	4a3b      	ldr	r2, [pc, #236]	; (800eac0 <TIM_Base_SetConfig+0x120>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d003      	beq.n	800e9e0 <TIM_Base_SetConfig+0x40>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4a3a      	ldr	r2, [pc, #232]	; (800eac4 <TIM_Base_SetConfig+0x124>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d108      	bne.n	800e9f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	4313      	orrs	r3, r2
 800e9f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	4a2f      	ldr	r2, [pc, #188]	; (800eab4 <TIM_Base_SetConfig+0x114>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d02b      	beq.n	800ea52 <TIM_Base_SetConfig+0xb2>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea00:	d027      	beq.n	800ea52 <TIM_Base_SetConfig+0xb2>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	4a2c      	ldr	r2, [pc, #176]	; (800eab8 <TIM_Base_SetConfig+0x118>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d023      	beq.n	800ea52 <TIM_Base_SetConfig+0xb2>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	4a2b      	ldr	r2, [pc, #172]	; (800eabc <TIM_Base_SetConfig+0x11c>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d01f      	beq.n	800ea52 <TIM_Base_SetConfig+0xb2>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4a2a      	ldr	r2, [pc, #168]	; (800eac0 <TIM_Base_SetConfig+0x120>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d01b      	beq.n	800ea52 <TIM_Base_SetConfig+0xb2>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	4a29      	ldr	r2, [pc, #164]	; (800eac4 <TIM_Base_SetConfig+0x124>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d017      	beq.n	800ea52 <TIM_Base_SetConfig+0xb2>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	4a28      	ldr	r2, [pc, #160]	; (800eac8 <TIM_Base_SetConfig+0x128>)
 800ea26:	4293      	cmp	r3, r2
 800ea28:	d013      	beq.n	800ea52 <TIM_Base_SetConfig+0xb2>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	4a27      	ldr	r2, [pc, #156]	; (800eacc <TIM_Base_SetConfig+0x12c>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d00f      	beq.n	800ea52 <TIM_Base_SetConfig+0xb2>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	4a26      	ldr	r2, [pc, #152]	; (800ead0 <TIM_Base_SetConfig+0x130>)
 800ea36:	4293      	cmp	r3, r2
 800ea38:	d00b      	beq.n	800ea52 <TIM_Base_SetConfig+0xb2>
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	4a25      	ldr	r2, [pc, #148]	; (800ead4 <TIM_Base_SetConfig+0x134>)
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	d007      	beq.n	800ea52 <TIM_Base_SetConfig+0xb2>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	4a24      	ldr	r2, [pc, #144]	; (800ead8 <TIM_Base_SetConfig+0x138>)
 800ea46:	4293      	cmp	r3, r2
 800ea48:	d003      	beq.n	800ea52 <TIM_Base_SetConfig+0xb2>
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	4a23      	ldr	r2, [pc, #140]	; (800eadc <TIM_Base_SetConfig+0x13c>)
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	d108      	bne.n	800ea64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	68db      	ldr	r3, [r3, #12]
 800ea5e:	68fa      	ldr	r2, [r7, #12]
 800ea60:	4313      	orrs	r3, r2
 800ea62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	695b      	ldr	r3, [r3, #20]
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	68fa      	ldr	r2, [r7, #12]
 800ea76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	689a      	ldr	r2, [r3, #8]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	4a0a      	ldr	r2, [pc, #40]	; (800eab4 <TIM_Base_SetConfig+0x114>)
 800ea8c:	4293      	cmp	r3, r2
 800ea8e:	d003      	beq.n	800ea98 <TIM_Base_SetConfig+0xf8>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	4a0c      	ldr	r2, [pc, #48]	; (800eac4 <TIM_Base_SetConfig+0x124>)
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d103      	bne.n	800eaa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	691a      	ldr	r2, [r3, #16]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	615a      	str	r2, [r3, #20]
}
 800eaa6:	bf00      	nop
 800eaa8:	3714      	adds	r7, #20
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr
 800eab2:	bf00      	nop
 800eab4:	40010000 	.word	0x40010000
 800eab8:	40000400 	.word	0x40000400
 800eabc:	40000800 	.word	0x40000800
 800eac0:	40000c00 	.word	0x40000c00
 800eac4:	40010400 	.word	0x40010400
 800eac8:	40014000 	.word	0x40014000
 800eacc:	40014400 	.word	0x40014400
 800ead0:	40014800 	.word	0x40014800
 800ead4:	40001800 	.word	0x40001800
 800ead8:	40001c00 	.word	0x40001c00
 800eadc:	40002000 	.word	0x40002000

0800eae0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b087      	sub	sp, #28
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6a1b      	ldr	r3, [r3, #32]
 800eaee:	f023 0201 	bic.w	r2, r3, #1
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6a1b      	ldr	r3, [r3, #32]
 800eafa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	699b      	ldr	r3, [r3, #24]
 800eb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800eb08:	68fa      	ldr	r2, [r7, #12]
 800eb0a:	4b2b      	ldr	r3, [pc, #172]	; (800ebb8 <TIM_OC1_SetConfig+0xd8>)
 800eb0c:	4013      	ands	r3, r2
 800eb0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f023 0303 	bic.w	r3, r3, #3
 800eb16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	68fa      	ldr	r2, [r7, #12]
 800eb1e:	4313      	orrs	r3, r2
 800eb20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	f023 0302 	bic.w	r3, r3, #2
 800eb28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	689b      	ldr	r3, [r3, #8]
 800eb2e:	697a      	ldr	r2, [r7, #20]
 800eb30:	4313      	orrs	r3, r2
 800eb32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	4a21      	ldr	r2, [pc, #132]	; (800ebbc <TIM_OC1_SetConfig+0xdc>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d003      	beq.n	800eb44 <TIM_OC1_SetConfig+0x64>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4a20      	ldr	r2, [pc, #128]	; (800ebc0 <TIM_OC1_SetConfig+0xe0>)
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d10c      	bne.n	800eb5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	f023 0308 	bic.w	r3, r3, #8
 800eb4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	697a      	ldr	r2, [r7, #20]
 800eb52:	4313      	orrs	r3, r2
 800eb54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	f023 0304 	bic.w	r3, r3, #4
 800eb5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	4a16      	ldr	r2, [pc, #88]	; (800ebbc <TIM_OC1_SetConfig+0xdc>)
 800eb62:	4293      	cmp	r3, r2
 800eb64:	d003      	beq.n	800eb6e <TIM_OC1_SetConfig+0x8e>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	4a15      	ldr	r2, [pc, #84]	; (800ebc0 <TIM_OC1_SetConfig+0xe0>)
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d111      	bne.n	800eb92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eb74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eb7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	695b      	ldr	r3, [r3, #20]
 800eb82:	693a      	ldr	r2, [r7, #16]
 800eb84:	4313      	orrs	r3, r2
 800eb86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	699b      	ldr	r3, [r3, #24]
 800eb8c:	693a      	ldr	r2, [r7, #16]
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	693a      	ldr	r2, [r7, #16]
 800eb96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	68fa      	ldr	r2, [r7, #12]
 800eb9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	685a      	ldr	r2, [r3, #4]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	697a      	ldr	r2, [r7, #20]
 800ebaa:	621a      	str	r2, [r3, #32]
}
 800ebac:	bf00      	nop
 800ebae:	371c      	adds	r7, #28
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr
 800ebb8:	fffeff8f 	.word	0xfffeff8f
 800ebbc:	40010000 	.word	0x40010000
 800ebc0:	40010400 	.word	0x40010400

0800ebc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b087      	sub	sp, #28
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6a1b      	ldr	r3, [r3, #32]
 800ebd2:	f023 0210 	bic.w	r2, r3, #16
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6a1b      	ldr	r3, [r3, #32]
 800ebde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	699b      	ldr	r3, [r3, #24]
 800ebea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ebec:	68fa      	ldr	r2, [r7, #12]
 800ebee:	4b2e      	ldr	r3, [pc, #184]	; (800eca8 <TIM_OC2_SetConfig+0xe4>)
 800ebf0:	4013      	ands	r3, r2
 800ebf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ebfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	021b      	lsls	r3, r3, #8
 800ec02:	68fa      	ldr	r2, [r7, #12]
 800ec04:	4313      	orrs	r3, r2
 800ec06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	f023 0320 	bic.w	r3, r3, #32
 800ec0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	689b      	ldr	r3, [r3, #8]
 800ec14:	011b      	lsls	r3, r3, #4
 800ec16:	697a      	ldr	r2, [r7, #20]
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	4a23      	ldr	r2, [pc, #140]	; (800ecac <TIM_OC2_SetConfig+0xe8>)
 800ec20:	4293      	cmp	r3, r2
 800ec22:	d003      	beq.n	800ec2c <TIM_OC2_SetConfig+0x68>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	4a22      	ldr	r2, [pc, #136]	; (800ecb0 <TIM_OC2_SetConfig+0xec>)
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	d10d      	bne.n	800ec48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	011b      	lsls	r3, r3, #4
 800ec3a:	697a      	ldr	r2, [r7, #20]
 800ec3c:	4313      	orrs	r3, r2
 800ec3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	4a18      	ldr	r2, [pc, #96]	; (800ecac <TIM_OC2_SetConfig+0xe8>)
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d003      	beq.n	800ec58 <TIM_OC2_SetConfig+0x94>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	4a17      	ldr	r2, [pc, #92]	; (800ecb0 <TIM_OC2_SetConfig+0xec>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d113      	bne.n	800ec80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ec5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ec66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	695b      	ldr	r3, [r3, #20]
 800ec6c:	009b      	lsls	r3, r3, #2
 800ec6e:	693a      	ldr	r2, [r7, #16]
 800ec70:	4313      	orrs	r3, r2
 800ec72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	699b      	ldr	r3, [r3, #24]
 800ec78:	009b      	lsls	r3, r3, #2
 800ec7a:	693a      	ldr	r2, [r7, #16]
 800ec7c:	4313      	orrs	r3, r2
 800ec7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	693a      	ldr	r2, [r7, #16]
 800ec84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	68fa      	ldr	r2, [r7, #12]
 800ec8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	685a      	ldr	r2, [r3, #4]
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	697a      	ldr	r2, [r7, #20]
 800ec98:	621a      	str	r2, [r3, #32]
}
 800ec9a:	bf00      	nop
 800ec9c:	371c      	adds	r7, #28
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr
 800eca6:	bf00      	nop
 800eca8:	feff8fff 	.word	0xfeff8fff
 800ecac:	40010000 	.word	0x40010000
 800ecb0:	40010400 	.word	0x40010400

0800ecb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b087      	sub	sp, #28
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6a1b      	ldr	r3, [r3, #32]
 800ecc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6a1b      	ldr	r3, [r3, #32]
 800ecce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	69db      	ldr	r3, [r3, #28]
 800ecda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ecdc:	68fa      	ldr	r2, [r7, #12]
 800ecde:	4b2d      	ldr	r3, [pc, #180]	; (800ed94 <TIM_OC3_SetConfig+0xe0>)
 800ece0:	4013      	ands	r3, r2
 800ece2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f023 0303 	bic.w	r3, r3, #3
 800ecea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	68fa      	ldr	r2, [r7, #12]
 800ecf2:	4313      	orrs	r3, r2
 800ecf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ecfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	689b      	ldr	r3, [r3, #8]
 800ed02:	021b      	lsls	r3, r3, #8
 800ed04:	697a      	ldr	r2, [r7, #20]
 800ed06:	4313      	orrs	r3, r2
 800ed08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	4a22      	ldr	r2, [pc, #136]	; (800ed98 <TIM_OC3_SetConfig+0xe4>)
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d003      	beq.n	800ed1a <TIM_OC3_SetConfig+0x66>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	4a21      	ldr	r2, [pc, #132]	; (800ed9c <TIM_OC3_SetConfig+0xe8>)
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d10d      	bne.n	800ed36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ed20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	68db      	ldr	r3, [r3, #12]
 800ed26:	021b      	lsls	r3, r3, #8
 800ed28:	697a      	ldr	r2, [r7, #20]
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ed34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	4a17      	ldr	r2, [pc, #92]	; (800ed98 <TIM_OC3_SetConfig+0xe4>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d003      	beq.n	800ed46 <TIM_OC3_SetConfig+0x92>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	4a16      	ldr	r2, [pc, #88]	; (800ed9c <TIM_OC3_SetConfig+0xe8>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d113      	bne.n	800ed6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ed4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ed54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	695b      	ldr	r3, [r3, #20]
 800ed5a:	011b      	lsls	r3, r3, #4
 800ed5c:	693a      	ldr	r2, [r7, #16]
 800ed5e:	4313      	orrs	r3, r2
 800ed60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	699b      	ldr	r3, [r3, #24]
 800ed66:	011b      	lsls	r3, r3, #4
 800ed68:	693a      	ldr	r2, [r7, #16]
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	693a      	ldr	r2, [r7, #16]
 800ed72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	68fa      	ldr	r2, [r7, #12]
 800ed78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	685a      	ldr	r2, [r3, #4]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	697a      	ldr	r2, [r7, #20]
 800ed86:	621a      	str	r2, [r3, #32]
}
 800ed88:	bf00      	nop
 800ed8a:	371c      	adds	r7, #28
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr
 800ed94:	fffeff8f 	.word	0xfffeff8f
 800ed98:	40010000 	.word	0x40010000
 800ed9c:	40010400 	.word	0x40010400

0800eda0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b087      	sub	sp, #28
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6a1b      	ldr	r3, [r3, #32]
 800edae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6a1b      	ldr	r3, [r3, #32]
 800edba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	69db      	ldr	r3, [r3, #28]
 800edc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800edc8:	68fa      	ldr	r2, [r7, #12]
 800edca:	4b1e      	ldr	r3, [pc, #120]	; (800ee44 <TIM_OC4_SetConfig+0xa4>)
 800edcc:	4013      	ands	r3, r2
 800edce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800edd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	021b      	lsls	r3, r3, #8
 800edde:	68fa      	ldr	r2, [r7, #12]
 800ede0:	4313      	orrs	r3, r2
 800ede2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800edea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	031b      	lsls	r3, r3, #12
 800edf2:	693a      	ldr	r2, [r7, #16]
 800edf4:	4313      	orrs	r3, r2
 800edf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	4a13      	ldr	r2, [pc, #76]	; (800ee48 <TIM_OC4_SetConfig+0xa8>)
 800edfc:	4293      	cmp	r3, r2
 800edfe:	d003      	beq.n	800ee08 <TIM_OC4_SetConfig+0x68>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	4a12      	ldr	r2, [pc, #72]	; (800ee4c <TIM_OC4_SetConfig+0xac>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d109      	bne.n	800ee1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ee0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	695b      	ldr	r3, [r3, #20]
 800ee14:	019b      	lsls	r3, r3, #6
 800ee16:	697a      	ldr	r2, [r7, #20]
 800ee18:	4313      	orrs	r3, r2
 800ee1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	697a      	ldr	r2, [r7, #20]
 800ee20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	68fa      	ldr	r2, [r7, #12]
 800ee26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	685a      	ldr	r2, [r3, #4]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	693a      	ldr	r2, [r7, #16]
 800ee34:	621a      	str	r2, [r3, #32]
}
 800ee36:	bf00      	nop
 800ee38:	371c      	adds	r7, #28
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee40:	4770      	bx	lr
 800ee42:	bf00      	nop
 800ee44:	feff8fff 	.word	0xfeff8fff
 800ee48:	40010000 	.word	0x40010000
 800ee4c:	40010400 	.word	0x40010400

0800ee50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b087      	sub	sp, #28
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6a1b      	ldr	r3, [r3, #32]
 800ee5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6a1b      	ldr	r3, [r3, #32]
 800ee6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ee78:	68fa      	ldr	r2, [r7, #12]
 800ee7a:	4b1b      	ldr	r3, [pc, #108]	; (800eee8 <TIM_OC5_SetConfig+0x98>)
 800ee7c:	4013      	ands	r3, r2
 800ee7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	68fa      	ldr	r2, [r7, #12]
 800ee86:	4313      	orrs	r3, r2
 800ee88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ee90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	689b      	ldr	r3, [r3, #8]
 800ee96:	041b      	lsls	r3, r3, #16
 800ee98:	693a      	ldr	r2, [r7, #16]
 800ee9a:	4313      	orrs	r3, r2
 800ee9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	4a12      	ldr	r2, [pc, #72]	; (800eeec <TIM_OC5_SetConfig+0x9c>)
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d003      	beq.n	800eeae <TIM_OC5_SetConfig+0x5e>
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	4a11      	ldr	r2, [pc, #68]	; (800eef0 <TIM_OC5_SetConfig+0xa0>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d109      	bne.n	800eec2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eeb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	695b      	ldr	r3, [r3, #20]
 800eeba:	021b      	lsls	r3, r3, #8
 800eebc:	697a      	ldr	r2, [r7, #20]
 800eebe:	4313      	orrs	r3, r2
 800eec0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	697a      	ldr	r2, [r7, #20]
 800eec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	685a      	ldr	r2, [r3, #4]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	693a      	ldr	r2, [r7, #16]
 800eeda:	621a      	str	r2, [r3, #32]
}
 800eedc:	bf00      	nop
 800eede:	371c      	adds	r7, #28
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr
 800eee8:	fffeff8f 	.word	0xfffeff8f
 800eeec:	40010000 	.word	0x40010000
 800eef0:	40010400 	.word	0x40010400

0800eef4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800eef4:	b480      	push	{r7}
 800eef6:	b087      	sub	sp, #28
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6a1b      	ldr	r3, [r3, #32]
 800ef02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6a1b      	ldr	r3, [r3, #32]
 800ef0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ef1c:	68fa      	ldr	r2, [r7, #12]
 800ef1e:	4b1c      	ldr	r3, [pc, #112]	; (800ef90 <TIM_OC6_SetConfig+0x9c>)
 800ef20:	4013      	ands	r3, r2
 800ef22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	021b      	lsls	r3, r3, #8
 800ef2a:	68fa      	ldr	r2, [r7, #12]
 800ef2c:	4313      	orrs	r3, r2
 800ef2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ef36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	689b      	ldr	r3, [r3, #8]
 800ef3c:	051b      	lsls	r3, r3, #20
 800ef3e:	693a      	ldr	r2, [r7, #16]
 800ef40:	4313      	orrs	r3, r2
 800ef42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	4a13      	ldr	r2, [pc, #76]	; (800ef94 <TIM_OC6_SetConfig+0xa0>)
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	d003      	beq.n	800ef54 <TIM_OC6_SetConfig+0x60>
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	4a12      	ldr	r2, [pc, #72]	; (800ef98 <TIM_OC6_SetConfig+0xa4>)
 800ef50:	4293      	cmp	r3, r2
 800ef52:	d109      	bne.n	800ef68 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ef5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	695b      	ldr	r3, [r3, #20]
 800ef60:	029b      	lsls	r3, r3, #10
 800ef62:	697a      	ldr	r2, [r7, #20]
 800ef64:	4313      	orrs	r3, r2
 800ef66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	697a      	ldr	r2, [r7, #20]
 800ef6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	68fa      	ldr	r2, [r7, #12]
 800ef72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	685a      	ldr	r2, [r3, #4]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	693a      	ldr	r2, [r7, #16]
 800ef80:	621a      	str	r2, [r3, #32]
}
 800ef82:	bf00      	nop
 800ef84:	371c      	adds	r7, #28
 800ef86:	46bd      	mov	sp, r7
 800ef88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8c:	4770      	bx	lr
 800ef8e:	bf00      	nop
 800ef90:	feff8fff 	.word	0xfeff8fff
 800ef94:	40010000 	.word	0x40010000
 800ef98:	40010400 	.word	0x40010400

0800ef9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b087      	sub	sp, #28
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	60f8      	str	r0, [r7, #12]
 800efa4:	60b9      	str	r1, [r7, #8]
 800efa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	6a1b      	ldr	r3, [r3, #32]
 800efac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	6a1b      	ldr	r3, [r3, #32]
 800efb2:	f023 0201 	bic.w	r2, r3, #1
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	699b      	ldr	r3, [r3, #24]
 800efbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800efc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	011b      	lsls	r3, r3, #4
 800efcc:	693a      	ldr	r2, [r7, #16]
 800efce:	4313      	orrs	r3, r2
 800efd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	f023 030a 	bic.w	r3, r3, #10
 800efd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800efda:	697a      	ldr	r2, [r7, #20]
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	4313      	orrs	r3, r2
 800efe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	693a      	ldr	r2, [r7, #16]
 800efe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	697a      	ldr	r2, [r7, #20]
 800efec:	621a      	str	r2, [r3, #32]
}
 800efee:	bf00      	nop
 800eff0:	371c      	adds	r7, #28
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr

0800effa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800effa:	b480      	push	{r7}
 800effc:	b087      	sub	sp, #28
 800effe:	af00      	add	r7, sp, #0
 800f000:	60f8      	str	r0, [r7, #12]
 800f002:	60b9      	str	r1, [r7, #8]
 800f004:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	6a1b      	ldr	r3, [r3, #32]
 800f00a:	f023 0210 	bic.w	r2, r3, #16
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	699b      	ldr	r3, [r3, #24]
 800f016:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	6a1b      	ldr	r3, [r3, #32]
 800f01c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	031b      	lsls	r3, r3, #12
 800f02a:	697a      	ldr	r2, [r7, #20]
 800f02c:	4313      	orrs	r3, r2
 800f02e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f036:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	011b      	lsls	r3, r3, #4
 800f03c:	693a      	ldr	r2, [r7, #16]
 800f03e:	4313      	orrs	r3, r2
 800f040:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	697a      	ldr	r2, [r7, #20]
 800f046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	693a      	ldr	r2, [r7, #16]
 800f04c:	621a      	str	r2, [r3, #32]
}
 800f04e:	bf00      	nop
 800f050:	371c      	adds	r7, #28
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr

0800f05a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f05a:	b480      	push	{r7}
 800f05c:	b085      	sub	sp, #20
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
 800f062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	689b      	ldr	r3, [r3, #8]
 800f068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f072:	683a      	ldr	r2, [r7, #0]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	4313      	orrs	r3, r2
 800f078:	f043 0307 	orr.w	r3, r3, #7
 800f07c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	68fa      	ldr	r2, [r7, #12]
 800f082:	609a      	str	r2, [r3, #8]
}
 800f084:	bf00      	nop
 800f086:	3714      	adds	r7, #20
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr

0800f090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f090:	b480      	push	{r7}
 800f092:	b087      	sub	sp, #28
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	607a      	str	r2, [r7, #4]
 800f09c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	689b      	ldr	r3, [r3, #8]
 800f0a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f0aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	021a      	lsls	r2, r3, #8
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	431a      	orrs	r2, r3
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	4313      	orrs	r3, r2
 800f0b8:	697a      	ldr	r2, [r7, #20]
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	697a      	ldr	r2, [r7, #20]
 800f0c2:	609a      	str	r2, [r3, #8]
}
 800f0c4:	bf00      	nop
 800f0c6:	371c      	adds	r7, #28
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr

0800f0d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b085      	sub	sp, #20
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d101      	bne.n	800f0e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f0e4:	2302      	movs	r3, #2
 800f0e6:	e06d      	b.n	800f1c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2202      	movs	r2, #2
 800f0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	689b      	ldr	r3, [r3, #8]
 800f106:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	4a30      	ldr	r2, [pc, #192]	; (800f1d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f10e:	4293      	cmp	r3, r2
 800f110:	d004      	beq.n	800f11c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	4a2f      	ldr	r2, [pc, #188]	; (800f1d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f118:	4293      	cmp	r3, r2
 800f11a:	d108      	bne.n	800f12e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f122:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	68fa      	ldr	r2, [r7, #12]
 800f12a:	4313      	orrs	r3, r2
 800f12c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f134:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	68fa      	ldr	r2, [r7, #12]
 800f13c:	4313      	orrs	r3, r2
 800f13e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	68fa      	ldr	r2, [r7, #12]
 800f146:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	4a20      	ldr	r2, [pc, #128]	; (800f1d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d022      	beq.n	800f198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f15a:	d01d      	beq.n	800f198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	4a1d      	ldr	r2, [pc, #116]	; (800f1d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f162:	4293      	cmp	r3, r2
 800f164:	d018      	beq.n	800f198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	4a1c      	ldr	r2, [pc, #112]	; (800f1dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f16c:	4293      	cmp	r3, r2
 800f16e:	d013      	beq.n	800f198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	4a1a      	ldr	r2, [pc, #104]	; (800f1e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f176:	4293      	cmp	r3, r2
 800f178:	d00e      	beq.n	800f198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	4a15      	ldr	r2, [pc, #84]	; (800f1d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f180:	4293      	cmp	r3, r2
 800f182:	d009      	beq.n	800f198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4a16      	ldr	r2, [pc, #88]	; (800f1e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d004      	beq.n	800f198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	4a15      	ldr	r2, [pc, #84]	; (800f1e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d10c      	bne.n	800f1b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f19e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	689b      	ldr	r3, [r3, #8]
 800f1a4:	68ba      	ldr	r2, [r7, #8]
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	68ba      	ldr	r2, [r7, #8]
 800f1b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f1c2:	2300      	movs	r3, #0
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3714      	adds	r7, #20
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr
 800f1d0:	40010000 	.word	0x40010000
 800f1d4:	40010400 	.word	0x40010400
 800f1d8:	40000400 	.word	0x40000400
 800f1dc:	40000800 	.word	0x40000800
 800f1e0:	40000c00 	.word	0x40000c00
 800f1e4:	40014000 	.word	0x40014000
 800f1e8:	40001800 	.word	0x40001800

0800f1ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f1f4:	bf00      	nop
 800f1f6:	370c      	adds	r7, #12
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fe:	4770      	bx	lr

0800f200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f200:	b480      	push	{r7}
 800f202:	b083      	sub	sp, #12
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f208:	bf00      	nop
 800f20a:	370c      	adds	r7, #12
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr

0800f214 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f214:	b480      	push	{r7}
 800f216:	b083      	sub	sp, #12
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f21c:	bf00      	nop
 800f21e:	370c      	adds	r7, #12
 800f220:	46bd      	mov	sp, r7
 800f222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f226:	4770      	bx	lr

0800f228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d101      	bne.n	800f23a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f236:	2301      	movs	r3, #1
 800f238:	e040      	b.n	800f2bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d106      	bne.n	800f250 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2200      	movs	r2, #0
 800f246:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f7f9 fa32 	bl	80086b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2224      	movs	r2, #36	; 0x24
 800f254:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	681a      	ldr	r2, [r3, #0]
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	f022 0201 	bic.w	r2, r2, #1
 800f264:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 f98a 	bl	800f580 <UART_SetConfig>
 800f26c:	4603      	mov	r3, r0
 800f26e:	2b01      	cmp	r3, #1
 800f270:	d101      	bne.n	800f276 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f272:	2301      	movs	r3, #1
 800f274:	e022      	b.n	800f2bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d002      	beq.n	800f284 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 fc28 	bl	800fad4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	685a      	ldr	r2, [r3, #4]
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	689a      	ldr	r2, [r3, #8]
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f2a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	681a      	ldr	r2, [r3, #0]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f042 0201 	orr.w	r2, r2, #1
 800f2b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 fcaf 	bl	800fc18 <UART_CheckIdleState>
 800f2ba:	4603      	mov	r3, r0
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3708      	adds	r7, #8
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}

0800f2c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b08a      	sub	sp, #40	; 0x28
 800f2c8:	af02      	add	r7, sp, #8
 800f2ca:	60f8      	str	r0, [r7, #12]
 800f2cc:	60b9      	str	r1, [r7, #8]
 800f2ce:	603b      	str	r3, [r7, #0]
 800f2d0:	4613      	mov	r3, r2
 800f2d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2d8:	2b20      	cmp	r3, #32
 800f2da:	d17f      	bne.n	800f3dc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d002      	beq.n	800f2e8 <HAL_UART_Transmit+0x24>
 800f2e2:	88fb      	ldrh	r3, [r7, #6]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d101      	bne.n	800f2ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	e078      	b.n	800f3de <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f2f2:	2b01      	cmp	r3, #1
 800f2f4:	d101      	bne.n	800f2fa <HAL_UART_Transmit+0x36>
 800f2f6:	2302      	movs	r3, #2
 800f2f8:	e071      	b.n	800f3de <HAL_UART_Transmit+0x11a>
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2200      	movs	r2, #0
 800f306:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2221      	movs	r2, #33	; 0x21
 800f30c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800f30e:	f7fa f8b5 	bl	800947c <HAL_GetTick>
 800f312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	88fa      	ldrh	r2, [r7, #6]
 800f318:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	88fa      	ldrh	r2, [r7, #6]
 800f320:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	689b      	ldr	r3, [r3, #8]
 800f328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f32c:	d108      	bne.n	800f340 <HAL_UART_Transmit+0x7c>
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	691b      	ldr	r3, [r3, #16]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d104      	bne.n	800f340 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800f336:	2300      	movs	r3, #0
 800f338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	61bb      	str	r3, [r7, #24]
 800f33e:	e003      	b.n	800f348 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f344:	2300      	movs	r3, #0
 800f346:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2200      	movs	r2, #0
 800f34c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800f350:	e02c      	b.n	800f3ac <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	9300      	str	r3, [sp, #0]
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	2200      	movs	r2, #0
 800f35a:	2180      	movs	r1, #128	; 0x80
 800f35c:	68f8      	ldr	r0, [r7, #12]
 800f35e:	f000 fca0 	bl	800fca2 <UART_WaitOnFlagUntilTimeout>
 800f362:	4603      	mov	r3, r0
 800f364:	2b00      	cmp	r3, #0
 800f366:	d001      	beq.n	800f36c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800f368:	2303      	movs	r3, #3
 800f36a:	e038      	b.n	800f3de <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d10b      	bne.n	800f38a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f372:	69bb      	ldr	r3, [r7, #24]
 800f374:	881b      	ldrh	r3, [r3, #0]
 800f376:	461a      	mov	r2, r3
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f380:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f382:	69bb      	ldr	r3, [r7, #24]
 800f384:	3302      	adds	r3, #2
 800f386:	61bb      	str	r3, [r7, #24]
 800f388:	e007      	b.n	800f39a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	781a      	ldrb	r2, [r3, #0]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f394:	69fb      	ldr	r3, [r7, #28]
 800f396:	3301      	adds	r3, #1
 800f398:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	3b01      	subs	r3, #1
 800f3a4:	b29a      	uxth	r2, r3
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f3b2:	b29b      	uxth	r3, r3
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d1cc      	bne.n	800f352 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	9300      	str	r3, [sp, #0]
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	2140      	movs	r1, #64	; 0x40
 800f3c2:	68f8      	ldr	r0, [r7, #12]
 800f3c4:	f000 fc6d 	bl	800fca2 <UART_WaitOnFlagUntilTimeout>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d001      	beq.n	800f3d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800f3ce:	2303      	movs	r3, #3
 800f3d0:	e005      	b.n	800f3de <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	2220      	movs	r2, #32
 800f3d6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	e000      	b.n	800f3de <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800f3dc:	2302      	movs	r3, #2
  }
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3720      	adds	r7, #32
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}

0800f3e6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b08a      	sub	sp, #40	; 0x28
 800f3ea:	af02      	add	r7, sp, #8
 800f3ec:	60f8      	str	r0, [r7, #12]
 800f3ee:	60b9      	str	r1, [r7, #8]
 800f3f0:	603b      	str	r3, [r7, #0]
 800f3f2:	4613      	mov	r3, r2
 800f3f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3fa:	2b20      	cmp	r3, #32
 800f3fc:	f040 80ba 	bne.w	800f574 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d002      	beq.n	800f40c <HAL_UART_Receive+0x26>
 800f406:	88fb      	ldrh	r3, [r7, #6]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d101      	bne.n	800f410 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800f40c:	2301      	movs	r3, #1
 800f40e:	e0b2      	b.n	800f576 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f416:	2b01      	cmp	r3, #1
 800f418:	d101      	bne.n	800f41e <HAL_UART_Receive+0x38>
 800f41a:	2302      	movs	r3, #2
 800f41c:	e0ab      	b.n	800f576 <HAL_UART_Receive+0x190>
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2201      	movs	r2, #1
 800f422:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2200      	movs	r2, #0
 800f42a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2222      	movs	r2, #34	; 0x22
 800f430:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800f432:	f7fa f823 	bl	800947c <HAL_GetTick>
 800f436:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	88fa      	ldrh	r2, [r7, #6]
 800f43c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	88fa      	ldrh	r2, [r7, #6]
 800f444:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	689b      	ldr	r3, [r3, #8]
 800f44c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f450:	d10e      	bne.n	800f470 <HAL_UART_Receive+0x8a>
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	691b      	ldr	r3, [r3, #16]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d105      	bne.n	800f466 <HAL_UART_Receive+0x80>
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f460:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f464:	e02d      	b.n	800f4c2 <HAL_UART_Receive+0xdc>
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	22ff      	movs	r2, #255	; 0xff
 800f46a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f46e:	e028      	b.n	800f4c2 <HAL_UART_Receive+0xdc>
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	689b      	ldr	r3, [r3, #8]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d10d      	bne.n	800f494 <HAL_UART_Receive+0xae>
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	691b      	ldr	r3, [r3, #16]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d104      	bne.n	800f48a <HAL_UART_Receive+0xa4>
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	22ff      	movs	r2, #255	; 0xff
 800f484:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f488:	e01b      	b.n	800f4c2 <HAL_UART_Receive+0xdc>
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	227f      	movs	r2, #127	; 0x7f
 800f48e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f492:	e016      	b.n	800f4c2 <HAL_UART_Receive+0xdc>
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	689b      	ldr	r3, [r3, #8]
 800f498:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f49c:	d10d      	bne.n	800f4ba <HAL_UART_Receive+0xd4>
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	691b      	ldr	r3, [r3, #16]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d104      	bne.n	800f4b0 <HAL_UART_Receive+0xca>
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	227f      	movs	r2, #127	; 0x7f
 800f4aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f4ae:	e008      	b.n	800f4c2 <HAL_UART_Receive+0xdc>
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	223f      	movs	r2, #63	; 0x3f
 800f4b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f4b8:	e003      	b.n	800f4c2 <HAL_UART_Receive+0xdc>
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f4c8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	689b      	ldr	r3, [r3, #8]
 800f4ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4d2:	d108      	bne.n	800f4e6 <HAL_UART_Receive+0x100>
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	691b      	ldr	r3, [r3, #16]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d104      	bne.n	800f4e6 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	61bb      	str	r3, [r7, #24]
 800f4e4:	e003      	b.n	800f4ee <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f4f6:	e032      	b.n	800f55e <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	9300      	str	r3, [sp, #0]
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	2200      	movs	r2, #0
 800f500:	2120      	movs	r1, #32
 800f502:	68f8      	ldr	r0, [r7, #12]
 800f504:	f000 fbcd 	bl	800fca2 <UART_WaitOnFlagUntilTimeout>
 800f508:	4603      	mov	r3, r0
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d001      	beq.n	800f512 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800f50e:	2303      	movs	r3, #3
 800f510:	e031      	b.n	800f576 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800f512:	69fb      	ldr	r3, [r7, #28]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d10c      	bne.n	800f532 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f51e:	b29a      	uxth	r2, r3
 800f520:	8a7b      	ldrh	r3, [r7, #18]
 800f522:	4013      	ands	r3, r2
 800f524:	b29a      	uxth	r2, r3
 800f526:	69bb      	ldr	r3, [r7, #24]
 800f528:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	3302      	adds	r3, #2
 800f52e:	61bb      	str	r3, [r7, #24]
 800f530:	e00c      	b.n	800f54c <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f538:	b2da      	uxtb	r2, r3
 800f53a:	8a7b      	ldrh	r3, [r7, #18]
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	4013      	ands	r3, r2
 800f540:	b2da      	uxtb	r2, r3
 800f542:	69fb      	ldr	r3, [r7, #28]
 800f544:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	3301      	adds	r3, #1
 800f54a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f552:	b29b      	uxth	r3, r3
 800f554:	3b01      	subs	r3, #1
 800f556:	b29a      	uxth	r2, r3
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f564:	b29b      	uxth	r3, r3
 800f566:	2b00      	cmp	r3, #0
 800f568:	d1c6      	bne.n	800f4f8 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	2220      	movs	r2, #32
 800f56e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800f570:	2300      	movs	r3, #0
 800f572:	e000      	b.n	800f576 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 800f574:	2302      	movs	r3, #2
  }
}
 800f576:	4618      	mov	r0, r3
 800f578:	3720      	adds	r7, #32
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
	...

0800f580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b088      	sub	sp, #32
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800f588:	2300      	movs	r3, #0
 800f58a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800f58c:	2300      	movs	r3, #0
 800f58e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	689a      	ldr	r2, [r3, #8]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	691b      	ldr	r3, [r3, #16]
 800f598:	431a      	orrs	r2, r3
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	695b      	ldr	r3, [r3, #20]
 800f59e:	431a      	orrs	r2, r3
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	69db      	ldr	r3, [r3, #28]
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	4bb1      	ldr	r3, [pc, #708]	; (800f874 <UART_SetConfig+0x2f4>)
 800f5b0:	4013      	ands	r3, r2
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	6812      	ldr	r2, [r2, #0]
 800f5b6:	6939      	ldr	r1, [r7, #16]
 800f5b8:	430b      	orrs	r3, r1
 800f5ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	68da      	ldr	r2, [r3, #12]
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	430a      	orrs	r2, r1
 800f5d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	699b      	ldr	r3, [r3, #24]
 800f5d6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6a1b      	ldr	r3, [r3, #32]
 800f5dc:	693a      	ldr	r2, [r7, #16]
 800f5de:	4313      	orrs	r3, r2
 800f5e0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	689b      	ldr	r3, [r3, #8]
 800f5e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	693a      	ldr	r2, [r7, #16]
 800f5f2:	430a      	orrs	r2, r1
 800f5f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	4a9f      	ldr	r2, [pc, #636]	; (800f878 <UART_SetConfig+0x2f8>)
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d121      	bne.n	800f644 <UART_SetConfig+0xc4>
 800f600:	4b9e      	ldr	r3, [pc, #632]	; (800f87c <UART_SetConfig+0x2fc>)
 800f602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f606:	f003 0303 	and.w	r3, r3, #3
 800f60a:	2b03      	cmp	r3, #3
 800f60c:	d816      	bhi.n	800f63c <UART_SetConfig+0xbc>
 800f60e:	a201      	add	r2, pc, #4	; (adr r2, 800f614 <UART_SetConfig+0x94>)
 800f610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f614:	0800f625 	.word	0x0800f625
 800f618:	0800f631 	.word	0x0800f631
 800f61c:	0800f62b 	.word	0x0800f62b
 800f620:	0800f637 	.word	0x0800f637
 800f624:	2301      	movs	r3, #1
 800f626:	77fb      	strb	r3, [r7, #31]
 800f628:	e151      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f62a:	2302      	movs	r3, #2
 800f62c:	77fb      	strb	r3, [r7, #31]
 800f62e:	e14e      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f630:	2304      	movs	r3, #4
 800f632:	77fb      	strb	r3, [r7, #31]
 800f634:	e14b      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f636:	2308      	movs	r3, #8
 800f638:	77fb      	strb	r3, [r7, #31]
 800f63a:	e148      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f63c:	2310      	movs	r3, #16
 800f63e:	77fb      	strb	r3, [r7, #31]
 800f640:	bf00      	nop
 800f642:	e144      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	4a8d      	ldr	r2, [pc, #564]	; (800f880 <UART_SetConfig+0x300>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d134      	bne.n	800f6b8 <UART_SetConfig+0x138>
 800f64e:	4b8b      	ldr	r3, [pc, #556]	; (800f87c <UART_SetConfig+0x2fc>)
 800f650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f654:	f003 030c 	and.w	r3, r3, #12
 800f658:	2b0c      	cmp	r3, #12
 800f65a:	d829      	bhi.n	800f6b0 <UART_SetConfig+0x130>
 800f65c:	a201      	add	r2, pc, #4	; (adr r2, 800f664 <UART_SetConfig+0xe4>)
 800f65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f662:	bf00      	nop
 800f664:	0800f699 	.word	0x0800f699
 800f668:	0800f6b1 	.word	0x0800f6b1
 800f66c:	0800f6b1 	.word	0x0800f6b1
 800f670:	0800f6b1 	.word	0x0800f6b1
 800f674:	0800f6a5 	.word	0x0800f6a5
 800f678:	0800f6b1 	.word	0x0800f6b1
 800f67c:	0800f6b1 	.word	0x0800f6b1
 800f680:	0800f6b1 	.word	0x0800f6b1
 800f684:	0800f69f 	.word	0x0800f69f
 800f688:	0800f6b1 	.word	0x0800f6b1
 800f68c:	0800f6b1 	.word	0x0800f6b1
 800f690:	0800f6b1 	.word	0x0800f6b1
 800f694:	0800f6ab 	.word	0x0800f6ab
 800f698:	2300      	movs	r3, #0
 800f69a:	77fb      	strb	r3, [r7, #31]
 800f69c:	e117      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f69e:	2302      	movs	r3, #2
 800f6a0:	77fb      	strb	r3, [r7, #31]
 800f6a2:	e114      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f6a4:	2304      	movs	r3, #4
 800f6a6:	77fb      	strb	r3, [r7, #31]
 800f6a8:	e111      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f6aa:	2308      	movs	r3, #8
 800f6ac:	77fb      	strb	r3, [r7, #31]
 800f6ae:	e10e      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f6b0:	2310      	movs	r3, #16
 800f6b2:	77fb      	strb	r3, [r7, #31]
 800f6b4:	bf00      	nop
 800f6b6:	e10a      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	4a71      	ldr	r2, [pc, #452]	; (800f884 <UART_SetConfig+0x304>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d120      	bne.n	800f704 <UART_SetConfig+0x184>
 800f6c2:	4b6e      	ldr	r3, [pc, #440]	; (800f87c <UART_SetConfig+0x2fc>)
 800f6c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f6cc:	2b10      	cmp	r3, #16
 800f6ce:	d00f      	beq.n	800f6f0 <UART_SetConfig+0x170>
 800f6d0:	2b10      	cmp	r3, #16
 800f6d2:	d802      	bhi.n	800f6da <UART_SetConfig+0x15a>
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d005      	beq.n	800f6e4 <UART_SetConfig+0x164>
 800f6d8:	e010      	b.n	800f6fc <UART_SetConfig+0x17c>
 800f6da:	2b20      	cmp	r3, #32
 800f6dc:	d005      	beq.n	800f6ea <UART_SetConfig+0x16a>
 800f6de:	2b30      	cmp	r3, #48	; 0x30
 800f6e0:	d009      	beq.n	800f6f6 <UART_SetConfig+0x176>
 800f6e2:	e00b      	b.n	800f6fc <UART_SetConfig+0x17c>
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	77fb      	strb	r3, [r7, #31]
 800f6e8:	e0f1      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f6ea:	2302      	movs	r3, #2
 800f6ec:	77fb      	strb	r3, [r7, #31]
 800f6ee:	e0ee      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f6f0:	2304      	movs	r3, #4
 800f6f2:	77fb      	strb	r3, [r7, #31]
 800f6f4:	e0eb      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f6f6:	2308      	movs	r3, #8
 800f6f8:	77fb      	strb	r3, [r7, #31]
 800f6fa:	e0e8      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f6fc:	2310      	movs	r3, #16
 800f6fe:	77fb      	strb	r3, [r7, #31]
 800f700:	bf00      	nop
 800f702:	e0e4      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	4a5f      	ldr	r2, [pc, #380]	; (800f888 <UART_SetConfig+0x308>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d120      	bne.n	800f750 <UART_SetConfig+0x1d0>
 800f70e:	4b5b      	ldr	r3, [pc, #364]	; (800f87c <UART_SetConfig+0x2fc>)
 800f710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f714:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f718:	2b40      	cmp	r3, #64	; 0x40
 800f71a:	d00f      	beq.n	800f73c <UART_SetConfig+0x1bc>
 800f71c:	2b40      	cmp	r3, #64	; 0x40
 800f71e:	d802      	bhi.n	800f726 <UART_SetConfig+0x1a6>
 800f720:	2b00      	cmp	r3, #0
 800f722:	d005      	beq.n	800f730 <UART_SetConfig+0x1b0>
 800f724:	e010      	b.n	800f748 <UART_SetConfig+0x1c8>
 800f726:	2b80      	cmp	r3, #128	; 0x80
 800f728:	d005      	beq.n	800f736 <UART_SetConfig+0x1b6>
 800f72a:	2bc0      	cmp	r3, #192	; 0xc0
 800f72c:	d009      	beq.n	800f742 <UART_SetConfig+0x1c2>
 800f72e:	e00b      	b.n	800f748 <UART_SetConfig+0x1c8>
 800f730:	2300      	movs	r3, #0
 800f732:	77fb      	strb	r3, [r7, #31]
 800f734:	e0cb      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f736:	2302      	movs	r3, #2
 800f738:	77fb      	strb	r3, [r7, #31]
 800f73a:	e0c8      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f73c:	2304      	movs	r3, #4
 800f73e:	77fb      	strb	r3, [r7, #31]
 800f740:	e0c5      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f742:	2308      	movs	r3, #8
 800f744:	77fb      	strb	r3, [r7, #31]
 800f746:	e0c2      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f748:	2310      	movs	r3, #16
 800f74a:	77fb      	strb	r3, [r7, #31]
 800f74c:	bf00      	nop
 800f74e:	e0be      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4a4d      	ldr	r2, [pc, #308]	; (800f88c <UART_SetConfig+0x30c>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d124      	bne.n	800f7a4 <UART_SetConfig+0x224>
 800f75a:	4b48      	ldr	r3, [pc, #288]	; (800f87c <UART_SetConfig+0x2fc>)
 800f75c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f768:	d012      	beq.n	800f790 <UART_SetConfig+0x210>
 800f76a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f76e:	d802      	bhi.n	800f776 <UART_SetConfig+0x1f6>
 800f770:	2b00      	cmp	r3, #0
 800f772:	d007      	beq.n	800f784 <UART_SetConfig+0x204>
 800f774:	e012      	b.n	800f79c <UART_SetConfig+0x21c>
 800f776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f77a:	d006      	beq.n	800f78a <UART_SetConfig+0x20a>
 800f77c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f780:	d009      	beq.n	800f796 <UART_SetConfig+0x216>
 800f782:	e00b      	b.n	800f79c <UART_SetConfig+0x21c>
 800f784:	2300      	movs	r3, #0
 800f786:	77fb      	strb	r3, [r7, #31]
 800f788:	e0a1      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f78a:	2302      	movs	r3, #2
 800f78c:	77fb      	strb	r3, [r7, #31]
 800f78e:	e09e      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f790:	2304      	movs	r3, #4
 800f792:	77fb      	strb	r3, [r7, #31]
 800f794:	e09b      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f796:	2308      	movs	r3, #8
 800f798:	77fb      	strb	r3, [r7, #31]
 800f79a:	e098      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f79c:	2310      	movs	r3, #16
 800f79e:	77fb      	strb	r3, [r7, #31]
 800f7a0:	bf00      	nop
 800f7a2:	e094      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a39      	ldr	r2, [pc, #228]	; (800f890 <UART_SetConfig+0x310>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d124      	bne.n	800f7f8 <UART_SetConfig+0x278>
 800f7ae:	4b33      	ldr	r3, [pc, #204]	; (800f87c <UART_SetConfig+0x2fc>)
 800f7b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f7b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7bc:	d012      	beq.n	800f7e4 <UART_SetConfig+0x264>
 800f7be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7c2:	d802      	bhi.n	800f7ca <UART_SetConfig+0x24a>
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d007      	beq.n	800f7d8 <UART_SetConfig+0x258>
 800f7c8:	e012      	b.n	800f7f0 <UART_SetConfig+0x270>
 800f7ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f7ce:	d006      	beq.n	800f7de <UART_SetConfig+0x25e>
 800f7d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f7d4:	d009      	beq.n	800f7ea <UART_SetConfig+0x26a>
 800f7d6:	e00b      	b.n	800f7f0 <UART_SetConfig+0x270>
 800f7d8:	2301      	movs	r3, #1
 800f7da:	77fb      	strb	r3, [r7, #31]
 800f7dc:	e077      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f7de:	2302      	movs	r3, #2
 800f7e0:	77fb      	strb	r3, [r7, #31]
 800f7e2:	e074      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f7e4:	2304      	movs	r3, #4
 800f7e6:	77fb      	strb	r3, [r7, #31]
 800f7e8:	e071      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f7ea:	2308      	movs	r3, #8
 800f7ec:	77fb      	strb	r3, [r7, #31]
 800f7ee:	e06e      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f7f0:	2310      	movs	r3, #16
 800f7f2:	77fb      	strb	r3, [r7, #31]
 800f7f4:	bf00      	nop
 800f7f6:	e06a      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4a25      	ldr	r2, [pc, #148]	; (800f894 <UART_SetConfig+0x314>)
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d124      	bne.n	800f84c <UART_SetConfig+0x2cc>
 800f802:	4b1e      	ldr	r3, [pc, #120]	; (800f87c <UART_SetConfig+0x2fc>)
 800f804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f808:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f80c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f810:	d012      	beq.n	800f838 <UART_SetConfig+0x2b8>
 800f812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f816:	d802      	bhi.n	800f81e <UART_SetConfig+0x29e>
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d007      	beq.n	800f82c <UART_SetConfig+0x2ac>
 800f81c:	e012      	b.n	800f844 <UART_SetConfig+0x2c4>
 800f81e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f822:	d006      	beq.n	800f832 <UART_SetConfig+0x2b2>
 800f824:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f828:	d009      	beq.n	800f83e <UART_SetConfig+0x2be>
 800f82a:	e00b      	b.n	800f844 <UART_SetConfig+0x2c4>
 800f82c:	2300      	movs	r3, #0
 800f82e:	77fb      	strb	r3, [r7, #31]
 800f830:	e04d      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f832:	2302      	movs	r3, #2
 800f834:	77fb      	strb	r3, [r7, #31]
 800f836:	e04a      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f838:	2304      	movs	r3, #4
 800f83a:	77fb      	strb	r3, [r7, #31]
 800f83c:	e047      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f83e:	2308      	movs	r3, #8
 800f840:	77fb      	strb	r3, [r7, #31]
 800f842:	e044      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f844:	2310      	movs	r3, #16
 800f846:	77fb      	strb	r3, [r7, #31]
 800f848:	bf00      	nop
 800f84a:	e040      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	4a11      	ldr	r2, [pc, #68]	; (800f898 <UART_SetConfig+0x318>)
 800f852:	4293      	cmp	r3, r2
 800f854:	d139      	bne.n	800f8ca <UART_SetConfig+0x34a>
 800f856:	4b09      	ldr	r3, [pc, #36]	; (800f87c <UART_SetConfig+0x2fc>)
 800f858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f85c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f864:	d027      	beq.n	800f8b6 <UART_SetConfig+0x336>
 800f866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f86a:	d817      	bhi.n	800f89c <UART_SetConfig+0x31c>
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d01c      	beq.n	800f8aa <UART_SetConfig+0x32a>
 800f870:	e027      	b.n	800f8c2 <UART_SetConfig+0x342>
 800f872:	bf00      	nop
 800f874:	efff69f3 	.word	0xefff69f3
 800f878:	40011000 	.word	0x40011000
 800f87c:	40023800 	.word	0x40023800
 800f880:	40004400 	.word	0x40004400
 800f884:	40004800 	.word	0x40004800
 800f888:	40004c00 	.word	0x40004c00
 800f88c:	40005000 	.word	0x40005000
 800f890:	40011400 	.word	0x40011400
 800f894:	40007800 	.word	0x40007800
 800f898:	40007c00 	.word	0x40007c00
 800f89c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8a0:	d006      	beq.n	800f8b0 <UART_SetConfig+0x330>
 800f8a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f8a6:	d009      	beq.n	800f8bc <UART_SetConfig+0x33c>
 800f8a8:	e00b      	b.n	800f8c2 <UART_SetConfig+0x342>
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	77fb      	strb	r3, [r7, #31]
 800f8ae:	e00e      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f8b0:	2302      	movs	r3, #2
 800f8b2:	77fb      	strb	r3, [r7, #31]
 800f8b4:	e00b      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f8b6:	2304      	movs	r3, #4
 800f8b8:	77fb      	strb	r3, [r7, #31]
 800f8ba:	e008      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f8bc:	2308      	movs	r3, #8
 800f8be:	77fb      	strb	r3, [r7, #31]
 800f8c0:	e005      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f8c2:	2310      	movs	r3, #16
 800f8c4:	77fb      	strb	r3, [r7, #31]
 800f8c6:	bf00      	nop
 800f8c8:	e001      	b.n	800f8ce <UART_SetConfig+0x34e>
 800f8ca:	2310      	movs	r3, #16
 800f8cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	69db      	ldr	r3, [r3, #28]
 800f8d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8d6:	d17f      	bne.n	800f9d8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800f8d8:	7ffb      	ldrb	r3, [r7, #31]
 800f8da:	2b08      	cmp	r3, #8
 800f8dc:	d85c      	bhi.n	800f998 <UART_SetConfig+0x418>
 800f8de:	a201      	add	r2, pc, #4	; (adr r2, 800f8e4 <UART_SetConfig+0x364>)
 800f8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8e4:	0800f909 	.word	0x0800f909
 800f8e8:	0800f929 	.word	0x0800f929
 800f8ec:	0800f949 	.word	0x0800f949
 800f8f0:	0800f999 	.word	0x0800f999
 800f8f4:	0800f961 	.word	0x0800f961
 800f8f8:	0800f999 	.word	0x0800f999
 800f8fc:	0800f999 	.word	0x0800f999
 800f900:	0800f999 	.word	0x0800f999
 800f904:	0800f981 	.word	0x0800f981
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f908:	f7fd f936 	bl	800cb78 <HAL_RCC_GetPCLK1Freq>
 800f90c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	005a      	lsls	r2, r3, #1
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	085b      	lsrs	r3, r3, #1
 800f918:	441a      	add	r2, r3
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	685b      	ldr	r3, [r3, #4]
 800f91e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f922:	b29b      	uxth	r3, r3
 800f924:	61bb      	str	r3, [r7, #24]
        break;
 800f926:	e03a      	b.n	800f99e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f928:	f7fd f93a 	bl	800cba0 <HAL_RCC_GetPCLK2Freq>
 800f92c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	005a      	lsls	r2, r3, #1
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	685b      	ldr	r3, [r3, #4]
 800f936:	085b      	lsrs	r3, r3, #1
 800f938:	441a      	add	r2, r3
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	685b      	ldr	r3, [r3, #4]
 800f93e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f942:	b29b      	uxth	r3, r3
 800f944:	61bb      	str	r3, [r7, #24]
        break;
 800f946:	e02a      	b.n	800f99e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	085a      	lsrs	r2, r3, #1
 800f94e:	4b5f      	ldr	r3, [pc, #380]	; (800facc <UART_SetConfig+0x54c>)
 800f950:	4413      	add	r3, r2
 800f952:	687a      	ldr	r2, [r7, #4]
 800f954:	6852      	ldr	r2, [r2, #4]
 800f956:	fbb3 f3f2 	udiv	r3, r3, r2
 800f95a:	b29b      	uxth	r3, r3
 800f95c:	61bb      	str	r3, [r7, #24]
        break;
 800f95e:	e01e      	b.n	800f99e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f960:	f7fd f84c 	bl	800c9fc <HAL_RCC_GetSysClockFreq>
 800f964:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	005a      	lsls	r2, r3, #1
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	085b      	lsrs	r3, r3, #1
 800f970:	441a      	add	r2, r3
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	fbb2 f3f3 	udiv	r3, r2, r3
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	61bb      	str	r3, [r7, #24]
        break;
 800f97e:	e00e      	b.n	800f99e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	685b      	ldr	r3, [r3, #4]
 800f984:	085b      	lsrs	r3, r3, #1
 800f986:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	685b      	ldr	r3, [r3, #4]
 800f98e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f992:	b29b      	uxth	r3, r3
 800f994:	61bb      	str	r3, [r7, #24]
        break;
 800f996:	e002      	b.n	800f99e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800f998:	2301      	movs	r3, #1
 800f99a:	75fb      	strb	r3, [r7, #23]
        break;
 800f99c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f99e:	69bb      	ldr	r3, [r7, #24]
 800f9a0:	2b0f      	cmp	r3, #15
 800f9a2:	d916      	bls.n	800f9d2 <UART_SetConfig+0x452>
 800f9a4:	69bb      	ldr	r3, [r7, #24]
 800f9a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9aa:	d212      	bcs.n	800f9d2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f9ac:	69bb      	ldr	r3, [r7, #24]
 800f9ae:	b29b      	uxth	r3, r3
 800f9b0:	f023 030f 	bic.w	r3, r3, #15
 800f9b4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f9b6:	69bb      	ldr	r3, [r7, #24]
 800f9b8:	085b      	lsrs	r3, r3, #1
 800f9ba:	b29b      	uxth	r3, r3
 800f9bc:	f003 0307 	and.w	r3, r3, #7
 800f9c0:	b29a      	uxth	r2, r3
 800f9c2:	897b      	ldrh	r3, [r7, #10]
 800f9c4:	4313      	orrs	r3, r2
 800f9c6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	897a      	ldrh	r2, [r7, #10]
 800f9ce:	60da      	str	r2, [r3, #12]
 800f9d0:	e070      	b.n	800fab4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	75fb      	strb	r3, [r7, #23]
 800f9d6:	e06d      	b.n	800fab4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800f9d8:	7ffb      	ldrb	r3, [r7, #31]
 800f9da:	2b08      	cmp	r3, #8
 800f9dc:	d859      	bhi.n	800fa92 <UART_SetConfig+0x512>
 800f9de:	a201      	add	r2, pc, #4	; (adr r2, 800f9e4 <UART_SetConfig+0x464>)
 800f9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e4:	0800fa09 	.word	0x0800fa09
 800f9e8:	0800fa27 	.word	0x0800fa27
 800f9ec:	0800fa45 	.word	0x0800fa45
 800f9f0:	0800fa93 	.word	0x0800fa93
 800f9f4:	0800fa5d 	.word	0x0800fa5d
 800f9f8:	0800fa93 	.word	0x0800fa93
 800f9fc:	0800fa93 	.word	0x0800fa93
 800fa00:	0800fa93 	.word	0x0800fa93
 800fa04:	0800fa7b 	.word	0x0800fa7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fa08:	f7fd f8b6 	bl	800cb78 <HAL_RCC_GetPCLK1Freq>
 800fa0c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	085a      	lsrs	r2, r3, #1
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	441a      	add	r2, r3
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	61bb      	str	r3, [r7, #24]
        break;
 800fa24:	e038      	b.n	800fa98 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fa26:	f7fd f8bb 	bl	800cba0 <HAL_RCC_GetPCLK2Freq>
 800fa2a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	085a      	lsrs	r2, r3, #1
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	441a      	add	r2, r3
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	685b      	ldr	r3, [r3, #4]
 800fa3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	61bb      	str	r3, [r7, #24]
        break;
 800fa42:	e029      	b.n	800fa98 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	085a      	lsrs	r2, r3, #1
 800fa4a:	4b21      	ldr	r3, [pc, #132]	; (800fad0 <UART_SetConfig+0x550>)
 800fa4c:	4413      	add	r3, r2
 800fa4e:	687a      	ldr	r2, [r7, #4]
 800fa50:	6852      	ldr	r2, [r2, #4]
 800fa52:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa56:	b29b      	uxth	r3, r3
 800fa58:	61bb      	str	r3, [r7, #24]
        break;
 800fa5a:	e01d      	b.n	800fa98 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fa5c:	f7fc ffce 	bl	800c9fc <HAL_RCC_GetSysClockFreq>
 800fa60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	685b      	ldr	r3, [r3, #4]
 800fa66:	085a      	lsrs	r2, r3, #1
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	441a      	add	r2, r3
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	685b      	ldr	r3, [r3, #4]
 800fa70:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa74:	b29b      	uxth	r3, r3
 800fa76:	61bb      	str	r3, [r7, #24]
        break;
 800fa78:	e00e      	b.n	800fa98 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	085b      	lsrs	r3, r3, #1
 800fa80:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	685b      	ldr	r3, [r3, #4]
 800fa88:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	61bb      	str	r3, [r7, #24]
        break;
 800fa90:	e002      	b.n	800fa98 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800fa92:	2301      	movs	r3, #1
 800fa94:	75fb      	strb	r3, [r7, #23]
        break;
 800fa96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa98:	69bb      	ldr	r3, [r7, #24]
 800fa9a:	2b0f      	cmp	r3, #15
 800fa9c:	d908      	bls.n	800fab0 <UART_SetConfig+0x530>
 800fa9e:	69bb      	ldr	r3, [r7, #24]
 800faa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800faa4:	d204      	bcs.n	800fab0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	69ba      	ldr	r2, [r7, #24]
 800faac:	60da      	str	r2, [r3, #12]
 800faae:	e001      	b.n	800fab4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800fab0:	2301      	movs	r3, #1
 800fab2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2200      	movs	r2, #0
 800fab8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2200      	movs	r2, #0
 800fabe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800fac0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3720      	adds	r7, #32
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	01e84800 	.word	0x01e84800
 800fad0:	00f42400 	.word	0x00f42400

0800fad4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fad4:	b480      	push	{r7}
 800fad6:	b083      	sub	sp, #12
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fae0:	f003 0301 	and.w	r3, r3, #1
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d00a      	beq.n	800fafe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	430a      	orrs	r2, r1
 800fafc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb02:	f003 0302 	and.w	r3, r3, #2
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d00a      	beq.n	800fb20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	430a      	orrs	r2, r1
 800fb1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb24:	f003 0304 	and.w	r3, r3, #4
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d00a      	beq.n	800fb42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	685b      	ldr	r3, [r3, #4]
 800fb32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	430a      	orrs	r2, r1
 800fb40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb46:	f003 0308 	and.w	r3, r3, #8
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d00a      	beq.n	800fb64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	430a      	orrs	r2, r1
 800fb62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb68:	f003 0310 	and.w	r3, r3, #16
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d00a      	beq.n	800fb86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	430a      	orrs	r2, r1
 800fb84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb8a:	f003 0320 	and.w	r3, r3, #32
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d00a      	beq.n	800fba8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	689b      	ldr	r3, [r3, #8]
 800fb98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	430a      	orrs	r2, r1
 800fba6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d01a      	beq.n	800fbea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	685b      	ldr	r3, [r3, #4]
 800fbba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	430a      	orrs	r2, r1
 800fbc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fbd2:	d10a      	bne.n	800fbea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	430a      	orrs	r2, r1
 800fbe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d00a      	beq.n	800fc0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	430a      	orrs	r2, r1
 800fc0a:	605a      	str	r2, [r3, #4]
  }
}
 800fc0c:	bf00      	nop
 800fc0e:	370c      	adds	r7, #12
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b086      	sub	sp, #24
 800fc1c:	af02      	add	r7, sp, #8
 800fc1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2200      	movs	r2, #0
 800fc24:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800fc26:	f7f9 fc29 	bl	800947c <HAL_GetTick>
 800fc2a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	f003 0308 	and.w	r3, r3, #8
 800fc36:	2b08      	cmp	r3, #8
 800fc38:	d10e      	bne.n	800fc58 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fc3e:	9300      	str	r3, [sp, #0]
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	2200      	movs	r2, #0
 800fc44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f000 f82a 	bl	800fca2 <UART_WaitOnFlagUntilTimeout>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d001      	beq.n	800fc58 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc54:	2303      	movs	r3, #3
 800fc56:	e020      	b.n	800fc9a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f003 0304 	and.w	r3, r3, #4
 800fc62:	2b04      	cmp	r3, #4
 800fc64:	d10e      	bne.n	800fc84 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fc6a:	9300      	str	r3, [sp, #0]
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f000 f814 	bl	800fca2 <UART_WaitOnFlagUntilTimeout>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d001      	beq.n	800fc84 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc80:	2303      	movs	r3, #3
 800fc82:	e00a      	b.n	800fc9a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2220      	movs	r2, #32
 800fc88:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2220      	movs	r2, #32
 800fc8e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2200      	movs	r2, #0
 800fc94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800fc98:	2300      	movs	r3, #0
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3710      	adds	r7, #16
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}

0800fca2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fca2:	b580      	push	{r7, lr}
 800fca4:	b084      	sub	sp, #16
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	60f8      	str	r0, [r7, #12]
 800fcaa:	60b9      	str	r1, [r7, #8]
 800fcac:	603b      	str	r3, [r7, #0]
 800fcae:	4613      	mov	r3, r2
 800fcb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fcb2:	e05d      	b.n	800fd70 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fcb4:	69bb      	ldr	r3, [r7, #24]
 800fcb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcba:	d059      	beq.n	800fd70 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fcbc:	f7f9 fbde 	bl	800947c <HAL_GetTick>
 800fcc0:	4602      	mov	r2, r0
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	1ad3      	subs	r3, r2, r3
 800fcc6:	69ba      	ldr	r2, [r7, #24]
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d302      	bcc.n	800fcd2 <UART_WaitOnFlagUntilTimeout+0x30>
 800fccc:	69bb      	ldr	r3, [r7, #24]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d11b      	bne.n	800fd0a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	681a      	ldr	r2, [r3, #0]
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fce0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	689a      	ldr	r2, [r3, #8]
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f022 0201 	bic.w	r2, r2, #1
 800fcf0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	2220      	movs	r2, #32
 800fcf6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	2220      	movs	r2, #32
 800fcfc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2200      	movs	r2, #0
 800fd02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800fd06:	2303      	movs	r3, #3
 800fd08:	e042      	b.n	800fd90 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	f003 0304 	and.w	r3, r3, #4
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d02b      	beq.n	800fd70 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	69db      	ldr	r3, [r3, #28]
 800fd1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd26:	d123      	bne.n	800fd70 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fd30:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	681a      	ldr	r2, [r3, #0]
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fd40:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	689a      	ldr	r2, [r3, #8]
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f022 0201 	bic.w	r2, r2, #1
 800fd50:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	2220      	movs	r2, #32
 800fd56:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2220      	movs	r2, #32
 800fd5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	2220      	movs	r2, #32
 800fd62:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2200      	movs	r2, #0
 800fd68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800fd6c:	2303      	movs	r3, #3
 800fd6e:	e00f      	b.n	800fd90 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	69da      	ldr	r2, [r3, #28]
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	4013      	ands	r3, r2
 800fd7a:	68ba      	ldr	r2, [r7, #8]
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	bf0c      	ite	eq
 800fd80:	2301      	moveq	r3, #1
 800fd82:	2300      	movne	r3, #0
 800fd84:	b2db      	uxtb	r3, r3
 800fd86:	461a      	mov	r2, r3
 800fd88:	79fb      	ldrb	r3, [r7, #7]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d092      	beq.n	800fcb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fd8e:	2300      	movs	r3, #0
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	3710      	adds	r7, #16
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}

0800fd98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fd98:	b084      	sub	sp, #16
 800fd9a:	b580      	push	{r7, lr}
 800fd9c:	b084      	sub	sp, #16
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	6078      	str	r0, [r7, #4]
 800fda2:	f107 001c 	add.w	r0, r7, #28
 800fda6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d120      	bne.n	800fdf2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	68da      	ldr	r2, [r3, #12]
 800fdc0:	4b20      	ldr	r3, [pc, #128]	; (800fe44 <USB_CoreInit+0xac>)
 800fdc2:	4013      	ands	r3, r2
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	68db      	ldr	r3, [r3, #12]
 800fdcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fdd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d105      	bne.n	800fde6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	68db      	ldr	r3, [r3, #12]
 800fdde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f000 fa52 	bl	8010290 <USB_CoreReset>
 800fdec:	4603      	mov	r3, r0
 800fdee:	73fb      	strb	r3, [r7, #15]
 800fdf0:	e010      	b.n	800fe14 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	68db      	ldr	r3, [r3, #12]
 800fdf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f000 fa46 	bl	8010290 <USB_CoreReset>
 800fe04:	4603      	mov	r3, r0
 800fe06:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800fe14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	d10b      	bne.n	800fe32 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	689b      	ldr	r3, [r3, #8]
 800fe1e:	f043 0206 	orr.w	r2, r3, #6
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	689b      	ldr	r3, [r3, #8]
 800fe2a:	f043 0220 	orr.w	r2, r3, #32
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fe32:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3710      	adds	r7, #16
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fe3e:	b004      	add	sp, #16
 800fe40:	4770      	bx	lr
 800fe42:	bf00      	nop
 800fe44:	ffbdffbf 	.word	0xffbdffbf

0800fe48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b083      	sub	sp, #12
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	689b      	ldr	r3, [r3, #8]
 800fe54:	f023 0201 	bic.w	r2, r3, #1
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fe5c:	2300      	movs	r3, #0
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	370c      	adds	r7, #12
 800fe62:	46bd      	mov	sp, r7
 800fe64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe68:	4770      	bx	lr

0800fe6a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fe6a:	b580      	push	{r7, lr}
 800fe6c:	b082      	sub	sp, #8
 800fe6e:	af00      	add	r7, sp, #0
 800fe70:	6078      	str	r0, [r7, #4]
 800fe72:	460b      	mov	r3, r1
 800fe74:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	68db      	ldr	r3, [r3, #12]
 800fe7a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fe82:	78fb      	ldrb	r3, [r7, #3]
 800fe84:	2b01      	cmp	r3, #1
 800fe86:	d106      	bne.n	800fe96 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	68db      	ldr	r3, [r3, #12]
 800fe8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	60da      	str	r2, [r3, #12]
 800fe94:	e00b      	b.n	800feae <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800fe96:	78fb      	ldrb	r3, [r7, #3]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d106      	bne.n	800feaa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	68db      	ldr	r3, [r3, #12]
 800fea0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	60da      	str	r2, [r3, #12]
 800fea8:	e001      	b.n	800feae <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800feaa:	2301      	movs	r3, #1
 800feac:	e003      	b.n	800feb6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800feae:	2032      	movs	r0, #50	; 0x32
 800feb0:	f7f9 faf0 	bl	8009494 <HAL_Delay>

  return HAL_OK;
 800feb4:	2300      	movs	r3, #0
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3708      	adds	r7, #8
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}
	...

0800fec0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fec0:	b084      	sub	sp, #16
 800fec2:	b580      	push	{r7, lr}
 800fec4:	b086      	sub	sp, #24
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	6078      	str	r0, [r7, #4]
 800feca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fed2:	2300      	movs	r3, #0
 800fed4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800feda:	2300      	movs	r3, #0
 800fedc:	613b      	str	r3, [r7, #16]
 800fede:	e009      	b.n	800fef4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fee0:	687a      	ldr	r2, [r7, #4]
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	3340      	adds	r3, #64	; 0x40
 800fee6:	009b      	lsls	r3, r3, #2
 800fee8:	4413      	add	r3, r2
 800feea:	2200      	movs	r2, #0
 800feec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800feee:	693b      	ldr	r3, [r7, #16]
 800fef0:	3301      	adds	r3, #1
 800fef2:	613b      	str	r3, [r7, #16]
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	2b0e      	cmp	r3, #14
 800fef8:	d9f2      	bls.n	800fee0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fefa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d11c      	bne.n	800ff3a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff06:	685b      	ldr	r3, [r3, #4]
 800ff08:	68fa      	ldr	r2, [r7, #12]
 800ff0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff0e:	f043 0302 	orr.w	r3, r3, #2
 800ff12:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	601a      	str	r2, [r3, #0]
 800ff38:	e005      	b.n	800ff46 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ff4c:	461a      	mov	r2, r3
 800ff4e:	2300      	movs	r3, #0
 800ff50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff58:	4619      	mov	r1, r3
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff60:	461a      	mov	r2, r3
 800ff62:	680b      	ldr	r3, [r1, #0]
 800ff64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ff66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d10c      	bne.n	800ff86 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ff6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d104      	bne.n	800ff7c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ff72:	2100      	movs	r1, #0
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f000 f959 	bl	801022c <USB_SetDevSpeed>
 800ff7a:	e018      	b.n	800ffae <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ff7c:	2101      	movs	r1, #1
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f000 f954 	bl	801022c <USB_SetDevSpeed>
 800ff84:	e013      	b.n	800ffae <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800ff86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff88:	2b03      	cmp	r3, #3
 800ff8a:	d10c      	bne.n	800ffa6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ff8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d104      	bne.n	800ff9c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ff92:	2100      	movs	r1, #0
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f000 f949 	bl	801022c <USB_SetDevSpeed>
 800ff9a:	e008      	b.n	800ffae <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ff9c:	2101      	movs	r1, #1
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f000 f944 	bl	801022c <USB_SetDevSpeed>
 800ffa4:	e003      	b.n	800ffae <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ffa6:	2103      	movs	r1, #3
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f000 f93f 	bl	801022c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ffae:	2110      	movs	r1, #16
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f000 f8f3 	bl	801019c <USB_FlushTxFifo>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d001      	beq.n	800ffc0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800ffbc:	2301      	movs	r3, #1
 800ffbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f000 f911 	bl	80101e8 <USB_FlushRxFifo>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d001      	beq.n	800ffd0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800ffcc:	2301      	movs	r3, #1
 800ffce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	2300      	movs	r3, #0
 800ffda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffee:	461a      	mov	r2, r3
 800fff0:	2300      	movs	r3, #0
 800fff2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fff4:	2300      	movs	r3, #0
 800fff6:	613b      	str	r3, [r7, #16]
 800fff8:	e043      	b.n	8010082 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	015a      	lsls	r2, r3, #5
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	4413      	add	r3, r2
 8010002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801000c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010010:	d118      	bne.n	8010044 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d10a      	bne.n	801002e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	015a      	lsls	r2, r3, #5
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	4413      	add	r3, r2
 8010020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010024:	461a      	mov	r2, r3
 8010026:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801002a:	6013      	str	r3, [r2, #0]
 801002c:	e013      	b.n	8010056 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	015a      	lsls	r2, r3, #5
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	4413      	add	r3, r2
 8010036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801003a:	461a      	mov	r2, r3
 801003c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010040:	6013      	str	r3, [r2, #0]
 8010042:	e008      	b.n	8010056 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	015a      	lsls	r2, r3, #5
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	4413      	add	r3, r2
 801004c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010050:	461a      	mov	r2, r3
 8010052:	2300      	movs	r3, #0
 8010054:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	015a      	lsls	r2, r3, #5
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	4413      	add	r3, r2
 801005e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010062:	461a      	mov	r2, r3
 8010064:	2300      	movs	r3, #0
 8010066:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	015a      	lsls	r2, r3, #5
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	4413      	add	r3, r2
 8010070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010074:	461a      	mov	r2, r3
 8010076:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801007a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801007c:	693b      	ldr	r3, [r7, #16]
 801007e:	3301      	adds	r3, #1
 8010080:	613b      	str	r3, [r7, #16]
 8010082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010084:	693a      	ldr	r2, [r7, #16]
 8010086:	429a      	cmp	r2, r3
 8010088:	d3b7      	bcc.n	800fffa <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801008a:	2300      	movs	r3, #0
 801008c:	613b      	str	r3, [r7, #16]
 801008e:	e043      	b.n	8010118 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010090:	693b      	ldr	r3, [r7, #16]
 8010092:	015a      	lsls	r2, r3, #5
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	4413      	add	r3, r2
 8010098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80100a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80100a6:	d118      	bne.n	80100da <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d10a      	bne.n	80100c4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80100ae:	693b      	ldr	r3, [r7, #16]
 80100b0:	015a      	lsls	r2, r3, #5
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	4413      	add	r3, r2
 80100b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100ba:	461a      	mov	r2, r3
 80100bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80100c0:	6013      	str	r3, [r2, #0]
 80100c2:	e013      	b.n	80100ec <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	015a      	lsls	r2, r3, #5
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	4413      	add	r3, r2
 80100cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100d0:	461a      	mov	r2, r3
 80100d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80100d6:	6013      	str	r3, [r2, #0]
 80100d8:	e008      	b.n	80100ec <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	015a      	lsls	r2, r3, #5
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	4413      	add	r3, r2
 80100e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100e6:	461a      	mov	r2, r3
 80100e8:	2300      	movs	r3, #0
 80100ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	015a      	lsls	r2, r3, #5
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	4413      	add	r3, r2
 80100f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100f8:	461a      	mov	r2, r3
 80100fa:	2300      	movs	r3, #0
 80100fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80100fe:	693b      	ldr	r3, [r7, #16]
 8010100:	015a      	lsls	r2, r3, #5
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	4413      	add	r3, r2
 8010106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801010a:	461a      	mov	r2, r3
 801010c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010110:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	3301      	adds	r3, #1
 8010116:	613b      	str	r3, [r7, #16]
 8010118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801011a:	693a      	ldr	r2, [r7, #16]
 801011c:	429a      	cmp	r2, r3
 801011e:	d3b7      	bcc.n	8010090 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010126:	691b      	ldr	r3, [r3, #16]
 8010128:	68fa      	ldr	r2, [r7, #12]
 801012a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801012e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010132:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2200      	movs	r2, #0
 8010138:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010140:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010144:	2b00      	cmp	r3, #0
 8010146:	d105      	bne.n	8010154 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	699b      	ldr	r3, [r3, #24]
 801014c:	f043 0210 	orr.w	r2, r3, #16
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	699a      	ldr	r2, [r3, #24]
 8010158:	4b0e      	ldr	r3, [pc, #56]	; (8010194 <USB_DevInit+0x2d4>)
 801015a:	4313      	orrs	r3, r2
 801015c:	687a      	ldr	r2, [r7, #4]
 801015e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010162:	2b00      	cmp	r3, #0
 8010164:	d005      	beq.n	8010172 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	699b      	ldr	r3, [r3, #24]
 801016a:	f043 0208 	orr.w	r2, r3, #8
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010174:	2b01      	cmp	r3, #1
 8010176:	d105      	bne.n	8010184 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	699a      	ldr	r2, [r3, #24]
 801017c:	4b06      	ldr	r3, [pc, #24]	; (8010198 <USB_DevInit+0x2d8>)
 801017e:	4313      	orrs	r3, r2
 8010180:	687a      	ldr	r2, [r7, #4]
 8010182:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010184:	7dfb      	ldrb	r3, [r7, #23]
}
 8010186:	4618      	mov	r0, r3
 8010188:	3718      	adds	r7, #24
 801018a:	46bd      	mov	sp, r7
 801018c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010190:	b004      	add	sp, #16
 8010192:	4770      	bx	lr
 8010194:	803c3800 	.word	0x803c3800
 8010198:	40000004 	.word	0x40000004

0801019c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801019c:	b480      	push	{r7}
 801019e:	b085      	sub	sp, #20
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80101a6:	2300      	movs	r3, #0
 80101a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	019b      	lsls	r3, r3, #6
 80101ae:	f043 0220 	orr.w	r2, r3, #32
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	3301      	adds	r3, #1
 80101ba:	60fb      	str	r3, [r7, #12]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	4a09      	ldr	r2, [pc, #36]	; (80101e4 <USB_FlushTxFifo+0x48>)
 80101c0:	4293      	cmp	r3, r2
 80101c2:	d901      	bls.n	80101c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80101c4:	2303      	movs	r3, #3
 80101c6:	e006      	b.n	80101d6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	691b      	ldr	r3, [r3, #16]
 80101cc:	f003 0320 	and.w	r3, r3, #32
 80101d0:	2b20      	cmp	r3, #32
 80101d2:	d0f0      	beq.n	80101b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80101d4:	2300      	movs	r3, #0
}
 80101d6:	4618      	mov	r0, r3
 80101d8:	3714      	adds	r7, #20
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr
 80101e2:	bf00      	nop
 80101e4:	00030d40 	.word	0x00030d40

080101e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80101e8:	b480      	push	{r7}
 80101ea:	b085      	sub	sp, #20
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80101f0:	2300      	movs	r3, #0
 80101f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2210      	movs	r2, #16
 80101f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	3301      	adds	r3, #1
 80101fe:	60fb      	str	r3, [r7, #12]
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	4a09      	ldr	r2, [pc, #36]	; (8010228 <USB_FlushRxFifo+0x40>)
 8010204:	4293      	cmp	r3, r2
 8010206:	d901      	bls.n	801020c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8010208:	2303      	movs	r3, #3
 801020a:	e006      	b.n	801021a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	691b      	ldr	r3, [r3, #16]
 8010210:	f003 0310 	and.w	r3, r3, #16
 8010214:	2b10      	cmp	r3, #16
 8010216:	d0f0      	beq.n	80101fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8010218:	2300      	movs	r3, #0
}
 801021a:	4618      	mov	r0, r3
 801021c:	3714      	adds	r7, #20
 801021e:	46bd      	mov	sp, r7
 8010220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010224:	4770      	bx	lr
 8010226:	bf00      	nop
 8010228:	00030d40 	.word	0x00030d40

0801022c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801022c:	b480      	push	{r7}
 801022e:	b085      	sub	sp, #20
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	460b      	mov	r3, r1
 8010236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	78fb      	ldrb	r3, [r7, #3]
 8010246:	68f9      	ldr	r1, [r7, #12]
 8010248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801024c:	4313      	orrs	r3, r2
 801024e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010250:	2300      	movs	r3, #0
}
 8010252:	4618      	mov	r0, r3
 8010254:	3714      	adds	r7, #20
 8010256:	46bd      	mov	sp, r7
 8010258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025c:	4770      	bx	lr

0801025e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801025e:	b580      	push	{r7, lr}
 8010260:	b084      	sub	sp, #16
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010270:	685b      	ldr	r3, [r3, #4]
 8010272:	68fa      	ldr	r2, [r7, #12]
 8010274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010278:	f043 0302 	orr.w	r3, r3, #2
 801027c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 801027e:	2003      	movs	r0, #3
 8010280:	f7f9 f908 	bl	8009494 <HAL_Delay>

  return HAL_OK;
 8010284:	2300      	movs	r3, #0
}
 8010286:	4618      	mov	r0, r3
 8010288:	3710      	adds	r7, #16
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
	...

08010290 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010290:	b480      	push	{r7}
 8010292:	b085      	sub	sp, #20
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010298:	2300      	movs	r3, #0
 801029a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	3301      	adds	r3, #1
 80102a0:	60fb      	str	r3, [r7, #12]
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	4a13      	ldr	r2, [pc, #76]	; (80102f4 <USB_CoreReset+0x64>)
 80102a6:	4293      	cmp	r3, r2
 80102a8:	d901      	bls.n	80102ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80102aa:	2303      	movs	r3, #3
 80102ac:	e01b      	b.n	80102e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	691b      	ldr	r3, [r3, #16]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	daf2      	bge.n	801029c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80102b6:	2300      	movs	r3, #0
 80102b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	691b      	ldr	r3, [r3, #16]
 80102be:	f043 0201 	orr.w	r2, r3, #1
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	3301      	adds	r3, #1
 80102ca:	60fb      	str	r3, [r7, #12]
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	4a09      	ldr	r2, [pc, #36]	; (80102f4 <USB_CoreReset+0x64>)
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d901      	bls.n	80102d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80102d4:	2303      	movs	r3, #3
 80102d6:	e006      	b.n	80102e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	691b      	ldr	r3, [r3, #16]
 80102dc:	f003 0301 	and.w	r3, r3, #1
 80102e0:	2b01      	cmp	r3, #1
 80102e2:	d0f0      	beq.n	80102c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80102e4:	2300      	movs	r3, #0
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3714      	adds	r7, #20
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr
 80102f2:	bf00      	nop
 80102f4:	00030d40 	.word	0x00030d40

080102f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80102f8:	b480      	push	{r7}
 80102fa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80102fc:	bf00      	nop
 80102fe:	46bd      	mov	sp, r7
 8010300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010304:	4770      	bx	lr
	...

08010308 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010308:	b480      	push	{r7}
 801030a:	b085      	sub	sp, #20
 801030c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801030e:	f3ef 8305 	mrs	r3, IPSR
 8010312:	60bb      	str	r3, [r7, #8]
  return(result);
 8010314:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010316:	2b00      	cmp	r3, #0
 8010318:	d10f      	bne.n	801033a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801031a:	f3ef 8310 	mrs	r3, PRIMASK
 801031e:	607b      	str	r3, [r7, #4]
  return(result);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d105      	bne.n	8010332 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010326:	f3ef 8311 	mrs	r3, BASEPRI
 801032a:	603b      	str	r3, [r7, #0]
  return(result);
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d007      	beq.n	8010342 <osKernelInitialize+0x3a>
 8010332:	4b0e      	ldr	r3, [pc, #56]	; (801036c <osKernelInitialize+0x64>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	2b02      	cmp	r3, #2
 8010338:	d103      	bne.n	8010342 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801033a:	f06f 0305 	mvn.w	r3, #5
 801033e:	60fb      	str	r3, [r7, #12]
 8010340:	e00c      	b.n	801035c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010342:	4b0a      	ldr	r3, [pc, #40]	; (801036c <osKernelInitialize+0x64>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d105      	bne.n	8010356 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801034a:	4b08      	ldr	r3, [pc, #32]	; (801036c <osKernelInitialize+0x64>)
 801034c:	2201      	movs	r2, #1
 801034e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010350:	2300      	movs	r3, #0
 8010352:	60fb      	str	r3, [r7, #12]
 8010354:	e002      	b.n	801035c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8010356:	f04f 33ff 	mov.w	r3, #4294967295
 801035a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801035c:	68fb      	ldr	r3, [r7, #12]
}
 801035e:	4618      	mov	r0, r3
 8010360:	3714      	adds	r7, #20
 8010362:	46bd      	mov	sp, r7
 8010364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010368:	4770      	bx	lr
 801036a:	bf00      	nop
 801036c:	200033a8 	.word	0x200033a8

08010370 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010370:	b580      	push	{r7, lr}
 8010372:	b084      	sub	sp, #16
 8010374:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010376:	f3ef 8305 	mrs	r3, IPSR
 801037a:	60bb      	str	r3, [r7, #8]
  return(result);
 801037c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801037e:	2b00      	cmp	r3, #0
 8010380:	d10f      	bne.n	80103a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010382:	f3ef 8310 	mrs	r3, PRIMASK
 8010386:	607b      	str	r3, [r7, #4]
  return(result);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d105      	bne.n	801039a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801038e:	f3ef 8311 	mrs	r3, BASEPRI
 8010392:	603b      	str	r3, [r7, #0]
  return(result);
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d007      	beq.n	80103aa <osKernelStart+0x3a>
 801039a:	4b0f      	ldr	r3, [pc, #60]	; (80103d8 <osKernelStart+0x68>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	2b02      	cmp	r3, #2
 80103a0:	d103      	bne.n	80103aa <osKernelStart+0x3a>
    stat = osErrorISR;
 80103a2:	f06f 0305 	mvn.w	r3, #5
 80103a6:	60fb      	str	r3, [r7, #12]
 80103a8:	e010      	b.n	80103cc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80103aa:	4b0b      	ldr	r3, [pc, #44]	; (80103d8 <osKernelStart+0x68>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	2b01      	cmp	r3, #1
 80103b0:	d109      	bne.n	80103c6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80103b2:	f7ff ffa1 	bl	80102f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80103b6:	4b08      	ldr	r3, [pc, #32]	; (80103d8 <osKernelStart+0x68>)
 80103b8:	2202      	movs	r2, #2
 80103ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80103bc:	f001 f916 	bl	80115ec <vTaskStartScheduler>
      stat = osOK;
 80103c0:	2300      	movs	r3, #0
 80103c2:	60fb      	str	r3, [r7, #12]
 80103c4:	e002      	b.n	80103cc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80103c6:	f04f 33ff 	mov.w	r3, #4294967295
 80103ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80103cc:	68fb      	ldr	r3, [r7, #12]
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3710      	adds	r7, #16
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	200033a8 	.word	0x200033a8

080103dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80103dc:	b580      	push	{r7, lr}
 80103de:	b090      	sub	sp, #64	; 0x40
 80103e0:	af04      	add	r7, sp, #16
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	60b9      	str	r1, [r7, #8]
 80103e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80103e8:	2300      	movs	r3, #0
 80103ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103ec:	f3ef 8305 	mrs	r3, IPSR
 80103f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80103f2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f040 808f 	bne.w	8010518 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103fa:	f3ef 8310 	mrs	r3, PRIMASK
 80103fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8010400:	69bb      	ldr	r3, [r7, #24]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d105      	bne.n	8010412 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010406:	f3ef 8311 	mrs	r3, BASEPRI
 801040a:	617b      	str	r3, [r7, #20]
  return(result);
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d003      	beq.n	801041a <osThreadNew+0x3e>
 8010412:	4b44      	ldr	r3, [pc, #272]	; (8010524 <osThreadNew+0x148>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	2b02      	cmp	r3, #2
 8010418:	d07e      	beq.n	8010518 <osThreadNew+0x13c>
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d07b      	beq.n	8010518 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8010420:	2380      	movs	r3, #128	; 0x80
 8010422:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8010424:	2318      	movs	r3, #24
 8010426:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8010428:	2300      	movs	r3, #0
 801042a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 801042c:	f04f 33ff 	mov.w	r3, #4294967295
 8010430:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d045      	beq.n	80104c4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d002      	beq.n	8010446 <osThreadNew+0x6a>
        name = attr->name;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	699b      	ldr	r3, [r3, #24]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d002      	beq.n	8010454 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	699b      	ldr	r3, [r3, #24]
 8010452:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010456:	2b00      	cmp	r3, #0
 8010458:	d008      	beq.n	801046c <osThreadNew+0x90>
 801045a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801045c:	2b38      	cmp	r3, #56	; 0x38
 801045e:	d805      	bhi.n	801046c <osThreadNew+0x90>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	f003 0301 	and.w	r3, r3, #1
 8010468:	2b00      	cmp	r3, #0
 801046a:	d001      	beq.n	8010470 <osThreadNew+0x94>
        return (NULL);
 801046c:	2300      	movs	r3, #0
 801046e:	e054      	b.n	801051a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	695b      	ldr	r3, [r3, #20]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d003      	beq.n	8010480 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	695b      	ldr	r3, [r3, #20]
 801047c:	089b      	lsrs	r3, r3, #2
 801047e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	689b      	ldr	r3, [r3, #8]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d00e      	beq.n	80104a6 <osThreadNew+0xca>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	2b5b      	cmp	r3, #91	; 0x5b
 801048e:	d90a      	bls.n	80104a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010494:	2b00      	cmp	r3, #0
 8010496:	d006      	beq.n	80104a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	695b      	ldr	r3, [r3, #20]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d002      	beq.n	80104a6 <osThreadNew+0xca>
        mem = 1;
 80104a0:	2301      	movs	r3, #1
 80104a2:	623b      	str	r3, [r7, #32]
 80104a4:	e010      	b.n	80104c8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	689b      	ldr	r3, [r3, #8]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d10c      	bne.n	80104c8 <osThreadNew+0xec>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	68db      	ldr	r3, [r3, #12]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d108      	bne.n	80104c8 <osThreadNew+0xec>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	691b      	ldr	r3, [r3, #16]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d104      	bne.n	80104c8 <osThreadNew+0xec>
          mem = 0;
 80104be:	2300      	movs	r3, #0
 80104c0:	623b      	str	r3, [r7, #32]
 80104c2:	e001      	b.n	80104c8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80104c4:	2300      	movs	r3, #0
 80104c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80104c8:	6a3b      	ldr	r3, [r7, #32]
 80104ca:	2b01      	cmp	r3, #1
 80104cc:	d110      	bne.n	80104f0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80104d2:	687a      	ldr	r2, [r7, #4]
 80104d4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80104d6:	9202      	str	r2, [sp, #8]
 80104d8:	9301      	str	r3, [sp, #4]
 80104da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104dc:	9300      	str	r3, [sp, #0]
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80104e4:	68f8      	ldr	r0, [r7, #12]
 80104e6:	f000 fe31 	bl	801114c <xTaskCreateStatic>
 80104ea:	4603      	mov	r3, r0
 80104ec:	613b      	str	r3, [r7, #16]
 80104ee:	e013      	b.n	8010518 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80104f0:	6a3b      	ldr	r3, [r7, #32]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d110      	bne.n	8010518 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80104f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f8:	b29a      	uxth	r2, r3
 80104fa:	f107 0310 	add.w	r3, r7, #16
 80104fe:	9301      	str	r3, [sp, #4]
 8010500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010502:	9300      	str	r3, [sp, #0]
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010508:	68f8      	ldr	r0, [r7, #12]
 801050a:	f000 fe7f 	bl	801120c <xTaskCreate>
 801050e:	4603      	mov	r3, r0
 8010510:	2b01      	cmp	r3, #1
 8010512:	d001      	beq.n	8010518 <osThreadNew+0x13c>
          hTask = NULL;
 8010514:	2300      	movs	r3, #0
 8010516:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010518:	693b      	ldr	r3, [r7, #16]
}
 801051a:	4618      	mov	r0, r3
 801051c:	3730      	adds	r7, #48	; 0x30
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
 8010522:	bf00      	nop
 8010524:	200033a8 	.word	0x200033a8

08010528 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 8010528:	b580      	push	{r7, lr}
 801052a:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 801052c:	2000      	movs	r0, #0
 801052e:	f000 ffb3 	bl	8011498 <vTaskDelete>
#endif
  for (;;);
 8010532:	e7fe      	b.n	8010532 <osThreadExit+0xa>

08010534 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8010534:	b580      	push	{r7, lr}
 8010536:	b086      	sub	sp, #24
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801053c:	f3ef 8305 	mrs	r3, IPSR
 8010540:	613b      	str	r3, [r7, #16]
  return(result);
 8010542:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010544:	2b00      	cmp	r3, #0
 8010546:	d10f      	bne.n	8010568 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010548:	f3ef 8310 	mrs	r3, PRIMASK
 801054c:	60fb      	str	r3, [r7, #12]
  return(result);
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d105      	bne.n	8010560 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010554:	f3ef 8311 	mrs	r3, BASEPRI
 8010558:	60bb      	str	r3, [r7, #8]
  return(result);
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d007      	beq.n	8010570 <osDelay+0x3c>
 8010560:	4b0a      	ldr	r3, [pc, #40]	; (801058c <osDelay+0x58>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	2b02      	cmp	r3, #2
 8010566:	d103      	bne.n	8010570 <osDelay+0x3c>
    stat = osErrorISR;
 8010568:	f06f 0305 	mvn.w	r3, #5
 801056c:	617b      	str	r3, [r7, #20]
 801056e:	e007      	b.n	8010580 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010570:	2300      	movs	r3, #0
 8010572:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d002      	beq.n	8010580 <osDelay+0x4c>
      vTaskDelay(ticks);
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f001 f800 	bl	8011580 <vTaskDelay>
    }
  }

  return (stat);
 8010580:	697b      	ldr	r3, [r7, #20]
}
 8010582:	4618      	mov	r0, r3
 8010584:	3718      	adds	r7, #24
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	bf00      	nop
 801058c:	200033a8 	.word	0x200033a8

08010590 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010590:	b480      	push	{r7}
 8010592:	b085      	sub	sp, #20
 8010594:	af00      	add	r7, sp, #0
 8010596:	60f8      	str	r0, [r7, #12]
 8010598:	60b9      	str	r1, [r7, #8]
 801059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	4a07      	ldr	r2, [pc, #28]	; (80105bc <vApplicationGetIdleTaskMemory+0x2c>)
 80105a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	4a06      	ldr	r2, [pc, #24]	; (80105c0 <vApplicationGetIdleTaskMemory+0x30>)
 80105a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2280      	movs	r2, #128	; 0x80
 80105ac:	601a      	str	r2, [r3, #0]
}
 80105ae:	bf00      	nop
 80105b0:	3714      	adds	r7, #20
 80105b2:	46bd      	mov	sp, r7
 80105b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b8:	4770      	bx	lr
 80105ba:	bf00      	nop
 80105bc:	200033ac 	.word	0x200033ac
 80105c0:	20003408 	.word	0x20003408

080105c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80105c4:	b480      	push	{r7}
 80105c6:	b085      	sub	sp, #20
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	60f8      	str	r0, [r7, #12]
 80105cc:	60b9      	str	r1, [r7, #8]
 80105ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	4a07      	ldr	r2, [pc, #28]	; (80105f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80105d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	4a06      	ldr	r2, [pc, #24]	; (80105f4 <vApplicationGetTimerTaskMemory+0x30>)
 80105da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80105e2:	601a      	str	r2, [r3, #0]
}
 80105e4:	bf00      	nop
 80105e6:	3714      	adds	r7, #20
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr
 80105f0:	20003608 	.word	0x20003608
 80105f4:	20003664 	.word	0x20003664

080105f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80105f8:	b480      	push	{r7}
 80105fa:	b083      	sub	sp, #12
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f103 0208 	add.w	r2, r3, #8
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f04f 32ff 	mov.w	r2, #4294967295
 8010610:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f103 0208 	add.w	r2, r3, #8
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f103 0208 	add.w	r2, r3, #8
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2200      	movs	r2, #0
 801062a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801062c:	bf00      	nop
 801062e:	370c      	adds	r7, #12
 8010630:	46bd      	mov	sp, r7
 8010632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010636:	4770      	bx	lr

08010638 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010638:	b480      	push	{r7}
 801063a:	b083      	sub	sp, #12
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2200      	movs	r2, #0
 8010644:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010646:	bf00      	nop
 8010648:	370c      	adds	r7, #12
 801064a:	46bd      	mov	sp, r7
 801064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010650:	4770      	bx	lr

08010652 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010652:	b480      	push	{r7}
 8010654:	b085      	sub	sp, #20
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
 801065a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	68fa      	ldr	r2, [r7, #12]
 8010666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	689a      	ldr	r2, [r3, #8]
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	689b      	ldr	r3, [r3, #8]
 8010674:	683a      	ldr	r2, [r7, #0]
 8010676:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	683a      	ldr	r2, [r7, #0]
 801067c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	687a      	ldr	r2, [r7, #4]
 8010682:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	1c5a      	adds	r2, r3, #1
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	601a      	str	r2, [r3, #0]
}
 801068e:	bf00      	nop
 8010690:	3714      	adds	r7, #20
 8010692:	46bd      	mov	sp, r7
 8010694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010698:	4770      	bx	lr

0801069a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801069a:	b480      	push	{r7}
 801069c:	b085      	sub	sp, #20
 801069e:	af00      	add	r7, sp, #0
 80106a0:	6078      	str	r0, [r7, #4]
 80106a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106b0:	d103      	bne.n	80106ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	691b      	ldr	r3, [r3, #16]
 80106b6:	60fb      	str	r3, [r7, #12]
 80106b8:	e00c      	b.n	80106d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	3308      	adds	r3, #8
 80106be:	60fb      	str	r3, [r7, #12]
 80106c0:	e002      	b.n	80106c8 <vListInsert+0x2e>
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	60fb      	str	r3, [r7, #12]
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	685b      	ldr	r3, [r3, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	68ba      	ldr	r2, [r7, #8]
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d2f6      	bcs.n	80106c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	685a      	ldr	r2, [r3, #4]
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	685b      	ldr	r3, [r3, #4]
 80106e0:	683a      	ldr	r2, [r7, #0]
 80106e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	68fa      	ldr	r2, [r7, #12]
 80106e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	683a      	ldr	r2, [r7, #0]
 80106ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	687a      	ldr	r2, [r7, #4]
 80106f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	1c5a      	adds	r2, r3, #1
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	601a      	str	r2, [r3, #0]
}
 8010700:	bf00      	nop
 8010702:	3714      	adds	r7, #20
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr

0801070c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801070c:	b480      	push	{r7}
 801070e:	b085      	sub	sp, #20
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	691b      	ldr	r3, [r3, #16]
 8010718:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	685b      	ldr	r3, [r3, #4]
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	6892      	ldr	r2, [r2, #8]
 8010722:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	689b      	ldr	r3, [r3, #8]
 8010728:	687a      	ldr	r2, [r7, #4]
 801072a:	6852      	ldr	r2, [r2, #4]
 801072c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	685b      	ldr	r3, [r3, #4]
 8010732:	687a      	ldr	r2, [r7, #4]
 8010734:	429a      	cmp	r2, r3
 8010736:	d103      	bne.n	8010740 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	689a      	ldr	r2, [r3, #8]
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2200      	movs	r2, #0
 8010744:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	1e5a      	subs	r2, r3, #1
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	681b      	ldr	r3, [r3, #0]
}
 8010754:	4618      	mov	r0, r3
 8010756:	3714      	adds	r7, #20
 8010758:	46bd      	mov	sp, r7
 801075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075e:	4770      	bx	lr

08010760 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d10b      	bne.n	801078c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010778:	b672      	cpsid	i
 801077a:	f383 8811 	msr	BASEPRI, r3
 801077e:	f3bf 8f6f 	isb	sy
 8010782:	f3bf 8f4f 	dsb	sy
 8010786:	b662      	cpsie	i
 8010788:	60bb      	str	r3, [r7, #8]
 801078a:	e7fe      	b.n	801078a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 801078c:	f002 f9cc 	bl	8012b28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	681a      	ldr	r2, [r3, #0]
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010798:	68f9      	ldr	r1, [r7, #12]
 801079a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801079c:	fb01 f303 	mul.w	r3, r1, r3
 80107a0:	441a      	add	r2, r3
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	2200      	movs	r2, #0
 80107aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	681a      	ldr	r2, [r3, #0]
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681a      	ldr	r2, [r3, #0]
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107bc:	3b01      	subs	r3, #1
 80107be:	68f9      	ldr	r1, [r7, #12]
 80107c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80107c2:	fb01 f303 	mul.w	r3, r1, r3
 80107c6:	441a      	add	r2, r3
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	22ff      	movs	r2, #255	; 0xff
 80107d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	22ff      	movs	r2, #255	; 0xff
 80107d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d114      	bne.n	801080c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	691b      	ldr	r3, [r3, #16]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d01a      	beq.n	8010820 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	3310      	adds	r3, #16
 80107ee:	4618      	mov	r0, r3
 80107f0:	f001 f98a 	bl	8011b08 <xTaskRemoveFromEventList>
 80107f4:	4603      	mov	r3, r0
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d012      	beq.n	8010820 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80107fa:	4b0d      	ldr	r3, [pc, #52]	; (8010830 <xQueueGenericReset+0xd0>)
 80107fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010800:	601a      	str	r2, [r3, #0]
 8010802:	f3bf 8f4f 	dsb	sy
 8010806:	f3bf 8f6f 	isb	sy
 801080a:	e009      	b.n	8010820 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	3310      	adds	r3, #16
 8010810:	4618      	mov	r0, r3
 8010812:	f7ff fef1 	bl	80105f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	3324      	adds	r3, #36	; 0x24
 801081a:	4618      	mov	r0, r3
 801081c:	f7ff feec 	bl	80105f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010820:	f002 f9b4 	bl	8012b8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010824:	2301      	movs	r3, #1
}
 8010826:	4618      	mov	r0, r3
 8010828:	3710      	adds	r7, #16
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	e000ed04 	.word	0xe000ed04

08010834 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010834:	b580      	push	{r7, lr}
 8010836:	b08e      	sub	sp, #56	; 0x38
 8010838:	af02      	add	r7, sp, #8
 801083a:	60f8      	str	r0, [r7, #12]
 801083c:	60b9      	str	r1, [r7, #8]
 801083e:	607a      	str	r2, [r7, #4]
 8010840:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d10b      	bne.n	8010860 <xQueueGenericCreateStatic+0x2c>
 8010848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801084c:	b672      	cpsid	i
 801084e:	f383 8811 	msr	BASEPRI, r3
 8010852:	f3bf 8f6f 	isb	sy
 8010856:	f3bf 8f4f 	dsb	sy
 801085a:	b662      	cpsie	i
 801085c:	62bb      	str	r3, [r7, #40]	; 0x28
 801085e:	e7fe      	b.n	801085e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d10b      	bne.n	801087e <xQueueGenericCreateStatic+0x4a>
 8010866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801086a:	b672      	cpsid	i
 801086c:	f383 8811 	msr	BASEPRI, r3
 8010870:	f3bf 8f6f 	isb	sy
 8010874:	f3bf 8f4f 	dsb	sy
 8010878:	b662      	cpsie	i
 801087a:	627b      	str	r3, [r7, #36]	; 0x24
 801087c:	e7fe      	b.n	801087c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d002      	beq.n	801088a <xQueueGenericCreateStatic+0x56>
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d001      	beq.n	801088e <xQueueGenericCreateStatic+0x5a>
 801088a:	2301      	movs	r3, #1
 801088c:	e000      	b.n	8010890 <xQueueGenericCreateStatic+0x5c>
 801088e:	2300      	movs	r3, #0
 8010890:	2b00      	cmp	r3, #0
 8010892:	d10b      	bne.n	80108ac <xQueueGenericCreateStatic+0x78>
 8010894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010898:	b672      	cpsid	i
 801089a:	f383 8811 	msr	BASEPRI, r3
 801089e:	f3bf 8f6f 	isb	sy
 80108a2:	f3bf 8f4f 	dsb	sy
 80108a6:	b662      	cpsie	i
 80108a8:	623b      	str	r3, [r7, #32]
 80108aa:	e7fe      	b.n	80108aa <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d102      	bne.n	80108b8 <xQueueGenericCreateStatic+0x84>
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d101      	bne.n	80108bc <xQueueGenericCreateStatic+0x88>
 80108b8:	2301      	movs	r3, #1
 80108ba:	e000      	b.n	80108be <xQueueGenericCreateStatic+0x8a>
 80108bc:	2300      	movs	r3, #0
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d10b      	bne.n	80108da <xQueueGenericCreateStatic+0xa6>
 80108c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c6:	b672      	cpsid	i
 80108c8:	f383 8811 	msr	BASEPRI, r3
 80108cc:	f3bf 8f6f 	isb	sy
 80108d0:	f3bf 8f4f 	dsb	sy
 80108d4:	b662      	cpsie	i
 80108d6:	61fb      	str	r3, [r7, #28]
 80108d8:	e7fe      	b.n	80108d8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80108da:	2350      	movs	r3, #80	; 0x50
 80108dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	2b50      	cmp	r3, #80	; 0x50
 80108e2:	d00b      	beq.n	80108fc <xQueueGenericCreateStatic+0xc8>
 80108e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e8:	b672      	cpsid	i
 80108ea:	f383 8811 	msr	BASEPRI, r3
 80108ee:	f3bf 8f6f 	isb	sy
 80108f2:	f3bf 8f4f 	dsb	sy
 80108f6:	b662      	cpsie	i
 80108f8:	61bb      	str	r3, [r7, #24]
 80108fa:	e7fe      	b.n	80108fa <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80108fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010904:	2b00      	cmp	r3, #0
 8010906:	d00d      	beq.n	8010924 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801090a:	2201      	movs	r2, #1
 801090c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010910:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010916:	9300      	str	r3, [sp, #0]
 8010918:	4613      	mov	r3, r2
 801091a:	687a      	ldr	r2, [r7, #4]
 801091c:	68b9      	ldr	r1, [r7, #8]
 801091e:	68f8      	ldr	r0, [r7, #12]
 8010920:	f000 f805 	bl	801092e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010926:	4618      	mov	r0, r3
 8010928:	3730      	adds	r7, #48	; 0x30
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}

0801092e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801092e:	b580      	push	{r7, lr}
 8010930:	b084      	sub	sp, #16
 8010932:	af00      	add	r7, sp, #0
 8010934:	60f8      	str	r0, [r7, #12]
 8010936:	60b9      	str	r1, [r7, #8]
 8010938:	607a      	str	r2, [r7, #4]
 801093a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d103      	bne.n	801094a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010942:	69bb      	ldr	r3, [r7, #24]
 8010944:	69ba      	ldr	r2, [r7, #24]
 8010946:	601a      	str	r2, [r3, #0]
 8010948:	e002      	b.n	8010950 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801094a:	69bb      	ldr	r3, [r7, #24]
 801094c:	687a      	ldr	r2, [r7, #4]
 801094e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010950:	69bb      	ldr	r3, [r7, #24]
 8010952:	68fa      	ldr	r2, [r7, #12]
 8010954:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010956:	69bb      	ldr	r3, [r7, #24]
 8010958:	68ba      	ldr	r2, [r7, #8]
 801095a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801095c:	2101      	movs	r1, #1
 801095e:	69b8      	ldr	r0, [r7, #24]
 8010960:	f7ff fefe 	bl	8010760 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010964:	69bb      	ldr	r3, [r7, #24]
 8010966:	78fa      	ldrb	r2, [r7, #3]
 8010968:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801096c:	bf00      	nop
 801096e:	3710      	adds	r7, #16
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}

08010974 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b08e      	sub	sp, #56	; 0x38
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
 8010980:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010982:	2300      	movs	r3, #0
 8010984:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801098a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801098c:	2b00      	cmp	r3, #0
 801098e:	d10b      	bne.n	80109a8 <xQueueGenericSend+0x34>
 8010990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010994:	b672      	cpsid	i
 8010996:	f383 8811 	msr	BASEPRI, r3
 801099a:	f3bf 8f6f 	isb	sy
 801099e:	f3bf 8f4f 	dsb	sy
 80109a2:	b662      	cpsie	i
 80109a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80109a6:	e7fe      	b.n	80109a6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d103      	bne.n	80109b6 <xQueueGenericSend+0x42>
 80109ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d101      	bne.n	80109ba <xQueueGenericSend+0x46>
 80109b6:	2301      	movs	r3, #1
 80109b8:	e000      	b.n	80109bc <xQueueGenericSend+0x48>
 80109ba:	2300      	movs	r3, #0
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d10b      	bne.n	80109d8 <xQueueGenericSend+0x64>
 80109c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109c4:	b672      	cpsid	i
 80109c6:	f383 8811 	msr	BASEPRI, r3
 80109ca:	f3bf 8f6f 	isb	sy
 80109ce:	f3bf 8f4f 	dsb	sy
 80109d2:	b662      	cpsie	i
 80109d4:	627b      	str	r3, [r7, #36]	; 0x24
 80109d6:	e7fe      	b.n	80109d6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	2b02      	cmp	r3, #2
 80109dc:	d103      	bne.n	80109e6 <xQueueGenericSend+0x72>
 80109de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109e2:	2b01      	cmp	r3, #1
 80109e4:	d101      	bne.n	80109ea <xQueueGenericSend+0x76>
 80109e6:	2301      	movs	r3, #1
 80109e8:	e000      	b.n	80109ec <xQueueGenericSend+0x78>
 80109ea:	2300      	movs	r3, #0
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d10b      	bne.n	8010a08 <xQueueGenericSend+0x94>
 80109f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109f4:	b672      	cpsid	i
 80109f6:	f383 8811 	msr	BASEPRI, r3
 80109fa:	f3bf 8f6f 	isb	sy
 80109fe:	f3bf 8f4f 	dsb	sy
 8010a02:	b662      	cpsie	i
 8010a04:	623b      	str	r3, [r7, #32]
 8010a06:	e7fe      	b.n	8010a06 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a08:	f001 fa3c 	bl	8011e84 <xTaskGetSchedulerState>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d102      	bne.n	8010a18 <xQueueGenericSend+0xa4>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d101      	bne.n	8010a1c <xQueueGenericSend+0xa8>
 8010a18:	2301      	movs	r3, #1
 8010a1a:	e000      	b.n	8010a1e <xQueueGenericSend+0xaa>
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d10b      	bne.n	8010a3a <xQueueGenericSend+0xc6>
 8010a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a26:	b672      	cpsid	i
 8010a28:	f383 8811 	msr	BASEPRI, r3
 8010a2c:	f3bf 8f6f 	isb	sy
 8010a30:	f3bf 8f4f 	dsb	sy
 8010a34:	b662      	cpsie	i
 8010a36:	61fb      	str	r3, [r7, #28]
 8010a38:	e7fe      	b.n	8010a38 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010a3a:	f002 f875 	bl	8012b28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d302      	bcc.n	8010a50 <xQueueGenericSend+0xdc>
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	2b02      	cmp	r3, #2
 8010a4e:	d129      	bne.n	8010aa4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010a50:	683a      	ldr	r2, [r7, #0]
 8010a52:	68b9      	ldr	r1, [r7, #8]
 8010a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a56:	f000 fa0d 	bl	8010e74 <prvCopyDataToQueue>
 8010a5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d010      	beq.n	8010a86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a66:	3324      	adds	r3, #36	; 0x24
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f001 f84d 	bl	8011b08 <xTaskRemoveFromEventList>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d013      	beq.n	8010a9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010a74:	4b3f      	ldr	r3, [pc, #252]	; (8010b74 <xQueueGenericSend+0x200>)
 8010a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a7a:	601a      	str	r2, [r3, #0]
 8010a7c:	f3bf 8f4f 	dsb	sy
 8010a80:	f3bf 8f6f 	isb	sy
 8010a84:	e00a      	b.n	8010a9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d007      	beq.n	8010a9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010a8c:	4b39      	ldr	r3, [pc, #228]	; (8010b74 <xQueueGenericSend+0x200>)
 8010a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a92:	601a      	str	r2, [r3, #0]
 8010a94:	f3bf 8f4f 	dsb	sy
 8010a98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010a9c:	f002 f876 	bl	8012b8c <vPortExitCritical>
				return pdPASS;
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	e063      	b.n	8010b6c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d103      	bne.n	8010ab2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010aaa:	f002 f86f 	bl	8012b8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010aae:	2300      	movs	r3, #0
 8010ab0:	e05c      	b.n	8010b6c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d106      	bne.n	8010ac6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010ab8:	f107 0314 	add.w	r3, r7, #20
 8010abc:	4618      	mov	r0, r3
 8010abe:	f001 f887 	bl	8011bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010ac6:	f002 f861 	bl	8012b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010aca:	f000 fdf7 	bl	80116bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010ace:	f002 f82b 	bl	8012b28 <vPortEnterCritical>
 8010ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ad8:	b25b      	sxtb	r3, r3
 8010ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ade:	d103      	bne.n	8010ae8 <xQueueGenericSend+0x174>
 8010ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010aee:	b25b      	sxtb	r3, r3
 8010af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010af4:	d103      	bne.n	8010afe <xQueueGenericSend+0x18a>
 8010af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af8:	2200      	movs	r2, #0
 8010afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010afe:	f002 f845 	bl	8012b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b02:	1d3a      	adds	r2, r7, #4
 8010b04:	f107 0314 	add.w	r3, r7, #20
 8010b08:	4611      	mov	r1, r2
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f001 f876 	bl	8011bfc <xTaskCheckForTimeOut>
 8010b10:	4603      	mov	r3, r0
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d124      	bne.n	8010b60 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b18:	f000 faa4 	bl	8011064 <prvIsQueueFull>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d018      	beq.n	8010b54 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b24:	3310      	adds	r3, #16
 8010b26:	687a      	ldr	r2, [r7, #4]
 8010b28:	4611      	mov	r1, r2
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f000 ff9a 	bl	8011a64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b32:	f000 fa2f 	bl	8010f94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010b36:	f000 fdcf 	bl	80116d8 <xTaskResumeAll>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	f47f af7c 	bne.w	8010a3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010b42:	4b0c      	ldr	r3, [pc, #48]	; (8010b74 <xQueueGenericSend+0x200>)
 8010b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b48:	601a      	str	r2, [r3, #0]
 8010b4a:	f3bf 8f4f 	dsb	sy
 8010b4e:	f3bf 8f6f 	isb	sy
 8010b52:	e772      	b.n	8010a3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b56:	f000 fa1d 	bl	8010f94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010b5a:	f000 fdbd 	bl	80116d8 <xTaskResumeAll>
 8010b5e:	e76c      	b.n	8010a3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b62:	f000 fa17 	bl	8010f94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010b66:	f000 fdb7 	bl	80116d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010b6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3738      	adds	r7, #56	; 0x38
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}
 8010b74:	e000ed04 	.word	0xe000ed04

08010b78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b08e      	sub	sp, #56	; 0x38
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	60f8      	str	r0, [r7, #12]
 8010b80:	60b9      	str	r1, [r7, #8]
 8010b82:	607a      	str	r2, [r7, #4]
 8010b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d10b      	bne.n	8010ba8 <xQueueGenericSendFromISR+0x30>
 8010b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b94:	b672      	cpsid	i
 8010b96:	f383 8811 	msr	BASEPRI, r3
 8010b9a:	f3bf 8f6f 	isb	sy
 8010b9e:	f3bf 8f4f 	dsb	sy
 8010ba2:	b662      	cpsie	i
 8010ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8010ba6:	e7fe      	b.n	8010ba6 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d103      	bne.n	8010bb6 <xQueueGenericSendFromISR+0x3e>
 8010bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d101      	bne.n	8010bba <xQueueGenericSendFromISR+0x42>
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	e000      	b.n	8010bbc <xQueueGenericSendFromISR+0x44>
 8010bba:	2300      	movs	r3, #0
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d10b      	bne.n	8010bd8 <xQueueGenericSendFromISR+0x60>
 8010bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc4:	b672      	cpsid	i
 8010bc6:	f383 8811 	msr	BASEPRI, r3
 8010bca:	f3bf 8f6f 	isb	sy
 8010bce:	f3bf 8f4f 	dsb	sy
 8010bd2:	b662      	cpsie	i
 8010bd4:	623b      	str	r3, [r7, #32]
 8010bd6:	e7fe      	b.n	8010bd6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	2b02      	cmp	r3, #2
 8010bdc:	d103      	bne.n	8010be6 <xQueueGenericSendFromISR+0x6e>
 8010bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010be2:	2b01      	cmp	r3, #1
 8010be4:	d101      	bne.n	8010bea <xQueueGenericSendFromISR+0x72>
 8010be6:	2301      	movs	r3, #1
 8010be8:	e000      	b.n	8010bec <xQueueGenericSendFromISR+0x74>
 8010bea:	2300      	movs	r3, #0
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d10b      	bne.n	8010c08 <xQueueGenericSendFromISR+0x90>
 8010bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf4:	b672      	cpsid	i
 8010bf6:	f383 8811 	msr	BASEPRI, r3
 8010bfa:	f3bf 8f6f 	isb	sy
 8010bfe:	f3bf 8f4f 	dsb	sy
 8010c02:	b662      	cpsie	i
 8010c04:	61fb      	str	r3, [r7, #28]
 8010c06:	e7fe      	b.n	8010c06 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c08:	f002 f86e 	bl	8012ce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010c0c:	f3ef 8211 	mrs	r2, BASEPRI
 8010c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c14:	b672      	cpsid	i
 8010c16:	f383 8811 	msr	BASEPRI, r3
 8010c1a:	f3bf 8f6f 	isb	sy
 8010c1e:	f3bf 8f4f 	dsb	sy
 8010c22:	b662      	cpsie	i
 8010c24:	61ba      	str	r2, [r7, #24]
 8010c26:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010c28:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d302      	bcc.n	8010c3e <xQueueGenericSendFromISR+0xc6>
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	2b02      	cmp	r3, #2
 8010c3c:	d12c      	bne.n	8010c98 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010c48:	683a      	ldr	r2, [r7, #0]
 8010c4a:	68b9      	ldr	r1, [r7, #8]
 8010c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c4e:	f000 f911 	bl	8010e74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010c52:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c5a:	d112      	bne.n	8010c82 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d016      	beq.n	8010c92 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c66:	3324      	adds	r3, #36	; 0x24
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f000 ff4d 	bl	8011b08 <xTaskRemoveFromEventList>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d00e      	beq.n	8010c92 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d00b      	beq.n	8010c92 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2201      	movs	r2, #1
 8010c7e:	601a      	str	r2, [r3, #0]
 8010c80:	e007      	b.n	8010c92 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010c82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010c86:	3301      	adds	r3, #1
 8010c88:	b2db      	uxtb	r3, r3
 8010c8a:	b25a      	sxtb	r2, r3
 8010c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010c92:	2301      	movs	r3, #1
 8010c94:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010c96:	e001      	b.n	8010c9c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8010c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c9e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3738      	adds	r7, #56	; 0x38
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}

08010cb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b08c      	sub	sp, #48	; 0x30
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	60f8      	str	r0, [r7, #12]
 8010cb8:	60b9      	str	r1, [r7, #8]
 8010cba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d10b      	bne.n	8010ce2 <xQueueReceive+0x32>
	__asm volatile
 8010cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cce:	b672      	cpsid	i
 8010cd0:	f383 8811 	msr	BASEPRI, r3
 8010cd4:	f3bf 8f6f 	isb	sy
 8010cd8:	f3bf 8f4f 	dsb	sy
 8010cdc:	b662      	cpsie	i
 8010cde:	623b      	str	r3, [r7, #32]
 8010ce0:	e7fe      	b.n	8010ce0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d103      	bne.n	8010cf0 <xQueueReceive+0x40>
 8010ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d101      	bne.n	8010cf4 <xQueueReceive+0x44>
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	e000      	b.n	8010cf6 <xQueueReceive+0x46>
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d10b      	bne.n	8010d12 <xQueueReceive+0x62>
 8010cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cfe:	b672      	cpsid	i
 8010d00:	f383 8811 	msr	BASEPRI, r3
 8010d04:	f3bf 8f6f 	isb	sy
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	b662      	cpsie	i
 8010d0e:	61fb      	str	r3, [r7, #28]
 8010d10:	e7fe      	b.n	8010d10 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d12:	f001 f8b7 	bl	8011e84 <xTaskGetSchedulerState>
 8010d16:	4603      	mov	r3, r0
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d102      	bne.n	8010d22 <xQueueReceive+0x72>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d101      	bne.n	8010d26 <xQueueReceive+0x76>
 8010d22:	2301      	movs	r3, #1
 8010d24:	e000      	b.n	8010d28 <xQueueReceive+0x78>
 8010d26:	2300      	movs	r3, #0
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d10b      	bne.n	8010d44 <xQueueReceive+0x94>
 8010d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d30:	b672      	cpsid	i
 8010d32:	f383 8811 	msr	BASEPRI, r3
 8010d36:	f3bf 8f6f 	isb	sy
 8010d3a:	f3bf 8f4f 	dsb	sy
 8010d3e:	b662      	cpsie	i
 8010d40:	61bb      	str	r3, [r7, #24]
 8010d42:	e7fe      	b.n	8010d42 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010d44:	f001 fef0 	bl	8012b28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d4c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d01f      	beq.n	8010d94 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010d54:	68b9      	ldr	r1, [r7, #8]
 8010d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d58:	f000 f8f6 	bl	8010f48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5e:	1e5a      	subs	r2, r3, #1
 8010d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d62:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d66:	691b      	ldr	r3, [r3, #16]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d00f      	beq.n	8010d8c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6e:	3310      	adds	r3, #16
 8010d70:	4618      	mov	r0, r3
 8010d72:	f000 fec9 	bl	8011b08 <xTaskRemoveFromEventList>
 8010d76:	4603      	mov	r3, r0
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d007      	beq.n	8010d8c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010d7c:	4b3c      	ldr	r3, [pc, #240]	; (8010e70 <xQueueReceive+0x1c0>)
 8010d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d82:	601a      	str	r2, [r3, #0]
 8010d84:	f3bf 8f4f 	dsb	sy
 8010d88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010d8c:	f001 fefe 	bl	8012b8c <vPortExitCritical>
				return pdPASS;
 8010d90:	2301      	movs	r3, #1
 8010d92:	e069      	b.n	8010e68 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d103      	bne.n	8010da2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010d9a:	f001 fef7 	bl	8012b8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	e062      	b.n	8010e68 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d106      	bne.n	8010db6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010da8:	f107 0310 	add.w	r3, r7, #16
 8010dac:	4618      	mov	r0, r3
 8010dae:	f000 ff0f 	bl	8011bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010db2:	2301      	movs	r3, #1
 8010db4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010db6:	f001 fee9 	bl	8012b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010dba:	f000 fc7f 	bl	80116bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010dbe:	f001 feb3 	bl	8012b28 <vPortEnterCritical>
 8010dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010dc8:	b25b      	sxtb	r3, r3
 8010dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dce:	d103      	bne.n	8010dd8 <xQueueReceive+0x128>
 8010dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010dde:	b25b      	sxtb	r3, r3
 8010de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010de4:	d103      	bne.n	8010dee <xQueueReceive+0x13e>
 8010de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de8:	2200      	movs	r2, #0
 8010dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010dee:	f001 fecd 	bl	8012b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010df2:	1d3a      	adds	r2, r7, #4
 8010df4:	f107 0310 	add.w	r3, r7, #16
 8010df8:	4611      	mov	r1, r2
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f000 fefe 	bl	8011bfc <xTaskCheckForTimeOut>
 8010e00:	4603      	mov	r3, r0
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d123      	bne.n	8010e4e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e08:	f000 f916 	bl	8011038 <prvIsQueueEmpty>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d017      	beq.n	8010e42 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e14:	3324      	adds	r3, #36	; 0x24
 8010e16:	687a      	ldr	r2, [r7, #4]
 8010e18:	4611      	mov	r1, r2
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f000 fe22 	bl	8011a64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e22:	f000 f8b7 	bl	8010f94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010e26:	f000 fc57 	bl	80116d8 <xTaskResumeAll>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d189      	bne.n	8010d44 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8010e30:	4b0f      	ldr	r3, [pc, #60]	; (8010e70 <xQueueReceive+0x1c0>)
 8010e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e36:	601a      	str	r2, [r3, #0]
 8010e38:	f3bf 8f4f 	dsb	sy
 8010e3c:	f3bf 8f6f 	isb	sy
 8010e40:	e780      	b.n	8010d44 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e44:	f000 f8a6 	bl	8010f94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e48:	f000 fc46 	bl	80116d8 <xTaskResumeAll>
 8010e4c:	e77a      	b.n	8010d44 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010e4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e50:	f000 f8a0 	bl	8010f94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e54:	f000 fc40 	bl	80116d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e5a:	f000 f8ed 	bl	8011038 <prvIsQueueEmpty>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	f43f af6f 	beq.w	8010d44 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010e66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3730      	adds	r7, #48	; 0x30
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}
 8010e70:	e000ed04 	.word	0xe000ed04

08010e74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b086      	sub	sp, #24
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	60f8      	str	r0, [r7, #12]
 8010e7c:	60b9      	str	r1, [r7, #8]
 8010e7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010e80:	2300      	movs	r3, #0
 8010e82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d10d      	bne.n	8010eae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d14d      	bne.n	8010f36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	689b      	ldr	r3, [r3, #8]
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f001 f80e 	bl	8011ec0 <xTaskPriorityDisinherit>
 8010ea4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	609a      	str	r2, [r3, #8]
 8010eac:	e043      	b.n	8010f36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d119      	bne.n	8010ee8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	6858      	ldr	r0, [r3, #4]
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	68b9      	ldr	r1, [r7, #8]
 8010ec0:	f002 f960 	bl	8013184 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	685a      	ldr	r2, [r3, #4]
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ecc:	441a      	add	r2, r3
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	685a      	ldr	r2, [r3, #4]
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	689b      	ldr	r3, [r3, #8]
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d32b      	bcc.n	8010f36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	605a      	str	r2, [r3, #4]
 8010ee6:	e026      	b.n	8010f36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	68d8      	ldr	r0, [r3, #12]
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	68b9      	ldr	r1, [r7, #8]
 8010ef4:	f002 f946 	bl	8013184 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	68da      	ldr	r2, [r3, #12]
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f00:	425b      	negs	r3, r3
 8010f02:	441a      	add	r2, r3
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	68da      	ldr	r2, [r3, #12]
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d207      	bcs.n	8010f24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	689a      	ldr	r2, [r3, #8]
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f1c:	425b      	negs	r3, r3
 8010f1e:	441a      	add	r2, r3
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2b02      	cmp	r3, #2
 8010f28:	d105      	bne.n	8010f36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f2a:	693b      	ldr	r3, [r7, #16]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d002      	beq.n	8010f36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	3b01      	subs	r3, #1
 8010f34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	1c5a      	adds	r2, r3, #1
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010f3e:	697b      	ldr	r3, [r7, #20]
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	3718      	adds	r7, #24
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}

08010f48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b082      	sub	sp, #8
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d018      	beq.n	8010f8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	68da      	ldr	r2, [r3, #12]
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f62:	441a      	add	r2, r3
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	68da      	ldr	r2, [r3, #12]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	689b      	ldr	r3, [r3, #8]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d303      	bcc.n	8010f7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	68d9      	ldr	r1, [r3, #12]
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f84:	461a      	mov	r2, r3
 8010f86:	6838      	ldr	r0, [r7, #0]
 8010f88:	f002 f8fc 	bl	8013184 <memcpy>
	}
}
 8010f8c:	bf00      	nop
 8010f8e:	3708      	adds	r7, #8
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}

08010f94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010f9c:	f001 fdc4 	bl	8012b28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010fa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010fa8:	e011      	b.n	8010fce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d012      	beq.n	8010fd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	3324      	adds	r3, #36	; 0x24
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f000 fda6 	bl	8011b08 <xTaskRemoveFromEventList>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d001      	beq.n	8010fc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010fc2:	f000 fe7f 	bl	8011cc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010fc6:	7bfb      	ldrb	r3, [r7, #15]
 8010fc8:	3b01      	subs	r3, #1
 8010fca:	b2db      	uxtb	r3, r3
 8010fcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	dce9      	bgt.n	8010faa <prvUnlockQueue+0x16>
 8010fd6:	e000      	b.n	8010fda <prvUnlockQueue+0x46>
					break;
 8010fd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	22ff      	movs	r2, #255	; 0xff
 8010fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010fe2:	f001 fdd3 	bl	8012b8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010fe6:	f001 fd9f 	bl	8012b28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ff0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ff2:	e011      	b.n	8011018 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	691b      	ldr	r3, [r3, #16]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d012      	beq.n	8011022 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	3310      	adds	r3, #16
 8011000:	4618      	mov	r0, r3
 8011002:	f000 fd81 	bl	8011b08 <xTaskRemoveFromEventList>
 8011006:	4603      	mov	r3, r0
 8011008:	2b00      	cmp	r3, #0
 801100a:	d001      	beq.n	8011010 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801100c:	f000 fe5a 	bl	8011cc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011010:	7bbb      	ldrb	r3, [r7, #14]
 8011012:	3b01      	subs	r3, #1
 8011014:	b2db      	uxtb	r3, r3
 8011016:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801101c:	2b00      	cmp	r3, #0
 801101e:	dce9      	bgt.n	8010ff4 <prvUnlockQueue+0x60>
 8011020:	e000      	b.n	8011024 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011022:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	22ff      	movs	r2, #255	; 0xff
 8011028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801102c:	f001 fdae 	bl	8012b8c <vPortExitCritical>
}
 8011030:	bf00      	nop
 8011032:	3710      	adds	r7, #16
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b084      	sub	sp, #16
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011040:	f001 fd72 	bl	8012b28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011048:	2b00      	cmp	r3, #0
 801104a:	d102      	bne.n	8011052 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801104c:	2301      	movs	r3, #1
 801104e:	60fb      	str	r3, [r7, #12]
 8011050:	e001      	b.n	8011056 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011052:	2300      	movs	r3, #0
 8011054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011056:	f001 fd99 	bl	8012b8c <vPortExitCritical>

	return xReturn;
 801105a:	68fb      	ldr	r3, [r7, #12]
}
 801105c:	4618      	mov	r0, r3
 801105e:	3710      	adds	r7, #16
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}

08011064 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b084      	sub	sp, #16
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801106c:	f001 fd5c 	bl	8012b28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011078:	429a      	cmp	r2, r3
 801107a:	d102      	bne.n	8011082 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801107c:	2301      	movs	r3, #1
 801107e:	60fb      	str	r3, [r7, #12]
 8011080:	e001      	b.n	8011086 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011082:	2300      	movs	r3, #0
 8011084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011086:	f001 fd81 	bl	8012b8c <vPortExitCritical>

	return xReturn;
 801108a:	68fb      	ldr	r3, [r7, #12]
}
 801108c:	4618      	mov	r0, r3
 801108e:	3710      	adds	r7, #16
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}

08011094 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011094:	b480      	push	{r7}
 8011096:	b085      	sub	sp, #20
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801109e:	2300      	movs	r3, #0
 80110a0:	60fb      	str	r3, [r7, #12]
 80110a2:	e014      	b.n	80110ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80110a4:	4a0e      	ldr	r2, [pc, #56]	; (80110e0 <vQueueAddToRegistry+0x4c>)
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d10b      	bne.n	80110c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80110b0:	490b      	ldr	r1, [pc, #44]	; (80110e0 <vQueueAddToRegistry+0x4c>)
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	683a      	ldr	r2, [r7, #0]
 80110b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80110ba:	4a09      	ldr	r2, [pc, #36]	; (80110e0 <vQueueAddToRegistry+0x4c>)
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	00db      	lsls	r3, r3, #3
 80110c0:	4413      	add	r3, r2
 80110c2:	687a      	ldr	r2, [r7, #4]
 80110c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80110c6:	e005      	b.n	80110d4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	3301      	adds	r3, #1
 80110cc:	60fb      	str	r3, [r7, #12]
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	2b07      	cmp	r3, #7
 80110d2:	d9e7      	bls.n	80110a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80110d4:	bf00      	nop
 80110d6:	3714      	adds	r7, #20
 80110d8:	46bd      	mov	sp, r7
 80110da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110de:	4770      	bx	lr
 80110e0:	20030b38 	.word	0x20030b38

080110e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b086      	sub	sp, #24
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	60f8      	str	r0, [r7, #12]
 80110ec:	60b9      	str	r1, [r7, #8]
 80110ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80110f4:	f001 fd18 	bl	8012b28 <vPortEnterCritical>
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80110fe:	b25b      	sxtb	r3, r3
 8011100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011104:	d103      	bne.n	801110e <vQueueWaitForMessageRestricted+0x2a>
 8011106:	697b      	ldr	r3, [r7, #20]
 8011108:	2200      	movs	r2, #0
 801110a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801110e:	697b      	ldr	r3, [r7, #20]
 8011110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011114:	b25b      	sxtb	r3, r3
 8011116:	f1b3 3fff 	cmp.w	r3, #4294967295
 801111a:	d103      	bne.n	8011124 <vQueueWaitForMessageRestricted+0x40>
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	2200      	movs	r2, #0
 8011120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011124:	f001 fd32 	bl	8012b8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011128:	697b      	ldr	r3, [r7, #20]
 801112a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801112c:	2b00      	cmp	r3, #0
 801112e:	d106      	bne.n	801113e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	3324      	adds	r3, #36	; 0x24
 8011134:	687a      	ldr	r2, [r7, #4]
 8011136:	68b9      	ldr	r1, [r7, #8]
 8011138:	4618      	mov	r0, r3
 801113a:	f000 fcb9 	bl	8011ab0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801113e:	6978      	ldr	r0, [r7, #20]
 8011140:	f7ff ff28 	bl	8010f94 <prvUnlockQueue>
	}
 8011144:	bf00      	nop
 8011146:	3718      	adds	r7, #24
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}

0801114c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801114c:	b580      	push	{r7, lr}
 801114e:	b08e      	sub	sp, #56	; 0x38
 8011150:	af04      	add	r7, sp, #16
 8011152:	60f8      	str	r0, [r7, #12]
 8011154:	60b9      	str	r1, [r7, #8]
 8011156:	607a      	str	r2, [r7, #4]
 8011158:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801115a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801115c:	2b00      	cmp	r3, #0
 801115e:	d10b      	bne.n	8011178 <xTaskCreateStatic+0x2c>
 8011160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011164:	b672      	cpsid	i
 8011166:	f383 8811 	msr	BASEPRI, r3
 801116a:	f3bf 8f6f 	isb	sy
 801116e:	f3bf 8f4f 	dsb	sy
 8011172:	b662      	cpsie	i
 8011174:	623b      	str	r3, [r7, #32]
 8011176:	e7fe      	b.n	8011176 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8011178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801117a:	2b00      	cmp	r3, #0
 801117c:	d10b      	bne.n	8011196 <xTaskCreateStatic+0x4a>
 801117e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011182:	b672      	cpsid	i
 8011184:	f383 8811 	msr	BASEPRI, r3
 8011188:	f3bf 8f6f 	isb	sy
 801118c:	f3bf 8f4f 	dsb	sy
 8011190:	b662      	cpsie	i
 8011192:	61fb      	str	r3, [r7, #28]
 8011194:	e7fe      	b.n	8011194 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011196:	235c      	movs	r3, #92	; 0x5c
 8011198:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	2b5c      	cmp	r3, #92	; 0x5c
 801119e:	d00b      	beq.n	80111b8 <xTaskCreateStatic+0x6c>
 80111a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a4:	b672      	cpsid	i
 80111a6:	f383 8811 	msr	BASEPRI, r3
 80111aa:	f3bf 8f6f 	isb	sy
 80111ae:	f3bf 8f4f 	dsb	sy
 80111b2:	b662      	cpsie	i
 80111b4:	61bb      	str	r3, [r7, #24]
 80111b6:	e7fe      	b.n	80111b6 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80111b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80111ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d01e      	beq.n	80111fe <xTaskCreateStatic+0xb2>
 80111c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d01b      	beq.n	80111fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80111c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80111ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80111d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d2:	2202      	movs	r2, #2
 80111d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80111d8:	2300      	movs	r3, #0
 80111da:	9303      	str	r3, [sp, #12]
 80111dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111de:	9302      	str	r3, [sp, #8]
 80111e0:	f107 0314 	add.w	r3, r7, #20
 80111e4:	9301      	str	r3, [sp, #4]
 80111e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e8:	9300      	str	r3, [sp, #0]
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	687a      	ldr	r2, [r7, #4]
 80111ee:	68b9      	ldr	r1, [r7, #8]
 80111f0:	68f8      	ldr	r0, [r7, #12]
 80111f2:	f000 f850 	bl	8011296 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80111f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111f8:	f000 f8de 	bl	80113b8 <prvAddNewTaskToReadyList>
 80111fc:	e001      	b.n	8011202 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80111fe:	2300      	movs	r3, #0
 8011200:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011202:	697b      	ldr	r3, [r7, #20]
	}
 8011204:	4618      	mov	r0, r3
 8011206:	3728      	adds	r7, #40	; 0x28
 8011208:	46bd      	mov	sp, r7
 801120a:	bd80      	pop	{r7, pc}

0801120c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801120c:	b580      	push	{r7, lr}
 801120e:	b08c      	sub	sp, #48	; 0x30
 8011210:	af04      	add	r7, sp, #16
 8011212:	60f8      	str	r0, [r7, #12]
 8011214:	60b9      	str	r1, [r7, #8]
 8011216:	603b      	str	r3, [r7, #0]
 8011218:	4613      	mov	r3, r2
 801121a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801121c:	88fb      	ldrh	r3, [r7, #6]
 801121e:	009b      	lsls	r3, r3, #2
 8011220:	4618      	mov	r0, r3
 8011222:	f001 fda3 	bl	8012d6c <pvPortMalloc>
 8011226:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011228:	697b      	ldr	r3, [r7, #20]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d00e      	beq.n	801124c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801122e:	205c      	movs	r0, #92	; 0x5c
 8011230:	f001 fd9c 	bl	8012d6c <pvPortMalloc>
 8011234:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011236:	69fb      	ldr	r3, [r7, #28]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d003      	beq.n	8011244 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801123c:	69fb      	ldr	r3, [r7, #28]
 801123e:	697a      	ldr	r2, [r7, #20]
 8011240:	631a      	str	r2, [r3, #48]	; 0x30
 8011242:	e005      	b.n	8011250 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011244:	6978      	ldr	r0, [r7, #20]
 8011246:	f001 fe59 	bl	8012efc <vPortFree>
 801124a:	e001      	b.n	8011250 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801124c:	2300      	movs	r3, #0
 801124e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011250:	69fb      	ldr	r3, [r7, #28]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d017      	beq.n	8011286 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011256:	69fb      	ldr	r3, [r7, #28]
 8011258:	2200      	movs	r2, #0
 801125a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801125e:	88fa      	ldrh	r2, [r7, #6]
 8011260:	2300      	movs	r3, #0
 8011262:	9303      	str	r3, [sp, #12]
 8011264:	69fb      	ldr	r3, [r7, #28]
 8011266:	9302      	str	r3, [sp, #8]
 8011268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801126a:	9301      	str	r3, [sp, #4]
 801126c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801126e:	9300      	str	r3, [sp, #0]
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	68b9      	ldr	r1, [r7, #8]
 8011274:	68f8      	ldr	r0, [r7, #12]
 8011276:	f000 f80e 	bl	8011296 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801127a:	69f8      	ldr	r0, [r7, #28]
 801127c:	f000 f89c 	bl	80113b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011280:	2301      	movs	r3, #1
 8011282:	61bb      	str	r3, [r7, #24]
 8011284:	e002      	b.n	801128c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011286:	f04f 33ff 	mov.w	r3, #4294967295
 801128a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801128c:	69bb      	ldr	r3, [r7, #24]
	}
 801128e:	4618      	mov	r0, r3
 8011290:	3720      	adds	r7, #32
 8011292:	46bd      	mov	sp, r7
 8011294:	bd80      	pop	{r7, pc}

08011296 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011296:	b580      	push	{r7, lr}
 8011298:	b088      	sub	sp, #32
 801129a:	af00      	add	r7, sp, #0
 801129c:	60f8      	str	r0, [r7, #12]
 801129e:	60b9      	str	r1, [r7, #8]
 80112a0:	607a      	str	r2, [r7, #4]
 80112a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80112a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	009b      	lsls	r3, r3, #2
 80112ac:	461a      	mov	r2, r3
 80112ae:	21a5      	movs	r1, #165	; 0xa5
 80112b0:	f001 ff73 	bl	801319a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80112b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80112b8:	6879      	ldr	r1, [r7, #4]
 80112ba:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80112be:	440b      	add	r3, r1
 80112c0:	009b      	lsls	r3, r3, #2
 80112c2:	4413      	add	r3, r2
 80112c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80112c6:	69bb      	ldr	r3, [r7, #24]
 80112c8:	f023 0307 	bic.w	r3, r3, #7
 80112cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80112ce:	69bb      	ldr	r3, [r7, #24]
 80112d0:	f003 0307 	and.w	r3, r3, #7
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d00b      	beq.n	80112f0 <prvInitialiseNewTask+0x5a>
 80112d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112dc:	b672      	cpsid	i
 80112de:	f383 8811 	msr	BASEPRI, r3
 80112e2:	f3bf 8f6f 	isb	sy
 80112e6:	f3bf 8f4f 	dsb	sy
 80112ea:	b662      	cpsie	i
 80112ec:	617b      	str	r3, [r7, #20]
 80112ee:	e7fe      	b.n	80112ee <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d01f      	beq.n	8011336 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80112f6:	2300      	movs	r3, #0
 80112f8:	61fb      	str	r3, [r7, #28]
 80112fa:	e012      	b.n	8011322 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80112fc:	68ba      	ldr	r2, [r7, #8]
 80112fe:	69fb      	ldr	r3, [r7, #28]
 8011300:	4413      	add	r3, r2
 8011302:	7819      	ldrb	r1, [r3, #0]
 8011304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011306:	69fb      	ldr	r3, [r7, #28]
 8011308:	4413      	add	r3, r2
 801130a:	3334      	adds	r3, #52	; 0x34
 801130c:	460a      	mov	r2, r1
 801130e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011310:	68ba      	ldr	r2, [r7, #8]
 8011312:	69fb      	ldr	r3, [r7, #28]
 8011314:	4413      	add	r3, r2
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d006      	beq.n	801132a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801131c:	69fb      	ldr	r3, [r7, #28]
 801131e:	3301      	adds	r3, #1
 8011320:	61fb      	str	r3, [r7, #28]
 8011322:	69fb      	ldr	r3, [r7, #28]
 8011324:	2b0f      	cmp	r3, #15
 8011326:	d9e9      	bls.n	80112fc <prvInitialiseNewTask+0x66>
 8011328:	e000      	b.n	801132c <prvInitialiseNewTask+0x96>
			{
				break;
 801132a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132e:	2200      	movs	r2, #0
 8011330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011334:	e003      	b.n	801133e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011338:	2200      	movs	r2, #0
 801133a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011340:	2b37      	cmp	r3, #55	; 0x37
 8011342:	d901      	bls.n	8011348 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011344:	2337      	movs	r3, #55	; 0x37
 8011346:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801134a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801134c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801134e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011352:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011356:	2200      	movs	r2, #0
 8011358:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801135a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135c:	3304      	adds	r3, #4
 801135e:	4618      	mov	r0, r3
 8011360:	f7ff f96a 	bl	8010638 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011366:	3318      	adds	r3, #24
 8011368:	4618      	mov	r0, r3
 801136a:	f7ff f965 	bl	8010638 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801136e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011372:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011376:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801137a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801137c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801137e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011382:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011386:	2200      	movs	r2, #0
 8011388:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801138a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801138c:	2200      	movs	r2, #0
 801138e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011392:	683a      	ldr	r2, [r7, #0]
 8011394:	68f9      	ldr	r1, [r7, #12]
 8011396:	69b8      	ldr	r0, [r7, #24]
 8011398:	f001 fabe 	bl	8012918 <pxPortInitialiseStack>
 801139c:	4602      	mov	r2, r0
 801139e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80113a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d002      	beq.n	80113ae <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80113a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80113ae:	bf00      	nop
 80113b0:	3720      	adds	r7, #32
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
	...

080113b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80113c0:	f001 fbb2 	bl	8012b28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80113c4:	4b2d      	ldr	r3, [pc, #180]	; (801147c <prvAddNewTaskToReadyList+0xc4>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	3301      	adds	r3, #1
 80113ca:	4a2c      	ldr	r2, [pc, #176]	; (801147c <prvAddNewTaskToReadyList+0xc4>)
 80113cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80113ce:	4b2c      	ldr	r3, [pc, #176]	; (8011480 <prvAddNewTaskToReadyList+0xc8>)
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d109      	bne.n	80113ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80113d6:	4a2a      	ldr	r2, [pc, #168]	; (8011480 <prvAddNewTaskToReadyList+0xc8>)
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80113dc:	4b27      	ldr	r3, [pc, #156]	; (801147c <prvAddNewTaskToReadyList+0xc4>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	2b01      	cmp	r3, #1
 80113e2:	d110      	bne.n	8011406 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80113e4:	f000 fc92 	bl	8011d0c <prvInitialiseTaskLists>
 80113e8:	e00d      	b.n	8011406 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80113ea:	4b26      	ldr	r3, [pc, #152]	; (8011484 <prvAddNewTaskToReadyList+0xcc>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d109      	bne.n	8011406 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80113f2:	4b23      	ldr	r3, [pc, #140]	; (8011480 <prvAddNewTaskToReadyList+0xc8>)
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113fc:	429a      	cmp	r2, r3
 80113fe:	d802      	bhi.n	8011406 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011400:	4a1f      	ldr	r2, [pc, #124]	; (8011480 <prvAddNewTaskToReadyList+0xc8>)
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011406:	4b20      	ldr	r3, [pc, #128]	; (8011488 <prvAddNewTaskToReadyList+0xd0>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	3301      	adds	r3, #1
 801140c:	4a1e      	ldr	r2, [pc, #120]	; (8011488 <prvAddNewTaskToReadyList+0xd0>)
 801140e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011410:	4b1d      	ldr	r3, [pc, #116]	; (8011488 <prvAddNewTaskToReadyList+0xd0>)
 8011412:	681a      	ldr	r2, [r3, #0]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801141c:	4b1b      	ldr	r3, [pc, #108]	; (801148c <prvAddNewTaskToReadyList+0xd4>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	429a      	cmp	r2, r3
 8011422:	d903      	bls.n	801142c <prvAddNewTaskToReadyList+0x74>
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011428:	4a18      	ldr	r2, [pc, #96]	; (801148c <prvAddNewTaskToReadyList+0xd4>)
 801142a:	6013      	str	r3, [r2, #0]
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011430:	4613      	mov	r3, r2
 8011432:	009b      	lsls	r3, r3, #2
 8011434:	4413      	add	r3, r2
 8011436:	009b      	lsls	r3, r3, #2
 8011438:	4a15      	ldr	r2, [pc, #84]	; (8011490 <prvAddNewTaskToReadyList+0xd8>)
 801143a:	441a      	add	r2, r3
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	3304      	adds	r3, #4
 8011440:	4619      	mov	r1, r3
 8011442:	4610      	mov	r0, r2
 8011444:	f7ff f905 	bl	8010652 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011448:	f001 fba0 	bl	8012b8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801144c:	4b0d      	ldr	r3, [pc, #52]	; (8011484 <prvAddNewTaskToReadyList+0xcc>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d00e      	beq.n	8011472 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011454:	4b0a      	ldr	r3, [pc, #40]	; (8011480 <prvAddNewTaskToReadyList+0xc8>)
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801145e:	429a      	cmp	r2, r3
 8011460:	d207      	bcs.n	8011472 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011462:	4b0c      	ldr	r3, [pc, #48]	; (8011494 <prvAddNewTaskToReadyList+0xdc>)
 8011464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011468:	601a      	str	r2, [r3, #0]
 801146a:	f3bf 8f4f 	dsb	sy
 801146e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011472:	bf00      	nop
 8011474:	3708      	adds	r7, #8
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}
 801147a:	bf00      	nop
 801147c:	20003f38 	.word	0x20003f38
 8011480:	20003a64 	.word	0x20003a64
 8011484:	20003f44 	.word	0x20003f44
 8011488:	20003f54 	.word	0x20003f54
 801148c:	20003f40 	.word	0x20003f40
 8011490:	20003a68 	.word	0x20003a68
 8011494:	e000ed04 	.word	0xe000ed04

08011498 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8011498:	b580      	push	{r7, lr}
 801149a:	b084      	sub	sp, #16
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80114a0:	f001 fb42 	bl	8012b28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d102      	bne.n	80114b0 <vTaskDelete+0x18>
 80114aa:	4b2d      	ldr	r3, [pc, #180]	; (8011560 <vTaskDelete+0xc8>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	e000      	b.n	80114b2 <vTaskDelete+0x1a>
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	3304      	adds	r3, #4
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7ff f927 	bl	801070c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d004      	beq.n	80114d0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	3318      	adds	r3, #24
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7ff f91e 	bl	801070c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80114d0:	4b24      	ldr	r3, [pc, #144]	; (8011564 <vTaskDelete+0xcc>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	3301      	adds	r3, #1
 80114d6:	4a23      	ldr	r2, [pc, #140]	; (8011564 <vTaskDelete+0xcc>)
 80114d8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80114da:	4b21      	ldr	r3, [pc, #132]	; (8011560 <vTaskDelete+0xc8>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	68fa      	ldr	r2, [r7, #12]
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d10b      	bne.n	80114fc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	3304      	adds	r3, #4
 80114e8:	4619      	mov	r1, r3
 80114ea:	481f      	ldr	r0, [pc, #124]	; (8011568 <vTaskDelete+0xd0>)
 80114ec:	f7ff f8b1 	bl	8010652 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80114f0:	4b1e      	ldr	r3, [pc, #120]	; (801156c <vTaskDelete+0xd4>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	3301      	adds	r3, #1
 80114f6:	4a1d      	ldr	r2, [pc, #116]	; (801156c <vTaskDelete+0xd4>)
 80114f8:	6013      	str	r3, [r2, #0]
 80114fa:	e009      	b.n	8011510 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80114fc:	4b1c      	ldr	r3, [pc, #112]	; (8011570 <vTaskDelete+0xd8>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	3b01      	subs	r3, #1
 8011502:	4a1b      	ldr	r2, [pc, #108]	; (8011570 <vTaskDelete+0xd8>)
 8011504:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8011506:	68f8      	ldr	r0, [r7, #12]
 8011508:	f000 fc6c 	bl	8011de4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801150c:	f000 fc9a 	bl	8011e44 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8011510:	f001 fb3c 	bl	8012b8c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8011514:	4b17      	ldr	r3, [pc, #92]	; (8011574 <vTaskDelete+0xdc>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d01c      	beq.n	8011556 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 801151c:	4b10      	ldr	r3, [pc, #64]	; (8011560 <vTaskDelete+0xc8>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	68fa      	ldr	r2, [r7, #12]
 8011522:	429a      	cmp	r2, r3
 8011524:	d117      	bne.n	8011556 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8011526:	4b14      	ldr	r3, [pc, #80]	; (8011578 <vTaskDelete+0xe0>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d00b      	beq.n	8011546 <vTaskDelete+0xae>
 801152e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011532:	b672      	cpsid	i
 8011534:	f383 8811 	msr	BASEPRI, r3
 8011538:	f3bf 8f6f 	isb	sy
 801153c:	f3bf 8f4f 	dsb	sy
 8011540:	b662      	cpsie	i
 8011542:	60bb      	str	r3, [r7, #8]
 8011544:	e7fe      	b.n	8011544 <vTaskDelete+0xac>
				portYIELD_WITHIN_API();
 8011546:	4b0d      	ldr	r3, [pc, #52]	; (801157c <vTaskDelete+0xe4>)
 8011548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801154c:	601a      	str	r2, [r3, #0]
 801154e:	f3bf 8f4f 	dsb	sy
 8011552:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011556:	bf00      	nop
 8011558:	3710      	adds	r7, #16
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}
 801155e:	bf00      	nop
 8011560:	20003a64 	.word	0x20003a64
 8011564:	20003f54 	.word	0x20003f54
 8011568:	20003f0c 	.word	0x20003f0c
 801156c:	20003f20 	.word	0x20003f20
 8011570:	20003f38 	.word	0x20003f38
 8011574:	20003f44 	.word	0x20003f44
 8011578:	20003f60 	.word	0x20003f60
 801157c:	e000ed04 	.word	0xe000ed04

08011580 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011580:	b580      	push	{r7, lr}
 8011582:	b084      	sub	sp, #16
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011588:	2300      	movs	r3, #0
 801158a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d018      	beq.n	80115c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011592:	4b14      	ldr	r3, [pc, #80]	; (80115e4 <vTaskDelay+0x64>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d00b      	beq.n	80115b2 <vTaskDelay+0x32>
 801159a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801159e:	b672      	cpsid	i
 80115a0:	f383 8811 	msr	BASEPRI, r3
 80115a4:	f3bf 8f6f 	isb	sy
 80115a8:	f3bf 8f4f 	dsb	sy
 80115ac:	b662      	cpsie	i
 80115ae:	60bb      	str	r3, [r7, #8]
 80115b0:	e7fe      	b.n	80115b0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80115b2:	f000 f883 	bl	80116bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80115b6:	2100      	movs	r1, #0
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	f000 fe05 	bl	80121c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80115be:	f000 f88b 	bl	80116d8 <xTaskResumeAll>
 80115c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d107      	bne.n	80115da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80115ca:	4b07      	ldr	r3, [pc, #28]	; (80115e8 <vTaskDelay+0x68>)
 80115cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115d0:	601a      	str	r2, [r3, #0]
 80115d2:	f3bf 8f4f 	dsb	sy
 80115d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80115da:	bf00      	nop
 80115dc:	3710      	adds	r7, #16
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}
 80115e2:	bf00      	nop
 80115e4:	20003f60 	.word	0x20003f60
 80115e8:	e000ed04 	.word	0xe000ed04

080115ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b08a      	sub	sp, #40	; 0x28
 80115f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80115f2:	2300      	movs	r3, #0
 80115f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80115f6:	2300      	movs	r3, #0
 80115f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80115fa:	463a      	mov	r2, r7
 80115fc:	1d39      	adds	r1, r7, #4
 80115fe:	f107 0308 	add.w	r3, r7, #8
 8011602:	4618      	mov	r0, r3
 8011604:	f7fe ffc4 	bl	8010590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011608:	6839      	ldr	r1, [r7, #0]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	68ba      	ldr	r2, [r7, #8]
 801160e:	9202      	str	r2, [sp, #8]
 8011610:	9301      	str	r3, [sp, #4]
 8011612:	2300      	movs	r3, #0
 8011614:	9300      	str	r3, [sp, #0]
 8011616:	2300      	movs	r3, #0
 8011618:	460a      	mov	r2, r1
 801161a:	4922      	ldr	r1, [pc, #136]	; (80116a4 <vTaskStartScheduler+0xb8>)
 801161c:	4822      	ldr	r0, [pc, #136]	; (80116a8 <vTaskStartScheduler+0xbc>)
 801161e:	f7ff fd95 	bl	801114c <xTaskCreateStatic>
 8011622:	4602      	mov	r2, r0
 8011624:	4b21      	ldr	r3, [pc, #132]	; (80116ac <vTaskStartScheduler+0xc0>)
 8011626:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011628:	4b20      	ldr	r3, [pc, #128]	; (80116ac <vTaskStartScheduler+0xc0>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d002      	beq.n	8011636 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011630:	2301      	movs	r3, #1
 8011632:	617b      	str	r3, [r7, #20]
 8011634:	e001      	b.n	801163a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011636:	2300      	movs	r3, #0
 8011638:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801163a:	697b      	ldr	r3, [r7, #20]
 801163c:	2b01      	cmp	r3, #1
 801163e:	d102      	bne.n	8011646 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011640:	f000 fe16 	bl	8012270 <xTimerCreateTimerTask>
 8011644:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011646:	697b      	ldr	r3, [r7, #20]
 8011648:	2b01      	cmp	r3, #1
 801164a:	d117      	bne.n	801167c <vTaskStartScheduler+0x90>
 801164c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011650:	b672      	cpsid	i
 8011652:	f383 8811 	msr	BASEPRI, r3
 8011656:	f3bf 8f6f 	isb	sy
 801165a:	f3bf 8f4f 	dsb	sy
 801165e:	b662      	cpsie	i
 8011660:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011662:	4b13      	ldr	r3, [pc, #76]	; (80116b0 <vTaskStartScheduler+0xc4>)
 8011664:	f04f 32ff 	mov.w	r2, #4294967295
 8011668:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801166a:	4b12      	ldr	r3, [pc, #72]	; (80116b4 <vTaskStartScheduler+0xc8>)
 801166c:	2201      	movs	r2, #1
 801166e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011670:	4b11      	ldr	r3, [pc, #68]	; (80116b8 <vTaskStartScheduler+0xcc>)
 8011672:	2200      	movs	r2, #0
 8011674:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011676:	f001 f9db 	bl	8012a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801167a:	e00f      	b.n	801169c <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011682:	d10b      	bne.n	801169c <vTaskStartScheduler+0xb0>
 8011684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011688:	b672      	cpsid	i
 801168a:	f383 8811 	msr	BASEPRI, r3
 801168e:	f3bf 8f6f 	isb	sy
 8011692:	f3bf 8f4f 	dsb	sy
 8011696:	b662      	cpsie	i
 8011698:	60fb      	str	r3, [r7, #12]
 801169a:	e7fe      	b.n	801169a <vTaskStartScheduler+0xae>
}
 801169c:	bf00      	nop
 801169e:	3718      	adds	r7, #24
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}
 80116a4:	0801795c 	.word	0x0801795c
 80116a8:	08011cdd 	.word	0x08011cdd
 80116ac:	20003f5c 	.word	0x20003f5c
 80116b0:	20003f58 	.word	0x20003f58
 80116b4:	20003f44 	.word	0x20003f44
 80116b8:	20003f3c 	.word	0x20003f3c

080116bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80116bc:	b480      	push	{r7}
 80116be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80116c0:	4b04      	ldr	r3, [pc, #16]	; (80116d4 <vTaskSuspendAll+0x18>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	3301      	adds	r3, #1
 80116c6:	4a03      	ldr	r2, [pc, #12]	; (80116d4 <vTaskSuspendAll+0x18>)
 80116c8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80116ca:	bf00      	nop
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr
 80116d4:	20003f60 	.word	0x20003f60

080116d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b084      	sub	sp, #16
 80116dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80116de:	2300      	movs	r3, #0
 80116e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80116e2:	2300      	movs	r3, #0
 80116e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80116e6:	4b42      	ldr	r3, [pc, #264]	; (80117f0 <xTaskResumeAll+0x118>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d10b      	bne.n	8011706 <xTaskResumeAll+0x2e>
 80116ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116f2:	b672      	cpsid	i
 80116f4:	f383 8811 	msr	BASEPRI, r3
 80116f8:	f3bf 8f6f 	isb	sy
 80116fc:	f3bf 8f4f 	dsb	sy
 8011700:	b662      	cpsie	i
 8011702:	603b      	str	r3, [r7, #0]
 8011704:	e7fe      	b.n	8011704 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011706:	f001 fa0f 	bl	8012b28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801170a:	4b39      	ldr	r3, [pc, #228]	; (80117f0 <xTaskResumeAll+0x118>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	3b01      	subs	r3, #1
 8011710:	4a37      	ldr	r2, [pc, #220]	; (80117f0 <xTaskResumeAll+0x118>)
 8011712:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011714:	4b36      	ldr	r3, [pc, #216]	; (80117f0 <xTaskResumeAll+0x118>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d162      	bne.n	80117e2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801171c:	4b35      	ldr	r3, [pc, #212]	; (80117f4 <xTaskResumeAll+0x11c>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d05e      	beq.n	80117e2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011724:	e02f      	b.n	8011786 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011726:	4b34      	ldr	r3, [pc, #208]	; (80117f8 <xTaskResumeAll+0x120>)
 8011728:	68db      	ldr	r3, [r3, #12]
 801172a:	68db      	ldr	r3, [r3, #12]
 801172c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	3318      	adds	r3, #24
 8011732:	4618      	mov	r0, r3
 8011734:	f7fe ffea 	bl	801070c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	3304      	adds	r3, #4
 801173c:	4618      	mov	r0, r3
 801173e:	f7fe ffe5 	bl	801070c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011746:	4b2d      	ldr	r3, [pc, #180]	; (80117fc <xTaskResumeAll+0x124>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	429a      	cmp	r2, r3
 801174c:	d903      	bls.n	8011756 <xTaskResumeAll+0x7e>
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011752:	4a2a      	ldr	r2, [pc, #168]	; (80117fc <xTaskResumeAll+0x124>)
 8011754:	6013      	str	r3, [r2, #0]
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801175a:	4613      	mov	r3, r2
 801175c:	009b      	lsls	r3, r3, #2
 801175e:	4413      	add	r3, r2
 8011760:	009b      	lsls	r3, r3, #2
 8011762:	4a27      	ldr	r2, [pc, #156]	; (8011800 <xTaskResumeAll+0x128>)
 8011764:	441a      	add	r2, r3
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	3304      	adds	r3, #4
 801176a:	4619      	mov	r1, r3
 801176c:	4610      	mov	r0, r2
 801176e:	f7fe ff70 	bl	8010652 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011776:	4b23      	ldr	r3, [pc, #140]	; (8011804 <xTaskResumeAll+0x12c>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801177c:	429a      	cmp	r2, r3
 801177e:	d302      	bcc.n	8011786 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8011780:	4b21      	ldr	r3, [pc, #132]	; (8011808 <xTaskResumeAll+0x130>)
 8011782:	2201      	movs	r2, #1
 8011784:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011786:	4b1c      	ldr	r3, [pc, #112]	; (80117f8 <xTaskResumeAll+0x120>)
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d1cb      	bne.n	8011726 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d001      	beq.n	8011798 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011794:	f000 fb56 	bl	8011e44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011798:	4b1c      	ldr	r3, [pc, #112]	; (801180c <xTaskResumeAll+0x134>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d010      	beq.n	80117c6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80117a4:	f000 f846 	bl	8011834 <xTaskIncrementTick>
 80117a8:	4603      	mov	r3, r0
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d002      	beq.n	80117b4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80117ae:	4b16      	ldr	r3, [pc, #88]	; (8011808 <xTaskResumeAll+0x130>)
 80117b0:	2201      	movs	r2, #1
 80117b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	3b01      	subs	r3, #1
 80117b8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d1f1      	bne.n	80117a4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80117c0:	4b12      	ldr	r3, [pc, #72]	; (801180c <xTaskResumeAll+0x134>)
 80117c2:	2200      	movs	r2, #0
 80117c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80117c6:	4b10      	ldr	r3, [pc, #64]	; (8011808 <xTaskResumeAll+0x130>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d009      	beq.n	80117e2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80117ce:	2301      	movs	r3, #1
 80117d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80117d2:	4b0f      	ldr	r3, [pc, #60]	; (8011810 <xTaskResumeAll+0x138>)
 80117d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117d8:	601a      	str	r2, [r3, #0]
 80117da:	f3bf 8f4f 	dsb	sy
 80117de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80117e2:	f001 f9d3 	bl	8012b8c <vPortExitCritical>

	return xAlreadyYielded;
 80117e6:	68bb      	ldr	r3, [r7, #8]
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	3710      	adds	r7, #16
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}
 80117f0:	20003f60 	.word	0x20003f60
 80117f4:	20003f38 	.word	0x20003f38
 80117f8:	20003ef8 	.word	0x20003ef8
 80117fc:	20003f40 	.word	0x20003f40
 8011800:	20003a68 	.word	0x20003a68
 8011804:	20003a64 	.word	0x20003a64
 8011808:	20003f4c 	.word	0x20003f4c
 801180c:	20003f48 	.word	0x20003f48
 8011810:	e000ed04 	.word	0xe000ed04

08011814 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011814:	b480      	push	{r7}
 8011816:	b083      	sub	sp, #12
 8011818:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801181a:	4b05      	ldr	r3, [pc, #20]	; (8011830 <xTaskGetTickCount+0x1c>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011820:	687b      	ldr	r3, [r7, #4]
}
 8011822:	4618      	mov	r0, r3
 8011824:	370c      	adds	r7, #12
 8011826:	46bd      	mov	sp, r7
 8011828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182c:	4770      	bx	lr
 801182e:	bf00      	nop
 8011830:	20003f3c 	.word	0x20003f3c

08011834 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b086      	sub	sp, #24
 8011838:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801183a:	2300      	movs	r3, #0
 801183c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801183e:	4b4f      	ldr	r3, [pc, #316]	; (801197c <xTaskIncrementTick+0x148>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	2b00      	cmp	r3, #0
 8011844:	f040 808a 	bne.w	801195c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011848:	4b4d      	ldr	r3, [pc, #308]	; (8011980 <xTaskIncrementTick+0x14c>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	3301      	adds	r3, #1
 801184e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011850:	4a4b      	ldr	r2, [pc, #300]	; (8011980 <xTaskIncrementTick+0x14c>)
 8011852:	693b      	ldr	r3, [r7, #16]
 8011854:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011856:	693b      	ldr	r3, [r7, #16]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d121      	bne.n	80118a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801185c:	4b49      	ldr	r3, [pc, #292]	; (8011984 <xTaskIncrementTick+0x150>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d00b      	beq.n	801187e <xTaskIncrementTick+0x4a>
 8011866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801186a:	b672      	cpsid	i
 801186c:	f383 8811 	msr	BASEPRI, r3
 8011870:	f3bf 8f6f 	isb	sy
 8011874:	f3bf 8f4f 	dsb	sy
 8011878:	b662      	cpsie	i
 801187a:	603b      	str	r3, [r7, #0]
 801187c:	e7fe      	b.n	801187c <xTaskIncrementTick+0x48>
 801187e:	4b41      	ldr	r3, [pc, #260]	; (8011984 <xTaskIncrementTick+0x150>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	60fb      	str	r3, [r7, #12]
 8011884:	4b40      	ldr	r3, [pc, #256]	; (8011988 <xTaskIncrementTick+0x154>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	4a3e      	ldr	r2, [pc, #248]	; (8011984 <xTaskIncrementTick+0x150>)
 801188a:	6013      	str	r3, [r2, #0]
 801188c:	4a3e      	ldr	r2, [pc, #248]	; (8011988 <xTaskIncrementTick+0x154>)
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	6013      	str	r3, [r2, #0]
 8011892:	4b3e      	ldr	r3, [pc, #248]	; (801198c <xTaskIncrementTick+0x158>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	3301      	adds	r3, #1
 8011898:	4a3c      	ldr	r2, [pc, #240]	; (801198c <xTaskIncrementTick+0x158>)
 801189a:	6013      	str	r3, [r2, #0]
 801189c:	f000 fad2 	bl	8011e44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80118a0:	4b3b      	ldr	r3, [pc, #236]	; (8011990 <xTaskIncrementTick+0x15c>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	693a      	ldr	r2, [r7, #16]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d349      	bcc.n	801193e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80118aa:	4b36      	ldr	r3, [pc, #216]	; (8011984 <xTaskIncrementTick+0x150>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d104      	bne.n	80118be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118b4:	4b36      	ldr	r3, [pc, #216]	; (8011990 <xTaskIncrementTick+0x15c>)
 80118b6:	f04f 32ff 	mov.w	r2, #4294967295
 80118ba:	601a      	str	r2, [r3, #0]
					break;
 80118bc:	e03f      	b.n	801193e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118be:	4b31      	ldr	r3, [pc, #196]	; (8011984 <xTaskIncrementTick+0x150>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	68db      	ldr	r3, [r3, #12]
 80118c4:	68db      	ldr	r3, [r3, #12]
 80118c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	685b      	ldr	r3, [r3, #4]
 80118cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80118ce:	693a      	ldr	r2, [r7, #16]
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d203      	bcs.n	80118de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80118d6:	4a2e      	ldr	r2, [pc, #184]	; (8011990 <xTaskIncrementTick+0x15c>)
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80118dc:	e02f      	b.n	801193e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80118de:	68bb      	ldr	r3, [r7, #8]
 80118e0:	3304      	adds	r3, #4
 80118e2:	4618      	mov	r0, r3
 80118e4:	f7fe ff12 	bl	801070c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d004      	beq.n	80118fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	3318      	adds	r3, #24
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7fe ff09 	bl	801070c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118fe:	4b25      	ldr	r3, [pc, #148]	; (8011994 <xTaskIncrementTick+0x160>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	429a      	cmp	r2, r3
 8011904:	d903      	bls.n	801190e <xTaskIncrementTick+0xda>
 8011906:	68bb      	ldr	r3, [r7, #8]
 8011908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801190a:	4a22      	ldr	r2, [pc, #136]	; (8011994 <xTaskIncrementTick+0x160>)
 801190c:	6013      	str	r3, [r2, #0]
 801190e:	68bb      	ldr	r3, [r7, #8]
 8011910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011912:	4613      	mov	r3, r2
 8011914:	009b      	lsls	r3, r3, #2
 8011916:	4413      	add	r3, r2
 8011918:	009b      	lsls	r3, r3, #2
 801191a:	4a1f      	ldr	r2, [pc, #124]	; (8011998 <xTaskIncrementTick+0x164>)
 801191c:	441a      	add	r2, r3
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	3304      	adds	r3, #4
 8011922:	4619      	mov	r1, r3
 8011924:	4610      	mov	r0, r2
 8011926:	f7fe fe94 	bl	8010652 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801192a:	68bb      	ldr	r3, [r7, #8]
 801192c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801192e:	4b1b      	ldr	r3, [pc, #108]	; (801199c <xTaskIncrementTick+0x168>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011934:	429a      	cmp	r2, r3
 8011936:	d3b8      	bcc.n	80118aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011938:	2301      	movs	r3, #1
 801193a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801193c:	e7b5      	b.n	80118aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801193e:	4b17      	ldr	r3, [pc, #92]	; (801199c <xTaskIncrementTick+0x168>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011944:	4914      	ldr	r1, [pc, #80]	; (8011998 <xTaskIncrementTick+0x164>)
 8011946:	4613      	mov	r3, r2
 8011948:	009b      	lsls	r3, r3, #2
 801194a:	4413      	add	r3, r2
 801194c:	009b      	lsls	r3, r3, #2
 801194e:	440b      	add	r3, r1
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	2b01      	cmp	r3, #1
 8011954:	d907      	bls.n	8011966 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8011956:	2301      	movs	r3, #1
 8011958:	617b      	str	r3, [r7, #20]
 801195a:	e004      	b.n	8011966 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801195c:	4b10      	ldr	r3, [pc, #64]	; (80119a0 <xTaskIncrementTick+0x16c>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	3301      	adds	r3, #1
 8011962:	4a0f      	ldr	r2, [pc, #60]	; (80119a0 <xTaskIncrementTick+0x16c>)
 8011964:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011966:	4b0f      	ldr	r3, [pc, #60]	; (80119a4 <xTaskIncrementTick+0x170>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d001      	beq.n	8011972 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801196e:	2301      	movs	r3, #1
 8011970:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011972:	697b      	ldr	r3, [r7, #20]
}
 8011974:	4618      	mov	r0, r3
 8011976:	3718      	adds	r7, #24
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}
 801197c:	20003f60 	.word	0x20003f60
 8011980:	20003f3c 	.word	0x20003f3c
 8011984:	20003ef0 	.word	0x20003ef0
 8011988:	20003ef4 	.word	0x20003ef4
 801198c:	20003f50 	.word	0x20003f50
 8011990:	20003f58 	.word	0x20003f58
 8011994:	20003f40 	.word	0x20003f40
 8011998:	20003a68 	.word	0x20003a68
 801199c:	20003a64 	.word	0x20003a64
 80119a0:	20003f48 	.word	0x20003f48
 80119a4:	20003f4c 	.word	0x20003f4c

080119a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80119a8:	b480      	push	{r7}
 80119aa:	b085      	sub	sp, #20
 80119ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80119ae:	4b28      	ldr	r3, [pc, #160]	; (8011a50 <vTaskSwitchContext+0xa8>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d003      	beq.n	80119be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80119b6:	4b27      	ldr	r3, [pc, #156]	; (8011a54 <vTaskSwitchContext+0xac>)
 80119b8:	2201      	movs	r2, #1
 80119ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80119bc:	e042      	b.n	8011a44 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80119be:	4b25      	ldr	r3, [pc, #148]	; (8011a54 <vTaskSwitchContext+0xac>)
 80119c0:	2200      	movs	r2, #0
 80119c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119c4:	4b24      	ldr	r3, [pc, #144]	; (8011a58 <vTaskSwitchContext+0xb0>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	60fb      	str	r3, [r7, #12]
 80119ca:	e011      	b.n	80119f0 <vTaskSwitchContext+0x48>
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d10b      	bne.n	80119ea <vTaskSwitchContext+0x42>
 80119d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119d6:	b672      	cpsid	i
 80119d8:	f383 8811 	msr	BASEPRI, r3
 80119dc:	f3bf 8f6f 	isb	sy
 80119e0:	f3bf 8f4f 	dsb	sy
 80119e4:	b662      	cpsie	i
 80119e6:	607b      	str	r3, [r7, #4]
 80119e8:	e7fe      	b.n	80119e8 <vTaskSwitchContext+0x40>
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	3b01      	subs	r3, #1
 80119ee:	60fb      	str	r3, [r7, #12]
 80119f0:	491a      	ldr	r1, [pc, #104]	; (8011a5c <vTaskSwitchContext+0xb4>)
 80119f2:	68fa      	ldr	r2, [r7, #12]
 80119f4:	4613      	mov	r3, r2
 80119f6:	009b      	lsls	r3, r3, #2
 80119f8:	4413      	add	r3, r2
 80119fa:	009b      	lsls	r3, r3, #2
 80119fc:	440b      	add	r3, r1
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d0e3      	beq.n	80119cc <vTaskSwitchContext+0x24>
 8011a04:	68fa      	ldr	r2, [r7, #12]
 8011a06:	4613      	mov	r3, r2
 8011a08:	009b      	lsls	r3, r3, #2
 8011a0a:	4413      	add	r3, r2
 8011a0c:	009b      	lsls	r3, r3, #2
 8011a0e:	4a13      	ldr	r2, [pc, #76]	; (8011a5c <vTaskSwitchContext+0xb4>)
 8011a10:	4413      	add	r3, r2
 8011a12:	60bb      	str	r3, [r7, #8]
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	685a      	ldr	r2, [r3, #4]
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	605a      	str	r2, [r3, #4]
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	685a      	ldr	r2, [r3, #4]
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	3308      	adds	r3, #8
 8011a26:	429a      	cmp	r2, r3
 8011a28:	d104      	bne.n	8011a34 <vTaskSwitchContext+0x8c>
 8011a2a:	68bb      	ldr	r3, [r7, #8]
 8011a2c:	685b      	ldr	r3, [r3, #4]
 8011a2e:	685a      	ldr	r2, [r3, #4]
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	605a      	str	r2, [r3, #4]
 8011a34:	68bb      	ldr	r3, [r7, #8]
 8011a36:	685b      	ldr	r3, [r3, #4]
 8011a38:	68db      	ldr	r3, [r3, #12]
 8011a3a:	4a09      	ldr	r2, [pc, #36]	; (8011a60 <vTaskSwitchContext+0xb8>)
 8011a3c:	6013      	str	r3, [r2, #0]
 8011a3e:	4a06      	ldr	r2, [pc, #24]	; (8011a58 <vTaskSwitchContext+0xb0>)
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	6013      	str	r3, [r2, #0]
}
 8011a44:	bf00      	nop
 8011a46:	3714      	adds	r7, #20
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr
 8011a50:	20003f60 	.word	0x20003f60
 8011a54:	20003f4c 	.word	0x20003f4c
 8011a58:	20003f40 	.word	0x20003f40
 8011a5c:	20003a68 	.word	0x20003a68
 8011a60:	20003a64 	.word	0x20003a64

08011a64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b084      	sub	sp, #16
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d10b      	bne.n	8011a8c <vTaskPlaceOnEventList+0x28>
 8011a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a78:	b672      	cpsid	i
 8011a7a:	f383 8811 	msr	BASEPRI, r3
 8011a7e:	f3bf 8f6f 	isb	sy
 8011a82:	f3bf 8f4f 	dsb	sy
 8011a86:	b662      	cpsie	i
 8011a88:	60fb      	str	r3, [r7, #12]
 8011a8a:	e7fe      	b.n	8011a8a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011a8c:	4b07      	ldr	r3, [pc, #28]	; (8011aac <vTaskPlaceOnEventList+0x48>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	3318      	adds	r3, #24
 8011a92:	4619      	mov	r1, r3
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f7fe fe00 	bl	801069a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011a9a:	2101      	movs	r1, #1
 8011a9c:	6838      	ldr	r0, [r7, #0]
 8011a9e:	f000 fb93 	bl	80121c8 <prvAddCurrentTaskToDelayedList>
}
 8011aa2:	bf00      	nop
 8011aa4:	3710      	adds	r7, #16
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	20003a64 	.word	0x20003a64

08011ab0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b086      	sub	sp, #24
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	60f8      	str	r0, [r7, #12]
 8011ab8:	60b9      	str	r1, [r7, #8]
 8011aba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d10b      	bne.n	8011ada <vTaskPlaceOnEventListRestricted+0x2a>
 8011ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ac6:	b672      	cpsid	i
 8011ac8:	f383 8811 	msr	BASEPRI, r3
 8011acc:	f3bf 8f6f 	isb	sy
 8011ad0:	f3bf 8f4f 	dsb	sy
 8011ad4:	b662      	cpsie	i
 8011ad6:	617b      	str	r3, [r7, #20]
 8011ad8:	e7fe      	b.n	8011ad8 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011ada:	4b0a      	ldr	r3, [pc, #40]	; (8011b04 <vTaskPlaceOnEventListRestricted+0x54>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	3318      	adds	r3, #24
 8011ae0:	4619      	mov	r1, r3
 8011ae2:	68f8      	ldr	r0, [r7, #12]
 8011ae4:	f7fe fdb5 	bl	8010652 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d002      	beq.n	8011af4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8011aee:	f04f 33ff 	mov.w	r3, #4294967295
 8011af2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011af4:	6879      	ldr	r1, [r7, #4]
 8011af6:	68b8      	ldr	r0, [r7, #8]
 8011af8:	f000 fb66 	bl	80121c8 <prvAddCurrentTaskToDelayedList>
	}
 8011afc:	bf00      	nop
 8011afe:	3718      	adds	r7, #24
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bd80      	pop	{r7, pc}
 8011b04:	20003a64 	.word	0x20003a64

08011b08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b086      	sub	sp, #24
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	68db      	ldr	r3, [r3, #12]
 8011b16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d10b      	bne.n	8011b36 <xTaskRemoveFromEventList+0x2e>
 8011b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b22:	b672      	cpsid	i
 8011b24:	f383 8811 	msr	BASEPRI, r3
 8011b28:	f3bf 8f6f 	isb	sy
 8011b2c:	f3bf 8f4f 	dsb	sy
 8011b30:	b662      	cpsie	i
 8011b32:	60fb      	str	r3, [r7, #12]
 8011b34:	e7fe      	b.n	8011b34 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	3318      	adds	r3, #24
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7fe fde6 	bl	801070c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b40:	4b1d      	ldr	r3, [pc, #116]	; (8011bb8 <xTaskRemoveFromEventList+0xb0>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d11d      	bne.n	8011b84 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	3304      	adds	r3, #4
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7fe fddd 	bl	801070c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b56:	4b19      	ldr	r3, [pc, #100]	; (8011bbc <xTaskRemoveFromEventList+0xb4>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d903      	bls.n	8011b66 <xTaskRemoveFromEventList+0x5e>
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b62:	4a16      	ldr	r2, [pc, #88]	; (8011bbc <xTaskRemoveFromEventList+0xb4>)
 8011b64:	6013      	str	r3, [r2, #0]
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b6a:	4613      	mov	r3, r2
 8011b6c:	009b      	lsls	r3, r3, #2
 8011b6e:	4413      	add	r3, r2
 8011b70:	009b      	lsls	r3, r3, #2
 8011b72:	4a13      	ldr	r2, [pc, #76]	; (8011bc0 <xTaskRemoveFromEventList+0xb8>)
 8011b74:	441a      	add	r2, r3
 8011b76:	693b      	ldr	r3, [r7, #16]
 8011b78:	3304      	adds	r3, #4
 8011b7a:	4619      	mov	r1, r3
 8011b7c:	4610      	mov	r0, r2
 8011b7e:	f7fe fd68 	bl	8010652 <vListInsertEnd>
 8011b82:	e005      	b.n	8011b90 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011b84:	693b      	ldr	r3, [r7, #16]
 8011b86:	3318      	adds	r3, #24
 8011b88:	4619      	mov	r1, r3
 8011b8a:	480e      	ldr	r0, [pc, #56]	; (8011bc4 <xTaskRemoveFromEventList+0xbc>)
 8011b8c:	f7fe fd61 	bl	8010652 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011b90:	693b      	ldr	r3, [r7, #16]
 8011b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b94:	4b0c      	ldr	r3, [pc, #48]	; (8011bc8 <xTaskRemoveFromEventList+0xc0>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d905      	bls.n	8011baa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011ba2:	4b0a      	ldr	r3, [pc, #40]	; (8011bcc <xTaskRemoveFromEventList+0xc4>)
 8011ba4:	2201      	movs	r2, #1
 8011ba6:	601a      	str	r2, [r3, #0]
 8011ba8:	e001      	b.n	8011bae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8011baa:	2300      	movs	r3, #0
 8011bac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011bae:	697b      	ldr	r3, [r7, #20]
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3718      	adds	r7, #24
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}
 8011bb8:	20003f60 	.word	0x20003f60
 8011bbc:	20003f40 	.word	0x20003f40
 8011bc0:	20003a68 	.word	0x20003a68
 8011bc4:	20003ef8 	.word	0x20003ef8
 8011bc8:	20003a64 	.word	0x20003a64
 8011bcc:	20003f4c 	.word	0x20003f4c

08011bd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	b083      	sub	sp, #12
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011bd8:	4b06      	ldr	r3, [pc, #24]	; (8011bf4 <vTaskInternalSetTimeOutState+0x24>)
 8011bda:	681a      	ldr	r2, [r3, #0]
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011be0:	4b05      	ldr	r3, [pc, #20]	; (8011bf8 <vTaskInternalSetTimeOutState+0x28>)
 8011be2:	681a      	ldr	r2, [r3, #0]
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	605a      	str	r2, [r3, #4]
}
 8011be8:	bf00      	nop
 8011bea:	370c      	adds	r7, #12
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr
 8011bf4:	20003f50 	.word	0x20003f50
 8011bf8:	20003f3c 	.word	0x20003f3c

08011bfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b088      	sub	sp, #32
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d10b      	bne.n	8011c24 <xTaskCheckForTimeOut+0x28>
 8011c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c10:	b672      	cpsid	i
 8011c12:	f383 8811 	msr	BASEPRI, r3
 8011c16:	f3bf 8f6f 	isb	sy
 8011c1a:	f3bf 8f4f 	dsb	sy
 8011c1e:	b662      	cpsie	i
 8011c20:	613b      	str	r3, [r7, #16]
 8011c22:	e7fe      	b.n	8011c22 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d10b      	bne.n	8011c42 <xTaskCheckForTimeOut+0x46>
 8011c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c2e:	b672      	cpsid	i
 8011c30:	f383 8811 	msr	BASEPRI, r3
 8011c34:	f3bf 8f6f 	isb	sy
 8011c38:	f3bf 8f4f 	dsb	sy
 8011c3c:	b662      	cpsie	i
 8011c3e:	60fb      	str	r3, [r7, #12]
 8011c40:	e7fe      	b.n	8011c40 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8011c42:	f000 ff71 	bl	8012b28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011c46:	4b1d      	ldr	r3, [pc, #116]	; (8011cbc <xTaskCheckForTimeOut+0xc0>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	685b      	ldr	r3, [r3, #4]
 8011c50:	69ba      	ldr	r2, [r7, #24]
 8011c52:	1ad3      	subs	r3, r2, r3
 8011c54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c5e:	d102      	bne.n	8011c66 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011c60:	2300      	movs	r3, #0
 8011c62:	61fb      	str	r3, [r7, #28]
 8011c64:	e023      	b.n	8011cae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681a      	ldr	r2, [r3, #0]
 8011c6a:	4b15      	ldr	r3, [pc, #84]	; (8011cc0 <xTaskCheckForTimeOut+0xc4>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d007      	beq.n	8011c82 <xTaskCheckForTimeOut+0x86>
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	685b      	ldr	r3, [r3, #4]
 8011c76:	69ba      	ldr	r2, [r7, #24]
 8011c78:	429a      	cmp	r2, r3
 8011c7a:	d302      	bcc.n	8011c82 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	61fb      	str	r3, [r7, #28]
 8011c80:	e015      	b.n	8011cae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	697a      	ldr	r2, [r7, #20]
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	d20b      	bcs.n	8011ca4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	681a      	ldr	r2, [r3, #0]
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	1ad2      	subs	r2, r2, r3
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011c98:	6878      	ldr	r0, [r7, #4]
 8011c9a:	f7ff ff99 	bl	8011bd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	61fb      	str	r3, [r7, #28]
 8011ca2:	e004      	b.n	8011cae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011caa:	2301      	movs	r3, #1
 8011cac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011cae:	f000 ff6d 	bl	8012b8c <vPortExitCritical>

	return xReturn;
 8011cb2:	69fb      	ldr	r3, [r7, #28]
}
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	3720      	adds	r7, #32
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	bd80      	pop	{r7, pc}
 8011cbc:	20003f3c 	.word	0x20003f3c
 8011cc0:	20003f50 	.word	0x20003f50

08011cc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011cc8:	4b03      	ldr	r3, [pc, #12]	; (8011cd8 <vTaskMissedYield+0x14>)
 8011cca:	2201      	movs	r2, #1
 8011ccc:	601a      	str	r2, [r3, #0]
}
 8011cce:	bf00      	nop
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd6:	4770      	bx	lr
 8011cd8:	20003f4c 	.word	0x20003f4c

08011cdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b082      	sub	sp, #8
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011ce4:	f000 f852 	bl	8011d8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011ce8:	4b06      	ldr	r3, [pc, #24]	; (8011d04 <prvIdleTask+0x28>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	2b01      	cmp	r3, #1
 8011cee:	d9f9      	bls.n	8011ce4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011cf0:	4b05      	ldr	r3, [pc, #20]	; (8011d08 <prvIdleTask+0x2c>)
 8011cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cf6:	601a      	str	r2, [r3, #0]
 8011cf8:	f3bf 8f4f 	dsb	sy
 8011cfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011d00:	e7f0      	b.n	8011ce4 <prvIdleTask+0x8>
 8011d02:	bf00      	nop
 8011d04:	20003a68 	.word	0x20003a68
 8011d08:	e000ed04 	.word	0xe000ed04

08011d0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011d12:	2300      	movs	r3, #0
 8011d14:	607b      	str	r3, [r7, #4]
 8011d16:	e00c      	b.n	8011d32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011d18:	687a      	ldr	r2, [r7, #4]
 8011d1a:	4613      	mov	r3, r2
 8011d1c:	009b      	lsls	r3, r3, #2
 8011d1e:	4413      	add	r3, r2
 8011d20:	009b      	lsls	r3, r3, #2
 8011d22:	4a12      	ldr	r2, [pc, #72]	; (8011d6c <prvInitialiseTaskLists+0x60>)
 8011d24:	4413      	add	r3, r2
 8011d26:	4618      	mov	r0, r3
 8011d28:	f7fe fc66 	bl	80105f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	3301      	adds	r3, #1
 8011d30:	607b      	str	r3, [r7, #4]
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2b37      	cmp	r3, #55	; 0x37
 8011d36:	d9ef      	bls.n	8011d18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011d38:	480d      	ldr	r0, [pc, #52]	; (8011d70 <prvInitialiseTaskLists+0x64>)
 8011d3a:	f7fe fc5d 	bl	80105f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011d3e:	480d      	ldr	r0, [pc, #52]	; (8011d74 <prvInitialiseTaskLists+0x68>)
 8011d40:	f7fe fc5a 	bl	80105f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011d44:	480c      	ldr	r0, [pc, #48]	; (8011d78 <prvInitialiseTaskLists+0x6c>)
 8011d46:	f7fe fc57 	bl	80105f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011d4a:	480c      	ldr	r0, [pc, #48]	; (8011d7c <prvInitialiseTaskLists+0x70>)
 8011d4c:	f7fe fc54 	bl	80105f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011d50:	480b      	ldr	r0, [pc, #44]	; (8011d80 <prvInitialiseTaskLists+0x74>)
 8011d52:	f7fe fc51 	bl	80105f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011d56:	4b0b      	ldr	r3, [pc, #44]	; (8011d84 <prvInitialiseTaskLists+0x78>)
 8011d58:	4a05      	ldr	r2, [pc, #20]	; (8011d70 <prvInitialiseTaskLists+0x64>)
 8011d5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011d5c:	4b0a      	ldr	r3, [pc, #40]	; (8011d88 <prvInitialiseTaskLists+0x7c>)
 8011d5e:	4a05      	ldr	r2, [pc, #20]	; (8011d74 <prvInitialiseTaskLists+0x68>)
 8011d60:	601a      	str	r2, [r3, #0]
}
 8011d62:	bf00      	nop
 8011d64:	3708      	adds	r7, #8
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}
 8011d6a:	bf00      	nop
 8011d6c:	20003a68 	.word	0x20003a68
 8011d70:	20003ec8 	.word	0x20003ec8
 8011d74:	20003edc 	.word	0x20003edc
 8011d78:	20003ef8 	.word	0x20003ef8
 8011d7c:	20003f0c 	.word	0x20003f0c
 8011d80:	20003f24 	.word	0x20003f24
 8011d84:	20003ef0 	.word	0x20003ef0
 8011d88:	20003ef4 	.word	0x20003ef4

08011d8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b082      	sub	sp, #8
 8011d90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d92:	e019      	b.n	8011dc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011d94:	f000 fec8 	bl	8012b28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d98:	4b0f      	ldr	r3, [pc, #60]	; (8011dd8 <prvCheckTasksWaitingTermination+0x4c>)
 8011d9a:	68db      	ldr	r3, [r3, #12]
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	3304      	adds	r3, #4
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7fe fcb1 	bl	801070c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011daa:	4b0c      	ldr	r3, [pc, #48]	; (8011ddc <prvCheckTasksWaitingTermination+0x50>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	3b01      	subs	r3, #1
 8011db0:	4a0a      	ldr	r2, [pc, #40]	; (8011ddc <prvCheckTasksWaitingTermination+0x50>)
 8011db2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011db4:	4b0a      	ldr	r3, [pc, #40]	; (8011de0 <prvCheckTasksWaitingTermination+0x54>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	3b01      	subs	r3, #1
 8011dba:	4a09      	ldr	r2, [pc, #36]	; (8011de0 <prvCheckTasksWaitingTermination+0x54>)
 8011dbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011dbe:	f000 fee5 	bl	8012b8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f000 f80e 	bl	8011de4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011dc8:	4b05      	ldr	r3, [pc, #20]	; (8011de0 <prvCheckTasksWaitingTermination+0x54>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d1e1      	bne.n	8011d94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011dd0:	bf00      	nop
 8011dd2:	3708      	adds	r7, #8
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}
 8011dd8:	20003f0c 	.word	0x20003f0c
 8011ddc:	20003f38 	.word	0x20003f38
 8011de0:	20003f20 	.word	0x20003f20

08011de4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b084      	sub	sp, #16
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d108      	bne.n	8011e08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f001 f87e 	bl	8012efc <vPortFree>
				vPortFree( pxTCB );
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f001 f87b 	bl	8012efc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011e06:	e019      	b.n	8011e3c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011e0e:	2b01      	cmp	r3, #1
 8011e10:	d103      	bne.n	8011e1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011e12:	6878      	ldr	r0, [r7, #4]
 8011e14:	f001 f872 	bl	8012efc <vPortFree>
	}
 8011e18:	e010      	b.n	8011e3c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011e20:	2b02      	cmp	r3, #2
 8011e22:	d00b      	beq.n	8011e3c <prvDeleteTCB+0x58>
 8011e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e28:	b672      	cpsid	i
 8011e2a:	f383 8811 	msr	BASEPRI, r3
 8011e2e:	f3bf 8f6f 	isb	sy
 8011e32:	f3bf 8f4f 	dsb	sy
 8011e36:	b662      	cpsie	i
 8011e38:	60fb      	str	r3, [r7, #12]
 8011e3a:	e7fe      	b.n	8011e3a <prvDeleteTCB+0x56>
	}
 8011e3c:	bf00      	nop
 8011e3e:	3710      	adds	r7, #16
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}

08011e44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011e44:	b480      	push	{r7}
 8011e46:	b083      	sub	sp, #12
 8011e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011e4a:	4b0c      	ldr	r3, [pc, #48]	; (8011e7c <prvResetNextTaskUnblockTime+0x38>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d104      	bne.n	8011e5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011e54:	4b0a      	ldr	r3, [pc, #40]	; (8011e80 <prvResetNextTaskUnblockTime+0x3c>)
 8011e56:	f04f 32ff 	mov.w	r2, #4294967295
 8011e5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011e5c:	e008      	b.n	8011e70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e5e:	4b07      	ldr	r3, [pc, #28]	; (8011e7c <prvResetNextTaskUnblockTime+0x38>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	68db      	ldr	r3, [r3, #12]
 8011e64:	68db      	ldr	r3, [r3, #12]
 8011e66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	685b      	ldr	r3, [r3, #4]
 8011e6c:	4a04      	ldr	r2, [pc, #16]	; (8011e80 <prvResetNextTaskUnblockTime+0x3c>)
 8011e6e:	6013      	str	r3, [r2, #0]
}
 8011e70:	bf00      	nop
 8011e72:	370c      	adds	r7, #12
 8011e74:	46bd      	mov	sp, r7
 8011e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7a:	4770      	bx	lr
 8011e7c:	20003ef0 	.word	0x20003ef0
 8011e80:	20003f58 	.word	0x20003f58

08011e84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011e84:	b480      	push	{r7}
 8011e86:	b083      	sub	sp, #12
 8011e88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011e8a:	4b0b      	ldr	r3, [pc, #44]	; (8011eb8 <xTaskGetSchedulerState+0x34>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d102      	bne.n	8011e98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011e92:	2301      	movs	r3, #1
 8011e94:	607b      	str	r3, [r7, #4]
 8011e96:	e008      	b.n	8011eaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e98:	4b08      	ldr	r3, [pc, #32]	; (8011ebc <xTaskGetSchedulerState+0x38>)
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d102      	bne.n	8011ea6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011ea0:	2302      	movs	r3, #2
 8011ea2:	607b      	str	r3, [r7, #4]
 8011ea4:	e001      	b.n	8011eaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011eaa:	687b      	ldr	r3, [r7, #4]
	}
 8011eac:	4618      	mov	r0, r3
 8011eae:	370c      	adds	r7, #12
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb6:	4770      	bx	lr
 8011eb8:	20003f44 	.word	0x20003f44
 8011ebc:	20003f60 	.word	0x20003f60

08011ec0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b086      	sub	sp, #24
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011ecc:	2300      	movs	r3, #0
 8011ece:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d058      	beq.n	8011f88 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011ed6:	4b2f      	ldr	r3, [pc, #188]	; (8011f94 <xTaskPriorityDisinherit+0xd4>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	693a      	ldr	r2, [r7, #16]
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d00b      	beq.n	8011ef8 <xTaskPriorityDisinherit+0x38>
 8011ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ee4:	b672      	cpsid	i
 8011ee6:	f383 8811 	msr	BASEPRI, r3
 8011eea:	f3bf 8f6f 	isb	sy
 8011eee:	f3bf 8f4f 	dsb	sy
 8011ef2:	b662      	cpsie	i
 8011ef4:	60fb      	str	r3, [r7, #12]
 8011ef6:	e7fe      	b.n	8011ef6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d10b      	bne.n	8011f18 <xTaskPriorityDisinherit+0x58>
 8011f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f04:	b672      	cpsid	i
 8011f06:	f383 8811 	msr	BASEPRI, r3
 8011f0a:	f3bf 8f6f 	isb	sy
 8011f0e:	f3bf 8f4f 	dsb	sy
 8011f12:	b662      	cpsie	i
 8011f14:	60bb      	str	r3, [r7, #8]
 8011f16:	e7fe      	b.n	8011f16 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8011f18:	693b      	ldr	r3, [r7, #16]
 8011f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f1c:	1e5a      	subs	r2, r3, #1
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011f22:	693b      	ldr	r3, [r7, #16]
 8011f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	d02c      	beq.n	8011f88 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011f2e:	693b      	ldr	r3, [r7, #16]
 8011f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d128      	bne.n	8011f88 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f36:	693b      	ldr	r3, [r7, #16]
 8011f38:	3304      	adds	r3, #4
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7fe fbe6 	bl	801070c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f58:	4b0f      	ldr	r3, [pc, #60]	; (8011f98 <xTaskPriorityDisinherit+0xd8>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d903      	bls.n	8011f68 <xTaskPriorityDisinherit+0xa8>
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f64:	4a0c      	ldr	r2, [pc, #48]	; (8011f98 <xTaskPriorityDisinherit+0xd8>)
 8011f66:	6013      	str	r3, [r2, #0]
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f6c:	4613      	mov	r3, r2
 8011f6e:	009b      	lsls	r3, r3, #2
 8011f70:	4413      	add	r3, r2
 8011f72:	009b      	lsls	r3, r3, #2
 8011f74:	4a09      	ldr	r2, [pc, #36]	; (8011f9c <xTaskPriorityDisinherit+0xdc>)
 8011f76:	441a      	add	r2, r3
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	3304      	adds	r3, #4
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	4610      	mov	r0, r2
 8011f80:	f7fe fb67 	bl	8010652 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011f84:	2301      	movs	r3, #1
 8011f86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011f88:	697b      	ldr	r3, [r7, #20]
	}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3718      	adds	r7, #24
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
 8011f92:	bf00      	nop
 8011f94:	20003a64 	.word	0x20003a64
 8011f98:	20003f40 	.word	0x20003f40
 8011f9c:	20003a68 	.word	0x20003a68

08011fa0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b086      	sub	sp, #24
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	60f8      	str	r0, [r7, #12]
 8011fa8:	60b9      	str	r1, [r7, #8]
 8011faa:	607a      	str	r2, [r7, #4]
 8011fac:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8011fae:	f000 fdbb 	bl	8012b28 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011fb2:	4b26      	ldr	r3, [pc, #152]	; (801204c <xTaskNotifyWait+0xac>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8011fba:	b2db      	uxtb	r3, r3
 8011fbc:	2b02      	cmp	r3, #2
 8011fbe:	d01a      	beq.n	8011ff6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8011fc0:	4b22      	ldr	r3, [pc, #136]	; (801204c <xTaskNotifyWait+0xac>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011fc6:	68fa      	ldr	r2, [r7, #12]
 8011fc8:	43d2      	mvns	r2, r2
 8011fca:	400a      	ands	r2, r1
 8011fcc:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011fce:	4b1f      	ldr	r3, [pc, #124]	; (801204c <xTaskNotifyWait+0xac>)
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d00b      	beq.n	8011ff6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011fde:	2101      	movs	r1, #1
 8011fe0:	6838      	ldr	r0, [r7, #0]
 8011fe2:	f000 f8f1 	bl	80121c8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011fe6:	4b1a      	ldr	r3, [pc, #104]	; (8012050 <xTaskNotifyWait+0xb0>)
 8011fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fec:	601a      	str	r2, [r3, #0]
 8011fee:	f3bf 8f4f 	dsb	sy
 8011ff2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011ff6:	f000 fdc9 	bl	8012b8c <vPortExitCritical>

		taskENTER_CRITICAL();
 8011ffa:	f000 fd95 	bl	8012b28 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d004      	beq.n	801200e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8012004:	4b11      	ldr	r3, [pc, #68]	; (801204c <xTaskNotifyWait+0xac>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801200e:	4b0f      	ldr	r3, [pc, #60]	; (801204c <xTaskNotifyWait+0xac>)
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012016:	b2db      	uxtb	r3, r3
 8012018:	2b02      	cmp	r3, #2
 801201a:	d002      	beq.n	8012022 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801201c:	2300      	movs	r3, #0
 801201e:	617b      	str	r3, [r7, #20]
 8012020:	e008      	b.n	8012034 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8012022:	4b0a      	ldr	r3, [pc, #40]	; (801204c <xTaskNotifyWait+0xac>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012028:	68ba      	ldr	r2, [r7, #8]
 801202a:	43d2      	mvns	r2, r2
 801202c:	400a      	ands	r2, r1
 801202e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8012030:	2301      	movs	r3, #1
 8012032:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012034:	4b05      	ldr	r3, [pc, #20]	; (801204c <xTaskNotifyWait+0xac>)
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	2200      	movs	r2, #0
 801203a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 801203e:	f000 fda5 	bl	8012b8c <vPortExitCritical>

		return xReturn;
 8012042:	697b      	ldr	r3, [r7, #20]
	}
 8012044:	4618      	mov	r0, r3
 8012046:	3718      	adds	r7, #24
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}
 801204c:	20003a64 	.word	0x20003a64
 8012050:	e000ed04 	.word	0xe000ed04

08012054 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8012054:	b580      	push	{r7, lr}
 8012056:	b08a      	sub	sp, #40	; 0x28
 8012058:	af00      	add	r7, sp, #0
 801205a:	60f8      	str	r0, [r7, #12]
 801205c:	60b9      	str	r1, [r7, #8]
 801205e:	603b      	str	r3, [r7, #0]
 8012060:	4613      	mov	r3, r2
 8012062:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8012064:	2301      	movs	r3, #1
 8012066:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d10b      	bne.n	8012086 <xTaskGenericNotify+0x32>
 801206e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012072:	b672      	cpsid	i
 8012074:	f383 8811 	msr	BASEPRI, r3
 8012078:	f3bf 8f6f 	isb	sy
 801207c:	f3bf 8f4f 	dsb	sy
 8012080:	b662      	cpsie	i
 8012082:	61bb      	str	r3, [r7, #24]
 8012084:	e7fe      	b.n	8012084 <xTaskGenericNotify+0x30>
		pxTCB = xTaskToNotify;
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801208a:	f000 fd4d 	bl	8012b28 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d003      	beq.n	801209c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012094:	6a3b      	ldr	r3, [r7, #32]
 8012096:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801209c:	6a3b      	ldr	r3, [r7, #32]
 801209e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80120a2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80120a4:	6a3b      	ldr	r3, [r7, #32]
 80120a6:	2202      	movs	r2, #2
 80120a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80120ac:	79fb      	ldrb	r3, [r7, #7]
 80120ae:	2b04      	cmp	r3, #4
 80120b0:	d827      	bhi.n	8012102 <xTaskGenericNotify+0xae>
 80120b2:	a201      	add	r2, pc, #4	; (adr r2, 80120b8 <xTaskGenericNotify+0x64>)
 80120b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120b8:	08012125 	.word	0x08012125
 80120bc:	080120cd 	.word	0x080120cd
 80120c0:	080120db 	.word	0x080120db
 80120c4:	080120e7 	.word	0x080120e7
 80120c8:	080120ef 	.word	0x080120ef
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80120cc:	6a3b      	ldr	r3, [r7, #32]
 80120ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	431a      	orrs	r2, r3
 80120d4:	6a3b      	ldr	r3, [r7, #32]
 80120d6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80120d8:	e027      	b.n	801212a <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80120da:	6a3b      	ldr	r3, [r7, #32]
 80120dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120de:	1c5a      	adds	r2, r3, #1
 80120e0:	6a3b      	ldr	r3, [r7, #32]
 80120e2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80120e4:	e021      	b.n	801212a <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80120e6:	6a3b      	ldr	r3, [r7, #32]
 80120e8:	68ba      	ldr	r2, [r7, #8]
 80120ea:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80120ec:	e01d      	b.n	801212a <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80120ee:	7ffb      	ldrb	r3, [r7, #31]
 80120f0:	2b02      	cmp	r3, #2
 80120f2:	d003      	beq.n	80120fc <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80120f4:	6a3b      	ldr	r3, [r7, #32]
 80120f6:	68ba      	ldr	r2, [r7, #8]
 80120f8:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80120fa:	e016      	b.n	801212a <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80120fc:	2300      	movs	r3, #0
 80120fe:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8012100:	e013      	b.n	801212a <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012102:	6a3b      	ldr	r3, [r7, #32]
 8012104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012106:	f1b3 3fff 	cmp.w	r3, #4294967295
 801210a:	d00d      	beq.n	8012128 <xTaskGenericNotify+0xd4>
 801210c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012110:	b672      	cpsid	i
 8012112:	f383 8811 	msr	BASEPRI, r3
 8012116:	f3bf 8f6f 	isb	sy
 801211a:	f3bf 8f4f 	dsb	sy
 801211e:	b662      	cpsie	i
 8012120:	617b      	str	r3, [r7, #20]
 8012122:	e7fe      	b.n	8012122 <xTaskGenericNotify+0xce>
					break;
 8012124:	bf00      	nop
 8012126:	e000      	b.n	801212a <xTaskGenericNotify+0xd6>

					break;
 8012128:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801212a:	7ffb      	ldrb	r3, [r7, #31]
 801212c:	2b01      	cmp	r3, #1
 801212e:	d13b      	bne.n	80121a8 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012130:	6a3b      	ldr	r3, [r7, #32]
 8012132:	3304      	adds	r3, #4
 8012134:	4618      	mov	r0, r3
 8012136:	f7fe fae9 	bl	801070c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801213a:	6a3b      	ldr	r3, [r7, #32]
 801213c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801213e:	4b1e      	ldr	r3, [pc, #120]	; (80121b8 <xTaskGenericNotify+0x164>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	429a      	cmp	r2, r3
 8012144:	d903      	bls.n	801214e <xTaskGenericNotify+0xfa>
 8012146:	6a3b      	ldr	r3, [r7, #32]
 8012148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801214a:	4a1b      	ldr	r2, [pc, #108]	; (80121b8 <xTaskGenericNotify+0x164>)
 801214c:	6013      	str	r3, [r2, #0]
 801214e:	6a3b      	ldr	r3, [r7, #32]
 8012150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012152:	4613      	mov	r3, r2
 8012154:	009b      	lsls	r3, r3, #2
 8012156:	4413      	add	r3, r2
 8012158:	009b      	lsls	r3, r3, #2
 801215a:	4a18      	ldr	r2, [pc, #96]	; (80121bc <xTaskGenericNotify+0x168>)
 801215c:	441a      	add	r2, r3
 801215e:	6a3b      	ldr	r3, [r7, #32]
 8012160:	3304      	adds	r3, #4
 8012162:	4619      	mov	r1, r3
 8012164:	4610      	mov	r0, r2
 8012166:	f7fe fa74 	bl	8010652 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801216a:	6a3b      	ldr	r3, [r7, #32]
 801216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801216e:	2b00      	cmp	r3, #0
 8012170:	d00b      	beq.n	801218a <xTaskGenericNotify+0x136>
 8012172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012176:	b672      	cpsid	i
 8012178:	f383 8811 	msr	BASEPRI, r3
 801217c:	f3bf 8f6f 	isb	sy
 8012180:	f3bf 8f4f 	dsb	sy
 8012184:	b662      	cpsie	i
 8012186:	613b      	str	r3, [r7, #16]
 8012188:	e7fe      	b.n	8012188 <xTaskGenericNotify+0x134>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801218a:	6a3b      	ldr	r3, [r7, #32]
 801218c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801218e:	4b0c      	ldr	r3, [pc, #48]	; (80121c0 <xTaskGenericNotify+0x16c>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012194:	429a      	cmp	r2, r3
 8012196:	d907      	bls.n	80121a8 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8012198:	4b0a      	ldr	r3, [pc, #40]	; (80121c4 <xTaskGenericNotify+0x170>)
 801219a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801219e:	601a      	str	r2, [r3, #0]
 80121a0:	f3bf 8f4f 	dsb	sy
 80121a4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80121a8:	f000 fcf0 	bl	8012b8c <vPortExitCritical>

		return xReturn;
 80121ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80121ae:	4618      	mov	r0, r3
 80121b0:	3728      	adds	r7, #40	; 0x28
 80121b2:	46bd      	mov	sp, r7
 80121b4:	bd80      	pop	{r7, pc}
 80121b6:	bf00      	nop
 80121b8:	20003f40 	.word	0x20003f40
 80121bc:	20003a68 	.word	0x20003a68
 80121c0:	20003a64 	.word	0x20003a64
 80121c4:	e000ed04 	.word	0xe000ed04

080121c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b084      	sub	sp, #16
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80121d2:	4b21      	ldr	r3, [pc, #132]	; (8012258 <prvAddCurrentTaskToDelayedList+0x90>)
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121d8:	4b20      	ldr	r3, [pc, #128]	; (801225c <prvAddCurrentTaskToDelayedList+0x94>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	3304      	adds	r3, #4
 80121de:	4618      	mov	r0, r3
 80121e0:	f7fe fa94 	bl	801070c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ea:	d10a      	bne.n	8012202 <prvAddCurrentTaskToDelayedList+0x3a>
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d007      	beq.n	8012202 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80121f2:	4b1a      	ldr	r3, [pc, #104]	; (801225c <prvAddCurrentTaskToDelayedList+0x94>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	3304      	adds	r3, #4
 80121f8:	4619      	mov	r1, r3
 80121fa:	4819      	ldr	r0, [pc, #100]	; (8012260 <prvAddCurrentTaskToDelayedList+0x98>)
 80121fc:	f7fe fa29 	bl	8010652 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012200:	e026      	b.n	8012250 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012202:	68fa      	ldr	r2, [r7, #12]
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	4413      	add	r3, r2
 8012208:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801220a:	4b14      	ldr	r3, [pc, #80]	; (801225c <prvAddCurrentTaskToDelayedList+0x94>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	68ba      	ldr	r2, [r7, #8]
 8012210:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012212:	68ba      	ldr	r2, [r7, #8]
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	429a      	cmp	r2, r3
 8012218:	d209      	bcs.n	801222e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801221a:	4b12      	ldr	r3, [pc, #72]	; (8012264 <prvAddCurrentTaskToDelayedList+0x9c>)
 801221c:	681a      	ldr	r2, [r3, #0]
 801221e:	4b0f      	ldr	r3, [pc, #60]	; (801225c <prvAddCurrentTaskToDelayedList+0x94>)
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	3304      	adds	r3, #4
 8012224:	4619      	mov	r1, r3
 8012226:	4610      	mov	r0, r2
 8012228:	f7fe fa37 	bl	801069a <vListInsert>
}
 801222c:	e010      	b.n	8012250 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801222e:	4b0e      	ldr	r3, [pc, #56]	; (8012268 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012230:	681a      	ldr	r2, [r3, #0]
 8012232:	4b0a      	ldr	r3, [pc, #40]	; (801225c <prvAddCurrentTaskToDelayedList+0x94>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	3304      	adds	r3, #4
 8012238:	4619      	mov	r1, r3
 801223a:	4610      	mov	r0, r2
 801223c:	f7fe fa2d 	bl	801069a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012240:	4b0a      	ldr	r3, [pc, #40]	; (801226c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	68ba      	ldr	r2, [r7, #8]
 8012246:	429a      	cmp	r2, r3
 8012248:	d202      	bcs.n	8012250 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801224a:	4a08      	ldr	r2, [pc, #32]	; (801226c <prvAddCurrentTaskToDelayedList+0xa4>)
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	6013      	str	r3, [r2, #0]
}
 8012250:	bf00      	nop
 8012252:	3710      	adds	r7, #16
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}
 8012258:	20003f3c 	.word	0x20003f3c
 801225c:	20003a64 	.word	0x20003a64
 8012260:	20003f24 	.word	0x20003f24
 8012264:	20003ef4 	.word	0x20003ef4
 8012268:	20003ef0 	.word	0x20003ef0
 801226c:	20003f58 	.word	0x20003f58

08012270 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b08a      	sub	sp, #40	; 0x28
 8012274:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012276:	2300      	movs	r3, #0
 8012278:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801227a:	f000 fb0d 	bl	8012898 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801227e:	4b1d      	ldr	r3, [pc, #116]	; (80122f4 <xTimerCreateTimerTask+0x84>)
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d021      	beq.n	80122ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012286:	2300      	movs	r3, #0
 8012288:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801228a:	2300      	movs	r3, #0
 801228c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801228e:	1d3a      	adds	r2, r7, #4
 8012290:	f107 0108 	add.w	r1, r7, #8
 8012294:	f107 030c 	add.w	r3, r7, #12
 8012298:	4618      	mov	r0, r3
 801229a:	f7fe f993 	bl	80105c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801229e:	6879      	ldr	r1, [r7, #4]
 80122a0:	68bb      	ldr	r3, [r7, #8]
 80122a2:	68fa      	ldr	r2, [r7, #12]
 80122a4:	9202      	str	r2, [sp, #8]
 80122a6:	9301      	str	r3, [sp, #4]
 80122a8:	2302      	movs	r3, #2
 80122aa:	9300      	str	r3, [sp, #0]
 80122ac:	2300      	movs	r3, #0
 80122ae:	460a      	mov	r2, r1
 80122b0:	4911      	ldr	r1, [pc, #68]	; (80122f8 <xTimerCreateTimerTask+0x88>)
 80122b2:	4812      	ldr	r0, [pc, #72]	; (80122fc <xTimerCreateTimerTask+0x8c>)
 80122b4:	f7fe ff4a 	bl	801114c <xTaskCreateStatic>
 80122b8:	4602      	mov	r2, r0
 80122ba:	4b11      	ldr	r3, [pc, #68]	; (8012300 <xTimerCreateTimerTask+0x90>)
 80122bc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80122be:	4b10      	ldr	r3, [pc, #64]	; (8012300 <xTimerCreateTimerTask+0x90>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d001      	beq.n	80122ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80122c6:	2301      	movs	r3, #1
 80122c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d10b      	bne.n	80122e8 <xTimerCreateTimerTask+0x78>
 80122d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d4:	b672      	cpsid	i
 80122d6:	f383 8811 	msr	BASEPRI, r3
 80122da:	f3bf 8f6f 	isb	sy
 80122de:	f3bf 8f4f 	dsb	sy
 80122e2:	b662      	cpsie	i
 80122e4:	613b      	str	r3, [r7, #16]
 80122e6:	e7fe      	b.n	80122e6 <xTimerCreateTimerTask+0x76>
	return xReturn;
 80122e8:	697b      	ldr	r3, [r7, #20]
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	3718      	adds	r7, #24
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}
 80122f2:	bf00      	nop
 80122f4:	20003f94 	.word	0x20003f94
 80122f8:	08017964 	.word	0x08017964
 80122fc:	0801243d 	.word	0x0801243d
 8012300:	20003f98 	.word	0x20003f98

08012304 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b08a      	sub	sp, #40	; 0x28
 8012308:	af00      	add	r7, sp, #0
 801230a:	60f8      	str	r0, [r7, #12]
 801230c:	60b9      	str	r1, [r7, #8]
 801230e:	607a      	str	r2, [r7, #4]
 8012310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012312:	2300      	movs	r3, #0
 8012314:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d10b      	bne.n	8012334 <xTimerGenericCommand+0x30>
 801231c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012320:	b672      	cpsid	i
 8012322:	f383 8811 	msr	BASEPRI, r3
 8012326:	f3bf 8f6f 	isb	sy
 801232a:	f3bf 8f4f 	dsb	sy
 801232e:	b662      	cpsie	i
 8012330:	623b      	str	r3, [r7, #32]
 8012332:	e7fe      	b.n	8012332 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012334:	4b19      	ldr	r3, [pc, #100]	; (801239c <xTimerGenericCommand+0x98>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d02a      	beq.n	8012392 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012348:	68bb      	ldr	r3, [r7, #8]
 801234a:	2b05      	cmp	r3, #5
 801234c:	dc18      	bgt.n	8012380 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801234e:	f7ff fd99 	bl	8011e84 <xTaskGetSchedulerState>
 8012352:	4603      	mov	r3, r0
 8012354:	2b02      	cmp	r3, #2
 8012356:	d109      	bne.n	801236c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012358:	4b10      	ldr	r3, [pc, #64]	; (801239c <xTimerGenericCommand+0x98>)
 801235a:	6818      	ldr	r0, [r3, #0]
 801235c:	f107 0110 	add.w	r1, r7, #16
 8012360:	2300      	movs	r3, #0
 8012362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012364:	f7fe fb06 	bl	8010974 <xQueueGenericSend>
 8012368:	6278      	str	r0, [r7, #36]	; 0x24
 801236a:	e012      	b.n	8012392 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801236c:	4b0b      	ldr	r3, [pc, #44]	; (801239c <xTimerGenericCommand+0x98>)
 801236e:	6818      	ldr	r0, [r3, #0]
 8012370:	f107 0110 	add.w	r1, r7, #16
 8012374:	2300      	movs	r3, #0
 8012376:	2200      	movs	r2, #0
 8012378:	f7fe fafc 	bl	8010974 <xQueueGenericSend>
 801237c:	6278      	str	r0, [r7, #36]	; 0x24
 801237e:	e008      	b.n	8012392 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012380:	4b06      	ldr	r3, [pc, #24]	; (801239c <xTimerGenericCommand+0x98>)
 8012382:	6818      	ldr	r0, [r3, #0]
 8012384:	f107 0110 	add.w	r1, r7, #16
 8012388:	2300      	movs	r3, #0
 801238a:	683a      	ldr	r2, [r7, #0]
 801238c:	f7fe fbf4 	bl	8010b78 <xQueueGenericSendFromISR>
 8012390:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012394:	4618      	mov	r0, r3
 8012396:	3728      	adds	r7, #40	; 0x28
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}
 801239c:	20003f94 	.word	0x20003f94

080123a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b088      	sub	sp, #32
 80123a4:	af02      	add	r7, sp, #8
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123aa:	4b23      	ldr	r3, [pc, #140]	; (8012438 <prvProcessExpiredTimer+0x98>)
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	68db      	ldr	r3, [r3, #12]
 80123b0:	68db      	ldr	r3, [r3, #12]
 80123b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80123b4:	697b      	ldr	r3, [r7, #20]
 80123b6:	3304      	adds	r3, #4
 80123b8:	4618      	mov	r0, r3
 80123ba:	f7fe f9a7 	bl	801070c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80123c4:	f003 0304 	and.w	r3, r3, #4
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d023      	beq.n	8012414 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	699a      	ldr	r2, [r3, #24]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	18d1      	adds	r1, r2, r3
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	683a      	ldr	r2, [r7, #0]
 80123d8:	6978      	ldr	r0, [r7, #20]
 80123da:	f000 f8d3 	bl	8012584 <prvInsertTimerInActiveList>
 80123de:	4603      	mov	r3, r0
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d020      	beq.n	8012426 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80123e4:	2300      	movs	r3, #0
 80123e6:	9300      	str	r3, [sp, #0]
 80123e8:	2300      	movs	r3, #0
 80123ea:	687a      	ldr	r2, [r7, #4]
 80123ec:	2100      	movs	r1, #0
 80123ee:	6978      	ldr	r0, [r7, #20]
 80123f0:	f7ff ff88 	bl	8012304 <xTimerGenericCommand>
 80123f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80123f6:	693b      	ldr	r3, [r7, #16]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d114      	bne.n	8012426 <prvProcessExpiredTimer+0x86>
 80123fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012400:	b672      	cpsid	i
 8012402:	f383 8811 	msr	BASEPRI, r3
 8012406:	f3bf 8f6f 	isb	sy
 801240a:	f3bf 8f4f 	dsb	sy
 801240e:	b662      	cpsie	i
 8012410:	60fb      	str	r3, [r7, #12]
 8012412:	e7fe      	b.n	8012412 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012414:	697b      	ldr	r3, [r7, #20]
 8012416:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801241a:	f023 0301 	bic.w	r3, r3, #1
 801241e:	b2da      	uxtb	r2, r3
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012426:	697b      	ldr	r3, [r7, #20]
 8012428:	6a1b      	ldr	r3, [r3, #32]
 801242a:	6978      	ldr	r0, [r7, #20]
 801242c:	4798      	blx	r3
}
 801242e:	bf00      	nop
 8012430:	3718      	adds	r7, #24
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
 8012436:	bf00      	nop
 8012438:	20003f8c 	.word	0x20003f8c

0801243c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b084      	sub	sp, #16
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012444:	f107 0308 	add.w	r3, r7, #8
 8012448:	4618      	mov	r0, r3
 801244a:	f000 f857 	bl	80124fc <prvGetNextExpireTime>
 801244e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	4619      	mov	r1, r3
 8012454:	68f8      	ldr	r0, [r7, #12]
 8012456:	f000 f803 	bl	8012460 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801245a:	f000 f8d5 	bl	8012608 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801245e:	e7f1      	b.n	8012444 <prvTimerTask+0x8>

08012460 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b084      	sub	sp, #16
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
 8012468:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801246a:	f7ff f927 	bl	80116bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801246e:	f107 0308 	add.w	r3, r7, #8
 8012472:	4618      	mov	r0, r3
 8012474:	f000 f866 	bl	8012544 <prvSampleTimeNow>
 8012478:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d130      	bne.n	80124e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d10a      	bne.n	801249c <prvProcessTimerOrBlockTask+0x3c>
 8012486:	687a      	ldr	r2, [r7, #4]
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	429a      	cmp	r2, r3
 801248c:	d806      	bhi.n	801249c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801248e:	f7ff f923 	bl	80116d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012492:	68f9      	ldr	r1, [r7, #12]
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f7ff ff83 	bl	80123a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801249a:	e024      	b.n	80124e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d008      	beq.n	80124b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80124a2:	4b13      	ldr	r3, [pc, #76]	; (80124f0 <prvProcessTimerOrBlockTask+0x90>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d101      	bne.n	80124b0 <prvProcessTimerOrBlockTask+0x50>
 80124ac:	2301      	movs	r3, #1
 80124ae:	e000      	b.n	80124b2 <prvProcessTimerOrBlockTask+0x52>
 80124b0:	2300      	movs	r3, #0
 80124b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80124b4:	4b0f      	ldr	r3, [pc, #60]	; (80124f4 <prvProcessTimerOrBlockTask+0x94>)
 80124b6:	6818      	ldr	r0, [r3, #0]
 80124b8:	687a      	ldr	r2, [r7, #4]
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	1ad3      	subs	r3, r2, r3
 80124be:	683a      	ldr	r2, [r7, #0]
 80124c0:	4619      	mov	r1, r3
 80124c2:	f7fe fe0f 	bl	80110e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80124c6:	f7ff f907 	bl	80116d8 <xTaskResumeAll>
 80124ca:	4603      	mov	r3, r0
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d10a      	bne.n	80124e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80124d0:	4b09      	ldr	r3, [pc, #36]	; (80124f8 <prvProcessTimerOrBlockTask+0x98>)
 80124d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124d6:	601a      	str	r2, [r3, #0]
 80124d8:	f3bf 8f4f 	dsb	sy
 80124dc:	f3bf 8f6f 	isb	sy
}
 80124e0:	e001      	b.n	80124e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80124e2:	f7ff f8f9 	bl	80116d8 <xTaskResumeAll>
}
 80124e6:	bf00      	nop
 80124e8:	3710      	adds	r7, #16
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}
 80124ee:	bf00      	nop
 80124f0:	20003f90 	.word	0x20003f90
 80124f4:	20003f94 	.word	0x20003f94
 80124f8:	e000ed04 	.word	0xe000ed04

080124fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80124fc:	b480      	push	{r7}
 80124fe:	b085      	sub	sp, #20
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012504:	4b0e      	ldr	r3, [pc, #56]	; (8012540 <prvGetNextExpireTime+0x44>)
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d101      	bne.n	8012512 <prvGetNextExpireTime+0x16>
 801250e:	2201      	movs	r2, #1
 8012510:	e000      	b.n	8012514 <prvGetNextExpireTime+0x18>
 8012512:	2200      	movs	r2, #0
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d105      	bne.n	801252c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012520:	4b07      	ldr	r3, [pc, #28]	; (8012540 <prvGetNextExpireTime+0x44>)
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	68db      	ldr	r3, [r3, #12]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	60fb      	str	r3, [r7, #12]
 801252a:	e001      	b.n	8012530 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801252c:	2300      	movs	r3, #0
 801252e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012530:	68fb      	ldr	r3, [r7, #12]
}
 8012532:	4618      	mov	r0, r3
 8012534:	3714      	adds	r7, #20
 8012536:	46bd      	mov	sp, r7
 8012538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253c:	4770      	bx	lr
 801253e:	bf00      	nop
 8012540:	20003f8c 	.word	0x20003f8c

08012544 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b084      	sub	sp, #16
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801254c:	f7ff f962 	bl	8011814 <xTaskGetTickCount>
 8012550:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012552:	4b0b      	ldr	r3, [pc, #44]	; (8012580 <prvSampleTimeNow+0x3c>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	68fa      	ldr	r2, [r7, #12]
 8012558:	429a      	cmp	r2, r3
 801255a:	d205      	bcs.n	8012568 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801255c:	f000 f936 	bl	80127cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	2201      	movs	r2, #1
 8012564:	601a      	str	r2, [r3, #0]
 8012566:	e002      	b.n	801256e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	2200      	movs	r2, #0
 801256c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801256e:	4a04      	ldr	r2, [pc, #16]	; (8012580 <prvSampleTimeNow+0x3c>)
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012574:	68fb      	ldr	r3, [r7, #12]
}
 8012576:	4618      	mov	r0, r3
 8012578:	3710      	adds	r7, #16
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}
 801257e:	bf00      	nop
 8012580:	20003f9c 	.word	0x20003f9c

08012584 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b086      	sub	sp, #24
 8012588:	af00      	add	r7, sp, #0
 801258a:	60f8      	str	r0, [r7, #12]
 801258c:	60b9      	str	r1, [r7, #8]
 801258e:	607a      	str	r2, [r7, #4]
 8012590:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012592:	2300      	movs	r3, #0
 8012594:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	68ba      	ldr	r2, [r7, #8]
 801259a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	68fa      	ldr	r2, [r7, #12]
 80125a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80125a2:	68ba      	ldr	r2, [r7, #8]
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d812      	bhi.n	80125d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80125aa:	687a      	ldr	r2, [r7, #4]
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	1ad2      	subs	r2, r2, r3
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	699b      	ldr	r3, [r3, #24]
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d302      	bcc.n	80125be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80125b8:	2301      	movs	r3, #1
 80125ba:	617b      	str	r3, [r7, #20]
 80125bc:	e01b      	b.n	80125f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80125be:	4b10      	ldr	r3, [pc, #64]	; (8012600 <prvInsertTimerInActiveList+0x7c>)
 80125c0:	681a      	ldr	r2, [r3, #0]
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	3304      	adds	r3, #4
 80125c6:	4619      	mov	r1, r3
 80125c8:	4610      	mov	r0, r2
 80125ca:	f7fe f866 	bl	801069a <vListInsert>
 80125ce:	e012      	b.n	80125f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80125d0:	687a      	ldr	r2, [r7, #4]
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	429a      	cmp	r2, r3
 80125d6:	d206      	bcs.n	80125e6 <prvInsertTimerInActiveList+0x62>
 80125d8:	68ba      	ldr	r2, [r7, #8]
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	429a      	cmp	r2, r3
 80125de:	d302      	bcc.n	80125e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80125e0:	2301      	movs	r3, #1
 80125e2:	617b      	str	r3, [r7, #20]
 80125e4:	e007      	b.n	80125f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80125e6:	4b07      	ldr	r3, [pc, #28]	; (8012604 <prvInsertTimerInActiveList+0x80>)
 80125e8:	681a      	ldr	r2, [r3, #0]
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	3304      	adds	r3, #4
 80125ee:	4619      	mov	r1, r3
 80125f0:	4610      	mov	r0, r2
 80125f2:	f7fe f852 	bl	801069a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80125f6:	697b      	ldr	r3, [r7, #20]
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	3718      	adds	r7, #24
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}
 8012600:	20003f90 	.word	0x20003f90
 8012604:	20003f8c 	.word	0x20003f8c

08012608 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b08e      	sub	sp, #56	; 0x38
 801260c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801260e:	e0cc      	b.n	80127aa <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	2b00      	cmp	r3, #0
 8012614:	da19      	bge.n	801264a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012616:	1d3b      	adds	r3, r7, #4
 8012618:	3304      	adds	r3, #4
 801261a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801261e:	2b00      	cmp	r3, #0
 8012620:	d10b      	bne.n	801263a <prvProcessReceivedCommands+0x32>
 8012622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012626:	b672      	cpsid	i
 8012628:	f383 8811 	msr	BASEPRI, r3
 801262c:	f3bf 8f6f 	isb	sy
 8012630:	f3bf 8f4f 	dsb	sy
 8012634:	b662      	cpsie	i
 8012636:	61fb      	str	r3, [r7, #28]
 8012638:	e7fe      	b.n	8012638 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012640:	6850      	ldr	r0, [r2, #4]
 8012642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012644:	6892      	ldr	r2, [r2, #8]
 8012646:	4611      	mov	r1, r2
 8012648:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	2b00      	cmp	r3, #0
 801264e:	f2c0 80ab 	blt.w	80127a8 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012658:	695b      	ldr	r3, [r3, #20]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d004      	beq.n	8012668 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801265e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012660:	3304      	adds	r3, #4
 8012662:	4618      	mov	r0, r3
 8012664:	f7fe f852 	bl	801070c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012668:	463b      	mov	r3, r7
 801266a:	4618      	mov	r0, r3
 801266c:	f7ff ff6a 	bl	8012544 <prvSampleTimeNow>
 8012670:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2b09      	cmp	r3, #9
 8012676:	f200 8098 	bhi.w	80127aa <prvProcessReceivedCommands+0x1a2>
 801267a:	a201      	add	r2, pc, #4	; (adr r2, 8012680 <prvProcessReceivedCommands+0x78>)
 801267c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012680:	080126a9 	.word	0x080126a9
 8012684:	080126a9 	.word	0x080126a9
 8012688:	080126a9 	.word	0x080126a9
 801268c:	0801271f 	.word	0x0801271f
 8012690:	08012733 	.word	0x08012733
 8012694:	0801277f 	.word	0x0801277f
 8012698:	080126a9 	.word	0x080126a9
 801269c:	080126a9 	.word	0x080126a9
 80126a0:	0801271f 	.word	0x0801271f
 80126a4:	08012733 	.word	0x08012733
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80126a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126ae:	f043 0301 	orr.w	r3, r3, #1
 80126b2:	b2da      	uxtb	r2, r3
 80126b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80126ba:	68ba      	ldr	r2, [r7, #8]
 80126bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126be:	699b      	ldr	r3, [r3, #24]
 80126c0:	18d1      	adds	r1, r2, r3
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126c8:	f7ff ff5c 	bl	8012584 <prvInsertTimerInActiveList>
 80126cc:	4603      	mov	r3, r0
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d06b      	beq.n	80127aa <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80126d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d4:	6a1b      	ldr	r3, [r3, #32]
 80126d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80126da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126e0:	f003 0304 	and.w	r3, r3, #4
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d060      	beq.n	80127aa <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80126e8:	68ba      	ldr	r2, [r7, #8]
 80126ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ec:	699b      	ldr	r3, [r3, #24]
 80126ee:	441a      	add	r2, r3
 80126f0:	2300      	movs	r3, #0
 80126f2:	9300      	str	r3, [sp, #0]
 80126f4:	2300      	movs	r3, #0
 80126f6:	2100      	movs	r1, #0
 80126f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126fa:	f7ff fe03 	bl	8012304 <xTimerGenericCommand>
 80126fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012700:	6a3b      	ldr	r3, [r7, #32]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d151      	bne.n	80127aa <prvProcessReceivedCommands+0x1a2>
 8012706:	f04f 0350 	mov.w	r3, #80	; 0x50
 801270a:	b672      	cpsid	i
 801270c:	f383 8811 	msr	BASEPRI, r3
 8012710:	f3bf 8f6f 	isb	sy
 8012714:	f3bf 8f4f 	dsb	sy
 8012718:	b662      	cpsie	i
 801271a:	61bb      	str	r3, [r7, #24]
 801271c:	e7fe      	b.n	801271c <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801271e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012724:	f023 0301 	bic.w	r3, r3, #1
 8012728:	b2da      	uxtb	r2, r3
 801272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801272c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012730:	e03b      	b.n	80127aa <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012738:	f043 0301 	orr.w	r3, r3, #1
 801273c:	b2da      	uxtb	r2, r3
 801273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012740:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012744:	68ba      	ldr	r2, [r7, #8]
 8012746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012748:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801274a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801274c:	699b      	ldr	r3, [r3, #24]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d10b      	bne.n	801276a <prvProcessReceivedCommands+0x162>
 8012752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012756:	b672      	cpsid	i
 8012758:	f383 8811 	msr	BASEPRI, r3
 801275c:	f3bf 8f6f 	isb	sy
 8012760:	f3bf 8f4f 	dsb	sy
 8012764:	b662      	cpsie	i
 8012766:	617b      	str	r3, [r7, #20]
 8012768:	e7fe      	b.n	8012768 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801276c:	699a      	ldr	r2, [r3, #24]
 801276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012770:	18d1      	adds	r1, r2, r3
 8012772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012778:	f7ff ff04 	bl	8012584 <prvInsertTimerInActiveList>
					break;
 801277c:	e015      	b.n	80127aa <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012784:	f003 0302 	and.w	r3, r3, #2
 8012788:	2b00      	cmp	r3, #0
 801278a:	d103      	bne.n	8012794 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801278c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801278e:	f000 fbb5 	bl	8012efc <vPortFree>
 8012792:	e00a      	b.n	80127aa <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801279a:	f023 0301 	bic.w	r3, r3, #1
 801279e:	b2da      	uxtb	r2, r3
 80127a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80127a6:	e000      	b.n	80127aa <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80127a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80127aa:	4b07      	ldr	r3, [pc, #28]	; (80127c8 <prvProcessReceivedCommands+0x1c0>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	1d39      	adds	r1, r7, #4
 80127b0:	2200      	movs	r2, #0
 80127b2:	4618      	mov	r0, r3
 80127b4:	f7fe fa7c 	bl	8010cb0 <xQueueReceive>
 80127b8:	4603      	mov	r3, r0
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	f47f af28 	bne.w	8012610 <prvProcessReceivedCommands+0x8>
	}
}
 80127c0:	bf00      	nop
 80127c2:	3730      	adds	r7, #48	; 0x30
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}
 80127c8:	20003f94 	.word	0x20003f94

080127cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b088      	sub	sp, #32
 80127d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80127d2:	e049      	b.n	8012868 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80127d4:	4b2e      	ldr	r3, [pc, #184]	; (8012890 <prvSwitchTimerLists+0xc4>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	68db      	ldr	r3, [r3, #12]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80127de:	4b2c      	ldr	r3, [pc, #176]	; (8012890 <prvSwitchTimerLists+0xc4>)
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	68db      	ldr	r3, [r3, #12]
 80127e4:	68db      	ldr	r3, [r3, #12]
 80127e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	3304      	adds	r3, #4
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7fd ff8d 	bl	801070c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	6a1b      	ldr	r3, [r3, #32]
 80127f6:	68f8      	ldr	r0, [r7, #12]
 80127f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012800:	f003 0304 	and.w	r3, r3, #4
 8012804:	2b00      	cmp	r3, #0
 8012806:	d02f      	beq.n	8012868 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	699b      	ldr	r3, [r3, #24]
 801280c:	693a      	ldr	r2, [r7, #16]
 801280e:	4413      	add	r3, r2
 8012810:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012812:	68ba      	ldr	r2, [r7, #8]
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	429a      	cmp	r2, r3
 8012818:	d90e      	bls.n	8012838 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	68ba      	ldr	r2, [r7, #8]
 801281e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	68fa      	ldr	r2, [r7, #12]
 8012824:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012826:	4b1a      	ldr	r3, [pc, #104]	; (8012890 <prvSwitchTimerLists+0xc4>)
 8012828:	681a      	ldr	r2, [r3, #0]
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	3304      	adds	r3, #4
 801282e:	4619      	mov	r1, r3
 8012830:	4610      	mov	r0, r2
 8012832:	f7fd ff32 	bl	801069a <vListInsert>
 8012836:	e017      	b.n	8012868 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012838:	2300      	movs	r3, #0
 801283a:	9300      	str	r3, [sp, #0]
 801283c:	2300      	movs	r3, #0
 801283e:	693a      	ldr	r2, [r7, #16]
 8012840:	2100      	movs	r1, #0
 8012842:	68f8      	ldr	r0, [r7, #12]
 8012844:	f7ff fd5e 	bl	8012304 <xTimerGenericCommand>
 8012848:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d10b      	bne.n	8012868 <prvSwitchTimerLists+0x9c>
 8012850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012854:	b672      	cpsid	i
 8012856:	f383 8811 	msr	BASEPRI, r3
 801285a:	f3bf 8f6f 	isb	sy
 801285e:	f3bf 8f4f 	dsb	sy
 8012862:	b662      	cpsie	i
 8012864:	603b      	str	r3, [r7, #0]
 8012866:	e7fe      	b.n	8012866 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012868:	4b09      	ldr	r3, [pc, #36]	; (8012890 <prvSwitchTimerLists+0xc4>)
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d1b0      	bne.n	80127d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012872:	4b07      	ldr	r3, [pc, #28]	; (8012890 <prvSwitchTimerLists+0xc4>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012878:	4b06      	ldr	r3, [pc, #24]	; (8012894 <prvSwitchTimerLists+0xc8>)
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	4a04      	ldr	r2, [pc, #16]	; (8012890 <prvSwitchTimerLists+0xc4>)
 801287e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012880:	4a04      	ldr	r2, [pc, #16]	; (8012894 <prvSwitchTimerLists+0xc8>)
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	6013      	str	r3, [r2, #0]
}
 8012886:	bf00      	nop
 8012888:	3718      	adds	r7, #24
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}
 801288e:	bf00      	nop
 8012890:	20003f8c 	.word	0x20003f8c
 8012894:	20003f90 	.word	0x20003f90

08012898 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b082      	sub	sp, #8
 801289c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801289e:	f000 f943 	bl	8012b28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80128a2:	4b15      	ldr	r3, [pc, #84]	; (80128f8 <prvCheckForValidListAndQueue+0x60>)
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d120      	bne.n	80128ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80128aa:	4814      	ldr	r0, [pc, #80]	; (80128fc <prvCheckForValidListAndQueue+0x64>)
 80128ac:	f7fd fea4 	bl	80105f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80128b0:	4813      	ldr	r0, [pc, #76]	; (8012900 <prvCheckForValidListAndQueue+0x68>)
 80128b2:	f7fd fea1 	bl	80105f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80128b6:	4b13      	ldr	r3, [pc, #76]	; (8012904 <prvCheckForValidListAndQueue+0x6c>)
 80128b8:	4a10      	ldr	r2, [pc, #64]	; (80128fc <prvCheckForValidListAndQueue+0x64>)
 80128ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80128bc:	4b12      	ldr	r3, [pc, #72]	; (8012908 <prvCheckForValidListAndQueue+0x70>)
 80128be:	4a10      	ldr	r2, [pc, #64]	; (8012900 <prvCheckForValidListAndQueue+0x68>)
 80128c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80128c2:	2300      	movs	r3, #0
 80128c4:	9300      	str	r3, [sp, #0]
 80128c6:	4b11      	ldr	r3, [pc, #68]	; (801290c <prvCheckForValidListAndQueue+0x74>)
 80128c8:	4a11      	ldr	r2, [pc, #68]	; (8012910 <prvCheckForValidListAndQueue+0x78>)
 80128ca:	2110      	movs	r1, #16
 80128cc:	200a      	movs	r0, #10
 80128ce:	f7fd ffb1 	bl	8010834 <xQueueGenericCreateStatic>
 80128d2:	4602      	mov	r2, r0
 80128d4:	4b08      	ldr	r3, [pc, #32]	; (80128f8 <prvCheckForValidListAndQueue+0x60>)
 80128d6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80128d8:	4b07      	ldr	r3, [pc, #28]	; (80128f8 <prvCheckForValidListAndQueue+0x60>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d005      	beq.n	80128ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80128e0:	4b05      	ldr	r3, [pc, #20]	; (80128f8 <prvCheckForValidListAndQueue+0x60>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	490b      	ldr	r1, [pc, #44]	; (8012914 <prvCheckForValidListAndQueue+0x7c>)
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7fe fbd4 	bl	8011094 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80128ec:	f000 f94e 	bl	8012b8c <vPortExitCritical>
}
 80128f0:	bf00      	nop
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}
 80128f6:	bf00      	nop
 80128f8:	20003f94 	.word	0x20003f94
 80128fc:	20003f64 	.word	0x20003f64
 8012900:	20003f78 	.word	0x20003f78
 8012904:	20003f8c 	.word	0x20003f8c
 8012908:	20003f90 	.word	0x20003f90
 801290c:	20004040 	.word	0x20004040
 8012910:	20003fa0 	.word	0x20003fa0
 8012914:	0801796c 	.word	0x0801796c

08012918 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012918:	b480      	push	{r7}
 801291a:	b085      	sub	sp, #20
 801291c:	af00      	add	r7, sp, #0
 801291e:	60f8      	str	r0, [r7, #12]
 8012920:	60b9      	str	r1, [r7, #8]
 8012922:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	3b04      	subs	r3, #4
 8012928:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	3b04      	subs	r3, #4
 8012936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012938:	68bb      	ldr	r3, [r7, #8]
 801293a:	f023 0201 	bic.w	r2, r3, #1
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	3b04      	subs	r3, #4
 8012946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012948:	4a0c      	ldr	r2, [pc, #48]	; (801297c <pxPortInitialiseStack+0x64>)
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	3b14      	subs	r3, #20
 8012952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012954:	687a      	ldr	r2, [r7, #4]
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	3b04      	subs	r3, #4
 801295e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	f06f 0202 	mvn.w	r2, #2
 8012966:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	3b20      	subs	r3, #32
 801296c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801296e:	68fb      	ldr	r3, [r7, #12]
}
 8012970:	4618      	mov	r0, r3
 8012972:	3714      	adds	r7, #20
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr
 801297c:	08012981 	.word	0x08012981

08012980 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012980:	b480      	push	{r7}
 8012982:	b085      	sub	sp, #20
 8012984:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012986:	2300      	movs	r3, #0
 8012988:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801298a:	4b13      	ldr	r3, [pc, #76]	; (80129d8 <prvTaskExitError+0x58>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012992:	d00b      	beq.n	80129ac <prvTaskExitError+0x2c>
 8012994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012998:	b672      	cpsid	i
 801299a:	f383 8811 	msr	BASEPRI, r3
 801299e:	f3bf 8f6f 	isb	sy
 80129a2:	f3bf 8f4f 	dsb	sy
 80129a6:	b662      	cpsie	i
 80129a8:	60fb      	str	r3, [r7, #12]
 80129aa:	e7fe      	b.n	80129aa <prvTaskExitError+0x2a>
 80129ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b0:	b672      	cpsid	i
 80129b2:	f383 8811 	msr	BASEPRI, r3
 80129b6:	f3bf 8f6f 	isb	sy
 80129ba:	f3bf 8f4f 	dsb	sy
 80129be:	b662      	cpsie	i
 80129c0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80129c2:	bf00      	nop
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d0fc      	beq.n	80129c4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80129ca:	bf00      	nop
 80129cc:	3714      	adds	r7, #20
 80129ce:	46bd      	mov	sp, r7
 80129d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d4:	4770      	bx	lr
 80129d6:	bf00      	nop
 80129d8:	200001a4 	.word	0x200001a4
 80129dc:	00000000 	.word	0x00000000

080129e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80129e0:	4b07      	ldr	r3, [pc, #28]	; (8012a00 <pxCurrentTCBConst2>)
 80129e2:	6819      	ldr	r1, [r3, #0]
 80129e4:	6808      	ldr	r0, [r1, #0]
 80129e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ea:	f380 8809 	msr	PSP, r0
 80129ee:	f3bf 8f6f 	isb	sy
 80129f2:	f04f 0000 	mov.w	r0, #0
 80129f6:	f380 8811 	msr	BASEPRI, r0
 80129fa:	4770      	bx	lr
 80129fc:	f3af 8000 	nop.w

08012a00 <pxCurrentTCBConst2>:
 8012a00:	20003a64 	.word	0x20003a64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012a04:	bf00      	nop
 8012a06:	bf00      	nop

08012a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012a08:	4808      	ldr	r0, [pc, #32]	; (8012a2c <prvPortStartFirstTask+0x24>)
 8012a0a:	6800      	ldr	r0, [r0, #0]
 8012a0c:	6800      	ldr	r0, [r0, #0]
 8012a0e:	f380 8808 	msr	MSP, r0
 8012a12:	f04f 0000 	mov.w	r0, #0
 8012a16:	f380 8814 	msr	CONTROL, r0
 8012a1a:	b662      	cpsie	i
 8012a1c:	b661      	cpsie	f
 8012a1e:	f3bf 8f4f 	dsb	sy
 8012a22:	f3bf 8f6f 	isb	sy
 8012a26:	df00      	svc	0
 8012a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012a2a:	bf00      	nop
 8012a2c:	e000ed08 	.word	0xe000ed08

08012a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b084      	sub	sp, #16
 8012a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012a36:	4b36      	ldr	r3, [pc, #216]	; (8012b10 <xPortStartScheduler+0xe0>)
 8012a38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	781b      	ldrb	r3, [r3, #0]
 8012a3e:	b2db      	uxtb	r3, r3
 8012a40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	22ff      	movs	r2, #255	; 0xff
 8012a46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	b2db      	uxtb	r3, r3
 8012a4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012a50:	78fb      	ldrb	r3, [r7, #3]
 8012a52:	b2db      	uxtb	r3, r3
 8012a54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012a58:	b2da      	uxtb	r2, r3
 8012a5a:	4b2e      	ldr	r3, [pc, #184]	; (8012b14 <xPortStartScheduler+0xe4>)
 8012a5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012a5e:	4b2e      	ldr	r3, [pc, #184]	; (8012b18 <xPortStartScheduler+0xe8>)
 8012a60:	2207      	movs	r2, #7
 8012a62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012a64:	e009      	b.n	8012a7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012a66:	4b2c      	ldr	r3, [pc, #176]	; (8012b18 <xPortStartScheduler+0xe8>)
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	3b01      	subs	r3, #1
 8012a6c:	4a2a      	ldr	r2, [pc, #168]	; (8012b18 <xPortStartScheduler+0xe8>)
 8012a6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012a70:	78fb      	ldrb	r3, [r7, #3]
 8012a72:	b2db      	uxtb	r3, r3
 8012a74:	005b      	lsls	r3, r3, #1
 8012a76:	b2db      	uxtb	r3, r3
 8012a78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012a7a:	78fb      	ldrb	r3, [r7, #3]
 8012a7c:	b2db      	uxtb	r3, r3
 8012a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a82:	2b80      	cmp	r3, #128	; 0x80
 8012a84:	d0ef      	beq.n	8012a66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012a86:	4b24      	ldr	r3, [pc, #144]	; (8012b18 <xPortStartScheduler+0xe8>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	f1c3 0307 	rsb	r3, r3, #7
 8012a8e:	2b04      	cmp	r3, #4
 8012a90:	d00b      	beq.n	8012aaa <xPortStartScheduler+0x7a>
 8012a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a96:	b672      	cpsid	i
 8012a98:	f383 8811 	msr	BASEPRI, r3
 8012a9c:	f3bf 8f6f 	isb	sy
 8012aa0:	f3bf 8f4f 	dsb	sy
 8012aa4:	b662      	cpsie	i
 8012aa6:	60bb      	str	r3, [r7, #8]
 8012aa8:	e7fe      	b.n	8012aa8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012aaa:	4b1b      	ldr	r3, [pc, #108]	; (8012b18 <xPortStartScheduler+0xe8>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	021b      	lsls	r3, r3, #8
 8012ab0:	4a19      	ldr	r2, [pc, #100]	; (8012b18 <xPortStartScheduler+0xe8>)
 8012ab2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012ab4:	4b18      	ldr	r3, [pc, #96]	; (8012b18 <xPortStartScheduler+0xe8>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012abc:	4a16      	ldr	r2, [pc, #88]	; (8012b18 <xPortStartScheduler+0xe8>)
 8012abe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	b2da      	uxtb	r2, r3
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012ac8:	4b14      	ldr	r3, [pc, #80]	; (8012b1c <xPortStartScheduler+0xec>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	4a13      	ldr	r2, [pc, #76]	; (8012b1c <xPortStartScheduler+0xec>)
 8012ace:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012ad2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012ad4:	4b11      	ldr	r3, [pc, #68]	; (8012b1c <xPortStartScheduler+0xec>)
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	4a10      	ldr	r2, [pc, #64]	; (8012b1c <xPortStartScheduler+0xec>)
 8012ada:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012ade:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012ae0:	f000 f8d4 	bl	8012c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012ae4:	4b0e      	ldr	r3, [pc, #56]	; (8012b20 <xPortStartScheduler+0xf0>)
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012aea:	f000 f8f3 	bl	8012cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012aee:	4b0d      	ldr	r3, [pc, #52]	; (8012b24 <xPortStartScheduler+0xf4>)
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	4a0c      	ldr	r2, [pc, #48]	; (8012b24 <xPortStartScheduler+0xf4>)
 8012af4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012af8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012afa:	f7ff ff85 	bl	8012a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012afe:	f7fe ff53 	bl	80119a8 <vTaskSwitchContext>
	prvTaskExitError();
 8012b02:	f7ff ff3d 	bl	8012980 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012b06:	2300      	movs	r3, #0
}
 8012b08:	4618      	mov	r0, r3
 8012b0a:	3710      	adds	r7, #16
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}
 8012b10:	e000e400 	.word	0xe000e400
 8012b14:	20004090 	.word	0x20004090
 8012b18:	20004094 	.word	0x20004094
 8012b1c:	e000ed20 	.word	0xe000ed20
 8012b20:	200001a4 	.word	0x200001a4
 8012b24:	e000ef34 	.word	0xe000ef34

08012b28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012b28:	b480      	push	{r7}
 8012b2a:	b083      	sub	sp, #12
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b32:	b672      	cpsid	i
 8012b34:	f383 8811 	msr	BASEPRI, r3
 8012b38:	f3bf 8f6f 	isb	sy
 8012b3c:	f3bf 8f4f 	dsb	sy
 8012b40:	b662      	cpsie	i
 8012b42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012b44:	4b0f      	ldr	r3, [pc, #60]	; (8012b84 <vPortEnterCritical+0x5c>)
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	3301      	adds	r3, #1
 8012b4a:	4a0e      	ldr	r2, [pc, #56]	; (8012b84 <vPortEnterCritical+0x5c>)
 8012b4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012b4e:	4b0d      	ldr	r3, [pc, #52]	; (8012b84 <vPortEnterCritical+0x5c>)
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	2b01      	cmp	r3, #1
 8012b54:	d110      	bne.n	8012b78 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012b56:	4b0c      	ldr	r3, [pc, #48]	; (8012b88 <vPortEnterCritical+0x60>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	b2db      	uxtb	r3, r3
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d00b      	beq.n	8012b78 <vPortEnterCritical+0x50>
 8012b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b64:	b672      	cpsid	i
 8012b66:	f383 8811 	msr	BASEPRI, r3
 8012b6a:	f3bf 8f6f 	isb	sy
 8012b6e:	f3bf 8f4f 	dsb	sy
 8012b72:	b662      	cpsie	i
 8012b74:	603b      	str	r3, [r7, #0]
 8012b76:	e7fe      	b.n	8012b76 <vPortEnterCritical+0x4e>
	}
}
 8012b78:	bf00      	nop
 8012b7a:	370c      	adds	r7, #12
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b82:	4770      	bx	lr
 8012b84:	200001a4 	.word	0x200001a4
 8012b88:	e000ed04 	.word	0xe000ed04

08012b8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012b8c:	b480      	push	{r7}
 8012b8e:	b083      	sub	sp, #12
 8012b90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012b92:	4b12      	ldr	r3, [pc, #72]	; (8012bdc <vPortExitCritical+0x50>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d10b      	bne.n	8012bb2 <vPortExitCritical+0x26>
 8012b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b9e:	b672      	cpsid	i
 8012ba0:	f383 8811 	msr	BASEPRI, r3
 8012ba4:	f3bf 8f6f 	isb	sy
 8012ba8:	f3bf 8f4f 	dsb	sy
 8012bac:	b662      	cpsie	i
 8012bae:	607b      	str	r3, [r7, #4]
 8012bb0:	e7fe      	b.n	8012bb0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8012bb2:	4b0a      	ldr	r3, [pc, #40]	; (8012bdc <vPortExitCritical+0x50>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	3b01      	subs	r3, #1
 8012bb8:	4a08      	ldr	r2, [pc, #32]	; (8012bdc <vPortExitCritical+0x50>)
 8012bba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012bbc:	4b07      	ldr	r3, [pc, #28]	; (8012bdc <vPortExitCritical+0x50>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d104      	bne.n	8012bce <vPortExitCritical+0x42>
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012bc8:	683b      	ldr	r3, [r7, #0]
 8012bca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8012bce:	bf00      	nop
 8012bd0:	370c      	adds	r7, #12
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd8:	4770      	bx	lr
 8012bda:	bf00      	nop
 8012bdc:	200001a4 	.word	0x200001a4

08012be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012be0:	f3ef 8009 	mrs	r0, PSP
 8012be4:	f3bf 8f6f 	isb	sy
 8012be8:	4b15      	ldr	r3, [pc, #84]	; (8012c40 <pxCurrentTCBConst>)
 8012bea:	681a      	ldr	r2, [r3, #0]
 8012bec:	f01e 0f10 	tst.w	lr, #16
 8012bf0:	bf08      	it	eq
 8012bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bfa:	6010      	str	r0, [r2, #0]
 8012bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012c04:	b672      	cpsid	i
 8012c06:	f380 8811 	msr	BASEPRI, r0
 8012c0a:	f3bf 8f4f 	dsb	sy
 8012c0e:	f3bf 8f6f 	isb	sy
 8012c12:	b662      	cpsie	i
 8012c14:	f7fe fec8 	bl	80119a8 <vTaskSwitchContext>
 8012c18:	f04f 0000 	mov.w	r0, #0
 8012c1c:	f380 8811 	msr	BASEPRI, r0
 8012c20:	bc09      	pop	{r0, r3}
 8012c22:	6819      	ldr	r1, [r3, #0]
 8012c24:	6808      	ldr	r0, [r1, #0]
 8012c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c2a:	f01e 0f10 	tst.w	lr, #16
 8012c2e:	bf08      	it	eq
 8012c30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012c34:	f380 8809 	msr	PSP, r0
 8012c38:	f3bf 8f6f 	isb	sy
 8012c3c:	4770      	bx	lr
 8012c3e:	bf00      	nop

08012c40 <pxCurrentTCBConst>:
 8012c40:	20003a64 	.word	0x20003a64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012c44:	bf00      	nop
 8012c46:	bf00      	nop

08012c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8012c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c52:	b672      	cpsid	i
 8012c54:	f383 8811 	msr	BASEPRI, r3
 8012c58:	f3bf 8f6f 	isb	sy
 8012c5c:	f3bf 8f4f 	dsb	sy
 8012c60:	b662      	cpsie	i
 8012c62:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012c64:	f7fe fde6 	bl	8011834 <xTaskIncrementTick>
 8012c68:	4603      	mov	r3, r0
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d003      	beq.n	8012c76 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012c6e:	4b06      	ldr	r3, [pc, #24]	; (8012c88 <SysTick_Handler+0x40>)
 8012c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c74:	601a      	str	r2, [r3, #0]
 8012c76:	2300      	movs	r3, #0
 8012c78:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8012c80:	bf00      	nop
 8012c82:	3708      	adds	r7, #8
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}
 8012c88:	e000ed04 	.word	0xe000ed04

08012c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012c90:	4b0b      	ldr	r3, [pc, #44]	; (8012cc0 <vPortSetupTimerInterrupt+0x34>)
 8012c92:	2200      	movs	r2, #0
 8012c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012c96:	4b0b      	ldr	r3, [pc, #44]	; (8012cc4 <vPortSetupTimerInterrupt+0x38>)
 8012c98:	2200      	movs	r2, #0
 8012c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012c9c:	4b0a      	ldr	r3, [pc, #40]	; (8012cc8 <vPortSetupTimerInterrupt+0x3c>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	4a0a      	ldr	r2, [pc, #40]	; (8012ccc <vPortSetupTimerInterrupt+0x40>)
 8012ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8012ca6:	099b      	lsrs	r3, r3, #6
 8012ca8:	4a09      	ldr	r2, [pc, #36]	; (8012cd0 <vPortSetupTimerInterrupt+0x44>)
 8012caa:	3b01      	subs	r3, #1
 8012cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012cae:	4b04      	ldr	r3, [pc, #16]	; (8012cc0 <vPortSetupTimerInterrupt+0x34>)
 8012cb0:	2207      	movs	r2, #7
 8012cb2:	601a      	str	r2, [r3, #0]
}
 8012cb4:	bf00      	nop
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr
 8012cbe:	bf00      	nop
 8012cc0:	e000e010 	.word	0xe000e010
 8012cc4:	e000e018 	.word	0xe000e018
 8012cc8:	20000198 	.word	0x20000198
 8012ccc:	10624dd3 	.word	0x10624dd3
 8012cd0:	e000e014 	.word	0xe000e014

08012cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012ce4 <vPortEnableVFP+0x10>
 8012cd8:	6801      	ldr	r1, [r0, #0]
 8012cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012cde:	6001      	str	r1, [r0, #0]
 8012ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012ce2:	bf00      	nop
 8012ce4:	e000ed88 	.word	0xe000ed88

08012ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012ce8:	b480      	push	{r7}
 8012cea:	b085      	sub	sp, #20
 8012cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012cee:	f3ef 8305 	mrs	r3, IPSR
 8012cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	2b0f      	cmp	r3, #15
 8012cf8:	d915      	bls.n	8012d26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012cfa:	4a18      	ldr	r2, [pc, #96]	; (8012d5c <vPortValidateInterruptPriority+0x74>)
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	4413      	add	r3, r2
 8012d00:	781b      	ldrb	r3, [r3, #0]
 8012d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012d04:	4b16      	ldr	r3, [pc, #88]	; (8012d60 <vPortValidateInterruptPriority+0x78>)
 8012d06:	781b      	ldrb	r3, [r3, #0]
 8012d08:	7afa      	ldrb	r2, [r7, #11]
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	d20b      	bcs.n	8012d26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8012d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d12:	b672      	cpsid	i
 8012d14:	f383 8811 	msr	BASEPRI, r3
 8012d18:	f3bf 8f6f 	isb	sy
 8012d1c:	f3bf 8f4f 	dsb	sy
 8012d20:	b662      	cpsie	i
 8012d22:	607b      	str	r3, [r7, #4]
 8012d24:	e7fe      	b.n	8012d24 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012d26:	4b0f      	ldr	r3, [pc, #60]	; (8012d64 <vPortValidateInterruptPriority+0x7c>)
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012d2e:	4b0e      	ldr	r3, [pc, #56]	; (8012d68 <vPortValidateInterruptPriority+0x80>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	429a      	cmp	r2, r3
 8012d34:	d90b      	bls.n	8012d4e <vPortValidateInterruptPriority+0x66>
 8012d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d3a:	b672      	cpsid	i
 8012d3c:	f383 8811 	msr	BASEPRI, r3
 8012d40:	f3bf 8f6f 	isb	sy
 8012d44:	f3bf 8f4f 	dsb	sy
 8012d48:	b662      	cpsie	i
 8012d4a:	603b      	str	r3, [r7, #0]
 8012d4c:	e7fe      	b.n	8012d4c <vPortValidateInterruptPriority+0x64>
	}
 8012d4e:	bf00      	nop
 8012d50:	3714      	adds	r7, #20
 8012d52:	46bd      	mov	sp, r7
 8012d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d58:	4770      	bx	lr
 8012d5a:	bf00      	nop
 8012d5c:	e000e3f0 	.word	0xe000e3f0
 8012d60:	20004090 	.word	0x20004090
 8012d64:	e000ed0c 	.word	0xe000ed0c
 8012d68:	20004094 	.word	0x20004094

08012d6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b08a      	sub	sp, #40	; 0x28
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012d74:	2300      	movs	r3, #0
 8012d76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012d78:	f7fe fca0 	bl	80116bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012d7c:	4b5a      	ldr	r3, [pc, #360]	; (8012ee8 <pvPortMalloc+0x17c>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d101      	bne.n	8012d88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012d84:	f000 f916 	bl	8012fb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012d88:	4b58      	ldr	r3, [pc, #352]	; (8012eec <pvPortMalloc+0x180>)
 8012d8a:	681a      	ldr	r2, [r3, #0]
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	4013      	ands	r3, r2
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	f040 8090 	bne.w	8012eb6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d01e      	beq.n	8012dda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8012d9c:	2208      	movs	r2, #8
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	4413      	add	r3, r2
 8012da2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f003 0307 	and.w	r3, r3, #7
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d015      	beq.n	8012dda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f023 0307 	bic.w	r3, r3, #7
 8012db4:	3308      	adds	r3, #8
 8012db6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f003 0307 	and.w	r3, r3, #7
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d00b      	beq.n	8012dda <pvPortMalloc+0x6e>
 8012dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dc6:	b672      	cpsid	i
 8012dc8:	f383 8811 	msr	BASEPRI, r3
 8012dcc:	f3bf 8f6f 	isb	sy
 8012dd0:	f3bf 8f4f 	dsb	sy
 8012dd4:	b662      	cpsie	i
 8012dd6:	617b      	str	r3, [r7, #20]
 8012dd8:	e7fe      	b.n	8012dd8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d06a      	beq.n	8012eb6 <pvPortMalloc+0x14a>
 8012de0:	4b43      	ldr	r3, [pc, #268]	; (8012ef0 <pvPortMalloc+0x184>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	687a      	ldr	r2, [r7, #4]
 8012de6:	429a      	cmp	r2, r3
 8012de8:	d865      	bhi.n	8012eb6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012dea:	4b42      	ldr	r3, [pc, #264]	; (8012ef4 <pvPortMalloc+0x188>)
 8012dec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012dee:	4b41      	ldr	r3, [pc, #260]	; (8012ef4 <pvPortMalloc+0x188>)
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012df4:	e004      	b.n	8012e00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e02:	685b      	ldr	r3, [r3, #4]
 8012e04:	687a      	ldr	r2, [r7, #4]
 8012e06:	429a      	cmp	r2, r3
 8012e08:	d903      	bls.n	8012e12 <pvPortMalloc+0xa6>
 8012e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d1f1      	bne.n	8012df6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012e12:	4b35      	ldr	r3, [pc, #212]	; (8012ee8 <pvPortMalloc+0x17c>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	d04c      	beq.n	8012eb6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012e1c:	6a3b      	ldr	r3, [r7, #32]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	2208      	movs	r2, #8
 8012e22:	4413      	add	r3, r2
 8012e24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e28:	681a      	ldr	r2, [r3, #0]
 8012e2a:	6a3b      	ldr	r3, [r7, #32]
 8012e2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e30:	685a      	ldr	r2, [r3, #4]
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	1ad2      	subs	r2, r2, r3
 8012e36:	2308      	movs	r3, #8
 8012e38:	005b      	lsls	r3, r3, #1
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d920      	bls.n	8012e80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	4413      	add	r3, r2
 8012e44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012e46:	69bb      	ldr	r3, [r7, #24]
 8012e48:	f003 0307 	and.w	r3, r3, #7
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d00b      	beq.n	8012e68 <pvPortMalloc+0xfc>
 8012e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e54:	b672      	cpsid	i
 8012e56:	f383 8811 	msr	BASEPRI, r3
 8012e5a:	f3bf 8f6f 	isb	sy
 8012e5e:	f3bf 8f4f 	dsb	sy
 8012e62:	b662      	cpsie	i
 8012e64:	613b      	str	r3, [r7, #16]
 8012e66:	e7fe      	b.n	8012e66 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e6a:	685a      	ldr	r2, [r3, #4]
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	1ad2      	subs	r2, r2, r3
 8012e70:	69bb      	ldr	r3, [r7, #24]
 8012e72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e76:	687a      	ldr	r2, [r7, #4]
 8012e78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012e7a:	69b8      	ldr	r0, [r7, #24]
 8012e7c:	f000 f8fe 	bl	801307c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012e80:	4b1b      	ldr	r3, [pc, #108]	; (8012ef0 <pvPortMalloc+0x184>)
 8012e82:	681a      	ldr	r2, [r3, #0]
 8012e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e86:	685b      	ldr	r3, [r3, #4]
 8012e88:	1ad3      	subs	r3, r2, r3
 8012e8a:	4a19      	ldr	r2, [pc, #100]	; (8012ef0 <pvPortMalloc+0x184>)
 8012e8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012e8e:	4b18      	ldr	r3, [pc, #96]	; (8012ef0 <pvPortMalloc+0x184>)
 8012e90:	681a      	ldr	r2, [r3, #0]
 8012e92:	4b19      	ldr	r3, [pc, #100]	; (8012ef8 <pvPortMalloc+0x18c>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	429a      	cmp	r2, r3
 8012e98:	d203      	bcs.n	8012ea2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012e9a:	4b15      	ldr	r3, [pc, #84]	; (8012ef0 <pvPortMalloc+0x184>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	4a16      	ldr	r2, [pc, #88]	; (8012ef8 <pvPortMalloc+0x18c>)
 8012ea0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ea4:	685a      	ldr	r2, [r3, #4]
 8012ea6:	4b11      	ldr	r3, [pc, #68]	; (8012eec <pvPortMalloc+0x180>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	431a      	orrs	r2, r3
 8012eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012eb6:	f7fe fc0f 	bl	80116d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012eba:	69fb      	ldr	r3, [r7, #28]
 8012ebc:	f003 0307 	and.w	r3, r3, #7
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d00b      	beq.n	8012edc <pvPortMalloc+0x170>
 8012ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec8:	b672      	cpsid	i
 8012eca:	f383 8811 	msr	BASEPRI, r3
 8012ece:	f3bf 8f6f 	isb	sy
 8012ed2:	f3bf 8f4f 	dsb	sy
 8012ed6:	b662      	cpsie	i
 8012ed8:	60fb      	str	r3, [r7, #12]
 8012eda:	e7fe      	b.n	8012eda <pvPortMalloc+0x16e>
	return pvReturn;
 8012edc:	69fb      	ldr	r3, [r7, #28]
}
 8012ede:	4618      	mov	r0, r3
 8012ee0:	3728      	adds	r7, #40	; 0x28
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}
 8012ee6:	bf00      	nop
 8012ee8:	20028a90 	.word	0x20028a90
 8012eec:	20028a9c 	.word	0x20028a9c
 8012ef0:	20028a94 	.word	0x20028a94
 8012ef4:	20028a88 	.word	0x20028a88
 8012ef8:	20028a98 	.word	0x20028a98

08012efc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b086      	sub	sp, #24
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d04a      	beq.n	8012fa4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012f0e:	2308      	movs	r3, #8
 8012f10:	425b      	negs	r3, r3
 8012f12:	697a      	ldr	r2, [r7, #20]
 8012f14:	4413      	add	r3, r2
 8012f16:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012f1c:	693b      	ldr	r3, [r7, #16]
 8012f1e:	685a      	ldr	r2, [r3, #4]
 8012f20:	4b22      	ldr	r3, [pc, #136]	; (8012fac <vPortFree+0xb0>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	4013      	ands	r3, r2
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d10b      	bne.n	8012f42 <vPortFree+0x46>
 8012f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f2e:	b672      	cpsid	i
 8012f30:	f383 8811 	msr	BASEPRI, r3
 8012f34:	f3bf 8f6f 	isb	sy
 8012f38:	f3bf 8f4f 	dsb	sy
 8012f3c:	b662      	cpsie	i
 8012f3e:	60fb      	str	r3, [r7, #12]
 8012f40:	e7fe      	b.n	8012f40 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012f42:	693b      	ldr	r3, [r7, #16]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d00b      	beq.n	8012f62 <vPortFree+0x66>
 8012f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f4e:	b672      	cpsid	i
 8012f50:	f383 8811 	msr	BASEPRI, r3
 8012f54:	f3bf 8f6f 	isb	sy
 8012f58:	f3bf 8f4f 	dsb	sy
 8012f5c:	b662      	cpsie	i
 8012f5e:	60bb      	str	r3, [r7, #8]
 8012f60:	e7fe      	b.n	8012f60 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	685a      	ldr	r2, [r3, #4]
 8012f66:	4b11      	ldr	r3, [pc, #68]	; (8012fac <vPortFree+0xb0>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	4013      	ands	r3, r2
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d019      	beq.n	8012fa4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012f70:	693b      	ldr	r3, [r7, #16]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d115      	bne.n	8012fa4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	685a      	ldr	r2, [r3, #4]
 8012f7c:	4b0b      	ldr	r3, [pc, #44]	; (8012fac <vPortFree+0xb0>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	43db      	mvns	r3, r3
 8012f82:	401a      	ands	r2, r3
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012f88:	f7fe fb98 	bl	80116bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012f8c:	693b      	ldr	r3, [r7, #16]
 8012f8e:	685a      	ldr	r2, [r3, #4]
 8012f90:	4b07      	ldr	r3, [pc, #28]	; (8012fb0 <vPortFree+0xb4>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	4413      	add	r3, r2
 8012f96:	4a06      	ldr	r2, [pc, #24]	; (8012fb0 <vPortFree+0xb4>)
 8012f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012f9a:	6938      	ldr	r0, [r7, #16]
 8012f9c:	f000 f86e 	bl	801307c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012fa0:	f7fe fb9a 	bl	80116d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012fa4:	bf00      	nop
 8012fa6:	3718      	adds	r7, #24
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}
 8012fac:	20028a9c 	.word	0x20028a9c
 8012fb0:	20028a94 	.word	0x20028a94

08012fb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012fb4:	b480      	push	{r7}
 8012fb6:	b085      	sub	sp, #20
 8012fb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012fba:	4b29      	ldr	r3, [pc, #164]	; (8013060 <prvHeapInit+0xac>)
 8012fbc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012fbe:	4b29      	ldr	r3, [pc, #164]	; (8013064 <prvHeapInit+0xb0>)
 8012fc0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	f003 0307 	and.w	r3, r3, #7
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d00c      	beq.n	8012fe6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	3307      	adds	r3, #7
 8012fd0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	f023 0307 	bic.w	r3, r3, #7
 8012fd8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012fda:	68ba      	ldr	r2, [r7, #8]
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	1ad3      	subs	r3, r2, r3
 8012fe0:	4a20      	ldr	r2, [pc, #128]	; (8013064 <prvHeapInit+0xb0>)
 8012fe2:	4413      	add	r3, r2
 8012fe4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012fea:	4a1f      	ldr	r2, [pc, #124]	; (8013068 <prvHeapInit+0xb4>)
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012ff0:	4b1d      	ldr	r3, [pc, #116]	; (8013068 <prvHeapInit+0xb4>)
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	68ba      	ldr	r2, [r7, #8]
 8012ffa:	4413      	add	r3, r2
 8012ffc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012ffe:	2208      	movs	r2, #8
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	1a9b      	subs	r3, r3, r2
 8013004:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	f023 0307 	bic.w	r3, r3, #7
 801300c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	4a16      	ldr	r2, [pc, #88]	; (801306c <prvHeapInit+0xb8>)
 8013012:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013014:	4b15      	ldr	r3, [pc, #84]	; (801306c <prvHeapInit+0xb8>)
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	2200      	movs	r2, #0
 801301a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801301c:	4b13      	ldr	r3, [pc, #76]	; (801306c <prvHeapInit+0xb8>)
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	2200      	movs	r2, #0
 8013022:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013028:	683b      	ldr	r3, [r7, #0]
 801302a:	68fa      	ldr	r2, [r7, #12]
 801302c:	1ad2      	subs	r2, r2, r3
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013032:	4b0e      	ldr	r3, [pc, #56]	; (801306c <prvHeapInit+0xb8>)
 8013034:	681a      	ldr	r2, [r3, #0]
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	685b      	ldr	r3, [r3, #4]
 801303e:	4a0c      	ldr	r2, [pc, #48]	; (8013070 <prvHeapInit+0xbc>)
 8013040:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	685b      	ldr	r3, [r3, #4]
 8013046:	4a0b      	ldr	r2, [pc, #44]	; (8013074 <prvHeapInit+0xc0>)
 8013048:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801304a:	4b0b      	ldr	r3, [pc, #44]	; (8013078 <prvHeapInit+0xc4>)
 801304c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013050:	601a      	str	r2, [r3, #0]
}
 8013052:	bf00      	nop
 8013054:	3714      	adds	r7, #20
 8013056:	46bd      	mov	sp, r7
 8013058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305c:	4770      	bx	lr
 801305e:	bf00      	nop
 8013060:	000249f0 	.word	0x000249f0
 8013064:	20004098 	.word	0x20004098
 8013068:	20028a88 	.word	0x20028a88
 801306c:	20028a90 	.word	0x20028a90
 8013070:	20028a98 	.word	0x20028a98
 8013074:	20028a94 	.word	0x20028a94
 8013078:	20028a9c 	.word	0x20028a9c

0801307c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801307c:	b480      	push	{r7}
 801307e:	b085      	sub	sp, #20
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013084:	4b28      	ldr	r3, [pc, #160]	; (8013128 <prvInsertBlockIntoFreeList+0xac>)
 8013086:	60fb      	str	r3, [r7, #12]
 8013088:	e002      	b.n	8013090 <prvInsertBlockIntoFreeList+0x14>
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	60fb      	str	r3, [r7, #12]
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	687a      	ldr	r2, [r7, #4]
 8013096:	429a      	cmp	r2, r3
 8013098:	d8f7      	bhi.n	801308a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	685b      	ldr	r3, [r3, #4]
 80130a2:	68ba      	ldr	r2, [r7, #8]
 80130a4:	4413      	add	r3, r2
 80130a6:	687a      	ldr	r2, [r7, #4]
 80130a8:	429a      	cmp	r2, r3
 80130aa:	d108      	bne.n	80130be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	685a      	ldr	r2, [r3, #4]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	685b      	ldr	r3, [r3, #4]
 80130b4:	441a      	add	r2, r3
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	685b      	ldr	r3, [r3, #4]
 80130c6:	68ba      	ldr	r2, [r7, #8]
 80130c8:	441a      	add	r2, r3
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	429a      	cmp	r2, r3
 80130d0:	d118      	bne.n	8013104 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	681a      	ldr	r2, [r3, #0]
 80130d6:	4b15      	ldr	r3, [pc, #84]	; (801312c <prvInsertBlockIntoFreeList+0xb0>)
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	429a      	cmp	r2, r3
 80130dc:	d00d      	beq.n	80130fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	685a      	ldr	r2, [r3, #4]
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	685b      	ldr	r3, [r3, #4]
 80130e8:	441a      	add	r2, r3
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	681a      	ldr	r2, [r3, #0]
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	601a      	str	r2, [r3, #0]
 80130f8:	e008      	b.n	801310c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80130fa:	4b0c      	ldr	r3, [pc, #48]	; (801312c <prvInsertBlockIntoFreeList+0xb0>)
 80130fc:	681a      	ldr	r2, [r3, #0]
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	601a      	str	r2, [r3, #0]
 8013102:	e003      	b.n	801310c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	681a      	ldr	r2, [r3, #0]
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801310c:	68fa      	ldr	r2, [r7, #12]
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	429a      	cmp	r2, r3
 8013112:	d002      	beq.n	801311a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	687a      	ldr	r2, [r7, #4]
 8013118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801311a:	bf00      	nop
 801311c:	3714      	adds	r7, #20
 801311e:	46bd      	mov	sp, r7
 8013120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013124:	4770      	bx	lr
 8013126:	bf00      	nop
 8013128:	20028a88 	.word	0x20028a88
 801312c:	20028a90 	.word	0x20028a90

08013130 <__errno>:
 8013130:	4b01      	ldr	r3, [pc, #4]	; (8013138 <__errno+0x8>)
 8013132:	6818      	ldr	r0, [r3, #0]
 8013134:	4770      	bx	lr
 8013136:	bf00      	nop
 8013138:	200001a8 	.word	0x200001a8

0801313c <__libc_init_array>:
 801313c:	b570      	push	{r4, r5, r6, lr}
 801313e:	4e0d      	ldr	r6, [pc, #52]	; (8013174 <__libc_init_array+0x38>)
 8013140:	4c0d      	ldr	r4, [pc, #52]	; (8013178 <__libc_init_array+0x3c>)
 8013142:	1ba4      	subs	r4, r4, r6
 8013144:	10a4      	asrs	r4, r4, #2
 8013146:	2500      	movs	r5, #0
 8013148:	42a5      	cmp	r5, r4
 801314a:	d109      	bne.n	8013160 <__libc_init_array+0x24>
 801314c:	4e0b      	ldr	r6, [pc, #44]	; (801317c <__libc_init_array+0x40>)
 801314e:	4c0c      	ldr	r4, [pc, #48]	; (8013180 <__libc_init_array+0x44>)
 8013150:	f004 f840 	bl	80171d4 <_init>
 8013154:	1ba4      	subs	r4, r4, r6
 8013156:	10a4      	asrs	r4, r4, #2
 8013158:	2500      	movs	r5, #0
 801315a:	42a5      	cmp	r5, r4
 801315c:	d105      	bne.n	801316a <__libc_init_array+0x2e>
 801315e:	bd70      	pop	{r4, r5, r6, pc}
 8013160:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013164:	4798      	blx	r3
 8013166:	3501      	adds	r5, #1
 8013168:	e7ee      	b.n	8013148 <__libc_init_array+0xc>
 801316a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801316e:	4798      	blx	r3
 8013170:	3501      	adds	r5, #1
 8013172:	e7f2      	b.n	801315a <__libc_init_array+0x1e>
 8013174:	08018480 	.word	0x08018480
 8013178:	08018480 	.word	0x08018480
 801317c:	08018480 	.word	0x08018480
 8013180:	08018484 	.word	0x08018484

08013184 <memcpy>:
 8013184:	b510      	push	{r4, lr}
 8013186:	1e43      	subs	r3, r0, #1
 8013188:	440a      	add	r2, r1
 801318a:	4291      	cmp	r1, r2
 801318c:	d100      	bne.n	8013190 <memcpy+0xc>
 801318e:	bd10      	pop	{r4, pc}
 8013190:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013194:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013198:	e7f7      	b.n	801318a <memcpy+0x6>

0801319a <memset>:
 801319a:	4402      	add	r2, r0
 801319c:	4603      	mov	r3, r0
 801319e:	4293      	cmp	r3, r2
 80131a0:	d100      	bne.n	80131a4 <memset+0xa>
 80131a2:	4770      	bx	lr
 80131a4:	f803 1b01 	strb.w	r1, [r3], #1
 80131a8:	e7f9      	b.n	801319e <memset+0x4>

080131aa <__cvt>:
 80131aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131ac:	ed2d 8b02 	vpush	{d8}
 80131b0:	eeb0 8b40 	vmov.f64	d8, d0
 80131b4:	b085      	sub	sp, #20
 80131b6:	4617      	mov	r7, r2
 80131b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80131ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80131bc:	ee18 2a90 	vmov	r2, s17
 80131c0:	f025 0520 	bic.w	r5, r5, #32
 80131c4:	2a00      	cmp	r2, #0
 80131c6:	bfb6      	itet	lt
 80131c8:	222d      	movlt	r2, #45	; 0x2d
 80131ca:	2200      	movge	r2, #0
 80131cc:	eeb1 8b40 	vneglt.f64	d8, d0
 80131d0:	2d46      	cmp	r5, #70	; 0x46
 80131d2:	460c      	mov	r4, r1
 80131d4:	701a      	strb	r2, [r3, #0]
 80131d6:	d004      	beq.n	80131e2 <__cvt+0x38>
 80131d8:	2d45      	cmp	r5, #69	; 0x45
 80131da:	d100      	bne.n	80131de <__cvt+0x34>
 80131dc:	3401      	adds	r4, #1
 80131de:	2102      	movs	r1, #2
 80131e0:	e000      	b.n	80131e4 <__cvt+0x3a>
 80131e2:	2103      	movs	r1, #3
 80131e4:	ab03      	add	r3, sp, #12
 80131e6:	9301      	str	r3, [sp, #4]
 80131e8:	ab02      	add	r3, sp, #8
 80131ea:	9300      	str	r3, [sp, #0]
 80131ec:	4622      	mov	r2, r4
 80131ee:	4633      	mov	r3, r6
 80131f0:	eeb0 0b48 	vmov.f64	d0, d8
 80131f4:	f001 fe44 	bl	8014e80 <_dtoa_r>
 80131f8:	2d47      	cmp	r5, #71	; 0x47
 80131fa:	d101      	bne.n	8013200 <__cvt+0x56>
 80131fc:	07fb      	lsls	r3, r7, #31
 80131fe:	d51e      	bpl.n	801323e <__cvt+0x94>
 8013200:	2d46      	cmp	r5, #70	; 0x46
 8013202:	eb00 0304 	add.w	r3, r0, r4
 8013206:	d10c      	bne.n	8013222 <__cvt+0x78>
 8013208:	7802      	ldrb	r2, [r0, #0]
 801320a:	2a30      	cmp	r2, #48	; 0x30
 801320c:	d107      	bne.n	801321e <__cvt+0x74>
 801320e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013216:	bf1c      	itt	ne
 8013218:	f1c4 0401 	rsbne	r4, r4, #1
 801321c:	6034      	strne	r4, [r6, #0]
 801321e:	6832      	ldr	r2, [r6, #0]
 8013220:	4413      	add	r3, r2
 8013222:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801322a:	d007      	beq.n	801323c <__cvt+0x92>
 801322c:	2130      	movs	r1, #48	; 0x30
 801322e:	9a03      	ldr	r2, [sp, #12]
 8013230:	429a      	cmp	r2, r3
 8013232:	d204      	bcs.n	801323e <__cvt+0x94>
 8013234:	1c54      	adds	r4, r2, #1
 8013236:	9403      	str	r4, [sp, #12]
 8013238:	7011      	strb	r1, [r2, #0]
 801323a:	e7f8      	b.n	801322e <__cvt+0x84>
 801323c:	9303      	str	r3, [sp, #12]
 801323e:	9b03      	ldr	r3, [sp, #12]
 8013240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013242:	1a1b      	subs	r3, r3, r0
 8013244:	6013      	str	r3, [r2, #0]
 8013246:	b005      	add	sp, #20
 8013248:	ecbd 8b02 	vpop	{d8}
 801324c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801324e <__exponent>:
 801324e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013250:	2900      	cmp	r1, #0
 8013252:	4604      	mov	r4, r0
 8013254:	bfba      	itte	lt
 8013256:	4249      	neglt	r1, r1
 8013258:	232d      	movlt	r3, #45	; 0x2d
 801325a:	232b      	movge	r3, #43	; 0x2b
 801325c:	2909      	cmp	r1, #9
 801325e:	f804 2b02 	strb.w	r2, [r4], #2
 8013262:	7043      	strb	r3, [r0, #1]
 8013264:	dd20      	ble.n	80132a8 <__exponent+0x5a>
 8013266:	f10d 0307 	add.w	r3, sp, #7
 801326a:	461f      	mov	r7, r3
 801326c:	260a      	movs	r6, #10
 801326e:	fb91 f5f6 	sdiv	r5, r1, r6
 8013272:	fb06 1115 	mls	r1, r6, r5, r1
 8013276:	3130      	adds	r1, #48	; 0x30
 8013278:	2d09      	cmp	r5, #9
 801327a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801327e:	f103 32ff 	add.w	r2, r3, #4294967295
 8013282:	4629      	mov	r1, r5
 8013284:	dc09      	bgt.n	801329a <__exponent+0x4c>
 8013286:	3130      	adds	r1, #48	; 0x30
 8013288:	3b02      	subs	r3, #2
 801328a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801328e:	42bb      	cmp	r3, r7
 8013290:	4622      	mov	r2, r4
 8013292:	d304      	bcc.n	801329e <__exponent+0x50>
 8013294:	1a10      	subs	r0, r2, r0
 8013296:	b003      	add	sp, #12
 8013298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801329a:	4613      	mov	r3, r2
 801329c:	e7e7      	b.n	801326e <__exponent+0x20>
 801329e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132a2:	f804 2b01 	strb.w	r2, [r4], #1
 80132a6:	e7f2      	b.n	801328e <__exponent+0x40>
 80132a8:	2330      	movs	r3, #48	; 0x30
 80132aa:	4419      	add	r1, r3
 80132ac:	7083      	strb	r3, [r0, #2]
 80132ae:	1d02      	adds	r2, r0, #4
 80132b0:	70c1      	strb	r1, [r0, #3]
 80132b2:	e7ef      	b.n	8013294 <__exponent+0x46>
 80132b4:	0000      	movs	r0, r0
	...

080132b8 <_printf_float>:
 80132b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132bc:	b08d      	sub	sp, #52	; 0x34
 80132be:	460c      	mov	r4, r1
 80132c0:	4616      	mov	r6, r2
 80132c2:	461f      	mov	r7, r3
 80132c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80132c8:	4605      	mov	r5, r0
 80132ca:	f002 ffcb 	bl	8016264 <_localeconv_r>
 80132ce:	f8d0 b000 	ldr.w	fp, [r0]
 80132d2:	4658      	mov	r0, fp
 80132d4:	f7ec ffb4 	bl	8000240 <strlen>
 80132d8:	2300      	movs	r3, #0
 80132da:	930a      	str	r3, [sp, #40]	; 0x28
 80132dc:	f8d8 3000 	ldr.w	r3, [r8]
 80132e0:	9005      	str	r0, [sp, #20]
 80132e2:	3307      	adds	r3, #7
 80132e4:	f023 0307 	bic.w	r3, r3, #7
 80132e8:	f103 0108 	add.w	r1, r3, #8
 80132ec:	f894 9018 	ldrb.w	r9, [r4, #24]
 80132f0:	6822      	ldr	r2, [r4, #0]
 80132f2:	f8c8 1000 	str.w	r1, [r8]
 80132f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80132fa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80132fe:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8013588 <_printf_float+0x2d0>
 8013302:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8013306:	eeb0 6bc0 	vabs.f64	d6, d0
 801330a:	eeb4 6b47 	vcmp.f64	d6, d7
 801330e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013312:	dd24      	ble.n	801335e <_printf_float+0xa6>
 8013314:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801331c:	d502      	bpl.n	8013324 <_printf_float+0x6c>
 801331e:	232d      	movs	r3, #45	; 0x2d
 8013320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013324:	499a      	ldr	r1, [pc, #616]	; (8013590 <_printf_float+0x2d8>)
 8013326:	4b9b      	ldr	r3, [pc, #620]	; (8013594 <_printf_float+0x2dc>)
 8013328:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801332c:	bf8c      	ite	hi
 801332e:	4688      	movhi	r8, r1
 8013330:	4698      	movls	r8, r3
 8013332:	f022 0204 	bic.w	r2, r2, #4
 8013336:	2303      	movs	r3, #3
 8013338:	6123      	str	r3, [r4, #16]
 801333a:	6022      	str	r2, [r4, #0]
 801333c:	f04f 0a00 	mov.w	sl, #0
 8013340:	9700      	str	r7, [sp, #0]
 8013342:	4633      	mov	r3, r6
 8013344:	aa0b      	add	r2, sp, #44	; 0x2c
 8013346:	4621      	mov	r1, r4
 8013348:	4628      	mov	r0, r5
 801334a:	f000 f9e1 	bl	8013710 <_printf_common>
 801334e:	3001      	adds	r0, #1
 8013350:	f040 8089 	bne.w	8013466 <_printf_float+0x1ae>
 8013354:	f04f 30ff 	mov.w	r0, #4294967295
 8013358:	b00d      	add	sp, #52	; 0x34
 801335a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801335e:	eeb4 0b40 	vcmp.f64	d0, d0
 8013362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013366:	d702      	bvc.n	801336e <_printf_float+0xb6>
 8013368:	498b      	ldr	r1, [pc, #556]	; (8013598 <_printf_float+0x2e0>)
 801336a:	4b8c      	ldr	r3, [pc, #560]	; (801359c <_printf_float+0x2e4>)
 801336c:	e7dc      	b.n	8013328 <_printf_float+0x70>
 801336e:	6861      	ldr	r1, [r4, #4]
 8013370:	1c4b      	adds	r3, r1, #1
 8013372:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013376:	ab0a      	add	r3, sp, #40	; 0x28
 8013378:	a809      	add	r0, sp, #36	; 0x24
 801337a:	d13b      	bne.n	80133f4 <_printf_float+0x13c>
 801337c:	2106      	movs	r1, #6
 801337e:	6061      	str	r1, [r4, #4]
 8013380:	f04f 0c00 	mov.w	ip, #0
 8013384:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8013388:	e9cd 0900 	strd	r0, r9, [sp]
 801338c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013390:	6022      	str	r2, [r4, #0]
 8013392:	6861      	ldr	r1, [r4, #4]
 8013394:	4628      	mov	r0, r5
 8013396:	f7ff ff08 	bl	80131aa <__cvt>
 801339a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801339e:	2b47      	cmp	r3, #71	; 0x47
 80133a0:	4680      	mov	r8, r0
 80133a2:	d109      	bne.n	80133b8 <_printf_float+0x100>
 80133a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133a6:	1cd8      	adds	r0, r3, #3
 80133a8:	db02      	blt.n	80133b0 <_printf_float+0xf8>
 80133aa:	6862      	ldr	r2, [r4, #4]
 80133ac:	4293      	cmp	r3, r2
 80133ae:	dd47      	ble.n	8013440 <_printf_float+0x188>
 80133b0:	f1a9 0902 	sub.w	r9, r9, #2
 80133b4:	fa5f f989 	uxtb.w	r9, r9
 80133b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80133bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133be:	d824      	bhi.n	801340a <_printf_float+0x152>
 80133c0:	3901      	subs	r1, #1
 80133c2:	464a      	mov	r2, r9
 80133c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80133c8:	9109      	str	r1, [sp, #36]	; 0x24
 80133ca:	f7ff ff40 	bl	801324e <__exponent>
 80133ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133d0:	1813      	adds	r3, r2, r0
 80133d2:	2a01      	cmp	r2, #1
 80133d4:	4682      	mov	sl, r0
 80133d6:	6123      	str	r3, [r4, #16]
 80133d8:	dc02      	bgt.n	80133e0 <_printf_float+0x128>
 80133da:	6822      	ldr	r2, [r4, #0]
 80133dc:	07d1      	lsls	r1, r2, #31
 80133de:	d501      	bpl.n	80133e4 <_printf_float+0x12c>
 80133e0:	3301      	adds	r3, #1
 80133e2:	6123      	str	r3, [r4, #16]
 80133e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d0a9      	beq.n	8013340 <_printf_float+0x88>
 80133ec:	232d      	movs	r3, #45	; 0x2d
 80133ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80133f2:	e7a5      	b.n	8013340 <_printf_float+0x88>
 80133f4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80133f8:	f000 8178 	beq.w	80136ec <_printf_float+0x434>
 80133fc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013400:	d1be      	bne.n	8013380 <_printf_float+0xc8>
 8013402:	2900      	cmp	r1, #0
 8013404:	d1bc      	bne.n	8013380 <_printf_float+0xc8>
 8013406:	2101      	movs	r1, #1
 8013408:	e7b9      	b.n	801337e <_printf_float+0xc6>
 801340a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801340e:	d119      	bne.n	8013444 <_printf_float+0x18c>
 8013410:	2900      	cmp	r1, #0
 8013412:	6863      	ldr	r3, [r4, #4]
 8013414:	dd0c      	ble.n	8013430 <_printf_float+0x178>
 8013416:	6121      	str	r1, [r4, #16]
 8013418:	b913      	cbnz	r3, 8013420 <_printf_float+0x168>
 801341a:	6822      	ldr	r2, [r4, #0]
 801341c:	07d2      	lsls	r2, r2, #31
 801341e:	d502      	bpl.n	8013426 <_printf_float+0x16e>
 8013420:	3301      	adds	r3, #1
 8013422:	440b      	add	r3, r1
 8013424:	6123      	str	r3, [r4, #16]
 8013426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013428:	65a3      	str	r3, [r4, #88]	; 0x58
 801342a:	f04f 0a00 	mov.w	sl, #0
 801342e:	e7d9      	b.n	80133e4 <_printf_float+0x12c>
 8013430:	b913      	cbnz	r3, 8013438 <_printf_float+0x180>
 8013432:	6822      	ldr	r2, [r4, #0]
 8013434:	07d0      	lsls	r0, r2, #31
 8013436:	d501      	bpl.n	801343c <_printf_float+0x184>
 8013438:	3302      	adds	r3, #2
 801343a:	e7f3      	b.n	8013424 <_printf_float+0x16c>
 801343c:	2301      	movs	r3, #1
 801343e:	e7f1      	b.n	8013424 <_printf_float+0x16c>
 8013440:	f04f 0967 	mov.w	r9, #103	; 0x67
 8013444:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013448:	4293      	cmp	r3, r2
 801344a:	db05      	blt.n	8013458 <_printf_float+0x1a0>
 801344c:	6822      	ldr	r2, [r4, #0]
 801344e:	6123      	str	r3, [r4, #16]
 8013450:	07d1      	lsls	r1, r2, #31
 8013452:	d5e8      	bpl.n	8013426 <_printf_float+0x16e>
 8013454:	3301      	adds	r3, #1
 8013456:	e7e5      	b.n	8013424 <_printf_float+0x16c>
 8013458:	2b00      	cmp	r3, #0
 801345a:	bfd4      	ite	le
 801345c:	f1c3 0302 	rsble	r3, r3, #2
 8013460:	2301      	movgt	r3, #1
 8013462:	4413      	add	r3, r2
 8013464:	e7de      	b.n	8013424 <_printf_float+0x16c>
 8013466:	6823      	ldr	r3, [r4, #0]
 8013468:	055a      	lsls	r2, r3, #21
 801346a:	d407      	bmi.n	801347c <_printf_float+0x1c4>
 801346c:	6923      	ldr	r3, [r4, #16]
 801346e:	4642      	mov	r2, r8
 8013470:	4631      	mov	r1, r6
 8013472:	4628      	mov	r0, r5
 8013474:	47b8      	blx	r7
 8013476:	3001      	adds	r0, #1
 8013478:	d12a      	bne.n	80134d0 <_printf_float+0x218>
 801347a:	e76b      	b.n	8013354 <_printf_float+0x9c>
 801347c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013480:	f240 80de 	bls.w	8013640 <_printf_float+0x388>
 8013484:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013488:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801348c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013490:	d133      	bne.n	80134fa <_printf_float+0x242>
 8013492:	2301      	movs	r3, #1
 8013494:	4a42      	ldr	r2, [pc, #264]	; (80135a0 <_printf_float+0x2e8>)
 8013496:	4631      	mov	r1, r6
 8013498:	4628      	mov	r0, r5
 801349a:	47b8      	blx	r7
 801349c:	3001      	adds	r0, #1
 801349e:	f43f af59 	beq.w	8013354 <_printf_float+0x9c>
 80134a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80134a6:	429a      	cmp	r2, r3
 80134a8:	db02      	blt.n	80134b0 <_printf_float+0x1f8>
 80134aa:	6823      	ldr	r3, [r4, #0]
 80134ac:	07d8      	lsls	r0, r3, #31
 80134ae:	d50f      	bpl.n	80134d0 <_printf_float+0x218>
 80134b0:	9b05      	ldr	r3, [sp, #20]
 80134b2:	465a      	mov	r2, fp
 80134b4:	4631      	mov	r1, r6
 80134b6:	4628      	mov	r0, r5
 80134b8:	47b8      	blx	r7
 80134ba:	3001      	adds	r0, #1
 80134bc:	f43f af4a 	beq.w	8013354 <_printf_float+0x9c>
 80134c0:	f04f 0800 	mov.w	r8, #0
 80134c4:	f104 091a 	add.w	r9, r4, #26
 80134c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134ca:	3b01      	subs	r3, #1
 80134cc:	4543      	cmp	r3, r8
 80134ce:	dc09      	bgt.n	80134e4 <_printf_float+0x22c>
 80134d0:	6823      	ldr	r3, [r4, #0]
 80134d2:	079b      	lsls	r3, r3, #30
 80134d4:	f100 8105 	bmi.w	80136e2 <_printf_float+0x42a>
 80134d8:	68e0      	ldr	r0, [r4, #12]
 80134da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134dc:	4298      	cmp	r0, r3
 80134de:	bfb8      	it	lt
 80134e0:	4618      	movlt	r0, r3
 80134e2:	e739      	b.n	8013358 <_printf_float+0xa0>
 80134e4:	2301      	movs	r3, #1
 80134e6:	464a      	mov	r2, r9
 80134e8:	4631      	mov	r1, r6
 80134ea:	4628      	mov	r0, r5
 80134ec:	47b8      	blx	r7
 80134ee:	3001      	adds	r0, #1
 80134f0:	f43f af30 	beq.w	8013354 <_printf_float+0x9c>
 80134f4:	f108 0801 	add.w	r8, r8, #1
 80134f8:	e7e6      	b.n	80134c8 <_printf_float+0x210>
 80134fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	dc2b      	bgt.n	8013558 <_printf_float+0x2a0>
 8013500:	2301      	movs	r3, #1
 8013502:	4a27      	ldr	r2, [pc, #156]	; (80135a0 <_printf_float+0x2e8>)
 8013504:	4631      	mov	r1, r6
 8013506:	4628      	mov	r0, r5
 8013508:	47b8      	blx	r7
 801350a:	3001      	adds	r0, #1
 801350c:	f43f af22 	beq.w	8013354 <_printf_float+0x9c>
 8013510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013512:	b923      	cbnz	r3, 801351e <_printf_float+0x266>
 8013514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013516:	b913      	cbnz	r3, 801351e <_printf_float+0x266>
 8013518:	6823      	ldr	r3, [r4, #0]
 801351a:	07d9      	lsls	r1, r3, #31
 801351c:	d5d8      	bpl.n	80134d0 <_printf_float+0x218>
 801351e:	9b05      	ldr	r3, [sp, #20]
 8013520:	465a      	mov	r2, fp
 8013522:	4631      	mov	r1, r6
 8013524:	4628      	mov	r0, r5
 8013526:	47b8      	blx	r7
 8013528:	3001      	adds	r0, #1
 801352a:	f43f af13 	beq.w	8013354 <_printf_float+0x9c>
 801352e:	f04f 0900 	mov.w	r9, #0
 8013532:	f104 0a1a 	add.w	sl, r4, #26
 8013536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013538:	425b      	negs	r3, r3
 801353a:	454b      	cmp	r3, r9
 801353c:	dc01      	bgt.n	8013542 <_printf_float+0x28a>
 801353e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013540:	e795      	b.n	801346e <_printf_float+0x1b6>
 8013542:	2301      	movs	r3, #1
 8013544:	4652      	mov	r2, sl
 8013546:	4631      	mov	r1, r6
 8013548:	4628      	mov	r0, r5
 801354a:	47b8      	blx	r7
 801354c:	3001      	adds	r0, #1
 801354e:	f43f af01 	beq.w	8013354 <_printf_float+0x9c>
 8013552:	f109 0901 	add.w	r9, r9, #1
 8013556:	e7ee      	b.n	8013536 <_printf_float+0x27e>
 8013558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801355a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801355c:	429a      	cmp	r2, r3
 801355e:	bfa8      	it	ge
 8013560:	461a      	movge	r2, r3
 8013562:	2a00      	cmp	r2, #0
 8013564:	4691      	mov	r9, r2
 8013566:	dd07      	ble.n	8013578 <_printf_float+0x2c0>
 8013568:	4613      	mov	r3, r2
 801356a:	4631      	mov	r1, r6
 801356c:	4642      	mov	r2, r8
 801356e:	4628      	mov	r0, r5
 8013570:	47b8      	blx	r7
 8013572:	3001      	adds	r0, #1
 8013574:	f43f aeee 	beq.w	8013354 <_printf_float+0x9c>
 8013578:	f104 031a 	add.w	r3, r4, #26
 801357c:	f04f 0a00 	mov.w	sl, #0
 8013580:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013584:	9307      	str	r3, [sp, #28]
 8013586:	e017      	b.n	80135b8 <_printf_float+0x300>
 8013588:	ffffffff 	.word	0xffffffff
 801358c:	7fefffff 	.word	0x7fefffff
 8013590:	0801815c 	.word	0x0801815c
 8013594:	08018158 	.word	0x08018158
 8013598:	08018164 	.word	0x08018164
 801359c:	08018160 	.word	0x08018160
 80135a0:	08018168 	.word	0x08018168
 80135a4:	2301      	movs	r3, #1
 80135a6:	9a07      	ldr	r2, [sp, #28]
 80135a8:	4631      	mov	r1, r6
 80135aa:	4628      	mov	r0, r5
 80135ac:	47b8      	blx	r7
 80135ae:	3001      	adds	r0, #1
 80135b0:	f43f aed0 	beq.w	8013354 <_printf_float+0x9c>
 80135b4:	f10a 0a01 	add.w	sl, sl, #1
 80135b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80135ba:	9306      	str	r3, [sp, #24]
 80135bc:	eba3 0309 	sub.w	r3, r3, r9
 80135c0:	4553      	cmp	r3, sl
 80135c2:	dcef      	bgt.n	80135a4 <_printf_float+0x2ec>
 80135c4:	9b06      	ldr	r3, [sp, #24]
 80135c6:	4498      	add	r8, r3
 80135c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80135cc:	429a      	cmp	r2, r3
 80135ce:	db15      	blt.n	80135fc <_printf_float+0x344>
 80135d0:	6823      	ldr	r3, [r4, #0]
 80135d2:	07da      	lsls	r2, r3, #31
 80135d4:	d412      	bmi.n	80135fc <_printf_float+0x344>
 80135d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135d8:	9a06      	ldr	r2, [sp, #24]
 80135da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80135dc:	1a9a      	subs	r2, r3, r2
 80135de:	eba3 0a01 	sub.w	sl, r3, r1
 80135e2:	4592      	cmp	sl, r2
 80135e4:	bfa8      	it	ge
 80135e6:	4692      	movge	sl, r2
 80135e8:	f1ba 0f00 	cmp.w	sl, #0
 80135ec:	dc0e      	bgt.n	801360c <_printf_float+0x354>
 80135ee:	f04f 0800 	mov.w	r8, #0
 80135f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80135f6:	f104 091a 	add.w	r9, r4, #26
 80135fa:	e019      	b.n	8013630 <_printf_float+0x378>
 80135fc:	9b05      	ldr	r3, [sp, #20]
 80135fe:	465a      	mov	r2, fp
 8013600:	4631      	mov	r1, r6
 8013602:	4628      	mov	r0, r5
 8013604:	47b8      	blx	r7
 8013606:	3001      	adds	r0, #1
 8013608:	d1e5      	bne.n	80135d6 <_printf_float+0x31e>
 801360a:	e6a3      	b.n	8013354 <_printf_float+0x9c>
 801360c:	4653      	mov	r3, sl
 801360e:	4642      	mov	r2, r8
 8013610:	4631      	mov	r1, r6
 8013612:	4628      	mov	r0, r5
 8013614:	47b8      	blx	r7
 8013616:	3001      	adds	r0, #1
 8013618:	d1e9      	bne.n	80135ee <_printf_float+0x336>
 801361a:	e69b      	b.n	8013354 <_printf_float+0x9c>
 801361c:	2301      	movs	r3, #1
 801361e:	464a      	mov	r2, r9
 8013620:	4631      	mov	r1, r6
 8013622:	4628      	mov	r0, r5
 8013624:	47b8      	blx	r7
 8013626:	3001      	adds	r0, #1
 8013628:	f43f ae94 	beq.w	8013354 <_printf_float+0x9c>
 801362c:	f108 0801 	add.w	r8, r8, #1
 8013630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013634:	1a9b      	subs	r3, r3, r2
 8013636:	eba3 030a 	sub.w	r3, r3, sl
 801363a:	4543      	cmp	r3, r8
 801363c:	dcee      	bgt.n	801361c <_printf_float+0x364>
 801363e:	e747      	b.n	80134d0 <_printf_float+0x218>
 8013640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013642:	2a01      	cmp	r2, #1
 8013644:	dc01      	bgt.n	801364a <_printf_float+0x392>
 8013646:	07db      	lsls	r3, r3, #31
 8013648:	d539      	bpl.n	80136be <_printf_float+0x406>
 801364a:	2301      	movs	r3, #1
 801364c:	4642      	mov	r2, r8
 801364e:	4631      	mov	r1, r6
 8013650:	4628      	mov	r0, r5
 8013652:	47b8      	blx	r7
 8013654:	3001      	adds	r0, #1
 8013656:	f43f ae7d 	beq.w	8013354 <_printf_float+0x9c>
 801365a:	9b05      	ldr	r3, [sp, #20]
 801365c:	465a      	mov	r2, fp
 801365e:	4631      	mov	r1, r6
 8013660:	4628      	mov	r0, r5
 8013662:	47b8      	blx	r7
 8013664:	3001      	adds	r0, #1
 8013666:	f108 0801 	add.w	r8, r8, #1
 801366a:	f43f ae73 	beq.w	8013354 <_printf_float+0x9c>
 801366e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013674:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801367c:	f103 33ff 	add.w	r3, r3, #4294967295
 8013680:	d018      	beq.n	80136b4 <_printf_float+0x3fc>
 8013682:	4642      	mov	r2, r8
 8013684:	4631      	mov	r1, r6
 8013686:	4628      	mov	r0, r5
 8013688:	47b8      	blx	r7
 801368a:	3001      	adds	r0, #1
 801368c:	d10e      	bne.n	80136ac <_printf_float+0x3f4>
 801368e:	e661      	b.n	8013354 <_printf_float+0x9c>
 8013690:	2301      	movs	r3, #1
 8013692:	464a      	mov	r2, r9
 8013694:	4631      	mov	r1, r6
 8013696:	4628      	mov	r0, r5
 8013698:	47b8      	blx	r7
 801369a:	3001      	adds	r0, #1
 801369c:	f43f ae5a 	beq.w	8013354 <_printf_float+0x9c>
 80136a0:	f108 0801 	add.w	r8, r8, #1
 80136a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136a6:	3b01      	subs	r3, #1
 80136a8:	4543      	cmp	r3, r8
 80136aa:	dcf1      	bgt.n	8013690 <_printf_float+0x3d8>
 80136ac:	4653      	mov	r3, sl
 80136ae:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80136b2:	e6dd      	b.n	8013470 <_printf_float+0x1b8>
 80136b4:	f04f 0800 	mov.w	r8, #0
 80136b8:	f104 091a 	add.w	r9, r4, #26
 80136bc:	e7f2      	b.n	80136a4 <_printf_float+0x3ec>
 80136be:	2301      	movs	r3, #1
 80136c0:	e7df      	b.n	8013682 <_printf_float+0x3ca>
 80136c2:	2301      	movs	r3, #1
 80136c4:	464a      	mov	r2, r9
 80136c6:	4631      	mov	r1, r6
 80136c8:	4628      	mov	r0, r5
 80136ca:	47b8      	blx	r7
 80136cc:	3001      	adds	r0, #1
 80136ce:	f43f ae41 	beq.w	8013354 <_printf_float+0x9c>
 80136d2:	f108 0801 	add.w	r8, r8, #1
 80136d6:	68e3      	ldr	r3, [r4, #12]
 80136d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80136da:	1a9b      	subs	r3, r3, r2
 80136dc:	4543      	cmp	r3, r8
 80136de:	dcf0      	bgt.n	80136c2 <_printf_float+0x40a>
 80136e0:	e6fa      	b.n	80134d8 <_printf_float+0x220>
 80136e2:	f04f 0800 	mov.w	r8, #0
 80136e6:	f104 0919 	add.w	r9, r4, #25
 80136ea:	e7f4      	b.n	80136d6 <_printf_float+0x41e>
 80136ec:	2900      	cmp	r1, #0
 80136ee:	f43f ae8a 	beq.w	8013406 <_printf_float+0x14e>
 80136f2:	f04f 0c00 	mov.w	ip, #0
 80136f6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80136fa:	e9cd 0900 	strd	r0, r9, [sp]
 80136fe:	6022      	str	r2, [r4, #0]
 8013700:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013704:	4628      	mov	r0, r5
 8013706:	f7ff fd50 	bl	80131aa <__cvt>
 801370a:	4680      	mov	r8, r0
 801370c:	e64a      	b.n	80133a4 <_printf_float+0xec>
 801370e:	bf00      	nop

08013710 <_printf_common>:
 8013710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013714:	4691      	mov	r9, r2
 8013716:	461f      	mov	r7, r3
 8013718:	688a      	ldr	r2, [r1, #8]
 801371a:	690b      	ldr	r3, [r1, #16]
 801371c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013720:	4293      	cmp	r3, r2
 8013722:	bfb8      	it	lt
 8013724:	4613      	movlt	r3, r2
 8013726:	f8c9 3000 	str.w	r3, [r9]
 801372a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801372e:	4606      	mov	r6, r0
 8013730:	460c      	mov	r4, r1
 8013732:	b112      	cbz	r2, 801373a <_printf_common+0x2a>
 8013734:	3301      	adds	r3, #1
 8013736:	f8c9 3000 	str.w	r3, [r9]
 801373a:	6823      	ldr	r3, [r4, #0]
 801373c:	0699      	lsls	r1, r3, #26
 801373e:	bf42      	ittt	mi
 8013740:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013744:	3302      	addmi	r3, #2
 8013746:	f8c9 3000 	strmi.w	r3, [r9]
 801374a:	6825      	ldr	r5, [r4, #0]
 801374c:	f015 0506 	ands.w	r5, r5, #6
 8013750:	d107      	bne.n	8013762 <_printf_common+0x52>
 8013752:	f104 0a19 	add.w	sl, r4, #25
 8013756:	68e3      	ldr	r3, [r4, #12]
 8013758:	f8d9 2000 	ldr.w	r2, [r9]
 801375c:	1a9b      	subs	r3, r3, r2
 801375e:	42ab      	cmp	r3, r5
 8013760:	dc28      	bgt.n	80137b4 <_printf_common+0xa4>
 8013762:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013766:	6822      	ldr	r2, [r4, #0]
 8013768:	3300      	adds	r3, #0
 801376a:	bf18      	it	ne
 801376c:	2301      	movne	r3, #1
 801376e:	0692      	lsls	r2, r2, #26
 8013770:	d42d      	bmi.n	80137ce <_printf_common+0xbe>
 8013772:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013776:	4639      	mov	r1, r7
 8013778:	4630      	mov	r0, r6
 801377a:	47c0      	blx	r8
 801377c:	3001      	adds	r0, #1
 801377e:	d020      	beq.n	80137c2 <_printf_common+0xb2>
 8013780:	6823      	ldr	r3, [r4, #0]
 8013782:	68e5      	ldr	r5, [r4, #12]
 8013784:	f8d9 2000 	ldr.w	r2, [r9]
 8013788:	f003 0306 	and.w	r3, r3, #6
 801378c:	2b04      	cmp	r3, #4
 801378e:	bf08      	it	eq
 8013790:	1aad      	subeq	r5, r5, r2
 8013792:	68a3      	ldr	r3, [r4, #8]
 8013794:	6922      	ldr	r2, [r4, #16]
 8013796:	bf0c      	ite	eq
 8013798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801379c:	2500      	movne	r5, #0
 801379e:	4293      	cmp	r3, r2
 80137a0:	bfc4      	itt	gt
 80137a2:	1a9b      	subgt	r3, r3, r2
 80137a4:	18ed      	addgt	r5, r5, r3
 80137a6:	f04f 0900 	mov.w	r9, #0
 80137aa:	341a      	adds	r4, #26
 80137ac:	454d      	cmp	r5, r9
 80137ae:	d11a      	bne.n	80137e6 <_printf_common+0xd6>
 80137b0:	2000      	movs	r0, #0
 80137b2:	e008      	b.n	80137c6 <_printf_common+0xb6>
 80137b4:	2301      	movs	r3, #1
 80137b6:	4652      	mov	r2, sl
 80137b8:	4639      	mov	r1, r7
 80137ba:	4630      	mov	r0, r6
 80137bc:	47c0      	blx	r8
 80137be:	3001      	adds	r0, #1
 80137c0:	d103      	bne.n	80137ca <_printf_common+0xba>
 80137c2:	f04f 30ff 	mov.w	r0, #4294967295
 80137c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137ca:	3501      	adds	r5, #1
 80137cc:	e7c3      	b.n	8013756 <_printf_common+0x46>
 80137ce:	18e1      	adds	r1, r4, r3
 80137d0:	1c5a      	adds	r2, r3, #1
 80137d2:	2030      	movs	r0, #48	; 0x30
 80137d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80137d8:	4422      	add	r2, r4
 80137da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80137de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80137e2:	3302      	adds	r3, #2
 80137e4:	e7c5      	b.n	8013772 <_printf_common+0x62>
 80137e6:	2301      	movs	r3, #1
 80137e8:	4622      	mov	r2, r4
 80137ea:	4639      	mov	r1, r7
 80137ec:	4630      	mov	r0, r6
 80137ee:	47c0      	blx	r8
 80137f0:	3001      	adds	r0, #1
 80137f2:	d0e6      	beq.n	80137c2 <_printf_common+0xb2>
 80137f4:	f109 0901 	add.w	r9, r9, #1
 80137f8:	e7d8      	b.n	80137ac <_printf_common+0x9c>
	...

080137fc <_printf_i>:
 80137fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013800:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013804:	460c      	mov	r4, r1
 8013806:	7e09      	ldrb	r1, [r1, #24]
 8013808:	b085      	sub	sp, #20
 801380a:	296e      	cmp	r1, #110	; 0x6e
 801380c:	4617      	mov	r7, r2
 801380e:	4606      	mov	r6, r0
 8013810:	4698      	mov	r8, r3
 8013812:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013814:	f000 80b3 	beq.w	801397e <_printf_i+0x182>
 8013818:	d822      	bhi.n	8013860 <_printf_i+0x64>
 801381a:	2963      	cmp	r1, #99	; 0x63
 801381c:	d036      	beq.n	801388c <_printf_i+0x90>
 801381e:	d80a      	bhi.n	8013836 <_printf_i+0x3a>
 8013820:	2900      	cmp	r1, #0
 8013822:	f000 80b9 	beq.w	8013998 <_printf_i+0x19c>
 8013826:	2958      	cmp	r1, #88	; 0x58
 8013828:	f000 8083 	beq.w	8013932 <_printf_i+0x136>
 801382c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013830:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013834:	e032      	b.n	801389c <_printf_i+0xa0>
 8013836:	2964      	cmp	r1, #100	; 0x64
 8013838:	d001      	beq.n	801383e <_printf_i+0x42>
 801383a:	2969      	cmp	r1, #105	; 0x69
 801383c:	d1f6      	bne.n	801382c <_printf_i+0x30>
 801383e:	6820      	ldr	r0, [r4, #0]
 8013840:	6813      	ldr	r3, [r2, #0]
 8013842:	0605      	lsls	r5, r0, #24
 8013844:	f103 0104 	add.w	r1, r3, #4
 8013848:	d52a      	bpl.n	80138a0 <_printf_i+0xa4>
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	6011      	str	r1, [r2, #0]
 801384e:	2b00      	cmp	r3, #0
 8013850:	da03      	bge.n	801385a <_printf_i+0x5e>
 8013852:	222d      	movs	r2, #45	; 0x2d
 8013854:	425b      	negs	r3, r3
 8013856:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801385a:	486f      	ldr	r0, [pc, #444]	; (8013a18 <_printf_i+0x21c>)
 801385c:	220a      	movs	r2, #10
 801385e:	e039      	b.n	80138d4 <_printf_i+0xd8>
 8013860:	2973      	cmp	r1, #115	; 0x73
 8013862:	f000 809d 	beq.w	80139a0 <_printf_i+0x1a4>
 8013866:	d808      	bhi.n	801387a <_printf_i+0x7e>
 8013868:	296f      	cmp	r1, #111	; 0x6f
 801386a:	d020      	beq.n	80138ae <_printf_i+0xb2>
 801386c:	2970      	cmp	r1, #112	; 0x70
 801386e:	d1dd      	bne.n	801382c <_printf_i+0x30>
 8013870:	6823      	ldr	r3, [r4, #0]
 8013872:	f043 0320 	orr.w	r3, r3, #32
 8013876:	6023      	str	r3, [r4, #0]
 8013878:	e003      	b.n	8013882 <_printf_i+0x86>
 801387a:	2975      	cmp	r1, #117	; 0x75
 801387c:	d017      	beq.n	80138ae <_printf_i+0xb2>
 801387e:	2978      	cmp	r1, #120	; 0x78
 8013880:	d1d4      	bne.n	801382c <_printf_i+0x30>
 8013882:	2378      	movs	r3, #120	; 0x78
 8013884:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013888:	4864      	ldr	r0, [pc, #400]	; (8013a1c <_printf_i+0x220>)
 801388a:	e055      	b.n	8013938 <_printf_i+0x13c>
 801388c:	6813      	ldr	r3, [r2, #0]
 801388e:	1d19      	adds	r1, r3, #4
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	6011      	str	r1, [r2, #0]
 8013894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801389c:	2301      	movs	r3, #1
 801389e:	e08c      	b.n	80139ba <_printf_i+0x1be>
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	6011      	str	r1, [r2, #0]
 80138a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80138a8:	bf18      	it	ne
 80138aa:	b21b      	sxthne	r3, r3
 80138ac:	e7cf      	b.n	801384e <_printf_i+0x52>
 80138ae:	6813      	ldr	r3, [r2, #0]
 80138b0:	6825      	ldr	r5, [r4, #0]
 80138b2:	1d18      	adds	r0, r3, #4
 80138b4:	6010      	str	r0, [r2, #0]
 80138b6:	0628      	lsls	r0, r5, #24
 80138b8:	d501      	bpl.n	80138be <_printf_i+0xc2>
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	e002      	b.n	80138c4 <_printf_i+0xc8>
 80138be:	0668      	lsls	r0, r5, #25
 80138c0:	d5fb      	bpl.n	80138ba <_printf_i+0xbe>
 80138c2:	881b      	ldrh	r3, [r3, #0]
 80138c4:	4854      	ldr	r0, [pc, #336]	; (8013a18 <_printf_i+0x21c>)
 80138c6:	296f      	cmp	r1, #111	; 0x6f
 80138c8:	bf14      	ite	ne
 80138ca:	220a      	movne	r2, #10
 80138cc:	2208      	moveq	r2, #8
 80138ce:	2100      	movs	r1, #0
 80138d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80138d4:	6865      	ldr	r5, [r4, #4]
 80138d6:	60a5      	str	r5, [r4, #8]
 80138d8:	2d00      	cmp	r5, #0
 80138da:	f2c0 8095 	blt.w	8013a08 <_printf_i+0x20c>
 80138de:	6821      	ldr	r1, [r4, #0]
 80138e0:	f021 0104 	bic.w	r1, r1, #4
 80138e4:	6021      	str	r1, [r4, #0]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d13d      	bne.n	8013966 <_printf_i+0x16a>
 80138ea:	2d00      	cmp	r5, #0
 80138ec:	f040 808e 	bne.w	8013a0c <_printf_i+0x210>
 80138f0:	4665      	mov	r5, ip
 80138f2:	2a08      	cmp	r2, #8
 80138f4:	d10b      	bne.n	801390e <_printf_i+0x112>
 80138f6:	6823      	ldr	r3, [r4, #0]
 80138f8:	07db      	lsls	r3, r3, #31
 80138fa:	d508      	bpl.n	801390e <_printf_i+0x112>
 80138fc:	6923      	ldr	r3, [r4, #16]
 80138fe:	6862      	ldr	r2, [r4, #4]
 8013900:	429a      	cmp	r2, r3
 8013902:	bfde      	ittt	le
 8013904:	2330      	movle	r3, #48	; 0x30
 8013906:	f805 3c01 	strble.w	r3, [r5, #-1]
 801390a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801390e:	ebac 0305 	sub.w	r3, ip, r5
 8013912:	6123      	str	r3, [r4, #16]
 8013914:	f8cd 8000 	str.w	r8, [sp]
 8013918:	463b      	mov	r3, r7
 801391a:	aa03      	add	r2, sp, #12
 801391c:	4621      	mov	r1, r4
 801391e:	4630      	mov	r0, r6
 8013920:	f7ff fef6 	bl	8013710 <_printf_common>
 8013924:	3001      	adds	r0, #1
 8013926:	d14d      	bne.n	80139c4 <_printf_i+0x1c8>
 8013928:	f04f 30ff 	mov.w	r0, #4294967295
 801392c:	b005      	add	sp, #20
 801392e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013932:	4839      	ldr	r0, [pc, #228]	; (8013a18 <_printf_i+0x21c>)
 8013934:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013938:	6813      	ldr	r3, [r2, #0]
 801393a:	6821      	ldr	r1, [r4, #0]
 801393c:	1d1d      	adds	r5, r3, #4
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	6015      	str	r5, [r2, #0]
 8013942:	060a      	lsls	r2, r1, #24
 8013944:	d50b      	bpl.n	801395e <_printf_i+0x162>
 8013946:	07ca      	lsls	r2, r1, #31
 8013948:	bf44      	itt	mi
 801394a:	f041 0120 	orrmi.w	r1, r1, #32
 801394e:	6021      	strmi	r1, [r4, #0]
 8013950:	b91b      	cbnz	r3, 801395a <_printf_i+0x15e>
 8013952:	6822      	ldr	r2, [r4, #0]
 8013954:	f022 0220 	bic.w	r2, r2, #32
 8013958:	6022      	str	r2, [r4, #0]
 801395a:	2210      	movs	r2, #16
 801395c:	e7b7      	b.n	80138ce <_printf_i+0xd2>
 801395e:	064d      	lsls	r5, r1, #25
 8013960:	bf48      	it	mi
 8013962:	b29b      	uxthmi	r3, r3
 8013964:	e7ef      	b.n	8013946 <_printf_i+0x14a>
 8013966:	4665      	mov	r5, ip
 8013968:	fbb3 f1f2 	udiv	r1, r3, r2
 801396c:	fb02 3311 	mls	r3, r2, r1, r3
 8013970:	5cc3      	ldrb	r3, [r0, r3]
 8013972:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013976:	460b      	mov	r3, r1
 8013978:	2900      	cmp	r1, #0
 801397a:	d1f5      	bne.n	8013968 <_printf_i+0x16c>
 801397c:	e7b9      	b.n	80138f2 <_printf_i+0xf6>
 801397e:	6813      	ldr	r3, [r2, #0]
 8013980:	6825      	ldr	r5, [r4, #0]
 8013982:	6961      	ldr	r1, [r4, #20]
 8013984:	1d18      	adds	r0, r3, #4
 8013986:	6010      	str	r0, [r2, #0]
 8013988:	0628      	lsls	r0, r5, #24
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	d501      	bpl.n	8013992 <_printf_i+0x196>
 801398e:	6019      	str	r1, [r3, #0]
 8013990:	e002      	b.n	8013998 <_printf_i+0x19c>
 8013992:	066a      	lsls	r2, r5, #25
 8013994:	d5fb      	bpl.n	801398e <_printf_i+0x192>
 8013996:	8019      	strh	r1, [r3, #0]
 8013998:	2300      	movs	r3, #0
 801399a:	6123      	str	r3, [r4, #16]
 801399c:	4665      	mov	r5, ip
 801399e:	e7b9      	b.n	8013914 <_printf_i+0x118>
 80139a0:	6813      	ldr	r3, [r2, #0]
 80139a2:	1d19      	adds	r1, r3, #4
 80139a4:	6011      	str	r1, [r2, #0]
 80139a6:	681d      	ldr	r5, [r3, #0]
 80139a8:	6862      	ldr	r2, [r4, #4]
 80139aa:	2100      	movs	r1, #0
 80139ac:	4628      	mov	r0, r5
 80139ae:	f7ec fc4f 	bl	8000250 <memchr>
 80139b2:	b108      	cbz	r0, 80139b8 <_printf_i+0x1bc>
 80139b4:	1b40      	subs	r0, r0, r5
 80139b6:	6060      	str	r0, [r4, #4]
 80139b8:	6863      	ldr	r3, [r4, #4]
 80139ba:	6123      	str	r3, [r4, #16]
 80139bc:	2300      	movs	r3, #0
 80139be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80139c2:	e7a7      	b.n	8013914 <_printf_i+0x118>
 80139c4:	6923      	ldr	r3, [r4, #16]
 80139c6:	462a      	mov	r2, r5
 80139c8:	4639      	mov	r1, r7
 80139ca:	4630      	mov	r0, r6
 80139cc:	47c0      	blx	r8
 80139ce:	3001      	adds	r0, #1
 80139d0:	d0aa      	beq.n	8013928 <_printf_i+0x12c>
 80139d2:	6823      	ldr	r3, [r4, #0]
 80139d4:	079b      	lsls	r3, r3, #30
 80139d6:	d413      	bmi.n	8013a00 <_printf_i+0x204>
 80139d8:	68e0      	ldr	r0, [r4, #12]
 80139da:	9b03      	ldr	r3, [sp, #12]
 80139dc:	4298      	cmp	r0, r3
 80139de:	bfb8      	it	lt
 80139e0:	4618      	movlt	r0, r3
 80139e2:	e7a3      	b.n	801392c <_printf_i+0x130>
 80139e4:	2301      	movs	r3, #1
 80139e6:	464a      	mov	r2, r9
 80139e8:	4639      	mov	r1, r7
 80139ea:	4630      	mov	r0, r6
 80139ec:	47c0      	blx	r8
 80139ee:	3001      	adds	r0, #1
 80139f0:	d09a      	beq.n	8013928 <_printf_i+0x12c>
 80139f2:	3501      	adds	r5, #1
 80139f4:	68e3      	ldr	r3, [r4, #12]
 80139f6:	9a03      	ldr	r2, [sp, #12]
 80139f8:	1a9b      	subs	r3, r3, r2
 80139fa:	42ab      	cmp	r3, r5
 80139fc:	dcf2      	bgt.n	80139e4 <_printf_i+0x1e8>
 80139fe:	e7eb      	b.n	80139d8 <_printf_i+0x1dc>
 8013a00:	2500      	movs	r5, #0
 8013a02:	f104 0919 	add.w	r9, r4, #25
 8013a06:	e7f5      	b.n	80139f4 <_printf_i+0x1f8>
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d1ac      	bne.n	8013966 <_printf_i+0x16a>
 8013a0c:	7803      	ldrb	r3, [r0, #0]
 8013a0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013a12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013a16:	e76c      	b.n	80138f2 <_printf_i+0xf6>
 8013a18:	0801816a 	.word	0x0801816a
 8013a1c:	0801817b 	.word	0x0801817b

08013a20 <_scanf_float>:
 8013a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a24:	469a      	mov	sl, r3
 8013a26:	688b      	ldr	r3, [r1, #8]
 8013a28:	4616      	mov	r6, r2
 8013a2a:	1e5a      	subs	r2, r3, #1
 8013a2c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013a30:	b087      	sub	sp, #28
 8013a32:	bf83      	ittte	hi
 8013a34:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013a38:	189b      	addhi	r3, r3, r2
 8013a3a:	9301      	strhi	r3, [sp, #4]
 8013a3c:	2300      	movls	r3, #0
 8013a3e:	bf86      	itte	hi
 8013a40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013a44:	608b      	strhi	r3, [r1, #8]
 8013a46:	9301      	strls	r3, [sp, #4]
 8013a48:	680b      	ldr	r3, [r1, #0]
 8013a4a:	4688      	mov	r8, r1
 8013a4c:	f04f 0b00 	mov.w	fp, #0
 8013a50:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013a54:	f848 3b1c 	str.w	r3, [r8], #28
 8013a58:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8013a5c:	4607      	mov	r7, r0
 8013a5e:	460c      	mov	r4, r1
 8013a60:	4645      	mov	r5, r8
 8013a62:	465a      	mov	r2, fp
 8013a64:	46d9      	mov	r9, fp
 8013a66:	f8cd b008 	str.w	fp, [sp, #8]
 8013a6a:	68a1      	ldr	r1, [r4, #8]
 8013a6c:	b181      	cbz	r1, 8013a90 <_scanf_float+0x70>
 8013a6e:	6833      	ldr	r3, [r6, #0]
 8013a70:	781b      	ldrb	r3, [r3, #0]
 8013a72:	2b49      	cmp	r3, #73	; 0x49
 8013a74:	d071      	beq.n	8013b5a <_scanf_float+0x13a>
 8013a76:	d84d      	bhi.n	8013b14 <_scanf_float+0xf4>
 8013a78:	2b39      	cmp	r3, #57	; 0x39
 8013a7a:	d840      	bhi.n	8013afe <_scanf_float+0xde>
 8013a7c:	2b31      	cmp	r3, #49	; 0x31
 8013a7e:	f080 8088 	bcs.w	8013b92 <_scanf_float+0x172>
 8013a82:	2b2d      	cmp	r3, #45	; 0x2d
 8013a84:	f000 8090 	beq.w	8013ba8 <_scanf_float+0x188>
 8013a88:	d815      	bhi.n	8013ab6 <_scanf_float+0x96>
 8013a8a:	2b2b      	cmp	r3, #43	; 0x2b
 8013a8c:	f000 808c 	beq.w	8013ba8 <_scanf_float+0x188>
 8013a90:	f1b9 0f00 	cmp.w	r9, #0
 8013a94:	d003      	beq.n	8013a9e <_scanf_float+0x7e>
 8013a96:	6823      	ldr	r3, [r4, #0]
 8013a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013a9c:	6023      	str	r3, [r4, #0]
 8013a9e:	3a01      	subs	r2, #1
 8013aa0:	2a01      	cmp	r2, #1
 8013aa2:	f200 80ea 	bhi.w	8013c7a <_scanf_float+0x25a>
 8013aa6:	4545      	cmp	r5, r8
 8013aa8:	f200 80dc 	bhi.w	8013c64 <_scanf_float+0x244>
 8013aac:	2601      	movs	r6, #1
 8013aae:	4630      	mov	r0, r6
 8013ab0:	b007      	add	sp, #28
 8013ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8013ab8:	f000 809f 	beq.w	8013bfa <_scanf_float+0x1da>
 8013abc:	2b30      	cmp	r3, #48	; 0x30
 8013abe:	d1e7      	bne.n	8013a90 <_scanf_float+0x70>
 8013ac0:	6820      	ldr	r0, [r4, #0]
 8013ac2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013ac6:	d064      	beq.n	8013b92 <_scanf_float+0x172>
 8013ac8:	9b01      	ldr	r3, [sp, #4]
 8013aca:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8013ace:	6020      	str	r0, [r4, #0]
 8013ad0:	f109 0901 	add.w	r9, r9, #1
 8013ad4:	b11b      	cbz	r3, 8013ade <_scanf_float+0xbe>
 8013ad6:	3b01      	subs	r3, #1
 8013ad8:	3101      	adds	r1, #1
 8013ada:	9301      	str	r3, [sp, #4]
 8013adc:	60a1      	str	r1, [r4, #8]
 8013ade:	68a3      	ldr	r3, [r4, #8]
 8013ae0:	3b01      	subs	r3, #1
 8013ae2:	60a3      	str	r3, [r4, #8]
 8013ae4:	6923      	ldr	r3, [r4, #16]
 8013ae6:	3301      	adds	r3, #1
 8013ae8:	6123      	str	r3, [r4, #16]
 8013aea:	6873      	ldr	r3, [r6, #4]
 8013aec:	3b01      	subs	r3, #1
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	6073      	str	r3, [r6, #4]
 8013af2:	f340 80ac 	ble.w	8013c4e <_scanf_float+0x22e>
 8013af6:	6833      	ldr	r3, [r6, #0]
 8013af8:	3301      	adds	r3, #1
 8013afa:	6033      	str	r3, [r6, #0]
 8013afc:	e7b5      	b.n	8013a6a <_scanf_float+0x4a>
 8013afe:	2b45      	cmp	r3, #69	; 0x45
 8013b00:	f000 8085 	beq.w	8013c0e <_scanf_float+0x1ee>
 8013b04:	2b46      	cmp	r3, #70	; 0x46
 8013b06:	d06a      	beq.n	8013bde <_scanf_float+0x1be>
 8013b08:	2b41      	cmp	r3, #65	; 0x41
 8013b0a:	d1c1      	bne.n	8013a90 <_scanf_float+0x70>
 8013b0c:	2a01      	cmp	r2, #1
 8013b0e:	d1bf      	bne.n	8013a90 <_scanf_float+0x70>
 8013b10:	2202      	movs	r2, #2
 8013b12:	e046      	b.n	8013ba2 <_scanf_float+0x182>
 8013b14:	2b65      	cmp	r3, #101	; 0x65
 8013b16:	d07a      	beq.n	8013c0e <_scanf_float+0x1ee>
 8013b18:	d818      	bhi.n	8013b4c <_scanf_float+0x12c>
 8013b1a:	2b54      	cmp	r3, #84	; 0x54
 8013b1c:	d066      	beq.n	8013bec <_scanf_float+0x1cc>
 8013b1e:	d811      	bhi.n	8013b44 <_scanf_float+0x124>
 8013b20:	2b4e      	cmp	r3, #78	; 0x4e
 8013b22:	d1b5      	bne.n	8013a90 <_scanf_float+0x70>
 8013b24:	2a00      	cmp	r2, #0
 8013b26:	d146      	bne.n	8013bb6 <_scanf_float+0x196>
 8013b28:	f1b9 0f00 	cmp.w	r9, #0
 8013b2c:	d145      	bne.n	8013bba <_scanf_float+0x19a>
 8013b2e:	6821      	ldr	r1, [r4, #0]
 8013b30:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013b34:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013b38:	d13f      	bne.n	8013bba <_scanf_float+0x19a>
 8013b3a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013b3e:	6021      	str	r1, [r4, #0]
 8013b40:	2201      	movs	r2, #1
 8013b42:	e02e      	b.n	8013ba2 <_scanf_float+0x182>
 8013b44:	2b59      	cmp	r3, #89	; 0x59
 8013b46:	d01e      	beq.n	8013b86 <_scanf_float+0x166>
 8013b48:	2b61      	cmp	r3, #97	; 0x61
 8013b4a:	e7de      	b.n	8013b0a <_scanf_float+0xea>
 8013b4c:	2b6e      	cmp	r3, #110	; 0x6e
 8013b4e:	d0e9      	beq.n	8013b24 <_scanf_float+0x104>
 8013b50:	d815      	bhi.n	8013b7e <_scanf_float+0x15e>
 8013b52:	2b66      	cmp	r3, #102	; 0x66
 8013b54:	d043      	beq.n	8013bde <_scanf_float+0x1be>
 8013b56:	2b69      	cmp	r3, #105	; 0x69
 8013b58:	d19a      	bne.n	8013a90 <_scanf_float+0x70>
 8013b5a:	f1bb 0f00 	cmp.w	fp, #0
 8013b5e:	d138      	bne.n	8013bd2 <_scanf_float+0x1b2>
 8013b60:	f1b9 0f00 	cmp.w	r9, #0
 8013b64:	d197      	bne.n	8013a96 <_scanf_float+0x76>
 8013b66:	6821      	ldr	r1, [r4, #0]
 8013b68:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013b6c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013b70:	d195      	bne.n	8013a9e <_scanf_float+0x7e>
 8013b72:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013b76:	6021      	str	r1, [r4, #0]
 8013b78:	f04f 0b01 	mov.w	fp, #1
 8013b7c:	e011      	b.n	8013ba2 <_scanf_float+0x182>
 8013b7e:	2b74      	cmp	r3, #116	; 0x74
 8013b80:	d034      	beq.n	8013bec <_scanf_float+0x1cc>
 8013b82:	2b79      	cmp	r3, #121	; 0x79
 8013b84:	d184      	bne.n	8013a90 <_scanf_float+0x70>
 8013b86:	f1bb 0f07 	cmp.w	fp, #7
 8013b8a:	d181      	bne.n	8013a90 <_scanf_float+0x70>
 8013b8c:	f04f 0b08 	mov.w	fp, #8
 8013b90:	e007      	b.n	8013ba2 <_scanf_float+0x182>
 8013b92:	eb12 0f0b 	cmn.w	r2, fp
 8013b96:	f47f af7b 	bne.w	8013a90 <_scanf_float+0x70>
 8013b9a:	6821      	ldr	r1, [r4, #0]
 8013b9c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013ba0:	6021      	str	r1, [r4, #0]
 8013ba2:	702b      	strb	r3, [r5, #0]
 8013ba4:	3501      	adds	r5, #1
 8013ba6:	e79a      	b.n	8013ade <_scanf_float+0xbe>
 8013ba8:	6821      	ldr	r1, [r4, #0]
 8013baa:	0608      	lsls	r0, r1, #24
 8013bac:	f57f af70 	bpl.w	8013a90 <_scanf_float+0x70>
 8013bb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013bb4:	e7f4      	b.n	8013ba0 <_scanf_float+0x180>
 8013bb6:	2a02      	cmp	r2, #2
 8013bb8:	d047      	beq.n	8013c4a <_scanf_float+0x22a>
 8013bba:	f1bb 0f01 	cmp.w	fp, #1
 8013bbe:	d003      	beq.n	8013bc8 <_scanf_float+0x1a8>
 8013bc0:	f1bb 0f04 	cmp.w	fp, #4
 8013bc4:	f47f af64 	bne.w	8013a90 <_scanf_float+0x70>
 8013bc8:	f10b 0b01 	add.w	fp, fp, #1
 8013bcc:	fa5f fb8b 	uxtb.w	fp, fp
 8013bd0:	e7e7      	b.n	8013ba2 <_scanf_float+0x182>
 8013bd2:	f1bb 0f03 	cmp.w	fp, #3
 8013bd6:	d0f7      	beq.n	8013bc8 <_scanf_float+0x1a8>
 8013bd8:	f1bb 0f05 	cmp.w	fp, #5
 8013bdc:	e7f2      	b.n	8013bc4 <_scanf_float+0x1a4>
 8013bde:	f1bb 0f02 	cmp.w	fp, #2
 8013be2:	f47f af55 	bne.w	8013a90 <_scanf_float+0x70>
 8013be6:	f04f 0b03 	mov.w	fp, #3
 8013bea:	e7da      	b.n	8013ba2 <_scanf_float+0x182>
 8013bec:	f1bb 0f06 	cmp.w	fp, #6
 8013bf0:	f47f af4e 	bne.w	8013a90 <_scanf_float+0x70>
 8013bf4:	f04f 0b07 	mov.w	fp, #7
 8013bf8:	e7d3      	b.n	8013ba2 <_scanf_float+0x182>
 8013bfa:	6821      	ldr	r1, [r4, #0]
 8013bfc:	0588      	lsls	r0, r1, #22
 8013bfe:	f57f af47 	bpl.w	8013a90 <_scanf_float+0x70>
 8013c02:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013c06:	6021      	str	r1, [r4, #0]
 8013c08:	f8cd 9008 	str.w	r9, [sp, #8]
 8013c0c:	e7c9      	b.n	8013ba2 <_scanf_float+0x182>
 8013c0e:	6821      	ldr	r1, [r4, #0]
 8013c10:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013c14:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013c18:	d006      	beq.n	8013c28 <_scanf_float+0x208>
 8013c1a:	0548      	lsls	r0, r1, #21
 8013c1c:	f57f af38 	bpl.w	8013a90 <_scanf_float+0x70>
 8013c20:	f1b9 0f00 	cmp.w	r9, #0
 8013c24:	f43f af3b 	beq.w	8013a9e <_scanf_float+0x7e>
 8013c28:	0588      	lsls	r0, r1, #22
 8013c2a:	bf58      	it	pl
 8013c2c:	9802      	ldrpl	r0, [sp, #8]
 8013c2e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013c32:	bf58      	it	pl
 8013c34:	eba9 0000 	subpl.w	r0, r9, r0
 8013c38:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8013c3c:	bf58      	it	pl
 8013c3e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013c42:	6021      	str	r1, [r4, #0]
 8013c44:	f04f 0900 	mov.w	r9, #0
 8013c48:	e7ab      	b.n	8013ba2 <_scanf_float+0x182>
 8013c4a:	2203      	movs	r2, #3
 8013c4c:	e7a9      	b.n	8013ba2 <_scanf_float+0x182>
 8013c4e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013c52:	9205      	str	r2, [sp, #20]
 8013c54:	4631      	mov	r1, r6
 8013c56:	4638      	mov	r0, r7
 8013c58:	4798      	blx	r3
 8013c5a:	9a05      	ldr	r2, [sp, #20]
 8013c5c:	2800      	cmp	r0, #0
 8013c5e:	f43f af04 	beq.w	8013a6a <_scanf_float+0x4a>
 8013c62:	e715      	b.n	8013a90 <_scanf_float+0x70>
 8013c64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013c68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013c6c:	4632      	mov	r2, r6
 8013c6e:	4638      	mov	r0, r7
 8013c70:	4798      	blx	r3
 8013c72:	6923      	ldr	r3, [r4, #16]
 8013c74:	3b01      	subs	r3, #1
 8013c76:	6123      	str	r3, [r4, #16]
 8013c78:	e715      	b.n	8013aa6 <_scanf_float+0x86>
 8013c7a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013c7e:	2b06      	cmp	r3, #6
 8013c80:	d80a      	bhi.n	8013c98 <_scanf_float+0x278>
 8013c82:	f1bb 0f02 	cmp.w	fp, #2
 8013c86:	d966      	bls.n	8013d56 <_scanf_float+0x336>
 8013c88:	f1ab 0b03 	sub.w	fp, fp, #3
 8013c8c:	fa5f fb8b 	uxtb.w	fp, fp
 8013c90:	eba5 0b0b 	sub.w	fp, r5, fp
 8013c94:	455d      	cmp	r5, fp
 8013c96:	d149      	bne.n	8013d2c <_scanf_float+0x30c>
 8013c98:	6823      	ldr	r3, [r4, #0]
 8013c9a:	05da      	lsls	r2, r3, #23
 8013c9c:	d51f      	bpl.n	8013cde <_scanf_float+0x2be>
 8013c9e:	055b      	lsls	r3, r3, #21
 8013ca0:	d466      	bmi.n	8013d70 <_scanf_float+0x350>
 8013ca2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013ca6:	6923      	ldr	r3, [r4, #16]
 8013ca8:	2965      	cmp	r1, #101	; 0x65
 8013caa:	f103 33ff 	add.w	r3, r3, #4294967295
 8013cae:	f105 3bff 	add.w	fp, r5, #4294967295
 8013cb2:	6123      	str	r3, [r4, #16]
 8013cb4:	d00d      	beq.n	8013cd2 <_scanf_float+0x2b2>
 8013cb6:	2945      	cmp	r1, #69	; 0x45
 8013cb8:	d00b      	beq.n	8013cd2 <_scanf_float+0x2b2>
 8013cba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013cbe:	4632      	mov	r2, r6
 8013cc0:	4638      	mov	r0, r7
 8013cc2:	4798      	blx	r3
 8013cc4:	6923      	ldr	r3, [r4, #16]
 8013cc6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8013cca:	3b01      	subs	r3, #1
 8013ccc:	f1a5 0b02 	sub.w	fp, r5, #2
 8013cd0:	6123      	str	r3, [r4, #16]
 8013cd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013cd6:	4632      	mov	r2, r6
 8013cd8:	4638      	mov	r0, r7
 8013cda:	4798      	blx	r3
 8013cdc:	465d      	mov	r5, fp
 8013cde:	6826      	ldr	r6, [r4, #0]
 8013ce0:	f016 0610 	ands.w	r6, r6, #16
 8013ce4:	d170      	bne.n	8013dc8 <_scanf_float+0x3a8>
 8013ce6:	702e      	strb	r6, [r5, #0]
 8013ce8:	6823      	ldr	r3, [r4, #0]
 8013cea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013cf2:	d140      	bne.n	8013d76 <_scanf_float+0x356>
 8013cf4:	9b02      	ldr	r3, [sp, #8]
 8013cf6:	eba9 0303 	sub.w	r3, r9, r3
 8013cfa:	425a      	negs	r2, r3
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d147      	bne.n	8013d90 <_scanf_float+0x370>
 8013d00:	2200      	movs	r2, #0
 8013d02:	4638      	mov	r0, r7
 8013d04:	4641      	mov	r1, r8
 8013d06:	f000 fecf 	bl	8014aa8 <_strtod_r>
 8013d0a:	6820      	ldr	r0, [r4, #0]
 8013d0c:	f8da 3000 	ldr.w	r3, [sl]
 8013d10:	f010 0f02 	tst.w	r0, #2
 8013d14:	f103 0204 	add.w	r2, r3, #4
 8013d18:	f8ca 2000 	str.w	r2, [sl]
 8013d1c:	d043      	beq.n	8013da6 <_scanf_float+0x386>
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	ed83 0b00 	vstr	d0, [r3]
 8013d24:	68e3      	ldr	r3, [r4, #12]
 8013d26:	3301      	adds	r3, #1
 8013d28:	60e3      	str	r3, [r4, #12]
 8013d2a:	e6c0      	b.n	8013aae <_scanf_float+0x8e>
 8013d2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013d34:	4632      	mov	r2, r6
 8013d36:	4638      	mov	r0, r7
 8013d38:	4798      	blx	r3
 8013d3a:	6923      	ldr	r3, [r4, #16]
 8013d3c:	3b01      	subs	r3, #1
 8013d3e:	6123      	str	r3, [r4, #16]
 8013d40:	e7a8      	b.n	8013c94 <_scanf_float+0x274>
 8013d42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d46:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013d4a:	4632      	mov	r2, r6
 8013d4c:	4638      	mov	r0, r7
 8013d4e:	4798      	blx	r3
 8013d50:	6923      	ldr	r3, [r4, #16]
 8013d52:	3b01      	subs	r3, #1
 8013d54:	6123      	str	r3, [r4, #16]
 8013d56:	4545      	cmp	r5, r8
 8013d58:	d8f3      	bhi.n	8013d42 <_scanf_float+0x322>
 8013d5a:	e6a7      	b.n	8013aac <_scanf_float+0x8c>
 8013d5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d60:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013d64:	4632      	mov	r2, r6
 8013d66:	4638      	mov	r0, r7
 8013d68:	4798      	blx	r3
 8013d6a:	6923      	ldr	r3, [r4, #16]
 8013d6c:	3b01      	subs	r3, #1
 8013d6e:	6123      	str	r3, [r4, #16]
 8013d70:	4545      	cmp	r5, r8
 8013d72:	d8f3      	bhi.n	8013d5c <_scanf_float+0x33c>
 8013d74:	e69a      	b.n	8013aac <_scanf_float+0x8c>
 8013d76:	9b03      	ldr	r3, [sp, #12]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d0c1      	beq.n	8013d00 <_scanf_float+0x2e0>
 8013d7c:	9904      	ldr	r1, [sp, #16]
 8013d7e:	230a      	movs	r3, #10
 8013d80:	4632      	mov	r2, r6
 8013d82:	3101      	adds	r1, #1
 8013d84:	4638      	mov	r0, r7
 8013d86:	f000 ff1b 	bl	8014bc0 <_strtol_r>
 8013d8a:	9b03      	ldr	r3, [sp, #12]
 8013d8c:	9d04      	ldr	r5, [sp, #16]
 8013d8e:	1ac2      	subs	r2, r0, r3
 8013d90:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013d94:	429d      	cmp	r5, r3
 8013d96:	bf28      	it	cs
 8013d98:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013d9c:	490b      	ldr	r1, [pc, #44]	; (8013dcc <_scanf_float+0x3ac>)
 8013d9e:	4628      	mov	r0, r5
 8013da0:	f000 f880 	bl	8013ea4 <siprintf>
 8013da4:	e7ac      	b.n	8013d00 <_scanf_float+0x2e0>
 8013da6:	f010 0004 	ands.w	r0, r0, #4
 8013daa:	d1b8      	bne.n	8013d1e <_scanf_float+0x2fe>
 8013dac:	eeb4 0b40 	vcmp.f64	d0, d0
 8013db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013db4:	681d      	ldr	r5, [r3, #0]
 8013db6:	d704      	bvc.n	8013dc2 <_scanf_float+0x3a2>
 8013db8:	f000 f86e 	bl	8013e98 <nanf>
 8013dbc:	ed85 0a00 	vstr	s0, [r5]
 8013dc0:	e7b0      	b.n	8013d24 <_scanf_float+0x304>
 8013dc2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013dc6:	e7f9      	b.n	8013dbc <_scanf_float+0x39c>
 8013dc8:	2600      	movs	r6, #0
 8013dca:	e670      	b.n	8013aae <_scanf_float+0x8e>
 8013dcc:	0801818c 	.word	0x0801818c

08013dd0 <_puts_r>:
 8013dd0:	b570      	push	{r4, r5, r6, lr}
 8013dd2:	460e      	mov	r6, r1
 8013dd4:	4605      	mov	r5, r0
 8013dd6:	b118      	cbz	r0, 8013de0 <_puts_r+0x10>
 8013dd8:	6983      	ldr	r3, [r0, #24]
 8013dda:	b90b      	cbnz	r3, 8013de0 <_puts_r+0x10>
 8013ddc:	f001 fe8c 	bl	8015af8 <__sinit>
 8013de0:	69ab      	ldr	r3, [r5, #24]
 8013de2:	68ac      	ldr	r4, [r5, #8]
 8013de4:	b913      	cbnz	r3, 8013dec <_puts_r+0x1c>
 8013de6:	4628      	mov	r0, r5
 8013de8:	f001 fe86 	bl	8015af8 <__sinit>
 8013dec:	4b23      	ldr	r3, [pc, #140]	; (8013e7c <_puts_r+0xac>)
 8013dee:	429c      	cmp	r4, r3
 8013df0:	d117      	bne.n	8013e22 <_puts_r+0x52>
 8013df2:	686c      	ldr	r4, [r5, #4]
 8013df4:	89a3      	ldrh	r3, [r4, #12]
 8013df6:	071b      	lsls	r3, r3, #28
 8013df8:	d51d      	bpl.n	8013e36 <_puts_r+0x66>
 8013dfa:	6923      	ldr	r3, [r4, #16]
 8013dfc:	b1db      	cbz	r3, 8013e36 <_puts_r+0x66>
 8013dfe:	3e01      	subs	r6, #1
 8013e00:	68a3      	ldr	r3, [r4, #8]
 8013e02:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013e06:	3b01      	subs	r3, #1
 8013e08:	60a3      	str	r3, [r4, #8]
 8013e0a:	b9e9      	cbnz	r1, 8013e48 <_puts_r+0x78>
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	da2e      	bge.n	8013e6e <_puts_r+0x9e>
 8013e10:	4622      	mov	r2, r4
 8013e12:	210a      	movs	r1, #10
 8013e14:	4628      	mov	r0, r5
 8013e16:	f000 fee5 	bl	8014be4 <__swbuf_r>
 8013e1a:	3001      	adds	r0, #1
 8013e1c:	d011      	beq.n	8013e42 <_puts_r+0x72>
 8013e1e:	200a      	movs	r0, #10
 8013e20:	e011      	b.n	8013e46 <_puts_r+0x76>
 8013e22:	4b17      	ldr	r3, [pc, #92]	; (8013e80 <_puts_r+0xb0>)
 8013e24:	429c      	cmp	r4, r3
 8013e26:	d101      	bne.n	8013e2c <_puts_r+0x5c>
 8013e28:	68ac      	ldr	r4, [r5, #8]
 8013e2a:	e7e3      	b.n	8013df4 <_puts_r+0x24>
 8013e2c:	4b15      	ldr	r3, [pc, #84]	; (8013e84 <_puts_r+0xb4>)
 8013e2e:	429c      	cmp	r4, r3
 8013e30:	bf08      	it	eq
 8013e32:	68ec      	ldreq	r4, [r5, #12]
 8013e34:	e7de      	b.n	8013df4 <_puts_r+0x24>
 8013e36:	4621      	mov	r1, r4
 8013e38:	4628      	mov	r0, r5
 8013e3a:	f000 ff25 	bl	8014c88 <__swsetup_r>
 8013e3e:	2800      	cmp	r0, #0
 8013e40:	d0dd      	beq.n	8013dfe <_puts_r+0x2e>
 8013e42:	f04f 30ff 	mov.w	r0, #4294967295
 8013e46:	bd70      	pop	{r4, r5, r6, pc}
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	da04      	bge.n	8013e56 <_puts_r+0x86>
 8013e4c:	69a2      	ldr	r2, [r4, #24]
 8013e4e:	429a      	cmp	r2, r3
 8013e50:	dc06      	bgt.n	8013e60 <_puts_r+0x90>
 8013e52:	290a      	cmp	r1, #10
 8013e54:	d004      	beq.n	8013e60 <_puts_r+0x90>
 8013e56:	6823      	ldr	r3, [r4, #0]
 8013e58:	1c5a      	adds	r2, r3, #1
 8013e5a:	6022      	str	r2, [r4, #0]
 8013e5c:	7019      	strb	r1, [r3, #0]
 8013e5e:	e7cf      	b.n	8013e00 <_puts_r+0x30>
 8013e60:	4622      	mov	r2, r4
 8013e62:	4628      	mov	r0, r5
 8013e64:	f000 febe 	bl	8014be4 <__swbuf_r>
 8013e68:	3001      	adds	r0, #1
 8013e6a:	d1c9      	bne.n	8013e00 <_puts_r+0x30>
 8013e6c:	e7e9      	b.n	8013e42 <_puts_r+0x72>
 8013e6e:	6823      	ldr	r3, [r4, #0]
 8013e70:	200a      	movs	r0, #10
 8013e72:	1c5a      	adds	r2, r3, #1
 8013e74:	6022      	str	r2, [r4, #0]
 8013e76:	7018      	strb	r0, [r3, #0]
 8013e78:	e7e5      	b.n	8013e46 <_puts_r+0x76>
 8013e7a:	bf00      	nop
 8013e7c:	08018218 	.word	0x08018218
 8013e80:	08018238 	.word	0x08018238
 8013e84:	080181f8 	.word	0x080181f8

08013e88 <puts>:
 8013e88:	4b02      	ldr	r3, [pc, #8]	; (8013e94 <puts+0xc>)
 8013e8a:	4601      	mov	r1, r0
 8013e8c:	6818      	ldr	r0, [r3, #0]
 8013e8e:	f7ff bf9f 	b.w	8013dd0 <_puts_r>
 8013e92:	bf00      	nop
 8013e94:	200001a8 	.word	0x200001a8

08013e98 <nanf>:
 8013e98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013ea0 <nanf+0x8>
 8013e9c:	4770      	bx	lr
 8013e9e:	bf00      	nop
 8013ea0:	7fc00000 	.word	0x7fc00000

08013ea4 <siprintf>:
 8013ea4:	b40e      	push	{r1, r2, r3}
 8013ea6:	b500      	push	{lr}
 8013ea8:	b09c      	sub	sp, #112	; 0x70
 8013eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8013eac:	9002      	str	r0, [sp, #8]
 8013eae:	9006      	str	r0, [sp, #24]
 8013eb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013eb4:	4809      	ldr	r0, [pc, #36]	; (8013edc <siprintf+0x38>)
 8013eb6:	9107      	str	r1, [sp, #28]
 8013eb8:	9104      	str	r1, [sp, #16]
 8013eba:	4909      	ldr	r1, [pc, #36]	; (8013ee0 <siprintf+0x3c>)
 8013ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ec0:	9105      	str	r1, [sp, #20]
 8013ec2:	6800      	ldr	r0, [r0, #0]
 8013ec4:	9301      	str	r3, [sp, #4]
 8013ec6:	a902      	add	r1, sp, #8
 8013ec8:	f002 ff68 	bl	8016d9c <_svfiprintf_r>
 8013ecc:	9b02      	ldr	r3, [sp, #8]
 8013ece:	2200      	movs	r2, #0
 8013ed0:	701a      	strb	r2, [r3, #0]
 8013ed2:	b01c      	add	sp, #112	; 0x70
 8013ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ed8:	b003      	add	sp, #12
 8013eda:	4770      	bx	lr
 8013edc:	200001a8 	.word	0x200001a8
 8013ee0:	ffff0208 	.word	0xffff0208

08013ee4 <sulp>:
 8013ee4:	b570      	push	{r4, r5, r6, lr}
 8013ee6:	4604      	mov	r4, r0
 8013ee8:	460d      	mov	r5, r1
 8013eea:	4616      	mov	r6, r2
 8013eec:	ec45 4b10 	vmov	d0, r4, r5
 8013ef0:	f002 fd10 	bl	8016914 <__ulp>
 8013ef4:	b17e      	cbz	r6, 8013f16 <sulp+0x32>
 8013ef6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013efa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	dd09      	ble.n	8013f16 <sulp+0x32>
 8013f02:	051b      	lsls	r3, r3, #20
 8013f04:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8013f08:	2000      	movs	r0, #0
 8013f0a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8013f0e:	ec41 0b17 	vmov	d7, r0, r1
 8013f12:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013f16:	bd70      	pop	{r4, r5, r6, pc}

08013f18 <_strtod_l>:
 8013f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f1c:	ed2d 8b0c 	vpush	{d8-d13}
 8013f20:	4698      	mov	r8, r3
 8013f22:	b09d      	sub	sp, #116	; 0x74
 8013f24:	2300      	movs	r3, #0
 8013f26:	4604      	mov	r4, r0
 8013f28:	4640      	mov	r0, r8
 8013f2a:	460e      	mov	r6, r1
 8013f2c:	9214      	str	r2, [sp, #80]	; 0x50
 8013f2e:	9318      	str	r3, [sp, #96]	; 0x60
 8013f30:	f002 f995 	bl	801625e <__localeconv_l>
 8013f34:	4681      	mov	r9, r0
 8013f36:	6800      	ldr	r0, [r0, #0]
 8013f38:	f7ec f982 	bl	8000240 <strlen>
 8013f3c:	f04f 0a00 	mov.w	sl, #0
 8013f40:	4607      	mov	r7, r0
 8013f42:	f04f 0b00 	mov.w	fp, #0
 8013f46:	9617      	str	r6, [sp, #92]	; 0x5c
 8013f48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013f4a:	781a      	ldrb	r2, [r3, #0]
 8013f4c:	2a0d      	cmp	r2, #13
 8013f4e:	d834      	bhi.n	8013fba <_strtod_l+0xa2>
 8013f50:	2a09      	cmp	r2, #9
 8013f52:	d238      	bcs.n	8013fc6 <_strtod_l+0xae>
 8013f54:	2a00      	cmp	r2, #0
 8013f56:	d040      	beq.n	8013fda <_strtod_l+0xc2>
 8013f58:	2300      	movs	r3, #0
 8013f5a:	930d      	str	r3, [sp, #52]	; 0x34
 8013f5c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8013f5e:	782b      	ldrb	r3, [r5, #0]
 8013f60:	2b30      	cmp	r3, #48	; 0x30
 8013f62:	f040 80b3 	bne.w	80140cc <_strtod_l+0x1b4>
 8013f66:	786b      	ldrb	r3, [r5, #1]
 8013f68:	2b58      	cmp	r3, #88	; 0x58
 8013f6a:	d001      	beq.n	8013f70 <_strtod_l+0x58>
 8013f6c:	2b78      	cmp	r3, #120	; 0x78
 8013f6e:	d169      	bne.n	8014044 <_strtod_l+0x12c>
 8013f70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f72:	9301      	str	r3, [sp, #4]
 8013f74:	ab18      	add	r3, sp, #96	; 0x60
 8013f76:	9300      	str	r3, [sp, #0]
 8013f78:	f8cd 8008 	str.w	r8, [sp, #8]
 8013f7c:	ab19      	add	r3, sp, #100	; 0x64
 8013f7e:	4a8f      	ldr	r2, [pc, #572]	; (80141bc <_strtod_l+0x2a4>)
 8013f80:	a917      	add	r1, sp, #92	; 0x5c
 8013f82:	4620      	mov	r0, r4
 8013f84:	f001 fe91 	bl	8015caa <__gethex>
 8013f88:	f010 0607 	ands.w	r6, r0, #7
 8013f8c:	4607      	mov	r7, r0
 8013f8e:	d005      	beq.n	8013f9c <_strtod_l+0x84>
 8013f90:	2e06      	cmp	r6, #6
 8013f92:	d12c      	bne.n	8013fee <_strtod_l+0xd6>
 8013f94:	3501      	adds	r5, #1
 8013f96:	2300      	movs	r3, #0
 8013f98:	9517      	str	r5, [sp, #92]	; 0x5c
 8013f9a:	930d      	str	r3, [sp, #52]	; 0x34
 8013f9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	f040 855e 	bne.w	8014a60 <_strtod_l+0xb48>
 8013fa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013fa6:	b1eb      	cbz	r3, 8013fe4 <_strtod_l+0xcc>
 8013fa8:	ec4b ab17 	vmov	d7, sl, fp
 8013fac:	eeb1 0b47 	vneg.f64	d0, d7
 8013fb0:	b01d      	add	sp, #116	; 0x74
 8013fb2:	ecbd 8b0c 	vpop	{d8-d13}
 8013fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fba:	2a2b      	cmp	r2, #43	; 0x2b
 8013fbc:	d015      	beq.n	8013fea <_strtod_l+0xd2>
 8013fbe:	2a2d      	cmp	r2, #45	; 0x2d
 8013fc0:	d004      	beq.n	8013fcc <_strtod_l+0xb4>
 8013fc2:	2a20      	cmp	r2, #32
 8013fc4:	d1c8      	bne.n	8013f58 <_strtod_l+0x40>
 8013fc6:	3301      	adds	r3, #1
 8013fc8:	9317      	str	r3, [sp, #92]	; 0x5c
 8013fca:	e7bd      	b.n	8013f48 <_strtod_l+0x30>
 8013fcc:	2201      	movs	r2, #1
 8013fce:	920d      	str	r2, [sp, #52]	; 0x34
 8013fd0:	1c5a      	adds	r2, r3, #1
 8013fd2:	9217      	str	r2, [sp, #92]	; 0x5c
 8013fd4:	785b      	ldrb	r3, [r3, #1]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d1c0      	bne.n	8013f5c <_strtod_l+0x44>
 8013fda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013fdc:	9617      	str	r6, [sp, #92]	; 0x5c
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	f040 853c 	bne.w	8014a5c <_strtod_l+0xb44>
 8013fe4:	ec4b ab10 	vmov	d0, sl, fp
 8013fe8:	e7e2      	b.n	8013fb0 <_strtod_l+0x98>
 8013fea:	2200      	movs	r2, #0
 8013fec:	e7ef      	b.n	8013fce <_strtod_l+0xb6>
 8013fee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013ff0:	b13a      	cbz	r2, 8014002 <_strtod_l+0xea>
 8013ff2:	2135      	movs	r1, #53	; 0x35
 8013ff4:	a81a      	add	r0, sp, #104	; 0x68
 8013ff6:	f002 fd86 	bl	8016b06 <__copybits>
 8013ffa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013ffc:	4620      	mov	r0, r4
 8013ffe:	f002 f9f1 	bl	80163e4 <_Bfree>
 8014002:	3e01      	subs	r6, #1
 8014004:	2e04      	cmp	r6, #4
 8014006:	d806      	bhi.n	8014016 <_strtod_l+0xfe>
 8014008:	e8df f006 	tbb	[pc, r6]
 801400c:	1714030a 	.word	0x1714030a
 8014010:	0a          	.byte	0x0a
 8014011:	00          	.byte	0x00
 8014012:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8014016:	073b      	lsls	r3, r7, #28
 8014018:	d5c0      	bpl.n	8013f9c <_strtod_l+0x84>
 801401a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801401e:	e7bd      	b.n	8013f9c <_strtod_l+0x84>
 8014020:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8014024:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014026:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801402a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801402e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014032:	e7f0      	b.n	8014016 <_strtod_l+0xfe>
 8014034:	f8df b188 	ldr.w	fp, [pc, #392]	; 80141c0 <_strtod_l+0x2a8>
 8014038:	e7ed      	b.n	8014016 <_strtod_l+0xfe>
 801403a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801403e:	f04f 3aff 	mov.w	sl, #4294967295
 8014042:	e7e8      	b.n	8014016 <_strtod_l+0xfe>
 8014044:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014046:	1c5a      	adds	r2, r3, #1
 8014048:	9217      	str	r2, [sp, #92]	; 0x5c
 801404a:	785b      	ldrb	r3, [r3, #1]
 801404c:	2b30      	cmp	r3, #48	; 0x30
 801404e:	d0f9      	beq.n	8014044 <_strtod_l+0x12c>
 8014050:	2b00      	cmp	r3, #0
 8014052:	d0a3      	beq.n	8013f9c <_strtod_l+0x84>
 8014054:	2301      	movs	r3, #1
 8014056:	930a      	str	r3, [sp, #40]	; 0x28
 8014058:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801405a:	930c      	str	r3, [sp, #48]	; 0x30
 801405c:	2300      	movs	r3, #0
 801405e:	9306      	str	r3, [sp, #24]
 8014060:	9308      	str	r3, [sp, #32]
 8014062:	461d      	mov	r5, r3
 8014064:	220a      	movs	r2, #10
 8014066:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014068:	f890 8000 	ldrb.w	r8, [r0]
 801406c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8014070:	b2d9      	uxtb	r1, r3
 8014072:	2909      	cmp	r1, #9
 8014074:	d92c      	bls.n	80140d0 <_strtod_l+0x1b8>
 8014076:	463a      	mov	r2, r7
 8014078:	f8d9 1000 	ldr.w	r1, [r9]
 801407c:	f002 ffd9 	bl	8017032 <strncmp>
 8014080:	2800      	cmp	r0, #0
 8014082:	d035      	beq.n	80140f0 <_strtod_l+0x1d8>
 8014084:	2000      	movs	r0, #0
 8014086:	4642      	mov	r2, r8
 8014088:	462b      	mov	r3, r5
 801408a:	4601      	mov	r1, r0
 801408c:	9004      	str	r0, [sp, #16]
 801408e:	2a65      	cmp	r2, #101	; 0x65
 8014090:	d001      	beq.n	8014096 <_strtod_l+0x17e>
 8014092:	2a45      	cmp	r2, #69	; 0x45
 8014094:	d117      	bne.n	80140c6 <_strtod_l+0x1ae>
 8014096:	b923      	cbnz	r3, 80140a2 <_strtod_l+0x18a>
 8014098:	b910      	cbnz	r0, 80140a0 <_strtod_l+0x188>
 801409a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801409c:	2b00      	cmp	r3, #0
 801409e:	d09c      	beq.n	8013fda <_strtod_l+0xc2>
 80140a0:	2300      	movs	r3, #0
 80140a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80140a4:	1c72      	adds	r2, r6, #1
 80140a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80140a8:	7872      	ldrb	r2, [r6, #1]
 80140aa:	2a2b      	cmp	r2, #43	; 0x2b
 80140ac:	f000 8082 	beq.w	80141b4 <_strtod_l+0x29c>
 80140b0:	2a2d      	cmp	r2, #45	; 0x2d
 80140b2:	d079      	beq.n	80141a8 <_strtod_l+0x290>
 80140b4:	f04f 0e00 	mov.w	lr, #0
 80140b8:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80140bc:	f1bc 0f09 	cmp.w	ip, #9
 80140c0:	f240 8086 	bls.w	80141d0 <_strtod_l+0x2b8>
 80140c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80140c6:	f04f 0800 	mov.w	r8, #0
 80140ca:	e0a8      	b.n	801421e <_strtod_l+0x306>
 80140cc:	2300      	movs	r3, #0
 80140ce:	e7c2      	b.n	8014056 <_strtod_l+0x13e>
 80140d0:	2d08      	cmp	r5, #8
 80140d2:	bfd5      	itete	le
 80140d4:	9908      	ldrle	r1, [sp, #32]
 80140d6:	9906      	ldrgt	r1, [sp, #24]
 80140d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80140dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80140e0:	f100 0001 	add.w	r0, r0, #1
 80140e4:	bfd4      	ite	le
 80140e6:	9308      	strle	r3, [sp, #32]
 80140e8:	9306      	strgt	r3, [sp, #24]
 80140ea:	3501      	adds	r5, #1
 80140ec:	9017      	str	r0, [sp, #92]	; 0x5c
 80140ee:	e7ba      	b.n	8014066 <_strtod_l+0x14e>
 80140f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80140f2:	19da      	adds	r2, r3, r7
 80140f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80140f6:	5dda      	ldrb	r2, [r3, r7]
 80140f8:	2d00      	cmp	r5, #0
 80140fa:	d038      	beq.n	801416e <_strtod_l+0x256>
 80140fc:	4601      	mov	r1, r0
 80140fe:	462b      	mov	r3, r5
 8014100:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8014104:	2f09      	cmp	r7, #9
 8014106:	d913      	bls.n	8014130 <_strtod_l+0x218>
 8014108:	2701      	movs	r7, #1
 801410a:	9704      	str	r7, [sp, #16]
 801410c:	e7bf      	b.n	801408e <_strtod_l+0x176>
 801410e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014110:	1c5a      	adds	r2, r3, #1
 8014112:	9217      	str	r2, [sp, #92]	; 0x5c
 8014114:	785a      	ldrb	r2, [r3, #1]
 8014116:	3001      	adds	r0, #1
 8014118:	2a30      	cmp	r2, #48	; 0x30
 801411a:	d0f8      	beq.n	801410e <_strtod_l+0x1f6>
 801411c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014120:	2b08      	cmp	r3, #8
 8014122:	f200 84a2 	bhi.w	8014a6a <_strtod_l+0xb52>
 8014126:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014128:	930c      	str	r3, [sp, #48]	; 0x30
 801412a:	4601      	mov	r1, r0
 801412c:	2000      	movs	r0, #0
 801412e:	4603      	mov	r3, r0
 8014130:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8014134:	f100 0701 	add.w	r7, r0, #1
 8014138:	d013      	beq.n	8014162 <_strtod_l+0x24a>
 801413a:	4439      	add	r1, r7
 801413c:	eb00 0e03 	add.w	lr, r0, r3
 8014140:	461f      	mov	r7, r3
 8014142:	f04f 0c0a 	mov.w	ip, #10
 8014146:	45be      	cmp	lr, r7
 8014148:	d113      	bne.n	8014172 <_strtod_l+0x25a>
 801414a:	181f      	adds	r7, r3, r0
 801414c:	2f08      	cmp	r7, #8
 801414e:	f103 0301 	add.w	r3, r3, #1
 8014152:	4403      	add	r3, r0
 8014154:	dc1d      	bgt.n	8014192 <_strtod_l+0x27a>
 8014156:	9a08      	ldr	r2, [sp, #32]
 8014158:	200a      	movs	r0, #10
 801415a:	fb00 8202 	mla	r2, r0, r2, r8
 801415e:	9208      	str	r2, [sp, #32]
 8014160:	2700      	movs	r7, #0
 8014162:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014164:	1c50      	adds	r0, r2, #1
 8014166:	9017      	str	r0, [sp, #92]	; 0x5c
 8014168:	7852      	ldrb	r2, [r2, #1]
 801416a:	4638      	mov	r0, r7
 801416c:	e7c8      	b.n	8014100 <_strtod_l+0x1e8>
 801416e:	4628      	mov	r0, r5
 8014170:	e7d2      	b.n	8014118 <_strtod_l+0x200>
 8014172:	2f08      	cmp	r7, #8
 8014174:	f107 0701 	add.w	r7, r7, #1
 8014178:	dc04      	bgt.n	8014184 <_strtod_l+0x26c>
 801417a:	9a08      	ldr	r2, [sp, #32]
 801417c:	fb0c f202 	mul.w	r2, ip, r2
 8014180:	9208      	str	r2, [sp, #32]
 8014182:	e7e0      	b.n	8014146 <_strtod_l+0x22e>
 8014184:	2f10      	cmp	r7, #16
 8014186:	bfde      	ittt	le
 8014188:	9a06      	ldrle	r2, [sp, #24]
 801418a:	fb0c f202 	mulle.w	r2, ip, r2
 801418e:	9206      	strle	r2, [sp, #24]
 8014190:	e7d9      	b.n	8014146 <_strtod_l+0x22e>
 8014192:	2b10      	cmp	r3, #16
 8014194:	bfdf      	itttt	le
 8014196:	9a06      	ldrle	r2, [sp, #24]
 8014198:	200a      	movle	r0, #10
 801419a:	fb00 8202 	mlale	r2, r0, r2, r8
 801419e:	9206      	strle	r2, [sp, #24]
 80141a0:	e7de      	b.n	8014160 <_strtod_l+0x248>
 80141a2:	2301      	movs	r3, #1
 80141a4:	9304      	str	r3, [sp, #16]
 80141a6:	e777      	b.n	8014098 <_strtod_l+0x180>
 80141a8:	f04f 0e01 	mov.w	lr, #1
 80141ac:	1cb2      	adds	r2, r6, #2
 80141ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80141b0:	78b2      	ldrb	r2, [r6, #2]
 80141b2:	e781      	b.n	80140b8 <_strtod_l+0x1a0>
 80141b4:	f04f 0e00 	mov.w	lr, #0
 80141b8:	e7f8      	b.n	80141ac <_strtod_l+0x294>
 80141ba:	bf00      	nop
 80141bc:	08018194 	.word	0x08018194
 80141c0:	7ff00000 	.word	0x7ff00000
 80141c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80141c6:	f102 0c01 	add.w	ip, r2, #1
 80141ca:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80141ce:	7852      	ldrb	r2, [r2, #1]
 80141d0:	2a30      	cmp	r2, #48	; 0x30
 80141d2:	d0f7      	beq.n	80141c4 <_strtod_l+0x2ac>
 80141d4:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 80141d8:	f1bc 0f08 	cmp.w	ip, #8
 80141dc:	f63f af73 	bhi.w	80140c6 <_strtod_l+0x1ae>
 80141e0:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 80141e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80141e6:	920e      	str	r2, [sp, #56]	; 0x38
 80141e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80141ea:	f102 0c01 	add.w	ip, r2, #1
 80141ee:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80141f2:	7852      	ldrb	r2, [r2, #1]
 80141f4:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 80141f8:	f1b9 0f09 	cmp.w	r9, #9
 80141fc:	d939      	bls.n	8014272 <_strtod_l+0x35a>
 80141fe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8014200:	ebac 0c07 	sub.w	ip, ip, r7
 8014204:	f1bc 0f08 	cmp.w	ip, #8
 8014208:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 801420c:	dc37      	bgt.n	801427e <_strtod_l+0x366>
 801420e:	45e0      	cmp	r8, ip
 8014210:	bfa8      	it	ge
 8014212:	46e0      	movge	r8, ip
 8014214:	f1be 0f00 	cmp.w	lr, #0
 8014218:	d001      	beq.n	801421e <_strtod_l+0x306>
 801421a:	f1c8 0800 	rsb	r8, r8, #0
 801421e:	2b00      	cmp	r3, #0
 8014220:	d151      	bne.n	80142c6 <_strtod_l+0x3ae>
 8014222:	2800      	cmp	r0, #0
 8014224:	f47f aeba 	bne.w	8013f9c <_strtod_l+0x84>
 8014228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801422a:	2b00      	cmp	r3, #0
 801422c:	f47f aeb6 	bne.w	8013f9c <_strtod_l+0x84>
 8014230:	9b04      	ldr	r3, [sp, #16]
 8014232:	2b00      	cmp	r3, #0
 8014234:	f47f aed1 	bne.w	8013fda <_strtod_l+0xc2>
 8014238:	2a4e      	cmp	r2, #78	; 0x4e
 801423a:	d027      	beq.n	801428c <_strtod_l+0x374>
 801423c:	dc21      	bgt.n	8014282 <_strtod_l+0x36a>
 801423e:	2a49      	cmp	r2, #73	; 0x49
 8014240:	f47f aecb 	bne.w	8013fda <_strtod_l+0xc2>
 8014244:	499a      	ldr	r1, [pc, #616]	; (80144b0 <_strtod_l+0x598>)
 8014246:	a817      	add	r0, sp, #92	; 0x5c
 8014248:	f001 ff62 	bl	8016110 <__match>
 801424c:	2800      	cmp	r0, #0
 801424e:	f43f aec4 	beq.w	8013fda <_strtod_l+0xc2>
 8014252:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014254:	4997      	ldr	r1, [pc, #604]	; (80144b4 <_strtod_l+0x59c>)
 8014256:	3b01      	subs	r3, #1
 8014258:	a817      	add	r0, sp, #92	; 0x5c
 801425a:	9317      	str	r3, [sp, #92]	; 0x5c
 801425c:	f001 ff58 	bl	8016110 <__match>
 8014260:	b910      	cbnz	r0, 8014268 <_strtod_l+0x350>
 8014262:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014264:	3301      	adds	r3, #1
 8014266:	9317      	str	r3, [sp, #92]	; 0x5c
 8014268:	f8df b260 	ldr.w	fp, [pc, #608]	; 80144cc <_strtod_l+0x5b4>
 801426c:	f04f 0a00 	mov.w	sl, #0
 8014270:	e694      	b.n	8013f9c <_strtod_l+0x84>
 8014272:	270a      	movs	r7, #10
 8014274:	fb07 2808 	mla	r8, r7, r8, r2
 8014278:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 801427c:	e7b4      	b.n	80141e8 <_strtod_l+0x2d0>
 801427e:	46e0      	mov	r8, ip
 8014280:	e7c8      	b.n	8014214 <_strtod_l+0x2fc>
 8014282:	2a69      	cmp	r2, #105	; 0x69
 8014284:	d0de      	beq.n	8014244 <_strtod_l+0x32c>
 8014286:	2a6e      	cmp	r2, #110	; 0x6e
 8014288:	f47f aea7 	bne.w	8013fda <_strtod_l+0xc2>
 801428c:	498a      	ldr	r1, [pc, #552]	; (80144b8 <_strtod_l+0x5a0>)
 801428e:	a817      	add	r0, sp, #92	; 0x5c
 8014290:	f001 ff3e 	bl	8016110 <__match>
 8014294:	2800      	cmp	r0, #0
 8014296:	f43f aea0 	beq.w	8013fda <_strtod_l+0xc2>
 801429a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801429c:	781b      	ldrb	r3, [r3, #0]
 801429e:	2b28      	cmp	r3, #40	; 0x28
 80142a0:	d10e      	bne.n	80142c0 <_strtod_l+0x3a8>
 80142a2:	aa1a      	add	r2, sp, #104	; 0x68
 80142a4:	4985      	ldr	r1, [pc, #532]	; (80144bc <_strtod_l+0x5a4>)
 80142a6:	a817      	add	r0, sp, #92	; 0x5c
 80142a8:	f001 ff46 	bl	8016138 <__hexnan>
 80142ac:	2805      	cmp	r0, #5
 80142ae:	d107      	bne.n	80142c0 <_strtod_l+0x3a8>
 80142b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80142b2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80142b6:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80142ba:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80142be:	e66d      	b.n	8013f9c <_strtod_l+0x84>
 80142c0:	f8df b20c 	ldr.w	fp, [pc, #524]	; 80144d0 <_strtod_l+0x5b8>
 80142c4:	e7d2      	b.n	801426c <_strtod_l+0x354>
 80142c6:	eddd 7a08 	vldr	s15, [sp, #32]
 80142ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80142ce:	eba8 0201 	sub.w	r2, r8, r1
 80142d2:	2d00      	cmp	r5, #0
 80142d4:	bf08      	it	eq
 80142d6:	461d      	moveq	r5, r3
 80142d8:	2b10      	cmp	r3, #16
 80142da:	9204      	str	r2, [sp, #16]
 80142dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80142e0:	461a      	mov	r2, r3
 80142e2:	bfa8      	it	ge
 80142e4:	2210      	movge	r2, #16
 80142e6:	2b09      	cmp	r3, #9
 80142e8:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80142ec:	dc14      	bgt.n	8014318 <_strtod_l+0x400>
 80142ee:	9904      	ldr	r1, [sp, #16]
 80142f0:	2900      	cmp	r1, #0
 80142f2:	f43f ae53 	beq.w	8013f9c <_strtod_l+0x84>
 80142f6:	9904      	ldr	r1, [sp, #16]
 80142f8:	dd72      	ble.n	80143e0 <_strtod_l+0x4c8>
 80142fa:	2916      	cmp	r1, #22
 80142fc:	dc5a      	bgt.n	80143b4 <_strtod_l+0x49c>
 80142fe:	4970      	ldr	r1, [pc, #448]	; (80144c0 <_strtod_l+0x5a8>)
 8014300:	9b04      	ldr	r3, [sp, #16]
 8014302:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014306:	ed91 7b00 	vldr	d7, [r1]
 801430a:	ec4b ab16 	vmov	d6, sl, fp
 801430e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014312:	ec5b ab17 	vmov	sl, fp, d7
 8014316:	e641      	b.n	8013f9c <_strtod_l+0x84>
 8014318:	4969      	ldr	r1, [pc, #420]	; (80144c0 <_strtod_l+0x5a8>)
 801431a:	eddd 7a06 	vldr	s15, [sp, #24]
 801431e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014322:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8014326:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801432a:	2b0f      	cmp	r3, #15
 801432c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014330:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014334:	ec5b ab17 	vmov	sl, fp, d7
 8014338:	ddd9      	ble.n	80142ee <_strtod_l+0x3d6>
 801433a:	9904      	ldr	r1, [sp, #16]
 801433c:	1a9a      	subs	r2, r3, r2
 801433e:	440a      	add	r2, r1
 8014340:	2a00      	cmp	r2, #0
 8014342:	f340 8096 	ble.w	8014472 <_strtod_l+0x55a>
 8014346:	f012 000f 	ands.w	r0, r2, #15
 801434a:	d00a      	beq.n	8014362 <_strtod_l+0x44a>
 801434c:	495c      	ldr	r1, [pc, #368]	; (80144c0 <_strtod_l+0x5a8>)
 801434e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014352:	ed91 7b00 	vldr	d7, [r1]
 8014356:	ec4b ab16 	vmov	d6, sl, fp
 801435a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801435e:	ec5b ab17 	vmov	sl, fp, d7
 8014362:	f032 020f 	bics.w	r2, r2, #15
 8014366:	d072      	beq.n	801444e <_strtod_l+0x536>
 8014368:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801436c:	dd45      	ble.n	80143fa <_strtod_l+0x4e2>
 801436e:	2500      	movs	r5, #0
 8014370:	46a8      	mov	r8, r5
 8014372:	9506      	str	r5, [sp, #24]
 8014374:	46a9      	mov	r9, r5
 8014376:	2322      	movs	r3, #34	; 0x22
 8014378:	f8df b150 	ldr.w	fp, [pc, #336]	; 80144cc <_strtod_l+0x5b4>
 801437c:	6023      	str	r3, [r4, #0]
 801437e:	f04f 0a00 	mov.w	sl, #0
 8014382:	9b06      	ldr	r3, [sp, #24]
 8014384:	2b00      	cmp	r3, #0
 8014386:	f43f ae09 	beq.w	8013f9c <_strtod_l+0x84>
 801438a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801438c:	4620      	mov	r0, r4
 801438e:	f002 f829 	bl	80163e4 <_Bfree>
 8014392:	4649      	mov	r1, r9
 8014394:	4620      	mov	r0, r4
 8014396:	f002 f825 	bl	80163e4 <_Bfree>
 801439a:	4641      	mov	r1, r8
 801439c:	4620      	mov	r0, r4
 801439e:	f002 f821 	bl	80163e4 <_Bfree>
 80143a2:	9906      	ldr	r1, [sp, #24]
 80143a4:	4620      	mov	r0, r4
 80143a6:	f002 f81d 	bl	80163e4 <_Bfree>
 80143aa:	4629      	mov	r1, r5
 80143ac:	4620      	mov	r0, r4
 80143ae:	f002 f819 	bl	80163e4 <_Bfree>
 80143b2:	e5f3      	b.n	8013f9c <_strtod_l+0x84>
 80143b4:	9804      	ldr	r0, [sp, #16]
 80143b6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80143ba:	4281      	cmp	r1, r0
 80143bc:	dbbd      	blt.n	801433a <_strtod_l+0x422>
 80143be:	4a40      	ldr	r2, [pc, #256]	; (80144c0 <_strtod_l+0x5a8>)
 80143c0:	f1c3 030f 	rsb	r3, r3, #15
 80143c4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80143c8:	ed91 7b00 	vldr	d7, [r1]
 80143cc:	ec4b ab16 	vmov	d6, sl, fp
 80143d0:	1ac3      	subs	r3, r0, r3
 80143d2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80143d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80143da:	ed92 6b00 	vldr	d6, [r2]
 80143de:	e796      	b.n	801430e <_strtod_l+0x3f6>
 80143e0:	3116      	adds	r1, #22
 80143e2:	dbaa      	blt.n	801433a <_strtod_l+0x422>
 80143e4:	4936      	ldr	r1, [pc, #216]	; (80144c0 <_strtod_l+0x5a8>)
 80143e6:	9b04      	ldr	r3, [sp, #16]
 80143e8:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 80143ec:	ed91 7b00 	vldr	d7, [r1]
 80143f0:	ec4b ab16 	vmov	d6, sl, fp
 80143f4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80143f8:	e78b      	b.n	8014312 <_strtod_l+0x3fa>
 80143fa:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80143fe:	2000      	movs	r0, #0
 8014400:	4e30      	ldr	r6, [pc, #192]	; (80144c4 <_strtod_l+0x5ac>)
 8014402:	1112      	asrs	r2, r2, #4
 8014404:	4601      	mov	r1, r0
 8014406:	2a01      	cmp	r2, #1
 8014408:	dc23      	bgt.n	8014452 <_strtod_l+0x53a>
 801440a:	b108      	cbz	r0, 8014410 <_strtod_l+0x4f8>
 801440c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8014410:	4a2c      	ldr	r2, [pc, #176]	; (80144c4 <_strtod_l+0x5ac>)
 8014412:	482d      	ldr	r0, [pc, #180]	; (80144c8 <_strtod_l+0x5b0>)
 8014414:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8014418:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801441c:	ed91 7b00 	vldr	d7, [r1]
 8014420:	ec4b ab16 	vmov	d6, sl, fp
 8014424:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014428:	ed8d 7b06 	vstr	d7, [sp, #24]
 801442c:	9907      	ldr	r1, [sp, #28]
 801442e:	4a27      	ldr	r2, [pc, #156]	; (80144cc <_strtod_l+0x5b4>)
 8014430:	400a      	ands	r2, r1
 8014432:	4282      	cmp	r2, r0
 8014434:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8014438:	d899      	bhi.n	801436e <_strtod_l+0x456>
 801443a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801443e:	4282      	cmp	r2, r0
 8014440:	bf86      	itte	hi
 8014442:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 80144d4 <_strtod_l+0x5bc>
 8014446:	f04f 3aff 	movhi.w	sl, #4294967295
 801444a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 801444e:	2700      	movs	r7, #0
 8014450:	e070      	b.n	8014534 <_strtod_l+0x61c>
 8014452:	07d7      	lsls	r7, r2, #31
 8014454:	d50a      	bpl.n	801446c <_strtod_l+0x554>
 8014456:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 801445a:	ed90 7b00 	vldr	d7, [r0]
 801445e:	ed9d 6b06 	vldr	d6, [sp, #24]
 8014462:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014466:	ed8d 7b06 	vstr	d7, [sp, #24]
 801446a:	2001      	movs	r0, #1
 801446c:	3101      	adds	r1, #1
 801446e:	1052      	asrs	r2, r2, #1
 8014470:	e7c9      	b.n	8014406 <_strtod_l+0x4ee>
 8014472:	d0ec      	beq.n	801444e <_strtod_l+0x536>
 8014474:	4252      	negs	r2, r2
 8014476:	f012 000f 	ands.w	r0, r2, #15
 801447a:	d00a      	beq.n	8014492 <_strtod_l+0x57a>
 801447c:	4910      	ldr	r1, [pc, #64]	; (80144c0 <_strtod_l+0x5a8>)
 801447e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014482:	ed91 7b00 	vldr	d7, [r1]
 8014486:	ec4b ab16 	vmov	d6, sl, fp
 801448a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801448e:	ec5b ab17 	vmov	sl, fp, d7
 8014492:	1112      	asrs	r2, r2, #4
 8014494:	d0db      	beq.n	801444e <_strtod_l+0x536>
 8014496:	2a1f      	cmp	r2, #31
 8014498:	dd1e      	ble.n	80144d8 <_strtod_l+0x5c0>
 801449a:	2500      	movs	r5, #0
 801449c:	46a8      	mov	r8, r5
 801449e:	9506      	str	r5, [sp, #24]
 80144a0:	46a9      	mov	r9, r5
 80144a2:	2322      	movs	r3, #34	; 0x22
 80144a4:	f04f 0a00 	mov.w	sl, #0
 80144a8:	f04f 0b00 	mov.w	fp, #0
 80144ac:	6023      	str	r3, [r4, #0]
 80144ae:	e768      	b.n	8014382 <_strtod_l+0x46a>
 80144b0:	0801815d 	.word	0x0801815d
 80144b4:	080181eb 	.word	0x080181eb
 80144b8:	08018165 	.word	0x08018165
 80144bc:	080181a8 	.word	0x080181a8
 80144c0:	08018290 	.word	0x08018290
 80144c4:	08018268 	.word	0x08018268
 80144c8:	7ca00000 	.word	0x7ca00000
 80144cc:	7ff00000 	.word	0x7ff00000
 80144d0:	fff80000 	.word	0xfff80000
 80144d4:	7fefffff 	.word	0x7fefffff
 80144d8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80144dc:	f012 0710 	ands.w	r7, r2, #16
 80144e0:	49ab      	ldr	r1, [pc, #684]	; (8014790 <_strtod_l+0x878>)
 80144e2:	bf18      	it	ne
 80144e4:	276a      	movne	r7, #106	; 0x6a
 80144e6:	2000      	movs	r0, #0
 80144e8:	2a00      	cmp	r2, #0
 80144ea:	f300 8113 	bgt.w	8014714 <_strtod_l+0x7fc>
 80144ee:	b108      	cbz	r0, 80144f4 <_strtod_l+0x5dc>
 80144f0:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80144f4:	b1bf      	cbz	r7, 8014526 <_strtod_l+0x60e>
 80144f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80144fa:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80144fe:	2a00      	cmp	r2, #0
 8014500:	4659      	mov	r1, fp
 8014502:	dd10      	ble.n	8014526 <_strtod_l+0x60e>
 8014504:	2a1f      	cmp	r2, #31
 8014506:	f340 8113 	ble.w	8014730 <_strtod_l+0x818>
 801450a:	2a34      	cmp	r2, #52	; 0x34
 801450c:	bfde      	ittt	le
 801450e:	3a20      	suble	r2, #32
 8014510:	f04f 30ff 	movle.w	r0, #4294967295
 8014514:	fa00 f202 	lslle.w	r2, r0, r2
 8014518:	f04f 0a00 	mov.w	sl, #0
 801451c:	bfcc      	ite	gt
 801451e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014522:	ea02 0b01 	andle.w	fp, r2, r1
 8014526:	ec4b ab17 	vmov	d7, sl, fp
 801452a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801452e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014532:	d0b2      	beq.n	801449a <_strtod_l+0x582>
 8014534:	9a08      	ldr	r2, [sp, #32]
 8014536:	9200      	str	r2, [sp, #0]
 8014538:	990c      	ldr	r1, [sp, #48]	; 0x30
 801453a:	462a      	mov	r2, r5
 801453c:	4620      	mov	r0, r4
 801453e:	f001 ffa3 	bl	8016488 <__s2b>
 8014542:	9006      	str	r0, [sp, #24]
 8014544:	2800      	cmp	r0, #0
 8014546:	f43f af12 	beq.w	801436e <_strtod_l+0x456>
 801454a:	9a04      	ldr	r2, [sp, #16]
 801454c:	9b04      	ldr	r3, [sp, #16]
 801454e:	2a00      	cmp	r2, #0
 8014550:	f1c3 0300 	rsb	r3, r3, #0
 8014554:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8014778 <_strtod_l+0x860>
 8014558:	bfa8      	it	ge
 801455a:	2300      	movge	r3, #0
 801455c:	ed9f ab88 	vldr	d10, [pc, #544]	; 8014780 <_strtod_l+0x868>
 8014560:	ed9f bb89 	vldr	d11, [pc, #548]	; 8014788 <_strtod_l+0x870>
 8014564:	930e      	str	r3, [sp, #56]	; 0x38
 8014566:	2500      	movs	r5, #0
 8014568:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801456c:	9310      	str	r3, [sp, #64]	; 0x40
 801456e:	46a8      	mov	r8, r5
 8014570:	9b06      	ldr	r3, [sp, #24]
 8014572:	4620      	mov	r0, r4
 8014574:	6859      	ldr	r1, [r3, #4]
 8014576:	f001 ff01 	bl	801637c <_Balloc>
 801457a:	4681      	mov	r9, r0
 801457c:	2800      	cmp	r0, #0
 801457e:	f43f aefa 	beq.w	8014376 <_strtod_l+0x45e>
 8014582:	9b06      	ldr	r3, [sp, #24]
 8014584:	691a      	ldr	r2, [r3, #16]
 8014586:	3202      	adds	r2, #2
 8014588:	f103 010c 	add.w	r1, r3, #12
 801458c:	0092      	lsls	r2, r2, #2
 801458e:	300c      	adds	r0, #12
 8014590:	f7fe fdf8 	bl	8013184 <memcpy>
 8014594:	aa1a      	add	r2, sp, #104	; 0x68
 8014596:	a919      	add	r1, sp, #100	; 0x64
 8014598:	ec4b ab10 	vmov	d0, sl, fp
 801459c:	4620      	mov	r0, r4
 801459e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80145a2:	f002 fa2d 	bl	8016a00 <__d2b>
 80145a6:	9018      	str	r0, [sp, #96]	; 0x60
 80145a8:	2800      	cmp	r0, #0
 80145aa:	f43f aee4 	beq.w	8014376 <_strtod_l+0x45e>
 80145ae:	2101      	movs	r1, #1
 80145b0:	4620      	mov	r0, r4
 80145b2:	f001 fff5 	bl	80165a0 <__i2b>
 80145b6:	4680      	mov	r8, r0
 80145b8:	2800      	cmp	r0, #0
 80145ba:	f43f aedc 	beq.w	8014376 <_strtod_l+0x45e>
 80145be:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80145c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80145c2:	2e00      	cmp	r6, #0
 80145c4:	bfb1      	iteee	lt
 80145c6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 80145c8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80145ca:	9810      	ldrge	r0, [sp, #64]	; 0x40
 80145cc:	18f3      	addge	r3, r6, r3
 80145ce:	bfba      	itte	lt
 80145d0:	1b98      	sublt	r0, r3, r6
 80145d2:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80145d4:	9308      	strge	r3, [sp, #32]
 80145d6:	eba6 0607 	sub.w	r6, r6, r7
 80145da:	bfb8      	it	lt
 80145dc:	9308      	strlt	r3, [sp, #32]
 80145de:	4416      	add	r6, r2
 80145e0:	4b6c      	ldr	r3, [pc, #432]	; (8014794 <_strtod_l+0x87c>)
 80145e2:	3e01      	subs	r6, #1
 80145e4:	429e      	cmp	r6, r3
 80145e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80145ea:	f280 80b4 	bge.w	8014756 <_strtod_l+0x83e>
 80145ee:	1b9b      	subs	r3, r3, r6
 80145f0:	2b1f      	cmp	r3, #31
 80145f2:	eba2 0203 	sub.w	r2, r2, r3
 80145f6:	f04f 0101 	mov.w	r1, #1
 80145fa:	f300 80a0 	bgt.w	801473e <_strtod_l+0x826>
 80145fe:	fa01 f303 	lsl.w	r3, r1, r3
 8014602:	9311      	str	r3, [sp, #68]	; 0x44
 8014604:	2300      	movs	r3, #0
 8014606:	930f      	str	r3, [sp, #60]	; 0x3c
 8014608:	9b08      	ldr	r3, [sp, #32]
 801460a:	4413      	add	r3, r2
 801460c:	4402      	add	r2, r0
 801460e:	18be      	adds	r6, r7, r2
 8014610:	9a08      	ldr	r2, [sp, #32]
 8014612:	429a      	cmp	r2, r3
 8014614:	bfa8      	it	ge
 8014616:	461a      	movge	r2, r3
 8014618:	42b2      	cmp	r2, r6
 801461a:	bfa8      	it	ge
 801461c:	4632      	movge	r2, r6
 801461e:	2a00      	cmp	r2, #0
 8014620:	dd04      	ble.n	801462c <_strtod_l+0x714>
 8014622:	9908      	ldr	r1, [sp, #32]
 8014624:	1a9b      	subs	r3, r3, r2
 8014626:	1ab6      	subs	r6, r6, r2
 8014628:	1a8a      	subs	r2, r1, r2
 801462a:	9208      	str	r2, [sp, #32]
 801462c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801462e:	b1c2      	cbz	r2, 8014662 <_strtod_l+0x74a>
 8014630:	4641      	mov	r1, r8
 8014632:	4620      	mov	r0, r4
 8014634:	9315      	str	r3, [sp, #84]	; 0x54
 8014636:	f002 f853 	bl	80166e0 <__pow5mult>
 801463a:	4680      	mov	r8, r0
 801463c:	2800      	cmp	r0, #0
 801463e:	f43f ae9a 	beq.w	8014376 <_strtod_l+0x45e>
 8014642:	4601      	mov	r1, r0
 8014644:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014646:	4620      	mov	r0, r4
 8014648:	f001 ffb3 	bl	80165b2 <__multiply>
 801464c:	900c      	str	r0, [sp, #48]	; 0x30
 801464e:	2800      	cmp	r0, #0
 8014650:	f43f ae91 	beq.w	8014376 <_strtod_l+0x45e>
 8014654:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014656:	4620      	mov	r0, r4
 8014658:	f001 fec4 	bl	80163e4 <_Bfree>
 801465c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801465e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014660:	9218      	str	r2, [sp, #96]	; 0x60
 8014662:	2b00      	cmp	r3, #0
 8014664:	dc7c      	bgt.n	8014760 <_strtod_l+0x848>
 8014666:	9b04      	ldr	r3, [sp, #16]
 8014668:	2b00      	cmp	r3, #0
 801466a:	dd08      	ble.n	801467e <_strtod_l+0x766>
 801466c:	4649      	mov	r1, r9
 801466e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014670:	4620      	mov	r0, r4
 8014672:	f002 f835 	bl	80166e0 <__pow5mult>
 8014676:	4681      	mov	r9, r0
 8014678:	2800      	cmp	r0, #0
 801467a:	f43f ae7c 	beq.w	8014376 <_strtod_l+0x45e>
 801467e:	2e00      	cmp	r6, #0
 8014680:	dd08      	ble.n	8014694 <_strtod_l+0x77c>
 8014682:	4649      	mov	r1, r9
 8014684:	4632      	mov	r2, r6
 8014686:	4620      	mov	r0, r4
 8014688:	f002 f878 	bl	801677c <__lshift>
 801468c:	4681      	mov	r9, r0
 801468e:	2800      	cmp	r0, #0
 8014690:	f43f ae71 	beq.w	8014376 <_strtod_l+0x45e>
 8014694:	9b08      	ldr	r3, [sp, #32]
 8014696:	2b00      	cmp	r3, #0
 8014698:	dd08      	ble.n	80146ac <_strtod_l+0x794>
 801469a:	4641      	mov	r1, r8
 801469c:	461a      	mov	r2, r3
 801469e:	4620      	mov	r0, r4
 80146a0:	f002 f86c 	bl	801677c <__lshift>
 80146a4:	4680      	mov	r8, r0
 80146a6:	2800      	cmp	r0, #0
 80146a8:	f43f ae65 	beq.w	8014376 <_strtod_l+0x45e>
 80146ac:	464a      	mov	r2, r9
 80146ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80146b0:	4620      	mov	r0, r4
 80146b2:	f002 f8d1 	bl	8016858 <__mdiff>
 80146b6:	4605      	mov	r5, r0
 80146b8:	2800      	cmp	r0, #0
 80146ba:	f43f ae5c 	beq.w	8014376 <_strtod_l+0x45e>
 80146be:	68c3      	ldr	r3, [r0, #12]
 80146c0:	930c      	str	r3, [sp, #48]	; 0x30
 80146c2:	2300      	movs	r3, #0
 80146c4:	60c3      	str	r3, [r0, #12]
 80146c6:	4641      	mov	r1, r8
 80146c8:	f002 f8ac 	bl	8016824 <__mcmp>
 80146cc:	2800      	cmp	r0, #0
 80146ce:	da63      	bge.n	8014798 <_strtod_l+0x880>
 80146d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80146d2:	b9e3      	cbnz	r3, 801470e <_strtod_l+0x7f6>
 80146d4:	f1ba 0f00 	cmp.w	sl, #0
 80146d8:	d119      	bne.n	801470e <_strtod_l+0x7f6>
 80146da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80146de:	b9b3      	cbnz	r3, 801470e <_strtod_l+0x7f6>
 80146e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80146e4:	0d1b      	lsrs	r3, r3, #20
 80146e6:	051b      	lsls	r3, r3, #20
 80146e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80146ec:	d90f      	bls.n	801470e <_strtod_l+0x7f6>
 80146ee:	696b      	ldr	r3, [r5, #20]
 80146f0:	b913      	cbnz	r3, 80146f8 <_strtod_l+0x7e0>
 80146f2:	692b      	ldr	r3, [r5, #16]
 80146f4:	2b01      	cmp	r3, #1
 80146f6:	dd0a      	ble.n	801470e <_strtod_l+0x7f6>
 80146f8:	4629      	mov	r1, r5
 80146fa:	2201      	movs	r2, #1
 80146fc:	4620      	mov	r0, r4
 80146fe:	f002 f83d 	bl	801677c <__lshift>
 8014702:	4641      	mov	r1, r8
 8014704:	4605      	mov	r5, r0
 8014706:	f002 f88d 	bl	8016824 <__mcmp>
 801470a:	2800      	cmp	r0, #0
 801470c:	dc75      	bgt.n	80147fa <_strtod_l+0x8e2>
 801470e:	2f00      	cmp	r7, #0
 8014710:	d17f      	bne.n	8014812 <_strtod_l+0x8fa>
 8014712:	e63a      	b.n	801438a <_strtod_l+0x472>
 8014714:	07d6      	lsls	r6, r2, #31
 8014716:	d508      	bpl.n	801472a <_strtod_l+0x812>
 8014718:	ed9d 6b06 	vldr	d6, [sp, #24]
 801471c:	ed91 7b00 	vldr	d7, [r1]
 8014720:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014724:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014728:	2001      	movs	r0, #1
 801472a:	1052      	asrs	r2, r2, #1
 801472c:	3108      	adds	r1, #8
 801472e:	e6db      	b.n	80144e8 <_strtod_l+0x5d0>
 8014730:	f04f 31ff 	mov.w	r1, #4294967295
 8014734:	fa01 f202 	lsl.w	r2, r1, r2
 8014738:	ea02 0a0a 	and.w	sl, r2, sl
 801473c:	e6f3      	b.n	8014526 <_strtod_l+0x60e>
 801473e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014742:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014746:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801474a:	36e2      	adds	r6, #226	; 0xe2
 801474c:	fa01 f306 	lsl.w	r3, r1, r6
 8014750:	930f      	str	r3, [sp, #60]	; 0x3c
 8014752:	9111      	str	r1, [sp, #68]	; 0x44
 8014754:	e758      	b.n	8014608 <_strtod_l+0x6f0>
 8014756:	2300      	movs	r3, #0
 8014758:	930f      	str	r3, [sp, #60]	; 0x3c
 801475a:	2301      	movs	r3, #1
 801475c:	9311      	str	r3, [sp, #68]	; 0x44
 801475e:	e753      	b.n	8014608 <_strtod_l+0x6f0>
 8014760:	461a      	mov	r2, r3
 8014762:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014764:	4620      	mov	r0, r4
 8014766:	f002 f809 	bl	801677c <__lshift>
 801476a:	9018      	str	r0, [sp, #96]	; 0x60
 801476c:	2800      	cmp	r0, #0
 801476e:	f47f af7a 	bne.w	8014666 <_strtod_l+0x74e>
 8014772:	e600      	b.n	8014376 <_strtod_l+0x45e>
 8014774:	f3af 8000 	nop.w
 8014778:	94a03595 	.word	0x94a03595
 801477c:	3fdfffff 	.word	0x3fdfffff
 8014780:	35afe535 	.word	0x35afe535
 8014784:	3fe00000 	.word	0x3fe00000
 8014788:	94a03595 	.word	0x94a03595
 801478c:	3fcfffff 	.word	0x3fcfffff
 8014790:	080181c0 	.word	0x080181c0
 8014794:	fffffc02 	.word	0xfffffc02
 8014798:	f8cd b020 	str.w	fp, [sp, #32]
 801479c:	f040 8085 	bne.w	80148aa <_strtod_l+0x992>
 80147a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80147a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80147a6:	b322      	cbz	r2, 80147f2 <_strtod_l+0x8da>
 80147a8:	4ab7      	ldr	r2, [pc, #732]	; (8014a88 <_strtod_l+0xb70>)
 80147aa:	4293      	cmp	r3, r2
 80147ac:	d154      	bne.n	8014858 <_strtod_l+0x940>
 80147ae:	4651      	mov	r1, sl
 80147b0:	b1e7      	cbz	r7, 80147ec <_strtod_l+0x8d4>
 80147b2:	4bb6      	ldr	r3, [pc, #728]	; (8014a8c <_strtod_l+0xb74>)
 80147b4:	465a      	mov	r2, fp
 80147b6:	4013      	ands	r3, r2
 80147b8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80147bc:	f04f 32ff 	mov.w	r2, #4294967295
 80147c0:	d803      	bhi.n	80147ca <_strtod_l+0x8b2>
 80147c2:	0d1b      	lsrs	r3, r3, #20
 80147c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80147c8:	409a      	lsls	r2, r3
 80147ca:	4291      	cmp	r1, r2
 80147cc:	d144      	bne.n	8014858 <_strtod_l+0x940>
 80147ce:	4bb0      	ldr	r3, [pc, #704]	; (8014a90 <_strtod_l+0xb78>)
 80147d0:	9a08      	ldr	r2, [sp, #32]
 80147d2:	429a      	cmp	r2, r3
 80147d4:	d102      	bne.n	80147dc <_strtod_l+0x8c4>
 80147d6:	3101      	adds	r1, #1
 80147d8:	f43f adcd 	beq.w	8014376 <_strtod_l+0x45e>
 80147dc:	4bab      	ldr	r3, [pc, #684]	; (8014a8c <_strtod_l+0xb74>)
 80147de:	9a08      	ldr	r2, [sp, #32]
 80147e0:	401a      	ands	r2, r3
 80147e2:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 80147e6:	f04f 0a00 	mov.w	sl, #0
 80147ea:	e790      	b.n	801470e <_strtod_l+0x7f6>
 80147ec:	f04f 32ff 	mov.w	r2, #4294967295
 80147f0:	e7eb      	b.n	80147ca <_strtod_l+0x8b2>
 80147f2:	bb8b      	cbnz	r3, 8014858 <_strtod_l+0x940>
 80147f4:	f1ba 0f00 	cmp.w	sl, #0
 80147f8:	d12e      	bne.n	8014858 <_strtod_l+0x940>
 80147fa:	465b      	mov	r3, fp
 80147fc:	4aa3      	ldr	r2, [pc, #652]	; (8014a8c <_strtod_l+0xb74>)
 80147fe:	b30f      	cbz	r7, 8014844 <_strtod_l+0x92c>
 8014800:	ea02 010b 	and.w	r1, r2, fp
 8014804:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014808:	dc1c      	bgt.n	8014844 <_strtod_l+0x92c>
 801480a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801480e:	f77f ae48 	ble.w	80144a2 <_strtod_l+0x58a>
 8014812:	4aa0      	ldr	r2, [pc, #640]	; (8014a94 <_strtod_l+0xb7c>)
 8014814:	2300      	movs	r3, #0
 8014816:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 801481a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 801481e:	ec4b ab17 	vmov	d7, sl, fp
 8014822:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014826:	ed8d 7b04 	vstr	d7, [sp, #16]
 801482a:	9b05      	ldr	r3, [sp, #20]
 801482c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8014830:	2b00      	cmp	r3, #0
 8014832:	f47f adaa 	bne.w	801438a <_strtod_l+0x472>
 8014836:	9b04      	ldr	r3, [sp, #16]
 8014838:	2b00      	cmp	r3, #0
 801483a:	f47f ada6 	bne.w	801438a <_strtod_l+0x472>
 801483e:	2322      	movs	r3, #34	; 0x22
 8014840:	6023      	str	r3, [r4, #0]
 8014842:	e5a2      	b.n	801438a <_strtod_l+0x472>
 8014844:	4013      	ands	r3, r2
 8014846:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801484a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801484e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014852:	f04f 3aff 	mov.w	sl, #4294967295
 8014856:	e75a      	b.n	801470e <_strtod_l+0x7f6>
 8014858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801485a:	b18b      	cbz	r3, 8014880 <_strtod_l+0x968>
 801485c:	9a08      	ldr	r2, [sp, #32]
 801485e:	4213      	tst	r3, r2
 8014860:	f43f af55 	beq.w	801470e <_strtod_l+0x7f6>
 8014864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014866:	463a      	mov	r2, r7
 8014868:	4650      	mov	r0, sl
 801486a:	4659      	mov	r1, fp
 801486c:	b163      	cbz	r3, 8014888 <_strtod_l+0x970>
 801486e:	f7ff fb39 	bl	8013ee4 <sulp>
 8014872:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8014876:	ee37 7b00 	vadd.f64	d7, d7, d0
 801487a:	ec5b ab17 	vmov	sl, fp, d7
 801487e:	e746      	b.n	801470e <_strtod_l+0x7f6>
 8014880:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014882:	ea13 0f0a 	tst.w	r3, sl
 8014886:	e7eb      	b.n	8014860 <_strtod_l+0x948>
 8014888:	f7ff fb2c 	bl	8013ee4 <sulp>
 801488c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8014890:	ee37 7b40 	vsub.f64	d7, d7, d0
 8014894:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014898:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801489c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148a0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80148a4:	f43f adfd 	beq.w	80144a2 <_strtod_l+0x58a>
 80148a8:	e731      	b.n	801470e <_strtod_l+0x7f6>
 80148aa:	4641      	mov	r1, r8
 80148ac:	4628      	mov	r0, r5
 80148ae:	f002 f8f6 	bl	8016a9e <__ratio>
 80148b2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80148b6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80148ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148be:	d869      	bhi.n	8014994 <_strtod_l+0xa7c>
 80148c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d045      	beq.n	8014952 <_strtod_l+0xa3a>
 80148c6:	4b74      	ldr	r3, [pc, #464]	; (8014a98 <_strtod_l+0xb80>)
 80148c8:	2200      	movs	r2, #0
 80148ca:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80148ce:	9808      	ldr	r0, [sp, #32]
 80148d0:	496e      	ldr	r1, [pc, #440]	; (8014a8c <_strtod_l+0xb74>)
 80148d2:	ea00 0601 	and.w	r6, r0, r1
 80148d6:	4871      	ldr	r0, [pc, #452]	; (8014a9c <_strtod_l+0xb84>)
 80148d8:	4286      	cmp	r6, r0
 80148da:	f040 8089 	bne.w	80149f0 <_strtod_l+0xad8>
 80148de:	910f      	str	r1, [sp, #60]	; 0x3c
 80148e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80148e4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80148e8:	9908      	ldr	r1, [sp, #32]
 80148ea:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 80148ee:	ec4b ab10 	vmov	d0, sl, fp
 80148f2:	ec43 2b1c 	vmov	d12, r2, r3
 80148f6:	f002 f80d 	bl	8016914 <__ulp>
 80148fa:	ec4b ab1d 	vmov	d13, sl, fp
 80148fe:	eeac db00 	vfma.f64	d13, d12, d0
 8014902:	ed8d db08 	vstr	d13, [sp, #32]
 8014906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014908:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801490a:	4a65      	ldr	r2, [pc, #404]	; (8014aa0 <_strtod_l+0xb88>)
 801490c:	4019      	ands	r1, r3
 801490e:	4291      	cmp	r1, r2
 8014910:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8014914:	d948      	bls.n	80149a8 <_strtod_l+0xa90>
 8014916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014918:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801491c:	4293      	cmp	r3, r2
 801491e:	d103      	bne.n	8014928 <_strtod_l+0xa10>
 8014920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014922:	3301      	adds	r3, #1
 8014924:	f43f ad27 	beq.w	8014376 <_strtod_l+0x45e>
 8014928:	f8df b164 	ldr.w	fp, [pc, #356]	; 8014a90 <_strtod_l+0xb78>
 801492c:	f04f 3aff 	mov.w	sl, #4294967295
 8014930:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014932:	4620      	mov	r0, r4
 8014934:	f001 fd56 	bl	80163e4 <_Bfree>
 8014938:	4649      	mov	r1, r9
 801493a:	4620      	mov	r0, r4
 801493c:	f001 fd52 	bl	80163e4 <_Bfree>
 8014940:	4641      	mov	r1, r8
 8014942:	4620      	mov	r0, r4
 8014944:	f001 fd4e 	bl	80163e4 <_Bfree>
 8014948:	4629      	mov	r1, r5
 801494a:	4620      	mov	r0, r4
 801494c:	f001 fd4a 	bl	80163e4 <_Bfree>
 8014950:	e60e      	b.n	8014570 <_strtod_l+0x658>
 8014952:	f1ba 0f00 	cmp.w	sl, #0
 8014956:	d113      	bne.n	8014980 <_strtod_l+0xa68>
 8014958:	9b08      	ldr	r3, [sp, #32]
 801495a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801495e:	b9b3      	cbnz	r3, 801498e <_strtod_l+0xa76>
 8014960:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014964:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801496c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8014970:	d401      	bmi.n	8014976 <_strtod_l+0xa5e>
 8014972:	ee20 8b08 	vmul.f64	d8, d0, d8
 8014976:	eeb1 7b48 	vneg.f64	d7, d8
 801497a:	ec53 2b17 	vmov	r2, r3, d7
 801497e:	e7a6      	b.n	80148ce <_strtod_l+0x9b6>
 8014980:	f1ba 0f01 	cmp.w	sl, #1
 8014984:	d103      	bne.n	801498e <_strtod_l+0xa76>
 8014986:	9b08      	ldr	r3, [sp, #32]
 8014988:	2b00      	cmp	r3, #0
 801498a:	f43f ad8a 	beq.w	80144a2 <_strtod_l+0x58a>
 801498e:	2200      	movs	r2, #0
 8014990:	4b44      	ldr	r3, [pc, #272]	; (8014aa4 <_strtod_l+0xb8c>)
 8014992:	e79a      	b.n	80148ca <_strtod_l+0x9b2>
 8014994:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014996:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801499a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d0e9      	beq.n	8014976 <_strtod_l+0xa5e>
 80149a2:	ec53 2b18 	vmov	r2, r3, d8
 80149a6:	e792      	b.n	80148ce <_strtod_l+0x9b6>
 80149a8:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80149ac:	2f00      	cmp	r7, #0
 80149ae:	d1bf      	bne.n	8014930 <_strtod_l+0xa18>
 80149b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80149b4:	0d1b      	lsrs	r3, r3, #20
 80149b6:	051b      	lsls	r3, r3, #20
 80149b8:	429e      	cmp	r6, r3
 80149ba:	d1b9      	bne.n	8014930 <_strtod_l+0xa18>
 80149bc:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 80149c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80149c2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 80149c6:	ee38 8b40 	vsub.f64	d8, d8, d0
 80149ca:	b92b      	cbnz	r3, 80149d8 <_strtod_l+0xac0>
 80149cc:	f1ba 0f00 	cmp.w	sl, #0
 80149d0:	d102      	bne.n	80149d8 <_strtod_l+0xac0>
 80149d2:	f3cb 0213 	ubfx	r2, fp, #0, #20
 80149d6:	b3d2      	cbz	r2, 8014a4e <_strtod_l+0xb36>
 80149d8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80149dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149e0:	f53f acd3 	bmi.w	801438a <_strtod_l+0x472>
 80149e4:	eeb4 8bca 	vcmpe.f64	d8, d10
 80149e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ec:	dda0      	ble.n	8014930 <_strtod_l+0xa18>
 80149ee:	e4cc      	b.n	801438a <_strtod_l+0x472>
 80149f0:	b1ef      	cbz	r7, 8014a2e <_strtod_l+0xb16>
 80149f2:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 80149f6:	d81a      	bhi.n	8014a2e <_strtod_l+0xb16>
 80149f8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8014a80 <_strtod_l+0xb68>
 80149fc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a04:	d810      	bhi.n	8014a28 <_strtod_l+0xb10>
 8014a06:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8014a0a:	ee17 3a90 	vmov	r3, s15
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	bf08      	it	eq
 8014a12:	2301      	moveq	r3, #1
 8014a14:	ee07 3a90 	vmov	s15, r3
 8014a18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a1a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8014a1e:	b99b      	cbnz	r3, 8014a48 <_strtod_l+0xb30>
 8014a20:	eeb1 7b48 	vneg.f64	d7, d8
 8014a24:	ec53 2b17 	vmov	r2, r3, d7
 8014a28:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8014a2c:	1b8b      	subs	r3, r1, r6
 8014a2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014a32:	ec43 2b1c 	vmov	d12, r2, r3
 8014a36:	f001 ff6d 	bl	8016914 <__ulp>
 8014a3a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8014a3e:	eeac 7b00 	vfma.f64	d7, d12, d0
 8014a42:	ec5b ab17 	vmov	sl, fp, d7
 8014a46:	e7b1      	b.n	80149ac <_strtod_l+0xa94>
 8014a48:	ec53 2b18 	vmov	r2, r3, d8
 8014a4c:	e7ec      	b.n	8014a28 <_strtod_l+0xb10>
 8014a4e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8014a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a56:	f57f af6b 	bpl.w	8014930 <_strtod_l+0xa18>
 8014a5a:	e496      	b.n	801438a <_strtod_l+0x472>
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	930d      	str	r3, [sp, #52]	; 0x34
 8014a60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014a62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014a64:	6013      	str	r3, [r2, #0]
 8014a66:	f7ff ba9d 	b.w	8013fa4 <_strtod_l+0x8c>
 8014a6a:	2a65      	cmp	r2, #101	; 0x65
 8014a6c:	f04f 0100 	mov.w	r1, #0
 8014a70:	f43f ab97 	beq.w	80141a2 <_strtod_l+0x28a>
 8014a74:	2701      	movs	r7, #1
 8014a76:	460b      	mov	r3, r1
 8014a78:	9704      	str	r7, [sp, #16]
 8014a7a:	f7ff bb0a 	b.w	8014092 <_strtod_l+0x17a>
 8014a7e:	bf00      	nop
 8014a80:	ffc00000 	.word	0xffc00000
 8014a84:	41dfffff 	.word	0x41dfffff
 8014a88:	000fffff 	.word	0x000fffff
 8014a8c:	7ff00000 	.word	0x7ff00000
 8014a90:	7fefffff 	.word	0x7fefffff
 8014a94:	39500000 	.word	0x39500000
 8014a98:	3ff00000 	.word	0x3ff00000
 8014a9c:	7fe00000 	.word	0x7fe00000
 8014aa0:	7c9fffff 	.word	0x7c9fffff
 8014aa4:	bff00000 	.word	0xbff00000

08014aa8 <_strtod_r>:
 8014aa8:	4b05      	ldr	r3, [pc, #20]	; (8014ac0 <_strtod_r+0x18>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	b410      	push	{r4}
 8014aae:	6a1b      	ldr	r3, [r3, #32]
 8014ab0:	4c04      	ldr	r4, [pc, #16]	; (8014ac4 <_strtod_r+0x1c>)
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	bf08      	it	eq
 8014ab6:	4623      	moveq	r3, r4
 8014ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014abc:	f7ff ba2c 	b.w	8013f18 <_strtod_l>
 8014ac0:	200001a8 	.word	0x200001a8
 8014ac4:	2000020c 	.word	0x2000020c

08014ac8 <_strtol_l.isra.0>:
 8014ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014acc:	4680      	mov	r8, r0
 8014ace:	4689      	mov	r9, r1
 8014ad0:	4692      	mov	sl, r2
 8014ad2:	461e      	mov	r6, r3
 8014ad4:	460f      	mov	r7, r1
 8014ad6:	463d      	mov	r5, r7
 8014ad8:	9808      	ldr	r0, [sp, #32]
 8014ada:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014ade:	f001 fbbb 	bl	8016258 <__locale_ctype_ptr_l>
 8014ae2:	4420      	add	r0, r4
 8014ae4:	7843      	ldrb	r3, [r0, #1]
 8014ae6:	f013 0308 	ands.w	r3, r3, #8
 8014aea:	d132      	bne.n	8014b52 <_strtol_l.isra.0+0x8a>
 8014aec:	2c2d      	cmp	r4, #45	; 0x2d
 8014aee:	d132      	bne.n	8014b56 <_strtol_l.isra.0+0x8e>
 8014af0:	787c      	ldrb	r4, [r7, #1]
 8014af2:	1cbd      	adds	r5, r7, #2
 8014af4:	2201      	movs	r2, #1
 8014af6:	2e00      	cmp	r6, #0
 8014af8:	d05d      	beq.n	8014bb6 <_strtol_l.isra.0+0xee>
 8014afa:	2e10      	cmp	r6, #16
 8014afc:	d109      	bne.n	8014b12 <_strtol_l.isra.0+0x4a>
 8014afe:	2c30      	cmp	r4, #48	; 0x30
 8014b00:	d107      	bne.n	8014b12 <_strtol_l.isra.0+0x4a>
 8014b02:	782b      	ldrb	r3, [r5, #0]
 8014b04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014b08:	2b58      	cmp	r3, #88	; 0x58
 8014b0a:	d14f      	bne.n	8014bac <_strtol_l.isra.0+0xe4>
 8014b0c:	786c      	ldrb	r4, [r5, #1]
 8014b0e:	2610      	movs	r6, #16
 8014b10:	3502      	adds	r5, #2
 8014b12:	2a00      	cmp	r2, #0
 8014b14:	bf14      	ite	ne
 8014b16:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014b1a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014b1e:	2700      	movs	r7, #0
 8014b20:	fbb1 fcf6 	udiv	ip, r1, r6
 8014b24:	4638      	mov	r0, r7
 8014b26:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014b2a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014b2e:	2b09      	cmp	r3, #9
 8014b30:	d817      	bhi.n	8014b62 <_strtol_l.isra.0+0x9a>
 8014b32:	461c      	mov	r4, r3
 8014b34:	42a6      	cmp	r6, r4
 8014b36:	dd23      	ble.n	8014b80 <_strtol_l.isra.0+0xb8>
 8014b38:	1c7b      	adds	r3, r7, #1
 8014b3a:	d007      	beq.n	8014b4c <_strtol_l.isra.0+0x84>
 8014b3c:	4584      	cmp	ip, r0
 8014b3e:	d31c      	bcc.n	8014b7a <_strtol_l.isra.0+0xb2>
 8014b40:	d101      	bne.n	8014b46 <_strtol_l.isra.0+0x7e>
 8014b42:	45a6      	cmp	lr, r4
 8014b44:	db19      	blt.n	8014b7a <_strtol_l.isra.0+0xb2>
 8014b46:	fb00 4006 	mla	r0, r0, r6, r4
 8014b4a:	2701      	movs	r7, #1
 8014b4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014b50:	e7eb      	b.n	8014b2a <_strtol_l.isra.0+0x62>
 8014b52:	462f      	mov	r7, r5
 8014b54:	e7bf      	b.n	8014ad6 <_strtol_l.isra.0+0xe>
 8014b56:	2c2b      	cmp	r4, #43	; 0x2b
 8014b58:	bf04      	itt	eq
 8014b5a:	1cbd      	addeq	r5, r7, #2
 8014b5c:	787c      	ldrbeq	r4, [r7, #1]
 8014b5e:	461a      	mov	r2, r3
 8014b60:	e7c9      	b.n	8014af6 <_strtol_l.isra.0+0x2e>
 8014b62:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014b66:	2b19      	cmp	r3, #25
 8014b68:	d801      	bhi.n	8014b6e <_strtol_l.isra.0+0xa6>
 8014b6a:	3c37      	subs	r4, #55	; 0x37
 8014b6c:	e7e2      	b.n	8014b34 <_strtol_l.isra.0+0x6c>
 8014b6e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014b72:	2b19      	cmp	r3, #25
 8014b74:	d804      	bhi.n	8014b80 <_strtol_l.isra.0+0xb8>
 8014b76:	3c57      	subs	r4, #87	; 0x57
 8014b78:	e7dc      	b.n	8014b34 <_strtol_l.isra.0+0x6c>
 8014b7a:	f04f 37ff 	mov.w	r7, #4294967295
 8014b7e:	e7e5      	b.n	8014b4c <_strtol_l.isra.0+0x84>
 8014b80:	1c7b      	adds	r3, r7, #1
 8014b82:	d108      	bne.n	8014b96 <_strtol_l.isra.0+0xce>
 8014b84:	2322      	movs	r3, #34	; 0x22
 8014b86:	f8c8 3000 	str.w	r3, [r8]
 8014b8a:	4608      	mov	r0, r1
 8014b8c:	f1ba 0f00 	cmp.w	sl, #0
 8014b90:	d107      	bne.n	8014ba2 <_strtol_l.isra.0+0xda>
 8014b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b96:	b102      	cbz	r2, 8014b9a <_strtol_l.isra.0+0xd2>
 8014b98:	4240      	negs	r0, r0
 8014b9a:	f1ba 0f00 	cmp.w	sl, #0
 8014b9e:	d0f8      	beq.n	8014b92 <_strtol_l.isra.0+0xca>
 8014ba0:	b10f      	cbz	r7, 8014ba6 <_strtol_l.isra.0+0xde>
 8014ba2:	f105 39ff 	add.w	r9, r5, #4294967295
 8014ba6:	f8ca 9000 	str.w	r9, [sl]
 8014baa:	e7f2      	b.n	8014b92 <_strtol_l.isra.0+0xca>
 8014bac:	2430      	movs	r4, #48	; 0x30
 8014bae:	2e00      	cmp	r6, #0
 8014bb0:	d1af      	bne.n	8014b12 <_strtol_l.isra.0+0x4a>
 8014bb2:	2608      	movs	r6, #8
 8014bb4:	e7ad      	b.n	8014b12 <_strtol_l.isra.0+0x4a>
 8014bb6:	2c30      	cmp	r4, #48	; 0x30
 8014bb8:	d0a3      	beq.n	8014b02 <_strtol_l.isra.0+0x3a>
 8014bba:	260a      	movs	r6, #10
 8014bbc:	e7a9      	b.n	8014b12 <_strtol_l.isra.0+0x4a>
	...

08014bc0 <_strtol_r>:
 8014bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014bc2:	4c06      	ldr	r4, [pc, #24]	; (8014bdc <_strtol_r+0x1c>)
 8014bc4:	4d06      	ldr	r5, [pc, #24]	; (8014be0 <_strtol_r+0x20>)
 8014bc6:	6824      	ldr	r4, [r4, #0]
 8014bc8:	6a24      	ldr	r4, [r4, #32]
 8014bca:	2c00      	cmp	r4, #0
 8014bcc:	bf08      	it	eq
 8014bce:	462c      	moveq	r4, r5
 8014bd0:	9400      	str	r4, [sp, #0]
 8014bd2:	f7ff ff79 	bl	8014ac8 <_strtol_l.isra.0>
 8014bd6:	b003      	add	sp, #12
 8014bd8:	bd30      	pop	{r4, r5, pc}
 8014bda:	bf00      	nop
 8014bdc:	200001a8 	.word	0x200001a8
 8014be0:	2000020c 	.word	0x2000020c

08014be4 <__swbuf_r>:
 8014be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014be6:	460e      	mov	r6, r1
 8014be8:	4614      	mov	r4, r2
 8014bea:	4605      	mov	r5, r0
 8014bec:	b118      	cbz	r0, 8014bf6 <__swbuf_r+0x12>
 8014bee:	6983      	ldr	r3, [r0, #24]
 8014bf0:	b90b      	cbnz	r3, 8014bf6 <__swbuf_r+0x12>
 8014bf2:	f000 ff81 	bl	8015af8 <__sinit>
 8014bf6:	4b21      	ldr	r3, [pc, #132]	; (8014c7c <__swbuf_r+0x98>)
 8014bf8:	429c      	cmp	r4, r3
 8014bfa:	d12a      	bne.n	8014c52 <__swbuf_r+0x6e>
 8014bfc:	686c      	ldr	r4, [r5, #4]
 8014bfe:	69a3      	ldr	r3, [r4, #24]
 8014c00:	60a3      	str	r3, [r4, #8]
 8014c02:	89a3      	ldrh	r3, [r4, #12]
 8014c04:	071a      	lsls	r2, r3, #28
 8014c06:	d52e      	bpl.n	8014c66 <__swbuf_r+0x82>
 8014c08:	6923      	ldr	r3, [r4, #16]
 8014c0a:	b363      	cbz	r3, 8014c66 <__swbuf_r+0x82>
 8014c0c:	6923      	ldr	r3, [r4, #16]
 8014c0e:	6820      	ldr	r0, [r4, #0]
 8014c10:	1ac0      	subs	r0, r0, r3
 8014c12:	6963      	ldr	r3, [r4, #20]
 8014c14:	b2f6      	uxtb	r6, r6
 8014c16:	4283      	cmp	r3, r0
 8014c18:	4637      	mov	r7, r6
 8014c1a:	dc04      	bgt.n	8014c26 <__swbuf_r+0x42>
 8014c1c:	4621      	mov	r1, r4
 8014c1e:	4628      	mov	r0, r5
 8014c20:	f000 ff00 	bl	8015a24 <_fflush_r>
 8014c24:	bb28      	cbnz	r0, 8014c72 <__swbuf_r+0x8e>
 8014c26:	68a3      	ldr	r3, [r4, #8]
 8014c28:	3b01      	subs	r3, #1
 8014c2a:	60a3      	str	r3, [r4, #8]
 8014c2c:	6823      	ldr	r3, [r4, #0]
 8014c2e:	1c5a      	adds	r2, r3, #1
 8014c30:	6022      	str	r2, [r4, #0]
 8014c32:	701e      	strb	r6, [r3, #0]
 8014c34:	6963      	ldr	r3, [r4, #20]
 8014c36:	3001      	adds	r0, #1
 8014c38:	4283      	cmp	r3, r0
 8014c3a:	d004      	beq.n	8014c46 <__swbuf_r+0x62>
 8014c3c:	89a3      	ldrh	r3, [r4, #12]
 8014c3e:	07db      	lsls	r3, r3, #31
 8014c40:	d519      	bpl.n	8014c76 <__swbuf_r+0x92>
 8014c42:	2e0a      	cmp	r6, #10
 8014c44:	d117      	bne.n	8014c76 <__swbuf_r+0x92>
 8014c46:	4621      	mov	r1, r4
 8014c48:	4628      	mov	r0, r5
 8014c4a:	f000 feeb 	bl	8015a24 <_fflush_r>
 8014c4e:	b190      	cbz	r0, 8014c76 <__swbuf_r+0x92>
 8014c50:	e00f      	b.n	8014c72 <__swbuf_r+0x8e>
 8014c52:	4b0b      	ldr	r3, [pc, #44]	; (8014c80 <__swbuf_r+0x9c>)
 8014c54:	429c      	cmp	r4, r3
 8014c56:	d101      	bne.n	8014c5c <__swbuf_r+0x78>
 8014c58:	68ac      	ldr	r4, [r5, #8]
 8014c5a:	e7d0      	b.n	8014bfe <__swbuf_r+0x1a>
 8014c5c:	4b09      	ldr	r3, [pc, #36]	; (8014c84 <__swbuf_r+0xa0>)
 8014c5e:	429c      	cmp	r4, r3
 8014c60:	bf08      	it	eq
 8014c62:	68ec      	ldreq	r4, [r5, #12]
 8014c64:	e7cb      	b.n	8014bfe <__swbuf_r+0x1a>
 8014c66:	4621      	mov	r1, r4
 8014c68:	4628      	mov	r0, r5
 8014c6a:	f000 f80d 	bl	8014c88 <__swsetup_r>
 8014c6e:	2800      	cmp	r0, #0
 8014c70:	d0cc      	beq.n	8014c0c <__swbuf_r+0x28>
 8014c72:	f04f 37ff 	mov.w	r7, #4294967295
 8014c76:	4638      	mov	r0, r7
 8014c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c7a:	bf00      	nop
 8014c7c:	08018218 	.word	0x08018218
 8014c80:	08018238 	.word	0x08018238
 8014c84:	080181f8 	.word	0x080181f8

08014c88 <__swsetup_r>:
 8014c88:	4b32      	ldr	r3, [pc, #200]	; (8014d54 <__swsetup_r+0xcc>)
 8014c8a:	b570      	push	{r4, r5, r6, lr}
 8014c8c:	681d      	ldr	r5, [r3, #0]
 8014c8e:	4606      	mov	r6, r0
 8014c90:	460c      	mov	r4, r1
 8014c92:	b125      	cbz	r5, 8014c9e <__swsetup_r+0x16>
 8014c94:	69ab      	ldr	r3, [r5, #24]
 8014c96:	b913      	cbnz	r3, 8014c9e <__swsetup_r+0x16>
 8014c98:	4628      	mov	r0, r5
 8014c9a:	f000 ff2d 	bl	8015af8 <__sinit>
 8014c9e:	4b2e      	ldr	r3, [pc, #184]	; (8014d58 <__swsetup_r+0xd0>)
 8014ca0:	429c      	cmp	r4, r3
 8014ca2:	d10f      	bne.n	8014cc4 <__swsetup_r+0x3c>
 8014ca4:	686c      	ldr	r4, [r5, #4]
 8014ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014caa:	b29a      	uxth	r2, r3
 8014cac:	0715      	lsls	r5, r2, #28
 8014cae:	d42c      	bmi.n	8014d0a <__swsetup_r+0x82>
 8014cb0:	06d0      	lsls	r0, r2, #27
 8014cb2:	d411      	bmi.n	8014cd8 <__swsetup_r+0x50>
 8014cb4:	2209      	movs	r2, #9
 8014cb6:	6032      	str	r2, [r6, #0]
 8014cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014cbc:	81a3      	strh	r3, [r4, #12]
 8014cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8014cc2:	e03e      	b.n	8014d42 <__swsetup_r+0xba>
 8014cc4:	4b25      	ldr	r3, [pc, #148]	; (8014d5c <__swsetup_r+0xd4>)
 8014cc6:	429c      	cmp	r4, r3
 8014cc8:	d101      	bne.n	8014cce <__swsetup_r+0x46>
 8014cca:	68ac      	ldr	r4, [r5, #8]
 8014ccc:	e7eb      	b.n	8014ca6 <__swsetup_r+0x1e>
 8014cce:	4b24      	ldr	r3, [pc, #144]	; (8014d60 <__swsetup_r+0xd8>)
 8014cd0:	429c      	cmp	r4, r3
 8014cd2:	bf08      	it	eq
 8014cd4:	68ec      	ldreq	r4, [r5, #12]
 8014cd6:	e7e6      	b.n	8014ca6 <__swsetup_r+0x1e>
 8014cd8:	0751      	lsls	r1, r2, #29
 8014cda:	d512      	bpl.n	8014d02 <__swsetup_r+0x7a>
 8014cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014cde:	b141      	cbz	r1, 8014cf2 <__swsetup_r+0x6a>
 8014ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ce4:	4299      	cmp	r1, r3
 8014ce6:	d002      	beq.n	8014cee <__swsetup_r+0x66>
 8014ce8:	4630      	mov	r0, r6
 8014cea:	f001 ff55 	bl	8016b98 <_free_r>
 8014cee:	2300      	movs	r3, #0
 8014cf0:	6363      	str	r3, [r4, #52]	; 0x34
 8014cf2:	89a3      	ldrh	r3, [r4, #12]
 8014cf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014cf8:	81a3      	strh	r3, [r4, #12]
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	6063      	str	r3, [r4, #4]
 8014cfe:	6923      	ldr	r3, [r4, #16]
 8014d00:	6023      	str	r3, [r4, #0]
 8014d02:	89a3      	ldrh	r3, [r4, #12]
 8014d04:	f043 0308 	orr.w	r3, r3, #8
 8014d08:	81a3      	strh	r3, [r4, #12]
 8014d0a:	6923      	ldr	r3, [r4, #16]
 8014d0c:	b94b      	cbnz	r3, 8014d22 <__swsetup_r+0x9a>
 8014d0e:	89a3      	ldrh	r3, [r4, #12]
 8014d10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d18:	d003      	beq.n	8014d22 <__swsetup_r+0x9a>
 8014d1a:	4621      	mov	r1, r4
 8014d1c:	4630      	mov	r0, r6
 8014d1e:	f001 fad3 	bl	80162c8 <__smakebuf_r>
 8014d22:	89a2      	ldrh	r2, [r4, #12]
 8014d24:	f012 0301 	ands.w	r3, r2, #1
 8014d28:	d00c      	beq.n	8014d44 <__swsetup_r+0xbc>
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	60a3      	str	r3, [r4, #8]
 8014d2e:	6963      	ldr	r3, [r4, #20]
 8014d30:	425b      	negs	r3, r3
 8014d32:	61a3      	str	r3, [r4, #24]
 8014d34:	6923      	ldr	r3, [r4, #16]
 8014d36:	b953      	cbnz	r3, 8014d4e <__swsetup_r+0xc6>
 8014d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d3c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014d40:	d1ba      	bne.n	8014cb8 <__swsetup_r+0x30>
 8014d42:	bd70      	pop	{r4, r5, r6, pc}
 8014d44:	0792      	lsls	r2, r2, #30
 8014d46:	bf58      	it	pl
 8014d48:	6963      	ldrpl	r3, [r4, #20]
 8014d4a:	60a3      	str	r3, [r4, #8]
 8014d4c:	e7f2      	b.n	8014d34 <__swsetup_r+0xac>
 8014d4e:	2000      	movs	r0, #0
 8014d50:	e7f7      	b.n	8014d42 <__swsetup_r+0xba>
 8014d52:	bf00      	nop
 8014d54:	200001a8 	.word	0x200001a8
 8014d58:	08018218 	.word	0x08018218
 8014d5c:	08018238 	.word	0x08018238
 8014d60:	080181f8 	.word	0x080181f8

08014d64 <quorem>:
 8014d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d68:	6903      	ldr	r3, [r0, #16]
 8014d6a:	690c      	ldr	r4, [r1, #16]
 8014d6c:	42a3      	cmp	r3, r4
 8014d6e:	4680      	mov	r8, r0
 8014d70:	f2c0 8082 	blt.w	8014e78 <quorem+0x114>
 8014d74:	3c01      	subs	r4, #1
 8014d76:	f101 0714 	add.w	r7, r1, #20
 8014d7a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014d7e:	f100 0614 	add.w	r6, r0, #20
 8014d82:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014d86:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014d8a:	eb06 030c 	add.w	r3, r6, ip
 8014d8e:	3501      	adds	r5, #1
 8014d90:	eb07 090c 	add.w	r9, r7, ip
 8014d94:	9301      	str	r3, [sp, #4]
 8014d96:	fbb0 f5f5 	udiv	r5, r0, r5
 8014d9a:	b395      	cbz	r5, 8014e02 <quorem+0x9e>
 8014d9c:	f04f 0a00 	mov.w	sl, #0
 8014da0:	4638      	mov	r0, r7
 8014da2:	46b6      	mov	lr, r6
 8014da4:	46d3      	mov	fp, sl
 8014da6:	f850 2b04 	ldr.w	r2, [r0], #4
 8014daa:	b293      	uxth	r3, r2
 8014dac:	fb05 a303 	mla	r3, r5, r3, sl
 8014db0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014db4:	b29b      	uxth	r3, r3
 8014db6:	ebab 0303 	sub.w	r3, fp, r3
 8014dba:	0c12      	lsrs	r2, r2, #16
 8014dbc:	f8de b000 	ldr.w	fp, [lr]
 8014dc0:	fb05 a202 	mla	r2, r5, r2, sl
 8014dc4:	fa13 f38b 	uxtah	r3, r3, fp
 8014dc8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014dcc:	fa1f fb82 	uxth.w	fp, r2
 8014dd0:	f8de 2000 	ldr.w	r2, [lr]
 8014dd4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014dd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014ddc:	b29b      	uxth	r3, r3
 8014dde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014de2:	4581      	cmp	r9, r0
 8014de4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014de8:	f84e 3b04 	str.w	r3, [lr], #4
 8014dec:	d2db      	bcs.n	8014da6 <quorem+0x42>
 8014dee:	f856 300c 	ldr.w	r3, [r6, ip]
 8014df2:	b933      	cbnz	r3, 8014e02 <quorem+0x9e>
 8014df4:	9b01      	ldr	r3, [sp, #4]
 8014df6:	3b04      	subs	r3, #4
 8014df8:	429e      	cmp	r6, r3
 8014dfa:	461a      	mov	r2, r3
 8014dfc:	d330      	bcc.n	8014e60 <quorem+0xfc>
 8014dfe:	f8c8 4010 	str.w	r4, [r8, #16]
 8014e02:	4640      	mov	r0, r8
 8014e04:	f001 fd0e 	bl	8016824 <__mcmp>
 8014e08:	2800      	cmp	r0, #0
 8014e0a:	db25      	blt.n	8014e58 <quorem+0xf4>
 8014e0c:	3501      	adds	r5, #1
 8014e0e:	4630      	mov	r0, r6
 8014e10:	f04f 0c00 	mov.w	ip, #0
 8014e14:	f857 2b04 	ldr.w	r2, [r7], #4
 8014e18:	f8d0 e000 	ldr.w	lr, [r0]
 8014e1c:	b293      	uxth	r3, r2
 8014e1e:	ebac 0303 	sub.w	r3, ip, r3
 8014e22:	0c12      	lsrs	r2, r2, #16
 8014e24:	fa13 f38e 	uxtah	r3, r3, lr
 8014e28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014e2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014e30:	b29b      	uxth	r3, r3
 8014e32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e36:	45b9      	cmp	r9, r7
 8014e38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014e3c:	f840 3b04 	str.w	r3, [r0], #4
 8014e40:	d2e8      	bcs.n	8014e14 <quorem+0xb0>
 8014e42:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014e46:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014e4a:	b92a      	cbnz	r2, 8014e58 <quorem+0xf4>
 8014e4c:	3b04      	subs	r3, #4
 8014e4e:	429e      	cmp	r6, r3
 8014e50:	461a      	mov	r2, r3
 8014e52:	d30b      	bcc.n	8014e6c <quorem+0x108>
 8014e54:	f8c8 4010 	str.w	r4, [r8, #16]
 8014e58:	4628      	mov	r0, r5
 8014e5a:	b003      	add	sp, #12
 8014e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e60:	6812      	ldr	r2, [r2, #0]
 8014e62:	3b04      	subs	r3, #4
 8014e64:	2a00      	cmp	r2, #0
 8014e66:	d1ca      	bne.n	8014dfe <quorem+0x9a>
 8014e68:	3c01      	subs	r4, #1
 8014e6a:	e7c5      	b.n	8014df8 <quorem+0x94>
 8014e6c:	6812      	ldr	r2, [r2, #0]
 8014e6e:	3b04      	subs	r3, #4
 8014e70:	2a00      	cmp	r2, #0
 8014e72:	d1ef      	bne.n	8014e54 <quorem+0xf0>
 8014e74:	3c01      	subs	r4, #1
 8014e76:	e7ea      	b.n	8014e4e <quorem+0xea>
 8014e78:	2000      	movs	r0, #0
 8014e7a:	e7ee      	b.n	8014e5a <quorem+0xf6>
 8014e7c:	0000      	movs	r0, r0
	...

08014e80 <_dtoa_r>:
 8014e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e84:	ec57 6b10 	vmov	r6, r7, d0
 8014e88:	b095      	sub	sp, #84	; 0x54
 8014e8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014e8c:	9108      	str	r1, [sp, #32]
 8014e8e:	4604      	mov	r4, r0
 8014e90:	920a      	str	r2, [sp, #40]	; 0x28
 8014e92:	9311      	str	r3, [sp, #68]	; 0x44
 8014e94:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8014e98:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014e9c:	b93d      	cbnz	r5, 8014eae <_dtoa_r+0x2e>
 8014e9e:	2010      	movs	r0, #16
 8014ea0:	f001 fa52 	bl	8016348 <malloc>
 8014ea4:	6260      	str	r0, [r4, #36]	; 0x24
 8014ea6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014eaa:	6005      	str	r5, [r0, #0]
 8014eac:	60c5      	str	r5, [r0, #12]
 8014eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014eb0:	6819      	ldr	r1, [r3, #0]
 8014eb2:	b151      	cbz	r1, 8014eca <_dtoa_r+0x4a>
 8014eb4:	685a      	ldr	r2, [r3, #4]
 8014eb6:	604a      	str	r2, [r1, #4]
 8014eb8:	2301      	movs	r3, #1
 8014eba:	4093      	lsls	r3, r2
 8014ebc:	608b      	str	r3, [r1, #8]
 8014ebe:	4620      	mov	r0, r4
 8014ec0:	f001 fa90 	bl	80163e4 <_Bfree>
 8014ec4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	601a      	str	r2, [r3, #0]
 8014eca:	1e3b      	subs	r3, r7, #0
 8014ecc:	bfb9      	ittee	lt
 8014ece:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014ed2:	9303      	strlt	r3, [sp, #12]
 8014ed4:	2300      	movge	r3, #0
 8014ed6:	f8c8 3000 	strge.w	r3, [r8]
 8014eda:	9d03      	ldr	r5, [sp, #12]
 8014edc:	4bac      	ldr	r3, [pc, #688]	; (8015190 <_dtoa_r+0x310>)
 8014ede:	bfbc      	itt	lt
 8014ee0:	2201      	movlt	r2, #1
 8014ee2:	f8c8 2000 	strlt.w	r2, [r8]
 8014ee6:	43ab      	bics	r3, r5
 8014ee8:	d11b      	bne.n	8014f22 <_dtoa_r+0xa2>
 8014eea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014eec:	f242 730f 	movw	r3, #9999	; 0x270f
 8014ef0:	6013      	str	r3, [r2, #0]
 8014ef2:	9b02      	ldr	r3, [sp, #8]
 8014ef4:	b923      	cbnz	r3, 8014f00 <_dtoa_r+0x80>
 8014ef6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014efa:	2d00      	cmp	r5, #0
 8014efc:	f000 84dd 	beq.w	80158ba <_dtoa_r+0xa3a>
 8014f00:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014f02:	b953      	cbnz	r3, 8014f1a <_dtoa_r+0x9a>
 8014f04:	4ba3      	ldr	r3, [pc, #652]	; (8015194 <_dtoa_r+0x314>)
 8014f06:	e020      	b.n	8014f4a <_dtoa_r+0xca>
 8014f08:	4ba3      	ldr	r3, [pc, #652]	; (8015198 <_dtoa_r+0x318>)
 8014f0a:	9304      	str	r3, [sp, #16]
 8014f0c:	3308      	adds	r3, #8
 8014f0e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014f10:	6013      	str	r3, [r2, #0]
 8014f12:	9804      	ldr	r0, [sp, #16]
 8014f14:	b015      	add	sp, #84	; 0x54
 8014f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f1a:	4b9e      	ldr	r3, [pc, #632]	; (8015194 <_dtoa_r+0x314>)
 8014f1c:	9304      	str	r3, [sp, #16]
 8014f1e:	3303      	adds	r3, #3
 8014f20:	e7f5      	b.n	8014f0e <_dtoa_r+0x8e>
 8014f22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014f26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f2e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014f32:	d10c      	bne.n	8014f4e <_dtoa_r+0xce>
 8014f34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014f36:	2301      	movs	r3, #1
 8014f38:	6013      	str	r3, [r2, #0]
 8014f3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	f000 84b9 	beq.w	80158b4 <_dtoa_r+0xa34>
 8014f42:	4b96      	ldr	r3, [pc, #600]	; (801519c <_dtoa_r+0x31c>)
 8014f44:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014f46:	6013      	str	r3, [r2, #0]
 8014f48:	3b01      	subs	r3, #1
 8014f4a:	9304      	str	r3, [sp, #16]
 8014f4c:	e7e1      	b.n	8014f12 <_dtoa_r+0x92>
 8014f4e:	a913      	add	r1, sp, #76	; 0x4c
 8014f50:	aa12      	add	r2, sp, #72	; 0x48
 8014f52:	ed9d 0b04 	vldr	d0, [sp, #16]
 8014f56:	4620      	mov	r0, r4
 8014f58:	f001 fd52 	bl	8016a00 <__d2b>
 8014f5c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8014f60:	9001      	str	r0, [sp, #4]
 8014f62:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014f64:	2e00      	cmp	r6, #0
 8014f66:	d046      	beq.n	8014ff6 <_dtoa_r+0x176>
 8014f68:	9805      	ldr	r0, [sp, #20]
 8014f6a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8014f6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014f72:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8014f76:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014f7a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8014f7e:	2700      	movs	r7, #0
 8014f80:	ee07 aa90 	vmov	s15, sl
 8014f84:	ec43 2b16 	vmov	d6, r2, r3
 8014f88:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8014f8c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8015178 <_dtoa_r+0x2f8>
 8014f90:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8014f94:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014f98:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8015180 <_dtoa_r+0x300>
 8014f9c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8014fa0:	eeb0 7b46 	vmov.f64	d7, d6
 8014fa4:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8015188 <_dtoa_r+0x308>
 8014fa8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014fac:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014fb0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fb8:	ee16 ba90 	vmov	fp, s13
 8014fbc:	d508      	bpl.n	8014fd0 <_dtoa_r+0x150>
 8014fbe:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014fc2:	eeb4 6b47 	vcmp.f64	d6, d7
 8014fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fca:	bf18      	it	ne
 8014fcc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8014fd0:	f1bb 0f16 	cmp.w	fp, #22
 8014fd4:	d834      	bhi.n	8015040 <_dtoa_r+0x1c0>
 8014fd6:	4b72      	ldr	r3, [pc, #456]	; (80151a0 <_dtoa_r+0x320>)
 8014fd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014fdc:	ed93 7b00 	vldr	d7, [r3]
 8014fe0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014fe4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fec:	dd01      	ble.n	8014ff2 <_dtoa_r+0x172>
 8014fee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	e025      	b.n	8015042 <_dtoa_r+0x1c2>
 8014ff6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014ff8:	eb01 0a03 	add.w	sl, r1, r3
 8014ffc:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8015000:	2b20      	cmp	r3, #32
 8015002:	dd17      	ble.n	8015034 <_dtoa_r+0x1b4>
 8015004:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8015008:	9a02      	ldr	r2, [sp, #8]
 801500a:	409d      	lsls	r5, r3
 801500c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8015010:	fa22 f303 	lsr.w	r3, r2, r3
 8015014:	432b      	orrs	r3, r5
 8015016:	ee07 3a90 	vmov	s15, r3
 801501a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801501e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015022:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015026:	9805      	ldr	r0, [sp, #20]
 8015028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801502c:	2701      	movs	r7, #1
 801502e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8015032:	e7a5      	b.n	8014f80 <_dtoa_r+0x100>
 8015034:	9a02      	ldr	r2, [sp, #8]
 8015036:	f1c3 0320 	rsb	r3, r3, #32
 801503a:	fa02 f303 	lsl.w	r3, r2, r3
 801503e:	e7ea      	b.n	8015016 <_dtoa_r+0x196>
 8015040:	2301      	movs	r3, #1
 8015042:	eba1 0a0a 	sub.w	sl, r1, sl
 8015046:	9310      	str	r3, [sp, #64]	; 0x40
 8015048:	f1ba 0301 	subs.w	r3, sl, #1
 801504c:	9307      	str	r3, [sp, #28]
 801504e:	bf43      	ittte	mi
 8015050:	2300      	movmi	r3, #0
 8015052:	f1ca 0a01 	rsbmi	sl, sl, #1
 8015056:	9307      	strmi	r3, [sp, #28]
 8015058:	f04f 0a00 	movpl.w	sl, #0
 801505c:	f1bb 0f00 	cmp.w	fp, #0
 8015060:	db19      	blt.n	8015096 <_dtoa_r+0x216>
 8015062:	9b07      	ldr	r3, [sp, #28]
 8015064:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8015068:	445b      	add	r3, fp
 801506a:	9307      	str	r3, [sp, #28]
 801506c:	f04f 0800 	mov.w	r8, #0
 8015070:	9b08      	ldr	r3, [sp, #32]
 8015072:	2b09      	cmp	r3, #9
 8015074:	d866      	bhi.n	8015144 <_dtoa_r+0x2c4>
 8015076:	2b05      	cmp	r3, #5
 8015078:	bfc4      	itt	gt
 801507a:	3b04      	subgt	r3, #4
 801507c:	9308      	strgt	r3, [sp, #32]
 801507e:	9b08      	ldr	r3, [sp, #32]
 8015080:	f1a3 0302 	sub.w	r3, r3, #2
 8015084:	bfcc      	ite	gt
 8015086:	2500      	movgt	r5, #0
 8015088:	2501      	movle	r5, #1
 801508a:	2b03      	cmp	r3, #3
 801508c:	d866      	bhi.n	801515c <_dtoa_r+0x2dc>
 801508e:	e8df f003 	tbb	[pc, r3]
 8015092:	5755      	.short	0x5755
 8015094:	4909      	.short	0x4909
 8015096:	2300      	movs	r3, #0
 8015098:	ebaa 0a0b 	sub.w	sl, sl, fp
 801509c:	f1cb 0800 	rsb	r8, fp, #0
 80150a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80150a2:	e7e5      	b.n	8015070 <_dtoa_r+0x1f0>
 80150a4:	2301      	movs	r3, #1
 80150a6:	9309      	str	r3, [sp, #36]	; 0x24
 80150a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	dd59      	ble.n	8015162 <_dtoa_r+0x2e2>
 80150ae:	9306      	str	r3, [sp, #24]
 80150b0:	4699      	mov	r9, r3
 80150b2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80150b4:	2200      	movs	r2, #0
 80150b6:	6072      	str	r2, [r6, #4]
 80150b8:	2204      	movs	r2, #4
 80150ba:	f102 0014 	add.w	r0, r2, #20
 80150be:	4298      	cmp	r0, r3
 80150c0:	6871      	ldr	r1, [r6, #4]
 80150c2:	d953      	bls.n	801516c <_dtoa_r+0x2ec>
 80150c4:	4620      	mov	r0, r4
 80150c6:	f001 f959 	bl	801637c <_Balloc>
 80150ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150cc:	6030      	str	r0, [r6, #0]
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	9304      	str	r3, [sp, #16]
 80150d2:	f1b9 0f0e 	cmp.w	r9, #14
 80150d6:	f200 80c2 	bhi.w	801525e <_dtoa_r+0x3de>
 80150da:	2d00      	cmp	r5, #0
 80150dc:	f000 80bf 	beq.w	801525e <_dtoa_r+0x3de>
 80150e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80150e4:	f1bb 0f00 	cmp.w	fp, #0
 80150e8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80150ec:	f340 80e6 	ble.w	80152bc <_dtoa_r+0x43c>
 80150f0:	4a2b      	ldr	r2, [pc, #172]	; (80151a0 <_dtoa_r+0x320>)
 80150f2:	f00b 030f 	and.w	r3, fp, #15
 80150f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80150fa:	ed93 7b00 	vldr	d7, [r3]
 80150fe:	ea4f 132b 	mov.w	r3, fp, asr #4
 8015102:	06da      	lsls	r2, r3, #27
 8015104:	f140 80d8 	bpl.w	80152b8 <_dtoa_r+0x438>
 8015108:	4a26      	ldr	r2, [pc, #152]	; (80151a4 <_dtoa_r+0x324>)
 801510a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 801510e:	ed92 6b08 	vldr	d6, [r2, #32]
 8015112:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8015116:	ed8d 6b02 	vstr	d6, [sp, #8]
 801511a:	f003 030f 	and.w	r3, r3, #15
 801511e:	2203      	movs	r2, #3
 8015120:	4920      	ldr	r1, [pc, #128]	; (80151a4 <_dtoa_r+0x324>)
 8015122:	e04a      	b.n	80151ba <_dtoa_r+0x33a>
 8015124:	2301      	movs	r3, #1
 8015126:	9309      	str	r3, [sp, #36]	; 0x24
 8015128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801512a:	445b      	add	r3, fp
 801512c:	f103 0901 	add.w	r9, r3, #1
 8015130:	9306      	str	r3, [sp, #24]
 8015132:	464b      	mov	r3, r9
 8015134:	2b01      	cmp	r3, #1
 8015136:	bfb8      	it	lt
 8015138:	2301      	movlt	r3, #1
 801513a:	e7ba      	b.n	80150b2 <_dtoa_r+0x232>
 801513c:	2300      	movs	r3, #0
 801513e:	e7b2      	b.n	80150a6 <_dtoa_r+0x226>
 8015140:	2300      	movs	r3, #0
 8015142:	e7f0      	b.n	8015126 <_dtoa_r+0x2a6>
 8015144:	2501      	movs	r5, #1
 8015146:	2300      	movs	r3, #0
 8015148:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801514c:	f04f 33ff 	mov.w	r3, #4294967295
 8015150:	9306      	str	r3, [sp, #24]
 8015152:	4699      	mov	r9, r3
 8015154:	2200      	movs	r2, #0
 8015156:	2312      	movs	r3, #18
 8015158:	920a      	str	r2, [sp, #40]	; 0x28
 801515a:	e7aa      	b.n	80150b2 <_dtoa_r+0x232>
 801515c:	2301      	movs	r3, #1
 801515e:	9309      	str	r3, [sp, #36]	; 0x24
 8015160:	e7f4      	b.n	801514c <_dtoa_r+0x2cc>
 8015162:	2301      	movs	r3, #1
 8015164:	9306      	str	r3, [sp, #24]
 8015166:	4699      	mov	r9, r3
 8015168:	461a      	mov	r2, r3
 801516a:	e7f5      	b.n	8015158 <_dtoa_r+0x2d8>
 801516c:	3101      	adds	r1, #1
 801516e:	6071      	str	r1, [r6, #4]
 8015170:	0052      	lsls	r2, r2, #1
 8015172:	e7a2      	b.n	80150ba <_dtoa_r+0x23a>
 8015174:	f3af 8000 	nop.w
 8015178:	636f4361 	.word	0x636f4361
 801517c:	3fd287a7 	.word	0x3fd287a7
 8015180:	8b60c8b3 	.word	0x8b60c8b3
 8015184:	3fc68a28 	.word	0x3fc68a28
 8015188:	509f79fb 	.word	0x509f79fb
 801518c:	3fd34413 	.word	0x3fd34413
 8015190:	7ff00000 	.word	0x7ff00000
 8015194:	080181f1 	.word	0x080181f1
 8015198:	080181e8 	.word	0x080181e8
 801519c:	08018169 	.word	0x08018169
 80151a0:	08018290 	.word	0x08018290
 80151a4:	08018268 	.word	0x08018268
 80151a8:	07de      	lsls	r6, r3, #31
 80151aa:	d504      	bpl.n	80151b6 <_dtoa_r+0x336>
 80151ac:	ed91 6b00 	vldr	d6, [r1]
 80151b0:	3201      	adds	r2, #1
 80151b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80151b6:	105b      	asrs	r3, r3, #1
 80151b8:	3108      	adds	r1, #8
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d1f4      	bne.n	80151a8 <_dtoa_r+0x328>
 80151be:	ed9d 6b02 	vldr	d6, [sp, #8]
 80151c2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80151c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80151ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	f000 80a7 	beq.w	8015320 <_dtoa_r+0x4a0>
 80151d2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80151d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80151da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80151de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151e2:	f140 809d 	bpl.w	8015320 <_dtoa_r+0x4a0>
 80151e6:	f1b9 0f00 	cmp.w	r9, #0
 80151ea:	f000 8099 	beq.w	8015320 <_dtoa_r+0x4a0>
 80151ee:	9b06      	ldr	r3, [sp, #24]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	dd30      	ble.n	8015256 <_dtoa_r+0x3d6>
 80151f4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80151f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80151fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015200:	9d06      	ldr	r5, [sp, #24]
 8015202:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015206:	3201      	adds	r2, #1
 8015208:	ed9d 6b02 	vldr	d6, [sp, #8]
 801520c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8015210:	ee07 2a90 	vmov	s15, r2
 8015214:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015218:	eea7 5b06 	vfma.f64	d5, d7, d6
 801521c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8015220:	9a03      	ldr	r2, [sp, #12]
 8015222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015226:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801522a:	2d00      	cmp	r5, #0
 801522c:	d17b      	bne.n	8015326 <_dtoa_r+0x4a6>
 801522e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015232:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015236:	ec41 0b17 	vmov	d7, r0, r1
 801523a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801523e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015242:	f300 8253 	bgt.w	80156ec <_dtoa_r+0x86c>
 8015246:	eeb1 7b47 	vneg.f64	d7, d7
 801524a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801524e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015252:	f100 8249 	bmi.w	80156e8 <_dtoa_r+0x868>
 8015256:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801525a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801525e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015260:	2b00      	cmp	r3, #0
 8015262:	f2c0 8119 	blt.w	8015498 <_dtoa_r+0x618>
 8015266:	f1bb 0f0e 	cmp.w	fp, #14
 801526a:	f300 8115 	bgt.w	8015498 <_dtoa_r+0x618>
 801526e:	4bc3      	ldr	r3, [pc, #780]	; (801557c <_dtoa_r+0x6fc>)
 8015270:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015274:	ed93 6b00 	vldr	d6, [r3]
 8015278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801527a:	2b00      	cmp	r3, #0
 801527c:	f280 80ba 	bge.w	80153f4 <_dtoa_r+0x574>
 8015280:	f1b9 0f00 	cmp.w	r9, #0
 8015284:	f300 80b6 	bgt.w	80153f4 <_dtoa_r+0x574>
 8015288:	f040 822d 	bne.w	80156e6 <_dtoa_r+0x866>
 801528c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015290:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015294:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015298:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801529c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152a0:	464d      	mov	r5, r9
 80152a2:	464f      	mov	r7, r9
 80152a4:	f280 8204 	bge.w	80156b0 <_dtoa_r+0x830>
 80152a8:	9b04      	ldr	r3, [sp, #16]
 80152aa:	9a04      	ldr	r2, [sp, #16]
 80152ac:	1c5e      	adds	r6, r3, #1
 80152ae:	2331      	movs	r3, #49	; 0x31
 80152b0:	7013      	strb	r3, [r2, #0]
 80152b2:	f10b 0b01 	add.w	fp, fp, #1
 80152b6:	e1ff      	b.n	80156b8 <_dtoa_r+0x838>
 80152b8:	2202      	movs	r2, #2
 80152ba:	e731      	b.n	8015120 <_dtoa_r+0x2a0>
 80152bc:	d02e      	beq.n	801531c <_dtoa_r+0x49c>
 80152be:	f1cb 0300 	rsb	r3, fp, #0
 80152c2:	4aae      	ldr	r2, [pc, #696]	; (801557c <_dtoa_r+0x6fc>)
 80152c4:	f003 010f 	and.w	r1, r3, #15
 80152c8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80152cc:	ed92 7b00 	vldr	d7, [r2]
 80152d0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80152d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80152d8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80152dc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80152e0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80152e4:	49a6      	ldr	r1, [pc, #664]	; (8015580 <_dtoa_r+0x700>)
 80152e6:	111b      	asrs	r3, r3, #4
 80152e8:	2000      	movs	r0, #0
 80152ea:	2202      	movs	r2, #2
 80152ec:	b93b      	cbnz	r3, 80152fe <_dtoa_r+0x47e>
 80152ee:	2800      	cmp	r0, #0
 80152f0:	f43f af6b 	beq.w	80151ca <_dtoa_r+0x34a>
 80152f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80152f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80152fc:	e765      	b.n	80151ca <_dtoa_r+0x34a>
 80152fe:	07dd      	lsls	r5, r3, #31
 8015300:	d509      	bpl.n	8015316 <_dtoa_r+0x496>
 8015302:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8015306:	ed91 7b00 	vldr	d7, [r1]
 801530a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801530e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8015312:	3201      	adds	r2, #1
 8015314:	2001      	movs	r0, #1
 8015316:	105b      	asrs	r3, r3, #1
 8015318:	3108      	adds	r1, #8
 801531a:	e7e7      	b.n	80152ec <_dtoa_r+0x46c>
 801531c:	2202      	movs	r2, #2
 801531e:	e754      	b.n	80151ca <_dtoa_r+0x34a>
 8015320:	465b      	mov	r3, fp
 8015322:	464d      	mov	r5, r9
 8015324:	e770      	b.n	8015208 <_dtoa_r+0x388>
 8015326:	4a95      	ldr	r2, [pc, #596]	; (801557c <_dtoa_r+0x6fc>)
 8015328:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801532c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015332:	ec41 0b17 	vmov	d7, r0, r1
 8015336:	b35a      	cbz	r2, 8015390 <_dtoa_r+0x510>
 8015338:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801533c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8015340:	9e04      	ldr	r6, [sp, #16]
 8015342:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015346:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801534a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801534e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015352:	ee14 2a90 	vmov	r2, s9
 8015356:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801535a:	3230      	adds	r2, #48	; 0x30
 801535c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015360:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015368:	f806 2b01 	strb.w	r2, [r6], #1
 801536c:	d43b      	bmi.n	80153e6 <_dtoa_r+0x566>
 801536e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015372:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801537a:	d472      	bmi.n	8015462 <_dtoa_r+0x5e2>
 801537c:	9a04      	ldr	r2, [sp, #16]
 801537e:	1ab2      	subs	r2, r6, r2
 8015380:	4295      	cmp	r5, r2
 8015382:	f77f af68 	ble.w	8015256 <_dtoa_r+0x3d6>
 8015386:	ee27 7b03 	vmul.f64	d7, d7, d3
 801538a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801538e:	e7de      	b.n	801534e <_dtoa_r+0x4ce>
 8015390:	9a04      	ldr	r2, [sp, #16]
 8015392:	ee24 7b07 	vmul.f64	d7, d4, d7
 8015396:	1956      	adds	r6, r2, r5
 8015398:	4611      	mov	r1, r2
 801539a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801539e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80153a2:	ee14 2a90 	vmov	r2, s9
 80153a6:	3230      	adds	r2, #48	; 0x30
 80153a8:	f801 2b01 	strb.w	r2, [r1], #1
 80153ac:	42b1      	cmp	r1, r6
 80153ae:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80153b2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80153b6:	d11a      	bne.n	80153ee <_dtoa_r+0x56e>
 80153b8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80153bc:	ee37 4b05 	vadd.f64	d4, d7, d5
 80153c0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80153c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153c8:	dc4b      	bgt.n	8015462 <_dtoa_r+0x5e2>
 80153ca:	ee35 7b47 	vsub.f64	d7, d5, d7
 80153ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80153d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153d6:	f57f af3e 	bpl.w	8015256 <_dtoa_r+0x3d6>
 80153da:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80153de:	2a30      	cmp	r2, #48	; 0x30
 80153e0:	f106 31ff 	add.w	r1, r6, #4294967295
 80153e4:	d001      	beq.n	80153ea <_dtoa_r+0x56a>
 80153e6:	469b      	mov	fp, r3
 80153e8:	e02a      	b.n	8015440 <_dtoa_r+0x5c0>
 80153ea:	460e      	mov	r6, r1
 80153ec:	e7f5      	b.n	80153da <_dtoa_r+0x55a>
 80153ee:	ee26 6b03 	vmul.f64	d6, d6, d3
 80153f2:	e7d4      	b.n	801539e <_dtoa_r+0x51e>
 80153f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80153f8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80153fc:	9e04      	ldr	r6, [sp, #16]
 80153fe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015402:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8015406:	ee15 3a10 	vmov	r3, s10
 801540a:	3330      	adds	r3, #48	; 0x30
 801540c:	f806 3b01 	strb.w	r3, [r6], #1
 8015410:	9b04      	ldr	r3, [sp, #16]
 8015412:	1af3      	subs	r3, r6, r3
 8015414:	4599      	cmp	r9, r3
 8015416:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801541a:	eea3 7b46 	vfms.f64	d7, d3, d6
 801541e:	d133      	bne.n	8015488 <_dtoa_r+0x608>
 8015420:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015424:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801542c:	dc18      	bgt.n	8015460 <_dtoa_r+0x5e0>
 801542e:	eeb4 7b46 	vcmp.f64	d7, d6
 8015432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015436:	d103      	bne.n	8015440 <_dtoa_r+0x5c0>
 8015438:	ee15 3a10 	vmov	r3, s10
 801543c:	07db      	lsls	r3, r3, #31
 801543e:	d40f      	bmi.n	8015460 <_dtoa_r+0x5e0>
 8015440:	9901      	ldr	r1, [sp, #4]
 8015442:	4620      	mov	r0, r4
 8015444:	f000 ffce 	bl	80163e4 <_Bfree>
 8015448:	2300      	movs	r3, #0
 801544a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801544c:	7033      	strb	r3, [r6, #0]
 801544e:	f10b 0301 	add.w	r3, fp, #1
 8015452:	6013      	str	r3, [r2, #0]
 8015454:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015456:	2b00      	cmp	r3, #0
 8015458:	f43f ad5b 	beq.w	8014f12 <_dtoa_r+0x92>
 801545c:	601e      	str	r6, [r3, #0]
 801545e:	e558      	b.n	8014f12 <_dtoa_r+0x92>
 8015460:	465b      	mov	r3, fp
 8015462:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8015466:	2939      	cmp	r1, #57	; 0x39
 8015468:	f106 32ff 	add.w	r2, r6, #4294967295
 801546c:	d106      	bne.n	801547c <_dtoa_r+0x5fc>
 801546e:	9904      	ldr	r1, [sp, #16]
 8015470:	4291      	cmp	r1, r2
 8015472:	d107      	bne.n	8015484 <_dtoa_r+0x604>
 8015474:	2230      	movs	r2, #48	; 0x30
 8015476:	700a      	strb	r2, [r1, #0]
 8015478:	3301      	adds	r3, #1
 801547a:	460a      	mov	r2, r1
 801547c:	7811      	ldrb	r1, [r2, #0]
 801547e:	3101      	adds	r1, #1
 8015480:	7011      	strb	r1, [r2, #0]
 8015482:	e7b0      	b.n	80153e6 <_dtoa_r+0x566>
 8015484:	4616      	mov	r6, r2
 8015486:	e7ec      	b.n	8015462 <_dtoa_r+0x5e2>
 8015488:	ee27 7b04 	vmul.f64	d7, d7, d4
 801548c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015494:	d1b3      	bne.n	80153fe <_dtoa_r+0x57e>
 8015496:	e7d3      	b.n	8015440 <_dtoa_r+0x5c0>
 8015498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801549a:	2a00      	cmp	r2, #0
 801549c:	f000 808d 	beq.w	80155ba <_dtoa_r+0x73a>
 80154a0:	9a08      	ldr	r2, [sp, #32]
 80154a2:	2a01      	cmp	r2, #1
 80154a4:	dc72      	bgt.n	801558c <_dtoa_r+0x70c>
 80154a6:	2f00      	cmp	r7, #0
 80154a8:	d06c      	beq.n	8015584 <_dtoa_r+0x704>
 80154aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80154ae:	4645      	mov	r5, r8
 80154b0:	4656      	mov	r6, sl
 80154b2:	9a07      	ldr	r2, [sp, #28]
 80154b4:	2101      	movs	r1, #1
 80154b6:	441a      	add	r2, r3
 80154b8:	4620      	mov	r0, r4
 80154ba:	449a      	add	sl, r3
 80154bc:	9207      	str	r2, [sp, #28]
 80154be:	f001 f86f 	bl	80165a0 <__i2b>
 80154c2:	4607      	mov	r7, r0
 80154c4:	2e00      	cmp	r6, #0
 80154c6:	dd0b      	ble.n	80154e0 <_dtoa_r+0x660>
 80154c8:	9b07      	ldr	r3, [sp, #28]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	dd08      	ble.n	80154e0 <_dtoa_r+0x660>
 80154ce:	42b3      	cmp	r3, r6
 80154d0:	9a07      	ldr	r2, [sp, #28]
 80154d2:	bfa8      	it	ge
 80154d4:	4633      	movge	r3, r6
 80154d6:	ebaa 0a03 	sub.w	sl, sl, r3
 80154da:	1af6      	subs	r6, r6, r3
 80154dc:	1ad3      	subs	r3, r2, r3
 80154de:	9307      	str	r3, [sp, #28]
 80154e0:	f1b8 0f00 	cmp.w	r8, #0
 80154e4:	d01d      	beq.n	8015522 <_dtoa_r+0x6a2>
 80154e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d06a      	beq.n	80155c2 <_dtoa_r+0x742>
 80154ec:	b18d      	cbz	r5, 8015512 <_dtoa_r+0x692>
 80154ee:	4639      	mov	r1, r7
 80154f0:	462a      	mov	r2, r5
 80154f2:	4620      	mov	r0, r4
 80154f4:	f001 f8f4 	bl	80166e0 <__pow5mult>
 80154f8:	9a01      	ldr	r2, [sp, #4]
 80154fa:	4601      	mov	r1, r0
 80154fc:	4607      	mov	r7, r0
 80154fe:	4620      	mov	r0, r4
 8015500:	f001 f857 	bl	80165b2 <__multiply>
 8015504:	9901      	ldr	r1, [sp, #4]
 8015506:	900c      	str	r0, [sp, #48]	; 0x30
 8015508:	4620      	mov	r0, r4
 801550a:	f000 ff6b 	bl	80163e4 <_Bfree>
 801550e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015510:	9301      	str	r3, [sp, #4]
 8015512:	ebb8 0205 	subs.w	r2, r8, r5
 8015516:	d004      	beq.n	8015522 <_dtoa_r+0x6a2>
 8015518:	9901      	ldr	r1, [sp, #4]
 801551a:	4620      	mov	r0, r4
 801551c:	f001 f8e0 	bl	80166e0 <__pow5mult>
 8015520:	9001      	str	r0, [sp, #4]
 8015522:	2101      	movs	r1, #1
 8015524:	4620      	mov	r0, r4
 8015526:	f001 f83b 	bl	80165a0 <__i2b>
 801552a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801552c:	4605      	mov	r5, r0
 801552e:	2b00      	cmp	r3, #0
 8015530:	f000 81ca 	beq.w	80158c8 <_dtoa_r+0xa48>
 8015534:	461a      	mov	r2, r3
 8015536:	4601      	mov	r1, r0
 8015538:	4620      	mov	r0, r4
 801553a:	f001 f8d1 	bl	80166e0 <__pow5mult>
 801553e:	9b08      	ldr	r3, [sp, #32]
 8015540:	2b01      	cmp	r3, #1
 8015542:	4605      	mov	r5, r0
 8015544:	dc44      	bgt.n	80155d0 <_dtoa_r+0x750>
 8015546:	9b02      	ldr	r3, [sp, #8]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d13c      	bne.n	80155c6 <_dtoa_r+0x746>
 801554c:	9b03      	ldr	r3, [sp, #12]
 801554e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015552:	2b00      	cmp	r3, #0
 8015554:	d137      	bne.n	80155c6 <_dtoa_r+0x746>
 8015556:	9b03      	ldr	r3, [sp, #12]
 8015558:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801555c:	0d1b      	lsrs	r3, r3, #20
 801555e:	051b      	lsls	r3, r3, #20
 8015560:	2b00      	cmp	r3, #0
 8015562:	d033      	beq.n	80155cc <_dtoa_r+0x74c>
 8015564:	9b07      	ldr	r3, [sp, #28]
 8015566:	3301      	adds	r3, #1
 8015568:	f10a 0a01 	add.w	sl, sl, #1
 801556c:	9307      	str	r3, [sp, #28]
 801556e:	f04f 0801 	mov.w	r8, #1
 8015572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015574:	bb73      	cbnz	r3, 80155d4 <_dtoa_r+0x754>
 8015576:	2001      	movs	r0, #1
 8015578:	e034      	b.n	80155e4 <_dtoa_r+0x764>
 801557a:	bf00      	nop
 801557c:	08018290 	.word	0x08018290
 8015580:	08018268 	.word	0x08018268
 8015584:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015586:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801558a:	e790      	b.n	80154ae <_dtoa_r+0x62e>
 801558c:	f109 35ff 	add.w	r5, r9, #4294967295
 8015590:	45a8      	cmp	r8, r5
 8015592:	bfbf      	itttt	lt
 8015594:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8015596:	eba5 0808 	sublt.w	r8, r5, r8
 801559a:	4443      	addlt	r3, r8
 801559c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801559e:	bfb6      	itet	lt
 80155a0:	46a8      	movlt	r8, r5
 80155a2:	eba8 0505 	subge.w	r5, r8, r5
 80155a6:	2500      	movlt	r5, #0
 80155a8:	f1b9 0f00 	cmp.w	r9, #0
 80155ac:	bfb9      	ittee	lt
 80155ae:	ebaa 0609 	sublt.w	r6, sl, r9
 80155b2:	2300      	movlt	r3, #0
 80155b4:	4656      	movge	r6, sl
 80155b6:	464b      	movge	r3, r9
 80155b8:	e77b      	b.n	80154b2 <_dtoa_r+0x632>
 80155ba:	4645      	mov	r5, r8
 80155bc:	4656      	mov	r6, sl
 80155be:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80155c0:	e780      	b.n	80154c4 <_dtoa_r+0x644>
 80155c2:	4642      	mov	r2, r8
 80155c4:	e7a8      	b.n	8015518 <_dtoa_r+0x698>
 80155c6:	f04f 0800 	mov.w	r8, #0
 80155ca:	e7d2      	b.n	8015572 <_dtoa_r+0x6f2>
 80155cc:	4698      	mov	r8, r3
 80155ce:	e7d0      	b.n	8015572 <_dtoa_r+0x6f2>
 80155d0:	f04f 0800 	mov.w	r8, #0
 80155d4:	692b      	ldr	r3, [r5, #16]
 80155d6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80155da:	6918      	ldr	r0, [r3, #16]
 80155dc:	f000 ff92 	bl	8016504 <__hi0bits>
 80155e0:	f1c0 0020 	rsb	r0, r0, #32
 80155e4:	9b07      	ldr	r3, [sp, #28]
 80155e6:	4418      	add	r0, r3
 80155e8:	f010 001f 	ands.w	r0, r0, #31
 80155ec:	d047      	beq.n	801567e <_dtoa_r+0x7fe>
 80155ee:	f1c0 0320 	rsb	r3, r0, #32
 80155f2:	2b04      	cmp	r3, #4
 80155f4:	dd3b      	ble.n	801566e <_dtoa_r+0x7ee>
 80155f6:	9b07      	ldr	r3, [sp, #28]
 80155f8:	f1c0 001c 	rsb	r0, r0, #28
 80155fc:	4482      	add	sl, r0
 80155fe:	4406      	add	r6, r0
 8015600:	4403      	add	r3, r0
 8015602:	9307      	str	r3, [sp, #28]
 8015604:	f1ba 0f00 	cmp.w	sl, #0
 8015608:	dd05      	ble.n	8015616 <_dtoa_r+0x796>
 801560a:	4652      	mov	r2, sl
 801560c:	9901      	ldr	r1, [sp, #4]
 801560e:	4620      	mov	r0, r4
 8015610:	f001 f8b4 	bl	801677c <__lshift>
 8015614:	9001      	str	r0, [sp, #4]
 8015616:	9b07      	ldr	r3, [sp, #28]
 8015618:	2b00      	cmp	r3, #0
 801561a:	dd05      	ble.n	8015628 <_dtoa_r+0x7a8>
 801561c:	4629      	mov	r1, r5
 801561e:	461a      	mov	r2, r3
 8015620:	4620      	mov	r0, r4
 8015622:	f001 f8ab 	bl	801677c <__lshift>
 8015626:	4605      	mov	r5, r0
 8015628:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801562a:	b353      	cbz	r3, 8015682 <_dtoa_r+0x802>
 801562c:	4629      	mov	r1, r5
 801562e:	9801      	ldr	r0, [sp, #4]
 8015630:	f001 f8f8 	bl	8016824 <__mcmp>
 8015634:	2800      	cmp	r0, #0
 8015636:	da24      	bge.n	8015682 <_dtoa_r+0x802>
 8015638:	2300      	movs	r3, #0
 801563a:	220a      	movs	r2, #10
 801563c:	9901      	ldr	r1, [sp, #4]
 801563e:	4620      	mov	r0, r4
 8015640:	f000 fee7 	bl	8016412 <__multadd>
 8015644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015646:	9001      	str	r0, [sp, #4]
 8015648:	f10b 3bff 	add.w	fp, fp, #4294967295
 801564c:	2b00      	cmp	r3, #0
 801564e:	f000 8142 	beq.w	80158d6 <_dtoa_r+0xa56>
 8015652:	2300      	movs	r3, #0
 8015654:	4639      	mov	r1, r7
 8015656:	220a      	movs	r2, #10
 8015658:	4620      	mov	r0, r4
 801565a:	f000 feda 	bl	8016412 <__multadd>
 801565e:	9b06      	ldr	r3, [sp, #24]
 8015660:	2b00      	cmp	r3, #0
 8015662:	4607      	mov	r7, r0
 8015664:	dc4b      	bgt.n	80156fe <_dtoa_r+0x87e>
 8015666:	9b08      	ldr	r3, [sp, #32]
 8015668:	2b02      	cmp	r3, #2
 801566a:	dd48      	ble.n	80156fe <_dtoa_r+0x87e>
 801566c:	e011      	b.n	8015692 <_dtoa_r+0x812>
 801566e:	d0c9      	beq.n	8015604 <_dtoa_r+0x784>
 8015670:	9a07      	ldr	r2, [sp, #28]
 8015672:	331c      	adds	r3, #28
 8015674:	441a      	add	r2, r3
 8015676:	449a      	add	sl, r3
 8015678:	441e      	add	r6, r3
 801567a:	4613      	mov	r3, r2
 801567c:	e7c1      	b.n	8015602 <_dtoa_r+0x782>
 801567e:	4603      	mov	r3, r0
 8015680:	e7f6      	b.n	8015670 <_dtoa_r+0x7f0>
 8015682:	f1b9 0f00 	cmp.w	r9, #0
 8015686:	dc34      	bgt.n	80156f2 <_dtoa_r+0x872>
 8015688:	9b08      	ldr	r3, [sp, #32]
 801568a:	2b02      	cmp	r3, #2
 801568c:	dd31      	ble.n	80156f2 <_dtoa_r+0x872>
 801568e:	f8cd 9018 	str.w	r9, [sp, #24]
 8015692:	9b06      	ldr	r3, [sp, #24]
 8015694:	b963      	cbnz	r3, 80156b0 <_dtoa_r+0x830>
 8015696:	4629      	mov	r1, r5
 8015698:	2205      	movs	r2, #5
 801569a:	4620      	mov	r0, r4
 801569c:	f000 feb9 	bl	8016412 <__multadd>
 80156a0:	4601      	mov	r1, r0
 80156a2:	4605      	mov	r5, r0
 80156a4:	9801      	ldr	r0, [sp, #4]
 80156a6:	f001 f8bd 	bl	8016824 <__mcmp>
 80156aa:	2800      	cmp	r0, #0
 80156ac:	f73f adfc 	bgt.w	80152a8 <_dtoa_r+0x428>
 80156b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156b2:	9e04      	ldr	r6, [sp, #16]
 80156b4:	ea6f 0b03 	mvn.w	fp, r3
 80156b8:	f04f 0900 	mov.w	r9, #0
 80156bc:	4629      	mov	r1, r5
 80156be:	4620      	mov	r0, r4
 80156c0:	f000 fe90 	bl	80163e4 <_Bfree>
 80156c4:	2f00      	cmp	r7, #0
 80156c6:	f43f aebb 	beq.w	8015440 <_dtoa_r+0x5c0>
 80156ca:	f1b9 0f00 	cmp.w	r9, #0
 80156ce:	d005      	beq.n	80156dc <_dtoa_r+0x85c>
 80156d0:	45b9      	cmp	r9, r7
 80156d2:	d003      	beq.n	80156dc <_dtoa_r+0x85c>
 80156d4:	4649      	mov	r1, r9
 80156d6:	4620      	mov	r0, r4
 80156d8:	f000 fe84 	bl	80163e4 <_Bfree>
 80156dc:	4639      	mov	r1, r7
 80156de:	4620      	mov	r0, r4
 80156e0:	f000 fe80 	bl	80163e4 <_Bfree>
 80156e4:	e6ac      	b.n	8015440 <_dtoa_r+0x5c0>
 80156e6:	2500      	movs	r5, #0
 80156e8:	462f      	mov	r7, r5
 80156ea:	e7e1      	b.n	80156b0 <_dtoa_r+0x830>
 80156ec:	469b      	mov	fp, r3
 80156ee:	462f      	mov	r7, r5
 80156f0:	e5da      	b.n	80152a8 <_dtoa_r+0x428>
 80156f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156f4:	f8cd 9018 	str.w	r9, [sp, #24]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	f000 80f3 	beq.w	80158e4 <_dtoa_r+0xa64>
 80156fe:	2e00      	cmp	r6, #0
 8015700:	dd05      	ble.n	801570e <_dtoa_r+0x88e>
 8015702:	4639      	mov	r1, r7
 8015704:	4632      	mov	r2, r6
 8015706:	4620      	mov	r0, r4
 8015708:	f001 f838 	bl	801677c <__lshift>
 801570c:	4607      	mov	r7, r0
 801570e:	f1b8 0f00 	cmp.w	r8, #0
 8015712:	d04c      	beq.n	80157ae <_dtoa_r+0x92e>
 8015714:	6879      	ldr	r1, [r7, #4]
 8015716:	4620      	mov	r0, r4
 8015718:	f000 fe30 	bl	801637c <_Balloc>
 801571c:	693a      	ldr	r2, [r7, #16]
 801571e:	3202      	adds	r2, #2
 8015720:	4606      	mov	r6, r0
 8015722:	0092      	lsls	r2, r2, #2
 8015724:	f107 010c 	add.w	r1, r7, #12
 8015728:	300c      	adds	r0, #12
 801572a:	f7fd fd2b 	bl	8013184 <memcpy>
 801572e:	2201      	movs	r2, #1
 8015730:	4631      	mov	r1, r6
 8015732:	4620      	mov	r0, r4
 8015734:	f001 f822 	bl	801677c <__lshift>
 8015738:	9b02      	ldr	r3, [sp, #8]
 801573a:	f8dd a010 	ldr.w	sl, [sp, #16]
 801573e:	f003 0301 	and.w	r3, r3, #1
 8015742:	46b9      	mov	r9, r7
 8015744:	9307      	str	r3, [sp, #28]
 8015746:	4607      	mov	r7, r0
 8015748:	4629      	mov	r1, r5
 801574a:	9801      	ldr	r0, [sp, #4]
 801574c:	f7ff fb0a 	bl	8014d64 <quorem>
 8015750:	4649      	mov	r1, r9
 8015752:	4606      	mov	r6, r0
 8015754:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015758:	9801      	ldr	r0, [sp, #4]
 801575a:	f001 f863 	bl	8016824 <__mcmp>
 801575e:	463a      	mov	r2, r7
 8015760:	9002      	str	r0, [sp, #8]
 8015762:	4629      	mov	r1, r5
 8015764:	4620      	mov	r0, r4
 8015766:	f001 f877 	bl	8016858 <__mdiff>
 801576a:	68c3      	ldr	r3, [r0, #12]
 801576c:	4602      	mov	r2, r0
 801576e:	bb03      	cbnz	r3, 80157b2 <_dtoa_r+0x932>
 8015770:	4601      	mov	r1, r0
 8015772:	9009      	str	r0, [sp, #36]	; 0x24
 8015774:	9801      	ldr	r0, [sp, #4]
 8015776:	f001 f855 	bl	8016824 <__mcmp>
 801577a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801577c:	4603      	mov	r3, r0
 801577e:	4611      	mov	r1, r2
 8015780:	4620      	mov	r0, r4
 8015782:	9309      	str	r3, [sp, #36]	; 0x24
 8015784:	f000 fe2e 	bl	80163e4 <_Bfree>
 8015788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801578a:	b9a3      	cbnz	r3, 80157b6 <_dtoa_r+0x936>
 801578c:	9a08      	ldr	r2, [sp, #32]
 801578e:	b992      	cbnz	r2, 80157b6 <_dtoa_r+0x936>
 8015790:	9a07      	ldr	r2, [sp, #28]
 8015792:	b982      	cbnz	r2, 80157b6 <_dtoa_r+0x936>
 8015794:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015798:	d029      	beq.n	80157ee <_dtoa_r+0x96e>
 801579a:	9b02      	ldr	r3, [sp, #8]
 801579c:	2b00      	cmp	r3, #0
 801579e:	dd01      	ble.n	80157a4 <_dtoa_r+0x924>
 80157a0:	f106 0831 	add.w	r8, r6, #49	; 0x31
 80157a4:	f10a 0601 	add.w	r6, sl, #1
 80157a8:	f88a 8000 	strb.w	r8, [sl]
 80157ac:	e786      	b.n	80156bc <_dtoa_r+0x83c>
 80157ae:	4638      	mov	r0, r7
 80157b0:	e7c2      	b.n	8015738 <_dtoa_r+0x8b8>
 80157b2:	2301      	movs	r3, #1
 80157b4:	e7e3      	b.n	801577e <_dtoa_r+0x8fe>
 80157b6:	9a02      	ldr	r2, [sp, #8]
 80157b8:	2a00      	cmp	r2, #0
 80157ba:	db04      	blt.n	80157c6 <_dtoa_r+0x946>
 80157bc:	d124      	bne.n	8015808 <_dtoa_r+0x988>
 80157be:	9a08      	ldr	r2, [sp, #32]
 80157c0:	bb12      	cbnz	r2, 8015808 <_dtoa_r+0x988>
 80157c2:	9a07      	ldr	r2, [sp, #28]
 80157c4:	bb02      	cbnz	r2, 8015808 <_dtoa_r+0x988>
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	ddec      	ble.n	80157a4 <_dtoa_r+0x924>
 80157ca:	2201      	movs	r2, #1
 80157cc:	9901      	ldr	r1, [sp, #4]
 80157ce:	4620      	mov	r0, r4
 80157d0:	f000 ffd4 	bl	801677c <__lshift>
 80157d4:	4629      	mov	r1, r5
 80157d6:	9001      	str	r0, [sp, #4]
 80157d8:	f001 f824 	bl	8016824 <__mcmp>
 80157dc:	2800      	cmp	r0, #0
 80157de:	dc03      	bgt.n	80157e8 <_dtoa_r+0x968>
 80157e0:	d1e0      	bne.n	80157a4 <_dtoa_r+0x924>
 80157e2:	f018 0f01 	tst.w	r8, #1
 80157e6:	d0dd      	beq.n	80157a4 <_dtoa_r+0x924>
 80157e8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80157ec:	d1d8      	bne.n	80157a0 <_dtoa_r+0x920>
 80157ee:	2339      	movs	r3, #57	; 0x39
 80157f0:	f10a 0601 	add.w	r6, sl, #1
 80157f4:	f88a 3000 	strb.w	r3, [sl]
 80157f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80157fc:	2b39      	cmp	r3, #57	; 0x39
 80157fe:	f106 32ff 	add.w	r2, r6, #4294967295
 8015802:	d04c      	beq.n	801589e <_dtoa_r+0xa1e>
 8015804:	3301      	adds	r3, #1
 8015806:	e051      	b.n	80158ac <_dtoa_r+0xa2c>
 8015808:	2b00      	cmp	r3, #0
 801580a:	f10a 0601 	add.w	r6, sl, #1
 801580e:	dd05      	ble.n	801581c <_dtoa_r+0x99c>
 8015810:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015814:	d0eb      	beq.n	80157ee <_dtoa_r+0x96e>
 8015816:	f108 0801 	add.w	r8, r8, #1
 801581a:	e7c5      	b.n	80157a8 <_dtoa_r+0x928>
 801581c:	9b04      	ldr	r3, [sp, #16]
 801581e:	9a06      	ldr	r2, [sp, #24]
 8015820:	f806 8c01 	strb.w	r8, [r6, #-1]
 8015824:	1af3      	subs	r3, r6, r3
 8015826:	4293      	cmp	r3, r2
 8015828:	d021      	beq.n	801586e <_dtoa_r+0x9ee>
 801582a:	2300      	movs	r3, #0
 801582c:	220a      	movs	r2, #10
 801582e:	9901      	ldr	r1, [sp, #4]
 8015830:	4620      	mov	r0, r4
 8015832:	f000 fdee 	bl	8016412 <__multadd>
 8015836:	45b9      	cmp	r9, r7
 8015838:	9001      	str	r0, [sp, #4]
 801583a:	f04f 0300 	mov.w	r3, #0
 801583e:	f04f 020a 	mov.w	r2, #10
 8015842:	4649      	mov	r1, r9
 8015844:	4620      	mov	r0, r4
 8015846:	d105      	bne.n	8015854 <_dtoa_r+0x9d4>
 8015848:	f000 fde3 	bl	8016412 <__multadd>
 801584c:	4681      	mov	r9, r0
 801584e:	4607      	mov	r7, r0
 8015850:	46b2      	mov	sl, r6
 8015852:	e779      	b.n	8015748 <_dtoa_r+0x8c8>
 8015854:	f000 fddd 	bl	8016412 <__multadd>
 8015858:	4639      	mov	r1, r7
 801585a:	4681      	mov	r9, r0
 801585c:	2300      	movs	r3, #0
 801585e:	220a      	movs	r2, #10
 8015860:	4620      	mov	r0, r4
 8015862:	f000 fdd6 	bl	8016412 <__multadd>
 8015866:	4607      	mov	r7, r0
 8015868:	e7f2      	b.n	8015850 <_dtoa_r+0x9d0>
 801586a:	f04f 0900 	mov.w	r9, #0
 801586e:	2201      	movs	r2, #1
 8015870:	9901      	ldr	r1, [sp, #4]
 8015872:	4620      	mov	r0, r4
 8015874:	f000 ff82 	bl	801677c <__lshift>
 8015878:	4629      	mov	r1, r5
 801587a:	9001      	str	r0, [sp, #4]
 801587c:	f000 ffd2 	bl	8016824 <__mcmp>
 8015880:	2800      	cmp	r0, #0
 8015882:	dcb9      	bgt.n	80157f8 <_dtoa_r+0x978>
 8015884:	d102      	bne.n	801588c <_dtoa_r+0xa0c>
 8015886:	f018 0f01 	tst.w	r8, #1
 801588a:	d1b5      	bne.n	80157f8 <_dtoa_r+0x978>
 801588c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015890:	2b30      	cmp	r3, #48	; 0x30
 8015892:	f106 32ff 	add.w	r2, r6, #4294967295
 8015896:	f47f af11 	bne.w	80156bc <_dtoa_r+0x83c>
 801589a:	4616      	mov	r6, r2
 801589c:	e7f6      	b.n	801588c <_dtoa_r+0xa0c>
 801589e:	9b04      	ldr	r3, [sp, #16]
 80158a0:	4293      	cmp	r3, r2
 80158a2:	d105      	bne.n	80158b0 <_dtoa_r+0xa30>
 80158a4:	9a04      	ldr	r2, [sp, #16]
 80158a6:	f10b 0b01 	add.w	fp, fp, #1
 80158aa:	2331      	movs	r3, #49	; 0x31
 80158ac:	7013      	strb	r3, [r2, #0]
 80158ae:	e705      	b.n	80156bc <_dtoa_r+0x83c>
 80158b0:	4616      	mov	r6, r2
 80158b2:	e7a1      	b.n	80157f8 <_dtoa_r+0x978>
 80158b4:	4b16      	ldr	r3, [pc, #88]	; (8015910 <_dtoa_r+0xa90>)
 80158b6:	f7ff bb48 	b.w	8014f4a <_dtoa_r+0xca>
 80158ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80158bc:	2b00      	cmp	r3, #0
 80158be:	f47f ab23 	bne.w	8014f08 <_dtoa_r+0x88>
 80158c2:	4b14      	ldr	r3, [pc, #80]	; (8015914 <_dtoa_r+0xa94>)
 80158c4:	f7ff bb41 	b.w	8014f4a <_dtoa_r+0xca>
 80158c8:	9b08      	ldr	r3, [sp, #32]
 80158ca:	2b01      	cmp	r3, #1
 80158cc:	f77f ae3b 	ble.w	8015546 <_dtoa_r+0x6c6>
 80158d0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80158d4:	e64f      	b.n	8015576 <_dtoa_r+0x6f6>
 80158d6:	9b06      	ldr	r3, [sp, #24]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	dc03      	bgt.n	80158e4 <_dtoa_r+0xa64>
 80158dc:	9b08      	ldr	r3, [sp, #32]
 80158de:	2b02      	cmp	r3, #2
 80158e0:	f73f aed7 	bgt.w	8015692 <_dtoa_r+0x812>
 80158e4:	9e04      	ldr	r6, [sp, #16]
 80158e6:	9801      	ldr	r0, [sp, #4]
 80158e8:	4629      	mov	r1, r5
 80158ea:	f7ff fa3b 	bl	8014d64 <quorem>
 80158ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80158f2:	f806 8b01 	strb.w	r8, [r6], #1
 80158f6:	9b04      	ldr	r3, [sp, #16]
 80158f8:	9a06      	ldr	r2, [sp, #24]
 80158fa:	1af3      	subs	r3, r6, r3
 80158fc:	429a      	cmp	r2, r3
 80158fe:	ddb4      	ble.n	801586a <_dtoa_r+0x9ea>
 8015900:	2300      	movs	r3, #0
 8015902:	220a      	movs	r2, #10
 8015904:	9901      	ldr	r1, [sp, #4]
 8015906:	4620      	mov	r0, r4
 8015908:	f000 fd83 	bl	8016412 <__multadd>
 801590c:	9001      	str	r0, [sp, #4]
 801590e:	e7ea      	b.n	80158e6 <_dtoa_r+0xa66>
 8015910:	08018168 	.word	0x08018168
 8015914:	080181e8 	.word	0x080181e8

08015918 <__sflush_r>:
 8015918:	898a      	ldrh	r2, [r1, #12]
 801591a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801591e:	4605      	mov	r5, r0
 8015920:	0710      	lsls	r0, r2, #28
 8015922:	460c      	mov	r4, r1
 8015924:	d458      	bmi.n	80159d8 <__sflush_r+0xc0>
 8015926:	684b      	ldr	r3, [r1, #4]
 8015928:	2b00      	cmp	r3, #0
 801592a:	dc05      	bgt.n	8015938 <__sflush_r+0x20>
 801592c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801592e:	2b00      	cmp	r3, #0
 8015930:	dc02      	bgt.n	8015938 <__sflush_r+0x20>
 8015932:	2000      	movs	r0, #0
 8015934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801593a:	2e00      	cmp	r6, #0
 801593c:	d0f9      	beq.n	8015932 <__sflush_r+0x1a>
 801593e:	2300      	movs	r3, #0
 8015940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015944:	682f      	ldr	r7, [r5, #0]
 8015946:	6a21      	ldr	r1, [r4, #32]
 8015948:	602b      	str	r3, [r5, #0]
 801594a:	d032      	beq.n	80159b2 <__sflush_r+0x9a>
 801594c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801594e:	89a3      	ldrh	r3, [r4, #12]
 8015950:	075a      	lsls	r2, r3, #29
 8015952:	d505      	bpl.n	8015960 <__sflush_r+0x48>
 8015954:	6863      	ldr	r3, [r4, #4]
 8015956:	1ac0      	subs	r0, r0, r3
 8015958:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801595a:	b10b      	cbz	r3, 8015960 <__sflush_r+0x48>
 801595c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801595e:	1ac0      	subs	r0, r0, r3
 8015960:	2300      	movs	r3, #0
 8015962:	4602      	mov	r2, r0
 8015964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015966:	6a21      	ldr	r1, [r4, #32]
 8015968:	4628      	mov	r0, r5
 801596a:	47b0      	blx	r6
 801596c:	1c43      	adds	r3, r0, #1
 801596e:	89a3      	ldrh	r3, [r4, #12]
 8015970:	d106      	bne.n	8015980 <__sflush_r+0x68>
 8015972:	6829      	ldr	r1, [r5, #0]
 8015974:	291d      	cmp	r1, #29
 8015976:	d848      	bhi.n	8015a0a <__sflush_r+0xf2>
 8015978:	4a29      	ldr	r2, [pc, #164]	; (8015a20 <__sflush_r+0x108>)
 801597a:	40ca      	lsrs	r2, r1
 801597c:	07d6      	lsls	r6, r2, #31
 801597e:	d544      	bpl.n	8015a0a <__sflush_r+0xf2>
 8015980:	2200      	movs	r2, #0
 8015982:	6062      	str	r2, [r4, #4]
 8015984:	04d9      	lsls	r1, r3, #19
 8015986:	6922      	ldr	r2, [r4, #16]
 8015988:	6022      	str	r2, [r4, #0]
 801598a:	d504      	bpl.n	8015996 <__sflush_r+0x7e>
 801598c:	1c42      	adds	r2, r0, #1
 801598e:	d101      	bne.n	8015994 <__sflush_r+0x7c>
 8015990:	682b      	ldr	r3, [r5, #0]
 8015992:	b903      	cbnz	r3, 8015996 <__sflush_r+0x7e>
 8015994:	6560      	str	r0, [r4, #84]	; 0x54
 8015996:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015998:	602f      	str	r7, [r5, #0]
 801599a:	2900      	cmp	r1, #0
 801599c:	d0c9      	beq.n	8015932 <__sflush_r+0x1a>
 801599e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80159a2:	4299      	cmp	r1, r3
 80159a4:	d002      	beq.n	80159ac <__sflush_r+0x94>
 80159a6:	4628      	mov	r0, r5
 80159a8:	f001 f8f6 	bl	8016b98 <_free_r>
 80159ac:	2000      	movs	r0, #0
 80159ae:	6360      	str	r0, [r4, #52]	; 0x34
 80159b0:	e7c0      	b.n	8015934 <__sflush_r+0x1c>
 80159b2:	2301      	movs	r3, #1
 80159b4:	4628      	mov	r0, r5
 80159b6:	47b0      	blx	r6
 80159b8:	1c41      	adds	r1, r0, #1
 80159ba:	d1c8      	bne.n	801594e <__sflush_r+0x36>
 80159bc:	682b      	ldr	r3, [r5, #0]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d0c5      	beq.n	801594e <__sflush_r+0x36>
 80159c2:	2b1d      	cmp	r3, #29
 80159c4:	d001      	beq.n	80159ca <__sflush_r+0xb2>
 80159c6:	2b16      	cmp	r3, #22
 80159c8:	d101      	bne.n	80159ce <__sflush_r+0xb6>
 80159ca:	602f      	str	r7, [r5, #0]
 80159cc:	e7b1      	b.n	8015932 <__sflush_r+0x1a>
 80159ce:	89a3      	ldrh	r3, [r4, #12]
 80159d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159d4:	81a3      	strh	r3, [r4, #12]
 80159d6:	e7ad      	b.n	8015934 <__sflush_r+0x1c>
 80159d8:	690f      	ldr	r7, [r1, #16]
 80159da:	2f00      	cmp	r7, #0
 80159dc:	d0a9      	beq.n	8015932 <__sflush_r+0x1a>
 80159de:	0793      	lsls	r3, r2, #30
 80159e0:	680e      	ldr	r6, [r1, #0]
 80159e2:	bf08      	it	eq
 80159e4:	694b      	ldreq	r3, [r1, #20]
 80159e6:	600f      	str	r7, [r1, #0]
 80159e8:	bf18      	it	ne
 80159ea:	2300      	movne	r3, #0
 80159ec:	eba6 0807 	sub.w	r8, r6, r7
 80159f0:	608b      	str	r3, [r1, #8]
 80159f2:	f1b8 0f00 	cmp.w	r8, #0
 80159f6:	dd9c      	ble.n	8015932 <__sflush_r+0x1a>
 80159f8:	4643      	mov	r3, r8
 80159fa:	463a      	mov	r2, r7
 80159fc:	6a21      	ldr	r1, [r4, #32]
 80159fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015a00:	4628      	mov	r0, r5
 8015a02:	47b0      	blx	r6
 8015a04:	2800      	cmp	r0, #0
 8015a06:	dc06      	bgt.n	8015a16 <__sflush_r+0xfe>
 8015a08:	89a3      	ldrh	r3, [r4, #12]
 8015a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a0e:	81a3      	strh	r3, [r4, #12]
 8015a10:	f04f 30ff 	mov.w	r0, #4294967295
 8015a14:	e78e      	b.n	8015934 <__sflush_r+0x1c>
 8015a16:	4407      	add	r7, r0
 8015a18:	eba8 0800 	sub.w	r8, r8, r0
 8015a1c:	e7e9      	b.n	80159f2 <__sflush_r+0xda>
 8015a1e:	bf00      	nop
 8015a20:	20400001 	.word	0x20400001

08015a24 <_fflush_r>:
 8015a24:	b538      	push	{r3, r4, r5, lr}
 8015a26:	690b      	ldr	r3, [r1, #16]
 8015a28:	4605      	mov	r5, r0
 8015a2a:	460c      	mov	r4, r1
 8015a2c:	b1db      	cbz	r3, 8015a66 <_fflush_r+0x42>
 8015a2e:	b118      	cbz	r0, 8015a38 <_fflush_r+0x14>
 8015a30:	6983      	ldr	r3, [r0, #24]
 8015a32:	b90b      	cbnz	r3, 8015a38 <_fflush_r+0x14>
 8015a34:	f000 f860 	bl	8015af8 <__sinit>
 8015a38:	4b0c      	ldr	r3, [pc, #48]	; (8015a6c <_fflush_r+0x48>)
 8015a3a:	429c      	cmp	r4, r3
 8015a3c:	d109      	bne.n	8015a52 <_fflush_r+0x2e>
 8015a3e:	686c      	ldr	r4, [r5, #4]
 8015a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a44:	b17b      	cbz	r3, 8015a66 <_fflush_r+0x42>
 8015a46:	4621      	mov	r1, r4
 8015a48:	4628      	mov	r0, r5
 8015a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a4e:	f7ff bf63 	b.w	8015918 <__sflush_r>
 8015a52:	4b07      	ldr	r3, [pc, #28]	; (8015a70 <_fflush_r+0x4c>)
 8015a54:	429c      	cmp	r4, r3
 8015a56:	d101      	bne.n	8015a5c <_fflush_r+0x38>
 8015a58:	68ac      	ldr	r4, [r5, #8]
 8015a5a:	e7f1      	b.n	8015a40 <_fflush_r+0x1c>
 8015a5c:	4b05      	ldr	r3, [pc, #20]	; (8015a74 <_fflush_r+0x50>)
 8015a5e:	429c      	cmp	r4, r3
 8015a60:	bf08      	it	eq
 8015a62:	68ec      	ldreq	r4, [r5, #12]
 8015a64:	e7ec      	b.n	8015a40 <_fflush_r+0x1c>
 8015a66:	2000      	movs	r0, #0
 8015a68:	bd38      	pop	{r3, r4, r5, pc}
 8015a6a:	bf00      	nop
 8015a6c:	08018218 	.word	0x08018218
 8015a70:	08018238 	.word	0x08018238
 8015a74:	080181f8 	.word	0x080181f8

08015a78 <std>:
 8015a78:	2300      	movs	r3, #0
 8015a7a:	b510      	push	{r4, lr}
 8015a7c:	4604      	mov	r4, r0
 8015a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8015a82:	6083      	str	r3, [r0, #8]
 8015a84:	8181      	strh	r1, [r0, #12]
 8015a86:	6643      	str	r3, [r0, #100]	; 0x64
 8015a88:	81c2      	strh	r2, [r0, #14]
 8015a8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015a8e:	6183      	str	r3, [r0, #24]
 8015a90:	4619      	mov	r1, r3
 8015a92:	2208      	movs	r2, #8
 8015a94:	305c      	adds	r0, #92	; 0x5c
 8015a96:	f7fd fb80 	bl	801319a <memset>
 8015a9a:	4b05      	ldr	r3, [pc, #20]	; (8015ab0 <std+0x38>)
 8015a9c:	6263      	str	r3, [r4, #36]	; 0x24
 8015a9e:	4b05      	ldr	r3, [pc, #20]	; (8015ab4 <std+0x3c>)
 8015aa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8015aa2:	4b05      	ldr	r3, [pc, #20]	; (8015ab8 <std+0x40>)
 8015aa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015aa6:	4b05      	ldr	r3, [pc, #20]	; (8015abc <std+0x44>)
 8015aa8:	6224      	str	r4, [r4, #32]
 8015aaa:	6323      	str	r3, [r4, #48]	; 0x30
 8015aac:	bd10      	pop	{r4, pc}
 8015aae:	bf00      	nop
 8015ab0:	08016fad 	.word	0x08016fad
 8015ab4:	08016fcf 	.word	0x08016fcf
 8015ab8:	08017007 	.word	0x08017007
 8015abc:	0801702b 	.word	0x0801702b

08015ac0 <_cleanup_r>:
 8015ac0:	4901      	ldr	r1, [pc, #4]	; (8015ac8 <_cleanup_r+0x8>)
 8015ac2:	f000 b885 	b.w	8015bd0 <_fwalk_reent>
 8015ac6:	bf00      	nop
 8015ac8:	08015a25 	.word	0x08015a25

08015acc <__sfmoreglue>:
 8015acc:	b570      	push	{r4, r5, r6, lr}
 8015ace:	1e4a      	subs	r2, r1, #1
 8015ad0:	2568      	movs	r5, #104	; 0x68
 8015ad2:	4355      	muls	r5, r2
 8015ad4:	460e      	mov	r6, r1
 8015ad6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015ada:	f001 f8ab 	bl	8016c34 <_malloc_r>
 8015ade:	4604      	mov	r4, r0
 8015ae0:	b140      	cbz	r0, 8015af4 <__sfmoreglue+0x28>
 8015ae2:	2100      	movs	r1, #0
 8015ae4:	e9c0 1600 	strd	r1, r6, [r0]
 8015ae8:	300c      	adds	r0, #12
 8015aea:	60a0      	str	r0, [r4, #8]
 8015aec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015af0:	f7fd fb53 	bl	801319a <memset>
 8015af4:	4620      	mov	r0, r4
 8015af6:	bd70      	pop	{r4, r5, r6, pc}

08015af8 <__sinit>:
 8015af8:	6983      	ldr	r3, [r0, #24]
 8015afa:	b510      	push	{r4, lr}
 8015afc:	4604      	mov	r4, r0
 8015afe:	bb33      	cbnz	r3, 8015b4e <__sinit+0x56>
 8015b00:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015b04:	6503      	str	r3, [r0, #80]	; 0x50
 8015b06:	4b12      	ldr	r3, [pc, #72]	; (8015b50 <__sinit+0x58>)
 8015b08:	4a12      	ldr	r2, [pc, #72]	; (8015b54 <__sinit+0x5c>)
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	6282      	str	r2, [r0, #40]	; 0x28
 8015b0e:	4298      	cmp	r0, r3
 8015b10:	bf04      	itt	eq
 8015b12:	2301      	moveq	r3, #1
 8015b14:	6183      	streq	r3, [r0, #24]
 8015b16:	f000 f81f 	bl	8015b58 <__sfp>
 8015b1a:	6060      	str	r0, [r4, #4]
 8015b1c:	4620      	mov	r0, r4
 8015b1e:	f000 f81b 	bl	8015b58 <__sfp>
 8015b22:	60a0      	str	r0, [r4, #8]
 8015b24:	4620      	mov	r0, r4
 8015b26:	f000 f817 	bl	8015b58 <__sfp>
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	60e0      	str	r0, [r4, #12]
 8015b2e:	2104      	movs	r1, #4
 8015b30:	6860      	ldr	r0, [r4, #4]
 8015b32:	f7ff ffa1 	bl	8015a78 <std>
 8015b36:	2201      	movs	r2, #1
 8015b38:	2109      	movs	r1, #9
 8015b3a:	68a0      	ldr	r0, [r4, #8]
 8015b3c:	f7ff ff9c 	bl	8015a78 <std>
 8015b40:	2202      	movs	r2, #2
 8015b42:	2112      	movs	r1, #18
 8015b44:	68e0      	ldr	r0, [r4, #12]
 8015b46:	f7ff ff97 	bl	8015a78 <std>
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	61a3      	str	r3, [r4, #24]
 8015b4e:	bd10      	pop	{r4, pc}
 8015b50:	08018154 	.word	0x08018154
 8015b54:	08015ac1 	.word	0x08015ac1

08015b58 <__sfp>:
 8015b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b5a:	4b1b      	ldr	r3, [pc, #108]	; (8015bc8 <__sfp+0x70>)
 8015b5c:	681e      	ldr	r6, [r3, #0]
 8015b5e:	69b3      	ldr	r3, [r6, #24]
 8015b60:	4607      	mov	r7, r0
 8015b62:	b913      	cbnz	r3, 8015b6a <__sfp+0x12>
 8015b64:	4630      	mov	r0, r6
 8015b66:	f7ff ffc7 	bl	8015af8 <__sinit>
 8015b6a:	3648      	adds	r6, #72	; 0x48
 8015b6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015b70:	3b01      	subs	r3, #1
 8015b72:	d503      	bpl.n	8015b7c <__sfp+0x24>
 8015b74:	6833      	ldr	r3, [r6, #0]
 8015b76:	b133      	cbz	r3, 8015b86 <__sfp+0x2e>
 8015b78:	6836      	ldr	r6, [r6, #0]
 8015b7a:	e7f7      	b.n	8015b6c <__sfp+0x14>
 8015b7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015b80:	b16d      	cbz	r5, 8015b9e <__sfp+0x46>
 8015b82:	3468      	adds	r4, #104	; 0x68
 8015b84:	e7f4      	b.n	8015b70 <__sfp+0x18>
 8015b86:	2104      	movs	r1, #4
 8015b88:	4638      	mov	r0, r7
 8015b8a:	f7ff ff9f 	bl	8015acc <__sfmoreglue>
 8015b8e:	6030      	str	r0, [r6, #0]
 8015b90:	2800      	cmp	r0, #0
 8015b92:	d1f1      	bne.n	8015b78 <__sfp+0x20>
 8015b94:	230c      	movs	r3, #12
 8015b96:	603b      	str	r3, [r7, #0]
 8015b98:	4604      	mov	r4, r0
 8015b9a:	4620      	mov	r0, r4
 8015b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b9e:	4b0b      	ldr	r3, [pc, #44]	; (8015bcc <__sfp+0x74>)
 8015ba0:	6665      	str	r5, [r4, #100]	; 0x64
 8015ba2:	e9c4 5500 	strd	r5, r5, [r4]
 8015ba6:	60a5      	str	r5, [r4, #8]
 8015ba8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015bac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015bb0:	2208      	movs	r2, #8
 8015bb2:	4629      	mov	r1, r5
 8015bb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015bb8:	f7fd faef 	bl	801319a <memset>
 8015bbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015bc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015bc4:	e7e9      	b.n	8015b9a <__sfp+0x42>
 8015bc6:	bf00      	nop
 8015bc8:	08018154 	.word	0x08018154
 8015bcc:	ffff0001 	.word	0xffff0001

08015bd0 <_fwalk_reent>:
 8015bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015bd4:	4680      	mov	r8, r0
 8015bd6:	4689      	mov	r9, r1
 8015bd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015bdc:	2600      	movs	r6, #0
 8015bde:	b914      	cbnz	r4, 8015be6 <_fwalk_reent+0x16>
 8015be0:	4630      	mov	r0, r6
 8015be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015be6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015bea:	3f01      	subs	r7, #1
 8015bec:	d501      	bpl.n	8015bf2 <_fwalk_reent+0x22>
 8015bee:	6824      	ldr	r4, [r4, #0]
 8015bf0:	e7f5      	b.n	8015bde <_fwalk_reent+0xe>
 8015bf2:	89ab      	ldrh	r3, [r5, #12]
 8015bf4:	2b01      	cmp	r3, #1
 8015bf6:	d907      	bls.n	8015c08 <_fwalk_reent+0x38>
 8015bf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015bfc:	3301      	adds	r3, #1
 8015bfe:	d003      	beq.n	8015c08 <_fwalk_reent+0x38>
 8015c00:	4629      	mov	r1, r5
 8015c02:	4640      	mov	r0, r8
 8015c04:	47c8      	blx	r9
 8015c06:	4306      	orrs	r6, r0
 8015c08:	3568      	adds	r5, #104	; 0x68
 8015c0a:	e7ee      	b.n	8015bea <_fwalk_reent+0x1a>

08015c0c <rshift>:
 8015c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c0e:	6906      	ldr	r6, [r0, #16]
 8015c10:	114b      	asrs	r3, r1, #5
 8015c12:	429e      	cmp	r6, r3
 8015c14:	f100 0414 	add.w	r4, r0, #20
 8015c18:	dd30      	ble.n	8015c7c <rshift+0x70>
 8015c1a:	f011 011f 	ands.w	r1, r1, #31
 8015c1e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015c22:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015c26:	d108      	bne.n	8015c3a <rshift+0x2e>
 8015c28:	4621      	mov	r1, r4
 8015c2a:	42b2      	cmp	r2, r6
 8015c2c:	460b      	mov	r3, r1
 8015c2e:	d211      	bcs.n	8015c54 <rshift+0x48>
 8015c30:	f852 3b04 	ldr.w	r3, [r2], #4
 8015c34:	f841 3b04 	str.w	r3, [r1], #4
 8015c38:	e7f7      	b.n	8015c2a <rshift+0x1e>
 8015c3a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015c3e:	f1c1 0c20 	rsb	ip, r1, #32
 8015c42:	40cd      	lsrs	r5, r1
 8015c44:	3204      	adds	r2, #4
 8015c46:	4623      	mov	r3, r4
 8015c48:	42b2      	cmp	r2, r6
 8015c4a:	4617      	mov	r7, r2
 8015c4c:	d30c      	bcc.n	8015c68 <rshift+0x5c>
 8015c4e:	601d      	str	r5, [r3, #0]
 8015c50:	b105      	cbz	r5, 8015c54 <rshift+0x48>
 8015c52:	3304      	adds	r3, #4
 8015c54:	1b1a      	subs	r2, r3, r4
 8015c56:	42a3      	cmp	r3, r4
 8015c58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015c5c:	bf08      	it	eq
 8015c5e:	2300      	moveq	r3, #0
 8015c60:	6102      	str	r2, [r0, #16]
 8015c62:	bf08      	it	eq
 8015c64:	6143      	streq	r3, [r0, #20]
 8015c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c68:	683f      	ldr	r7, [r7, #0]
 8015c6a:	fa07 f70c 	lsl.w	r7, r7, ip
 8015c6e:	433d      	orrs	r5, r7
 8015c70:	f843 5b04 	str.w	r5, [r3], #4
 8015c74:	f852 5b04 	ldr.w	r5, [r2], #4
 8015c78:	40cd      	lsrs	r5, r1
 8015c7a:	e7e5      	b.n	8015c48 <rshift+0x3c>
 8015c7c:	4623      	mov	r3, r4
 8015c7e:	e7e9      	b.n	8015c54 <rshift+0x48>

08015c80 <__hexdig_fun>:
 8015c80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015c84:	2b09      	cmp	r3, #9
 8015c86:	d802      	bhi.n	8015c8e <__hexdig_fun+0xe>
 8015c88:	3820      	subs	r0, #32
 8015c8a:	b2c0      	uxtb	r0, r0
 8015c8c:	4770      	bx	lr
 8015c8e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015c92:	2b05      	cmp	r3, #5
 8015c94:	d801      	bhi.n	8015c9a <__hexdig_fun+0x1a>
 8015c96:	3847      	subs	r0, #71	; 0x47
 8015c98:	e7f7      	b.n	8015c8a <__hexdig_fun+0xa>
 8015c9a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015c9e:	2b05      	cmp	r3, #5
 8015ca0:	d801      	bhi.n	8015ca6 <__hexdig_fun+0x26>
 8015ca2:	3827      	subs	r0, #39	; 0x27
 8015ca4:	e7f1      	b.n	8015c8a <__hexdig_fun+0xa>
 8015ca6:	2000      	movs	r0, #0
 8015ca8:	4770      	bx	lr

08015caa <__gethex>:
 8015caa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cae:	b08b      	sub	sp, #44	; 0x2c
 8015cb0:	468a      	mov	sl, r1
 8015cb2:	9002      	str	r0, [sp, #8]
 8015cb4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015cb6:	9306      	str	r3, [sp, #24]
 8015cb8:	4690      	mov	r8, r2
 8015cba:	f000 fad0 	bl	801625e <__localeconv_l>
 8015cbe:	6803      	ldr	r3, [r0, #0]
 8015cc0:	9303      	str	r3, [sp, #12]
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7ea fabc 	bl	8000240 <strlen>
 8015cc8:	9b03      	ldr	r3, [sp, #12]
 8015cca:	9001      	str	r0, [sp, #4]
 8015ccc:	4403      	add	r3, r0
 8015cce:	f04f 0b00 	mov.w	fp, #0
 8015cd2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015cd6:	9307      	str	r3, [sp, #28]
 8015cd8:	f8da 3000 	ldr.w	r3, [sl]
 8015cdc:	3302      	adds	r3, #2
 8015cde:	461f      	mov	r7, r3
 8015ce0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015ce4:	2830      	cmp	r0, #48	; 0x30
 8015ce6:	d06c      	beq.n	8015dc2 <__gethex+0x118>
 8015ce8:	f7ff ffca 	bl	8015c80 <__hexdig_fun>
 8015cec:	4604      	mov	r4, r0
 8015cee:	2800      	cmp	r0, #0
 8015cf0:	d16a      	bne.n	8015dc8 <__gethex+0x11e>
 8015cf2:	9a01      	ldr	r2, [sp, #4]
 8015cf4:	9903      	ldr	r1, [sp, #12]
 8015cf6:	4638      	mov	r0, r7
 8015cf8:	f001 f99b 	bl	8017032 <strncmp>
 8015cfc:	2800      	cmp	r0, #0
 8015cfe:	d166      	bne.n	8015dce <__gethex+0x124>
 8015d00:	9b01      	ldr	r3, [sp, #4]
 8015d02:	5cf8      	ldrb	r0, [r7, r3]
 8015d04:	18fe      	adds	r6, r7, r3
 8015d06:	f7ff ffbb 	bl	8015c80 <__hexdig_fun>
 8015d0a:	2800      	cmp	r0, #0
 8015d0c:	d062      	beq.n	8015dd4 <__gethex+0x12a>
 8015d0e:	4633      	mov	r3, r6
 8015d10:	7818      	ldrb	r0, [r3, #0]
 8015d12:	2830      	cmp	r0, #48	; 0x30
 8015d14:	461f      	mov	r7, r3
 8015d16:	f103 0301 	add.w	r3, r3, #1
 8015d1a:	d0f9      	beq.n	8015d10 <__gethex+0x66>
 8015d1c:	f7ff ffb0 	bl	8015c80 <__hexdig_fun>
 8015d20:	fab0 f580 	clz	r5, r0
 8015d24:	096d      	lsrs	r5, r5, #5
 8015d26:	4634      	mov	r4, r6
 8015d28:	f04f 0b01 	mov.w	fp, #1
 8015d2c:	463a      	mov	r2, r7
 8015d2e:	4616      	mov	r6, r2
 8015d30:	3201      	adds	r2, #1
 8015d32:	7830      	ldrb	r0, [r6, #0]
 8015d34:	f7ff ffa4 	bl	8015c80 <__hexdig_fun>
 8015d38:	2800      	cmp	r0, #0
 8015d3a:	d1f8      	bne.n	8015d2e <__gethex+0x84>
 8015d3c:	9a01      	ldr	r2, [sp, #4]
 8015d3e:	9903      	ldr	r1, [sp, #12]
 8015d40:	4630      	mov	r0, r6
 8015d42:	f001 f976 	bl	8017032 <strncmp>
 8015d46:	b950      	cbnz	r0, 8015d5e <__gethex+0xb4>
 8015d48:	b954      	cbnz	r4, 8015d60 <__gethex+0xb6>
 8015d4a:	9b01      	ldr	r3, [sp, #4]
 8015d4c:	18f4      	adds	r4, r6, r3
 8015d4e:	4622      	mov	r2, r4
 8015d50:	4616      	mov	r6, r2
 8015d52:	3201      	adds	r2, #1
 8015d54:	7830      	ldrb	r0, [r6, #0]
 8015d56:	f7ff ff93 	bl	8015c80 <__hexdig_fun>
 8015d5a:	2800      	cmp	r0, #0
 8015d5c:	d1f8      	bne.n	8015d50 <__gethex+0xa6>
 8015d5e:	b10c      	cbz	r4, 8015d64 <__gethex+0xba>
 8015d60:	1ba4      	subs	r4, r4, r6
 8015d62:	00a4      	lsls	r4, r4, #2
 8015d64:	7833      	ldrb	r3, [r6, #0]
 8015d66:	2b50      	cmp	r3, #80	; 0x50
 8015d68:	d001      	beq.n	8015d6e <__gethex+0xc4>
 8015d6a:	2b70      	cmp	r3, #112	; 0x70
 8015d6c:	d140      	bne.n	8015df0 <__gethex+0x146>
 8015d6e:	7873      	ldrb	r3, [r6, #1]
 8015d70:	2b2b      	cmp	r3, #43	; 0x2b
 8015d72:	d031      	beq.n	8015dd8 <__gethex+0x12e>
 8015d74:	2b2d      	cmp	r3, #45	; 0x2d
 8015d76:	d033      	beq.n	8015de0 <__gethex+0x136>
 8015d78:	1c71      	adds	r1, r6, #1
 8015d7a:	f04f 0900 	mov.w	r9, #0
 8015d7e:	7808      	ldrb	r0, [r1, #0]
 8015d80:	f7ff ff7e 	bl	8015c80 <__hexdig_fun>
 8015d84:	1e43      	subs	r3, r0, #1
 8015d86:	b2db      	uxtb	r3, r3
 8015d88:	2b18      	cmp	r3, #24
 8015d8a:	d831      	bhi.n	8015df0 <__gethex+0x146>
 8015d8c:	f1a0 0210 	sub.w	r2, r0, #16
 8015d90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015d94:	f7ff ff74 	bl	8015c80 <__hexdig_fun>
 8015d98:	1e43      	subs	r3, r0, #1
 8015d9a:	b2db      	uxtb	r3, r3
 8015d9c:	2b18      	cmp	r3, #24
 8015d9e:	d922      	bls.n	8015de6 <__gethex+0x13c>
 8015da0:	f1b9 0f00 	cmp.w	r9, #0
 8015da4:	d000      	beq.n	8015da8 <__gethex+0xfe>
 8015da6:	4252      	negs	r2, r2
 8015da8:	4414      	add	r4, r2
 8015daa:	f8ca 1000 	str.w	r1, [sl]
 8015dae:	b30d      	cbz	r5, 8015df4 <__gethex+0x14a>
 8015db0:	f1bb 0f00 	cmp.w	fp, #0
 8015db4:	bf0c      	ite	eq
 8015db6:	2706      	moveq	r7, #6
 8015db8:	2700      	movne	r7, #0
 8015dba:	4638      	mov	r0, r7
 8015dbc:	b00b      	add	sp, #44	; 0x2c
 8015dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dc2:	f10b 0b01 	add.w	fp, fp, #1
 8015dc6:	e78a      	b.n	8015cde <__gethex+0x34>
 8015dc8:	2500      	movs	r5, #0
 8015dca:	462c      	mov	r4, r5
 8015dcc:	e7ae      	b.n	8015d2c <__gethex+0x82>
 8015dce:	463e      	mov	r6, r7
 8015dd0:	2501      	movs	r5, #1
 8015dd2:	e7c7      	b.n	8015d64 <__gethex+0xba>
 8015dd4:	4604      	mov	r4, r0
 8015dd6:	e7fb      	b.n	8015dd0 <__gethex+0x126>
 8015dd8:	f04f 0900 	mov.w	r9, #0
 8015ddc:	1cb1      	adds	r1, r6, #2
 8015dde:	e7ce      	b.n	8015d7e <__gethex+0xd4>
 8015de0:	f04f 0901 	mov.w	r9, #1
 8015de4:	e7fa      	b.n	8015ddc <__gethex+0x132>
 8015de6:	230a      	movs	r3, #10
 8015de8:	fb03 0202 	mla	r2, r3, r2, r0
 8015dec:	3a10      	subs	r2, #16
 8015dee:	e7cf      	b.n	8015d90 <__gethex+0xe6>
 8015df0:	4631      	mov	r1, r6
 8015df2:	e7da      	b.n	8015daa <__gethex+0x100>
 8015df4:	1bf3      	subs	r3, r6, r7
 8015df6:	3b01      	subs	r3, #1
 8015df8:	4629      	mov	r1, r5
 8015dfa:	2b07      	cmp	r3, #7
 8015dfc:	dc49      	bgt.n	8015e92 <__gethex+0x1e8>
 8015dfe:	9802      	ldr	r0, [sp, #8]
 8015e00:	f000 fabc 	bl	801637c <_Balloc>
 8015e04:	9b01      	ldr	r3, [sp, #4]
 8015e06:	f100 0914 	add.w	r9, r0, #20
 8015e0a:	f04f 0b00 	mov.w	fp, #0
 8015e0e:	f1c3 0301 	rsb	r3, r3, #1
 8015e12:	4605      	mov	r5, r0
 8015e14:	f8cd 9010 	str.w	r9, [sp, #16]
 8015e18:	46da      	mov	sl, fp
 8015e1a:	9308      	str	r3, [sp, #32]
 8015e1c:	42b7      	cmp	r7, r6
 8015e1e:	d33b      	bcc.n	8015e98 <__gethex+0x1ee>
 8015e20:	9804      	ldr	r0, [sp, #16]
 8015e22:	f840 ab04 	str.w	sl, [r0], #4
 8015e26:	eba0 0009 	sub.w	r0, r0, r9
 8015e2a:	1080      	asrs	r0, r0, #2
 8015e2c:	6128      	str	r0, [r5, #16]
 8015e2e:	0147      	lsls	r7, r0, #5
 8015e30:	4650      	mov	r0, sl
 8015e32:	f000 fb67 	bl	8016504 <__hi0bits>
 8015e36:	f8d8 6000 	ldr.w	r6, [r8]
 8015e3a:	1a3f      	subs	r7, r7, r0
 8015e3c:	42b7      	cmp	r7, r6
 8015e3e:	dd64      	ble.n	8015f0a <__gethex+0x260>
 8015e40:	1bbf      	subs	r7, r7, r6
 8015e42:	4639      	mov	r1, r7
 8015e44:	4628      	mov	r0, r5
 8015e46:	f000 fe78 	bl	8016b3a <__any_on>
 8015e4a:	4682      	mov	sl, r0
 8015e4c:	b178      	cbz	r0, 8015e6e <__gethex+0x1c4>
 8015e4e:	1e7b      	subs	r3, r7, #1
 8015e50:	1159      	asrs	r1, r3, #5
 8015e52:	f003 021f 	and.w	r2, r3, #31
 8015e56:	f04f 0a01 	mov.w	sl, #1
 8015e5a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015e5e:	fa0a f202 	lsl.w	r2, sl, r2
 8015e62:	420a      	tst	r2, r1
 8015e64:	d003      	beq.n	8015e6e <__gethex+0x1c4>
 8015e66:	4553      	cmp	r3, sl
 8015e68:	dc46      	bgt.n	8015ef8 <__gethex+0x24e>
 8015e6a:	f04f 0a02 	mov.w	sl, #2
 8015e6e:	4639      	mov	r1, r7
 8015e70:	4628      	mov	r0, r5
 8015e72:	f7ff fecb 	bl	8015c0c <rshift>
 8015e76:	443c      	add	r4, r7
 8015e78:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015e7c:	42a3      	cmp	r3, r4
 8015e7e:	da52      	bge.n	8015f26 <__gethex+0x27c>
 8015e80:	4629      	mov	r1, r5
 8015e82:	9802      	ldr	r0, [sp, #8]
 8015e84:	f000 faae 	bl	80163e4 <_Bfree>
 8015e88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015e8a:	2300      	movs	r3, #0
 8015e8c:	6013      	str	r3, [r2, #0]
 8015e8e:	27a3      	movs	r7, #163	; 0xa3
 8015e90:	e793      	b.n	8015dba <__gethex+0x110>
 8015e92:	3101      	adds	r1, #1
 8015e94:	105b      	asrs	r3, r3, #1
 8015e96:	e7b0      	b.n	8015dfa <__gethex+0x150>
 8015e98:	1e73      	subs	r3, r6, #1
 8015e9a:	9305      	str	r3, [sp, #20]
 8015e9c:	9a07      	ldr	r2, [sp, #28]
 8015e9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015ea2:	4293      	cmp	r3, r2
 8015ea4:	d018      	beq.n	8015ed8 <__gethex+0x22e>
 8015ea6:	f1bb 0f20 	cmp.w	fp, #32
 8015eaa:	d107      	bne.n	8015ebc <__gethex+0x212>
 8015eac:	9b04      	ldr	r3, [sp, #16]
 8015eae:	f8c3 a000 	str.w	sl, [r3]
 8015eb2:	3304      	adds	r3, #4
 8015eb4:	f04f 0a00 	mov.w	sl, #0
 8015eb8:	9304      	str	r3, [sp, #16]
 8015eba:	46d3      	mov	fp, sl
 8015ebc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015ec0:	f7ff fede 	bl	8015c80 <__hexdig_fun>
 8015ec4:	f000 000f 	and.w	r0, r0, #15
 8015ec8:	fa00 f00b 	lsl.w	r0, r0, fp
 8015ecc:	ea4a 0a00 	orr.w	sl, sl, r0
 8015ed0:	f10b 0b04 	add.w	fp, fp, #4
 8015ed4:	9b05      	ldr	r3, [sp, #20]
 8015ed6:	e00d      	b.n	8015ef4 <__gethex+0x24a>
 8015ed8:	9b05      	ldr	r3, [sp, #20]
 8015eda:	9a08      	ldr	r2, [sp, #32]
 8015edc:	4413      	add	r3, r2
 8015ede:	42bb      	cmp	r3, r7
 8015ee0:	d3e1      	bcc.n	8015ea6 <__gethex+0x1fc>
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	9a01      	ldr	r2, [sp, #4]
 8015ee6:	9903      	ldr	r1, [sp, #12]
 8015ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8015eea:	f001 f8a2 	bl	8017032 <strncmp>
 8015eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ef0:	2800      	cmp	r0, #0
 8015ef2:	d1d8      	bne.n	8015ea6 <__gethex+0x1fc>
 8015ef4:	461e      	mov	r6, r3
 8015ef6:	e791      	b.n	8015e1c <__gethex+0x172>
 8015ef8:	1eb9      	subs	r1, r7, #2
 8015efa:	4628      	mov	r0, r5
 8015efc:	f000 fe1d 	bl	8016b3a <__any_on>
 8015f00:	2800      	cmp	r0, #0
 8015f02:	d0b2      	beq.n	8015e6a <__gethex+0x1c0>
 8015f04:	f04f 0a03 	mov.w	sl, #3
 8015f08:	e7b1      	b.n	8015e6e <__gethex+0x1c4>
 8015f0a:	da09      	bge.n	8015f20 <__gethex+0x276>
 8015f0c:	1bf7      	subs	r7, r6, r7
 8015f0e:	4629      	mov	r1, r5
 8015f10:	463a      	mov	r2, r7
 8015f12:	9802      	ldr	r0, [sp, #8]
 8015f14:	f000 fc32 	bl	801677c <__lshift>
 8015f18:	1be4      	subs	r4, r4, r7
 8015f1a:	4605      	mov	r5, r0
 8015f1c:	f100 0914 	add.w	r9, r0, #20
 8015f20:	f04f 0a00 	mov.w	sl, #0
 8015f24:	e7a8      	b.n	8015e78 <__gethex+0x1ce>
 8015f26:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015f2a:	42a0      	cmp	r0, r4
 8015f2c:	dd6a      	ble.n	8016004 <__gethex+0x35a>
 8015f2e:	1b04      	subs	r4, r0, r4
 8015f30:	42a6      	cmp	r6, r4
 8015f32:	dc2e      	bgt.n	8015f92 <__gethex+0x2e8>
 8015f34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015f38:	2b02      	cmp	r3, #2
 8015f3a:	d022      	beq.n	8015f82 <__gethex+0x2d8>
 8015f3c:	2b03      	cmp	r3, #3
 8015f3e:	d024      	beq.n	8015f8a <__gethex+0x2e0>
 8015f40:	2b01      	cmp	r3, #1
 8015f42:	d115      	bne.n	8015f70 <__gethex+0x2c6>
 8015f44:	42a6      	cmp	r6, r4
 8015f46:	d113      	bne.n	8015f70 <__gethex+0x2c6>
 8015f48:	2e01      	cmp	r6, #1
 8015f4a:	dc0b      	bgt.n	8015f64 <__gethex+0x2ba>
 8015f4c:	9a06      	ldr	r2, [sp, #24]
 8015f4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015f52:	6013      	str	r3, [r2, #0]
 8015f54:	2301      	movs	r3, #1
 8015f56:	612b      	str	r3, [r5, #16]
 8015f58:	f8c9 3000 	str.w	r3, [r9]
 8015f5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015f5e:	2762      	movs	r7, #98	; 0x62
 8015f60:	601d      	str	r5, [r3, #0]
 8015f62:	e72a      	b.n	8015dba <__gethex+0x110>
 8015f64:	1e71      	subs	r1, r6, #1
 8015f66:	4628      	mov	r0, r5
 8015f68:	f000 fde7 	bl	8016b3a <__any_on>
 8015f6c:	2800      	cmp	r0, #0
 8015f6e:	d1ed      	bne.n	8015f4c <__gethex+0x2a2>
 8015f70:	4629      	mov	r1, r5
 8015f72:	9802      	ldr	r0, [sp, #8]
 8015f74:	f000 fa36 	bl	80163e4 <_Bfree>
 8015f78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	6013      	str	r3, [r2, #0]
 8015f7e:	2750      	movs	r7, #80	; 0x50
 8015f80:	e71b      	b.n	8015dba <__gethex+0x110>
 8015f82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d0e1      	beq.n	8015f4c <__gethex+0x2a2>
 8015f88:	e7f2      	b.n	8015f70 <__gethex+0x2c6>
 8015f8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d1dd      	bne.n	8015f4c <__gethex+0x2a2>
 8015f90:	e7ee      	b.n	8015f70 <__gethex+0x2c6>
 8015f92:	1e67      	subs	r7, r4, #1
 8015f94:	f1ba 0f00 	cmp.w	sl, #0
 8015f98:	d131      	bne.n	8015ffe <__gethex+0x354>
 8015f9a:	b127      	cbz	r7, 8015fa6 <__gethex+0x2fc>
 8015f9c:	4639      	mov	r1, r7
 8015f9e:	4628      	mov	r0, r5
 8015fa0:	f000 fdcb 	bl	8016b3a <__any_on>
 8015fa4:	4682      	mov	sl, r0
 8015fa6:	117a      	asrs	r2, r7, #5
 8015fa8:	2301      	movs	r3, #1
 8015faa:	f007 071f 	and.w	r7, r7, #31
 8015fae:	fa03 f707 	lsl.w	r7, r3, r7
 8015fb2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015fb6:	4621      	mov	r1, r4
 8015fb8:	421f      	tst	r7, r3
 8015fba:	4628      	mov	r0, r5
 8015fbc:	bf18      	it	ne
 8015fbe:	f04a 0a02 	orrne.w	sl, sl, #2
 8015fc2:	1b36      	subs	r6, r6, r4
 8015fc4:	f7ff fe22 	bl	8015c0c <rshift>
 8015fc8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015fcc:	2702      	movs	r7, #2
 8015fce:	f1ba 0f00 	cmp.w	sl, #0
 8015fd2:	d048      	beq.n	8016066 <__gethex+0x3bc>
 8015fd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015fd8:	2b02      	cmp	r3, #2
 8015fda:	d015      	beq.n	8016008 <__gethex+0x35e>
 8015fdc:	2b03      	cmp	r3, #3
 8015fde:	d017      	beq.n	8016010 <__gethex+0x366>
 8015fe0:	2b01      	cmp	r3, #1
 8015fe2:	d109      	bne.n	8015ff8 <__gethex+0x34e>
 8015fe4:	f01a 0f02 	tst.w	sl, #2
 8015fe8:	d006      	beq.n	8015ff8 <__gethex+0x34e>
 8015fea:	f8d9 3000 	ldr.w	r3, [r9]
 8015fee:	ea4a 0a03 	orr.w	sl, sl, r3
 8015ff2:	f01a 0f01 	tst.w	sl, #1
 8015ff6:	d10e      	bne.n	8016016 <__gethex+0x36c>
 8015ff8:	f047 0710 	orr.w	r7, r7, #16
 8015ffc:	e033      	b.n	8016066 <__gethex+0x3bc>
 8015ffe:	f04f 0a01 	mov.w	sl, #1
 8016002:	e7d0      	b.n	8015fa6 <__gethex+0x2fc>
 8016004:	2701      	movs	r7, #1
 8016006:	e7e2      	b.n	8015fce <__gethex+0x324>
 8016008:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801600a:	f1c3 0301 	rsb	r3, r3, #1
 801600e:	9315      	str	r3, [sp, #84]	; 0x54
 8016010:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016012:	2b00      	cmp	r3, #0
 8016014:	d0f0      	beq.n	8015ff8 <__gethex+0x34e>
 8016016:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801601a:	f105 0314 	add.w	r3, r5, #20
 801601e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8016022:	eb03 010a 	add.w	r1, r3, sl
 8016026:	f04f 0c00 	mov.w	ip, #0
 801602a:	4618      	mov	r0, r3
 801602c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016030:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016034:	d01c      	beq.n	8016070 <__gethex+0x3c6>
 8016036:	3201      	adds	r2, #1
 8016038:	6002      	str	r2, [r0, #0]
 801603a:	2f02      	cmp	r7, #2
 801603c:	f105 0314 	add.w	r3, r5, #20
 8016040:	d138      	bne.n	80160b4 <__gethex+0x40a>
 8016042:	f8d8 2000 	ldr.w	r2, [r8]
 8016046:	3a01      	subs	r2, #1
 8016048:	42b2      	cmp	r2, r6
 801604a:	d10a      	bne.n	8016062 <__gethex+0x3b8>
 801604c:	1171      	asrs	r1, r6, #5
 801604e:	2201      	movs	r2, #1
 8016050:	f006 061f 	and.w	r6, r6, #31
 8016054:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016058:	fa02 f606 	lsl.w	r6, r2, r6
 801605c:	421e      	tst	r6, r3
 801605e:	bf18      	it	ne
 8016060:	4617      	movne	r7, r2
 8016062:	f047 0720 	orr.w	r7, r7, #32
 8016066:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016068:	601d      	str	r5, [r3, #0]
 801606a:	9b06      	ldr	r3, [sp, #24]
 801606c:	601c      	str	r4, [r3, #0]
 801606e:	e6a4      	b.n	8015dba <__gethex+0x110>
 8016070:	4299      	cmp	r1, r3
 8016072:	f843 cc04 	str.w	ip, [r3, #-4]
 8016076:	d8d8      	bhi.n	801602a <__gethex+0x380>
 8016078:	68ab      	ldr	r3, [r5, #8]
 801607a:	4599      	cmp	r9, r3
 801607c:	db12      	blt.n	80160a4 <__gethex+0x3fa>
 801607e:	6869      	ldr	r1, [r5, #4]
 8016080:	9802      	ldr	r0, [sp, #8]
 8016082:	3101      	adds	r1, #1
 8016084:	f000 f97a 	bl	801637c <_Balloc>
 8016088:	692a      	ldr	r2, [r5, #16]
 801608a:	3202      	adds	r2, #2
 801608c:	f105 010c 	add.w	r1, r5, #12
 8016090:	4683      	mov	fp, r0
 8016092:	0092      	lsls	r2, r2, #2
 8016094:	300c      	adds	r0, #12
 8016096:	f7fd f875 	bl	8013184 <memcpy>
 801609a:	4629      	mov	r1, r5
 801609c:	9802      	ldr	r0, [sp, #8]
 801609e:	f000 f9a1 	bl	80163e4 <_Bfree>
 80160a2:	465d      	mov	r5, fp
 80160a4:	692b      	ldr	r3, [r5, #16]
 80160a6:	1c5a      	adds	r2, r3, #1
 80160a8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80160ac:	612a      	str	r2, [r5, #16]
 80160ae:	2201      	movs	r2, #1
 80160b0:	615a      	str	r2, [r3, #20]
 80160b2:	e7c2      	b.n	801603a <__gethex+0x390>
 80160b4:	692a      	ldr	r2, [r5, #16]
 80160b6:	454a      	cmp	r2, r9
 80160b8:	dd0b      	ble.n	80160d2 <__gethex+0x428>
 80160ba:	2101      	movs	r1, #1
 80160bc:	4628      	mov	r0, r5
 80160be:	f7ff fda5 	bl	8015c0c <rshift>
 80160c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80160c6:	3401      	adds	r4, #1
 80160c8:	42a3      	cmp	r3, r4
 80160ca:	f6ff aed9 	blt.w	8015e80 <__gethex+0x1d6>
 80160ce:	2701      	movs	r7, #1
 80160d0:	e7c7      	b.n	8016062 <__gethex+0x3b8>
 80160d2:	f016 061f 	ands.w	r6, r6, #31
 80160d6:	d0fa      	beq.n	80160ce <__gethex+0x424>
 80160d8:	449a      	add	sl, r3
 80160da:	f1c6 0620 	rsb	r6, r6, #32
 80160de:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80160e2:	f000 fa0f 	bl	8016504 <__hi0bits>
 80160e6:	42b0      	cmp	r0, r6
 80160e8:	dbe7      	blt.n	80160ba <__gethex+0x410>
 80160ea:	e7f0      	b.n	80160ce <__gethex+0x424>

080160ec <L_shift>:
 80160ec:	f1c2 0208 	rsb	r2, r2, #8
 80160f0:	0092      	lsls	r2, r2, #2
 80160f2:	b570      	push	{r4, r5, r6, lr}
 80160f4:	f1c2 0620 	rsb	r6, r2, #32
 80160f8:	6843      	ldr	r3, [r0, #4]
 80160fa:	6804      	ldr	r4, [r0, #0]
 80160fc:	fa03 f506 	lsl.w	r5, r3, r6
 8016100:	432c      	orrs	r4, r5
 8016102:	40d3      	lsrs	r3, r2
 8016104:	6004      	str	r4, [r0, #0]
 8016106:	f840 3f04 	str.w	r3, [r0, #4]!
 801610a:	4288      	cmp	r0, r1
 801610c:	d3f4      	bcc.n	80160f8 <L_shift+0xc>
 801610e:	bd70      	pop	{r4, r5, r6, pc}

08016110 <__match>:
 8016110:	b530      	push	{r4, r5, lr}
 8016112:	6803      	ldr	r3, [r0, #0]
 8016114:	3301      	adds	r3, #1
 8016116:	f811 4b01 	ldrb.w	r4, [r1], #1
 801611a:	b914      	cbnz	r4, 8016122 <__match+0x12>
 801611c:	6003      	str	r3, [r0, #0]
 801611e:	2001      	movs	r0, #1
 8016120:	bd30      	pop	{r4, r5, pc}
 8016122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016126:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801612a:	2d19      	cmp	r5, #25
 801612c:	bf98      	it	ls
 801612e:	3220      	addls	r2, #32
 8016130:	42a2      	cmp	r2, r4
 8016132:	d0f0      	beq.n	8016116 <__match+0x6>
 8016134:	2000      	movs	r0, #0
 8016136:	e7f3      	b.n	8016120 <__match+0x10>

08016138 <__hexnan>:
 8016138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801613c:	680b      	ldr	r3, [r1, #0]
 801613e:	6801      	ldr	r1, [r0, #0]
 8016140:	115f      	asrs	r7, r3, #5
 8016142:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8016146:	f013 031f 	ands.w	r3, r3, #31
 801614a:	b087      	sub	sp, #28
 801614c:	bf18      	it	ne
 801614e:	3704      	addne	r7, #4
 8016150:	2500      	movs	r5, #0
 8016152:	1f3e      	subs	r6, r7, #4
 8016154:	4682      	mov	sl, r0
 8016156:	4690      	mov	r8, r2
 8016158:	9301      	str	r3, [sp, #4]
 801615a:	f847 5c04 	str.w	r5, [r7, #-4]
 801615e:	46b1      	mov	r9, r6
 8016160:	4634      	mov	r4, r6
 8016162:	9502      	str	r5, [sp, #8]
 8016164:	46ab      	mov	fp, r5
 8016166:	784a      	ldrb	r2, [r1, #1]
 8016168:	1c4b      	adds	r3, r1, #1
 801616a:	9303      	str	r3, [sp, #12]
 801616c:	b342      	cbz	r2, 80161c0 <__hexnan+0x88>
 801616e:	4610      	mov	r0, r2
 8016170:	9105      	str	r1, [sp, #20]
 8016172:	9204      	str	r2, [sp, #16]
 8016174:	f7ff fd84 	bl	8015c80 <__hexdig_fun>
 8016178:	2800      	cmp	r0, #0
 801617a:	d143      	bne.n	8016204 <__hexnan+0xcc>
 801617c:	9a04      	ldr	r2, [sp, #16]
 801617e:	9905      	ldr	r1, [sp, #20]
 8016180:	2a20      	cmp	r2, #32
 8016182:	d818      	bhi.n	80161b6 <__hexnan+0x7e>
 8016184:	9b02      	ldr	r3, [sp, #8]
 8016186:	459b      	cmp	fp, r3
 8016188:	dd13      	ble.n	80161b2 <__hexnan+0x7a>
 801618a:	454c      	cmp	r4, r9
 801618c:	d206      	bcs.n	801619c <__hexnan+0x64>
 801618e:	2d07      	cmp	r5, #7
 8016190:	dc04      	bgt.n	801619c <__hexnan+0x64>
 8016192:	462a      	mov	r2, r5
 8016194:	4649      	mov	r1, r9
 8016196:	4620      	mov	r0, r4
 8016198:	f7ff ffa8 	bl	80160ec <L_shift>
 801619c:	4544      	cmp	r4, r8
 801619e:	d944      	bls.n	801622a <__hexnan+0xf2>
 80161a0:	2300      	movs	r3, #0
 80161a2:	f1a4 0904 	sub.w	r9, r4, #4
 80161a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80161aa:	f8cd b008 	str.w	fp, [sp, #8]
 80161ae:	464c      	mov	r4, r9
 80161b0:	461d      	mov	r5, r3
 80161b2:	9903      	ldr	r1, [sp, #12]
 80161b4:	e7d7      	b.n	8016166 <__hexnan+0x2e>
 80161b6:	2a29      	cmp	r2, #41	; 0x29
 80161b8:	d14a      	bne.n	8016250 <__hexnan+0x118>
 80161ba:	3102      	adds	r1, #2
 80161bc:	f8ca 1000 	str.w	r1, [sl]
 80161c0:	f1bb 0f00 	cmp.w	fp, #0
 80161c4:	d044      	beq.n	8016250 <__hexnan+0x118>
 80161c6:	454c      	cmp	r4, r9
 80161c8:	d206      	bcs.n	80161d8 <__hexnan+0xa0>
 80161ca:	2d07      	cmp	r5, #7
 80161cc:	dc04      	bgt.n	80161d8 <__hexnan+0xa0>
 80161ce:	462a      	mov	r2, r5
 80161d0:	4649      	mov	r1, r9
 80161d2:	4620      	mov	r0, r4
 80161d4:	f7ff ff8a 	bl	80160ec <L_shift>
 80161d8:	4544      	cmp	r4, r8
 80161da:	d928      	bls.n	801622e <__hexnan+0xf6>
 80161dc:	4643      	mov	r3, r8
 80161de:	f854 2b04 	ldr.w	r2, [r4], #4
 80161e2:	f843 2b04 	str.w	r2, [r3], #4
 80161e6:	42a6      	cmp	r6, r4
 80161e8:	d2f9      	bcs.n	80161de <__hexnan+0xa6>
 80161ea:	2200      	movs	r2, #0
 80161ec:	f843 2b04 	str.w	r2, [r3], #4
 80161f0:	429e      	cmp	r6, r3
 80161f2:	d2fb      	bcs.n	80161ec <__hexnan+0xb4>
 80161f4:	6833      	ldr	r3, [r6, #0]
 80161f6:	b91b      	cbnz	r3, 8016200 <__hexnan+0xc8>
 80161f8:	4546      	cmp	r6, r8
 80161fa:	d127      	bne.n	801624c <__hexnan+0x114>
 80161fc:	2301      	movs	r3, #1
 80161fe:	6033      	str	r3, [r6, #0]
 8016200:	2005      	movs	r0, #5
 8016202:	e026      	b.n	8016252 <__hexnan+0x11a>
 8016204:	3501      	adds	r5, #1
 8016206:	2d08      	cmp	r5, #8
 8016208:	f10b 0b01 	add.w	fp, fp, #1
 801620c:	dd06      	ble.n	801621c <__hexnan+0xe4>
 801620e:	4544      	cmp	r4, r8
 8016210:	d9cf      	bls.n	80161b2 <__hexnan+0x7a>
 8016212:	2300      	movs	r3, #0
 8016214:	f844 3c04 	str.w	r3, [r4, #-4]
 8016218:	2501      	movs	r5, #1
 801621a:	3c04      	subs	r4, #4
 801621c:	6822      	ldr	r2, [r4, #0]
 801621e:	f000 000f 	and.w	r0, r0, #15
 8016222:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016226:	6020      	str	r0, [r4, #0]
 8016228:	e7c3      	b.n	80161b2 <__hexnan+0x7a>
 801622a:	2508      	movs	r5, #8
 801622c:	e7c1      	b.n	80161b2 <__hexnan+0x7a>
 801622e:	9b01      	ldr	r3, [sp, #4]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d0df      	beq.n	80161f4 <__hexnan+0xbc>
 8016234:	f04f 32ff 	mov.w	r2, #4294967295
 8016238:	f1c3 0320 	rsb	r3, r3, #32
 801623c:	fa22 f303 	lsr.w	r3, r2, r3
 8016240:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016244:	401a      	ands	r2, r3
 8016246:	f847 2c04 	str.w	r2, [r7, #-4]
 801624a:	e7d3      	b.n	80161f4 <__hexnan+0xbc>
 801624c:	3e04      	subs	r6, #4
 801624e:	e7d1      	b.n	80161f4 <__hexnan+0xbc>
 8016250:	2004      	movs	r0, #4
 8016252:	b007      	add	sp, #28
 8016254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016258 <__locale_ctype_ptr_l>:
 8016258:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801625c:	4770      	bx	lr

0801625e <__localeconv_l>:
 801625e:	30f0      	adds	r0, #240	; 0xf0
 8016260:	4770      	bx	lr
	...

08016264 <_localeconv_r>:
 8016264:	4b04      	ldr	r3, [pc, #16]	; (8016278 <_localeconv_r+0x14>)
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	6a18      	ldr	r0, [r3, #32]
 801626a:	4b04      	ldr	r3, [pc, #16]	; (801627c <_localeconv_r+0x18>)
 801626c:	2800      	cmp	r0, #0
 801626e:	bf08      	it	eq
 8016270:	4618      	moveq	r0, r3
 8016272:	30f0      	adds	r0, #240	; 0xf0
 8016274:	4770      	bx	lr
 8016276:	bf00      	nop
 8016278:	200001a8 	.word	0x200001a8
 801627c:	2000020c 	.word	0x2000020c

08016280 <__swhatbuf_r>:
 8016280:	b570      	push	{r4, r5, r6, lr}
 8016282:	460e      	mov	r6, r1
 8016284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016288:	2900      	cmp	r1, #0
 801628a:	b096      	sub	sp, #88	; 0x58
 801628c:	4614      	mov	r4, r2
 801628e:	461d      	mov	r5, r3
 8016290:	da07      	bge.n	80162a2 <__swhatbuf_r+0x22>
 8016292:	2300      	movs	r3, #0
 8016294:	602b      	str	r3, [r5, #0]
 8016296:	89b3      	ldrh	r3, [r6, #12]
 8016298:	061a      	lsls	r2, r3, #24
 801629a:	d410      	bmi.n	80162be <__swhatbuf_r+0x3e>
 801629c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80162a0:	e00e      	b.n	80162c0 <__swhatbuf_r+0x40>
 80162a2:	466a      	mov	r2, sp
 80162a4:	f000 ff06 	bl	80170b4 <_fstat_r>
 80162a8:	2800      	cmp	r0, #0
 80162aa:	dbf2      	blt.n	8016292 <__swhatbuf_r+0x12>
 80162ac:	9a01      	ldr	r2, [sp, #4]
 80162ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80162b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80162b6:	425a      	negs	r2, r3
 80162b8:	415a      	adcs	r2, r3
 80162ba:	602a      	str	r2, [r5, #0]
 80162bc:	e7ee      	b.n	801629c <__swhatbuf_r+0x1c>
 80162be:	2340      	movs	r3, #64	; 0x40
 80162c0:	2000      	movs	r0, #0
 80162c2:	6023      	str	r3, [r4, #0]
 80162c4:	b016      	add	sp, #88	; 0x58
 80162c6:	bd70      	pop	{r4, r5, r6, pc}

080162c8 <__smakebuf_r>:
 80162c8:	898b      	ldrh	r3, [r1, #12]
 80162ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80162cc:	079d      	lsls	r5, r3, #30
 80162ce:	4606      	mov	r6, r0
 80162d0:	460c      	mov	r4, r1
 80162d2:	d507      	bpl.n	80162e4 <__smakebuf_r+0x1c>
 80162d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80162d8:	6023      	str	r3, [r4, #0]
 80162da:	6123      	str	r3, [r4, #16]
 80162dc:	2301      	movs	r3, #1
 80162de:	6163      	str	r3, [r4, #20]
 80162e0:	b002      	add	sp, #8
 80162e2:	bd70      	pop	{r4, r5, r6, pc}
 80162e4:	ab01      	add	r3, sp, #4
 80162e6:	466a      	mov	r2, sp
 80162e8:	f7ff ffca 	bl	8016280 <__swhatbuf_r>
 80162ec:	9900      	ldr	r1, [sp, #0]
 80162ee:	4605      	mov	r5, r0
 80162f0:	4630      	mov	r0, r6
 80162f2:	f000 fc9f 	bl	8016c34 <_malloc_r>
 80162f6:	b948      	cbnz	r0, 801630c <__smakebuf_r+0x44>
 80162f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80162fc:	059a      	lsls	r2, r3, #22
 80162fe:	d4ef      	bmi.n	80162e0 <__smakebuf_r+0x18>
 8016300:	f023 0303 	bic.w	r3, r3, #3
 8016304:	f043 0302 	orr.w	r3, r3, #2
 8016308:	81a3      	strh	r3, [r4, #12]
 801630a:	e7e3      	b.n	80162d4 <__smakebuf_r+0xc>
 801630c:	4b0d      	ldr	r3, [pc, #52]	; (8016344 <__smakebuf_r+0x7c>)
 801630e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016310:	89a3      	ldrh	r3, [r4, #12]
 8016312:	6020      	str	r0, [r4, #0]
 8016314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016318:	81a3      	strh	r3, [r4, #12]
 801631a:	9b00      	ldr	r3, [sp, #0]
 801631c:	6163      	str	r3, [r4, #20]
 801631e:	9b01      	ldr	r3, [sp, #4]
 8016320:	6120      	str	r0, [r4, #16]
 8016322:	b15b      	cbz	r3, 801633c <__smakebuf_r+0x74>
 8016324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016328:	4630      	mov	r0, r6
 801632a:	f000 fed5 	bl	80170d8 <_isatty_r>
 801632e:	b128      	cbz	r0, 801633c <__smakebuf_r+0x74>
 8016330:	89a3      	ldrh	r3, [r4, #12]
 8016332:	f023 0303 	bic.w	r3, r3, #3
 8016336:	f043 0301 	orr.w	r3, r3, #1
 801633a:	81a3      	strh	r3, [r4, #12]
 801633c:	89a3      	ldrh	r3, [r4, #12]
 801633e:	431d      	orrs	r5, r3
 8016340:	81a5      	strh	r5, [r4, #12]
 8016342:	e7cd      	b.n	80162e0 <__smakebuf_r+0x18>
 8016344:	08015ac1 	.word	0x08015ac1

08016348 <malloc>:
 8016348:	4b02      	ldr	r3, [pc, #8]	; (8016354 <malloc+0xc>)
 801634a:	4601      	mov	r1, r0
 801634c:	6818      	ldr	r0, [r3, #0]
 801634e:	f000 bc71 	b.w	8016c34 <_malloc_r>
 8016352:	bf00      	nop
 8016354:	200001a8 	.word	0x200001a8

08016358 <__ascii_mbtowc>:
 8016358:	b082      	sub	sp, #8
 801635a:	b901      	cbnz	r1, 801635e <__ascii_mbtowc+0x6>
 801635c:	a901      	add	r1, sp, #4
 801635e:	b142      	cbz	r2, 8016372 <__ascii_mbtowc+0x1a>
 8016360:	b14b      	cbz	r3, 8016376 <__ascii_mbtowc+0x1e>
 8016362:	7813      	ldrb	r3, [r2, #0]
 8016364:	600b      	str	r3, [r1, #0]
 8016366:	7812      	ldrb	r2, [r2, #0]
 8016368:	1c10      	adds	r0, r2, #0
 801636a:	bf18      	it	ne
 801636c:	2001      	movne	r0, #1
 801636e:	b002      	add	sp, #8
 8016370:	4770      	bx	lr
 8016372:	4610      	mov	r0, r2
 8016374:	e7fb      	b.n	801636e <__ascii_mbtowc+0x16>
 8016376:	f06f 0001 	mvn.w	r0, #1
 801637a:	e7f8      	b.n	801636e <__ascii_mbtowc+0x16>

0801637c <_Balloc>:
 801637c:	b570      	push	{r4, r5, r6, lr}
 801637e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016380:	4604      	mov	r4, r0
 8016382:	460e      	mov	r6, r1
 8016384:	b93d      	cbnz	r5, 8016396 <_Balloc+0x1a>
 8016386:	2010      	movs	r0, #16
 8016388:	f7ff ffde 	bl	8016348 <malloc>
 801638c:	6260      	str	r0, [r4, #36]	; 0x24
 801638e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016392:	6005      	str	r5, [r0, #0]
 8016394:	60c5      	str	r5, [r0, #12]
 8016396:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016398:	68eb      	ldr	r3, [r5, #12]
 801639a:	b183      	cbz	r3, 80163be <_Balloc+0x42>
 801639c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801639e:	68db      	ldr	r3, [r3, #12]
 80163a0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80163a4:	b9b8      	cbnz	r0, 80163d6 <_Balloc+0x5a>
 80163a6:	2101      	movs	r1, #1
 80163a8:	fa01 f506 	lsl.w	r5, r1, r6
 80163ac:	1d6a      	adds	r2, r5, #5
 80163ae:	0092      	lsls	r2, r2, #2
 80163b0:	4620      	mov	r0, r4
 80163b2:	f000 fbe3 	bl	8016b7c <_calloc_r>
 80163b6:	b160      	cbz	r0, 80163d2 <_Balloc+0x56>
 80163b8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80163bc:	e00e      	b.n	80163dc <_Balloc+0x60>
 80163be:	2221      	movs	r2, #33	; 0x21
 80163c0:	2104      	movs	r1, #4
 80163c2:	4620      	mov	r0, r4
 80163c4:	f000 fbda 	bl	8016b7c <_calloc_r>
 80163c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80163ca:	60e8      	str	r0, [r5, #12]
 80163cc:	68db      	ldr	r3, [r3, #12]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d1e4      	bne.n	801639c <_Balloc+0x20>
 80163d2:	2000      	movs	r0, #0
 80163d4:	bd70      	pop	{r4, r5, r6, pc}
 80163d6:	6802      	ldr	r2, [r0, #0]
 80163d8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80163dc:	2300      	movs	r3, #0
 80163de:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80163e2:	e7f7      	b.n	80163d4 <_Balloc+0x58>

080163e4 <_Bfree>:
 80163e4:	b570      	push	{r4, r5, r6, lr}
 80163e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80163e8:	4606      	mov	r6, r0
 80163ea:	460d      	mov	r5, r1
 80163ec:	b93c      	cbnz	r4, 80163fe <_Bfree+0x1a>
 80163ee:	2010      	movs	r0, #16
 80163f0:	f7ff ffaa 	bl	8016348 <malloc>
 80163f4:	6270      	str	r0, [r6, #36]	; 0x24
 80163f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80163fa:	6004      	str	r4, [r0, #0]
 80163fc:	60c4      	str	r4, [r0, #12]
 80163fe:	b13d      	cbz	r5, 8016410 <_Bfree+0x2c>
 8016400:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016402:	686a      	ldr	r2, [r5, #4]
 8016404:	68db      	ldr	r3, [r3, #12]
 8016406:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801640a:	6029      	str	r1, [r5, #0]
 801640c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016410:	bd70      	pop	{r4, r5, r6, pc}

08016412 <__multadd>:
 8016412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016416:	690d      	ldr	r5, [r1, #16]
 8016418:	461f      	mov	r7, r3
 801641a:	4606      	mov	r6, r0
 801641c:	460c      	mov	r4, r1
 801641e:	f101 0c14 	add.w	ip, r1, #20
 8016422:	2300      	movs	r3, #0
 8016424:	f8dc 0000 	ldr.w	r0, [ip]
 8016428:	b281      	uxth	r1, r0
 801642a:	fb02 7101 	mla	r1, r2, r1, r7
 801642e:	0c0f      	lsrs	r7, r1, #16
 8016430:	0c00      	lsrs	r0, r0, #16
 8016432:	fb02 7000 	mla	r0, r2, r0, r7
 8016436:	b289      	uxth	r1, r1
 8016438:	3301      	adds	r3, #1
 801643a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801643e:	429d      	cmp	r5, r3
 8016440:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016444:	f84c 1b04 	str.w	r1, [ip], #4
 8016448:	dcec      	bgt.n	8016424 <__multadd+0x12>
 801644a:	b1d7      	cbz	r7, 8016482 <__multadd+0x70>
 801644c:	68a3      	ldr	r3, [r4, #8]
 801644e:	42ab      	cmp	r3, r5
 8016450:	dc12      	bgt.n	8016478 <__multadd+0x66>
 8016452:	6861      	ldr	r1, [r4, #4]
 8016454:	4630      	mov	r0, r6
 8016456:	3101      	adds	r1, #1
 8016458:	f7ff ff90 	bl	801637c <_Balloc>
 801645c:	6922      	ldr	r2, [r4, #16]
 801645e:	3202      	adds	r2, #2
 8016460:	f104 010c 	add.w	r1, r4, #12
 8016464:	4680      	mov	r8, r0
 8016466:	0092      	lsls	r2, r2, #2
 8016468:	300c      	adds	r0, #12
 801646a:	f7fc fe8b 	bl	8013184 <memcpy>
 801646e:	4621      	mov	r1, r4
 8016470:	4630      	mov	r0, r6
 8016472:	f7ff ffb7 	bl	80163e4 <_Bfree>
 8016476:	4644      	mov	r4, r8
 8016478:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801647c:	3501      	adds	r5, #1
 801647e:	615f      	str	r7, [r3, #20]
 8016480:	6125      	str	r5, [r4, #16]
 8016482:	4620      	mov	r0, r4
 8016484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016488 <__s2b>:
 8016488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801648c:	460c      	mov	r4, r1
 801648e:	4615      	mov	r5, r2
 8016490:	461f      	mov	r7, r3
 8016492:	2209      	movs	r2, #9
 8016494:	3308      	adds	r3, #8
 8016496:	4606      	mov	r6, r0
 8016498:	fb93 f3f2 	sdiv	r3, r3, r2
 801649c:	2100      	movs	r1, #0
 801649e:	2201      	movs	r2, #1
 80164a0:	429a      	cmp	r2, r3
 80164a2:	db20      	blt.n	80164e6 <__s2b+0x5e>
 80164a4:	4630      	mov	r0, r6
 80164a6:	f7ff ff69 	bl	801637c <_Balloc>
 80164aa:	9b08      	ldr	r3, [sp, #32]
 80164ac:	6143      	str	r3, [r0, #20]
 80164ae:	2d09      	cmp	r5, #9
 80164b0:	f04f 0301 	mov.w	r3, #1
 80164b4:	6103      	str	r3, [r0, #16]
 80164b6:	dd19      	ble.n	80164ec <__s2b+0x64>
 80164b8:	f104 0809 	add.w	r8, r4, #9
 80164bc:	46c1      	mov	r9, r8
 80164be:	442c      	add	r4, r5
 80164c0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80164c4:	4601      	mov	r1, r0
 80164c6:	3b30      	subs	r3, #48	; 0x30
 80164c8:	220a      	movs	r2, #10
 80164ca:	4630      	mov	r0, r6
 80164cc:	f7ff ffa1 	bl	8016412 <__multadd>
 80164d0:	45a1      	cmp	r9, r4
 80164d2:	d1f5      	bne.n	80164c0 <__s2b+0x38>
 80164d4:	eb08 0405 	add.w	r4, r8, r5
 80164d8:	3c08      	subs	r4, #8
 80164da:	1b2d      	subs	r5, r5, r4
 80164dc:	1963      	adds	r3, r4, r5
 80164de:	42bb      	cmp	r3, r7
 80164e0:	db07      	blt.n	80164f2 <__s2b+0x6a>
 80164e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164e6:	0052      	lsls	r2, r2, #1
 80164e8:	3101      	adds	r1, #1
 80164ea:	e7d9      	b.n	80164a0 <__s2b+0x18>
 80164ec:	340a      	adds	r4, #10
 80164ee:	2509      	movs	r5, #9
 80164f0:	e7f3      	b.n	80164da <__s2b+0x52>
 80164f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80164f6:	4601      	mov	r1, r0
 80164f8:	3b30      	subs	r3, #48	; 0x30
 80164fa:	220a      	movs	r2, #10
 80164fc:	4630      	mov	r0, r6
 80164fe:	f7ff ff88 	bl	8016412 <__multadd>
 8016502:	e7eb      	b.n	80164dc <__s2b+0x54>

08016504 <__hi0bits>:
 8016504:	0c02      	lsrs	r2, r0, #16
 8016506:	0412      	lsls	r2, r2, #16
 8016508:	4603      	mov	r3, r0
 801650a:	b9b2      	cbnz	r2, 801653a <__hi0bits+0x36>
 801650c:	0403      	lsls	r3, r0, #16
 801650e:	2010      	movs	r0, #16
 8016510:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016514:	bf04      	itt	eq
 8016516:	021b      	lsleq	r3, r3, #8
 8016518:	3008      	addeq	r0, #8
 801651a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801651e:	bf04      	itt	eq
 8016520:	011b      	lsleq	r3, r3, #4
 8016522:	3004      	addeq	r0, #4
 8016524:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016528:	bf04      	itt	eq
 801652a:	009b      	lsleq	r3, r3, #2
 801652c:	3002      	addeq	r0, #2
 801652e:	2b00      	cmp	r3, #0
 8016530:	db06      	blt.n	8016540 <__hi0bits+0x3c>
 8016532:	005b      	lsls	r3, r3, #1
 8016534:	d503      	bpl.n	801653e <__hi0bits+0x3a>
 8016536:	3001      	adds	r0, #1
 8016538:	4770      	bx	lr
 801653a:	2000      	movs	r0, #0
 801653c:	e7e8      	b.n	8016510 <__hi0bits+0xc>
 801653e:	2020      	movs	r0, #32
 8016540:	4770      	bx	lr

08016542 <__lo0bits>:
 8016542:	6803      	ldr	r3, [r0, #0]
 8016544:	f013 0207 	ands.w	r2, r3, #7
 8016548:	4601      	mov	r1, r0
 801654a:	d00b      	beq.n	8016564 <__lo0bits+0x22>
 801654c:	07da      	lsls	r2, r3, #31
 801654e:	d423      	bmi.n	8016598 <__lo0bits+0x56>
 8016550:	0798      	lsls	r0, r3, #30
 8016552:	bf49      	itett	mi
 8016554:	085b      	lsrmi	r3, r3, #1
 8016556:	089b      	lsrpl	r3, r3, #2
 8016558:	2001      	movmi	r0, #1
 801655a:	600b      	strmi	r3, [r1, #0]
 801655c:	bf5c      	itt	pl
 801655e:	600b      	strpl	r3, [r1, #0]
 8016560:	2002      	movpl	r0, #2
 8016562:	4770      	bx	lr
 8016564:	b298      	uxth	r0, r3
 8016566:	b9a8      	cbnz	r0, 8016594 <__lo0bits+0x52>
 8016568:	0c1b      	lsrs	r3, r3, #16
 801656a:	2010      	movs	r0, #16
 801656c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016570:	bf04      	itt	eq
 8016572:	0a1b      	lsreq	r3, r3, #8
 8016574:	3008      	addeq	r0, #8
 8016576:	071a      	lsls	r2, r3, #28
 8016578:	bf04      	itt	eq
 801657a:	091b      	lsreq	r3, r3, #4
 801657c:	3004      	addeq	r0, #4
 801657e:	079a      	lsls	r2, r3, #30
 8016580:	bf04      	itt	eq
 8016582:	089b      	lsreq	r3, r3, #2
 8016584:	3002      	addeq	r0, #2
 8016586:	07da      	lsls	r2, r3, #31
 8016588:	d402      	bmi.n	8016590 <__lo0bits+0x4e>
 801658a:	085b      	lsrs	r3, r3, #1
 801658c:	d006      	beq.n	801659c <__lo0bits+0x5a>
 801658e:	3001      	adds	r0, #1
 8016590:	600b      	str	r3, [r1, #0]
 8016592:	4770      	bx	lr
 8016594:	4610      	mov	r0, r2
 8016596:	e7e9      	b.n	801656c <__lo0bits+0x2a>
 8016598:	2000      	movs	r0, #0
 801659a:	4770      	bx	lr
 801659c:	2020      	movs	r0, #32
 801659e:	4770      	bx	lr

080165a0 <__i2b>:
 80165a0:	b510      	push	{r4, lr}
 80165a2:	460c      	mov	r4, r1
 80165a4:	2101      	movs	r1, #1
 80165a6:	f7ff fee9 	bl	801637c <_Balloc>
 80165aa:	2201      	movs	r2, #1
 80165ac:	6144      	str	r4, [r0, #20]
 80165ae:	6102      	str	r2, [r0, #16]
 80165b0:	bd10      	pop	{r4, pc}

080165b2 <__multiply>:
 80165b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165b6:	4614      	mov	r4, r2
 80165b8:	690a      	ldr	r2, [r1, #16]
 80165ba:	6923      	ldr	r3, [r4, #16]
 80165bc:	429a      	cmp	r2, r3
 80165be:	bfb8      	it	lt
 80165c0:	460b      	movlt	r3, r1
 80165c2:	4688      	mov	r8, r1
 80165c4:	bfbc      	itt	lt
 80165c6:	46a0      	movlt	r8, r4
 80165c8:	461c      	movlt	r4, r3
 80165ca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80165ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80165d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80165d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80165da:	eb07 0609 	add.w	r6, r7, r9
 80165de:	42b3      	cmp	r3, r6
 80165e0:	bfb8      	it	lt
 80165e2:	3101      	addlt	r1, #1
 80165e4:	f7ff feca 	bl	801637c <_Balloc>
 80165e8:	f100 0514 	add.w	r5, r0, #20
 80165ec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80165f0:	462b      	mov	r3, r5
 80165f2:	2200      	movs	r2, #0
 80165f4:	4573      	cmp	r3, lr
 80165f6:	d316      	bcc.n	8016626 <__multiply+0x74>
 80165f8:	f104 0214 	add.w	r2, r4, #20
 80165fc:	f108 0114 	add.w	r1, r8, #20
 8016600:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016604:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016608:	9300      	str	r3, [sp, #0]
 801660a:	9b00      	ldr	r3, [sp, #0]
 801660c:	9201      	str	r2, [sp, #4]
 801660e:	4293      	cmp	r3, r2
 8016610:	d80c      	bhi.n	801662c <__multiply+0x7a>
 8016612:	2e00      	cmp	r6, #0
 8016614:	dd03      	ble.n	801661e <__multiply+0x6c>
 8016616:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801661a:	2b00      	cmp	r3, #0
 801661c:	d05d      	beq.n	80166da <__multiply+0x128>
 801661e:	6106      	str	r6, [r0, #16]
 8016620:	b003      	add	sp, #12
 8016622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016626:	f843 2b04 	str.w	r2, [r3], #4
 801662a:	e7e3      	b.n	80165f4 <__multiply+0x42>
 801662c:	f8b2 b000 	ldrh.w	fp, [r2]
 8016630:	f1bb 0f00 	cmp.w	fp, #0
 8016634:	d023      	beq.n	801667e <__multiply+0xcc>
 8016636:	4689      	mov	r9, r1
 8016638:	46ac      	mov	ip, r5
 801663a:	f04f 0800 	mov.w	r8, #0
 801663e:	f859 4b04 	ldr.w	r4, [r9], #4
 8016642:	f8dc a000 	ldr.w	sl, [ip]
 8016646:	b2a3      	uxth	r3, r4
 8016648:	fa1f fa8a 	uxth.w	sl, sl
 801664c:	fb0b a303 	mla	r3, fp, r3, sl
 8016650:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016654:	f8dc 4000 	ldr.w	r4, [ip]
 8016658:	4443      	add	r3, r8
 801665a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801665e:	fb0b 840a 	mla	r4, fp, sl, r8
 8016662:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016666:	46e2      	mov	sl, ip
 8016668:	b29b      	uxth	r3, r3
 801666a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801666e:	454f      	cmp	r7, r9
 8016670:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016674:	f84a 3b04 	str.w	r3, [sl], #4
 8016678:	d82b      	bhi.n	80166d2 <__multiply+0x120>
 801667a:	f8cc 8004 	str.w	r8, [ip, #4]
 801667e:	9b01      	ldr	r3, [sp, #4]
 8016680:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016684:	3204      	adds	r2, #4
 8016686:	f1ba 0f00 	cmp.w	sl, #0
 801668a:	d020      	beq.n	80166ce <__multiply+0x11c>
 801668c:	682b      	ldr	r3, [r5, #0]
 801668e:	4689      	mov	r9, r1
 8016690:	46a8      	mov	r8, r5
 8016692:	f04f 0b00 	mov.w	fp, #0
 8016696:	f8b9 c000 	ldrh.w	ip, [r9]
 801669a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801669e:	fb0a 440c 	mla	r4, sl, ip, r4
 80166a2:	445c      	add	r4, fp
 80166a4:	46c4      	mov	ip, r8
 80166a6:	b29b      	uxth	r3, r3
 80166a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80166ac:	f84c 3b04 	str.w	r3, [ip], #4
 80166b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80166b4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80166b8:	0c1b      	lsrs	r3, r3, #16
 80166ba:	fb0a b303 	mla	r3, sl, r3, fp
 80166be:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80166c2:	454f      	cmp	r7, r9
 80166c4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80166c8:	d805      	bhi.n	80166d6 <__multiply+0x124>
 80166ca:	f8c8 3004 	str.w	r3, [r8, #4]
 80166ce:	3504      	adds	r5, #4
 80166d0:	e79b      	b.n	801660a <__multiply+0x58>
 80166d2:	46d4      	mov	ip, sl
 80166d4:	e7b3      	b.n	801663e <__multiply+0x8c>
 80166d6:	46e0      	mov	r8, ip
 80166d8:	e7dd      	b.n	8016696 <__multiply+0xe4>
 80166da:	3e01      	subs	r6, #1
 80166dc:	e799      	b.n	8016612 <__multiply+0x60>
	...

080166e0 <__pow5mult>:
 80166e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166e4:	4615      	mov	r5, r2
 80166e6:	f012 0203 	ands.w	r2, r2, #3
 80166ea:	4606      	mov	r6, r0
 80166ec:	460f      	mov	r7, r1
 80166ee:	d007      	beq.n	8016700 <__pow5mult+0x20>
 80166f0:	3a01      	subs	r2, #1
 80166f2:	4c21      	ldr	r4, [pc, #132]	; (8016778 <__pow5mult+0x98>)
 80166f4:	2300      	movs	r3, #0
 80166f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80166fa:	f7ff fe8a 	bl	8016412 <__multadd>
 80166fe:	4607      	mov	r7, r0
 8016700:	10ad      	asrs	r5, r5, #2
 8016702:	d035      	beq.n	8016770 <__pow5mult+0x90>
 8016704:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016706:	b93c      	cbnz	r4, 8016718 <__pow5mult+0x38>
 8016708:	2010      	movs	r0, #16
 801670a:	f7ff fe1d 	bl	8016348 <malloc>
 801670e:	6270      	str	r0, [r6, #36]	; 0x24
 8016710:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016714:	6004      	str	r4, [r0, #0]
 8016716:	60c4      	str	r4, [r0, #12]
 8016718:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801671c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016720:	b94c      	cbnz	r4, 8016736 <__pow5mult+0x56>
 8016722:	f240 2171 	movw	r1, #625	; 0x271
 8016726:	4630      	mov	r0, r6
 8016728:	f7ff ff3a 	bl	80165a0 <__i2b>
 801672c:	2300      	movs	r3, #0
 801672e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016732:	4604      	mov	r4, r0
 8016734:	6003      	str	r3, [r0, #0]
 8016736:	f04f 0800 	mov.w	r8, #0
 801673a:	07eb      	lsls	r3, r5, #31
 801673c:	d50a      	bpl.n	8016754 <__pow5mult+0x74>
 801673e:	4639      	mov	r1, r7
 8016740:	4622      	mov	r2, r4
 8016742:	4630      	mov	r0, r6
 8016744:	f7ff ff35 	bl	80165b2 <__multiply>
 8016748:	4639      	mov	r1, r7
 801674a:	4681      	mov	r9, r0
 801674c:	4630      	mov	r0, r6
 801674e:	f7ff fe49 	bl	80163e4 <_Bfree>
 8016752:	464f      	mov	r7, r9
 8016754:	106d      	asrs	r5, r5, #1
 8016756:	d00b      	beq.n	8016770 <__pow5mult+0x90>
 8016758:	6820      	ldr	r0, [r4, #0]
 801675a:	b938      	cbnz	r0, 801676c <__pow5mult+0x8c>
 801675c:	4622      	mov	r2, r4
 801675e:	4621      	mov	r1, r4
 8016760:	4630      	mov	r0, r6
 8016762:	f7ff ff26 	bl	80165b2 <__multiply>
 8016766:	6020      	str	r0, [r4, #0]
 8016768:	f8c0 8000 	str.w	r8, [r0]
 801676c:	4604      	mov	r4, r0
 801676e:	e7e4      	b.n	801673a <__pow5mult+0x5a>
 8016770:	4638      	mov	r0, r7
 8016772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016776:	bf00      	nop
 8016778:	08018358 	.word	0x08018358

0801677c <__lshift>:
 801677c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016780:	460c      	mov	r4, r1
 8016782:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016786:	6923      	ldr	r3, [r4, #16]
 8016788:	6849      	ldr	r1, [r1, #4]
 801678a:	eb0a 0903 	add.w	r9, sl, r3
 801678e:	68a3      	ldr	r3, [r4, #8]
 8016790:	4607      	mov	r7, r0
 8016792:	4616      	mov	r6, r2
 8016794:	f109 0501 	add.w	r5, r9, #1
 8016798:	42ab      	cmp	r3, r5
 801679a:	db32      	blt.n	8016802 <__lshift+0x86>
 801679c:	4638      	mov	r0, r7
 801679e:	f7ff fded 	bl	801637c <_Balloc>
 80167a2:	2300      	movs	r3, #0
 80167a4:	4680      	mov	r8, r0
 80167a6:	f100 0114 	add.w	r1, r0, #20
 80167aa:	461a      	mov	r2, r3
 80167ac:	4553      	cmp	r3, sl
 80167ae:	db2b      	blt.n	8016808 <__lshift+0x8c>
 80167b0:	6920      	ldr	r0, [r4, #16]
 80167b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80167b6:	f104 0314 	add.w	r3, r4, #20
 80167ba:	f016 021f 	ands.w	r2, r6, #31
 80167be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80167c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80167c6:	d025      	beq.n	8016814 <__lshift+0x98>
 80167c8:	f1c2 0e20 	rsb	lr, r2, #32
 80167cc:	2000      	movs	r0, #0
 80167ce:	681e      	ldr	r6, [r3, #0]
 80167d0:	468a      	mov	sl, r1
 80167d2:	4096      	lsls	r6, r2
 80167d4:	4330      	orrs	r0, r6
 80167d6:	f84a 0b04 	str.w	r0, [sl], #4
 80167da:	f853 0b04 	ldr.w	r0, [r3], #4
 80167de:	459c      	cmp	ip, r3
 80167e0:	fa20 f00e 	lsr.w	r0, r0, lr
 80167e4:	d814      	bhi.n	8016810 <__lshift+0x94>
 80167e6:	6048      	str	r0, [r1, #4]
 80167e8:	b108      	cbz	r0, 80167ee <__lshift+0x72>
 80167ea:	f109 0502 	add.w	r5, r9, #2
 80167ee:	3d01      	subs	r5, #1
 80167f0:	4638      	mov	r0, r7
 80167f2:	f8c8 5010 	str.w	r5, [r8, #16]
 80167f6:	4621      	mov	r1, r4
 80167f8:	f7ff fdf4 	bl	80163e4 <_Bfree>
 80167fc:	4640      	mov	r0, r8
 80167fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016802:	3101      	adds	r1, #1
 8016804:	005b      	lsls	r3, r3, #1
 8016806:	e7c7      	b.n	8016798 <__lshift+0x1c>
 8016808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801680c:	3301      	adds	r3, #1
 801680e:	e7cd      	b.n	80167ac <__lshift+0x30>
 8016810:	4651      	mov	r1, sl
 8016812:	e7dc      	b.n	80167ce <__lshift+0x52>
 8016814:	3904      	subs	r1, #4
 8016816:	f853 2b04 	ldr.w	r2, [r3], #4
 801681a:	f841 2f04 	str.w	r2, [r1, #4]!
 801681e:	459c      	cmp	ip, r3
 8016820:	d8f9      	bhi.n	8016816 <__lshift+0x9a>
 8016822:	e7e4      	b.n	80167ee <__lshift+0x72>

08016824 <__mcmp>:
 8016824:	6903      	ldr	r3, [r0, #16]
 8016826:	690a      	ldr	r2, [r1, #16]
 8016828:	1a9b      	subs	r3, r3, r2
 801682a:	b530      	push	{r4, r5, lr}
 801682c:	d10c      	bne.n	8016848 <__mcmp+0x24>
 801682e:	0092      	lsls	r2, r2, #2
 8016830:	3014      	adds	r0, #20
 8016832:	3114      	adds	r1, #20
 8016834:	1884      	adds	r4, r0, r2
 8016836:	4411      	add	r1, r2
 8016838:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801683c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016840:	4295      	cmp	r5, r2
 8016842:	d003      	beq.n	801684c <__mcmp+0x28>
 8016844:	d305      	bcc.n	8016852 <__mcmp+0x2e>
 8016846:	2301      	movs	r3, #1
 8016848:	4618      	mov	r0, r3
 801684a:	bd30      	pop	{r4, r5, pc}
 801684c:	42a0      	cmp	r0, r4
 801684e:	d3f3      	bcc.n	8016838 <__mcmp+0x14>
 8016850:	e7fa      	b.n	8016848 <__mcmp+0x24>
 8016852:	f04f 33ff 	mov.w	r3, #4294967295
 8016856:	e7f7      	b.n	8016848 <__mcmp+0x24>

08016858 <__mdiff>:
 8016858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801685c:	460d      	mov	r5, r1
 801685e:	4607      	mov	r7, r0
 8016860:	4611      	mov	r1, r2
 8016862:	4628      	mov	r0, r5
 8016864:	4614      	mov	r4, r2
 8016866:	f7ff ffdd 	bl	8016824 <__mcmp>
 801686a:	1e06      	subs	r6, r0, #0
 801686c:	d108      	bne.n	8016880 <__mdiff+0x28>
 801686e:	4631      	mov	r1, r6
 8016870:	4638      	mov	r0, r7
 8016872:	f7ff fd83 	bl	801637c <_Balloc>
 8016876:	2301      	movs	r3, #1
 8016878:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801687c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016880:	bfa4      	itt	ge
 8016882:	4623      	movge	r3, r4
 8016884:	462c      	movge	r4, r5
 8016886:	4638      	mov	r0, r7
 8016888:	6861      	ldr	r1, [r4, #4]
 801688a:	bfa6      	itte	ge
 801688c:	461d      	movge	r5, r3
 801688e:	2600      	movge	r6, #0
 8016890:	2601      	movlt	r6, #1
 8016892:	f7ff fd73 	bl	801637c <_Balloc>
 8016896:	692b      	ldr	r3, [r5, #16]
 8016898:	60c6      	str	r6, [r0, #12]
 801689a:	6926      	ldr	r6, [r4, #16]
 801689c:	f105 0914 	add.w	r9, r5, #20
 80168a0:	f104 0214 	add.w	r2, r4, #20
 80168a4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80168a8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80168ac:	f100 0514 	add.w	r5, r0, #20
 80168b0:	f04f 0e00 	mov.w	lr, #0
 80168b4:	f852 ab04 	ldr.w	sl, [r2], #4
 80168b8:	f859 4b04 	ldr.w	r4, [r9], #4
 80168bc:	fa1e f18a 	uxtah	r1, lr, sl
 80168c0:	b2a3      	uxth	r3, r4
 80168c2:	1ac9      	subs	r1, r1, r3
 80168c4:	0c23      	lsrs	r3, r4, #16
 80168c6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80168ca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80168ce:	b289      	uxth	r1, r1
 80168d0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80168d4:	45c8      	cmp	r8, r9
 80168d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80168da:	4694      	mov	ip, r2
 80168dc:	f845 3b04 	str.w	r3, [r5], #4
 80168e0:	d8e8      	bhi.n	80168b4 <__mdiff+0x5c>
 80168e2:	45bc      	cmp	ip, r7
 80168e4:	d304      	bcc.n	80168f0 <__mdiff+0x98>
 80168e6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80168ea:	b183      	cbz	r3, 801690e <__mdiff+0xb6>
 80168ec:	6106      	str	r6, [r0, #16]
 80168ee:	e7c5      	b.n	801687c <__mdiff+0x24>
 80168f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80168f4:	fa1e f381 	uxtah	r3, lr, r1
 80168f8:	141a      	asrs	r2, r3, #16
 80168fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80168fe:	b29b      	uxth	r3, r3
 8016900:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016904:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016908:	f845 3b04 	str.w	r3, [r5], #4
 801690c:	e7e9      	b.n	80168e2 <__mdiff+0x8a>
 801690e:	3e01      	subs	r6, #1
 8016910:	e7e9      	b.n	80168e6 <__mdiff+0x8e>
	...

08016914 <__ulp>:
 8016914:	4b12      	ldr	r3, [pc, #72]	; (8016960 <__ulp+0x4c>)
 8016916:	ee10 2a90 	vmov	r2, s1
 801691a:	401a      	ands	r2, r3
 801691c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016920:	2b00      	cmp	r3, #0
 8016922:	dd04      	ble.n	801692e <__ulp+0x1a>
 8016924:	2000      	movs	r0, #0
 8016926:	4619      	mov	r1, r3
 8016928:	ec41 0b10 	vmov	d0, r0, r1
 801692c:	4770      	bx	lr
 801692e:	425b      	negs	r3, r3
 8016930:	151b      	asrs	r3, r3, #20
 8016932:	2b13      	cmp	r3, #19
 8016934:	f04f 0000 	mov.w	r0, #0
 8016938:	f04f 0100 	mov.w	r1, #0
 801693c:	dc04      	bgt.n	8016948 <__ulp+0x34>
 801693e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016942:	fa42 f103 	asr.w	r1, r2, r3
 8016946:	e7ef      	b.n	8016928 <__ulp+0x14>
 8016948:	3b14      	subs	r3, #20
 801694a:	2b1e      	cmp	r3, #30
 801694c:	f04f 0201 	mov.w	r2, #1
 8016950:	bfda      	itte	le
 8016952:	f1c3 031f 	rsble	r3, r3, #31
 8016956:	fa02 f303 	lslle.w	r3, r2, r3
 801695a:	4613      	movgt	r3, r2
 801695c:	4618      	mov	r0, r3
 801695e:	e7e3      	b.n	8016928 <__ulp+0x14>
 8016960:	7ff00000 	.word	0x7ff00000

08016964 <__b2d>:
 8016964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016966:	6905      	ldr	r5, [r0, #16]
 8016968:	f100 0714 	add.w	r7, r0, #20
 801696c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016970:	1f2e      	subs	r6, r5, #4
 8016972:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016976:	4620      	mov	r0, r4
 8016978:	f7ff fdc4 	bl	8016504 <__hi0bits>
 801697c:	f1c0 0320 	rsb	r3, r0, #32
 8016980:	280a      	cmp	r0, #10
 8016982:	600b      	str	r3, [r1, #0]
 8016984:	f8df c074 	ldr.w	ip, [pc, #116]	; 80169fc <__b2d+0x98>
 8016988:	dc14      	bgt.n	80169b4 <__b2d+0x50>
 801698a:	f1c0 0e0b 	rsb	lr, r0, #11
 801698e:	fa24 f10e 	lsr.w	r1, r4, lr
 8016992:	42b7      	cmp	r7, r6
 8016994:	ea41 030c 	orr.w	r3, r1, ip
 8016998:	bf34      	ite	cc
 801699a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801699e:	2100      	movcs	r1, #0
 80169a0:	3015      	adds	r0, #21
 80169a2:	fa04 f000 	lsl.w	r0, r4, r0
 80169a6:	fa21 f10e 	lsr.w	r1, r1, lr
 80169aa:	ea40 0201 	orr.w	r2, r0, r1
 80169ae:	ec43 2b10 	vmov	d0, r2, r3
 80169b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169b4:	42b7      	cmp	r7, r6
 80169b6:	bf3a      	itte	cc
 80169b8:	f1a5 0608 	subcc.w	r6, r5, #8
 80169bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80169c0:	2100      	movcs	r1, #0
 80169c2:	380b      	subs	r0, #11
 80169c4:	d015      	beq.n	80169f2 <__b2d+0x8e>
 80169c6:	4084      	lsls	r4, r0
 80169c8:	f1c0 0520 	rsb	r5, r0, #32
 80169cc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80169d0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80169d4:	42be      	cmp	r6, r7
 80169d6:	fa21 fc05 	lsr.w	ip, r1, r5
 80169da:	ea44 030c 	orr.w	r3, r4, ip
 80169de:	bf8c      	ite	hi
 80169e0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80169e4:	2400      	movls	r4, #0
 80169e6:	fa01 f000 	lsl.w	r0, r1, r0
 80169ea:	40ec      	lsrs	r4, r5
 80169ec:	ea40 0204 	orr.w	r2, r0, r4
 80169f0:	e7dd      	b.n	80169ae <__b2d+0x4a>
 80169f2:	ea44 030c 	orr.w	r3, r4, ip
 80169f6:	460a      	mov	r2, r1
 80169f8:	e7d9      	b.n	80169ae <__b2d+0x4a>
 80169fa:	bf00      	nop
 80169fc:	3ff00000 	.word	0x3ff00000

08016a00 <__d2b>:
 8016a00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016a04:	460e      	mov	r6, r1
 8016a06:	2101      	movs	r1, #1
 8016a08:	ec59 8b10 	vmov	r8, r9, d0
 8016a0c:	4615      	mov	r5, r2
 8016a0e:	f7ff fcb5 	bl	801637c <_Balloc>
 8016a12:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016a16:	4607      	mov	r7, r0
 8016a18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016a1c:	bb34      	cbnz	r4, 8016a6c <__d2b+0x6c>
 8016a1e:	9301      	str	r3, [sp, #4]
 8016a20:	f1b8 0300 	subs.w	r3, r8, #0
 8016a24:	d027      	beq.n	8016a76 <__d2b+0x76>
 8016a26:	a802      	add	r0, sp, #8
 8016a28:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016a2c:	f7ff fd89 	bl	8016542 <__lo0bits>
 8016a30:	9900      	ldr	r1, [sp, #0]
 8016a32:	b1f0      	cbz	r0, 8016a72 <__d2b+0x72>
 8016a34:	9a01      	ldr	r2, [sp, #4]
 8016a36:	f1c0 0320 	rsb	r3, r0, #32
 8016a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8016a3e:	430b      	orrs	r3, r1
 8016a40:	40c2      	lsrs	r2, r0
 8016a42:	617b      	str	r3, [r7, #20]
 8016a44:	9201      	str	r2, [sp, #4]
 8016a46:	9b01      	ldr	r3, [sp, #4]
 8016a48:	61bb      	str	r3, [r7, #24]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	bf14      	ite	ne
 8016a4e:	2102      	movne	r1, #2
 8016a50:	2101      	moveq	r1, #1
 8016a52:	6139      	str	r1, [r7, #16]
 8016a54:	b1c4      	cbz	r4, 8016a88 <__d2b+0x88>
 8016a56:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016a5a:	4404      	add	r4, r0
 8016a5c:	6034      	str	r4, [r6, #0]
 8016a5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016a62:	6028      	str	r0, [r5, #0]
 8016a64:	4638      	mov	r0, r7
 8016a66:	b003      	add	sp, #12
 8016a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016a70:	e7d5      	b.n	8016a1e <__d2b+0x1e>
 8016a72:	6179      	str	r1, [r7, #20]
 8016a74:	e7e7      	b.n	8016a46 <__d2b+0x46>
 8016a76:	a801      	add	r0, sp, #4
 8016a78:	f7ff fd63 	bl	8016542 <__lo0bits>
 8016a7c:	9b01      	ldr	r3, [sp, #4]
 8016a7e:	617b      	str	r3, [r7, #20]
 8016a80:	2101      	movs	r1, #1
 8016a82:	6139      	str	r1, [r7, #16]
 8016a84:	3020      	adds	r0, #32
 8016a86:	e7e5      	b.n	8016a54 <__d2b+0x54>
 8016a88:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016a8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016a90:	6030      	str	r0, [r6, #0]
 8016a92:	6918      	ldr	r0, [r3, #16]
 8016a94:	f7ff fd36 	bl	8016504 <__hi0bits>
 8016a98:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016a9c:	e7e1      	b.n	8016a62 <__d2b+0x62>

08016a9e <__ratio>:
 8016a9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aa2:	4688      	mov	r8, r1
 8016aa4:	4669      	mov	r1, sp
 8016aa6:	4681      	mov	r9, r0
 8016aa8:	f7ff ff5c 	bl	8016964 <__b2d>
 8016aac:	a901      	add	r1, sp, #4
 8016aae:	4640      	mov	r0, r8
 8016ab0:	ec57 6b10 	vmov	r6, r7, d0
 8016ab4:	ee10 4a10 	vmov	r4, s0
 8016ab8:	f7ff ff54 	bl	8016964 <__b2d>
 8016abc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016ac0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016ac4:	eba3 0c02 	sub.w	ip, r3, r2
 8016ac8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016acc:	1a9b      	subs	r3, r3, r2
 8016ace:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016ad2:	ec51 0b10 	vmov	r0, r1, d0
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	ee10 aa10 	vmov	sl, s0
 8016adc:	bfce      	itee	gt
 8016ade:	463a      	movgt	r2, r7
 8016ae0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016ae4:	460a      	movle	r2, r1
 8016ae6:	463d      	mov	r5, r7
 8016ae8:	468b      	mov	fp, r1
 8016aea:	bfcc      	ite	gt
 8016aec:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016af0:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016af4:	ec45 4b17 	vmov	d7, r4, r5
 8016af8:	ec4b ab16 	vmov	d6, sl, fp
 8016afc:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8016b00:	b003      	add	sp, #12
 8016b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016b06 <__copybits>:
 8016b06:	3901      	subs	r1, #1
 8016b08:	b510      	push	{r4, lr}
 8016b0a:	1149      	asrs	r1, r1, #5
 8016b0c:	6914      	ldr	r4, [r2, #16]
 8016b0e:	3101      	adds	r1, #1
 8016b10:	f102 0314 	add.w	r3, r2, #20
 8016b14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016b18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016b1c:	42a3      	cmp	r3, r4
 8016b1e:	4602      	mov	r2, r0
 8016b20:	d303      	bcc.n	8016b2a <__copybits+0x24>
 8016b22:	2300      	movs	r3, #0
 8016b24:	428a      	cmp	r2, r1
 8016b26:	d305      	bcc.n	8016b34 <__copybits+0x2e>
 8016b28:	bd10      	pop	{r4, pc}
 8016b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b2e:	f840 2b04 	str.w	r2, [r0], #4
 8016b32:	e7f3      	b.n	8016b1c <__copybits+0x16>
 8016b34:	f842 3b04 	str.w	r3, [r2], #4
 8016b38:	e7f4      	b.n	8016b24 <__copybits+0x1e>

08016b3a <__any_on>:
 8016b3a:	f100 0214 	add.w	r2, r0, #20
 8016b3e:	6900      	ldr	r0, [r0, #16]
 8016b40:	114b      	asrs	r3, r1, #5
 8016b42:	4298      	cmp	r0, r3
 8016b44:	b510      	push	{r4, lr}
 8016b46:	db11      	blt.n	8016b6c <__any_on+0x32>
 8016b48:	dd0a      	ble.n	8016b60 <__any_on+0x26>
 8016b4a:	f011 011f 	ands.w	r1, r1, #31
 8016b4e:	d007      	beq.n	8016b60 <__any_on+0x26>
 8016b50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016b54:	fa24 f001 	lsr.w	r0, r4, r1
 8016b58:	fa00 f101 	lsl.w	r1, r0, r1
 8016b5c:	428c      	cmp	r4, r1
 8016b5e:	d10b      	bne.n	8016b78 <__any_on+0x3e>
 8016b60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016b64:	4293      	cmp	r3, r2
 8016b66:	d803      	bhi.n	8016b70 <__any_on+0x36>
 8016b68:	2000      	movs	r0, #0
 8016b6a:	bd10      	pop	{r4, pc}
 8016b6c:	4603      	mov	r3, r0
 8016b6e:	e7f7      	b.n	8016b60 <__any_on+0x26>
 8016b70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016b74:	2900      	cmp	r1, #0
 8016b76:	d0f5      	beq.n	8016b64 <__any_on+0x2a>
 8016b78:	2001      	movs	r0, #1
 8016b7a:	e7f6      	b.n	8016b6a <__any_on+0x30>

08016b7c <_calloc_r>:
 8016b7c:	b538      	push	{r3, r4, r5, lr}
 8016b7e:	fb02 f401 	mul.w	r4, r2, r1
 8016b82:	4621      	mov	r1, r4
 8016b84:	f000 f856 	bl	8016c34 <_malloc_r>
 8016b88:	4605      	mov	r5, r0
 8016b8a:	b118      	cbz	r0, 8016b94 <_calloc_r+0x18>
 8016b8c:	4622      	mov	r2, r4
 8016b8e:	2100      	movs	r1, #0
 8016b90:	f7fc fb03 	bl	801319a <memset>
 8016b94:	4628      	mov	r0, r5
 8016b96:	bd38      	pop	{r3, r4, r5, pc}

08016b98 <_free_r>:
 8016b98:	b538      	push	{r3, r4, r5, lr}
 8016b9a:	4605      	mov	r5, r0
 8016b9c:	2900      	cmp	r1, #0
 8016b9e:	d045      	beq.n	8016c2c <_free_r+0x94>
 8016ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ba4:	1f0c      	subs	r4, r1, #4
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	bfb8      	it	lt
 8016baa:	18e4      	addlt	r4, r4, r3
 8016bac:	f000 facf 	bl	801714e <__malloc_lock>
 8016bb0:	4a1f      	ldr	r2, [pc, #124]	; (8016c30 <_free_r+0x98>)
 8016bb2:	6813      	ldr	r3, [r2, #0]
 8016bb4:	4610      	mov	r0, r2
 8016bb6:	b933      	cbnz	r3, 8016bc6 <_free_r+0x2e>
 8016bb8:	6063      	str	r3, [r4, #4]
 8016bba:	6014      	str	r4, [r2, #0]
 8016bbc:	4628      	mov	r0, r5
 8016bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016bc2:	f000 bac5 	b.w	8017150 <__malloc_unlock>
 8016bc6:	42a3      	cmp	r3, r4
 8016bc8:	d90c      	bls.n	8016be4 <_free_r+0x4c>
 8016bca:	6821      	ldr	r1, [r4, #0]
 8016bcc:	1862      	adds	r2, r4, r1
 8016bce:	4293      	cmp	r3, r2
 8016bd0:	bf04      	itt	eq
 8016bd2:	681a      	ldreq	r2, [r3, #0]
 8016bd4:	685b      	ldreq	r3, [r3, #4]
 8016bd6:	6063      	str	r3, [r4, #4]
 8016bd8:	bf04      	itt	eq
 8016bda:	1852      	addeq	r2, r2, r1
 8016bdc:	6022      	streq	r2, [r4, #0]
 8016bde:	6004      	str	r4, [r0, #0]
 8016be0:	e7ec      	b.n	8016bbc <_free_r+0x24>
 8016be2:	4613      	mov	r3, r2
 8016be4:	685a      	ldr	r2, [r3, #4]
 8016be6:	b10a      	cbz	r2, 8016bec <_free_r+0x54>
 8016be8:	42a2      	cmp	r2, r4
 8016bea:	d9fa      	bls.n	8016be2 <_free_r+0x4a>
 8016bec:	6819      	ldr	r1, [r3, #0]
 8016bee:	1858      	adds	r0, r3, r1
 8016bf0:	42a0      	cmp	r0, r4
 8016bf2:	d10b      	bne.n	8016c0c <_free_r+0x74>
 8016bf4:	6820      	ldr	r0, [r4, #0]
 8016bf6:	4401      	add	r1, r0
 8016bf8:	1858      	adds	r0, r3, r1
 8016bfa:	4282      	cmp	r2, r0
 8016bfc:	6019      	str	r1, [r3, #0]
 8016bfe:	d1dd      	bne.n	8016bbc <_free_r+0x24>
 8016c00:	6810      	ldr	r0, [r2, #0]
 8016c02:	6852      	ldr	r2, [r2, #4]
 8016c04:	605a      	str	r2, [r3, #4]
 8016c06:	4401      	add	r1, r0
 8016c08:	6019      	str	r1, [r3, #0]
 8016c0a:	e7d7      	b.n	8016bbc <_free_r+0x24>
 8016c0c:	d902      	bls.n	8016c14 <_free_r+0x7c>
 8016c0e:	230c      	movs	r3, #12
 8016c10:	602b      	str	r3, [r5, #0]
 8016c12:	e7d3      	b.n	8016bbc <_free_r+0x24>
 8016c14:	6820      	ldr	r0, [r4, #0]
 8016c16:	1821      	adds	r1, r4, r0
 8016c18:	428a      	cmp	r2, r1
 8016c1a:	bf04      	itt	eq
 8016c1c:	6811      	ldreq	r1, [r2, #0]
 8016c1e:	6852      	ldreq	r2, [r2, #4]
 8016c20:	6062      	str	r2, [r4, #4]
 8016c22:	bf04      	itt	eq
 8016c24:	1809      	addeq	r1, r1, r0
 8016c26:	6021      	streq	r1, [r4, #0]
 8016c28:	605c      	str	r4, [r3, #4]
 8016c2a:	e7c7      	b.n	8016bbc <_free_r+0x24>
 8016c2c:	bd38      	pop	{r3, r4, r5, pc}
 8016c2e:	bf00      	nop
 8016c30:	20028aa0 	.word	0x20028aa0

08016c34 <_malloc_r>:
 8016c34:	b570      	push	{r4, r5, r6, lr}
 8016c36:	1ccd      	adds	r5, r1, #3
 8016c38:	f025 0503 	bic.w	r5, r5, #3
 8016c3c:	3508      	adds	r5, #8
 8016c3e:	2d0c      	cmp	r5, #12
 8016c40:	bf38      	it	cc
 8016c42:	250c      	movcc	r5, #12
 8016c44:	2d00      	cmp	r5, #0
 8016c46:	4606      	mov	r6, r0
 8016c48:	db01      	blt.n	8016c4e <_malloc_r+0x1a>
 8016c4a:	42a9      	cmp	r1, r5
 8016c4c:	d903      	bls.n	8016c56 <_malloc_r+0x22>
 8016c4e:	230c      	movs	r3, #12
 8016c50:	6033      	str	r3, [r6, #0]
 8016c52:	2000      	movs	r0, #0
 8016c54:	bd70      	pop	{r4, r5, r6, pc}
 8016c56:	f000 fa7a 	bl	801714e <__malloc_lock>
 8016c5a:	4a21      	ldr	r2, [pc, #132]	; (8016ce0 <_malloc_r+0xac>)
 8016c5c:	6814      	ldr	r4, [r2, #0]
 8016c5e:	4621      	mov	r1, r4
 8016c60:	b991      	cbnz	r1, 8016c88 <_malloc_r+0x54>
 8016c62:	4c20      	ldr	r4, [pc, #128]	; (8016ce4 <_malloc_r+0xb0>)
 8016c64:	6823      	ldr	r3, [r4, #0]
 8016c66:	b91b      	cbnz	r3, 8016c70 <_malloc_r+0x3c>
 8016c68:	4630      	mov	r0, r6
 8016c6a:	f000 f98f 	bl	8016f8c <_sbrk_r>
 8016c6e:	6020      	str	r0, [r4, #0]
 8016c70:	4629      	mov	r1, r5
 8016c72:	4630      	mov	r0, r6
 8016c74:	f000 f98a 	bl	8016f8c <_sbrk_r>
 8016c78:	1c43      	adds	r3, r0, #1
 8016c7a:	d124      	bne.n	8016cc6 <_malloc_r+0x92>
 8016c7c:	230c      	movs	r3, #12
 8016c7e:	6033      	str	r3, [r6, #0]
 8016c80:	4630      	mov	r0, r6
 8016c82:	f000 fa65 	bl	8017150 <__malloc_unlock>
 8016c86:	e7e4      	b.n	8016c52 <_malloc_r+0x1e>
 8016c88:	680b      	ldr	r3, [r1, #0]
 8016c8a:	1b5b      	subs	r3, r3, r5
 8016c8c:	d418      	bmi.n	8016cc0 <_malloc_r+0x8c>
 8016c8e:	2b0b      	cmp	r3, #11
 8016c90:	d90f      	bls.n	8016cb2 <_malloc_r+0x7e>
 8016c92:	600b      	str	r3, [r1, #0]
 8016c94:	50cd      	str	r5, [r1, r3]
 8016c96:	18cc      	adds	r4, r1, r3
 8016c98:	4630      	mov	r0, r6
 8016c9a:	f000 fa59 	bl	8017150 <__malloc_unlock>
 8016c9e:	f104 000b 	add.w	r0, r4, #11
 8016ca2:	1d23      	adds	r3, r4, #4
 8016ca4:	f020 0007 	bic.w	r0, r0, #7
 8016ca8:	1ac3      	subs	r3, r0, r3
 8016caa:	d0d3      	beq.n	8016c54 <_malloc_r+0x20>
 8016cac:	425a      	negs	r2, r3
 8016cae:	50e2      	str	r2, [r4, r3]
 8016cb0:	e7d0      	b.n	8016c54 <_malloc_r+0x20>
 8016cb2:	428c      	cmp	r4, r1
 8016cb4:	684b      	ldr	r3, [r1, #4]
 8016cb6:	bf16      	itet	ne
 8016cb8:	6063      	strne	r3, [r4, #4]
 8016cba:	6013      	streq	r3, [r2, #0]
 8016cbc:	460c      	movne	r4, r1
 8016cbe:	e7eb      	b.n	8016c98 <_malloc_r+0x64>
 8016cc0:	460c      	mov	r4, r1
 8016cc2:	6849      	ldr	r1, [r1, #4]
 8016cc4:	e7cc      	b.n	8016c60 <_malloc_r+0x2c>
 8016cc6:	1cc4      	adds	r4, r0, #3
 8016cc8:	f024 0403 	bic.w	r4, r4, #3
 8016ccc:	42a0      	cmp	r0, r4
 8016cce:	d005      	beq.n	8016cdc <_malloc_r+0xa8>
 8016cd0:	1a21      	subs	r1, r4, r0
 8016cd2:	4630      	mov	r0, r6
 8016cd4:	f000 f95a 	bl	8016f8c <_sbrk_r>
 8016cd8:	3001      	adds	r0, #1
 8016cda:	d0cf      	beq.n	8016c7c <_malloc_r+0x48>
 8016cdc:	6025      	str	r5, [r4, #0]
 8016cde:	e7db      	b.n	8016c98 <_malloc_r+0x64>
 8016ce0:	20028aa0 	.word	0x20028aa0
 8016ce4:	20028aa4 	.word	0x20028aa4

08016ce8 <__ssputs_r>:
 8016ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cec:	688e      	ldr	r6, [r1, #8]
 8016cee:	429e      	cmp	r6, r3
 8016cf0:	4682      	mov	sl, r0
 8016cf2:	460c      	mov	r4, r1
 8016cf4:	4690      	mov	r8, r2
 8016cf6:	4699      	mov	r9, r3
 8016cf8:	d837      	bhi.n	8016d6a <__ssputs_r+0x82>
 8016cfa:	898a      	ldrh	r2, [r1, #12]
 8016cfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016d00:	d031      	beq.n	8016d66 <__ssputs_r+0x7e>
 8016d02:	6825      	ldr	r5, [r4, #0]
 8016d04:	6909      	ldr	r1, [r1, #16]
 8016d06:	1a6f      	subs	r7, r5, r1
 8016d08:	6965      	ldr	r5, [r4, #20]
 8016d0a:	2302      	movs	r3, #2
 8016d0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016d10:	fb95 f5f3 	sdiv	r5, r5, r3
 8016d14:	f109 0301 	add.w	r3, r9, #1
 8016d18:	443b      	add	r3, r7
 8016d1a:	429d      	cmp	r5, r3
 8016d1c:	bf38      	it	cc
 8016d1e:	461d      	movcc	r5, r3
 8016d20:	0553      	lsls	r3, r2, #21
 8016d22:	d530      	bpl.n	8016d86 <__ssputs_r+0x9e>
 8016d24:	4629      	mov	r1, r5
 8016d26:	f7ff ff85 	bl	8016c34 <_malloc_r>
 8016d2a:	4606      	mov	r6, r0
 8016d2c:	b950      	cbnz	r0, 8016d44 <__ssputs_r+0x5c>
 8016d2e:	230c      	movs	r3, #12
 8016d30:	f8ca 3000 	str.w	r3, [sl]
 8016d34:	89a3      	ldrh	r3, [r4, #12]
 8016d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d3a:	81a3      	strh	r3, [r4, #12]
 8016d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8016d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d44:	463a      	mov	r2, r7
 8016d46:	6921      	ldr	r1, [r4, #16]
 8016d48:	f7fc fa1c 	bl	8013184 <memcpy>
 8016d4c:	89a3      	ldrh	r3, [r4, #12]
 8016d4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d56:	81a3      	strh	r3, [r4, #12]
 8016d58:	6126      	str	r6, [r4, #16]
 8016d5a:	6165      	str	r5, [r4, #20]
 8016d5c:	443e      	add	r6, r7
 8016d5e:	1bed      	subs	r5, r5, r7
 8016d60:	6026      	str	r6, [r4, #0]
 8016d62:	60a5      	str	r5, [r4, #8]
 8016d64:	464e      	mov	r6, r9
 8016d66:	454e      	cmp	r6, r9
 8016d68:	d900      	bls.n	8016d6c <__ssputs_r+0x84>
 8016d6a:	464e      	mov	r6, r9
 8016d6c:	4632      	mov	r2, r6
 8016d6e:	4641      	mov	r1, r8
 8016d70:	6820      	ldr	r0, [r4, #0]
 8016d72:	f000 f9d3 	bl	801711c <memmove>
 8016d76:	68a3      	ldr	r3, [r4, #8]
 8016d78:	1b9b      	subs	r3, r3, r6
 8016d7a:	60a3      	str	r3, [r4, #8]
 8016d7c:	6823      	ldr	r3, [r4, #0]
 8016d7e:	441e      	add	r6, r3
 8016d80:	6026      	str	r6, [r4, #0]
 8016d82:	2000      	movs	r0, #0
 8016d84:	e7dc      	b.n	8016d40 <__ssputs_r+0x58>
 8016d86:	462a      	mov	r2, r5
 8016d88:	f000 f9e3 	bl	8017152 <_realloc_r>
 8016d8c:	4606      	mov	r6, r0
 8016d8e:	2800      	cmp	r0, #0
 8016d90:	d1e2      	bne.n	8016d58 <__ssputs_r+0x70>
 8016d92:	6921      	ldr	r1, [r4, #16]
 8016d94:	4650      	mov	r0, sl
 8016d96:	f7ff feff 	bl	8016b98 <_free_r>
 8016d9a:	e7c8      	b.n	8016d2e <__ssputs_r+0x46>

08016d9c <_svfiprintf_r>:
 8016d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016da0:	461d      	mov	r5, r3
 8016da2:	898b      	ldrh	r3, [r1, #12]
 8016da4:	061f      	lsls	r7, r3, #24
 8016da6:	b09d      	sub	sp, #116	; 0x74
 8016da8:	4680      	mov	r8, r0
 8016daa:	460c      	mov	r4, r1
 8016dac:	4616      	mov	r6, r2
 8016dae:	d50f      	bpl.n	8016dd0 <_svfiprintf_r+0x34>
 8016db0:	690b      	ldr	r3, [r1, #16]
 8016db2:	b96b      	cbnz	r3, 8016dd0 <_svfiprintf_r+0x34>
 8016db4:	2140      	movs	r1, #64	; 0x40
 8016db6:	f7ff ff3d 	bl	8016c34 <_malloc_r>
 8016dba:	6020      	str	r0, [r4, #0]
 8016dbc:	6120      	str	r0, [r4, #16]
 8016dbe:	b928      	cbnz	r0, 8016dcc <_svfiprintf_r+0x30>
 8016dc0:	230c      	movs	r3, #12
 8016dc2:	f8c8 3000 	str.w	r3, [r8]
 8016dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8016dca:	e0c8      	b.n	8016f5e <_svfiprintf_r+0x1c2>
 8016dcc:	2340      	movs	r3, #64	; 0x40
 8016dce:	6163      	str	r3, [r4, #20]
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8016dd4:	2320      	movs	r3, #32
 8016dd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016dda:	2330      	movs	r3, #48	; 0x30
 8016ddc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016de0:	9503      	str	r5, [sp, #12]
 8016de2:	f04f 0b01 	mov.w	fp, #1
 8016de6:	4637      	mov	r7, r6
 8016de8:	463d      	mov	r5, r7
 8016dea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016dee:	b10b      	cbz	r3, 8016df4 <_svfiprintf_r+0x58>
 8016df0:	2b25      	cmp	r3, #37	; 0x25
 8016df2:	d13e      	bne.n	8016e72 <_svfiprintf_r+0xd6>
 8016df4:	ebb7 0a06 	subs.w	sl, r7, r6
 8016df8:	d00b      	beq.n	8016e12 <_svfiprintf_r+0x76>
 8016dfa:	4653      	mov	r3, sl
 8016dfc:	4632      	mov	r2, r6
 8016dfe:	4621      	mov	r1, r4
 8016e00:	4640      	mov	r0, r8
 8016e02:	f7ff ff71 	bl	8016ce8 <__ssputs_r>
 8016e06:	3001      	adds	r0, #1
 8016e08:	f000 80a4 	beq.w	8016f54 <_svfiprintf_r+0x1b8>
 8016e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e0e:	4453      	add	r3, sl
 8016e10:	9309      	str	r3, [sp, #36]	; 0x24
 8016e12:	783b      	ldrb	r3, [r7, #0]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	f000 809d 	beq.w	8016f54 <_svfiprintf_r+0x1b8>
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8016e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e24:	9304      	str	r3, [sp, #16]
 8016e26:	9307      	str	r3, [sp, #28]
 8016e28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016e2c:	931a      	str	r3, [sp, #104]	; 0x68
 8016e2e:	462f      	mov	r7, r5
 8016e30:	2205      	movs	r2, #5
 8016e32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016e36:	4850      	ldr	r0, [pc, #320]	; (8016f78 <_svfiprintf_r+0x1dc>)
 8016e38:	f7e9 fa0a 	bl	8000250 <memchr>
 8016e3c:	9b04      	ldr	r3, [sp, #16]
 8016e3e:	b9d0      	cbnz	r0, 8016e76 <_svfiprintf_r+0xda>
 8016e40:	06d9      	lsls	r1, r3, #27
 8016e42:	bf44      	itt	mi
 8016e44:	2220      	movmi	r2, #32
 8016e46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e4a:	071a      	lsls	r2, r3, #28
 8016e4c:	bf44      	itt	mi
 8016e4e:	222b      	movmi	r2, #43	; 0x2b
 8016e50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e54:	782a      	ldrb	r2, [r5, #0]
 8016e56:	2a2a      	cmp	r2, #42	; 0x2a
 8016e58:	d015      	beq.n	8016e86 <_svfiprintf_r+0xea>
 8016e5a:	9a07      	ldr	r2, [sp, #28]
 8016e5c:	462f      	mov	r7, r5
 8016e5e:	2000      	movs	r0, #0
 8016e60:	250a      	movs	r5, #10
 8016e62:	4639      	mov	r1, r7
 8016e64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e68:	3b30      	subs	r3, #48	; 0x30
 8016e6a:	2b09      	cmp	r3, #9
 8016e6c:	d94d      	bls.n	8016f0a <_svfiprintf_r+0x16e>
 8016e6e:	b1b8      	cbz	r0, 8016ea0 <_svfiprintf_r+0x104>
 8016e70:	e00f      	b.n	8016e92 <_svfiprintf_r+0xf6>
 8016e72:	462f      	mov	r7, r5
 8016e74:	e7b8      	b.n	8016de8 <_svfiprintf_r+0x4c>
 8016e76:	4a40      	ldr	r2, [pc, #256]	; (8016f78 <_svfiprintf_r+0x1dc>)
 8016e78:	1a80      	subs	r0, r0, r2
 8016e7a:	fa0b f000 	lsl.w	r0, fp, r0
 8016e7e:	4318      	orrs	r0, r3
 8016e80:	9004      	str	r0, [sp, #16]
 8016e82:	463d      	mov	r5, r7
 8016e84:	e7d3      	b.n	8016e2e <_svfiprintf_r+0x92>
 8016e86:	9a03      	ldr	r2, [sp, #12]
 8016e88:	1d11      	adds	r1, r2, #4
 8016e8a:	6812      	ldr	r2, [r2, #0]
 8016e8c:	9103      	str	r1, [sp, #12]
 8016e8e:	2a00      	cmp	r2, #0
 8016e90:	db01      	blt.n	8016e96 <_svfiprintf_r+0xfa>
 8016e92:	9207      	str	r2, [sp, #28]
 8016e94:	e004      	b.n	8016ea0 <_svfiprintf_r+0x104>
 8016e96:	4252      	negs	r2, r2
 8016e98:	f043 0302 	orr.w	r3, r3, #2
 8016e9c:	9207      	str	r2, [sp, #28]
 8016e9e:	9304      	str	r3, [sp, #16]
 8016ea0:	783b      	ldrb	r3, [r7, #0]
 8016ea2:	2b2e      	cmp	r3, #46	; 0x2e
 8016ea4:	d10c      	bne.n	8016ec0 <_svfiprintf_r+0x124>
 8016ea6:	787b      	ldrb	r3, [r7, #1]
 8016ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8016eaa:	d133      	bne.n	8016f14 <_svfiprintf_r+0x178>
 8016eac:	9b03      	ldr	r3, [sp, #12]
 8016eae:	1d1a      	adds	r2, r3, #4
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	9203      	str	r2, [sp, #12]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	bfb8      	it	lt
 8016eb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8016ebc:	3702      	adds	r7, #2
 8016ebe:	9305      	str	r3, [sp, #20]
 8016ec0:	4d2e      	ldr	r5, [pc, #184]	; (8016f7c <_svfiprintf_r+0x1e0>)
 8016ec2:	7839      	ldrb	r1, [r7, #0]
 8016ec4:	2203      	movs	r2, #3
 8016ec6:	4628      	mov	r0, r5
 8016ec8:	f7e9 f9c2 	bl	8000250 <memchr>
 8016ecc:	b138      	cbz	r0, 8016ede <_svfiprintf_r+0x142>
 8016ece:	2340      	movs	r3, #64	; 0x40
 8016ed0:	1b40      	subs	r0, r0, r5
 8016ed2:	fa03 f000 	lsl.w	r0, r3, r0
 8016ed6:	9b04      	ldr	r3, [sp, #16]
 8016ed8:	4303      	orrs	r3, r0
 8016eda:	3701      	adds	r7, #1
 8016edc:	9304      	str	r3, [sp, #16]
 8016ede:	7839      	ldrb	r1, [r7, #0]
 8016ee0:	4827      	ldr	r0, [pc, #156]	; (8016f80 <_svfiprintf_r+0x1e4>)
 8016ee2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016ee6:	2206      	movs	r2, #6
 8016ee8:	1c7e      	adds	r6, r7, #1
 8016eea:	f7e9 f9b1 	bl	8000250 <memchr>
 8016eee:	2800      	cmp	r0, #0
 8016ef0:	d038      	beq.n	8016f64 <_svfiprintf_r+0x1c8>
 8016ef2:	4b24      	ldr	r3, [pc, #144]	; (8016f84 <_svfiprintf_r+0x1e8>)
 8016ef4:	bb13      	cbnz	r3, 8016f3c <_svfiprintf_r+0x1a0>
 8016ef6:	9b03      	ldr	r3, [sp, #12]
 8016ef8:	3307      	adds	r3, #7
 8016efa:	f023 0307 	bic.w	r3, r3, #7
 8016efe:	3308      	adds	r3, #8
 8016f00:	9303      	str	r3, [sp, #12]
 8016f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f04:	444b      	add	r3, r9
 8016f06:	9309      	str	r3, [sp, #36]	; 0x24
 8016f08:	e76d      	b.n	8016de6 <_svfiprintf_r+0x4a>
 8016f0a:	fb05 3202 	mla	r2, r5, r2, r3
 8016f0e:	2001      	movs	r0, #1
 8016f10:	460f      	mov	r7, r1
 8016f12:	e7a6      	b.n	8016e62 <_svfiprintf_r+0xc6>
 8016f14:	2300      	movs	r3, #0
 8016f16:	3701      	adds	r7, #1
 8016f18:	9305      	str	r3, [sp, #20]
 8016f1a:	4619      	mov	r1, r3
 8016f1c:	250a      	movs	r5, #10
 8016f1e:	4638      	mov	r0, r7
 8016f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f24:	3a30      	subs	r2, #48	; 0x30
 8016f26:	2a09      	cmp	r2, #9
 8016f28:	d903      	bls.n	8016f32 <_svfiprintf_r+0x196>
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d0c8      	beq.n	8016ec0 <_svfiprintf_r+0x124>
 8016f2e:	9105      	str	r1, [sp, #20]
 8016f30:	e7c6      	b.n	8016ec0 <_svfiprintf_r+0x124>
 8016f32:	fb05 2101 	mla	r1, r5, r1, r2
 8016f36:	2301      	movs	r3, #1
 8016f38:	4607      	mov	r7, r0
 8016f3a:	e7f0      	b.n	8016f1e <_svfiprintf_r+0x182>
 8016f3c:	ab03      	add	r3, sp, #12
 8016f3e:	9300      	str	r3, [sp, #0]
 8016f40:	4622      	mov	r2, r4
 8016f42:	4b11      	ldr	r3, [pc, #68]	; (8016f88 <_svfiprintf_r+0x1ec>)
 8016f44:	a904      	add	r1, sp, #16
 8016f46:	4640      	mov	r0, r8
 8016f48:	f7fc f9b6 	bl	80132b8 <_printf_float>
 8016f4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016f50:	4681      	mov	r9, r0
 8016f52:	d1d6      	bne.n	8016f02 <_svfiprintf_r+0x166>
 8016f54:	89a3      	ldrh	r3, [r4, #12]
 8016f56:	065b      	lsls	r3, r3, #25
 8016f58:	f53f af35 	bmi.w	8016dc6 <_svfiprintf_r+0x2a>
 8016f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f5e:	b01d      	add	sp, #116	; 0x74
 8016f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f64:	ab03      	add	r3, sp, #12
 8016f66:	9300      	str	r3, [sp, #0]
 8016f68:	4622      	mov	r2, r4
 8016f6a:	4b07      	ldr	r3, [pc, #28]	; (8016f88 <_svfiprintf_r+0x1ec>)
 8016f6c:	a904      	add	r1, sp, #16
 8016f6e:	4640      	mov	r0, r8
 8016f70:	f7fc fc44 	bl	80137fc <_printf_i>
 8016f74:	e7ea      	b.n	8016f4c <_svfiprintf_r+0x1b0>
 8016f76:	bf00      	nop
 8016f78:	08018364 	.word	0x08018364
 8016f7c:	0801836a 	.word	0x0801836a
 8016f80:	0801836e 	.word	0x0801836e
 8016f84:	080132b9 	.word	0x080132b9
 8016f88:	08016ce9 	.word	0x08016ce9

08016f8c <_sbrk_r>:
 8016f8c:	b538      	push	{r3, r4, r5, lr}
 8016f8e:	4c06      	ldr	r4, [pc, #24]	; (8016fa8 <_sbrk_r+0x1c>)
 8016f90:	2300      	movs	r3, #0
 8016f92:	4605      	mov	r5, r0
 8016f94:	4608      	mov	r0, r1
 8016f96:	6023      	str	r3, [r4, #0]
 8016f98:	f7f1 fec8 	bl	8008d2c <_sbrk>
 8016f9c:	1c43      	adds	r3, r0, #1
 8016f9e:	d102      	bne.n	8016fa6 <_sbrk_r+0x1a>
 8016fa0:	6823      	ldr	r3, [r4, #0]
 8016fa2:	b103      	cbz	r3, 8016fa6 <_sbrk_r+0x1a>
 8016fa4:	602b      	str	r3, [r5, #0]
 8016fa6:	bd38      	pop	{r3, r4, r5, pc}
 8016fa8:	20030b78 	.word	0x20030b78

08016fac <__sread>:
 8016fac:	b510      	push	{r4, lr}
 8016fae:	460c      	mov	r4, r1
 8016fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fb4:	f000 f8f4 	bl	80171a0 <_read_r>
 8016fb8:	2800      	cmp	r0, #0
 8016fba:	bfab      	itete	ge
 8016fbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016fbe:	89a3      	ldrhlt	r3, [r4, #12]
 8016fc0:	181b      	addge	r3, r3, r0
 8016fc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016fc6:	bfac      	ite	ge
 8016fc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8016fca:	81a3      	strhlt	r3, [r4, #12]
 8016fcc:	bd10      	pop	{r4, pc}

08016fce <__swrite>:
 8016fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fd2:	461f      	mov	r7, r3
 8016fd4:	898b      	ldrh	r3, [r1, #12]
 8016fd6:	05db      	lsls	r3, r3, #23
 8016fd8:	4605      	mov	r5, r0
 8016fda:	460c      	mov	r4, r1
 8016fdc:	4616      	mov	r6, r2
 8016fde:	d505      	bpl.n	8016fec <__swrite+0x1e>
 8016fe0:	2302      	movs	r3, #2
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fe8:	f000 f886 	bl	80170f8 <_lseek_r>
 8016fec:	89a3      	ldrh	r3, [r4, #12]
 8016fee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016ff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016ff6:	81a3      	strh	r3, [r4, #12]
 8016ff8:	4632      	mov	r2, r6
 8016ffa:	463b      	mov	r3, r7
 8016ffc:	4628      	mov	r0, r5
 8016ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017002:	f000 b835 	b.w	8017070 <_write_r>

08017006 <__sseek>:
 8017006:	b510      	push	{r4, lr}
 8017008:	460c      	mov	r4, r1
 801700a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801700e:	f000 f873 	bl	80170f8 <_lseek_r>
 8017012:	1c43      	adds	r3, r0, #1
 8017014:	89a3      	ldrh	r3, [r4, #12]
 8017016:	bf15      	itete	ne
 8017018:	6560      	strne	r0, [r4, #84]	; 0x54
 801701a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801701e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017022:	81a3      	strheq	r3, [r4, #12]
 8017024:	bf18      	it	ne
 8017026:	81a3      	strhne	r3, [r4, #12]
 8017028:	bd10      	pop	{r4, pc}

0801702a <__sclose>:
 801702a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801702e:	f000 b831 	b.w	8017094 <_close_r>

08017032 <strncmp>:
 8017032:	b510      	push	{r4, lr}
 8017034:	b16a      	cbz	r2, 8017052 <strncmp+0x20>
 8017036:	3901      	subs	r1, #1
 8017038:	1884      	adds	r4, r0, r2
 801703a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801703e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017042:	4293      	cmp	r3, r2
 8017044:	d103      	bne.n	801704e <strncmp+0x1c>
 8017046:	42a0      	cmp	r0, r4
 8017048:	d001      	beq.n	801704e <strncmp+0x1c>
 801704a:	2b00      	cmp	r3, #0
 801704c:	d1f5      	bne.n	801703a <strncmp+0x8>
 801704e:	1a98      	subs	r0, r3, r2
 8017050:	bd10      	pop	{r4, pc}
 8017052:	4610      	mov	r0, r2
 8017054:	e7fc      	b.n	8017050 <strncmp+0x1e>

08017056 <__ascii_wctomb>:
 8017056:	b149      	cbz	r1, 801706c <__ascii_wctomb+0x16>
 8017058:	2aff      	cmp	r2, #255	; 0xff
 801705a:	bf85      	ittet	hi
 801705c:	238a      	movhi	r3, #138	; 0x8a
 801705e:	6003      	strhi	r3, [r0, #0]
 8017060:	700a      	strbls	r2, [r1, #0]
 8017062:	f04f 30ff 	movhi.w	r0, #4294967295
 8017066:	bf98      	it	ls
 8017068:	2001      	movls	r0, #1
 801706a:	4770      	bx	lr
 801706c:	4608      	mov	r0, r1
 801706e:	4770      	bx	lr

08017070 <_write_r>:
 8017070:	b538      	push	{r3, r4, r5, lr}
 8017072:	4c07      	ldr	r4, [pc, #28]	; (8017090 <_write_r+0x20>)
 8017074:	4605      	mov	r5, r0
 8017076:	4608      	mov	r0, r1
 8017078:	4611      	mov	r1, r2
 801707a:	2200      	movs	r2, #0
 801707c:	6022      	str	r2, [r4, #0]
 801707e:	461a      	mov	r2, r3
 8017080:	f7f1 fe03 	bl	8008c8a <_write>
 8017084:	1c43      	adds	r3, r0, #1
 8017086:	d102      	bne.n	801708e <_write_r+0x1e>
 8017088:	6823      	ldr	r3, [r4, #0]
 801708a:	b103      	cbz	r3, 801708e <_write_r+0x1e>
 801708c:	602b      	str	r3, [r5, #0]
 801708e:	bd38      	pop	{r3, r4, r5, pc}
 8017090:	20030b78 	.word	0x20030b78

08017094 <_close_r>:
 8017094:	b538      	push	{r3, r4, r5, lr}
 8017096:	4c06      	ldr	r4, [pc, #24]	; (80170b0 <_close_r+0x1c>)
 8017098:	2300      	movs	r3, #0
 801709a:	4605      	mov	r5, r0
 801709c:	4608      	mov	r0, r1
 801709e:	6023      	str	r3, [r4, #0]
 80170a0:	f7f1 fe0f 	bl	8008cc2 <_close>
 80170a4:	1c43      	adds	r3, r0, #1
 80170a6:	d102      	bne.n	80170ae <_close_r+0x1a>
 80170a8:	6823      	ldr	r3, [r4, #0]
 80170aa:	b103      	cbz	r3, 80170ae <_close_r+0x1a>
 80170ac:	602b      	str	r3, [r5, #0]
 80170ae:	bd38      	pop	{r3, r4, r5, pc}
 80170b0:	20030b78 	.word	0x20030b78

080170b4 <_fstat_r>:
 80170b4:	b538      	push	{r3, r4, r5, lr}
 80170b6:	4c07      	ldr	r4, [pc, #28]	; (80170d4 <_fstat_r+0x20>)
 80170b8:	2300      	movs	r3, #0
 80170ba:	4605      	mov	r5, r0
 80170bc:	4608      	mov	r0, r1
 80170be:	4611      	mov	r1, r2
 80170c0:	6023      	str	r3, [r4, #0]
 80170c2:	f7f1 fe0a 	bl	8008cda <_fstat>
 80170c6:	1c43      	adds	r3, r0, #1
 80170c8:	d102      	bne.n	80170d0 <_fstat_r+0x1c>
 80170ca:	6823      	ldr	r3, [r4, #0]
 80170cc:	b103      	cbz	r3, 80170d0 <_fstat_r+0x1c>
 80170ce:	602b      	str	r3, [r5, #0]
 80170d0:	bd38      	pop	{r3, r4, r5, pc}
 80170d2:	bf00      	nop
 80170d4:	20030b78 	.word	0x20030b78

080170d8 <_isatty_r>:
 80170d8:	b538      	push	{r3, r4, r5, lr}
 80170da:	4c06      	ldr	r4, [pc, #24]	; (80170f4 <_isatty_r+0x1c>)
 80170dc:	2300      	movs	r3, #0
 80170de:	4605      	mov	r5, r0
 80170e0:	4608      	mov	r0, r1
 80170e2:	6023      	str	r3, [r4, #0]
 80170e4:	f7f1 fe09 	bl	8008cfa <_isatty>
 80170e8:	1c43      	adds	r3, r0, #1
 80170ea:	d102      	bne.n	80170f2 <_isatty_r+0x1a>
 80170ec:	6823      	ldr	r3, [r4, #0]
 80170ee:	b103      	cbz	r3, 80170f2 <_isatty_r+0x1a>
 80170f0:	602b      	str	r3, [r5, #0]
 80170f2:	bd38      	pop	{r3, r4, r5, pc}
 80170f4:	20030b78 	.word	0x20030b78

080170f8 <_lseek_r>:
 80170f8:	b538      	push	{r3, r4, r5, lr}
 80170fa:	4c07      	ldr	r4, [pc, #28]	; (8017118 <_lseek_r+0x20>)
 80170fc:	4605      	mov	r5, r0
 80170fe:	4608      	mov	r0, r1
 8017100:	4611      	mov	r1, r2
 8017102:	2200      	movs	r2, #0
 8017104:	6022      	str	r2, [r4, #0]
 8017106:	461a      	mov	r2, r3
 8017108:	f7f1 fe02 	bl	8008d10 <_lseek>
 801710c:	1c43      	adds	r3, r0, #1
 801710e:	d102      	bne.n	8017116 <_lseek_r+0x1e>
 8017110:	6823      	ldr	r3, [r4, #0]
 8017112:	b103      	cbz	r3, 8017116 <_lseek_r+0x1e>
 8017114:	602b      	str	r3, [r5, #0]
 8017116:	bd38      	pop	{r3, r4, r5, pc}
 8017118:	20030b78 	.word	0x20030b78

0801711c <memmove>:
 801711c:	4288      	cmp	r0, r1
 801711e:	b510      	push	{r4, lr}
 8017120:	eb01 0302 	add.w	r3, r1, r2
 8017124:	d807      	bhi.n	8017136 <memmove+0x1a>
 8017126:	1e42      	subs	r2, r0, #1
 8017128:	4299      	cmp	r1, r3
 801712a:	d00a      	beq.n	8017142 <memmove+0x26>
 801712c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017130:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017134:	e7f8      	b.n	8017128 <memmove+0xc>
 8017136:	4283      	cmp	r3, r0
 8017138:	d9f5      	bls.n	8017126 <memmove+0xa>
 801713a:	1881      	adds	r1, r0, r2
 801713c:	1ad2      	subs	r2, r2, r3
 801713e:	42d3      	cmn	r3, r2
 8017140:	d100      	bne.n	8017144 <memmove+0x28>
 8017142:	bd10      	pop	{r4, pc}
 8017144:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017148:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801714c:	e7f7      	b.n	801713e <memmove+0x22>

0801714e <__malloc_lock>:
 801714e:	4770      	bx	lr

08017150 <__malloc_unlock>:
 8017150:	4770      	bx	lr

08017152 <_realloc_r>:
 8017152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017154:	4607      	mov	r7, r0
 8017156:	4614      	mov	r4, r2
 8017158:	460e      	mov	r6, r1
 801715a:	b921      	cbnz	r1, 8017166 <_realloc_r+0x14>
 801715c:	4611      	mov	r1, r2
 801715e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017162:	f7ff bd67 	b.w	8016c34 <_malloc_r>
 8017166:	b922      	cbnz	r2, 8017172 <_realloc_r+0x20>
 8017168:	f7ff fd16 	bl	8016b98 <_free_r>
 801716c:	4625      	mov	r5, r4
 801716e:	4628      	mov	r0, r5
 8017170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017172:	f000 f827 	bl	80171c4 <_malloc_usable_size_r>
 8017176:	42a0      	cmp	r0, r4
 8017178:	d20f      	bcs.n	801719a <_realloc_r+0x48>
 801717a:	4621      	mov	r1, r4
 801717c:	4638      	mov	r0, r7
 801717e:	f7ff fd59 	bl	8016c34 <_malloc_r>
 8017182:	4605      	mov	r5, r0
 8017184:	2800      	cmp	r0, #0
 8017186:	d0f2      	beq.n	801716e <_realloc_r+0x1c>
 8017188:	4631      	mov	r1, r6
 801718a:	4622      	mov	r2, r4
 801718c:	f7fb fffa 	bl	8013184 <memcpy>
 8017190:	4631      	mov	r1, r6
 8017192:	4638      	mov	r0, r7
 8017194:	f7ff fd00 	bl	8016b98 <_free_r>
 8017198:	e7e9      	b.n	801716e <_realloc_r+0x1c>
 801719a:	4635      	mov	r5, r6
 801719c:	e7e7      	b.n	801716e <_realloc_r+0x1c>
	...

080171a0 <_read_r>:
 80171a0:	b538      	push	{r3, r4, r5, lr}
 80171a2:	4c07      	ldr	r4, [pc, #28]	; (80171c0 <_read_r+0x20>)
 80171a4:	4605      	mov	r5, r0
 80171a6:	4608      	mov	r0, r1
 80171a8:	4611      	mov	r1, r2
 80171aa:	2200      	movs	r2, #0
 80171ac:	6022      	str	r2, [r4, #0]
 80171ae:	461a      	mov	r2, r3
 80171b0:	f7f1 fd4e 	bl	8008c50 <_read>
 80171b4:	1c43      	adds	r3, r0, #1
 80171b6:	d102      	bne.n	80171be <_read_r+0x1e>
 80171b8:	6823      	ldr	r3, [r4, #0]
 80171ba:	b103      	cbz	r3, 80171be <_read_r+0x1e>
 80171bc:	602b      	str	r3, [r5, #0]
 80171be:	bd38      	pop	{r3, r4, r5, pc}
 80171c0:	20030b78 	.word	0x20030b78

080171c4 <_malloc_usable_size_r>:
 80171c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80171c8:	1f18      	subs	r0, r3, #4
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	bfbc      	itt	lt
 80171ce:	580b      	ldrlt	r3, [r1, r0]
 80171d0:	18c0      	addlt	r0, r0, r3
 80171d2:	4770      	bx	lr

080171d4 <_init>:
 80171d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171d6:	bf00      	nop
 80171d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80171da:	bc08      	pop	{r3}
 80171dc:	469e      	mov	lr, r3
 80171de:	4770      	bx	lr

080171e0 <_fini>:
 80171e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171e2:	bf00      	nop
 80171e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80171e6:	bc08      	pop	{r3}
 80171e8:	469e      	mov	lr, r3
 80171ea:	4770      	bx	lr
