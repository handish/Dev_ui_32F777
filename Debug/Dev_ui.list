
Dev_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcb8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800feb8  0800feb8  0001feb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010288  08010288  00030298  2**0
                  CONTENTS
  4 .ARM          00000008  08010288  08010288  00020288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010290  08010290  00030298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010290  08010290  00020290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010294  08010294  00020294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  08010298  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ca00  20000298  08010530  00030298  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000cc98  08010530  0003cc98  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030298  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002980e  00000000  00000000  000302c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000492f  00000000  00000000  00059ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020f8  00000000  00000000  0005e408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ee0  00000000  00000000  00060500  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006132  00000000  00000000  000623e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ac01  00000000  00000000  00068512  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001187c5  00000000  00000000  00083113  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019b8d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097d4  00000000  00000000  0019b954  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000298 	.word	0x20000298
 800021c:	00000000 	.word	0x00000000
 8000220:	0800fea0 	.word	0x0800fea0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000029c 	.word	0x2000029c
 800023c:	0800fea0 	.word	0x0800fea0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <SMLCD_InitGPIO>:
}
#endif // SMLCD_FLUSH_LUT


// Initialize display control GPIO pins
void SMLCD_InitGPIO(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	//RCC->AHB2ENR |= SMLCD_GPIO_PERIPH;

	// Configure DISP pin
	//GPIO_set_mode(SMLCD_DISP_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_DISP_PIN);
	//GPIO_out_cfg(SMLCD_DISP_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_DISP_PIN);
	SMLCD_DISP_L;
 80005f4:	2200      	movs	r2, #0
 80005f6:	2102      	movs	r1, #2
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <SMLCD_InitGPIO+0x1c>)
 80005fa:	f004 fe6d 	bl	80052d8 <HAL_GPIO_WritePin>

	// Configure SCS pin
	//GPIO_set_mode(SMLCD_SCS_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_SCS_PIN);
	//GPIO_out_cfg(SMLCD_SCS_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_SCS_PIN);
	SMLCD_SCS_L;
 80005fe:	2200      	movs	r2, #0
 8000600:	2110      	movs	r1, #16
 8000602:	4803      	ldr	r0, [pc, #12]	; (8000610 <SMLCD_InitGPIO+0x20>)
 8000604:	f004 fe68 	bl	80052d8 <HAL_GPIO_WritePin>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40022400 	.word	0x40022400
 8000610:	40021000 	.word	0x40021000

08000614 <SMLCD_Init>:

// Initialize display
// note: SPI and GPIO must be initialized before calling this function
void SMLCD_Init(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	// Set default drawing mode
	LCD_PixelMode = LCD_PSET;
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <SMLCD_Init+0x14>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]

	// Set initial image orientation
	SMLCD_Orientation(LCD_ORIENT_NORMAL);
 800061e:	2001      	movs	r0, #1
 8000620:	f000 f822 	bl	8000668 <SMLCD_Orientation>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20004c34 	.word	0x20004c34

0800062c <SMLCD_Clear>:

// Clear display memory (clear screen)
void SMLCD_Clear(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	// Send "Clear Screen" command
	SMLCD_SCS_H;
 8000630:	2201      	movs	r2, #1
 8000632:	2110      	movs	r1, #16
 8000634:	480a      	ldr	r0, [pc, #40]	; (8000660 <SMLCD_Clear+0x34>)
 8000636:	f004 fe4f 	bl	80052d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_CLS, 1, 100);
 800063a:	2364      	movs	r3, #100	; 0x64
 800063c:	2201      	movs	r2, #1
 800063e:	2120      	movs	r1, #32
 8000640:	4808      	ldr	r0, [pc, #32]	; (8000664 <SMLCD_Clear+0x38>)
 8000642:	f006 fed9 	bl	80073f8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000646:	2364      	movs	r3, #100	; 0x64
 8000648:	2201      	movs	r2, #1
 800064a:	2100      	movs	r1, #0
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <SMLCD_Clear+0x38>)
 800064e:	f006 fed3 	bl	80073f8 <HAL_SPI_Transmit>
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_CLS);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;
 8000652:	2200      	movs	r2, #0
 8000654:	2110      	movs	r1, #16
 8000656:	4802      	ldr	r0, [pc, #8]	; (8000660 <SMLCD_Clear+0x34>)
 8000658:	f004 fe3e 	bl	80052d8 <HAL_GPIO_WritePin>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40021000 	.word	0x40021000
 8000664:	20007bb0 	.word	0x20007bb0

08000668 <SMLCD_Orientation>:
}

// Set screen orientation
// input:
//   orientation - one of LCD_ORIENT_xx values
void SMLCD_Orientation(uint8_t orientation) {
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	if (orientation & (LCD_ORIENT_CW | LCD_ORIENT_CCW)) {
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 0306 	and.w	r3, r3, #6
 8000678:	2b00      	cmp	r3, #0
 800067a:	d007      	beq.n	800068c <SMLCD_Orientation+0x24>
		scr_width  = SCR_H;
 800067c:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <SMLCD_Orientation+0x44>)
 800067e:	22f0      	movs	r2, #240	; 0xf0
 8000680:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_W;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <SMLCD_Orientation+0x48>)
 8000684:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000688:	801a      	strh	r2, [r3, #0]
 800068a:	e006      	b.n	800069a <SMLCD_Orientation+0x32>
	} else {
		scr_width  = SCR_W;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <SMLCD_Orientation+0x44>)
 800068e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000692:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_H;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <SMLCD_Orientation+0x48>)
 8000696:	22f0      	movs	r2, #240	; 0xf0
 8000698:	801a      	strh	r2, [r3, #0]
	}
	lcd_orientation = orientation;
 800069a:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <SMLCD_Orientation+0x4c>)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	7013      	strb	r3, [r2, #0]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	20004c36 	.word	0x20004c36
 80006b0:	20004c38 	.word	0x20004c38
 80006b4:	20000000 	.word	0x20000000

080006b8 <SMLCD_Enable>:


// Public macros and functions

// Enable the display (using DISP pin)
__STATIC_INLINE void SMLCD_Enable(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	SMLCD_DISP_H;
 80006bc:	2201      	movs	r2, #1
 80006be:	2102      	movs	r1, #2
 80006c0:	4802      	ldr	r0, [pc, #8]	; (80006cc <SMLCD_Enable+0x14>)
 80006c2:	f004 fe09 	bl	80052d8 <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40022400 	.word	0x40022400

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b0ca      	sub	sp, #296	; 0x128
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f003 f958 	bl	800398a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f9c3 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f000 fffb 	bl	80016d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e2:	f000 ffb7 	bl	8001654 <MX_DMA_Init>
  MX_ADC1_Init();
 80006e6:	f000 fa69 	bl	8000bbc <MX_ADC1_Init>
  MX_ADC2_Init();
 80006ea:	f000 fb45 	bl	8000d78 <MX_ADC2_Init>
  MX_ADC3_Init();
 80006ee:	f000 fbbf 	bl	8000e70 <MX_ADC3_Init>
  MX_I2C1_Init();
 80006f2:	f000 fc55 	bl	8000fa0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006f6:	f000 fc93 	bl	8001020 <MX_I2C2_Init>
  MX_I2C3_Init();
 80006fa:	f000 fcd1 	bl	80010a0 <MX_I2C3_Init>
  MX_I2C4_Init();
 80006fe:	f000 fd0f 	bl	8001120 <MX_I2C4_Init>
  MX_RTC_Init();
 8000702:	f000 fd4d 	bl	80011a0 <MX_RTC_Init>
  MX_SPI4_Init();
 8000706:	f000 fd71 	bl	80011ec <MX_SPI4_Init>
  MX_SPI5_Init();
 800070a:	f000 fdad 	bl	8001268 <MX_SPI5_Init>
  MX_TIM4_Init();
 800070e:	f000 fde9 	bl	80012e4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000712:	f000 fe5f 	bl	80013d4 <MX_TIM5_Init>
  MX_UART4_Init();
 8000716:	f000 fedf 	bl	80014d8 <MX_UART4_Init>
  MX_UART5_Init();
 800071a:	f000 ff0d 	bl	8001538 <MX_UART5_Init>
  MX_UART7_Init();
 800071e:	f000 ff3b 	bl	8001598 <MX_UART7_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000722:	f000 ff69 	bl	80015f8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_ConfigChannel();
  outputGPIOBufInitialization();
 8000726:	f001 f977 	bl	8001a18 <outputGPIOBufInitialization>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 800072a:	f241 3288 	movw	r2, #5000	; 0x1388
 800072e:	49ac      	ldr	r1, [pc, #688]	; (80009e0 <main+0x310>)
 8000730:	48ac      	ldr	r0, [pc, #688]	; (80009e4 <main+0x314>)
 8000732:	f003 faff 	bl	8003d34 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8000736:	f241 3288 	movw	r2, #5000	; 0x1388
 800073a:	49ab      	ldr	r1, [pc, #684]	; (80009e8 <main+0x318>)
 800073c:	48ab      	ldr	r0, [pc, #684]	; (80009ec <main+0x31c>)
 800073e:	f003 faf9 	bl	8003d34 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8000742:	f241 3288 	movw	r2, #5000	; 0x1388
 8000746:	49aa      	ldr	r1, [pc, #680]	; (80009f0 <main+0x320>)
 8000748:	48aa      	ldr	r0, [pc, #680]	; (80009f4 <main+0x324>)
 800074a:	f003 faf3 	bl	8003d34 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(GPIOJ,LCD_DISP_Pin,GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2102      	movs	r1, #2
 8000752:	48a9      	ldr	r0, [pc, #676]	; (80009f8 <main+0x328>)
 8000754:	f004 fdc0 	bl	80052d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ,LCD_EXTMODE_Pin,GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2101      	movs	r1, #1
 800075c:	48a6      	ldr	r0, [pc, #664]	; (80009f8 <main+0x328>)
 800075e:	f004 fdbb 	bl	80052d8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000762:	2001      	movs	r0, #1
 8000764:	f003 f93e 	bl	80039e4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2110      	movs	r1, #16
 800076c:	48a3      	ldr	r0, [pc, #652]	; (80009fc <main+0x32c>)
 800076e:	f004 fdb3 	bl	80052d8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Clear, 1, 100);
 8000772:	2364      	movs	r3, #100	; 0x64
 8000774:	2201      	movs	r2, #1
 8000776:	49a2      	ldr	r1, [pc, #648]	; (8000a00 <main+0x330>)
 8000778:	48a2      	ldr	r0, [pc, #648]	; (8000a04 <main+0x334>)
 800077a:	f006 fe3d 	bl	80073f8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2110      	movs	r1, #16
 8000782:	489e      	ldr	r0, [pc, #632]	; (80009fc <main+0x32c>)
 8000784:	f004 fda8 	bl	80052d8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000788:	2001      	movs	r0, #1
 800078a:	f003 f92b 	bl	80039e4 <HAL_Delay>
  int x=1;
 800078e:	2301      	movs	r3, #1
 8000790:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  uint16_t test[102];
  test[0] = update_Line1;
 8000794:	4b9c      	ldr	r3, [pc, #624]	; (8000a08 <main+0x338>)
 8000796:	881a      	ldrh	r2, [r3, #0]
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	801a      	strh	r2, [r3, #0]
  uartTransmitInt(test[0],7);
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	2107      	movs	r1, #7
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 f964 	bl	8001a70 <uartTransmitInt>
  while (x<101){
 80007a8:	e00b      	b.n	80007c2 <main+0xf2>
	test[x] = LCD_Green;
 80007aa:	4b98      	ldr	r3, [pc, #608]	; (8000a0c <main+0x33c>)
 80007ac:	8819      	ldrh	r1, [r3, #0]
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80007b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	x=x+1;
 80007b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007bc:	3301      	adds	r3, #1
 80007be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  while (x<101){
 80007c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007c6:	2b64      	cmp	r3, #100	; 0x64
 80007c8:	ddef      	ble.n	80007aa <main+0xda>
  }
  x=0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  test[61] = update_dummy;
 80007d0:	4b8f      	ldr	r3, [pc, #572]	; (8000a10 <main+0x340>)
 80007d2:	881a      	ldrh	r2, [r3, #0]
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
  uartTransmitInt(test,7);
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2107      	movs	r1, #7
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 f946 	bl	8001a70 <uartTransmitInt>
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2110      	movs	r1, #16
 80007e8:	4884      	ldr	r0, [pc, #528]	; (80009fc <main+0x32c>)
 80007ea:	f004 fd75 	bl	80052d8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi4, (uint16_t *)test, 102, 100);
 80007ee:	1d39      	adds	r1, r7, #4
 80007f0:	2364      	movs	r3, #100	; 0x64
 80007f2:	2266      	movs	r2, #102	; 0x66
 80007f4:	4883      	ldr	r0, [pc, #524]	; (8000a04 <main+0x334>)
 80007f6:	f006 fdff 	bl	80073f8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2110      	movs	r1, #16
 80007fe:	487f      	ldr	r0, [pc, #508]	; (80009fc <main+0x32c>)
 8000800:	f004 fd6a 	bl	80052d8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000804:	2005      	movs	r0, #5
 8000806:	f003 f8ed 	bl	80039e4 <HAL_Delay>
  test[0]=update_Line2;
 800080a:	4b82      	ldr	r3, [pc, #520]	; (8000a14 <main+0x344>)
 800080c:	881a      	ldrh	r2, [r3, #0]
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	801a      	strh	r2, [r3, #0]
  uartTransmitInt(test[0],7);
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	2107      	movs	r1, #7
 8000818:	4618      	mov	r0, r3
 800081a:	f001 f929 	bl	8001a70 <uartTransmitInt>
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2110      	movs	r1, #16
 8000822:	4876      	ldr	r0, [pc, #472]	; (80009fc <main+0x32c>)
 8000824:	f004 fd58 	bl	80052d8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi4, (uint16_t *)test, 102, 100);
 8000828:	1d39      	adds	r1, r7, #4
 800082a:	2364      	movs	r3, #100	; 0x64
 800082c:	2266      	movs	r2, #102	; 0x66
 800082e:	4875      	ldr	r0, [pc, #468]	; (8000a04 <main+0x334>)
 8000830:	f006 fde2 	bl	80073f8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2110      	movs	r1, #16
 8000838:	4870      	ldr	r0, [pc, #448]	; (80009fc <main+0x32c>)
 800083a:	f004 fd4d 	bl	80052d8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800083e:	2005      	movs	r0, #5
 8000840:	f003 f8d0 	bl	80039e4 <HAL_Delay>
  test[0]=update_Line3;
 8000844:	4b74      	ldr	r3, [pc, #464]	; (8000a18 <main+0x348>)
 8000846:	881a      	ldrh	r2, [r3, #0]
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	801a      	strh	r2, [r3, #0]
  uartTransmitInt(test[0],7);
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	2107      	movs	r1, #7
 8000852:	4618      	mov	r0, r3
 8000854:	f001 f90c 	bl	8001a70 <uartTransmitInt>
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2110      	movs	r1, #16
 800085c:	4867      	ldr	r0, [pc, #412]	; (80009fc <main+0x32c>)
 800085e:	f004 fd3b 	bl	80052d8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi4, (uint16_t *)test, 102, 100);
 8000862:	1d39      	adds	r1, r7, #4
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	2266      	movs	r2, #102	; 0x66
 8000868:	4866      	ldr	r0, [pc, #408]	; (8000a04 <main+0x334>)
 800086a:	f006 fdc5 	bl	80073f8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2110      	movs	r1, #16
 8000872:	4862      	ldr	r0, [pc, #392]	; (80009fc <main+0x32c>)
 8000874:	f004 fd30 	bl	80052d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH,FRONT_LED_CTRL_Pin,GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087e:	4867      	ldr	r0, [pc, #412]	; (8000a1c <main+0x34c>)
 8000880:	f004 fd2a 	bl	80052d8 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 8000884:	f241 3088 	movw	r0, #5000	; 0x1388
 8000888:	f003 f8ac 	bl	80039e4 <HAL_Delay>


  configureLEDDriver();
 800088c:	f001 fa4e 	bl	8001d2c <configureLEDDriver>
    setErrorLED(4,OFF);
 8000890:	4b63      	ldr	r3, [pc, #396]	; (8000a20 <main+0x350>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	2004      	movs	r0, #4
 8000898:	f001 fad4 	bl	8001e44 <setErrorLED>
    HAL_Delay(1000);
 800089c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a0:	f003 f8a0 	bl	80039e4 <HAL_Delay>
    setErrorLED(7,OFF);
 80008a4:	4b5e      	ldr	r3, [pc, #376]	; (8000a20 <main+0x350>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	2007      	movs	r0, #7
 80008ac:	f001 faca 	bl	8001e44 <setErrorLED>
    setErrorLED(8,ON);
 80008b0:	4b5c      	ldr	r3, [pc, #368]	; (8000a24 <main+0x354>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	2008      	movs	r0, #8
 80008b8:	f001 fac4 	bl	8001e44 <setErrorLED>
    HAL_Delay(1000);
 80008bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c0:	f003 f890 	bl	80039e4 <HAL_Delay>
    setErrorLED(8,OFF);
 80008c4:	4b56      	ldr	r3, [pc, #344]	; (8000a20 <main+0x350>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	2008      	movs	r0, #8
 80008cc:	f001 faba 	bl	8001e44 <setErrorLED>
    setErrorLED(9,ON);
 80008d0:	4b54      	ldr	r3, [pc, #336]	; (8000a24 <main+0x354>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	2009      	movs	r0, #9
 80008d8:	f001 fab4 	bl	8001e44 <setErrorLED>
    HAL_Delay(1000);
 80008dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e0:	f003 f880 	bl	80039e4 <HAL_Delay>
    setErrorLED(8,ON);
 80008e4:	4b4f      	ldr	r3, [pc, #316]	; (8000a24 <main+0x354>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	2008      	movs	r0, #8
 80008ec:	f001 faaa 	bl	8001e44 <setErrorLED>
    setErrorLED(9,ON);
 80008f0:	4b4c      	ldr	r3, [pc, #304]	; (8000a24 <main+0x354>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	2009      	movs	r0, #9
 80008f8:	f001 faa4 	bl	8001e44 <setErrorLED>
    HAL_Delay(1000);
 80008fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000900:	f003 f870 	bl	80039e4 <HAL_Delay>
    setErrorLED(9,OFF);
 8000904:	4b46      	ldr	r3, [pc, #280]	; (8000a20 <main+0x350>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	2009      	movs	r0, #9
 800090c:	f001 fa9a 	bl	8001e44 <setErrorLED>

	SMLCD_InitGPIO();
 8000910:	f7ff fe6e 	bl	80005f0 <SMLCD_InitGPIO>
	SMLCD_Init();
 8000914:	f7ff fe7e 	bl	8000614 <SMLCD_Init>
	SMLCD_Enable();
 8000918:	f7ff fece 	bl	80006b8 <SMLCD_Enable>
	SMLCD_Clear();
 800091c:	f7ff fe86 	bl	800062c <SMLCD_Clear>
  //  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000920:	f009 f898 	bl	8009a54 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(startHeartbeat, NULL, &Heartbeat_attributes);
 8000924:	4a40      	ldr	r2, [pc, #256]	; (8000a28 <main+0x358>)
 8000926:	2100      	movs	r1, #0
 8000928:	4840      	ldr	r0, [pc, #256]	; (8000a2c <main+0x35c>)
 800092a:	f009 f8fd 	bl	8009b28 <osThreadNew>
 800092e:	4602      	mov	r2, r0
 8000930:	4b3f      	ldr	r3, [pc, #252]	; (8000a30 <main+0x360>)
 8000932:	601a      	str	r2, [r3, #0]

  /* creation of adcRead */
  adcReadHandle = osThreadNew(startADCRead, NULL, &adcRead_attributes);
 8000934:	4a3f      	ldr	r2, [pc, #252]	; (8000a34 <main+0x364>)
 8000936:	2100      	movs	r1, #0
 8000938:	483f      	ldr	r0, [pc, #252]	; (8000a38 <main+0x368>)
 800093a:	f009 f8f5 	bl	8009b28 <osThreadNew>
 800093e:	4602      	mov	r2, r0
 8000940:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <main+0x36c>)
 8000942:	601a      	str	r2, [r3, #0]

  /* creation of DatScreenBlink */
  DatScreenBlinkHandle = osThreadNew(GetDaScreenBlink, NULL, &DatScreenBlink_attributes);
 8000944:	4a3e      	ldr	r2, [pc, #248]	; (8000a40 <main+0x370>)
 8000946:	2100      	movs	r1, #0
 8000948:	483e      	ldr	r0, [pc, #248]	; (8000a44 <main+0x374>)
 800094a:	f009 f8ed 	bl	8009b28 <osThreadNew>
 800094e:	4602      	mov	r2, r0
 8000950:	4b3d      	ldr	r3, [pc, #244]	; (8000a48 <main+0x378>)
 8000952:	601a      	str	r2, [r3, #0]

  /* creation of gpioInputRead */
  gpioInputReadHandle = osThreadNew(startGpioInputRead, NULL, &gpioInputRead_attributes);
 8000954:	4a3d      	ldr	r2, [pc, #244]	; (8000a4c <main+0x37c>)
 8000956:	2100      	movs	r1, #0
 8000958:	483d      	ldr	r0, [pc, #244]	; (8000a50 <main+0x380>)
 800095a:	f009 f8e5 	bl	8009b28 <osThreadNew>
 800095e:	4602      	mov	r2, r0
 8000960:	4b3c      	ldr	r3, [pc, #240]	; (8000a54 <main+0x384>)
 8000962:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000964:	f009 f8aa 	bl	8009abc <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_Delay(1000);
 8000968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096c:	f003 f83a 	bl	80039e4 <HAL_Delay>
	  if (!x) {
 8000970:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000974:	2b00      	cmp	r3, #0
 8000976:	d119      	bne.n	80009ac <main+0x2dc>
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097e:	4836      	ldr	r0, [pc, #216]	; (8000a58 <main+0x388>)
 8000980:	f004 fcaa 	bl	80052d8 <HAL_GPIO_WritePin>
		  x=1;
 8000984:	2301      	movs	r3, #1
 8000986:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		  //uartTransmitChar("hello\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 800098a:	2201      	movs	r2, #1
 800098c:	2110      	movs	r1, #16
 800098e:	481b      	ldr	r0, [pc, #108]	; (80009fc <main+0x32c>)
 8000990:	f004 fca2 	bl	80052d8 <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
 8000994:	2364      	movs	r3, #100	; 0x64
 8000996:	2201      	movs	r2, #1
 8000998:	4930      	ldr	r1, [pc, #192]	; (8000a5c <main+0x38c>)
 800099a:	481a      	ldr	r0, [pc, #104]	; (8000a04 <main+0x334>)
 800099c:	f006 fd2c 	bl	80073f8 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2110      	movs	r1, #16
 80009a4:	4815      	ldr	r0, [pc, #84]	; (80009fc <main+0x32c>)
 80009a6:	f004 fc97 	bl	80052d8 <HAL_GPIO_WritePin>
 80009aa:	e7dd      	b.n	8000968 <main+0x298>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b2:	4829      	ldr	r0, [pc, #164]	; (8000a58 <main+0x388>)
 80009b4:	f004 fc90 	bl	80052d8 <HAL_GPIO_WritePin>
		  x=0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		  //uartTransmitChar("here\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	2110      	movs	r1, #16
 80009c2:	480e      	ldr	r0, [pc, #56]	; (80009fc <main+0x32c>)
 80009c4:	f004 fc88 	bl	80052d8 <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
 80009c8:	2364      	movs	r3, #100	; 0x64
 80009ca:	2201      	movs	r2, #1
 80009cc:	4924      	ldr	r1, [pc, #144]	; (8000a60 <main+0x390>)
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <main+0x334>)
 80009d0:	f006 fd12 	bl	80073f8 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2110      	movs	r1, #16
 80009d8:	4808      	ldr	r0, [pc, #32]	; (80009fc <main+0x32c>)
 80009da:	f004 fc7d 	bl	80052d8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80009de:	e7c3      	b.n	8000968 <main+0x298>
 80009e0:	2000538c 	.word	0x2000538c
 80009e4:	20007b1c 	.word	0x20007b1c
 80009e8:	2000a438 	.word	0x2000a438
 80009ec:	20004e04 	.word	0x20004e04
 80009f0:	20007ca4 	.word	0x20007ca4
 80009f4:	20007b68 	.word	0x20007b68
 80009f8:	40022400 	.word	0x40022400
 80009fc:	40021000 	.word	0x40021000
 8000a00:	200000a4 	.word	0x200000a4
 8000a04:	20007bb0 	.word	0x20007bb0
 8000a08:	200000a6 	.word	0x200000a6
 8000a0c:	200000a8 	.word	0x200000a8
 8000a10:	200002b4 	.word	0x200002b4
 8000a14:	200000aa 	.word	0x200000aa
 8000a18:	200000ac 	.word	0x200000ac
 8000a1c:	40021c00 	.word	0x40021c00
 8000a20:	200002b6 	.word	0x200002b6
 8000a24:	200000ae 	.word	0x200000ae
 8000a28:	0800ff24 	.word	0x0800ff24
 8000a2c:	08002905 	.word	0x08002905
 8000a30:	2000a434 	.word	0x2000a434
 8000a34:	0800ff48 	.word	0x0800ff48
 8000a38:	08002925 	.word	0x08002925
 8000a3c:	2000cc0c 	.word	0x2000cc0c
 8000a40:	0800ff6c 	.word	0x0800ff6c
 8000a44:	080029a5 	.word	0x080029a5
 8000a48:	2000cc08 	.word	0x2000cc08
 8000a4c:	0800ff90 	.word	0x0800ff90
 8000a50:	08002a59 	.word	0x08002a59
 8000a54:	20007b64 	.word	0x20007b64
 8000a58:	40022000 	.word	0x40022000
 8000a5c:	200000b0 	.word	0x200000b0
 8000a60:	200000b2 	.word	0x200000b2

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b0b8      	sub	sp, #224	; 0xe0
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a6e:	2234      	movs	r2, #52	; 0x34
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f00b fda7 	bl	800c5c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	2290      	movs	r2, #144	; 0x90
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f00b fd98 	bl	800c5c6 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a96:	f005 fa8d 	bl	8005fb4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a9a:	4b45      	ldr	r3, [pc, #276]	; (8000bb0 <SystemClock_Config+0x14c>)
 8000a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a9e:	4a44      	ldr	r2, [pc, #272]	; (8000bb0 <SystemClock_Config+0x14c>)
 8000aa0:	f023 0318 	bic.w	r3, r3, #24
 8000aa4:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b42      	ldr	r3, [pc, #264]	; (8000bb0 <SystemClock_Config+0x14c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a41      	ldr	r2, [pc, #260]	; (8000bb0 <SystemClock_Config+0x14c>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b3f      	ldr	r3, [pc, #252]	; (8000bb0 <SystemClock_Config+0x14c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000abe:	4b3d      	ldr	r3, [pc, #244]	; (8000bb4 <SystemClock_Config+0x150>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ac6:	4a3b      	ldr	r2, [pc, #236]	; (8000bb4 <SystemClock_Config+0x150>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <SystemClock_Config+0x150>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000ada:	2307      	movs	r3, #7
 8000adc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aee:	2301      	movs	r3, #1
 8000af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af4:	2310      	movs	r3, #16
 8000af6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afa:	2302      	movs	r3, #2
 8000afc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000b08:	230f      	movs	r3, #15
 8000b0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000b0e:	2390      	movs	r3, #144	; 0x90
 8000b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000b1a:	2305      	movs	r3, #5
 8000b1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b24:	4618      	mov	r0, r3
 8000b26:	f005 fa55 	bl	8005fd4 <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b30:	f002 f83a 	bl	8002ba8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	230f      	movs	r3, #15
 8000b36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b52:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f005 fce9 	bl	8006530 <HAL_RCC_ClockConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8000b64:	f002 f820 	bl	8002ba8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <SystemClock_Config+0x154>)
 8000b6a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b70:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f005 fecd 	bl	8006938 <HAL_RCCEx_PeriphCLKConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0x144>
  {
    Error_Handler();
 8000ba4:	f002 f800 	bl	8002ba8 <Error_Handler>
  }
}
 8000ba8:	bf00      	nop
 8000baa:	37e0      	adds	r7, #224	; 0xe0
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40007000 	.word	0x40007000
 8000bb8:	0023d620 	.word	0x0023d620

08000bbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bce:	4b67      	ldr	r3, [pc, #412]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000bd0:	4a67      	ldr	r2, [pc, #412]	; (8000d70 <MX_ADC1_Init+0x1b4>)
 8000bd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bd4:	4b65      	ldr	r3, [pc, #404]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000bd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bdc:	4b63      	ldr	r3, [pc, #396]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000be2:	4b62      	ldr	r3, [pc, #392]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000be8:	4b60      	ldr	r3, [pc, #384]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bee:	4b5f      	ldr	r3, [pc, #380]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bf6:	4b5d      	ldr	r3, [pc, #372]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfc:	4b5b      	ldr	r3, [pc, #364]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000bfe:	4a5d      	ldr	r2, [pc, #372]	; (8000d74 <MX_ADC1_Init+0x1b8>)
 8000c00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c02:	4b5a      	ldr	r3, [pc, #360]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 8000c08:	4b58      	ldr	r3, [pc, #352]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000c0a:	220b      	movs	r2, #11
 8000c0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c0e:	4b57      	ldr	r3, [pc, #348]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c16:	4b55      	ldr	r3, [pc, #340]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c1c:	4853      	ldr	r0, [pc, #332]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000c1e:	f002 ff03 	bl	8003a28 <HAL_ADC_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c28:	f001 ffbe 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000c34:	2307      	movs	r3, #7
 8000c36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	484b      	ldr	r0, [pc, #300]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000c3e:	f003 f9cf 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c48:	f001 ffae 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	4619      	mov	r1, r3
 8000c58:	4844      	ldr	r0, [pc, #272]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000c5a:	f003 f9c1 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c64:	f001 ffa0 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c68:	2305      	movs	r3, #5
 8000c6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	483d      	ldr	r0, [pc, #244]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000c76:	f003 f9b3 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000c80:	f001 ff92 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c84:	2306      	movs	r3, #6
 8000c86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4836      	ldr	r0, [pc, #216]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000c92:	f003 f9a5 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000c9c:	f001 ff84 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000ca4:	2305      	movs	r3, #5
 8000ca6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4619      	mov	r1, r3
 8000cac:	482f      	ldr	r0, [pc, #188]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000cae:	f003 f997 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000cb8:	f001 ff76 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000cc0:	2306      	movs	r3, #6
 8000cc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4828      	ldr	r0, [pc, #160]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000cca:	f003 f989 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000cd4:	f001 ff68 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000cd8:	2309      	movs	r3, #9
 8000cda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4821      	ldr	r0, [pc, #132]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000ce6:	f003 f97b 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000cf0:	f001 ff5a 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000cf4:	230a      	movs	r3, #10
 8000cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4619      	mov	r1, r3
 8000d00:	481a      	ldr	r0, [pc, #104]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000d02:	f003 f96d 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000d0c:	f001 ff4c 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d10:	230b      	movs	r3, #11
 8000d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000d14:	2309      	movs	r3, #9
 8000d16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d18:	463b      	mov	r3, r7
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4813      	ldr	r0, [pc, #76]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000d1e:	f003 f95f 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000d28:	f001 ff3e 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000d30:	230a      	movs	r3, #10
 8000d32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d34:	463b      	mov	r3, r7
 8000d36:	4619      	mov	r1, r3
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000d3a:	f003 f951 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000d44:	f001 ff30 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000d48:	230d      	movs	r3, #13
 8000d4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000d4c:	230b      	movs	r3, #11
 8000d4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d50:	463b      	mov	r3, r7
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_ADC1_Init+0x1b0>)
 8000d56:	f003 f943 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8000d60:	f001 ff22 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20007b1c 	.word	0x20007b1c
 8000d70:	40012000 	.word	0x40012000
 8000d74:	0f000001 	.word	0x0f000001

08000d78 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000d8a:	4b36      	ldr	r3, [pc, #216]	; (8000e64 <MX_ADC2_Init+0xec>)
 8000d8c:	4a36      	ldr	r2, [pc, #216]	; (8000e68 <MX_ADC2_Init+0xf0>)
 8000d8e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d90:	4b34      	ldr	r3, [pc, #208]	; (8000e64 <MX_ADC2_Init+0xec>)
 8000d92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d96:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d98:	4b32      	ldr	r3, [pc, #200]	; (8000e64 <MX_ADC2_Init+0xec>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d9e:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <MX_ADC2_Init+0xec>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000da4:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <MX_ADC2_Init+0xec>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <MX_ADC2_Init+0xec>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db2:	4b2c      	ldr	r3, [pc, #176]	; (8000e64 <MX_ADC2_Init+0xec>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db8:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <MX_ADC2_Init+0xec>)
 8000dba:	4a2c      	ldr	r2, [pc, #176]	; (8000e6c <MX_ADC2_Init+0xf4>)
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dbe:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <MX_ADC2_Init+0xec>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000dc4:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <MX_ADC2_Init+0xec>)
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <MX_ADC2_Init+0xec>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd2:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <MX_ADC2_Init+0xec>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dd8:	4822      	ldr	r0, [pc, #136]	; (8000e64 <MX_ADC2_Init+0xec>)
 8000dda:	f002 fe25 	bl	8003a28 <HAL_ADC_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000de4:	f001 fee0 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000df0:	2307      	movs	r3, #7
 8000df2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	4619      	mov	r1, r3
 8000df8:	481a      	ldr	r0, [pc, #104]	; (8000e64 <MX_ADC2_Init+0xec>)
 8000dfa:	f003 f8f1 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000e04:	f001 fed0 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4619      	mov	r1, r3
 8000e14:	4813      	ldr	r0, [pc, #76]	; (8000e64 <MX_ADC2_Init+0xec>)
 8000e16:	f003 f8e3 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000e20:	f001 fec2 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000e24:	230e      	movs	r3, #14
 8000e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <MX_ADC2_Init+0xec>)
 8000e32:	f003 f8d5 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000e3c:	f001 feb4 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e40:	230f      	movs	r3, #15
 8000e42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e44:	2304      	movs	r3, #4
 8000e46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e48:	463b      	mov	r3, r7
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_ADC2_Init+0xec>)
 8000e4e:	f003 f8c7 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8000e58:	f001 fea6 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20004e04 	.word	0x20004e04
 8000e68:	40012100 	.word	0x40012100
 8000e6c:	0f000001 	.word	0x0f000001

08000e70 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e76:	463b      	mov	r3, r7
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e82:	4b44      	ldr	r3, [pc, #272]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000e84:	4a44      	ldr	r2, [pc, #272]	; (8000f98 <MX_ADC3_Init+0x128>)
 8000e86:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e88:	4b42      	ldr	r3, [pc, #264]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000e8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e8e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e90:	4b40      	ldr	r3, [pc, #256]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e96:	4b3f      	ldr	r3, [pc, #252]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000e9c:	4b3d      	ldr	r3, [pc, #244]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ea2:	4b3c      	ldr	r3, [pc, #240]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eaa:	4b3a      	ldr	r3, [pc, #232]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb0:	4b38      	ldr	r3, [pc, #224]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000eb2:	4a3a      	ldr	r2, [pc, #232]	; (8000f9c <MX_ADC3_Init+0x12c>)
 8000eb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb6:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8000ebc:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000ebe:	2206      	movs	r2, #6
 8000ec0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000ec2:	4b34      	ldr	r3, [pc, #208]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eca:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ed0:	4830      	ldr	r0, [pc, #192]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000ed2:	f002 fda9 	bl	8003a28 <HAL_ADC_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000edc:	f001 fe64 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ee8:	2307      	movs	r3, #7
 8000eea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000eec:	463b      	mov	r3, r7
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4828      	ldr	r0, [pc, #160]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000ef2:	f003 f875 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000efc:	f001 fe54 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f00:	2304      	movs	r3, #4
 8000f02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4821      	ldr	r0, [pc, #132]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000f0e:	f003 f867 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000f18:	f001 fe46 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f1c:	2305      	movs	r3, #5
 8000f1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f20:	2303      	movs	r3, #3
 8000f22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	481a      	ldr	r0, [pc, #104]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000f2a:	f003 f859 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000f34:	f001 fe38 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f38:	2306      	movs	r3, #6
 8000f3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f40:	463b      	mov	r3, r7
 8000f42:	4619      	mov	r1, r3
 8000f44:	4813      	ldr	r0, [pc, #76]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000f46:	f003 f84b 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8000f50:	f001 fe2a 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f54:	2307      	movs	r3, #7
 8000f56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f58:	2305      	movs	r3, #5
 8000f5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000f62:	f003 f83d 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8000f6c:	f001 fe1c 	bl	8002ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f70:	2308      	movs	r3, #8
 8000f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f74:	2306      	movs	r3, #6
 8000f76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_ADC3_Init+0x124>)
 8000f7e:	f003 f82f 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8000f88:	f001 fe0e 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  /* USER CODE END ADC3_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20007b68 	.word	0x20007b68
 8000f98:	40012200 	.word	0x40012200
 8000f9c:	0f000001 	.word	0x0f000001

08000fa0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <MX_I2C1_Init+0x78>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fac:	4a1b      	ldr	r2, [pc, #108]	; (800101c <MX_I2C1_Init+0x7c>)
 8000fae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fdc:	f004 f9b0 	bl	8005340 <HAL_I2C_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fe6:	f001 fddf 	bl	8002ba8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fea:	2100      	movs	r1, #0
 8000fec:	4809      	ldr	r0, [pc, #36]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fee:	f004 fe01 	bl	8005bf4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff8:	f001 fdd6 	bl	8002ba8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_I2C1_Init+0x74>)
 8001000:	f004 fe43 	bl	8005c8a <HAL_I2CEx_ConfigDigitalFilter>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800100a:	f001 fdcd 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20004e4c 	.word	0x20004e4c
 8001018:	40005400 	.word	0x40005400
 800101c:	00303d5b 	.word	0x00303d5b

08001020 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_I2C2_Init+0x74>)
 8001026:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <MX_I2C2_Init+0x78>)
 8001028:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_I2C2_Init+0x74>)
 800102c:	4a1b      	ldr	r2, [pc, #108]	; (800109c <MX_I2C2_Init+0x7c>)
 800102e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_I2C2_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_I2C2_Init+0x74>)
 8001038:	2201      	movs	r2, #1
 800103a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_I2C2_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_I2C2_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_I2C2_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_I2C2_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_I2C2_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800105a:	480e      	ldr	r0, [pc, #56]	; (8001094 <MX_I2C2_Init+0x74>)
 800105c:	f004 f970 	bl	8005340 <HAL_I2C_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001066:	f001 fd9f 	bl	8002ba8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800106a:	2100      	movs	r1, #0
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <MX_I2C2_Init+0x74>)
 800106e:	f004 fdc1 	bl	8005bf4 <HAL_I2CEx_ConfigAnalogFilter>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001078:	f001 fd96 	bl	8002ba8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800107c:	2100      	movs	r1, #0
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_I2C2_Init+0x74>)
 8001080:	f004 fe03 	bl	8005c8a <HAL_I2CEx_ConfigDigitalFilter>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800108a:	f001 fd8d 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000529c 	.word	0x2000529c
 8001098:	40005800 	.word	0x40005800
 800109c:	00303d5b 	.word	0x00303d5b

080010a0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MX_I2C3_Init+0x74>)
 80010a6:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <MX_I2C3_Init+0x78>)
 80010a8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_I2C3_Init+0x74>)
 80010ac:	4a1b      	ldr	r2, [pc, #108]	; (800111c <MX_I2C3_Init+0x7c>)
 80010ae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_I2C3_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_I2C3_Init+0x74>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <MX_I2C3_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_I2C3_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_I2C3_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_I2C3_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_I2C3_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <MX_I2C3_Init+0x74>)
 80010dc:	f004 f930 	bl	8005340 <HAL_I2C_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80010e6:	f001 fd5f 	bl	8002ba8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ea:	2100      	movs	r1, #0
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <MX_I2C3_Init+0x74>)
 80010ee:	f004 fd81 	bl	8005bf4 <HAL_I2CEx_ConfigAnalogFilter>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80010f8:	f001 fd56 	bl	8002ba8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010fc:	2100      	movs	r1, #0
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_I2C3_Init+0x74>)
 8001100:	f004 fdc3 	bl	8005c8a <HAL_I2CEx_ConfigDigitalFilter>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800110a:	f001 fd4d 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20004c3c 	.word	0x20004c3c
 8001118:	40005c00 	.word	0x40005c00
 800111c:	00303d5b 	.word	0x00303d5b

08001120 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <MX_I2C4_Init+0x74>)
 8001126:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <MX_I2C4_Init+0x78>)
 8001128:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00303D5B;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_I2C4_Init+0x74>)
 800112c:	4a1b      	ldr	r2, [pc, #108]	; (800119c <MX_I2C4_Init+0x7c>)
 800112e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_I2C4_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_I2C4_Init+0x74>)
 8001138:	2201      	movs	r2, #1
 800113a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_I2C4_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_I2C4_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_I2C4_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_I2C4_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_I2C4_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800115a:	480e      	ldr	r0, [pc, #56]	; (8001194 <MX_I2C4_Init+0x74>)
 800115c:	f004 f8f0 	bl	8005340 <HAL_I2C_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001166:	f001 fd1f 	bl	8002ba8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800116a:	2100      	movs	r1, #0
 800116c:	4809      	ldr	r0, [pc, #36]	; (8001194 <MX_I2C4_Init+0x74>)
 800116e:	f004 fd41 	bl	8005bf4 <HAL_I2CEx_ConfigAnalogFilter>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001178:	f001 fd16 	bl	8002ba8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800117c:	2100      	movs	r1, #0
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_I2C4_Init+0x74>)
 8001180:	f004 fd83 	bl	8005c8a <HAL_I2CEx_ConfigDigitalFilter>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800118a:	f001 fd0d 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20004c88 	.word	0x20004c88
 8001198:	40006000 	.word	0x40006000
 800119c:	00303d5b 	.word	0x00303d5b

080011a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_RTC_Init+0x44>)
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <MX_RTC_Init+0x48>)
 80011a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_RTC_Init+0x44>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_RTC_Init+0x44>)
 80011b2:	227f      	movs	r2, #127	; 0x7f
 80011b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_RTC_Init+0x44>)
 80011b8:	22ff      	movs	r2, #255	; 0xff
 80011ba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_RTC_Init+0x44>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_RTC_Init+0x44>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_RTC_Init+0x44>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_RTC_Init+0x44>)
 80011d0:	f005 ffd8 	bl	8007184 <HAL_RTC_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80011da:	f001 fce5 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20007c84 	.word	0x20007c84
 80011e8:	40002800 	.word	0x40002800

080011ec <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <MX_SPI4_Init+0x74>)
 80011f2:	4a1c      	ldr	r2, [pc, #112]	; (8001264 <MX_SPI4_Init+0x78>)
 80011f4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_SPI4_Init+0x74>)
 80011f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011fc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <MX_SPI4_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <MX_SPI4_Init+0x74>)
 8001206:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800120a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_SPI4_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_SPI4_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_SPI4_Init+0x74>)
 800121a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_SPI4_Init+0x74>)
 8001222:	2218      	movs	r2, #24
 8001224:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_SPI4_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_SPI4_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_SPI4_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_SPI4_Init+0x74>)
 800123a:	2207      	movs	r2, #7
 800123c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <MX_SPI4_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_SPI4_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_SPI4_Init+0x74>)
 800124c:	f006 f842 	bl	80072d4 <HAL_SPI_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001256:	f001 fca7 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20007bb0 	.word	0x20007bb0
 8001264:	40013400 	.word	0x40013400

08001268 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_SPI5_Init+0x74>)
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <MX_SPI5_Init+0x78>)
 8001270:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_SPI5_Init+0x74>)
 8001274:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001278:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_SPI5_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_SPI5_Init+0x74>)
 8001282:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001286:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_SPI5_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <MX_SPI5_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_SPI5_Init+0x74>)
 8001296:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800129a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_SPI5_Init+0x74>)
 800129e:	2218      	movs	r2, #24
 80012a0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_SPI5_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_SPI5_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_SPI5_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_SPI5_Init+0x74>)
 80012b6:	2207      	movs	r2, #7
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_SPI5_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_SPI5_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_SPI5_Init+0x74>)
 80012c8:	f006 f804 	bl	80072d4 <HAL_SPI_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80012d2:	f001 fc69 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20004d54 	.word	0x20004d54
 80012e0:	40015000 	.word	0x40015000

080012e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08e      	sub	sp, #56	; 0x38
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001304:	463b      	mov	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <MX_TIM4_Init+0xe8>)
 8001318:	4a2d      	ldr	r2, [pc, #180]	; (80013d0 <MX_TIM4_Init+0xec>)
 800131a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <MX_TIM4_Init+0xe8>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <MX_TIM4_Init+0xe8>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <MX_TIM4_Init+0xe8>)
 800132a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <MX_TIM4_Init+0xe8>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <MX_TIM4_Init+0xe8>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800133c:	4823      	ldr	r0, [pc, #140]	; (80013cc <MX_TIM4_Init+0xe8>)
 800133e:	f006 fbfd 	bl	8007b3c <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001348:	f001 fc2e 	bl	8002ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001356:	4619      	mov	r1, r3
 8001358:	481c      	ldr	r0, [pc, #112]	; (80013cc <MX_TIM4_Init+0xe8>)
 800135a:	f006 feb1 	bl	80080c0 <HAL_TIM_ConfigClockSource>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001364:	f001 fc20 	bl	8002ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001368:	4818      	ldr	r0, [pc, #96]	; (80013cc <MX_TIM4_Init+0xe8>)
 800136a:	f006 fc3d 	bl	8007be8 <HAL_TIM_PWM_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001374:	f001 fc18 	bl	8002ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4811      	ldr	r0, [pc, #68]	; (80013cc <MX_TIM4_Init+0xe8>)
 8001388:	f007 fb14 	bl	80089b4 <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001392:	f001 fc09 	bl	8002ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001396:	2360      	movs	r3, #96	; 0x60
 8001398:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	4807      	ldr	r0, [pc, #28]	; (80013cc <MX_TIM4_Init+0xe8>)
 80013ae:	f006 fd6f 	bl	8007e90 <HAL_TIM_PWM_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80013b8:	f001 fbf6 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013bc:	4803      	ldr	r0, [pc, #12]	; (80013cc <MX_TIM4_Init+0xe8>)
 80013be:	f001 ffef 	bl	80033a0 <HAL_TIM_MspPostInit>

}
 80013c2:	bf00      	nop
 80013c4:	3738      	adds	r7, #56	; 0x38
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20004db8 	.word	0x20004db8
 80013d0:	40000800 	.word	0x40000800

080013d4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08e      	sub	sp, #56	; 0x38
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f4:	463b      	mov	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001406:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <MX_TIM5_Init+0xfc>)
 8001408:	4a32      	ldr	r2, [pc, #200]	; (80014d4 <MX_TIM5_Init+0x100>)
 800140a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <MX_TIM5_Init+0xfc>)
 800140e:	2200      	movs	r2, #0
 8001410:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <MX_TIM5_Init+0xfc>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001418:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <MX_TIM5_Init+0xfc>)
 800141a:	f04f 32ff 	mov.w	r2, #4294967295
 800141e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001420:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <MX_TIM5_Init+0xfc>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001426:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <MX_TIM5_Init+0xfc>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800142c:	4828      	ldr	r0, [pc, #160]	; (80014d0 <MX_TIM5_Init+0xfc>)
 800142e:	f006 fb85 	bl	8007b3c <HAL_TIM_Base_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001438:	f001 fbb6 	bl	8002ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001446:	4619      	mov	r1, r3
 8001448:	4821      	ldr	r0, [pc, #132]	; (80014d0 <MX_TIM5_Init+0xfc>)
 800144a:	f006 fe39 	bl	80080c0 <HAL_TIM_ConfigClockSource>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001454:	f001 fba8 	bl	8002ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001458:	481d      	ldr	r0, [pc, #116]	; (80014d0 <MX_TIM5_Init+0xfc>)
 800145a:	f006 fbc5 	bl	8007be8 <HAL_TIM_PWM_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001464:	f001 fba0 	bl	8002ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	4619      	mov	r1, r3
 8001476:	4816      	ldr	r0, [pc, #88]	; (80014d0 <MX_TIM5_Init+0xfc>)
 8001478:	f007 fa9c 	bl	80089b4 <HAL_TIMEx_MasterConfigSynchronization>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001482:	f001 fb91 	bl	8002ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001486:	2360      	movs	r3, #96	; 0x60
 8001488:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001496:	463b      	mov	r3, r7
 8001498:	2200      	movs	r2, #0
 800149a:	4619      	mov	r1, r3
 800149c:	480c      	ldr	r0, [pc, #48]	; (80014d0 <MX_TIM5_Init+0xfc>)
 800149e:	f006 fcf7 	bl	8007e90 <HAL_TIM_PWM_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80014a8:	f001 fb7e 	bl	8002ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014ac:	463b      	mov	r3, r7
 80014ae:	2204      	movs	r2, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4807      	ldr	r0, [pc, #28]	; (80014d0 <MX_TIM5_Init+0xfc>)
 80014b4:	f006 fcec 	bl	8007e90 <HAL_TIM_PWM_ConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 80014be:	f001 fb73 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80014c2:	4803      	ldr	r0, [pc, #12]	; (80014d0 <MX_TIM5_Init+0xfc>)
 80014c4:	f001 ff6c 	bl	80033a0 <HAL_TIM_MspPostInit>

}
 80014c8:	bf00      	nop
 80014ca:	3738      	adds	r7, #56	; 0x38
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	2000534c 	.word	0x2000534c
 80014d4:	40000c00 	.word	0x40000c00

080014d8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_UART4_Init+0x58>)
 80014de:	4a15      	ldr	r2, [pc, #84]	; (8001534 <MX_UART4_Init+0x5c>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_UART4_Init+0x58>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_UART4_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_UART4_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_UART4_Init+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_UART4_Init+0x58>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_UART4_Init+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_UART4_Init+0x58>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_UART4_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_UART4_Init+0x58>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_UART4_Init+0x58>)
 800151c:	f007 faf6 	bl	8008b0c <HAL_UART_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001526:	f001 fb3f 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000a3b4 	.word	0x2000a3b4
 8001534:	40004c00 	.word	0x40004c00

08001538 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_UART5_Init+0x58>)
 800153e:	4a15      	ldr	r2, [pc, #84]	; (8001594 <MX_UART5_Init+0x5c>)
 8001540:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_UART5_Init+0x58>)
 8001544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001548:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_UART5_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_UART5_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_UART5_Init+0x58>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_UART5_Init+0x58>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <MX_UART5_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_UART5_Init+0x58>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <MX_UART5_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_UART5_Init+0x58>)
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_UART5_Init+0x58>)
 800157c:	f007 fac6 	bl	8008b0c <HAL_UART_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001586:	f001 fb0f 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20007a9c 	.word	0x20007a9c
 8001594:	40005000 	.word	0x40005000

08001598 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_UART7_Init+0x58>)
 800159e:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <MX_UART7_Init+0x5c>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_UART7_Init+0x58>)
 80015a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_UART7_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_UART7_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_UART7_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_UART7_Init+0x58>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_UART7_Init+0x58>)
 80015c4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80015c8:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_UART7_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <MX_UART7_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_UART7_Init+0x58>)
 80015d8:	2200      	movs	r2, #0
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_UART7_Init+0x58>)
 80015de:	f007 fa95 	bl	8008b0c <HAL_UART_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_UART7_Init+0x54>
  {
    Error_Handler();
 80015e8:	f001 fade 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20004cd4 	.word	0x20004cd4
 80015f4:	40007800 	.word	0x40007800

080015f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001602:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001606:	2206      	movs	r2, #6
 8001608:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800160c:	2202      	movs	r2, #2
 800160e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001618:	2202      	movs	r2, #2
 800161a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800163c:	f004 fb71 	bl	8005d22 <HAL_PCD_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001646:	f001 faaf 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20004e98 	.word	0x20004e98

08001654 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800165a:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <MX_DMA_Init+0x80>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <MX_DMA_Init+0x80>)
 8001660:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <MX_DMA_Init+0x80>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <MX_DMA_Init+0x80>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <MX_DMA_Init+0x80>)
 8001678:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <MX_DMA_Init+0x80>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2105      	movs	r1, #5
 800168e:	200b      	movs	r0, #11
 8001690:	f003 f82e 	bl	80046f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001694:	200b      	movs	r0, #11
 8001696:	f003 f847 	bl	8004728 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2105      	movs	r1, #5
 800169e:	2038      	movs	r0, #56	; 0x38
 80016a0:	f003 f826 	bl	80046f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016a4:	2038      	movs	r0, #56	; 0x38
 80016a6:	f003 f83f 	bl	8004728 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2105      	movs	r1, #5
 80016ae:	2039      	movs	r0, #57	; 0x39
 80016b0:	f003 f81e 	bl	80046f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80016b4:	2039      	movs	r0, #57	; 0x39
 80016b6:	f003 f837 	bl	8004728 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2105      	movs	r1, #5
 80016be:	203a      	movs	r0, #58	; 0x3a
 80016c0:	f003 f816 	bl	80046f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80016c4:	203a      	movs	r0, #58	; 0x3a
 80016c6:	f003 f82f 	bl	8004728 <HAL_NVIC_EnableIRQ>

}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b090      	sub	sp, #64	; 0x40
 80016dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ee:	4bb0      	ldr	r3, [pc, #704]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4aaf      	ldr	r2, [pc, #700]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 80016f4:	f043 0310 	orr.w	r3, r3, #16
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4bad      	ldr	r3, [pc, #692]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
 8001704:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001706:	4baa      	ldr	r3, [pc, #680]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4aa9      	ldr	r2, [pc, #676]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 800170c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4ba7      	ldr	r3, [pc, #668]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	4ba4      	ldr	r3, [pc, #656]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4aa3      	ldr	r2, [pc, #652]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4ba1      	ldr	r3, [pc, #644]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	623b      	str	r3, [r7, #32]
 8001734:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001736:	4b9e      	ldr	r3, [pc, #632]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a9d      	ldr	r2, [pc, #628]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b9b      	ldr	r3, [pc, #620]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	4b98      	ldr	r3, [pc, #608]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a97      	ldr	r2, [pc, #604]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b95      	ldr	r3, [pc, #596]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001766:	4b92      	ldr	r3, [pc, #584]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a91      	ldr	r2, [pc, #580]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b8f      	ldr	r3, [pc, #572]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800177e:	4b8c      	ldr	r3, [pc, #560]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a8b      	ldr	r2, [pc, #556]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 8001784:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b89      	ldr	r3, [pc, #548]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001796:	4b86      	ldr	r3, [pc, #536]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a85      	ldr	r2, [pc, #532]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 800179c:	f043 0320 	orr.w	r3, r3, #32
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b83      	ldr	r3, [pc, #524]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0320 	and.w	r3, r3, #32
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ae:	4b80      	ldr	r3, [pc, #512]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a7f      	ldr	r2, [pc, #508]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 80017b4:	f043 0308 	orr.w	r3, r3, #8
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b7d      	ldr	r3, [pc, #500]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c6:	4b7a      	ldr	r3, [pc, #488]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a79      	ldr	r2, [pc, #484]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 80017cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b77      	ldr	r3, [pc, #476]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017de:	4b74      	ldr	r3, [pc, #464]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a73      	ldr	r2, [pc, #460]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 80017e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b71      	ldr	r3, [pc, #452]	; (80019b0 <MX_GPIO_Init+0x2d8>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2110      	movs	r1, #16
 80017fa:	486e      	ldr	r0, [pc, #440]	; (80019b4 <MX_GPIO_Init+0x2dc>)
 80017fc:	f003 fd6c 	bl	80052d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8001800:	2200      	movs	r2, #0
 8001802:	f244 012f 	movw	r1, #16431	; 0x402f
 8001806:	486c      	ldr	r0, [pc, #432]	; (80019b8 <MX_GPIO_Init+0x2e0>)
 8001808:	f003 fd66 	bl	80052d8 <HAL_GPIO_WritePin>
                          |OUT0_1V8_Pin|OUT2_1V8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	f241 1150 	movw	r1, #4432	; 0x1150
 8001812:	486a      	ldr	r0, [pc, #424]	; (80019bc <MX_GPIO_Init+0x2e4>)
 8001814:	f003 fd60 	bl	80052d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MCU_CTRL2_Pin|MCU_CTRL1_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	2103      	movs	r1, #3
 800181c:	4868      	ldr	r0, [pc, #416]	; (80019c0 <MX_GPIO_Init+0x2e8>)
 800181e:	f003 fd5b 	bl	80052d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8001822:	2200      	movs	r2, #0
 8001824:	f243 013c 	movw	r1, #12348	; 0x303c
 8001828:	4866      	ldr	r0, [pc, #408]	; (80019c4 <MX_GPIO_Init+0x2ec>)
 800182a:	f003 fd55 	bl	80052d8 <HAL_GPIO_WritePin>
                          |BTN4_Pin|BTN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	f241 0104 	movw	r1, #4100	; 0x1004
 8001834:	4864      	ldr	r0, [pc, #400]	; (80019c8 <MX_GPIO_Init+0x2f0>)
 8001836:	f003 fd4f 	bl	80052d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001840:	4862      	ldr	r0, [pc, #392]	; (80019cc <MX_GPIO_Init+0x2f4>)
 8001842:	f003 fd49 	bl	80052d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	211b      	movs	r1, #27
 800184a:	4861      	ldr	r0, [pc, #388]	; (80019d0 <MX_GPIO_Init+0x2f8>)
 800184c:	f003 fd44 	bl	80052d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_SS_Pin;
 8001850:	2310      	movs	r3, #16
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	2301      	movs	r3, #1
 8001856:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800185c:	2302      	movs	r3, #2
 800185e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_SS_GPIO_Port, &GPIO_InitStruct);
 8001860:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001864:	4619      	mov	r1, r3
 8001866:	4853      	ldr	r0, [pc, #332]	; (80019b4 <MX_GPIO_Init+0x2dc>)
 8001868:	f003 fb74 	bl	8004f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT11_Pin */
  GPIO_InitStruct.Pin = UI_INPUT11_Pin;
 800186c:	2308      	movs	r3, #8
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001870:	2300      	movs	r3, #0
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT11_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187c:	4619      	mov	r1, r3
 800187e:	484d      	ldr	r0, [pc, #308]	; (80019b4 <MX_GPIO_Init+0x2dc>)
 8001880:	f003 fb68 	bl	8004f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_1V8_Pin OUT1_1V8_Pin OUT1_OD_Pin OUT0_OD_Pin
                           OUT0_1V8_Pin OUT2_1V8_Pin */
  GPIO_InitStruct.Pin = OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8001884:	f244 032f 	movw	r3, #16431	; 0x402f
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |OUT0_1V8_Pin|OUT2_1V8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189a:	4619      	mov	r1, r3
 800189c:	4846      	ldr	r0, [pc, #280]	; (80019b8 <MX_GPIO_Init+0x2e0>)
 800189e:	f003 fb59 	bl	8004f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT0_Pin */
  GPIO_InitStruct.Pin = UI_INPUT0_Pin;
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a6:	2300      	movs	r3, #0
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT0_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b2:	4619      	mov	r1, r3
 80018b4:	4845      	ldr	r0, [pc, #276]	; (80019cc <MX_GPIO_Init+0x2f4>)
 80018b6:	f003 fb4d 	bl	8004f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_CONFIG_Pin OUT1_CONFIG_Pin OUT2_CONFIG_Pin MCU_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin;
 80018ba:	f241 1350 	movw	r3, #4432	; 0x1150
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d0:	4619      	mov	r1, r3
 80018d2:	483a      	ldr	r0, [pc, #232]	; (80019bc <MX_GPIO_Init+0x2e4>)
 80018d4:	f003 fb3e 	bl	8004f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin */
  GPIO_InitStruct.Pin = DWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin;
 80018d8:	23e0      	movs	r3, #224	; 0xe0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018dc:	4b3d      	ldr	r3, [pc, #244]	; (80019d4 <MX_GPIO_Init+0x2fc>)
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80018e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e8:	4619      	mov	r1, r3
 80018ea:	4835      	ldr	r0, [pc, #212]	; (80019c0 <MX_GPIO_Init+0x2e8>)
 80018ec:	f003 fb32 	bl	8004f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT1_Pin */
  GPIO_InitStruct.Pin = UI_INPUT1_Pin;
 80018f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f6:	2300      	movs	r3, #0
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT1_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001902:	4619      	mov	r1, r3
 8001904:	4834      	ldr	r0, [pc, #208]	; (80019d8 <MX_GPIO_Init+0x300>)
 8001906:	f003 fb25 	bl	8004f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACK_BTN_Pin */
  GPIO_InitStruct.Pin = BACK_BTN_Pin;
 800190a:	2310      	movs	r3, #16
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800190e:	4b33      	ldr	r3, [pc, #204]	; (80019dc <MX_GPIO_Init+0x304>)
 8001910:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BACK_BTN_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800191a:	4619      	mov	r1, r3
 800191c:	4828      	ldr	r0, [pc, #160]	; (80019c0 <MX_GPIO_Init+0x2e8>)
 800191e:	f003 fb19 	bl	8004f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_INPUT2_Pin UI_INPUT10_Pin UI_INPUT5_Pin UI_INPUT9_Pin
                           UI_INPUT4_Pin UI_INPUT3_Pin UI_INPUT7_Pin UI_INPUT8_Pin
                           UI_INPUT6_Pin */
  GPIO_InitStruct.Pin = UI_INPUT2_Pin|UI_INPUT10_Pin|UI_INPUT5_Pin|UI_INPUT9_Pin
 8001922:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |UI_INPUT4_Pin|UI_INPUT3_Pin|UI_INPUT7_Pin|UI_INPUT8_Pin
                          |UI_INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001928:	2300      	movs	r3, #0
 800192a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001934:	4619      	mov	r1, r3
 8001936:	482a      	ldr	r0, [pc, #168]	; (80019e0 <MX_GPIO_Init+0x308>)
 8001938:	f003 fb0c 	bl	8004f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL2_Pin MCU_CTRL1_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL2_Pin|MCU_CTRL1_Pin;
 800193c:	2303      	movs	r3, #3
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001940:	2301      	movs	r3, #1
 8001942:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001948:	2300      	movs	r3, #0
 800194a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800194c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001950:	4619      	mov	r1, r3
 8001952:	481b      	ldr	r0, [pc, #108]	; (80019c0 <MX_GPIO_Init+0x2e8>)
 8001954:	f003 fafe 	bl	8004f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8001958:	f243 033c 	movw	r3, #12348	; 0x303c
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BTN4_Pin|BTN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800196a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800196e:	4619      	mov	r1, r3
 8001970:	4814      	ldr	r0, [pc, #80]	; (80019c4 <MX_GPIO_Init+0x2ec>)
 8001972:	f003 faef 	bl	8004f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_CONFIG_Pin FRONT_LED_CTRL_Pin */
  GPIO_InitStruct.Pin = OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin;
 8001976:	f241 0304 	movw	r3, #4100	; 0x1004
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198c:	4619      	mov	r1, r3
 800198e:	480e      	ldr	r0, [pc, #56]	; (80019c8 <MX_GPIO_Init+0x2f0>)
 8001990:	f003 fae0 	bl	8004f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ZION_PWR_EN_Pin EDL_EN_Pin SPARE_SW_EN_Pin */
  GPIO_InitStruct.Pin = ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin;
 8001994:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199a:	2301      	movs	r3, #1
 800199c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019aa:	4619      	mov	r1, r3
 80019ac:	e01a      	b.n	80019e4 <MX_GPIO_Init+0x30c>
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40021800 	.word	0x40021800
 80019bc:	40022000 	.word	0x40022000
 80019c0:	40022800 	.word	0x40022800
 80019c4:	40021400 	.word	0x40021400
 80019c8:	40021c00 	.word	0x40021c00
 80019cc:	40020400 	.word	0x40020400
 80019d0:	40022400 	.word	0x40022400
 80019d4:	10110000 	.word	0x10110000
 80019d8:	40020800 	.word	0x40020800
 80019dc:	10210000 	.word	0x10210000
 80019e0:	40020c00 	.word	0x40020c00
 80019e4:	480a      	ldr	r0, [pc, #40]	; (8001a10 <MX_GPIO_Init+0x338>)
 80019e6:	f003 fab5 	bl	8004f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL0_Pin UART_MUX_CTRL_Pin LCD_EXTMODE_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin;
 80019ea:	231b      	movs	r3, #27
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80019fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fe:	4619      	mov	r1, r3
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <MX_GPIO_Init+0x33c>)
 8001a02:	f003 faa7 	bl	8004f54 <HAL_GPIO_Init>

}
 8001a06:	bf00      	nop
 8001a08:	3740      	adds	r7, #64	; 0x40
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40020400 	.word	0x40020400
 8001a14:	40022400 	.word	0x40022400

08001a18 <outputGPIOBufInitialization>:

/* USER CODE BEGIN 4 */
void outputGPIOBufInitialization(){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	memset(gpioOutputState,0,sizeof(gpioOutputState));
 8001a1c:	220e      	movs	r2, #14
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <outputGPIOBufInitialization+0x14>)
 8001a22:	f00a fdd0 	bl	800c5c6 <memset>
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20007c74 	.word	0x20007c74

08001a30 <uartTransmitChar>:
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
		gpioOutputState[outputGPIOs.odOut_1] = state;
	}
}

void uartTransmitChar(char *message, int uart){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b0b6      	sub	sp, #216	; 0xd8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
	char uart_buf[200];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, message);
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f00b fbdf 	bl	800d204 <siprintf>
 8001a46:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	if (uart == 7){
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b07      	cmp	r3, #7
 8001a4e:	d108      	bne.n	8001a62 <uartTransmitChar+0x32>
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
 8001a50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	f107 010c 	add.w	r1, r7, #12
 8001a5a:	2364      	movs	r3, #100	; 0x64
 8001a5c:	4803      	ldr	r0, [pc, #12]	; (8001a6c <uartTransmitChar+0x3c>)
 8001a5e:	f007 f8a3 	bl	8008ba8 <HAL_UART_Transmit>
	}
}
 8001a62:	bf00      	nop
 8001a64:	37d8      	adds	r7, #216	; 0xd8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20004cd4 	.word	0x20004cd4

08001a70 <uartTransmitInt>:
void uartTransmitInt(uint16_t *number, int uart){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b098      	sub	sp, #96	; 0x60
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
	char uart_buf[80];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, "0x%x\r\n", number);
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	4909      	ldr	r1, [pc, #36]	; (8001aa8 <uartTransmitInt+0x38>)
 8001a82:	4618      	mov	r0, r3
 8001a84:	f00b fbbe 	bl	800d204 <siprintf>
 8001a88:	65f8      	str	r0, [r7, #92]	; 0x5c
	if (uart == 7){
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b07      	cmp	r3, #7
 8001a8e:	d107      	bne.n	8001aa0 <uartTransmitInt+0x30>
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
 8001a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	f107 010c 	add.w	r1, r7, #12
 8001a98:	2364      	movs	r3, #100	; 0x64
 8001a9a:	4804      	ldr	r0, [pc, #16]	; (8001aac <uartTransmitInt+0x3c>)
 8001a9c:	f007 f884 	bl	8008ba8 <HAL_UART_Transmit>
	}

}
 8001aa0:	bf00      	nop
 8001aa2:	3760      	adds	r7, #96	; 0x60
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	0800feec 	.word	0x0800feec
 8001aac:	20004cd4 	.word	0x20004cd4

08001ab0 <readI2CRegister>:
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}

}

uint8_t * readI2CRegister(uint8_t address, uint8_t reg, int bytes, int i2CBank){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	60ba      	str	r2, [r7, #8]
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4603      	mov	r3, r0
 8001abc:	73fb      	strb	r3, [r7, #15]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	73bb      	strb	r3, [r7, #14]
	static uint8_t buf[20];
	HAL_StatusTypeDef ret;
	buf[0]=reg;
 8001ac2:	4a4f      	ldr	r2, [pc, #316]	; (8001c00 <readI2CRegister+0x150>)
 8001ac4:	7bbb      	ldrb	r3, [r7, #14]
 8001ac6:	7013      	strb	r3, [r2, #0]
  	if(i2CBank == 1){
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d10c      	bne.n	8001ae8 <readI2CRegister+0x38>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	b299      	uxth	r1, r3
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2301      	movs	r3, #1
 8001ada:	4a49      	ldr	r2, [pc, #292]	; (8001c00 <readI2CRegister+0x150>)
 8001adc:	4849      	ldr	r0, [pc, #292]	; (8001c04 <readI2CRegister+0x154>)
 8001ade:	f003 fcbf 	bl	8005460 <HAL_I2C_Master_Transmit>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	75fb      	strb	r3, [r7, #23]
 8001ae6:	e02e      	b.n	8001b46 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 2){
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d10c      	bne.n	8001b08 <readI2CRegister+0x58>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	b299      	uxth	r1, r3
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2301      	movs	r3, #1
 8001afa:	4a41      	ldr	r2, [pc, #260]	; (8001c00 <readI2CRegister+0x150>)
 8001afc:	4842      	ldr	r0, [pc, #264]	; (8001c08 <readI2CRegister+0x158>)
 8001afe:	f003 fcaf 	bl	8005460 <HAL_I2C_Master_Transmit>
 8001b02:	4603      	mov	r3, r0
 8001b04:	75fb      	strb	r3, [r7, #23]
 8001b06:	e01e      	b.n	8001b46 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 3){
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d10c      	bne.n	8001b28 <readI2CRegister+0x78>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, 1, HAL_MAX_DELAY);
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	b299      	uxth	r1, r3
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	4a39      	ldr	r2, [pc, #228]	; (8001c00 <readI2CRegister+0x150>)
 8001b1c:	483b      	ldr	r0, [pc, #236]	; (8001c0c <readI2CRegister+0x15c>)
 8001b1e:	f003 fc9f 	bl	8005460 <HAL_I2C_Master_Transmit>
 8001b22:	4603      	mov	r3, r0
 8001b24:	75fb      	strb	r3, [r7, #23]
 8001b26:	e00e      	b.n	8001b46 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 4){
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d10b      	bne.n	8001b46 <readI2CRegister+0x96>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, 1, HAL_MAX_DELAY);
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	b299      	uxth	r1, r3
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2301      	movs	r3, #1
 8001b3a:	4a31      	ldr	r2, [pc, #196]	; (8001c00 <readI2CRegister+0x150>)
 8001b3c:	4834      	ldr	r0, [pc, #208]	; (8001c10 <readI2CRegister+0x160>)
 8001b3e:	f003 fc8f 	bl	8005460 <HAL_I2C_Master_Transmit>
 8001b42:	4603      	mov	r3, r0
 8001b44:	75fb      	strb	r3, [r7, #23]
  	}
	  if ( ret != HAL_OK ) {
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <readI2CRegister+0xa0>
	          return 0xfe;
 8001b4c:	23fe      	movs	r3, #254	; 0xfe
 8001b4e:	e052      	b.n	8001bf6 <readI2CRegister+0x146>
	        }
	  else {
		  if(i2CBank == 1){
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d10e      	bne.n	8001b74 <readI2CRegister+0xc4>
				ret = HAL_I2C_Master_Receive(&hi2c1, address, buf, bytes, HAL_MAX_DELAY);
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	b299      	uxth	r1, r3
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	4613      	mov	r3, r2
 8001b66:	4a26      	ldr	r2, [pc, #152]	; (8001c00 <readI2CRegister+0x150>)
 8001b68:	4826      	ldr	r0, [pc, #152]	; (8001c04 <readI2CRegister+0x154>)
 8001b6a:	f003 fd6d 	bl	8005648 <HAL_I2C_Master_Receive>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	75fb      	strb	r3, [r7, #23]
 8001b72:	e034      	b.n	8001bde <readI2CRegister+0x12e>
			}
			else if(i2CBank == 2){
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d10e      	bne.n	8001b98 <readI2CRegister+0xe8>
				ret = HAL_I2C_Master_Receive(&hi2c2, address, buf, bytes, HAL_MAX_DELAY);
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	b299      	uxth	r1, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <readI2CRegister+0x150>)
 8001b8c:	481e      	ldr	r0, [pc, #120]	; (8001c08 <readI2CRegister+0x158>)
 8001b8e:	f003 fd5b 	bl	8005648 <HAL_I2C_Master_Receive>
 8001b92:	4603      	mov	r3, r0
 8001b94:	75fb      	strb	r3, [r7, #23]
 8001b96:	e022      	b.n	8001bde <readI2CRegister+0x12e>
			}
			else if(i2CBank == 3){
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d10e      	bne.n	8001bbc <readI2CRegister+0x10c>
				ret = HAL_I2C_Master_Receive(&hi2c3, address, buf, bytes, HAL_MAX_DELAY);
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	b299      	uxth	r1, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	4613      	mov	r3, r2
 8001bae:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <readI2CRegister+0x150>)
 8001bb0:	4816      	ldr	r0, [pc, #88]	; (8001c0c <readI2CRegister+0x15c>)
 8001bb2:	f003 fd49 	bl	8005648 <HAL_I2C_Master_Receive>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	75fb      	strb	r3, [r7, #23]
 8001bba:	e010      	b.n	8001bde <readI2CRegister+0x12e>
			}
			else if(i2CBank == 4){
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d10d      	bne.n	8001bde <readI2CRegister+0x12e>
				ret = HAL_I2C_Master_Receive(&hi2c4, address, buf, bytes, HAL_MAX_DELAY);
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	b299      	uxth	r1, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <readI2CRegister+0x150>)
 8001bd4:	480e      	ldr	r0, [pc, #56]	; (8001c10 <readI2CRegister+0x160>)
 8001bd6:	f003 fd37 	bl	8005648 <HAL_I2C_Master_Receive>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	75fb      	strb	r3, [r7, #23]
			}
		  if ( ret != HAL_OK ) {
 8001bde:	7dfb      	ldrb	r3, [r7, #23]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <readI2CRegister+0x138>
		          return 0xfe;
 8001be4:	23fe      	movs	r3, #254	; 0xfe
 8001be6:	e006      	b.n	8001bf6 <readI2CRegister+0x146>
		        }
		  else{
			  uartTransmitInt(buf[0],7);
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <readI2CRegister+0x150>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2107      	movs	r1, #7
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ff3e 	bl	8001a70 <uartTransmitInt>
			  return buf;
 8001bf4:	4b02      	ldr	r3, [pc, #8]	; (8001c00 <readI2CRegister+0x150>)
		  }
}
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200002b8 	.word	0x200002b8
 8001c04:	20004e4c 	.word	0x20004e4c
 8001c08:	2000529c 	.word	0x2000529c
 8001c0c:	20004c3c 	.word	0x20004c3c
 8001c10:	20004c88 	.word	0x20004c88

08001c14 <writeI2CRegister>:
int writeI2CRegister(uint8_t address, uint8_t reg, uint8_t * bytes, int numBytes, int i2CBank){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08e      	sub	sp, #56	; 0x38
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60ba      	str	r2, [r7, #8]
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	4603      	mov	r3, r0
 8001c20:	73fb      	strb	r3, [r7, #15]
 8001c22:	460b      	mov	r3, r1
 8001c24:	73bb      	strb	r3, [r7, #14]
	  	uint8_t buf[20];
	  	HAL_StatusTypeDef ret;
	  	buf[0]=reg;
 8001c26:	7bbb      	ldrb	r3, [r7, #14]
 8001c28:	753b      	strb	r3, [r7, #20]
	  	int x = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c32:	e00d      	b.n	8001c50 <writeI2CRegister+0x3c>
	  		buf[1+x] = bytes[x];
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	441a      	add	r2, r3
 8001c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	7812      	ldrb	r2, [r2, #0]
 8001c40:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001c44:	440b      	add	r3, r1
 8001c46:	f803 2c1c 	strb.w	r2, [r3, #-28]
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 8001c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d9ee      	bls.n	8001c34 <writeI2CRegister+0x20>
	  	}
	  	if(i2CBank == 1){
 8001c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d112      	bne.n	8001c82 <writeI2CRegister+0x6e>
	  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, numBytes+1, HAL_MAX_DELAY);
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	b299      	uxth	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	3301      	adds	r3, #1
 8001c66:	b298      	uxth	r0, r3
 8001c68:	f107 0214 	add.w	r2, r7, #20
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	4603      	mov	r3, r0
 8001c74:	4829      	ldr	r0, [pc, #164]	; (8001d1c <writeI2CRegister+0x108>)
 8001c76:	f003 fbf3 	bl	8005460 <HAL_I2C_Master_Transmit>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001c80:	e040      	b.n	8001d04 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 2){
 8001c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d112      	bne.n	8001cae <writeI2CRegister+0x9a>
	  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, numBytes+1, HAL_MAX_DELAY);
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	b299      	uxth	r1, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3301      	adds	r3, #1
 8001c92:	b298      	uxth	r0, r3
 8001c94:	f107 0214 	add.w	r2, r7, #20
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	481f      	ldr	r0, [pc, #124]	; (8001d20 <writeI2CRegister+0x10c>)
 8001ca2:	f003 fbdd 	bl	8005460 <HAL_I2C_Master_Transmit>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001cac:	e02a      	b.n	8001d04 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 3){
 8001cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d112      	bne.n	8001cda <writeI2CRegister+0xc6>
	  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, numBytes+1, HAL_MAX_DELAY);
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	b299      	uxth	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	b298      	uxth	r0, r3
 8001cc0:	f107 0214 	add.w	r2, r7, #20
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4815      	ldr	r0, [pc, #84]	; (8001d24 <writeI2CRegister+0x110>)
 8001cce:	f003 fbc7 	bl	8005460 <HAL_I2C_Master_Transmit>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001cd8:	e014      	b.n	8001d04 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 4){
 8001cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d111      	bne.n	8001d04 <writeI2CRegister+0xf0>
	  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, numBytes+1, HAL_MAX_DELAY);
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	b299      	uxth	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b298      	uxth	r0, r3
 8001cec:	f107 0214 	add.w	r2, r7, #20
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	480b      	ldr	r0, [pc, #44]	; (8001d28 <writeI2CRegister+0x114>)
 8001cfa:	f003 fbb1 	bl	8005460 <HAL_I2C_Master_Transmit>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  	}
	  	if ( ret != HAL_OK ) {
 8001d04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <writeI2CRegister+0xfc>
	  	          return 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e000      	b.n	8001d12 <writeI2CRegister+0xfe>
	  	        }
	  	else {
	  		  return 1;
 8001d10:	2301      	movs	r3, #1
	  }
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3730      	adds	r7, #48	; 0x30
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20004e4c 	.word	0x20004e4c
 8001d20:	2000529c 	.word	0x2000529c
 8001d24:	20004c3c 	.word	0x20004c3c
 8001d28:	20004c88 	.word	0x20004c88

08001d2c <configureLEDDriver>:
void configureLEDDriver(){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af02      	add	r7, sp, #8
	uint8_t currentMultiplier = 0b00000001;
 8001d32:	2301      	movs	r3, #1
 8001d34:	71fb      	strb	r3, [r7, #7]
	static uint8_t* clear[1];
	clear[0]=0x0;
 8001d36:	4b41      	ldr	r3, [pc, #260]	; (8001e3c <configureLEDDriver+0x110>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
	uint8_t * buf;
	//reduce the current multiplier to set brightness lower. See if this works. If not, we can work with PWM.
	writeI2CRegister(LED.address, LED.iref_reg, currentMultiplier,1,LED.i2cBank);
 8001d3c:	4b40      	ldr	r3, [pc, #256]	; (8001e40 <configureLEDDriver+0x114>)
 8001d3e:	7818      	ldrb	r0, [r3, #0]
 8001d40:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <configureLEDDriver+0x114>)
 8001d42:	7999      	ldrb	r1, [r3, #6]
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <configureLEDDriver+0x114>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f7ff ff60 	bl	8001c14 <writeI2CRegister>
	buf = readI2CRegister(LED.address,LED.iref_reg,1,LED.i2cBank);
 8001d54:	4b3a      	ldr	r3, [pc, #232]	; (8001e40 <configureLEDDriver+0x114>)
 8001d56:	7818      	ldrb	r0, [r3, #0]
 8001d58:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <configureLEDDriver+0x114>)
 8001d5a:	7999      	ldrb	r1, [r3, #6]
 8001d5c:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <configureLEDDriver+0x114>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f7ff fea5 	bl	8001ab0 <readI2CRegister>
 8001d66:	6038      	str	r0, [r7, #0]
	uartTransmitInt(buf[0],7);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2107      	movs	r1, #7
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fe7e 	bl	8001a70 <uartTransmitInt>
	//Turn on oscillator. Must be turned on before LED driver functions
	writeI2CRegister(LED.address,LED.mode0_reg,LED.mode0_oscon_value,1,LED.i2cBank);
 8001d74:	4b32      	ldr	r3, [pc, #200]	; (8001e40 <configureLEDDriver+0x114>)
 8001d76:	7818      	ldrb	r0, [r3, #0]
 8001d78:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <configureLEDDriver+0x114>)
 8001d7a:	7859      	ldrb	r1, [r3, #1]
 8001d7c:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <configureLEDDriver+0x114>)
 8001d7e:	79db      	ldrb	r3, [r3, #7]
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <configureLEDDriver+0x114>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f7ff ff43 	bl	8001c14 <writeI2CRegister>
	//clear the default state of the led register.
	writeI2CRegister(LED.address,LED.led0_reg,clear,1,LED.i2cBank);
 8001d8e:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <configureLEDDriver+0x114>)
 8001d90:	7818      	ldrb	r0, [r3, #0]
 8001d92:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <configureLEDDriver+0x114>)
 8001d94:	7899      	ldrb	r1, [r3, #2]
 8001d96:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <configureLEDDriver+0x114>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	4a27      	ldr	r2, [pc, #156]	; (8001e3c <configureLEDDriver+0x110>)
 8001da0:	f7ff ff38 	bl	8001c14 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led1_reg,clear,1,LED.i2cBank);
 8001da4:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <configureLEDDriver+0x114>)
 8001da6:	7818      	ldrb	r0, [r3, #0]
 8001da8:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <configureLEDDriver+0x114>)
 8001daa:	78d9      	ldrb	r1, [r3, #3]
 8001dac:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <configureLEDDriver+0x114>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2301      	movs	r3, #1
 8001db4:	4a21      	ldr	r2, [pc, #132]	; (8001e3c <configureLEDDriver+0x110>)
 8001db6:	f7ff ff2d 	bl	8001c14 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led2_reg,clear,1,LED.i2cBank);
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <configureLEDDriver+0x114>)
 8001dbc:	7818      	ldrb	r0, [r3, #0]
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <configureLEDDriver+0x114>)
 8001dc0:	7919      	ldrb	r1, [r3, #4]
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <configureLEDDriver+0x114>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2301      	movs	r3, #1
 8001dca:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <configureLEDDriver+0x110>)
 8001dcc:	f7ff ff22 	bl	8001c14 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led3_reg,clear,1,LED.i2cBank);
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <configureLEDDriver+0x114>)
 8001dd2:	7818      	ldrb	r0, [r3, #0]
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <configureLEDDriver+0x114>)
 8001dd6:	7959      	ldrb	r1, [r3, #5]
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <configureLEDDriver+0x114>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	4a16      	ldr	r2, [pc, #88]	; (8001e3c <configureLEDDriver+0x110>)
 8001de2:	f7ff ff17 	bl	8001c14 <writeI2CRegister>
	//set the PWM for the tri-color led. Thing is bright so PWM is very low.
	writeI2CRegister(LED.address,LED.led7_pwm,LED.pwm,1,LED.i2cBank);
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <configureLEDDriver+0x114>)
 8001de8:	7818      	ldrb	r0, [r3, #0]
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <configureLEDDriver+0x114>)
 8001dec:	7a19      	ldrb	r1, [r3, #8]
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <configureLEDDriver+0x114>)
 8001df0:	7adb      	ldrb	r3, [r3, #11]
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <configureLEDDriver+0x114>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	f7ff ff0a 	bl	8001c14 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led8_pwm,LED.pwm,1,LED.i2cBank);
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <configureLEDDriver+0x114>)
 8001e02:	7818      	ldrb	r0, [r3, #0]
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <configureLEDDriver+0x114>)
 8001e06:	7a59      	ldrb	r1, [r3, #9]
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <configureLEDDriver+0x114>)
 8001e0a:	7adb      	ldrb	r3, [r3, #11]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <configureLEDDriver+0x114>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2301      	movs	r3, #1
 8001e16:	f7ff fefd 	bl	8001c14 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led9_pwm,LED.pwm,1,LED.i2cBank);
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <configureLEDDriver+0x114>)
 8001e1c:	7818      	ldrb	r0, [r3, #0]
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <configureLEDDriver+0x114>)
 8001e20:	7a99      	ldrb	r1, [r3, #10]
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <configureLEDDriver+0x114>)
 8001e24:	7adb      	ldrb	r3, [r3, #11]
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <configureLEDDriver+0x114>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	2301      	movs	r3, #1
 8001e30:	f7ff fef0 	bl	8001c14 <writeI2CRegister>
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	200002cc 	.word	0x200002cc
 8001e40:	20000004 	.word	0x20000004

08001e44 <setErrorLED>:

//Configures specified LED to either fully on or off.
void setErrorLED(int led,_Bool change){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
	const uint8_t led0 = 0b00000001;
 8001e50:	2301      	movs	r3, #1
 8001e52:	76bb      	strb	r3, [r7, #26]
	const uint8_t led1 = 0b00000100;
 8001e54:	2304      	movs	r3, #4
 8001e56:	767b      	strb	r3, [r7, #25]
	const uint8_t led2 = 0b00010000;
 8001e58:	2310      	movs	r3, #16
 8001e5a:	763b      	strb	r3, [r7, #24]
	const uint8_t led3 = 0b01000000;
 8001e5c:	2340      	movs	r3, #64	; 0x40
 8001e5e:	75fb      	strb	r3, [r7, #23]
	const uint8_t led0_pwm = 0b00000010;
 8001e60:	2302      	movs	r3, #2
 8001e62:	75bb      	strb	r3, [r7, #22]
	const uint8_t led1_pwm = 0b00001000;
 8001e64:	2308      	movs	r3, #8
 8001e66:	757b      	strb	r3, [r7, #21]
	const uint8_t led2_pwm = 0b00100000;
 8001e68:	2320      	movs	r3, #32
 8001e6a:	753b      	strb	r3, [r7, #20]
	const uint8_t led3_pwm = 0b10000000;
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	74fb      	strb	r3, [r7, #19]
  	uint8_t* ledRegisterContents;
  	int ledBitNumber;
  	uint8_t ledRegister;
	if(led <4){
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	dc05      	bgt.n	8001e82 <setErrorLED+0x3e>
		ledRegister = LED.led0_reg;
 8001e76:	4b80      	ldr	r3, [pc, #512]	; (8002078 <setErrorLED+0x234>)
 8001e78:	789b      	ldrb	r3, [r3, #2]
 8001e7a:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	e019      	b.n	8001eb6 <setErrorLED+0x72>
	}
	else if(led <8){
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b07      	cmp	r3, #7
 8001e86:	dc06      	bgt.n	8001e96 <setErrorLED+0x52>
		ledRegister = LED.led1_reg;
 8001e88:	4b7b      	ldr	r3, [pc, #492]	; (8002078 <setErrorLED+0x234>)
 8001e8a:	78db      	ldrb	r3, [r3, #3]
 8001e8c:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-4;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3b04      	subs	r3, #4
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	e00f      	b.n	8001eb6 <setErrorLED+0x72>
	}
	else if(led <12){
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b0b      	cmp	r3, #11
 8001e9a:	dc06      	bgt.n	8001eaa <setErrorLED+0x66>
		ledRegister = LED.led2_reg;
 8001e9c:	4b76      	ldr	r3, [pc, #472]	; (8002078 <setErrorLED+0x234>)
 8001e9e:	791b      	ldrb	r3, [r3, #4]
 8001ea0:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-8;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3b08      	subs	r3, #8
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	e005      	b.n	8001eb6 <setErrorLED+0x72>
	}
	else{ //put this in to humor those who want to try using unconnected LEDs
		ledRegister = LED.led3_reg;
 8001eaa:	4b73      	ldr	r3, [pc, #460]	; (8002078 <setErrorLED+0x234>)
 8001eac:	795b      	ldrb	r3, [r3, #5]
 8001eae:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-12;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b0c      	subs	r3, #12
 8001eb4:	61fb      	str	r3, [r7, #28]
	}
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8001eb6:	4b70      	ldr	r3, [pc, #448]	; (8002078 <setErrorLED+0x234>)
 8001eb8:	7818      	ldrb	r0, [r3, #0]
 8001eba:	4b6f      	ldr	r3, [pc, #444]	; (8002078 <setErrorLED+0x234>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	7ef9      	ldrb	r1, [r7, #27]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f7ff fdf5 	bl	8001ab0 <readI2CRegister>
 8001ec6:	60f8      	str	r0, [r7, #12]
	switch(ledBitNumber){
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	f200 80bd 	bhi.w	800204a <setErrorLED+0x206>
 8001ed0:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <setErrorLED+0x94>)
 8001ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed6:	bf00      	nop
 8001ed8:	08001ee9 	.word	0x08001ee9
 8001edc:	08001f4f 	.word	0x08001f4f
 8001ee0:	08001fb5 	.word	0x08001fb5
 8001ee4:	08001fe5 	.word	0x08001fe5

	case 0:
		if(change){
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d012      	beq.n	8001f14 <setErrorLED+0xd0>
			if(led == 8){
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d107      	bne.n	8001f04 <setErrorLED+0xc0>
				ledRegisterContents[0] |= led0_pwm;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	781a      	ldrb	r2, [r3, #0]
 8001ef8:	7dbb      	ldrb	r3, [r7, #22]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led0;
			}
		}
		break;
 8001f02:	e0a2      	b.n	800204a <setErrorLED+0x206>
				ledRegisterContents[0] |= led0;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	7ebb      	ldrb	r3, [r7, #26]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	701a      	strb	r2, [r3, #0]
		break;
 8001f12:	e09a      	b.n	800204a <setErrorLED+0x206>
			if(led == 8){
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d10c      	bne.n	8001f34 <setErrorLED+0xf0>
				ledRegisterContents[0] &= ~led0_pwm;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b25a      	sxtb	r2, r3
 8001f20:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	b25b      	sxtb	r3, r3
 8001f28:	4013      	ands	r3, r2
 8001f2a:	b25b      	sxtb	r3, r3
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	701a      	strb	r2, [r3, #0]
		break;
 8001f32:	e08a      	b.n	800204a <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led0;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b25a      	sxtb	r2, r3
 8001f3a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	b25b      	sxtb	r3, r3
 8001f42:	4013      	ands	r3, r2
 8001f44:	b25b      	sxtb	r3, r3
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	701a      	strb	r2, [r3, #0]
		break;
 8001f4c:	e07d      	b.n	800204a <setErrorLED+0x206>

	case 1:
		if(change){
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d012      	beq.n	8001f7a <setErrorLED+0x136>
			if(led == 9){
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b09      	cmp	r3, #9
 8001f58:	d107      	bne.n	8001f6a <setErrorLED+0x126>
				ledRegisterContents[0] |= led1_pwm;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	781a      	ldrb	r2, [r3, #0]
 8001f5e:	7d7b      	ldrb	r3, [r7, #21]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led1;
			}
		}
		break;
 8001f68:	e06f      	b.n	800204a <setErrorLED+0x206>
				ledRegisterContents[0] |= led1;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	781a      	ldrb	r2, [r3, #0]
 8001f6e:	7e7b      	ldrb	r3, [r7, #25]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	701a      	strb	r2, [r3, #0]
		break;
 8001f78:	e067      	b.n	800204a <setErrorLED+0x206>
			if(led == 9){
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b09      	cmp	r3, #9
 8001f7e:	d10c      	bne.n	8001f9a <setErrorLED+0x156>
				ledRegisterContents[0] &= ~led1_pwm;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b25a      	sxtb	r2, r3
 8001f86:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	b25b      	sxtb	r3, r3
 8001f8e:	4013      	ands	r3, r2
 8001f90:	b25b      	sxtb	r3, r3
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	701a      	strb	r2, [r3, #0]
		break;
 8001f98:	e057      	b.n	800204a <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led1;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	b25a      	sxtb	r2, r3
 8001fa0:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	b25b      	sxtb	r3, r3
 8001fa8:	4013      	ands	r3, r2
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	701a      	strb	r2, [r3, #0]
		break;
 8001fb2:	e04a      	b.n	800204a <setErrorLED+0x206>

	case 2:
		if(change){
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <setErrorLED+0x186>
				ledRegisterContents[0] |= led2;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	781a      	ldrb	r2, [r3, #0]
 8001fbe:	7e3b      	ldrb	r3, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	701a      	strb	r2, [r3, #0]
		}
		else{

			ledRegisterContents[0] &= ~led2;
		}
		break;
 8001fc8:	e03f      	b.n	800204a <setErrorLED+0x206>
			ledRegisterContents[0] &= ~led2;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b25a      	sxtb	r2, r3
 8001fd0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	b25b      	sxtb	r3, r3
 8001fd8:	4013      	ands	r3, r2
 8001fda:	b25b      	sxtb	r3, r3
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	701a      	strb	r2, [r3, #0]
		break;
 8001fe2:	e032      	b.n	800204a <setErrorLED+0x206>

	case 3:
		if(change){
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d012      	beq.n	8002010 <setErrorLED+0x1cc>
			if(led == 7){
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b07      	cmp	r3, #7
 8001fee:	d107      	bne.n	8002000 <setErrorLED+0x1bc>
				ledRegisterContents[0] |= led3_pwm;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	781a      	ldrb	r2, [r3, #0]
 8001ff4:	7cfb      	ldrb	r3, [r7, #19]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led3;
			}
		}
		break;
 8001ffe:	e023      	b.n	8002048 <setErrorLED+0x204>
				ledRegisterContents[0] |= led3;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	781a      	ldrb	r2, [r3, #0]
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	4313      	orrs	r3, r2
 8002008:	b2da      	uxtb	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	701a      	strb	r2, [r3, #0]
		break;
 800200e:	e01b      	b.n	8002048 <setErrorLED+0x204>
			if(led == 7){
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b07      	cmp	r3, #7
 8002014:	d10c      	bne.n	8002030 <setErrorLED+0x1ec>
				ledRegisterContents[0] &= ~led3_pwm;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b25a      	sxtb	r2, r3
 800201c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002020:	43db      	mvns	r3, r3
 8002022:	b25b      	sxtb	r3, r3
 8002024:	4013      	ands	r3, r2
 8002026:	b25b      	sxtb	r3, r3
 8002028:	b2da      	uxtb	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	701a      	strb	r2, [r3, #0]
		break;
 800202e:	e00b      	b.n	8002048 <setErrorLED+0x204>
				ledRegisterContents[0] &= ~led3;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b25a      	sxtb	r2, r3
 8002036:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800203a:	43db      	mvns	r3, r3
 800203c:	b25b      	sxtb	r3, r3
 800203e:	4013      	ands	r3, r2
 8002040:	b25b      	sxtb	r3, r3
 8002042:	b2da      	uxtb	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	701a      	strb	r2, [r3, #0]
		break;
 8002048:	bf00      	nop
	}
	writeI2CRegister(LED.address,ledRegister,ledRegisterContents,1,LED.i2cBank);
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <setErrorLED+0x234>)
 800204c:	7818      	ldrb	r0, [r3, #0]
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <setErrorLED+0x234>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	7ef9      	ldrb	r1, [r7, #27]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	2301      	movs	r3, #1
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	f7ff fddb 	bl	8001c14 <writeI2CRegister>
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <setErrorLED+0x234>)
 8002060:	7818      	ldrb	r0, [r3, #0]
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <setErrorLED+0x234>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	7ef9      	ldrb	r1, [r7, #27]
 8002068:	2201      	movs	r2, #1
 800206a:	f7ff fd21 	bl	8001ab0 <readI2CRegister>
 800206e:	60f8      	str	r0, [r7, #12]
}
 8002070:	bf00      	nop
 8002072:	3720      	adds	r7, #32
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000004 	.word	0x20000004

0800207c <getADCValues>:


float* getADCValues(){
 800207c:	b580      	push	{r7, lr}
 800207e:	b09e      	sub	sp, #120	; 0x78
 8002080:	af00      	add	r7, sp, #0
	static float adcValues[20];
	int avgADCCounterValues[20];
	memset(avgADCCounterValues, 0, sizeof(avgADCCounterValues));
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2250      	movs	r2, #80	; 0x50
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f00a fa9c 	bl	800c5c6 <memset>
	int adcChannelCounter,avgCounter,adcIndex;
	int adc1DataRepeat=22;
 800208e:	2316      	movs	r3, #22
 8002090:	66bb      	str	r3, [r7, #104]	; 0x68
	int adc2DataRepeat=8;
 8002092:	2308      	movs	r3, #8
 8002094:	667b      	str	r3, [r7, #100]	; 0x64
	int adc3DataRepeat=12;
 8002096:	230c      	movs	r3, #12
 8002098:	663b      	str	r3, [r7, #96]	; 0x60
	for(adcChannelCounter=0;adcChannelCounter<20;adcChannelCounter++){
 800209a:	2300      	movs	r3, #0
 800209c:	677b      	str	r3, [r7, #116]	; 0x74
 800209e:	e171      	b.n	8002384 <getADCValues+0x308>
		if((adcChannelCounter==Adc.adc0) || (adcChannelCounter==Adc.adc2) || (adcChannelCounter==Adc.adc3)){
 80020a0:	4b97      	ldr	r3, [pc, #604]	; (8002300 <getADCValues+0x284>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d009      	beq.n	80020be <getADCValues+0x42>
 80020aa:	4b95      	ldr	r3, [pc, #596]	; (8002300 <getADCValues+0x284>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d004      	beq.n	80020be <getADCValues+0x42>
 80020b4:	4b92      	ldr	r3, [pc, #584]	; (8002300 <getADCValues+0x284>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d102      	bne.n	80020c4 <getADCValues+0x48>
			adcIndex=0;
 80020be:	2300      	movs	r3, #0
 80020c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020c2:	e071      	b.n	80021a8 <getADCValues+0x12c>
		}
		else if((adcChannelCounter==Adc.adc1) || (adcChannelCounter==Adc.adc14) || (adcChannelCounter==Adc.adc4)){
 80020c4:	4b8e      	ldr	r3, [pc, #568]	; (8002300 <getADCValues+0x284>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d009      	beq.n	80020e2 <getADCValues+0x66>
 80020ce:	4b8c      	ldr	r3, [pc, #560]	; (8002300 <getADCValues+0x284>)
 80020d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d004      	beq.n	80020e2 <getADCValues+0x66>
 80020d8:	4b89      	ldr	r3, [pc, #548]	; (8002300 <getADCValues+0x284>)
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020de:	429a      	cmp	r2, r3
 80020e0:	d102      	bne.n	80020e8 <getADCValues+0x6c>
			adcIndex=2;
 80020e2:	2302      	movs	r3, #2
 80020e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020e6:	e05f      	b.n	80021a8 <getADCValues+0x12c>
		}
		else if((adcChannelCounter==Adc.spareSpiADC) || (adcChannelCounter==Adc.adc15) || (adcChannelCounter==Adc.adc5)){
 80020e8:	4b85      	ldr	r3, [pc, #532]	; (8002300 <getADCValues+0x284>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d009      	beq.n	8002106 <getADCValues+0x8a>
 80020f2:	4b83      	ldr	r3, [pc, #524]	; (8002300 <getADCValues+0x284>)
 80020f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d004      	beq.n	8002106 <getADCValues+0x8a>
 80020fc:	4b80      	ldr	r3, [pc, #512]	; (8002300 <getADCValues+0x284>)
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002102:	429a      	cmp	r2, r3
 8002104:	d102      	bne.n	800210c <getADCValues+0x90>
			adcIndex=4;
 8002106:	2304      	movs	r3, #4
 8002108:	66fb      	str	r3, [r7, #108]	; 0x6c
 800210a:	e04d      	b.n	80021a8 <getADCValues+0x12c>
		}
		else if((adcChannelCounter == Adc.spareUartADC) || (adcChannelCounter==Adc.configADC) || (adcChannelCounter==Adc.adc6)){
 800210c:	4b7c      	ldr	r3, [pc, #496]	; (8002300 <getADCValues+0x284>)
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002112:	429a      	cmp	r2, r3
 8002114:	d009      	beq.n	800212a <getADCValues+0xae>
 8002116:	4b7a      	ldr	r3, [pc, #488]	; (8002300 <getADCValues+0x284>)
 8002118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800211c:	429a      	cmp	r2, r3
 800211e:	d004      	beq.n	800212a <getADCValues+0xae>
 8002120:	4b77      	ldr	r3, [pc, #476]	; (8002300 <getADCValues+0x284>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002126:	429a      	cmp	r2, r3
 8002128:	d102      	bne.n	8002130 <getADCValues+0xb4>
			adcIndex=6;
 800212a:	2306      	movs	r3, #6
 800212c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800212e:	e03b      	b.n	80021a8 <getADCValues+0x12c>
		}
		else if((adcChannelCounter==Adc.zionADC) || (adcChannelCounter==Adc.adc7)){
 8002130:	4b73      	ldr	r3, [pc, #460]	; (8002300 <getADCValues+0x284>)
 8002132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002134:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002136:	429a      	cmp	r2, r3
 8002138:	d004      	beq.n	8002144 <getADCValues+0xc8>
 800213a:	4b71      	ldr	r3, [pc, #452]	; (8002300 <getADCValues+0x284>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002140:	429a      	cmp	r2, r3
 8002142:	d102      	bne.n	800214a <getADCValues+0xce>
			adcIndex=8;
 8002144:	2308      	movs	r3, #8
 8002146:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002148:	e02e      	b.n	80021a8 <getADCValues+0x12c>
		}
		else if((adcChannelCounter == Adc.spareI2cADC) || (adcChannelCounter==Adc.adc8)){
 800214a:	4b6d      	ldr	r3, [pc, #436]	; (8002300 <getADCValues+0x284>)
 800214c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002150:	429a      	cmp	r2, r3
 8002152:	d004      	beq.n	800215e <getADCValues+0xe2>
 8002154:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <getADCValues+0x284>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800215a:	429a      	cmp	r2, r3
 800215c:	d102      	bne.n	8002164 <getADCValues+0xe8>
			adcIndex=10;
 800215e:	230a      	movs	r3, #10
 8002160:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002162:	e021      	b.n	80021a8 <getADCValues+0x12c>
		}
		else if(adcChannelCounter==Adc.adc9){
 8002164:	4b66      	ldr	r3, [pc, #408]	; (8002300 <getADCValues+0x284>)
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800216a:	429a      	cmp	r2, r3
 800216c:	d102      	bne.n	8002174 <getADCValues+0xf8>
			adcIndex=12;
 800216e:	230c      	movs	r3, #12
 8002170:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002172:	e019      	b.n	80021a8 <getADCValues+0x12c>
		}
		else if(adcChannelCounter==Adc.adc10){
 8002174:	4b62      	ldr	r3, [pc, #392]	; (8002300 <getADCValues+0x284>)
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800217a:	429a      	cmp	r2, r3
 800217c:	d102      	bne.n	8002184 <getADCValues+0x108>
			adcIndex=14;
 800217e:	230e      	movs	r3, #14
 8002180:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002182:	e011      	b.n	80021a8 <getADCValues+0x12c>
		}
		else if(adcChannelCounter==Adc.adc11){
 8002184:	4b5e      	ldr	r3, [pc, #376]	; (8002300 <getADCValues+0x284>)
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800218a:	429a      	cmp	r2, r3
 800218c:	d102      	bne.n	8002194 <getADCValues+0x118>
			adcIndex=16;
 800218e:	2310      	movs	r3, #16
 8002190:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002192:	e009      	b.n	80021a8 <getADCValues+0x12c>
		}
		else if(adcChannelCounter==Adc.adc12){
 8002194:	4b5a      	ldr	r3, [pc, #360]	; (8002300 <getADCValues+0x284>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800219a:	429a      	cmp	r2, r3
 800219c:	d102      	bne.n	80021a4 <getADCValues+0x128>
			adcIndex=18;
 800219e:	2312      	movs	r3, #18
 80021a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021a2:	e001      	b.n	80021a8 <getADCValues+0x12c>
		}
		else{
			adcIndex=20;
 80021a4:	2314      	movs	r3, #20
 80021a6:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 80021a8:	4b55      	ldr	r3, [pc, #340]	; (8002300 <getADCValues+0x284>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d00e      	beq.n	80021d0 <getADCValues+0x154>
 80021b2:	4b53      	ldr	r3, [pc, #332]	; (8002300 <getADCValues+0x284>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d009      	beq.n	80021d0 <getADCValues+0x154>
 80021bc:	4b50      	ldr	r3, [pc, #320]	; (8002300 <getADCValues+0x284>)
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d004      	beq.n	80021d0 <getADCValues+0x154>
 80021c6:	4b4e      	ldr	r3, [pc, #312]	; (8002300 <getADCValues+0x284>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d13a      	bne.n	8002246 <getADCValues+0x1ca>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80021d0:	2300      	movs	r3, #0
 80021d2:	673b      	str	r3, [r7, #112]	; 0x70
 80021d4:	e033      	b.n	800223e <getADCValues+0x1c2>
				int shiftedIndex = adcIndex + (adc2DataRepeat*avgCounter);
 80021d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021d8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021e0:	4413      	add	r3, r2
 80021e2:	657b      	str	r3, [r7, #84]	; 0x54
				avgADCCounterValues[adcChannelCounter]+=adc2_buf[shiftedIndex];
 80021e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80021ec:	4413      	add	r3, r2
 80021ee:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80021f2:	4944      	ldr	r1, [pc, #272]	; (8002304 <getADCValues+0x288>)
 80021f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021f6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80021fa:	441a      	add	r2, r3
 80021fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002204:	440b      	add	r3, r1
 8002206:	f843 2c74 	str.w	r2, [r3, #-116]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 800220a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800220c:	2b13      	cmp	r3, #19
 800220e:	d113      	bne.n	8002238 <getADCValues+0x1bc>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8002210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002218:	4413      	add	r3, r2
 800221a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800221e:	4a3a      	ldr	r2, [pc, #232]	; (8002308 <getADCValues+0x28c>)
 8002220:	fb82 1203 	smull	r1, r2, r2, r3
 8002224:	10d2      	asrs	r2, r2, #3
 8002226:	17db      	asrs	r3, r3, #31
 8002228:	1ad2      	subs	r2, r2, r3
 800222a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002232:	440b      	add	r3, r1
 8002234:	f843 2c74 	str.w	r2, [r3, #-116]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8002238:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800223a:	3301      	adds	r3, #1
 800223c:	673b      	str	r3, [r7, #112]	; 0x70
 800223e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002240:	2b13      	cmp	r3, #19
 8002242:	ddc8      	ble.n	80021d6 <getADCValues+0x15a>
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8002244:	e09b      	b.n	800237e <getADCValues+0x302>
				}
			}
		}
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 8002246:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <getADCValues+0x284>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800224c:	429a      	cmp	r2, r3
 800224e:	d018      	beq.n	8002282 <getADCValues+0x206>
 8002250:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <getADCValues+0x284>)
 8002252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002254:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002256:	429a      	cmp	r2, r3
 8002258:	d013      	beq.n	8002282 <getADCValues+0x206>
 800225a:	4b29      	ldr	r3, [pc, #164]	; (8002300 <getADCValues+0x284>)
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002260:	429a      	cmp	r2, r3
 8002262:	d00e      	beq.n	8002282 <getADCValues+0x206>
 8002264:	4b26      	ldr	r3, [pc, #152]	; (8002300 <getADCValues+0x284>)
 8002266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002268:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800226a:	429a      	cmp	r2, r3
 800226c:	d009      	beq.n	8002282 <getADCValues+0x206>
 800226e:	4b24      	ldr	r3, [pc, #144]	; (8002300 <getADCValues+0x284>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002272:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002274:	429a      	cmp	r2, r3
 8002276:	d004      	beq.n	8002282 <getADCValues+0x206>
 8002278:	4b21      	ldr	r3, [pc, #132]	; (8002300 <getADCValues+0x284>)
 800227a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800227e:	429a      	cmp	r2, r3
 8002280:	d13a      	bne.n	80022f8 <getADCValues+0x27c>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8002282:	2300      	movs	r3, #0
 8002284:	673b      	str	r3, [r7, #112]	; 0x70
 8002286:	e033      	b.n	80022f0 <getADCValues+0x274>
				int shiftedIndex = adcIndex + (adc3DataRepeat*avgCounter);
 8002288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800228a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002292:	4413      	add	r3, r2
 8002294:	65bb      	str	r3, [r7, #88]	; 0x58
				avgADCCounterValues[adcChannelCounter]+=adc3_buf[shiftedIndex];
 8002296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800229e:	4413      	add	r3, r2
 80022a0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80022a4:	4919      	ldr	r1, [pc, #100]	; (800230c <getADCValues+0x290>)
 80022a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022a8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80022ac:	441a      	add	r2, r3
 80022ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80022b6:	440b      	add	r3, r1
 80022b8:	f843 2c74 	str.w	r2, [r3, #-116]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 80022bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022be:	2b13      	cmp	r3, #19
 80022c0:	d113      	bne.n	80022ea <getADCValues+0x26e>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 80022c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80022ca:	4413      	add	r3, r2
 80022cc:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80022d0:	4a0d      	ldr	r2, [pc, #52]	; (8002308 <getADCValues+0x28c>)
 80022d2:	fb82 1203 	smull	r1, r2, r2, r3
 80022d6:	10d2      	asrs	r2, r2, #3
 80022d8:	17db      	asrs	r3, r3, #31
 80022da:	1ad2      	subs	r2, r2, r3
 80022dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80022e4:	440b      	add	r3, r1
 80022e6:	f843 2c74 	str.w	r2, [r3, #-116]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80022ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022ec:	3301      	adds	r3, #1
 80022ee:	673b      	str	r3, [r7, #112]	; 0x70
 80022f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022f2:	2b13      	cmp	r3, #19
 80022f4:	ddc8      	ble.n	8002288 <getADCValues+0x20c>
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 80022f6:	e042      	b.n	800237e <getADCValues+0x302>
				}
			}
		}
		else{
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80022f8:	2300      	movs	r3, #0
 80022fa:	673b      	str	r3, [r7, #112]	; 0x70
 80022fc:	e03c      	b.n	8002378 <getADCValues+0x2fc>
 80022fe:	bf00      	nop
 8002300:	20000044 	.word	0x20000044
 8002304:	2000a438 	.word	0x2000a438
 8002308:	66666667 	.word	0x66666667
 800230c:	20007ca4 	.word	0x20007ca4
				int shiftedIndex = adcIndex + (adc1DataRepeat*avgCounter);
 8002310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002312:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800231a:	4413      	add	r3, r2
 800231c:	65fb      	str	r3, [r7, #92]	; 0x5c
				avgADCCounterValues[adcChannelCounter]+=adc1_buf[shiftedIndex];
 800231e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002326:	4413      	add	r3, r2
 8002328:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800232c:	49c9      	ldr	r1, [pc, #804]	; (8002654 <getADCValues+0x5d8>)
 800232e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002330:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002334:	441a      	add	r2, r3
 8002336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800233e:	440b      	add	r3, r1
 8002340:	f843 2c74 	str.w	r2, [r3, #-116]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8002344:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002346:	2b13      	cmp	r3, #19
 8002348:	d113      	bne.n	8002372 <getADCValues+0x2f6>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 800234a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002352:	4413      	add	r3, r2
 8002354:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002358:	4abf      	ldr	r2, [pc, #764]	; (8002658 <getADCValues+0x5dc>)
 800235a:	fb82 1203 	smull	r1, r2, r2, r3
 800235e:	10d2      	asrs	r2, r2, #3
 8002360:	17db      	asrs	r3, r3, #31
 8002362:	1ad2      	subs	r2, r2, r3
 8002364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800236c:	440b      	add	r3, r1
 800236e:	f843 2c74 	str.w	r2, [r3, #-116]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8002372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002374:	3301      	adds	r3, #1
 8002376:	673b      	str	r3, [r7, #112]	; 0x70
 8002378:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800237a:	2b13      	cmp	r3, #19
 800237c:	ddc8      	ble.n	8002310 <getADCValues+0x294>
	for(adcChannelCounter=0;adcChannelCounter<20;adcChannelCounter++){
 800237e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002380:	3301      	adds	r3, #1
 8002382:	677b      	str	r3, [r7, #116]	; 0x74
 8002384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002386:	2b13      	cmp	r3, #19
 8002388:	f77f ae8a 	ble.w	80020a0 <getADCValues+0x24>
				}
			}
		}
	}
	adcValues[Adc.adc0] = (avgADCCounterValues[Adc.adc0] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800238c:	4bb3      	ldr	r3, [pc, #716]	; (800265c <getADCValues+0x5e0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002396:	4413      	add	r3, r2
 8002398:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800239c:	ee07 3a90 	vmov	s15, r3
 80023a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023a4:	4bad      	ldr	r3, [pc, #692]	; (800265c <getADCValues+0x5e0>)
 80023a6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80023aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ae:	4bab      	ldr	r3, [pc, #684]	; (800265c <getADCValues+0x5e0>)
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ba:	4ba8      	ldr	r3, [pc, #672]	; (800265c <getADCValues+0x5e0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c2:	4aa7      	ldr	r2, [pc, #668]	; (8002660 <getADCValues+0x5e4>)
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc1] = (avgADCCounterValues[Adc.adc1] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80023cc:	4ba3      	ldr	r3, [pc, #652]	; (800265c <getADCValues+0x5e0>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80023d6:	4413      	add	r3, r2
 80023d8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e4:	4b9d      	ldr	r3, [pc, #628]	; (800265c <getADCValues+0x5e0>)
 80023e6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80023ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ee:	4b9b      	ldr	r3, [pc, #620]	; (800265c <getADCValues+0x5e0>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023fa:	4b98      	ldr	r3, [pc, #608]	; (800265c <getADCValues+0x5e0>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002402:	4a97      	ldr	r2, [pc, #604]	; (8002660 <getADCValues+0x5e4>)
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc2] = (avgADCCounterValues[Adc.adc2] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800240c:	4b93      	ldr	r3, [pc, #588]	; (800265c <getADCValues+0x5e0>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002416:	4413      	add	r3, r2
 8002418:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800241c:	ee07 3a90 	vmov	s15, r3
 8002420:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002424:	4b8d      	ldr	r3, [pc, #564]	; (800265c <getADCValues+0x5e0>)
 8002426:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800242a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800242e:	4b8b      	ldr	r3, [pc, #556]	; (800265c <getADCValues+0x5e0>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800243a:	4b88      	ldr	r3, [pc, #544]	; (800265c <getADCValues+0x5e0>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002442:	4a87      	ldr	r2, [pc, #540]	; (8002660 <getADCValues+0x5e4>)
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc3] = (avgADCCounterValues[Adc.adc3] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800244c:	4b83      	ldr	r3, [pc, #524]	; (800265c <getADCValues+0x5e0>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002456:	4413      	add	r3, r2
 8002458:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800245c:	ee07 3a90 	vmov	s15, r3
 8002460:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002464:	4b7d      	ldr	r3, [pc, #500]	; (800265c <getADCValues+0x5e0>)
 8002466:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800246a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800246e:	4b7b      	ldr	r3, [pc, #492]	; (800265c <getADCValues+0x5e0>)
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800247a:	4b78      	ldr	r3, [pc, #480]	; (800265c <getADCValues+0x5e0>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002482:	4a77      	ldr	r2, [pc, #476]	; (8002660 <getADCValues+0x5e4>)
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc4] = (avgADCCounterValues[Adc.adc4] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800248c:	4b73      	ldr	r3, [pc, #460]	; (800265c <getADCValues+0x5e0>)
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002496:	4413      	add	r3, r2
 8002498:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800249c:	ee07 3a90 	vmov	s15, r3
 80024a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024a4:	4b6d      	ldr	r3, [pc, #436]	; (800265c <getADCValues+0x5e0>)
 80024a6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80024aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ae:	4b6b      	ldr	r3, [pc, #428]	; (800265c <getADCValues+0x5e0>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ba:	4b68      	ldr	r3, [pc, #416]	; (800265c <getADCValues+0x5e0>)
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c2:	4a67      	ldr	r2, [pc, #412]	; (8002660 <getADCValues+0x5e4>)
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc5] = (avgADCCounterValues[Adc.adc5] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80024cc:	4b63      	ldr	r3, [pc, #396]	; (800265c <getADCValues+0x5e0>)
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80024d6:	4413      	add	r3, r2
 80024d8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e4:	4b5d      	ldr	r3, [pc, #372]	; (800265c <getADCValues+0x5e0>)
 80024e6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80024ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ee:	4b5b      	ldr	r3, [pc, #364]	; (800265c <getADCValues+0x5e0>)
 80024f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024fa:	4b58      	ldr	r3, [pc, #352]	; (800265c <getADCValues+0x5e0>)
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002502:	4a57      	ldr	r2, [pc, #348]	; (8002660 <getADCValues+0x5e4>)
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc6] = (avgADCCounterValues[Adc.adc6] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800250c:	4b53      	ldr	r3, [pc, #332]	; (800265c <getADCValues+0x5e0>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002516:	4413      	add	r3, r2
 8002518:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800251c:	ee07 3a90 	vmov	s15, r3
 8002520:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002524:	4b4d      	ldr	r3, [pc, #308]	; (800265c <getADCValues+0x5e0>)
 8002526:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800252a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800252e:	4b4b      	ldr	r3, [pc, #300]	; (800265c <getADCValues+0x5e0>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253a:	4b48      	ldr	r3, [pc, #288]	; (800265c <getADCValues+0x5e0>)
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002542:	4a47      	ldr	r2, [pc, #284]	; (8002660 <getADCValues+0x5e4>)
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc7] = (avgADCCounterValues[Adc.adc7] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800254c:	4b43      	ldr	r3, [pc, #268]	; (800265c <getADCValues+0x5e0>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002556:	4413      	add	r3, r2
 8002558:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002564:	4b3d      	ldr	r3, [pc, #244]	; (800265c <getADCValues+0x5e0>)
 8002566:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800256a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800256e:	4b3b      	ldr	r3, [pc, #236]	; (800265c <getADCValues+0x5e0>)
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800257a:	4b38      	ldr	r3, [pc, #224]	; (800265c <getADCValues+0x5e0>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002582:	4a37      	ldr	r2, [pc, #220]	; (8002660 <getADCValues+0x5e4>)
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc8] = (avgADCCounterValues[Adc.adc8] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800258c:	4b33      	ldr	r3, [pc, #204]	; (800265c <getADCValues+0x5e0>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002596:	4413      	add	r3, r2
 8002598:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025a4:	4b2d      	ldr	r3, [pc, #180]	; (800265c <getADCValues+0x5e0>)
 80025a6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80025aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ae:	4b2b      	ldr	r3, [pc, #172]	; (800265c <getADCValues+0x5e0>)
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ba:	4b28      	ldr	r3, [pc, #160]	; (800265c <getADCValues+0x5e0>)
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c2:	4a27      	ldr	r2, [pc, #156]	; (8002660 <getADCValues+0x5e4>)
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc9] = (avgADCCounterValues[Adc.adc9] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80025cc:	4b23      	ldr	r3, [pc, #140]	; (800265c <getADCValues+0x5e0>)
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80025d6:	4413      	add	r3, r2
 80025d8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80025dc:	ee07 3a90 	vmov	s15, r3
 80025e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <getADCValues+0x5e0>)
 80025e6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80025ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <getADCValues+0x5e0>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025fa:	4b18      	ldr	r3, [pc, #96]	; (800265c <getADCValues+0x5e0>)
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002602:	4a17      	ldr	r2, [pc, #92]	; (8002660 <getADCValues+0x5e4>)
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc10] = (avgADCCounterValues[Adc.adc10] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800260c:	4b13      	ldr	r3, [pc, #76]	; (800265c <getADCValues+0x5e0>)
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002616:	4413      	add	r3, r2
 8002618:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800261c:	ee07 3a90 	vmov	s15, r3
 8002620:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002624:	4b0d      	ldr	r3, [pc, #52]	; (800265c <getADCValues+0x5e0>)
 8002626:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800262a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <getADCValues+0x5e0>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	ee07 3a90 	vmov	s15, r3
 8002636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <getADCValues+0x5e0>)
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002642:	4a07      	ldr	r2, [pc, #28]	; (8002660 <getADCValues+0x5e4>)
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc11] = (avgADCCounterValues[Adc.adc11] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <getADCValues+0x5e0>)
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	e007      	b.n	8002664 <getADCValues+0x5e8>
 8002654:	2000538c 	.word	0x2000538c
 8002658:	66666667 	.word	0x66666667
 800265c:	20000044 	.word	0x20000044
 8002660:	200002d0 	.word	0x200002d0
 8002664:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002668:	4413      	add	r3, r2
 800266a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800266e:	ee07 3a90 	vmov	s15, r3
 8002672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002676:	4b9c      	ldr	r3, [pc, #624]	; (80028e8 <getADCValues+0x86c>)
 8002678:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800267c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002680:	4b99      	ldr	r3, [pc, #612]	; (80028e8 <getADCValues+0x86c>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	ee07 3a90 	vmov	s15, r3
 8002688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800268c:	4b96      	ldr	r3, [pc, #600]	; (80028e8 <getADCValues+0x86c>)
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002694:	4a95      	ldr	r2, [pc, #596]	; (80028ec <getADCValues+0x870>)
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc12] = (avgADCCounterValues[Adc.adc12] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800269e:	4b92      	ldr	r3, [pc, #584]	; (80028e8 <getADCValues+0x86c>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80026a8:	4413      	add	r3, r2
 80026aa:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80026ae:	ee07 3a90 	vmov	s15, r3
 80026b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026b6:	4b8c      	ldr	r3, [pc, #560]	; (80028e8 <getADCValues+0x86c>)
 80026b8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80026bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026c0:	4b89      	ldr	r3, [pc, #548]	; (80028e8 <getADCValues+0x86c>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c4:	ee07 3a90 	vmov	s15, r3
 80026c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026cc:	4b86      	ldr	r3, [pc, #536]	; (80028e8 <getADCValues+0x86c>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d4:	4a85      	ldr	r2, [pc, #532]	; (80028ec <getADCValues+0x870>)
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc13] = (avgADCCounterValues[Adc.adc13] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80026de:	4b82      	ldr	r3, [pc, #520]	; (80028e8 <getADCValues+0x86c>)
 80026e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80026e8:	4413      	add	r3, r2
 80026ea:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80026ee:	ee07 3a90 	vmov	s15, r3
 80026f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026f6:	4b7c      	ldr	r3, [pc, #496]	; (80028e8 <getADCValues+0x86c>)
 80026f8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80026fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002700:	4b79      	ldr	r3, [pc, #484]	; (80028e8 <getADCValues+0x86c>)
 8002702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002704:	ee07 3a90 	vmov	s15, r3
 8002708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800270c:	4b76      	ldr	r3, [pc, #472]	; (80028e8 <getADCValues+0x86c>)
 800270e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002714:	4a75      	ldr	r2, [pc, #468]	; (80028ec <getADCValues+0x870>)
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc14] = (avgADCCounterValues[Adc.adc14] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800271e:	4b72      	ldr	r3, [pc, #456]	; (80028e8 <getADCValues+0x86c>)
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002728:	4413      	add	r3, r2
 800272a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800272e:	ee07 3a90 	vmov	s15, r3
 8002732:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002736:	4b6c      	ldr	r3, [pc, #432]	; (80028e8 <getADCValues+0x86c>)
 8002738:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800273c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002740:	4b69      	ldr	r3, [pc, #420]	; (80028e8 <getADCValues+0x86c>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	ee07 3a90 	vmov	s15, r3
 8002748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800274c:	4b66      	ldr	r3, [pc, #408]	; (80028e8 <getADCValues+0x86c>)
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002754:	4a65      	ldr	r2, [pc, #404]	; (80028ec <getADCValues+0x870>)
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc15] = (avgADCCounterValues[Adc.adc15] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800275e:	4b62      	ldr	r3, [pc, #392]	; (80028e8 <getADCValues+0x86c>)
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002768:	4413      	add	r3, r2
 800276a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002776:	4b5c      	ldr	r3, [pc, #368]	; (80028e8 <getADCValues+0x86c>)
 8002778:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800277c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002780:	4b59      	ldr	r3, [pc, #356]	; (80028e8 <getADCValues+0x86c>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	ee07 3a90 	vmov	s15, r3
 8002788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800278c:	4b56      	ldr	r3, [pc, #344]	; (80028e8 <getADCValues+0x86c>)
 800278e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002794:	4a55      	ldr	r2, [pc, #340]	; (80028ec <getADCValues+0x870>)
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareSpiADC] = (avgADCCounterValues[Adc.spareSpiADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800279e:	4b52      	ldr	r3, [pc, #328]	; (80028e8 <getADCValues+0x86c>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80027a8:	4413      	add	r3, r2
 80027aa:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b6:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <getADCValues+0x86c>)
 80027b8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80027bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c0:	4b49      	ldr	r3, [pc, #292]	; (80028e8 <getADCValues+0x86c>)
 80027c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c4:	ee07 3a90 	vmov	s15, r3
 80027c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027cc:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <getADCValues+0x86c>)
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d4:	4a45      	ldr	r2, [pc, #276]	; (80028ec <getADCValues+0x870>)
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareUartADC] = (avgADCCounterValues[Adc.spareUartADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 80027de:	4b42      	ldr	r3, [pc, #264]	; (80028e8 <getADCValues+0x86c>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80027e8:	4413      	add	r3, r2
 80027ea:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027f6:	4b3c      	ldr	r3, [pc, #240]	; (80028e8 <getADCValues+0x86c>)
 80027f8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80027fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002800:	4b39      	ldr	r3, [pc, #228]	; (80028e8 <getADCValues+0x86c>)
 8002802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002804:	ee07 3a90 	vmov	s15, r3
 8002808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800280c:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <getADCValues+0x86c>)
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002814:	4a35      	ldr	r2, [pc, #212]	; (80028ec <getADCValues+0x870>)
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.configADC] = (avgADCCounterValues[Adc.configADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800281e:	4b32      	ldr	r3, [pc, #200]	; (80028e8 <getADCValues+0x86c>)
 8002820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002828:	4413      	add	r3, r2
 800282a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800282e:	ee07 3a90 	vmov	s15, r3
 8002832:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002836:	4b2c      	ldr	r3, [pc, #176]	; (80028e8 <getADCValues+0x86c>)
 8002838:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800283c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002840:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <getADCValues+0x86c>)
 8002842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800284c:	4b26      	ldr	r3, [pc, #152]	; (80028e8 <getADCValues+0x86c>)
 800284e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002854:	4a25      	ldr	r2, [pc, #148]	; (80028ec <getADCValues+0x870>)
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.zionADC] = (avgADCCounterValues[Adc.zionADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800285e:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <getADCValues+0x86c>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002868:	4413      	add	r3, r2
 800286a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800286e:	ee07 3a90 	vmov	s15, r3
 8002872:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <getADCValues+0x86c>)
 8002878:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800287c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <getADCValues+0x86c>)
 8002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800288c:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <getADCValues+0x86c>)
 800288e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002894:	4a15      	ldr	r2, [pc, #84]	; (80028ec <getADCValues+0x870>)
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareI2cADC] = (avgADCCounterValues[Adc.spareI2cADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <getADCValues+0x86c>)
 80028a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80028a8:	4413      	add	r3, r2
 80028aa:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <getADCValues+0x86c>)
 80028b8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80028bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <getADCValues+0x86c>)
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	ee07 3a90 	vmov	s15, r3
 80028c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <getADCValues+0x86c>)
 80028ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d4:	4a05      	ldr	r2, [pc, #20]	; (80028ec <getADCValues+0x870>)
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	edc3 7a00 	vstr	s15, [r3]
	return adcValues;
 80028de:	4b03      	ldr	r3, [pc, #12]	; (80028ec <getADCValues+0x870>)
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3778      	adds	r7, #120	; 0x78
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000044 	.word	0x20000044
 80028ec:	200002d0 	.word	0x200002d0

080028f0 <HAL_ADC_ConvCpltCallback>:
//// Called when first half of buffer is filled
//void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
//}
//
//// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <startHeartbeat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startHeartbeat */
void startHeartbeat(void *argument)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 800290c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002910:	4803      	ldr	r0, [pc, #12]	; (8002920 <startHeartbeat+0x1c>)
 8002912:	f002 fcfa 	bl	800530a <HAL_GPIO_TogglePin>
	  osDelay(500);
 8002916:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800291a:	f007 f9ab 	bl	8009c74 <osDelay>
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 800291e:	e7f5      	b.n	800290c <startHeartbeat+0x8>
 8002920:	40022000 	.word	0x40022000

08002924 <startADCRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCRead */
void startADCRead(void *argument)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCRead */
  /* Infinite loop */
  for(;;)
  {
	  //empty out the data ready variables and the adc3_bufs
	memset(adcRestart,0,sizeof(adcRestart));
 800292c:	2203      	movs	r2, #3
 800292e:	2100      	movs	r1, #0
 8002930:	4815      	ldr	r0, [pc, #84]	; (8002988 <startADCRead+0x64>)
 8002932:	f009 fe48 	bl	800c5c6 <memset>
	memset(adc1_buf, 0, sizeof(adc1_buf));
 8002936:	f242 7210 	movw	r2, #10000	; 0x2710
 800293a:	2100      	movs	r1, #0
 800293c:	4813      	ldr	r0, [pc, #76]	; (800298c <startADCRead+0x68>)
 800293e:	f009 fe42 	bl	800c5c6 <memset>
	memset(adc2_buf, 0, sizeof(adc2_buf));
 8002942:	f242 7210 	movw	r2, #10000	; 0x2710
 8002946:	2100      	movs	r1, #0
 8002948:	4811      	ldr	r0, [pc, #68]	; (8002990 <startADCRead+0x6c>)
 800294a:	f009 fe3c 	bl	800c5c6 <memset>
	memset(adc3_buf, 0, sizeof(adc3_buf));
 800294e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002952:	2100      	movs	r1, #0
 8002954:	480f      	ldr	r0, [pc, #60]	; (8002994 <startADCRead+0x70>)
 8002956:	f009 fe36 	bl	800c5c6 <memset>
	//restart the DMAs.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	490b      	ldr	r1, [pc, #44]	; (800298c <startADCRead+0x68>)
 8002960:	480d      	ldr	r0, [pc, #52]	; (8002998 <startADCRead+0x74>)
 8002962:	f001 f9e7 	bl	8003d34 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8002966:	f241 3288 	movw	r2, #5000	; 0x1388
 800296a:	4909      	ldr	r1, [pc, #36]	; (8002990 <startADCRead+0x6c>)
 800296c:	480b      	ldr	r0, [pc, #44]	; (800299c <startADCRead+0x78>)
 800296e:	f001 f9e1 	bl	8003d34 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8002972:	f241 3288 	movw	r2, #5000	; 0x1388
 8002976:	4907      	ldr	r1, [pc, #28]	; (8002994 <startADCRead+0x70>)
 8002978:	4809      	ldr	r0, [pc, #36]	; (80029a0 <startADCRead+0x7c>)
 800297a:	f001 f9db 	bl	8003d34 <HAL_ADC_Start_DMA>
    osDelay(1000);
 800297e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002982:	f007 f977 	bl	8009c74 <osDelay>
  {
 8002986:	e7d1      	b.n	800292c <startADCRead+0x8>
 8002988:	20005348 	.word	0x20005348
 800298c:	2000538c 	.word	0x2000538c
 8002990:	2000a438 	.word	0x2000a438
 8002994:	20007ca4 	.word	0x20007ca4
 8002998:	20007b1c 	.word	0x20007b1c
 800299c:	20004e04 	.word	0x20004e04
 80029a0:	20007b68 	.word	0x20007b68

080029a4 <GetDaScreenBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetDaScreenBlink */
void GetDaScreenBlink(void *argument)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDaScreenBlink */
  /* Infinite loop */
	 static uint16_t LCD_Blink_White = 0b0001100000000000;
	 static uint16_t LCD_Blink_Black = 0b0001000000000000;
	 int x = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
	  	  setOutputGPIOState(outputGPIOs.out1V8_2,x);
	  	  setOutputGPIOState(outputGPIOs.out1V8_3,!x);
	  	  setOutputGPIOState(outputGPIOs.odOut_0,x);
	  	  setOutputGPIOState(outputGPIOs.odOut_1,!x); */

	  	  if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 80029b0:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <GetDaScreenBlink+0x98>)
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <GetDaScreenBlink+0x98>)
 80029b6:	785b      	ldrb	r3, [r3, #1]
 80029b8:	4013      	ands	r3, r2
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <GetDaScreenBlink+0x98>)
 80029be:	789b      	ldrb	r3, [r3, #2]
 80029c0:	4013      	ands	r3, r2
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <GetDaScreenBlink+0x30>
	  		  adcValues = getADCValues();
 80029c8:	f7ff fb58 	bl	800207c <getADCValues>
 80029cc:	6138      	str	r0, [r7, #16]
	  		  float *adcValues1 = adcValues+1;
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	3304      	adds	r3, #4
 80029d2:	60fb      	str	r3, [r7, #12]
	  		 // uartTransmitFloat(adcValues,7);
	  	  }
	 	  if (!x) {
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d114      	bne.n	8002a04 <GetDaScreenBlink+0x60>
	 		  //HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
	 		  x=1;
 80029da:	2301      	movs	r3, #1
 80029dc:	617b      	str	r3, [r7, #20]

	 		  uartTransmitChar("hello\r\n",7);
 80029de:	2107      	movs	r1, #7
 80029e0:	4817      	ldr	r0, [pc, #92]	; (8002a40 <GetDaScreenBlink+0x9c>)
 80029e2:	f7ff f825 	bl	8001a30 <uartTransmitChar>
	 		  HAL_GPIO_TogglePin(LCD_SS_GPIO_Port,LCD_SS_Pin);
 80029e6:	2110      	movs	r1, #16
 80029e8:	4816      	ldr	r0, [pc, #88]	; (8002a44 <GetDaScreenBlink+0xa0>)
 80029ea:	f002 fc8e 	bl	800530a <HAL_GPIO_TogglePin>
	 		  HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
 80029ee:	2364      	movs	r3, #100	; 0x64
 80029f0:	2201      	movs	r2, #1
 80029f2:	4915      	ldr	r1, [pc, #84]	; (8002a48 <GetDaScreenBlink+0xa4>)
 80029f4:	4815      	ldr	r0, [pc, #84]	; (8002a4c <GetDaScreenBlink+0xa8>)
 80029f6:	f004 fcff 	bl	80073f8 <HAL_SPI_Transmit>
	 		  HAL_GPIO_TogglePin(LCD_SS_GPIO_Port,LCD_SS_Pin);
 80029fa:	2110      	movs	r1, #16
 80029fc:	4811      	ldr	r0, [pc, #68]	; (8002a44 <GetDaScreenBlink+0xa0>)
 80029fe:	f002 fc84 	bl	800530a <HAL_GPIO_TogglePin>
 8002a02:	e015      	b.n	8002a30 <GetDaScreenBlink+0x8c>
	 	  }
	 	  else{
	 		  //HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
	 		  x=0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
	 		  uartTransmitChar("here\r\n",7);
 8002a08:	2107      	movs	r1, #7
 8002a0a:	4811      	ldr	r0, [pc, #68]	; (8002a50 <GetDaScreenBlink+0xac>)
 8002a0c:	f7ff f810 	bl	8001a30 <uartTransmitChar>
	 		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8002a10:	2201      	movs	r2, #1
 8002a12:	2110      	movs	r1, #16
 8002a14:	480b      	ldr	r0, [pc, #44]	; (8002a44 <GetDaScreenBlink+0xa0>)
 8002a16:	f002 fc5f 	bl	80052d8 <HAL_GPIO_WritePin>
	 		  HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
 8002a1a:	2364      	movs	r3, #100	; 0x64
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	490d      	ldr	r1, [pc, #52]	; (8002a54 <GetDaScreenBlink+0xb0>)
 8002a20:	480a      	ldr	r0, [pc, #40]	; (8002a4c <GetDaScreenBlink+0xa8>)
 8002a22:	f004 fce9 	bl	80073f8 <HAL_SPI_Transmit>
	 		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2110      	movs	r1, #16
 8002a2a:	4806      	ldr	r0, [pc, #24]	; (8002a44 <GetDaScreenBlink+0xa0>)
 8002a2c:	f002 fc54 	bl	80052d8 <HAL_GPIO_WritePin>
	 	  }
	 	  osDelay(400);
 8002a30:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002a34:	f007 f91e 	bl	8009c74 <osDelay>
	  	  if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8002a38:	e7ba      	b.n	80029b0 <GetDaScreenBlink+0xc>
 8002a3a:	bf00      	nop
 8002a3c:	20005348 	.word	0x20005348
 8002a40:	0800fefc 	.word	0x0800fefc
 8002a44:	40021000 	.word	0x40021000
 8002a48:	200000b4 	.word	0x200000b4
 8002a4c:	20007bb0 	.word	0x20007bb0
 8002a50:	0800ff04 	.word	0x0800ff04
 8002a54:	200000b6 	.word	0x200000b6

08002a58 <startGpioInputRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGpioInputRead */
void startGpioInputRead(void *argument)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGpioInputRead */
  /* Infinite loop */
  for(;;)
  {
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8002a60:	4b42      	ldr	r3, [pc, #264]	; (8002b6c <startGpioInputRead+0x114>)
 8002a62:	681c      	ldr	r4, [r3, #0]
 8002a64:	2180      	movs	r1, #128	; 0x80
 8002a66:	4842      	ldr	r0, [pc, #264]	; (8002b70 <startGpioInputRead+0x118>)
 8002a68:	f002 fc1e 	bl	80052a8 <HAL_GPIO_ReadPin>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4b40      	ldr	r3, [pc, #256]	; (8002b74 <startGpioInputRead+0x11c>)
 8002a72:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input1] = HAL_GPIO_ReadPin(UI_INPUT1_GPIO_Port,UI_INPUT1_Pin);
 8002a74:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <startGpioInputRead+0x114>)
 8002a76:	685c      	ldr	r4, [r3, #4]
 8002a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a7c:	483e      	ldr	r0, [pc, #248]	; (8002b78 <startGpioInputRead+0x120>)
 8002a7e:	f002 fc13 	bl	80052a8 <HAL_GPIO_ReadPin>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <startGpioInputRead+0x11c>)
 8002a88:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input2] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT2_Pin);
 8002a8a:	4b38      	ldr	r3, [pc, #224]	; (8002b6c <startGpioInputRead+0x114>)
 8002a8c:	689c      	ldr	r4, [r3, #8]
 8002a8e:	2110      	movs	r1, #16
 8002a90:	483a      	ldr	r0, [pc, #232]	; (8002b7c <startGpioInputRead+0x124>)
 8002a92:	f002 fc09 	bl	80052a8 <HAL_GPIO_ReadPin>
 8002a96:	4603      	mov	r3, r0
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <startGpioInputRead+0x11c>)
 8002a9c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input3] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT3_Pin);
 8002a9e:	4b33      	ldr	r3, [pc, #204]	; (8002b6c <startGpioInputRead+0x114>)
 8002aa0:	68dc      	ldr	r4, [r3, #12]
 8002aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aa6:	4835      	ldr	r0, [pc, #212]	; (8002b7c <startGpioInputRead+0x124>)
 8002aa8:	f002 fbfe 	bl	80052a8 <HAL_GPIO_ReadPin>
 8002aac:	4603      	mov	r3, r0
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4b30      	ldr	r3, [pc, #192]	; (8002b74 <startGpioInputRead+0x11c>)
 8002ab2:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input4] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT4_Pin);
 8002ab4:	4b2d      	ldr	r3, [pc, #180]	; (8002b6c <startGpioInputRead+0x114>)
 8002ab6:	691c      	ldr	r4, [r3, #16]
 8002ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002abc:	482f      	ldr	r0, [pc, #188]	; (8002b7c <startGpioInputRead+0x124>)
 8002abe:	f002 fbf3 	bl	80052a8 <HAL_GPIO_ReadPin>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b2b      	ldr	r3, [pc, #172]	; (8002b74 <startGpioInputRead+0x11c>)
 8002ac8:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input5] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT5_Pin);
 8002aca:	4b28      	ldr	r3, [pc, #160]	; (8002b6c <startGpioInputRead+0x114>)
 8002acc:	695c      	ldr	r4, [r3, #20]
 8002ace:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ad2:	482a      	ldr	r0, [pc, #168]	; (8002b7c <startGpioInputRead+0x124>)
 8002ad4:	f002 fbe8 	bl	80052a8 <HAL_GPIO_ReadPin>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <startGpioInputRead+0x11c>)
 8002ade:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input6] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT6_Pin);
 8002ae0:	4b22      	ldr	r3, [pc, #136]	; (8002b6c <startGpioInputRead+0x114>)
 8002ae2:	699c      	ldr	r4, [r3, #24]
 8002ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ae8:	4824      	ldr	r0, [pc, #144]	; (8002b7c <startGpioInputRead+0x124>)
 8002aea:	f002 fbdd 	bl	80052a8 <HAL_GPIO_ReadPin>
 8002aee:	4603      	mov	r3, r0
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <startGpioInputRead+0x11c>)
 8002af4:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input7] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT7_Pin);
 8002af6:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <startGpioInputRead+0x114>)
 8002af8:	69dc      	ldr	r4, [r3, #28]
 8002afa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002afe:	481f      	ldr	r0, [pc, #124]	; (8002b7c <startGpioInputRead+0x124>)
 8002b00:	f002 fbd2 	bl	80052a8 <HAL_GPIO_ReadPin>
 8002b04:	4603      	mov	r3, r0
 8002b06:	461a      	mov	r2, r3
 8002b08:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <startGpioInputRead+0x11c>)
 8002b0a:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input8] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT8_Pin);
 8002b0c:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <startGpioInputRead+0x114>)
 8002b0e:	6a1c      	ldr	r4, [r3, #32]
 8002b10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b14:	4819      	ldr	r0, [pc, #100]	; (8002b7c <startGpioInputRead+0x124>)
 8002b16:	f002 fbc7 	bl	80052a8 <HAL_GPIO_ReadPin>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <startGpioInputRead+0x11c>)
 8002b20:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input9] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT9_Pin);
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <startGpioInputRead+0x114>)
 8002b24:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002b26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b2a:	4814      	ldr	r0, [pc, #80]	; (8002b7c <startGpioInputRead+0x124>)
 8002b2c:	f002 fbbc 	bl	80052a8 <HAL_GPIO_ReadPin>
 8002b30:	4603      	mov	r3, r0
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <startGpioInputRead+0x11c>)
 8002b36:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input10] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT10_Pin);
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <startGpioInputRead+0x114>)
 8002b3a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002b3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b40:	480e      	ldr	r0, [pc, #56]	; (8002b7c <startGpioInputRead+0x124>)
 8002b42:	f002 fbb1 	bl	80052a8 <HAL_GPIO_ReadPin>
 8002b46:	4603      	mov	r3, r0
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <startGpioInputRead+0x11c>)
 8002b4c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input11] = HAL_GPIO_ReadPin(UI_INPUT11_GPIO_Port,UI_INPUT11_Pin);
 8002b4e:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <startGpioInputRead+0x114>)
 8002b50:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002b52:	2108      	movs	r1, #8
 8002b54:	480a      	ldr	r0, [pc, #40]	; (8002b80 <startGpioInputRead+0x128>)
 8002b56:	f002 fba7 	bl	80052a8 <HAL_GPIO_ReadPin>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <startGpioInputRead+0x11c>)
 8002b60:	551a      	strb	r2, [r3, r4]
	  osDelay(950);
 8002b62:	f240 30b6 	movw	r0, #950	; 0x3b6
 8002b66:	f007 f885 	bl	8009c74 <osDelay>
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8002b6a:	e779      	b.n	8002a60 <startGpioInputRead+0x8>
 8002b6c:	20000014 	.word	0x20000014
 8002b70:	40020400 	.word	0x40020400
 8002b74:	20004df8 	.word	0x20004df8
 8002b78:	40020800 	.word	0x40020800
 8002b7c:	40020c00 	.word	0x40020c00
 8002b80:	40021000 	.word	0x40021000

08002b84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d101      	bne.n	8002b9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b96:	f000 ff05 	bl	80039a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40001000 	.word	0x40001000

08002ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bae:	e7fe      	b.n	8002bae <Error_Handler+0x6>

08002bb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb6:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <HAL_MspInit+0x4c>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	4a10      	ldr	r2, [pc, #64]	; (8002bfc <HAL_MspInit+0x4c>)
 8002bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_MspInit+0x4c>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_MspInit+0x4c>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <HAL_MspInit+0x4c>)
 8002bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bda:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <HAL_MspInit+0x4c>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	210f      	movs	r1, #15
 8002bea:	f06f 0001 	mvn.w	r0, #1
 8002bee:	f001 fd7f 	bl	80046f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800

08002c00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b094      	sub	sp, #80	; 0x50
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a91      	ldr	r2, [pc, #580]	; (8002e64 <HAL_ADC_MspInit+0x264>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	f040 808c 	bne.w	8002d3c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c24:	4b90      	ldr	r3, [pc, #576]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c28:	4a8f      	ldr	r2, [pc, #572]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c30:	4b8d      	ldr	r3, [pc, #564]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c38:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3c:	4b8a      	ldr	r3, [pc, #552]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	4a89      	ldr	r2, [pc, #548]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002c42:	f043 0304 	orr.w	r3, r3, #4
 8002c46:	6313      	str	r3, [r2, #48]	; 0x30
 8002c48:	4b87      	ldr	r3, [pc, #540]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
 8002c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c54:	4b84      	ldr	r3, [pc, #528]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	4a83      	ldr	r2, [pc, #524]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c60:	4b81      	ldr	r3, [pc, #516]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	633b      	str	r3, [r7, #48]	; 0x30
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6c:	4b7e      	ldr	r3, [pc, #504]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	4a7d      	ldr	r2, [pc, #500]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002c72:	f043 0302 	orr.w	r3, r3, #2
 8002c76:	6313      	str	r3, [r2, #48]	; 0x30
 8002c78:	4b7b      	ldr	r3, [pc, #492]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8002c84:	230f      	movs	r3, #15
 8002c86:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c94:	4619      	mov	r1, r3
 8002c96:	4875      	ldr	r0, [pc, #468]	; (8002e6c <HAL_ADC_MspInit+0x26c>)
 8002c98:	f002 f95c 	bl	8004f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC6_Pin|ADC5_Pin|ADC3_Pin
 8002c9c:	23f8      	movs	r3, #248	; 0xf8
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cac:	4619      	mov	r1, r3
 8002cae:	4870      	ldr	r0, [pc, #448]	; (8002e70 <HAL_ADC_MspInit+0x270>)
 8002cb0:	f002 f950 	bl	8004f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC9_Pin|ADC8_Pin;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	486b      	ldr	r0, [pc, #428]	; (8002e74 <HAL_ADC_MspInit+0x274>)
 8002cc8:	f002 f944 	bl	8004f54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002ccc:	4b6a      	ldr	r3, [pc, #424]	; (8002e78 <HAL_ADC_MspInit+0x278>)
 8002cce:	4a6b      	ldr	r2, [pc, #428]	; (8002e7c <HAL_ADC_MspInit+0x27c>)
 8002cd0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002cd2:	4b69      	ldr	r3, [pc, #420]	; (8002e78 <HAL_ADC_MspInit+0x278>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cd8:	4b67      	ldr	r3, [pc, #412]	; (8002e78 <HAL_ADC_MspInit+0x278>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cde:	4b66      	ldr	r3, [pc, #408]	; (8002e78 <HAL_ADC_MspInit+0x278>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ce4:	4b64      	ldr	r3, [pc, #400]	; (8002e78 <HAL_ADC_MspInit+0x278>)
 8002ce6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cec:	4b62      	ldr	r3, [pc, #392]	; (8002e78 <HAL_ADC_MspInit+0x278>)
 8002cee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cf2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002cf4:	4b60      	ldr	r3, [pc, #384]	; (8002e78 <HAL_ADC_MspInit+0x278>)
 8002cf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cfa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002cfc:	4b5e      	ldr	r3, [pc, #376]	; (8002e78 <HAL_ADC_MspInit+0x278>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d02:	4b5d      	ldr	r3, [pc, #372]	; (8002e78 <HAL_ADC_MspInit+0x278>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d08:	4b5b      	ldr	r3, [pc, #364]	; (8002e78 <HAL_ADC_MspInit+0x278>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d0e:	485a      	ldr	r0, [pc, #360]	; (8002e78 <HAL_ADC_MspInit+0x278>)
 8002d10:	f001 fd18 	bl	8004744 <HAL_DMA_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 8002d1a:	f7ff ff45 	bl	8002ba8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a55      	ldr	r2, [pc, #340]	; (8002e78 <HAL_ADC_MspInit+0x278>)
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38
 8002d24:	4a54      	ldr	r2, [pc, #336]	; (8002e78 <HAL_ADC_MspInit+0x278>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2105      	movs	r1, #5
 8002d2e:	2012      	movs	r0, #18
 8002d30:	f001 fcde 	bl	80046f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002d34:	2012      	movs	r0, #18
 8002d36:	f001 fcf7 	bl	8004728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002d3a:	e13a      	b.n	8002fb2 <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a4f      	ldr	r2, [pc, #316]	; (8002e80 <HAL_ADC_MspInit+0x280>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	f040 80a2 	bne.w	8002e8c <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002d48:	4b47      	ldr	r3, [pc, #284]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	4a46      	ldr	r2, [pc, #280]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d52:	6453      	str	r3, [r2, #68]	; 0x44
 8002d54:	4b44      	ldr	r3, [pc, #272]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d60:	4b41      	ldr	r3, [pc, #260]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	4a40      	ldr	r2, [pc, #256]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6c:	4b3e      	ldr	r3, [pc, #248]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d78:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	4a3a      	ldr	r2, [pc, #232]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6313      	str	r3, [r2, #48]	; 0x30
 8002d84:	4b38      	ldr	r3, [pc, #224]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d90:	4b35      	ldr	r3, [pc, #212]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	4a34      	ldr	r2, [pc, #208]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9c:	4b32      	ldr	r3, [pc, #200]	; (8002e68 <HAL_ADC_MspInit+0x268>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin
 8002da8:	233f      	movs	r3, #63	; 0x3f
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dac:	2303      	movs	r3, #3
 8002dae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002db8:	4619      	mov	r1, r3
 8002dba:	482c      	ldr	r0, [pc, #176]	; (8002e6c <HAL_ADC_MspInit+0x26c>)
 8002dbc:	f002 f8ca 	bl	8004f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin|ADC4_Pin|ADC6_Pin
 8002dc0:	237b      	movs	r3, #123	; 0x7b
 8002dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dcc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4827      	ldr	r0, [pc, #156]	; (8002e70 <HAL_ADC_MspInit+0x270>)
 8002dd4:	f002 f8be 	bl	8004f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC9_Pin;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ADC9_GPIO_Port, &GPIO_InitStruct);
 8002de4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002de8:	4619      	mov	r1, r3
 8002dea:	4822      	ldr	r0, [pc, #136]	; (8002e74 <HAL_ADC_MspInit+0x274>)
 8002dec:	f002 f8b2 	bl	8004f54 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002df0:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_ADC_MspInit+0x284>)
 8002df2:	4a25      	ldr	r2, [pc, #148]	; (8002e88 <HAL_ADC_MspInit+0x288>)
 8002df4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002df6:	4b23      	ldr	r3, [pc, #140]	; (8002e84 <HAL_ADC_MspInit+0x284>)
 8002df8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dfc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dfe:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <HAL_ADC_MspInit+0x284>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e04:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <HAL_ADC_MspInit+0x284>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <HAL_ADC_MspInit+0x284>)
 8002e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e10:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e12:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <HAL_ADC_MspInit+0x284>)
 8002e14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e18:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <HAL_ADC_MspInit+0x284>)
 8002e1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e20:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8002e22:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <HAL_ADC_MspInit+0x284>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002e28:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <HAL_ADC_MspInit+0x284>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <HAL_ADC_MspInit+0x284>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002e34:	4813      	ldr	r0, [pc, #76]	; (8002e84 <HAL_ADC_MspInit+0x284>)
 8002e36:	f001 fc85 	bl	8004744 <HAL_DMA_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_ADC_MspInit+0x244>
      Error_Handler();
 8002e40:	f7ff feb2 	bl	8002ba8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a0f      	ldr	r2, [pc, #60]	; (8002e84 <HAL_ADC_MspInit+0x284>)
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38
 8002e4a:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <HAL_ADC_MspInit+0x284>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002e50:	2200      	movs	r2, #0
 8002e52:	2105      	movs	r1, #5
 8002e54:	2012      	movs	r0, #18
 8002e56:	f001 fc4b 	bl	80046f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002e5a:	2012      	movs	r0, #18
 8002e5c:	f001 fc64 	bl	8004728 <HAL_NVIC_EnableIRQ>
}
 8002e60:	e0a7      	b.n	8002fb2 <HAL_ADC_MspInit+0x3b2>
 8002e62:	bf00      	nop
 8002e64:	40012000 	.word	0x40012000
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020800 	.word	0x40020800
 8002e70:	40020000 	.word	0x40020000
 8002e74:	40020400 	.word	0x40020400
 8002e78:	20007c14 	.word	0x20007c14
 8002e7c:	40026410 	.word	0x40026410
 8002e80:	40012100 	.word	0x40012100
 8002e84:	2000cb48 	.word	0x2000cb48
 8002e88:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a4a      	ldr	r2, [pc, #296]	; (8002fbc <HAL_ADC_MspInit+0x3bc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	f040 808d 	bne.w	8002fb2 <HAL_ADC_MspInit+0x3b2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002e98:	4b49      	ldr	r3, [pc, #292]	; (8002fc0 <HAL_ADC_MspInit+0x3c0>)
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	4a48      	ldr	r2, [pc, #288]	; (8002fc0 <HAL_ADC_MspInit+0x3c0>)
 8002e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ea2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea4:	4b46      	ldr	r3, [pc, #280]	; (8002fc0 <HAL_ADC_MspInit+0x3c0>)
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002eb0:	4b43      	ldr	r3, [pc, #268]	; (8002fc0 <HAL_ADC_MspInit+0x3c0>)
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb4:	4a42      	ldr	r2, [pc, #264]	; (8002fc0 <HAL_ADC_MspInit+0x3c0>)
 8002eb6:	f043 0320 	orr.w	r3, r3, #32
 8002eba:	6313      	str	r3, [r2, #48]	; 0x30
 8002ebc:	4b40      	ldr	r3, [pc, #256]	; (8002fc0 <HAL_ADC_MspInit+0x3c0>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec8:	4b3d      	ldr	r3, [pc, #244]	; (8002fc0 <HAL_ADC_MspInit+0x3c0>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	4a3c      	ldr	r2, [pc, #240]	; (8002fc0 <HAL_ADC_MspInit+0x3c0>)
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed4:	4b3a      	ldr	r3, [pc, #232]	; (8002fc0 <HAL_ADC_MspInit+0x3c0>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee0:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <HAL_ADC_MspInit+0x3c0>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	4a36      	ldr	r2, [pc, #216]	; (8002fc0 <HAL_ADC_MspInit+0x3c0>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6313      	str	r3, [r2, #48]	; 0x30
 8002eec:	4b34      	ldr	r3, [pc, #208]	; (8002fc0 <HAL_ADC_MspInit+0x3c0>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC15_Pin|ADC14_Pin|PP_SPARE_I2C_ADC_Pin|ZION_SENSE_Pin
 8002ef8:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002efc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002efe:	2303      	movs	r3, #3
 8002f00:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	482d      	ldr	r0, [pc, #180]	; (8002fc4 <HAL_ADC_MspInit+0x3c4>)
 8002f0e:	f002 f821 	bl	8004f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8002f12:	230f      	movs	r3, #15
 8002f14:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f16:	2303      	movs	r3, #3
 8002f18:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f22:	4619      	mov	r1, r3
 8002f24:	4828      	ldr	r0, [pc, #160]	; (8002fc8 <HAL_ADC_MspInit+0x3c8>)
 8002f26:	f002 f815 	bl	8004f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 8002f2a:	230c      	movs	r3, #12
 8002f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4823      	ldr	r0, [pc, #140]	; (8002fcc <HAL_ADC_MspInit+0x3cc>)
 8002f3e:	f002 f809 	bl	8004f54 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8002f42:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <HAL_ADC_MspInit+0x3d0>)
 8002f44:	4a23      	ldr	r2, [pc, #140]	; (8002fd4 <HAL_ADC_MspInit+0x3d4>)
 8002f46:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8002f48:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <HAL_ADC_MspInit+0x3d0>)
 8002f4a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f4e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f50:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <HAL_ADC_MspInit+0x3d0>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f56:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <HAL_ADC_MspInit+0x3d0>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002f5c:	4b1c      	ldr	r3, [pc, #112]	; (8002fd0 <HAL_ADC_MspInit+0x3d0>)
 8002f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f62:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f64:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <HAL_ADC_MspInit+0x3d0>)
 8002f66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f6a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f6c:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <HAL_ADC_MspInit+0x3d0>)
 8002f6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f72:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8002f74:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <HAL_ADC_MspInit+0x3d0>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <HAL_ADC_MspInit+0x3d0>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f80:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <HAL_ADC_MspInit+0x3d0>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002f86:	4812      	ldr	r0, [pc, #72]	; (8002fd0 <HAL_ADC_MspInit+0x3d0>)
 8002f88:	f001 fbdc 	bl	8004744 <HAL_DMA_Init>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_ADC_MspInit+0x396>
      Error_Handler();
 8002f92:	f7ff fe09 	bl	8002ba8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <HAL_ADC_MspInit+0x3d0>)
 8002f9a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f9c:	4a0c      	ldr	r2, [pc, #48]	; (8002fd0 <HAL_ADC_MspInit+0x3d0>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2105      	movs	r1, #5
 8002fa6:	2012      	movs	r0, #18
 8002fa8:	f001 fba2 	bl	80046f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002fac:	2012      	movs	r0, #18
 8002fae:	f001 fbbb 	bl	8004728 <HAL_NVIC_EnableIRQ>
}
 8002fb2:	bf00      	nop
 8002fb4:	3750      	adds	r7, #80	; 0x50
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40012200 	.word	0x40012200
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40021400 	.word	0x40021400
 8002fc8:	40020800 	.word	0x40020800
 8002fcc:	40020000 	.word	0x40020000
 8002fd0:	200052e8 	.word	0x200052e8
 8002fd4:	40026428 	.word	0x40026428

08002fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b090      	sub	sp, #64	; 0x40
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a6c      	ldr	r2, [pc, #432]	; (80031a8 <HAL_I2C_MspInit+0x1d0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d129      	bne.n	800304e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffa:	4b6c      	ldr	r3, [pc, #432]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	4a6b      	ldr	r2, [pc, #428]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 8003000:	f043 0302 	orr.w	r3, r3, #2
 8003004:	6313      	str	r3, [r2, #48]	; 0x30
 8003006:	4b69      	ldr	r3, [pc, #420]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003010:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LED_I2C_SCL_Pin|LED_I2C_SDA_Pin;
 8003012:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003018:	2312      	movs	r3, #18
 800301a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800301c:	2301      	movs	r3, #1
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003020:	2303      	movs	r3, #3
 8003022:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003024:	2304      	movs	r3, #4
 8003026:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800302c:	4619      	mov	r1, r3
 800302e:	4860      	ldr	r0, [pc, #384]	; (80031b0 <HAL_I2C_MspInit+0x1d8>)
 8003030:	f001 ff90 	bl	8004f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003034:	4b5d      	ldr	r3, [pc, #372]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	4a5c      	ldr	r2, [pc, #368]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 800303a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800303e:	6413      	str	r3, [r2, #64]	; 0x40
 8003040:	4b5a      	ldr	r3, [pc, #360]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800304c:	e0a7      	b.n	800319e <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a58      	ldr	r2, [pc, #352]	; (80031b4 <HAL_I2C_MspInit+0x1dc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d128      	bne.n	80030aa <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003058:	4b54      	ldr	r3, [pc, #336]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	4a53      	ldr	r2, [pc, #332]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 800305e:	f043 0320 	orr.w	r3, r3, #32
 8003062:	6313      	str	r3, [r2, #48]	; 0x30
 8003064:	4b51      	ldr	r3, [pc, #324]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	f003 0320 	and.w	r3, r3, #32
 800306c:	623b      	str	r3, [r7, #32]
 800306e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SPARE_I2C_SDA_3V3_Pin|SPARE_I2C_SCL_3V3_Pin;
 8003070:	2303      	movs	r3, #3
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003074:	2312      	movs	r3, #18
 8003076:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003078:	2301      	movs	r3, #1
 800307a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307c:	2303      	movs	r3, #3
 800307e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003080:	2304      	movs	r3, #4
 8003082:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003084:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003088:	4619      	mov	r1, r3
 800308a:	484b      	ldr	r0, [pc, #300]	; (80031b8 <HAL_I2C_MspInit+0x1e0>)
 800308c:	f001 ff62 	bl	8004f54 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003090:	4b46      	ldr	r3, [pc, #280]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	4a45      	ldr	r2, [pc, #276]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 8003096:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800309a:	6413      	str	r3, [r2, #64]	; 0x40
 800309c:	4b43      	ldr	r3, [pc, #268]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	69fb      	ldr	r3, [r7, #28]
}
 80030a8:	e079      	b.n	800319e <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a43      	ldr	r2, [pc, #268]	; (80031bc <HAL_I2C_MspInit+0x1e4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d146      	bne.n	8003142 <HAL_I2C_MspInit+0x16a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b4:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	4a3c      	ldr	r2, [pc, #240]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 80030ba:	f043 0304 	orr.w	r3, r3, #4
 80030be:	6313      	str	r3, [r2, #48]	; 0x30
 80030c0:	4b3a      	ldr	r3, [pc, #232]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030cc:	4b37      	ldr	r3, [pc, #220]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	4a36      	ldr	r2, [pc, #216]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6313      	str	r3, [r2, #48]	; 0x30
 80030d8:	4b34      	ldr	r3, [pc, #208]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SOC_I2C_SDA_3V3_Pin;
 80030e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030ea:	2312      	movs	r3, #18
 80030ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030ee:	2301      	movs	r3, #1
 80030f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f2:	2303      	movs	r3, #3
 80030f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80030f6:	2304      	movs	r3, #4
 80030f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SDA_3V3_GPIO_Port, &GPIO_InitStruct);
 80030fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030fe:	4619      	mov	r1, r3
 8003100:	482f      	ldr	r0, [pc, #188]	; (80031c0 <HAL_I2C_MspInit+0x1e8>)
 8003102:	f001 ff27 	bl	8004f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_I2C_SCL_3V3_Pin;
 8003106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800310a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800310c:	2312      	movs	r3, #18
 800310e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003110:	2301      	movs	r3, #1
 8003112:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003114:	2303      	movs	r3, #3
 8003116:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003118:	2304      	movs	r3, #4
 800311a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SCL_3V3_GPIO_Port, &GPIO_InitStruct);
 800311c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003120:	4619      	mov	r1, r3
 8003122:	4828      	ldr	r0, [pc, #160]	; (80031c4 <HAL_I2C_MspInit+0x1ec>)
 8003124:	f001 ff16 	bl	8004f54 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003128:	4b20      	ldr	r3, [pc, #128]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	4a1f      	ldr	r2, [pc, #124]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 800312e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003132:	6413      	str	r3, [r2, #64]	; 0x40
 8003134:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	693b      	ldr	r3, [r7, #16]
}
 8003140:	e02d      	b.n	800319e <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C4)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a20      	ldr	r2, [pc, #128]	; (80031c8 <HAL_I2C_MspInit+0x1f0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d128      	bne.n	800319e <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800314c:	4b17      	ldr	r3, [pc, #92]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	4a16      	ldr	r2, [pc, #88]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 8003152:	f043 0320 	orr.w	r3, r3, #32
 8003156:	6313      	str	r3, [r2, #48]	; 0x30
 8003158:	4b14      	ldr	r3, [pc, #80]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_ZION_I2C_SDA_Pin|STM_ZION_I2C_SCL_Pin;
 8003164:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800316a:	2312      	movs	r3, #18
 800316c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800316e:	2301      	movs	r3, #1
 8003170:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003172:	2303      	movs	r3, #3
 8003174:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003176:	2304      	movs	r3, #4
 8003178:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800317a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800317e:	4619      	mov	r1, r3
 8003180:	480d      	ldr	r0, [pc, #52]	; (80031b8 <HAL_I2C_MspInit+0x1e0>)
 8003182:	f001 fee7 	bl	8004f54 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	4a08      	ldr	r2, [pc, #32]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 800318c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003190:	6413      	str	r3, [r2, #64]	; 0x40
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_I2C_MspInit+0x1d4>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
}
 800319e:	bf00      	nop
 80031a0:	3740      	adds	r7, #64	; 0x40
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40005400 	.word	0x40005400
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40020400 	.word	0x40020400
 80031b4:	40005800 	.word	0x40005800
 80031b8:	40021400 	.word	0x40021400
 80031bc:	40005c00 	.word	0x40005c00
 80031c0:	40020800 	.word	0x40020800
 80031c4:	40020000 	.word	0x40020000
 80031c8:	40006000 	.word	0x40006000

080031cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <HAL_RTC_MspInit+0x2c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d105      	bne.n	80031ea <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80031de:	4b07      	ldr	r3, [pc, #28]	; (80031fc <HAL_RTC_MspInit+0x30>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	4a06      	ldr	r2, [pc, #24]	; (80031fc <HAL_RTC_MspInit+0x30>)
 80031e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031e8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40002800 	.word	0x40002800
 80031fc:	40023800 	.word	0x40023800

08003200 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08c      	sub	sp, #48	; 0x30
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003208:	f107 031c 	add.w	r3, r7, #28
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	60da      	str	r2, [r3, #12]
 8003216:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a40      	ldr	r2, [pc, #256]	; (8003320 <HAL_SPI_MspInit+0x120>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d130      	bne.n	8003284 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003222:	4b40      	ldr	r3, [pc, #256]	; (8003324 <HAL_SPI_MspInit+0x124>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	4a3f      	ldr	r2, [pc, #252]	; (8003324 <HAL_SPI_MspInit+0x124>)
 8003228:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800322c:	6453      	str	r3, [r2, #68]	; 0x44
 800322e:	4b3d      	ldr	r3, [pc, #244]	; (8003324 <HAL_SPI_MspInit+0x124>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003236:	61bb      	str	r3, [r7, #24]
 8003238:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800323a:	4b3a      	ldr	r3, [pc, #232]	; (8003324 <HAL_SPI_MspInit+0x124>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4a39      	ldr	r2, [pc, #228]	; (8003324 <HAL_SPI_MspInit+0x124>)
 8003240:	f043 0310 	orr.w	r3, r3, #16
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b37      	ldr	r3, [pc, #220]	; (8003324 <HAL_SPI_MspInit+0x124>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8003252:	2364      	movs	r3, #100	; 0x64
 8003254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003256:	2302      	movs	r3, #2
 8003258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325a:	2300      	movs	r3, #0
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325e:	2303      	movs	r3, #3
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003262:	2305      	movs	r3, #5
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003266:	f107 031c 	add.w	r3, r7, #28
 800326a:	4619      	mov	r1, r3
 800326c:	482e      	ldr	r0, [pc, #184]	; (8003328 <HAL_SPI_MspInit+0x128>)
 800326e:	f001 fe71 	bl	8004f54 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8003272:	2200      	movs	r2, #0
 8003274:	2105      	movs	r1, #5
 8003276:	2054      	movs	r0, #84	; 0x54
 8003278:	f001 fa3a 	bl	80046f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800327c:	2054      	movs	r0, #84	; 0x54
 800327e:	f001 fa53 	bl	8004728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003282:	e049      	b.n	8003318 <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI5)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a28      	ldr	r2, [pc, #160]	; (800332c <HAL_SPI_MspInit+0x12c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d144      	bne.n	8003318 <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800328e:	4b25      	ldr	r3, [pc, #148]	; (8003324 <HAL_SPI_MspInit+0x124>)
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	4a24      	ldr	r2, [pc, #144]	; (8003324 <HAL_SPI_MspInit+0x124>)
 8003294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003298:	6453      	str	r3, [r2, #68]	; 0x44
 800329a:	4b22      	ldr	r3, [pc, #136]	; (8003324 <HAL_SPI_MspInit+0x124>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80032a6:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <HAL_SPI_MspInit+0x124>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	4a1e      	ldr	r2, [pc, #120]	; (8003324 <HAL_SPI_MspInit+0x124>)
 80032ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b0:	6313      	str	r3, [r2, #48]	; 0x30
 80032b2:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <HAL_SPI_MspInit+0x124>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80032be:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_SPI_MspInit+0x124>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a18      	ldr	r2, [pc, #96]	; (8003324 <HAL_SPI_MspInit+0x124>)
 80032c4:	f043 0320 	orr.w	r3, r3, #32
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b16      	ldr	r3, [pc, #88]	; (8003324 <HAL_SPI_MspInit+0x124>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPARE_SS_L_3V3_Pin|SPARE_MISO_3V3_Pin|SPARE_SCLK_3V3_Pin;
 80032d6:	23e0      	movs	r3, #224	; 0xe0
 80032d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e2:	2303      	movs	r3, #3
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80032e6:	2305      	movs	r3, #5
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80032ea:	f107 031c 	add.w	r3, r7, #28
 80032ee:	4619      	mov	r1, r3
 80032f0:	480f      	ldr	r0, [pc, #60]	; (8003330 <HAL_SPI_MspInit+0x130>)
 80032f2:	f001 fe2f 	bl	8004f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPARE_MOSI_3V3_Pin;
 80032f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fc:	2302      	movs	r3, #2
 80032fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003304:	2303      	movs	r3, #3
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003308:	2305      	movs	r3, #5
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPARE_MOSI_3V3_GPIO_Port, &GPIO_InitStruct);
 800330c:	f107 031c 	add.w	r3, r7, #28
 8003310:	4619      	mov	r1, r3
 8003312:	4808      	ldr	r0, [pc, #32]	; (8003334 <HAL_SPI_MspInit+0x134>)
 8003314:	f001 fe1e 	bl	8004f54 <HAL_GPIO_Init>
}
 8003318:	bf00      	nop
 800331a:	3730      	adds	r7, #48	; 0x30
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40013400 	.word	0x40013400
 8003324:	40023800 	.word	0x40023800
 8003328:	40021000 	.word	0x40021000
 800332c:	40015000 	.word	0x40015000
 8003330:	40021c00 	.word	0x40021c00
 8003334:	40021400 	.word	0x40021400

08003338 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a13      	ldr	r2, [pc, #76]	; (8003394 <HAL_TIM_Base_MspInit+0x5c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d10c      	bne.n	8003364 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800334a:	4b13      	ldr	r3, [pc, #76]	; (8003398 <HAL_TIM_Base_MspInit+0x60>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	4a12      	ldr	r2, [pc, #72]	; (8003398 <HAL_TIM_Base_MspInit+0x60>)
 8003350:	f043 0304 	orr.w	r3, r3, #4
 8003354:	6413      	str	r3, [r2, #64]	; 0x40
 8003356:	4b10      	ldr	r3, [pc, #64]	; (8003398 <HAL_TIM_Base_MspInit+0x60>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003362:	e010      	b.n	8003386 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a0c      	ldr	r2, [pc, #48]	; (800339c <HAL_TIM_Base_MspInit+0x64>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d10b      	bne.n	8003386 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <HAL_TIM_Base_MspInit+0x60>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	4a09      	ldr	r2, [pc, #36]	; (8003398 <HAL_TIM_Base_MspInit+0x60>)
 8003374:	f043 0308 	orr.w	r3, r3, #8
 8003378:	6413      	str	r3, [r2, #64]	; 0x40
 800337a:	4b07      	ldr	r3, [pc, #28]	; (8003398 <HAL_TIM_Base_MspInit+0x60>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	68bb      	ldr	r3, [r7, #8]
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40000800 	.word	0x40000800
 8003398:	40023800 	.word	0x40023800
 800339c:	40000c00 	.word	0x40000c00

080033a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	; 0x28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a22      	ldr	r2, [pc, #136]	; (8003448 <HAL_TIM_MspPostInit+0xa8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d11c      	bne.n	80033fc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c2:	4b22      	ldr	r3, [pc, #136]	; (800344c <HAL_TIM_MspPostInit+0xac>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	4a21      	ldr	r2, [pc, #132]	; (800344c <HAL_TIM_MspPostInit+0xac>)
 80033c8:	f043 0302 	orr.w	r3, r3, #2
 80033cc:	6313      	str	r3, [r2, #48]	; 0x30
 80033ce:	4b1f      	ldr	r3, [pc, #124]	; (800344c <HAL_TIM_MspPostInit+0xac>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SPARE_TIM_Pin;
 80033da:	2340      	movs	r3, #64	; 0x40
 80033dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033de:	2302      	movs	r3, #2
 80033e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e6:	2300      	movs	r3, #0
 80033e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033ea:	2302      	movs	r3, #2
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPARE_TIM_GPIO_Port, &GPIO_InitStruct);
 80033ee:	f107 0314 	add.w	r3, r7, #20
 80033f2:	4619      	mov	r1, r3
 80033f4:	4816      	ldr	r0, [pc, #88]	; (8003450 <HAL_TIM_MspPostInit+0xb0>)
 80033f6:	f001 fdad 	bl	8004f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80033fa:	e021      	b.n	8003440 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a14      	ldr	r2, [pc, #80]	; (8003454 <HAL_TIM_MspPostInit+0xb4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d11c      	bne.n	8003440 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003406:	4b11      	ldr	r3, [pc, #68]	; (800344c <HAL_TIM_MspPostInit+0xac>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	4a10      	ldr	r2, [pc, #64]	; (800344c <HAL_TIM_MspPostInit+0xac>)
 800340c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003410:	6313      	str	r3, [r2, #48]	; 0x30
 8003412:	4b0e      	ldr	r3, [pc, #56]	; (800344c <HAL_TIM_MspPostInit+0xac>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|LCD_EXTCOMM_Pin;
 800341e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003424:	2302      	movs	r3, #2
 8003426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342c:	2300      	movs	r3, #0
 800342e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003430:	2302      	movs	r3, #2
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003434:	f107 0314 	add.w	r3, r7, #20
 8003438:	4619      	mov	r1, r3
 800343a:	4807      	ldr	r0, [pc, #28]	; (8003458 <HAL_TIM_MspPostInit+0xb8>)
 800343c:	f001 fd8a 	bl	8004f54 <HAL_GPIO_Init>
}
 8003440:	bf00      	nop
 8003442:	3728      	adds	r7, #40	; 0x28
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40000800 	.word	0x40000800
 800344c:	40023800 	.word	0x40023800
 8003450:	40020400 	.word	0x40020400
 8003454:	40000c00 	.word	0x40000c00
 8003458:	40021c00 	.word	0x40021c00

0800345c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08e      	sub	sp, #56	; 0x38
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a6c      	ldr	r2, [pc, #432]	; (800362c <HAL_UART_MspInit+0x1d0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d129      	bne.n	80034d2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800347e:	4b6c      	ldr	r3, [pc, #432]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	4a6b      	ldr	r2, [pc, #428]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 8003484:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003488:	6413      	str	r3, [r2, #64]	; 0x40
 800348a:	4b69      	ldr	r3, [pc, #420]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003492:	623b      	str	r3, [r7, #32]
 8003494:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003496:	4b66      	ldr	r3, [pc, #408]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	4a65      	ldr	r2, [pc, #404]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 800349c:	f043 0304 	orr.w	r3, r3, #4
 80034a0:	6313      	str	r3, [r2, #48]	; 0x30
 80034a2:	4b63      	ldr	r3, [pc, #396]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = SPARE_UART_RX_3V3_Pin|SPARE_UART_TX_3V3_Pin;
 80034ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b4:	2302      	movs	r3, #2
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034bc:	2303      	movs	r3, #3
 80034be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80034c0:	2308      	movs	r3, #8
 80034c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c8:	4619      	mov	r1, r3
 80034ca:	485a      	ldr	r0, [pc, #360]	; (8003634 <HAL_UART_MspInit+0x1d8>)
 80034cc:	f001 fd42 	bl	8004f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80034d0:	e0a7      	b.n	8003622 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART5)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a58      	ldr	r2, [pc, #352]	; (8003638 <HAL_UART_MspInit+0x1dc>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d174      	bne.n	80035c6 <HAL_UART_MspInit+0x16a>
    __HAL_RCC_UART5_CLK_ENABLE();
 80034dc:	4b54      	ldr	r3, [pc, #336]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	4a53      	ldr	r2, [pc, #332]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 80034e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e6:	6413      	str	r3, [r2, #64]	; 0x40
 80034e8:	4b51      	ldr	r3, [pc, #324]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f4:	4b4e      	ldr	r3, [pc, #312]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 80034f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f8:	4a4d      	ldr	r2, [pc, #308]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 80034fa:	f043 0304 	orr.w	r3, r3, #4
 80034fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003500:	4b4b      	ldr	r3, [pc, #300]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800350c:	4b48      	ldr	r3, [pc, #288]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	4a47      	ldr	r2, [pc, #284]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 8003512:	f043 0308 	orr.w	r3, r3, #8
 8003516:	6313      	str	r3, [r2, #48]	; 0x30
 8003518:	4b45      	ldr	r3, [pc, #276]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SOC_UART_TX_3V3_Pin;
 8003524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352a:	2302      	movs	r3, #2
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003532:	2303      	movs	r3, #3
 8003534:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003536:	2308      	movs	r3, #8
 8003538:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_TX_3V3_GPIO_Port, &GPIO_InitStruct);
 800353a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800353e:	4619      	mov	r1, r3
 8003540:	483c      	ldr	r0, [pc, #240]	; (8003634 <HAL_UART_MspInit+0x1d8>)
 8003542:	f001 fd07 	bl	8004f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_UART_RX_3V3_Pin;
 8003546:	2304      	movs	r3, #4
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354a:	2302      	movs	r3, #2
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	2300      	movs	r3, #0
 8003550:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003552:	2303      	movs	r3, #3
 8003554:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003556:	2308      	movs	r3, #8
 8003558:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_RX_3V3_GPIO_Port, &GPIO_InitStruct);
 800355a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800355e:	4619      	mov	r1, r3
 8003560:	4836      	ldr	r0, [pc, #216]	; (800363c <HAL_UART_MspInit+0x1e0>)
 8003562:	f001 fcf7 	bl	8004f54 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8003566:	4b36      	ldr	r3, [pc, #216]	; (8003640 <HAL_UART_MspInit+0x1e4>)
 8003568:	4a36      	ldr	r2, [pc, #216]	; (8003644 <HAL_UART_MspInit+0x1e8>)
 800356a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800356c:	4b34      	ldr	r3, [pc, #208]	; (8003640 <HAL_UART_MspInit+0x1e4>)
 800356e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003572:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003574:	4b32      	ldr	r3, [pc, #200]	; (8003640 <HAL_UART_MspInit+0x1e4>)
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800357a:	4b31      	ldr	r3, [pc, #196]	; (8003640 <HAL_UART_MspInit+0x1e4>)
 800357c:	2200      	movs	r2, #0
 800357e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003580:	4b2f      	ldr	r3, [pc, #188]	; (8003640 <HAL_UART_MspInit+0x1e4>)
 8003582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003586:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003588:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <HAL_UART_MspInit+0x1e4>)
 800358a:	2200      	movs	r2, #0
 800358c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800358e:	4b2c      	ldr	r3, [pc, #176]	; (8003640 <HAL_UART_MspInit+0x1e4>)
 8003590:	2200      	movs	r2, #0
 8003592:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8003594:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <HAL_UART_MspInit+0x1e4>)
 8003596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800359a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800359c:	4b28      	ldr	r3, [pc, #160]	; (8003640 <HAL_UART_MspInit+0x1e4>)
 800359e:	2200      	movs	r2, #0
 80035a0:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035a2:	4b27      	ldr	r3, [pc, #156]	; (8003640 <HAL_UART_MspInit+0x1e4>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80035a8:	4825      	ldr	r0, [pc, #148]	; (8003640 <HAL_UART_MspInit+0x1e4>)
 80035aa:	f001 f8cb 	bl	8004744 <HAL_DMA_Init>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 80035b4:	f7ff faf8 	bl	8002ba8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a21      	ldr	r2, [pc, #132]	; (8003640 <HAL_UART_MspInit+0x1e4>)
 80035bc:	66da      	str	r2, [r3, #108]	; 0x6c
 80035be:	4a20      	ldr	r2, [pc, #128]	; (8003640 <HAL_UART_MspInit+0x1e4>)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80035c4:	e02d      	b.n	8003622 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART7)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <HAL_UART_MspInit+0x1ec>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d128      	bne.n	8003622 <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_UART7_CLK_ENABLE();
 80035d0:	4b17      	ldr	r3, [pc, #92]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	4a16      	ldr	r2, [pc, #88]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 80035d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035da:	6413      	str	r3, [r2, #64]	; 0x40
 80035dc:	4b14      	ldr	r3, [pc, #80]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035e8:	4b11      	ldr	r3, [pc, #68]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	4a10      	ldr	r2, [pc, #64]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 80035ee:	f043 0310 	orr.w	r3, r3, #16
 80035f2:	6313      	str	r3, [r2, #48]	; 0x30
 80035f4:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <HAL_UART_MspInit+0x1d4>)
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FTDI_UART_RX_Pin|FTDI_UART_CTS_L_Pin|FTDI_UART_TX_Pin|FTDI_UART_RTS_L_Pin;
 8003600:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003606:	2302      	movs	r3, #2
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360e:	2303      	movs	r3, #3
 8003610:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003612:	2308      	movs	r3, #8
 8003614:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800361a:	4619      	mov	r1, r3
 800361c:	480b      	ldr	r0, [pc, #44]	; (800364c <HAL_UART_MspInit+0x1f0>)
 800361e:	f001 fc99 	bl	8004f54 <HAL_GPIO_Init>
}
 8003622:	bf00      	nop
 8003624:	3738      	adds	r7, #56	; 0x38
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40004c00 	.word	0x40004c00
 8003630:	40023800 	.word	0x40023800
 8003634:	40020800 	.word	0x40020800
 8003638:	40005000 	.word	0x40005000
 800363c:	40020c00 	.word	0x40020c00
 8003640:	2000cba8 	.word	0x2000cba8
 8003644:	40026010 	.word	0x40026010
 8003648:	40007800 	.word	0x40007800
 800364c:	40021000 	.word	0x40021000

08003650 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003658:	f107 0314 	add.w	r3, r7, #20
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	60da      	str	r2, [r3, #12]
 8003666:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003670:	d134      	bne.n	80036dc <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003672:	4b1c      	ldr	r3, [pc, #112]	; (80036e4 <HAL_PCD_MspInit+0x94>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <HAL_PCD_MspInit+0x94>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <HAL_PCD_MspInit+0x94>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 800368a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800368e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003690:	2302      	movs	r3, #2
 8003692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003698:	2303      	movs	r3, #3
 800369a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800369c:	230a      	movs	r3, #10
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a0:	f107 0314 	add.w	r3, r7, #20
 80036a4:	4619      	mov	r1, r3
 80036a6:	4810      	ldr	r0, [pc, #64]	; (80036e8 <HAL_PCD_MspInit+0x98>)
 80036a8:	f001 fc54 	bl	8004f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80036ac:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <HAL_PCD_MspInit+0x94>)
 80036ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b0:	4a0c      	ldr	r2, [pc, #48]	; (80036e4 <HAL_PCD_MspInit+0x94>)
 80036b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b6:	6353      	str	r3, [r2, #52]	; 0x34
 80036b8:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <HAL_PCD_MspInit+0x94>)
 80036ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <HAL_PCD_MspInit+0x94>)
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	4a06      	ldr	r2, [pc, #24]	; (80036e4 <HAL_PCD_MspInit+0x94>)
 80036ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036ce:	6453      	str	r3, [r2, #68]	; 0x44
 80036d0:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <HAL_PCD_MspInit+0x94>)
 80036d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80036dc:	bf00      	nop
 80036de:	3728      	adds	r7, #40	; 0x28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40020000 	.word	0x40020000

080036ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08c      	sub	sp, #48	; 0x30
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80036fc:	2200      	movs	r2, #0
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	2036      	movs	r0, #54	; 0x36
 8003702:	f000 fff5 	bl	80046f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003706:	2036      	movs	r0, #54	; 0x36
 8003708:	f001 f80e 	bl	8004728 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800370c:	4b1e      	ldr	r3, [pc, #120]	; (8003788 <HAL_InitTick+0x9c>)
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <HAL_InitTick+0x9c>)
 8003712:	f043 0310 	orr.w	r3, r3, #16
 8003716:	6413      	str	r3, [r2, #64]	; 0x40
 8003718:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <HAL_InitTick+0x9c>)
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003724:	f107 0210 	add.w	r2, r7, #16
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f003 f8d0 	bl	80068d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003734:	f003 f8a6 	bl	8006884 <HAL_RCC_GetPCLK1Freq>
 8003738:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800373a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373c:	4a13      	ldr	r2, [pc, #76]	; (800378c <HAL_InitTick+0xa0>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	0c9b      	lsrs	r3, r3, #18
 8003744:	3b01      	subs	r3, #1
 8003746:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <HAL_InitTick+0xa4>)
 800374a:	4a12      	ldr	r2, [pc, #72]	; (8003794 <HAL_InitTick+0xa8>)
 800374c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800374e:	4b10      	ldr	r3, [pc, #64]	; (8003790 <HAL_InitTick+0xa4>)
 8003750:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003754:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003756:	4a0e      	ldr	r2, [pc, #56]	; (8003790 <HAL_InitTick+0xa4>)
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <HAL_InitTick+0xa4>)
 800375e:	2200      	movs	r2, #0
 8003760:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003762:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_InitTick+0xa4>)
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003768:	4809      	ldr	r0, [pc, #36]	; (8003790 <HAL_InitTick+0xa4>)
 800376a:	f004 f9e7 	bl	8007b3c <HAL_TIM_Base_Init>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d104      	bne.n	800377e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003774:	4806      	ldr	r0, [pc, #24]	; (8003790 <HAL_InitTick+0xa4>)
 8003776:	f004 fa0d 	bl	8007b94 <HAL_TIM_Base_Start_IT>
 800377a:	4603      	mov	r3, r0
 800377c:	e000      	b.n	8003780 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
}
 8003780:	4618      	mov	r0, r3
 8003782:	3730      	adds	r7, #48	; 0x30
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40023800 	.word	0x40023800
 800378c:	431bde83 	.word	0x431bde83
 8003790:	2000cc10 	.word	0x2000cc10
 8003794:	40001000 	.word	0x40001000

08003798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800379c:	e7fe      	b.n	800379c <NMI_Handler+0x4>

0800379e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800379e:	b480      	push	{r7}
 80037a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037a2:	e7fe      	b.n	80037a2 <HardFault_Handler+0x4>

080037a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037a8:	e7fe      	b.n	80037a8 <MemManage_Handler+0x4>

080037aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037aa:	b480      	push	{r7}
 80037ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037ae:	e7fe      	b.n	80037ae <BusFault_Handler+0x4>

080037b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037b4:	e7fe      	b.n	80037b4 <UsageFault_Handler+0x4>

080037b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037b6:	b480      	push	{r7}
 80037b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80037c8:	4802      	ldr	r0, [pc, #8]	; (80037d4 <DMA1_Stream0_IRQHandler+0x10>)
 80037ca:	f001 f95b 	bl	8004a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	2000cba8 	.word	0x2000cba8

080037d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80037dc:	4805      	ldr	r0, [pc, #20]	; (80037f4 <ADC_IRQHandler+0x1c>)
 80037de:	f000 f967 	bl	8003ab0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80037e2:	4805      	ldr	r0, [pc, #20]	; (80037f8 <ADC_IRQHandler+0x20>)
 80037e4:	f000 f964 	bl	8003ab0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80037e8:	4804      	ldr	r0, [pc, #16]	; (80037fc <ADC_IRQHandler+0x24>)
 80037ea:	f000 f961 	bl	8003ab0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20007b1c 	.word	0x20007b1c
 80037f8:	20004e04 	.word	0x20004e04
 80037fc:	20007b68 	.word	0x20007b68

08003800 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003804:	4802      	ldr	r0, [pc, #8]	; (8003810 <TIM6_DAC_IRQHandler+0x10>)
 8003806:	f004 fa24 	bl	8007c52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	2000cc10 	.word	0x2000cc10

08003814 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003818:	4805      	ldr	r0, [pc, #20]	; (8003830 <DMA2_Stream0_IRQHandler+0x1c>)
 800381a:	f001 f933 	bl	8004a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc1);
 800381e:	4805      	ldr	r0, [pc, #20]	; (8003834 <DMA2_Stream0_IRQHandler+0x20>)
 8003820:	f000 fb76 	bl	8003f10 <HAL_ADC_Stop_DMA>
  adcRestart[0]=1;
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <DMA2_Stream0_IRQHandler+0x24>)
 8003826:	2201      	movs	r2, #1
 8003828:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20007c14 	.word	0x20007c14
 8003834:	20007b1c 	.word	0x20007b1c
 8003838:	20005348 	.word	0x20005348

0800383c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003840:	4805      	ldr	r0, [pc, #20]	; (8003858 <DMA2_Stream1_IRQHandler+0x1c>)
 8003842:	f001 f91f 	bl	8004a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 8003846:	4805      	ldr	r0, [pc, #20]	; (800385c <DMA2_Stream1_IRQHandler+0x20>)
 8003848:	f000 fb62 	bl	8003f10 <HAL_ADC_Stop_DMA>
  adcRestart[2]=1;
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <DMA2_Stream1_IRQHandler+0x24>)
 800384e:	2201      	movs	r2, #1
 8003850:	709a      	strb	r2, [r3, #2]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	200052e8 	.word	0x200052e8
 800385c:	20007b68 	.word	0x20007b68
 8003860:	20005348 	.word	0x20005348

08003864 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003868:	4805      	ldr	r0, [pc, #20]	; (8003880 <DMA2_Stream2_IRQHandler+0x1c>)
 800386a:	f001 f90b 	bl	8004a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc2);
 800386e:	4805      	ldr	r0, [pc, #20]	; (8003884 <DMA2_Stream2_IRQHandler+0x20>)
 8003870:	f000 fb4e 	bl	8003f10 <HAL_ADC_Stop_DMA>
  adcRestart[1]=1;
 8003874:	4b04      	ldr	r3, [pc, #16]	; (8003888 <DMA2_Stream2_IRQHandler+0x24>)
 8003876:	2201      	movs	r2, #1
 8003878:	705a      	strb	r2, [r3, #1]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	2000cb48 	.word	0x2000cb48
 8003884:	20004e04 	.word	0x20004e04
 8003888:	20005348 	.word	0x20005348

0800388c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8003890:	4802      	ldr	r0, [pc, #8]	; (800389c <SPI4_IRQHandler+0x10>)
 8003892:	f003 ff17 	bl	80076c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20007bb0 	.word	0x20007bb0

080038a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038a8:	4a14      	ldr	r2, [pc, #80]	; (80038fc <_sbrk+0x5c>)
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <_sbrk+0x60>)
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038b4:	4b13      	ldr	r3, [pc, #76]	; (8003904 <_sbrk+0x64>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d102      	bne.n	80038c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <_sbrk+0x64>)
 80038be:	4a12      	ldr	r2, [pc, #72]	; (8003908 <_sbrk+0x68>)
 80038c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <_sbrk+0x64>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d207      	bcs.n	80038e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038d0:	f008 fe44 	bl	800c55c <__errno>
 80038d4:	4602      	mov	r2, r0
 80038d6:	230c      	movs	r3, #12
 80038d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80038da:	f04f 33ff 	mov.w	r3, #4294967295
 80038de:	e009      	b.n	80038f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038e0:	4b08      	ldr	r3, [pc, #32]	; (8003904 <_sbrk+0x64>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <_sbrk+0x64>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	4a05      	ldr	r2, [pc, #20]	; (8003904 <_sbrk+0x64>)
 80038f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038f2:	68fb      	ldr	r3, [r7, #12]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20080000 	.word	0x20080000
 8003900:	00000400 	.word	0x00000400
 8003904:	20000320 	.word	0x20000320
 8003908:	2000cc98 	.word	0x2000cc98

0800390c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003910:	4b08      	ldr	r3, [pc, #32]	; (8003934 <SystemInit+0x28>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	4a07      	ldr	r2, [pc, #28]	; (8003934 <SystemInit+0x28>)
 8003918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800391c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <SystemInit+0x28>)
 8003922:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003926:	609a      	str	r2, [r3, #8]
#endif
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003970 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800393c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800393e:	e003      	b.n	8003948 <LoopCopyDataInit>

08003940 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003942:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003944:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003946:	3104      	adds	r1, #4

08003948 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003948:	480b      	ldr	r0, [pc, #44]	; (8003978 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800394a:	4b0c      	ldr	r3, [pc, #48]	; (800397c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800394c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800394e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003950:	d3f6      	bcc.n	8003940 <CopyDataInit>
  ldr  r2, =_sbss
 8003952:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003954:	e002      	b.n	800395c <LoopFillZerobss>

08003956 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003956:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003958:	f842 3b04 	str.w	r3, [r2], #4

0800395c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800395c:	4b09      	ldr	r3, [pc, #36]	; (8003984 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800395e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003960:	d3f9      	bcc.n	8003956 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003962:	f7ff ffd3 	bl	800390c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003966:	f008 fdff 	bl	800c568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800396a:	f7fc feb1 	bl	80006d0 <main>
  bx  lr    
 800396e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003970:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003974:	08010298 	.word	0x08010298
  ldr  r0, =_sdata
 8003978:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800397c:	20000298 	.word	0x20000298
  ldr  r2, =_sbss
 8003980:	20000298 	.word	0x20000298
  ldr  r3, = _ebss
 8003984:	2000cc98 	.word	0x2000cc98

08003988 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003988:	e7fe      	b.n	8003988 <CAN1_RX0_IRQHandler>

0800398a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800398e:	2003      	movs	r0, #3
 8003990:	f000 fea3 	bl	80046da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003994:	2000      	movs	r0, #0
 8003996:	f7ff fea9 	bl	80036ec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800399a:	f7ff f909 	bl	8002bb0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_IncTick+0x20>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	461a      	mov	r2, r3
 80039ae:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <HAL_IncTick+0x24>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4413      	add	r3, r2
 80039b4:	4a04      	ldr	r2, [pc, #16]	; (80039c8 <HAL_IncTick+0x24>)
 80039b6:	6013      	str	r3, [r2, #0]
}
 80039b8:	bf00      	nop
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	200000c0 	.word	0x200000c0
 80039c8:	2000cc50 	.word	0x2000cc50

080039cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return uwTick;
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <HAL_GetTick+0x14>)
 80039d2:	681b      	ldr	r3, [r3, #0]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	2000cc50 	.word	0x2000cc50

080039e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039ec:	f7ff ffee 	bl	80039cc <HAL_GetTick>
 80039f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fc:	d005      	beq.n	8003a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039fe:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_Delay+0x40>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a0a:	bf00      	nop
 8003a0c:	f7ff ffde 	bl	80039cc <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d8f7      	bhi.n	8003a0c <HAL_Delay+0x28>
  {
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	200000c0 	.word	0x200000c0

08003a28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e031      	b.n	8003aa2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff f8da 	bl	8002c00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d116      	bne.n	8003a94 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a6a:	4b10      	ldr	r3, [pc, #64]	; (8003aac <HAL_ADC_Init+0x84>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	f043 0202 	orr.w	r2, r3, #2
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fbfc 	bl	8004274 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f023 0303 	bic.w	r3, r3, #3
 8003a8a:	f043 0201 	orr.w	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
 8003a92:	e001      	b.n	8003a98 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	ffffeefd 	.word	0xffffeefd

08003ab0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	2300      	movs	r3, #0
 8003abe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	bf0c      	ite	eq
 8003ace:	2301      	moveq	r3, #1
 8003ad0:	2300      	movne	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d049      	beq.n	8003b86 <HAL_ADC_IRQHandler+0xd6>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d046      	beq.n	8003b86 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d105      	bne.n	8003b10 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d12b      	bne.n	8003b76 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d127      	bne.n	8003b76 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d006      	beq.n	8003b42 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d119      	bne.n	8003b76 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0220 	bic.w	r2, r2, #32
 8003b50:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d105      	bne.n	8003b76 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f043 0201 	orr.w	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fe feba 	bl	80028f0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0212 	mvn.w	r2, #18
 8003b84:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba6:	2b80      	cmp	r3, #128	; 0x80
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d057      	beq.n	8003c68 <HAL_ADC_IRQHandler+0x1b8>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d054      	beq.n	8003c68 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d105      	bne.n	8003bd6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d139      	bne.n	8003c58 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d006      	beq.n	8003c00 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d12b      	bne.n	8003c58 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d124      	bne.n	8003c58 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d11d      	bne.n	8003c58 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d119      	bne.n	8003c58 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d105      	bne.n	8003c58 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	f043 0201 	orr.w	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fc87 	bl	800456c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f06f 020c 	mvn.w	r2, #12
 8003c66:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	bf0c      	ite	eq
 8003c76:	2301      	moveq	r3, #1
 8003c78:	2300      	movne	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c88:	2b40      	cmp	r3, #64	; 0x40
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d017      	beq.n	8003cca <HAL_ADC_IRQHandler+0x21a>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d014      	beq.n	8003cca <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d10d      	bne.n	8003cca <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f97c 	bl	8003fb8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0201 	mvn.w	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cee:	bf0c      	ite	eq
 8003cf0:	2301      	moveq	r3, #1
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d015      	beq.n	8003d2a <HAL_ADC_IRQHandler+0x27a>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d012      	beq.n	8003d2a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d08:	f043 0202 	orr.w	r2, r3, #2
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f06f 0220 	mvn.w	r2, #32
 8003d18:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f956 	bl	8003fcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0220 	mvn.w	r2, #32
 8003d28:	601a      	str	r2, [r3, #0]
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_ADC_Start_DMA+0x1e>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e0c7      	b.n	8003ee2 <HAL_ADC_Start_DMA+0x1ae>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d018      	beq.n	8003d9a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003d78:	4b5c      	ldr	r3, [pc, #368]	; (8003eec <HAL_ADC_Start_DMA+0x1b8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a5c      	ldr	r2, [pc, #368]	; (8003ef0 <HAL_ADC_Start_DMA+0x1bc>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	0c9a      	lsrs	r2, r3, #18
 8003d84:	4613      	mov	r3, r2
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	4413      	add	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003d8c:	e002      	b.n	8003d94 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f9      	bne.n	8003d8e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	f040 809b 	bne.w	8003ee0 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dae:	4b51      	ldr	r3, [pc, #324]	; (8003ef4 <HAL_ADC_Start_DMA+0x1c0>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d007      	beq.n	8003dd8 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de4:	d106      	bne.n	8003df4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	f023 0206 	bic.w	r2, r3, #6
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	645a      	str	r2, [r3, #68]	; 0x44
 8003df2:	e002      	b.n	8003dfa <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	4a3c      	ldr	r2, [pc, #240]	; (8003ef8 <HAL_ADC_Start_DMA+0x1c4>)
 8003e08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	4a3b      	ldr	r2, [pc, #236]	; (8003efc <HAL_ADC_Start_DMA+0x1c8>)
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	4a3a      	ldr	r2, [pc, #232]	; (8003f00 <HAL_ADC_Start_DMA+0x1cc>)
 8003e18:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e22:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003e32:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e42:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	334c      	adds	r3, #76	; 0x4c
 8003e4e:	4619      	mov	r1, r3
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f000 fd24 	bl	80048a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003e58:	4b2a      	ldr	r3, [pc, #168]	; (8003f04 <HAL_ADC_Start_DMA+0x1d0>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10f      	bne.n	8003e84 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d136      	bne.n	8003ee0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e80:	609a      	str	r2, [r3, #8]
 8003e82:	e02d      	b.n	8003ee0 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1f      	ldr	r2, [pc, #124]	; (8003f08 <HAL_ADC_Start_DMA+0x1d4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d10e      	bne.n	8003eac <HAL_ADC_Start_DMA+0x178>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d107      	bne.n	8003eac <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003eaa:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003eac:	4b15      	ldr	r3, [pc, #84]	; (8003f04 <HAL_ADC_Start_DMA+0x1d0>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d113      	bne.n	8003ee0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a13      	ldr	r2, [pc, #76]	; (8003f0c <HAL_ADC_Start_DMA+0x1d8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d10e      	bne.n	8003ee0 <HAL_ADC_Start_DMA+0x1ac>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d107      	bne.n	8003ee0 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ede:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	200000b8 	.word	0x200000b8
 8003ef0:	431bde83 	.word	0x431bde83
 8003ef4:	fffff8fe 	.word	0xfffff8fe
 8003ef8:	08004469 	.word	0x08004469
 8003efc:	08004523 	.word	0x08004523
 8003f00:	0800453f 	.word	0x0800453f
 8003f04:	40012300 	.word	0x40012300
 8003f08:	40012000 	.word	0x40012000
 8003f0c:	40012200 	.word	0x40012200

08003f10 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_ADC_Stop_DMA+0x1a>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e036      	b.n	8003f98 <HAL_ADC_Stop_DMA+0x88>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0201 	bic.w	r2, r2, #1
 8003f40:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d11e      	bne.n	8003f8e <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f5e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fcfb 	bl	8004960 <HAL_DMA_Abort>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003f7c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f82:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <HAL_ADC_Stop_DMA+0x90>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	ffffeefe 	.word	0xffffeefe

08003fa4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x1c>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e12a      	b.n	8004252 <HAL_ADC_ConfigChannel+0x272>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b09      	cmp	r3, #9
 800400a:	d93a      	bls.n	8004082 <HAL_ADC_ConfigChannel+0xa2>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004014:	d035      	beq.n	8004082 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68d9      	ldr	r1, [r3, #12]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	b29b      	uxth	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	4613      	mov	r3, r2
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	4413      	add	r3, r2
 800402a:	3b1e      	subs	r3, #30
 800402c:	2207      	movs	r2, #7
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43da      	mvns	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	400a      	ands	r2, r1
 800403a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a87      	ldr	r2, [pc, #540]	; (8004260 <HAL_ADC_ConfigChannel+0x280>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d10a      	bne.n	800405c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68d9      	ldr	r1, [r3, #12]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	061a      	lsls	r2, r3, #24
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800405a:	e035      	b.n	80040c8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68d9      	ldr	r1, [r3, #12]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	b29b      	uxth	r3, r3
 800406c:	4618      	mov	r0, r3
 800406e:	4603      	mov	r3, r0
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	4403      	add	r3, r0
 8004074:	3b1e      	subs	r3, #30
 8004076:	409a      	lsls	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004080:	e022      	b.n	80040c8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6919      	ldr	r1, [r3, #16]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	b29b      	uxth	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	4613      	mov	r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4413      	add	r3, r2
 8004096:	2207      	movs	r2, #7
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43da      	mvns	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	400a      	ands	r2, r1
 80040a4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6919      	ldr	r1, [r3, #16]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	4618      	mov	r0, r3
 80040b8:	4603      	mov	r3, r0
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	4403      	add	r3, r0
 80040be:	409a      	lsls	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b06      	cmp	r3, #6
 80040ce:	d824      	bhi.n	800411a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	3b05      	subs	r3, #5
 80040e2:	221f      	movs	r2, #31
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43da      	mvns	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	400a      	ands	r2, r1
 80040f0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	4618      	mov	r0, r3
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	3b05      	subs	r3, #5
 800410c:	fa00 f203 	lsl.w	r2, r0, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	635a      	str	r2, [r3, #52]	; 0x34
 8004118:	e04c      	b.n	80041b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b0c      	cmp	r3, #12
 8004120:	d824      	bhi.n	800416c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	3b23      	subs	r3, #35	; 0x23
 8004134:	221f      	movs	r2, #31
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43da      	mvns	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	400a      	ands	r2, r1
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	4618      	mov	r0, r3
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	3b23      	subs	r3, #35	; 0x23
 800415e:	fa00 f203 	lsl.w	r2, r0, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
 800416a:	e023      	b.n	80041b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	3b41      	subs	r3, #65	; 0x41
 800417e:	221f      	movs	r2, #31
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	43da      	mvns	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	400a      	ands	r2, r1
 800418c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	b29b      	uxth	r3, r3
 800419a:	4618      	mov	r0, r3
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	3b41      	subs	r3, #65	; 0x41
 80041a8:	fa00 f203 	lsl.w	r2, r0, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a2a      	ldr	r2, [pc, #168]	; (8004264 <HAL_ADC_ConfigChannel+0x284>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d10a      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x1f4>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041c6:	d105      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80041c8:	4b27      	ldr	r3, [pc, #156]	; (8004268 <HAL_ADC_ConfigChannel+0x288>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4a26      	ldr	r2, [pc, #152]	; (8004268 <HAL_ADC_ConfigChannel+0x288>)
 80041ce:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80041d2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a22      	ldr	r2, [pc, #136]	; (8004264 <HAL_ADC_ConfigChannel+0x284>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d109      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x212>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b12      	cmp	r3, #18
 80041e4:	d105      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80041e6:	4b20      	ldr	r3, [pc, #128]	; (8004268 <HAL_ADC_ConfigChannel+0x288>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4a1f      	ldr	r2, [pc, #124]	; (8004268 <HAL_ADC_ConfigChannel+0x288>)
 80041ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041f0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1b      	ldr	r2, [pc, #108]	; (8004264 <HAL_ADC_ConfigChannel+0x284>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d125      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x268>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a17      	ldr	r2, [pc, #92]	; (8004260 <HAL_ADC_ConfigChannel+0x280>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d003      	beq.n	800420e <HAL_ADC_ConfigChannel+0x22e>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b11      	cmp	r3, #17
 800420c:	d11c      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800420e:	4b16      	ldr	r3, [pc, #88]	; (8004268 <HAL_ADC_ConfigChannel+0x288>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4a15      	ldr	r2, [pc, #84]	; (8004268 <HAL_ADC_ConfigChannel+0x288>)
 8004214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004218:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a10      	ldr	r2, [pc, #64]	; (8004260 <HAL_ADC_ConfigChannel+0x280>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d111      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004224:	4b11      	ldr	r3, [pc, #68]	; (800426c <HAL_ADC_ConfigChannel+0x28c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a11      	ldr	r2, [pc, #68]	; (8004270 <HAL_ADC_ConfigChannel+0x290>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	0c9a      	lsrs	r2, r3, #18
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800423a:	e002      	b.n	8004242 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3b01      	subs	r3, #1
 8004240:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f9      	bne.n	800423c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	10000012 	.word	0x10000012
 8004264:	40012000 	.word	0x40012000
 8004268:	40012300 	.word	0x40012300
 800426c:	200000b8 	.word	0x200000b8
 8004270:	431bde83 	.word	0x431bde83

08004274 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800427c:	4b78      	ldr	r3, [pc, #480]	; (8004460 <ADC_Init+0x1ec>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	4a77      	ldr	r2, [pc, #476]	; (8004460 <ADC_Init+0x1ec>)
 8004282:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004286:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004288:	4b75      	ldr	r3, [pc, #468]	; (8004460 <ADC_Init+0x1ec>)
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	4973      	ldr	r1, [pc, #460]	; (8004460 <ADC_Init+0x1ec>)
 8004292:	4313      	orrs	r3, r2
 8004294:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	021a      	lsls	r2, r3, #8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6899      	ldr	r1, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	4a58      	ldr	r2, [pc, #352]	; (8004464 <ADC_Init+0x1f0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d022      	beq.n	800434e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004316:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6899      	ldr	r1, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004338:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6899      	ldr	r1, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	609a      	str	r2, [r3, #8]
 800434c:	e00f      	b.n	800436e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800435c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800436c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0202 	bic.w	r2, r2, #2
 800437c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6899      	ldr	r1, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	005a      	lsls	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01b      	beq.n	80043d4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6859      	ldr	r1, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	3b01      	subs	r3, #1
 80043c8:	035a      	lsls	r2, r3, #13
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	e007      	b.n	80043e4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	3b01      	subs	r3, #1
 8004400:	051a      	lsls	r2, r3, #20
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004418:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6899      	ldr	r1, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004426:	025a      	lsls	r2, r3, #9
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6899      	ldr	r1, [r3, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	029a      	lsls	r2, r3, #10
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	609a      	str	r2, [r3, #8]
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	40012300 	.word	0x40012300
 8004464:	0f000001 	.word	0x0f000001

08004468 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800447e:	2b00      	cmp	r3, #0
 8004480:	d13c      	bne.n	80044fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d12b      	bne.n	80044f4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d127      	bne.n	80044f4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d006      	beq.n	80044c0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d119      	bne.n	80044f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0220 	bic.w	r2, r2, #32
 80044ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d105      	bne.n	80044f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	f043 0201 	orr.w	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f7fe f9fb 	bl	80028f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044fa:	e00e      	b.n	800451a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	f003 0310 	and.w	r3, r3, #16
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7ff fd5f 	bl	8003fcc <HAL_ADC_ErrorCallback>
}
 800450e:	e004      	b.n	800451a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	4798      	blx	r3
}
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7ff fd37 	bl	8003fa4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2240      	movs	r2, #64	; 0x40
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	f043 0204 	orr.w	r2, r3, #4
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff fd34 	bl	8003fcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004564:	bf00      	nop
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004590:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <__NVIC_SetPriorityGrouping+0x40>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800459c:	4013      	ands	r3, r2
 800459e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <__NVIC_SetPriorityGrouping+0x44>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045ae:	4a04      	ldr	r2, [pc, #16]	; (80045c0 <__NVIC_SetPriorityGrouping+0x40>)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	60d3      	str	r3, [r2, #12]
}
 80045b4:	bf00      	nop
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	e000ed00 	.word	0xe000ed00
 80045c4:	05fa0000 	.word	0x05fa0000

080045c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045cc:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <__NVIC_GetPriorityGrouping+0x18>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	0a1b      	lsrs	r3, r3, #8
 80045d2:	f003 0307 	and.w	r3, r3, #7
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000ed00 	.word	0xe000ed00

080045e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	db0b      	blt.n	800460e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	f003 021f 	and.w	r2, r3, #31
 80045fc:	4907      	ldr	r1, [pc, #28]	; (800461c <__NVIC_EnableIRQ+0x38>)
 80045fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004602:	095b      	lsrs	r3, r3, #5
 8004604:	2001      	movs	r0, #1
 8004606:	fa00 f202 	lsl.w	r2, r0, r2
 800460a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	e000e100 	.word	0xe000e100

08004620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	6039      	str	r1, [r7, #0]
 800462a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800462c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004630:	2b00      	cmp	r3, #0
 8004632:	db0a      	blt.n	800464a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	b2da      	uxtb	r2, r3
 8004638:	490c      	ldr	r1, [pc, #48]	; (800466c <__NVIC_SetPriority+0x4c>)
 800463a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463e:	0112      	lsls	r2, r2, #4
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	440b      	add	r3, r1
 8004644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004648:	e00a      	b.n	8004660 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	b2da      	uxtb	r2, r3
 800464e:	4908      	ldr	r1, [pc, #32]	; (8004670 <__NVIC_SetPriority+0x50>)
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	3b04      	subs	r3, #4
 8004658:	0112      	lsls	r2, r2, #4
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	440b      	add	r3, r1
 800465e:	761a      	strb	r2, [r3, #24]
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	e000e100 	.word	0xe000e100
 8004670:	e000ed00 	.word	0xe000ed00

08004674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004674:	b480      	push	{r7}
 8004676:	b089      	sub	sp, #36	; 0x24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f1c3 0307 	rsb	r3, r3, #7
 800468e:	2b04      	cmp	r3, #4
 8004690:	bf28      	it	cs
 8004692:	2304      	movcs	r3, #4
 8004694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	3304      	adds	r3, #4
 800469a:	2b06      	cmp	r3, #6
 800469c:	d902      	bls.n	80046a4 <NVIC_EncodePriority+0x30>
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	3b03      	subs	r3, #3
 80046a2:	e000      	b.n	80046a6 <NVIC_EncodePriority+0x32>
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a8:	f04f 32ff 	mov.w	r2, #4294967295
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	43da      	mvns	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	401a      	ands	r2, r3
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046bc:	f04f 31ff 	mov.w	r1, #4294967295
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	fa01 f303 	lsl.w	r3, r1, r3
 80046c6:	43d9      	mvns	r1, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046cc:	4313      	orrs	r3, r2
         );
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3724      	adds	r7, #36	; 0x24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff ff4c 	bl	8004580 <__NVIC_SetPriorityGrouping>
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004702:	f7ff ff61 	bl	80045c8 <__NVIC_GetPriorityGrouping>
 8004706:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	6978      	ldr	r0, [r7, #20]
 800470e:	f7ff ffb1 	bl	8004674 <NVIC_EncodePriority>
 8004712:	4602      	mov	r2, r0
 8004714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004718:	4611      	mov	r1, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff ff80 	bl	8004620 <__NVIC_SetPriority>
}
 8004720:	bf00      	nop
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff ff54 	bl	80045e4 <__NVIC_EnableIRQ>
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004750:	f7ff f93c 	bl	80039cc <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e099      	b.n	8004894 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0201 	bic.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004780:	e00f      	b.n	80047a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004782:	f7ff f923 	bl	80039cc <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b05      	cmp	r3, #5
 800478e:	d908      	bls.n	80047a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2203      	movs	r2, #3
 800479a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e078      	b.n	8004894 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e8      	bne.n	8004782 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4b38      	ldr	r3, [pc, #224]	; (800489c <HAL_DMA_Init+0x158>)
 80047bc:	4013      	ands	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d107      	bne.n	800480c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	4313      	orrs	r3, r2
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f023 0307 	bic.w	r3, r3, #7
 8004822:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	2b04      	cmp	r3, #4
 8004834:	d117      	bne.n	8004866 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00e      	beq.n	8004866 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fb09 	bl	8004e60 <DMA_CheckFifoParam>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d008      	beq.n	8004866 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2240      	movs	r2, #64	; 0x40
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004862:	2301      	movs	r3, #1
 8004864:	e016      	b.n	8004894 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fac0 	bl	8004df4 <DMA_CalcBaseAndBitshift>
 8004874:	4603      	mov	r3, r0
 8004876:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487c:	223f      	movs	r2, #63	; 0x3f
 800487e:	409a      	lsls	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	e010803f 	.word	0xe010803f

080048a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <HAL_DMA_Start_IT+0x26>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e048      	b.n	8004958 <HAL_DMA_Start_IT+0xb8>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d137      	bne.n	800494a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2202      	movs	r2, #2
 80048de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 fa52 	bl	8004d98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f8:	223f      	movs	r2, #63	; 0x3f
 80048fa:	409a      	lsls	r2, r3
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0216 	orr.w	r2, r2, #22
 800490e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695a      	ldr	r2, [r3, #20]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800491e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0208 	orr.w	r2, r2, #8
 8004936:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	e005      	b.n	8004956 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004952:	2302      	movs	r3, #2
 8004954:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004956:	7dfb      	ldrb	r3, [r7, #23]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800496e:	f7ff f82d 	bl	80039cc <HAL_GetTick>
 8004972:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d008      	beq.n	8004992 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2280      	movs	r2, #128	; 0x80
 8004984:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e052      	b.n	8004a38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0216 	bic.w	r2, r2, #22
 80049a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695a      	ldr	r2, [r3, #20]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d103      	bne.n	80049c2 <HAL_DMA_Abort+0x62>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0208 	bic.w	r2, r2, #8
 80049d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0201 	bic.w	r2, r2, #1
 80049e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049e2:	e013      	b.n	8004a0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049e4:	f7fe fff2 	bl	80039cc <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b05      	cmp	r3, #5
 80049f0:	d90c      	bls.n	8004a0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2203      	movs	r2, #3
 8004a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e015      	b.n	8004a38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e4      	bne.n	80049e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1e:	223f      	movs	r2, #63	; 0x3f
 8004a20:	409a      	lsls	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d004      	beq.n	8004a5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2280      	movs	r2, #128	; 0x80
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e00c      	b.n	8004a78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2205      	movs	r2, #5
 8004a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0201 	bic.w	r2, r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004a90:	4b92      	ldr	r3, [pc, #584]	; (8004cdc <HAL_DMA_IRQHandler+0x258>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a92      	ldr	r2, [pc, #584]	; (8004ce0 <HAL_DMA_IRQHandler+0x25c>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	0a9b      	lsrs	r3, r3, #10
 8004a9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aae:	2208      	movs	r2, #8
 8004ab0:	409a      	lsls	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01a      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d013      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0204 	bic.w	r2, r2, #4
 8004ad6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004adc:	2208      	movs	r2, #8
 8004ade:	409a      	lsls	r2, r3
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae8:	f043 0201 	orr.w	r2, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af4:	2201      	movs	r2, #1
 8004af6:	409a      	lsls	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d012      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b12:	2201      	movs	r2, #1
 8004b14:	409a      	lsls	r2, r3
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1e:	f043 0202 	orr.w	r2, r3, #2
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2a:	2204      	movs	r2, #4
 8004b2c:	409a      	lsls	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4013      	ands	r3, r2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d012      	beq.n	8004b5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00b      	beq.n	8004b5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b48:	2204      	movs	r2, #4
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b54:	f043 0204 	orr.w	r2, r3, #4
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b60:	2210      	movs	r2, #16
 8004b62:	409a      	lsls	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d043      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d03c      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7e:	2210      	movs	r2, #16
 8004b80:	409a      	lsls	r2, r3
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d018      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d108      	bne.n	8004bb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d024      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	4798      	blx	r3
 8004bb2:	e01f      	b.n	8004bf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01b      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	4798      	blx	r3
 8004bc4:	e016      	b.n	8004bf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d107      	bne.n	8004be4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0208 	bic.w	r2, r2, #8
 8004be2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	409a      	lsls	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 808e 	beq.w	8004d22 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0310 	and.w	r3, r3, #16
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8086 	beq.w	8004d22 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	409a      	lsls	r2, r3
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b05      	cmp	r3, #5
 8004c2c:	d136      	bne.n	8004c9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0216 	bic.w	r2, r2, #22
 8004c3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695a      	ldr	r2, [r3, #20]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d103      	bne.n	8004c5e <HAL_DMA_IRQHandler+0x1da>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0208 	bic.w	r2, r2, #8
 8004c6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c72:	223f      	movs	r2, #63	; 0x3f
 8004c74:	409a      	lsls	r2, r3
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d07d      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	4798      	blx	r3
        }
        return;
 8004c9a:	e078      	b.n	8004d8e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d01c      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d108      	bne.n	8004cca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d030      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4798      	blx	r3
 8004cc8:	e02b      	b.n	8004d22 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d027      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	4798      	blx	r3
 8004cda:	e022      	b.n	8004d22 <HAL_DMA_IRQHandler+0x29e>
 8004cdc:	200000b8 	.word	0x200000b8
 8004ce0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10f      	bne.n	8004d12 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0210 	bic.w	r2, r2, #16
 8004d00:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d032      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d022      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2205      	movs	r2, #5
 8004d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0201 	bic.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	3301      	adds	r3, #1
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d307      	bcc.n	8004d6a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1f2      	bne.n	8004d4e <HAL_DMA_IRQHandler+0x2ca>
 8004d68:	e000      	b.n	8004d6c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004d6a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	4798      	blx	r3
 8004d8c:	e000      	b.n	8004d90 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004d8e:	bf00      	nop
    }
  }
}
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop

08004d98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004db4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d108      	bne.n	8004dd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004dd6:	e007      	b.n	8004de8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	60da      	str	r2, [r3, #12]
}
 8004de8:	bf00      	nop
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	3b10      	subs	r3, #16
 8004e04:	4a13      	ldr	r2, [pc, #76]	; (8004e54 <DMA_CalcBaseAndBitshift+0x60>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	091b      	lsrs	r3, r3, #4
 8004e0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e0e:	4a12      	ldr	r2, [pc, #72]	; (8004e58 <DMA_CalcBaseAndBitshift+0x64>)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d908      	bls.n	8004e34 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	461a      	mov	r2, r3
 8004e28:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <DMA_CalcBaseAndBitshift+0x68>)
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	1d1a      	adds	r2, r3, #4
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	659a      	str	r2, [r3, #88]	; 0x58
 8004e32:	e006      	b.n	8004e42 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <DMA_CalcBaseAndBitshift+0x68>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	aaaaaaab 	.word	0xaaaaaaab
 8004e58:	0800ffcc 	.word	0x0800ffcc
 8004e5c:	fffffc00 	.word	0xfffffc00

08004e60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d11f      	bne.n	8004eba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d855      	bhi.n	8004f2c <DMA_CheckFifoParam+0xcc>
 8004e80:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <DMA_CheckFifoParam+0x28>)
 8004e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e86:	bf00      	nop
 8004e88:	08004e99 	.word	0x08004e99
 8004e8c:	08004eab 	.word	0x08004eab
 8004e90:	08004e99 	.word	0x08004e99
 8004e94:	08004f2d 	.word	0x08004f2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d045      	beq.n	8004f30 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ea8:	e042      	b.n	8004f30 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004eb2:	d13f      	bne.n	8004f34 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eb8:	e03c      	b.n	8004f34 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec2:	d121      	bne.n	8004f08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d836      	bhi.n	8004f38 <DMA_CheckFifoParam+0xd8>
 8004eca:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <DMA_CheckFifoParam+0x70>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004ee1 	.word	0x08004ee1
 8004ed4:	08004ee7 	.word	0x08004ee7
 8004ed8:	08004ee1 	.word	0x08004ee1
 8004edc:	08004ef9 	.word	0x08004ef9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee4:	e02f      	b.n	8004f46 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d024      	beq.n	8004f3c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ef6:	e021      	b.n	8004f3c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f00:	d11e      	bne.n	8004f40 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f06:	e01b      	b.n	8004f40 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d902      	bls.n	8004f14 <DMA_CheckFifoParam+0xb4>
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d003      	beq.n	8004f1a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f12:	e018      	b.n	8004f46 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
      break;
 8004f18:	e015      	b.n	8004f46 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00e      	beq.n	8004f44 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2a:	e00b      	b.n	8004f44 <DMA_CheckFifoParam+0xe4>
      break;
 8004f2c:	bf00      	nop
 8004f2e:	e00a      	b.n	8004f46 <DMA_CheckFifoParam+0xe6>
      break;
 8004f30:	bf00      	nop
 8004f32:	e008      	b.n	8004f46 <DMA_CheckFifoParam+0xe6>
      break;
 8004f34:	bf00      	nop
 8004f36:	e006      	b.n	8004f46 <DMA_CheckFifoParam+0xe6>
      break;
 8004f38:	bf00      	nop
 8004f3a:	e004      	b.n	8004f46 <DMA_CheckFifoParam+0xe6>
      break;
 8004f3c:	bf00      	nop
 8004f3e:	e002      	b.n	8004f46 <DMA_CheckFifoParam+0xe6>
      break;   
 8004f40:	bf00      	nop
 8004f42:	e000      	b.n	8004f46 <DMA_CheckFifoParam+0xe6>
      break;
 8004f44:	bf00      	nop
    }
  } 
  
  return status; 
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b089      	sub	sp, #36	; 0x24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004f66:	2300      	movs	r3, #0
 8004f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	e175      	b.n	8005260 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004f74:	2201      	movs	r2, #1
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4013      	ands	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	f040 8164 	bne.w	800525a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d00b      	beq.n	8004fb2 <HAL_GPIO_Init+0x5e>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d007      	beq.n	8004fb2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fa6:	2b11      	cmp	r3, #17
 8004fa8:	d003      	beq.n	8004fb2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b12      	cmp	r3, #18
 8004fb0:	d130      	bne.n	8005014 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fe8:	2201      	movs	r2, #1
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	091b      	lsrs	r3, r3, #4
 8004ffe:	f003 0201 	and.w	r2, r3, #1
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	4313      	orrs	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	2203      	movs	r2, #3
 8005020:	fa02 f303 	lsl.w	r3, r2, r3
 8005024:	43db      	mvns	r3, r3
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4013      	ands	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4313      	orrs	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d003      	beq.n	8005054 <HAL_GPIO_Init+0x100>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b12      	cmp	r3, #18
 8005052:	d123      	bne.n	800509c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	08da      	lsrs	r2, r3, #3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3208      	adds	r2, #8
 800505c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	220f      	movs	r2, #15
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	43db      	mvns	r3, r3
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	4013      	ands	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4313      	orrs	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	08da      	lsrs	r2, r3, #3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3208      	adds	r2, #8
 8005096:	69b9      	ldr	r1, [r7, #24]
 8005098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	2203      	movs	r2, #3
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	43db      	mvns	r3, r3
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4013      	ands	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f003 0203 	and.w	r2, r3, #3
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 80be 	beq.w	800525a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050de:	4b65      	ldr	r3, [pc, #404]	; (8005274 <HAL_GPIO_Init+0x320>)
 80050e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e2:	4a64      	ldr	r2, [pc, #400]	; (8005274 <HAL_GPIO_Init+0x320>)
 80050e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050e8:	6453      	str	r3, [r2, #68]	; 0x44
 80050ea:	4b62      	ldr	r3, [pc, #392]	; (8005274 <HAL_GPIO_Init+0x320>)
 80050ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80050f6:	4a60      	ldr	r2, [pc, #384]	; (8005278 <HAL_GPIO_Init+0x324>)
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	089b      	lsrs	r3, r3, #2
 80050fc:	3302      	adds	r3, #2
 80050fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005102:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	220f      	movs	r2, #15
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	43db      	mvns	r3, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4013      	ands	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a57      	ldr	r2, [pc, #348]	; (800527c <HAL_GPIO_Init+0x328>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d037      	beq.n	8005192 <HAL_GPIO_Init+0x23e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a56      	ldr	r2, [pc, #344]	; (8005280 <HAL_GPIO_Init+0x32c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d031      	beq.n	800518e <HAL_GPIO_Init+0x23a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a55      	ldr	r2, [pc, #340]	; (8005284 <HAL_GPIO_Init+0x330>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d02b      	beq.n	800518a <HAL_GPIO_Init+0x236>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a54      	ldr	r2, [pc, #336]	; (8005288 <HAL_GPIO_Init+0x334>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d025      	beq.n	8005186 <HAL_GPIO_Init+0x232>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a53      	ldr	r2, [pc, #332]	; (800528c <HAL_GPIO_Init+0x338>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d01f      	beq.n	8005182 <HAL_GPIO_Init+0x22e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a52      	ldr	r2, [pc, #328]	; (8005290 <HAL_GPIO_Init+0x33c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d019      	beq.n	800517e <HAL_GPIO_Init+0x22a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a51      	ldr	r2, [pc, #324]	; (8005294 <HAL_GPIO_Init+0x340>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d013      	beq.n	800517a <HAL_GPIO_Init+0x226>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a50      	ldr	r2, [pc, #320]	; (8005298 <HAL_GPIO_Init+0x344>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00d      	beq.n	8005176 <HAL_GPIO_Init+0x222>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a4f      	ldr	r2, [pc, #316]	; (800529c <HAL_GPIO_Init+0x348>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d007      	beq.n	8005172 <HAL_GPIO_Init+0x21e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a4e      	ldr	r2, [pc, #312]	; (80052a0 <HAL_GPIO_Init+0x34c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d101      	bne.n	800516e <HAL_GPIO_Init+0x21a>
 800516a:	2309      	movs	r3, #9
 800516c:	e012      	b.n	8005194 <HAL_GPIO_Init+0x240>
 800516e:	230a      	movs	r3, #10
 8005170:	e010      	b.n	8005194 <HAL_GPIO_Init+0x240>
 8005172:	2308      	movs	r3, #8
 8005174:	e00e      	b.n	8005194 <HAL_GPIO_Init+0x240>
 8005176:	2307      	movs	r3, #7
 8005178:	e00c      	b.n	8005194 <HAL_GPIO_Init+0x240>
 800517a:	2306      	movs	r3, #6
 800517c:	e00a      	b.n	8005194 <HAL_GPIO_Init+0x240>
 800517e:	2305      	movs	r3, #5
 8005180:	e008      	b.n	8005194 <HAL_GPIO_Init+0x240>
 8005182:	2304      	movs	r3, #4
 8005184:	e006      	b.n	8005194 <HAL_GPIO_Init+0x240>
 8005186:	2303      	movs	r3, #3
 8005188:	e004      	b.n	8005194 <HAL_GPIO_Init+0x240>
 800518a:	2302      	movs	r3, #2
 800518c:	e002      	b.n	8005194 <HAL_GPIO_Init+0x240>
 800518e:	2301      	movs	r3, #1
 8005190:	e000      	b.n	8005194 <HAL_GPIO_Init+0x240>
 8005192:	2300      	movs	r3, #0
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	f002 0203 	and.w	r2, r2, #3
 800519a:	0092      	lsls	r2, r2, #2
 800519c:	4093      	lsls	r3, r2
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80051a4:	4934      	ldr	r1, [pc, #208]	; (8005278 <HAL_GPIO_Init+0x324>)
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	089b      	lsrs	r3, r3, #2
 80051aa:	3302      	adds	r3, #2
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051b2:	4b3c      	ldr	r3, [pc, #240]	; (80052a4 <HAL_GPIO_Init+0x350>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	43db      	mvns	r3, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4013      	ands	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051d6:	4a33      	ldr	r2, [pc, #204]	; (80052a4 <HAL_GPIO_Init+0x350>)
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80051dc:	4b31      	ldr	r3, [pc, #196]	; (80052a4 <HAL_GPIO_Init+0x350>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005200:	4a28      	ldr	r2, [pc, #160]	; (80052a4 <HAL_GPIO_Init+0x350>)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005206:	4b27      	ldr	r3, [pc, #156]	; (80052a4 <HAL_GPIO_Init+0x350>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	43db      	mvns	r3, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4013      	ands	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800522a:	4a1e      	ldr	r2, [pc, #120]	; (80052a4 <HAL_GPIO_Init+0x350>)
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005230:	4b1c      	ldr	r3, [pc, #112]	; (80052a4 <HAL_GPIO_Init+0x350>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	43db      	mvns	r3, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005254:	4a13      	ldr	r2, [pc, #76]	; (80052a4 <HAL_GPIO_Init+0x350>)
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3301      	adds	r3, #1
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b0f      	cmp	r3, #15
 8005264:	f67f ae86 	bls.w	8004f74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005268:	bf00      	nop
 800526a:	3724      	adds	r7, #36	; 0x24
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	40023800 	.word	0x40023800
 8005278:	40013800 	.word	0x40013800
 800527c:	40020000 	.word	0x40020000
 8005280:	40020400 	.word	0x40020400
 8005284:	40020800 	.word	0x40020800
 8005288:	40020c00 	.word	0x40020c00
 800528c:	40021000 	.word	0x40021000
 8005290:	40021400 	.word	0x40021400
 8005294:	40021800 	.word	0x40021800
 8005298:	40021c00 	.word	0x40021c00
 800529c:	40022000 	.word	0x40022000
 80052a0:	40022400 	.word	0x40022400
 80052a4:	40013c00 	.word	0x40013c00

080052a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	887b      	ldrh	r3, [r7, #2]
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052c0:	2301      	movs	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]
 80052c4:	e001      	b.n	80052ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052c6:	2300      	movs	r3, #0
 80052c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	807b      	strh	r3, [r7, #2]
 80052e4:	4613      	mov	r3, r2
 80052e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052e8:	787b      	ldrb	r3, [r7, #1]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052ee:	887a      	ldrh	r2, [r7, #2]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80052f4:	e003      	b.n	80052fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80052f6:	887b      	ldrh	r3, [r7, #2]
 80052f8:	041a      	lsls	r2, r3, #16
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	619a      	str	r2, [r3, #24]
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	460b      	mov	r3, r1
 8005314:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695a      	ldr	r2, [r3, #20]
 800531a:	887b      	ldrh	r3, [r7, #2]
 800531c:	4013      	ands	r3, r2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d004      	beq.n	800532c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005322:	887b      	ldrh	r3, [r7, #2]
 8005324:	041a      	lsls	r2, r3, #16
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800532a:	e002      	b.n	8005332 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800532c:	887a      	ldrh	r2, [r7, #2]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	619a      	str	r2, [r3, #24]
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e07f      	b.n	8005452 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fd fe36 	bl	8002fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2224      	movs	r2, #36	; 0x24
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0201 	bic.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005390:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d107      	bne.n	80053ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053b6:	609a      	str	r2, [r3, #8]
 80053b8:	e006      	b.n	80053c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80053c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d104      	bne.n	80053da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6859      	ldr	r1, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4b1d      	ldr	r3, [pc, #116]	; (800545c <HAL_I2C_Init+0x11c>)
 80053e6:	430b      	orrs	r3, r1
 80053e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	ea42 0103 	orr.w	r1, r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	021a      	lsls	r2, r3, #8
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69d9      	ldr	r1, [r3, #28]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1a      	ldr	r2, [r3, #32]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	02008000 	.word	0x02008000

08005460 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	607a      	str	r2, [r7, #4]
 800546a:	461a      	mov	r2, r3
 800546c:	460b      	mov	r3, r1
 800546e:	817b      	strh	r3, [r7, #10]
 8005470:	4613      	mov	r3, r2
 8005472:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b20      	cmp	r3, #32
 800547e:	f040 80da 	bne.w	8005636 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_I2C_Master_Transmit+0x30>
 800548c:	2302      	movs	r3, #2
 800548e:	e0d3      	b.n	8005638 <HAL_I2C_Master_Transmit+0x1d8>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005498:	f7fe fa98 	bl	80039cc <HAL_GetTick>
 800549c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	2319      	movs	r3, #25
 80054a4:	2201      	movs	r2, #1
 80054a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 f9e6 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e0be      	b.n	8005638 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2221      	movs	r2, #33	; 0x21
 80054be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2210      	movs	r2, #16
 80054c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	893a      	ldrh	r2, [r7, #8]
 80054da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	2bff      	cmp	r3, #255	; 0xff
 80054ea:	d90e      	bls.n	800550a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	22ff      	movs	r2, #255	; 0xff
 80054f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	8979      	ldrh	r1, [r7, #10]
 80054fa:	4b51      	ldr	r3, [pc, #324]	; (8005640 <HAL_I2C_Master_Transmit+0x1e0>)
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 fb48 	bl	8005b98 <I2C_TransferConfig>
 8005508:	e06c      	b.n	80055e4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005518:	b2da      	uxtb	r2, r3
 800551a:	8979      	ldrh	r1, [r7, #10]
 800551c:	4b48      	ldr	r3, [pc, #288]	; (8005640 <HAL_I2C_Master_Transmit+0x1e0>)
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 fb37 	bl	8005b98 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800552a:	e05b      	b.n	80055e4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	6a39      	ldr	r1, [r7, #32]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f9e3 	bl	80058fc <I2C_WaitOnTXISFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e07b      	b.n	8005638 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	781a      	ldrb	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d034      	beq.n	80055e4 <HAL_I2C_Master_Transmit+0x184>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800557e:	2b00      	cmp	r3, #0
 8005580:	d130      	bne.n	80055e4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	2200      	movs	r2, #0
 800558a:	2180      	movs	r1, #128	; 0x80
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f975 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e04d      	b.n	8005638 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2bff      	cmp	r3, #255	; 0xff
 80055a4:	d90e      	bls.n	80055c4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	22ff      	movs	r2, #255	; 0xff
 80055aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	8979      	ldrh	r1, [r7, #10]
 80055b4:	2300      	movs	r3, #0
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 faeb 	bl	8005b98 <I2C_TransferConfig>
 80055c2:	e00f      	b.n	80055e4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	8979      	ldrh	r1, [r7, #10]
 80055d6:	2300      	movs	r3, #0
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 fada 	bl	8005b98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d19e      	bne.n	800552c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	6a39      	ldr	r1, [r7, #32]
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 f9c2 	bl	800597c <I2C_WaitOnSTOPFlagUntilTimeout>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e01a      	b.n	8005638 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2220      	movs	r2, #32
 8005608:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6859      	ldr	r1, [r3, #4]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <HAL_I2C_Master_Transmit+0x1e4>)
 8005616:	400b      	ands	r3, r1
 8005618:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	e000      	b.n	8005638 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005636:	2302      	movs	r3, #2
  }
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	80002000 	.word	0x80002000
 8005644:	fe00e800 	.word	0xfe00e800

08005648 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	607a      	str	r2, [r7, #4]
 8005652:	461a      	mov	r2, r3
 8005654:	460b      	mov	r3, r1
 8005656:	817b      	strh	r3, [r7, #10]
 8005658:	4613      	mov	r3, r2
 800565a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b20      	cmp	r3, #32
 8005666:	f040 80db 	bne.w	8005820 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_I2C_Master_Receive+0x30>
 8005674:	2302      	movs	r3, #2
 8005676:	e0d4      	b.n	8005822 <HAL_I2C_Master_Receive+0x1da>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005680:	f7fe f9a4 	bl	80039cc <HAL_GetTick>
 8005684:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	2319      	movs	r3, #25
 800568c:	2201      	movs	r2, #1
 800568e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 f8f2 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e0bf      	b.n	8005822 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2222      	movs	r2, #34	; 0x22
 80056a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2210      	movs	r2, #16
 80056ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	893a      	ldrh	r2, [r7, #8]
 80056c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	2bff      	cmp	r3, #255	; 0xff
 80056d2:	d90e      	bls.n	80056f2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	22ff      	movs	r2, #255	; 0xff
 80056d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	8979      	ldrh	r1, [r7, #10]
 80056e2:	4b52      	ldr	r3, [pc, #328]	; (800582c <HAL_I2C_Master_Receive+0x1e4>)
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 fa54 	bl	8005b98 <I2C_TransferConfig>
 80056f0:	e06d      	b.n	80057ce <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005700:	b2da      	uxtb	r2, r3
 8005702:	8979      	ldrh	r1, [r7, #10]
 8005704:	4b49      	ldr	r3, [pc, #292]	; (800582c <HAL_I2C_Master_Receive+0x1e4>)
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 fa43 	bl	8005b98 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005712:	e05c      	b.n	80057ce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	6a39      	ldr	r1, [r7, #32]
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 f96b 	bl	80059f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e07c      	b.n	8005822 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d034      	beq.n	80057ce <HAL_I2C_Master_Receive+0x186>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005768:	2b00      	cmp	r3, #0
 800576a:	d130      	bne.n	80057ce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	2200      	movs	r2, #0
 8005774:	2180      	movs	r1, #128	; 0x80
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f880 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e04d      	b.n	8005822 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578a:	b29b      	uxth	r3, r3
 800578c:	2bff      	cmp	r3, #255	; 0xff
 800578e:	d90e      	bls.n	80057ae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	22ff      	movs	r2, #255	; 0xff
 8005794:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579a:	b2da      	uxtb	r2, r3
 800579c:	8979      	ldrh	r1, [r7, #10]
 800579e:	2300      	movs	r3, #0
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f9f6 	bl	8005b98 <I2C_TransferConfig>
 80057ac:	e00f      	b.n	80057ce <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	8979      	ldrh	r1, [r7, #10]
 80057c0:	2300      	movs	r3, #0
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f9e5 	bl	8005b98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d19d      	bne.n	8005714 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	6a39      	ldr	r1, [r7, #32]
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f8cd 	bl	800597c <I2C_WaitOnSTOPFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e01a      	b.n	8005822 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2220      	movs	r2, #32
 80057f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6859      	ldr	r1, [r3, #4]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <HAL_I2C_Master_Receive+0x1e8>)
 8005800:	400b      	ands	r3, r1
 8005802:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	e000      	b.n	8005822 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005820:	2302      	movs	r3, #2
  }
}
 8005822:	4618      	mov	r0, r3
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	80002400 	.word	0x80002400
 8005830:	fe00e800 	.word	0xfe00e800

08005834 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b02      	cmp	r3, #2
 8005848:	d103      	bne.n	8005852 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2200      	movs	r2, #0
 8005850:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b01      	cmp	r3, #1
 800585e:	d007      	beq.n	8005870 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699a      	ldr	r2, [r3, #24]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	619a      	str	r2, [r3, #24]
  }
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800588c:	e022      	b.n	80058d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005894:	d01e      	beq.n	80058d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005896:	f7fe f899 	bl	80039cc <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d302      	bcc.n	80058ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d113      	bne.n	80058d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b0:	f043 0220 	orr.w	r2, r3, #32
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e00f      	b.n	80058f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	4013      	ands	r3, r2
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	bf0c      	ite	eq
 80058e4:	2301      	moveq	r3, #1
 80058e6:	2300      	movne	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d0cd      	beq.n	800588e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005908:	e02c      	b.n	8005964 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 f8dc 	bl	8005acc <I2C_IsAcknowledgeFailed>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e02a      	b.n	8005974 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005924:	d01e      	beq.n	8005964 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005926:	f7fe f851 	bl	80039cc <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	429a      	cmp	r2, r3
 8005934:	d302      	bcc.n	800593c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d113      	bne.n	8005964 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005940:	f043 0220 	orr.w	r2, r3, #32
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e007      	b.n	8005974 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b02      	cmp	r3, #2
 8005970:	d1cb      	bne.n	800590a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005988:	e028      	b.n	80059dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	68b9      	ldr	r1, [r7, #8]
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 f89c 	bl	8005acc <I2C_IsAcknowledgeFailed>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e026      	b.n	80059ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800599e:	f7fe f815 	bl	80039cc <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d302      	bcc.n	80059b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d113      	bne.n	80059dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e007      	b.n	80059ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d1cf      	bne.n	800598a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a00:	e055      	b.n	8005aae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 f860 	bl	8005acc <I2C_IsAcknowledgeFailed>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e053      	b.n	8005abe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	d129      	bne.n	8005a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	f003 0304 	and.w	r3, r3, #4
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d105      	bne.n	8005a3e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e03f      	b.n	8005abe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2220      	movs	r2, #32
 8005a44:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6859      	ldr	r1, [r3, #4]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	4b1d      	ldr	r3, [pc, #116]	; (8005ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005a52:	400b      	ands	r3, r1
 8005a54:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e022      	b.n	8005abe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a78:	f7fd ffa8 	bl	80039cc <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d302      	bcc.n	8005a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10f      	bne.n	8005aae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a92:	f043 0220 	orr.w	r2, r3, #32
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e007      	b.n	8005abe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d1a2      	bne.n	8005a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	fe00e800 	.word	0xfe00e800

08005acc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	2b10      	cmp	r3, #16
 8005ae4:	d151      	bne.n	8005b8a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ae6:	e022      	b.n	8005b2e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aee:	d01e      	beq.n	8005b2e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af0:	f7fd ff6c 	bl	80039cc <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d302      	bcc.n	8005b06 <I2C_IsAcknowledgeFailed+0x3a>
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d113      	bne.n	8005b2e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0a:	f043 0220 	orr.w	r2, r3, #32
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e02e      	b.n	8005b8c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	f003 0320 	and.w	r3, r3, #32
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d1d5      	bne.n	8005ae8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2210      	movs	r2, #16
 8005b42:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f7ff fe71 	bl	8005834 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6859      	ldr	r1, [r3, #4]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <I2C_IsAcknowledgeFailed+0xc8>)
 8005b5e:	400b      	ands	r3, r1
 8005b60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b66:	f043 0204 	orr.w	r2, r3, #4
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	fe00e800 	.word	0xfe00e800

08005b98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	607b      	str	r3, [r7, #4]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	817b      	strh	r3, [r7, #10]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	0d5b      	lsrs	r3, r3, #21
 8005bb4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005bb8:	4b0d      	ldr	r3, [pc, #52]	; (8005bf0 <I2C_TransferConfig+0x58>)
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	ea02 0103 	and.w	r1, r2, r3
 8005bc2:	897b      	ldrh	r3, [r7, #10]
 8005bc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005bc8:	7a7b      	ldrb	r3, [r7, #9]
 8005bca:	041b      	lsls	r3, r3, #16
 8005bcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	03ff63ff 	.word	0x03ff63ff

08005bf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	d138      	bne.n	8005c7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e032      	b.n	8005c7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2224      	movs	r2, #36	; 0x24
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0201 	bic.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6819      	ldr	r1, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0201 	orr.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	e000      	b.n	8005c7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c7c:	2302      	movs	r3, #2
  }
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d139      	bne.n	8005d14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e033      	b.n	8005d16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2224      	movs	r2, #36	; 0x24
 8005cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0201 	bic.w	r2, r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005cdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	021b      	lsls	r3, r3, #8
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	e000      	b.n	8005d16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d14:	2302      	movs	r3, #2
  }
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d24:	b08f      	sub	sp, #60	; 0x3c
 8005d26:	af0a      	add	r7, sp, #40	; 0x28
 8005d28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e116      	b.n	8005f62 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fd fc7e 	bl	8003650 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2203      	movs	r2, #3
 8005d58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d102      	bne.n	8005d6e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f003 fc0e 	bl	8009594 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	603b      	str	r3, [r7, #0]
 8005d7e:	687e      	ldr	r6, [r7, #4]
 8005d80:	466d      	mov	r5, sp
 8005d82:	f106 0410 	add.w	r4, r6, #16
 8005d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d92:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d96:	1d33      	adds	r3, r6, #4
 8005d98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d9a:	6838      	ldr	r0, [r7, #0]
 8005d9c:	f003 fba2 	bl	80094e4 <USB_CoreInit>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d005      	beq.n	8005db2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2202      	movs	r2, #2
 8005daa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e0d7      	b.n	8005f62 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2100      	movs	r1, #0
 8005db8:	4618      	mov	r0, r3
 8005dba:	f003 fbfc 	bl	80095b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	73fb      	strb	r3, [r7, #15]
 8005dc2:	e04a      	b.n	8005e5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005dc4:	7bfa      	ldrb	r2, [r7, #15]
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	333d      	adds	r3, #61	; 0x3d
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005dd8:	7bfa      	ldrb	r2, [r7, #15]
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	333c      	adds	r3, #60	; 0x3c
 8005de8:	7bfa      	ldrb	r2, [r7, #15]
 8005dea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005dec:	7bfa      	ldrb	r2, [r7, #15]
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	b298      	uxth	r0, r3
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	4613      	mov	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	1a9b      	subs	r3, r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	440b      	add	r3, r1
 8005dfe:	3342      	adds	r3, #66	; 0x42
 8005e00:	4602      	mov	r2, r0
 8005e02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e04:	7bfa      	ldrb	r2, [r7, #15]
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	1a9b      	subs	r3, r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	333f      	adds	r3, #63	; 0x3f
 8005e14:	2200      	movs	r2, #0
 8005e16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e18:	7bfa      	ldrb	r2, [r7, #15]
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	1a9b      	subs	r3, r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	440b      	add	r3, r1
 8005e26:	3344      	adds	r3, #68	; 0x44
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e2c:	7bfa      	ldrb	r2, [r7, #15]
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	4613      	mov	r3, r2
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	440b      	add	r3, r1
 8005e3a:	3348      	adds	r3, #72	; 0x48
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e40:	7bfa      	ldrb	r2, [r7, #15]
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	4613      	mov	r3, r2
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	1a9b      	subs	r3, r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	440b      	add	r3, r1
 8005e4e:	3350      	adds	r3, #80	; 0x50
 8005e50:	2200      	movs	r2, #0
 8005e52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	3301      	adds	r3, #1
 8005e58:	73fb      	strb	r3, [r7, #15]
 8005e5a:	7bfa      	ldrb	r2, [r7, #15]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d3af      	bcc.n	8005dc4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e64:	2300      	movs	r3, #0
 8005e66:	73fb      	strb	r3, [r7, #15]
 8005e68:	e044      	b.n	8005ef4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e6a:	7bfa      	ldrb	r2, [r7, #15]
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	1a9b      	subs	r3, r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e80:	7bfa      	ldrb	r2, [r7, #15]
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	4613      	mov	r3, r2
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	1a9b      	subs	r3, r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	440b      	add	r3, r1
 8005e8e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005e92:	7bfa      	ldrb	r2, [r7, #15]
 8005e94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e96:	7bfa      	ldrb	r2, [r7, #15]
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	1a9b      	subs	r3, r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005eac:	7bfa      	ldrb	r2, [r7, #15]
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	1a9b      	subs	r3, r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ec2:	7bfa      	ldrb	r2, [r7, #15]
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	440b      	add	r3, r1
 8005ed0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ed8:	7bfa      	ldrb	r2, [r7, #15]
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	4613      	mov	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	1a9b      	subs	r3, r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005eee:	7bfb      	ldrb	r3, [r7, #15]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	73fb      	strb	r3, [r7, #15]
 8005ef4:	7bfa      	ldrb	r2, [r7, #15]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d3b5      	bcc.n	8005e6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	687e      	ldr	r6, [r7, #4]
 8005f06:	466d      	mov	r5, sp
 8005f08:	f106 0410 	add.w	r4, r6, #16
 8005f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f18:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f1c:	1d33      	adds	r3, r6, #4
 8005f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f20:	6838      	ldr	r0, [r7, #0]
 8005f22:	f003 fb73 	bl	800960c <USB_DevInit>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e014      	b.n	8005f62 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d102      	bne.n	8005f56 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f80b 	bl	8005f6c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f003 fd25 	bl	80099aa <USB_DevDisconnect>

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005f6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f9a:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <HAL_PCDEx_ActivateLPM+0x44>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	10000003 	.word	0x10000003

08005fb4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fb8:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a04      	ldr	r2, [pc, #16]	; (8005fd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc2:	6013      	str	r3, [r2, #0]
}
 8005fc4:	bf00      	nop
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40007000 	.word	0x40007000

08005fd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e29b      	b.n	8006522 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 8087 	beq.w	8006106 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ff8:	4b96      	ldr	r3, [pc, #600]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f003 030c 	and.w	r3, r3, #12
 8006000:	2b04      	cmp	r3, #4
 8006002:	d00c      	beq.n	800601e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006004:	4b93      	ldr	r3, [pc, #588]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 030c 	and.w	r3, r3, #12
 800600c:	2b08      	cmp	r3, #8
 800600e:	d112      	bne.n	8006036 <HAL_RCC_OscConfig+0x62>
 8006010:	4b90      	ldr	r3, [pc, #576]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800601c:	d10b      	bne.n	8006036 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800601e:	4b8d      	ldr	r3, [pc, #564]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d06c      	beq.n	8006104 <HAL_RCC_OscConfig+0x130>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d168      	bne.n	8006104 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e275      	b.n	8006522 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800603e:	d106      	bne.n	800604e <HAL_RCC_OscConfig+0x7a>
 8006040:	4b84      	ldr	r3, [pc, #528]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a83      	ldr	r2, [pc, #524]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	e02e      	b.n	80060ac <HAL_RCC_OscConfig+0xd8>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10c      	bne.n	8006070 <HAL_RCC_OscConfig+0x9c>
 8006056:	4b7f      	ldr	r3, [pc, #508]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a7e      	ldr	r2, [pc, #504]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 800605c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	4b7c      	ldr	r3, [pc, #496]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a7b      	ldr	r2, [pc, #492]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	e01d      	b.n	80060ac <HAL_RCC_OscConfig+0xd8>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006078:	d10c      	bne.n	8006094 <HAL_RCC_OscConfig+0xc0>
 800607a:	4b76      	ldr	r3, [pc, #472]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a75      	ldr	r2, [pc, #468]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	4b73      	ldr	r3, [pc, #460]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a72      	ldr	r2, [pc, #456]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 800608c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	e00b      	b.n	80060ac <HAL_RCC_OscConfig+0xd8>
 8006094:	4b6f      	ldr	r3, [pc, #444]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a6e      	ldr	r2, [pc, #440]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 800609a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	4b6c      	ldr	r3, [pc, #432]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a6b      	ldr	r2, [pc, #428]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 80060a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d013      	beq.n	80060dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b4:	f7fd fc8a 	bl	80039cc <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060bc:	f7fd fc86 	bl	80039cc <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b64      	cmp	r3, #100	; 0x64
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e229      	b.n	8006522 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ce:	4b61      	ldr	r3, [pc, #388]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0f0      	beq.n	80060bc <HAL_RCC_OscConfig+0xe8>
 80060da:	e014      	b.n	8006106 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060dc:	f7fd fc76 	bl	80039cc <HAL_GetTick>
 80060e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060e4:	f7fd fc72 	bl	80039cc <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b64      	cmp	r3, #100	; 0x64
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e215      	b.n	8006522 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060f6:	4b57      	ldr	r3, [pc, #348]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1f0      	bne.n	80060e4 <HAL_RCC_OscConfig+0x110>
 8006102:	e000      	b.n	8006106 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d069      	beq.n	80061e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006112:	4b50      	ldr	r3, [pc, #320]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 030c 	and.w	r3, r3, #12
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800611e:	4b4d      	ldr	r3, [pc, #308]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 030c 	and.w	r3, r3, #12
 8006126:	2b08      	cmp	r3, #8
 8006128:	d11c      	bne.n	8006164 <HAL_RCC_OscConfig+0x190>
 800612a:	4b4a      	ldr	r3, [pc, #296]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d116      	bne.n	8006164 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006136:	4b47      	ldr	r3, [pc, #284]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <HAL_RCC_OscConfig+0x17a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d001      	beq.n	800614e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e1e9      	b.n	8006522 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800614e:	4b41      	ldr	r3, [pc, #260]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	493d      	ldr	r1, [pc, #244]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 800615e:	4313      	orrs	r3, r2
 8006160:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006162:	e040      	b.n	80061e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d023      	beq.n	80061b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800616c:	4b39      	ldr	r3, [pc, #228]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a38      	ldr	r2, [pc, #224]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006172:	f043 0301 	orr.w	r3, r3, #1
 8006176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006178:	f7fd fc28 	bl	80039cc <HAL_GetTick>
 800617c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800617e:	e008      	b.n	8006192 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006180:	f7fd fc24 	bl	80039cc <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e1c7      	b.n	8006522 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006192:	4b30      	ldr	r3, [pc, #192]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f0      	beq.n	8006180 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800619e:	4b2d      	ldr	r3, [pc, #180]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	4929      	ldr	r1, [pc, #164]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	600b      	str	r3, [r1, #0]
 80061b2:	e018      	b.n	80061e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061b4:	4b27      	ldr	r3, [pc, #156]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a26      	ldr	r2, [pc, #152]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 80061ba:	f023 0301 	bic.w	r3, r3, #1
 80061be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c0:	f7fd fc04 	bl	80039cc <HAL_GetTick>
 80061c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061c6:	e008      	b.n	80061da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061c8:	f7fd fc00 	bl	80039cc <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d901      	bls.n	80061da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e1a3      	b.n	8006522 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061da:	4b1e      	ldr	r3, [pc, #120]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1f0      	bne.n	80061c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0308 	and.w	r3, r3, #8
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d038      	beq.n	8006264 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d019      	beq.n	800622e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061fa:	4b16      	ldr	r3, [pc, #88]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 80061fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061fe:	4a15      	ldr	r2, [pc, #84]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006200:	f043 0301 	orr.w	r3, r3, #1
 8006204:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006206:	f7fd fbe1 	bl	80039cc <HAL_GetTick>
 800620a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800620e:	f7fd fbdd 	bl	80039cc <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e180      	b.n	8006522 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006220:	4b0c      	ldr	r3, [pc, #48]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0f0      	beq.n	800620e <HAL_RCC_OscConfig+0x23a>
 800622c:	e01a      	b.n	8006264 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800622e:	4b09      	ldr	r3, [pc, #36]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006232:	4a08      	ldr	r2, [pc, #32]	; (8006254 <HAL_RCC_OscConfig+0x280>)
 8006234:	f023 0301 	bic.w	r3, r3, #1
 8006238:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800623a:	f7fd fbc7 	bl	80039cc <HAL_GetTick>
 800623e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006240:	e00a      	b.n	8006258 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006242:	f7fd fbc3 	bl	80039cc <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d903      	bls.n	8006258 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e166      	b.n	8006522 <HAL_RCC_OscConfig+0x54e>
 8006254:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006258:	4b92      	ldr	r3, [pc, #584]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 800625a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1ee      	bne.n	8006242 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0304 	and.w	r3, r3, #4
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 80a4 	beq.w	80063ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006272:	4b8c      	ldr	r3, [pc, #560]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10d      	bne.n	800629a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800627e:	4b89      	ldr	r3, [pc, #548]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	4a88      	ldr	r2, [pc, #544]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006288:	6413      	str	r3, [r2, #64]	; 0x40
 800628a:	4b86      	ldr	r3, [pc, #536]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006292:	60bb      	str	r3, [r7, #8]
 8006294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006296:	2301      	movs	r3, #1
 8006298:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800629a:	4b83      	ldr	r3, [pc, #524]	; (80064a8 <HAL_RCC_OscConfig+0x4d4>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d118      	bne.n	80062d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80062a6:	4b80      	ldr	r3, [pc, #512]	; (80064a8 <HAL_RCC_OscConfig+0x4d4>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a7f      	ldr	r2, [pc, #508]	; (80064a8 <HAL_RCC_OscConfig+0x4d4>)
 80062ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062b2:	f7fd fb8b 	bl	80039cc <HAL_GetTick>
 80062b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062b8:	e008      	b.n	80062cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ba:	f7fd fb87 	bl	80039cc <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b64      	cmp	r3, #100	; 0x64
 80062c6:	d901      	bls.n	80062cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e12a      	b.n	8006522 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062cc:	4b76      	ldr	r3, [pc, #472]	; (80064a8 <HAL_RCC_OscConfig+0x4d4>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0f0      	beq.n	80062ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d106      	bne.n	80062ee <HAL_RCC_OscConfig+0x31a>
 80062e0:	4b70      	ldr	r3, [pc, #448]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 80062e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e4:	4a6f      	ldr	r2, [pc, #444]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 80062e6:	f043 0301 	orr.w	r3, r3, #1
 80062ea:	6713      	str	r3, [r2, #112]	; 0x70
 80062ec:	e02d      	b.n	800634a <HAL_RCC_OscConfig+0x376>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10c      	bne.n	8006310 <HAL_RCC_OscConfig+0x33c>
 80062f6:	4b6b      	ldr	r3, [pc, #428]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 80062f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fa:	4a6a      	ldr	r2, [pc, #424]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 80062fc:	f023 0301 	bic.w	r3, r3, #1
 8006300:	6713      	str	r3, [r2, #112]	; 0x70
 8006302:	4b68      	ldr	r3, [pc, #416]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006306:	4a67      	ldr	r2, [pc, #412]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006308:	f023 0304 	bic.w	r3, r3, #4
 800630c:	6713      	str	r3, [r2, #112]	; 0x70
 800630e:	e01c      	b.n	800634a <HAL_RCC_OscConfig+0x376>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	2b05      	cmp	r3, #5
 8006316:	d10c      	bne.n	8006332 <HAL_RCC_OscConfig+0x35e>
 8006318:	4b62      	ldr	r3, [pc, #392]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 800631a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631c:	4a61      	ldr	r2, [pc, #388]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 800631e:	f043 0304 	orr.w	r3, r3, #4
 8006322:	6713      	str	r3, [r2, #112]	; 0x70
 8006324:	4b5f      	ldr	r3, [pc, #380]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006328:	4a5e      	ldr	r2, [pc, #376]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 800632a:	f043 0301 	orr.w	r3, r3, #1
 800632e:	6713      	str	r3, [r2, #112]	; 0x70
 8006330:	e00b      	b.n	800634a <HAL_RCC_OscConfig+0x376>
 8006332:	4b5c      	ldr	r3, [pc, #368]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006336:	4a5b      	ldr	r2, [pc, #364]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006338:	f023 0301 	bic.w	r3, r3, #1
 800633c:	6713      	str	r3, [r2, #112]	; 0x70
 800633e:	4b59      	ldr	r3, [pc, #356]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006342:	4a58      	ldr	r2, [pc, #352]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006344:	f023 0304 	bic.w	r3, r3, #4
 8006348:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d015      	beq.n	800637e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006352:	f7fd fb3b 	bl	80039cc <HAL_GetTick>
 8006356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006358:	e00a      	b.n	8006370 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800635a:	f7fd fb37 	bl	80039cc <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	f241 3288 	movw	r2, #5000	; 0x1388
 8006368:	4293      	cmp	r3, r2
 800636a:	d901      	bls.n	8006370 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e0d8      	b.n	8006522 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006370:	4b4c      	ldr	r3, [pc, #304]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d0ee      	beq.n	800635a <HAL_RCC_OscConfig+0x386>
 800637c:	e014      	b.n	80063a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800637e:	f7fd fb25 	bl	80039cc <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006384:	e00a      	b.n	800639c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006386:	f7fd fb21 	bl	80039cc <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	f241 3288 	movw	r2, #5000	; 0x1388
 8006394:	4293      	cmp	r3, r2
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e0c2      	b.n	8006522 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800639c:	4b41      	ldr	r3, [pc, #260]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 800639e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1ee      	bne.n	8006386 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063a8:	7dfb      	ldrb	r3, [r7, #23]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d105      	bne.n	80063ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ae:	4b3d      	ldr	r3, [pc, #244]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	4a3c      	ldr	r2, [pc, #240]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 80063b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 80ae 	beq.w	8006520 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063c4:	4b37      	ldr	r3, [pc, #220]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 030c 	and.w	r3, r3, #12
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d06d      	beq.n	80064ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d14b      	bne.n	8006470 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063d8:	4b32      	ldr	r3, [pc, #200]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a31      	ldr	r2, [pc, #196]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 80063de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e4:	f7fd faf2 	bl	80039cc <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ec:	f7fd faee 	bl	80039cc <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e091      	b.n	8006522 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063fe:	4b29      	ldr	r3, [pc, #164]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f0      	bne.n	80063ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69da      	ldr	r2, [r3, #28]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	431a      	orrs	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	019b      	lsls	r3, r3, #6
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006420:	085b      	lsrs	r3, r3, #1
 8006422:	3b01      	subs	r3, #1
 8006424:	041b      	lsls	r3, r3, #16
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	061b      	lsls	r3, r3, #24
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006434:	071b      	lsls	r3, r3, #28
 8006436:	491b      	ldr	r1, [pc, #108]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006438:	4313      	orrs	r3, r2
 800643a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800643c:	4b19      	ldr	r3, [pc, #100]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a18      	ldr	r2, [pc, #96]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006448:	f7fd fac0 	bl	80039cc <HAL_GetTick>
 800644c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800644e:	e008      	b.n	8006462 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006450:	f7fd fabc 	bl	80039cc <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e05f      	b.n	8006522 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006462:	4b10      	ldr	r3, [pc, #64]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0f0      	beq.n	8006450 <HAL_RCC_OscConfig+0x47c>
 800646e:	e057      	b.n	8006520 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006470:	4b0c      	ldr	r3, [pc, #48]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a0b      	ldr	r2, [pc, #44]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800647a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647c:	f7fd faa6 	bl	80039cc <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006484:	f7fd faa2 	bl	80039cc <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e045      	b.n	8006522 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006496:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <HAL_RCC_OscConfig+0x4d0>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f0      	bne.n	8006484 <HAL_RCC_OscConfig+0x4b0>
 80064a2:	e03d      	b.n	8006520 <HAL_RCC_OscConfig+0x54c>
 80064a4:	40023800 	.word	0x40023800
 80064a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80064ac:	4b1f      	ldr	r3, [pc, #124]	; (800652c <HAL_RCC_OscConfig+0x558>)
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d030      	beq.n	800651c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d129      	bne.n	800651c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d122      	bne.n	800651c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80064dc:	4013      	ands	r3, r2
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d119      	bne.n	800651c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f2:	085b      	lsrs	r3, r3, #1
 80064f4:	3b01      	subs	r3, #1
 80064f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d10f      	bne.n	800651c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006506:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006508:	429a      	cmp	r2, r3
 800650a:	d107      	bne.n	800651c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006516:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006518:	429a      	cmp	r2, r3
 800651a:	d001      	beq.n	8006520 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e000      	b.n	8006522 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	40023800 	.word	0x40023800

08006530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e0d0      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006548:	4b6a      	ldr	r3, [pc, #424]	; (80066f4 <HAL_RCC_ClockConfig+0x1c4>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 030f 	and.w	r3, r3, #15
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	429a      	cmp	r2, r3
 8006554:	d910      	bls.n	8006578 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006556:	4b67      	ldr	r3, [pc, #412]	; (80066f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f023 020f 	bic.w	r2, r3, #15
 800655e:	4965      	ldr	r1, [pc, #404]	; (80066f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	4313      	orrs	r3, r2
 8006564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006566:	4b63      	ldr	r3, [pc, #396]	; (80066f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d001      	beq.n	8006578 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e0b8      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d020      	beq.n	80065c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006590:	4b59      	ldr	r3, [pc, #356]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	4a58      	ldr	r2, [pc, #352]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006596:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800659a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0308 	and.w	r3, r3, #8
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065a8:	4b53      	ldr	r3, [pc, #332]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	4a52      	ldr	r2, [pc, #328]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 80065ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065b4:	4b50      	ldr	r3, [pc, #320]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	494d      	ldr	r1, [pc, #308]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d040      	beq.n	8006654 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d107      	bne.n	80065ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065da:	4b47      	ldr	r3, [pc, #284]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d115      	bne.n	8006612 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e07f      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d107      	bne.n	8006602 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f2:	4b41      	ldr	r3, [pc, #260]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d109      	bne.n	8006612 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e073      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006602:	4b3d      	ldr	r3, [pc, #244]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e06b      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006612:	4b39      	ldr	r3, [pc, #228]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f023 0203 	bic.w	r2, r3, #3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	4936      	ldr	r1, [pc, #216]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006620:	4313      	orrs	r3, r2
 8006622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006624:	f7fd f9d2 	bl	80039cc <HAL_GetTick>
 8006628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800662a:	e00a      	b.n	8006642 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800662c:	f7fd f9ce 	bl	80039cc <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	f241 3288 	movw	r2, #5000	; 0x1388
 800663a:	4293      	cmp	r3, r2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e053      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006642:	4b2d      	ldr	r3, [pc, #180]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f003 020c 	and.w	r2, r3, #12
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	429a      	cmp	r2, r3
 8006652:	d1eb      	bne.n	800662c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006654:	4b27      	ldr	r3, [pc, #156]	; (80066f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 030f 	and.w	r3, r3, #15
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	429a      	cmp	r2, r3
 8006660:	d210      	bcs.n	8006684 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006662:	4b24      	ldr	r3, [pc, #144]	; (80066f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f023 020f 	bic.w	r2, r3, #15
 800666a:	4922      	ldr	r1, [pc, #136]	; (80066f4 <HAL_RCC_ClockConfig+0x1c4>)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	4313      	orrs	r3, r2
 8006670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006672:	4b20      	ldr	r3, [pc, #128]	; (80066f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d001      	beq.n	8006684 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e032      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	d008      	beq.n	80066a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006690:	4b19      	ldr	r3, [pc, #100]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	4916      	ldr	r1, [pc, #88]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d009      	beq.n	80066c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80066ae:	4b12      	ldr	r3, [pc, #72]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	490e      	ldr	r1, [pc, #56]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80066c2:	f000 f821 	bl	8006708 <HAL_RCC_GetSysClockFreq>
 80066c6:	4601      	mov	r1, r0
 80066c8:	4b0b      	ldr	r3, [pc, #44]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	091b      	lsrs	r3, r3, #4
 80066ce:	f003 030f 	and.w	r3, r3, #15
 80066d2:	4a0a      	ldr	r2, [pc, #40]	; (80066fc <HAL_RCC_ClockConfig+0x1cc>)
 80066d4:	5cd3      	ldrb	r3, [r2, r3]
 80066d6:	fa21 f303 	lsr.w	r3, r1, r3
 80066da:	4a09      	ldr	r2, [pc, #36]	; (8006700 <HAL_RCC_ClockConfig+0x1d0>)
 80066dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80066de:	4b09      	ldr	r3, [pc, #36]	; (8006704 <HAL_RCC_ClockConfig+0x1d4>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fd f802 	bl	80036ec <HAL_InitTick>

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40023c00 	.word	0x40023c00
 80066f8:	40023800 	.word	0x40023800
 80066fc:	0800ffb4 	.word	0x0800ffb4
 8006700:	200000b8 	.word	0x200000b8
 8006704:	200000bc 	.word	0x200000bc

08006708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	607b      	str	r3, [r7, #4]
 8006712:	2300      	movs	r3, #0
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	2300      	movs	r3, #0
 8006718:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800671a:	2300      	movs	r3, #0
 800671c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800671e:	4b50      	ldr	r3, [pc, #320]	; (8006860 <HAL_RCC_GetSysClockFreq+0x158>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 030c 	and.w	r3, r3, #12
 8006726:	2b04      	cmp	r3, #4
 8006728:	d007      	beq.n	800673a <HAL_RCC_GetSysClockFreq+0x32>
 800672a:	2b08      	cmp	r3, #8
 800672c:	d008      	beq.n	8006740 <HAL_RCC_GetSysClockFreq+0x38>
 800672e:	2b00      	cmp	r3, #0
 8006730:	f040 808d 	bne.w	800684e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006734:	4b4b      	ldr	r3, [pc, #300]	; (8006864 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006736:	60bb      	str	r3, [r7, #8]
      break;
 8006738:	e08c      	b.n	8006854 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800673a:	4b4b      	ldr	r3, [pc, #300]	; (8006868 <HAL_RCC_GetSysClockFreq+0x160>)
 800673c:	60bb      	str	r3, [r7, #8]
      break;
 800673e:	e089      	b.n	8006854 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006740:	4b47      	ldr	r3, [pc, #284]	; (8006860 <HAL_RCC_GetSysClockFreq+0x158>)
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006748:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800674a:	4b45      	ldr	r3, [pc, #276]	; (8006860 <HAL_RCC_GetSysClockFreq+0x158>)
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d023      	beq.n	800679e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006756:	4b42      	ldr	r3, [pc, #264]	; (8006860 <HAL_RCC_GetSysClockFreq+0x158>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	099b      	lsrs	r3, r3, #6
 800675c:	f04f 0400 	mov.w	r4, #0
 8006760:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	ea03 0501 	and.w	r5, r3, r1
 800676c:	ea04 0602 	and.w	r6, r4, r2
 8006770:	4a3d      	ldr	r2, [pc, #244]	; (8006868 <HAL_RCC_GetSysClockFreq+0x160>)
 8006772:	fb02 f106 	mul.w	r1, r2, r6
 8006776:	2200      	movs	r2, #0
 8006778:	fb02 f205 	mul.w	r2, r2, r5
 800677c:	440a      	add	r2, r1
 800677e:	493a      	ldr	r1, [pc, #232]	; (8006868 <HAL_RCC_GetSysClockFreq+0x160>)
 8006780:	fba5 0101 	umull	r0, r1, r5, r1
 8006784:	1853      	adds	r3, r2, r1
 8006786:	4619      	mov	r1, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f04f 0400 	mov.w	r4, #0
 800678e:	461a      	mov	r2, r3
 8006790:	4623      	mov	r3, r4
 8006792:	f7f9 fdad 	bl	80002f0 <__aeabi_uldivmod>
 8006796:	4603      	mov	r3, r0
 8006798:	460c      	mov	r4, r1
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	e049      	b.n	8006832 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800679e:	4b30      	ldr	r3, [pc, #192]	; (8006860 <HAL_RCC_GetSysClockFreq+0x158>)
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	099b      	lsrs	r3, r3, #6
 80067a4:	f04f 0400 	mov.w	r4, #0
 80067a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	ea03 0501 	and.w	r5, r3, r1
 80067b4:	ea04 0602 	and.w	r6, r4, r2
 80067b8:	4629      	mov	r1, r5
 80067ba:	4632      	mov	r2, r6
 80067bc:	f04f 0300 	mov.w	r3, #0
 80067c0:	f04f 0400 	mov.w	r4, #0
 80067c4:	0154      	lsls	r4, r2, #5
 80067c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80067ca:	014b      	lsls	r3, r1, #5
 80067cc:	4619      	mov	r1, r3
 80067ce:	4622      	mov	r2, r4
 80067d0:	1b49      	subs	r1, r1, r5
 80067d2:	eb62 0206 	sbc.w	r2, r2, r6
 80067d6:	f04f 0300 	mov.w	r3, #0
 80067da:	f04f 0400 	mov.w	r4, #0
 80067de:	0194      	lsls	r4, r2, #6
 80067e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80067e4:	018b      	lsls	r3, r1, #6
 80067e6:	1a5b      	subs	r3, r3, r1
 80067e8:	eb64 0402 	sbc.w	r4, r4, r2
 80067ec:	f04f 0100 	mov.w	r1, #0
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	00e2      	lsls	r2, r4, #3
 80067f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80067fa:	00d9      	lsls	r1, r3, #3
 80067fc:	460b      	mov	r3, r1
 80067fe:	4614      	mov	r4, r2
 8006800:	195b      	adds	r3, r3, r5
 8006802:	eb44 0406 	adc.w	r4, r4, r6
 8006806:	f04f 0100 	mov.w	r1, #0
 800680a:	f04f 0200 	mov.w	r2, #0
 800680e:	02a2      	lsls	r2, r4, #10
 8006810:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006814:	0299      	lsls	r1, r3, #10
 8006816:	460b      	mov	r3, r1
 8006818:	4614      	mov	r4, r2
 800681a:	4618      	mov	r0, r3
 800681c:	4621      	mov	r1, r4
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f04f 0400 	mov.w	r4, #0
 8006824:	461a      	mov	r2, r3
 8006826:	4623      	mov	r3, r4
 8006828:	f7f9 fd62 	bl	80002f0 <__aeabi_uldivmod>
 800682c:	4603      	mov	r3, r0
 800682e:	460c      	mov	r4, r1
 8006830:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006832:	4b0b      	ldr	r3, [pc, #44]	; (8006860 <HAL_RCC_GetSysClockFreq+0x158>)
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	0c1b      	lsrs	r3, r3, #16
 8006838:	f003 0303 	and.w	r3, r3, #3
 800683c:	3301      	adds	r3, #1
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	fbb2 f3f3 	udiv	r3, r2, r3
 800684a:	60bb      	str	r3, [r7, #8]
      break;
 800684c:	e002      	b.n	8006854 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800684e:	4b05      	ldr	r3, [pc, #20]	; (8006864 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006850:	60bb      	str	r3, [r7, #8]
      break;
 8006852:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006854:	68bb      	ldr	r3, [r7, #8]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800685e:	bf00      	nop
 8006860:	40023800 	.word	0x40023800
 8006864:	00f42400 	.word	0x00f42400
 8006868:	017d7840 	.word	0x017d7840

0800686c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006870:	4b03      	ldr	r3, [pc, #12]	; (8006880 <HAL_RCC_GetHCLKFreq+0x14>)
 8006872:	681b      	ldr	r3, [r3, #0]
}
 8006874:	4618      	mov	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	200000b8 	.word	0x200000b8

08006884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006888:	f7ff fff0 	bl	800686c <HAL_RCC_GetHCLKFreq>
 800688c:	4601      	mov	r1, r0
 800688e:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	0a9b      	lsrs	r3, r3, #10
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	4a03      	ldr	r2, [pc, #12]	; (80068a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800689a:	5cd3      	ldrb	r3, [r2, r3]
 800689c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	40023800 	.word	0x40023800
 80068a8:	0800ffc4 	.word	0x0800ffc4

080068ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80068b0:	f7ff ffdc 	bl	800686c <HAL_RCC_GetHCLKFreq>
 80068b4:	4601      	mov	r1, r0
 80068b6:	4b05      	ldr	r3, [pc, #20]	; (80068cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	0b5b      	lsrs	r3, r3, #13
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	4a03      	ldr	r2, [pc, #12]	; (80068d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068c2:	5cd3      	ldrb	r3, [r2, r3]
 80068c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	40023800 	.word	0x40023800
 80068d0:	0800ffc4 	.word	0x0800ffc4

080068d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	220f      	movs	r2, #15
 80068e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80068e4:	4b12      	ldr	r3, [pc, #72]	; (8006930 <HAL_RCC_GetClockConfig+0x5c>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f003 0203 	and.w	r2, r3, #3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80068f0:	4b0f      	ldr	r3, [pc, #60]	; (8006930 <HAL_RCC_GetClockConfig+0x5c>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80068fc:	4b0c      	ldr	r3, [pc, #48]	; (8006930 <HAL_RCC_GetClockConfig+0x5c>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006908:	4b09      	ldr	r3, [pc, #36]	; (8006930 <HAL_RCC_GetClockConfig+0x5c>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	08db      	lsrs	r3, r3, #3
 800690e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006916:	4b07      	ldr	r3, [pc, #28]	; (8006934 <HAL_RCC_GetClockConfig+0x60>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 020f 	and.w	r2, r3, #15
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	601a      	str	r2, [r3, #0]
}
 8006922:	bf00      	nop
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	40023800 	.word	0x40023800
 8006934:	40023c00 	.word	0x40023c00

08006938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006944:	2300      	movs	r3, #0
 8006946:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800694c:	2300      	movs	r3, #0
 800694e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006950:	2300      	movs	r3, #0
 8006952:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d012      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006960:	4b69      	ldr	r3, [pc, #420]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	4a68      	ldr	r2, [pc, #416]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006966:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800696a:	6093      	str	r3, [r2, #8]
 800696c:	4b66      	ldr	r3, [pc, #408]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006974:	4964      	ldr	r1, [pc, #400]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006976:	4313      	orrs	r3, r2
 8006978:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006982:	2301      	movs	r3, #1
 8006984:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d017      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006992:	4b5d      	ldr	r3, [pc, #372]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006998:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a0:	4959      	ldr	r1, [pc, #356]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069b0:	d101      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80069b2:	2301      	movs	r3, #1
 80069b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80069be:	2301      	movs	r3, #1
 80069c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d017      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80069ce:	4b4e      	ldr	r3, [pc, #312]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069dc:	494a      	ldr	r1, [pc, #296]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ec:	d101      	bne.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80069ee:	2301      	movs	r3, #1
 80069f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80069fa:	2301      	movs	r3, #1
 80069fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 808b 	beq.w	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a1c:	4b3a      	ldr	r3, [pc, #232]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a20:	4a39      	ldr	r2, [pc, #228]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a26:	6413      	str	r3, [r2, #64]	; 0x40
 8006a28:	4b37      	ldr	r3, [pc, #220]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a30:	60bb      	str	r3, [r7, #8]
 8006a32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a34:	4b35      	ldr	r3, [pc, #212]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a34      	ldr	r2, [pc, #208]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a40:	f7fc ffc4 	bl	80039cc <HAL_GetTick>
 8006a44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006a46:	e008      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a48:	f7fc ffc0 	bl	80039cc <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b64      	cmp	r3, #100	; 0x64
 8006a54:	d901      	bls.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e38d      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006a5a:	4b2c      	ldr	r3, [pc, #176]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0f0      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a66:	4b28      	ldr	r3, [pc, #160]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d035      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d02e      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a84:	4b20      	ldr	r3, [pc, #128]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a8e:	4b1e      	ldr	r3, [pc, #120]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a92:	4a1d      	ldr	r2, [pc, #116]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a98:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a9a:	4b1b      	ldr	r3, [pc, #108]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9e:	4a1a      	ldr	r2, [pc, #104]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aa4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006aa6:	4a18      	ldr	r2, [pc, #96]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006aac:	4b16      	ldr	r3, [pc, #88]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d114      	bne.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab8:	f7fc ff88 	bl	80039cc <HAL_GetTick>
 8006abc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006abe:	e00a      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ac0:	f7fc ff84 	bl	80039cc <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e34f      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ad6:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0ee      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aee:	d111      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006af0:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006afc:	4b04      	ldr	r3, [pc, #16]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006afe:	400b      	ands	r3, r1
 8006b00:	4901      	ldr	r1, [pc, #4]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	608b      	str	r3, [r1, #8]
 8006b06:	e00b      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006b08:	40023800 	.word	0x40023800
 8006b0c:	40007000 	.word	0x40007000
 8006b10:	0ffffcff 	.word	0x0ffffcff
 8006b14:	4bb3      	ldr	r3, [pc, #716]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	4ab2      	ldr	r2, [pc, #712]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006b1e:	6093      	str	r3, [r2, #8]
 8006b20:	4bb0      	ldr	r3, [pc, #704]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b2c:	49ad      	ldr	r1, [pc, #692]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0310 	and.w	r3, r3, #16
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d010      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b3e:	4ba9      	ldr	r3, [pc, #676]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b44:	4aa7      	ldr	r2, [pc, #668]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006b4e:	4ba5      	ldr	r3, [pc, #660]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b50:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b58:	49a2      	ldr	r1, [pc, #648]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00a      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b6c:	4b9d      	ldr	r3, [pc, #628]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b7a:	499a      	ldr	r1, [pc, #616]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b8e:	4b95      	ldr	r3, [pc, #596]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b9c:	4991      	ldr	r1, [pc, #580]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00a      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006bb0:	4b8c      	ldr	r3, [pc, #560]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bbe:	4989      	ldr	r1, [pc, #548]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bd2:	4b84      	ldr	r3, [pc, #528]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be0:	4980      	ldr	r1, [pc, #512]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00a      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bf4:	4b7b      	ldr	r3, [pc, #492]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfa:	f023 0203 	bic.w	r2, r3, #3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c02:	4978      	ldr	r1, [pc, #480]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c16:	4b73      	ldr	r3, [pc, #460]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1c:	f023 020c 	bic.w	r2, r3, #12
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c24:	496f      	ldr	r1, [pc, #444]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00a      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c38:	4b6a      	ldr	r3, [pc, #424]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c46:	4967      	ldr	r1, [pc, #412]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00a      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c5a:	4b62      	ldr	r3, [pc, #392]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c68:	495e      	ldr	r1, [pc, #376]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c7c:	4b59      	ldr	r3, [pc, #356]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8a:	4956      	ldr	r1, [pc, #344]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006c9e:	4b51      	ldr	r3, [pc, #324]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cac:	494d      	ldr	r1, [pc, #308]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00a      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006cc0:	4b48      	ldr	r3, [pc, #288]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cce:	4945      	ldr	r1, [pc, #276]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006ce2:	4b40      	ldr	r3, [pc, #256]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cf0:	493c      	ldr	r1, [pc, #240]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00a      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d04:	4b37      	ldr	r3, [pc, #220]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d12:	4934      	ldr	r1, [pc, #208]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d011      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006d26:	4b2f      	ldr	r3, [pc, #188]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d34:	492b      	ldr	r1, [pc, #172]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d44:	d101      	bne.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006d46:	2301      	movs	r3, #1
 8006d48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0308 	and.w	r3, r3, #8
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006d56:	2301      	movs	r3, #1
 8006d58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d66:	4b1f      	ldr	r3, [pc, #124]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d74:	491b      	ldr	r1, [pc, #108]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00b      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006d88:	4b16      	ldr	r3, [pc, #88]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d98:	4912      	ldr	r1, [pc, #72]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00b      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006dac:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dbc:	4909      	ldr	r1, [pc, #36]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00f      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006dd0:	4b04      	ldr	r3, [pc, #16]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de0:	e002      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006de2:	bf00      	nop
 8006de4:	40023800 	.word	0x40023800
 8006de8:	4985      	ldr	r1, [pc, #532]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00b      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006dfc:	4b80      	ldr	r3, [pc, #512]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e0c:	497c      	ldr	r1, [pc, #496]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d005      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e22:	f040 80d6 	bne.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e26:	4b76      	ldr	r3, [pc, #472]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a75      	ldr	r2, [pc, #468]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e32:	f7fc fdcb 	bl	80039cc <HAL_GetTick>
 8006e36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e38:	e008      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e3a:	f7fc fdc7 	bl	80039cc <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b64      	cmp	r3, #100	; 0x64
 8006e46:	d901      	bls.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e194      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e4c:	4b6c      	ldr	r3, [pc, #432]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1f0      	bne.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d021      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d11d      	bne.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006e6c:	4b64      	ldr	r3, [pc, #400]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e72:	0c1b      	lsrs	r3, r3, #16
 8006e74:	f003 0303 	and.w	r3, r3, #3
 8006e78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006e7a:	4b61      	ldr	r3, [pc, #388]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e80:	0e1b      	lsrs	r3, r3, #24
 8006e82:	f003 030f 	and.w	r3, r3, #15
 8006e86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	019a      	lsls	r2, r3, #6
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	041b      	lsls	r3, r3, #16
 8006e92:	431a      	orrs	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	061b      	lsls	r3, r3, #24
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	071b      	lsls	r3, r3, #28
 8006ea0:	4957      	ldr	r1, [pc, #348]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d004      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ebc:	d00a      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d02e      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ed2:	d129      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006ed4:	4b4a      	ldr	r3, [pc, #296]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eda:	0c1b      	lsrs	r3, r3, #16
 8006edc:	f003 0303 	and.w	r3, r3, #3
 8006ee0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ee2:	4b47      	ldr	r3, [pc, #284]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee8:	0f1b      	lsrs	r3, r3, #28
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	019a      	lsls	r2, r3, #6
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	041b      	lsls	r3, r3, #16
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	061b      	lsls	r3, r3, #24
 8006f02:	431a      	orrs	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	071b      	lsls	r3, r3, #28
 8006f08:	493d      	ldr	r1, [pc, #244]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f10:	4b3b      	ldr	r3, [pc, #236]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f16:	f023 021f 	bic.w	r2, r3, #31
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	4937      	ldr	r1, [pc, #220]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01d      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f34:	4b32      	ldr	r3, [pc, #200]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f3a:	0e1b      	lsrs	r3, r3, #24
 8006f3c:	f003 030f 	and.w	r3, r3, #15
 8006f40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f42:	4b2f      	ldr	r3, [pc, #188]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f48:	0f1b      	lsrs	r3, r3, #28
 8006f4a:	f003 0307 	and.w	r3, r3, #7
 8006f4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	019a      	lsls	r2, r3, #6
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	041b      	lsls	r3, r3, #16
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	061b      	lsls	r3, r3, #24
 8006f62:	431a      	orrs	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	071b      	lsls	r3, r3, #28
 8006f68:	4925      	ldr	r1, [pc, #148]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d011      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	019a      	lsls	r2, r3, #6
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	041b      	lsls	r3, r3, #16
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	061b      	lsls	r3, r3, #24
 8006f90:	431a      	orrs	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	071b      	lsls	r3, r3, #28
 8006f98:	4919      	ldr	r1, [pc, #100]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006fa0:	4b17      	ldr	r3, [pc, #92]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a16      	ldr	r2, [pc, #88]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fac:	f7fc fd0e 	bl	80039cc <HAL_GetTick>
 8006fb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006fb4:	f7fc fd0a 	bl	80039cc <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b64      	cmp	r3, #100	; 0x64
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e0d7      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fc6:	4b0e      	ldr	r3, [pc, #56]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0f0      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	f040 80cd 	bne.w	8007174 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006fda:	4b09      	ldr	r3, [pc, #36]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a08      	ldr	r2, [pc, #32]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe6:	f7fc fcf1 	bl	80039cc <HAL_GetTick>
 8006fea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fec:	e00a      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006fee:	f7fc fced 	bl	80039cc <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b64      	cmp	r3, #100	; 0x64
 8006ffa:	d903      	bls.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e0ba      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007000:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007004:	4b5e      	ldr	r3, [pc, #376]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800700c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007010:	d0ed      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007022:	2b00      	cmp	r3, #0
 8007024:	d009      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800702e:	2b00      	cmp	r3, #0
 8007030:	d02e      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	2b00      	cmp	r3, #0
 8007038:	d12a      	bne.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800703a:	4b51      	ldr	r3, [pc, #324]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800703c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007040:	0c1b      	lsrs	r3, r3, #16
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007048:	4b4d      	ldr	r3, [pc, #308]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800704a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800704e:	0f1b      	lsrs	r3, r3, #28
 8007050:	f003 0307 	and.w	r3, r3, #7
 8007054:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	019a      	lsls	r2, r3, #6
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	041b      	lsls	r3, r3, #16
 8007060:	431a      	orrs	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	061b      	lsls	r3, r3, #24
 8007068:	431a      	orrs	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	071b      	lsls	r3, r3, #28
 800706e:	4944      	ldr	r1, [pc, #272]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007070:	4313      	orrs	r3, r2
 8007072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007076:	4b42      	ldr	r3, [pc, #264]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800707c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007084:	3b01      	subs	r3, #1
 8007086:	021b      	lsls	r3, r3, #8
 8007088:	493d      	ldr	r1, [pc, #244]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800708a:	4313      	orrs	r3, r2
 800708c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d022      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070a4:	d11d      	bne.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070a6:	4b36      	ldr	r3, [pc, #216]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80070a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ac:	0e1b      	lsrs	r3, r3, #24
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070b4:	4b32      	ldr	r3, [pc, #200]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80070b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ba:	0f1b      	lsrs	r3, r3, #28
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	019a      	lsls	r2, r3, #6
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	041b      	lsls	r3, r3, #16
 80070ce:	431a      	orrs	r2, r3
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	061b      	lsls	r3, r3, #24
 80070d4:	431a      	orrs	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	071b      	lsls	r3, r3, #28
 80070da:	4929      	ldr	r1, [pc, #164]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0308 	and.w	r3, r3, #8
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d028      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070ee:	4b24      	ldr	r3, [pc, #144]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80070f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f4:	0e1b      	lsrs	r3, r3, #24
 80070f6:	f003 030f 	and.w	r3, r3, #15
 80070fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80070fc:	4b20      	ldr	r3, [pc, #128]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80070fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007102:	0c1b      	lsrs	r3, r3, #16
 8007104:	f003 0303 	and.w	r3, r3, #3
 8007108:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	019a      	lsls	r2, r3, #6
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	041b      	lsls	r3, r3, #16
 8007114:	431a      	orrs	r2, r3
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	061b      	lsls	r3, r3, #24
 800711a:	431a      	orrs	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	071b      	lsls	r3, r3, #28
 8007122:	4917      	ldr	r1, [pc, #92]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007124:	4313      	orrs	r3, r2
 8007126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800712a:	4b15      	ldr	r3, [pc, #84]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800712c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007130:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	4911      	ldr	r1, [pc, #68]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007140:	4b0f      	ldr	r3, [pc, #60]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a0e      	ldr	r2, [pc, #56]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800714a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800714c:	f7fc fc3e 	bl	80039cc <HAL_GetTick>
 8007150:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007152:	e008      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007154:	f7fc fc3a 	bl	80039cc <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	2b64      	cmp	r3, #100	; 0x64
 8007160:	d901      	bls.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e007      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007166:	4b06      	ldr	r3, [pc, #24]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800716e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007172:	d1ef      	bne.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3720      	adds	r7, #32
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	40023800 	.word	0x40023800

08007184 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e06b      	b.n	800726e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	7f5b      	ldrb	r3, [r3, #29]
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	d105      	bne.n	80071ac <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7fc f810 	bl	80031cc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	22ca      	movs	r2, #202	; 0xca
 80071b8:	625a      	str	r2, [r3, #36]	; 0x24
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2253      	movs	r2, #83	; 0x53
 80071c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f85a 	bl	800727c <RTC_EnterInitMode>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d008      	beq.n	80071e0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	22ff      	movs	r2, #255	; 0xff
 80071d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2204      	movs	r2, #4
 80071da:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e046      	b.n	800726e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6899      	ldr	r1, [r3, #8]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	4b23      	ldr	r3, [pc, #140]	; (8007278 <HAL_RTC_Init+0xf4>)
 80071ec:	400b      	ands	r3, r1
 80071ee:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6899      	ldr	r1, [r3, #8]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	431a      	orrs	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	68d2      	ldr	r2, [r2, #12]
 8007216:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6919      	ldr	r1, [r3, #16]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	041a      	lsls	r2, r3, #16
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800723a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0208 	bic.w	r2, r2, #8
 800724a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	699a      	ldr	r2, [r3, #24]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	22ff      	movs	r2, #255	; 0xff
 8007264:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800726c:	2300      	movs	r3, #0
  }
}
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	ff8fffbf 	.word	0xff8fffbf

0800727c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007284:	2300      	movs	r3, #0
 8007286:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007292:	2b00      	cmp	r3, #0
 8007294:	d119      	bne.n	80072ca <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f04f 32ff 	mov.w	r2, #4294967295
 800729e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072a0:	f7fc fb94 	bl	80039cc <HAL_GetTick>
 80072a4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80072a6:	e009      	b.n	80072bc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80072a8:	f7fc fb90 	bl	80039cc <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072b6:	d901      	bls.n	80072bc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e007      	b.n	80072cc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0ee      	beq.n	80072a8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e084      	b.n	80073f0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d106      	bne.n	8007306 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7fb ff7d 	bl	8003200 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2202      	movs	r2, #2
 800730a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800731c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007326:	d902      	bls.n	800732e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007328:	2300      	movs	r3, #0
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	e002      	b.n	8007334 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800732e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007332:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800733c:	d007      	beq.n	800734e <HAL_SPI_Init+0x7a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007346:	d002      	beq.n	800734e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10b      	bne.n	800736e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800735e:	d903      	bls.n	8007368 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2202      	movs	r2, #2
 8007364:	631a      	str	r2, [r3, #48]	; 0x30
 8007366:	e002      	b.n	800736e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	431a      	orrs	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	431a      	orrs	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	ea42 0103 	orr.w	r1, r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	0c1b      	lsrs	r3, r3, #16
 80073ae:	f003 0204 	and.w	r2, r3, #4
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	ea42 0103 	orr.w	r1, r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	69da      	ldr	r2, [r3, #28]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	603b      	str	r3, [r7, #0]
 8007404:	4613      	mov	r3, r2
 8007406:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_SPI_Transmit+0x22>
 8007416:	2302      	movs	r3, #2
 8007418:	e150      	b.n	80076bc <HAL_SPI_Transmit+0x2c4>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007422:	f7fc fad3 	bl	80039cc <HAL_GetTick>
 8007426:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007428:	88fb      	ldrh	r3, [r7, #6]
 800742a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b01      	cmp	r3, #1
 8007436:	d002      	beq.n	800743e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007438:	2302      	movs	r3, #2
 800743a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800743c:	e135      	b.n	80076aa <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <HAL_SPI_Transmit+0x52>
 8007444:	88fb      	ldrh	r3, [r7, #6]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d102      	bne.n	8007450 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800744e:	e12c      	b.n	80076aa <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2203      	movs	r2, #3
 8007454:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	88fa      	ldrh	r2, [r7, #6]
 8007468:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	88fa      	ldrh	r2, [r7, #6]
 800746e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800749a:	d107      	bne.n	80074ac <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b6:	2b40      	cmp	r3, #64	; 0x40
 80074b8:	d007      	beq.n	80074ca <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074d2:	d94b      	bls.n	800756c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <HAL_SPI_Transmit+0xea>
 80074dc:	8afb      	ldrh	r3, [r7, #22]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d13e      	bne.n	8007560 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e6:	881a      	ldrh	r2, [r3, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f2:	1c9a      	adds	r2, r3, #2
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007506:	e02b      	b.n	8007560 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b02      	cmp	r3, #2
 8007514:	d112      	bne.n	800753c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751a:	881a      	ldrh	r2, [r3, #0]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007526:	1c9a      	adds	r2, r3, #2
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	87da      	strh	r2, [r3, #62]	; 0x3e
 800753a:	e011      	b.n	8007560 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800753c:	f7fc fa46 	bl	80039cc <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	429a      	cmp	r2, r3
 800754a:	d803      	bhi.n	8007554 <HAL_SPI_Transmit+0x15c>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007552:	d102      	bne.n	800755a <HAL_SPI_Transmit+0x162>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d102      	bne.n	8007560 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800755e:	e0a4      	b.n	80076aa <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007564:	b29b      	uxth	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1ce      	bne.n	8007508 <HAL_SPI_Transmit+0x110>
 800756a:	e07c      	b.n	8007666 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <HAL_SPI_Transmit+0x182>
 8007574:	8afb      	ldrh	r3, [r7, #22]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d170      	bne.n	800765c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800757e:	b29b      	uxth	r3, r3
 8007580:	2b01      	cmp	r3, #1
 8007582:	d912      	bls.n	80075aa <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007588:	881a      	ldrh	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	1c9a      	adds	r2, r3, #2
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3b02      	subs	r3, #2
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075a8:	e058      	b.n	800765c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	330c      	adds	r3, #12
 80075b4:	7812      	ldrb	r2, [r2, #0]
 80075b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	3b01      	subs	r3, #1
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80075d0:	e044      	b.n	800765c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d12b      	bne.n	8007638 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d912      	bls.n	8007610 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ee:	881a      	ldrh	r2, [r3, #0]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fa:	1c9a      	adds	r2, r3, #2
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b02      	subs	r3, #2
 8007608:	b29a      	uxth	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800760e:	e025      	b.n	800765c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	330c      	adds	r3, #12
 800761a:	7812      	ldrb	r2, [r2, #0]
 800761c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800762c:	b29b      	uxth	r3, r3
 800762e:	3b01      	subs	r3, #1
 8007630:	b29a      	uxth	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007636:	e011      	b.n	800765c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007638:	f7fc f9c8 	bl	80039cc <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d803      	bhi.n	8007650 <HAL_SPI_Transmit+0x258>
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764e:	d102      	bne.n	8007656 <HAL_SPI_Transmit+0x25e>
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d102      	bne.n	800765c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	77fb      	strb	r3, [r7, #31]
          goto error;
 800765a:	e026      	b.n	80076aa <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007660:	b29b      	uxth	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1b5      	bne.n	80075d2 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 fa20 	bl	8007ab0 <SPI_EndRxTxTransaction>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2220      	movs	r2, #32
 800767a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10a      	bne.n	800769a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007684:	2300      	movs	r3, #0
 8007686:	613b      	str	r3, [r7, #16]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	613b      	str	r3, [r7, #16]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	613b      	str	r3, [r7, #16]
 8007698:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	77fb      	strb	r3, [r7, #31]
 80076a6:	e000      	b.n	80076aa <HAL_SPI_Transmit+0x2b2>
  }

error:
 80076a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80076ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3720      	adds	r7, #32
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b088      	sub	sp, #32
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	099b      	lsrs	r3, r3, #6
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10f      	bne.n	8007708 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	099b      	lsrs	r3, r3, #6
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d004      	beq.n	8007708 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	4798      	blx	r3
    return;
 8007706:	e0d8      	b.n	80078ba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	085b      	lsrs	r3, r3, #1
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00a      	beq.n	800772a <HAL_SPI_IRQHandler+0x66>
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	09db      	lsrs	r3, r3, #7
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	2b00      	cmp	r3, #0
 800771e:	d004      	beq.n	800772a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	4798      	blx	r3
    return;
 8007728:	e0c7      	b.n	80078ba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	095b      	lsrs	r3, r3, #5
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10c      	bne.n	8007750 <HAL_SPI_IRQHandler+0x8c>
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	099b      	lsrs	r3, r3, #6
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b00      	cmp	r3, #0
 8007740:	d106      	bne.n	8007750 <HAL_SPI_IRQHandler+0x8c>
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	0a1b      	lsrs	r3, r3, #8
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 80b5 	beq.w	80078ba <HAL_SPI_IRQHandler+0x1f6>
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	095b      	lsrs	r3, r3, #5
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80ae 	beq.w	80078ba <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	099b      	lsrs	r3, r3, #6
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	d023      	beq.n	80077b2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b03      	cmp	r3, #3
 8007774:	d011      	beq.n	800779a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800777a:	f043 0204 	orr.w	r2, r3, #4
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007782:	2300      	movs	r3, #0
 8007784:	617b      	str	r3, [r7, #20]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	617b      	str	r3, [r7, #20]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	617b      	str	r3, [r7, #20]
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	e00b      	b.n	80077b2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800779a:	2300      	movs	r3, #0
 800779c:	613b      	str	r3, [r7, #16]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	613b      	str	r3, [r7, #16]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	613b      	str	r3, [r7, #16]
 80077ae:	693b      	ldr	r3, [r7, #16]
        return;
 80077b0:	e083      	b.n	80078ba <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	095b      	lsrs	r3, r3, #5
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d014      	beq.n	80077e8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077c2:	f043 0201 	orr.w	r2, r3, #1
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	60fb      	str	r3, [r7, #12]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	0a1b      	lsrs	r3, r3, #8
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00c      	beq.n	800780e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f8:	f043 0208 	orr.w	r2, r3, #8
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007800:	2300      	movs	r3, #0
 8007802:	60bb      	str	r3, [r7, #8]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	60bb      	str	r3, [r7, #8]
 800780c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007812:	2b00      	cmp	r3, #0
 8007814:	d050      	beq.n	80078b8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007824:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	f003 0302 	and.w	r3, r3, #2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d104      	bne.n	8007842 <HAL_SPI_IRQHandler+0x17e>
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d034      	beq.n	80078ac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0203 	bic.w	r2, r2, #3
 8007850:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007856:	2b00      	cmp	r3, #0
 8007858:	d011      	beq.n	800787e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785e:	4a18      	ldr	r2, [pc, #96]	; (80078c0 <HAL_SPI_IRQHandler+0x1fc>)
 8007860:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007866:	4618      	mov	r0, r3
 8007868:	f7fd f8ea 	bl	8004a40 <HAL_DMA_Abort_IT>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d005      	beq.n	800787e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007876:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007882:	2b00      	cmp	r3, #0
 8007884:	d016      	beq.n	80078b4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788a:	4a0d      	ldr	r2, [pc, #52]	; (80078c0 <HAL_SPI_IRQHandler+0x1fc>)
 800788c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007892:	4618      	mov	r0, r3
 8007894:	f7fd f8d4 	bl	8004a40 <HAL_DMA_Abort_IT>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80078aa:	e003      	b.n	80078b4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f809 	bl	80078c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80078b2:	e000      	b.n	80078b6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80078b4:	bf00      	nop
    return;
 80078b6:	bf00      	nop
 80078b8:	bf00      	nop
  }
}
 80078ba:	3720      	adds	r7, #32
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	080078d9 	.word	0x080078d9

080078c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f7ff ffe5 	bl	80078c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078fa:	bf00      	nop
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	60b9      	str	r1, [r7, #8]
 800790c:	603b      	str	r3, [r7, #0]
 800790e:	4613      	mov	r3, r2
 8007910:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007912:	e04c      	b.n	80079ae <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791a:	d048      	beq.n	80079ae <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800791c:	f7fc f856 	bl	80039cc <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	429a      	cmp	r2, r3
 800792a:	d902      	bls.n	8007932 <SPI_WaitFlagStateUntilTimeout+0x30>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d13d      	bne.n	80079ae <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007940:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800794a:	d111      	bne.n	8007970 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007954:	d004      	beq.n	8007960 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800795e:	d107      	bne.n	8007970 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800796e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007978:	d10f      	bne.n	800799a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007998:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e00f      	b.n	80079ce <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	4013      	ands	r3, r2
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	bf0c      	ite	eq
 80079be:	2301      	moveq	r3, #1
 80079c0:	2300      	movne	r3, #0
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	461a      	mov	r2, r3
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d1a3      	bne.n	8007914 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	607a      	str	r2, [r7, #4]
 80079e2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80079e4:	e057      	b.n	8007a96 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80079ec:	d106      	bne.n	80079fc <SPI_WaitFifoStateUntilTimeout+0x26>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d103      	bne.n	80079fc <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	330c      	adds	r3, #12
 80079fa:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a02:	d048      	beq.n	8007a96 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007a04:	f7fb ffe2 	bl	80039cc <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	683a      	ldr	r2, [r7, #0]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d902      	bls.n	8007a1a <SPI_WaitFifoStateUntilTimeout+0x44>
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d13d      	bne.n	8007a96 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a32:	d111      	bne.n	8007a58 <SPI_WaitFifoStateUntilTimeout+0x82>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a3c:	d004      	beq.n	8007a48 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a46:	d107      	bne.n	8007a58 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a60:	d10f      	bne.n	8007a82 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e008      	b.n	8007aa8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d19f      	bne.n	80079e6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af02      	add	r7, sp, #8
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f7ff ff84 	bl	80079d6 <SPI_WaitFifoStateUntilTimeout>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d007      	beq.n	8007ae4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ad8:	f043 0220 	orr.w	r2, r3, #32
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e027      	b.n	8007b34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2200      	movs	r2, #0
 8007aec:	2180      	movs	r1, #128	; 0x80
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f7ff ff07 	bl	8007902 <SPI_WaitFlagStateUntilTimeout>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d007      	beq.n	8007b0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007afe:	f043 0220 	orr.w	r2, r3, #32
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e014      	b.n	8007b34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f7ff ff5d 	bl	80079d6 <SPI_WaitFifoStateUntilTimeout>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d007      	beq.n	8007b32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b26:	f043 0220 	orr.w	r2, r3, #32
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e000      	b.n	8007b34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e01d      	b.n	8007b8a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d106      	bne.n	8007b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7fb fbe8 	bl	8003338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3304      	adds	r3, #4
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	f000 fb82 	bl	8008284 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
	...

08007b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68da      	ldr	r2, [r3, #12]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f042 0201 	orr.w	r2, r2, #1
 8007baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689a      	ldr	r2, [r3, #8]
 8007bb2:	4b0c      	ldr	r3, [pc, #48]	; (8007be4 <HAL_TIM_Base_Start_IT+0x50>)
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2b06      	cmp	r3, #6
 8007bbc:	d00b      	beq.n	8007bd6 <HAL_TIM_Base_Start_IT+0x42>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bc4:	d007      	beq.n	8007bd6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f042 0201 	orr.w	r2, r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	00010007 	.word	0x00010007

08007be8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e01d      	b.n	8007c36 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d106      	bne.n	8007c14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f815 	bl	8007c3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3304      	adds	r3, #4
 8007c24:	4619      	mov	r1, r3
 8007c26:	4610      	mov	r0, r2
 8007c28:	f000 fb2c 	bl	8008284 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d122      	bne.n	8007cae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d11b      	bne.n	8007cae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f06f 0202 	mvn.w	r2, #2
 8007c7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	f003 0303 	and.w	r3, r3, #3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fad7 	bl	8008248 <HAL_TIM_IC_CaptureCallback>
 8007c9a:	e005      	b.n	8007ca8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fac9 	bl	8008234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fada 	bl	800825c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	f003 0304 	and.w	r3, r3, #4
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	d122      	bne.n	8007d02 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	f003 0304 	and.w	r3, r3, #4
 8007cc6:	2b04      	cmp	r3, #4
 8007cc8:	d11b      	bne.n	8007d02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f06f 0204 	mvn.w	r2, #4
 8007cd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 faad 	bl	8008248 <HAL_TIM_IC_CaptureCallback>
 8007cee:	e005      	b.n	8007cfc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fa9f 	bl	8008234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fab0 	bl	800825c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	f003 0308 	and.w	r3, r3, #8
 8007d0c:	2b08      	cmp	r3, #8
 8007d0e:	d122      	bne.n	8007d56 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f003 0308 	and.w	r3, r3, #8
 8007d1a:	2b08      	cmp	r3, #8
 8007d1c:	d11b      	bne.n	8007d56 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f06f 0208 	mvn.w	r2, #8
 8007d26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2204      	movs	r2, #4
 8007d2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	f003 0303 	and.w	r3, r3, #3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fa83 	bl	8008248 <HAL_TIM_IC_CaptureCallback>
 8007d42:	e005      	b.n	8007d50 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fa75 	bl	8008234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fa86 	bl	800825c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	f003 0310 	and.w	r3, r3, #16
 8007d60:	2b10      	cmp	r3, #16
 8007d62:	d122      	bne.n	8007daa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f003 0310 	and.w	r3, r3, #16
 8007d6e:	2b10      	cmp	r3, #16
 8007d70:	d11b      	bne.n	8007daa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f06f 0210 	mvn.w	r2, #16
 8007d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2208      	movs	r2, #8
 8007d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fa59 	bl	8008248 <HAL_TIM_IC_CaptureCallback>
 8007d96:	e005      	b.n	8007da4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fa4b 	bl	8008234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fa5c 	bl	800825c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d10e      	bne.n	8007dd6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d107      	bne.n	8007dd6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f06f 0201 	mvn.w	r2, #1
 8007dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7fa fed7 	bl	8002b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de0:	2b80      	cmp	r3, #128	; 0x80
 8007de2:	d10e      	bne.n	8007e02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dee:	2b80      	cmp	r3, #128	; 0x80
 8007df0:	d107      	bne.n	8007e02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fe71 	bl	8008ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e10:	d10e      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e1c:	2b80      	cmp	r3, #128	; 0x80
 8007e1e:	d107      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fe64 	bl	8008af8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3a:	2b40      	cmp	r3, #64	; 0x40
 8007e3c:	d10e      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e48:	2b40      	cmp	r3, #64	; 0x40
 8007e4a:	d107      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa0a 	bl	8008270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f003 0320 	and.w	r3, r3, #32
 8007e66:	2b20      	cmp	r3, #32
 8007e68:	d10e      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f003 0320 	and.w	r3, r3, #32
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	d107      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0220 	mvn.w	r2, #32
 8007e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fe24 	bl	8008ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e88:	bf00      	nop
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d101      	bne.n	8007eaa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	e105      	b.n	80080b6 <HAL_TIM_PWM_ConfigChannel+0x226>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2b14      	cmp	r3, #20
 8007ebe:	f200 80f0 	bhi.w	80080a2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8007ec2:	a201      	add	r2, pc, #4	; (adr r2, 8007ec8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec8:	08007f1d 	.word	0x08007f1d
 8007ecc:	080080a3 	.word	0x080080a3
 8007ed0:	080080a3 	.word	0x080080a3
 8007ed4:	080080a3 	.word	0x080080a3
 8007ed8:	08007f5d 	.word	0x08007f5d
 8007edc:	080080a3 	.word	0x080080a3
 8007ee0:	080080a3 	.word	0x080080a3
 8007ee4:	080080a3 	.word	0x080080a3
 8007ee8:	08007f9f 	.word	0x08007f9f
 8007eec:	080080a3 	.word	0x080080a3
 8007ef0:	080080a3 	.word	0x080080a3
 8007ef4:	080080a3 	.word	0x080080a3
 8007ef8:	08007fdf 	.word	0x08007fdf
 8007efc:	080080a3 	.word	0x080080a3
 8007f00:	080080a3 	.word	0x080080a3
 8007f04:	080080a3 	.word	0x080080a3
 8007f08:	08008021 	.word	0x08008021
 8007f0c:	080080a3 	.word	0x080080a3
 8007f10:	080080a3 	.word	0x080080a3
 8007f14:	080080a3 	.word	0x080080a3
 8007f18:	08008061 	.word	0x08008061
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68b9      	ldr	r1, [r7, #8]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 fa4e 	bl	80083c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	699a      	ldr	r2, [r3, #24]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f042 0208 	orr.w	r2, r2, #8
 8007f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699a      	ldr	r2, [r3, #24]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f022 0204 	bic.w	r2, r2, #4
 8007f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6999      	ldr	r1, [r3, #24]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	691a      	ldr	r2, [r3, #16]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	619a      	str	r2, [r3, #24]
      break;
 8007f5a:	e0a3      	b.n	80080a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68b9      	ldr	r1, [r7, #8]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 faa0 	bl	80084a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	699a      	ldr	r2, [r3, #24]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699a      	ldr	r2, [r3, #24]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6999      	ldr	r1, [r3, #24]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	021a      	lsls	r2, r3, #8
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	619a      	str	r2, [r3, #24]
      break;
 8007f9c:	e082      	b.n	80080a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68b9      	ldr	r1, [r7, #8]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 faf7 	bl	8008598 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	69da      	ldr	r2, [r3, #28]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f042 0208 	orr.w	r2, r2, #8
 8007fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	69da      	ldr	r2, [r3, #28]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 0204 	bic.w	r2, r2, #4
 8007fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69d9      	ldr	r1, [r3, #28]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	691a      	ldr	r2, [r3, #16]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	61da      	str	r2, [r3, #28]
      break;
 8007fdc:	e062      	b.n	80080a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68b9      	ldr	r1, [r7, #8]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fb4d 	bl	8008684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69da      	ldr	r2, [r3, #28]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69da      	ldr	r2, [r3, #28]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69d9      	ldr	r1, [r3, #28]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	021a      	lsls	r2, r3, #8
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	430a      	orrs	r2, r1
 800801c:	61da      	str	r2, [r3, #28]
      break;
 800801e:	e041      	b.n	80080a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68b9      	ldr	r1, [r7, #8]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 fb84 	bl	8008734 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f042 0208 	orr.w	r2, r2, #8
 800803a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f022 0204 	bic.w	r2, r2, #4
 800804a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	691a      	ldr	r2, [r3, #16]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	430a      	orrs	r2, r1
 800805c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800805e:	e021      	b.n	80080a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68b9      	ldr	r1, [r7, #8]
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fbb6 	bl	80087d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800807a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800808a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	021a      	lsls	r2, r3, #8
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	430a      	orrs	r2, r1
 800809e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80080a0:	e000      	b.n	80080a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80080a2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop

080080c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d101      	bne.n	80080d8 <HAL_TIM_ConfigClockSource+0x18>
 80080d4:	2302      	movs	r3, #2
 80080d6:	e0a6      	b.n	8008226 <HAL_TIM_ConfigClockSource+0x166>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	4b4f      	ldr	r3, [pc, #316]	; (8008230 <HAL_TIM_ConfigClockSource+0x170>)
 80080f4:	4013      	ands	r3, r2
 80080f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2b40      	cmp	r3, #64	; 0x40
 800810e:	d067      	beq.n	80081e0 <HAL_TIM_ConfigClockSource+0x120>
 8008110:	2b40      	cmp	r3, #64	; 0x40
 8008112:	d80b      	bhi.n	800812c <HAL_TIM_ConfigClockSource+0x6c>
 8008114:	2b10      	cmp	r3, #16
 8008116:	d073      	beq.n	8008200 <HAL_TIM_ConfigClockSource+0x140>
 8008118:	2b10      	cmp	r3, #16
 800811a:	d802      	bhi.n	8008122 <HAL_TIM_ConfigClockSource+0x62>
 800811c:	2b00      	cmp	r3, #0
 800811e:	d06f      	beq.n	8008200 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008120:	e078      	b.n	8008214 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008122:	2b20      	cmp	r3, #32
 8008124:	d06c      	beq.n	8008200 <HAL_TIM_ConfigClockSource+0x140>
 8008126:	2b30      	cmp	r3, #48	; 0x30
 8008128:	d06a      	beq.n	8008200 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800812a:	e073      	b.n	8008214 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800812c:	2b70      	cmp	r3, #112	; 0x70
 800812e:	d00d      	beq.n	800814c <HAL_TIM_ConfigClockSource+0x8c>
 8008130:	2b70      	cmp	r3, #112	; 0x70
 8008132:	d804      	bhi.n	800813e <HAL_TIM_ConfigClockSource+0x7e>
 8008134:	2b50      	cmp	r3, #80	; 0x50
 8008136:	d033      	beq.n	80081a0 <HAL_TIM_ConfigClockSource+0xe0>
 8008138:	2b60      	cmp	r3, #96	; 0x60
 800813a:	d041      	beq.n	80081c0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800813c:	e06a      	b.n	8008214 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800813e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008142:	d066      	beq.n	8008212 <HAL_TIM_ConfigClockSource+0x152>
 8008144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008148:	d017      	beq.n	800817a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800814a:	e063      	b.n	8008214 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6818      	ldr	r0, [r3, #0]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	6899      	ldr	r1, [r3, #8]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f000 fc0a 	bl	8008974 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800816e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	609a      	str	r2, [r3, #8]
      break;
 8008178:	e04c      	b.n	8008214 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6818      	ldr	r0, [r3, #0]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	6899      	ldr	r1, [r3, #8]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f000 fbf3 	bl	8008974 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689a      	ldr	r2, [r3, #8]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800819c:	609a      	str	r2, [r3, #8]
      break;
 800819e:	e039      	b.n	8008214 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6818      	ldr	r0, [r3, #0]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	6859      	ldr	r1, [r3, #4]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	461a      	mov	r2, r3
 80081ae:	f000 fb67 	bl	8008880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2150      	movs	r1, #80	; 0x50
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 fbc0 	bl	800893e <TIM_ITRx_SetConfig>
      break;
 80081be:	e029      	b.n	8008214 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6818      	ldr	r0, [r3, #0]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	6859      	ldr	r1, [r3, #4]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	461a      	mov	r2, r3
 80081ce:	f000 fb86 	bl	80088de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2160      	movs	r1, #96	; 0x60
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 fbb0 	bl	800893e <TIM_ITRx_SetConfig>
      break;
 80081de:	e019      	b.n	8008214 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6818      	ldr	r0, [r3, #0]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	6859      	ldr	r1, [r3, #4]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	461a      	mov	r2, r3
 80081ee:	f000 fb47 	bl	8008880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2140      	movs	r1, #64	; 0x40
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fba0 	bl	800893e <TIM_ITRx_SetConfig>
      break;
 80081fe:	e009      	b.n	8008214 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4619      	mov	r1, r3
 800820a:	4610      	mov	r0, r2
 800820c:	f000 fb97 	bl	800893e <TIM_ITRx_SetConfig>
      break;
 8008210:	e000      	b.n	8008214 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008212:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	fffeff88 	.word	0xfffeff88

08008234 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a40      	ldr	r2, [pc, #256]	; (8008398 <TIM_Base_SetConfig+0x114>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d013      	beq.n	80082c4 <TIM_Base_SetConfig+0x40>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a2:	d00f      	beq.n	80082c4 <TIM_Base_SetConfig+0x40>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a3d      	ldr	r2, [pc, #244]	; (800839c <TIM_Base_SetConfig+0x118>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d00b      	beq.n	80082c4 <TIM_Base_SetConfig+0x40>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a3c      	ldr	r2, [pc, #240]	; (80083a0 <TIM_Base_SetConfig+0x11c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d007      	beq.n	80082c4 <TIM_Base_SetConfig+0x40>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a3b      	ldr	r2, [pc, #236]	; (80083a4 <TIM_Base_SetConfig+0x120>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d003      	beq.n	80082c4 <TIM_Base_SetConfig+0x40>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a3a      	ldr	r2, [pc, #232]	; (80083a8 <TIM_Base_SetConfig+0x124>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d108      	bne.n	80082d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a2f      	ldr	r2, [pc, #188]	; (8008398 <TIM_Base_SetConfig+0x114>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d02b      	beq.n	8008336 <TIM_Base_SetConfig+0xb2>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e4:	d027      	beq.n	8008336 <TIM_Base_SetConfig+0xb2>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a2c      	ldr	r2, [pc, #176]	; (800839c <TIM_Base_SetConfig+0x118>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d023      	beq.n	8008336 <TIM_Base_SetConfig+0xb2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a2b      	ldr	r2, [pc, #172]	; (80083a0 <TIM_Base_SetConfig+0x11c>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d01f      	beq.n	8008336 <TIM_Base_SetConfig+0xb2>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a2a      	ldr	r2, [pc, #168]	; (80083a4 <TIM_Base_SetConfig+0x120>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d01b      	beq.n	8008336 <TIM_Base_SetConfig+0xb2>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a29      	ldr	r2, [pc, #164]	; (80083a8 <TIM_Base_SetConfig+0x124>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d017      	beq.n	8008336 <TIM_Base_SetConfig+0xb2>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a28      	ldr	r2, [pc, #160]	; (80083ac <TIM_Base_SetConfig+0x128>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d013      	beq.n	8008336 <TIM_Base_SetConfig+0xb2>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a27      	ldr	r2, [pc, #156]	; (80083b0 <TIM_Base_SetConfig+0x12c>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d00f      	beq.n	8008336 <TIM_Base_SetConfig+0xb2>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a26      	ldr	r2, [pc, #152]	; (80083b4 <TIM_Base_SetConfig+0x130>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d00b      	beq.n	8008336 <TIM_Base_SetConfig+0xb2>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a25      	ldr	r2, [pc, #148]	; (80083b8 <TIM_Base_SetConfig+0x134>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d007      	beq.n	8008336 <TIM_Base_SetConfig+0xb2>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a24      	ldr	r2, [pc, #144]	; (80083bc <TIM_Base_SetConfig+0x138>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d003      	beq.n	8008336 <TIM_Base_SetConfig+0xb2>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a23      	ldr	r2, [pc, #140]	; (80083c0 <TIM_Base_SetConfig+0x13c>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d108      	bne.n	8008348 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800833c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	4313      	orrs	r3, r2
 8008346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	4313      	orrs	r3, r2
 8008354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	689a      	ldr	r2, [r3, #8]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a0a      	ldr	r2, [pc, #40]	; (8008398 <TIM_Base_SetConfig+0x114>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d003      	beq.n	800837c <TIM_Base_SetConfig+0xf8>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a0c      	ldr	r2, [pc, #48]	; (80083a8 <TIM_Base_SetConfig+0x124>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d103      	bne.n	8008384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	691a      	ldr	r2, [r3, #16]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	615a      	str	r2, [r3, #20]
}
 800838a:	bf00      	nop
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	40010000 	.word	0x40010000
 800839c:	40000400 	.word	0x40000400
 80083a0:	40000800 	.word	0x40000800
 80083a4:	40000c00 	.word	0x40000c00
 80083a8:	40010400 	.word	0x40010400
 80083ac:	40014000 	.word	0x40014000
 80083b0:	40014400 	.word	0x40014400
 80083b4:	40014800 	.word	0x40014800
 80083b8:	40001800 	.word	0x40001800
 80083bc:	40001c00 	.word	0x40001c00
 80083c0:	40002000 	.word	0x40002000

080083c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	f023 0201 	bic.w	r2, r3, #1
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	4b2b      	ldr	r3, [pc, #172]	; (800849c <TIM_OC1_SetConfig+0xd8>)
 80083f0:	4013      	ands	r3, r2
 80083f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 0303 	bic.w	r3, r3, #3
 80083fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f023 0302 	bic.w	r3, r3, #2
 800840c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	4313      	orrs	r3, r2
 8008416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a21      	ldr	r2, [pc, #132]	; (80084a0 <TIM_OC1_SetConfig+0xdc>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d003      	beq.n	8008428 <TIM_OC1_SetConfig+0x64>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a20      	ldr	r2, [pc, #128]	; (80084a4 <TIM_OC1_SetConfig+0xe0>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d10c      	bne.n	8008442 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f023 0308 	bic.w	r3, r3, #8
 800842e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	4313      	orrs	r3, r2
 8008438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f023 0304 	bic.w	r3, r3, #4
 8008440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a16      	ldr	r2, [pc, #88]	; (80084a0 <TIM_OC1_SetConfig+0xdc>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d003      	beq.n	8008452 <TIM_OC1_SetConfig+0x8e>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a15      	ldr	r2, [pc, #84]	; (80084a4 <TIM_OC1_SetConfig+0xe0>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d111      	bne.n	8008476 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	4313      	orrs	r3, r2
 800846a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	4313      	orrs	r3, r2
 8008474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	621a      	str	r2, [r3, #32]
}
 8008490:	bf00      	nop
 8008492:	371c      	adds	r7, #28
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	fffeff8f 	.word	0xfffeff8f
 80084a0:	40010000 	.word	0x40010000
 80084a4:	40010400 	.word	0x40010400

080084a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b087      	sub	sp, #28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	f023 0210 	bic.w	r2, r3, #16
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	4b2e      	ldr	r3, [pc, #184]	; (800858c <TIM_OC2_SetConfig+0xe4>)
 80084d4:	4013      	ands	r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	021b      	lsls	r3, r3, #8
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	f023 0320 	bic.w	r3, r3, #32
 80084f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a23      	ldr	r2, [pc, #140]	; (8008590 <TIM_OC2_SetConfig+0xe8>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d003      	beq.n	8008510 <TIM_OC2_SetConfig+0x68>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a22      	ldr	r2, [pc, #136]	; (8008594 <TIM_OC2_SetConfig+0xec>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d10d      	bne.n	800852c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	011b      	lsls	r3, r3, #4
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	4313      	orrs	r3, r2
 8008522:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800852a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a18      	ldr	r2, [pc, #96]	; (8008590 <TIM_OC2_SetConfig+0xe8>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d003      	beq.n	800853c <TIM_OC2_SetConfig+0x94>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a17      	ldr	r2, [pc, #92]	; (8008594 <TIM_OC2_SetConfig+0xec>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d113      	bne.n	8008564 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008542:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800854a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	4313      	orrs	r3, r2
 8008556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	4313      	orrs	r3, r2
 8008562:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685a      	ldr	r2, [r3, #4]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	621a      	str	r2, [r3, #32]
}
 800857e:	bf00      	nop
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	feff8fff 	.word	0xfeff8fff
 8008590:	40010000 	.word	0x40010000
 8008594:	40010400 	.word	0x40010400

08008598 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	69db      	ldr	r3, [r3, #28]
 80085be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4b2d      	ldr	r3, [pc, #180]	; (8008678 <TIM_OC3_SetConfig+0xe0>)
 80085c4:	4013      	ands	r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f023 0303 	bic.w	r3, r3, #3
 80085ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	021b      	lsls	r3, r3, #8
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a22      	ldr	r2, [pc, #136]	; (800867c <TIM_OC3_SetConfig+0xe4>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d003      	beq.n	80085fe <TIM_OC3_SetConfig+0x66>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a21      	ldr	r2, [pc, #132]	; (8008680 <TIM_OC3_SetConfig+0xe8>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d10d      	bne.n	800861a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008604:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	021b      	lsls	r3, r3, #8
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	4313      	orrs	r3, r2
 8008610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a17      	ldr	r2, [pc, #92]	; (800867c <TIM_OC3_SetConfig+0xe4>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d003      	beq.n	800862a <TIM_OC3_SetConfig+0x92>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a16      	ldr	r2, [pc, #88]	; (8008680 <TIM_OC3_SetConfig+0xe8>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d113      	bne.n	8008652 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	011b      	lsls	r3, r3, #4
 8008640:	693a      	ldr	r2, [r7, #16]
 8008642:	4313      	orrs	r3, r2
 8008644:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	011b      	lsls	r3, r3, #4
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	4313      	orrs	r3, r2
 8008650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	621a      	str	r2, [r3, #32]
}
 800866c:	bf00      	nop
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr
 8008678:	fffeff8f 	.word	0xfffeff8f
 800867c:	40010000 	.word	0x40010000
 8008680:	40010400 	.word	0x40010400

08008684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	4b1e      	ldr	r3, [pc, #120]	; (8008728 <TIM_OC4_SetConfig+0xa4>)
 80086b0:	4013      	ands	r3, r2
 80086b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	021b      	lsls	r3, r3, #8
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	031b      	lsls	r3, r3, #12
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	4313      	orrs	r3, r2
 80086da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a13      	ldr	r2, [pc, #76]	; (800872c <TIM_OC4_SetConfig+0xa8>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d003      	beq.n	80086ec <TIM_OC4_SetConfig+0x68>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a12      	ldr	r2, [pc, #72]	; (8008730 <TIM_OC4_SetConfig+0xac>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d109      	bne.n	8008700 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	019b      	lsls	r3, r3, #6
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	685a      	ldr	r2, [r3, #4]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	621a      	str	r2, [r3, #32]
}
 800871a:	bf00      	nop
 800871c:	371c      	adds	r7, #28
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	feff8fff 	.word	0xfeff8fff
 800872c:	40010000 	.word	0x40010000
 8008730:	40010400 	.word	0x40010400

08008734 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800875a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	4b1b      	ldr	r3, [pc, #108]	; (80087cc <TIM_OC5_SetConfig+0x98>)
 8008760:	4013      	ands	r3, r2
 8008762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	4313      	orrs	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008774:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	041b      	lsls	r3, r3, #16
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	4313      	orrs	r3, r2
 8008780:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a12      	ldr	r2, [pc, #72]	; (80087d0 <TIM_OC5_SetConfig+0x9c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d003      	beq.n	8008792 <TIM_OC5_SetConfig+0x5e>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a11      	ldr	r2, [pc, #68]	; (80087d4 <TIM_OC5_SetConfig+0xa0>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d109      	bne.n	80087a6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008798:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	021b      	lsls	r3, r3, #8
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	621a      	str	r2, [r3, #32]
}
 80087c0:	bf00      	nop
 80087c2:	371c      	adds	r7, #28
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	fffeff8f 	.word	0xfffeff8f
 80087d0:	40010000 	.word	0x40010000
 80087d4:	40010400 	.word	0x40010400

080087d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	4b1c      	ldr	r3, [pc, #112]	; (8008874 <TIM_OC6_SetConfig+0x9c>)
 8008804:	4013      	ands	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	021b      	lsls	r3, r3, #8
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	4313      	orrs	r3, r2
 8008812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800881a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	051b      	lsls	r3, r3, #20
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	4313      	orrs	r3, r2
 8008826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a13      	ldr	r2, [pc, #76]	; (8008878 <TIM_OC6_SetConfig+0xa0>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d003      	beq.n	8008838 <TIM_OC6_SetConfig+0x60>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a12      	ldr	r2, [pc, #72]	; (800887c <TIM_OC6_SetConfig+0xa4>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d109      	bne.n	800884c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800883e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	029b      	lsls	r3, r3, #10
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	4313      	orrs	r3, r2
 800884a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	621a      	str	r2, [r3, #32]
}
 8008866:	bf00      	nop
 8008868:	371c      	adds	r7, #28
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	feff8fff 	.word	0xfeff8fff
 8008878:	40010000 	.word	0x40010000
 800887c:	40010400 	.word	0x40010400

08008880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6a1b      	ldr	r3, [r3, #32]
 8008890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	f023 0201 	bic.w	r2, r3, #1
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	011b      	lsls	r3, r3, #4
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	f023 030a 	bic.w	r3, r3, #10
 80088bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	621a      	str	r2, [r3, #32]
}
 80088d2:	bf00      	nop
 80088d4:	371c      	adds	r7, #28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088de:	b480      	push	{r7}
 80088e0:	b087      	sub	sp, #28
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	60b9      	str	r1, [r7, #8]
 80088e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	f023 0210 	bic.w	r2, r3, #16
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	031b      	lsls	r3, r3, #12
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	4313      	orrs	r3, r2
 8008912:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800891a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	011b      	lsls	r3, r3, #4
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	4313      	orrs	r3, r2
 8008924:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	621a      	str	r2, [r3, #32]
}
 8008932:	bf00      	nop
 8008934:	371c      	adds	r7, #28
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800893e:	b480      	push	{r7}
 8008940:	b085      	sub	sp, #20
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008956:	683a      	ldr	r2, [r7, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	4313      	orrs	r3, r2
 800895c:	f043 0307 	orr.w	r3, r3, #7
 8008960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	609a      	str	r2, [r3, #8]
}
 8008968:	bf00      	nop
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800898e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	021a      	lsls	r2, r3, #8
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	431a      	orrs	r2, r3
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	4313      	orrs	r3, r2
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	4313      	orrs	r3, r2
 80089a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	609a      	str	r2, [r3, #8]
}
 80089a8:	bf00      	nop
 80089aa:	371c      	adds	r7, #28
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d101      	bne.n	80089cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089c8:	2302      	movs	r3, #2
 80089ca:	e06d      	b.n	8008aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2202      	movs	r2, #2
 80089d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a30      	ldr	r2, [pc, #192]	; (8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d004      	beq.n	8008a00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a2f      	ldr	r2, [pc, #188]	; (8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d108      	bne.n	8008a12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a20      	ldr	r2, [pc, #128]	; (8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d022      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a3e:	d01d      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a1d      	ldr	r2, [pc, #116]	; (8008abc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d018      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a1c      	ldr	r2, [pc, #112]	; (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d013      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a1a      	ldr	r2, [pc, #104]	; (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d00e      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a15      	ldr	r2, [pc, #84]	; (8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d009      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a16      	ldr	r2, [pc, #88]	; (8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d004      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a15      	ldr	r2, [pc, #84]	; (8008acc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d10c      	bne.n	8008a96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	40010000 	.word	0x40010000
 8008ab8:	40010400 	.word	0x40010400
 8008abc:	40000400 	.word	0x40000400
 8008ac0:	40000800 	.word	0x40000800
 8008ac4:	40000c00 	.word	0x40000c00
 8008ac8:	40014000 	.word	0x40014000
 8008acc:	40001800 	.word	0x40001800

08008ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e040      	b.n	8008ba0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d106      	bne.n	8008b34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7fa fc94 	bl	800345c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2224      	movs	r2, #36	; 0x24
 8008b38:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f022 0201 	bic.w	r2, r2, #1
 8008b48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f8be 	bl	8008ccc <UART_SetConfig>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d101      	bne.n	8008b5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e022      	b.n	8008ba0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d002      	beq.n	8008b68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fb5c 	bl	8009220 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	689a      	ldr	r2, [r3, #8]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f042 0201 	orr.w	r2, r2, #1
 8008b96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fbe3 	bl	8009364 <UART_CheckIdleState>
 8008b9e:	4603      	mov	r3, r0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08a      	sub	sp, #40	; 0x28
 8008bac:	af02      	add	r7, sp, #8
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	603b      	str	r3, [r7, #0]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bbc:	2b20      	cmp	r3, #32
 8008bbe:	d17f      	bne.n	8008cc0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d002      	beq.n	8008bcc <HAL_UART_Transmit+0x24>
 8008bc6:	88fb      	ldrh	r3, [r7, #6]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e078      	b.n	8008cc2 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d101      	bne.n	8008bde <HAL_UART_Transmit+0x36>
 8008bda:	2302      	movs	r3, #2
 8008bdc:	e071      	b.n	8008cc2 <HAL_UART_Transmit+0x11a>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2221      	movs	r2, #33	; 0x21
 8008bf0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008bf2:	f7fa feeb 	bl	80039cc <HAL_GetTick>
 8008bf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	88fa      	ldrh	r2, [r7, #6]
 8008bfc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	88fa      	ldrh	r2, [r7, #6]
 8008c04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c10:	d108      	bne.n	8008c24 <HAL_UART_Transmit+0x7c>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d104      	bne.n	8008c24 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	61bb      	str	r3, [r7, #24]
 8008c22:	e003      	b.n	8008c2c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8008c34:	e02c      	b.n	8008c90 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	2180      	movs	r1, #128	; 0x80
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 fbd4 	bl	80093ee <UART_WaitOnFlagUntilTimeout>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d001      	beq.n	8008c50 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e038      	b.n	8008cc2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10b      	bne.n	8008c6e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	881b      	ldrh	r3, [r3, #0]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	3302      	adds	r3, #2
 8008c6a:	61bb      	str	r3, [r7, #24]
 8008c6c:	e007      	b.n	8008c7e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	781a      	ldrb	r2, [r3, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	3b01      	subs	r3, #1
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1cc      	bne.n	8008c36 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	2140      	movs	r1, #64	; 0x40
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f000 fba1 	bl	80093ee <UART_WaitOnFlagUntilTimeout>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e005      	b.n	8008cc2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	e000      	b.n	8008cc2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008cc0:	2302      	movs	r3, #2
  }
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3720      	adds	r7, #32
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b088      	sub	sp, #32
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	689a      	ldr	r2, [r3, #8]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	431a      	orrs	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	431a      	orrs	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	4bb1      	ldr	r3, [pc, #708]	; (8008fc0 <UART_SetConfig+0x2f4>)
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	6812      	ldr	r2, [r2, #0]
 8008d02:	6939      	ldr	r1, [r7, #16]
 8008d04:	430b      	orrs	r3, r1
 8008d06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68da      	ldr	r2, [r3, #12]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a1b      	ldr	r3, [r3, #32]
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a9f      	ldr	r2, [pc, #636]	; (8008fc4 <UART_SetConfig+0x2f8>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d121      	bne.n	8008d90 <UART_SetConfig+0xc4>
 8008d4c:	4b9e      	ldr	r3, [pc, #632]	; (8008fc8 <UART_SetConfig+0x2fc>)
 8008d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d52:	f003 0303 	and.w	r3, r3, #3
 8008d56:	2b03      	cmp	r3, #3
 8008d58:	d816      	bhi.n	8008d88 <UART_SetConfig+0xbc>
 8008d5a:	a201      	add	r2, pc, #4	; (adr r2, 8008d60 <UART_SetConfig+0x94>)
 8008d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d60:	08008d71 	.word	0x08008d71
 8008d64:	08008d7d 	.word	0x08008d7d
 8008d68:	08008d77 	.word	0x08008d77
 8008d6c:	08008d83 	.word	0x08008d83
 8008d70:	2301      	movs	r3, #1
 8008d72:	77fb      	strb	r3, [r7, #31]
 8008d74:	e151      	b.n	800901a <UART_SetConfig+0x34e>
 8008d76:	2302      	movs	r3, #2
 8008d78:	77fb      	strb	r3, [r7, #31]
 8008d7a:	e14e      	b.n	800901a <UART_SetConfig+0x34e>
 8008d7c:	2304      	movs	r3, #4
 8008d7e:	77fb      	strb	r3, [r7, #31]
 8008d80:	e14b      	b.n	800901a <UART_SetConfig+0x34e>
 8008d82:	2308      	movs	r3, #8
 8008d84:	77fb      	strb	r3, [r7, #31]
 8008d86:	e148      	b.n	800901a <UART_SetConfig+0x34e>
 8008d88:	2310      	movs	r3, #16
 8008d8a:	77fb      	strb	r3, [r7, #31]
 8008d8c:	bf00      	nop
 8008d8e:	e144      	b.n	800901a <UART_SetConfig+0x34e>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a8d      	ldr	r2, [pc, #564]	; (8008fcc <UART_SetConfig+0x300>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d134      	bne.n	8008e04 <UART_SetConfig+0x138>
 8008d9a:	4b8b      	ldr	r3, [pc, #556]	; (8008fc8 <UART_SetConfig+0x2fc>)
 8008d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008da0:	f003 030c 	and.w	r3, r3, #12
 8008da4:	2b0c      	cmp	r3, #12
 8008da6:	d829      	bhi.n	8008dfc <UART_SetConfig+0x130>
 8008da8:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <UART_SetConfig+0xe4>)
 8008daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dae:	bf00      	nop
 8008db0:	08008de5 	.word	0x08008de5
 8008db4:	08008dfd 	.word	0x08008dfd
 8008db8:	08008dfd 	.word	0x08008dfd
 8008dbc:	08008dfd 	.word	0x08008dfd
 8008dc0:	08008df1 	.word	0x08008df1
 8008dc4:	08008dfd 	.word	0x08008dfd
 8008dc8:	08008dfd 	.word	0x08008dfd
 8008dcc:	08008dfd 	.word	0x08008dfd
 8008dd0:	08008deb 	.word	0x08008deb
 8008dd4:	08008dfd 	.word	0x08008dfd
 8008dd8:	08008dfd 	.word	0x08008dfd
 8008ddc:	08008dfd 	.word	0x08008dfd
 8008de0:	08008df7 	.word	0x08008df7
 8008de4:	2300      	movs	r3, #0
 8008de6:	77fb      	strb	r3, [r7, #31]
 8008de8:	e117      	b.n	800901a <UART_SetConfig+0x34e>
 8008dea:	2302      	movs	r3, #2
 8008dec:	77fb      	strb	r3, [r7, #31]
 8008dee:	e114      	b.n	800901a <UART_SetConfig+0x34e>
 8008df0:	2304      	movs	r3, #4
 8008df2:	77fb      	strb	r3, [r7, #31]
 8008df4:	e111      	b.n	800901a <UART_SetConfig+0x34e>
 8008df6:	2308      	movs	r3, #8
 8008df8:	77fb      	strb	r3, [r7, #31]
 8008dfa:	e10e      	b.n	800901a <UART_SetConfig+0x34e>
 8008dfc:	2310      	movs	r3, #16
 8008dfe:	77fb      	strb	r3, [r7, #31]
 8008e00:	bf00      	nop
 8008e02:	e10a      	b.n	800901a <UART_SetConfig+0x34e>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a71      	ldr	r2, [pc, #452]	; (8008fd0 <UART_SetConfig+0x304>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d120      	bne.n	8008e50 <UART_SetConfig+0x184>
 8008e0e:	4b6e      	ldr	r3, [pc, #440]	; (8008fc8 <UART_SetConfig+0x2fc>)
 8008e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e18:	2b10      	cmp	r3, #16
 8008e1a:	d00f      	beq.n	8008e3c <UART_SetConfig+0x170>
 8008e1c:	2b10      	cmp	r3, #16
 8008e1e:	d802      	bhi.n	8008e26 <UART_SetConfig+0x15a>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d005      	beq.n	8008e30 <UART_SetConfig+0x164>
 8008e24:	e010      	b.n	8008e48 <UART_SetConfig+0x17c>
 8008e26:	2b20      	cmp	r3, #32
 8008e28:	d005      	beq.n	8008e36 <UART_SetConfig+0x16a>
 8008e2a:	2b30      	cmp	r3, #48	; 0x30
 8008e2c:	d009      	beq.n	8008e42 <UART_SetConfig+0x176>
 8008e2e:	e00b      	b.n	8008e48 <UART_SetConfig+0x17c>
 8008e30:	2300      	movs	r3, #0
 8008e32:	77fb      	strb	r3, [r7, #31]
 8008e34:	e0f1      	b.n	800901a <UART_SetConfig+0x34e>
 8008e36:	2302      	movs	r3, #2
 8008e38:	77fb      	strb	r3, [r7, #31]
 8008e3a:	e0ee      	b.n	800901a <UART_SetConfig+0x34e>
 8008e3c:	2304      	movs	r3, #4
 8008e3e:	77fb      	strb	r3, [r7, #31]
 8008e40:	e0eb      	b.n	800901a <UART_SetConfig+0x34e>
 8008e42:	2308      	movs	r3, #8
 8008e44:	77fb      	strb	r3, [r7, #31]
 8008e46:	e0e8      	b.n	800901a <UART_SetConfig+0x34e>
 8008e48:	2310      	movs	r3, #16
 8008e4a:	77fb      	strb	r3, [r7, #31]
 8008e4c:	bf00      	nop
 8008e4e:	e0e4      	b.n	800901a <UART_SetConfig+0x34e>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a5f      	ldr	r2, [pc, #380]	; (8008fd4 <UART_SetConfig+0x308>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d120      	bne.n	8008e9c <UART_SetConfig+0x1d0>
 8008e5a:	4b5b      	ldr	r3, [pc, #364]	; (8008fc8 <UART_SetConfig+0x2fc>)
 8008e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e64:	2b40      	cmp	r3, #64	; 0x40
 8008e66:	d00f      	beq.n	8008e88 <UART_SetConfig+0x1bc>
 8008e68:	2b40      	cmp	r3, #64	; 0x40
 8008e6a:	d802      	bhi.n	8008e72 <UART_SetConfig+0x1a6>
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d005      	beq.n	8008e7c <UART_SetConfig+0x1b0>
 8008e70:	e010      	b.n	8008e94 <UART_SetConfig+0x1c8>
 8008e72:	2b80      	cmp	r3, #128	; 0x80
 8008e74:	d005      	beq.n	8008e82 <UART_SetConfig+0x1b6>
 8008e76:	2bc0      	cmp	r3, #192	; 0xc0
 8008e78:	d009      	beq.n	8008e8e <UART_SetConfig+0x1c2>
 8008e7a:	e00b      	b.n	8008e94 <UART_SetConfig+0x1c8>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	77fb      	strb	r3, [r7, #31]
 8008e80:	e0cb      	b.n	800901a <UART_SetConfig+0x34e>
 8008e82:	2302      	movs	r3, #2
 8008e84:	77fb      	strb	r3, [r7, #31]
 8008e86:	e0c8      	b.n	800901a <UART_SetConfig+0x34e>
 8008e88:	2304      	movs	r3, #4
 8008e8a:	77fb      	strb	r3, [r7, #31]
 8008e8c:	e0c5      	b.n	800901a <UART_SetConfig+0x34e>
 8008e8e:	2308      	movs	r3, #8
 8008e90:	77fb      	strb	r3, [r7, #31]
 8008e92:	e0c2      	b.n	800901a <UART_SetConfig+0x34e>
 8008e94:	2310      	movs	r3, #16
 8008e96:	77fb      	strb	r3, [r7, #31]
 8008e98:	bf00      	nop
 8008e9a:	e0be      	b.n	800901a <UART_SetConfig+0x34e>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a4d      	ldr	r2, [pc, #308]	; (8008fd8 <UART_SetConfig+0x30c>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d124      	bne.n	8008ef0 <UART_SetConfig+0x224>
 8008ea6:	4b48      	ldr	r3, [pc, #288]	; (8008fc8 <UART_SetConfig+0x2fc>)
 8008ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eb4:	d012      	beq.n	8008edc <UART_SetConfig+0x210>
 8008eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eba:	d802      	bhi.n	8008ec2 <UART_SetConfig+0x1f6>
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d007      	beq.n	8008ed0 <UART_SetConfig+0x204>
 8008ec0:	e012      	b.n	8008ee8 <UART_SetConfig+0x21c>
 8008ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ec6:	d006      	beq.n	8008ed6 <UART_SetConfig+0x20a>
 8008ec8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ecc:	d009      	beq.n	8008ee2 <UART_SetConfig+0x216>
 8008ece:	e00b      	b.n	8008ee8 <UART_SetConfig+0x21c>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	77fb      	strb	r3, [r7, #31]
 8008ed4:	e0a1      	b.n	800901a <UART_SetConfig+0x34e>
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	77fb      	strb	r3, [r7, #31]
 8008eda:	e09e      	b.n	800901a <UART_SetConfig+0x34e>
 8008edc:	2304      	movs	r3, #4
 8008ede:	77fb      	strb	r3, [r7, #31]
 8008ee0:	e09b      	b.n	800901a <UART_SetConfig+0x34e>
 8008ee2:	2308      	movs	r3, #8
 8008ee4:	77fb      	strb	r3, [r7, #31]
 8008ee6:	e098      	b.n	800901a <UART_SetConfig+0x34e>
 8008ee8:	2310      	movs	r3, #16
 8008eea:	77fb      	strb	r3, [r7, #31]
 8008eec:	bf00      	nop
 8008eee:	e094      	b.n	800901a <UART_SetConfig+0x34e>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a39      	ldr	r2, [pc, #228]	; (8008fdc <UART_SetConfig+0x310>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d124      	bne.n	8008f44 <UART_SetConfig+0x278>
 8008efa:	4b33      	ldr	r3, [pc, #204]	; (8008fc8 <UART_SetConfig+0x2fc>)
 8008efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f08:	d012      	beq.n	8008f30 <UART_SetConfig+0x264>
 8008f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f0e:	d802      	bhi.n	8008f16 <UART_SetConfig+0x24a>
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d007      	beq.n	8008f24 <UART_SetConfig+0x258>
 8008f14:	e012      	b.n	8008f3c <UART_SetConfig+0x270>
 8008f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f1a:	d006      	beq.n	8008f2a <UART_SetConfig+0x25e>
 8008f1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f20:	d009      	beq.n	8008f36 <UART_SetConfig+0x26a>
 8008f22:	e00b      	b.n	8008f3c <UART_SetConfig+0x270>
 8008f24:	2301      	movs	r3, #1
 8008f26:	77fb      	strb	r3, [r7, #31]
 8008f28:	e077      	b.n	800901a <UART_SetConfig+0x34e>
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	77fb      	strb	r3, [r7, #31]
 8008f2e:	e074      	b.n	800901a <UART_SetConfig+0x34e>
 8008f30:	2304      	movs	r3, #4
 8008f32:	77fb      	strb	r3, [r7, #31]
 8008f34:	e071      	b.n	800901a <UART_SetConfig+0x34e>
 8008f36:	2308      	movs	r3, #8
 8008f38:	77fb      	strb	r3, [r7, #31]
 8008f3a:	e06e      	b.n	800901a <UART_SetConfig+0x34e>
 8008f3c:	2310      	movs	r3, #16
 8008f3e:	77fb      	strb	r3, [r7, #31]
 8008f40:	bf00      	nop
 8008f42:	e06a      	b.n	800901a <UART_SetConfig+0x34e>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a25      	ldr	r2, [pc, #148]	; (8008fe0 <UART_SetConfig+0x314>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d124      	bne.n	8008f98 <UART_SetConfig+0x2cc>
 8008f4e:	4b1e      	ldr	r3, [pc, #120]	; (8008fc8 <UART_SetConfig+0x2fc>)
 8008f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f54:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f5c:	d012      	beq.n	8008f84 <UART_SetConfig+0x2b8>
 8008f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f62:	d802      	bhi.n	8008f6a <UART_SetConfig+0x29e>
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d007      	beq.n	8008f78 <UART_SetConfig+0x2ac>
 8008f68:	e012      	b.n	8008f90 <UART_SetConfig+0x2c4>
 8008f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f6e:	d006      	beq.n	8008f7e <UART_SetConfig+0x2b2>
 8008f70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f74:	d009      	beq.n	8008f8a <UART_SetConfig+0x2be>
 8008f76:	e00b      	b.n	8008f90 <UART_SetConfig+0x2c4>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	77fb      	strb	r3, [r7, #31]
 8008f7c:	e04d      	b.n	800901a <UART_SetConfig+0x34e>
 8008f7e:	2302      	movs	r3, #2
 8008f80:	77fb      	strb	r3, [r7, #31]
 8008f82:	e04a      	b.n	800901a <UART_SetConfig+0x34e>
 8008f84:	2304      	movs	r3, #4
 8008f86:	77fb      	strb	r3, [r7, #31]
 8008f88:	e047      	b.n	800901a <UART_SetConfig+0x34e>
 8008f8a:	2308      	movs	r3, #8
 8008f8c:	77fb      	strb	r3, [r7, #31]
 8008f8e:	e044      	b.n	800901a <UART_SetConfig+0x34e>
 8008f90:	2310      	movs	r3, #16
 8008f92:	77fb      	strb	r3, [r7, #31]
 8008f94:	bf00      	nop
 8008f96:	e040      	b.n	800901a <UART_SetConfig+0x34e>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a11      	ldr	r2, [pc, #68]	; (8008fe4 <UART_SetConfig+0x318>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d139      	bne.n	8009016 <UART_SetConfig+0x34a>
 8008fa2:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <UART_SetConfig+0x2fc>)
 8008fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fb0:	d027      	beq.n	8009002 <UART_SetConfig+0x336>
 8008fb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fb6:	d817      	bhi.n	8008fe8 <UART_SetConfig+0x31c>
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d01c      	beq.n	8008ff6 <UART_SetConfig+0x32a>
 8008fbc:	e027      	b.n	800900e <UART_SetConfig+0x342>
 8008fbe:	bf00      	nop
 8008fc0:	efff69f3 	.word	0xefff69f3
 8008fc4:	40011000 	.word	0x40011000
 8008fc8:	40023800 	.word	0x40023800
 8008fcc:	40004400 	.word	0x40004400
 8008fd0:	40004800 	.word	0x40004800
 8008fd4:	40004c00 	.word	0x40004c00
 8008fd8:	40005000 	.word	0x40005000
 8008fdc:	40011400 	.word	0x40011400
 8008fe0:	40007800 	.word	0x40007800
 8008fe4:	40007c00 	.word	0x40007c00
 8008fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fec:	d006      	beq.n	8008ffc <UART_SetConfig+0x330>
 8008fee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008ff2:	d009      	beq.n	8009008 <UART_SetConfig+0x33c>
 8008ff4:	e00b      	b.n	800900e <UART_SetConfig+0x342>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	77fb      	strb	r3, [r7, #31]
 8008ffa:	e00e      	b.n	800901a <UART_SetConfig+0x34e>
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	77fb      	strb	r3, [r7, #31]
 8009000:	e00b      	b.n	800901a <UART_SetConfig+0x34e>
 8009002:	2304      	movs	r3, #4
 8009004:	77fb      	strb	r3, [r7, #31]
 8009006:	e008      	b.n	800901a <UART_SetConfig+0x34e>
 8009008:	2308      	movs	r3, #8
 800900a:	77fb      	strb	r3, [r7, #31]
 800900c:	e005      	b.n	800901a <UART_SetConfig+0x34e>
 800900e:	2310      	movs	r3, #16
 8009010:	77fb      	strb	r3, [r7, #31]
 8009012:	bf00      	nop
 8009014:	e001      	b.n	800901a <UART_SetConfig+0x34e>
 8009016:	2310      	movs	r3, #16
 8009018:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	69db      	ldr	r3, [r3, #28]
 800901e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009022:	d17f      	bne.n	8009124 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8009024:	7ffb      	ldrb	r3, [r7, #31]
 8009026:	2b08      	cmp	r3, #8
 8009028:	d85c      	bhi.n	80090e4 <UART_SetConfig+0x418>
 800902a:	a201      	add	r2, pc, #4	; (adr r2, 8009030 <UART_SetConfig+0x364>)
 800902c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009030:	08009055 	.word	0x08009055
 8009034:	08009075 	.word	0x08009075
 8009038:	08009095 	.word	0x08009095
 800903c:	080090e5 	.word	0x080090e5
 8009040:	080090ad 	.word	0x080090ad
 8009044:	080090e5 	.word	0x080090e5
 8009048:	080090e5 	.word	0x080090e5
 800904c:	080090e5 	.word	0x080090e5
 8009050:	080090cd 	.word	0x080090cd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009054:	f7fd fc16 	bl	8006884 <HAL_RCC_GetPCLK1Freq>
 8009058:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	005a      	lsls	r2, r3, #1
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	085b      	lsrs	r3, r3, #1
 8009064:	441a      	add	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	fbb2 f3f3 	udiv	r3, r2, r3
 800906e:	b29b      	uxth	r3, r3
 8009070:	61bb      	str	r3, [r7, #24]
        break;
 8009072:	e03a      	b.n	80090ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009074:	f7fd fc1a 	bl	80068ac <HAL_RCC_GetPCLK2Freq>
 8009078:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	005a      	lsls	r2, r3, #1
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	085b      	lsrs	r3, r3, #1
 8009084:	441a      	add	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	fbb2 f3f3 	udiv	r3, r2, r3
 800908e:	b29b      	uxth	r3, r3
 8009090:	61bb      	str	r3, [r7, #24]
        break;
 8009092:	e02a      	b.n	80090ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	085a      	lsrs	r2, r3, #1
 800909a:	4b5f      	ldr	r3, [pc, #380]	; (8009218 <UART_SetConfig+0x54c>)
 800909c:	4413      	add	r3, r2
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	6852      	ldr	r2, [r2, #4]
 80090a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	61bb      	str	r3, [r7, #24]
        break;
 80090aa:	e01e      	b.n	80090ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090ac:	f7fd fb2c 	bl	8006708 <HAL_RCC_GetSysClockFreq>
 80090b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	005a      	lsls	r2, r3, #1
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	085b      	lsrs	r3, r3, #1
 80090bc:	441a      	add	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	61bb      	str	r3, [r7, #24]
        break;
 80090ca:	e00e      	b.n	80090ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	085b      	lsrs	r3, r3, #1
 80090d2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	fbb2 f3f3 	udiv	r3, r2, r3
 80090de:	b29b      	uxth	r3, r3
 80090e0:	61bb      	str	r3, [r7, #24]
        break;
 80090e2:	e002      	b.n	80090ea <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	75fb      	strb	r3, [r7, #23]
        break;
 80090e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	2b0f      	cmp	r3, #15
 80090ee:	d916      	bls.n	800911e <UART_SetConfig+0x452>
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090f6:	d212      	bcs.n	800911e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	f023 030f 	bic.w	r3, r3, #15
 8009100:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	085b      	lsrs	r3, r3, #1
 8009106:	b29b      	uxth	r3, r3
 8009108:	f003 0307 	and.w	r3, r3, #7
 800910c:	b29a      	uxth	r2, r3
 800910e:	897b      	ldrh	r3, [r7, #10]
 8009110:	4313      	orrs	r3, r2
 8009112:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	897a      	ldrh	r2, [r7, #10]
 800911a:	60da      	str	r2, [r3, #12]
 800911c:	e070      	b.n	8009200 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	75fb      	strb	r3, [r7, #23]
 8009122:	e06d      	b.n	8009200 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8009124:	7ffb      	ldrb	r3, [r7, #31]
 8009126:	2b08      	cmp	r3, #8
 8009128:	d859      	bhi.n	80091de <UART_SetConfig+0x512>
 800912a:	a201      	add	r2, pc, #4	; (adr r2, 8009130 <UART_SetConfig+0x464>)
 800912c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009130:	08009155 	.word	0x08009155
 8009134:	08009173 	.word	0x08009173
 8009138:	08009191 	.word	0x08009191
 800913c:	080091df 	.word	0x080091df
 8009140:	080091a9 	.word	0x080091a9
 8009144:	080091df 	.word	0x080091df
 8009148:	080091df 	.word	0x080091df
 800914c:	080091df 	.word	0x080091df
 8009150:	080091c7 	.word	0x080091c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009154:	f7fd fb96 	bl	8006884 <HAL_RCC_GetPCLK1Freq>
 8009158:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	085a      	lsrs	r2, r3, #1
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	441a      	add	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	fbb2 f3f3 	udiv	r3, r2, r3
 800916c:	b29b      	uxth	r3, r3
 800916e:	61bb      	str	r3, [r7, #24]
        break;
 8009170:	e038      	b.n	80091e4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009172:	f7fd fb9b 	bl	80068ac <HAL_RCC_GetPCLK2Freq>
 8009176:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	085a      	lsrs	r2, r3, #1
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	441a      	add	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	fbb2 f3f3 	udiv	r3, r2, r3
 800918a:	b29b      	uxth	r3, r3
 800918c:	61bb      	str	r3, [r7, #24]
        break;
 800918e:	e029      	b.n	80091e4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	085a      	lsrs	r2, r3, #1
 8009196:	4b21      	ldr	r3, [pc, #132]	; (800921c <UART_SetConfig+0x550>)
 8009198:	4413      	add	r3, r2
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	6852      	ldr	r2, [r2, #4]
 800919e:	fbb3 f3f2 	udiv	r3, r3, r2
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	61bb      	str	r3, [r7, #24]
        break;
 80091a6:	e01d      	b.n	80091e4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091a8:	f7fd faae 	bl	8006708 <HAL_RCC_GetSysClockFreq>
 80091ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	085a      	lsrs	r2, r3, #1
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	441a      	add	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	61bb      	str	r3, [r7, #24]
        break;
 80091c4:	e00e      	b.n	80091e4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	085b      	lsrs	r3, r3, #1
 80091cc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d8:	b29b      	uxth	r3, r3
 80091da:	61bb      	str	r3, [r7, #24]
        break;
 80091dc:	e002      	b.n	80091e4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	75fb      	strb	r3, [r7, #23]
        break;
 80091e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	2b0f      	cmp	r3, #15
 80091e8:	d908      	bls.n	80091fc <UART_SetConfig+0x530>
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091f0:	d204      	bcs.n	80091fc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	60da      	str	r2, [r3, #12]
 80091fa:	e001      	b.n	8009200 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800920c:	7dfb      	ldrb	r3, [r7, #23]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3720      	adds	r7, #32
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	01e84800 	.word	0x01e84800
 800921c:	00f42400 	.word	0x00f42400

08009220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00a      	beq.n	800924a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	430a      	orrs	r2, r1
 8009248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	f003 0302 	and.w	r3, r3, #2
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00a      	beq.n	800926c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	430a      	orrs	r2, r1
 800926a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009270:	f003 0304 	and.w	r3, r3, #4
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00a      	beq.n	800928e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	430a      	orrs	r2, r1
 800928c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009292:	f003 0308 	and.w	r3, r3, #8
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00a      	beq.n	80092b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	430a      	orrs	r2, r1
 80092ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b4:	f003 0310 	and.w	r3, r3, #16
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00a      	beq.n	80092d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	430a      	orrs	r2, r1
 80092d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	f003 0320 	and.w	r3, r3, #32
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d01a      	beq.n	8009336 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800931e:	d10a      	bne.n	8009336 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00a      	beq.n	8009358 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	430a      	orrs	r2, r1
 8009356:	605a      	str	r2, [r3, #4]
  }
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af02      	add	r7, sp, #8
 800936a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009372:	f7fa fb2b 	bl	80039cc <HAL_GetTick>
 8009376:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0308 	and.w	r3, r3, #8
 8009382:	2b08      	cmp	r3, #8
 8009384:	d10e      	bne.n	80093a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009386:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f82a 	bl	80093ee <UART_WaitOnFlagUntilTimeout>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e020      	b.n	80093e6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0304 	and.w	r3, r3, #4
 80093ae:	2b04      	cmp	r3, #4
 80093b0:	d10e      	bne.n	80093d0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f814 	bl	80093ee <UART_WaitOnFlagUntilTimeout>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d001      	beq.n	80093d0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e00a      	b.n	80093e6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2220      	movs	r2, #32
 80093d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2220      	movs	r2, #32
 80093da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b084      	sub	sp, #16
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	60f8      	str	r0, [r7, #12]
 80093f6:	60b9      	str	r1, [r7, #8]
 80093f8:	603b      	str	r3, [r7, #0]
 80093fa:	4613      	mov	r3, r2
 80093fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093fe:	e05d      	b.n	80094bc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009406:	d059      	beq.n	80094bc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009408:	f7fa fae0 	bl	80039cc <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	69ba      	ldr	r2, [r7, #24]
 8009414:	429a      	cmp	r2, r3
 8009416:	d302      	bcc.n	800941e <UART_WaitOnFlagUntilTimeout+0x30>
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d11b      	bne.n	8009456 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800942c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689a      	ldr	r2, [r3, #8]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f022 0201 	bic.w	r2, r2, #1
 800943c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2220      	movs	r2, #32
 8009442:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2220      	movs	r2, #32
 8009448:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e042      	b.n	80094dc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b00      	cmp	r3, #0
 8009462:	d02b      	beq.n	80094bc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800946e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009472:	d123      	bne.n	80094bc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800947c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800948c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689a      	ldr	r2, [r3, #8]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f022 0201 	bic.w	r2, r2, #1
 800949c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2220      	movs	r2, #32
 80094a2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2220      	movs	r2, #32
 80094a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2220      	movs	r2, #32
 80094ae:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e00f      	b.n	80094dc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	69da      	ldr	r2, [r3, #28]
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	4013      	ands	r3, r2
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	bf0c      	ite	eq
 80094cc:	2301      	moveq	r3, #1
 80094ce:	2300      	movne	r3, #0
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	461a      	mov	r2, r3
 80094d4:	79fb      	ldrb	r3, [r7, #7]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d092      	beq.n	8009400 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094e4:	b084      	sub	sp, #16
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b084      	sub	sp, #16
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
 80094ee:	f107 001c 	add.w	r0, r7, #28
 80094f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d120      	bne.n	800953e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009500:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68da      	ldr	r2, [r3, #12]
 800950c:	4b20      	ldr	r3, [pc, #128]	; (8009590 <USB_CoreInit+0xac>)
 800950e:	4013      	ands	r3, r2
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009522:	2b01      	cmp	r3, #1
 8009524:	d105      	bne.n	8009532 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fa52 	bl	80099dc <USB_CoreReset>
 8009538:	4603      	mov	r3, r0
 800953a:	73fb      	strb	r3, [r7, #15]
 800953c:	e010      	b.n	8009560 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fa46 	bl	80099dc <USB_CoreReset>
 8009550:	4603      	mov	r3, r0
 8009552:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009558:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009562:	2b01      	cmp	r3, #1
 8009564:	d10b      	bne.n	800957e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f043 0206 	orr.w	r2, r3, #6
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	f043 0220 	orr.w	r2, r3, #32
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800957e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800958a:	b004      	add	sp, #16
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	ffbdffbf 	.word	0xffbdffbf

08009594 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	f023 0201 	bic.w	r2, r3, #1
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b082      	sub	sp, #8
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	460b      	mov	r3, r1
 80095c0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80095ce:	78fb      	ldrb	r3, [r7, #3]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d106      	bne.n	80095e2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	60da      	str	r2, [r3, #12]
 80095e0:	e00b      	b.n	80095fa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80095e2:	78fb      	ldrb	r3, [r7, #3]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d106      	bne.n	80095f6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	60da      	str	r2, [r3, #12]
 80095f4:	e001      	b.n	80095fa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e003      	b.n	8009602 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80095fa:	2032      	movs	r0, #50	; 0x32
 80095fc:	f7fa f9f2 	bl	80039e4 <HAL_Delay>

  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
	...

0800960c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800960c:	b084      	sub	sp, #16
 800960e:	b580      	push	{r7, lr}
 8009610:	b086      	sub	sp, #24
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800961a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009626:	2300      	movs	r3, #0
 8009628:	613b      	str	r3, [r7, #16]
 800962a:	e009      	b.n	8009640 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	3340      	adds	r3, #64	; 0x40
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4413      	add	r3, r2
 8009636:	2200      	movs	r2, #0
 8009638:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	3301      	adds	r3, #1
 800963e:	613b      	str	r3, [r7, #16]
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	2b0e      	cmp	r3, #14
 8009644:	d9f2      	bls.n	800962c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009648:	2b00      	cmp	r3, #0
 800964a:	d11c      	bne.n	8009686 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800965a:	f043 0302 	orr.w	r3, r3, #2
 800965e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009664:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	e005      	b.n	8009692 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009698:	461a      	mov	r2, r3
 800969a:	2300      	movs	r3, #0
 800969c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096a4:	4619      	mov	r1, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ac:	461a      	mov	r2, r3
 80096ae:	680b      	ldr	r3, [r1, #0]
 80096b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d10c      	bne.n	80096d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80096b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d104      	bne.n	80096c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80096be:	2100      	movs	r1, #0
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 f959 	bl	8009978 <USB_SetDevSpeed>
 80096c6:	e018      	b.n	80096fa <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80096c8:	2101      	movs	r1, #1
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f954 	bl	8009978 <USB_SetDevSpeed>
 80096d0:	e013      	b.n	80096fa <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80096d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d10c      	bne.n	80096f2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80096d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d104      	bne.n	80096e8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80096de:	2100      	movs	r1, #0
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f949 	bl	8009978 <USB_SetDevSpeed>
 80096e6:	e008      	b.n	80096fa <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80096e8:	2101      	movs	r1, #1
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f944 	bl	8009978 <USB_SetDevSpeed>
 80096f0:	e003      	b.n	80096fa <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80096f2:	2103      	movs	r1, #3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f93f 	bl	8009978 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80096fa:	2110      	movs	r1, #16
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f8f3 	bl	80098e8 <USB_FlushTxFifo>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d001      	beq.n	800970c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f911 	bl	8009934 <USB_FlushRxFifo>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009722:	461a      	mov	r2, r3
 8009724:	2300      	movs	r3, #0
 8009726:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800972e:	461a      	mov	r2, r3
 8009730:	2300      	movs	r3, #0
 8009732:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800973a:	461a      	mov	r2, r3
 800973c:	2300      	movs	r3, #0
 800973e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009740:	2300      	movs	r3, #0
 8009742:	613b      	str	r3, [r7, #16]
 8009744:	e043      	b.n	80097ce <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	015a      	lsls	r2, r3, #5
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	4413      	add	r3, r2
 800974e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800975c:	d118      	bne.n	8009790 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10a      	bne.n	800977a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	015a      	lsls	r2, r3, #5
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	4413      	add	r3, r2
 800976c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009770:	461a      	mov	r2, r3
 8009772:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009776:	6013      	str	r3, [r2, #0]
 8009778:	e013      	b.n	80097a2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	015a      	lsls	r2, r3, #5
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	4413      	add	r3, r2
 8009782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009786:	461a      	mov	r2, r3
 8009788:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800978c:	6013      	str	r3, [r2, #0]
 800978e:	e008      	b.n	80097a2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	4413      	add	r3, r2
 8009798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800979c:	461a      	mov	r2, r3
 800979e:	2300      	movs	r3, #0
 80097a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ae:	461a      	mov	r2, r3
 80097b0:	2300      	movs	r3, #0
 80097b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c0:	461a      	mov	r2, r3
 80097c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80097c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	3301      	adds	r3, #1
 80097cc:	613b      	str	r3, [r7, #16]
 80097ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d3b7      	bcc.n	8009746 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097d6:	2300      	movs	r3, #0
 80097d8:	613b      	str	r3, [r7, #16]
 80097da:	e043      	b.n	8009864 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	015a      	lsls	r2, r3, #5
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	4413      	add	r3, r2
 80097e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097f2:	d118      	bne.n	8009826 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10a      	bne.n	8009810 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	4413      	add	r3, r2
 8009802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009806:	461a      	mov	r2, r3
 8009808:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800980c:	6013      	str	r3, [r2, #0]
 800980e:	e013      	b.n	8009838 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800981c:	461a      	mov	r2, r3
 800981e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009822:	6013      	str	r3, [r2, #0]
 8009824:	e008      	b.n	8009838 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	015a      	lsls	r2, r3, #5
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	4413      	add	r3, r2
 800982e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009832:	461a      	mov	r2, r3
 8009834:	2300      	movs	r3, #0
 8009836:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4413      	add	r3, r2
 8009840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009844:	461a      	mov	r2, r3
 8009846:	2300      	movs	r3, #0
 8009848:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	4413      	add	r3, r2
 8009852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009856:	461a      	mov	r2, r3
 8009858:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800985c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	3301      	adds	r3, #1
 8009862:	613b      	str	r3, [r7, #16]
 8009864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	429a      	cmp	r2, r3
 800986a:	d3b7      	bcc.n	80097dc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800987a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800987e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800988c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800988e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009890:	2b00      	cmp	r3, #0
 8009892:	d105      	bne.n	80098a0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	f043 0210 	orr.w	r2, r3, #16
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	699a      	ldr	r2, [r3, #24]
 80098a4:	4b0e      	ldr	r3, [pc, #56]	; (80098e0 <USB_DevInit+0x2d4>)
 80098a6:	4313      	orrs	r3, r2
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80098ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d005      	beq.n	80098be <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	f043 0208 	orr.w	r2, r3, #8
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80098be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d105      	bne.n	80098d0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	699a      	ldr	r2, [r3, #24]
 80098c8:	4b06      	ldr	r3, [pc, #24]	; (80098e4 <USB_DevInit+0x2d8>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80098d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098dc:	b004      	add	sp, #16
 80098de:	4770      	bx	lr
 80098e0:	803c3800 	.word	0x803c3800
 80098e4:	40000004 	.word	0x40000004

080098e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80098f2:	2300      	movs	r3, #0
 80098f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	019b      	lsls	r3, r3, #6
 80098fa:	f043 0220 	orr.w	r2, r3, #32
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3301      	adds	r3, #1
 8009906:	60fb      	str	r3, [r7, #12]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	4a09      	ldr	r2, [pc, #36]	; (8009930 <USB_FlushTxFifo+0x48>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d901      	bls.n	8009914 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009910:	2303      	movs	r3, #3
 8009912:	e006      	b.n	8009922 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	f003 0320 	and.w	r3, r3, #32
 800991c:	2b20      	cmp	r3, #32
 800991e:	d0f0      	beq.n	8009902 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3714      	adds	r7, #20
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	00030d40 	.word	0x00030d40

08009934 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800993c:	2300      	movs	r3, #0
 800993e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2210      	movs	r2, #16
 8009944:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3301      	adds	r3, #1
 800994a:	60fb      	str	r3, [r7, #12]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	4a09      	ldr	r2, [pc, #36]	; (8009974 <USB_FlushRxFifo+0x40>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d901      	bls.n	8009958 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009954:	2303      	movs	r3, #3
 8009956:	e006      	b.n	8009966 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	f003 0310 	and.w	r3, r3, #16
 8009960:	2b10      	cmp	r3, #16
 8009962:	d0f0      	beq.n	8009946 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	00030d40 	.word	0x00030d40

08009978 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	68f9      	ldr	r1, [r7, #12]
 8009994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009998:	4313      	orrs	r3, r2
 800999a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3714      	adds	r7, #20
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b084      	sub	sp, #16
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099c4:	f043 0302 	orr.w	r3, r3, #2
 80099c8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80099ca:	2003      	movs	r0, #3
 80099cc:	f7fa f80a 	bl	80039e4 <HAL_Delay>

  return HAL_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
	...

080099dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80099e4:	2300      	movs	r3, #0
 80099e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	3301      	adds	r3, #1
 80099ec:	60fb      	str	r3, [r7, #12]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	4a13      	ldr	r2, [pc, #76]	; (8009a40 <USB_CoreReset+0x64>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d901      	bls.n	80099fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099f6:	2303      	movs	r3, #3
 80099f8:	e01b      	b.n	8009a32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	daf2      	bge.n	80099e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a02:	2300      	movs	r3, #0
 8009a04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	f043 0201 	orr.w	r2, r3, #1
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	3301      	adds	r3, #1
 8009a16:	60fb      	str	r3, [r7, #12]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	4a09      	ldr	r2, [pc, #36]	; (8009a40 <USB_CoreReset+0x64>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d901      	bls.n	8009a24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e006      	b.n	8009a32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d0f0      	beq.n	8009a12 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	00030d40 	.word	0x00030d40

08009a44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a44:	b480      	push	{r7}
 8009a46:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009a48:	bf00      	nop
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
	...

08009a54 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a5a:	f3ef 8305 	mrs	r3, IPSR
 8009a5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10f      	bne.n	8009a86 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a66:	f3ef 8310 	mrs	r3, PRIMASK
 8009a6a:	607b      	str	r3, [r7, #4]
  return(result);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d105      	bne.n	8009a7e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a72:	f3ef 8311 	mrs	r3, BASEPRI
 8009a76:	603b      	str	r3, [r7, #0]
  return(result);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d007      	beq.n	8009a8e <osKernelInitialize+0x3a>
 8009a7e:	4b0e      	ldr	r3, [pc, #56]	; (8009ab8 <osKernelInitialize+0x64>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	d103      	bne.n	8009a8e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009a86:	f06f 0305 	mvn.w	r3, #5
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	e00c      	b.n	8009aa8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a8e:	4b0a      	ldr	r3, [pc, #40]	; (8009ab8 <osKernelInitialize+0x64>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d105      	bne.n	8009aa2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009a96:	4b08      	ldr	r3, [pc, #32]	; (8009ab8 <osKernelInitialize+0x64>)
 8009a98:	2201      	movs	r2, #1
 8009a9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	60fb      	str	r3, [r7, #12]
 8009aa0:	e002      	b.n	8009aa8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3714      	adds	r7, #20
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	20000324 	.word	0x20000324

08009abc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ac2:	f3ef 8305 	mrs	r3, IPSR
 8009ac6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ac8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10f      	bne.n	8009aee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ace:	f3ef 8310 	mrs	r3, PRIMASK
 8009ad2:	607b      	str	r3, [r7, #4]
  return(result);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d105      	bne.n	8009ae6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ada:	f3ef 8311 	mrs	r3, BASEPRI
 8009ade:	603b      	str	r3, [r7, #0]
  return(result);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d007      	beq.n	8009af6 <osKernelStart+0x3a>
 8009ae6:	4b0f      	ldr	r3, [pc, #60]	; (8009b24 <osKernelStart+0x68>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d103      	bne.n	8009af6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8009aee:	f06f 0305 	mvn.w	r3, #5
 8009af2:	60fb      	str	r3, [r7, #12]
 8009af4:	e010      	b.n	8009b18 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009af6:	4b0b      	ldr	r3, [pc, #44]	; (8009b24 <osKernelStart+0x68>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d109      	bne.n	8009b12 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009afe:	f7ff ffa1 	bl	8009a44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b02:	4b08      	ldr	r3, [pc, #32]	; (8009b24 <osKernelStart+0x68>)
 8009b04:	2202      	movs	r2, #2
 8009b06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b08:	f001 f89c 	bl	800ac44 <vTaskStartScheduler>
      stat = osOK;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	60fb      	str	r3, [r7, #12]
 8009b10:	e002      	b.n	8009b18 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009b12:	f04f 33ff 	mov.w	r3, #4294967295
 8009b16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009b18:	68fb      	ldr	r3, [r7, #12]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	20000324 	.word	0x20000324

08009b28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b090      	sub	sp, #64	; 0x40
 8009b2c:	af04      	add	r7, sp, #16
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b34:	2300      	movs	r3, #0
 8009b36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b38:	f3ef 8305 	mrs	r3, IPSR
 8009b3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8009b3e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f040 808f 	bne.w	8009c64 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b46:	f3ef 8310 	mrs	r3, PRIMASK
 8009b4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d105      	bne.n	8009b5e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b52:	f3ef 8311 	mrs	r3, BASEPRI
 8009b56:	617b      	str	r3, [r7, #20]
  return(result);
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <osThreadNew+0x3e>
 8009b5e:	4b44      	ldr	r3, [pc, #272]	; (8009c70 <osThreadNew+0x148>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d07e      	beq.n	8009c64 <osThreadNew+0x13c>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d07b      	beq.n	8009c64 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009b6c:	2380      	movs	r3, #128	; 0x80
 8009b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009b70:	2318      	movs	r3, #24
 8009b72:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009b74:	2300      	movs	r3, #0
 8009b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009b78:	f04f 33ff 	mov.w	r3, #4294967295
 8009b7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d045      	beq.n	8009c10 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d002      	beq.n	8009b92 <osThreadNew+0x6a>
        name = attr->name;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	699b      	ldr	r3, [r3, #24]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d002      	beq.n	8009ba0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d008      	beq.n	8009bb8 <osThreadNew+0x90>
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	2b38      	cmp	r3, #56	; 0x38
 8009baa:	d805      	bhi.n	8009bb8 <osThreadNew+0x90>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	f003 0301 	and.w	r3, r3, #1
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d001      	beq.n	8009bbc <osThreadNew+0x94>
        return (NULL);
 8009bb8:	2300      	movs	r3, #0
 8009bba:	e054      	b.n	8009c66 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d003      	beq.n	8009bcc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	695b      	ldr	r3, [r3, #20]
 8009bc8:	089b      	lsrs	r3, r3, #2
 8009bca:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00e      	beq.n	8009bf2 <osThreadNew+0xca>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	2b5b      	cmp	r3, #91	; 0x5b
 8009bda:	d90a      	bls.n	8009bf2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d006      	beq.n	8009bf2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	695b      	ldr	r3, [r3, #20]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d002      	beq.n	8009bf2 <osThreadNew+0xca>
        mem = 1;
 8009bec:	2301      	movs	r3, #1
 8009bee:	623b      	str	r3, [r7, #32]
 8009bf0:	e010      	b.n	8009c14 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10c      	bne.n	8009c14 <osThreadNew+0xec>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d108      	bne.n	8009c14 <osThreadNew+0xec>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d104      	bne.n	8009c14 <osThreadNew+0xec>
          mem = 0;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	623b      	str	r3, [r7, #32]
 8009c0e:	e001      	b.n	8009c14 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009c10:	2300      	movs	r3, #0
 8009c12:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d110      	bne.n	8009c3c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c22:	9202      	str	r2, [sp, #8]
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f000 fe2b 	bl	800a88c <xTaskCreateStatic>
 8009c36:	4603      	mov	r3, r0
 8009c38:	613b      	str	r3, [r7, #16]
 8009c3a:	e013      	b.n	8009c64 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d110      	bne.n	8009c64 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	f107 0310 	add.w	r3, r7, #16
 8009c4a:	9301      	str	r3, [sp, #4]
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f000 fe79 	bl	800a94c <xTaskCreate>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d001      	beq.n	8009c64 <osThreadNew+0x13c>
          hTask = NULL;
 8009c60:	2300      	movs	r3, #0
 8009c62:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c64:	693b      	ldr	r3, [r7, #16]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3730      	adds	r7, #48	; 0x30
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	20000324 	.word	0x20000324

08009c74 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c7c:	f3ef 8305 	mrs	r3, IPSR
 8009c80:	613b      	str	r3, [r7, #16]
  return(result);
 8009c82:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10f      	bne.n	8009ca8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c88:	f3ef 8310 	mrs	r3, PRIMASK
 8009c8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d105      	bne.n	8009ca0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c94:	f3ef 8311 	mrs	r3, BASEPRI
 8009c98:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d007      	beq.n	8009cb0 <osDelay+0x3c>
 8009ca0:	4b0a      	ldr	r3, [pc, #40]	; (8009ccc <osDelay+0x58>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d103      	bne.n	8009cb0 <osDelay+0x3c>
    stat = osErrorISR;
 8009ca8:	f06f 0305 	mvn.w	r3, #5
 8009cac:	617b      	str	r3, [r7, #20]
 8009cae:	e007      	b.n	8009cc0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d002      	beq.n	8009cc0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 ff8c 	bl	800abd8 <vTaskDelay>
    }
  }

  return (stat);
 8009cc0:	697b      	ldr	r3, [r7, #20]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3718      	adds	r7, #24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	20000324 	.word	0x20000324

08009cd0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4a07      	ldr	r2, [pc, #28]	; (8009cfc <vApplicationGetIdleTaskMemory+0x2c>)
 8009ce0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	4a06      	ldr	r2, [pc, #24]	; (8009d00 <vApplicationGetIdleTaskMemory+0x30>)
 8009ce6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2280      	movs	r2, #128	; 0x80
 8009cec:	601a      	str	r2, [r3, #0]
}
 8009cee:	bf00      	nop
 8009cf0:	3714      	adds	r7, #20
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	20000328 	.word	0x20000328
 8009d00:	20000384 	.word	0x20000384

08009d04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4a07      	ldr	r2, [pc, #28]	; (8009d30 <vApplicationGetTimerTaskMemory+0x2c>)
 8009d14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	4a06      	ldr	r2, [pc, #24]	; (8009d34 <vApplicationGetTimerTaskMemory+0x30>)
 8009d1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d22:	601a      	str	r2, [r3, #0]
}
 8009d24:	bf00      	nop
 8009d26:	3714      	adds	r7, #20
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr
 8009d30:	20000584 	.word	0x20000584
 8009d34:	200005e0 	.word	0x200005e0

08009d38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f103 0208 	add.w	r2, r3, #8
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f103 0208 	add.w	r2, r3, #8
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f103 0208 	add.w	r2, r3, #8
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d86:	bf00      	nop
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d92:	b480      	push	{r7}
 8009d94:	b085      	sub	sp, #20
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	689a      	ldr	r2, [r3, #8]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	1c5a      	adds	r2, r3, #1
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	601a      	str	r2, [r3, #0]
}
 8009dce:	bf00      	nop
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr

08009dda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b085      	sub	sp, #20
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df0:	d103      	bne.n	8009dfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	60fb      	str	r3, [r7, #12]
 8009df8:	e00c      	b.n	8009e14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	3308      	adds	r3, #8
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	e002      	b.n	8009e08 <vListInsert+0x2e>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d2f6      	bcs.n	8009e02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	685a      	ldr	r2, [r3, #4]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	683a      	ldr	r2, [r7, #0]
 8009e2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	1c5a      	adds	r2, r3, #1
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	601a      	str	r2, [r3, #0]
}
 8009e40:	bf00      	nop
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	6892      	ldr	r2, [r2, #8]
 8009e62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	6852      	ldr	r2, [r2, #4]
 8009e6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d103      	bne.n	8009e80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	689a      	ldr	r2, [r3, #8]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	1e5a      	subs	r2, r3, #1
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10b      	bne.n	8009ecc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb8:	b672      	cpsid	i
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	b662      	cpsie	i
 8009ec8:	60bb      	str	r3, [r7, #8]
 8009eca:	e7fe      	b.n	8009eca <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8009ecc:	f002 f844 	bl	800bf58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed8:	68f9      	ldr	r1, [r7, #12]
 8009eda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009edc:	fb01 f303 	mul.w	r3, r1, r3
 8009ee0:	441a      	add	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009efc:	3b01      	subs	r3, #1
 8009efe:	68f9      	ldr	r1, [r7, #12]
 8009f00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f02:	fb01 f303 	mul.w	r3, r1, r3
 8009f06:	441a      	add	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	22ff      	movs	r2, #255	; 0xff
 8009f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	22ff      	movs	r2, #255	; 0xff
 8009f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d114      	bne.n	8009f4c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d01a      	beq.n	8009f60 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	3310      	adds	r3, #16
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f001 f916 	bl	800b160 <xTaskRemoveFromEventList>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d012      	beq.n	8009f60 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f3a:	4b0d      	ldr	r3, [pc, #52]	; (8009f70 <xQueueGenericReset+0xd0>)
 8009f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f40:	601a      	str	r2, [r3, #0]
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	e009      	b.n	8009f60 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	3310      	adds	r3, #16
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7ff fef1 	bl	8009d38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3324      	adds	r3, #36	; 0x24
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7ff feec 	bl	8009d38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f60:	f002 f82c 	bl	800bfbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f64:	2301      	movs	r3, #1
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	e000ed04 	.word	0xe000ed04

08009f74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b08e      	sub	sp, #56	; 0x38
 8009f78:	af02      	add	r7, sp, #8
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
 8009f80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10b      	bne.n	8009fa0 <xQueueGenericCreateStatic+0x2c>
 8009f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8c:	b672      	cpsid	i
 8009f8e:	f383 8811 	msr	BASEPRI, r3
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	b662      	cpsie	i
 8009f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f9e:	e7fe      	b.n	8009f9e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d10b      	bne.n	8009fbe <xQueueGenericCreateStatic+0x4a>
 8009fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009faa:	b672      	cpsid	i
 8009fac:	f383 8811 	msr	BASEPRI, r3
 8009fb0:	f3bf 8f6f 	isb	sy
 8009fb4:	f3bf 8f4f 	dsb	sy
 8009fb8:	b662      	cpsie	i
 8009fba:	627b      	str	r3, [r7, #36]	; 0x24
 8009fbc:	e7fe      	b.n	8009fbc <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d002      	beq.n	8009fca <xQueueGenericCreateStatic+0x56>
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <xQueueGenericCreateStatic+0x5a>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e000      	b.n	8009fd0 <xQueueGenericCreateStatic+0x5c>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10b      	bne.n	8009fec <xQueueGenericCreateStatic+0x78>
 8009fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd8:	b672      	cpsid	i
 8009fda:	f383 8811 	msr	BASEPRI, r3
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	b662      	cpsie	i
 8009fe8:	623b      	str	r3, [r7, #32]
 8009fea:	e7fe      	b.n	8009fea <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d102      	bne.n	8009ff8 <xQueueGenericCreateStatic+0x84>
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <xQueueGenericCreateStatic+0x88>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e000      	b.n	8009ffe <xQueueGenericCreateStatic+0x8a>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10b      	bne.n	800a01a <xQueueGenericCreateStatic+0xa6>
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	b672      	cpsid	i
 800a008:	f383 8811 	msr	BASEPRI, r3
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	b662      	cpsie	i
 800a016:	61fb      	str	r3, [r7, #28]
 800a018:	e7fe      	b.n	800a018 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a01a:	2350      	movs	r3, #80	; 0x50
 800a01c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	2b50      	cmp	r3, #80	; 0x50
 800a022:	d00b      	beq.n	800a03c <xQueueGenericCreateStatic+0xc8>
 800a024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a028:	b672      	cpsid	i
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	b662      	cpsie	i
 800a038:	61bb      	str	r3, [r7, #24]
 800a03a:	e7fe      	b.n	800a03a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a03c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00d      	beq.n	800a064 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a050:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	4613      	mov	r3, r2
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	68b9      	ldr	r1, [r7, #8]
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f000 f805 	bl	800a06e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a066:	4618      	mov	r0, r3
 800a068:	3730      	adds	r7, #48	; 0x30
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b084      	sub	sp, #16
 800a072:	af00      	add	r7, sp, #0
 800a074:	60f8      	str	r0, [r7, #12]
 800a076:	60b9      	str	r1, [r7, #8]
 800a078:	607a      	str	r2, [r7, #4]
 800a07a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d103      	bne.n	800a08a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	69ba      	ldr	r2, [r7, #24]
 800a086:	601a      	str	r2, [r3, #0]
 800a088:	e002      	b.n	800a090 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a09c:	2101      	movs	r1, #1
 800a09e:	69b8      	ldr	r0, [r7, #24]
 800a0a0:	f7ff fefe 	bl	8009ea0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	78fa      	ldrb	r2, [r7, #3]
 800a0a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a0ac:	bf00      	nop
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b08e      	sub	sp, #56	; 0x38
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
 800a0c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10b      	bne.n	800a0e8 <xQueueGenericSend+0x34>
 800a0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d4:	b672      	cpsid	i
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	b662      	cpsie	i
 800a0e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0e6:	e7fe      	b.n	800a0e6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d103      	bne.n	800a0f6 <xQueueGenericSend+0x42>
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <xQueueGenericSend+0x46>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e000      	b.n	800a0fc <xQueueGenericSend+0x48>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10b      	bne.n	800a118 <xQueueGenericSend+0x64>
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	b672      	cpsid	i
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	b662      	cpsie	i
 800a114:	627b      	str	r3, [r7, #36]	; 0x24
 800a116:	e7fe      	b.n	800a116 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d103      	bne.n	800a126 <xQueueGenericSend+0x72>
 800a11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a122:	2b01      	cmp	r3, #1
 800a124:	d101      	bne.n	800a12a <xQueueGenericSend+0x76>
 800a126:	2301      	movs	r3, #1
 800a128:	e000      	b.n	800a12c <xQueueGenericSend+0x78>
 800a12a:	2300      	movs	r3, #0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10b      	bne.n	800a148 <xQueueGenericSend+0x94>
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	b672      	cpsid	i
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	b662      	cpsie	i
 800a144:	623b      	str	r3, [r7, #32]
 800a146:	e7fe      	b.n	800a146 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a148:	f001 f9c8 	bl	800b4dc <xTaskGetSchedulerState>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d102      	bne.n	800a158 <xQueueGenericSend+0xa4>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <xQueueGenericSend+0xa8>
 800a158:	2301      	movs	r3, #1
 800a15a:	e000      	b.n	800a15e <xQueueGenericSend+0xaa>
 800a15c:	2300      	movs	r3, #0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10b      	bne.n	800a17a <xQueueGenericSend+0xc6>
 800a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a166:	b672      	cpsid	i
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	b662      	cpsie	i
 800a176:	61fb      	str	r3, [r7, #28]
 800a178:	e7fe      	b.n	800a178 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a17a:	f001 feed 	bl	800bf58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a186:	429a      	cmp	r2, r3
 800a188:	d302      	bcc.n	800a190 <xQueueGenericSend+0xdc>
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d129      	bne.n	800a1e4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a190:	683a      	ldr	r2, [r7, #0]
 800a192:	68b9      	ldr	r1, [r7, #8]
 800a194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a196:	f000 fa0d 	bl	800a5b4 <prvCopyDataToQueue>
 800a19a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d010      	beq.n	800a1c6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a6:	3324      	adds	r3, #36	; 0x24
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f000 ffd9 	bl	800b160 <xTaskRemoveFromEventList>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d013      	beq.n	800a1dc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a1b4:	4b3f      	ldr	r3, [pc, #252]	; (800a2b4 <xQueueGenericSend+0x200>)
 800a1b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	e00a      	b.n	800a1dc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d007      	beq.n	800a1dc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a1cc:	4b39      	ldr	r3, [pc, #228]	; (800a2b4 <xQueueGenericSend+0x200>)
 800a1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1d2:	601a      	str	r2, [r3, #0]
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a1dc:	f001 feee 	bl	800bfbc <vPortExitCritical>
				return pdPASS;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e063      	b.n	800a2ac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d103      	bne.n	800a1f2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1ea:	f001 fee7 	bl	800bfbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	e05c      	b.n	800a2ac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d106      	bne.n	800a206 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1f8:	f107 0314 	add.w	r3, r7, #20
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f001 f813 	bl	800b228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a202:	2301      	movs	r3, #1
 800a204:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a206:	f001 fed9 	bl	800bfbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a20a:	f000 fd83 	bl	800ad14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a20e:	f001 fea3 	bl	800bf58 <vPortEnterCritical>
 800a212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a218:	b25b      	sxtb	r3, r3
 800a21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21e:	d103      	bne.n	800a228 <xQueueGenericSend+0x174>
 800a220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a222:	2200      	movs	r2, #0
 800a224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a22e:	b25b      	sxtb	r3, r3
 800a230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a234:	d103      	bne.n	800a23e <xQueueGenericSend+0x18a>
 800a236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a23e:	f001 febd 	bl	800bfbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a242:	1d3a      	adds	r2, r7, #4
 800a244:	f107 0314 	add.w	r3, r7, #20
 800a248:	4611      	mov	r1, r2
 800a24a:	4618      	mov	r0, r3
 800a24c:	f001 f802 	bl	800b254 <xTaskCheckForTimeOut>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d124      	bne.n	800a2a0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a256:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a258:	f000 faa4 	bl	800a7a4 <prvIsQueueFull>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d018      	beq.n	800a294 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a264:	3310      	adds	r3, #16
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	4611      	mov	r1, r2
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 ff26 	bl	800b0bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a272:	f000 fa2f 	bl	800a6d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a276:	f000 fd5b 	bl	800ad30 <xTaskResumeAll>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f47f af7c 	bne.w	800a17a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a282:	4b0c      	ldr	r3, [pc, #48]	; (800a2b4 <xQueueGenericSend+0x200>)
 800a284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	e772      	b.n	800a17a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a296:	f000 fa1d 	bl	800a6d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a29a:	f000 fd49 	bl	800ad30 <xTaskResumeAll>
 800a29e:	e76c      	b.n	800a17a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2a2:	f000 fa17 	bl	800a6d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2a6:	f000 fd43 	bl	800ad30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a2aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3738      	adds	r7, #56	; 0x38
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	e000ed04 	.word	0xe000ed04

0800a2b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b08e      	sub	sp, #56	; 0x38
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
 800a2c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10b      	bne.n	800a2e8 <xQueueGenericSendFromISR+0x30>
 800a2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d4:	b672      	cpsid	i
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	b662      	cpsie	i
 800a2e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2e6:	e7fe      	b.n	800a2e6 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d103      	bne.n	800a2f6 <xQueueGenericSendFromISR+0x3e>
 800a2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <xQueueGenericSendFromISR+0x42>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e000      	b.n	800a2fc <xQueueGenericSendFromISR+0x44>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10b      	bne.n	800a318 <xQueueGenericSendFromISR+0x60>
 800a300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a304:	b672      	cpsid	i
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	b662      	cpsie	i
 800a314:	623b      	str	r3, [r7, #32]
 800a316:	e7fe      	b.n	800a316 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d103      	bne.n	800a326 <xQueueGenericSendFromISR+0x6e>
 800a31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a322:	2b01      	cmp	r3, #1
 800a324:	d101      	bne.n	800a32a <xQueueGenericSendFromISR+0x72>
 800a326:	2301      	movs	r3, #1
 800a328:	e000      	b.n	800a32c <xQueueGenericSendFromISR+0x74>
 800a32a:	2300      	movs	r3, #0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10b      	bne.n	800a348 <xQueueGenericSendFromISR+0x90>
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	b672      	cpsid	i
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	b662      	cpsie	i
 800a344:	61fb      	str	r3, [r7, #28]
 800a346:	e7fe      	b.n	800a346 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a348:	f001 fee6 	bl	800c118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a34c:	f3ef 8211 	mrs	r2, BASEPRI
 800a350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a354:	b672      	cpsid	i
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	b662      	cpsie	i
 800a364:	61ba      	str	r2, [r7, #24]
 800a366:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a368:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a36a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a374:	429a      	cmp	r2, r3
 800a376:	d302      	bcc.n	800a37e <xQueueGenericSendFromISR+0xc6>
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d12c      	bne.n	800a3d8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a388:	683a      	ldr	r2, [r7, #0]
 800a38a:	68b9      	ldr	r1, [r7, #8]
 800a38c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a38e:	f000 f911 	bl	800a5b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a392:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a39a:	d112      	bne.n	800a3c2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d016      	beq.n	800a3d2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	3324      	adds	r3, #36	; 0x24
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 fed9 	bl	800b160 <xTaskRemoveFromEventList>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d00e      	beq.n	800a3d2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00b      	beq.n	800a3d2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	601a      	str	r2, [r3, #0]
 800a3c0:	e007      	b.n	800a3d2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	b25a      	sxtb	r2, r3
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a3d6:	e001      	b.n	800a3dc <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	637b      	str	r3, [r7, #52]	; 0x34
 800a3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3de:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3738      	adds	r7, #56	; 0x38
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b08c      	sub	sp, #48	; 0x30
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a406:	2b00      	cmp	r3, #0
 800a408:	d10b      	bne.n	800a422 <xQueueReceive+0x32>
	__asm volatile
 800a40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40e:	b672      	cpsid	i
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	b662      	cpsie	i
 800a41e:	623b      	str	r3, [r7, #32]
 800a420:	e7fe      	b.n	800a420 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d103      	bne.n	800a430 <xQueueReceive+0x40>
 800a428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d101      	bne.n	800a434 <xQueueReceive+0x44>
 800a430:	2301      	movs	r3, #1
 800a432:	e000      	b.n	800a436 <xQueueReceive+0x46>
 800a434:	2300      	movs	r3, #0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10b      	bne.n	800a452 <xQueueReceive+0x62>
 800a43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43e:	b672      	cpsid	i
 800a440:	f383 8811 	msr	BASEPRI, r3
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	b662      	cpsie	i
 800a44e:	61fb      	str	r3, [r7, #28]
 800a450:	e7fe      	b.n	800a450 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a452:	f001 f843 	bl	800b4dc <xTaskGetSchedulerState>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d102      	bne.n	800a462 <xQueueReceive+0x72>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <xQueueReceive+0x76>
 800a462:	2301      	movs	r3, #1
 800a464:	e000      	b.n	800a468 <xQueueReceive+0x78>
 800a466:	2300      	movs	r3, #0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10b      	bne.n	800a484 <xQueueReceive+0x94>
 800a46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a470:	b672      	cpsid	i
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	b662      	cpsie	i
 800a480:	61bb      	str	r3, [r7, #24]
 800a482:	e7fe      	b.n	800a482 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a484:	f001 fd68 	bl	800bf58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a490:	2b00      	cmp	r3, #0
 800a492:	d01f      	beq.n	800a4d4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a494:	68b9      	ldr	r1, [r7, #8]
 800a496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a498:	f000 f8f6 	bl	800a688 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	1e5a      	subs	r2, r3, #1
 800a4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00f      	beq.n	800a4cc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ae:	3310      	adds	r3, #16
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f000 fe55 	bl	800b160 <xTaskRemoveFromEventList>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d007      	beq.n	800a4cc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4bc:	4b3c      	ldr	r3, [pc, #240]	; (800a5b0 <xQueueReceive+0x1c0>)
 800a4be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4c2:	601a      	str	r2, [r3, #0]
 800a4c4:	f3bf 8f4f 	dsb	sy
 800a4c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4cc:	f001 fd76 	bl	800bfbc <vPortExitCritical>
				return pdPASS;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e069      	b.n	800a5a8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d103      	bne.n	800a4e2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4da:	f001 fd6f 	bl	800bfbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	e062      	b.n	800a5a8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d106      	bne.n	800a4f6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4e8:	f107 0310 	add.w	r3, r7, #16
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 fe9b 	bl	800b228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4f6:	f001 fd61 	bl	800bfbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4fa:	f000 fc0b 	bl	800ad14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4fe:	f001 fd2b 	bl	800bf58 <vPortEnterCritical>
 800a502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a508:	b25b      	sxtb	r3, r3
 800a50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50e:	d103      	bne.n	800a518 <xQueueReceive+0x128>
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	2200      	movs	r2, #0
 800a514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a51e:	b25b      	sxtb	r3, r3
 800a520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a524:	d103      	bne.n	800a52e <xQueueReceive+0x13e>
 800a526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a52e:	f001 fd45 	bl	800bfbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a532:	1d3a      	adds	r2, r7, #4
 800a534:	f107 0310 	add.w	r3, r7, #16
 800a538:	4611      	mov	r1, r2
 800a53a:	4618      	mov	r0, r3
 800a53c:	f000 fe8a 	bl	800b254 <xTaskCheckForTimeOut>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d123      	bne.n	800a58e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a548:	f000 f916 	bl	800a778 <prvIsQueueEmpty>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d017      	beq.n	800a582 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a554:	3324      	adds	r3, #36	; 0x24
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	4611      	mov	r1, r2
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 fdae 	bl	800b0bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a562:	f000 f8b7 	bl	800a6d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a566:	f000 fbe3 	bl	800ad30 <xTaskResumeAll>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d189      	bne.n	800a484 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a570:	4b0f      	ldr	r3, [pc, #60]	; (800a5b0 <xQueueReceive+0x1c0>)
 800a572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a576:	601a      	str	r2, [r3, #0]
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	e780      	b.n	800a484 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a584:	f000 f8a6 	bl	800a6d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a588:	f000 fbd2 	bl	800ad30 <xTaskResumeAll>
 800a58c:	e77a      	b.n	800a484 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a58e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a590:	f000 f8a0 	bl	800a6d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a594:	f000 fbcc 	bl	800ad30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a59a:	f000 f8ed 	bl	800a778 <prvIsQueueEmpty>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f43f af6f 	beq.w	800a484 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3730      	adds	r7, #48	; 0x30
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	e000ed04 	.word	0xe000ed04

0800a5b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b086      	sub	sp, #24
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10d      	bne.n	800a5ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d14d      	bne.n	800a676 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f000 ff9a 	bl	800b518 <xTaskPriorityDisinherit>
 800a5e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	609a      	str	r2, [r3, #8]
 800a5ec:	e043      	b.n	800a676 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d119      	bne.n	800a628 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6858      	ldr	r0, [r3, #4]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	68b9      	ldr	r1, [r7, #8]
 800a600:	f001 ffd6 	bl	800c5b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	685a      	ldr	r2, [r3, #4]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60c:	441a      	add	r2, r3
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	685a      	ldr	r2, [r3, #4]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d32b      	bcc.n	800a676 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	605a      	str	r2, [r3, #4]
 800a626:	e026      	b.n	800a676 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	68d8      	ldr	r0, [r3, #12]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a630:	461a      	mov	r2, r3
 800a632:	68b9      	ldr	r1, [r7, #8]
 800a634:	f001 ffbc 	bl	800c5b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	68da      	ldr	r2, [r3, #12]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a640:	425b      	negs	r3, r3
 800a642:	441a      	add	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	68da      	ldr	r2, [r3, #12]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	429a      	cmp	r2, r3
 800a652:	d207      	bcs.n	800a664 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	689a      	ldr	r2, [r3, #8]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65c:	425b      	negs	r3, r3
 800a65e:	441a      	add	r2, r3
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b02      	cmp	r3, #2
 800a668:	d105      	bne.n	800a676 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d002      	beq.n	800a676 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	3b01      	subs	r3, #1
 800a674:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	1c5a      	adds	r2, r3, #1
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a67e:	697b      	ldr	r3, [r7, #20]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3718      	adds	r7, #24
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a696:	2b00      	cmp	r3, #0
 800a698:	d018      	beq.n	800a6cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	68da      	ldr	r2, [r3, #12]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	441a      	add	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	68da      	ldr	r2, [r3, #12]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d303      	bcc.n	800a6bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	68d9      	ldr	r1, [r3, #12]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	6838      	ldr	r0, [r7, #0]
 800a6c8:	f001 ff72 	bl	800c5b0 <memcpy>
	}
}
 800a6cc:	bf00      	nop
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a6dc:	f001 fc3c 	bl	800bf58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6e8:	e011      	b.n	800a70e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d012      	beq.n	800a718 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	3324      	adds	r3, #36	; 0x24
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 fd32 	bl	800b160 <xTaskRemoveFromEventList>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d001      	beq.n	800a706 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a702:	f000 fe0b 	bl	800b31c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a706:	7bfb      	ldrb	r3, [r7, #15]
 800a708:	3b01      	subs	r3, #1
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a70e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a712:	2b00      	cmp	r3, #0
 800a714:	dce9      	bgt.n	800a6ea <prvUnlockQueue+0x16>
 800a716:	e000      	b.n	800a71a <prvUnlockQueue+0x46>
					break;
 800a718:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	22ff      	movs	r2, #255	; 0xff
 800a71e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a722:	f001 fc4b 	bl	800bfbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a726:	f001 fc17 	bl	800bf58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a730:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a732:	e011      	b.n	800a758 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d012      	beq.n	800a762 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	3310      	adds	r3, #16
 800a740:	4618      	mov	r0, r3
 800a742:	f000 fd0d 	bl	800b160 <xTaskRemoveFromEventList>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d001      	beq.n	800a750 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a74c:	f000 fde6 	bl	800b31c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a750:	7bbb      	ldrb	r3, [r7, #14]
 800a752:	3b01      	subs	r3, #1
 800a754:	b2db      	uxtb	r3, r3
 800a756:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	dce9      	bgt.n	800a734 <prvUnlockQueue+0x60>
 800a760:	e000      	b.n	800a764 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a762:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	22ff      	movs	r2, #255	; 0xff
 800a768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a76c:	f001 fc26 	bl	800bfbc <vPortExitCritical>
}
 800a770:	bf00      	nop
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a780:	f001 fbea 	bl	800bf58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d102      	bne.n	800a792 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a78c:	2301      	movs	r3, #1
 800a78e:	60fb      	str	r3, [r7, #12]
 800a790:	e001      	b.n	800a796 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a792:	2300      	movs	r3, #0
 800a794:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a796:	f001 fc11 	bl	800bfbc <vPortExitCritical>

	return xReturn;
 800a79a:	68fb      	ldr	r3, [r7, #12]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7ac:	f001 fbd4 	bl	800bf58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d102      	bne.n	800a7c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	60fb      	str	r3, [r7, #12]
 800a7c0:	e001      	b.n	800a7c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7c6:	f001 fbf9 	bl	800bfbc <vPortExitCritical>

	return xReturn;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7de:	2300      	movs	r3, #0
 800a7e0:	60fb      	str	r3, [r7, #12]
 800a7e2:	e014      	b.n	800a80e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a7e4:	4a0e      	ldr	r2, [pc, #56]	; (800a820 <vQueueAddToRegistry+0x4c>)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d10b      	bne.n	800a808 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a7f0:	490b      	ldr	r1, [pc, #44]	; (800a820 <vQueueAddToRegistry+0x4c>)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	683a      	ldr	r2, [r7, #0]
 800a7f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a7fa:	4a09      	ldr	r2, [pc, #36]	; (800a820 <vQueueAddToRegistry+0x4c>)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	00db      	lsls	r3, r3, #3
 800a800:	4413      	add	r3, r2
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a806:	e005      	b.n	800a814 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	3301      	adds	r3, #1
 800a80c:	60fb      	str	r3, [r7, #12]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2b07      	cmp	r3, #7
 800a812:	d9e7      	bls.n	800a7e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a814:	bf00      	nop
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	2000cc54 	.word	0x2000cc54

0800a824 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a834:	f001 fb90 	bl	800bf58 <vPortEnterCritical>
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a83e:	b25b      	sxtb	r3, r3
 800a840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a844:	d103      	bne.n	800a84e <vQueueWaitForMessageRestricted+0x2a>
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a854:	b25b      	sxtb	r3, r3
 800a856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85a:	d103      	bne.n	800a864 <vQueueWaitForMessageRestricted+0x40>
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a864:	f001 fbaa 	bl	800bfbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d106      	bne.n	800a87e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	3324      	adds	r3, #36	; 0x24
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	68b9      	ldr	r1, [r7, #8]
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 fc45 	bl	800b108 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a87e:	6978      	ldr	r0, [r7, #20]
 800a880:	f7ff ff28 	bl	800a6d4 <prvUnlockQueue>
	}
 800a884:	bf00      	nop
 800a886:	3718      	adds	r7, #24
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08e      	sub	sp, #56	; 0x38
 800a890:	af04      	add	r7, sp, #16
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10b      	bne.n	800a8b8 <xTaskCreateStatic+0x2c>
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	b672      	cpsid	i
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	b662      	cpsie	i
 800a8b4:	623b      	str	r3, [r7, #32]
 800a8b6:	e7fe      	b.n	800a8b6 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800a8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10b      	bne.n	800a8d6 <xTaskCreateStatic+0x4a>
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	b672      	cpsid	i
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	b662      	cpsie	i
 800a8d2:	61fb      	str	r3, [r7, #28]
 800a8d4:	e7fe      	b.n	800a8d4 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a8d6:	235c      	movs	r3, #92	; 0x5c
 800a8d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	2b5c      	cmp	r3, #92	; 0x5c
 800a8de:	d00b      	beq.n	800a8f8 <xTaskCreateStatic+0x6c>
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	b672      	cpsid	i
 800a8e6:	f383 8811 	msr	BASEPRI, r3
 800a8ea:	f3bf 8f6f 	isb	sy
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	b662      	cpsie	i
 800a8f4:	61bb      	str	r3, [r7, #24]
 800a8f6:	e7fe      	b.n	800a8f6 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a8f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d01e      	beq.n	800a93e <xTaskCreateStatic+0xb2>
 800a900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a902:	2b00      	cmp	r3, #0
 800a904:	d01b      	beq.n	800a93e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a908:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a90e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a912:	2202      	movs	r2, #2
 800a914:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a918:	2300      	movs	r3, #0
 800a91a:	9303      	str	r3, [sp, #12]
 800a91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91e:	9302      	str	r3, [sp, #8]
 800a920:	f107 0314 	add.w	r3, r7, #20
 800a924:	9301      	str	r3, [sp, #4]
 800a926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a928:	9300      	str	r3, [sp, #0]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	68b9      	ldr	r1, [r7, #8]
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f000 f850 	bl	800a9d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a936:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a938:	f000 f8de 	bl	800aaf8 <prvAddNewTaskToReadyList>
 800a93c:	e001      	b.n	800a942 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a93e:	2300      	movs	r3, #0
 800a940:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a942:	697b      	ldr	r3, [r7, #20]
	}
 800a944:	4618      	mov	r0, r3
 800a946:	3728      	adds	r7, #40	; 0x28
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b08c      	sub	sp, #48	; 0x30
 800a950:	af04      	add	r7, sp, #16
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	603b      	str	r3, [r7, #0]
 800a958:	4613      	mov	r3, r2
 800a95a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a95c:	88fb      	ldrh	r3, [r7, #6]
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	4618      	mov	r0, r3
 800a962:	f001 fc1b 	bl	800c19c <pvPortMalloc>
 800a966:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00e      	beq.n	800a98c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a96e:	205c      	movs	r0, #92	; 0x5c
 800a970:	f001 fc14 	bl	800c19c <pvPortMalloc>
 800a974:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d003      	beq.n	800a984 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	697a      	ldr	r2, [r7, #20]
 800a980:	631a      	str	r2, [r3, #48]	; 0x30
 800a982:	e005      	b.n	800a990 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a984:	6978      	ldr	r0, [r7, #20]
 800a986:	f001 fcd1 	bl	800c32c <vPortFree>
 800a98a:	e001      	b.n	800a990 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a98c:	2300      	movs	r3, #0
 800a98e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d017      	beq.n	800a9c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a99e:	88fa      	ldrh	r2, [r7, #6]
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	9303      	str	r3, [sp, #12]
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	9302      	str	r3, [sp, #8]
 800a9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9aa:	9301      	str	r3, [sp, #4]
 800a9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	68b9      	ldr	r1, [r7, #8]
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f000 f80e 	bl	800a9d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9ba:	69f8      	ldr	r0, [r7, #28]
 800a9bc:	f000 f89c 	bl	800aaf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	61bb      	str	r3, [r7, #24]
 800a9c4:	e002      	b.n	800a9cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a9c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a9cc:	69bb      	ldr	r3, [r7, #24]
	}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3720      	adds	r7, #32
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b088      	sub	sp, #32
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	60f8      	str	r0, [r7, #12]
 800a9de:	60b9      	str	r1, [r7, #8]
 800a9e0:	607a      	str	r2, [r7, #4]
 800a9e2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	21a5      	movs	r1, #165	; 0xa5
 800a9f0:	f001 fde9 	bl	800c5c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9f8:	6879      	ldr	r1, [r7, #4]
 800a9fa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a9fe:	440b      	add	r3, r1
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4413      	add	r3, r2
 800aa04:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	f023 0307 	bic.w	r3, r3, #7
 800aa0c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	f003 0307 	and.w	r3, r3, #7
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00b      	beq.n	800aa30 <prvInitialiseNewTask+0x5a>
 800aa18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1c:	b672      	cpsid	i
 800aa1e:	f383 8811 	msr	BASEPRI, r3
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	b662      	cpsie	i
 800aa2c:	617b      	str	r3, [r7, #20]
 800aa2e:	e7fe      	b.n	800aa2e <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d01f      	beq.n	800aa76 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa36:	2300      	movs	r3, #0
 800aa38:	61fb      	str	r3, [r7, #28]
 800aa3a:	e012      	b.n	800aa62 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	4413      	add	r3, r2
 800aa42:	7819      	ldrb	r1, [r3, #0]
 800aa44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	4413      	add	r3, r2
 800aa4a:	3334      	adds	r3, #52	; 0x34
 800aa4c:	460a      	mov	r2, r1
 800aa4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aa50:	68ba      	ldr	r2, [r7, #8]
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	4413      	add	r3, r2
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d006      	beq.n	800aa6a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	61fb      	str	r3, [r7, #28]
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	2b0f      	cmp	r3, #15
 800aa66:	d9e9      	bls.n	800aa3c <prvInitialiseNewTask+0x66>
 800aa68:	e000      	b.n	800aa6c <prvInitialiseNewTask+0x96>
			{
				break;
 800aa6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa74:	e003      	b.n	800aa7e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa80:	2b37      	cmp	r3, #55	; 0x37
 800aa82:	d901      	bls.n	800aa88 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa84:	2337      	movs	r3, #55	; 0x37
 800aa86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa96:	2200      	movs	r2, #0
 800aa98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9c:	3304      	adds	r3, #4
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7ff f96a 	bl	8009d78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa6:	3318      	adds	r3, #24
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7ff f965 	bl	8009d78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aab2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aac2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac6:	2200      	movs	r2, #0
 800aac8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	68f9      	ldr	r1, [r7, #12]
 800aad6:	69b8      	ldr	r0, [r7, #24]
 800aad8:	f001 f936 	bl	800bd48 <pxPortInitialiseStack>
 800aadc:	4602      	mov	r2, r0
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d002      	beq.n	800aaee <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aaee:	bf00      	nop
 800aaf0:	3720      	adds	r7, #32
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
	...

0800aaf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab00:	f001 fa2a 	bl	800bf58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab04:	4b2d      	ldr	r3, [pc, #180]	; (800abbc <prvAddNewTaskToReadyList+0xc4>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	4a2c      	ldr	r2, [pc, #176]	; (800abbc <prvAddNewTaskToReadyList+0xc4>)
 800ab0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ab0e:	4b2c      	ldr	r3, [pc, #176]	; (800abc0 <prvAddNewTaskToReadyList+0xc8>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d109      	bne.n	800ab2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab16:	4a2a      	ldr	r2, [pc, #168]	; (800abc0 <prvAddNewTaskToReadyList+0xc8>)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab1c:	4b27      	ldr	r3, [pc, #156]	; (800abbc <prvAddNewTaskToReadyList+0xc4>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d110      	bne.n	800ab46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab24:	f000 fc1e 	bl	800b364 <prvInitialiseTaskLists>
 800ab28:	e00d      	b.n	800ab46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab2a:	4b26      	ldr	r3, [pc, #152]	; (800abc4 <prvAddNewTaskToReadyList+0xcc>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d109      	bne.n	800ab46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab32:	4b23      	ldr	r3, [pc, #140]	; (800abc0 <prvAddNewTaskToReadyList+0xc8>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d802      	bhi.n	800ab46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab40:	4a1f      	ldr	r2, [pc, #124]	; (800abc0 <prvAddNewTaskToReadyList+0xc8>)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab46:	4b20      	ldr	r3, [pc, #128]	; (800abc8 <prvAddNewTaskToReadyList+0xd0>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	4a1e      	ldr	r2, [pc, #120]	; (800abc8 <prvAddNewTaskToReadyList+0xd0>)
 800ab4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab50:	4b1d      	ldr	r3, [pc, #116]	; (800abc8 <prvAddNewTaskToReadyList+0xd0>)
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab5c:	4b1b      	ldr	r3, [pc, #108]	; (800abcc <prvAddNewTaskToReadyList+0xd4>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d903      	bls.n	800ab6c <prvAddNewTaskToReadyList+0x74>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab68:	4a18      	ldr	r2, [pc, #96]	; (800abcc <prvAddNewTaskToReadyList+0xd4>)
 800ab6a:	6013      	str	r3, [r2, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab70:	4613      	mov	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	4a15      	ldr	r2, [pc, #84]	; (800abd0 <prvAddNewTaskToReadyList+0xd8>)
 800ab7a:	441a      	add	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	3304      	adds	r3, #4
 800ab80:	4619      	mov	r1, r3
 800ab82:	4610      	mov	r0, r2
 800ab84:	f7ff f905 	bl	8009d92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab88:	f001 fa18 	bl	800bfbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab8c:	4b0d      	ldr	r3, [pc, #52]	; (800abc4 <prvAddNewTaskToReadyList+0xcc>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00e      	beq.n	800abb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab94:	4b0a      	ldr	r3, [pc, #40]	; (800abc0 <prvAddNewTaskToReadyList+0xc8>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d207      	bcs.n	800abb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aba2:	4b0c      	ldr	r3, [pc, #48]	; (800abd4 <prvAddNewTaskToReadyList+0xdc>)
 800aba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba8:	601a      	str	r2, [r3, #0]
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abb2:	bf00      	nop
 800abb4:	3708      	adds	r7, #8
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	20000eb4 	.word	0x20000eb4
 800abc0:	200009e0 	.word	0x200009e0
 800abc4:	20000ec0 	.word	0x20000ec0
 800abc8:	20000ed0 	.word	0x20000ed0
 800abcc:	20000ebc 	.word	0x20000ebc
 800abd0:	200009e4 	.word	0x200009e4
 800abd4:	e000ed04 	.word	0xe000ed04

0800abd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800abe0:	2300      	movs	r3, #0
 800abe2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d018      	beq.n	800ac1c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800abea:	4b14      	ldr	r3, [pc, #80]	; (800ac3c <vTaskDelay+0x64>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00b      	beq.n	800ac0a <vTaskDelay+0x32>
 800abf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf6:	b672      	cpsid	i
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	b662      	cpsie	i
 800ac06:	60bb      	str	r3, [r7, #8]
 800ac08:	e7fe      	b.n	800ac08 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800ac0a:	f000 f883 	bl	800ad14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac0e:	2100      	movs	r1, #0
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fcf1 	bl	800b5f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac16:	f000 f88b 	bl	800ad30 <xTaskResumeAll>
 800ac1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d107      	bne.n	800ac32 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ac22:	4b07      	ldr	r3, [pc, #28]	; (800ac40 <vTaskDelay+0x68>)
 800ac24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac28:	601a      	str	r2, [r3, #0]
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac32:	bf00      	nop
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	20000edc 	.word	0x20000edc
 800ac40:	e000ed04 	.word	0xe000ed04

0800ac44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b08a      	sub	sp, #40	; 0x28
 800ac48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac52:	463a      	mov	r2, r7
 800ac54:	1d39      	adds	r1, r7, #4
 800ac56:	f107 0308 	add.w	r3, r7, #8
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7ff f838 	bl	8009cd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	9202      	str	r2, [sp, #8]
 800ac68:	9301      	str	r3, [sp, #4]
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	9300      	str	r3, [sp, #0]
 800ac6e:	2300      	movs	r3, #0
 800ac70:	460a      	mov	r2, r1
 800ac72:	4922      	ldr	r1, [pc, #136]	; (800acfc <vTaskStartScheduler+0xb8>)
 800ac74:	4822      	ldr	r0, [pc, #136]	; (800ad00 <vTaskStartScheduler+0xbc>)
 800ac76:	f7ff fe09 	bl	800a88c <xTaskCreateStatic>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	4b21      	ldr	r3, [pc, #132]	; (800ad04 <vTaskStartScheduler+0xc0>)
 800ac7e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac80:	4b20      	ldr	r3, [pc, #128]	; (800ad04 <vTaskStartScheduler+0xc0>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d002      	beq.n	800ac8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	617b      	str	r3, [r7, #20]
 800ac8c:	e001      	b.n	800ac92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d102      	bne.n	800ac9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ac98:	f000 fd02 	bl	800b6a0 <xTimerCreateTimerTask>
 800ac9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d117      	bne.n	800acd4 <vTaskStartScheduler+0x90>
 800aca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca8:	b672      	cpsid	i
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	b662      	cpsie	i
 800acb8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800acba:	4b13      	ldr	r3, [pc, #76]	; (800ad08 <vTaskStartScheduler+0xc4>)
 800acbc:	f04f 32ff 	mov.w	r2, #4294967295
 800acc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800acc2:	4b12      	ldr	r3, [pc, #72]	; (800ad0c <vTaskStartScheduler+0xc8>)
 800acc4:	2201      	movs	r2, #1
 800acc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800acc8:	4b11      	ldr	r3, [pc, #68]	; (800ad10 <vTaskStartScheduler+0xcc>)
 800acca:	2200      	movs	r2, #0
 800accc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800acce:	f001 f8c7 	bl	800be60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800acd2:	e00f      	b.n	800acf4 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acda:	d10b      	bne.n	800acf4 <vTaskStartScheduler+0xb0>
 800acdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace0:	b672      	cpsid	i
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	b662      	cpsie	i
 800acf0:	60fb      	str	r3, [r7, #12]
 800acf2:	e7fe      	b.n	800acf2 <vTaskStartScheduler+0xae>
}
 800acf4:	bf00      	nop
 800acf6:	3718      	adds	r7, #24
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	0800ff0c 	.word	0x0800ff0c
 800ad00:	0800b335 	.word	0x0800b335
 800ad04:	20000ed8 	.word	0x20000ed8
 800ad08:	20000ed4 	.word	0x20000ed4
 800ad0c:	20000ec0 	.word	0x20000ec0
 800ad10:	20000eb8 	.word	0x20000eb8

0800ad14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad14:	b480      	push	{r7}
 800ad16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ad18:	4b04      	ldr	r3, [pc, #16]	; (800ad2c <vTaskSuspendAll+0x18>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	4a03      	ldr	r2, [pc, #12]	; (800ad2c <vTaskSuspendAll+0x18>)
 800ad20:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ad22:	bf00      	nop
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr
 800ad2c:	20000edc 	.word	0x20000edc

0800ad30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad36:	2300      	movs	r3, #0
 800ad38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad3e:	4b42      	ldr	r3, [pc, #264]	; (800ae48 <xTaskResumeAll+0x118>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d10b      	bne.n	800ad5e <xTaskResumeAll+0x2e>
 800ad46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4a:	b672      	cpsid	i
 800ad4c:	f383 8811 	msr	BASEPRI, r3
 800ad50:	f3bf 8f6f 	isb	sy
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	b662      	cpsie	i
 800ad5a:	603b      	str	r3, [r7, #0]
 800ad5c:	e7fe      	b.n	800ad5c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad5e:	f001 f8fb 	bl	800bf58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad62:	4b39      	ldr	r3, [pc, #228]	; (800ae48 <xTaskResumeAll+0x118>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	3b01      	subs	r3, #1
 800ad68:	4a37      	ldr	r2, [pc, #220]	; (800ae48 <xTaskResumeAll+0x118>)
 800ad6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad6c:	4b36      	ldr	r3, [pc, #216]	; (800ae48 <xTaskResumeAll+0x118>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d162      	bne.n	800ae3a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad74:	4b35      	ldr	r3, [pc, #212]	; (800ae4c <xTaskResumeAll+0x11c>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d05e      	beq.n	800ae3a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad7c:	e02f      	b.n	800adde <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad7e:	4b34      	ldr	r3, [pc, #208]	; (800ae50 <xTaskResumeAll+0x120>)
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	3318      	adds	r3, #24
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7ff f85e 	bl	8009e4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	3304      	adds	r3, #4
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff f859 	bl	8009e4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad9e:	4b2d      	ldr	r3, [pc, #180]	; (800ae54 <xTaskResumeAll+0x124>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d903      	bls.n	800adae <xTaskResumeAll+0x7e>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adaa:	4a2a      	ldr	r2, [pc, #168]	; (800ae54 <xTaskResumeAll+0x124>)
 800adac:	6013      	str	r3, [r2, #0]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb2:	4613      	mov	r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	4413      	add	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4a27      	ldr	r2, [pc, #156]	; (800ae58 <xTaskResumeAll+0x128>)
 800adbc:	441a      	add	r2, r3
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3304      	adds	r3, #4
 800adc2:	4619      	mov	r1, r3
 800adc4:	4610      	mov	r0, r2
 800adc6:	f7fe ffe4 	bl	8009d92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adce:	4b23      	ldr	r3, [pc, #140]	; (800ae5c <xTaskResumeAll+0x12c>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add4:	429a      	cmp	r2, r3
 800add6:	d302      	bcc.n	800adde <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800add8:	4b21      	ldr	r3, [pc, #132]	; (800ae60 <xTaskResumeAll+0x130>)
 800adda:	2201      	movs	r2, #1
 800addc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800adde:	4b1c      	ldr	r3, [pc, #112]	; (800ae50 <xTaskResumeAll+0x120>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d1cb      	bne.n	800ad7e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800adec:	f000 fb56 	bl	800b49c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800adf0:	4b1c      	ldr	r3, [pc, #112]	; (800ae64 <xTaskResumeAll+0x134>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d010      	beq.n	800ae1e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800adfc:	f000 f846 	bl	800ae8c <xTaskIncrementTick>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d002      	beq.n	800ae0c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ae06:	4b16      	ldr	r3, [pc, #88]	; (800ae60 <xTaskResumeAll+0x130>)
 800ae08:	2201      	movs	r2, #1
 800ae0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d1f1      	bne.n	800adfc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800ae18:	4b12      	ldr	r3, [pc, #72]	; (800ae64 <xTaskResumeAll+0x134>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae1e:	4b10      	ldr	r3, [pc, #64]	; (800ae60 <xTaskResumeAll+0x130>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d009      	beq.n	800ae3a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae26:	2301      	movs	r3, #1
 800ae28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae2a:	4b0f      	ldr	r3, [pc, #60]	; (800ae68 <xTaskResumeAll+0x138>)
 800ae2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae30:	601a      	str	r2, [r3, #0]
 800ae32:	f3bf 8f4f 	dsb	sy
 800ae36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae3a:	f001 f8bf 	bl	800bfbc <vPortExitCritical>

	return xAlreadyYielded;
 800ae3e:	68bb      	ldr	r3, [r7, #8]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	20000edc 	.word	0x20000edc
 800ae4c:	20000eb4 	.word	0x20000eb4
 800ae50:	20000e74 	.word	0x20000e74
 800ae54:	20000ebc 	.word	0x20000ebc
 800ae58:	200009e4 	.word	0x200009e4
 800ae5c:	200009e0 	.word	0x200009e0
 800ae60:	20000ec8 	.word	0x20000ec8
 800ae64:	20000ec4 	.word	0x20000ec4
 800ae68:	e000ed04 	.word	0xe000ed04

0800ae6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ae72:	4b05      	ldr	r3, [pc, #20]	; (800ae88 <xTaskGetTickCount+0x1c>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ae78:	687b      	ldr	r3, [r7, #4]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	370c      	adds	r7, #12
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop
 800ae88:	20000eb8 	.word	0x20000eb8

0800ae8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b086      	sub	sp, #24
 800ae90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ae92:	2300      	movs	r3, #0
 800ae94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae96:	4b4f      	ldr	r3, [pc, #316]	; (800afd4 <xTaskIncrementTick+0x148>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f040 808a 	bne.w	800afb4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aea0:	4b4d      	ldr	r3, [pc, #308]	; (800afd8 <xTaskIncrementTick+0x14c>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	3301      	adds	r3, #1
 800aea6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aea8:	4a4b      	ldr	r2, [pc, #300]	; (800afd8 <xTaskIncrementTick+0x14c>)
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d121      	bne.n	800aef8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800aeb4:	4b49      	ldr	r3, [pc, #292]	; (800afdc <xTaskIncrementTick+0x150>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00b      	beq.n	800aed6 <xTaskIncrementTick+0x4a>
 800aebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec2:	b672      	cpsid	i
 800aec4:	f383 8811 	msr	BASEPRI, r3
 800aec8:	f3bf 8f6f 	isb	sy
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	b662      	cpsie	i
 800aed2:	603b      	str	r3, [r7, #0]
 800aed4:	e7fe      	b.n	800aed4 <xTaskIncrementTick+0x48>
 800aed6:	4b41      	ldr	r3, [pc, #260]	; (800afdc <xTaskIncrementTick+0x150>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	60fb      	str	r3, [r7, #12]
 800aedc:	4b40      	ldr	r3, [pc, #256]	; (800afe0 <xTaskIncrementTick+0x154>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a3e      	ldr	r2, [pc, #248]	; (800afdc <xTaskIncrementTick+0x150>)
 800aee2:	6013      	str	r3, [r2, #0]
 800aee4:	4a3e      	ldr	r2, [pc, #248]	; (800afe0 <xTaskIncrementTick+0x154>)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6013      	str	r3, [r2, #0]
 800aeea:	4b3e      	ldr	r3, [pc, #248]	; (800afe4 <xTaskIncrementTick+0x158>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	3301      	adds	r3, #1
 800aef0:	4a3c      	ldr	r2, [pc, #240]	; (800afe4 <xTaskIncrementTick+0x158>)
 800aef2:	6013      	str	r3, [r2, #0]
 800aef4:	f000 fad2 	bl	800b49c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aef8:	4b3b      	ldr	r3, [pc, #236]	; (800afe8 <xTaskIncrementTick+0x15c>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	693a      	ldr	r2, [r7, #16]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d349      	bcc.n	800af96 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af02:	4b36      	ldr	r3, [pc, #216]	; (800afdc <xTaskIncrementTick+0x150>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d104      	bne.n	800af16 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af0c:	4b36      	ldr	r3, [pc, #216]	; (800afe8 <xTaskIncrementTick+0x15c>)
 800af0e:	f04f 32ff 	mov.w	r2, #4294967295
 800af12:	601a      	str	r2, [r3, #0]
					break;
 800af14:	e03f      	b.n	800af96 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af16:	4b31      	ldr	r3, [pc, #196]	; (800afdc <xTaskIncrementTick+0x150>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af26:	693a      	ldr	r2, [r7, #16]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d203      	bcs.n	800af36 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af2e:	4a2e      	ldr	r2, [pc, #184]	; (800afe8 <xTaskIncrementTick+0x15c>)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af34:	e02f      	b.n	800af96 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	3304      	adds	r3, #4
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fe ff86 	bl	8009e4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af44:	2b00      	cmp	r3, #0
 800af46:	d004      	beq.n	800af52 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	3318      	adds	r3, #24
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7fe ff7d 	bl	8009e4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af56:	4b25      	ldr	r3, [pc, #148]	; (800afec <xTaskIncrementTick+0x160>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d903      	bls.n	800af66 <xTaskIncrementTick+0xda>
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af62:	4a22      	ldr	r2, [pc, #136]	; (800afec <xTaskIncrementTick+0x160>)
 800af64:	6013      	str	r3, [r2, #0]
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6a:	4613      	mov	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	4413      	add	r3, r2
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4a1f      	ldr	r2, [pc, #124]	; (800aff0 <xTaskIncrementTick+0x164>)
 800af74:	441a      	add	r2, r3
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	3304      	adds	r3, #4
 800af7a:	4619      	mov	r1, r3
 800af7c:	4610      	mov	r0, r2
 800af7e:	f7fe ff08 	bl	8009d92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af86:	4b1b      	ldr	r3, [pc, #108]	; (800aff4 <xTaskIncrementTick+0x168>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d3b8      	bcc.n	800af02 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800af90:	2301      	movs	r3, #1
 800af92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af94:	e7b5      	b.n	800af02 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af96:	4b17      	ldr	r3, [pc, #92]	; (800aff4 <xTaskIncrementTick+0x168>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af9c:	4914      	ldr	r1, [pc, #80]	; (800aff0 <xTaskIncrementTick+0x164>)
 800af9e:	4613      	mov	r3, r2
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4413      	add	r3, r2
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	440b      	add	r3, r1
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d907      	bls.n	800afbe <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800afae:	2301      	movs	r3, #1
 800afb0:	617b      	str	r3, [r7, #20]
 800afb2:	e004      	b.n	800afbe <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800afb4:	4b10      	ldr	r3, [pc, #64]	; (800aff8 <xTaskIncrementTick+0x16c>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	3301      	adds	r3, #1
 800afba:	4a0f      	ldr	r2, [pc, #60]	; (800aff8 <xTaskIncrementTick+0x16c>)
 800afbc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800afbe:	4b0f      	ldr	r3, [pc, #60]	; (800affc <xTaskIncrementTick+0x170>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d001      	beq.n	800afca <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800afc6:	2301      	movs	r3, #1
 800afc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800afca:	697b      	ldr	r3, [r7, #20]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3718      	adds	r7, #24
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	20000edc 	.word	0x20000edc
 800afd8:	20000eb8 	.word	0x20000eb8
 800afdc:	20000e6c 	.word	0x20000e6c
 800afe0:	20000e70 	.word	0x20000e70
 800afe4:	20000ecc 	.word	0x20000ecc
 800afe8:	20000ed4 	.word	0x20000ed4
 800afec:	20000ebc 	.word	0x20000ebc
 800aff0:	200009e4 	.word	0x200009e4
 800aff4:	200009e0 	.word	0x200009e0
 800aff8:	20000ec4 	.word	0x20000ec4
 800affc:	20000ec8 	.word	0x20000ec8

0800b000 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b000:	b480      	push	{r7}
 800b002:	b085      	sub	sp, #20
 800b004:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b006:	4b28      	ldr	r3, [pc, #160]	; (800b0a8 <vTaskSwitchContext+0xa8>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d003      	beq.n	800b016 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b00e:	4b27      	ldr	r3, [pc, #156]	; (800b0ac <vTaskSwitchContext+0xac>)
 800b010:	2201      	movs	r2, #1
 800b012:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b014:	e042      	b.n	800b09c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b016:	4b25      	ldr	r3, [pc, #148]	; (800b0ac <vTaskSwitchContext+0xac>)
 800b018:	2200      	movs	r2, #0
 800b01a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b01c:	4b24      	ldr	r3, [pc, #144]	; (800b0b0 <vTaskSwitchContext+0xb0>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	60fb      	str	r3, [r7, #12]
 800b022:	e011      	b.n	800b048 <vTaskSwitchContext+0x48>
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10b      	bne.n	800b042 <vTaskSwitchContext+0x42>
 800b02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02e:	b672      	cpsid	i
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	b662      	cpsie	i
 800b03e:	607b      	str	r3, [r7, #4]
 800b040:	e7fe      	b.n	800b040 <vTaskSwitchContext+0x40>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	3b01      	subs	r3, #1
 800b046:	60fb      	str	r3, [r7, #12]
 800b048:	491a      	ldr	r1, [pc, #104]	; (800b0b4 <vTaskSwitchContext+0xb4>)
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	4613      	mov	r3, r2
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	4413      	add	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	440b      	add	r3, r1
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d0e3      	beq.n	800b024 <vTaskSwitchContext+0x24>
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	4613      	mov	r3, r2
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	4413      	add	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4a13      	ldr	r2, [pc, #76]	; (800b0b4 <vTaskSwitchContext+0xb4>)
 800b068:	4413      	add	r3, r2
 800b06a:	60bb      	str	r3, [r7, #8]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	685a      	ldr	r2, [r3, #4]
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	605a      	str	r2, [r3, #4]
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	685a      	ldr	r2, [r3, #4]
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	3308      	adds	r3, #8
 800b07e:	429a      	cmp	r2, r3
 800b080:	d104      	bne.n	800b08c <vTaskSwitchContext+0x8c>
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	685a      	ldr	r2, [r3, #4]
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	605a      	str	r2, [r3, #4]
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	4a09      	ldr	r2, [pc, #36]	; (800b0b8 <vTaskSwitchContext+0xb8>)
 800b094:	6013      	str	r3, [r2, #0]
 800b096:	4a06      	ldr	r2, [pc, #24]	; (800b0b0 <vTaskSwitchContext+0xb0>)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6013      	str	r3, [r2, #0]
}
 800b09c:	bf00      	nop
 800b09e:	3714      	adds	r7, #20
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr
 800b0a8:	20000edc 	.word	0x20000edc
 800b0ac:	20000ec8 	.word	0x20000ec8
 800b0b0:	20000ebc 	.word	0x20000ebc
 800b0b4:	200009e4 	.word	0x200009e4
 800b0b8:	200009e0 	.word	0x200009e0

0800b0bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10b      	bne.n	800b0e4 <vTaskPlaceOnEventList+0x28>
 800b0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d0:	b672      	cpsid	i
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	b662      	cpsie	i
 800b0e0:	60fb      	str	r3, [r7, #12]
 800b0e2:	e7fe      	b.n	800b0e2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0e4:	4b07      	ldr	r3, [pc, #28]	; (800b104 <vTaskPlaceOnEventList+0x48>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	3318      	adds	r3, #24
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f7fe fe74 	bl	8009dda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0f2:	2101      	movs	r1, #1
 800b0f4:	6838      	ldr	r0, [r7, #0]
 800b0f6:	f000 fa7f 	bl	800b5f8 <prvAddCurrentTaskToDelayedList>
}
 800b0fa:	bf00      	nop
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	200009e0 	.word	0x200009e0

0800b108 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b086      	sub	sp, #24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d10b      	bne.n	800b132 <vTaskPlaceOnEventListRestricted+0x2a>
 800b11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11e:	b672      	cpsid	i
 800b120:	f383 8811 	msr	BASEPRI, r3
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	b662      	cpsie	i
 800b12e:	617b      	str	r3, [r7, #20]
 800b130:	e7fe      	b.n	800b130 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b132:	4b0a      	ldr	r3, [pc, #40]	; (800b15c <vTaskPlaceOnEventListRestricted+0x54>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3318      	adds	r3, #24
 800b138:	4619      	mov	r1, r3
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f7fe fe29 	bl	8009d92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d002      	beq.n	800b14c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b146:	f04f 33ff 	mov.w	r3, #4294967295
 800b14a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b14c:	6879      	ldr	r1, [r7, #4]
 800b14e:	68b8      	ldr	r0, [r7, #8]
 800b150:	f000 fa52 	bl	800b5f8 <prvAddCurrentTaskToDelayedList>
	}
 800b154:	bf00      	nop
 800b156:	3718      	adds	r7, #24
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	200009e0 	.word	0x200009e0

0800b160 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b086      	sub	sp, #24
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10b      	bne.n	800b18e <xTaskRemoveFromEventList+0x2e>
 800b176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17a:	b672      	cpsid	i
 800b17c:	f383 8811 	msr	BASEPRI, r3
 800b180:	f3bf 8f6f 	isb	sy
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	b662      	cpsie	i
 800b18a:	60fb      	str	r3, [r7, #12]
 800b18c:	e7fe      	b.n	800b18c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	3318      	adds	r3, #24
 800b192:	4618      	mov	r0, r3
 800b194:	f7fe fe5a 	bl	8009e4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b198:	4b1d      	ldr	r3, [pc, #116]	; (800b210 <xTaskRemoveFromEventList+0xb0>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d11d      	bne.n	800b1dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7fe fe51 	bl	8009e4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ae:	4b19      	ldr	r3, [pc, #100]	; (800b214 <xTaskRemoveFromEventList+0xb4>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d903      	bls.n	800b1be <xTaskRemoveFromEventList+0x5e>
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ba:	4a16      	ldr	r2, [pc, #88]	; (800b214 <xTaskRemoveFromEventList+0xb4>)
 800b1bc:	6013      	str	r3, [r2, #0]
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	4413      	add	r3, r2
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4a13      	ldr	r2, [pc, #76]	; (800b218 <xTaskRemoveFromEventList+0xb8>)
 800b1cc:	441a      	add	r2, r3
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	3304      	adds	r3, #4
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	f7fe fddc 	bl	8009d92 <vListInsertEnd>
 800b1da:	e005      	b.n	800b1e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	3318      	adds	r3, #24
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	480e      	ldr	r0, [pc, #56]	; (800b21c <xTaskRemoveFromEventList+0xbc>)
 800b1e4:	f7fe fdd5 	bl	8009d92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ec:	4b0c      	ldr	r3, [pc, #48]	; (800b220 <xTaskRemoveFromEventList+0xc0>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d905      	bls.n	800b202 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b1fa:	4b0a      	ldr	r3, [pc, #40]	; (800b224 <xTaskRemoveFromEventList+0xc4>)
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	601a      	str	r2, [r3, #0]
 800b200:	e001      	b.n	800b206 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b202:	2300      	movs	r3, #0
 800b204:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b206:	697b      	ldr	r3, [r7, #20]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3718      	adds	r7, #24
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	20000edc 	.word	0x20000edc
 800b214:	20000ebc 	.word	0x20000ebc
 800b218:	200009e4 	.word	0x200009e4
 800b21c:	20000e74 	.word	0x20000e74
 800b220:	200009e0 	.word	0x200009e0
 800b224:	20000ec8 	.word	0x20000ec8

0800b228 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b230:	4b06      	ldr	r3, [pc, #24]	; (800b24c <vTaskInternalSetTimeOutState+0x24>)
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b238:	4b05      	ldr	r3, [pc, #20]	; (800b250 <vTaskInternalSetTimeOutState+0x28>)
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	605a      	str	r2, [r3, #4]
}
 800b240:	bf00      	nop
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr
 800b24c:	20000ecc 	.word	0x20000ecc
 800b250:	20000eb8 	.word	0x20000eb8

0800b254 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b088      	sub	sp, #32
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10b      	bne.n	800b27c <xTaskCheckForTimeOut+0x28>
 800b264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b268:	b672      	cpsid	i
 800b26a:	f383 8811 	msr	BASEPRI, r3
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	f3bf 8f4f 	dsb	sy
 800b276:	b662      	cpsie	i
 800b278:	613b      	str	r3, [r7, #16]
 800b27a:	e7fe      	b.n	800b27a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10b      	bne.n	800b29a <xTaskCheckForTimeOut+0x46>
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	b672      	cpsid	i
 800b288:	f383 8811 	msr	BASEPRI, r3
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	f3bf 8f4f 	dsb	sy
 800b294:	b662      	cpsie	i
 800b296:	60fb      	str	r3, [r7, #12]
 800b298:	e7fe      	b.n	800b298 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800b29a:	f000 fe5d 	bl	800bf58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b29e:	4b1d      	ldr	r3, [pc, #116]	; (800b314 <xTaskCheckForTimeOut+0xc0>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	69ba      	ldr	r2, [r7, #24]
 800b2aa:	1ad3      	subs	r3, r2, r3
 800b2ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b6:	d102      	bne.n	800b2be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	61fb      	str	r3, [r7, #28]
 800b2bc:	e023      	b.n	800b306 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	4b15      	ldr	r3, [pc, #84]	; (800b318 <xTaskCheckForTimeOut+0xc4>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d007      	beq.n	800b2da <xTaskCheckForTimeOut+0x86>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	69ba      	ldr	r2, [r7, #24]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d302      	bcc.n	800b2da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	61fb      	str	r3, [r7, #28]
 800b2d8:	e015      	b.n	800b306 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	697a      	ldr	r2, [r7, #20]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d20b      	bcs.n	800b2fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	1ad2      	subs	r2, r2, r3
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f7ff ff99 	bl	800b228 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	61fb      	str	r3, [r7, #28]
 800b2fa:	e004      	b.n	800b306 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	2200      	movs	r2, #0
 800b300:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b302:	2301      	movs	r3, #1
 800b304:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b306:	f000 fe59 	bl	800bfbc <vPortExitCritical>

	return xReturn;
 800b30a:	69fb      	ldr	r3, [r7, #28]
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3720      	adds	r7, #32
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}
 800b314:	20000eb8 	.word	0x20000eb8
 800b318:	20000ecc 	.word	0x20000ecc

0800b31c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b31c:	b480      	push	{r7}
 800b31e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b320:	4b03      	ldr	r3, [pc, #12]	; (800b330 <vTaskMissedYield+0x14>)
 800b322:	2201      	movs	r2, #1
 800b324:	601a      	str	r2, [r3, #0]
}
 800b326:	bf00      	nop
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr
 800b330:	20000ec8 	.word	0x20000ec8

0800b334 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b33c:	f000 f852 	bl	800b3e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b340:	4b06      	ldr	r3, [pc, #24]	; (800b35c <prvIdleTask+0x28>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d9f9      	bls.n	800b33c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b348:	4b05      	ldr	r3, [pc, #20]	; (800b360 <prvIdleTask+0x2c>)
 800b34a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b34e:	601a      	str	r2, [r3, #0]
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b358:	e7f0      	b.n	800b33c <prvIdleTask+0x8>
 800b35a:	bf00      	nop
 800b35c:	200009e4 	.word	0x200009e4
 800b360:	e000ed04 	.word	0xe000ed04

0800b364 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b36a:	2300      	movs	r3, #0
 800b36c:	607b      	str	r3, [r7, #4]
 800b36e:	e00c      	b.n	800b38a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	4613      	mov	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4413      	add	r3, r2
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4a12      	ldr	r2, [pc, #72]	; (800b3c4 <prvInitialiseTaskLists+0x60>)
 800b37c:	4413      	add	r3, r2
 800b37e:	4618      	mov	r0, r3
 800b380:	f7fe fcda 	bl	8009d38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	3301      	adds	r3, #1
 800b388:	607b      	str	r3, [r7, #4]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2b37      	cmp	r3, #55	; 0x37
 800b38e:	d9ef      	bls.n	800b370 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b390:	480d      	ldr	r0, [pc, #52]	; (800b3c8 <prvInitialiseTaskLists+0x64>)
 800b392:	f7fe fcd1 	bl	8009d38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b396:	480d      	ldr	r0, [pc, #52]	; (800b3cc <prvInitialiseTaskLists+0x68>)
 800b398:	f7fe fcce 	bl	8009d38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b39c:	480c      	ldr	r0, [pc, #48]	; (800b3d0 <prvInitialiseTaskLists+0x6c>)
 800b39e:	f7fe fccb 	bl	8009d38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b3a2:	480c      	ldr	r0, [pc, #48]	; (800b3d4 <prvInitialiseTaskLists+0x70>)
 800b3a4:	f7fe fcc8 	bl	8009d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b3a8:	480b      	ldr	r0, [pc, #44]	; (800b3d8 <prvInitialiseTaskLists+0x74>)
 800b3aa:	f7fe fcc5 	bl	8009d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b3ae:	4b0b      	ldr	r3, [pc, #44]	; (800b3dc <prvInitialiseTaskLists+0x78>)
 800b3b0:	4a05      	ldr	r2, [pc, #20]	; (800b3c8 <prvInitialiseTaskLists+0x64>)
 800b3b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b3b4:	4b0a      	ldr	r3, [pc, #40]	; (800b3e0 <prvInitialiseTaskLists+0x7c>)
 800b3b6:	4a05      	ldr	r2, [pc, #20]	; (800b3cc <prvInitialiseTaskLists+0x68>)
 800b3b8:	601a      	str	r2, [r3, #0]
}
 800b3ba:	bf00      	nop
 800b3bc:	3708      	adds	r7, #8
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	200009e4 	.word	0x200009e4
 800b3c8:	20000e44 	.word	0x20000e44
 800b3cc:	20000e58 	.word	0x20000e58
 800b3d0:	20000e74 	.word	0x20000e74
 800b3d4:	20000e88 	.word	0x20000e88
 800b3d8:	20000ea0 	.word	0x20000ea0
 800b3dc:	20000e6c 	.word	0x20000e6c
 800b3e0:	20000e70 	.word	0x20000e70

0800b3e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3ea:	e019      	b.n	800b420 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b3ec:	f000 fdb4 	bl	800bf58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3f0:	4b0f      	ldr	r3, [pc, #60]	; (800b430 <prvCheckTasksWaitingTermination+0x4c>)
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7fe fd25 	bl	8009e4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b402:	4b0c      	ldr	r3, [pc, #48]	; (800b434 <prvCheckTasksWaitingTermination+0x50>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3b01      	subs	r3, #1
 800b408:	4a0a      	ldr	r2, [pc, #40]	; (800b434 <prvCheckTasksWaitingTermination+0x50>)
 800b40a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b40c:	4b0a      	ldr	r3, [pc, #40]	; (800b438 <prvCheckTasksWaitingTermination+0x54>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	3b01      	subs	r3, #1
 800b412:	4a09      	ldr	r2, [pc, #36]	; (800b438 <prvCheckTasksWaitingTermination+0x54>)
 800b414:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b416:	f000 fdd1 	bl	800bfbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f80e 	bl	800b43c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b420:	4b05      	ldr	r3, [pc, #20]	; (800b438 <prvCheckTasksWaitingTermination+0x54>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1e1      	bne.n	800b3ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b428:	bf00      	nop
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	20000e88 	.word	0x20000e88
 800b434:	20000eb4 	.word	0x20000eb4
 800b438:	20000e9c 	.word	0x20000e9c

0800b43c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d108      	bne.n	800b460 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b452:	4618      	mov	r0, r3
 800b454:	f000 ff6a 	bl	800c32c <vPortFree>
				vPortFree( pxTCB );
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 ff67 	bl	800c32c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b45e:	e019      	b.n	800b494 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b466:	2b01      	cmp	r3, #1
 800b468:	d103      	bne.n	800b472 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 ff5e 	bl	800c32c <vPortFree>
	}
 800b470:	e010      	b.n	800b494 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d00b      	beq.n	800b494 <prvDeleteTCB+0x58>
 800b47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b480:	b672      	cpsid	i
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	b662      	cpsie	i
 800b490:	60fb      	str	r3, [r7, #12]
 800b492:	e7fe      	b.n	800b492 <prvDeleteTCB+0x56>
	}
 800b494:	bf00      	nop
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4a2:	4b0c      	ldr	r3, [pc, #48]	; (800b4d4 <prvResetNextTaskUnblockTime+0x38>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d104      	bne.n	800b4b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b4ac:	4b0a      	ldr	r3, [pc, #40]	; (800b4d8 <prvResetNextTaskUnblockTime+0x3c>)
 800b4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b4b4:	e008      	b.n	800b4c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4b6:	4b07      	ldr	r3, [pc, #28]	; (800b4d4 <prvResetNextTaskUnblockTime+0x38>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	4a04      	ldr	r2, [pc, #16]	; (800b4d8 <prvResetNextTaskUnblockTime+0x3c>)
 800b4c6:	6013      	str	r3, [r2, #0]
}
 800b4c8:	bf00      	nop
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr
 800b4d4:	20000e6c 	.word	0x20000e6c
 800b4d8:	20000ed4 	.word	0x20000ed4

0800b4dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b4e2:	4b0b      	ldr	r3, [pc, #44]	; (800b510 <xTaskGetSchedulerState+0x34>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d102      	bne.n	800b4f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	607b      	str	r3, [r7, #4]
 800b4ee:	e008      	b.n	800b502 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4f0:	4b08      	ldr	r3, [pc, #32]	; (800b514 <xTaskGetSchedulerState+0x38>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d102      	bne.n	800b4fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b4f8:	2302      	movs	r3, #2
 800b4fa:	607b      	str	r3, [r7, #4]
 800b4fc:	e001      	b.n	800b502 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b4fe:	2300      	movs	r3, #0
 800b500:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b502:	687b      	ldr	r3, [r7, #4]
	}
 800b504:	4618      	mov	r0, r3
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr
 800b510:	20000ec0 	.word	0x20000ec0
 800b514:	20000edc 	.word	0x20000edc

0800b518 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b086      	sub	sp, #24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b524:	2300      	movs	r3, #0
 800b526:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d058      	beq.n	800b5e0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b52e:	4b2f      	ldr	r3, [pc, #188]	; (800b5ec <xTaskPriorityDisinherit+0xd4>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	693a      	ldr	r2, [r7, #16]
 800b534:	429a      	cmp	r2, r3
 800b536:	d00b      	beq.n	800b550 <xTaskPriorityDisinherit+0x38>
 800b538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53c:	b672      	cpsid	i
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	b662      	cpsie	i
 800b54c:	60fb      	str	r3, [r7, #12]
 800b54e:	e7fe      	b.n	800b54e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b554:	2b00      	cmp	r3, #0
 800b556:	d10b      	bne.n	800b570 <xTaskPriorityDisinherit+0x58>
 800b558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55c:	b672      	cpsid	i
 800b55e:	f383 8811 	msr	BASEPRI, r3
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	f3bf 8f4f 	dsb	sy
 800b56a:	b662      	cpsie	i
 800b56c:	60bb      	str	r3, [r7, #8]
 800b56e:	e7fe      	b.n	800b56e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b574:	1e5a      	subs	r2, r3, #1
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b582:	429a      	cmp	r2, r3
 800b584:	d02c      	beq.n	800b5e0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d128      	bne.n	800b5e0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	3304      	adds	r3, #4
 800b592:	4618      	mov	r0, r3
 800b594:	f7fe fc5a 	bl	8009e4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b0:	4b0f      	ldr	r3, [pc, #60]	; (800b5f0 <xTaskPriorityDisinherit+0xd8>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d903      	bls.n	800b5c0 <xTaskPriorityDisinherit+0xa8>
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5bc:	4a0c      	ldr	r2, [pc, #48]	; (800b5f0 <xTaskPriorityDisinherit+0xd8>)
 800b5be:	6013      	str	r3, [r2, #0]
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	4413      	add	r3, r2
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	4a09      	ldr	r2, [pc, #36]	; (800b5f4 <xTaskPriorityDisinherit+0xdc>)
 800b5ce:	441a      	add	r2, r3
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	3304      	adds	r3, #4
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	4610      	mov	r0, r2
 800b5d8:	f7fe fbdb 	bl	8009d92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b5e0:	697b      	ldr	r3, [r7, #20]
	}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3718      	adds	r7, #24
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	200009e0 	.word	0x200009e0
 800b5f0:	20000ebc 	.word	0x20000ebc
 800b5f4:	200009e4 	.word	0x200009e4

0800b5f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b602:	4b21      	ldr	r3, [pc, #132]	; (800b688 <prvAddCurrentTaskToDelayedList+0x90>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b608:	4b20      	ldr	r3, [pc, #128]	; (800b68c <prvAddCurrentTaskToDelayedList+0x94>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	3304      	adds	r3, #4
 800b60e:	4618      	mov	r0, r3
 800b610:	f7fe fc1c 	bl	8009e4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b61a:	d10a      	bne.n	800b632 <prvAddCurrentTaskToDelayedList+0x3a>
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d007      	beq.n	800b632 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b622:	4b1a      	ldr	r3, [pc, #104]	; (800b68c <prvAddCurrentTaskToDelayedList+0x94>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	3304      	adds	r3, #4
 800b628:	4619      	mov	r1, r3
 800b62a:	4819      	ldr	r0, [pc, #100]	; (800b690 <prvAddCurrentTaskToDelayedList+0x98>)
 800b62c:	f7fe fbb1 	bl	8009d92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b630:	e026      	b.n	800b680 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4413      	add	r3, r2
 800b638:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b63a:	4b14      	ldr	r3, [pc, #80]	; (800b68c <prvAddCurrentTaskToDelayedList+0x94>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b642:	68ba      	ldr	r2, [r7, #8]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	429a      	cmp	r2, r3
 800b648:	d209      	bcs.n	800b65e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b64a:	4b12      	ldr	r3, [pc, #72]	; (800b694 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	4b0f      	ldr	r3, [pc, #60]	; (800b68c <prvAddCurrentTaskToDelayedList+0x94>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	3304      	adds	r3, #4
 800b654:	4619      	mov	r1, r3
 800b656:	4610      	mov	r0, r2
 800b658:	f7fe fbbf 	bl	8009dda <vListInsert>
}
 800b65c:	e010      	b.n	800b680 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b65e:	4b0e      	ldr	r3, [pc, #56]	; (800b698 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	4b0a      	ldr	r3, [pc, #40]	; (800b68c <prvAddCurrentTaskToDelayedList+0x94>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	3304      	adds	r3, #4
 800b668:	4619      	mov	r1, r3
 800b66a:	4610      	mov	r0, r2
 800b66c:	f7fe fbb5 	bl	8009dda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b670:	4b0a      	ldr	r3, [pc, #40]	; (800b69c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	68ba      	ldr	r2, [r7, #8]
 800b676:	429a      	cmp	r2, r3
 800b678:	d202      	bcs.n	800b680 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b67a:	4a08      	ldr	r2, [pc, #32]	; (800b69c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	6013      	str	r3, [r2, #0]
}
 800b680:	bf00      	nop
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	20000eb8 	.word	0x20000eb8
 800b68c:	200009e0 	.word	0x200009e0
 800b690:	20000ea0 	.word	0x20000ea0
 800b694:	20000e70 	.word	0x20000e70
 800b698:	20000e6c 	.word	0x20000e6c
 800b69c:	20000ed4 	.word	0x20000ed4

0800b6a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b08a      	sub	sp, #40	; 0x28
 800b6a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b6aa:	f000 fb0d 	bl	800bcc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b6ae:	4b1d      	ldr	r3, [pc, #116]	; (800b724 <xTimerCreateTimerTask+0x84>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d021      	beq.n	800b6fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b6be:	1d3a      	adds	r2, r7, #4
 800b6c0:	f107 0108 	add.w	r1, r7, #8
 800b6c4:	f107 030c 	add.w	r3, r7, #12
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7fe fb1b 	bl	8009d04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b6ce:	6879      	ldr	r1, [r7, #4]
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	9202      	str	r2, [sp, #8]
 800b6d6:	9301      	str	r3, [sp, #4]
 800b6d8:	2302      	movs	r3, #2
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	2300      	movs	r3, #0
 800b6de:	460a      	mov	r2, r1
 800b6e0:	4911      	ldr	r1, [pc, #68]	; (800b728 <xTimerCreateTimerTask+0x88>)
 800b6e2:	4812      	ldr	r0, [pc, #72]	; (800b72c <xTimerCreateTimerTask+0x8c>)
 800b6e4:	f7ff f8d2 	bl	800a88c <xTaskCreateStatic>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	4b11      	ldr	r3, [pc, #68]	; (800b730 <xTimerCreateTimerTask+0x90>)
 800b6ec:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b6ee:	4b10      	ldr	r3, [pc, #64]	; (800b730 <xTimerCreateTimerTask+0x90>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d001      	beq.n	800b6fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d10b      	bne.n	800b718 <xTimerCreateTimerTask+0x78>
 800b700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b704:	b672      	cpsid	i
 800b706:	f383 8811 	msr	BASEPRI, r3
 800b70a:	f3bf 8f6f 	isb	sy
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	b662      	cpsie	i
 800b714:	613b      	str	r3, [r7, #16]
 800b716:	e7fe      	b.n	800b716 <xTimerCreateTimerTask+0x76>
	return xReturn;
 800b718:	697b      	ldr	r3, [r7, #20]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3718      	adds	r7, #24
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	20000f10 	.word	0x20000f10
 800b728:	0800ff14 	.word	0x0800ff14
 800b72c:	0800b86d 	.word	0x0800b86d
 800b730:	20000f14 	.word	0x20000f14

0800b734 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b08a      	sub	sp, #40	; 0x28
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
 800b740:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b742:	2300      	movs	r3, #0
 800b744:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d10b      	bne.n	800b764 <xTimerGenericCommand+0x30>
 800b74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b750:	b672      	cpsid	i
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	b662      	cpsie	i
 800b760:	623b      	str	r3, [r7, #32]
 800b762:	e7fe      	b.n	800b762 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b764:	4b19      	ldr	r3, [pc, #100]	; (800b7cc <xTimerGenericCommand+0x98>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d02a      	beq.n	800b7c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	2b05      	cmp	r3, #5
 800b77c:	dc18      	bgt.n	800b7b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b77e:	f7ff fead 	bl	800b4dc <xTaskGetSchedulerState>
 800b782:	4603      	mov	r3, r0
 800b784:	2b02      	cmp	r3, #2
 800b786:	d109      	bne.n	800b79c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b788:	4b10      	ldr	r3, [pc, #64]	; (800b7cc <xTimerGenericCommand+0x98>)
 800b78a:	6818      	ldr	r0, [r3, #0]
 800b78c:	f107 0110 	add.w	r1, r7, #16
 800b790:	2300      	movs	r3, #0
 800b792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b794:	f7fe fc8e 	bl	800a0b4 <xQueueGenericSend>
 800b798:	6278      	str	r0, [r7, #36]	; 0x24
 800b79a:	e012      	b.n	800b7c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b79c:	4b0b      	ldr	r3, [pc, #44]	; (800b7cc <xTimerGenericCommand+0x98>)
 800b79e:	6818      	ldr	r0, [r3, #0]
 800b7a0:	f107 0110 	add.w	r1, r7, #16
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f7fe fc84 	bl	800a0b4 <xQueueGenericSend>
 800b7ac:	6278      	str	r0, [r7, #36]	; 0x24
 800b7ae:	e008      	b.n	800b7c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b7b0:	4b06      	ldr	r3, [pc, #24]	; (800b7cc <xTimerGenericCommand+0x98>)
 800b7b2:	6818      	ldr	r0, [r3, #0]
 800b7b4:	f107 0110 	add.w	r1, r7, #16
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	f7fe fd7c 	bl	800a2b8 <xQueueGenericSendFromISR>
 800b7c0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3728      	adds	r7, #40	; 0x28
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	20000f10 	.word	0x20000f10

0800b7d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b088      	sub	sp, #32
 800b7d4:	af02      	add	r7, sp, #8
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7da:	4b23      	ldr	r3, [pc, #140]	; (800b868 <prvProcessExpiredTimer+0x98>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fe fb2f 	bl	8009e4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7f4:	f003 0304 	and.w	r3, r3, #4
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d023      	beq.n	800b844 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	699a      	ldr	r2, [r3, #24]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	18d1      	adds	r1, r2, r3
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	6978      	ldr	r0, [r7, #20]
 800b80a:	f000 f8d3 	bl	800b9b4 <prvInsertTimerInActiveList>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d020      	beq.n	800b856 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b814:	2300      	movs	r3, #0
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	2300      	movs	r3, #0
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	2100      	movs	r1, #0
 800b81e:	6978      	ldr	r0, [r7, #20]
 800b820:	f7ff ff88 	bl	800b734 <xTimerGenericCommand>
 800b824:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d114      	bne.n	800b856 <prvProcessExpiredTimer+0x86>
 800b82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b830:	b672      	cpsid	i
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	b662      	cpsie	i
 800b840:	60fb      	str	r3, [r7, #12]
 800b842:	e7fe      	b.n	800b842 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b84a:	f023 0301 	bic.w	r3, r3, #1
 800b84e:	b2da      	uxtb	r2, r3
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	6a1b      	ldr	r3, [r3, #32]
 800b85a:	6978      	ldr	r0, [r7, #20]
 800b85c:	4798      	blx	r3
}
 800b85e:	bf00      	nop
 800b860:	3718      	adds	r7, #24
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	20000f08 	.word	0x20000f08

0800b86c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b874:	f107 0308 	add.w	r3, r7, #8
 800b878:	4618      	mov	r0, r3
 800b87a:	f000 f857 	bl	800b92c <prvGetNextExpireTime>
 800b87e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	4619      	mov	r1, r3
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	f000 f803 	bl	800b890 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b88a:	f000 f8d5 	bl	800ba38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b88e:	e7f1      	b.n	800b874 <prvTimerTask+0x8>

0800b890 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b89a:	f7ff fa3b 	bl	800ad14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b89e:	f107 0308 	add.w	r3, r7, #8
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 f866 	bl	800b974 <prvSampleTimeNow>
 800b8a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d130      	bne.n	800b912 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d10a      	bne.n	800b8cc <prvProcessTimerOrBlockTask+0x3c>
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d806      	bhi.n	800b8cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b8be:	f7ff fa37 	bl	800ad30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b8c2:	68f9      	ldr	r1, [r7, #12]
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7ff ff83 	bl	800b7d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b8ca:	e024      	b.n	800b916 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d008      	beq.n	800b8e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b8d2:	4b13      	ldr	r3, [pc, #76]	; (800b920 <prvProcessTimerOrBlockTask+0x90>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d101      	bne.n	800b8e0 <prvProcessTimerOrBlockTask+0x50>
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e000      	b.n	800b8e2 <prvProcessTimerOrBlockTask+0x52>
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b8e4:	4b0f      	ldr	r3, [pc, #60]	; (800b924 <prvProcessTimerOrBlockTask+0x94>)
 800b8e6:	6818      	ldr	r0, [r3, #0]
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	1ad3      	subs	r3, r2, r3
 800b8ee:	683a      	ldr	r2, [r7, #0]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	f7fe ff97 	bl	800a824 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b8f6:	f7ff fa1b 	bl	800ad30 <xTaskResumeAll>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10a      	bne.n	800b916 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b900:	4b09      	ldr	r3, [pc, #36]	; (800b928 <prvProcessTimerOrBlockTask+0x98>)
 800b902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b906:	601a      	str	r2, [r3, #0]
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	f3bf 8f6f 	isb	sy
}
 800b910:	e001      	b.n	800b916 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b912:	f7ff fa0d 	bl	800ad30 <xTaskResumeAll>
}
 800b916:	bf00      	nop
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	20000f0c 	.word	0x20000f0c
 800b924:	20000f10 	.word	0x20000f10
 800b928:	e000ed04 	.word	0xe000ed04

0800b92c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b934:	4b0e      	ldr	r3, [pc, #56]	; (800b970 <prvGetNextExpireTime+0x44>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d101      	bne.n	800b942 <prvGetNextExpireTime+0x16>
 800b93e:	2201      	movs	r2, #1
 800b940:	e000      	b.n	800b944 <prvGetNextExpireTime+0x18>
 800b942:	2200      	movs	r2, #0
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d105      	bne.n	800b95c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b950:	4b07      	ldr	r3, [pc, #28]	; (800b970 <prvGetNextExpireTime+0x44>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	60fb      	str	r3, [r7, #12]
 800b95a:	e001      	b.n	800b960 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b95c:	2300      	movs	r3, #0
 800b95e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b960:	68fb      	ldr	r3, [r7, #12]
}
 800b962:	4618      	mov	r0, r3
 800b964:	3714      	adds	r7, #20
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	20000f08 	.word	0x20000f08

0800b974 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b97c:	f7ff fa76 	bl	800ae6c <xTaskGetTickCount>
 800b980:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b982:	4b0b      	ldr	r3, [pc, #44]	; (800b9b0 <prvSampleTimeNow+0x3c>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d205      	bcs.n	800b998 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b98c:	f000 f936 	bl	800bbfc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	601a      	str	r2, [r3, #0]
 800b996:	e002      	b.n	800b99e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b99e:	4a04      	ldr	r2, [pc, #16]	; (800b9b0 <prvSampleTimeNow+0x3c>)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	20000f18 	.word	0x20000f18

0800b9b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
 800b9c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	68ba      	ldr	r2, [r7, #8]
 800b9ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d812      	bhi.n	800ba00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	1ad2      	subs	r2, r2, r3
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	699b      	ldr	r3, [r3, #24]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d302      	bcc.n	800b9ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	617b      	str	r3, [r7, #20]
 800b9ec:	e01b      	b.n	800ba26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b9ee:	4b10      	ldr	r3, [pc, #64]	; (800ba30 <prvInsertTimerInActiveList+0x7c>)
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	4610      	mov	r0, r2
 800b9fa:	f7fe f9ee 	bl	8009dda <vListInsert>
 800b9fe:	e012      	b.n	800ba26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d206      	bcs.n	800ba16 <prvInsertTimerInActiveList+0x62>
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d302      	bcc.n	800ba16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ba10:	2301      	movs	r3, #1
 800ba12:	617b      	str	r3, [r7, #20]
 800ba14:	e007      	b.n	800ba26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba16:	4b07      	ldr	r3, [pc, #28]	; (800ba34 <prvInsertTimerInActiveList+0x80>)
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	3304      	adds	r3, #4
 800ba1e:	4619      	mov	r1, r3
 800ba20:	4610      	mov	r0, r2
 800ba22:	f7fe f9da 	bl	8009dda <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ba26:	697b      	ldr	r3, [r7, #20]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3718      	adds	r7, #24
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	20000f0c 	.word	0x20000f0c
 800ba34:	20000f08 	.word	0x20000f08

0800ba38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b08e      	sub	sp, #56	; 0x38
 800ba3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba3e:	e0cc      	b.n	800bbda <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	da19      	bge.n	800ba7a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ba46:	1d3b      	adds	r3, r7, #4
 800ba48:	3304      	adds	r3, #4
 800ba4a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ba4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d10b      	bne.n	800ba6a <prvProcessReceivedCommands+0x32>
 800ba52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba56:	b672      	cpsid	i
 800ba58:	f383 8811 	msr	BASEPRI, r3
 800ba5c:	f3bf 8f6f 	isb	sy
 800ba60:	f3bf 8f4f 	dsb	sy
 800ba64:	b662      	cpsie	i
 800ba66:	61fb      	str	r3, [r7, #28]
 800ba68:	e7fe      	b.n	800ba68 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ba6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba70:	6850      	ldr	r0, [r2, #4]
 800ba72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba74:	6892      	ldr	r2, [r2, #8]
 800ba76:	4611      	mov	r1, r2
 800ba78:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f2c0 80ab 	blt.w	800bbd8 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ba86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba88:	695b      	ldr	r3, [r3, #20]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d004      	beq.n	800ba98 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba90:	3304      	adds	r3, #4
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fe f9da 	bl	8009e4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba98:	463b      	mov	r3, r7
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7ff ff6a 	bl	800b974 <prvSampleTimeNow>
 800baa0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2b09      	cmp	r3, #9
 800baa6:	f200 8098 	bhi.w	800bbda <prvProcessReceivedCommands+0x1a2>
 800baaa:	a201      	add	r2, pc, #4	; (adr r2, 800bab0 <prvProcessReceivedCommands+0x78>)
 800baac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab0:	0800bad9 	.word	0x0800bad9
 800bab4:	0800bad9 	.word	0x0800bad9
 800bab8:	0800bad9 	.word	0x0800bad9
 800babc:	0800bb4f 	.word	0x0800bb4f
 800bac0:	0800bb63 	.word	0x0800bb63
 800bac4:	0800bbaf 	.word	0x0800bbaf
 800bac8:	0800bad9 	.word	0x0800bad9
 800bacc:	0800bad9 	.word	0x0800bad9
 800bad0:	0800bb4f 	.word	0x0800bb4f
 800bad4:	0800bb63 	.word	0x0800bb63
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bade:	f043 0301 	orr.w	r3, r3, #1
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800baea:	68ba      	ldr	r2, [r7, #8]
 800baec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baee:	699b      	ldr	r3, [r3, #24]
 800baf0:	18d1      	adds	r1, r2, r3
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baf8:	f7ff ff5c 	bl	800b9b4 <prvInsertTimerInActiveList>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d06b      	beq.n	800bbda <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb04:	6a1b      	ldr	r3, [r3, #32]
 800bb06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb10:	f003 0304 	and.w	r3, r3, #4
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d060      	beq.n	800bbda <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1c:	699b      	ldr	r3, [r3, #24]
 800bb1e:	441a      	add	r2, r3
 800bb20:	2300      	movs	r3, #0
 800bb22:	9300      	str	r3, [sp, #0]
 800bb24:	2300      	movs	r3, #0
 800bb26:	2100      	movs	r1, #0
 800bb28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb2a:	f7ff fe03 	bl	800b734 <xTimerGenericCommand>
 800bb2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bb30:	6a3b      	ldr	r3, [r7, #32]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d151      	bne.n	800bbda <prvProcessReceivedCommands+0x1a2>
 800bb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3a:	b672      	cpsid	i
 800bb3c:	f383 8811 	msr	BASEPRI, r3
 800bb40:	f3bf 8f6f 	isb	sy
 800bb44:	f3bf 8f4f 	dsb	sy
 800bb48:	b662      	cpsie	i
 800bb4a:	61bb      	str	r3, [r7, #24]
 800bb4c:	e7fe      	b.n	800bb4c <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb54:	f023 0301 	bic.w	r3, r3, #1
 800bb58:	b2da      	uxtb	r2, r3
 800bb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bb60:	e03b      	b.n	800bbda <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb68:	f043 0301 	orr.w	r3, r3, #1
 800bb6c:	b2da      	uxtb	r2, r3
 800bb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7c:	699b      	ldr	r3, [r3, #24]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10b      	bne.n	800bb9a <prvProcessReceivedCommands+0x162>
 800bb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb86:	b672      	cpsid	i
 800bb88:	f383 8811 	msr	BASEPRI, r3
 800bb8c:	f3bf 8f6f 	isb	sy
 800bb90:	f3bf 8f4f 	dsb	sy
 800bb94:	b662      	cpsie	i
 800bb96:	617b      	str	r3, [r7, #20]
 800bb98:	e7fe      	b.n	800bb98 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9c:	699a      	ldr	r2, [r3, #24]
 800bb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba0:	18d1      	adds	r1, r2, r3
 800bba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bba8:	f7ff ff04 	bl	800b9b4 <prvInsertTimerInActiveList>
					break;
 800bbac:	e015      	b.n	800bbda <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbb4:	f003 0302 	and.w	r3, r3, #2
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d103      	bne.n	800bbc4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bbbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbbe:	f000 fbb5 	bl	800c32c <vPortFree>
 800bbc2:	e00a      	b.n	800bbda <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbca:	f023 0301 	bic.w	r3, r3, #1
 800bbce:	b2da      	uxtb	r2, r3
 800bbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bbd6:	e000      	b.n	800bbda <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bbd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbda:	4b07      	ldr	r3, [pc, #28]	; (800bbf8 <prvProcessReceivedCommands+0x1c0>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	1d39      	adds	r1, r7, #4
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fe fc04 	bl	800a3f0 <xQueueReceive>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f47f af28 	bne.w	800ba40 <prvProcessReceivedCommands+0x8>
	}
}
 800bbf0:	bf00      	nop
 800bbf2:	3730      	adds	r7, #48	; 0x30
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	20000f10 	.word	0x20000f10

0800bbfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b088      	sub	sp, #32
 800bc00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc02:	e049      	b.n	800bc98 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc04:	4b2e      	ldr	r3, [pc, #184]	; (800bcc0 <prvSwitchTimerLists+0xc4>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc0e:	4b2c      	ldr	r3, [pc, #176]	; (800bcc0 <prvSwitchTimerLists+0xc4>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	68db      	ldr	r3, [r3, #12]
 800bc16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7fe f915 	bl	8009e4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6a1b      	ldr	r3, [r3, #32]
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc30:	f003 0304 	and.w	r3, r3, #4
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d02f      	beq.n	800bc98 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	699b      	ldr	r3, [r3, #24]
 800bc3c:	693a      	ldr	r2, [r7, #16]
 800bc3e:	4413      	add	r3, r2
 800bc40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d90e      	bls.n	800bc68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	68fa      	ldr	r2, [r7, #12]
 800bc54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc56:	4b1a      	ldr	r3, [pc, #104]	; (800bcc0 <prvSwitchTimerLists+0xc4>)
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	3304      	adds	r3, #4
 800bc5e:	4619      	mov	r1, r3
 800bc60:	4610      	mov	r0, r2
 800bc62:	f7fe f8ba 	bl	8009dda <vListInsert>
 800bc66:	e017      	b.n	800bc98 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc68:	2300      	movs	r3, #0
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	693a      	ldr	r2, [r7, #16]
 800bc70:	2100      	movs	r1, #0
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	f7ff fd5e 	bl	800b734 <xTimerGenericCommand>
 800bc78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d10b      	bne.n	800bc98 <prvSwitchTimerLists+0x9c>
 800bc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc84:	b672      	cpsid	i
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	b662      	cpsie	i
 800bc94:	603b      	str	r3, [r7, #0]
 800bc96:	e7fe      	b.n	800bc96 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc98:	4b09      	ldr	r3, [pc, #36]	; (800bcc0 <prvSwitchTimerLists+0xc4>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d1b0      	bne.n	800bc04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bca2:	4b07      	ldr	r3, [pc, #28]	; (800bcc0 <prvSwitchTimerLists+0xc4>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bca8:	4b06      	ldr	r3, [pc, #24]	; (800bcc4 <prvSwitchTimerLists+0xc8>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a04      	ldr	r2, [pc, #16]	; (800bcc0 <prvSwitchTimerLists+0xc4>)
 800bcae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bcb0:	4a04      	ldr	r2, [pc, #16]	; (800bcc4 <prvSwitchTimerLists+0xc8>)
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	6013      	str	r3, [r2, #0]
}
 800bcb6:	bf00      	nop
 800bcb8:	3718      	adds	r7, #24
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	20000f08 	.word	0x20000f08
 800bcc4:	20000f0c 	.word	0x20000f0c

0800bcc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bcce:	f000 f943 	bl	800bf58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bcd2:	4b15      	ldr	r3, [pc, #84]	; (800bd28 <prvCheckForValidListAndQueue+0x60>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d120      	bne.n	800bd1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bcda:	4814      	ldr	r0, [pc, #80]	; (800bd2c <prvCheckForValidListAndQueue+0x64>)
 800bcdc:	f7fe f82c 	bl	8009d38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bce0:	4813      	ldr	r0, [pc, #76]	; (800bd30 <prvCheckForValidListAndQueue+0x68>)
 800bce2:	f7fe f829 	bl	8009d38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bce6:	4b13      	ldr	r3, [pc, #76]	; (800bd34 <prvCheckForValidListAndQueue+0x6c>)
 800bce8:	4a10      	ldr	r2, [pc, #64]	; (800bd2c <prvCheckForValidListAndQueue+0x64>)
 800bcea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bcec:	4b12      	ldr	r3, [pc, #72]	; (800bd38 <prvCheckForValidListAndQueue+0x70>)
 800bcee:	4a10      	ldr	r2, [pc, #64]	; (800bd30 <prvCheckForValidListAndQueue+0x68>)
 800bcf0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	4b11      	ldr	r3, [pc, #68]	; (800bd3c <prvCheckForValidListAndQueue+0x74>)
 800bcf8:	4a11      	ldr	r2, [pc, #68]	; (800bd40 <prvCheckForValidListAndQueue+0x78>)
 800bcfa:	2110      	movs	r1, #16
 800bcfc:	200a      	movs	r0, #10
 800bcfe:	f7fe f939 	bl	8009f74 <xQueueGenericCreateStatic>
 800bd02:	4602      	mov	r2, r0
 800bd04:	4b08      	ldr	r3, [pc, #32]	; (800bd28 <prvCheckForValidListAndQueue+0x60>)
 800bd06:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bd08:	4b07      	ldr	r3, [pc, #28]	; (800bd28 <prvCheckForValidListAndQueue+0x60>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d005      	beq.n	800bd1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bd10:	4b05      	ldr	r3, [pc, #20]	; (800bd28 <prvCheckForValidListAndQueue+0x60>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	490b      	ldr	r1, [pc, #44]	; (800bd44 <prvCheckForValidListAndQueue+0x7c>)
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7fe fd5c 	bl	800a7d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd1c:	f000 f94e 	bl	800bfbc <vPortExitCritical>
}
 800bd20:	bf00      	nop
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	20000f10 	.word	0x20000f10
 800bd2c:	20000ee0 	.word	0x20000ee0
 800bd30:	20000ef4 	.word	0x20000ef4
 800bd34:	20000f08 	.word	0x20000f08
 800bd38:	20000f0c 	.word	0x20000f0c
 800bd3c:	20000fbc 	.word	0x20000fbc
 800bd40:	20000f1c 	.word	0x20000f1c
 800bd44:	0800ff1c 	.word	0x0800ff1c

0800bd48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	3b04      	subs	r3, #4
 800bd58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bd60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	3b04      	subs	r3, #4
 800bd66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	f023 0201 	bic.w	r2, r3, #1
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	3b04      	subs	r3, #4
 800bd76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bd78:	4a0c      	ldr	r2, [pc, #48]	; (800bdac <pxPortInitialiseStack+0x64>)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	3b14      	subs	r3, #20
 800bd82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	3b04      	subs	r3, #4
 800bd8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f06f 0202 	mvn.w	r2, #2
 800bd96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	3b20      	subs	r3, #32
 800bd9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3714      	adds	r7, #20
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr
 800bdac:	0800bdb1 	.word	0x0800bdb1

0800bdb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bdba:	4b13      	ldr	r3, [pc, #76]	; (800be08 <prvTaskExitError+0x58>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdc2:	d00b      	beq.n	800bddc <prvTaskExitError+0x2c>
 800bdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc8:	b672      	cpsid	i
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	b662      	cpsie	i
 800bdd8:	60fb      	str	r3, [r7, #12]
 800bdda:	e7fe      	b.n	800bdda <prvTaskExitError+0x2a>
 800bddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde0:	b672      	cpsid	i
 800bde2:	f383 8811 	msr	BASEPRI, r3
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	f3bf 8f4f 	dsb	sy
 800bdee:	b662      	cpsie	i
 800bdf0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bdf2:	bf00      	nop
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d0fc      	beq.n	800bdf4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bdfa:	bf00      	nop
 800bdfc:	3714      	adds	r7, #20
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	200000c4 	.word	0x200000c4
 800be0c:	00000000 	.word	0x00000000

0800be10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be10:	4b07      	ldr	r3, [pc, #28]	; (800be30 <pxCurrentTCBConst2>)
 800be12:	6819      	ldr	r1, [r3, #0]
 800be14:	6808      	ldr	r0, [r1, #0]
 800be16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1a:	f380 8809 	msr	PSP, r0
 800be1e:	f3bf 8f6f 	isb	sy
 800be22:	f04f 0000 	mov.w	r0, #0
 800be26:	f380 8811 	msr	BASEPRI, r0
 800be2a:	4770      	bx	lr
 800be2c:	f3af 8000 	nop.w

0800be30 <pxCurrentTCBConst2>:
 800be30:	200009e0 	.word	0x200009e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be34:	bf00      	nop
 800be36:	bf00      	nop

0800be38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be38:	4808      	ldr	r0, [pc, #32]	; (800be5c <prvPortStartFirstTask+0x24>)
 800be3a:	6800      	ldr	r0, [r0, #0]
 800be3c:	6800      	ldr	r0, [r0, #0]
 800be3e:	f380 8808 	msr	MSP, r0
 800be42:	f04f 0000 	mov.w	r0, #0
 800be46:	f380 8814 	msr	CONTROL, r0
 800be4a:	b662      	cpsie	i
 800be4c:	b661      	cpsie	f
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	f3bf 8f6f 	isb	sy
 800be56:	df00      	svc	0
 800be58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be5a:	bf00      	nop
 800be5c:	e000ed08 	.word	0xe000ed08

0800be60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800be66:	4b36      	ldr	r3, [pc, #216]	; (800bf40 <xPortStartScheduler+0xe0>)
 800be68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	22ff      	movs	r2, #255	; 0xff
 800be76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be80:	78fb      	ldrb	r3, [r7, #3]
 800be82:	b2db      	uxtb	r3, r3
 800be84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	4b2e      	ldr	r3, [pc, #184]	; (800bf44 <xPortStartScheduler+0xe4>)
 800be8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be8e:	4b2e      	ldr	r3, [pc, #184]	; (800bf48 <xPortStartScheduler+0xe8>)
 800be90:	2207      	movs	r2, #7
 800be92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be94:	e009      	b.n	800beaa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800be96:	4b2c      	ldr	r3, [pc, #176]	; (800bf48 <xPortStartScheduler+0xe8>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	3b01      	subs	r3, #1
 800be9c:	4a2a      	ldr	r2, [pc, #168]	; (800bf48 <xPortStartScheduler+0xe8>)
 800be9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bea0:	78fb      	ldrb	r3, [r7, #3]
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800beaa:	78fb      	ldrb	r3, [r7, #3]
 800beac:	b2db      	uxtb	r3, r3
 800beae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beb2:	2b80      	cmp	r3, #128	; 0x80
 800beb4:	d0ef      	beq.n	800be96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800beb6:	4b24      	ldr	r3, [pc, #144]	; (800bf48 <xPortStartScheduler+0xe8>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f1c3 0307 	rsb	r3, r3, #7
 800bebe:	2b04      	cmp	r3, #4
 800bec0:	d00b      	beq.n	800beda <xPortStartScheduler+0x7a>
 800bec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec6:	b672      	cpsid	i
 800bec8:	f383 8811 	msr	BASEPRI, r3
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	b662      	cpsie	i
 800bed6:	60bb      	str	r3, [r7, #8]
 800bed8:	e7fe      	b.n	800bed8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800beda:	4b1b      	ldr	r3, [pc, #108]	; (800bf48 <xPortStartScheduler+0xe8>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	021b      	lsls	r3, r3, #8
 800bee0:	4a19      	ldr	r2, [pc, #100]	; (800bf48 <xPortStartScheduler+0xe8>)
 800bee2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bee4:	4b18      	ldr	r3, [pc, #96]	; (800bf48 <xPortStartScheduler+0xe8>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800beec:	4a16      	ldr	r2, [pc, #88]	; (800bf48 <xPortStartScheduler+0xe8>)
 800beee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	b2da      	uxtb	r2, r3
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bef8:	4b14      	ldr	r3, [pc, #80]	; (800bf4c <xPortStartScheduler+0xec>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a13      	ldr	r2, [pc, #76]	; (800bf4c <xPortStartScheduler+0xec>)
 800befe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bf02:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf04:	4b11      	ldr	r3, [pc, #68]	; (800bf4c <xPortStartScheduler+0xec>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a10      	ldr	r2, [pc, #64]	; (800bf4c <xPortStartScheduler+0xec>)
 800bf0a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bf0e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf10:	f000 f8d4 	bl	800c0bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf14:	4b0e      	ldr	r3, [pc, #56]	; (800bf50 <xPortStartScheduler+0xf0>)
 800bf16:	2200      	movs	r2, #0
 800bf18:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bf1a:	f000 f8f3 	bl	800c104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bf1e:	4b0d      	ldr	r3, [pc, #52]	; (800bf54 <xPortStartScheduler+0xf4>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a0c      	ldr	r2, [pc, #48]	; (800bf54 <xPortStartScheduler+0xf4>)
 800bf24:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bf28:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bf2a:	f7ff ff85 	bl	800be38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bf2e:	f7ff f867 	bl	800b000 <vTaskSwitchContext>
	prvTaskExitError();
 800bf32:	f7ff ff3d 	bl	800bdb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bf36:	2300      	movs	r3, #0
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	e000e400 	.word	0xe000e400
 800bf44:	2000100c 	.word	0x2000100c
 800bf48:	20001010 	.word	0x20001010
 800bf4c:	e000ed20 	.word	0xe000ed20
 800bf50:	200000c4 	.word	0x200000c4
 800bf54:	e000ef34 	.word	0xe000ef34

0800bf58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf62:	b672      	cpsid	i
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	b662      	cpsie	i
 800bf72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bf74:	4b0f      	ldr	r3, [pc, #60]	; (800bfb4 <vPortEnterCritical+0x5c>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	4a0e      	ldr	r2, [pc, #56]	; (800bfb4 <vPortEnterCritical+0x5c>)
 800bf7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bf7e:	4b0d      	ldr	r3, [pc, #52]	; (800bfb4 <vPortEnterCritical+0x5c>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d110      	bne.n	800bfa8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf86:	4b0c      	ldr	r3, [pc, #48]	; (800bfb8 <vPortEnterCritical+0x60>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00b      	beq.n	800bfa8 <vPortEnterCritical+0x50>
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	b672      	cpsid	i
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	b662      	cpsie	i
 800bfa4:	603b      	str	r3, [r7, #0]
 800bfa6:	e7fe      	b.n	800bfa6 <vPortEnterCritical+0x4e>
	}
}
 800bfa8:	bf00      	nop
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr
 800bfb4:	200000c4 	.word	0x200000c4
 800bfb8:	e000ed04 	.word	0xe000ed04

0800bfbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bfc2:	4b12      	ldr	r3, [pc, #72]	; (800c00c <vPortExitCritical+0x50>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10b      	bne.n	800bfe2 <vPortExitCritical+0x26>
 800bfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfce:	b672      	cpsid	i
 800bfd0:	f383 8811 	msr	BASEPRI, r3
 800bfd4:	f3bf 8f6f 	isb	sy
 800bfd8:	f3bf 8f4f 	dsb	sy
 800bfdc:	b662      	cpsie	i
 800bfde:	607b      	str	r3, [r7, #4]
 800bfe0:	e7fe      	b.n	800bfe0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800bfe2:	4b0a      	ldr	r3, [pc, #40]	; (800c00c <vPortExitCritical+0x50>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	3b01      	subs	r3, #1
 800bfe8:	4a08      	ldr	r2, [pc, #32]	; (800c00c <vPortExitCritical+0x50>)
 800bfea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bfec:	4b07      	ldr	r3, [pc, #28]	; (800c00c <vPortExitCritical+0x50>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d104      	bne.n	800bffe <vPortExitCritical+0x42>
 800bff4:	2300      	movs	r3, #0
 800bff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bffe:	bf00      	nop
 800c000:	370c      	adds	r7, #12
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr
 800c00a:	bf00      	nop
 800c00c:	200000c4 	.word	0x200000c4

0800c010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c010:	f3ef 8009 	mrs	r0, PSP
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	4b15      	ldr	r3, [pc, #84]	; (800c070 <pxCurrentTCBConst>)
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	f01e 0f10 	tst.w	lr, #16
 800c020:	bf08      	it	eq
 800c022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c02a:	6010      	str	r0, [r2, #0]
 800c02c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c030:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c034:	b672      	cpsid	i
 800c036:	f380 8811 	msr	BASEPRI, r0
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	f3bf 8f6f 	isb	sy
 800c042:	b662      	cpsie	i
 800c044:	f7fe ffdc 	bl	800b000 <vTaskSwitchContext>
 800c048:	f04f 0000 	mov.w	r0, #0
 800c04c:	f380 8811 	msr	BASEPRI, r0
 800c050:	bc09      	pop	{r0, r3}
 800c052:	6819      	ldr	r1, [r3, #0]
 800c054:	6808      	ldr	r0, [r1, #0]
 800c056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c05a:	f01e 0f10 	tst.w	lr, #16
 800c05e:	bf08      	it	eq
 800c060:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c064:	f380 8809 	msr	PSP, r0
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	4770      	bx	lr
 800c06e:	bf00      	nop

0800c070 <pxCurrentTCBConst>:
 800c070:	200009e0 	.word	0x200009e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c074:	bf00      	nop
 800c076:	bf00      	nop

0800c078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c082:	b672      	cpsid	i
 800c084:	f383 8811 	msr	BASEPRI, r3
 800c088:	f3bf 8f6f 	isb	sy
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	b662      	cpsie	i
 800c092:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c094:	f7fe fefa 	bl	800ae8c <xTaskIncrementTick>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d003      	beq.n	800c0a6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c09e:	4b06      	ldr	r3, [pc, #24]	; (800c0b8 <SysTick_Handler+0x40>)
 800c0a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0a4:	601a      	str	r2, [r3, #0]
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c0b0:	bf00      	nop
 800c0b2:	3708      	adds	r7, #8
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	e000ed04 	.word	0xe000ed04

0800c0bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c0bc:	b480      	push	{r7}
 800c0be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c0c0:	4b0b      	ldr	r3, [pc, #44]	; (800c0f0 <vPortSetupTimerInterrupt+0x34>)
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c0c6:	4b0b      	ldr	r3, [pc, #44]	; (800c0f4 <vPortSetupTimerInterrupt+0x38>)
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c0cc:	4b0a      	ldr	r3, [pc, #40]	; (800c0f8 <vPortSetupTimerInterrupt+0x3c>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a0a      	ldr	r2, [pc, #40]	; (800c0fc <vPortSetupTimerInterrupt+0x40>)
 800c0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0d6:	099b      	lsrs	r3, r3, #6
 800c0d8:	4a09      	ldr	r2, [pc, #36]	; (800c100 <vPortSetupTimerInterrupt+0x44>)
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c0de:	4b04      	ldr	r3, [pc, #16]	; (800c0f0 <vPortSetupTimerInterrupt+0x34>)
 800c0e0:	2207      	movs	r2, #7
 800c0e2:	601a      	str	r2, [r3, #0]
}
 800c0e4:	bf00      	nop
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop
 800c0f0:	e000e010 	.word	0xe000e010
 800c0f4:	e000e018 	.word	0xe000e018
 800c0f8:	200000b8 	.word	0x200000b8
 800c0fc:	10624dd3 	.word	0x10624dd3
 800c100:	e000e014 	.word	0xe000e014

0800c104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c114 <vPortEnableVFP+0x10>
 800c108:	6801      	ldr	r1, [r0, #0]
 800c10a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c10e:	6001      	str	r1, [r0, #0]
 800c110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c112:	bf00      	nop
 800c114:	e000ed88 	.word	0xe000ed88

0800c118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c11e:	f3ef 8305 	mrs	r3, IPSR
 800c122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2b0f      	cmp	r3, #15
 800c128:	d915      	bls.n	800c156 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c12a:	4a18      	ldr	r2, [pc, #96]	; (800c18c <vPortValidateInterruptPriority+0x74>)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	4413      	add	r3, r2
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c134:	4b16      	ldr	r3, [pc, #88]	; (800c190 <vPortValidateInterruptPriority+0x78>)
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	7afa      	ldrb	r2, [r7, #11]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d20b      	bcs.n	800c156 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c142:	b672      	cpsid	i
 800c144:	f383 8811 	msr	BASEPRI, r3
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	b662      	cpsie	i
 800c152:	607b      	str	r3, [r7, #4]
 800c154:	e7fe      	b.n	800c154 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c156:	4b0f      	ldr	r3, [pc, #60]	; (800c194 <vPortValidateInterruptPriority+0x7c>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c15e:	4b0e      	ldr	r3, [pc, #56]	; (800c198 <vPortValidateInterruptPriority+0x80>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	429a      	cmp	r2, r3
 800c164:	d90b      	bls.n	800c17e <vPortValidateInterruptPriority+0x66>
 800c166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16a:	b672      	cpsid	i
 800c16c:	f383 8811 	msr	BASEPRI, r3
 800c170:	f3bf 8f6f 	isb	sy
 800c174:	f3bf 8f4f 	dsb	sy
 800c178:	b662      	cpsie	i
 800c17a:	603b      	str	r3, [r7, #0]
 800c17c:	e7fe      	b.n	800c17c <vPortValidateInterruptPriority+0x64>
	}
 800c17e:	bf00      	nop
 800c180:	3714      	adds	r7, #20
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	e000e3f0 	.word	0xe000e3f0
 800c190:	2000100c 	.word	0x2000100c
 800c194:	e000ed0c 	.word	0xe000ed0c
 800c198:	20001010 	.word	0x20001010

0800c19c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b08a      	sub	sp, #40	; 0x28
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c1a8:	f7fe fdb4 	bl	800ad14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c1ac:	4b5a      	ldr	r3, [pc, #360]	; (800c318 <pvPortMalloc+0x17c>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d101      	bne.n	800c1b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c1b4:	f000 f916 	bl	800c3e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c1b8:	4b58      	ldr	r3, [pc, #352]	; (800c31c <pvPortMalloc+0x180>)
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4013      	ands	r3, r2
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f040 8090 	bne.w	800c2e6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d01e      	beq.n	800c20a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c1cc:	2208      	movs	r2, #8
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f003 0307 	and.w	r3, r3, #7
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d015      	beq.n	800c20a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f023 0307 	bic.w	r3, r3, #7
 800c1e4:	3308      	adds	r3, #8
 800c1e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f003 0307 	and.w	r3, r3, #7
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d00b      	beq.n	800c20a <pvPortMalloc+0x6e>
 800c1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f6:	b672      	cpsid	i
 800c1f8:	f383 8811 	msr	BASEPRI, r3
 800c1fc:	f3bf 8f6f 	isb	sy
 800c200:	f3bf 8f4f 	dsb	sy
 800c204:	b662      	cpsie	i
 800c206:	617b      	str	r3, [r7, #20]
 800c208:	e7fe      	b.n	800c208 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d06a      	beq.n	800c2e6 <pvPortMalloc+0x14a>
 800c210:	4b43      	ldr	r3, [pc, #268]	; (800c320 <pvPortMalloc+0x184>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	429a      	cmp	r2, r3
 800c218:	d865      	bhi.n	800c2e6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c21a:	4b42      	ldr	r3, [pc, #264]	; (800c324 <pvPortMalloc+0x188>)
 800c21c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c21e:	4b41      	ldr	r3, [pc, #260]	; (800c324 <pvPortMalloc+0x188>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c224:	e004      	b.n	800c230 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c228:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	429a      	cmp	r2, r3
 800c238:	d903      	bls.n	800c242 <pvPortMalloc+0xa6>
 800c23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d1f1      	bne.n	800c226 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c242:	4b35      	ldr	r3, [pc, #212]	; (800c318 <pvPortMalloc+0x17c>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c248:	429a      	cmp	r2, r3
 800c24a:	d04c      	beq.n	800c2e6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c24c:	6a3b      	ldr	r3, [r7, #32]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2208      	movs	r2, #8
 800c252:	4413      	add	r3, r2
 800c254:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	6a3b      	ldr	r3, [r7, #32]
 800c25c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c260:	685a      	ldr	r2, [r3, #4]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	1ad2      	subs	r2, r2, r3
 800c266:	2308      	movs	r3, #8
 800c268:	005b      	lsls	r3, r3, #1
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d920      	bls.n	800c2b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c26e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4413      	add	r3, r2
 800c274:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	f003 0307 	and.w	r3, r3, #7
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d00b      	beq.n	800c298 <pvPortMalloc+0xfc>
 800c280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c284:	b672      	cpsid	i
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	b662      	cpsie	i
 800c294:	613b      	str	r3, [r7, #16]
 800c296:	e7fe      	b.n	800c296 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	1ad2      	subs	r2, r2, r3
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c2aa:	69b8      	ldr	r0, [r7, #24]
 800c2ac:	f000 f8fc 	bl	800c4a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c2b0:	4b1b      	ldr	r3, [pc, #108]	; (800c320 <pvPortMalloc+0x184>)
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	1ad3      	subs	r3, r2, r3
 800c2ba:	4a19      	ldr	r2, [pc, #100]	; (800c320 <pvPortMalloc+0x184>)
 800c2bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c2be:	4b18      	ldr	r3, [pc, #96]	; (800c320 <pvPortMalloc+0x184>)
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	4b19      	ldr	r3, [pc, #100]	; (800c328 <pvPortMalloc+0x18c>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d203      	bcs.n	800c2d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c2ca:	4b15      	ldr	r3, [pc, #84]	; (800c320 <pvPortMalloc+0x184>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a16      	ldr	r2, [pc, #88]	; (800c328 <pvPortMalloc+0x18c>)
 800c2d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d4:	685a      	ldr	r2, [r3, #4]
 800c2d6:	4b11      	ldr	r3, [pc, #68]	; (800c31c <pvPortMalloc+0x180>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	431a      	orrs	r2, r3
 800c2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c2e6:	f7fe fd23 	bl	800ad30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	f003 0307 	and.w	r3, r3, #7
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00b      	beq.n	800c30c <pvPortMalloc+0x170>
 800c2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f8:	b672      	cpsid	i
 800c2fa:	f383 8811 	msr	BASEPRI, r3
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	b662      	cpsie	i
 800c308:	60fb      	str	r3, [r7, #12]
 800c30a:	e7fe      	b.n	800c30a <pvPortMalloc+0x16e>
	return pvReturn;
 800c30c:	69fb      	ldr	r3, [r7, #28]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3728      	adds	r7, #40	; 0x28
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	20004c1c 	.word	0x20004c1c
 800c31c:	20004c28 	.word	0x20004c28
 800c320:	20004c20 	.word	0x20004c20
 800c324:	20004c14 	.word	0x20004c14
 800c328:	20004c24 	.word	0x20004c24

0800c32c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b086      	sub	sp, #24
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d04a      	beq.n	800c3d4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c33e:	2308      	movs	r3, #8
 800c340:	425b      	negs	r3, r3
 800c342:	697a      	ldr	r2, [r7, #20]
 800c344:	4413      	add	r3, r2
 800c346:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	685a      	ldr	r2, [r3, #4]
 800c350:	4b22      	ldr	r3, [pc, #136]	; (800c3dc <vPortFree+0xb0>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4013      	ands	r3, r2
 800c356:	2b00      	cmp	r3, #0
 800c358:	d10b      	bne.n	800c372 <vPortFree+0x46>
 800c35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35e:	b672      	cpsid	i
 800c360:	f383 8811 	msr	BASEPRI, r3
 800c364:	f3bf 8f6f 	isb	sy
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	b662      	cpsie	i
 800c36e:	60fb      	str	r3, [r7, #12]
 800c370:	e7fe      	b.n	800c370 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d00b      	beq.n	800c392 <vPortFree+0x66>
 800c37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37e:	b672      	cpsid	i
 800c380:	f383 8811 	msr	BASEPRI, r3
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	b662      	cpsie	i
 800c38e:	60bb      	str	r3, [r7, #8]
 800c390:	e7fe      	b.n	800c390 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	685a      	ldr	r2, [r3, #4]
 800c396:	4b11      	ldr	r3, [pc, #68]	; (800c3dc <vPortFree+0xb0>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4013      	ands	r3, r2
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d019      	beq.n	800c3d4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d115      	bne.n	800c3d4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	685a      	ldr	r2, [r3, #4]
 800c3ac:	4b0b      	ldr	r3, [pc, #44]	; (800c3dc <vPortFree+0xb0>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	43db      	mvns	r3, r3
 800c3b2:	401a      	ands	r2, r3
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c3b8:	f7fe fcac 	bl	800ad14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	685a      	ldr	r2, [r3, #4]
 800c3c0:	4b07      	ldr	r3, [pc, #28]	; (800c3e0 <vPortFree+0xb4>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	4a06      	ldr	r2, [pc, #24]	; (800c3e0 <vPortFree+0xb4>)
 800c3c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c3ca:	6938      	ldr	r0, [r7, #16]
 800c3cc:	f000 f86c 	bl	800c4a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c3d0:	f7fe fcae 	bl	800ad30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c3d4:	bf00      	nop
 800c3d6:	3718      	adds	r7, #24
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	20004c28 	.word	0x20004c28
 800c3e0:	20004c20 	.word	0x20004c20

0800c3e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c3ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c3ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c3f0:	4b27      	ldr	r3, [pc, #156]	; (800c490 <prvHeapInit+0xac>)
 800c3f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f003 0307 	and.w	r3, r3, #7
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00c      	beq.n	800c418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	3307      	adds	r3, #7
 800c402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f023 0307 	bic.w	r3, r3, #7
 800c40a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c40c:	68ba      	ldr	r2, [r7, #8]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	4a1f      	ldr	r2, [pc, #124]	; (800c490 <prvHeapInit+0xac>)
 800c414:	4413      	add	r3, r2
 800c416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c41c:	4a1d      	ldr	r2, [pc, #116]	; (800c494 <prvHeapInit+0xb0>)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c422:	4b1c      	ldr	r3, [pc, #112]	; (800c494 <prvHeapInit+0xb0>)
 800c424:	2200      	movs	r2, #0
 800c426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	4413      	add	r3, r2
 800c42e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c430:	2208      	movs	r2, #8
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	1a9b      	subs	r3, r3, r2
 800c436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f023 0307 	bic.w	r3, r3, #7
 800c43e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	4a15      	ldr	r2, [pc, #84]	; (800c498 <prvHeapInit+0xb4>)
 800c444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c446:	4b14      	ldr	r3, [pc, #80]	; (800c498 <prvHeapInit+0xb4>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2200      	movs	r2, #0
 800c44c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c44e:	4b12      	ldr	r3, [pc, #72]	; (800c498 <prvHeapInit+0xb4>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2200      	movs	r2, #0
 800c454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	1ad2      	subs	r2, r2, r3
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c464:	4b0c      	ldr	r3, [pc, #48]	; (800c498 <prvHeapInit+0xb4>)
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	4a0a      	ldr	r2, [pc, #40]	; (800c49c <prvHeapInit+0xb8>)
 800c472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	4a09      	ldr	r2, [pc, #36]	; (800c4a0 <prvHeapInit+0xbc>)
 800c47a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c47c:	4b09      	ldr	r3, [pc, #36]	; (800c4a4 <prvHeapInit+0xc0>)
 800c47e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c482:	601a      	str	r2, [r3, #0]
}
 800c484:	bf00      	nop
 800c486:	3714      	adds	r7, #20
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr
 800c490:	20001014 	.word	0x20001014
 800c494:	20004c14 	.word	0x20004c14
 800c498:	20004c1c 	.word	0x20004c1c
 800c49c:	20004c24 	.word	0x20004c24
 800c4a0:	20004c20 	.word	0x20004c20
 800c4a4:	20004c28 	.word	0x20004c28

0800c4a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c4b0:	4b28      	ldr	r3, [pc, #160]	; (800c554 <prvInsertBlockIntoFreeList+0xac>)
 800c4b2:	60fb      	str	r3, [r7, #12]
 800c4b4:	e002      	b.n	800c4bc <prvInsertBlockIntoFreeList+0x14>
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	60fb      	str	r3, [r7, #12]
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d8f7      	bhi.n	800c4b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	68ba      	ldr	r2, [r7, #8]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d108      	bne.n	800c4ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	685a      	ldr	r2, [r3, #4]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	441a      	add	r2, r3
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	441a      	add	r2, r3
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d118      	bne.n	800c530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	4b15      	ldr	r3, [pc, #84]	; (800c558 <prvInsertBlockIntoFreeList+0xb0>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	429a      	cmp	r2, r3
 800c508:	d00d      	beq.n	800c526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	685a      	ldr	r2, [r3, #4]
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	441a      	add	r2, r3
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	601a      	str	r2, [r3, #0]
 800c524:	e008      	b.n	800c538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c526:	4b0c      	ldr	r3, [pc, #48]	; (800c558 <prvInsertBlockIntoFreeList+0xb0>)
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	601a      	str	r2, [r3, #0]
 800c52e:	e003      	b.n	800c538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d002      	beq.n	800c546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c546:	bf00      	nop
 800c548:	3714      	adds	r7, #20
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr
 800c552:	bf00      	nop
 800c554:	20004c14 	.word	0x20004c14
 800c558:	20004c1c 	.word	0x20004c1c

0800c55c <__errno>:
 800c55c:	4b01      	ldr	r3, [pc, #4]	; (800c564 <__errno+0x8>)
 800c55e:	6818      	ldr	r0, [r3, #0]
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	200000c8 	.word	0x200000c8

0800c568 <__libc_init_array>:
 800c568:	b570      	push	{r4, r5, r6, lr}
 800c56a:	4e0d      	ldr	r6, [pc, #52]	; (800c5a0 <__libc_init_array+0x38>)
 800c56c:	4c0d      	ldr	r4, [pc, #52]	; (800c5a4 <__libc_init_array+0x3c>)
 800c56e:	1ba4      	subs	r4, r4, r6
 800c570:	10a4      	asrs	r4, r4, #2
 800c572:	2500      	movs	r5, #0
 800c574:	42a5      	cmp	r5, r4
 800c576:	d109      	bne.n	800c58c <__libc_init_array+0x24>
 800c578:	4e0b      	ldr	r6, [pc, #44]	; (800c5a8 <__libc_init_array+0x40>)
 800c57a:	4c0c      	ldr	r4, [pc, #48]	; (800c5ac <__libc_init_array+0x44>)
 800c57c:	f003 fc90 	bl	800fea0 <_init>
 800c580:	1ba4      	subs	r4, r4, r6
 800c582:	10a4      	asrs	r4, r4, #2
 800c584:	2500      	movs	r5, #0
 800c586:	42a5      	cmp	r5, r4
 800c588:	d105      	bne.n	800c596 <__libc_init_array+0x2e>
 800c58a:	bd70      	pop	{r4, r5, r6, pc}
 800c58c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c590:	4798      	blx	r3
 800c592:	3501      	adds	r5, #1
 800c594:	e7ee      	b.n	800c574 <__libc_init_array+0xc>
 800c596:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c59a:	4798      	blx	r3
 800c59c:	3501      	adds	r5, #1
 800c59e:	e7f2      	b.n	800c586 <__libc_init_array+0x1e>
 800c5a0:	08010290 	.word	0x08010290
 800c5a4:	08010290 	.word	0x08010290
 800c5a8:	08010290 	.word	0x08010290
 800c5ac:	08010294 	.word	0x08010294

0800c5b0 <memcpy>:
 800c5b0:	b510      	push	{r4, lr}
 800c5b2:	1e43      	subs	r3, r0, #1
 800c5b4:	440a      	add	r2, r1
 800c5b6:	4291      	cmp	r1, r2
 800c5b8:	d100      	bne.n	800c5bc <memcpy+0xc>
 800c5ba:	bd10      	pop	{r4, pc}
 800c5bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5c4:	e7f7      	b.n	800c5b6 <memcpy+0x6>

0800c5c6 <memset>:
 800c5c6:	4402      	add	r2, r0
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d100      	bne.n	800c5d0 <memset+0xa>
 800c5ce:	4770      	bx	lr
 800c5d0:	f803 1b01 	strb.w	r1, [r3], #1
 800c5d4:	e7f9      	b.n	800c5ca <memset+0x4>

0800c5d6 <__cvt>:
 800c5d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5d8:	ed2d 8b02 	vpush	{d8}
 800c5dc:	eeb0 8b40 	vmov.f64	d8, d0
 800c5e0:	b085      	sub	sp, #20
 800c5e2:	4617      	mov	r7, r2
 800c5e4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c5e6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c5e8:	ee18 2a90 	vmov	r2, s17
 800c5ec:	f025 0520 	bic.w	r5, r5, #32
 800c5f0:	2a00      	cmp	r2, #0
 800c5f2:	bfb6      	itet	lt
 800c5f4:	222d      	movlt	r2, #45	; 0x2d
 800c5f6:	2200      	movge	r2, #0
 800c5f8:	eeb1 8b40 	vneglt.f64	d8, d0
 800c5fc:	2d46      	cmp	r5, #70	; 0x46
 800c5fe:	460c      	mov	r4, r1
 800c600:	701a      	strb	r2, [r3, #0]
 800c602:	d004      	beq.n	800c60e <__cvt+0x38>
 800c604:	2d45      	cmp	r5, #69	; 0x45
 800c606:	d100      	bne.n	800c60a <__cvt+0x34>
 800c608:	3401      	adds	r4, #1
 800c60a:	2102      	movs	r1, #2
 800c60c:	e000      	b.n	800c610 <__cvt+0x3a>
 800c60e:	2103      	movs	r1, #3
 800c610:	ab03      	add	r3, sp, #12
 800c612:	9301      	str	r3, [sp, #4]
 800c614:	ab02      	add	r3, sp, #8
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	4622      	mov	r2, r4
 800c61a:	4633      	mov	r3, r6
 800c61c:	eeb0 0b48 	vmov.f64	d0, d8
 800c620:	f001 fd1e 	bl	800e060 <_dtoa_r>
 800c624:	2d47      	cmp	r5, #71	; 0x47
 800c626:	d101      	bne.n	800c62c <__cvt+0x56>
 800c628:	07fb      	lsls	r3, r7, #31
 800c62a:	d51e      	bpl.n	800c66a <__cvt+0x94>
 800c62c:	2d46      	cmp	r5, #70	; 0x46
 800c62e:	eb00 0304 	add.w	r3, r0, r4
 800c632:	d10c      	bne.n	800c64e <__cvt+0x78>
 800c634:	7802      	ldrb	r2, [r0, #0]
 800c636:	2a30      	cmp	r2, #48	; 0x30
 800c638:	d107      	bne.n	800c64a <__cvt+0x74>
 800c63a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c642:	bf1c      	itt	ne
 800c644:	f1c4 0401 	rsbne	r4, r4, #1
 800c648:	6034      	strne	r4, [r6, #0]
 800c64a:	6832      	ldr	r2, [r6, #0]
 800c64c:	4413      	add	r3, r2
 800c64e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c656:	d007      	beq.n	800c668 <__cvt+0x92>
 800c658:	2130      	movs	r1, #48	; 0x30
 800c65a:	9a03      	ldr	r2, [sp, #12]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d204      	bcs.n	800c66a <__cvt+0x94>
 800c660:	1c54      	adds	r4, r2, #1
 800c662:	9403      	str	r4, [sp, #12]
 800c664:	7011      	strb	r1, [r2, #0]
 800c666:	e7f8      	b.n	800c65a <__cvt+0x84>
 800c668:	9303      	str	r3, [sp, #12]
 800c66a:	9b03      	ldr	r3, [sp, #12]
 800c66c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c66e:	1a1b      	subs	r3, r3, r0
 800c670:	6013      	str	r3, [r2, #0]
 800c672:	b005      	add	sp, #20
 800c674:	ecbd 8b02 	vpop	{d8}
 800c678:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c67a <__exponent>:
 800c67a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c67c:	2900      	cmp	r1, #0
 800c67e:	4604      	mov	r4, r0
 800c680:	bfba      	itte	lt
 800c682:	4249      	neglt	r1, r1
 800c684:	232d      	movlt	r3, #45	; 0x2d
 800c686:	232b      	movge	r3, #43	; 0x2b
 800c688:	2909      	cmp	r1, #9
 800c68a:	f804 2b02 	strb.w	r2, [r4], #2
 800c68e:	7043      	strb	r3, [r0, #1]
 800c690:	dd20      	ble.n	800c6d4 <__exponent+0x5a>
 800c692:	f10d 0307 	add.w	r3, sp, #7
 800c696:	461f      	mov	r7, r3
 800c698:	260a      	movs	r6, #10
 800c69a:	fb91 f5f6 	sdiv	r5, r1, r6
 800c69e:	fb06 1115 	mls	r1, r6, r5, r1
 800c6a2:	3130      	adds	r1, #48	; 0x30
 800c6a4:	2d09      	cmp	r5, #9
 800c6a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c6aa:	f103 32ff 	add.w	r2, r3, #4294967295
 800c6ae:	4629      	mov	r1, r5
 800c6b0:	dc09      	bgt.n	800c6c6 <__exponent+0x4c>
 800c6b2:	3130      	adds	r1, #48	; 0x30
 800c6b4:	3b02      	subs	r3, #2
 800c6b6:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c6ba:	42bb      	cmp	r3, r7
 800c6bc:	4622      	mov	r2, r4
 800c6be:	d304      	bcc.n	800c6ca <__exponent+0x50>
 800c6c0:	1a10      	subs	r0, r2, r0
 800c6c2:	b003      	add	sp, #12
 800c6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	e7e7      	b.n	800c69a <__exponent+0x20>
 800c6ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6ce:	f804 2b01 	strb.w	r2, [r4], #1
 800c6d2:	e7f2      	b.n	800c6ba <__exponent+0x40>
 800c6d4:	2330      	movs	r3, #48	; 0x30
 800c6d6:	4419      	add	r1, r3
 800c6d8:	7083      	strb	r3, [r0, #2]
 800c6da:	1d02      	adds	r2, r0, #4
 800c6dc:	70c1      	strb	r1, [r0, #3]
 800c6de:	e7ef      	b.n	800c6c0 <__exponent+0x46>

0800c6e0 <_printf_float>:
 800c6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e4:	b08d      	sub	sp, #52	; 0x34
 800c6e6:	460c      	mov	r4, r1
 800c6e8:	4616      	mov	r6, r2
 800c6ea:	461f      	mov	r7, r3
 800c6ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c6f0:	4605      	mov	r5, r0
 800c6f2:	f002 fd2d 	bl	800f150 <_localeconv_r>
 800c6f6:	f8d0 b000 	ldr.w	fp, [r0]
 800c6fa:	4658      	mov	r0, fp
 800c6fc:	f7f3 fda0 	bl	8000240 <strlen>
 800c700:	2300      	movs	r3, #0
 800c702:	930a      	str	r3, [sp, #40]	; 0x28
 800c704:	f8d8 3000 	ldr.w	r3, [r8]
 800c708:	9005      	str	r0, [sp, #20]
 800c70a:	3307      	adds	r3, #7
 800c70c:	f023 0307 	bic.w	r3, r3, #7
 800c710:	f103 0108 	add.w	r1, r3, #8
 800c714:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c718:	6822      	ldr	r2, [r4, #0]
 800c71a:	f8c8 1000 	str.w	r1, [r8]
 800c71e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c722:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c726:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800c9b0 <_printf_float+0x2d0>
 800c72a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c72e:	eeb0 6bc0 	vabs.f64	d6, d0
 800c732:	eeb4 6b47 	vcmp.f64	d6, d7
 800c736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c73a:	dd24      	ble.n	800c786 <_printf_float+0xa6>
 800c73c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c744:	d502      	bpl.n	800c74c <_printf_float+0x6c>
 800c746:	232d      	movs	r3, #45	; 0x2d
 800c748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c74c:	499a      	ldr	r1, [pc, #616]	; (800c9b8 <_printf_float+0x2d8>)
 800c74e:	4b9b      	ldr	r3, [pc, #620]	; (800c9bc <_printf_float+0x2dc>)
 800c750:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c754:	bf8c      	ite	hi
 800c756:	4688      	movhi	r8, r1
 800c758:	4698      	movls	r8, r3
 800c75a:	f022 0204 	bic.w	r2, r2, #4
 800c75e:	2303      	movs	r3, #3
 800c760:	6123      	str	r3, [r4, #16]
 800c762:	6022      	str	r2, [r4, #0]
 800c764:	f04f 0a00 	mov.w	sl, #0
 800c768:	9700      	str	r7, [sp, #0]
 800c76a:	4633      	mov	r3, r6
 800c76c:	aa0b      	add	r2, sp, #44	; 0x2c
 800c76e:	4621      	mov	r1, r4
 800c770:	4628      	mov	r0, r5
 800c772:	f000 f9e1 	bl	800cb38 <_printf_common>
 800c776:	3001      	adds	r0, #1
 800c778:	f040 8089 	bne.w	800c88e <_printf_float+0x1ae>
 800c77c:	f04f 30ff 	mov.w	r0, #4294967295
 800c780:	b00d      	add	sp, #52	; 0x34
 800c782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c786:	eeb4 0b40 	vcmp.f64	d0, d0
 800c78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c78e:	d702      	bvc.n	800c796 <_printf_float+0xb6>
 800c790:	498b      	ldr	r1, [pc, #556]	; (800c9c0 <_printf_float+0x2e0>)
 800c792:	4b8c      	ldr	r3, [pc, #560]	; (800c9c4 <_printf_float+0x2e4>)
 800c794:	e7dc      	b.n	800c750 <_printf_float+0x70>
 800c796:	6861      	ldr	r1, [r4, #4]
 800c798:	1c4b      	adds	r3, r1, #1
 800c79a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c79e:	ab0a      	add	r3, sp, #40	; 0x28
 800c7a0:	a809      	add	r0, sp, #36	; 0x24
 800c7a2:	d13b      	bne.n	800c81c <_printf_float+0x13c>
 800c7a4:	2106      	movs	r1, #6
 800c7a6:	6061      	str	r1, [r4, #4]
 800c7a8:	f04f 0c00 	mov.w	ip, #0
 800c7ac:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800c7b0:	e9cd 0900 	strd	r0, r9, [sp]
 800c7b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c7b8:	6022      	str	r2, [r4, #0]
 800c7ba:	6861      	ldr	r1, [r4, #4]
 800c7bc:	4628      	mov	r0, r5
 800c7be:	f7ff ff0a 	bl	800c5d6 <__cvt>
 800c7c2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800c7c6:	2b47      	cmp	r3, #71	; 0x47
 800c7c8:	4680      	mov	r8, r0
 800c7ca:	d109      	bne.n	800c7e0 <_printf_float+0x100>
 800c7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7ce:	1cd8      	adds	r0, r3, #3
 800c7d0:	db02      	blt.n	800c7d8 <_printf_float+0xf8>
 800c7d2:	6862      	ldr	r2, [r4, #4]
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	dd47      	ble.n	800c868 <_printf_float+0x188>
 800c7d8:	f1a9 0902 	sub.w	r9, r9, #2
 800c7dc:	fa5f f989 	uxtb.w	r9, r9
 800c7e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c7e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7e6:	d824      	bhi.n	800c832 <_printf_float+0x152>
 800c7e8:	3901      	subs	r1, #1
 800c7ea:	464a      	mov	r2, r9
 800c7ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c7f0:	9109      	str	r1, [sp, #36]	; 0x24
 800c7f2:	f7ff ff42 	bl	800c67a <__exponent>
 800c7f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7f8:	1813      	adds	r3, r2, r0
 800c7fa:	2a01      	cmp	r2, #1
 800c7fc:	4682      	mov	sl, r0
 800c7fe:	6123      	str	r3, [r4, #16]
 800c800:	dc02      	bgt.n	800c808 <_printf_float+0x128>
 800c802:	6822      	ldr	r2, [r4, #0]
 800c804:	07d1      	lsls	r1, r2, #31
 800c806:	d501      	bpl.n	800c80c <_printf_float+0x12c>
 800c808:	3301      	adds	r3, #1
 800c80a:	6123      	str	r3, [r4, #16]
 800c80c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c810:	2b00      	cmp	r3, #0
 800c812:	d0a9      	beq.n	800c768 <_printf_float+0x88>
 800c814:	232d      	movs	r3, #45	; 0x2d
 800c816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c81a:	e7a5      	b.n	800c768 <_printf_float+0x88>
 800c81c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800c820:	f000 8178 	beq.w	800cb14 <_printf_float+0x434>
 800c824:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c828:	d1be      	bne.n	800c7a8 <_printf_float+0xc8>
 800c82a:	2900      	cmp	r1, #0
 800c82c:	d1bc      	bne.n	800c7a8 <_printf_float+0xc8>
 800c82e:	2101      	movs	r1, #1
 800c830:	e7b9      	b.n	800c7a6 <_printf_float+0xc6>
 800c832:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c836:	d119      	bne.n	800c86c <_printf_float+0x18c>
 800c838:	2900      	cmp	r1, #0
 800c83a:	6863      	ldr	r3, [r4, #4]
 800c83c:	dd0c      	ble.n	800c858 <_printf_float+0x178>
 800c83e:	6121      	str	r1, [r4, #16]
 800c840:	b913      	cbnz	r3, 800c848 <_printf_float+0x168>
 800c842:	6822      	ldr	r2, [r4, #0]
 800c844:	07d2      	lsls	r2, r2, #31
 800c846:	d502      	bpl.n	800c84e <_printf_float+0x16e>
 800c848:	3301      	adds	r3, #1
 800c84a:	440b      	add	r3, r1
 800c84c:	6123      	str	r3, [r4, #16]
 800c84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c850:	65a3      	str	r3, [r4, #88]	; 0x58
 800c852:	f04f 0a00 	mov.w	sl, #0
 800c856:	e7d9      	b.n	800c80c <_printf_float+0x12c>
 800c858:	b913      	cbnz	r3, 800c860 <_printf_float+0x180>
 800c85a:	6822      	ldr	r2, [r4, #0]
 800c85c:	07d0      	lsls	r0, r2, #31
 800c85e:	d501      	bpl.n	800c864 <_printf_float+0x184>
 800c860:	3302      	adds	r3, #2
 800c862:	e7f3      	b.n	800c84c <_printf_float+0x16c>
 800c864:	2301      	movs	r3, #1
 800c866:	e7f1      	b.n	800c84c <_printf_float+0x16c>
 800c868:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c86c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c870:	4293      	cmp	r3, r2
 800c872:	db05      	blt.n	800c880 <_printf_float+0x1a0>
 800c874:	6822      	ldr	r2, [r4, #0]
 800c876:	6123      	str	r3, [r4, #16]
 800c878:	07d1      	lsls	r1, r2, #31
 800c87a:	d5e8      	bpl.n	800c84e <_printf_float+0x16e>
 800c87c:	3301      	adds	r3, #1
 800c87e:	e7e5      	b.n	800c84c <_printf_float+0x16c>
 800c880:	2b00      	cmp	r3, #0
 800c882:	bfd4      	ite	le
 800c884:	f1c3 0302 	rsble	r3, r3, #2
 800c888:	2301      	movgt	r3, #1
 800c88a:	4413      	add	r3, r2
 800c88c:	e7de      	b.n	800c84c <_printf_float+0x16c>
 800c88e:	6823      	ldr	r3, [r4, #0]
 800c890:	055a      	lsls	r2, r3, #21
 800c892:	d407      	bmi.n	800c8a4 <_printf_float+0x1c4>
 800c894:	6923      	ldr	r3, [r4, #16]
 800c896:	4642      	mov	r2, r8
 800c898:	4631      	mov	r1, r6
 800c89a:	4628      	mov	r0, r5
 800c89c:	47b8      	blx	r7
 800c89e:	3001      	adds	r0, #1
 800c8a0:	d12a      	bne.n	800c8f8 <_printf_float+0x218>
 800c8a2:	e76b      	b.n	800c77c <_printf_float+0x9c>
 800c8a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c8a8:	f240 80de 	bls.w	800ca68 <_printf_float+0x388>
 800c8ac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c8b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8b8:	d133      	bne.n	800c922 <_printf_float+0x242>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	4a42      	ldr	r2, [pc, #264]	; (800c9c8 <_printf_float+0x2e8>)
 800c8be:	4631      	mov	r1, r6
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	47b8      	blx	r7
 800c8c4:	3001      	adds	r0, #1
 800c8c6:	f43f af59 	beq.w	800c77c <_printf_float+0x9c>
 800c8ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	db02      	blt.n	800c8d8 <_printf_float+0x1f8>
 800c8d2:	6823      	ldr	r3, [r4, #0]
 800c8d4:	07d8      	lsls	r0, r3, #31
 800c8d6:	d50f      	bpl.n	800c8f8 <_printf_float+0x218>
 800c8d8:	9b05      	ldr	r3, [sp, #20]
 800c8da:	465a      	mov	r2, fp
 800c8dc:	4631      	mov	r1, r6
 800c8de:	4628      	mov	r0, r5
 800c8e0:	47b8      	blx	r7
 800c8e2:	3001      	adds	r0, #1
 800c8e4:	f43f af4a 	beq.w	800c77c <_printf_float+0x9c>
 800c8e8:	f04f 0800 	mov.w	r8, #0
 800c8ec:	f104 091a 	add.w	r9, r4, #26
 800c8f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8f2:	3b01      	subs	r3, #1
 800c8f4:	4543      	cmp	r3, r8
 800c8f6:	dc09      	bgt.n	800c90c <_printf_float+0x22c>
 800c8f8:	6823      	ldr	r3, [r4, #0]
 800c8fa:	079b      	lsls	r3, r3, #30
 800c8fc:	f100 8105 	bmi.w	800cb0a <_printf_float+0x42a>
 800c900:	68e0      	ldr	r0, [r4, #12]
 800c902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c904:	4298      	cmp	r0, r3
 800c906:	bfb8      	it	lt
 800c908:	4618      	movlt	r0, r3
 800c90a:	e739      	b.n	800c780 <_printf_float+0xa0>
 800c90c:	2301      	movs	r3, #1
 800c90e:	464a      	mov	r2, r9
 800c910:	4631      	mov	r1, r6
 800c912:	4628      	mov	r0, r5
 800c914:	47b8      	blx	r7
 800c916:	3001      	adds	r0, #1
 800c918:	f43f af30 	beq.w	800c77c <_printf_float+0x9c>
 800c91c:	f108 0801 	add.w	r8, r8, #1
 800c920:	e7e6      	b.n	800c8f0 <_printf_float+0x210>
 800c922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c924:	2b00      	cmp	r3, #0
 800c926:	dc2b      	bgt.n	800c980 <_printf_float+0x2a0>
 800c928:	2301      	movs	r3, #1
 800c92a:	4a27      	ldr	r2, [pc, #156]	; (800c9c8 <_printf_float+0x2e8>)
 800c92c:	4631      	mov	r1, r6
 800c92e:	4628      	mov	r0, r5
 800c930:	47b8      	blx	r7
 800c932:	3001      	adds	r0, #1
 800c934:	f43f af22 	beq.w	800c77c <_printf_float+0x9c>
 800c938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c93a:	b923      	cbnz	r3, 800c946 <_printf_float+0x266>
 800c93c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c93e:	b913      	cbnz	r3, 800c946 <_printf_float+0x266>
 800c940:	6823      	ldr	r3, [r4, #0]
 800c942:	07d9      	lsls	r1, r3, #31
 800c944:	d5d8      	bpl.n	800c8f8 <_printf_float+0x218>
 800c946:	9b05      	ldr	r3, [sp, #20]
 800c948:	465a      	mov	r2, fp
 800c94a:	4631      	mov	r1, r6
 800c94c:	4628      	mov	r0, r5
 800c94e:	47b8      	blx	r7
 800c950:	3001      	adds	r0, #1
 800c952:	f43f af13 	beq.w	800c77c <_printf_float+0x9c>
 800c956:	f04f 0900 	mov.w	r9, #0
 800c95a:	f104 0a1a 	add.w	sl, r4, #26
 800c95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c960:	425b      	negs	r3, r3
 800c962:	454b      	cmp	r3, r9
 800c964:	dc01      	bgt.n	800c96a <_printf_float+0x28a>
 800c966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c968:	e795      	b.n	800c896 <_printf_float+0x1b6>
 800c96a:	2301      	movs	r3, #1
 800c96c:	4652      	mov	r2, sl
 800c96e:	4631      	mov	r1, r6
 800c970:	4628      	mov	r0, r5
 800c972:	47b8      	blx	r7
 800c974:	3001      	adds	r0, #1
 800c976:	f43f af01 	beq.w	800c77c <_printf_float+0x9c>
 800c97a:	f109 0901 	add.w	r9, r9, #1
 800c97e:	e7ee      	b.n	800c95e <_printf_float+0x27e>
 800c980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c982:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c984:	429a      	cmp	r2, r3
 800c986:	bfa8      	it	ge
 800c988:	461a      	movge	r2, r3
 800c98a:	2a00      	cmp	r2, #0
 800c98c:	4691      	mov	r9, r2
 800c98e:	dd07      	ble.n	800c9a0 <_printf_float+0x2c0>
 800c990:	4613      	mov	r3, r2
 800c992:	4631      	mov	r1, r6
 800c994:	4642      	mov	r2, r8
 800c996:	4628      	mov	r0, r5
 800c998:	47b8      	blx	r7
 800c99a:	3001      	adds	r0, #1
 800c99c:	f43f aeee 	beq.w	800c77c <_printf_float+0x9c>
 800c9a0:	f104 031a 	add.w	r3, r4, #26
 800c9a4:	f04f 0a00 	mov.w	sl, #0
 800c9a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9ac:	9307      	str	r3, [sp, #28]
 800c9ae:	e017      	b.n	800c9e0 <_printf_float+0x300>
 800c9b0:	ffffffff 	.word	0xffffffff
 800c9b4:	7fefffff 	.word	0x7fefffff
 800c9b8:	0800ffd8 	.word	0x0800ffd8
 800c9bc:	0800ffd4 	.word	0x0800ffd4
 800c9c0:	0800ffe0 	.word	0x0800ffe0
 800c9c4:	0800ffdc 	.word	0x0800ffdc
 800c9c8:	0800ffe4 	.word	0x0800ffe4
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	9a07      	ldr	r2, [sp, #28]
 800c9d0:	4631      	mov	r1, r6
 800c9d2:	4628      	mov	r0, r5
 800c9d4:	47b8      	blx	r7
 800c9d6:	3001      	adds	r0, #1
 800c9d8:	f43f aed0 	beq.w	800c77c <_printf_float+0x9c>
 800c9dc:	f10a 0a01 	add.w	sl, sl, #1
 800c9e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c9e2:	9306      	str	r3, [sp, #24]
 800c9e4:	eba3 0309 	sub.w	r3, r3, r9
 800c9e8:	4553      	cmp	r3, sl
 800c9ea:	dcef      	bgt.n	800c9cc <_printf_float+0x2ec>
 800c9ec:	9b06      	ldr	r3, [sp, #24]
 800c9ee:	4498      	add	r8, r3
 800c9f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	db15      	blt.n	800ca24 <_printf_float+0x344>
 800c9f8:	6823      	ldr	r3, [r4, #0]
 800c9fa:	07da      	lsls	r2, r3, #31
 800c9fc:	d412      	bmi.n	800ca24 <_printf_float+0x344>
 800c9fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca00:	9a06      	ldr	r2, [sp, #24]
 800ca02:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca04:	1a9a      	subs	r2, r3, r2
 800ca06:	eba3 0a01 	sub.w	sl, r3, r1
 800ca0a:	4592      	cmp	sl, r2
 800ca0c:	bfa8      	it	ge
 800ca0e:	4692      	movge	sl, r2
 800ca10:	f1ba 0f00 	cmp.w	sl, #0
 800ca14:	dc0e      	bgt.n	800ca34 <_printf_float+0x354>
 800ca16:	f04f 0800 	mov.w	r8, #0
 800ca1a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca1e:	f104 091a 	add.w	r9, r4, #26
 800ca22:	e019      	b.n	800ca58 <_printf_float+0x378>
 800ca24:	9b05      	ldr	r3, [sp, #20]
 800ca26:	465a      	mov	r2, fp
 800ca28:	4631      	mov	r1, r6
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	47b8      	blx	r7
 800ca2e:	3001      	adds	r0, #1
 800ca30:	d1e5      	bne.n	800c9fe <_printf_float+0x31e>
 800ca32:	e6a3      	b.n	800c77c <_printf_float+0x9c>
 800ca34:	4653      	mov	r3, sl
 800ca36:	4642      	mov	r2, r8
 800ca38:	4631      	mov	r1, r6
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	47b8      	blx	r7
 800ca3e:	3001      	adds	r0, #1
 800ca40:	d1e9      	bne.n	800ca16 <_printf_float+0x336>
 800ca42:	e69b      	b.n	800c77c <_printf_float+0x9c>
 800ca44:	2301      	movs	r3, #1
 800ca46:	464a      	mov	r2, r9
 800ca48:	4631      	mov	r1, r6
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	47b8      	blx	r7
 800ca4e:	3001      	adds	r0, #1
 800ca50:	f43f ae94 	beq.w	800c77c <_printf_float+0x9c>
 800ca54:	f108 0801 	add.w	r8, r8, #1
 800ca58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca5c:	1a9b      	subs	r3, r3, r2
 800ca5e:	eba3 030a 	sub.w	r3, r3, sl
 800ca62:	4543      	cmp	r3, r8
 800ca64:	dcee      	bgt.n	800ca44 <_printf_float+0x364>
 800ca66:	e747      	b.n	800c8f8 <_printf_float+0x218>
 800ca68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca6a:	2a01      	cmp	r2, #1
 800ca6c:	dc01      	bgt.n	800ca72 <_printf_float+0x392>
 800ca6e:	07db      	lsls	r3, r3, #31
 800ca70:	d539      	bpl.n	800cae6 <_printf_float+0x406>
 800ca72:	2301      	movs	r3, #1
 800ca74:	4642      	mov	r2, r8
 800ca76:	4631      	mov	r1, r6
 800ca78:	4628      	mov	r0, r5
 800ca7a:	47b8      	blx	r7
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	f43f ae7d 	beq.w	800c77c <_printf_float+0x9c>
 800ca82:	9b05      	ldr	r3, [sp, #20]
 800ca84:	465a      	mov	r2, fp
 800ca86:	4631      	mov	r1, r6
 800ca88:	4628      	mov	r0, r5
 800ca8a:	47b8      	blx	r7
 800ca8c:	3001      	adds	r0, #1
 800ca8e:	f108 0801 	add.w	r8, r8, #1
 800ca92:	f43f ae73 	beq.w	800c77c <_printf_float+0x9c>
 800ca96:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ca9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800caa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa4:	f103 33ff 	add.w	r3, r3, #4294967295
 800caa8:	d018      	beq.n	800cadc <_printf_float+0x3fc>
 800caaa:	4642      	mov	r2, r8
 800caac:	4631      	mov	r1, r6
 800caae:	4628      	mov	r0, r5
 800cab0:	47b8      	blx	r7
 800cab2:	3001      	adds	r0, #1
 800cab4:	d10e      	bne.n	800cad4 <_printf_float+0x3f4>
 800cab6:	e661      	b.n	800c77c <_printf_float+0x9c>
 800cab8:	2301      	movs	r3, #1
 800caba:	464a      	mov	r2, r9
 800cabc:	4631      	mov	r1, r6
 800cabe:	4628      	mov	r0, r5
 800cac0:	47b8      	blx	r7
 800cac2:	3001      	adds	r0, #1
 800cac4:	f43f ae5a 	beq.w	800c77c <_printf_float+0x9c>
 800cac8:	f108 0801 	add.w	r8, r8, #1
 800cacc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cace:	3b01      	subs	r3, #1
 800cad0:	4543      	cmp	r3, r8
 800cad2:	dcf1      	bgt.n	800cab8 <_printf_float+0x3d8>
 800cad4:	4653      	mov	r3, sl
 800cad6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cada:	e6dd      	b.n	800c898 <_printf_float+0x1b8>
 800cadc:	f04f 0800 	mov.w	r8, #0
 800cae0:	f104 091a 	add.w	r9, r4, #26
 800cae4:	e7f2      	b.n	800cacc <_printf_float+0x3ec>
 800cae6:	2301      	movs	r3, #1
 800cae8:	e7df      	b.n	800caaa <_printf_float+0x3ca>
 800caea:	2301      	movs	r3, #1
 800caec:	464a      	mov	r2, r9
 800caee:	4631      	mov	r1, r6
 800caf0:	4628      	mov	r0, r5
 800caf2:	47b8      	blx	r7
 800caf4:	3001      	adds	r0, #1
 800caf6:	f43f ae41 	beq.w	800c77c <_printf_float+0x9c>
 800cafa:	f108 0801 	add.w	r8, r8, #1
 800cafe:	68e3      	ldr	r3, [r4, #12]
 800cb00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb02:	1a9b      	subs	r3, r3, r2
 800cb04:	4543      	cmp	r3, r8
 800cb06:	dcf0      	bgt.n	800caea <_printf_float+0x40a>
 800cb08:	e6fa      	b.n	800c900 <_printf_float+0x220>
 800cb0a:	f04f 0800 	mov.w	r8, #0
 800cb0e:	f104 0919 	add.w	r9, r4, #25
 800cb12:	e7f4      	b.n	800cafe <_printf_float+0x41e>
 800cb14:	2900      	cmp	r1, #0
 800cb16:	f43f ae8a 	beq.w	800c82e <_printf_float+0x14e>
 800cb1a:	f04f 0c00 	mov.w	ip, #0
 800cb1e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800cb22:	e9cd 0900 	strd	r0, r9, [sp]
 800cb26:	6022      	str	r2, [r4, #0]
 800cb28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	f7ff fd52 	bl	800c5d6 <__cvt>
 800cb32:	4680      	mov	r8, r0
 800cb34:	e64a      	b.n	800c7cc <_printf_float+0xec>
 800cb36:	bf00      	nop

0800cb38 <_printf_common>:
 800cb38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb3c:	4691      	mov	r9, r2
 800cb3e:	461f      	mov	r7, r3
 800cb40:	688a      	ldr	r2, [r1, #8]
 800cb42:	690b      	ldr	r3, [r1, #16]
 800cb44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	bfb8      	it	lt
 800cb4c:	4613      	movlt	r3, r2
 800cb4e:	f8c9 3000 	str.w	r3, [r9]
 800cb52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb56:	4606      	mov	r6, r0
 800cb58:	460c      	mov	r4, r1
 800cb5a:	b112      	cbz	r2, 800cb62 <_printf_common+0x2a>
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	f8c9 3000 	str.w	r3, [r9]
 800cb62:	6823      	ldr	r3, [r4, #0]
 800cb64:	0699      	lsls	r1, r3, #26
 800cb66:	bf42      	ittt	mi
 800cb68:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cb6c:	3302      	addmi	r3, #2
 800cb6e:	f8c9 3000 	strmi.w	r3, [r9]
 800cb72:	6825      	ldr	r5, [r4, #0]
 800cb74:	f015 0506 	ands.w	r5, r5, #6
 800cb78:	d107      	bne.n	800cb8a <_printf_common+0x52>
 800cb7a:	f104 0a19 	add.w	sl, r4, #25
 800cb7e:	68e3      	ldr	r3, [r4, #12]
 800cb80:	f8d9 2000 	ldr.w	r2, [r9]
 800cb84:	1a9b      	subs	r3, r3, r2
 800cb86:	42ab      	cmp	r3, r5
 800cb88:	dc28      	bgt.n	800cbdc <_printf_common+0xa4>
 800cb8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cb8e:	6822      	ldr	r2, [r4, #0]
 800cb90:	3300      	adds	r3, #0
 800cb92:	bf18      	it	ne
 800cb94:	2301      	movne	r3, #1
 800cb96:	0692      	lsls	r2, r2, #26
 800cb98:	d42d      	bmi.n	800cbf6 <_printf_common+0xbe>
 800cb9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb9e:	4639      	mov	r1, r7
 800cba0:	4630      	mov	r0, r6
 800cba2:	47c0      	blx	r8
 800cba4:	3001      	adds	r0, #1
 800cba6:	d020      	beq.n	800cbea <_printf_common+0xb2>
 800cba8:	6823      	ldr	r3, [r4, #0]
 800cbaa:	68e5      	ldr	r5, [r4, #12]
 800cbac:	f8d9 2000 	ldr.w	r2, [r9]
 800cbb0:	f003 0306 	and.w	r3, r3, #6
 800cbb4:	2b04      	cmp	r3, #4
 800cbb6:	bf08      	it	eq
 800cbb8:	1aad      	subeq	r5, r5, r2
 800cbba:	68a3      	ldr	r3, [r4, #8]
 800cbbc:	6922      	ldr	r2, [r4, #16]
 800cbbe:	bf0c      	ite	eq
 800cbc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbc4:	2500      	movne	r5, #0
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	bfc4      	itt	gt
 800cbca:	1a9b      	subgt	r3, r3, r2
 800cbcc:	18ed      	addgt	r5, r5, r3
 800cbce:	f04f 0900 	mov.w	r9, #0
 800cbd2:	341a      	adds	r4, #26
 800cbd4:	454d      	cmp	r5, r9
 800cbd6:	d11a      	bne.n	800cc0e <_printf_common+0xd6>
 800cbd8:	2000      	movs	r0, #0
 800cbda:	e008      	b.n	800cbee <_printf_common+0xb6>
 800cbdc:	2301      	movs	r3, #1
 800cbde:	4652      	mov	r2, sl
 800cbe0:	4639      	mov	r1, r7
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	47c0      	blx	r8
 800cbe6:	3001      	adds	r0, #1
 800cbe8:	d103      	bne.n	800cbf2 <_printf_common+0xba>
 800cbea:	f04f 30ff 	mov.w	r0, #4294967295
 800cbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbf2:	3501      	adds	r5, #1
 800cbf4:	e7c3      	b.n	800cb7e <_printf_common+0x46>
 800cbf6:	18e1      	adds	r1, r4, r3
 800cbf8:	1c5a      	adds	r2, r3, #1
 800cbfa:	2030      	movs	r0, #48	; 0x30
 800cbfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc00:	4422      	add	r2, r4
 800cc02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc0a:	3302      	adds	r3, #2
 800cc0c:	e7c5      	b.n	800cb9a <_printf_common+0x62>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	4622      	mov	r2, r4
 800cc12:	4639      	mov	r1, r7
 800cc14:	4630      	mov	r0, r6
 800cc16:	47c0      	blx	r8
 800cc18:	3001      	adds	r0, #1
 800cc1a:	d0e6      	beq.n	800cbea <_printf_common+0xb2>
 800cc1c:	f109 0901 	add.w	r9, r9, #1
 800cc20:	e7d8      	b.n	800cbd4 <_printf_common+0x9c>
	...

0800cc24 <_printf_i>:
 800cc24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cc2c:	460c      	mov	r4, r1
 800cc2e:	7e09      	ldrb	r1, [r1, #24]
 800cc30:	b085      	sub	sp, #20
 800cc32:	296e      	cmp	r1, #110	; 0x6e
 800cc34:	4617      	mov	r7, r2
 800cc36:	4606      	mov	r6, r0
 800cc38:	4698      	mov	r8, r3
 800cc3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc3c:	f000 80b3 	beq.w	800cda6 <_printf_i+0x182>
 800cc40:	d822      	bhi.n	800cc88 <_printf_i+0x64>
 800cc42:	2963      	cmp	r1, #99	; 0x63
 800cc44:	d036      	beq.n	800ccb4 <_printf_i+0x90>
 800cc46:	d80a      	bhi.n	800cc5e <_printf_i+0x3a>
 800cc48:	2900      	cmp	r1, #0
 800cc4a:	f000 80b9 	beq.w	800cdc0 <_printf_i+0x19c>
 800cc4e:	2958      	cmp	r1, #88	; 0x58
 800cc50:	f000 8083 	beq.w	800cd5a <_printf_i+0x136>
 800cc54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cc5c:	e032      	b.n	800ccc4 <_printf_i+0xa0>
 800cc5e:	2964      	cmp	r1, #100	; 0x64
 800cc60:	d001      	beq.n	800cc66 <_printf_i+0x42>
 800cc62:	2969      	cmp	r1, #105	; 0x69
 800cc64:	d1f6      	bne.n	800cc54 <_printf_i+0x30>
 800cc66:	6820      	ldr	r0, [r4, #0]
 800cc68:	6813      	ldr	r3, [r2, #0]
 800cc6a:	0605      	lsls	r5, r0, #24
 800cc6c:	f103 0104 	add.w	r1, r3, #4
 800cc70:	d52a      	bpl.n	800ccc8 <_printf_i+0xa4>
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	6011      	str	r1, [r2, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	da03      	bge.n	800cc82 <_printf_i+0x5e>
 800cc7a:	222d      	movs	r2, #45	; 0x2d
 800cc7c:	425b      	negs	r3, r3
 800cc7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cc82:	486f      	ldr	r0, [pc, #444]	; (800ce40 <_printf_i+0x21c>)
 800cc84:	220a      	movs	r2, #10
 800cc86:	e039      	b.n	800ccfc <_printf_i+0xd8>
 800cc88:	2973      	cmp	r1, #115	; 0x73
 800cc8a:	f000 809d 	beq.w	800cdc8 <_printf_i+0x1a4>
 800cc8e:	d808      	bhi.n	800cca2 <_printf_i+0x7e>
 800cc90:	296f      	cmp	r1, #111	; 0x6f
 800cc92:	d020      	beq.n	800ccd6 <_printf_i+0xb2>
 800cc94:	2970      	cmp	r1, #112	; 0x70
 800cc96:	d1dd      	bne.n	800cc54 <_printf_i+0x30>
 800cc98:	6823      	ldr	r3, [r4, #0]
 800cc9a:	f043 0320 	orr.w	r3, r3, #32
 800cc9e:	6023      	str	r3, [r4, #0]
 800cca0:	e003      	b.n	800ccaa <_printf_i+0x86>
 800cca2:	2975      	cmp	r1, #117	; 0x75
 800cca4:	d017      	beq.n	800ccd6 <_printf_i+0xb2>
 800cca6:	2978      	cmp	r1, #120	; 0x78
 800cca8:	d1d4      	bne.n	800cc54 <_printf_i+0x30>
 800ccaa:	2378      	movs	r3, #120	; 0x78
 800ccac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ccb0:	4864      	ldr	r0, [pc, #400]	; (800ce44 <_printf_i+0x220>)
 800ccb2:	e055      	b.n	800cd60 <_printf_i+0x13c>
 800ccb4:	6813      	ldr	r3, [r2, #0]
 800ccb6:	1d19      	adds	r1, r3, #4
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	6011      	str	r1, [r2, #0]
 800ccbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e08c      	b.n	800cde2 <_printf_i+0x1be>
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	6011      	str	r1, [r2, #0]
 800cccc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ccd0:	bf18      	it	ne
 800ccd2:	b21b      	sxthne	r3, r3
 800ccd4:	e7cf      	b.n	800cc76 <_printf_i+0x52>
 800ccd6:	6813      	ldr	r3, [r2, #0]
 800ccd8:	6825      	ldr	r5, [r4, #0]
 800ccda:	1d18      	adds	r0, r3, #4
 800ccdc:	6010      	str	r0, [r2, #0]
 800ccde:	0628      	lsls	r0, r5, #24
 800cce0:	d501      	bpl.n	800cce6 <_printf_i+0xc2>
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	e002      	b.n	800ccec <_printf_i+0xc8>
 800cce6:	0668      	lsls	r0, r5, #25
 800cce8:	d5fb      	bpl.n	800cce2 <_printf_i+0xbe>
 800ccea:	881b      	ldrh	r3, [r3, #0]
 800ccec:	4854      	ldr	r0, [pc, #336]	; (800ce40 <_printf_i+0x21c>)
 800ccee:	296f      	cmp	r1, #111	; 0x6f
 800ccf0:	bf14      	ite	ne
 800ccf2:	220a      	movne	r2, #10
 800ccf4:	2208      	moveq	r2, #8
 800ccf6:	2100      	movs	r1, #0
 800ccf8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ccfc:	6865      	ldr	r5, [r4, #4]
 800ccfe:	60a5      	str	r5, [r4, #8]
 800cd00:	2d00      	cmp	r5, #0
 800cd02:	f2c0 8095 	blt.w	800ce30 <_printf_i+0x20c>
 800cd06:	6821      	ldr	r1, [r4, #0]
 800cd08:	f021 0104 	bic.w	r1, r1, #4
 800cd0c:	6021      	str	r1, [r4, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d13d      	bne.n	800cd8e <_printf_i+0x16a>
 800cd12:	2d00      	cmp	r5, #0
 800cd14:	f040 808e 	bne.w	800ce34 <_printf_i+0x210>
 800cd18:	4665      	mov	r5, ip
 800cd1a:	2a08      	cmp	r2, #8
 800cd1c:	d10b      	bne.n	800cd36 <_printf_i+0x112>
 800cd1e:	6823      	ldr	r3, [r4, #0]
 800cd20:	07db      	lsls	r3, r3, #31
 800cd22:	d508      	bpl.n	800cd36 <_printf_i+0x112>
 800cd24:	6923      	ldr	r3, [r4, #16]
 800cd26:	6862      	ldr	r2, [r4, #4]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	bfde      	ittt	le
 800cd2c:	2330      	movle	r3, #48	; 0x30
 800cd2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd32:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd36:	ebac 0305 	sub.w	r3, ip, r5
 800cd3a:	6123      	str	r3, [r4, #16]
 800cd3c:	f8cd 8000 	str.w	r8, [sp]
 800cd40:	463b      	mov	r3, r7
 800cd42:	aa03      	add	r2, sp, #12
 800cd44:	4621      	mov	r1, r4
 800cd46:	4630      	mov	r0, r6
 800cd48:	f7ff fef6 	bl	800cb38 <_printf_common>
 800cd4c:	3001      	adds	r0, #1
 800cd4e:	d14d      	bne.n	800cdec <_printf_i+0x1c8>
 800cd50:	f04f 30ff 	mov.w	r0, #4294967295
 800cd54:	b005      	add	sp, #20
 800cd56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd5a:	4839      	ldr	r0, [pc, #228]	; (800ce40 <_printf_i+0x21c>)
 800cd5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cd60:	6813      	ldr	r3, [r2, #0]
 800cd62:	6821      	ldr	r1, [r4, #0]
 800cd64:	1d1d      	adds	r5, r3, #4
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	6015      	str	r5, [r2, #0]
 800cd6a:	060a      	lsls	r2, r1, #24
 800cd6c:	d50b      	bpl.n	800cd86 <_printf_i+0x162>
 800cd6e:	07ca      	lsls	r2, r1, #31
 800cd70:	bf44      	itt	mi
 800cd72:	f041 0120 	orrmi.w	r1, r1, #32
 800cd76:	6021      	strmi	r1, [r4, #0]
 800cd78:	b91b      	cbnz	r3, 800cd82 <_printf_i+0x15e>
 800cd7a:	6822      	ldr	r2, [r4, #0]
 800cd7c:	f022 0220 	bic.w	r2, r2, #32
 800cd80:	6022      	str	r2, [r4, #0]
 800cd82:	2210      	movs	r2, #16
 800cd84:	e7b7      	b.n	800ccf6 <_printf_i+0xd2>
 800cd86:	064d      	lsls	r5, r1, #25
 800cd88:	bf48      	it	mi
 800cd8a:	b29b      	uxthmi	r3, r3
 800cd8c:	e7ef      	b.n	800cd6e <_printf_i+0x14a>
 800cd8e:	4665      	mov	r5, ip
 800cd90:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd94:	fb02 3311 	mls	r3, r2, r1, r3
 800cd98:	5cc3      	ldrb	r3, [r0, r3]
 800cd9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cd9e:	460b      	mov	r3, r1
 800cda0:	2900      	cmp	r1, #0
 800cda2:	d1f5      	bne.n	800cd90 <_printf_i+0x16c>
 800cda4:	e7b9      	b.n	800cd1a <_printf_i+0xf6>
 800cda6:	6813      	ldr	r3, [r2, #0]
 800cda8:	6825      	ldr	r5, [r4, #0]
 800cdaa:	6961      	ldr	r1, [r4, #20]
 800cdac:	1d18      	adds	r0, r3, #4
 800cdae:	6010      	str	r0, [r2, #0]
 800cdb0:	0628      	lsls	r0, r5, #24
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	d501      	bpl.n	800cdba <_printf_i+0x196>
 800cdb6:	6019      	str	r1, [r3, #0]
 800cdb8:	e002      	b.n	800cdc0 <_printf_i+0x19c>
 800cdba:	066a      	lsls	r2, r5, #25
 800cdbc:	d5fb      	bpl.n	800cdb6 <_printf_i+0x192>
 800cdbe:	8019      	strh	r1, [r3, #0]
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	6123      	str	r3, [r4, #16]
 800cdc4:	4665      	mov	r5, ip
 800cdc6:	e7b9      	b.n	800cd3c <_printf_i+0x118>
 800cdc8:	6813      	ldr	r3, [r2, #0]
 800cdca:	1d19      	adds	r1, r3, #4
 800cdcc:	6011      	str	r1, [r2, #0]
 800cdce:	681d      	ldr	r5, [r3, #0]
 800cdd0:	6862      	ldr	r2, [r4, #4]
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	f7f3 fa3b 	bl	8000250 <memchr>
 800cdda:	b108      	cbz	r0, 800cde0 <_printf_i+0x1bc>
 800cddc:	1b40      	subs	r0, r0, r5
 800cdde:	6060      	str	r0, [r4, #4]
 800cde0:	6863      	ldr	r3, [r4, #4]
 800cde2:	6123      	str	r3, [r4, #16]
 800cde4:	2300      	movs	r3, #0
 800cde6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdea:	e7a7      	b.n	800cd3c <_printf_i+0x118>
 800cdec:	6923      	ldr	r3, [r4, #16]
 800cdee:	462a      	mov	r2, r5
 800cdf0:	4639      	mov	r1, r7
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	47c0      	blx	r8
 800cdf6:	3001      	adds	r0, #1
 800cdf8:	d0aa      	beq.n	800cd50 <_printf_i+0x12c>
 800cdfa:	6823      	ldr	r3, [r4, #0]
 800cdfc:	079b      	lsls	r3, r3, #30
 800cdfe:	d413      	bmi.n	800ce28 <_printf_i+0x204>
 800ce00:	68e0      	ldr	r0, [r4, #12]
 800ce02:	9b03      	ldr	r3, [sp, #12]
 800ce04:	4298      	cmp	r0, r3
 800ce06:	bfb8      	it	lt
 800ce08:	4618      	movlt	r0, r3
 800ce0a:	e7a3      	b.n	800cd54 <_printf_i+0x130>
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	464a      	mov	r2, r9
 800ce10:	4639      	mov	r1, r7
 800ce12:	4630      	mov	r0, r6
 800ce14:	47c0      	blx	r8
 800ce16:	3001      	adds	r0, #1
 800ce18:	d09a      	beq.n	800cd50 <_printf_i+0x12c>
 800ce1a:	3501      	adds	r5, #1
 800ce1c:	68e3      	ldr	r3, [r4, #12]
 800ce1e:	9a03      	ldr	r2, [sp, #12]
 800ce20:	1a9b      	subs	r3, r3, r2
 800ce22:	42ab      	cmp	r3, r5
 800ce24:	dcf2      	bgt.n	800ce0c <_printf_i+0x1e8>
 800ce26:	e7eb      	b.n	800ce00 <_printf_i+0x1dc>
 800ce28:	2500      	movs	r5, #0
 800ce2a:	f104 0919 	add.w	r9, r4, #25
 800ce2e:	e7f5      	b.n	800ce1c <_printf_i+0x1f8>
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1ac      	bne.n	800cd8e <_printf_i+0x16a>
 800ce34:	7803      	ldrb	r3, [r0, #0]
 800ce36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce3e:	e76c      	b.n	800cd1a <_printf_i+0xf6>
 800ce40:	0800ffe6 	.word	0x0800ffe6
 800ce44:	0800fff7 	.word	0x0800fff7

0800ce48 <_scanf_float>:
 800ce48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce4c:	469a      	mov	sl, r3
 800ce4e:	688b      	ldr	r3, [r1, #8]
 800ce50:	4616      	mov	r6, r2
 800ce52:	1e5a      	subs	r2, r3, #1
 800ce54:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ce58:	b087      	sub	sp, #28
 800ce5a:	bf83      	ittte	hi
 800ce5c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800ce60:	189b      	addhi	r3, r3, r2
 800ce62:	9301      	strhi	r3, [sp, #4]
 800ce64:	2300      	movls	r3, #0
 800ce66:	bf86      	itte	hi
 800ce68:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ce6c:	608b      	strhi	r3, [r1, #8]
 800ce6e:	9301      	strls	r3, [sp, #4]
 800ce70:	680b      	ldr	r3, [r1, #0]
 800ce72:	4688      	mov	r8, r1
 800ce74:	f04f 0b00 	mov.w	fp, #0
 800ce78:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ce7c:	f848 3b1c 	str.w	r3, [r8], #28
 800ce80:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800ce84:	4607      	mov	r7, r0
 800ce86:	460c      	mov	r4, r1
 800ce88:	4645      	mov	r5, r8
 800ce8a:	465a      	mov	r2, fp
 800ce8c:	46d9      	mov	r9, fp
 800ce8e:	f8cd b008 	str.w	fp, [sp, #8]
 800ce92:	68a1      	ldr	r1, [r4, #8]
 800ce94:	b181      	cbz	r1, 800ceb8 <_scanf_float+0x70>
 800ce96:	6833      	ldr	r3, [r6, #0]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	2b49      	cmp	r3, #73	; 0x49
 800ce9c:	d071      	beq.n	800cf82 <_scanf_float+0x13a>
 800ce9e:	d84d      	bhi.n	800cf3c <_scanf_float+0xf4>
 800cea0:	2b39      	cmp	r3, #57	; 0x39
 800cea2:	d840      	bhi.n	800cf26 <_scanf_float+0xde>
 800cea4:	2b31      	cmp	r3, #49	; 0x31
 800cea6:	f080 8088 	bcs.w	800cfba <_scanf_float+0x172>
 800ceaa:	2b2d      	cmp	r3, #45	; 0x2d
 800ceac:	f000 8090 	beq.w	800cfd0 <_scanf_float+0x188>
 800ceb0:	d815      	bhi.n	800cede <_scanf_float+0x96>
 800ceb2:	2b2b      	cmp	r3, #43	; 0x2b
 800ceb4:	f000 808c 	beq.w	800cfd0 <_scanf_float+0x188>
 800ceb8:	f1b9 0f00 	cmp.w	r9, #0
 800cebc:	d003      	beq.n	800cec6 <_scanf_float+0x7e>
 800cebe:	6823      	ldr	r3, [r4, #0]
 800cec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cec4:	6023      	str	r3, [r4, #0]
 800cec6:	3a01      	subs	r2, #1
 800cec8:	2a01      	cmp	r2, #1
 800ceca:	f200 80ea 	bhi.w	800d0a2 <_scanf_float+0x25a>
 800cece:	4545      	cmp	r5, r8
 800ced0:	f200 80dc 	bhi.w	800d08c <_scanf_float+0x244>
 800ced4:	2601      	movs	r6, #1
 800ced6:	4630      	mov	r0, r6
 800ced8:	b007      	add	sp, #28
 800ceda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cede:	2b2e      	cmp	r3, #46	; 0x2e
 800cee0:	f000 809f 	beq.w	800d022 <_scanf_float+0x1da>
 800cee4:	2b30      	cmp	r3, #48	; 0x30
 800cee6:	d1e7      	bne.n	800ceb8 <_scanf_float+0x70>
 800cee8:	6820      	ldr	r0, [r4, #0]
 800ceea:	f410 7f80 	tst.w	r0, #256	; 0x100
 800ceee:	d064      	beq.n	800cfba <_scanf_float+0x172>
 800cef0:	9b01      	ldr	r3, [sp, #4]
 800cef2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800cef6:	6020      	str	r0, [r4, #0]
 800cef8:	f109 0901 	add.w	r9, r9, #1
 800cefc:	b11b      	cbz	r3, 800cf06 <_scanf_float+0xbe>
 800cefe:	3b01      	subs	r3, #1
 800cf00:	3101      	adds	r1, #1
 800cf02:	9301      	str	r3, [sp, #4]
 800cf04:	60a1      	str	r1, [r4, #8]
 800cf06:	68a3      	ldr	r3, [r4, #8]
 800cf08:	3b01      	subs	r3, #1
 800cf0a:	60a3      	str	r3, [r4, #8]
 800cf0c:	6923      	ldr	r3, [r4, #16]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	6123      	str	r3, [r4, #16]
 800cf12:	6873      	ldr	r3, [r6, #4]
 800cf14:	3b01      	subs	r3, #1
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	6073      	str	r3, [r6, #4]
 800cf1a:	f340 80ac 	ble.w	800d076 <_scanf_float+0x22e>
 800cf1e:	6833      	ldr	r3, [r6, #0]
 800cf20:	3301      	adds	r3, #1
 800cf22:	6033      	str	r3, [r6, #0]
 800cf24:	e7b5      	b.n	800ce92 <_scanf_float+0x4a>
 800cf26:	2b45      	cmp	r3, #69	; 0x45
 800cf28:	f000 8085 	beq.w	800d036 <_scanf_float+0x1ee>
 800cf2c:	2b46      	cmp	r3, #70	; 0x46
 800cf2e:	d06a      	beq.n	800d006 <_scanf_float+0x1be>
 800cf30:	2b41      	cmp	r3, #65	; 0x41
 800cf32:	d1c1      	bne.n	800ceb8 <_scanf_float+0x70>
 800cf34:	2a01      	cmp	r2, #1
 800cf36:	d1bf      	bne.n	800ceb8 <_scanf_float+0x70>
 800cf38:	2202      	movs	r2, #2
 800cf3a:	e046      	b.n	800cfca <_scanf_float+0x182>
 800cf3c:	2b65      	cmp	r3, #101	; 0x65
 800cf3e:	d07a      	beq.n	800d036 <_scanf_float+0x1ee>
 800cf40:	d818      	bhi.n	800cf74 <_scanf_float+0x12c>
 800cf42:	2b54      	cmp	r3, #84	; 0x54
 800cf44:	d066      	beq.n	800d014 <_scanf_float+0x1cc>
 800cf46:	d811      	bhi.n	800cf6c <_scanf_float+0x124>
 800cf48:	2b4e      	cmp	r3, #78	; 0x4e
 800cf4a:	d1b5      	bne.n	800ceb8 <_scanf_float+0x70>
 800cf4c:	2a00      	cmp	r2, #0
 800cf4e:	d146      	bne.n	800cfde <_scanf_float+0x196>
 800cf50:	f1b9 0f00 	cmp.w	r9, #0
 800cf54:	d145      	bne.n	800cfe2 <_scanf_float+0x19a>
 800cf56:	6821      	ldr	r1, [r4, #0]
 800cf58:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800cf5c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800cf60:	d13f      	bne.n	800cfe2 <_scanf_float+0x19a>
 800cf62:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800cf66:	6021      	str	r1, [r4, #0]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	e02e      	b.n	800cfca <_scanf_float+0x182>
 800cf6c:	2b59      	cmp	r3, #89	; 0x59
 800cf6e:	d01e      	beq.n	800cfae <_scanf_float+0x166>
 800cf70:	2b61      	cmp	r3, #97	; 0x61
 800cf72:	e7de      	b.n	800cf32 <_scanf_float+0xea>
 800cf74:	2b6e      	cmp	r3, #110	; 0x6e
 800cf76:	d0e9      	beq.n	800cf4c <_scanf_float+0x104>
 800cf78:	d815      	bhi.n	800cfa6 <_scanf_float+0x15e>
 800cf7a:	2b66      	cmp	r3, #102	; 0x66
 800cf7c:	d043      	beq.n	800d006 <_scanf_float+0x1be>
 800cf7e:	2b69      	cmp	r3, #105	; 0x69
 800cf80:	d19a      	bne.n	800ceb8 <_scanf_float+0x70>
 800cf82:	f1bb 0f00 	cmp.w	fp, #0
 800cf86:	d138      	bne.n	800cffa <_scanf_float+0x1b2>
 800cf88:	f1b9 0f00 	cmp.w	r9, #0
 800cf8c:	d197      	bne.n	800cebe <_scanf_float+0x76>
 800cf8e:	6821      	ldr	r1, [r4, #0]
 800cf90:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800cf94:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800cf98:	d195      	bne.n	800cec6 <_scanf_float+0x7e>
 800cf9a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800cf9e:	6021      	str	r1, [r4, #0]
 800cfa0:	f04f 0b01 	mov.w	fp, #1
 800cfa4:	e011      	b.n	800cfca <_scanf_float+0x182>
 800cfa6:	2b74      	cmp	r3, #116	; 0x74
 800cfa8:	d034      	beq.n	800d014 <_scanf_float+0x1cc>
 800cfaa:	2b79      	cmp	r3, #121	; 0x79
 800cfac:	d184      	bne.n	800ceb8 <_scanf_float+0x70>
 800cfae:	f1bb 0f07 	cmp.w	fp, #7
 800cfb2:	d181      	bne.n	800ceb8 <_scanf_float+0x70>
 800cfb4:	f04f 0b08 	mov.w	fp, #8
 800cfb8:	e007      	b.n	800cfca <_scanf_float+0x182>
 800cfba:	eb12 0f0b 	cmn.w	r2, fp
 800cfbe:	f47f af7b 	bne.w	800ceb8 <_scanf_float+0x70>
 800cfc2:	6821      	ldr	r1, [r4, #0]
 800cfc4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800cfc8:	6021      	str	r1, [r4, #0]
 800cfca:	702b      	strb	r3, [r5, #0]
 800cfcc:	3501      	adds	r5, #1
 800cfce:	e79a      	b.n	800cf06 <_scanf_float+0xbe>
 800cfd0:	6821      	ldr	r1, [r4, #0]
 800cfd2:	0608      	lsls	r0, r1, #24
 800cfd4:	f57f af70 	bpl.w	800ceb8 <_scanf_float+0x70>
 800cfd8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cfdc:	e7f4      	b.n	800cfc8 <_scanf_float+0x180>
 800cfde:	2a02      	cmp	r2, #2
 800cfe0:	d047      	beq.n	800d072 <_scanf_float+0x22a>
 800cfe2:	f1bb 0f01 	cmp.w	fp, #1
 800cfe6:	d003      	beq.n	800cff0 <_scanf_float+0x1a8>
 800cfe8:	f1bb 0f04 	cmp.w	fp, #4
 800cfec:	f47f af64 	bne.w	800ceb8 <_scanf_float+0x70>
 800cff0:	f10b 0b01 	add.w	fp, fp, #1
 800cff4:	fa5f fb8b 	uxtb.w	fp, fp
 800cff8:	e7e7      	b.n	800cfca <_scanf_float+0x182>
 800cffa:	f1bb 0f03 	cmp.w	fp, #3
 800cffe:	d0f7      	beq.n	800cff0 <_scanf_float+0x1a8>
 800d000:	f1bb 0f05 	cmp.w	fp, #5
 800d004:	e7f2      	b.n	800cfec <_scanf_float+0x1a4>
 800d006:	f1bb 0f02 	cmp.w	fp, #2
 800d00a:	f47f af55 	bne.w	800ceb8 <_scanf_float+0x70>
 800d00e:	f04f 0b03 	mov.w	fp, #3
 800d012:	e7da      	b.n	800cfca <_scanf_float+0x182>
 800d014:	f1bb 0f06 	cmp.w	fp, #6
 800d018:	f47f af4e 	bne.w	800ceb8 <_scanf_float+0x70>
 800d01c:	f04f 0b07 	mov.w	fp, #7
 800d020:	e7d3      	b.n	800cfca <_scanf_float+0x182>
 800d022:	6821      	ldr	r1, [r4, #0]
 800d024:	0588      	lsls	r0, r1, #22
 800d026:	f57f af47 	bpl.w	800ceb8 <_scanf_float+0x70>
 800d02a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800d02e:	6021      	str	r1, [r4, #0]
 800d030:	f8cd 9008 	str.w	r9, [sp, #8]
 800d034:	e7c9      	b.n	800cfca <_scanf_float+0x182>
 800d036:	6821      	ldr	r1, [r4, #0]
 800d038:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800d03c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800d040:	d006      	beq.n	800d050 <_scanf_float+0x208>
 800d042:	0548      	lsls	r0, r1, #21
 800d044:	f57f af38 	bpl.w	800ceb8 <_scanf_float+0x70>
 800d048:	f1b9 0f00 	cmp.w	r9, #0
 800d04c:	f43f af3b 	beq.w	800cec6 <_scanf_float+0x7e>
 800d050:	0588      	lsls	r0, r1, #22
 800d052:	bf58      	it	pl
 800d054:	9802      	ldrpl	r0, [sp, #8]
 800d056:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d05a:	bf58      	it	pl
 800d05c:	eba9 0000 	subpl.w	r0, r9, r0
 800d060:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800d064:	bf58      	it	pl
 800d066:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800d06a:	6021      	str	r1, [r4, #0]
 800d06c:	f04f 0900 	mov.w	r9, #0
 800d070:	e7ab      	b.n	800cfca <_scanf_float+0x182>
 800d072:	2203      	movs	r2, #3
 800d074:	e7a9      	b.n	800cfca <_scanf_float+0x182>
 800d076:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d07a:	9205      	str	r2, [sp, #20]
 800d07c:	4631      	mov	r1, r6
 800d07e:	4638      	mov	r0, r7
 800d080:	4798      	blx	r3
 800d082:	9a05      	ldr	r2, [sp, #20]
 800d084:	2800      	cmp	r0, #0
 800d086:	f43f af04 	beq.w	800ce92 <_scanf_float+0x4a>
 800d08a:	e715      	b.n	800ceb8 <_scanf_float+0x70>
 800d08c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d090:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d094:	4632      	mov	r2, r6
 800d096:	4638      	mov	r0, r7
 800d098:	4798      	blx	r3
 800d09a:	6923      	ldr	r3, [r4, #16]
 800d09c:	3b01      	subs	r3, #1
 800d09e:	6123      	str	r3, [r4, #16]
 800d0a0:	e715      	b.n	800cece <_scanf_float+0x86>
 800d0a2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d0a6:	2b06      	cmp	r3, #6
 800d0a8:	d80a      	bhi.n	800d0c0 <_scanf_float+0x278>
 800d0aa:	f1bb 0f02 	cmp.w	fp, #2
 800d0ae:	d966      	bls.n	800d17e <_scanf_float+0x336>
 800d0b0:	f1ab 0b03 	sub.w	fp, fp, #3
 800d0b4:	fa5f fb8b 	uxtb.w	fp, fp
 800d0b8:	eba5 0b0b 	sub.w	fp, r5, fp
 800d0bc:	455d      	cmp	r5, fp
 800d0be:	d149      	bne.n	800d154 <_scanf_float+0x30c>
 800d0c0:	6823      	ldr	r3, [r4, #0]
 800d0c2:	05da      	lsls	r2, r3, #23
 800d0c4:	d51f      	bpl.n	800d106 <_scanf_float+0x2be>
 800d0c6:	055b      	lsls	r3, r3, #21
 800d0c8:	d466      	bmi.n	800d198 <_scanf_float+0x350>
 800d0ca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d0ce:	6923      	ldr	r3, [r4, #16]
 800d0d0:	2965      	cmp	r1, #101	; 0x65
 800d0d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d0d6:	f105 3bff 	add.w	fp, r5, #4294967295
 800d0da:	6123      	str	r3, [r4, #16]
 800d0dc:	d00d      	beq.n	800d0fa <_scanf_float+0x2b2>
 800d0de:	2945      	cmp	r1, #69	; 0x45
 800d0e0:	d00b      	beq.n	800d0fa <_scanf_float+0x2b2>
 800d0e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d0e6:	4632      	mov	r2, r6
 800d0e8:	4638      	mov	r0, r7
 800d0ea:	4798      	blx	r3
 800d0ec:	6923      	ldr	r3, [r4, #16]
 800d0ee:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800d0f2:	3b01      	subs	r3, #1
 800d0f4:	f1a5 0b02 	sub.w	fp, r5, #2
 800d0f8:	6123      	str	r3, [r4, #16]
 800d0fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d0fe:	4632      	mov	r2, r6
 800d100:	4638      	mov	r0, r7
 800d102:	4798      	blx	r3
 800d104:	465d      	mov	r5, fp
 800d106:	6826      	ldr	r6, [r4, #0]
 800d108:	f016 0610 	ands.w	r6, r6, #16
 800d10c:	d170      	bne.n	800d1f0 <_scanf_float+0x3a8>
 800d10e:	702e      	strb	r6, [r5, #0]
 800d110:	6823      	ldr	r3, [r4, #0]
 800d112:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d11a:	d140      	bne.n	800d19e <_scanf_float+0x356>
 800d11c:	9b02      	ldr	r3, [sp, #8]
 800d11e:	eba9 0303 	sub.w	r3, r9, r3
 800d122:	425a      	negs	r2, r3
 800d124:	2b00      	cmp	r3, #0
 800d126:	d147      	bne.n	800d1b8 <_scanf_float+0x370>
 800d128:	2200      	movs	r2, #0
 800d12a:	4638      	mov	r0, r7
 800d12c:	4641      	mov	r1, r8
 800d12e:	f000 fe6b 	bl	800de08 <_strtod_r>
 800d132:	6820      	ldr	r0, [r4, #0]
 800d134:	f8da 3000 	ldr.w	r3, [sl]
 800d138:	f010 0f02 	tst.w	r0, #2
 800d13c:	f103 0204 	add.w	r2, r3, #4
 800d140:	f8ca 2000 	str.w	r2, [sl]
 800d144:	d043      	beq.n	800d1ce <_scanf_float+0x386>
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	ed83 0b00 	vstr	d0, [r3]
 800d14c:	68e3      	ldr	r3, [r4, #12]
 800d14e:	3301      	adds	r3, #1
 800d150:	60e3      	str	r3, [r4, #12]
 800d152:	e6c0      	b.n	800ced6 <_scanf_float+0x8e>
 800d154:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d158:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d15c:	4632      	mov	r2, r6
 800d15e:	4638      	mov	r0, r7
 800d160:	4798      	blx	r3
 800d162:	6923      	ldr	r3, [r4, #16]
 800d164:	3b01      	subs	r3, #1
 800d166:	6123      	str	r3, [r4, #16]
 800d168:	e7a8      	b.n	800d0bc <_scanf_float+0x274>
 800d16a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d16e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d172:	4632      	mov	r2, r6
 800d174:	4638      	mov	r0, r7
 800d176:	4798      	blx	r3
 800d178:	6923      	ldr	r3, [r4, #16]
 800d17a:	3b01      	subs	r3, #1
 800d17c:	6123      	str	r3, [r4, #16]
 800d17e:	4545      	cmp	r5, r8
 800d180:	d8f3      	bhi.n	800d16a <_scanf_float+0x322>
 800d182:	e6a7      	b.n	800ced4 <_scanf_float+0x8c>
 800d184:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d188:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d18c:	4632      	mov	r2, r6
 800d18e:	4638      	mov	r0, r7
 800d190:	4798      	blx	r3
 800d192:	6923      	ldr	r3, [r4, #16]
 800d194:	3b01      	subs	r3, #1
 800d196:	6123      	str	r3, [r4, #16]
 800d198:	4545      	cmp	r5, r8
 800d19a:	d8f3      	bhi.n	800d184 <_scanf_float+0x33c>
 800d19c:	e69a      	b.n	800ced4 <_scanf_float+0x8c>
 800d19e:	9b03      	ldr	r3, [sp, #12]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d0c1      	beq.n	800d128 <_scanf_float+0x2e0>
 800d1a4:	9904      	ldr	r1, [sp, #16]
 800d1a6:	230a      	movs	r3, #10
 800d1a8:	4632      	mov	r2, r6
 800d1aa:	3101      	adds	r1, #1
 800d1ac:	4638      	mov	r0, r7
 800d1ae:	f000 feb7 	bl	800df20 <_strtol_r>
 800d1b2:	9b03      	ldr	r3, [sp, #12]
 800d1b4:	9d04      	ldr	r5, [sp, #16]
 800d1b6:	1ac2      	subs	r2, r0, r3
 800d1b8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d1bc:	429d      	cmp	r5, r3
 800d1be:	bf28      	it	cs
 800d1c0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800d1c4:	490b      	ldr	r1, [pc, #44]	; (800d1f4 <_scanf_float+0x3ac>)
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	f000 f81c 	bl	800d204 <siprintf>
 800d1cc:	e7ac      	b.n	800d128 <_scanf_float+0x2e0>
 800d1ce:	f010 0004 	ands.w	r0, r0, #4
 800d1d2:	d1b8      	bne.n	800d146 <_scanf_float+0x2fe>
 800d1d4:	eeb4 0b40 	vcmp.f64	d0, d0
 800d1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1dc:	681d      	ldr	r5, [r3, #0]
 800d1de:	d704      	bvc.n	800d1ea <_scanf_float+0x3a2>
 800d1e0:	f000 f80a 	bl	800d1f8 <nanf>
 800d1e4:	ed85 0a00 	vstr	s0, [r5]
 800d1e8:	e7b0      	b.n	800d14c <_scanf_float+0x304>
 800d1ea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d1ee:	e7f9      	b.n	800d1e4 <_scanf_float+0x39c>
 800d1f0:	2600      	movs	r6, #0
 800d1f2:	e670      	b.n	800ced6 <_scanf_float+0x8e>
 800d1f4:	08010008 	.word	0x08010008

0800d1f8 <nanf>:
 800d1f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d200 <nanf+0x8>
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	7fc00000 	.word	0x7fc00000

0800d204 <siprintf>:
 800d204:	b40e      	push	{r1, r2, r3}
 800d206:	b500      	push	{lr}
 800d208:	b09c      	sub	sp, #112	; 0x70
 800d20a:	ab1d      	add	r3, sp, #116	; 0x74
 800d20c:	9002      	str	r0, [sp, #8]
 800d20e:	9006      	str	r0, [sp, #24]
 800d210:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d214:	4809      	ldr	r0, [pc, #36]	; (800d23c <siprintf+0x38>)
 800d216:	9107      	str	r1, [sp, #28]
 800d218:	9104      	str	r1, [sp, #16]
 800d21a:	4909      	ldr	r1, [pc, #36]	; (800d240 <siprintf+0x3c>)
 800d21c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d220:	9105      	str	r1, [sp, #20]
 800d222:	6800      	ldr	r0, [r0, #0]
 800d224:	9301      	str	r3, [sp, #4]
 800d226:	a902      	add	r1, sp, #8
 800d228:	f002 fcca 	bl	800fbc0 <_svfiprintf_r>
 800d22c:	9b02      	ldr	r3, [sp, #8]
 800d22e:	2200      	movs	r2, #0
 800d230:	701a      	strb	r2, [r3, #0]
 800d232:	b01c      	add	sp, #112	; 0x70
 800d234:	f85d eb04 	ldr.w	lr, [sp], #4
 800d238:	b003      	add	sp, #12
 800d23a:	4770      	bx	lr
 800d23c:	200000c8 	.word	0x200000c8
 800d240:	ffff0208 	.word	0xffff0208

0800d244 <sulp>:
 800d244:	b570      	push	{r4, r5, r6, lr}
 800d246:	4604      	mov	r4, r0
 800d248:	460d      	mov	r5, r1
 800d24a:	4616      	mov	r6, r2
 800d24c:	ec45 4b10 	vmov	d0, r4, r5
 800d250:	f002 fa72 	bl	800f738 <__ulp>
 800d254:	b17e      	cbz	r6, 800d276 <sulp+0x32>
 800d256:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d25a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d25e:	2b00      	cmp	r3, #0
 800d260:	dd09      	ble.n	800d276 <sulp+0x32>
 800d262:	051b      	lsls	r3, r3, #20
 800d264:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800d268:	2000      	movs	r0, #0
 800d26a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800d26e:	ec41 0b17 	vmov	d7, r0, r1
 800d272:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d276:	bd70      	pop	{r4, r5, r6, pc}

0800d278 <_strtod_l>:
 800d278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d27c:	ed2d 8b0c 	vpush	{d8-d13}
 800d280:	4698      	mov	r8, r3
 800d282:	b09d      	sub	sp, #116	; 0x74
 800d284:	2300      	movs	r3, #0
 800d286:	4604      	mov	r4, r0
 800d288:	4640      	mov	r0, r8
 800d28a:	460e      	mov	r6, r1
 800d28c:	9214      	str	r2, [sp, #80]	; 0x50
 800d28e:	9318      	str	r3, [sp, #96]	; 0x60
 800d290:	f001 ff5b 	bl	800f14a <__localeconv_l>
 800d294:	4681      	mov	r9, r0
 800d296:	6800      	ldr	r0, [r0, #0]
 800d298:	f7f2 ffd2 	bl	8000240 <strlen>
 800d29c:	f04f 0a00 	mov.w	sl, #0
 800d2a0:	4607      	mov	r7, r0
 800d2a2:	f04f 0b00 	mov.w	fp, #0
 800d2a6:	9617      	str	r6, [sp, #92]	; 0x5c
 800d2a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2aa:	781a      	ldrb	r2, [r3, #0]
 800d2ac:	2a0d      	cmp	r2, #13
 800d2ae:	d834      	bhi.n	800d31a <_strtod_l+0xa2>
 800d2b0:	2a09      	cmp	r2, #9
 800d2b2:	d238      	bcs.n	800d326 <_strtod_l+0xae>
 800d2b4:	2a00      	cmp	r2, #0
 800d2b6:	d040      	beq.n	800d33a <_strtod_l+0xc2>
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	930d      	str	r3, [sp, #52]	; 0x34
 800d2bc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800d2be:	782b      	ldrb	r3, [r5, #0]
 800d2c0:	2b30      	cmp	r3, #48	; 0x30
 800d2c2:	f040 80b3 	bne.w	800d42c <_strtod_l+0x1b4>
 800d2c6:	786b      	ldrb	r3, [r5, #1]
 800d2c8:	2b58      	cmp	r3, #88	; 0x58
 800d2ca:	d001      	beq.n	800d2d0 <_strtod_l+0x58>
 800d2cc:	2b78      	cmp	r3, #120	; 0x78
 800d2ce:	d169      	bne.n	800d3a4 <_strtod_l+0x12c>
 800d2d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2d2:	9301      	str	r3, [sp, #4]
 800d2d4:	ab18      	add	r3, sp, #96	; 0x60
 800d2d6:	9300      	str	r3, [sp, #0]
 800d2d8:	f8cd 8008 	str.w	r8, [sp, #8]
 800d2dc:	ab19      	add	r3, sp, #100	; 0x64
 800d2de:	4a8f      	ldr	r2, [pc, #572]	; (800d51c <_strtod_l+0x2a4>)
 800d2e0:	a917      	add	r1, sp, #92	; 0x5c
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f001 fc57 	bl	800eb96 <__gethex>
 800d2e8:	f010 0607 	ands.w	r6, r0, #7
 800d2ec:	4607      	mov	r7, r0
 800d2ee:	d005      	beq.n	800d2fc <_strtod_l+0x84>
 800d2f0:	2e06      	cmp	r6, #6
 800d2f2:	d12c      	bne.n	800d34e <_strtod_l+0xd6>
 800d2f4:	3501      	adds	r5, #1
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	9517      	str	r5, [sp, #92]	; 0x5c
 800d2fa:	930d      	str	r3, [sp, #52]	; 0x34
 800d2fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	f040 855e 	bne.w	800ddc0 <_strtod_l+0xb48>
 800d304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d306:	b1eb      	cbz	r3, 800d344 <_strtod_l+0xcc>
 800d308:	ec4b ab17 	vmov	d7, sl, fp
 800d30c:	eeb1 0b47 	vneg.f64	d0, d7
 800d310:	b01d      	add	sp, #116	; 0x74
 800d312:	ecbd 8b0c 	vpop	{d8-d13}
 800d316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d31a:	2a2b      	cmp	r2, #43	; 0x2b
 800d31c:	d015      	beq.n	800d34a <_strtod_l+0xd2>
 800d31e:	2a2d      	cmp	r2, #45	; 0x2d
 800d320:	d004      	beq.n	800d32c <_strtod_l+0xb4>
 800d322:	2a20      	cmp	r2, #32
 800d324:	d1c8      	bne.n	800d2b8 <_strtod_l+0x40>
 800d326:	3301      	adds	r3, #1
 800d328:	9317      	str	r3, [sp, #92]	; 0x5c
 800d32a:	e7bd      	b.n	800d2a8 <_strtod_l+0x30>
 800d32c:	2201      	movs	r2, #1
 800d32e:	920d      	str	r2, [sp, #52]	; 0x34
 800d330:	1c5a      	adds	r2, r3, #1
 800d332:	9217      	str	r2, [sp, #92]	; 0x5c
 800d334:	785b      	ldrb	r3, [r3, #1]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1c0      	bne.n	800d2bc <_strtod_l+0x44>
 800d33a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d33c:	9617      	str	r6, [sp, #92]	; 0x5c
 800d33e:	2b00      	cmp	r3, #0
 800d340:	f040 853c 	bne.w	800ddbc <_strtod_l+0xb44>
 800d344:	ec4b ab10 	vmov	d0, sl, fp
 800d348:	e7e2      	b.n	800d310 <_strtod_l+0x98>
 800d34a:	2200      	movs	r2, #0
 800d34c:	e7ef      	b.n	800d32e <_strtod_l+0xb6>
 800d34e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d350:	b13a      	cbz	r2, 800d362 <_strtod_l+0xea>
 800d352:	2135      	movs	r1, #53	; 0x35
 800d354:	a81a      	add	r0, sp, #104	; 0x68
 800d356:	f002 fae8 	bl	800f92a <__copybits>
 800d35a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d35c:	4620      	mov	r0, r4
 800d35e:	f001 ff53 	bl	800f208 <_Bfree>
 800d362:	3e01      	subs	r6, #1
 800d364:	2e04      	cmp	r6, #4
 800d366:	d806      	bhi.n	800d376 <_strtod_l+0xfe>
 800d368:	e8df f006 	tbb	[pc, r6]
 800d36c:	1714030a 	.word	0x1714030a
 800d370:	0a          	.byte	0x0a
 800d371:	00          	.byte	0x00
 800d372:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d376:	073b      	lsls	r3, r7, #28
 800d378:	d5c0      	bpl.n	800d2fc <_strtod_l+0x84>
 800d37a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d37e:	e7bd      	b.n	800d2fc <_strtod_l+0x84>
 800d380:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d384:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d386:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d38a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d38e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d392:	e7f0      	b.n	800d376 <_strtod_l+0xfe>
 800d394:	f8df b188 	ldr.w	fp, [pc, #392]	; 800d520 <_strtod_l+0x2a8>
 800d398:	e7ed      	b.n	800d376 <_strtod_l+0xfe>
 800d39a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d39e:	f04f 3aff 	mov.w	sl, #4294967295
 800d3a2:	e7e8      	b.n	800d376 <_strtod_l+0xfe>
 800d3a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3a6:	1c5a      	adds	r2, r3, #1
 800d3a8:	9217      	str	r2, [sp, #92]	; 0x5c
 800d3aa:	785b      	ldrb	r3, [r3, #1]
 800d3ac:	2b30      	cmp	r3, #48	; 0x30
 800d3ae:	d0f9      	beq.n	800d3a4 <_strtod_l+0x12c>
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d0a3      	beq.n	800d2fc <_strtod_l+0x84>
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	930a      	str	r3, [sp, #40]	; 0x28
 800d3b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3ba:	930c      	str	r3, [sp, #48]	; 0x30
 800d3bc:	2300      	movs	r3, #0
 800d3be:	9306      	str	r3, [sp, #24]
 800d3c0:	9308      	str	r3, [sp, #32]
 800d3c2:	461d      	mov	r5, r3
 800d3c4:	220a      	movs	r2, #10
 800d3c6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d3c8:	f890 8000 	ldrb.w	r8, [r0]
 800d3cc:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800d3d0:	b2d9      	uxtb	r1, r3
 800d3d2:	2909      	cmp	r1, #9
 800d3d4:	d92c      	bls.n	800d430 <_strtod_l+0x1b8>
 800d3d6:	463a      	mov	r2, r7
 800d3d8:	f8d9 1000 	ldr.w	r1, [r9]
 800d3dc:	f002 fcf8 	bl	800fdd0 <strncmp>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	d035      	beq.n	800d450 <_strtod_l+0x1d8>
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	4642      	mov	r2, r8
 800d3e8:	462b      	mov	r3, r5
 800d3ea:	4601      	mov	r1, r0
 800d3ec:	9004      	str	r0, [sp, #16]
 800d3ee:	2a65      	cmp	r2, #101	; 0x65
 800d3f0:	d001      	beq.n	800d3f6 <_strtod_l+0x17e>
 800d3f2:	2a45      	cmp	r2, #69	; 0x45
 800d3f4:	d117      	bne.n	800d426 <_strtod_l+0x1ae>
 800d3f6:	b923      	cbnz	r3, 800d402 <_strtod_l+0x18a>
 800d3f8:	b910      	cbnz	r0, 800d400 <_strtod_l+0x188>
 800d3fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d09c      	beq.n	800d33a <_strtod_l+0xc2>
 800d400:	2300      	movs	r3, #0
 800d402:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d404:	1c72      	adds	r2, r6, #1
 800d406:	9217      	str	r2, [sp, #92]	; 0x5c
 800d408:	7872      	ldrb	r2, [r6, #1]
 800d40a:	2a2b      	cmp	r2, #43	; 0x2b
 800d40c:	f000 8082 	beq.w	800d514 <_strtod_l+0x29c>
 800d410:	2a2d      	cmp	r2, #45	; 0x2d
 800d412:	d079      	beq.n	800d508 <_strtod_l+0x290>
 800d414:	f04f 0e00 	mov.w	lr, #0
 800d418:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800d41c:	f1bc 0f09 	cmp.w	ip, #9
 800d420:	f240 8086 	bls.w	800d530 <_strtod_l+0x2b8>
 800d424:	9617      	str	r6, [sp, #92]	; 0x5c
 800d426:	f04f 0800 	mov.w	r8, #0
 800d42a:	e0a8      	b.n	800d57e <_strtod_l+0x306>
 800d42c:	2300      	movs	r3, #0
 800d42e:	e7c2      	b.n	800d3b6 <_strtod_l+0x13e>
 800d430:	2d08      	cmp	r5, #8
 800d432:	bfd5      	itete	le
 800d434:	9908      	ldrle	r1, [sp, #32]
 800d436:	9906      	ldrgt	r1, [sp, #24]
 800d438:	fb02 3301 	mlale	r3, r2, r1, r3
 800d43c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d440:	f100 0001 	add.w	r0, r0, #1
 800d444:	bfd4      	ite	le
 800d446:	9308      	strle	r3, [sp, #32]
 800d448:	9306      	strgt	r3, [sp, #24]
 800d44a:	3501      	adds	r5, #1
 800d44c:	9017      	str	r0, [sp, #92]	; 0x5c
 800d44e:	e7ba      	b.n	800d3c6 <_strtod_l+0x14e>
 800d450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d452:	19da      	adds	r2, r3, r7
 800d454:	9217      	str	r2, [sp, #92]	; 0x5c
 800d456:	5dda      	ldrb	r2, [r3, r7]
 800d458:	2d00      	cmp	r5, #0
 800d45a:	d038      	beq.n	800d4ce <_strtod_l+0x256>
 800d45c:	4601      	mov	r1, r0
 800d45e:	462b      	mov	r3, r5
 800d460:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800d464:	2f09      	cmp	r7, #9
 800d466:	d913      	bls.n	800d490 <_strtod_l+0x218>
 800d468:	2701      	movs	r7, #1
 800d46a:	9704      	str	r7, [sp, #16]
 800d46c:	e7bf      	b.n	800d3ee <_strtod_l+0x176>
 800d46e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d470:	1c5a      	adds	r2, r3, #1
 800d472:	9217      	str	r2, [sp, #92]	; 0x5c
 800d474:	785a      	ldrb	r2, [r3, #1]
 800d476:	3001      	adds	r0, #1
 800d478:	2a30      	cmp	r2, #48	; 0x30
 800d47a:	d0f8      	beq.n	800d46e <_strtod_l+0x1f6>
 800d47c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d480:	2b08      	cmp	r3, #8
 800d482:	f200 84a2 	bhi.w	800ddca <_strtod_l+0xb52>
 800d486:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d488:	930c      	str	r3, [sp, #48]	; 0x30
 800d48a:	4601      	mov	r1, r0
 800d48c:	2000      	movs	r0, #0
 800d48e:	4603      	mov	r3, r0
 800d490:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 800d494:	f100 0701 	add.w	r7, r0, #1
 800d498:	d013      	beq.n	800d4c2 <_strtod_l+0x24a>
 800d49a:	4439      	add	r1, r7
 800d49c:	eb00 0e03 	add.w	lr, r0, r3
 800d4a0:	461f      	mov	r7, r3
 800d4a2:	f04f 0c0a 	mov.w	ip, #10
 800d4a6:	45be      	cmp	lr, r7
 800d4a8:	d113      	bne.n	800d4d2 <_strtod_l+0x25a>
 800d4aa:	181f      	adds	r7, r3, r0
 800d4ac:	2f08      	cmp	r7, #8
 800d4ae:	f103 0301 	add.w	r3, r3, #1
 800d4b2:	4403      	add	r3, r0
 800d4b4:	dc1d      	bgt.n	800d4f2 <_strtod_l+0x27a>
 800d4b6:	9a08      	ldr	r2, [sp, #32]
 800d4b8:	200a      	movs	r0, #10
 800d4ba:	fb00 8202 	mla	r2, r0, r2, r8
 800d4be:	9208      	str	r2, [sp, #32]
 800d4c0:	2700      	movs	r7, #0
 800d4c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d4c4:	1c50      	adds	r0, r2, #1
 800d4c6:	9017      	str	r0, [sp, #92]	; 0x5c
 800d4c8:	7852      	ldrb	r2, [r2, #1]
 800d4ca:	4638      	mov	r0, r7
 800d4cc:	e7c8      	b.n	800d460 <_strtod_l+0x1e8>
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	e7d2      	b.n	800d478 <_strtod_l+0x200>
 800d4d2:	2f08      	cmp	r7, #8
 800d4d4:	f107 0701 	add.w	r7, r7, #1
 800d4d8:	dc04      	bgt.n	800d4e4 <_strtod_l+0x26c>
 800d4da:	9a08      	ldr	r2, [sp, #32]
 800d4dc:	fb0c f202 	mul.w	r2, ip, r2
 800d4e0:	9208      	str	r2, [sp, #32]
 800d4e2:	e7e0      	b.n	800d4a6 <_strtod_l+0x22e>
 800d4e4:	2f10      	cmp	r7, #16
 800d4e6:	bfde      	ittt	le
 800d4e8:	9a06      	ldrle	r2, [sp, #24]
 800d4ea:	fb0c f202 	mulle.w	r2, ip, r2
 800d4ee:	9206      	strle	r2, [sp, #24]
 800d4f0:	e7d9      	b.n	800d4a6 <_strtod_l+0x22e>
 800d4f2:	2b10      	cmp	r3, #16
 800d4f4:	bfdf      	itttt	le
 800d4f6:	9a06      	ldrle	r2, [sp, #24]
 800d4f8:	200a      	movle	r0, #10
 800d4fa:	fb00 8202 	mlale	r2, r0, r2, r8
 800d4fe:	9206      	strle	r2, [sp, #24]
 800d500:	e7de      	b.n	800d4c0 <_strtod_l+0x248>
 800d502:	2301      	movs	r3, #1
 800d504:	9304      	str	r3, [sp, #16]
 800d506:	e777      	b.n	800d3f8 <_strtod_l+0x180>
 800d508:	f04f 0e01 	mov.w	lr, #1
 800d50c:	1cb2      	adds	r2, r6, #2
 800d50e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d510:	78b2      	ldrb	r2, [r6, #2]
 800d512:	e781      	b.n	800d418 <_strtod_l+0x1a0>
 800d514:	f04f 0e00 	mov.w	lr, #0
 800d518:	e7f8      	b.n	800d50c <_strtod_l+0x294>
 800d51a:	bf00      	nop
 800d51c:	08010010 	.word	0x08010010
 800d520:	7ff00000 	.word	0x7ff00000
 800d524:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d526:	f102 0c01 	add.w	ip, r2, #1
 800d52a:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800d52e:	7852      	ldrb	r2, [r2, #1]
 800d530:	2a30      	cmp	r2, #48	; 0x30
 800d532:	d0f7      	beq.n	800d524 <_strtod_l+0x2ac>
 800d534:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 800d538:	f1bc 0f08 	cmp.w	ip, #8
 800d53c:	f63f af73 	bhi.w	800d426 <_strtod_l+0x1ae>
 800d540:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800d544:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d546:	920e      	str	r2, [sp, #56]	; 0x38
 800d548:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d54a:	f102 0c01 	add.w	ip, r2, #1
 800d54e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800d552:	7852      	ldrb	r2, [r2, #1]
 800d554:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 800d558:	f1b9 0f09 	cmp.w	r9, #9
 800d55c:	d939      	bls.n	800d5d2 <_strtod_l+0x35a>
 800d55e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800d560:	ebac 0c07 	sub.w	ip, ip, r7
 800d564:	f1bc 0f08 	cmp.w	ip, #8
 800d568:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 800d56c:	dc37      	bgt.n	800d5de <_strtod_l+0x366>
 800d56e:	45e0      	cmp	r8, ip
 800d570:	bfa8      	it	ge
 800d572:	46e0      	movge	r8, ip
 800d574:	f1be 0f00 	cmp.w	lr, #0
 800d578:	d001      	beq.n	800d57e <_strtod_l+0x306>
 800d57a:	f1c8 0800 	rsb	r8, r8, #0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d151      	bne.n	800d626 <_strtod_l+0x3ae>
 800d582:	2800      	cmp	r0, #0
 800d584:	f47f aeba 	bne.w	800d2fc <_strtod_l+0x84>
 800d588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	f47f aeb6 	bne.w	800d2fc <_strtod_l+0x84>
 800d590:	9b04      	ldr	r3, [sp, #16]
 800d592:	2b00      	cmp	r3, #0
 800d594:	f47f aed1 	bne.w	800d33a <_strtod_l+0xc2>
 800d598:	2a4e      	cmp	r2, #78	; 0x4e
 800d59a:	d027      	beq.n	800d5ec <_strtod_l+0x374>
 800d59c:	dc21      	bgt.n	800d5e2 <_strtod_l+0x36a>
 800d59e:	2a49      	cmp	r2, #73	; 0x49
 800d5a0:	f47f aecb 	bne.w	800d33a <_strtod_l+0xc2>
 800d5a4:	499a      	ldr	r1, [pc, #616]	; (800d810 <_strtod_l+0x598>)
 800d5a6:	a817      	add	r0, sp, #92	; 0x5c
 800d5a8:	f001 fd28 	bl	800effc <__match>
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	f43f aec4 	beq.w	800d33a <_strtod_l+0xc2>
 800d5b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5b4:	4997      	ldr	r1, [pc, #604]	; (800d814 <_strtod_l+0x59c>)
 800d5b6:	3b01      	subs	r3, #1
 800d5b8:	a817      	add	r0, sp, #92	; 0x5c
 800d5ba:	9317      	str	r3, [sp, #92]	; 0x5c
 800d5bc:	f001 fd1e 	bl	800effc <__match>
 800d5c0:	b910      	cbnz	r0, 800d5c8 <_strtod_l+0x350>
 800d5c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	9317      	str	r3, [sp, #92]	; 0x5c
 800d5c8:	f8df b260 	ldr.w	fp, [pc, #608]	; 800d82c <_strtod_l+0x5b4>
 800d5cc:	f04f 0a00 	mov.w	sl, #0
 800d5d0:	e694      	b.n	800d2fc <_strtod_l+0x84>
 800d5d2:	270a      	movs	r7, #10
 800d5d4:	fb07 2808 	mla	r8, r7, r8, r2
 800d5d8:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800d5dc:	e7b4      	b.n	800d548 <_strtod_l+0x2d0>
 800d5de:	46e0      	mov	r8, ip
 800d5e0:	e7c8      	b.n	800d574 <_strtod_l+0x2fc>
 800d5e2:	2a69      	cmp	r2, #105	; 0x69
 800d5e4:	d0de      	beq.n	800d5a4 <_strtod_l+0x32c>
 800d5e6:	2a6e      	cmp	r2, #110	; 0x6e
 800d5e8:	f47f aea7 	bne.w	800d33a <_strtod_l+0xc2>
 800d5ec:	498a      	ldr	r1, [pc, #552]	; (800d818 <_strtod_l+0x5a0>)
 800d5ee:	a817      	add	r0, sp, #92	; 0x5c
 800d5f0:	f001 fd04 	bl	800effc <__match>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	f43f aea0 	beq.w	800d33a <_strtod_l+0xc2>
 800d5fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	2b28      	cmp	r3, #40	; 0x28
 800d600:	d10e      	bne.n	800d620 <_strtod_l+0x3a8>
 800d602:	aa1a      	add	r2, sp, #104	; 0x68
 800d604:	4985      	ldr	r1, [pc, #532]	; (800d81c <_strtod_l+0x5a4>)
 800d606:	a817      	add	r0, sp, #92	; 0x5c
 800d608:	f001 fd0c 	bl	800f024 <__hexnan>
 800d60c:	2805      	cmp	r0, #5
 800d60e:	d107      	bne.n	800d620 <_strtod_l+0x3a8>
 800d610:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d612:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d616:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d61a:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d61e:	e66d      	b.n	800d2fc <_strtod_l+0x84>
 800d620:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800d830 <_strtod_l+0x5b8>
 800d624:	e7d2      	b.n	800d5cc <_strtod_l+0x354>
 800d626:	eddd 7a08 	vldr	s15, [sp, #32]
 800d62a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d62e:	eba8 0201 	sub.w	r2, r8, r1
 800d632:	2d00      	cmp	r5, #0
 800d634:	bf08      	it	eq
 800d636:	461d      	moveq	r5, r3
 800d638:	2b10      	cmp	r3, #16
 800d63a:	9204      	str	r2, [sp, #16]
 800d63c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d640:	461a      	mov	r2, r3
 800d642:	bfa8      	it	ge
 800d644:	2210      	movge	r2, #16
 800d646:	2b09      	cmp	r3, #9
 800d648:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800d64c:	dc14      	bgt.n	800d678 <_strtod_l+0x400>
 800d64e:	9904      	ldr	r1, [sp, #16]
 800d650:	2900      	cmp	r1, #0
 800d652:	f43f ae53 	beq.w	800d2fc <_strtod_l+0x84>
 800d656:	9904      	ldr	r1, [sp, #16]
 800d658:	dd72      	ble.n	800d740 <_strtod_l+0x4c8>
 800d65a:	2916      	cmp	r1, #22
 800d65c:	dc5a      	bgt.n	800d714 <_strtod_l+0x49c>
 800d65e:	4970      	ldr	r1, [pc, #448]	; (800d820 <_strtod_l+0x5a8>)
 800d660:	9b04      	ldr	r3, [sp, #16]
 800d662:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d666:	ed91 7b00 	vldr	d7, [r1]
 800d66a:	ec4b ab16 	vmov	d6, sl, fp
 800d66e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d672:	ec5b ab17 	vmov	sl, fp, d7
 800d676:	e641      	b.n	800d2fc <_strtod_l+0x84>
 800d678:	4969      	ldr	r1, [pc, #420]	; (800d820 <_strtod_l+0x5a8>)
 800d67a:	eddd 7a06 	vldr	s15, [sp, #24]
 800d67e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d682:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800d686:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d68a:	2b0f      	cmp	r3, #15
 800d68c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d690:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d694:	ec5b ab17 	vmov	sl, fp, d7
 800d698:	ddd9      	ble.n	800d64e <_strtod_l+0x3d6>
 800d69a:	9904      	ldr	r1, [sp, #16]
 800d69c:	1a9a      	subs	r2, r3, r2
 800d69e:	440a      	add	r2, r1
 800d6a0:	2a00      	cmp	r2, #0
 800d6a2:	f340 8096 	ble.w	800d7d2 <_strtod_l+0x55a>
 800d6a6:	f012 000f 	ands.w	r0, r2, #15
 800d6aa:	d00a      	beq.n	800d6c2 <_strtod_l+0x44a>
 800d6ac:	495c      	ldr	r1, [pc, #368]	; (800d820 <_strtod_l+0x5a8>)
 800d6ae:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d6b2:	ed91 7b00 	vldr	d7, [r1]
 800d6b6:	ec4b ab16 	vmov	d6, sl, fp
 800d6ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d6be:	ec5b ab17 	vmov	sl, fp, d7
 800d6c2:	f032 020f 	bics.w	r2, r2, #15
 800d6c6:	d072      	beq.n	800d7ae <_strtod_l+0x536>
 800d6c8:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800d6cc:	dd45      	ble.n	800d75a <_strtod_l+0x4e2>
 800d6ce:	2500      	movs	r5, #0
 800d6d0:	46a8      	mov	r8, r5
 800d6d2:	9506      	str	r5, [sp, #24]
 800d6d4:	46a9      	mov	r9, r5
 800d6d6:	2322      	movs	r3, #34	; 0x22
 800d6d8:	f8df b150 	ldr.w	fp, [pc, #336]	; 800d82c <_strtod_l+0x5b4>
 800d6dc:	6023      	str	r3, [r4, #0]
 800d6de:	f04f 0a00 	mov.w	sl, #0
 800d6e2:	9b06      	ldr	r3, [sp, #24]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f43f ae09 	beq.w	800d2fc <_strtod_l+0x84>
 800d6ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	f001 fd8b 	bl	800f208 <_Bfree>
 800d6f2:	4649      	mov	r1, r9
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f001 fd87 	bl	800f208 <_Bfree>
 800d6fa:	4641      	mov	r1, r8
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	f001 fd83 	bl	800f208 <_Bfree>
 800d702:	9906      	ldr	r1, [sp, #24]
 800d704:	4620      	mov	r0, r4
 800d706:	f001 fd7f 	bl	800f208 <_Bfree>
 800d70a:	4629      	mov	r1, r5
 800d70c:	4620      	mov	r0, r4
 800d70e:	f001 fd7b 	bl	800f208 <_Bfree>
 800d712:	e5f3      	b.n	800d2fc <_strtod_l+0x84>
 800d714:	9804      	ldr	r0, [sp, #16]
 800d716:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800d71a:	4281      	cmp	r1, r0
 800d71c:	dbbd      	blt.n	800d69a <_strtod_l+0x422>
 800d71e:	4a40      	ldr	r2, [pc, #256]	; (800d820 <_strtod_l+0x5a8>)
 800d720:	f1c3 030f 	rsb	r3, r3, #15
 800d724:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800d728:	ed91 7b00 	vldr	d7, [r1]
 800d72c:	ec4b ab16 	vmov	d6, sl, fp
 800d730:	1ac3      	subs	r3, r0, r3
 800d732:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d736:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d73a:	ed92 6b00 	vldr	d6, [r2]
 800d73e:	e796      	b.n	800d66e <_strtod_l+0x3f6>
 800d740:	3116      	adds	r1, #22
 800d742:	dbaa      	blt.n	800d69a <_strtod_l+0x422>
 800d744:	4936      	ldr	r1, [pc, #216]	; (800d820 <_strtod_l+0x5a8>)
 800d746:	9b04      	ldr	r3, [sp, #16]
 800d748:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 800d74c:	ed91 7b00 	vldr	d7, [r1]
 800d750:	ec4b ab16 	vmov	d6, sl, fp
 800d754:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d758:	e78b      	b.n	800d672 <_strtod_l+0x3fa>
 800d75a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800d75e:	2000      	movs	r0, #0
 800d760:	4e30      	ldr	r6, [pc, #192]	; (800d824 <_strtod_l+0x5ac>)
 800d762:	1112      	asrs	r2, r2, #4
 800d764:	4601      	mov	r1, r0
 800d766:	2a01      	cmp	r2, #1
 800d768:	dc23      	bgt.n	800d7b2 <_strtod_l+0x53a>
 800d76a:	b108      	cbz	r0, 800d770 <_strtod_l+0x4f8>
 800d76c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800d770:	4a2c      	ldr	r2, [pc, #176]	; (800d824 <_strtod_l+0x5ac>)
 800d772:	482d      	ldr	r0, [pc, #180]	; (800d828 <_strtod_l+0x5b0>)
 800d774:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800d778:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d77c:	ed91 7b00 	vldr	d7, [r1]
 800d780:	ec4b ab16 	vmov	d6, sl, fp
 800d784:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d788:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d78c:	9907      	ldr	r1, [sp, #28]
 800d78e:	4a27      	ldr	r2, [pc, #156]	; (800d82c <_strtod_l+0x5b4>)
 800d790:	400a      	ands	r2, r1
 800d792:	4282      	cmp	r2, r0
 800d794:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800d798:	d899      	bhi.n	800d6ce <_strtod_l+0x456>
 800d79a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800d79e:	4282      	cmp	r2, r0
 800d7a0:	bf86      	itte	hi
 800d7a2:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 800d834 <_strtod_l+0x5bc>
 800d7a6:	f04f 3aff 	movhi.w	sl, #4294967295
 800d7aa:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 800d7ae:	2700      	movs	r7, #0
 800d7b0:	e070      	b.n	800d894 <_strtod_l+0x61c>
 800d7b2:	07d7      	lsls	r7, r2, #31
 800d7b4:	d50a      	bpl.n	800d7cc <_strtod_l+0x554>
 800d7b6:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800d7ba:	ed90 7b00 	vldr	d7, [r0]
 800d7be:	ed9d 6b06 	vldr	d6, [sp, #24]
 800d7c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d7c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d7ca:	2001      	movs	r0, #1
 800d7cc:	3101      	adds	r1, #1
 800d7ce:	1052      	asrs	r2, r2, #1
 800d7d0:	e7c9      	b.n	800d766 <_strtod_l+0x4ee>
 800d7d2:	d0ec      	beq.n	800d7ae <_strtod_l+0x536>
 800d7d4:	4252      	negs	r2, r2
 800d7d6:	f012 000f 	ands.w	r0, r2, #15
 800d7da:	d00a      	beq.n	800d7f2 <_strtod_l+0x57a>
 800d7dc:	4910      	ldr	r1, [pc, #64]	; (800d820 <_strtod_l+0x5a8>)
 800d7de:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d7e2:	ed91 7b00 	vldr	d7, [r1]
 800d7e6:	ec4b ab16 	vmov	d6, sl, fp
 800d7ea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d7ee:	ec5b ab17 	vmov	sl, fp, d7
 800d7f2:	1112      	asrs	r2, r2, #4
 800d7f4:	d0db      	beq.n	800d7ae <_strtod_l+0x536>
 800d7f6:	2a1f      	cmp	r2, #31
 800d7f8:	dd1e      	ble.n	800d838 <_strtod_l+0x5c0>
 800d7fa:	2500      	movs	r5, #0
 800d7fc:	46a8      	mov	r8, r5
 800d7fe:	9506      	str	r5, [sp, #24]
 800d800:	46a9      	mov	r9, r5
 800d802:	2322      	movs	r3, #34	; 0x22
 800d804:	f04f 0a00 	mov.w	sl, #0
 800d808:	f04f 0b00 	mov.w	fp, #0
 800d80c:	6023      	str	r3, [r4, #0]
 800d80e:	e768      	b.n	800d6e2 <_strtod_l+0x46a>
 800d810:	0800ffd9 	.word	0x0800ffd9
 800d814:	08010063 	.word	0x08010063
 800d818:	0800ffe1 	.word	0x0800ffe1
 800d81c:	08010024 	.word	0x08010024
 800d820:	080100a0 	.word	0x080100a0
 800d824:	08010078 	.word	0x08010078
 800d828:	7ca00000 	.word	0x7ca00000
 800d82c:	7ff00000 	.word	0x7ff00000
 800d830:	fff80000 	.word	0xfff80000
 800d834:	7fefffff 	.word	0x7fefffff
 800d838:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800d83c:	f012 0710 	ands.w	r7, r2, #16
 800d840:	49ab      	ldr	r1, [pc, #684]	; (800daf0 <_strtod_l+0x878>)
 800d842:	bf18      	it	ne
 800d844:	276a      	movne	r7, #106	; 0x6a
 800d846:	2000      	movs	r0, #0
 800d848:	2a00      	cmp	r2, #0
 800d84a:	f300 8113 	bgt.w	800da74 <_strtod_l+0x7fc>
 800d84e:	b108      	cbz	r0, 800d854 <_strtod_l+0x5dc>
 800d850:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800d854:	b1bf      	cbz	r7, 800d886 <_strtod_l+0x60e>
 800d856:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d85a:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800d85e:	2a00      	cmp	r2, #0
 800d860:	4659      	mov	r1, fp
 800d862:	dd10      	ble.n	800d886 <_strtod_l+0x60e>
 800d864:	2a1f      	cmp	r2, #31
 800d866:	f340 8113 	ble.w	800da90 <_strtod_l+0x818>
 800d86a:	2a34      	cmp	r2, #52	; 0x34
 800d86c:	bfde      	ittt	le
 800d86e:	3a20      	suble	r2, #32
 800d870:	f04f 30ff 	movle.w	r0, #4294967295
 800d874:	fa00 f202 	lslle.w	r2, r0, r2
 800d878:	f04f 0a00 	mov.w	sl, #0
 800d87c:	bfcc      	ite	gt
 800d87e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d882:	ea02 0b01 	andle.w	fp, r2, r1
 800d886:	ec4b ab17 	vmov	d7, sl, fp
 800d88a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d892:	d0b2      	beq.n	800d7fa <_strtod_l+0x582>
 800d894:	9a08      	ldr	r2, [sp, #32]
 800d896:	9200      	str	r2, [sp, #0]
 800d898:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d89a:	462a      	mov	r2, r5
 800d89c:	4620      	mov	r0, r4
 800d89e:	f001 fd05 	bl	800f2ac <__s2b>
 800d8a2:	9006      	str	r0, [sp, #24]
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	f43f af12 	beq.w	800d6ce <_strtod_l+0x456>
 800d8aa:	9a04      	ldr	r2, [sp, #16]
 800d8ac:	9b04      	ldr	r3, [sp, #16]
 800d8ae:	2a00      	cmp	r2, #0
 800d8b0:	f1c3 0300 	rsb	r3, r3, #0
 800d8b4:	ed9f 9b88 	vldr	d9, [pc, #544]	; 800dad8 <_strtod_l+0x860>
 800d8b8:	bfa8      	it	ge
 800d8ba:	2300      	movge	r3, #0
 800d8bc:	ed9f ab88 	vldr	d10, [pc, #544]	; 800dae0 <_strtod_l+0x868>
 800d8c0:	ed9f bb89 	vldr	d11, [pc, #548]	; 800dae8 <_strtod_l+0x870>
 800d8c4:	930e      	str	r3, [sp, #56]	; 0x38
 800d8c6:	2500      	movs	r5, #0
 800d8c8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d8cc:	9310      	str	r3, [sp, #64]	; 0x40
 800d8ce:	46a8      	mov	r8, r5
 800d8d0:	9b06      	ldr	r3, [sp, #24]
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	6859      	ldr	r1, [r3, #4]
 800d8d6:	f001 fc63 	bl	800f1a0 <_Balloc>
 800d8da:	4681      	mov	r9, r0
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	f43f aefa 	beq.w	800d6d6 <_strtod_l+0x45e>
 800d8e2:	9b06      	ldr	r3, [sp, #24]
 800d8e4:	691a      	ldr	r2, [r3, #16]
 800d8e6:	3202      	adds	r2, #2
 800d8e8:	f103 010c 	add.w	r1, r3, #12
 800d8ec:	0092      	lsls	r2, r2, #2
 800d8ee:	300c      	adds	r0, #12
 800d8f0:	f7fe fe5e 	bl	800c5b0 <memcpy>
 800d8f4:	aa1a      	add	r2, sp, #104	; 0x68
 800d8f6:	a919      	add	r1, sp, #100	; 0x64
 800d8f8:	ec4b ab10 	vmov	d0, sl, fp
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800d902:	f001 ff8f 	bl	800f824 <__d2b>
 800d906:	9018      	str	r0, [sp, #96]	; 0x60
 800d908:	2800      	cmp	r0, #0
 800d90a:	f43f aee4 	beq.w	800d6d6 <_strtod_l+0x45e>
 800d90e:	2101      	movs	r1, #1
 800d910:	4620      	mov	r0, r4
 800d912:	f001 fd57 	bl	800f3c4 <__i2b>
 800d916:	4680      	mov	r8, r0
 800d918:	2800      	cmp	r0, #0
 800d91a:	f43f aedc 	beq.w	800d6d6 <_strtod_l+0x45e>
 800d91e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800d920:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d922:	2e00      	cmp	r6, #0
 800d924:	bfb1      	iteee	lt
 800d926:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 800d928:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d92a:	9810      	ldrge	r0, [sp, #64]	; 0x40
 800d92c:	18f3      	addge	r3, r6, r3
 800d92e:	bfba      	itte	lt
 800d930:	1b98      	sublt	r0, r3, r6
 800d932:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d934:	9308      	strge	r3, [sp, #32]
 800d936:	eba6 0607 	sub.w	r6, r6, r7
 800d93a:	bfb8      	it	lt
 800d93c:	9308      	strlt	r3, [sp, #32]
 800d93e:	4416      	add	r6, r2
 800d940:	4b6c      	ldr	r3, [pc, #432]	; (800daf4 <_strtod_l+0x87c>)
 800d942:	3e01      	subs	r6, #1
 800d944:	429e      	cmp	r6, r3
 800d946:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d94a:	f280 80b4 	bge.w	800dab6 <_strtod_l+0x83e>
 800d94e:	1b9b      	subs	r3, r3, r6
 800d950:	2b1f      	cmp	r3, #31
 800d952:	eba2 0203 	sub.w	r2, r2, r3
 800d956:	f04f 0101 	mov.w	r1, #1
 800d95a:	f300 80a0 	bgt.w	800da9e <_strtod_l+0x826>
 800d95e:	fa01 f303 	lsl.w	r3, r1, r3
 800d962:	9311      	str	r3, [sp, #68]	; 0x44
 800d964:	2300      	movs	r3, #0
 800d966:	930f      	str	r3, [sp, #60]	; 0x3c
 800d968:	9b08      	ldr	r3, [sp, #32]
 800d96a:	4413      	add	r3, r2
 800d96c:	4402      	add	r2, r0
 800d96e:	18be      	adds	r6, r7, r2
 800d970:	9a08      	ldr	r2, [sp, #32]
 800d972:	429a      	cmp	r2, r3
 800d974:	bfa8      	it	ge
 800d976:	461a      	movge	r2, r3
 800d978:	42b2      	cmp	r2, r6
 800d97a:	bfa8      	it	ge
 800d97c:	4632      	movge	r2, r6
 800d97e:	2a00      	cmp	r2, #0
 800d980:	dd04      	ble.n	800d98c <_strtod_l+0x714>
 800d982:	9908      	ldr	r1, [sp, #32]
 800d984:	1a9b      	subs	r3, r3, r2
 800d986:	1ab6      	subs	r6, r6, r2
 800d988:	1a8a      	subs	r2, r1, r2
 800d98a:	9208      	str	r2, [sp, #32]
 800d98c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d98e:	b1c2      	cbz	r2, 800d9c2 <_strtod_l+0x74a>
 800d990:	4641      	mov	r1, r8
 800d992:	4620      	mov	r0, r4
 800d994:	9315      	str	r3, [sp, #84]	; 0x54
 800d996:	f001 fdb5 	bl	800f504 <__pow5mult>
 800d99a:	4680      	mov	r8, r0
 800d99c:	2800      	cmp	r0, #0
 800d99e:	f43f ae9a 	beq.w	800d6d6 <_strtod_l+0x45e>
 800d9a2:	4601      	mov	r1, r0
 800d9a4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d9a6:	4620      	mov	r0, r4
 800d9a8:	f001 fd15 	bl	800f3d6 <__multiply>
 800d9ac:	900c      	str	r0, [sp, #48]	; 0x30
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	f43f ae91 	beq.w	800d6d6 <_strtod_l+0x45e>
 800d9b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	f001 fc26 	bl	800f208 <_Bfree>
 800d9bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9c0:	9218      	str	r2, [sp, #96]	; 0x60
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	dc7c      	bgt.n	800dac0 <_strtod_l+0x848>
 800d9c6:	9b04      	ldr	r3, [sp, #16]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	dd08      	ble.n	800d9de <_strtod_l+0x766>
 800d9cc:	4649      	mov	r1, r9
 800d9ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	f001 fd97 	bl	800f504 <__pow5mult>
 800d9d6:	4681      	mov	r9, r0
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	f43f ae7c 	beq.w	800d6d6 <_strtod_l+0x45e>
 800d9de:	2e00      	cmp	r6, #0
 800d9e0:	dd08      	ble.n	800d9f4 <_strtod_l+0x77c>
 800d9e2:	4649      	mov	r1, r9
 800d9e4:	4632      	mov	r2, r6
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	f001 fdda 	bl	800f5a0 <__lshift>
 800d9ec:	4681      	mov	r9, r0
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	f43f ae71 	beq.w	800d6d6 <_strtod_l+0x45e>
 800d9f4:	9b08      	ldr	r3, [sp, #32]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	dd08      	ble.n	800da0c <_strtod_l+0x794>
 800d9fa:	4641      	mov	r1, r8
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	4620      	mov	r0, r4
 800da00:	f001 fdce 	bl	800f5a0 <__lshift>
 800da04:	4680      	mov	r8, r0
 800da06:	2800      	cmp	r0, #0
 800da08:	f43f ae65 	beq.w	800d6d6 <_strtod_l+0x45e>
 800da0c:	464a      	mov	r2, r9
 800da0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da10:	4620      	mov	r0, r4
 800da12:	f001 fe33 	bl	800f67c <__mdiff>
 800da16:	4605      	mov	r5, r0
 800da18:	2800      	cmp	r0, #0
 800da1a:	f43f ae5c 	beq.w	800d6d6 <_strtod_l+0x45e>
 800da1e:	68c3      	ldr	r3, [r0, #12]
 800da20:	930c      	str	r3, [sp, #48]	; 0x30
 800da22:	2300      	movs	r3, #0
 800da24:	60c3      	str	r3, [r0, #12]
 800da26:	4641      	mov	r1, r8
 800da28:	f001 fe0e 	bl	800f648 <__mcmp>
 800da2c:	2800      	cmp	r0, #0
 800da2e:	da63      	bge.n	800daf8 <_strtod_l+0x880>
 800da30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da32:	b9e3      	cbnz	r3, 800da6e <_strtod_l+0x7f6>
 800da34:	f1ba 0f00 	cmp.w	sl, #0
 800da38:	d119      	bne.n	800da6e <_strtod_l+0x7f6>
 800da3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da3e:	b9b3      	cbnz	r3, 800da6e <_strtod_l+0x7f6>
 800da40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da44:	0d1b      	lsrs	r3, r3, #20
 800da46:	051b      	lsls	r3, r3, #20
 800da48:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800da4c:	d90f      	bls.n	800da6e <_strtod_l+0x7f6>
 800da4e:	696b      	ldr	r3, [r5, #20]
 800da50:	b913      	cbnz	r3, 800da58 <_strtod_l+0x7e0>
 800da52:	692b      	ldr	r3, [r5, #16]
 800da54:	2b01      	cmp	r3, #1
 800da56:	dd0a      	ble.n	800da6e <_strtod_l+0x7f6>
 800da58:	4629      	mov	r1, r5
 800da5a:	2201      	movs	r2, #1
 800da5c:	4620      	mov	r0, r4
 800da5e:	f001 fd9f 	bl	800f5a0 <__lshift>
 800da62:	4641      	mov	r1, r8
 800da64:	4605      	mov	r5, r0
 800da66:	f001 fdef 	bl	800f648 <__mcmp>
 800da6a:	2800      	cmp	r0, #0
 800da6c:	dc75      	bgt.n	800db5a <_strtod_l+0x8e2>
 800da6e:	2f00      	cmp	r7, #0
 800da70:	d17f      	bne.n	800db72 <_strtod_l+0x8fa>
 800da72:	e63a      	b.n	800d6ea <_strtod_l+0x472>
 800da74:	07d6      	lsls	r6, r2, #31
 800da76:	d508      	bpl.n	800da8a <_strtod_l+0x812>
 800da78:	ed9d 6b06 	vldr	d6, [sp, #24]
 800da7c:	ed91 7b00 	vldr	d7, [r1]
 800da80:	ee26 7b07 	vmul.f64	d7, d6, d7
 800da84:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da88:	2001      	movs	r0, #1
 800da8a:	1052      	asrs	r2, r2, #1
 800da8c:	3108      	adds	r1, #8
 800da8e:	e6db      	b.n	800d848 <_strtod_l+0x5d0>
 800da90:	f04f 31ff 	mov.w	r1, #4294967295
 800da94:	fa01 f202 	lsl.w	r2, r1, r2
 800da98:	ea02 0a0a 	and.w	sl, r2, sl
 800da9c:	e6f3      	b.n	800d886 <_strtod_l+0x60e>
 800da9e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800daa2:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800daa6:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800daaa:	36e2      	adds	r6, #226	; 0xe2
 800daac:	fa01 f306 	lsl.w	r3, r1, r6
 800dab0:	930f      	str	r3, [sp, #60]	; 0x3c
 800dab2:	9111      	str	r1, [sp, #68]	; 0x44
 800dab4:	e758      	b.n	800d968 <_strtod_l+0x6f0>
 800dab6:	2300      	movs	r3, #0
 800dab8:	930f      	str	r3, [sp, #60]	; 0x3c
 800daba:	2301      	movs	r3, #1
 800dabc:	9311      	str	r3, [sp, #68]	; 0x44
 800dabe:	e753      	b.n	800d968 <_strtod_l+0x6f0>
 800dac0:	461a      	mov	r2, r3
 800dac2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dac4:	4620      	mov	r0, r4
 800dac6:	f001 fd6b 	bl	800f5a0 <__lshift>
 800daca:	9018      	str	r0, [sp, #96]	; 0x60
 800dacc:	2800      	cmp	r0, #0
 800dace:	f47f af7a 	bne.w	800d9c6 <_strtod_l+0x74e>
 800dad2:	e600      	b.n	800d6d6 <_strtod_l+0x45e>
 800dad4:	f3af 8000 	nop.w
 800dad8:	94a03595 	.word	0x94a03595
 800dadc:	3fdfffff 	.word	0x3fdfffff
 800dae0:	35afe535 	.word	0x35afe535
 800dae4:	3fe00000 	.word	0x3fe00000
 800dae8:	94a03595 	.word	0x94a03595
 800daec:	3fcfffff 	.word	0x3fcfffff
 800daf0:	08010038 	.word	0x08010038
 800daf4:	fffffc02 	.word	0xfffffc02
 800daf8:	f8cd b020 	str.w	fp, [sp, #32]
 800dafc:	f040 8085 	bne.w	800dc0a <_strtod_l+0x992>
 800db00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db06:	b322      	cbz	r2, 800db52 <_strtod_l+0x8da>
 800db08:	4ab7      	ldr	r2, [pc, #732]	; (800dde8 <_strtod_l+0xb70>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d154      	bne.n	800dbb8 <_strtod_l+0x940>
 800db0e:	4651      	mov	r1, sl
 800db10:	b1e7      	cbz	r7, 800db4c <_strtod_l+0x8d4>
 800db12:	4bb6      	ldr	r3, [pc, #728]	; (800ddec <_strtod_l+0xb74>)
 800db14:	465a      	mov	r2, fp
 800db16:	4013      	ands	r3, r2
 800db18:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800db1c:	f04f 32ff 	mov.w	r2, #4294967295
 800db20:	d803      	bhi.n	800db2a <_strtod_l+0x8b2>
 800db22:	0d1b      	lsrs	r3, r3, #20
 800db24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800db28:	409a      	lsls	r2, r3
 800db2a:	4291      	cmp	r1, r2
 800db2c:	d144      	bne.n	800dbb8 <_strtod_l+0x940>
 800db2e:	4bb0      	ldr	r3, [pc, #704]	; (800ddf0 <_strtod_l+0xb78>)
 800db30:	9a08      	ldr	r2, [sp, #32]
 800db32:	429a      	cmp	r2, r3
 800db34:	d102      	bne.n	800db3c <_strtod_l+0x8c4>
 800db36:	3101      	adds	r1, #1
 800db38:	f43f adcd 	beq.w	800d6d6 <_strtod_l+0x45e>
 800db3c:	4bab      	ldr	r3, [pc, #684]	; (800ddec <_strtod_l+0xb74>)
 800db3e:	9a08      	ldr	r2, [sp, #32]
 800db40:	401a      	ands	r2, r3
 800db42:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 800db46:	f04f 0a00 	mov.w	sl, #0
 800db4a:	e790      	b.n	800da6e <_strtod_l+0x7f6>
 800db4c:	f04f 32ff 	mov.w	r2, #4294967295
 800db50:	e7eb      	b.n	800db2a <_strtod_l+0x8b2>
 800db52:	bb8b      	cbnz	r3, 800dbb8 <_strtod_l+0x940>
 800db54:	f1ba 0f00 	cmp.w	sl, #0
 800db58:	d12e      	bne.n	800dbb8 <_strtod_l+0x940>
 800db5a:	465b      	mov	r3, fp
 800db5c:	4aa3      	ldr	r2, [pc, #652]	; (800ddec <_strtod_l+0xb74>)
 800db5e:	b30f      	cbz	r7, 800dba4 <_strtod_l+0x92c>
 800db60:	ea02 010b 	and.w	r1, r2, fp
 800db64:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800db68:	dc1c      	bgt.n	800dba4 <_strtod_l+0x92c>
 800db6a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800db6e:	f77f ae48 	ble.w	800d802 <_strtod_l+0x58a>
 800db72:	4aa0      	ldr	r2, [pc, #640]	; (800ddf4 <_strtod_l+0xb7c>)
 800db74:	2300      	movs	r3, #0
 800db76:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 800db7a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 800db7e:	ec4b ab17 	vmov	d7, sl, fp
 800db82:	ee27 7b06 	vmul.f64	d7, d7, d6
 800db86:	ed8d 7b04 	vstr	d7, [sp, #16]
 800db8a:	9b05      	ldr	r3, [sp, #20]
 800db8c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800db90:	2b00      	cmp	r3, #0
 800db92:	f47f adaa 	bne.w	800d6ea <_strtod_l+0x472>
 800db96:	9b04      	ldr	r3, [sp, #16]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	f47f ada6 	bne.w	800d6ea <_strtod_l+0x472>
 800db9e:	2322      	movs	r3, #34	; 0x22
 800dba0:	6023      	str	r3, [r4, #0]
 800dba2:	e5a2      	b.n	800d6ea <_strtod_l+0x472>
 800dba4:	4013      	ands	r3, r2
 800dba6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dbaa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dbae:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dbb2:	f04f 3aff 	mov.w	sl, #4294967295
 800dbb6:	e75a      	b.n	800da6e <_strtod_l+0x7f6>
 800dbb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbba:	b18b      	cbz	r3, 800dbe0 <_strtod_l+0x968>
 800dbbc:	9a08      	ldr	r2, [sp, #32]
 800dbbe:	4213      	tst	r3, r2
 800dbc0:	f43f af55 	beq.w	800da6e <_strtod_l+0x7f6>
 800dbc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbc6:	463a      	mov	r2, r7
 800dbc8:	4650      	mov	r0, sl
 800dbca:	4659      	mov	r1, fp
 800dbcc:	b163      	cbz	r3, 800dbe8 <_strtod_l+0x970>
 800dbce:	f7ff fb39 	bl	800d244 <sulp>
 800dbd2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800dbd6:	ee37 7b00 	vadd.f64	d7, d7, d0
 800dbda:	ec5b ab17 	vmov	sl, fp, d7
 800dbde:	e746      	b.n	800da6e <_strtod_l+0x7f6>
 800dbe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dbe2:	ea13 0f0a 	tst.w	r3, sl
 800dbe6:	e7eb      	b.n	800dbc0 <_strtod_l+0x948>
 800dbe8:	f7ff fb2c 	bl	800d244 <sulp>
 800dbec:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800dbf0:	ee37 7b40 	vsub.f64	d7, d7, d0
 800dbf4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dbf8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dbfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc00:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800dc04:	f43f adfd 	beq.w	800d802 <_strtod_l+0x58a>
 800dc08:	e731      	b.n	800da6e <_strtod_l+0x7f6>
 800dc0a:	4641      	mov	r1, r8
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	f001 fe58 	bl	800f8c2 <__ratio>
 800dc12:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800dc16:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800dc1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc1e:	d869      	bhi.n	800dcf4 <_strtod_l+0xa7c>
 800dc20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d045      	beq.n	800dcb2 <_strtod_l+0xa3a>
 800dc26:	4b74      	ldr	r3, [pc, #464]	; (800ddf8 <_strtod_l+0xb80>)
 800dc28:	2200      	movs	r2, #0
 800dc2a:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800dc2e:	9808      	ldr	r0, [sp, #32]
 800dc30:	496e      	ldr	r1, [pc, #440]	; (800ddec <_strtod_l+0xb74>)
 800dc32:	ea00 0601 	and.w	r6, r0, r1
 800dc36:	4871      	ldr	r0, [pc, #452]	; (800ddfc <_strtod_l+0xb84>)
 800dc38:	4286      	cmp	r6, r0
 800dc3a:	f040 8089 	bne.w	800dd50 <_strtod_l+0xad8>
 800dc3e:	910f      	str	r1, [sp, #60]	; 0x3c
 800dc40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dc44:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800dc48:	9908      	ldr	r1, [sp, #32]
 800dc4a:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 800dc4e:	ec4b ab10 	vmov	d0, sl, fp
 800dc52:	ec43 2b1c 	vmov	d12, r2, r3
 800dc56:	f001 fd6f 	bl	800f738 <__ulp>
 800dc5a:	ec4b ab1d 	vmov	d13, sl, fp
 800dc5e:	eeac db00 	vfma.f64	d13, d12, d0
 800dc62:	ed8d db08 	vstr	d13, [sp, #32]
 800dc66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dc6a:	4a65      	ldr	r2, [pc, #404]	; (800de00 <_strtod_l+0xb88>)
 800dc6c:	4019      	ands	r1, r3
 800dc6e:	4291      	cmp	r1, r2
 800dc70:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 800dc74:	d948      	bls.n	800dd08 <_strtod_l+0xa90>
 800dc76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc78:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d103      	bne.n	800dc88 <_strtod_l+0xa10>
 800dc80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc82:	3301      	adds	r3, #1
 800dc84:	f43f ad27 	beq.w	800d6d6 <_strtod_l+0x45e>
 800dc88:	f8df b164 	ldr.w	fp, [pc, #356]	; 800ddf0 <_strtod_l+0xb78>
 800dc8c:	f04f 3aff 	mov.w	sl, #4294967295
 800dc90:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dc92:	4620      	mov	r0, r4
 800dc94:	f001 fab8 	bl	800f208 <_Bfree>
 800dc98:	4649      	mov	r1, r9
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f001 fab4 	bl	800f208 <_Bfree>
 800dca0:	4641      	mov	r1, r8
 800dca2:	4620      	mov	r0, r4
 800dca4:	f001 fab0 	bl	800f208 <_Bfree>
 800dca8:	4629      	mov	r1, r5
 800dcaa:	4620      	mov	r0, r4
 800dcac:	f001 faac 	bl	800f208 <_Bfree>
 800dcb0:	e60e      	b.n	800d8d0 <_strtod_l+0x658>
 800dcb2:	f1ba 0f00 	cmp.w	sl, #0
 800dcb6:	d113      	bne.n	800dce0 <_strtod_l+0xa68>
 800dcb8:	9b08      	ldr	r3, [sp, #32]
 800dcba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcbe:	b9b3      	cbnz	r3, 800dcee <_strtod_l+0xa76>
 800dcc0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800dcc4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800dcc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dccc:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800dcd0:	d401      	bmi.n	800dcd6 <_strtod_l+0xa5e>
 800dcd2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800dcd6:	eeb1 7b48 	vneg.f64	d7, d8
 800dcda:	ec53 2b17 	vmov	r2, r3, d7
 800dcde:	e7a6      	b.n	800dc2e <_strtod_l+0x9b6>
 800dce0:	f1ba 0f01 	cmp.w	sl, #1
 800dce4:	d103      	bne.n	800dcee <_strtod_l+0xa76>
 800dce6:	9b08      	ldr	r3, [sp, #32]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f43f ad8a 	beq.w	800d802 <_strtod_l+0x58a>
 800dcee:	2200      	movs	r2, #0
 800dcf0:	4b44      	ldr	r3, [pc, #272]	; (800de04 <_strtod_l+0xb8c>)
 800dcf2:	e79a      	b.n	800dc2a <_strtod_l+0x9b2>
 800dcf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcf6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800dcfa:	ee20 8b08 	vmul.f64	d8, d0, d8
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d0e9      	beq.n	800dcd6 <_strtod_l+0xa5e>
 800dd02:	ec53 2b18 	vmov	r2, r3, d8
 800dd06:	e792      	b.n	800dc2e <_strtod_l+0x9b6>
 800dd08:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800dd0c:	2f00      	cmp	r7, #0
 800dd0e:	d1bf      	bne.n	800dc90 <_strtod_l+0xa18>
 800dd10:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd14:	0d1b      	lsrs	r3, r3, #20
 800dd16:	051b      	lsls	r3, r3, #20
 800dd18:	429e      	cmp	r6, r3
 800dd1a:	d1b9      	bne.n	800dc90 <_strtod_l+0xa18>
 800dd1c:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 800dd20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd22:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800dd26:	ee38 8b40 	vsub.f64	d8, d8, d0
 800dd2a:	b92b      	cbnz	r3, 800dd38 <_strtod_l+0xac0>
 800dd2c:	f1ba 0f00 	cmp.w	sl, #0
 800dd30:	d102      	bne.n	800dd38 <_strtod_l+0xac0>
 800dd32:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800dd36:	b3d2      	cbz	r2, 800ddae <_strtod_l+0xb36>
 800dd38:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800dd3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd40:	f53f acd3 	bmi.w	800d6ea <_strtod_l+0x472>
 800dd44:	eeb4 8bca 	vcmpe.f64	d8, d10
 800dd48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd4c:	dda0      	ble.n	800dc90 <_strtod_l+0xa18>
 800dd4e:	e4cc      	b.n	800d6ea <_strtod_l+0x472>
 800dd50:	b1ef      	cbz	r7, 800dd8e <_strtod_l+0xb16>
 800dd52:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800dd56:	d81a      	bhi.n	800dd8e <_strtod_l+0xb16>
 800dd58:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800dde0 <_strtod_l+0xb68>
 800dd5c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dd60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd64:	d810      	bhi.n	800dd88 <_strtod_l+0xb10>
 800dd66:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 800dd6a:	ee17 3a90 	vmov	r3, s15
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	bf08      	it	eq
 800dd72:	2301      	moveq	r3, #1
 800dd74:	ee07 3a90 	vmov	s15, r3
 800dd78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd7a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800dd7e:	b99b      	cbnz	r3, 800dda8 <_strtod_l+0xb30>
 800dd80:	eeb1 7b48 	vneg.f64	d7, d8
 800dd84:	ec53 2b17 	vmov	r2, r3, d7
 800dd88:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800dd8c:	1b8b      	subs	r3, r1, r6
 800dd8e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dd92:	ec43 2b1c 	vmov	d12, r2, r3
 800dd96:	f001 fccf 	bl	800f738 <__ulp>
 800dd9a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800dd9e:	eeac 7b00 	vfma.f64	d7, d12, d0
 800dda2:	ec5b ab17 	vmov	sl, fp, d7
 800dda6:	e7b1      	b.n	800dd0c <_strtod_l+0xa94>
 800dda8:	ec53 2b18 	vmov	r2, r3, d8
 800ddac:	e7ec      	b.n	800dd88 <_strtod_l+0xb10>
 800ddae:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800ddb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb6:	f57f af6b 	bpl.w	800dc90 <_strtod_l+0xa18>
 800ddba:	e496      	b.n	800d6ea <_strtod_l+0x472>
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	930d      	str	r3, [sp, #52]	; 0x34
 800ddc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ddc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ddc4:	6013      	str	r3, [r2, #0]
 800ddc6:	f7ff ba9d 	b.w	800d304 <_strtod_l+0x8c>
 800ddca:	2a65      	cmp	r2, #101	; 0x65
 800ddcc:	f04f 0100 	mov.w	r1, #0
 800ddd0:	f43f ab97 	beq.w	800d502 <_strtod_l+0x28a>
 800ddd4:	2701      	movs	r7, #1
 800ddd6:	460b      	mov	r3, r1
 800ddd8:	9704      	str	r7, [sp, #16]
 800ddda:	f7ff bb0a 	b.w	800d3f2 <_strtod_l+0x17a>
 800ddde:	bf00      	nop
 800dde0:	ffc00000 	.word	0xffc00000
 800dde4:	41dfffff 	.word	0x41dfffff
 800dde8:	000fffff 	.word	0x000fffff
 800ddec:	7ff00000 	.word	0x7ff00000
 800ddf0:	7fefffff 	.word	0x7fefffff
 800ddf4:	39500000 	.word	0x39500000
 800ddf8:	3ff00000 	.word	0x3ff00000
 800ddfc:	7fe00000 	.word	0x7fe00000
 800de00:	7c9fffff 	.word	0x7c9fffff
 800de04:	bff00000 	.word	0xbff00000

0800de08 <_strtod_r>:
 800de08:	4b05      	ldr	r3, [pc, #20]	; (800de20 <_strtod_r+0x18>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	b410      	push	{r4}
 800de0e:	6a1b      	ldr	r3, [r3, #32]
 800de10:	4c04      	ldr	r4, [pc, #16]	; (800de24 <_strtod_r+0x1c>)
 800de12:	2b00      	cmp	r3, #0
 800de14:	bf08      	it	eq
 800de16:	4623      	moveq	r3, r4
 800de18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de1c:	f7ff ba2c 	b.w	800d278 <_strtod_l>
 800de20:	200000c8 	.word	0x200000c8
 800de24:	2000012c 	.word	0x2000012c

0800de28 <_strtol_l.isra.0>:
 800de28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de2c:	4680      	mov	r8, r0
 800de2e:	4689      	mov	r9, r1
 800de30:	4692      	mov	sl, r2
 800de32:	461e      	mov	r6, r3
 800de34:	460f      	mov	r7, r1
 800de36:	463d      	mov	r5, r7
 800de38:	9808      	ldr	r0, [sp, #32]
 800de3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de3e:	f001 f981 	bl	800f144 <__locale_ctype_ptr_l>
 800de42:	4420      	add	r0, r4
 800de44:	7843      	ldrb	r3, [r0, #1]
 800de46:	f013 0308 	ands.w	r3, r3, #8
 800de4a:	d132      	bne.n	800deb2 <_strtol_l.isra.0+0x8a>
 800de4c:	2c2d      	cmp	r4, #45	; 0x2d
 800de4e:	d132      	bne.n	800deb6 <_strtol_l.isra.0+0x8e>
 800de50:	787c      	ldrb	r4, [r7, #1]
 800de52:	1cbd      	adds	r5, r7, #2
 800de54:	2201      	movs	r2, #1
 800de56:	2e00      	cmp	r6, #0
 800de58:	d05d      	beq.n	800df16 <_strtol_l.isra.0+0xee>
 800de5a:	2e10      	cmp	r6, #16
 800de5c:	d109      	bne.n	800de72 <_strtol_l.isra.0+0x4a>
 800de5e:	2c30      	cmp	r4, #48	; 0x30
 800de60:	d107      	bne.n	800de72 <_strtol_l.isra.0+0x4a>
 800de62:	782b      	ldrb	r3, [r5, #0]
 800de64:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800de68:	2b58      	cmp	r3, #88	; 0x58
 800de6a:	d14f      	bne.n	800df0c <_strtol_l.isra.0+0xe4>
 800de6c:	786c      	ldrb	r4, [r5, #1]
 800de6e:	2610      	movs	r6, #16
 800de70:	3502      	adds	r5, #2
 800de72:	2a00      	cmp	r2, #0
 800de74:	bf14      	ite	ne
 800de76:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800de7a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800de7e:	2700      	movs	r7, #0
 800de80:	fbb1 fcf6 	udiv	ip, r1, r6
 800de84:	4638      	mov	r0, r7
 800de86:	fb06 1e1c 	mls	lr, r6, ip, r1
 800de8a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800de8e:	2b09      	cmp	r3, #9
 800de90:	d817      	bhi.n	800dec2 <_strtol_l.isra.0+0x9a>
 800de92:	461c      	mov	r4, r3
 800de94:	42a6      	cmp	r6, r4
 800de96:	dd23      	ble.n	800dee0 <_strtol_l.isra.0+0xb8>
 800de98:	1c7b      	adds	r3, r7, #1
 800de9a:	d007      	beq.n	800deac <_strtol_l.isra.0+0x84>
 800de9c:	4584      	cmp	ip, r0
 800de9e:	d31c      	bcc.n	800deda <_strtol_l.isra.0+0xb2>
 800dea0:	d101      	bne.n	800dea6 <_strtol_l.isra.0+0x7e>
 800dea2:	45a6      	cmp	lr, r4
 800dea4:	db19      	blt.n	800deda <_strtol_l.isra.0+0xb2>
 800dea6:	fb00 4006 	mla	r0, r0, r6, r4
 800deaa:	2701      	movs	r7, #1
 800deac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800deb0:	e7eb      	b.n	800de8a <_strtol_l.isra.0+0x62>
 800deb2:	462f      	mov	r7, r5
 800deb4:	e7bf      	b.n	800de36 <_strtol_l.isra.0+0xe>
 800deb6:	2c2b      	cmp	r4, #43	; 0x2b
 800deb8:	bf04      	itt	eq
 800deba:	1cbd      	addeq	r5, r7, #2
 800debc:	787c      	ldrbeq	r4, [r7, #1]
 800debe:	461a      	mov	r2, r3
 800dec0:	e7c9      	b.n	800de56 <_strtol_l.isra.0+0x2e>
 800dec2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800dec6:	2b19      	cmp	r3, #25
 800dec8:	d801      	bhi.n	800dece <_strtol_l.isra.0+0xa6>
 800deca:	3c37      	subs	r4, #55	; 0x37
 800decc:	e7e2      	b.n	800de94 <_strtol_l.isra.0+0x6c>
 800dece:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800ded2:	2b19      	cmp	r3, #25
 800ded4:	d804      	bhi.n	800dee0 <_strtol_l.isra.0+0xb8>
 800ded6:	3c57      	subs	r4, #87	; 0x57
 800ded8:	e7dc      	b.n	800de94 <_strtol_l.isra.0+0x6c>
 800deda:	f04f 37ff 	mov.w	r7, #4294967295
 800dede:	e7e5      	b.n	800deac <_strtol_l.isra.0+0x84>
 800dee0:	1c7b      	adds	r3, r7, #1
 800dee2:	d108      	bne.n	800def6 <_strtol_l.isra.0+0xce>
 800dee4:	2322      	movs	r3, #34	; 0x22
 800dee6:	f8c8 3000 	str.w	r3, [r8]
 800deea:	4608      	mov	r0, r1
 800deec:	f1ba 0f00 	cmp.w	sl, #0
 800def0:	d107      	bne.n	800df02 <_strtol_l.isra.0+0xda>
 800def2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800def6:	b102      	cbz	r2, 800defa <_strtol_l.isra.0+0xd2>
 800def8:	4240      	negs	r0, r0
 800defa:	f1ba 0f00 	cmp.w	sl, #0
 800defe:	d0f8      	beq.n	800def2 <_strtol_l.isra.0+0xca>
 800df00:	b10f      	cbz	r7, 800df06 <_strtol_l.isra.0+0xde>
 800df02:	f105 39ff 	add.w	r9, r5, #4294967295
 800df06:	f8ca 9000 	str.w	r9, [sl]
 800df0a:	e7f2      	b.n	800def2 <_strtol_l.isra.0+0xca>
 800df0c:	2430      	movs	r4, #48	; 0x30
 800df0e:	2e00      	cmp	r6, #0
 800df10:	d1af      	bne.n	800de72 <_strtol_l.isra.0+0x4a>
 800df12:	2608      	movs	r6, #8
 800df14:	e7ad      	b.n	800de72 <_strtol_l.isra.0+0x4a>
 800df16:	2c30      	cmp	r4, #48	; 0x30
 800df18:	d0a3      	beq.n	800de62 <_strtol_l.isra.0+0x3a>
 800df1a:	260a      	movs	r6, #10
 800df1c:	e7a9      	b.n	800de72 <_strtol_l.isra.0+0x4a>
	...

0800df20 <_strtol_r>:
 800df20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df22:	4c06      	ldr	r4, [pc, #24]	; (800df3c <_strtol_r+0x1c>)
 800df24:	4d06      	ldr	r5, [pc, #24]	; (800df40 <_strtol_r+0x20>)
 800df26:	6824      	ldr	r4, [r4, #0]
 800df28:	6a24      	ldr	r4, [r4, #32]
 800df2a:	2c00      	cmp	r4, #0
 800df2c:	bf08      	it	eq
 800df2e:	462c      	moveq	r4, r5
 800df30:	9400      	str	r4, [sp, #0]
 800df32:	f7ff ff79 	bl	800de28 <_strtol_l.isra.0>
 800df36:	b003      	add	sp, #12
 800df38:	bd30      	pop	{r4, r5, pc}
 800df3a:	bf00      	nop
 800df3c:	200000c8 	.word	0x200000c8
 800df40:	2000012c 	.word	0x2000012c

0800df44 <quorem>:
 800df44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df48:	6903      	ldr	r3, [r0, #16]
 800df4a:	690c      	ldr	r4, [r1, #16]
 800df4c:	42a3      	cmp	r3, r4
 800df4e:	4680      	mov	r8, r0
 800df50:	f2c0 8082 	blt.w	800e058 <quorem+0x114>
 800df54:	3c01      	subs	r4, #1
 800df56:	f101 0714 	add.w	r7, r1, #20
 800df5a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800df5e:	f100 0614 	add.w	r6, r0, #20
 800df62:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800df66:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800df6a:	eb06 030c 	add.w	r3, r6, ip
 800df6e:	3501      	adds	r5, #1
 800df70:	eb07 090c 	add.w	r9, r7, ip
 800df74:	9301      	str	r3, [sp, #4]
 800df76:	fbb0 f5f5 	udiv	r5, r0, r5
 800df7a:	b395      	cbz	r5, 800dfe2 <quorem+0x9e>
 800df7c:	f04f 0a00 	mov.w	sl, #0
 800df80:	4638      	mov	r0, r7
 800df82:	46b6      	mov	lr, r6
 800df84:	46d3      	mov	fp, sl
 800df86:	f850 2b04 	ldr.w	r2, [r0], #4
 800df8a:	b293      	uxth	r3, r2
 800df8c:	fb05 a303 	mla	r3, r5, r3, sl
 800df90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df94:	b29b      	uxth	r3, r3
 800df96:	ebab 0303 	sub.w	r3, fp, r3
 800df9a:	0c12      	lsrs	r2, r2, #16
 800df9c:	f8de b000 	ldr.w	fp, [lr]
 800dfa0:	fb05 a202 	mla	r2, r5, r2, sl
 800dfa4:	fa13 f38b 	uxtah	r3, r3, fp
 800dfa8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800dfac:	fa1f fb82 	uxth.w	fp, r2
 800dfb0:	f8de 2000 	ldr.w	r2, [lr]
 800dfb4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800dfb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dfc2:	4581      	cmp	r9, r0
 800dfc4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800dfc8:	f84e 3b04 	str.w	r3, [lr], #4
 800dfcc:	d2db      	bcs.n	800df86 <quorem+0x42>
 800dfce:	f856 300c 	ldr.w	r3, [r6, ip]
 800dfd2:	b933      	cbnz	r3, 800dfe2 <quorem+0x9e>
 800dfd4:	9b01      	ldr	r3, [sp, #4]
 800dfd6:	3b04      	subs	r3, #4
 800dfd8:	429e      	cmp	r6, r3
 800dfda:	461a      	mov	r2, r3
 800dfdc:	d330      	bcc.n	800e040 <quorem+0xfc>
 800dfde:	f8c8 4010 	str.w	r4, [r8, #16]
 800dfe2:	4640      	mov	r0, r8
 800dfe4:	f001 fb30 	bl	800f648 <__mcmp>
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	db25      	blt.n	800e038 <quorem+0xf4>
 800dfec:	3501      	adds	r5, #1
 800dfee:	4630      	mov	r0, r6
 800dff0:	f04f 0c00 	mov.w	ip, #0
 800dff4:	f857 2b04 	ldr.w	r2, [r7], #4
 800dff8:	f8d0 e000 	ldr.w	lr, [r0]
 800dffc:	b293      	uxth	r3, r2
 800dffe:	ebac 0303 	sub.w	r3, ip, r3
 800e002:	0c12      	lsrs	r2, r2, #16
 800e004:	fa13 f38e 	uxtah	r3, r3, lr
 800e008:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e00c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e010:	b29b      	uxth	r3, r3
 800e012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e016:	45b9      	cmp	r9, r7
 800e018:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e01c:	f840 3b04 	str.w	r3, [r0], #4
 800e020:	d2e8      	bcs.n	800dff4 <quorem+0xb0>
 800e022:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e026:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e02a:	b92a      	cbnz	r2, 800e038 <quorem+0xf4>
 800e02c:	3b04      	subs	r3, #4
 800e02e:	429e      	cmp	r6, r3
 800e030:	461a      	mov	r2, r3
 800e032:	d30b      	bcc.n	800e04c <quorem+0x108>
 800e034:	f8c8 4010 	str.w	r4, [r8, #16]
 800e038:	4628      	mov	r0, r5
 800e03a:	b003      	add	sp, #12
 800e03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e040:	6812      	ldr	r2, [r2, #0]
 800e042:	3b04      	subs	r3, #4
 800e044:	2a00      	cmp	r2, #0
 800e046:	d1ca      	bne.n	800dfde <quorem+0x9a>
 800e048:	3c01      	subs	r4, #1
 800e04a:	e7c5      	b.n	800dfd8 <quorem+0x94>
 800e04c:	6812      	ldr	r2, [r2, #0]
 800e04e:	3b04      	subs	r3, #4
 800e050:	2a00      	cmp	r2, #0
 800e052:	d1ef      	bne.n	800e034 <quorem+0xf0>
 800e054:	3c01      	subs	r4, #1
 800e056:	e7ea      	b.n	800e02e <quorem+0xea>
 800e058:	2000      	movs	r0, #0
 800e05a:	e7ee      	b.n	800e03a <quorem+0xf6>
 800e05c:	0000      	movs	r0, r0
	...

0800e060 <_dtoa_r>:
 800e060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e064:	ec57 6b10 	vmov	r6, r7, d0
 800e068:	b095      	sub	sp, #84	; 0x54
 800e06a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e06c:	9108      	str	r1, [sp, #32]
 800e06e:	4604      	mov	r4, r0
 800e070:	920a      	str	r2, [sp, #40]	; 0x28
 800e072:	9311      	str	r3, [sp, #68]	; 0x44
 800e074:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800e078:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e07c:	b93d      	cbnz	r5, 800e08e <_dtoa_r+0x2e>
 800e07e:	2010      	movs	r0, #16
 800e080:	f001 f874 	bl	800f16c <malloc>
 800e084:	6260      	str	r0, [r4, #36]	; 0x24
 800e086:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e08a:	6005      	str	r5, [r0, #0]
 800e08c:	60c5      	str	r5, [r0, #12]
 800e08e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e090:	6819      	ldr	r1, [r3, #0]
 800e092:	b151      	cbz	r1, 800e0aa <_dtoa_r+0x4a>
 800e094:	685a      	ldr	r2, [r3, #4]
 800e096:	604a      	str	r2, [r1, #4]
 800e098:	2301      	movs	r3, #1
 800e09a:	4093      	lsls	r3, r2
 800e09c:	608b      	str	r3, [r1, #8]
 800e09e:	4620      	mov	r0, r4
 800e0a0:	f001 f8b2 	bl	800f208 <_Bfree>
 800e0a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	601a      	str	r2, [r3, #0]
 800e0aa:	1e3b      	subs	r3, r7, #0
 800e0ac:	bfb9      	ittee	lt
 800e0ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e0b2:	9303      	strlt	r3, [sp, #12]
 800e0b4:	2300      	movge	r3, #0
 800e0b6:	f8c8 3000 	strge.w	r3, [r8]
 800e0ba:	9d03      	ldr	r5, [sp, #12]
 800e0bc:	4bac      	ldr	r3, [pc, #688]	; (800e370 <_dtoa_r+0x310>)
 800e0be:	bfbc      	itt	lt
 800e0c0:	2201      	movlt	r2, #1
 800e0c2:	f8c8 2000 	strlt.w	r2, [r8]
 800e0c6:	43ab      	bics	r3, r5
 800e0c8:	d11b      	bne.n	800e102 <_dtoa_r+0xa2>
 800e0ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e0cc:	f242 730f 	movw	r3, #9999	; 0x270f
 800e0d0:	6013      	str	r3, [r2, #0]
 800e0d2:	9b02      	ldr	r3, [sp, #8]
 800e0d4:	b923      	cbnz	r3, 800e0e0 <_dtoa_r+0x80>
 800e0d6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e0da:	2d00      	cmp	r5, #0
 800e0dc:	f000 84dd 	beq.w	800ea9a <_dtoa_r+0xa3a>
 800e0e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e0e2:	b953      	cbnz	r3, 800e0fa <_dtoa_r+0x9a>
 800e0e4:	4ba3      	ldr	r3, [pc, #652]	; (800e374 <_dtoa_r+0x314>)
 800e0e6:	e020      	b.n	800e12a <_dtoa_r+0xca>
 800e0e8:	4ba3      	ldr	r3, [pc, #652]	; (800e378 <_dtoa_r+0x318>)
 800e0ea:	9304      	str	r3, [sp, #16]
 800e0ec:	3308      	adds	r3, #8
 800e0ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e0f0:	6013      	str	r3, [r2, #0]
 800e0f2:	9804      	ldr	r0, [sp, #16]
 800e0f4:	b015      	add	sp, #84	; 0x54
 800e0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0fa:	4b9e      	ldr	r3, [pc, #632]	; (800e374 <_dtoa_r+0x314>)
 800e0fc:	9304      	str	r3, [sp, #16]
 800e0fe:	3303      	adds	r3, #3
 800e100:	e7f5      	b.n	800e0ee <_dtoa_r+0x8e>
 800e102:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e106:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e10e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e112:	d10c      	bne.n	800e12e <_dtoa_r+0xce>
 800e114:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e116:	2301      	movs	r3, #1
 800e118:	6013      	str	r3, [r2, #0]
 800e11a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	f000 84b9 	beq.w	800ea94 <_dtoa_r+0xa34>
 800e122:	4b96      	ldr	r3, [pc, #600]	; (800e37c <_dtoa_r+0x31c>)
 800e124:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e126:	6013      	str	r3, [r2, #0]
 800e128:	3b01      	subs	r3, #1
 800e12a:	9304      	str	r3, [sp, #16]
 800e12c:	e7e1      	b.n	800e0f2 <_dtoa_r+0x92>
 800e12e:	a913      	add	r1, sp, #76	; 0x4c
 800e130:	aa12      	add	r2, sp, #72	; 0x48
 800e132:	ed9d 0b04 	vldr	d0, [sp, #16]
 800e136:	4620      	mov	r0, r4
 800e138:	f001 fb74 	bl	800f824 <__d2b>
 800e13c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800e140:	9001      	str	r0, [sp, #4]
 800e142:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e144:	2e00      	cmp	r6, #0
 800e146:	d046      	beq.n	800e1d6 <_dtoa_r+0x176>
 800e148:	9805      	ldr	r0, [sp, #20]
 800e14a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800e14e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e152:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800e156:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e15a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800e15e:	2700      	movs	r7, #0
 800e160:	ee07 aa90 	vmov	s15, sl
 800e164:	ec43 2b16 	vmov	d6, r2, r3
 800e168:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e16c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800e358 <_dtoa_r+0x2f8>
 800e170:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800e174:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e178:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800e360 <_dtoa_r+0x300>
 800e17c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800e180:	eeb0 7b46 	vmov.f64	d7, d6
 800e184:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800e368 <_dtoa_r+0x308>
 800e188:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e18c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e190:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e198:	ee16 ba90 	vmov	fp, s13
 800e19c:	d508      	bpl.n	800e1b0 <_dtoa_r+0x150>
 800e19e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e1a2:	eeb4 6b47 	vcmp.f64	d6, d7
 800e1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1aa:	bf18      	it	ne
 800e1ac:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800e1b0:	f1bb 0f16 	cmp.w	fp, #22
 800e1b4:	d834      	bhi.n	800e220 <_dtoa_r+0x1c0>
 800e1b6:	4b72      	ldr	r3, [pc, #456]	; (800e380 <_dtoa_r+0x320>)
 800e1b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e1bc:	ed93 7b00 	vldr	d7, [r3]
 800e1c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e1c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1cc:	dd01      	ble.n	800e1d2 <_dtoa_r+0x172>
 800e1ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	e025      	b.n	800e222 <_dtoa_r+0x1c2>
 800e1d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e1d8:	eb01 0a03 	add.w	sl, r1, r3
 800e1dc:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800e1e0:	2b20      	cmp	r3, #32
 800e1e2:	dd17      	ble.n	800e214 <_dtoa_r+0x1b4>
 800e1e4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800e1e8:	9a02      	ldr	r2, [sp, #8]
 800e1ea:	409d      	lsls	r5, r3
 800e1ec:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800e1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800e1f4:	432b      	orrs	r3, r5
 800e1f6:	ee07 3a90 	vmov	s15, r3
 800e1fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e1fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e202:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e206:	9805      	ldr	r0, [sp, #20]
 800e208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e20c:	2701      	movs	r7, #1
 800e20e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800e212:	e7a5      	b.n	800e160 <_dtoa_r+0x100>
 800e214:	9a02      	ldr	r2, [sp, #8]
 800e216:	f1c3 0320 	rsb	r3, r3, #32
 800e21a:	fa02 f303 	lsl.w	r3, r2, r3
 800e21e:	e7ea      	b.n	800e1f6 <_dtoa_r+0x196>
 800e220:	2301      	movs	r3, #1
 800e222:	eba1 0a0a 	sub.w	sl, r1, sl
 800e226:	9310      	str	r3, [sp, #64]	; 0x40
 800e228:	f1ba 0301 	subs.w	r3, sl, #1
 800e22c:	9307      	str	r3, [sp, #28]
 800e22e:	bf43      	ittte	mi
 800e230:	2300      	movmi	r3, #0
 800e232:	f1ca 0a01 	rsbmi	sl, sl, #1
 800e236:	9307      	strmi	r3, [sp, #28]
 800e238:	f04f 0a00 	movpl.w	sl, #0
 800e23c:	f1bb 0f00 	cmp.w	fp, #0
 800e240:	db19      	blt.n	800e276 <_dtoa_r+0x216>
 800e242:	9b07      	ldr	r3, [sp, #28]
 800e244:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e248:	445b      	add	r3, fp
 800e24a:	9307      	str	r3, [sp, #28]
 800e24c:	f04f 0800 	mov.w	r8, #0
 800e250:	9b08      	ldr	r3, [sp, #32]
 800e252:	2b09      	cmp	r3, #9
 800e254:	d866      	bhi.n	800e324 <_dtoa_r+0x2c4>
 800e256:	2b05      	cmp	r3, #5
 800e258:	bfc4      	itt	gt
 800e25a:	3b04      	subgt	r3, #4
 800e25c:	9308      	strgt	r3, [sp, #32]
 800e25e:	9b08      	ldr	r3, [sp, #32]
 800e260:	f1a3 0302 	sub.w	r3, r3, #2
 800e264:	bfcc      	ite	gt
 800e266:	2500      	movgt	r5, #0
 800e268:	2501      	movle	r5, #1
 800e26a:	2b03      	cmp	r3, #3
 800e26c:	d866      	bhi.n	800e33c <_dtoa_r+0x2dc>
 800e26e:	e8df f003 	tbb	[pc, r3]
 800e272:	5755      	.short	0x5755
 800e274:	4909      	.short	0x4909
 800e276:	2300      	movs	r3, #0
 800e278:	ebaa 0a0b 	sub.w	sl, sl, fp
 800e27c:	f1cb 0800 	rsb	r8, fp, #0
 800e280:	930b      	str	r3, [sp, #44]	; 0x2c
 800e282:	e7e5      	b.n	800e250 <_dtoa_r+0x1f0>
 800e284:	2301      	movs	r3, #1
 800e286:	9309      	str	r3, [sp, #36]	; 0x24
 800e288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	dd59      	ble.n	800e342 <_dtoa_r+0x2e2>
 800e28e:	9306      	str	r3, [sp, #24]
 800e290:	4699      	mov	r9, r3
 800e292:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e294:	2200      	movs	r2, #0
 800e296:	6072      	str	r2, [r6, #4]
 800e298:	2204      	movs	r2, #4
 800e29a:	f102 0014 	add.w	r0, r2, #20
 800e29e:	4298      	cmp	r0, r3
 800e2a0:	6871      	ldr	r1, [r6, #4]
 800e2a2:	d953      	bls.n	800e34c <_dtoa_r+0x2ec>
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f000 ff7b 	bl	800f1a0 <_Balloc>
 800e2aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2ac:	6030      	str	r0, [r6, #0]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	9304      	str	r3, [sp, #16]
 800e2b2:	f1b9 0f0e 	cmp.w	r9, #14
 800e2b6:	f200 80c2 	bhi.w	800e43e <_dtoa_r+0x3de>
 800e2ba:	2d00      	cmp	r5, #0
 800e2bc:	f000 80bf 	beq.w	800e43e <_dtoa_r+0x3de>
 800e2c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e2c4:	f1bb 0f00 	cmp.w	fp, #0
 800e2c8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800e2cc:	f340 80e6 	ble.w	800e49c <_dtoa_r+0x43c>
 800e2d0:	4a2b      	ldr	r2, [pc, #172]	; (800e380 <_dtoa_r+0x320>)
 800e2d2:	f00b 030f 	and.w	r3, fp, #15
 800e2d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e2da:	ed93 7b00 	vldr	d7, [r3]
 800e2de:	ea4f 132b 	mov.w	r3, fp, asr #4
 800e2e2:	06da      	lsls	r2, r3, #27
 800e2e4:	f140 80d8 	bpl.w	800e498 <_dtoa_r+0x438>
 800e2e8:	4a26      	ldr	r2, [pc, #152]	; (800e384 <_dtoa_r+0x324>)
 800e2ea:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800e2ee:	ed92 6b08 	vldr	d6, [r2, #32]
 800e2f2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800e2f6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e2fa:	f003 030f 	and.w	r3, r3, #15
 800e2fe:	2203      	movs	r2, #3
 800e300:	4920      	ldr	r1, [pc, #128]	; (800e384 <_dtoa_r+0x324>)
 800e302:	e04a      	b.n	800e39a <_dtoa_r+0x33a>
 800e304:	2301      	movs	r3, #1
 800e306:	9309      	str	r3, [sp, #36]	; 0x24
 800e308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e30a:	445b      	add	r3, fp
 800e30c:	f103 0901 	add.w	r9, r3, #1
 800e310:	9306      	str	r3, [sp, #24]
 800e312:	464b      	mov	r3, r9
 800e314:	2b01      	cmp	r3, #1
 800e316:	bfb8      	it	lt
 800e318:	2301      	movlt	r3, #1
 800e31a:	e7ba      	b.n	800e292 <_dtoa_r+0x232>
 800e31c:	2300      	movs	r3, #0
 800e31e:	e7b2      	b.n	800e286 <_dtoa_r+0x226>
 800e320:	2300      	movs	r3, #0
 800e322:	e7f0      	b.n	800e306 <_dtoa_r+0x2a6>
 800e324:	2501      	movs	r5, #1
 800e326:	2300      	movs	r3, #0
 800e328:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800e32c:	f04f 33ff 	mov.w	r3, #4294967295
 800e330:	9306      	str	r3, [sp, #24]
 800e332:	4699      	mov	r9, r3
 800e334:	2200      	movs	r2, #0
 800e336:	2312      	movs	r3, #18
 800e338:	920a      	str	r2, [sp, #40]	; 0x28
 800e33a:	e7aa      	b.n	800e292 <_dtoa_r+0x232>
 800e33c:	2301      	movs	r3, #1
 800e33e:	9309      	str	r3, [sp, #36]	; 0x24
 800e340:	e7f4      	b.n	800e32c <_dtoa_r+0x2cc>
 800e342:	2301      	movs	r3, #1
 800e344:	9306      	str	r3, [sp, #24]
 800e346:	4699      	mov	r9, r3
 800e348:	461a      	mov	r2, r3
 800e34a:	e7f5      	b.n	800e338 <_dtoa_r+0x2d8>
 800e34c:	3101      	adds	r1, #1
 800e34e:	6071      	str	r1, [r6, #4]
 800e350:	0052      	lsls	r2, r2, #1
 800e352:	e7a2      	b.n	800e29a <_dtoa_r+0x23a>
 800e354:	f3af 8000 	nop.w
 800e358:	636f4361 	.word	0x636f4361
 800e35c:	3fd287a7 	.word	0x3fd287a7
 800e360:	8b60c8b3 	.word	0x8b60c8b3
 800e364:	3fc68a28 	.word	0x3fc68a28
 800e368:	509f79fb 	.word	0x509f79fb
 800e36c:	3fd34413 	.word	0x3fd34413
 800e370:	7ff00000 	.word	0x7ff00000
 800e374:	08010069 	.word	0x08010069
 800e378:	08010060 	.word	0x08010060
 800e37c:	0800ffe5 	.word	0x0800ffe5
 800e380:	080100a0 	.word	0x080100a0
 800e384:	08010078 	.word	0x08010078
 800e388:	07de      	lsls	r6, r3, #31
 800e38a:	d504      	bpl.n	800e396 <_dtoa_r+0x336>
 800e38c:	ed91 6b00 	vldr	d6, [r1]
 800e390:	3201      	adds	r2, #1
 800e392:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e396:	105b      	asrs	r3, r3, #1
 800e398:	3108      	adds	r1, #8
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d1f4      	bne.n	800e388 <_dtoa_r+0x328>
 800e39e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e3a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e3a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e3aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	f000 80a7 	beq.w	800e500 <_dtoa_r+0x4a0>
 800e3b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e3b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e3ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c2:	f140 809d 	bpl.w	800e500 <_dtoa_r+0x4a0>
 800e3c6:	f1b9 0f00 	cmp.w	r9, #0
 800e3ca:	f000 8099 	beq.w	800e500 <_dtoa_r+0x4a0>
 800e3ce:	9b06      	ldr	r3, [sp, #24]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	dd30      	ble.n	800e436 <_dtoa_r+0x3d6>
 800e3d4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e3d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e3dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e3e0:	9d06      	ldr	r5, [sp, #24]
 800e3e2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e3e6:	3201      	adds	r2, #1
 800e3e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e3ec:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e3f0:	ee07 2a90 	vmov	s15, r2
 800e3f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e3f8:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e3fc:	ed8d 5b02 	vstr	d5, [sp, #8]
 800e400:	9a03      	ldr	r2, [sp, #12]
 800e402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e406:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800e40a:	2d00      	cmp	r5, #0
 800e40c:	d17b      	bne.n	800e506 <_dtoa_r+0x4a6>
 800e40e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e412:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e416:	ec41 0b17 	vmov	d7, r0, r1
 800e41a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e422:	f300 8253 	bgt.w	800e8cc <_dtoa_r+0x86c>
 800e426:	eeb1 7b47 	vneg.f64	d7, d7
 800e42a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e432:	f100 8249 	bmi.w	800e8c8 <_dtoa_r+0x868>
 800e436:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e43a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e43e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e440:	2b00      	cmp	r3, #0
 800e442:	f2c0 8119 	blt.w	800e678 <_dtoa_r+0x618>
 800e446:	f1bb 0f0e 	cmp.w	fp, #14
 800e44a:	f300 8115 	bgt.w	800e678 <_dtoa_r+0x618>
 800e44e:	4bc3      	ldr	r3, [pc, #780]	; (800e75c <_dtoa_r+0x6fc>)
 800e450:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e454:	ed93 6b00 	vldr	d6, [r3]
 800e458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	f280 80ba 	bge.w	800e5d4 <_dtoa_r+0x574>
 800e460:	f1b9 0f00 	cmp.w	r9, #0
 800e464:	f300 80b6 	bgt.w	800e5d4 <_dtoa_r+0x574>
 800e468:	f040 822d 	bne.w	800e8c6 <_dtoa_r+0x866>
 800e46c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e470:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e474:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e478:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e480:	464d      	mov	r5, r9
 800e482:	464f      	mov	r7, r9
 800e484:	f280 8204 	bge.w	800e890 <_dtoa_r+0x830>
 800e488:	9b04      	ldr	r3, [sp, #16]
 800e48a:	9a04      	ldr	r2, [sp, #16]
 800e48c:	1c5e      	adds	r6, r3, #1
 800e48e:	2331      	movs	r3, #49	; 0x31
 800e490:	7013      	strb	r3, [r2, #0]
 800e492:	f10b 0b01 	add.w	fp, fp, #1
 800e496:	e1ff      	b.n	800e898 <_dtoa_r+0x838>
 800e498:	2202      	movs	r2, #2
 800e49a:	e731      	b.n	800e300 <_dtoa_r+0x2a0>
 800e49c:	d02e      	beq.n	800e4fc <_dtoa_r+0x49c>
 800e49e:	f1cb 0300 	rsb	r3, fp, #0
 800e4a2:	4aae      	ldr	r2, [pc, #696]	; (800e75c <_dtoa_r+0x6fc>)
 800e4a4:	f003 010f 	and.w	r1, r3, #15
 800e4a8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e4ac:	ed92 7b00 	vldr	d7, [r2]
 800e4b0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800e4b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e4b8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e4bc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800e4c0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e4c4:	49a6      	ldr	r1, [pc, #664]	; (800e760 <_dtoa_r+0x700>)
 800e4c6:	111b      	asrs	r3, r3, #4
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	2202      	movs	r2, #2
 800e4cc:	b93b      	cbnz	r3, 800e4de <_dtoa_r+0x47e>
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	f43f af6b 	beq.w	800e3aa <_dtoa_r+0x34a>
 800e4d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e4d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4dc:	e765      	b.n	800e3aa <_dtoa_r+0x34a>
 800e4de:	07dd      	lsls	r5, r3, #31
 800e4e0:	d509      	bpl.n	800e4f6 <_dtoa_r+0x496>
 800e4e2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800e4e6:	ed91 7b00 	vldr	d7, [r1]
 800e4ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e4ee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e4f2:	3201      	adds	r2, #1
 800e4f4:	2001      	movs	r0, #1
 800e4f6:	105b      	asrs	r3, r3, #1
 800e4f8:	3108      	adds	r1, #8
 800e4fa:	e7e7      	b.n	800e4cc <_dtoa_r+0x46c>
 800e4fc:	2202      	movs	r2, #2
 800e4fe:	e754      	b.n	800e3aa <_dtoa_r+0x34a>
 800e500:	465b      	mov	r3, fp
 800e502:	464d      	mov	r5, r9
 800e504:	e770      	b.n	800e3e8 <_dtoa_r+0x388>
 800e506:	4a95      	ldr	r2, [pc, #596]	; (800e75c <_dtoa_r+0x6fc>)
 800e508:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800e50c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e512:	ec41 0b17 	vmov	d7, r0, r1
 800e516:	b35a      	cbz	r2, 800e570 <_dtoa_r+0x510>
 800e518:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e51c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e520:	9e04      	ldr	r6, [sp, #16]
 800e522:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e526:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e52a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e52e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e532:	ee14 2a90 	vmov	r2, s9
 800e536:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e53a:	3230      	adds	r2, #48	; 0x30
 800e53c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e540:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e548:	f806 2b01 	strb.w	r2, [r6], #1
 800e54c:	d43b      	bmi.n	800e5c6 <_dtoa_r+0x566>
 800e54e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e552:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e55a:	d472      	bmi.n	800e642 <_dtoa_r+0x5e2>
 800e55c:	9a04      	ldr	r2, [sp, #16]
 800e55e:	1ab2      	subs	r2, r6, r2
 800e560:	4295      	cmp	r5, r2
 800e562:	f77f af68 	ble.w	800e436 <_dtoa_r+0x3d6>
 800e566:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e56a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e56e:	e7de      	b.n	800e52e <_dtoa_r+0x4ce>
 800e570:	9a04      	ldr	r2, [sp, #16]
 800e572:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e576:	1956      	adds	r6, r2, r5
 800e578:	4611      	mov	r1, r2
 800e57a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e57e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e582:	ee14 2a90 	vmov	r2, s9
 800e586:	3230      	adds	r2, #48	; 0x30
 800e588:	f801 2b01 	strb.w	r2, [r1], #1
 800e58c:	42b1      	cmp	r1, r6
 800e58e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e592:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e596:	d11a      	bne.n	800e5ce <_dtoa_r+0x56e>
 800e598:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e59c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e5a0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5a8:	dc4b      	bgt.n	800e642 <_dtoa_r+0x5e2>
 800e5aa:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e5ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5b6:	f57f af3e 	bpl.w	800e436 <_dtoa_r+0x3d6>
 800e5ba:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e5be:	2a30      	cmp	r2, #48	; 0x30
 800e5c0:	f106 31ff 	add.w	r1, r6, #4294967295
 800e5c4:	d001      	beq.n	800e5ca <_dtoa_r+0x56a>
 800e5c6:	469b      	mov	fp, r3
 800e5c8:	e02a      	b.n	800e620 <_dtoa_r+0x5c0>
 800e5ca:	460e      	mov	r6, r1
 800e5cc:	e7f5      	b.n	800e5ba <_dtoa_r+0x55a>
 800e5ce:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e5d2:	e7d4      	b.n	800e57e <_dtoa_r+0x51e>
 800e5d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e5d8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e5dc:	9e04      	ldr	r6, [sp, #16]
 800e5de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e5e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e5e6:	ee15 3a10 	vmov	r3, s10
 800e5ea:	3330      	adds	r3, #48	; 0x30
 800e5ec:	f806 3b01 	strb.w	r3, [r6], #1
 800e5f0:	9b04      	ldr	r3, [sp, #16]
 800e5f2:	1af3      	subs	r3, r6, r3
 800e5f4:	4599      	cmp	r9, r3
 800e5f6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e5fa:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e5fe:	d133      	bne.n	800e668 <_dtoa_r+0x608>
 800e600:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e604:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e60c:	dc18      	bgt.n	800e640 <_dtoa_r+0x5e0>
 800e60e:	eeb4 7b46 	vcmp.f64	d7, d6
 800e612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e616:	d103      	bne.n	800e620 <_dtoa_r+0x5c0>
 800e618:	ee15 3a10 	vmov	r3, s10
 800e61c:	07db      	lsls	r3, r3, #31
 800e61e:	d40f      	bmi.n	800e640 <_dtoa_r+0x5e0>
 800e620:	9901      	ldr	r1, [sp, #4]
 800e622:	4620      	mov	r0, r4
 800e624:	f000 fdf0 	bl	800f208 <_Bfree>
 800e628:	2300      	movs	r3, #0
 800e62a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e62c:	7033      	strb	r3, [r6, #0]
 800e62e:	f10b 0301 	add.w	r3, fp, #1
 800e632:	6013      	str	r3, [r2, #0]
 800e634:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e636:	2b00      	cmp	r3, #0
 800e638:	f43f ad5b 	beq.w	800e0f2 <_dtoa_r+0x92>
 800e63c:	601e      	str	r6, [r3, #0]
 800e63e:	e558      	b.n	800e0f2 <_dtoa_r+0x92>
 800e640:	465b      	mov	r3, fp
 800e642:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e646:	2939      	cmp	r1, #57	; 0x39
 800e648:	f106 32ff 	add.w	r2, r6, #4294967295
 800e64c:	d106      	bne.n	800e65c <_dtoa_r+0x5fc>
 800e64e:	9904      	ldr	r1, [sp, #16]
 800e650:	4291      	cmp	r1, r2
 800e652:	d107      	bne.n	800e664 <_dtoa_r+0x604>
 800e654:	2230      	movs	r2, #48	; 0x30
 800e656:	700a      	strb	r2, [r1, #0]
 800e658:	3301      	adds	r3, #1
 800e65a:	460a      	mov	r2, r1
 800e65c:	7811      	ldrb	r1, [r2, #0]
 800e65e:	3101      	adds	r1, #1
 800e660:	7011      	strb	r1, [r2, #0]
 800e662:	e7b0      	b.n	800e5c6 <_dtoa_r+0x566>
 800e664:	4616      	mov	r6, r2
 800e666:	e7ec      	b.n	800e642 <_dtoa_r+0x5e2>
 800e668:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e66c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e674:	d1b3      	bne.n	800e5de <_dtoa_r+0x57e>
 800e676:	e7d3      	b.n	800e620 <_dtoa_r+0x5c0>
 800e678:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e67a:	2a00      	cmp	r2, #0
 800e67c:	f000 808d 	beq.w	800e79a <_dtoa_r+0x73a>
 800e680:	9a08      	ldr	r2, [sp, #32]
 800e682:	2a01      	cmp	r2, #1
 800e684:	dc72      	bgt.n	800e76c <_dtoa_r+0x70c>
 800e686:	2f00      	cmp	r7, #0
 800e688:	d06c      	beq.n	800e764 <_dtoa_r+0x704>
 800e68a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e68e:	4645      	mov	r5, r8
 800e690:	4656      	mov	r6, sl
 800e692:	9a07      	ldr	r2, [sp, #28]
 800e694:	2101      	movs	r1, #1
 800e696:	441a      	add	r2, r3
 800e698:	4620      	mov	r0, r4
 800e69a:	449a      	add	sl, r3
 800e69c:	9207      	str	r2, [sp, #28]
 800e69e:	f000 fe91 	bl	800f3c4 <__i2b>
 800e6a2:	4607      	mov	r7, r0
 800e6a4:	2e00      	cmp	r6, #0
 800e6a6:	dd0b      	ble.n	800e6c0 <_dtoa_r+0x660>
 800e6a8:	9b07      	ldr	r3, [sp, #28]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	dd08      	ble.n	800e6c0 <_dtoa_r+0x660>
 800e6ae:	42b3      	cmp	r3, r6
 800e6b0:	9a07      	ldr	r2, [sp, #28]
 800e6b2:	bfa8      	it	ge
 800e6b4:	4633      	movge	r3, r6
 800e6b6:	ebaa 0a03 	sub.w	sl, sl, r3
 800e6ba:	1af6      	subs	r6, r6, r3
 800e6bc:	1ad3      	subs	r3, r2, r3
 800e6be:	9307      	str	r3, [sp, #28]
 800e6c0:	f1b8 0f00 	cmp.w	r8, #0
 800e6c4:	d01d      	beq.n	800e702 <_dtoa_r+0x6a2>
 800e6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d06a      	beq.n	800e7a2 <_dtoa_r+0x742>
 800e6cc:	b18d      	cbz	r5, 800e6f2 <_dtoa_r+0x692>
 800e6ce:	4639      	mov	r1, r7
 800e6d0:	462a      	mov	r2, r5
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	f000 ff16 	bl	800f504 <__pow5mult>
 800e6d8:	9a01      	ldr	r2, [sp, #4]
 800e6da:	4601      	mov	r1, r0
 800e6dc:	4607      	mov	r7, r0
 800e6de:	4620      	mov	r0, r4
 800e6e0:	f000 fe79 	bl	800f3d6 <__multiply>
 800e6e4:	9901      	ldr	r1, [sp, #4]
 800e6e6:	900c      	str	r0, [sp, #48]	; 0x30
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	f000 fd8d 	bl	800f208 <_Bfree>
 800e6ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e6f0:	9301      	str	r3, [sp, #4]
 800e6f2:	ebb8 0205 	subs.w	r2, r8, r5
 800e6f6:	d004      	beq.n	800e702 <_dtoa_r+0x6a2>
 800e6f8:	9901      	ldr	r1, [sp, #4]
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f000 ff02 	bl	800f504 <__pow5mult>
 800e700:	9001      	str	r0, [sp, #4]
 800e702:	2101      	movs	r1, #1
 800e704:	4620      	mov	r0, r4
 800e706:	f000 fe5d 	bl	800f3c4 <__i2b>
 800e70a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e70c:	4605      	mov	r5, r0
 800e70e:	2b00      	cmp	r3, #0
 800e710:	f000 81ca 	beq.w	800eaa8 <_dtoa_r+0xa48>
 800e714:	461a      	mov	r2, r3
 800e716:	4601      	mov	r1, r0
 800e718:	4620      	mov	r0, r4
 800e71a:	f000 fef3 	bl	800f504 <__pow5mult>
 800e71e:	9b08      	ldr	r3, [sp, #32]
 800e720:	2b01      	cmp	r3, #1
 800e722:	4605      	mov	r5, r0
 800e724:	dc44      	bgt.n	800e7b0 <_dtoa_r+0x750>
 800e726:	9b02      	ldr	r3, [sp, #8]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d13c      	bne.n	800e7a6 <_dtoa_r+0x746>
 800e72c:	9b03      	ldr	r3, [sp, #12]
 800e72e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e732:	2b00      	cmp	r3, #0
 800e734:	d137      	bne.n	800e7a6 <_dtoa_r+0x746>
 800e736:	9b03      	ldr	r3, [sp, #12]
 800e738:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e73c:	0d1b      	lsrs	r3, r3, #20
 800e73e:	051b      	lsls	r3, r3, #20
 800e740:	2b00      	cmp	r3, #0
 800e742:	d033      	beq.n	800e7ac <_dtoa_r+0x74c>
 800e744:	9b07      	ldr	r3, [sp, #28]
 800e746:	3301      	adds	r3, #1
 800e748:	f10a 0a01 	add.w	sl, sl, #1
 800e74c:	9307      	str	r3, [sp, #28]
 800e74e:	f04f 0801 	mov.w	r8, #1
 800e752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e754:	bb73      	cbnz	r3, 800e7b4 <_dtoa_r+0x754>
 800e756:	2001      	movs	r0, #1
 800e758:	e034      	b.n	800e7c4 <_dtoa_r+0x764>
 800e75a:	bf00      	nop
 800e75c:	080100a0 	.word	0x080100a0
 800e760:	08010078 	.word	0x08010078
 800e764:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e766:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e76a:	e790      	b.n	800e68e <_dtoa_r+0x62e>
 800e76c:	f109 35ff 	add.w	r5, r9, #4294967295
 800e770:	45a8      	cmp	r8, r5
 800e772:	bfbf      	itttt	lt
 800e774:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800e776:	eba5 0808 	sublt.w	r8, r5, r8
 800e77a:	4443      	addlt	r3, r8
 800e77c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800e77e:	bfb6      	itet	lt
 800e780:	46a8      	movlt	r8, r5
 800e782:	eba8 0505 	subge.w	r5, r8, r5
 800e786:	2500      	movlt	r5, #0
 800e788:	f1b9 0f00 	cmp.w	r9, #0
 800e78c:	bfb9      	ittee	lt
 800e78e:	ebaa 0609 	sublt.w	r6, sl, r9
 800e792:	2300      	movlt	r3, #0
 800e794:	4656      	movge	r6, sl
 800e796:	464b      	movge	r3, r9
 800e798:	e77b      	b.n	800e692 <_dtoa_r+0x632>
 800e79a:	4645      	mov	r5, r8
 800e79c:	4656      	mov	r6, sl
 800e79e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e7a0:	e780      	b.n	800e6a4 <_dtoa_r+0x644>
 800e7a2:	4642      	mov	r2, r8
 800e7a4:	e7a8      	b.n	800e6f8 <_dtoa_r+0x698>
 800e7a6:	f04f 0800 	mov.w	r8, #0
 800e7aa:	e7d2      	b.n	800e752 <_dtoa_r+0x6f2>
 800e7ac:	4698      	mov	r8, r3
 800e7ae:	e7d0      	b.n	800e752 <_dtoa_r+0x6f2>
 800e7b0:	f04f 0800 	mov.w	r8, #0
 800e7b4:	692b      	ldr	r3, [r5, #16]
 800e7b6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e7ba:	6918      	ldr	r0, [r3, #16]
 800e7bc:	f000 fdb4 	bl	800f328 <__hi0bits>
 800e7c0:	f1c0 0020 	rsb	r0, r0, #32
 800e7c4:	9b07      	ldr	r3, [sp, #28]
 800e7c6:	4418      	add	r0, r3
 800e7c8:	f010 001f 	ands.w	r0, r0, #31
 800e7cc:	d047      	beq.n	800e85e <_dtoa_r+0x7fe>
 800e7ce:	f1c0 0320 	rsb	r3, r0, #32
 800e7d2:	2b04      	cmp	r3, #4
 800e7d4:	dd3b      	ble.n	800e84e <_dtoa_r+0x7ee>
 800e7d6:	9b07      	ldr	r3, [sp, #28]
 800e7d8:	f1c0 001c 	rsb	r0, r0, #28
 800e7dc:	4482      	add	sl, r0
 800e7de:	4406      	add	r6, r0
 800e7e0:	4403      	add	r3, r0
 800e7e2:	9307      	str	r3, [sp, #28]
 800e7e4:	f1ba 0f00 	cmp.w	sl, #0
 800e7e8:	dd05      	ble.n	800e7f6 <_dtoa_r+0x796>
 800e7ea:	4652      	mov	r2, sl
 800e7ec:	9901      	ldr	r1, [sp, #4]
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	f000 fed6 	bl	800f5a0 <__lshift>
 800e7f4:	9001      	str	r0, [sp, #4]
 800e7f6:	9b07      	ldr	r3, [sp, #28]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	dd05      	ble.n	800e808 <_dtoa_r+0x7a8>
 800e7fc:	4629      	mov	r1, r5
 800e7fe:	461a      	mov	r2, r3
 800e800:	4620      	mov	r0, r4
 800e802:	f000 fecd 	bl	800f5a0 <__lshift>
 800e806:	4605      	mov	r5, r0
 800e808:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e80a:	b353      	cbz	r3, 800e862 <_dtoa_r+0x802>
 800e80c:	4629      	mov	r1, r5
 800e80e:	9801      	ldr	r0, [sp, #4]
 800e810:	f000 ff1a 	bl	800f648 <__mcmp>
 800e814:	2800      	cmp	r0, #0
 800e816:	da24      	bge.n	800e862 <_dtoa_r+0x802>
 800e818:	2300      	movs	r3, #0
 800e81a:	220a      	movs	r2, #10
 800e81c:	9901      	ldr	r1, [sp, #4]
 800e81e:	4620      	mov	r0, r4
 800e820:	f000 fd09 	bl	800f236 <__multadd>
 800e824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e826:	9001      	str	r0, [sp, #4]
 800e828:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	f000 8142 	beq.w	800eab6 <_dtoa_r+0xa56>
 800e832:	2300      	movs	r3, #0
 800e834:	4639      	mov	r1, r7
 800e836:	220a      	movs	r2, #10
 800e838:	4620      	mov	r0, r4
 800e83a:	f000 fcfc 	bl	800f236 <__multadd>
 800e83e:	9b06      	ldr	r3, [sp, #24]
 800e840:	2b00      	cmp	r3, #0
 800e842:	4607      	mov	r7, r0
 800e844:	dc4b      	bgt.n	800e8de <_dtoa_r+0x87e>
 800e846:	9b08      	ldr	r3, [sp, #32]
 800e848:	2b02      	cmp	r3, #2
 800e84a:	dd48      	ble.n	800e8de <_dtoa_r+0x87e>
 800e84c:	e011      	b.n	800e872 <_dtoa_r+0x812>
 800e84e:	d0c9      	beq.n	800e7e4 <_dtoa_r+0x784>
 800e850:	9a07      	ldr	r2, [sp, #28]
 800e852:	331c      	adds	r3, #28
 800e854:	441a      	add	r2, r3
 800e856:	449a      	add	sl, r3
 800e858:	441e      	add	r6, r3
 800e85a:	4613      	mov	r3, r2
 800e85c:	e7c1      	b.n	800e7e2 <_dtoa_r+0x782>
 800e85e:	4603      	mov	r3, r0
 800e860:	e7f6      	b.n	800e850 <_dtoa_r+0x7f0>
 800e862:	f1b9 0f00 	cmp.w	r9, #0
 800e866:	dc34      	bgt.n	800e8d2 <_dtoa_r+0x872>
 800e868:	9b08      	ldr	r3, [sp, #32]
 800e86a:	2b02      	cmp	r3, #2
 800e86c:	dd31      	ble.n	800e8d2 <_dtoa_r+0x872>
 800e86e:	f8cd 9018 	str.w	r9, [sp, #24]
 800e872:	9b06      	ldr	r3, [sp, #24]
 800e874:	b963      	cbnz	r3, 800e890 <_dtoa_r+0x830>
 800e876:	4629      	mov	r1, r5
 800e878:	2205      	movs	r2, #5
 800e87a:	4620      	mov	r0, r4
 800e87c:	f000 fcdb 	bl	800f236 <__multadd>
 800e880:	4601      	mov	r1, r0
 800e882:	4605      	mov	r5, r0
 800e884:	9801      	ldr	r0, [sp, #4]
 800e886:	f000 fedf 	bl	800f648 <__mcmp>
 800e88a:	2800      	cmp	r0, #0
 800e88c:	f73f adfc 	bgt.w	800e488 <_dtoa_r+0x428>
 800e890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e892:	9e04      	ldr	r6, [sp, #16]
 800e894:	ea6f 0b03 	mvn.w	fp, r3
 800e898:	f04f 0900 	mov.w	r9, #0
 800e89c:	4629      	mov	r1, r5
 800e89e:	4620      	mov	r0, r4
 800e8a0:	f000 fcb2 	bl	800f208 <_Bfree>
 800e8a4:	2f00      	cmp	r7, #0
 800e8a6:	f43f aebb 	beq.w	800e620 <_dtoa_r+0x5c0>
 800e8aa:	f1b9 0f00 	cmp.w	r9, #0
 800e8ae:	d005      	beq.n	800e8bc <_dtoa_r+0x85c>
 800e8b0:	45b9      	cmp	r9, r7
 800e8b2:	d003      	beq.n	800e8bc <_dtoa_r+0x85c>
 800e8b4:	4649      	mov	r1, r9
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	f000 fca6 	bl	800f208 <_Bfree>
 800e8bc:	4639      	mov	r1, r7
 800e8be:	4620      	mov	r0, r4
 800e8c0:	f000 fca2 	bl	800f208 <_Bfree>
 800e8c4:	e6ac      	b.n	800e620 <_dtoa_r+0x5c0>
 800e8c6:	2500      	movs	r5, #0
 800e8c8:	462f      	mov	r7, r5
 800e8ca:	e7e1      	b.n	800e890 <_dtoa_r+0x830>
 800e8cc:	469b      	mov	fp, r3
 800e8ce:	462f      	mov	r7, r5
 800e8d0:	e5da      	b.n	800e488 <_dtoa_r+0x428>
 800e8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8d4:	f8cd 9018 	str.w	r9, [sp, #24]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	f000 80f3 	beq.w	800eac4 <_dtoa_r+0xa64>
 800e8de:	2e00      	cmp	r6, #0
 800e8e0:	dd05      	ble.n	800e8ee <_dtoa_r+0x88e>
 800e8e2:	4639      	mov	r1, r7
 800e8e4:	4632      	mov	r2, r6
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	f000 fe5a 	bl	800f5a0 <__lshift>
 800e8ec:	4607      	mov	r7, r0
 800e8ee:	f1b8 0f00 	cmp.w	r8, #0
 800e8f2:	d04c      	beq.n	800e98e <_dtoa_r+0x92e>
 800e8f4:	6879      	ldr	r1, [r7, #4]
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	f000 fc52 	bl	800f1a0 <_Balloc>
 800e8fc:	693a      	ldr	r2, [r7, #16]
 800e8fe:	3202      	adds	r2, #2
 800e900:	4606      	mov	r6, r0
 800e902:	0092      	lsls	r2, r2, #2
 800e904:	f107 010c 	add.w	r1, r7, #12
 800e908:	300c      	adds	r0, #12
 800e90a:	f7fd fe51 	bl	800c5b0 <memcpy>
 800e90e:	2201      	movs	r2, #1
 800e910:	4631      	mov	r1, r6
 800e912:	4620      	mov	r0, r4
 800e914:	f000 fe44 	bl	800f5a0 <__lshift>
 800e918:	9b02      	ldr	r3, [sp, #8]
 800e91a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e91e:	f003 0301 	and.w	r3, r3, #1
 800e922:	46b9      	mov	r9, r7
 800e924:	9307      	str	r3, [sp, #28]
 800e926:	4607      	mov	r7, r0
 800e928:	4629      	mov	r1, r5
 800e92a:	9801      	ldr	r0, [sp, #4]
 800e92c:	f7ff fb0a 	bl	800df44 <quorem>
 800e930:	4649      	mov	r1, r9
 800e932:	4606      	mov	r6, r0
 800e934:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e938:	9801      	ldr	r0, [sp, #4]
 800e93a:	f000 fe85 	bl	800f648 <__mcmp>
 800e93e:	463a      	mov	r2, r7
 800e940:	9002      	str	r0, [sp, #8]
 800e942:	4629      	mov	r1, r5
 800e944:	4620      	mov	r0, r4
 800e946:	f000 fe99 	bl	800f67c <__mdiff>
 800e94a:	68c3      	ldr	r3, [r0, #12]
 800e94c:	4602      	mov	r2, r0
 800e94e:	bb03      	cbnz	r3, 800e992 <_dtoa_r+0x932>
 800e950:	4601      	mov	r1, r0
 800e952:	9009      	str	r0, [sp, #36]	; 0x24
 800e954:	9801      	ldr	r0, [sp, #4]
 800e956:	f000 fe77 	bl	800f648 <__mcmp>
 800e95a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e95c:	4603      	mov	r3, r0
 800e95e:	4611      	mov	r1, r2
 800e960:	4620      	mov	r0, r4
 800e962:	9309      	str	r3, [sp, #36]	; 0x24
 800e964:	f000 fc50 	bl	800f208 <_Bfree>
 800e968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e96a:	b9a3      	cbnz	r3, 800e996 <_dtoa_r+0x936>
 800e96c:	9a08      	ldr	r2, [sp, #32]
 800e96e:	b992      	cbnz	r2, 800e996 <_dtoa_r+0x936>
 800e970:	9a07      	ldr	r2, [sp, #28]
 800e972:	b982      	cbnz	r2, 800e996 <_dtoa_r+0x936>
 800e974:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e978:	d029      	beq.n	800e9ce <_dtoa_r+0x96e>
 800e97a:	9b02      	ldr	r3, [sp, #8]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	dd01      	ble.n	800e984 <_dtoa_r+0x924>
 800e980:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800e984:	f10a 0601 	add.w	r6, sl, #1
 800e988:	f88a 8000 	strb.w	r8, [sl]
 800e98c:	e786      	b.n	800e89c <_dtoa_r+0x83c>
 800e98e:	4638      	mov	r0, r7
 800e990:	e7c2      	b.n	800e918 <_dtoa_r+0x8b8>
 800e992:	2301      	movs	r3, #1
 800e994:	e7e3      	b.n	800e95e <_dtoa_r+0x8fe>
 800e996:	9a02      	ldr	r2, [sp, #8]
 800e998:	2a00      	cmp	r2, #0
 800e99a:	db04      	blt.n	800e9a6 <_dtoa_r+0x946>
 800e99c:	d124      	bne.n	800e9e8 <_dtoa_r+0x988>
 800e99e:	9a08      	ldr	r2, [sp, #32]
 800e9a0:	bb12      	cbnz	r2, 800e9e8 <_dtoa_r+0x988>
 800e9a2:	9a07      	ldr	r2, [sp, #28]
 800e9a4:	bb02      	cbnz	r2, 800e9e8 <_dtoa_r+0x988>
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	ddec      	ble.n	800e984 <_dtoa_r+0x924>
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	9901      	ldr	r1, [sp, #4]
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	f000 fdf6 	bl	800f5a0 <__lshift>
 800e9b4:	4629      	mov	r1, r5
 800e9b6:	9001      	str	r0, [sp, #4]
 800e9b8:	f000 fe46 	bl	800f648 <__mcmp>
 800e9bc:	2800      	cmp	r0, #0
 800e9be:	dc03      	bgt.n	800e9c8 <_dtoa_r+0x968>
 800e9c0:	d1e0      	bne.n	800e984 <_dtoa_r+0x924>
 800e9c2:	f018 0f01 	tst.w	r8, #1
 800e9c6:	d0dd      	beq.n	800e984 <_dtoa_r+0x924>
 800e9c8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e9cc:	d1d8      	bne.n	800e980 <_dtoa_r+0x920>
 800e9ce:	2339      	movs	r3, #57	; 0x39
 800e9d0:	f10a 0601 	add.w	r6, sl, #1
 800e9d4:	f88a 3000 	strb.w	r3, [sl]
 800e9d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e9dc:	2b39      	cmp	r3, #57	; 0x39
 800e9de:	f106 32ff 	add.w	r2, r6, #4294967295
 800e9e2:	d04c      	beq.n	800ea7e <_dtoa_r+0xa1e>
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	e051      	b.n	800ea8c <_dtoa_r+0xa2c>
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	f10a 0601 	add.w	r6, sl, #1
 800e9ee:	dd05      	ble.n	800e9fc <_dtoa_r+0x99c>
 800e9f0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e9f4:	d0eb      	beq.n	800e9ce <_dtoa_r+0x96e>
 800e9f6:	f108 0801 	add.w	r8, r8, #1
 800e9fa:	e7c5      	b.n	800e988 <_dtoa_r+0x928>
 800e9fc:	9b04      	ldr	r3, [sp, #16]
 800e9fe:	9a06      	ldr	r2, [sp, #24]
 800ea00:	f806 8c01 	strb.w	r8, [r6, #-1]
 800ea04:	1af3      	subs	r3, r6, r3
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d021      	beq.n	800ea4e <_dtoa_r+0x9ee>
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	220a      	movs	r2, #10
 800ea0e:	9901      	ldr	r1, [sp, #4]
 800ea10:	4620      	mov	r0, r4
 800ea12:	f000 fc10 	bl	800f236 <__multadd>
 800ea16:	45b9      	cmp	r9, r7
 800ea18:	9001      	str	r0, [sp, #4]
 800ea1a:	f04f 0300 	mov.w	r3, #0
 800ea1e:	f04f 020a 	mov.w	r2, #10
 800ea22:	4649      	mov	r1, r9
 800ea24:	4620      	mov	r0, r4
 800ea26:	d105      	bne.n	800ea34 <_dtoa_r+0x9d4>
 800ea28:	f000 fc05 	bl	800f236 <__multadd>
 800ea2c:	4681      	mov	r9, r0
 800ea2e:	4607      	mov	r7, r0
 800ea30:	46b2      	mov	sl, r6
 800ea32:	e779      	b.n	800e928 <_dtoa_r+0x8c8>
 800ea34:	f000 fbff 	bl	800f236 <__multadd>
 800ea38:	4639      	mov	r1, r7
 800ea3a:	4681      	mov	r9, r0
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	220a      	movs	r2, #10
 800ea40:	4620      	mov	r0, r4
 800ea42:	f000 fbf8 	bl	800f236 <__multadd>
 800ea46:	4607      	mov	r7, r0
 800ea48:	e7f2      	b.n	800ea30 <_dtoa_r+0x9d0>
 800ea4a:	f04f 0900 	mov.w	r9, #0
 800ea4e:	2201      	movs	r2, #1
 800ea50:	9901      	ldr	r1, [sp, #4]
 800ea52:	4620      	mov	r0, r4
 800ea54:	f000 fda4 	bl	800f5a0 <__lshift>
 800ea58:	4629      	mov	r1, r5
 800ea5a:	9001      	str	r0, [sp, #4]
 800ea5c:	f000 fdf4 	bl	800f648 <__mcmp>
 800ea60:	2800      	cmp	r0, #0
 800ea62:	dcb9      	bgt.n	800e9d8 <_dtoa_r+0x978>
 800ea64:	d102      	bne.n	800ea6c <_dtoa_r+0xa0c>
 800ea66:	f018 0f01 	tst.w	r8, #1
 800ea6a:	d1b5      	bne.n	800e9d8 <_dtoa_r+0x978>
 800ea6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ea70:	2b30      	cmp	r3, #48	; 0x30
 800ea72:	f106 32ff 	add.w	r2, r6, #4294967295
 800ea76:	f47f af11 	bne.w	800e89c <_dtoa_r+0x83c>
 800ea7a:	4616      	mov	r6, r2
 800ea7c:	e7f6      	b.n	800ea6c <_dtoa_r+0xa0c>
 800ea7e:	9b04      	ldr	r3, [sp, #16]
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d105      	bne.n	800ea90 <_dtoa_r+0xa30>
 800ea84:	9a04      	ldr	r2, [sp, #16]
 800ea86:	f10b 0b01 	add.w	fp, fp, #1
 800ea8a:	2331      	movs	r3, #49	; 0x31
 800ea8c:	7013      	strb	r3, [r2, #0]
 800ea8e:	e705      	b.n	800e89c <_dtoa_r+0x83c>
 800ea90:	4616      	mov	r6, r2
 800ea92:	e7a1      	b.n	800e9d8 <_dtoa_r+0x978>
 800ea94:	4b16      	ldr	r3, [pc, #88]	; (800eaf0 <_dtoa_r+0xa90>)
 800ea96:	f7ff bb48 	b.w	800e12a <_dtoa_r+0xca>
 800ea9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	f47f ab23 	bne.w	800e0e8 <_dtoa_r+0x88>
 800eaa2:	4b14      	ldr	r3, [pc, #80]	; (800eaf4 <_dtoa_r+0xa94>)
 800eaa4:	f7ff bb41 	b.w	800e12a <_dtoa_r+0xca>
 800eaa8:	9b08      	ldr	r3, [sp, #32]
 800eaaa:	2b01      	cmp	r3, #1
 800eaac:	f77f ae3b 	ble.w	800e726 <_dtoa_r+0x6c6>
 800eab0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800eab4:	e64f      	b.n	800e756 <_dtoa_r+0x6f6>
 800eab6:	9b06      	ldr	r3, [sp, #24]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	dc03      	bgt.n	800eac4 <_dtoa_r+0xa64>
 800eabc:	9b08      	ldr	r3, [sp, #32]
 800eabe:	2b02      	cmp	r3, #2
 800eac0:	f73f aed7 	bgt.w	800e872 <_dtoa_r+0x812>
 800eac4:	9e04      	ldr	r6, [sp, #16]
 800eac6:	9801      	ldr	r0, [sp, #4]
 800eac8:	4629      	mov	r1, r5
 800eaca:	f7ff fa3b 	bl	800df44 <quorem>
 800eace:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ead2:	f806 8b01 	strb.w	r8, [r6], #1
 800ead6:	9b04      	ldr	r3, [sp, #16]
 800ead8:	9a06      	ldr	r2, [sp, #24]
 800eada:	1af3      	subs	r3, r6, r3
 800eadc:	429a      	cmp	r2, r3
 800eade:	ddb4      	ble.n	800ea4a <_dtoa_r+0x9ea>
 800eae0:	2300      	movs	r3, #0
 800eae2:	220a      	movs	r2, #10
 800eae4:	9901      	ldr	r1, [sp, #4]
 800eae6:	4620      	mov	r0, r4
 800eae8:	f000 fba5 	bl	800f236 <__multadd>
 800eaec:	9001      	str	r0, [sp, #4]
 800eaee:	e7ea      	b.n	800eac6 <_dtoa_r+0xa66>
 800eaf0:	0800ffe4 	.word	0x0800ffe4
 800eaf4:	08010060 	.word	0x08010060

0800eaf8 <rshift>:
 800eaf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eafa:	6906      	ldr	r6, [r0, #16]
 800eafc:	114b      	asrs	r3, r1, #5
 800eafe:	429e      	cmp	r6, r3
 800eb00:	f100 0414 	add.w	r4, r0, #20
 800eb04:	dd30      	ble.n	800eb68 <rshift+0x70>
 800eb06:	f011 011f 	ands.w	r1, r1, #31
 800eb0a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800eb0e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800eb12:	d108      	bne.n	800eb26 <rshift+0x2e>
 800eb14:	4621      	mov	r1, r4
 800eb16:	42b2      	cmp	r2, r6
 800eb18:	460b      	mov	r3, r1
 800eb1a:	d211      	bcs.n	800eb40 <rshift+0x48>
 800eb1c:	f852 3b04 	ldr.w	r3, [r2], #4
 800eb20:	f841 3b04 	str.w	r3, [r1], #4
 800eb24:	e7f7      	b.n	800eb16 <rshift+0x1e>
 800eb26:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800eb2a:	f1c1 0c20 	rsb	ip, r1, #32
 800eb2e:	40cd      	lsrs	r5, r1
 800eb30:	3204      	adds	r2, #4
 800eb32:	4623      	mov	r3, r4
 800eb34:	42b2      	cmp	r2, r6
 800eb36:	4617      	mov	r7, r2
 800eb38:	d30c      	bcc.n	800eb54 <rshift+0x5c>
 800eb3a:	601d      	str	r5, [r3, #0]
 800eb3c:	b105      	cbz	r5, 800eb40 <rshift+0x48>
 800eb3e:	3304      	adds	r3, #4
 800eb40:	1b1a      	subs	r2, r3, r4
 800eb42:	42a3      	cmp	r3, r4
 800eb44:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eb48:	bf08      	it	eq
 800eb4a:	2300      	moveq	r3, #0
 800eb4c:	6102      	str	r2, [r0, #16]
 800eb4e:	bf08      	it	eq
 800eb50:	6143      	streq	r3, [r0, #20]
 800eb52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb54:	683f      	ldr	r7, [r7, #0]
 800eb56:	fa07 f70c 	lsl.w	r7, r7, ip
 800eb5a:	433d      	orrs	r5, r7
 800eb5c:	f843 5b04 	str.w	r5, [r3], #4
 800eb60:	f852 5b04 	ldr.w	r5, [r2], #4
 800eb64:	40cd      	lsrs	r5, r1
 800eb66:	e7e5      	b.n	800eb34 <rshift+0x3c>
 800eb68:	4623      	mov	r3, r4
 800eb6a:	e7e9      	b.n	800eb40 <rshift+0x48>

0800eb6c <__hexdig_fun>:
 800eb6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800eb70:	2b09      	cmp	r3, #9
 800eb72:	d802      	bhi.n	800eb7a <__hexdig_fun+0xe>
 800eb74:	3820      	subs	r0, #32
 800eb76:	b2c0      	uxtb	r0, r0
 800eb78:	4770      	bx	lr
 800eb7a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800eb7e:	2b05      	cmp	r3, #5
 800eb80:	d801      	bhi.n	800eb86 <__hexdig_fun+0x1a>
 800eb82:	3847      	subs	r0, #71	; 0x47
 800eb84:	e7f7      	b.n	800eb76 <__hexdig_fun+0xa>
 800eb86:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800eb8a:	2b05      	cmp	r3, #5
 800eb8c:	d801      	bhi.n	800eb92 <__hexdig_fun+0x26>
 800eb8e:	3827      	subs	r0, #39	; 0x27
 800eb90:	e7f1      	b.n	800eb76 <__hexdig_fun+0xa>
 800eb92:	2000      	movs	r0, #0
 800eb94:	4770      	bx	lr

0800eb96 <__gethex>:
 800eb96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb9a:	b08b      	sub	sp, #44	; 0x2c
 800eb9c:	468a      	mov	sl, r1
 800eb9e:	9002      	str	r0, [sp, #8]
 800eba0:	9816      	ldr	r0, [sp, #88]	; 0x58
 800eba2:	9306      	str	r3, [sp, #24]
 800eba4:	4690      	mov	r8, r2
 800eba6:	f000 fad0 	bl	800f14a <__localeconv_l>
 800ebaa:	6803      	ldr	r3, [r0, #0]
 800ebac:	9303      	str	r3, [sp, #12]
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7f1 fb46 	bl	8000240 <strlen>
 800ebb4:	9b03      	ldr	r3, [sp, #12]
 800ebb6:	9001      	str	r0, [sp, #4]
 800ebb8:	4403      	add	r3, r0
 800ebba:	f04f 0b00 	mov.w	fp, #0
 800ebbe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ebc2:	9307      	str	r3, [sp, #28]
 800ebc4:	f8da 3000 	ldr.w	r3, [sl]
 800ebc8:	3302      	adds	r3, #2
 800ebca:	461f      	mov	r7, r3
 800ebcc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ebd0:	2830      	cmp	r0, #48	; 0x30
 800ebd2:	d06c      	beq.n	800ecae <__gethex+0x118>
 800ebd4:	f7ff ffca 	bl	800eb6c <__hexdig_fun>
 800ebd8:	4604      	mov	r4, r0
 800ebda:	2800      	cmp	r0, #0
 800ebdc:	d16a      	bne.n	800ecb4 <__gethex+0x11e>
 800ebde:	9a01      	ldr	r2, [sp, #4]
 800ebe0:	9903      	ldr	r1, [sp, #12]
 800ebe2:	4638      	mov	r0, r7
 800ebe4:	f001 f8f4 	bl	800fdd0 <strncmp>
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	d166      	bne.n	800ecba <__gethex+0x124>
 800ebec:	9b01      	ldr	r3, [sp, #4]
 800ebee:	5cf8      	ldrb	r0, [r7, r3]
 800ebf0:	18fe      	adds	r6, r7, r3
 800ebf2:	f7ff ffbb 	bl	800eb6c <__hexdig_fun>
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	d062      	beq.n	800ecc0 <__gethex+0x12a>
 800ebfa:	4633      	mov	r3, r6
 800ebfc:	7818      	ldrb	r0, [r3, #0]
 800ebfe:	2830      	cmp	r0, #48	; 0x30
 800ec00:	461f      	mov	r7, r3
 800ec02:	f103 0301 	add.w	r3, r3, #1
 800ec06:	d0f9      	beq.n	800ebfc <__gethex+0x66>
 800ec08:	f7ff ffb0 	bl	800eb6c <__hexdig_fun>
 800ec0c:	fab0 f580 	clz	r5, r0
 800ec10:	096d      	lsrs	r5, r5, #5
 800ec12:	4634      	mov	r4, r6
 800ec14:	f04f 0b01 	mov.w	fp, #1
 800ec18:	463a      	mov	r2, r7
 800ec1a:	4616      	mov	r6, r2
 800ec1c:	3201      	adds	r2, #1
 800ec1e:	7830      	ldrb	r0, [r6, #0]
 800ec20:	f7ff ffa4 	bl	800eb6c <__hexdig_fun>
 800ec24:	2800      	cmp	r0, #0
 800ec26:	d1f8      	bne.n	800ec1a <__gethex+0x84>
 800ec28:	9a01      	ldr	r2, [sp, #4]
 800ec2a:	9903      	ldr	r1, [sp, #12]
 800ec2c:	4630      	mov	r0, r6
 800ec2e:	f001 f8cf 	bl	800fdd0 <strncmp>
 800ec32:	b950      	cbnz	r0, 800ec4a <__gethex+0xb4>
 800ec34:	b954      	cbnz	r4, 800ec4c <__gethex+0xb6>
 800ec36:	9b01      	ldr	r3, [sp, #4]
 800ec38:	18f4      	adds	r4, r6, r3
 800ec3a:	4622      	mov	r2, r4
 800ec3c:	4616      	mov	r6, r2
 800ec3e:	3201      	adds	r2, #1
 800ec40:	7830      	ldrb	r0, [r6, #0]
 800ec42:	f7ff ff93 	bl	800eb6c <__hexdig_fun>
 800ec46:	2800      	cmp	r0, #0
 800ec48:	d1f8      	bne.n	800ec3c <__gethex+0xa6>
 800ec4a:	b10c      	cbz	r4, 800ec50 <__gethex+0xba>
 800ec4c:	1ba4      	subs	r4, r4, r6
 800ec4e:	00a4      	lsls	r4, r4, #2
 800ec50:	7833      	ldrb	r3, [r6, #0]
 800ec52:	2b50      	cmp	r3, #80	; 0x50
 800ec54:	d001      	beq.n	800ec5a <__gethex+0xc4>
 800ec56:	2b70      	cmp	r3, #112	; 0x70
 800ec58:	d140      	bne.n	800ecdc <__gethex+0x146>
 800ec5a:	7873      	ldrb	r3, [r6, #1]
 800ec5c:	2b2b      	cmp	r3, #43	; 0x2b
 800ec5e:	d031      	beq.n	800ecc4 <__gethex+0x12e>
 800ec60:	2b2d      	cmp	r3, #45	; 0x2d
 800ec62:	d033      	beq.n	800eccc <__gethex+0x136>
 800ec64:	1c71      	adds	r1, r6, #1
 800ec66:	f04f 0900 	mov.w	r9, #0
 800ec6a:	7808      	ldrb	r0, [r1, #0]
 800ec6c:	f7ff ff7e 	bl	800eb6c <__hexdig_fun>
 800ec70:	1e43      	subs	r3, r0, #1
 800ec72:	b2db      	uxtb	r3, r3
 800ec74:	2b18      	cmp	r3, #24
 800ec76:	d831      	bhi.n	800ecdc <__gethex+0x146>
 800ec78:	f1a0 0210 	sub.w	r2, r0, #16
 800ec7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ec80:	f7ff ff74 	bl	800eb6c <__hexdig_fun>
 800ec84:	1e43      	subs	r3, r0, #1
 800ec86:	b2db      	uxtb	r3, r3
 800ec88:	2b18      	cmp	r3, #24
 800ec8a:	d922      	bls.n	800ecd2 <__gethex+0x13c>
 800ec8c:	f1b9 0f00 	cmp.w	r9, #0
 800ec90:	d000      	beq.n	800ec94 <__gethex+0xfe>
 800ec92:	4252      	negs	r2, r2
 800ec94:	4414      	add	r4, r2
 800ec96:	f8ca 1000 	str.w	r1, [sl]
 800ec9a:	b30d      	cbz	r5, 800ece0 <__gethex+0x14a>
 800ec9c:	f1bb 0f00 	cmp.w	fp, #0
 800eca0:	bf0c      	ite	eq
 800eca2:	2706      	moveq	r7, #6
 800eca4:	2700      	movne	r7, #0
 800eca6:	4638      	mov	r0, r7
 800eca8:	b00b      	add	sp, #44	; 0x2c
 800ecaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecae:	f10b 0b01 	add.w	fp, fp, #1
 800ecb2:	e78a      	b.n	800ebca <__gethex+0x34>
 800ecb4:	2500      	movs	r5, #0
 800ecb6:	462c      	mov	r4, r5
 800ecb8:	e7ae      	b.n	800ec18 <__gethex+0x82>
 800ecba:	463e      	mov	r6, r7
 800ecbc:	2501      	movs	r5, #1
 800ecbe:	e7c7      	b.n	800ec50 <__gethex+0xba>
 800ecc0:	4604      	mov	r4, r0
 800ecc2:	e7fb      	b.n	800ecbc <__gethex+0x126>
 800ecc4:	f04f 0900 	mov.w	r9, #0
 800ecc8:	1cb1      	adds	r1, r6, #2
 800ecca:	e7ce      	b.n	800ec6a <__gethex+0xd4>
 800eccc:	f04f 0901 	mov.w	r9, #1
 800ecd0:	e7fa      	b.n	800ecc8 <__gethex+0x132>
 800ecd2:	230a      	movs	r3, #10
 800ecd4:	fb03 0202 	mla	r2, r3, r2, r0
 800ecd8:	3a10      	subs	r2, #16
 800ecda:	e7cf      	b.n	800ec7c <__gethex+0xe6>
 800ecdc:	4631      	mov	r1, r6
 800ecde:	e7da      	b.n	800ec96 <__gethex+0x100>
 800ece0:	1bf3      	subs	r3, r6, r7
 800ece2:	3b01      	subs	r3, #1
 800ece4:	4629      	mov	r1, r5
 800ece6:	2b07      	cmp	r3, #7
 800ece8:	dc49      	bgt.n	800ed7e <__gethex+0x1e8>
 800ecea:	9802      	ldr	r0, [sp, #8]
 800ecec:	f000 fa58 	bl	800f1a0 <_Balloc>
 800ecf0:	9b01      	ldr	r3, [sp, #4]
 800ecf2:	f100 0914 	add.w	r9, r0, #20
 800ecf6:	f04f 0b00 	mov.w	fp, #0
 800ecfa:	f1c3 0301 	rsb	r3, r3, #1
 800ecfe:	4605      	mov	r5, r0
 800ed00:	f8cd 9010 	str.w	r9, [sp, #16]
 800ed04:	46da      	mov	sl, fp
 800ed06:	9308      	str	r3, [sp, #32]
 800ed08:	42b7      	cmp	r7, r6
 800ed0a:	d33b      	bcc.n	800ed84 <__gethex+0x1ee>
 800ed0c:	9804      	ldr	r0, [sp, #16]
 800ed0e:	f840 ab04 	str.w	sl, [r0], #4
 800ed12:	eba0 0009 	sub.w	r0, r0, r9
 800ed16:	1080      	asrs	r0, r0, #2
 800ed18:	6128      	str	r0, [r5, #16]
 800ed1a:	0147      	lsls	r7, r0, #5
 800ed1c:	4650      	mov	r0, sl
 800ed1e:	f000 fb03 	bl	800f328 <__hi0bits>
 800ed22:	f8d8 6000 	ldr.w	r6, [r8]
 800ed26:	1a3f      	subs	r7, r7, r0
 800ed28:	42b7      	cmp	r7, r6
 800ed2a:	dd64      	ble.n	800edf6 <__gethex+0x260>
 800ed2c:	1bbf      	subs	r7, r7, r6
 800ed2e:	4639      	mov	r1, r7
 800ed30:	4628      	mov	r0, r5
 800ed32:	f000 fe14 	bl	800f95e <__any_on>
 800ed36:	4682      	mov	sl, r0
 800ed38:	b178      	cbz	r0, 800ed5a <__gethex+0x1c4>
 800ed3a:	1e7b      	subs	r3, r7, #1
 800ed3c:	1159      	asrs	r1, r3, #5
 800ed3e:	f003 021f 	and.w	r2, r3, #31
 800ed42:	f04f 0a01 	mov.w	sl, #1
 800ed46:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ed4a:	fa0a f202 	lsl.w	r2, sl, r2
 800ed4e:	420a      	tst	r2, r1
 800ed50:	d003      	beq.n	800ed5a <__gethex+0x1c4>
 800ed52:	4553      	cmp	r3, sl
 800ed54:	dc46      	bgt.n	800ede4 <__gethex+0x24e>
 800ed56:	f04f 0a02 	mov.w	sl, #2
 800ed5a:	4639      	mov	r1, r7
 800ed5c:	4628      	mov	r0, r5
 800ed5e:	f7ff fecb 	bl	800eaf8 <rshift>
 800ed62:	443c      	add	r4, r7
 800ed64:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed68:	42a3      	cmp	r3, r4
 800ed6a:	da52      	bge.n	800ee12 <__gethex+0x27c>
 800ed6c:	4629      	mov	r1, r5
 800ed6e:	9802      	ldr	r0, [sp, #8]
 800ed70:	f000 fa4a 	bl	800f208 <_Bfree>
 800ed74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ed76:	2300      	movs	r3, #0
 800ed78:	6013      	str	r3, [r2, #0]
 800ed7a:	27a3      	movs	r7, #163	; 0xa3
 800ed7c:	e793      	b.n	800eca6 <__gethex+0x110>
 800ed7e:	3101      	adds	r1, #1
 800ed80:	105b      	asrs	r3, r3, #1
 800ed82:	e7b0      	b.n	800ece6 <__gethex+0x150>
 800ed84:	1e73      	subs	r3, r6, #1
 800ed86:	9305      	str	r3, [sp, #20]
 800ed88:	9a07      	ldr	r2, [sp, #28]
 800ed8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d018      	beq.n	800edc4 <__gethex+0x22e>
 800ed92:	f1bb 0f20 	cmp.w	fp, #32
 800ed96:	d107      	bne.n	800eda8 <__gethex+0x212>
 800ed98:	9b04      	ldr	r3, [sp, #16]
 800ed9a:	f8c3 a000 	str.w	sl, [r3]
 800ed9e:	3304      	adds	r3, #4
 800eda0:	f04f 0a00 	mov.w	sl, #0
 800eda4:	9304      	str	r3, [sp, #16]
 800eda6:	46d3      	mov	fp, sl
 800eda8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800edac:	f7ff fede 	bl	800eb6c <__hexdig_fun>
 800edb0:	f000 000f 	and.w	r0, r0, #15
 800edb4:	fa00 f00b 	lsl.w	r0, r0, fp
 800edb8:	ea4a 0a00 	orr.w	sl, sl, r0
 800edbc:	f10b 0b04 	add.w	fp, fp, #4
 800edc0:	9b05      	ldr	r3, [sp, #20]
 800edc2:	e00d      	b.n	800ede0 <__gethex+0x24a>
 800edc4:	9b05      	ldr	r3, [sp, #20]
 800edc6:	9a08      	ldr	r2, [sp, #32]
 800edc8:	4413      	add	r3, r2
 800edca:	42bb      	cmp	r3, r7
 800edcc:	d3e1      	bcc.n	800ed92 <__gethex+0x1fc>
 800edce:	4618      	mov	r0, r3
 800edd0:	9a01      	ldr	r2, [sp, #4]
 800edd2:	9903      	ldr	r1, [sp, #12]
 800edd4:	9309      	str	r3, [sp, #36]	; 0x24
 800edd6:	f000 fffb 	bl	800fdd0 <strncmp>
 800edda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eddc:	2800      	cmp	r0, #0
 800edde:	d1d8      	bne.n	800ed92 <__gethex+0x1fc>
 800ede0:	461e      	mov	r6, r3
 800ede2:	e791      	b.n	800ed08 <__gethex+0x172>
 800ede4:	1eb9      	subs	r1, r7, #2
 800ede6:	4628      	mov	r0, r5
 800ede8:	f000 fdb9 	bl	800f95e <__any_on>
 800edec:	2800      	cmp	r0, #0
 800edee:	d0b2      	beq.n	800ed56 <__gethex+0x1c0>
 800edf0:	f04f 0a03 	mov.w	sl, #3
 800edf4:	e7b1      	b.n	800ed5a <__gethex+0x1c4>
 800edf6:	da09      	bge.n	800ee0c <__gethex+0x276>
 800edf8:	1bf7      	subs	r7, r6, r7
 800edfa:	4629      	mov	r1, r5
 800edfc:	463a      	mov	r2, r7
 800edfe:	9802      	ldr	r0, [sp, #8]
 800ee00:	f000 fbce 	bl	800f5a0 <__lshift>
 800ee04:	1be4      	subs	r4, r4, r7
 800ee06:	4605      	mov	r5, r0
 800ee08:	f100 0914 	add.w	r9, r0, #20
 800ee0c:	f04f 0a00 	mov.w	sl, #0
 800ee10:	e7a8      	b.n	800ed64 <__gethex+0x1ce>
 800ee12:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ee16:	42a0      	cmp	r0, r4
 800ee18:	dd6a      	ble.n	800eef0 <__gethex+0x35a>
 800ee1a:	1b04      	subs	r4, r0, r4
 800ee1c:	42a6      	cmp	r6, r4
 800ee1e:	dc2e      	bgt.n	800ee7e <__gethex+0x2e8>
 800ee20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ee24:	2b02      	cmp	r3, #2
 800ee26:	d022      	beq.n	800ee6e <__gethex+0x2d8>
 800ee28:	2b03      	cmp	r3, #3
 800ee2a:	d024      	beq.n	800ee76 <__gethex+0x2e0>
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d115      	bne.n	800ee5c <__gethex+0x2c6>
 800ee30:	42a6      	cmp	r6, r4
 800ee32:	d113      	bne.n	800ee5c <__gethex+0x2c6>
 800ee34:	2e01      	cmp	r6, #1
 800ee36:	dc0b      	bgt.n	800ee50 <__gethex+0x2ba>
 800ee38:	9a06      	ldr	r2, [sp, #24]
 800ee3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ee3e:	6013      	str	r3, [r2, #0]
 800ee40:	2301      	movs	r3, #1
 800ee42:	612b      	str	r3, [r5, #16]
 800ee44:	f8c9 3000 	str.w	r3, [r9]
 800ee48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ee4a:	2762      	movs	r7, #98	; 0x62
 800ee4c:	601d      	str	r5, [r3, #0]
 800ee4e:	e72a      	b.n	800eca6 <__gethex+0x110>
 800ee50:	1e71      	subs	r1, r6, #1
 800ee52:	4628      	mov	r0, r5
 800ee54:	f000 fd83 	bl	800f95e <__any_on>
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	d1ed      	bne.n	800ee38 <__gethex+0x2a2>
 800ee5c:	4629      	mov	r1, r5
 800ee5e:	9802      	ldr	r0, [sp, #8]
 800ee60:	f000 f9d2 	bl	800f208 <_Bfree>
 800ee64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ee66:	2300      	movs	r3, #0
 800ee68:	6013      	str	r3, [r2, #0]
 800ee6a:	2750      	movs	r7, #80	; 0x50
 800ee6c:	e71b      	b.n	800eca6 <__gethex+0x110>
 800ee6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d0e1      	beq.n	800ee38 <__gethex+0x2a2>
 800ee74:	e7f2      	b.n	800ee5c <__gethex+0x2c6>
 800ee76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d1dd      	bne.n	800ee38 <__gethex+0x2a2>
 800ee7c:	e7ee      	b.n	800ee5c <__gethex+0x2c6>
 800ee7e:	1e67      	subs	r7, r4, #1
 800ee80:	f1ba 0f00 	cmp.w	sl, #0
 800ee84:	d131      	bne.n	800eeea <__gethex+0x354>
 800ee86:	b127      	cbz	r7, 800ee92 <__gethex+0x2fc>
 800ee88:	4639      	mov	r1, r7
 800ee8a:	4628      	mov	r0, r5
 800ee8c:	f000 fd67 	bl	800f95e <__any_on>
 800ee90:	4682      	mov	sl, r0
 800ee92:	117a      	asrs	r2, r7, #5
 800ee94:	2301      	movs	r3, #1
 800ee96:	f007 071f 	and.w	r7, r7, #31
 800ee9a:	fa03 f707 	lsl.w	r7, r3, r7
 800ee9e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800eea2:	4621      	mov	r1, r4
 800eea4:	421f      	tst	r7, r3
 800eea6:	4628      	mov	r0, r5
 800eea8:	bf18      	it	ne
 800eeaa:	f04a 0a02 	orrne.w	sl, sl, #2
 800eeae:	1b36      	subs	r6, r6, r4
 800eeb0:	f7ff fe22 	bl	800eaf8 <rshift>
 800eeb4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800eeb8:	2702      	movs	r7, #2
 800eeba:	f1ba 0f00 	cmp.w	sl, #0
 800eebe:	d048      	beq.n	800ef52 <__gethex+0x3bc>
 800eec0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eec4:	2b02      	cmp	r3, #2
 800eec6:	d015      	beq.n	800eef4 <__gethex+0x35e>
 800eec8:	2b03      	cmp	r3, #3
 800eeca:	d017      	beq.n	800eefc <__gethex+0x366>
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d109      	bne.n	800eee4 <__gethex+0x34e>
 800eed0:	f01a 0f02 	tst.w	sl, #2
 800eed4:	d006      	beq.n	800eee4 <__gethex+0x34e>
 800eed6:	f8d9 3000 	ldr.w	r3, [r9]
 800eeda:	ea4a 0a03 	orr.w	sl, sl, r3
 800eede:	f01a 0f01 	tst.w	sl, #1
 800eee2:	d10e      	bne.n	800ef02 <__gethex+0x36c>
 800eee4:	f047 0710 	orr.w	r7, r7, #16
 800eee8:	e033      	b.n	800ef52 <__gethex+0x3bc>
 800eeea:	f04f 0a01 	mov.w	sl, #1
 800eeee:	e7d0      	b.n	800ee92 <__gethex+0x2fc>
 800eef0:	2701      	movs	r7, #1
 800eef2:	e7e2      	b.n	800eeba <__gethex+0x324>
 800eef4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eef6:	f1c3 0301 	rsb	r3, r3, #1
 800eefa:	9315      	str	r3, [sp, #84]	; 0x54
 800eefc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d0f0      	beq.n	800eee4 <__gethex+0x34e>
 800ef02:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ef06:	f105 0314 	add.w	r3, r5, #20
 800ef0a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800ef0e:	eb03 010a 	add.w	r1, r3, sl
 800ef12:	f04f 0c00 	mov.w	ip, #0
 800ef16:	4618      	mov	r0, r3
 800ef18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef1c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ef20:	d01c      	beq.n	800ef5c <__gethex+0x3c6>
 800ef22:	3201      	adds	r2, #1
 800ef24:	6002      	str	r2, [r0, #0]
 800ef26:	2f02      	cmp	r7, #2
 800ef28:	f105 0314 	add.w	r3, r5, #20
 800ef2c:	d138      	bne.n	800efa0 <__gethex+0x40a>
 800ef2e:	f8d8 2000 	ldr.w	r2, [r8]
 800ef32:	3a01      	subs	r2, #1
 800ef34:	42b2      	cmp	r2, r6
 800ef36:	d10a      	bne.n	800ef4e <__gethex+0x3b8>
 800ef38:	1171      	asrs	r1, r6, #5
 800ef3a:	2201      	movs	r2, #1
 800ef3c:	f006 061f 	and.w	r6, r6, #31
 800ef40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef44:	fa02 f606 	lsl.w	r6, r2, r6
 800ef48:	421e      	tst	r6, r3
 800ef4a:	bf18      	it	ne
 800ef4c:	4617      	movne	r7, r2
 800ef4e:	f047 0720 	orr.w	r7, r7, #32
 800ef52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ef54:	601d      	str	r5, [r3, #0]
 800ef56:	9b06      	ldr	r3, [sp, #24]
 800ef58:	601c      	str	r4, [r3, #0]
 800ef5a:	e6a4      	b.n	800eca6 <__gethex+0x110>
 800ef5c:	4299      	cmp	r1, r3
 800ef5e:	f843 cc04 	str.w	ip, [r3, #-4]
 800ef62:	d8d8      	bhi.n	800ef16 <__gethex+0x380>
 800ef64:	68ab      	ldr	r3, [r5, #8]
 800ef66:	4599      	cmp	r9, r3
 800ef68:	db12      	blt.n	800ef90 <__gethex+0x3fa>
 800ef6a:	6869      	ldr	r1, [r5, #4]
 800ef6c:	9802      	ldr	r0, [sp, #8]
 800ef6e:	3101      	adds	r1, #1
 800ef70:	f000 f916 	bl	800f1a0 <_Balloc>
 800ef74:	692a      	ldr	r2, [r5, #16]
 800ef76:	3202      	adds	r2, #2
 800ef78:	f105 010c 	add.w	r1, r5, #12
 800ef7c:	4683      	mov	fp, r0
 800ef7e:	0092      	lsls	r2, r2, #2
 800ef80:	300c      	adds	r0, #12
 800ef82:	f7fd fb15 	bl	800c5b0 <memcpy>
 800ef86:	4629      	mov	r1, r5
 800ef88:	9802      	ldr	r0, [sp, #8]
 800ef8a:	f000 f93d 	bl	800f208 <_Bfree>
 800ef8e:	465d      	mov	r5, fp
 800ef90:	692b      	ldr	r3, [r5, #16]
 800ef92:	1c5a      	adds	r2, r3, #1
 800ef94:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ef98:	612a      	str	r2, [r5, #16]
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	615a      	str	r2, [r3, #20]
 800ef9e:	e7c2      	b.n	800ef26 <__gethex+0x390>
 800efa0:	692a      	ldr	r2, [r5, #16]
 800efa2:	454a      	cmp	r2, r9
 800efa4:	dd0b      	ble.n	800efbe <__gethex+0x428>
 800efa6:	2101      	movs	r1, #1
 800efa8:	4628      	mov	r0, r5
 800efaa:	f7ff fda5 	bl	800eaf8 <rshift>
 800efae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800efb2:	3401      	adds	r4, #1
 800efb4:	42a3      	cmp	r3, r4
 800efb6:	f6ff aed9 	blt.w	800ed6c <__gethex+0x1d6>
 800efba:	2701      	movs	r7, #1
 800efbc:	e7c7      	b.n	800ef4e <__gethex+0x3b8>
 800efbe:	f016 061f 	ands.w	r6, r6, #31
 800efc2:	d0fa      	beq.n	800efba <__gethex+0x424>
 800efc4:	449a      	add	sl, r3
 800efc6:	f1c6 0620 	rsb	r6, r6, #32
 800efca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800efce:	f000 f9ab 	bl	800f328 <__hi0bits>
 800efd2:	42b0      	cmp	r0, r6
 800efd4:	dbe7      	blt.n	800efa6 <__gethex+0x410>
 800efd6:	e7f0      	b.n	800efba <__gethex+0x424>

0800efd8 <L_shift>:
 800efd8:	f1c2 0208 	rsb	r2, r2, #8
 800efdc:	0092      	lsls	r2, r2, #2
 800efde:	b570      	push	{r4, r5, r6, lr}
 800efe0:	f1c2 0620 	rsb	r6, r2, #32
 800efe4:	6843      	ldr	r3, [r0, #4]
 800efe6:	6804      	ldr	r4, [r0, #0]
 800efe8:	fa03 f506 	lsl.w	r5, r3, r6
 800efec:	432c      	orrs	r4, r5
 800efee:	40d3      	lsrs	r3, r2
 800eff0:	6004      	str	r4, [r0, #0]
 800eff2:	f840 3f04 	str.w	r3, [r0, #4]!
 800eff6:	4288      	cmp	r0, r1
 800eff8:	d3f4      	bcc.n	800efe4 <L_shift+0xc>
 800effa:	bd70      	pop	{r4, r5, r6, pc}

0800effc <__match>:
 800effc:	b530      	push	{r4, r5, lr}
 800effe:	6803      	ldr	r3, [r0, #0]
 800f000:	3301      	adds	r3, #1
 800f002:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f006:	b914      	cbnz	r4, 800f00e <__match+0x12>
 800f008:	6003      	str	r3, [r0, #0]
 800f00a:	2001      	movs	r0, #1
 800f00c:	bd30      	pop	{r4, r5, pc}
 800f00e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f012:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f016:	2d19      	cmp	r5, #25
 800f018:	bf98      	it	ls
 800f01a:	3220      	addls	r2, #32
 800f01c:	42a2      	cmp	r2, r4
 800f01e:	d0f0      	beq.n	800f002 <__match+0x6>
 800f020:	2000      	movs	r0, #0
 800f022:	e7f3      	b.n	800f00c <__match+0x10>

0800f024 <__hexnan>:
 800f024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f028:	680b      	ldr	r3, [r1, #0]
 800f02a:	6801      	ldr	r1, [r0, #0]
 800f02c:	115f      	asrs	r7, r3, #5
 800f02e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f032:	f013 031f 	ands.w	r3, r3, #31
 800f036:	b087      	sub	sp, #28
 800f038:	bf18      	it	ne
 800f03a:	3704      	addne	r7, #4
 800f03c:	2500      	movs	r5, #0
 800f03e:	1f3e      	subs	r6, r7, #4
 800f040:	4682      	mov	sl, r0
 800f042:	4690      	mov	r8, r2
 800f044:	9301      	str	r3, [sp, #4]
 800f046:	f847 5c04 	str.w	r5, [r7, #-4]
 800f04a:	46b1      	mov	r9, r6
 800f04c:	4634      	mov	r4, r6
 800f04e:	9502      	str	r5, [sp, #8]
 800f050:	46ab      	mov	fp, r5
 800f052:	784a      	ldrb	r2, [r1, #1]
 800f054:	1c4b      	adds	r3, r1, #1
 800f056:	9303      	str	r3, [sp, #12]
 800f058:	b342      	cbz	r2, 800f0ac <__hexnan+0x88>
 800f05a:	4610      	mov	r0, r2
 800f05c:	9105      	str	r1, [sp, #20]
 800f05e:	9204      	str	r2, [sp, #16]
 800f060:	f7ff fd84 	bl	800eb6c <__hexdig_fun>
 800f064:	2800      	cmp	r0, #0
 800f066:	d143      	bne.n	800f0f0 <__hexnan+0xcc>
 800f068:	9a04      	ldr	r2, [sp, #16]
 800f06a:	9905      	ldr	r1, [sp, #20]
 800f06c:	2a20      	cmp	r2, #32
 800f06e:	d818      	bhi.n	800f0a2 <__hexnan+0x7e>
 800f070:	9b02      	ldr	r3, [sp, #8]
 800f072:	459b      	cmp	fp, r3
 800f074:	dd13      	ble.n	800f09e <__hexnan+0x7a>
 800f076:	454c      	cmp	r4, r9
 800f078:	d206      	bcs.n	800f088 <__hexnan+0x64>
 800f07a:	2d07      	cmp	r5, #7
 800f07c:	dc04      	bgt.n	800f088 <__hexnan+0x64>
 800f07e:	462a      	mov	r2, r5
 800f080:	4649      	mov	r1, r9
 800f082:	4620      	mov	r0, r4
 800f084:	f7ff ffa8 	bl	800efd8 <L_shift>
 800f088:	4544      	cmp	r4, r8
 800f08a:	d944      	bls.n	800f116 <__hexnan+0xf2>
 800f08c:	2300      	movs	r3, #0
 800f08e:	f1a4 0904 	sub.w	r9, r4, #4
 800f092:	f844 3c04 	str.w	r3, [r4, #-4]
 800f096:	f8cd b008 	str.w	fp, [sp, #8]
 800f09a:	464c      	mov	r4, r9
 800f09c:	461d      	mov	r5, r3
 800f09e:	9903      	ldr	r1, [sp, #12]
 800f0a0:	e7d7      	b.n	800f052 <__hexnan+0x2e>
 800f0a2:	2a29      	cmp	r2, #41	; 0x29
 800f0a4:	d14a      	bne.n	800f13c <__hexnan+0x118>
 800f0a6:	3102      	adds	r1, #2
 800f0a8:	f8ca 1000 	str.w	r1, [sl]
 800f0ac:	f1bb 0f00 	cmp.w	fp, #0
 800f0b0:	d044      	beq.n	800f13c <__hexnan+0x118>
 800f0b2:	454c      	cmp	r4, r9
 800f0b4:	d206      	bcs.n	800f0c4 <__hexnan+0xa0>
 800f0b6:	2d07      	cmp	r5, #7
 800f0b8:	dc04      	bgt.n	800f0c4 <__hexnan+0xa0>
 800f0ba:	462a      	mov	r2, r5
 800f0bc:	4649      	mov	r1, r9
 800f0be:	4620      	mov	r0, r4
 800f0c0:	f7ff ff8a 	bl	800efd8 <L_shift>
 800f0c4:	4544      	cmp	r4, r8
 800f0c6:	d928      	bls.n	800f11a <__hexnan+0xf6>
 800f0c8:	4643      	mov	r3, r8
 800f0ca:	f854 2b04 	ldr.w	r2, [r4], #4
 800f0ce:	f843 2b04 	str.w	r2, [r3], #4
 800f0d2:	42a6      	cmp	r6, r4
 800f0d4:	d2f9      	bcs.n	800f0ca <__hexnan+0xa6>
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f843 2b04 	str.w	r2, [r3], #4
 800f0dc:	429e      	cmp	r6, r3
 800f0de:	d2fb      	bcs.n	800f0d8 <__hexnan+0xb4>
 800f0e0:	6833      	ldr	r3, [r6, #0]
 800f0e2:	b91b      	cbnz	r3, 800f0ec <__hexnan+0xc8>
 800f0e4:	4546      	cmp	r6, r8
 800f0e6:	d127      	bne.n	800f138 <__hexnan+0x114>
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	6033      	str	r3, [r6, #0]
 800f0ec:	2005      	movs	r0, #5
 800f0ee:	e026      	b.n	800f13e <__hexnan+0x11a>
 800f0f0:	3501      	adds	r5, #1
 800f0f2:	2d08      	cmp	r5, #8
 800f0f4:	f10b 0b01 	add.w	fp, fp, #1
 800f0f8:	dd06      	ble.n	800f108 <__hexnan+0xe4>
 800f0fa:	4544      	cmp	r4, r8
 800f0fc:	d9cf      	bls.n	800f09e <__hexnan+0x7a>
 800f0fe:	2300      	movs	r3, #0
 800f100:	f844 3c04 	str.w	r3, [r4, #-4]
 800f104:	2501      	movs	r5, #1
 800f106:	3c04      	subs	r4, #4
 800f108:	6822      	ldr	r2, [r4, #0]
 800f10a:	f000 000f 	and.w	r0, r0, #15
 800f10e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f112:	6020      	str	r0, [r4, #0]
 800f114:	e7c3      	b.n	800f09e <__hexnan+0x7a>
 800f116:	2508      	movs	r5, #8
 800f118:	e7c1      	b.n	800f09e <__hexnan+0x7a>
 800f11a:	9b01      	ldr	r3, [sp, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d0df      	beq.n	800f0e0 <__hexnan+0xbc>
 800f120:	f04f 32ff 	mov.w	r2, #4294967295
 800f124:	f1c3 0320 	rsb	r3, r3, #32
 800f128:	fa22 f303 	lsr.w	r3, r2, r3
 800f12c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f130:	401a      	ands	r2, r3
 800f132:	f847 2c04 	str.w	r2, [r7, #-4]
 800f136:	e7d3      	b.n	800f0e0 <__hexnan+0xbc>
 800f138:	3e04      	subs	r6, #4
 800f13a:	e7d1      	b.n	800f0e0 <__hexnan+0xbc>
 800f13c:	2004      	movs	r0, #4
 800f13e:	b007      	add	sp, #28
 800f140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f144 <__locale_ctype_ptr_l>:
 800f144:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800f148:	4770      	bx	lr

0800f14a <__localeconv_l>:
 800f14a:	30f0      	adds	r0, #240	; 0xf0
 800f14c:	4770      	bx	lr
	...

0800f150 <_localeconv_r>:
 800f150:	4b04      	ldr	r3, [pc, #16]	; (800f164 <_localeconv_r+0x14>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	6a18      	ldr	r0, [r3, #32]
 800f156:	4b04      	ldr	r3, [pc, #16]	; (800f168 <_localeconv_r+0x18>)
 800f158:	2800      	cmp	r0, #0
 800f15a:	bf08      	it	eq
 800f15c:	4618      	moveq	r0, r3
 800f15e:	30f0      	adds	r0, #240	; 0xf0
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop
 800f164:	200000c8 	.word	0x200000c8
 800f168:	2000012c 	.word	0x2000012c

0800f16c <malloc>:
 800f16c:	4b02      	ldr	r3, [pc, #8]	; (800f178 <malloc+0xc>)
 800f16e:	4601      	mov	r1, r0
 800f170:	6818      	ldr	r0, [r3, #0]
 800f172:	f000 bc71 	b.w	800fa58 <_malloc_r>
 800f176:	bf00      	nop
 800f178:	200000c8 	.word	0x200000c8

0800f17c <__ascii_mbtowc>:
 800f17c:	b082      	sub	sp, #8
 800f17e:	b901      	cbnz	r1, 800f182 <__ascii_mbtowc+0x6>
 800f180:	a901      	add	r1, sp, #4
 800f182:	b142      	cbz	r2, 800f196 <__ascii_mbtowc+0x1a>
 800f184:	b14b      	cbz	r3, 800f19a <__ascii_mbtowc+0x1e>
 800f186:	7813      	ldrb	r3, [r2, #0]
 800f188:	600b      	str	r3, [r1, #0]
 800f18a:	7812      	ldrb	r2, [r2, #0]
 800f18c:	1c10      	adds	r0, r2, #0
 800f18e:	bf18      	it	ne
 800f190:	2001      	movne	r0, #1
 800f192:	b002      	add	sp, #8
 800f194:	4770      	bx	lr
 800f196:	4610      	mov	r0, r2
 800f198:	e7fb      	b.n	800f192 <__ascii_mbtowc+0x16>
 800f19a:	f06f 0001 	mvn.w	r0, #1
 800f19e:	e7f8      	b.n	800f192 <__ascii_mbtowc+0x16>

0800f1a0 <_Balloc>:
 800f1a0:	b570      	push	{r4, r5, r6, lr}
 800f1a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f1a4:	4604      	mov	r4, r0
 800f1a6:	460e      	mov	r6, r1
 800f1a8:	b93d      	cbnz	r5, 800f1ba <_Balloc+0x1a>
 800f1aa:	2010      	movs	r0, #16
 800f1ac:	f7ff ffde 	bl	800f16c <malloc>
 800f1b0:	6260      	str	r0, [r4, #36]	; 0x24
 800f1b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f1b6:	6005      	str	r5, [r0, #0]
 800f1b8:	60c5      	str	r5, [r0, #12]
 800f1ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f1bc:	68eb      	ldr	r3, [r5, #12]
 800f1be:	b183      	cbz	r3, 800f1e2 <_Balloc+0x42>
 800f1c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1c2:	68db      	ldr	r3, [r3, #12]
 800f1c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f1c8:	b9b8      	cbnz	r0, 800f1fa <_Balloc+0x5a>
 800f1ca:	2101      	movs	r1, #1
 800f1cc:	fa01 f506 	lsl.w	r5, r1, r6
 800f1d0:	1d6a      	adds	r2, r5, #5
 800f1d2:	0092      	lsls	r2, r2, #2
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	f000 fbe3 	bl	800f9a0 <_calloc_r>
 800f1da:	b160      	cbz	r0, 800f1f6 <_Balloc+0x56>
 800f1dc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f1e0:	e00e      	b.n	800f200 <_Balloc+0x60>
 800f1e2:	2221      	movs	r2, #33	; 0x21
 800f1e4:	2104      	movs	r1, #4
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	f000 fbda 	bl	800f9a0 <_calloc_r>
 800f1ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1ee:	60e8      	str	r0, [r5, #12]
 800f1f0:	68db      	ldr	r3, [r3, #12]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d1e4      	bne.n	800f1c0 <_Balloc+0x20>
 800f1f6:	2000      	movs	r0, #0
 800f1f8:	bd70      	pop	{r4, r5, r6, pc}
 800f1fa:	6802      	ldr	r2, [r0, #0]
 800f1fc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f200:	2300      	movs	r3, #0
 800f202:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f206:	e7f7      	b.n	800f1f8 <_Balloc+0x58>

0800f208 <_Bfree>:
 800f208:	b570      	push	{r4, r5, r6, lr}
 800f20a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f20c:	4606      	mov	r6, r0
 800f20e:	460d      	mov	r5, r1
 800f210:	b93c      	cbnz	r4, 800f222 <_Bfree+0x1a>
 800f212:	2010      	movs	r0, #16
 800f214:	f7ff ffaa 	bl	800f16c <malloc>
 800f218:	6270      	str	r0, [r6, #36]	; 0x24
 800f21a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f21e:	6004      	str	r4, [r0, #0]
 800f220:	60c4      	str	r4, [r0, #12]
 800f222:	b13d      	cbz	r5, 800f234 <_Bfree+0x2c>
 800f224:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f226:	686a      	ldr	r2, [r5, #4]
 800f228:	68db      	ldr	r3, [r3, #12]
 800f22a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f22e:	6029      	str	r1, [r5, #0]
 800f230:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f234:	bd70      	pop	{r4, r5, r6, pc}

0800f236 <__multadd>:
 800f236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f23a:	690d      	ldr	r5, [r1, #16]
 800f23c:	461f      	mov	r7, r3
 800f23e:	4606      	mov	r6, r0
 800f240:	460c      	mov	r4, r1
 800f242:	f101 0c14 	add.w	ip, r1, #20
 800f246:	2300      	movs	r3, #0
 800f248:	f8dc 0000 	ldr.w	r0, [ip]
 800f24c:	b281      	uxth	r1, r0
 800f24e:	fb02 7101 	mla	r1, r2, r1, r7
 800f252:	0c0f      	lsrs	r7, r1, #16
 800f254:	0c00      	lsrs	r0, r0, #16
 800f256:	fb02 7000 	mla	r0, r2, r0, r7
 800f25a:	b289      	uxth	r1, r1
 800f25c:	3301      	adds	r3, #1
 800f25e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f262:	429d      	cmp	r5, r3
 800f264:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f268:	f84c 1b04 	str.w	r1, [ip], #4
 800f26c:	dcec      	bgt.n	800f248 <__multadd+0x12>
 800f26e:	b1d7      	cbz	r7, 800f2a6 <__multadd+0x70>
 800f270:	68a3      	ldr	r3, [r4, #8]
 800f272:	42ab      	cmp	r3, r5
 800f274:	dc12      	bgt.n	800f29c <__multadd+0x66>
 800f276:	6861      	ldr	r1, [r4, #4]
 800f278:	4630      	mov	r0, r6
 800f27a:	3101      	adds	r1, #1
 800f27c:	f7ff ff90 	bl	800f1a0 <_Balloc>
 800f280:	6922      	ldr	r2, [r4, #16]
 800f282:	3202      	adds	r2, #2
 800f284:	f104 010c 	add.w	r1, r4, #12
 800f288:	4680      	mov	r8, r0
 800f28a:	0092      	lsls	r2, r2, #2
 800f28c:	300c      	adds	r0, #12
 800f28e:	f7fd f98f 	bl	800c5b0 <memcpy>
 800f292:	4621      	mov	r1, r4
 800f294:	4630      	mov	r0, r6
 800f296:	f7ff ffb7 	bl	800f208 <_Bfree>
 800f29a:	4644      	mov	r4, r8
 800f29c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f2a0:	3501      	adds	r5, #1
 800f2a2:	615f      	str	r7, [r3, #20]
 800f2a4:	6125      	str	r5, [r4, #16]
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f2ac <__s2b>:
 800f2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2b0:	460c      	mov	r4, r1
 800f2b2:	4615      	mov	r5, r2
 800f2b4:	461f      	mov	r7, r3
 800f2b6:	2209      	movs	r2, #9
 800f2b8:	3308      	adds	r3, #8
 800f2ba:	4606      	mov	r6, r0
 800f2bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f2c0:	2100      	movs	r1, #0
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	db20      	blt.n	800f30a <__s2b+0x5e>
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	f7ff ff69 	bl	800f1a0 <_Balloc>
 800f2ce:	9b08      	ldr	r3, [sp, #32]
 800f2d0:	6143      	str	r3, [r0, #20]
 800f2d2:	2d09      	cmp	r5, #9
 800f2d4:	f04f 0301 	mov.w	r3, #1
 800f2d8:	6103      	str	r3, [r0, #16]
 800f2da:	dd19      	ble.n	800f310 <__s2b+0x64>
 800f2dc:	f104 0809 	add.w	r8, r4, #9
 800f2e0:	46c1      	mov	r9, r8
 800f2e2:	442c      	add	r4, r5
 800f2e4:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f2e8:	4601      	mov	r1, r0
 800f2ea:	3b30      	subs	r3, #48	; 0x30
 800f2ec:	220a      	movs	r2, #10
 800f2ee:	4630      	mov	r0, r6
 800f2f0:	f7ff ffa1 	bl	800f236 <__multadd>
 800f2f4:	45a1      	cmp	r9, r4
 800f2f6:	d1f5      	bne.n	800f2e4 <__s2b+0x38>
 800f2f8:	eb08 0405 	add.w	r4, r8, r5
 800f2fc:	3c08      	subs	r4, #8
 800f2fe:	1b2d      	subs	r5, r5, r4
 800f300:	1963      	adds	r3, r4, r5
 800f302:	42bb      	cmp	r3, r7
 800f304:	db07      	blt.n	800f316 <__s2b+0x6a>
 800f306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f30a:	0052      	lsls	r2, r2, #1
 800f30c:	3101      	adds	r1, #1
 800f30e:	e7d9      	b.n	800f2c4 <__s2b+0x18>
 800f310:	340a      	adds	r4, #10
 800f312:	2509      	movs	r5, #9
 800f314:	e7f3      	b.n	800f2fe <__s2b+0x52>
 800f316:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f31a:	4601      	mov	r1, r0
 800f31c:	3b30      	subs	r3, #48	; 0x30
 800f31e:	220a      	movs	r2, #10
 800f320:	4630      	mov	r0, r6
 800f322:	f7ff ff88 	bl	800f236 <__multadd>
 800f326:	e7eb      	b.n	800f300 <__s2b+0x54>

0800f328 <__hi0bits>:
 800f328:	0c02      	lsrs	r2, r0, #16
 800f32a:	0412      	lsls	r2, r2, #16
 800f32c:	4603      	mov	r3, r0
 800f32e:	b9b2      	cbnz	r2, 800f35e <__hi0bits+0x36>
 800f330:	0403      	lsls	r3, r0, #16
 800f332:	2010      	movs	r0, #16
 800f334:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f338:	bf04      	itt	eq
 800f33a:	021b      	lsleq	r3, r3, #8
 800f33c:	3008      	addeq	r0, #8
 800f33e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f342:	bf04      	itt	eq
 800f344:	011b      	lsleq	r3, r3, #4
 800f346:	3004      	addeq	r0, #4
 800f348:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f34c:	bf04      	itt	eq
 800f34e:	009b      	lsleq	r3, r3, #2
 800f350:	3002      	addeq	r0, #2
 800f352:	2b00      	cmp	r3, #0
 800f354:	db06      	blt.n	800f364 <__hi0bits+0x3c>
 800f356:	005b      	lsls	r3, r3, #1
 800f358:	d503      	bpl.n	800f362 <__hi0bits+0x3a>
 800f35a:	3001      	adds	r0, #1
 800f35c:	4770      	bx	lr
 800f35e:	2000      	movs	r0, #0
 800f360:	e7e8      	b.n	800f334 <__hi0bits+0xc>
 800f362:	2020      	movs	r0, #32
 800f364:	4770      	bx	lr

0800f366 <__lo0bits>:
 800f366:	6803      	ldr	r3, [r0, #0]
 800f368:	f013 0207 	ands.w	r2, r3, #7
 800f36c:	4601      	mov	r1, r0
 800f36e:	d00b      	beq.n	800f388 <__lo0bits+0x22>
 800f370:	07da      	lsls	r2, r3, #31
 800f372:	d423      	bmi.n	800f3bc <__lo0bits+0x56>
 800f374:	0798      	lsls	r0, r3, #30
 800f376:	bf49      	itett	mi
 800f378:	085b      	lsrmi	r3, r3, #1
 800f37a:	089b      	lsrpl	r3, r3, #2
 800f37c:	2001      	movmi	r0, #1
 800f37e:	600b      	strmi	r3, [r1, #0]
 800f380:	bf5c      	itt	pl
 800f382:	600b      	strpl	r3, [r1, #0]
 800f384:	2002      	movpl	r0, #2
 800f386:	4770      	bx	lr
 800f388:	b298      	uxth	r0, r3
 800f38a:	b9a8      	cbnz	r0, 800f3b8 <__lo0bits+0x52>
 800f38c:	0c1b      	lsrs	r3, r3, #16
 800f38e:	2010      	movs	r0, #16
 800f390:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f394:	bf04      	itt	eq
 800f396:	0a1b      	lsreq	r3, r3, #8
 800f398:	3008      	addeq	r0, #8
 800f39a:	071a      	lsls	r2, r3, #28
 800f39c:	bf04      	itt	eq
 800f39e:	091b      	lsreq	r3, r3, #4
 800f3a0:	3004      	addeq	r0, #4
 800f3a2:	079a      	lsls	r2, r3, #30
 800f3a4:	bf04      	itt	eq
 800f3a6:	089b      	lsreq	r3, r3, #2
 800f3a8:	3002      	addeq	r0, #2
 800f3aa:	07da      	lsls	r2, r3, #31
 800f3ac:	d402      	bmi.n	800f3b4 <__lo0bits+0x4e>
 800f3ae:	085b      	lsrs	r3, r3, #1
 800f3b0:	d006      	beq.n	800f3c0 <__lo0bits+0x5a>
 800f3b2:	3001      	adds	r0, #1
 800f3b4:	600b      	str	r3, [r1, #0]
 800f3b6:	4770      	bx	lr
 800f3b8:	4610      	mov	r0, r2
 800f3ba:	e7e9      	b.n	800f390 <__lo0bits+0x2a>
 800f3bc:	2000      	movs	r0, #0
 800f3be:	4770      	bx	lr
 800f3c0:	2020      	movs	r0, #32
 800f3c2:	4770      	bx	lr

0800f3c4 <__i2b>:
 800f3c4:	b510      	push	{r4, lr}
 800f3c6:	460c      	mov	r4, r1
 800f3c8:	2101      	movs	r1, #1
 800f3ca:	f7ff fee9 	bl	800f1a0 <_Balloc>
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	6144      	str	r4, [r0, #20]
 800f3d2:	6102      	str	r2, [r0, #16]
 800f3d4:	bd10      	pop	{r4, pc}

0800f3d6 <__multiply>:
 800f3d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3da:	4614      	mov	r4, r2
 800f3dc:	690a      	ldr	r2, [r1, #16]
 800f3de:	6923      	ldr	r3, [r4, #16]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	bfb8      	it	lt
 800f3e4:	460b      	movlt	r3, r1
 800f3e6:	4688      	mov	r8, r1
 800f3e8:	bfbc      	itt	lt
 800f3ea:	46a0      	movlt	r8, r4
 800f3ec:	461c      	movlt	r4, r3
 800f3ee:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f3f2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f3f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f3fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f3fe:	eb07 0609 	add.w	r6, r7, r9
 800f402:	42b3      	cmp	r3, r6
 800f404:	bfb8      	it	lt
 800f406:	3101      	addlt	r1, #1
 800f408:	f7ff feca 	bl	800f1a0 <_Balloc>
 800f40c:	f100 0514 	add.w	r5, r0, #20
 800f410:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f414:	462b      	mov	r3, r5
 800f416:	2200      	movs	r2, #0
 800f418:	4573      	cmp	r3, lr
 800f41a:	d316      	bcc.n	800f44a <__multiply+0x74>
 800f41c:	f104 0214 	add.w	r2, r4, #20
 800f420:	f108 0114 	add.w	r1, r8, #20
 800f424:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f428:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f42c:	9300      	str	r3, [sp, #0]
 800f42e:	9b00      	ldr	r3, [sp, #0]
 800f430:	9201      	str	r2, [sp, #4]
 800f432:	4293      	cmp	r3, r2
 800f434:	d80c      	bhi.n	800f450 <__multiply+0x7a>
 800f436:	2e00      	cmp	r6, #0
 800f438:	dd03      	ble.n	800f442 <__multiply+0x6c>
 800f43a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d05d      	beq.n	800f4fe <__multiply+0x128>
 800f442:	6106      	str	r6, [r0, #16]
 800f444:	b003      	add	sp, #12
 800f446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f44a:	f843 2b04 	str.w	r2, [r3], #4
 800f44e:	e7e3      	b.n	800f418 <__multiply+0x42>
 800f450:	f8b2 b000 	ldrh.w	fp, [r2]
 800f454:	f1bb 0f00 	cmp.w	fp, #0
 800f458:	d023      	beq.n	800f4a2 <__multiply+0xcc>
 800f45a:	4689      	mov	r9, r1
 800f45c:	46ac      	mov	ip, r5
 800f45e:	f04f 0800 	mov.w	r8, #0
 800f462:	f859 4b04 	ldr.w	r4, [r9], #4
 800f466:	f8dc a000 	ldr.w	sl, [ip]
 800f46a:	b2a3      	uxth	r3, r4
 800f46c:	fa1f fa8a 	uxth.w	sl, sl
 800f470:	fb0b a303 	mla	r3, fp, r3, sl
 800f474:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f478:	f8dc 4000 	ldr.w	r4, [ip]
 800f47c:	4443      	add	r3, r8
 800f47e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f482:	fb0b 840a 	mla	r4, fp, sl, r8
 800f486:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f48a:	46e2      	mov	sl, ip
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f492:	454f      	cmp	r7, r9
 800f494:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f498:	f84a 3b04 	str.w	r3, [sl], #4
 800f49c:	d82b      	bhi.n	800f4f6 <__multiply+0x120>
 800f49e:	f8cc 8004 	str.w	r8, [ip, #4]
 800f4a2:	9b01      	ldr	r3, [sp, #4]
 800f4a4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f4a8:	3204      	adds	r2, #4
 800f4aa:	f1ba 0f00 	cmp.w	sl, #0
 800f4ae:	d020      	beq.n	800f4f2 <__multiply+0x11c>
 800f4b0:	682b      	ldr	r3, [r5, #0]
 800f4b2:	4689      	mov	r9, r1
 800f4b4:	46a8      	mov	r8, r5
 800f4b6:	f04f 0b00 	mov.w	fp, #0
 800f4ba:	f8b9 c000 	ldrh.w	ip, [r9]
 800f4be:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f4c2:	fb0a 440c 	mla	r4, sl, ip, r4
 800f4c6:	445c      	add	r4, fp
 800f4c8:	46c4      	mov	ip, r8
 800f4ca:	b29b      	uxth	r3, r3
 800f4cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f4d0:	f84c 3b04 	str.w	r3, [ip], #4
 800f4d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800f4d8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f4dc:	0c1b      	lsrs	r3, r3, #16
 800f4de:	fb0a b303 	mla	r3, sl, r3, fp
 800f4e2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f4e6:	454f      	cmp	r7, r9
 800f4e8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f4ec:	d805      	bhi.n	800f4fa <__multiply+0x124>
 800f4ee:	f8c8 3004 	str.w	r3, [r8, #4]
 800f4f2:	3504      	adds	r5, #4
 800f4f4:	e79b      	b.n	800f42e <__multiply+0x58>
 800f4f6:	46d4      	mov	ip, sl
 800f4f8:	e7b3      	b.n	800f462 <__multiply+0x8c>
 800f4fa:	46e0      	mov	r8, ip
 800f4fc:	e7dd      	b.n	800f4ba <__multiply+0xe4>
 800f4fe:	3e01      	subs	r6, #1
 800f500:	e799      	b.n	800f436 <__multiply+0x60>
	...

0800f504 <__pow5mult>:
 800f504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f508:	4615      	mov	r5, r2
 800f50a:	f012 0203 	ands.w	r2, r2, #3
 800f50e:	4606      	mov	r6, r0
 800f510:	460f      	mov	r7, r1
 800f512:	d007      	beq.n	800f524 <__pow5mult+0x20>
 800f514:	3a01      	subs	r2, #1
 800f516:	4c21      	ldr	r4, [pc, #132]	; (800f59c <__pow5mult+0x98>)
 800f518:	2300      	movs	r3, #0
 800f51a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f51e:	f7ff fe8a 	bl	800f236 <__multadd>
 800f522:	4607      	mov	r7, r0
 800f524:	10ad      	asrs	r5, r5, #2
 800f526:	d035      	beq.n	800f594 <__pow5mult+0x90>
 800f528:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f52a:	b93c      	cbnz	r4, 800f53c <__pow5mult+0x38>
 800f52c:	2010      	movs	r0, #16
 800f52e:	f7ff fe1d 	bl	800f16c <malloc>
 800f532:	6270      	str	r0, [r6, #36]	; 0x24
 800f534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f538:	6004      	str	r4, [r0, #0]
 800f53a:	60c4      	str	r4, [r0, #12]
 800f53c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f544:	b94c      	cbnz	r4, 800f55a <__pow5mult+0x56>
 800f546:	f240 2171 	movw	r1, #625	; 0x271
 800f54a:	4630      	mov	r0, r6
 800f54c:	f7ff ff3a 	bl	800f3c4 <__i2b>
 800f550:	2300      	movs	r3, #0
 800f552:	f8c8 0008 	str.w	r0, [r8, #8]
 800f556:	4604      	mov	r4, r0
 800f558:	6003      	str	r3, [r0, #0]
 800f55a:	f04f 0800 	mov.w	r8, #0
 800f55e:	07eb      	lsls	r3, r5, #31
 800f560:	d50a      	bpl.n	800f578 <__pow5mult+0x74>
 800f562:	4639      	mov	r1, r7
 800f564:	4622      	mov	r2, r4
 800f566:	4630      	mov	r0, r6
 800f568:	f7ff ff35 	bl	800f3d6 <__multiply>
 800f56c:	4639      	mov	r1, r7
 800f56e:	4681      	mov	r9, r0
 800f570:	4630      	mov	r0, r6
 800f572:	f7ff fe49 	bl	800f208 <_Bfree>
 800f576:	464f      	mov	r7, r9
 800f578:	106d      	asrs	r5, r5, #1
 800f57a:	d00b      	beq.n	800f594 <__pow5mult+0x90>
 800f57c:	6820      	ldr	r0, [r4, #0]
 800f57e:	b938      	cbnz	r0, 800f590 <__pow5mult+0x8c>
 800f580:	4622      	mov	r2, r4
 800f582:	4621      	mov	r1, r4
 800f584:	4630      	mov	r0, r6
 800f586:	f7ff ff26 	bl	800f3d6 <__multiply>
 800f58a:	6020      	str	r0, [r4, #0]
 800f58c:	f8c0 8000 	str.w	r8, [r0]
 800f590:	4604      	mov	r4, r0
 800f592:	e7e4      	b.n	800f55e <__pow5mult+0x5a>
 800f594:	4638      	mov	r0, r7
 800f596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f59a:	bf00      	nop
 800f59c:	08010168 	.word	0x08010168

0800f5a0 <__lshift>:
 800f5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5a4:	460c      	mov	r4, r1
 800f5a6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f5aa:	6923      	ldr	r3, [r4, #16]
 800f5ac:	6849      	ldr	r1, [r1, #4]
 800f5ae:	eb0a 0903 	add.w	r9, sl, r3
 800f5b2:	68a3      	ldr	r3, [r4, #8]
 800f5b4:	4607      	mov	r7, r0
 800f5b6:	4616      	mov	r6, r2
 800f5b8:	f109 0501 	add.w	r5, r9, #1
 800f5bc:	42ab      	cmp	r3, r5
 800f5be:	db32      	blt.n	800f626 <__lshift+0x86>
 800f5c0:	4638      	mov	r0, r7
 800f5c2:	f7ff fded 	bl	800f1a0 <_Balloc>
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	4680      	mov	r8, r0
 800f5ca:	f100 0114 	add.w	r1, r0, #20
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	4553      	cmp	r3, sl
 800f5d2:	db2b      	blt.n	800f62c <__lshift+0x8c>
 800f5d4:	6920      	ldr	r0, [r4, #16]
 800f5d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f5da:	f104 0314 	add.w	r3, r4, #20
 800f5de:	f016 021f 	ands.w	r2, r6, #31
 800f5e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f5e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f5ea:	d025      	beq.n	800f638 <__lshift+0x98>
 800f5ec:	f1c2 0e20 	rsb	lr, r2, #32
 800f5f0:	2000      	movs	r0, #0
 800f5f2:	681e      	ldr	r6, [r3, #0]
 800f5f4:	468a      	mov	sl, r1
 800f5f6:	4096      	lsls	r6, r2
 800f5f8:	4330      	orrs	r0, r6
 800f5fa:	f84a 0b04 	str.w	r0, [sl], #4
 800f5fe:	f853 0b04 	ldr.w	r0, [r3], #4
 800f602:	459c      	cmp	ip, r3
 800f604:	fa20 f00e 	lsr.w	r0, r0, lr
 800f608:	d814      	bhi.n	800f634 <__lshift+0x94>
 800f60a:	6048      	str	r0, [r1, #4]
 800f60c:	b108      	cbz	r0, 800f612 <__lshift+0x72>
 800f60e:	f109 0502 	add.w	r5, r9, #2
 800f612:	3d01      	subs	r5, #1
 800f614:	4638      	mov	r0, r7
 800f616:	f8c8 5010 	str.w	r5, [r8, #16]
 800f61a:	4621      	mov	r1, r4
 800f61c:	f7ff fdf4 	bl	800f208 <_Bfree>
 800f620:	4640      	mov	r0, r8
 800f622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f626:	3101      	adds	r1, #1
 800f628:	005b      	lsls	r3, r3, #1
 800f62a:	e7c7      	b.n	800f5bc <__lshift+0x1c>
 800f62c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f630:	3301      	adds	r3, #1
 800f632:	e7cd      	b.n	800f5d0 <__lshift+0x30>
 800f634:	4651      	mov	r1, sl
 800f636:	e7dc      	b.n	800f5f2 <__lshift+0x52>
 800f638:	3904      	subs	r1, #4
 800f63a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f63e:	f841 2f04 	str.w	r2, [r1, #4]!
 800f642:	459c      	cmp	ip, r3
 800f644:	d8f9      	bhi.n	800f63a <__lshift+0x9a>
 800f646:	e7e4      	b.n	800f612 <__lshift+0x72>

0800f648 <__mcmp>:
 800f648:	6903      	ldr	r3, [r0, #16]
 800f64a:	690a      	ldr	r2, [r1, #16]
 800f64c:	1a9b      	subs	r3, r3, r2
 800f64e:	b530      	push	{r4, r5, lr}
 800f650:	d10c      	bne.n	800f66c <__mcmp+0x24>
 800f652:	0092      	lsls	r2, r2, #2
 800f654:	3014      	adds	r0, #20
 800f656:	3114      	adds	r1, #20
 800f658:	1884      	adds	r4, r0, r2
 800f65a:	4411      	add	r1, r2
 800f65c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f660:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f664:	4295      	cmp	r5, r2
 800f666:	d003      	beq.n	800f670 <__mcmp+0x28>
 800f668:	d305      	bcc.n	800f676 <__mcmp+0x2e>
 800f66a:	2301      	movs	r3, #1
 800f66c:	4618      	mov	r0, r3
 800f66e:	bd30      	pop	{r4, r5, pc}
 800f670:	42a0      	cmp	r0, r4
 800f672:	d3f3      	bcc.n	800f65c <__mcmp+0x14>
 800f674:	e7fa      	b.n	800f66c <__mcmp+0x24>
 800f676:	f04f 33ff 	mov.w	r3, #4294967295
 800f67a:	e7f7      	b.n	800f66c <__mcmp+0x24>

0800f67c <__mdiff>:
 800f67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f680:	460d      	mov	r5, r1
 800f682:	4607      	mov	r7, r0
 800f684:	4611      	mov	r1, r2
 800f686:	4628      	mov	r0, r5
 800f688:	4614      	mov	r4, r2
 800f68a:	f7ff ffdd 	bl	800f648 <__mcmp>
 800f68e:	1e06      	subs	r6, r0, #0
 800f690:	d108      	bne.n	800f6a4 <__mdiff+0x28>
 800f692:	4631      	mov	r1, r6
 800f694:	4638      	mov	r0, r7
 800f696:	f7ff fd83 	bl	800f1a0 <_Balloc>
 800f69a:	2301      	movs	r3, #1
 800f69c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6a4:	bfa4      	itt	ge
 800f6a6:	4623      	movge	r3, r4
 800f6a8:	462c      	movge	r4, r5
 800f6aa:	4638      	mov	r0, r7
 800f6ac:	6861      	ldr	r1, [r4, #4]
 800f6ae:	bfa6      	itte	ge
 800f6b0:	461d      	movge	r5, r3
 800f6b2:	2600      	movge	r6, #0
 800f6b4:	2601      	movlt	r6, #1
 800f6b6:	f7ff fd73 	bl	800f1a0 <_Balloc>
 800f6ba:	692b      	ldr	r3, [r5, #16]
 800f6bc:	60c6      	str	r6, [r0, #12]
 800f6be:	6926      	ldr	r6, [r4, #16]
 800f6c0:	f105 0914 	add.w	r9, r5, #20
 800f6c4:	f104 0214 	add.w	r2, r4, #20
 800f6c8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f6cc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f6d0:	f100 0514 	add.w	r5, r0, #20
 800f6d4:	f04f 0e00 	mov.w	lr, #0
 800f6d8:	f852 ab04 	ldr.w	sl, [r2], #4
 800f6dc:	f859 4b04 	ldr.w	r4, [r9], #4
 800f6e0:	fa1e f18a 	uxtah	r1, lr, sl
 800f6e4:	b2a3      	uxth	r3, r4
 800f6e6:	1ac9      	subs	r1, r1, r3
 800f6e8:	0c23      	lsrs	r3, r4, #16
 800f6ea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f6ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f6f2:	b289      	uxth	r1, r1
 800f6f4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f6f8:	45c8      	cmp	r8, r9
 800f6fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f6fe:	4694      	mov	ip, r2
 800f700:	f845 3b04 	str.w	r3, [r5], #4
 800f704:	d8e8      	bhi.n	800f6d8 <__mdiff+0x5c>
 800f706:	45bc      	cmp	ip, r7
 800f708:	d304      	bcc.n	800f714 <__mdiff+0x98>
 800f70a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f70e:	b183      	cbz	r3, 800f732 <__mdiff+0xb6>
 800f710:	6106      	str	r6, [r0, #16]
 800f712:	e7c5      	b.n	800f6a0 <__mdiff+0x24>
 800f714:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f718:	fa1e f381 	uxtah	r3, lr, r1
 800f71c:	141a      	asrs	r2, r3, #16
 800f71e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f722:	b29b      	uxth	r3, r3
 800f724:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f728:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f72c:	f845 3b04 	str.w	r3, [r5], #4
 800f730:	e7e9      	b.n	800f706 <__mdiff+0x8a>
 800f732:	3e01      	subs	r6, #1
 800f734:	e7e9      	b.n	800f70a <__mdiff+0x8e>
	...

0800f738 <__ulp>:
 800f738:	4b12      	ldr	r3, [pc, #72]	; (800f784 <__ulp+0x4c>)
 800f73a:	ee10 2a90 	vmov	r2, s1
 800f73e:	401a      	ands	r2, r3
 800f740:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800f744:	2b00      	cmp	r3, #0
 800f746:	dd04      	ble.n	800f752 <__ulp+0x1a>
 800f748:	2000      	movs	r0, #0
 800f74a:	4619      	mov	r1, r3
 800f74c:	ec41 0b10 	vmov	d0, r0, r1
 800f750:	4770      	bx	lr
 800f752:	425b      	negs	r3, r3
 800f754:	151b      	asrs	r3, r3, #20
 800f756:	2b13      	cmp	r3, #19
 800f758:	f04f 0000 	mov.w	r0, #0
 800f75c:	f04f 0100 	mov.w	r1, #0
 800f760:	dc04      	bgt.n	800f76c <__ulp+0x34>
 800f762:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f766:	fa42 f103 	asr.w	r1, r2, r3
 800f76a:	e7ef      	b.n	800f74c <__ulp+0x14>
 800f76c:	3b14      	subs	r3, #20
 800f76e:	2b1e      	cmp	r3, #30
 800f770:	f04f 0201 	mov.w	r2, #1
 800f774:	bfda      	itte	le
 800f776:	f1c3 031f 	rsble	r3, r3, #31
 800f77a:	fa02 f303 	lslle.w	r3, r2, r3
 800f77e:	4613      	movgt	r3, r2
 800f780:	4618      	mov	r0, r3
 800f782:	e7e3      	b.n	800f74c <__ulp+0x14>
 800f784:	7ff00000 	.word	0x7ff00000

0800f788 <__b2d>:
 800f788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f78a:	6905      	ldr	r5, [r0, #16]
 800f78c:	f100 0714 	add.w	r7, r0, #20
 800f790:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f794:	1f2e      	subs	r6, r5, #4
 800f796:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f79a:	4620      	mov	r0, r4
 800f79c:	f7ff fdc4 	bl	800f328 <__hi0bits>
 800f7a0:	f1c0 0320 	rsb	r3, r0, #32
 800f7a4:	280a      	cmp	r0, #10
 800f7a6:	600b      	str	r3, [r1, #0]
 800f7a8:	f8df c074 	ldr.w	ip, [pc, #116]	; 800f820 <__b2d+0x98>
 800f7ac:	dc14      	bgt.n	800f7d8 <__b2d+0x50>
 800f7ae:	f1c0 0e0b 	rsb	lr, r0, #11
 800f7b2:	fa24 f10e 	lsr.w	r1, r4, lr
 800f7b6:	42b7      	cmp	r7, r6
 800f7b8:	ea41 030c 	orr.w	r3, r1, ip
 800f7bc:	bf34      	ite	cc
 800f7be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f7c2:	2100      	movcs	r1, #0
 800f7c4:	3015      	adds	r0, #21
 800f7c6:	fa04 f000 	lsl.w	r0, r4, r0
 800f7ca:	fa21 f10e 	lsr.w	r1, r1, lr
 800f7ce:	ea40 0201 	orr.w	r2, r0, r1
 800f7d2:	ec43 2b10 	vmov	d0, r2, r3
 800f7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7d8:	42b7      	cmp	r7, r6
 800f7da:	bf3a      	itte	cc
 800f7dc:	f1a5 0608 	subcc.w	r6, r5, #8
 800f7e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f7e4:	2100      	movcs	r1, #0
 800f7e6:	380b      	subs	r0, #11
 800f7e8:	d015      	beq.n	800f816 <__b2d+0x8e>
 800f7ea:	4084      	lsls	r4, r0
 800f7ec:	f1c0 0520 	rsb	r5, r0, #32
 800f7f0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800f7f4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800f7f8:	42be      	cmp	r6, r7
 800f7fa:	fa21 fc05 	lsr.w	ip, r1, r5
 800f7fe:	ea44 030c 	orr.w	r3, r4, ip
 800f802:	bf8c      	ite	hi
 800f804:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f808:	2400      	movls	r4, #0
 800f80a:	fa01 f000 	lsl.w	r0, r1, r0
 800f80e:	40ec      	lsrs	r4, r5
 800f810:	ea40 0204 	orr.w	r2, r0, r4
 800f814:	e7dd      	b.n	800f7d2 <__b2d+0x4a>
 800f816:	ea44 030c 	orr.w	r3, r4, ip
 800f81a:	460a      	mov	r2, r1
 800f81c:	e7d9      	b.n	800f7d2 <__b2d+0x4a>
 800f81e:	bf00      	nop
 800f820:	3ff00000 	.word	0x3ff00000

0800f824 <__d2b>:
 800f824:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f828:	460e      	mov	r6, r1
 800f82a:	2101      	movs	r1, #1
 800f82c:	ec59 8b10 	vmov	r8, r9, d0
 800f830:	4615      	mov	r5, r2
 800f832:	f7ff fcb5 	bl	800f1a0 <_Balloc>
 800f836:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f83a:	4607      	mov	r7, r0
 800f83c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f840:	bb34      	cbnz	r4, 800f890 <__d2b+0x6c>
 800f842:	9301      	str	r3, [sp, #4]
 800f844:	f1b8 0300 	subs.w	r3, r8, #0
 800f848:	d027      	beq.n	800f89a <__d2b+0x76>
 800f84a:	a802      	add	r0, sp, #8
 800f84c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f850:	f7ff fd89 	bl	800f366 <__lo0bits>
 800f854:	9900      	ldr	r1, [sp, #0]
 800f856:	b1f0      	cbz	r0, 800f896 <__d2b+0x72>
 800f858:	9a01      	ldr	r2, [sp, #4]
 800f85a:	f1c0 0320 	rsb	r3, r0, #32
 800f85e:	fa02 f303 	lsl.w	r3, r2, r3
 800f862:	430b      	orrs	r3, r1
 800f864:	40c2      	lsrs	r2, r0
 800f866:	617b      	str	r3, [r7, #20]
 800f868:	9201      	str	r2, [sp, #4]
 800f86a:	9b01      	ldr	r3, [sp, #4]
 800f86c:	61bb      	str	r3, [r7, #24]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	bf14      	ite	ne
 800f872:	2102      	movne	r1, #2
 800f874:	2101      	moveq	r1, #1
 800f876:	6139      	str	r1, [r7, #16]
 800f878:	b1c4      	cbz	r4, 800f8ac <__d2b+0x88>
 800f87a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f87e:	4404      	add	r4, r0
 800f880:	6034      	str	r4, [r6, #0]
 800f882:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f886:	6028      	str	r0, [r5, #0]
 800f888:	4638      	mov	r0, r7
 800f88a:	b003      	add	sp, #12
 800f88c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f890:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f894:	e7d5      	b.n	800f842 <__d2b+0x1e>
 800f896:	6179      	str	r1, [r7, #20]
 800f898:	e7e7      	b.n	800f86a <__d2b+0x46>
 800f89a:	a801      	add	r0, sp, #4
 800f89c:	f7ff fd63 	bl	800f366 <__lo0bits>
 800f8a0:	9b01      	ldr	r3, [sp, #4]
 800f8a2:	617b      	str	r3, [r7, #20]
 800f8a4:	2101      	movs	r1, #1
 800f8a6:	6139      	str	r1, [r7, #16]
 800f8a8:	3020      	adds	r0, #32
 800f8aa:	e7e5      	b.n	800f878 <__d2b+0x54>
 800f8ac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f8b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f8b4:	6030      	str	r0, [r6, #0]
 800f8b6:	6918      	ldr	r0, [r3, #16]
 800f8b8:	f7ff fd36 	bl	800f328 <__hi0bits>
 800f8bc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f8c0:	e7e1      	b.n	800f886 <__d2b+0x62>

0800f8c2 <__ratio>:
 800f8c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8c6:	4688      	mov	r8, r1
 800f8c8:	4669      	mov	r1, sp
 800f8ca:	4681      	mov	r9, r0
 800f8cc:	f7ff ff5c 	bl	800f788 <__b2d>
 800f8d0:	a901      	add	r1, sp, #4
 800f8d2:	4640      	mov	r0, r8
 800f8d4:	ec57 6b10 	vmov	r6, r7, d0
 800f8d8:	ee10 4a10 	vmov	r4, s0
 800f8dc:	f7ff ff54 	bl	800f788 <__b2d>
 800f8e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f8e4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f8e8:	eba3 0c02 	sub.w	ip, r3, r2
 800f8ec:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f8f0:	1a9b      	subs	r3, r3, r2
 800f8f2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f8f6:	ec51 0b10 	vmov	r0, r1, d0
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	ee10 aa10 	vmov	sl, s0
 800f900:	bfce      	itee	gt
 800f902:	463a      	movgt	r2, r7
 800f904:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f908:	460a      	movle	r2, r1
 800f90a:	463d      	mov	r5, r7
 800f90c:	468b      	mov	fp, r1
 800f90e:	bfcc      	ite	gt
 800f910:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800f914:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f918:	ec45 4b17 	vmov	d7, r4, r5
 800f91c:	ec4b ab16 	vmov	d6, sl, fp
 800f920:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800f924:	b003      	add	sp, #12
 800f926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f92a <__copybits>:
 800f92a:	3901      	subs	r1, #1
 800f92c:	b510      	push	{r4, lr}
 800f92e:	1149      	asrs	r1, r1, #5
 800f930:	6914      	ldr	r4, [r2, #16]
 800f932:	3101      	adds	r1, #1
 800f934:	f102 0314 	add.w	r3, r2, #20
 800f938:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f93c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f940:	42a3      	cmp	r3, r4
 800f942:	4602      	mov	r2, r0
 800f944:	d303      	bcc.n	800f94e <__copybits+0x24>
 800f946:	2300      	movs	r3, #0
 800f948:	428a      	cmp	r2, r1
 800f94a:	d305      	bcc.n	800f958 <__copybits+0x2e>
 800f94c:	bd10      	pop	{r4, pc}
 800f94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f952:	f840 2b04 	str.w	r2, [r0], #4
 800f956:	e7f3      	b.n	800f940 <__copybits+0x16>
 800f958:	f842 3b04 	str.w	r3, [r2], #4
 800f95c:	e7f4      	b.n	800f948 <__copybits+0x1e>

0800f95e <__any_on>:
 800f95e:	f100 0214 	add.w	r2, r0, #20
 800f962:	6900      	ldr	r0, [r0, #16]
 800f964:	114b      	asrs	r3, r1, #5
 800f966:	4298      	cmp	r0, r3
 800f968:	b510      	push	{r4, lr}
 800f96a:	db11      	blt.n	800f990 <__any_on+0x32>
 800f96c:	dd0a      	ble.n	800f984 <__any_on+0x26>
 800f96e:	f011 011f 	ands.w	r1, r1, #31
 800f972:	d007      	beq.n	800f984 <__any_on+0x26>
 800f974:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f978:	fa24 f001 	lsr.w	r0, r4, r1
 800f97c:	fa00 f101 	lsl.w	r1, r0, r1
 800f980:	428c      	cmp	r4, r1
 800f982:	d10b      	bne.n	800f99c <__any_on+0x3e>
 800f984:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f988:	4293      	cmp	r3, r2
 800f98a:	d803      	bhi.n	800f994 <__any_on+0x36>
 800f98c:	2000      	movs	r0, #0
 800f98e:	bd10      	pop	{r4, pc}
 800f990:	4603      	mov	r3, r0
 800f992:	e7f7      	b.n	800f984 <__any_on+0x26>
 800f994:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f998:	2900      	cmp	r1, #0
 800f99a:	d0f5      	beq.n	800f988 <__any_on+0x2a>
 800f99c:	2001      	movs	r0, #1
 800f99e:	e7f6      	b.n	800f98e <__any_on+0x30>

0800f9a0 <_calloc_r>:
 800f9a0:	b538      	push	{r3, r4, r5, lr}
 800f9a2:	fb02 f401 	mul.w	r4, r2, r1
 800f9a6:	4621      	mov	r1, r4
 800f9a8:	f000 f856 	bl	800fa58 <_malloc_r>
 800f9ac:	4605      	mov	r5, r0
 800f9ae:	b118      	cbz	r0, 800f9b8 <_calloc_r+0x18>
 800f9b0:	4622      	mov	r2, r4
 800f9b2:	2100      	movs	r1, #0
 800f9b4:	f7fc fe07 	bl	800c5c6 <memset>
 800f9b8:	4628      	mov	r0, r5
 800f9ba:	bd38      	pop	{r3, r4, r5, pc}

0800f9bc <_free_r>:
 800f9bc:	b538      	push	{r3, r4, r5, lr}
 800f9be:	4605      	mov	r5, r0
 800f9c0:	2900      	cmp	r1, #0
 800f9c2:	d045      	beq.n	800fa50 <_free_r+0x94>
 800f9c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9c8:	1f0c      	subs	r4, r1, #4
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	bfb8      	it	lt
 800f9ce:	18e4      	addlt	r4, r4, r3
 800f9d0:	f000 fa36 	bl	800fe40 <__malloc_lock>
 800f9d4:	4a1f      	ldr	r2, [pc, #124]	; (800fa54 <_free_r+0x98>)
 800f9d6:	6813      	ldr	r3, [r2, #0]
 800f9d8:	4610      	mov	r0, r2
 800f9da:	b933      	cbnz	r3, 800f9ea <_free_r+0x2e>
 800f9dc:	6063      	str	r3, [r4, #4]
 800f9de:	6014      	str	r4, [r2, #0]
 800f9e0:	4628      	mov	r0, r5
 800f9e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9e6:	f000 ba2c 	b.w	800fe42 <__malloc_unlock>
 800f9ea:	42a3      	cmp	r3, r4
 800f9ec:	d90c      	bls.n	800fa08 <_free_r+0x4c>
 800f9ee:	6821      	ldr	r1, [r4, #0]
 800f9f0:	1862      	adds	r2, r4, r1
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	bf04      	itt	eq
 800f9f6:	681a      	ldreq	r2, [r3, #0]
 800f9f8:	685b      	ldreq	r3, [r3, #4]
 800f9fa:	6063      	str	r3, [r4, #4]
 800f9fc:	bf04      	itt	eq
 800f9fe:	1852      	addeq	r2, r2, r1
 800fa00:	6022      	streq	r2, [r4, #0]
 800fa02:	6004      	str	r4, [r0, #0]
 800fa04:	e7ec      	b.n	800f9e0 <_free_r+0x24>
 800fa06:	4613      	mov	r3, r2
 800fa08:	685a      	ldr	r2, [r3, #4]
 800fa0a:	b10a      	cbz	r2, 800fa10 <_free_r+0x54>
 800fa0c:	42a2      	cmp	r2, r4
 800fa0e:	d9fa      	bls.n	800fa06 <_free_r+0x4a>
 800fa10:	6819      	ldr	r1, [r3, #0]
 800fa12:	1858      	adds	r0, r3, r1
 800fa14:	42a0      	cmp	r0, r4
 800fa16:	d10b      	bne.n	800fa30 <_free_r+0x74>
 800fa18:	6820      	ldr	r0, [r4, #0]
 800fa1a:	4401      	add	r1, r0
 800fa1c:	1858      	adds	r0, r3, r1
 800fa1e:	4282      	cmp	r2, r0
 800fa20:	6019      	str	r1, [r3, #0]
 800fa22:	d1dd      	bne.n	800f9e0 <_free_r+0x24>
 800fa24:	6810      	ldr	r0, [r2, #0]
 800fa26:	6852      	ldr	r2, [r2, #4]
 800fa28:	605a      	str	r2, [r3, #4]
 800fa2a:	4401      	add	r1, r0
 800fa2c:	6019      	str	r1, [r3, #0]
 800fa2e:	e7d7      	b.n	800f9e0 <_free_r+0x24>
 800fa30:	d902      	bls.n	800fa38 <_free_r+0x7c>
 800fa32:	230c      	movs	r3, #12
 800fa34:	602b      	str	r3, [r5, #0]
 800fa36:	e7d3      	b.n	800f9e0 <_free_r+0x24>
 800fa38:	6820      	ldr	r0, [r4, #0]
 800fa3a:	1821      	adds	r1, r4, r0
 800fa3c:	428a      	cmp	r2, r1
 800fa3e:	bf04      	itt	eq
 800fa40:	6811      	ldreq	r1, [r2, #0]
 800fa42:	6852      	ldreq	r2, [r2, #4]
 800fa44:	6062      	str	r2, [r4, #4]
 800fa46:	bf04      	itt	eq
 800fa48:	1809      	addeq	r1, r1, r0
 800fa4a:	6021      	streq	r1, [r4, #0]
 800fa4c:	605c      	str	r4, [r3, #4]
 800fa4e:	e7c7      	b.n	800f9e0 <_free_r+0x24>
 800fa50:	bd38      	pop	{r3, r4, r5, pc}
 800fa52:	bf00      	nop
 800fa54:	20004c2c 	.word	0x20004c2c

0800fa58 <_malloc_r>:
 800fa58:	b570      	push	{r4, r5, r6, lr}
 800fa5a:	1ccd      	adds	r5, r1, #3
 800fa5c:	f025 0503 	bic.w	r5, r5, #3
 800fa60:	3508      	adds	r5, #8
 800fa62:	2d0c      	cmp	r5, #12
 800fa64:	bf38      	it	cc
 800fa66:	250c      	movcc	r5, #12
 800fa68:	2d00      	cmp	r5, #0
 800fa6a:	4606      	mov	r6, r0
 800fa6c:	db01      	blt.n	800fa72 <_malloc_r+0x1a>
 800fa6e:	42a9      	cmp	r1, r5
 800fa70:	d903      	bls.n	800fa7a <_malloc_r+0x22>
 800fa72:	230c      	movs	r3, #12
 800fa74:	6033      	str	r3, [r6, #0]
 800fa76:	2000      	movs	r0, #0
 800fa78:	bd70      	pop	{r4, r5, r6, pc}
 800fa7a:	f000 f9e1 	bl	800fe40 <__malloc_lock>
 800fa7e:	4a21      	ldr	r2, [pc, #132]	; (800fb04 <_malloc_r+0xac>)
 800fa80:	6814      	ldr	r4, [r2, #0]
 800fa82:	4621      	mov	r1, r4
 800fa84:	b991      	cbnz	r1, 800faac <_malloc_r+0x54>
 800fa86:	4c20      	ldr	r4, [pc, #128]	; (800fb08 <_malloc_r+0xb0>)
 800fa88:	6823      	ldr	r3, [r4, #0]
 800fa8a:	b91b      	cbnz	r3, 800fa94 <_malloc_r+0x3c>
 800fa8c:	4630      	mov	r0, r6
 800fa8e:	f000 f98f 	bl	800fdb0 <_sbrk_r>
 800fa92:	6020      	str	r0, [r4, #0]
 800fa94:	4629      	mov	r1, r5
 800fa96:	4630      	mov	r0, r6
 800fa98:	f000 f98a 	bl	800fdb0 <_sbrk_r>
 800fa9c:	1c43      	adds	r3, r0, #1
 800fa9e:	d124      	bne.n	800faea <_malloc_r+0x92>
 800faa0:	230c      	movs	r3, #12
 800faa2:	6033      	str	r3, [r6, #0]
 800faa4:	4630      	mov	r0, r6
 800faa6:	f000 f9cc 	bl	800fe42 <__malloc_unlock>
 800faaa:	e7e4      	b.n	800fa76 <_malloc_r+0x1e>
 800faac:	680b      	ldr	r3, [r1, #0]
 800faae:	1b5b      	subs	r3, r3, r5
 800fab0:	d418      	bmi.n	800fae4 <_malloc_r+0x8c>
 800fab2:	2b0b      	cmp	r3, #11
 800fab4:	d90f      	bls.n	800fad6 <_malloc_r+0x7e>
 800fab6:	600b      	str	r3, [r1, #0]
 800fab8:	50cd      	str	r5, [r1, r3]
 800faba:	18cc      	adds	r4, r1, r3
 800fabc:	4630      	mov	r0, r6
 800fabe:	f000 f9c0 	bl	800fe42 <__malloc_unlock>
 800fac2:	f104 000b 	add.w	r0, r4, #11
 800fac6:	1d23      	adds	r3, r4, #4
 800fac8:	f020 0007 	bic.w	r0, r0, #7
 800facc:	1ac3      	subs	r3, r0, r3
 800face:	d0d3      	beq.n	800fa78 <_malloc_r+0x20>
 800fad0:	425a      	negs	r2, r3
 800fad2:	50e2      	str	r2, [r4, r3]
 800fad4:	e7d0      	b.n	800fa78 <_malloc_r+0x20>
 800fad6:	428c      	cmp	r4, r1
 800fad8:	684b      	ldr	r3, [r1, #4]
 800fada:	bf16      	itet	ne
 800fadc:	6063      	strne	r3, [r4, #4]
 800fade:	6013      	streq	r3, [r2, #0]
 800fae0:	460c      	movne	r4, r1
 800fae2:	e7eb      	b.n	800fabc <_malloc_r+0x64>
 800fae4:	460c      	mov	r4, r1
 800fae6:	6849      	ldr	r1, [r1, #4]
 800fae8:	e7cc      	b.n	800fa84 <_malloc_r+0x2c>
 800faea:	1cc4      	adds	r4, r0, #3
 800faec:	f024 0403 	bic.w	r4, r4, #3
 800faf0:	42a0      	cmp	r0, r4
 800faf2:	d005      	beq.n	800fb00 <_malloc_r+0xa8>
 800faf4:	1a21      	subs	r1, r4, r0
 800faf6:	4630      	mov	r0, r6
 800faf8:	f000 f95a 	bl	800fdb0 <_sbrk_r>
 800fafc:	3001      	adds	r0, #1
 800fafe:	d0cf      	beq.n	800faa0 <_malloc_r+0x48>
 800fb00:	6025      	str	r5, [r4, #0]
 800fb02:	e7db      	b.n	800fabc <_malloc_r+0x64>
 800fb04:	20004c2c 	.word	0x20004c2c
 800fb08:	20004c30 	.word	0x20004c30

0800fb0c <__ssputs_r>:
 800fb0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb10:	688e      	ldr	r6, [r1, #8]
 800fb12:	429e      	cmp	r6, r3
 800fb14:	4682      	mov	sl, r0
 800fb16:	460c      	mov	r4, r1
 800fb18:	4690      	mov	r8, r2
 800fb1a:	4699      	mov	r9, r3
 800fb1c:	d837      	bhi.n	800fb8e <__ssputs_r+0x82>
 800fb1e:	898a      	ldrh	r2, [r1, #12]
 800fb20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fb24:	d031      	beq.n	800fb8a <__ssputs_r+0x7e>
 800fb26:	6825      	ldr	r5, [r4, #0]
 800fb28:	6909      	ldr	r1, [r1, #16]
 800fb2a:	1a6f      	subs	r7, r5, r1
 800fb2c:	6965      	ldr	r5, [r4, #20]
 800fb2e:	2302      	movs	r3, #2
 800fb30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fb34:	fb95 f5f3 	sdiv	r5, r5, r3
 800fb38:	f109 0301 	add.w	r3, r9, #1
 800fb3c:	443b      	add	r3, r7
 800fb3e:	429d      	cmp	r5, r3
 800fb40:	bf38      	it	cc
 800fb42:	461d      	movcc	r5, r3
 800fb44:	0553      	lsls	r3, r2, #21
 800fb46:	d530      	bpl.n	800fbaa <__ssputs_r+0x9e>
 800fb48:	4629      	mov	r1, r5
 800fb4a:	f7ff ff85 	bl	800fa58 <_malloc_r>
 800fb4e:	4606      	mov	r6, r0
 800fb50:	b950      	cbnz	r0, 800fb68 <__ssputs_r+0x5c>
 800fb52:	230c      	movs	r3, #12
 800fb54:	f8ca 3000 	str.w	r3, [sl]
 800fb58:	89a3      	ldrh	r3, [r4, #12]
 800fb5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb5e:	81a3      	strh	r3, [r4, #12]
 800fb60:	f04f 30ff 	mov.w	r0, #4294967295
 800fb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb68:	463a      	mov	r2, r7
 800fb6a:	6921      	ldr	r1, [r4, #16]
 800fb6c:	f7fc fd20 	bl	800c5b0 <memcpy>
 800fb70:	89a3      	ldrh	r3, [r4, #12]
 800fb72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fb76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb7a:	81a3      	strh	r3, [r4, #12]
 800fb7c:	6126      	str	r6, [r4, #16]
 800fb7e:	6165      	str	r5, [r4, #20]
 800fb80:	443e      	add	r6, r7
 800fb82:	1bed      	subs	r5, r5, r7
 800fb84:	6026      	str	r6, [r4, #0]
 800fb86:	60a5      	str	r5, [r4, #8]
 800fb88:	464e      	mov	r6, r9
 800fb8a:	454e      	cmp	r6, r9
 800fb8c:	d900      	bls.n	800fb90 <__ssputs_r+0x84>
 800fb8e:	464e      	mov	r6, r9
 800fb90:	4632      	mov	r2, r6
 800fb92:	4641      	mov	r1, r8
 800fb94:	6820      	ldr	r0, [r4, #0]
 800fb96:	f000 f93a 	bl	800fe0e <memmove>
 800fb9a:	68a3      	ldr	r3, [r4, #8]
 800fb9c:	1b9b      	subs	r3, r3, r6
 800fb9e:	60a3      	str	r3, [r4, #8]
 800fba0:	6823      	ldr	r3, [r4, #0]
 800fba2:	441e      	add	r6, r3
 800fba4:	6026      	str	r6, [r4, #0]
 800fba6:	2000      	movs	r0, #0
 800fba8:	e7dc      	b.n	800fb64 <__ssputs_r+0x58>
 800fbaa:	462a      	mov	r2, r5
 800fbac:	f000 f94a 	bl	800fe44 <_realloc_r>
 800fbb0:	4606      	mov	r6, r0
 800fbb2:	2800      	cmp	r0, #0
 800fbb4:	d1e2      	bne.n	800fb7c <__ssputs_r+0x70>
 800fbb6:	6921      	ldr	r1, [r4, #16]
 800fbb8:	4650      	mov	r0, sl
 800fbba:	f7ff feff 	bl	800f9bc <_free_r>
 800fbbe:	e7c8      	b.n	800fb52 <__ssputs_r+0x46>

0800fbc0 <_svfiprintf_r>:
 800fbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc4:	461d      	mov	r5, r3
 800fbc6:	898b      	ldrh	r3, [r1, #12]
 800fbc8:	061f      	lsls	r7, r3, #24
 800fbca:	b09d      	sub	sp, #116	; 0x74
 800fbcc:	4680      	mov	r8, r0
 800fbce:	460c      	mov	r4, r1
 800fbd0:	4616      	mov	r6, r2
 800fbd2:	d50f      	bpl.n	800fbf4 <_svfiprintf_r+0x34>
 800fbd4:	690b      	ldr	r3, [r1, #16]
 800fbd6:	b96b      	cbnz	r3, 800fbf4 <_svfiprintf_r+0x34>
 800fbd8:	2140      	movs	r1, #64	; 0x40
 800fbda:	f7ff ff3d 	bl	800fa58 <_malloc_r>
 800fbde:	6020      	str	r0, [r4, #0]
 800fbe0:	6120      	str	r0, [r4, #16]
 800fbe2:	b928      	cbnz	r0, 800fbf0 <_svfiprintf_r+0x30>
 800fbe4:	230c      	movs	r3, #12
 800fbe6:	f8c8 3000 	str.w	r3, [r8]
 800fbea:	f04f 30ff 	mov.w	r0, #4294967295
 800fbee:	e0c8      	b.n	800fd82 <_svfiprintf_r+0x1c2>
 800fbf0:	2340      	movs	r3, #64	; 0x40
 800fbf2:	6163      	str	r3, [r4, #20]
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	9309      	str	r3, [sp, #36]	; 0x24
 800fbf8:	2320      	movs	r3, #32
 800fbfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fbfe:	2330      	movs	r3, #48	; 0x30
 800fc00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc04:	9503      	str	r5, [sp, #12]
 800fc06:	f04f 0b01 	mov.w	fp, #1
 800fc0a:	4637      	mov	r7, r6
 800fc0c:	463d      	mov	r5, r7
 800fc0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fc12:	b10b      	cbz	r3, 800fc18 <_svfiprintf_r+0x58>
 800fc14:	2b25      	cmp	r3, #37	; 0x25
 800fc16:	d13e      	bne.n	800fc96 <_svfiprintf_r+0xd6>
 800fc18:	ebb7 0a06 	subs.w	sl, r7, r6
 800fc1c:	d00b      	beq.n	800fc36 <_svfiprintf_r+0x76>
 800fc1e:	4653      	mov	r3, sl
 800fc20:	4632      	mov	r2, r6
 800fc22:	4621      	mov	r1, r4
 800fc24:	4640      	mov	r0, r8
 800fc26:	f7ff ff71 	bl	800fb0c <__ssputs_r>
 800fc2a:	3001      	adds	r0, #1
 800fc2c:	f000 80a4 	beq.w	800fd78 <_svfiprintf_r+0x1b8>
 800fc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc32:	4453      	add	r3, sl
 800fc34:	9309      	str	r3, [sp, #36]	; 0x24
 800fc36:	783b      	ldrb	r3, [r7, #0]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	f000 809d 	beq.w	800fd78 <_svfiprintf_r+0x1b8>
 800fc3e:	2300      	movs	r3, #0
 800fc40:	f04f 32ff 	mov.w	r2, #4294967295
 800fc44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc48:	9304      	str	r3, [sp, #16]
 800fc4a:	9307      	str	r3, [sp, #28]
 800fc4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc50:	931a      	str	r3, [sp, #104]	; 0x68
 800fc52:	462f      	mov	r7, r5
 800fc54:	2205      	movs	r2, #5
 800fc56:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fc5a:	4850      	ldr	r0, [pc, #320]	; (800fd9c <_svfiprintf_r+0x1dc>)
 800fc5c:	f7f0 faf8 	bl	8000250 <memchr>
 800fc60:	9b04      	ldr	r3, [sp, #16]
 800fc62:	b9d0      	cbnz	r0, 800fc9a <_svfiprintf_r+0xda>
 800fc64:	06d9      	lsls	r1, r3, #27
 800fc66:	bf44      	itt	mi
 800fc68:	2220      	movmi	r2, #32
 800fc6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fc6e:	071a      	lsls	r2, r3, #28
 800fc70:	bf44      	itt	mi
 800fc72:	222b      	movmi	r2, #43	; 0x2b
 800fc74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fc78:	782a      	ldrb	r2, [r5, #0]
 800fc7a:	2a2a      	cmp	r2, #42	; 0x2a
 800fc7c:	d015      	beq.n	800fcaa <_svfiprintf_r+0xea>
 800fc7e:	9a07      	ldr	r2, [sp, #28]
 800fc80:	462f      	mov	r7, r5
 800fc82:	2000      	movs	r0, #0
 800fc84:	250a      	movs	r5, #10
 800fc86:	4639      	mov	r1, r7
 800fc88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc8c:	3b30      	subs	r3, #48	; 0x30
 800fc8e:	2b09      	cmp	r3, #9
 800fc90:	d94d      	bls.n	800fd2e <_svfiprintf_r+0x16e>
 800fc92:	b1b8      	cbz	r0, 800fcc4 <_svfiprintf_r+0x104>
 800fc94:	e00f      	b.n	800fcb6 <_svfiprintf_r+0xf6>
 800fc96:	462f      	mov	r7, r5
 800fc98:	e7b8      	b.n	800fc0c <_svfiprintf_r+0x4c>
 800fc9a:	4a40      	ldr	r2, [pc, #256]	; (800fd9c <_svfiprintf_r+0x1dc>)
 800fc9c:	1a80      	subs	r0, r0, r2
 800fc9e:	fa0b f000 	lsl.w	r0, fp, r0
 800fca2:	4318      	orrs	r0, r3
 800fca4:	9004      	str	r0, [sp, #16]
 800fca6:	463d      	mov	r5, r7
 800fca8:	e7d3      	b.n	800fc52 <_svfiprintf_r+0x92>
 800fcaa:	9a03      	ldr	r2, [sp, #12]
 800fcac:	1d11      	adds	r1, r2, #4
 800fcae:	6812      	ldr	r2, [r2, #0]
 800fcb0:	9103      	str	r1, [sp, #12]
 800fcb2:	2a00      	cmp	r2, #0
 800fcb4:	db01      	blt.n	800fcba <_svfiprintf_r+0xfa>
 800fcb6:	9207      	str	r2, [sp, #28]
 800fcb8:	e004      	b.n	800fcc4 <_svfiprintf_r+0x104>
 800fcba:	4252      	negs	r2, r2
 800fcbc:	f043 0302 	orr.w	r3, r3, #2
 800fcc0:	9207      	str	r2, [sp, #28]
 800fcc2:	9304      	str	r3, [sp, #16]
 800fcc4:	783b      	ldrb	r3, [r7, #0]
 800fcc6:	2b2e      	cmp	r3, #46	; 0x2e
 800fcc8:	d10c      	bne.n	800fce4 <_svfiprintf_r+0x124>
 800fcca:	787b      	ldrb	r3, [r7, #1]
 800fccc:	2b2a      	cmp	r3, #42	; 0x2a
 800fcce:	d133      	bne.n	800fd38 <_svfiprintf_r+0x178>
 800fcd0:	9b03      	ldr	r3, [sp, #12]
 800fcd2:	1d1a      	adds	r2, r3, #4
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	9203      	str	r2, [sp, #12]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	bfb8      	it	lt
 800fcdc:	f04f 33ff 	movlt.w	r3, #4294967295
 800fce0:	3702      	adds	r7, #2
 800fce2:	9305      	str	r3, [sp, #20]
 800fce4:	4d2e      	ldr	r5, [pc, #184]	; (800fda0 <_svfiprintf_r+0x1e0>)
 800fce6:	7839      	ldrb	r1, [r7, #0]
 800fce8:	2203      	movs	r2, #3
 800fcea:	4628      	mov	r0, r5
 800fcec:	f7f0 fab0 	bl	8000250 <memchr>
 800fcf0:	b138      	cbz	r0, 800fd02 <_svfiprintf_r+0x142>
 800fcf2:	2340      	movs	r3, #64	; 0x40
 800fcf4:	1b40      	subs	r0, r0, r5
 800fcf6:	fa03 f000 	lsl.w	r0, r3, r0
 800fcfa:	9b04      	ldr	r3, [sp, #16]
 800fcfc:	4303      	orrs	r3, r0
 800fcfe:	3701      	adds	r7, #1
 800fd00:	9304      	str	r3, [sp, #16]
 800fd02:	7839      	ldrb	r1, [r7, #0]
 800fd04:	4827      	ldr	r0, [pc, #156]	; (800fda4 <_svfiprintf_r+0x1e4>)
 800fd06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd0a:	2206      	movs	r2, #6
 800fd0c:	1c7e      	adds	r6, r7, #1
 800fd0e:	f7f0 fa9f 	bl	8000250 <memchr>
 800fd12:	2800      	cmp	r0, #0
 800fd14:	d038      	beq.n	800fd88 <_svfiprintf_r+0x1c8>
 800fd16:	4b24      	ldr	r3, [pc, #144]	; (800fda8 <_svfiprintf_r+0x1e8>)
 800fd18:	bb13      	cbnz	r3, 800fd60 <_svfiprintf_r+0x1a0>
 800fd1a:	9b03      	ldr	r3, [sp, #12]
 800fd1c:	3307      	adds	r3, #7
 800fd1e:	f023 0307 	bic.w	r3, r3, #7
 800fd22:	3308      	adds	r3, #8
 800fd24:	9303      	str	r3, [sp, #12]
 800fd26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd28:	444b      	add	r3, r9
 800fd2a:	9309      	str	r3, [sp, #36]	; 0x24
 800fd2c:	e76d      	b.n	800fc0a <_svfiprintf_r+0x4a>
 800fd2e:	fb05 3202 	mla	r2, r5, r2, r3
 800fd32:	2001      	movs	r0, #1
 800fd34:	460f      	mov	r7, r1
 800fd36:	e7a6      	b.n	800fc86 <_svfiprintf_r+0xc6>
 800fd38:	2300      	movs	r3, #0
 800fd3a:	3701      	adds	r7, #1
 800fd3c:	9305      	str	r3, [sp, #20]
 800fd3e:	4619      	mov	r1, r3
 800fd40:	250a      	movs	r5, #10
 800fd42:	4638      	mov	r0, r7
 800fd44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd48:	3a30      	subs	r2, #48	; 0x30
 800fd4a:	2a09      	cmp	r2, #9
 800fd4c:	d903      	bls.n	800fd56 <_svfiprintf_r+0x196>
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d0c8      	beq.n	800fce4 <_svfiprintf_r+0x124>
 800fd52:	9105      	str	r1, [sp, #20]
 800fd54:	e7c6      	b.n	800fce4 <_svfiprintf_r+0x124>
 800fd56:	fb05 2101 	mla	r1, r5, r1, r2
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	4607      	mov	r7, r0
 800fd5e:	e7f0      	b.n	800fd42 <_svfiprintf_r+0x182>
 800fd60:	ab03      	add	r3, sp, #12
 800fd62:	9300      	str	r3, [sp, #0]
 800fd64:	4622      	mov	r2, r4
 800fd66:	4b11      	ldr	r3, [pc, #68]	; (800fdac <_svfiprintf_r+0x1ec>)
 800fd68:	a904      	add	r1, sp, #16
 800fd6a:	4640      	mov	r0, r8
 800fd6c:	f7fc fcb8 	bl	800c6e0 <_printf_float>
 800fd70:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fd74:	4681      	mov	r9, r0
 800fd76:	d1d6      	bne.n	800fd26 <_svfiprintf_r+0x166>
 800fd78:	89a3      	ldrh	r3, [r4, #12]
 800fd7a:	065b      	lsls	r3, r3, #25
 800fd7c:	f53f af35 	bmi.w	800fbea <_svfiprintf_r+0x2a>
 800fd80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd82:	b01d      	add	sp, #116	; 0x74
 800fd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd88:	ab03      	add	r3, sp, #12
 800fd8a:	9300      	str	r3, [sp, #0]
 800fd8c:	4622      	mov	r2, r4
 800fd8e:	4b07      	ldr	r3, [pc, #28]	; (800fdac <_svfiprintf_r+0x1ec>)
 800fd90:	a904      	add	r1, sp, #16
 800fd92:	4640      	mov	r0, r8
 800fd94:	f7fc ff46 	bl	800cc24 <_printf_i>
 800fd98:	e7ea      	b.n	800fd70 <_svfiprintf_r+0x1b0>
 800fd9a:	bf00      	nop
 800fd9c:	08010174 	.word	0x08010174
 800fda0:	0801017a 	.word	0x0801017a
 800fda4:	0801017e 	.word	0x0801017e
 800fda8:	0800c6e1 	.word	0x0800c6e1
 800fdac:	0800fb0d 	.word	0x0800fb0d

0800fdb0 <_sbrk_r>:
 800fdb0:	b538      	push	{r3, r4, r5, lr}
 800fdb2:	4c06      	ldr	r4, [pc, #24]	; (800fdcc <_sbrk_r+0x1c>)
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	4605      	mov	r5, r0
 800fdb8:	4608      	mov	r0, r1
 800fdba:	6023      	str	r3, [r4, #0]
 800fdbc:	f7f3 fd70 	bl	80038a0 <_sbrk>
 800fdc0:	1c43      	adds	r3, r0, #1
 800fdc2:	d102      	bne.n	800fdca <_sbrk_r+0x1a>
 800fdc4:	6823      	ldr	r3, [r4, #0]
 800fdc6:	b103      	cbz	r3, 800fdca <_sbrk_r+0x1a>
 800fdc8:	602b      	str	r3, [r5, #0]
 800fdca:	bd38      	pop	{r3, r4, r5, pc}
 800fdcc:	2000cc94 	.word	0x2000cc94

0800fdd0 <strncmp>:
 800fdd0:	b510      	push	{r4, lr}
 800fdd2:	b16a      	cbz	r2, 800fdf0 <strncmp+0x20>
 800fdd4:	3901      	subs	r1, #1
 800fdd6:	1884      	adds	r4, r0, r2
 800fdd8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800fddc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fde0:	4293      	cmp	r3, r2
 800fde2:	d103      	bne.n	800fdec <strncmp+0x1c>
 800fde4:	42a0      	cmp	r0, r4
 800fde6:	d001      	beq.n	800fdec <strncmp+0x1c>
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d1f5      	bne.n	800fdd8 <strncmp+0x8>
 800fdec:	1a98      	subs	r0, r3, r2
 800fdee:	bd10      	pop	{r4, pc}
 800fdf0:	4610      	mov	r0, r2
 800fdf2:	e7fc      	b.n	800fdee <strncmp+0x1e>

0800fdf4 <__ascii_wctomb>:
 800fdf4:	b149      	cbz	r1, 800fe0a <__ascii_wctomb+0x16>
 800fdf6:	2aff      	cmp	r2, #255	; 0xff
 800fdf8:	bf85      	ittet	hi
 800fdfa:	238a      	movhi	r3, #138	; 0x8a
 800fdfc:	6003      	strhi	r3, [r0, #0]
 800fdfe:	700a      	strbls	r2, [r1, #0]
 800fe00:	f04f 30ff 	movhi.w	r0, #4294967295
 800fe04:	bf98      	it	ls
 800fe06:	2001      	movls	r0, #1
 800fe08:	4770      	bx	lr
 800fe0a:	4608      	mov	r0, r1
 800fe0c:	4770      	bx	lr

0800fe0e <memmove>:
 800fe0e:	4288      	cmp	r0, r1
 800fe10:	b510      	push	{r4, lr}
 800fe12:	eb01 0302 	add.w	r3, r1, r2
 800fe16:	d807      	bhi.n	800fe28 <memmove+0x1a>
 800fe18:	1e42      	subs	r2, r0, #1
 800fe1a:	4299      	cmp	r1, r3
 800fe1c:	d00a      	beq.n	800fe34 <memmove+0x26>
 800fe1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe22:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fe26:	e7f8      	b.n	800fe1a <memmove+0xc>
 800fe28:	4283      	cmp	r3, r0
 800fe2a:	d9f5      	bls.n	800fe18 <memmove+0xa>
 800fe2c:	1881      	adds	r1, r0, r2
 800fe2e:	1ad2      	subs	r2, r2, r3
 800fe30:	42d3      	cmn	r3, r2
 800fe32:	d100      	bne.n	800fe36 <memmove+0x28>
 800fe34:	bd10      	pop	{r4, pc}
 800fe36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe3a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fe3e:	e7f7      	b.n	800fe30 <memmove+0x22>

0800fe40 <__malloc_lock>:
 800fe40:	4770      	bx	lr

0800fe42 <__malloc_unlock>:
 800fe42:	4770      	bx	lr

0800fe44 <_realloc_r>:
 800fe44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe46:	4607      	mov	r7, r0
 800fe48:	4614      	mov	r4, r2
 800fe4a:	460e      	mov	r6, r1
 800fe4c:	b921      	cbnz	r1, 800fe58 <_realloc_r+0x14>
 800fe4e:	4611      	mov	r1, r2
 800fe50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fe54:	f7ff be00 	b.w	800fa58 <_malloc_r>
 800fe58:	b922      	cbnz	r2, 800fe64 <_realloc_r+0x20>
 800fe5a:	f7ff fdaf 	bl	800f9bc <_free_r>
 800fe5e:	4625      	mov	r5, r4
 800fe60:	4628      	mov	r0, r5
 800fe62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe64:	f000 f814 	bl	800fe90 <_malloc_usable_size_r>
 800fe68:	42a0      	cmp	r0, r4
 800fe6a:	d20f      	bcs.n	800fe8c <_realloc_r+0x48>
 800fe6c:	4621      	mov	r1, r4
 800fe6e:	4638      	mov	r0, r7
 800fe70:	f7ff fdf2 	bl	800fa58 <_malloc_r>
 800fe74:	4605      	mov	r5, r0
 800fe76:	2800      	cmp	r0, #0
 800fe78:	d0f2      	beq.n	800fe60 <_realloc_r+0x1c>
 800fe7a:	4631      	mov	r1, r6
 800fe7c:	4622      	mov	r2, r4
 800fe7e:	f7fc fb97 	bl	800c5b0 <memcpy>
 800fe82:	4631      	mov	r1, r6
 800fe84:	4638      	mov	r0, r7
 800fe86:	f7ff fd99 	bl	800f9bc <_free_r>
 800fe8a:	e7e9      	b.n	800fe60 <_realloc_r+0x1c>
 800fe8c:	4635      	mov	r5, r6
 800fe8e:	e7e7      	b.n	800fe60 <_realloc_r+0x1c>

0800fe90 <_malloc_usable_size_r>:
 800fe90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe94:	1f18      	subs	r0, r3, #4
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	bfbc      	itt	lt
 800fe9a:	580b      	ldrlt	r3, [r1, r0]
 800fe9c:	18c0      	addlt	r0, r0, r3
 800fe9e:	4770      	bx	lr

0800fea0 <_init>:
 800fea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fea2:	bf00      	nop
 800fea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fea6:	bc08      	pop	{r3}
 800fea8:	469e      	mov	lr, r3
 800feaa:	4770      	bx	lr

0800feac <_fini>:
 800feac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feae:	bf00      	nop
 800feb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800feb2:	bc08      	pop	{r3}
 800feb4:	469e      	mov	lr, r3
 800feb6:	4770      	bx	lr
