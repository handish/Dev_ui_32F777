
Dev_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000173dc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001288  080175e0  080175e0  000275e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018868  08018868  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  08018868  08018868  00028868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018870  08018870  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018870  08018870  00028870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018874  08018874  00028874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  08018878  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00030cac  20000378  08018bf0  00030378  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20031024  08018bf0  00031024  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 12 .debug_info   000322f2  00000000  00000000  000303a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000534f  00000000  00000000  00062698  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022e8  00000000  00000000  000679e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020a0  00000000  00000000  00069cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007019  00000000  00000000  0006bd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d784  00000000  00000000  00072d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011b948  00000000  00000000  0009050d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001abe55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a434  00000000  00000000  001abed0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000378 	.word	0x20000378
 800021c:	00000000 	.word	0x00000000
 8000220:	080175c4 	.word	0x080175c4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000037c 	.word	0x2000037c
 800023c:	080175c4 	.word	0x080175c4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__reverse8bit>:
#define SWAP_VARS(A, B) do { (A) ^= (B); (B) ^= (A); (A) ^= (B); } while (0)


#if (!SMLCD_FLUSH_LUT)
// Reverse bits order in byte
__STATIC_INLINE uint8_t __reverse8bit(uint8_t byte) {
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
#if 1
	// Using ARM RBIT instruction
	// Since it operates with 32-bit values only, result must be shifted by 24 bits to the right
	return (uint8_t)(__RBIT(byte) >> 24);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	fa93 f3a3 	rbit	r3, r3
 8000604:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	0e1b      	lsrs	r3, r3, #24
 800060a:	b2db      	uxtb	r3, r3
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;

	return byte;
#endif
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <SMLCD_InitGPIO>:
#endif // SMLCD_FLUSH_LUT


// Initialize display control GPIO pins
void SMLCD_InitGPIO(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	//RCC->AHB2ENR |= SMLCD_GPIO_PERIPH;

	// Configure DISP pin
	//GPIO_set_mode(SMLCD_DISP_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_DISP_PIN);
	//GPIO_out_cfg(SMLCD_DISP_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_DISP_PIN);
	SMLCD_DISP_L;
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000622:	f00a fc51 	bl	800aec8 <HAL_GPIO_WritePin>

	// Configure SCS pin
	//GPIO_set_mode(SMLCD_SCS_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_SCS_PIN);
	//GPIO_out_cfg(SMLCD_SCS_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_SCS_PIN);
	SMLCD_SCS_L;
 8000626:	2200      	movs	r2, #0
 8000628:	2110      	movs	r1, #16
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <SMLCD_InitGPIO+0x38>)
 800062c:	f00a fc4c 	bl	800aec8 <HAL_GPIO_WritePin>
	LCD_EXCOMM_L;
 8000630:	2200      	movs	r2, #0
 8000632:	2101      	movs	r1, #1
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000636:	f00a fc47 	bl	800aec8 <HAL_GPIO_WritePin>
	LCD_FRONTLIGHT_H;
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <SMLCD_InitGPIO+0x3c>)
 8000642:	f00a fc41 	bl	800aec8 <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022400 	.word	0x40022400
 8000650:	40021000 	.word	0x40021000
 8000654:	40021c00 	.word	0x40021c00

08000658 <SMLCD_Init>:

// Initialize display
// note: SPI and GPIO must be initialized before calling this function
void SMLCD_Init(SPI_HandleTypeDef hspi) {
 8000658:	b084      	sub	sp, #16
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
 800065e:	f107 0c08 	add.w	ip, r7, #8
 8000662:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Set default drawing mode
	LCD_PixelMode = LCD_PSET;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <SMLCD_Init+0x38>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	SMLCD_SPI_PORT = hspi;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <SMLCD_Init+0x3c>)
 800066e:	4618      	mov	r0, r3
 8000670:	f107 0108 	add.w	r1, r7, #8
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	461a      	mov	r2, r3
 8000678:	f012 ff7c 	bl	8013574 <memcpy>

	// Set initial image orientation
	SMLCD_Orientation(LCD_ORIENT_NORMAL);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 f94d 	bl	800091c <SMLCD_Orientation>
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800068a:	b004      	add	sp, #16
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20028aa8 	.word	0x20028aa8
 8000694:	20028ab0 	.word	0x20028ab0

08000698 <SMLCD_Clear>:

// Clear display memory (clear screen)
void SMLCD_Clear(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	// Send "Clear Screen" command
	uint8_t sendBytes[2];
	SMLCD_SCS_H;
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <SMLCD_Clear+0x38>)
 80006a4:	f00a fc10 	bl	800aec8 <HAL_GPIO_WritePin>
	sendBytes[0]=SMLCD_CMD_CLS;
 80006a8:	2320      	movs	r3, #32
 80006aa:	713b      	strb	r3, [r7, #4]
	sendBytes[1]=SMLCD_CMD_NOP;
 80006ac:	2300      	movs	r3, #0
 80006ae:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, sendBytes, sizeof(sendBytes), 100);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	2202      	movs	r2, #2
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <SMLCD_Clear+0x3c>)
 80006b8:	f00d f8b8 	bl	800d82c <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_CLS, 1, 100);
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_CLS);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <SMLCD_Clear+0x38>)
 80006c2:	f00a fc01 	bl	800aec8 <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	20028ab0 	.word	0x20028ab0

080006d8 <SMLCD_Flush>:
	SMLCD_SCS_L;
}
#endif // SMLCD_VCOM_SOFT

// Send vRAM buffer into display
void SMLCD_Flush(void) {
 80006d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006dc:	b08a      	sub	sp, #40	; 0x28
 80006de:	af00      	add	r7, sp, #0
 80006e0:	466b      	mov	r3, sp
 80006e2:	4698      	mov	r8, r3
	int commandByte=1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
	int lineByte=1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61fb      	str	r3, [r7, #28]
	int lineAmount=SCR_H;
 80006ec:	23f0      	movs	r3, #240	; 0xf0
 80006ee:	61bb      	str	r3, [r7, #24]
	int nopBytesPerLine= 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
	int dataBytesPerLine=SCR_W/8;
 80006f4:	2332      	movs	r3, #50	; 0x32
 80006f6:	613b      	str	r3, [r7, #16]
	int finalNOPByte=1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
	uint8_t transmitBuffer[commandByte + lineByte+nopBytesPerLine+dataBytesPerLine + finalNOPByte];
 80006fc:	6a3a      	ldr	r2, [r7, #32]
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	441a      	add	r2, r3
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	441a      	add	r2, r3
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	441a      	add	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	18d6      	adds	r6, r2, r3
 800070e:	1e73      	subs	r3, r6, #1
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4633      	mov	r3, r6
 8000714:	4619      	mov	r1, r3
 8000716:	f04f 0200 	mov.w	r2, #0
 800071a:	f04f 0300 	mov.w	r3, #0
 800071e:	f04f 0400 	mov.w	r4, #0
 8000722:	00d4      	lsls	r4, r2, #3
 8000724:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000728:	00cb      	lsls	r3, r1, #3
 800072a:	4633      	mov	r3, r6
 800072c:	4619      	mov	r1, r3
 800072e:	f04f 0200 	mov.w	r2, #0
 8000732:	f04f 0300 	mov.w	r3, #0
 8000736:	f04f 0400 	mov.w	r4, #0
 800073a:	00d4      	lsls	r4, r2, #3
 800073c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000740:	00cb      	lsls	r3, r1, #3
 8000742:	4633      	mov	r3, r6
 8000744:	3307      	adds	r3, #7
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	ebad 0d03 	sub.w	sp, sp, r3
 800074e:	466b      	mov	r3, sp
 8000750:	3300      	adds	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
	memset(transmitBuffer,0x0,sizeof(transmitBuffer));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4632      	mov	r2, r6
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f012 ff15 	bl	801358a <memset>
	#if 1

	register uint8_t *ptr = vRAM;
 8000760:	4d69      	ldr	r5, [pc, #420]	; (8000908 <SMLCD_Flush+0x230>)
	register uint8_t line = 0;
 8000762:	2400      	movs	r4, #0
	register uint32_t idx;
	int bufferCounter=1;
 8000764:	2301      	movs	r3, #1
 8000766:	603b      	str	r3, [r7, #0]
	int x=0;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24

	// Send "Write Line" command
	transmitBuffer[0]=SMLCD_CMD_WRITE;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2288      	movs	r2, #136	; 0x88
 8000770:	701a      	strb	r2, [r3, #0]
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE);
	switch (lcd_orientation) {
 8000772:	4b66      	ldr	r3, [pc, #408]	; (800090c <SMLCD_Flush+0x234>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b04      	cmp	r3, #4
 8000778:	d03b      	beq.n	80007f2 <SMLCD_Flush+0x11a>
 800077a:	2b08      	cmp	r3, #8
 800077c:	d05f      	beq.n	800083e <SMLCD_Flush+0x166>
 800077e:	2b02      	cmp	r3, #2
 8000780:	f040 8084 	bne.w	800088c <SMLCD_Flush+0x1b4>
		case LCD_ORIENT_CW:
			line = SCR_H + 1;
 8000784:	24f1      	movs	r4, #241	; 0xf1
			while (--line > 0) {
 8000786:	e02f      	b.n	80007e8 <SMLCD_Flush+0x110>
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2288      	movs	r2, #136	; 0x88
 800078c:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4622      	mov	r2, r4
 8000796:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000798:	2302      	movs	r3, #2
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
 800079c:	e009      	b.n	80007b2 <SMLCD_Flush+0xda>
					transmitBuffer[x]=*ptr;
 800079e:	7829      	ldrb	r1, [r5, #0]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a4:	4413      	add	r3, r2
 80007a6:	460a      	mov	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
					ptr++;
 80007aa:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	3301      	adds	r3, #1
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	2b33      	cmp	r3, #51	; 0x33
 80007b6:	ddf2      	ble.n	800079e <SMLCD_Flush+0xc6>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80007c8:	2201      	movs	r2, #1
 80007ca:	2110      	movs	r1, #16
 80007cc:	4850      	ldr	r0, [pc, #320]	; (8000910 <SMLCD_Flush+0x238>)
 80007ce:	f00a fb7b 	bl	800aec8 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	b2b2      	uxth	r2, r6
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	484e      	ldr	r0, [pc, #312]	; (8000914 <SMLCD_Flush+0x23c>)
 80007da:	f00d f827 	bl	800d82c <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80007de:	2200      	movs	r2, #0
 80007e0:	2110      	movs	r1, #16
 80007e2:	484b      	ldr	r0, [pc, #300]	; (8000910 <SMLCD_Flush+0x238>)
 80007e4:	f00a fb70 	bl	800aec8 <HAL_GPIO_WritePin>
			while (--line > 0) {
 80007e8:	1e63      	subs	r3, r4, #1
 80007ea:	b2dc      	uxtb	r4, r3
 80007ec:	2c00      	cmp	r4, #0
 80007ee:	d1cb      	bne.n	8000788 <SMLCD_Flush+0xb0>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80007f0:	e084      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_CCW:
			line = SCR_H + 1;
 80007f2:	24f1      	movs	r4, #241	; 0xf1
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 80007f4:	4d48      	ldr	r5, [pc, #288]	; (8000918 <SMLCD_Flush+0x240>)
			while (--line > 0) {
 80007f6:	e01d      	b.n	8000834 <SMLCD_Flush+0x15c>

				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 80007f8:	4620      	mov	r0, r4
 80007fa:	f7ff fef9 	bl	80005f0 <__reverse8bit>
 80007fe:	4603      	mov	r3, r0
 8000800:	4619      	mov	r1, r3
 8000802:	2364      	movs	r3, #100	; 0x64
 8000804:	2201      	movs	r2, #1
 8000806:	4843      	ldr	r0, [pc, #268]	; (8000914 <SMLCD_Flush+0x23c>)
 8000808:	f00d f810 	bl	800d82c <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800080c:	2600      	movs	r6, #0
 800080e:	e009      	b.n	8000824 <SMLCD_Flush+0x14c>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 8000810:	462b      	mov	r3, r5
 8000812:	1e5d      	subs	r5, r3, #1
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	4619      	mov	r1, r3
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	2201      	movs	r2, #1
 800081c:	483d      	ldr	r0, [pc, #244]	; (8000914 <SMLCD_Flush+0x23c>)
 800081e:	f00d f805 	bl	800d82c <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000822:	3601      	adds	r6, #1
 8000824:	2e31      	cmp	r6, #49	; 0x31
 8000826:	d9f3      	bls.n	8000810 <SMLCD_Flush+0x138>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	2201      	movs	r2, #1
 800082c:	2100      	movs	r1, #0
 800082e:	4839      	ldr	r0, [pc, #228]	; (8000914 <SMLCD_Flush+0x23c>)
 8000830:	f00c fffc 	bl	800d82c <HAL_SPI_Transmit>
			while (--line > 0) {
 8000834:	1e63      	subs	r3, r4, #1
 8000836:	b2dc      	uxtb	r4, r3
 8000838:	2c00      	cmp	r4, #0
 800083a:	d1dd      	bne.n	80007f8 <SMLCD_Flush+0x120>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800083c:	e05e      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_180:
			line = 0;
 800083e:	2400      	movs	r4, #0
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 8000840:	4d35      	ldr	r5, [pc, #212]	; (8000918 <SMLCD_Flush+0x240>)
			while (line++ < SCR_H + 1) {
 8000842:	e01d      	b.n	8000880 <SMLCD_Flush+0x1a8>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 8000844:	4620      	mov	r0, r4
 8000846:	f7ff fed3 	bl	80005f0 <__reverse8bit>
 800084a:	4603      	mov	r3, r0
 800084c:	4619      	mov	r1, r3
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	2201      	movs	r2, #1
 8000852:	4830      	ldr	r0, [pc, #192]	; (8000914 <SMLCD_Flush+0x23c>)
 8000854:	f00c ffea 	bl	800d82c <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000858:	2600      	movs	r6, #0
 800085a:	e009      	b.n	8000870 <SMLCD_Flush+0x198>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 800085c:	462b      	mov	r3, r5
 800085e:	1e5d      	subs	r5, r3, #1
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	2201      	movs	r2, #1
 8000868:	482a      	ldr	r0, [pc, #168]	; (8000914 <SMLCD_Flush+0x23c>)
 800086a:	f00c ffdf 	bl	800d82c <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800086e:	3601      	adds	r6, #1
 8000870:	2e31      	cmp	r6, #49	; 0x31
 8000872:	d9f3      	bls.n	800085c <SMLCD_Flush+0x184>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000874:	2364      	movs	r3, #100	; 0x64
 8000876:	2201      	movs	r2, #1
 8000878:	2100      	movs	r1, #0
 800087a:	4826      	ldr	r0, [pc, #152]	; (8000914 <SMLCD_Flush+0x23c>)
 800087c:	f00c ffd6 	bl	800d82c <HAL_SPI_Transmit>
			while (line++ < SCR_H + 1) {
 8000880:	4623      	mov	r3, r4
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	b2d4      	uxtb	r4, r2
 8000886:	2bf0      	cmp	r3, #240	; 0xf0
 8000888:	d9dc      	bls.n	8000844 <SMLCD_Flush+0x16c>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800088a:	e037      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_NORMAL:
		default:
			line = 0;
 800088c:	2400      	movs	r4, #0
			while (line++ < SCR_H + 1) {
 800088e:	e02f      	b.n	80008f0 <SMLCD_Flush+0x218>
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, ptr, SCR_W >> 3, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2288      	movs	r2, #136	; 0x88
 8000894:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4622      	mov	r2, r4
 800089e:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008a0:	2302      	movs	r3, #2
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
 80008a4:	e009      	b.n	80008ba <SMLCD_Flush+0x1e2>
					transmitBuffer[x]=*ptr;
 80008a6:	7829      	ldrb	r1, [r5, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	4413      	add	r3, r2
 80008ae:	460a      	mov	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
					ptr++;
 80008b2:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b6:	3301      	adds	r3, #1
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	2b33      	cmp	r3, #51	; 0x33
 80008be:	ddf2      	ble.n	80008a6 <SMLCD_Flush+0x1ce>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	480e      	ldr	r0, [pc, #56]	; (8000910 <SMLCD_Flush+0x238>)
 80008d6:	f00a faf7 	bl	800aec8 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	b2b2      	uxth	r2, r6
 80008de:	2364      	movs	r3, #100	; 0x64
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <SMLCD_Flush+0x23c>)
 80008e2:	f00c ffa3 	bl	800d82c <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80008e6:	2200      	movs	r2, #0
 80008e8:	2110      	movs	r1, #16
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <SMLCD_Flush+0x238>)
 80008ec:	f00a faec 	bl	800aec8 <HAL_GPIO_WritePin>
			while (line++ < SCR_H + 1) {
 80008f0:	4623      	mov	r3, r4
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	b2d4      	uxtb	r4, r2
 80008f6:	2bf0      	cmp	r3, #240	; 0xf0
 80008f8:	d9ca      	bls.n	8000890 <SMLCD_Flush+0x1b8>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80008fa:	bf00      	nop
 80008fc:	46c5      	mov	sp, r8
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;

#endif
}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000908:	20000394 	.word	0x20000394
 800090c:	20000000 	.word	0x20000000
 8000910:	40021000 	.word	0x40021000
 8000914:	20028ab0 	.word	0x20028ab0
 8000918:	20003273 	.word	0x20003273

0800091c <SMLCD_Orientation>:

// Set screen orientation
// input:
//   orientation - one of LCD_ORIENT_xx values
void SMLCD_Orientation(uint8_t orientation) {
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	if (orientation & (LCD_ORIENT_CW | LCD_ORIENT_CCW)) {
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 0306 	and.w	r3, r3, #6
 800092c:	2b00      	cmp	r3, #0
 800092e:	d007      	beq.n	8000940 <SMLCD_Orientation+0x24>
		scr_width  = SCR_H;
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <SMLCD_Orientation+0x44>)
 8000932:	22f0      	movs	r2, #240	; 0xf0
 8000934:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_W;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <SMLCD_Orientation+0x48>)
 8000938:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800093c:	801a      	strh	r2, [r3, #0]
 800093e:	e006      	b.n	800094e <SMLCD_Orientation+0x32>
	} else {
		scr_width  = SCR_W;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <SMLCD_Orientation+0x44>)
 8000942:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000946:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_H;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SMLCD_Orientation+0x48>)
 800094a:	22f0      	movs	r2, #240	; 0xf0
 800094c:	801a      	strh	r2, [r3, #0]
	}
	lcd_orientation = orientation;
 800094e:	4a06      	ldr	r2, [pc, #24]	; (8000968 <SMLCD_Orientation+0x4c>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	7013      	strb	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	20028aaa 	.word	0x20028aaa
 8000964:	20028aac 	.word	0x20028aac
 8000968:	20000000 	.word	0x20000000

0800096c <LCD_Clear>:

// Clear the vRAM memory
// note: size of video buffer must be a multiple of 4
void LCD_Clear(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
#if 1
	// This variant can be faster, speed depends on libraries used
	// But also needs include of "string.h"
	//memset(vRAM, 0x0, (sizeof(vRAM) >> 2));
	memset(vRAM, 0xFFFFFFFF, sizeof(vRAM));
 8000970:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <LCD_Clear+0x18>)
 800097a:	f012 fe06 	bl	801358a <memset>

	while (i--) {
		*ptr++ = 0xFFFFFFFF;
	}
#endif
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000394 	.word	0x20000394

08000988 <LCD_Pixel>:
// input:
//   X, Y - coordinates of pixel
// note: value of LCD_PixelMode will be used as a drawing mode of a pixel
// note: X and Y coordinates are declared as "register uint32_t" for performance
//       for other compilers/CPUs this can/or should be changed to other type (16-bit)
void LCD_Pixel(register uint32_t X, register uint32_t Y) {
 8000988:	b4b0      	push	{r4, r5, r7}
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	460a      	mov	r2, r1
	register uint32_t offset;
	register uint8_t bpos;

#if (SMLCD_PIXEL_METHOD)
	switch (lcd_orientation) {
 8000990:	4928      	ldr	r1, [pc, #160]	; (8000a34 <LCD_Pixel+0xac>)
 8000992:	7809      	ldrb	r1, [r1, #0]
 8000994:	2904      	cmp	r1, #4
 8000996:	d009      	beq.n	80009ac <LCD_Pixel+0x24>
 8000998:	2908      	cmp	r1, #8
 800099a:	d002      	beq.n	80009a2 <LCD_Pixel+0x1a>
 800099c:	2902      	cmp	r1, #2
 800099e:	d00d      	beq.n	80009bc <LCD_Pixel+0x34>
		case LCD_ORIENT_CW:
			SWAP_VARS(X, Y);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 80009a0:	e010      	b.n	80009c4 <LCD_Pixel+0x3c>
			X = SCR_W - 1 - X;
 80009a2:	f240 118f 	movw	r1, #399	; 0x18f
 80009a6:	1ac9      	subs	r1, r1, r3
 80009a8:	460b      	mov	r3, r1
			break;
 80009aa:	e00b      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009ac:	4053      	eors	r3, r2
 80009ae:	405a      	eors	r2, r3
 80009b0:	4053      	eors	r3, r2
			X = SCR_W - 1 - X;
 80009b2:	f240 118f 	movw	r1, #399	; 0x18f
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	460b      	mov	r3, r1
			break;
 80009ba:	e003      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009bc:	4053      	eors	r3, r2
 80009be:	405a      	eors	r2, r3
 80009c0:	4053      	eors	r3, r2
			break;
 80009c2:	bf00      	nop
		X = SCR_W - 1 - X;
	}
#endif

	// Offset in video buffer
	offset = ((Y * SCR_W) + X) >> 3;
 80009c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80009c8:	fb01 f202 	mul.w	r2, r1, r2
 80009cc:	441a      	add	r2, r3
 80009ce:	08d4      	lsrs	r4, r2, #3

#if (SMLCD_PIXEL_SAFE)
	// Ensure offset is inside of video buffer
	if (offset > ((SCR_W * SCR_H) >> 3) - 1) {
 80009d0:	f642 62df 	movw	r2, #11999	; 0x2edf
 80009d4:	4294      	cmp	r4, r2
 80009d6:	d829      	bhi.n	8000a2c <LCD_Pixel+0xa4>
		return;
	}
#endif // SMLCD_PIXEL_SAFE

	// Bit position in byte
	bpos = X & 0x07;
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	b2dd      	uxtb	r5, r3
			break;
	}
#else // SMLCD_USE_BITBAND
	// Using access via array

	switch (LCD_PixelMode) {
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <LCD_Pixel+0xb0>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d002      	beq.n	80009ee <LCD_Pixel+0x66>
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d00a      	beq.n	8000a02 <LCD_Pixel+0x7a>
 80009ec:	e013      	b.n	8000a16 <LCD_Pixel+0x8e>
		case LCD_PRES:
			vRAM[offset] |= LUT_PRST[bpos];
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <LCD_Pixel+0xb4>)
 80009f0:	5d1a      	ldrb	r2, [r3, r4]
 80009f2:	4629      	mov	r1, r5
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <LCD_Pixel+0xb8>)
 80009f6:	5c5b      	ldrb	r3, [r3, r1]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <LCD_Pixel+0xb4>)
 80009fe:	551a      	strb	r2, [r3, r4]
			break;
 8000a00:	e015      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PINV:
			vRAM[offset] ^= LUT_PRST[bpos];
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a04:	5d1a      	ldrb	r2, [r3, r4]
 8000a06:	4629      	mov	r1, r5
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <LCD_Pixel+0xb8>)
 8000a0a:	5c5b      	ldrb	r3, [r3, r1]
 8000a0c:	4053      	eors	r3, r2
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a12:	551a      	strb	r2, [r3, r4]
			break;
 8000a14:	e00b      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PSET:
		default:
			vRAM[offset] &= LUT_PSET[bpos];
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a18:	5d1a      	ldrb	r2, [r3, r4]
 8000a1a:	4629      	mov	r1, r5
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <LCD_Pixel+0xbc>)
 8000a1e:	5c5b      	ldrb	r3, [r3, r1]
 8000a20:	4013      	ands	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a26:	551a      	strb	r2, [r3, r4]
			break;
 8000a28:	bf00      	nop
 8000a2a:	e000      	b.n	8000a2e <LCD_Pixel+0xa6>
		return;
 8000a2c:	bf00      	nop
	}
#endif // SMLCD_USE_BITBAND
}
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bcb0      	pop	{r4, r5, r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20028aa8 	.word	0x20028aa8
 8000a3c:	20000394 	.word	0x20000394
 8000a40:	08017d6c 	.word	0x08017d6c
 8000a44:	08017d64 	.word	0x08017d64

08000a48 <LCD_VLineInt>:
// Optimized vertical line drawing (without regard of screen rotation)
// input:
//   X - horizontal coordinate
//   Y - vertical coordinate
//   H - line height
static void LCD_VLineInt(uint16_t X, uint16_t Y, uint16_t H) {
 8000a48:	b4b0      	push	{r4, r5, r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
 8000a52:	460b      	mov	r3, r1
 8000a54:	80bb      	strh	r3, [r7, #4]
 8000a56:	4613      	mov	r3, r2
 8000a58:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a60:	fb02 f203 	mul.w	r2, r2, r3
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	4413      	add	r3, r2
 8000a68:	10db      	asrs	r3, r3, #3
 8000a6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <LCD_VLineInt+0xa0>)
 8000a6c:	189c      	adds	r4, r3, r2
	register uint8_t mask;

	// Draw line
	X &= 0x07;
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	80fb      	strh	r3, [r7, #6]
	switch (LCD_PixelMode) {
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <LCD_VLineInt+0xa4>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d002      	beq.n	8000a84 <LCD_VLineInt+0x3c>
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d00f      	beq.n	8000aa2 <LCD_VLineInt+0x5a>
 8000a82:	e01d      	b.n	8000ac0 <LCD_VLineInt+0x78>
		case LCD_PRES:
			mask = LUT_PRST[X];
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000a88:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000a8a:	e004      	b.n	8000a96 <LCD_VLineInt+0x4e>
				*ptr |= mask;
 8000a8c:	7823      	ldrb	r3, [r4, #0]
 8000a8e:	432b      	orrs	r3, r5
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000a94:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000a96:	887b      	ldrh	r3, [r7, #2]
 8000a98:	1e5a      	subs	r2, r3, #1
 8000a9a:	807a      	strh	r2, [r7, #2]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f5      	bne.n	8000a8c <LCD_VLineInt+0x44>
			}
			break;
 8000aa0:	e01d      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PINV:
			mask = LUT_PRST[X];
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000aa6:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000aa8:	e004      	b.n	8000ab4 <LCD_VLineInt+0x6c>
				*ptr ^= mask;
 8000aaa:	7823      	ldrb	r3, [r4, #0]
 8000aac:	406b      	eors	r3, r5
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ab2:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	807a      	strh	r2, [r7, #2]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f5      	bne.n	8000aaa <LCD_VLineInt+0x62>
			}
			break;
 8000abe:	e00e      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PSET:
		default:
			mask = LUT_PSET[X];
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <LCD_VLineInt+0xac>)
 8000ac4:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000ac6:	e004      	b.n	8000ad2 <LCD_VLineInt+0x8a>
				*ptr &= mask;
 8000ac8:	7823      	ldrb	r3, [r4, #0]
 8000aca:	402b      	ands	r3, r5
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ad0:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	807a      	strh	r2, [r7, #2]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1f5      	bne.n	8000ac8 <LCD_VLineInt+0x80>
			}
			break;
 8000adc:	bf00      	nop
	}
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bcb0      	pop	{r4, r5, r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	20000394 	.word	0x20000394
 8000aec:	20028aa8 	.word	0x20028aa8
 8000af0:	08017d6c 	.word	0x08017d6c
 8000af4:	08017d64 	.word	0x08017d64

08000af8 <LCD_HLineInt>:
// Optimized draw horizontal line (without regard of screen rotation)
// input:
//   X - horizontal coordinate of line start
//   Y - vertical coordinate
//   W - line width
static void LCD_HLineInt(uint16_t X, uint16_t Y, uint16_t W) {
 8000af8:	b4f0      	push	{r4, r5, r6, r7}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
 8000b02:	460b      	mov	r3, r1
 8000b04:	80bb      	strh	r3, [r7, #4]
 8000b06:	4613      	mov	r3, r2
 8000b08:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000b0a:	88bb      	ldrh	r3, [r7, #4]
 8000b0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b10:	fb02 f203 	mul.w	r2, r2, r3
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	4413      	add	r3, r2
 8000b18:	10db      	asrs	r3, r3, #3
 8000b1a:	4a69      	ldr	r2, [pc, #420]	; (8000cc0 <LCD_HLineInt+0x1c8>)
 8000b1c:	189c      	adds	r4, r3, r2
	register uint8_t modulo = X & 0x07;
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	b2de      	uxtb	r6, r3
	// Look-up tables
	static const uint8_t LUT_B1[] = { 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80 };
	static const uint8_t LUT_B2[] = { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

	// First partial byte
	if (modulo) {
 8000b28:	2e00      	cmp	r6, #0
 8000b2a:	d03a      	beq.n	8000ba2 <LCD_HLineInt+0xaa>
		// Get bit mask for first partial byte
		modulo = 8 - modulo;
 8000b2c:	f1c6 0308 	rsb	r3, r6, #8
 8000b30:	b2de      	uxtb	r6, r3
		mask = LUT_B1[modulo];
 8000b32:	4632      	mov	r2, r6
 8000b34:	4b63      	ldr	r3, [pc, #396]	; (8000cc4 <LCD_HLineInt+0x1cc>)
 8000b36:	5c9d      	ldrb	r5, [r3, r2]

		if (modulo > W) {
 8000b38:	b2b3      	uxth	r3, r6
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d206      	bcs.n	8000b4e <LCD_HLineInt+0x56>
			// Trim bit mask if line will not go out from a current byte
			mask |= LUT_B2[modulo - W];
 8000b40:	4632      	mov	r2, r6
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	4a60      	ldr	r2, [pc, #384]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000b48:	5cd3      	ldrb	r3, [r2, r3]
 8000b4a:	432b      	orrs	r3, r5
 8000b4c:	b2dd      	uxtb	r5, r3
		}

		// Update first partial byte
		switch (LCD_PixelMode) {
 8000b4e:	4b5f      	ldr	r3, [pc, #380]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d002      	beq.n	8000b5c <LCD_HLineInt+0x64>
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d00a      	beq.n	8000b70 <LCD_HLineInt+0x78>
 8000b5a:	e013      	b.n	8000b84 <LCD_HLineInt+0x8c>
			case LCD_PRES:
				*ptr |= ~mask;
 8000b5c:	7823      	ldrb	r3, [r4, #0]
 8000b5e:	b25a      	sxtb	r2, r3
 8000b60:	b26b      	sxtb	r3, r5
 8000b62:	43db      	mvns	r3, r3
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	7023      	strb	r3, [r4, #0]
				break;
 8000b6e:	e00e      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000b70:	7823      	ldrb	r3, [r4, #0]
 8000b72:	b25a      	sxtb	r2, r3
 8000b74:	b26b      	sxtb	r3, r5
 8000b76:	43db      	mvns	r3, r3
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	4053      	eors	r3, r2
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	7023      	strb	r3, [r4, #0]
				break;
 8000b82:	e004      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PSET:
			default:
				*ptr &=  mask;
 8000b84:	7823      	ldrb	r3, [r4, #0]
 8000b86:	402b      	ands	r3, r5
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	7023      	strb	r3, [r4, #0]
				break;
 8000b8c:	bf00      	nop
		}

		// Line is over?
		if (modulo > W) {
 8000b8e:	b2b3      	uxth	r3, r6
 8000b90:	887a      	ldrh	r2, [r7, #2]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f0c0 808f 	bcc.w	8000cb6 <LCD_HLineInt+0x1be>
			return;
		}

		// Shift pointer to the next byte in line and decrease line height counter
		ptr++;
 8000b98:	3401      	adds	r4, #1
		W -= modulo;
 8000b9a:	b2b3      	uxth	r3, r6
 8000b9c:	887a      	ldrh	r2, [r7, #2]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	807b      	strh	r3, [r7, #2]
	}

	// Fill solid bytes
	if (W > 32) {
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	2b20      	cmp	r3, #32
 8000ba6:	d92c      	bls.n	8000c02 <LCD_HLineInt+0x10a>
		// Modify 32 pixels at once
		register uint32_t *ptr32 = (uint32_t *)ptr;
		switch (LCD_PixelMode) {
 8000ba8:	4b48      	ldr	r3, [pc, #288]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d003      	beq.n	8000bb8 <LCD_HLineInt+0xc0>
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d00e      	beq.n	8000bd2 <LCD_HLineInt+0xda>
 8000bb4:	e01a      	b.n	8000bec <LCD_HLineInt+0xf4>
			case LCD_PRES:
 8000bb6:	bf00      	nop
				do {
					*ptr32++ = 0xFFFFFFFF;
 8000bb8:	4623      	mov	r3, r4
 8000bba:	1d1c      	adds	r4, r3, #4
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	3b20      	subs	r3, #32
 8000bc6:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	2b1f      	cmp	r3, #31
 8000bcc:	d8f3      	bhi.n	8000bb6 <LCD_HLineInt+0xbe>
				break;
 8000bce:	e018      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PINV:
 8000bd0:	bf00      	nop
				do {
					*ptr32++ ^= 0xFFFFFFFF;
 8000bd2:	4623      	mov	r3, r4
 8000bd4:	1d1c      	adds	r4, r3, #4
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	43d2      	mvns	r2, r2
 8000bda:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bdc:	887b      	ldrh	r3, [r7, #2]
 8000bde:	3b20      	subs	r3, #32
 8000be0:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	2b1f      	cmp	r3, #31
 8000be6:	d8f3      	bhi.n	8000bd0 <LCD_HLineInt+0xd8>
				break;
 8000be8:	e00b      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PSET:
 8000bea:	bf00      	nop
			default:
				do {
					*ptr32++ = 0x00000000;
 8000bec:	4623      	mov	r3, r4
 8000bee:	1d1c      	adds	r4, r3, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	3b20      	subs	r3, #32
 8000bf8:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	2b1f      	cmp	r3, #31
 8000bfe:	d8f4      	bhi.n	8000bea <LCD_HLineInt+0xf2>
				break;
 8000c00:	bf00      	nop
		}
		ptr = (uint8_t *)ptr32;
	}
	if (W > 7) {
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	2b07      	cmp	r3, #7
 8000c06:	d92c      	bls.n	8000c62 <LCD_HLineInt+0x16a>
		// Modify full bytes (8 pixels at once)
		switch (LCD_PixelMode) {
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d003      	beq.n	8000c18 <LCD_HLineInt+0x120>
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d00d      	beq.n	8000c30 <LCD_HLineInt+0x138>
 8000c14:	e01a      	b.n	8000c4c <LCD_HLineInt+0x154>
			case LCD_PRES:
 8000c16:	bf00      	nop
				do {
					*ptr++ = 0xFF;
 8000c18:	4623      	mov	r3, r4
 8000c1a:	1c5c      	adds	r4, r3, #1
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	3b08      	subs	r3, #8
 8000c24:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d8f4      	bhi.n	8000c16 <LCD_HLineInt+0x11e>
				break;
 8000c2c:	e01a      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PINV:
 8000c2e:	bf00      	nop
				do {
					*ptr++ ^= 0xFF;
 8000c30:	4623      	mov	r3, r4
 8000c32:	1c5c      	adds	r4, r3, #1
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	43d2      	mvns	r2, r2
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	3b08      	subs	r3, #8
 8000c40:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d8f2      	bhi.n	8000c2e <LCD_HLineInt+0x136>
				break;
 8000c48:	e00c      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PSET:
 8000c4a:	bf00      	nop
			default:
				do {
					*ptr++ = 0x00;
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	1c5c      	adds	r4, r3, #1
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	3b08      	subs	r3, #8
 8000c58:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	d8f4      	bhi.n	8000c4a <LCD_HLineInt+0x152>
				break;
 8000c60:	e000      	b.n	8000c64 <LCD_HLineInt+0x16c>
		}
	}
 8000c62:	bf00      	nop

	// Last partial byte?
	if (W) {
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d026      	beq.n	8000cb8 <LCD_HLineInt+0x1c0>
		mask = LUT_B2[8 - W];
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	f1c3 0308 	rsb	r3, r3, #8
 8000c70:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000c72:	5cd5      	ldrb	r5, [r2, r3]
		switch (LCD_PixelMode) {
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d002      	beq.n	8000c82 <LCD_HLineInt+0x18a>
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d00a      	beq.n	8000c96 <LCD_HLineInt+0x19e>
 8000c80:	e013      	b.n	8000caa <LCD_HLineInt+0x1b2>
			case LCD_PRES:
				*ptr |= ~mask;
 8000c82:	7823      	ldrb	r3, [r4, #0]
 8000c84:	b25a      	sxtb	r2, r3
 8000c86:	b26b      	sxtb	r3, r5
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	7023      	strb	r3, [r4, #0]
				break;
 8000c94:	e010      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000c96:	7823      	ldrb	r3, [r4, #0]
 8000c98:	b25a      	sxtb	r2, r3
 8000c9a:	b26b      	sxtb	r3, r5
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	4053      	eors	r3, r2
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	7023      	strb	r3, [r4, #0]
				break;
 8000ca8:	e006      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PSET:
			default:
				*ptr &= mask;
 8000caa:	7823      	ldrb	r3, [r4, #0]
 8000cac:	402b      	ands	r3, r5
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	7023      	strb	r3, [r4, #0]
				break;
 8000cb2:	bf00      	nop
 8000cb4:	e000      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			return;
 8000cb6:	bf00      	nop
		}
	}
}
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	20000394 	.word	0x20000394
 8000cc4:	08017d74 	.word	0x08017d74
 8000cc8:	08017d7c 	.word	0x08017d7c
 8000ccc:	20028aa8 	.word	0x20028aa8

08000cd0 <LCD_HLine>:

// Draw horizontal line
// input:
//   X1, X2 - left and right horizontal coordinates
//   Y - vertical coordinate
void LCD_HLine(uint16_t X1, uint16_t X2, uint16_t Y) {
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	80bb      	strh	r3, [r7, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	807b      	strh	r3, [r7, #2]
	register uint16_t X;
	register uint16_t L;

	if (X1 > X2) {
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d905      	bls.n	8000cf6 <LCD_HLine+0x26>
		X = X2; L = X1 - X2;
 8000cea:	88bd      	ldrh	r5, [r7, #4]
 8000cec:	88fa      	ldrh	r2, [r7, #6]
 8000cee:	88bb      	ldrh	r3, [r7, #4]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b29c      	uxth	r4, r3
 8000cf4:	e004      	b.n	8000d00 <LCD_HLine+0x30>
	} else {
		X = X1; L = X2 - X1;
 8000cf6:	88fd      	ldrh	r5, [r7, #6]
 8000cf8:	88ba      	ldrh	r2, [r7, #4]
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	b29c      	uxth	r4, r3
	}
	L++;
 8000d00:	4623      	mov	r3, r4
 8000d02:	3301      	adds	r3, #1
 8000d04:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <LCD_HLine+0x9c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d00a      	beq.n	8000d24 <LCD_HLine+0x54>
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d013      	beq.n	8000d3a <LCD_HLine+0x6a>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d11f      	bne.n	8000d56 <LCD_HLine+0x86>
		case LCD_ORIENT_CW:
			LCD_VLineInt(Y, X, L);
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	4622      	mov	r2, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe93 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d22:	e01f      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_VLineInt(SCR_W - 1 - Y, X, L);
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4622      	mov	r2, r4
 8000d30:	4629      	mov	r1, r5
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fe88 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d38:	e014      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_180:
			LCD_HLineInt(SCR_W - X - L, Y, L);
 8000d3a:	462b      	mov	r3, r5
 8000d3c:	425b      	negs	r3, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	1b1b      	subs	r3, r3, r4
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	8879      	ldrh	r1, [r7, #2]
 8000d4c:	4622      	mov	r2, r4
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fed2 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d54:	e006      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_HLineInt(X, Y, L);
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	4622      	mov	r2, r4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f7ff fecb 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d62:	bf00      	nop
	}
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d6c:	20000000 	.word	0x20000000

08000d70 <LCD_VLine>:

// Draw vertical line
// input:
//   X - horizontal coordinate
//   Y1,Y2 - top and bottom vertical coordinates
void LCD_VLine(uint16_t X, uint16_t Y1, uint16_t Y2) {
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	80bb      	strh	r3, [r7, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	807b      	strh	r3, [r7, #2]
	register uint16_t Y;
	register uint16_t L;

	if (Y1 > Y2) {
 8000d82:	88ba      	ldrh	r2, [r7, #4]
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d905      	bls.n	8000d96 <LCD_VLine+0x26>
		Y = Y2; L = Y1 - Y2;
 8000d8a:	887d      	ldrh	r5, [r7, #2]
 8000d8c:	88ba      	ldrh	r2, [r7, #4]
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	b29c      	uxth	r4, r3
 8000d94:	e004      	b.n	8000da0 <LCD_VLine+0x30>
	} else {
		Y = Y1; L = Y2 - Y1;
 8000d96:	88bd      	ldrh	r5, [r7, #4]
 8000d98:	887a      	ldrh	r2, [r7, #2]
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	b29c      	uxth	r4, r3
	}
	L++;
 8000da0:	4623      	mov	r3, r4
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <LCD_VLine+0x9c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d00a      	beq.n	8000dc4 <LCD_VLine+0x54>
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d016      	beq.n	8000de0 <LCD_VLine+0x70>
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d11f      	bne.n	8000df6 <LCD_VLine+0x86>
		case LCD_ORIENT_CW:
			LCD_HLineInt(Y, X, L);
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	4622      	mov	r2, r4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	f7ff fe9b 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dc2:	e01f      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_HLineInt(SCR_W - Y - L, X, L);
 8000dc4:	462b      	mov	r3, r5
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	1b1b      	subs	r3, r3, r4
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	88f9      	ldrh	r1, [r7, #6]
 8000dd6:	4622      	mov	r2, r4
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fe8d 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dde:	e011      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_180:
			LCD_VLineInt(SCR_W - 1 - X, Y, L);
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000de6:	3301      	adds	r3, #1
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4622      	mov	r2, r4
 8000dec:	4629      	mov	r1, r5
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fe2a 	bl	8000a48 <LCD_VLineInt>
			break;
 8000df4:	e006      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_VLineInt(X, Y, L);
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	4622      	mov	r2, r4
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe23 	bl	8000a48 <LCD_VLineInt>
			break;
 8000e02:	bf00      	nop
	}
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0c:	20000000 	.word	0x20000000

08000e10 <LCD_Rect>:

// Draw rectangle
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Rect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4604      	mov	r4, r0
 8000e18:	4608      	mov	r0, r1
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4623      	mov	r3, r4
 8000e20:	80fb      	strh	r3, [r7, #6]
 8000e22:	4603      	mov	r3, r0
 8000e24:	80bb      	strh	r3, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	807b      	strh	r3, [r7, #2]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	803b      	strh	r3, [r7, #0]
	LCD_HLine(X1, X2, Y1);
 8000e2e:	88ba      	ldrh	r2, [r7, #4]
 8000e30:	8879      	ldrh	r1, [r7, #2]
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff4b 	bl	8000cd0 <LCD_HLine>
	LCD_HLine(X1, X2, Y2);
 8000e3a:	883a      	ldrh	r2, [r7, #0]
 8000e3c:	8879      	ldrh	r1, [r7, #2]
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff45 	bl	8000cd0 <LCD_HLine>
	if (Y1 > Y2) {
 8000e46:	88ba      	ldrh	r2, [r7, #4]
 8000e48:	883b      	ldrh	r3, [r7, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d90b      	bls.n	8000e66 <LCD_Rect+0x56>
		SWAP_VARS(Y1, Y2);
 8000e4e:	88ba      	ldrh	r2, [r7, #4]
 8000e50:	883b      	ldrh	r3, [r7, #0]
 8000e52:	4053      	eors	r3, r2
 8000e54:	80bb      	strh	r3, [r7, #4]
 8000e56:	883a      	ldrh	r2, [r7, #0]
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	4053      	eors	r3, r2
 8000e5c:	803b      	strh	r3, [r7, #0]
 8000e5e:	88ba      	ldrh	r2, [r7, #4]
 8000e60:	883b      	ldrh	r3, [r7, #0]
 8000e62:	4053      	eors	r3, r2
 8000e64:	80bb      	strh	r3, [r7, #4]
	}
	Y1++;
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	80bb      	strh	r3, [r7, #4]
	Y2--;
 8000e6c:	883b      	ldrh	r3, [r7, #0]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	803b      	strh	r3, [r7, #0]
	LCD_VLine(X1, Y1, Y2);
 8000e72:	883a      	ldrh	r2, [r7, #0]
 8000e74:	88b9      	ldrh	r1, [r7, #4]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff79 	bl	8000d70 <LCD_VLine>
	LCD_VLine(X2, Y1, Y2);
 8000e7e:	883a      	ldrh	r2, [r7, #0]
 8000e80:	88b9      	ldrh	r1, [r7, #4]
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff73 	bl	8000d70 <LCD_VLine>
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd90      	pop	{r4, r7, pc}
	...

08000e94 <LCD_FillRect>:
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
// note: doesn't check vRAM boundaries, so caller must respect
//       screen width and height while specifying X and Y coordinates
void LCD_FillRect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e94:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	80fb      	strh	r3, [r7, #6]
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	80bb      	strh	r3, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	803b      	strh	r3, [r7, #0]
	static const uint8_t LUT_B1[] = { 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01 };
	static const uint8_t LUT_B2[] = { 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF };

	if (X1 > X2) {
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d90b      	bls.n	8000ed4 <LCD_FillRect+0x40>
		SWAP_VARS(X1, X2);
 8000ebc:	88fa      	ldrh	r2, [r7, #6]
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	4053      	eors	r3, r2
 8000ec2:	80fb      	strh	r3, [r7, #6]
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4053      	eors	r3, r2
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	4053      	eors	r3, r2
 8000ed2:	80fb      	strh	r3, [r7, #6]
	}

	if (Y1 > Y2) {
 8000ed4:	88ba      	ldrh	r2, [r7, #4]
 8000ed6:	883b      	ldrh	r3, [r7, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d90b      	bls.n	8000ef4 <LCD_FillRect+0x60>
		SWAP_VARS(Y1, Y2);
 8000edc:	88ba      	ldrh	r2, [r7, #4]
 8000ede:	883b      	ldrh	r3, [r7, #0]
 8000ee0:	4053      	eors	r3, r2
 8000ee2:	80bb      	strh	r3, [r7, #4]
 8000ee4:	883a      	ldrh	r2, [r7, #0]
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	4053      	eors	r3, r2
 8000eea:	803b      	strh	r3, [r7, #0]
 8000eec:	88ba      	ldrh	r2, [r7, #4]
 8000eee:	883b      	ldrh	r3, [r7, #0]
 8000ef0:	4053      	eors	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
	}

	uint16_t dW;

	switch (lcd_orientation) {
 8000ef4:	4b95      	ldr	r3, [pc, #596]	; (800114c <LCD_FillRect+0x2b8>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d011      	beq.n	8000f20 <LCD_FillRect+0x8c>
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d002      	beq.n	8000f06 <LCD_FillRect+0x72>
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d032      	beq.n	8000f6a <LCD_FillRect+0xd6>
			SWAP_VARS(X1, Y1);
			SWAP_VARS(X2, Y2);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 8000f04:	e04a      	b.n	8000f9c <LCD_FillRect+0x108>
			dW = SCR_W - 1 - X2;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f16:	3301      	adds	r3, #1
 8000f18:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f1a:	897b      	ldrh	r3, [r7, #10]
 8000f1c:	80fb      	strh	r3, [r7, #6]
			break;
 8000f1e:	e03d      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f20:	88fa      	ldrh	r2, [r7, #6]
 8000f22:	88bb      	ldrh	r3, [r7, #4]
 8000f24:	4053      	eors	r3, r2
 8000f26:	80fb      	strh	r3, [r7, #6]
 8000f28:	88ba      	ldrh	r2, [r7, #4]
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	4053      	eors	r3, r2
 8000f2e:	80bb      	strh	r3, [r7, #4]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	4053      	eors	r3, r2
 8000f36:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	883b      	ldrh	r3, [r7, #0]
 8000f3c:	4053      	eors	r3, r2
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	883a      	ldrh	r2, [r7, #0]
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	4053      	eors	r3, r2
 8000f46:	803b      	strh	r3, [r7, #0]
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	883b      	ldrh	r3, [r7, #0]
 8000f4c:	4053      	eors	r3, r2
 8000f4e:	807b      	strh	r3, [r7, #2]
			dW = SCR_W - 1 - X2;
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f56:	3301      	adds	r3, #1
 8000f58:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f60:	3301      	adds	r3, #1
 8000f62:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f64:	897b      	ldrh	r3, [r7, #10]
 8000f66:	80fb      	strh	r3, [r7, #6]
			break;
 8000f68:	e018      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f6a:	88fa      	ldrh	r2, [r7, #6]
 8000f6c:	88bb      	ldrh	r3, [r7, #4]
 8000f6e:	4053      	eors	r3, r2
 8000f70:	80fb      	strh	r3, [r7, #6]
 8000f72:	88ba      	ldrh	r2, [r7, #4]
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	4053      	eors	r3, r2
 8000f78:	80bb      	strh	r3, [r7, #4]
 8000f7a:	88fa      	ldrh	r2, [r7, #6]
 8000f7c:	88bb      	ldrh	r3, [r7, #4]
 8000f7e:	4053      	eors	r3, r2
 8000f80:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	883b      	ldrh	r3, [r7, #0]
 8000f86:	4053      	eors	r3, r2
 8000f88:	807b      	strh	r3, [r7, #2]
 8000f8a:	883a      	ldrh	r2, [r7, #0]
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	4053      	eors	r3, r2
 8000f90:	803b      	strh	r3, [r7, #0]
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	883b      	ldrh	r3, [r7, #0]
 8000f96:	4053      	eors	r3, r2
 8000f98:	807b      	strh	r3, [r7, #2]
			break;
 8000f9a:	bf00      	nop
	}

	// Mask for first and last byte
	register uint8_t mask_fb = LUT_B1[X1 & 0x07];
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	4a6b      	ldr	r2, [pc, #428]	; (8001150 <LCD_FillRect+0x2bc>)
 8000fa4:	5cd5      	ldrb	r5, [r2, r3]
	register uint8_t mask_lb = LUT_B2[X2 & 0x07];
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	4a69      	ldr	r2, [pc, #420]	; (8001154 <LCD_FillRect+0x2c0>)
 8000fae:	f812 8003 	ldrb.w	r8, [r2, r3]

	// Offset in vRAM
	uint8_t *ptr_base = &vRAM[(((Y1 * SCR_W) + X1) >> 3)];
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000fb8:	fb02 f203 	mul.w	r2, r2, r3
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	10db      	asrs	r3, r3, #3
 8000fc2:	4a65      	ldr	r2, [pc, #404]	; (8001158 <LCD_FillRect+0x2c4>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

	// Line width in bytes
	dW = (X2 >> 3) - (X1 >> 3);
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	08db      	lsrs	r3, r3, #3
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	817b      	strh	r3, [r7, #10]

	if (dW) {
 8000fd8:	897b      	ldrh	r3, [r7, #10]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d071      	beq.n	80010c2 <LCD_FillRect+0x22e>
		// Multiple bytes
		register uint16_t cntr;
		register uint8_t *ptr;

		switch (LCD_PixelMode) {
 8000fde:	4b5f      	ldr	r3, [pc, #380]	; (800115c <LCD_FillRect+0x2c8>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d003      	beq.n	8000fee <LCD_FillRect+0x15a>
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d022      	beq.n	8001030 <LCD_FillRect+0x19c>
 8000fea:	e043      	b.n	8001074 <LCD_FillRect+0x1e0>
			case LCD_PRES:
 8000fec:	bf00      	nop
				do {
					cntr = dW;
 8000fee:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8000ff0:	68fc      	ldr	r4, [r7, #12]
					*ptr++ |= mask_fb;
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	1c5c      	adds	r4, r3, #1
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	432a      	orrs	r2, r5
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8000ffe:	e003      	b.n	8001008 <LCD_FillRect+0x174>
						*ptr++ = 0xFF;
 8001000:	4623      	mov	r3, r4
 8001002:	1c5c      	adds	r4, r3, #1
 8001004:	22ff      	movs	r2, #255	; 0xff
 8001006:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001008:	1e73      	subs	r3, r6, #1
 800100a:	b29e      	uxth	r6, r3
 800100c:	2e00      	cmp	r6, #0
 800100e:	d1f7      	bne.n	8001000 <LCD_FillRect+0x16c>
					};
					*ptr |= mask_lb;
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	ea48 0303 	orr.w	r3, r8, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3332      	adds	r3, #50	; 0x32
 800101e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001020:	88bb      	ldrh	r3, [r7, #4]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	80ba      	strh	r2, [r7, #4]
 8001026:	883a      	ldrh	r2, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8df      	bhi.n	8000fec <LCD_FillRect+0x158>
				break;
 800102c:	e087      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 800102e:	bf00      	nop
				do {
					cntr = dW;
 8001030:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001032:	68fc      	ldr	r4, [r7, #12]
					*ptr++ ^= mask_fb;
 8001034:	4623      	mov	r3, r4
 8001036:	1c5c      	adds	r4, r3, #1
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	406a      	eors	r2, r5
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001040:	e005      	b.n	800104e <LCD_FillRect+0x1ba>
						*ptr++ ^= 0xFF;
 8001042:	4623      	mov	r3, r4
 8001044:	1c5c      	adds	r4, r3, #1
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	43d2      	mvns	r2, r2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800104e:	1e73      	subs	r3, r6, #1
 8001050:	b29e      	uxth	r6, r3
 8001052:	2e00      	cmp	r6, #0
 8001054:	d1f5      	bne.n	8001042 <LCD_FillRect+0x1ae>
					};
					*ptr ^= mask_lb;
 8001056:	7823      	ldrb	r3, [r4, #0]
 8001058:	ea88 0303 	eor.w	r3, r8, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3332      	adds	r3, #50	; 0x32
 8001064:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	80ba      	strh	r2, [r7, #4]
 800106c:	883a      	ldrh	r2, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d8dd      	bhi.n	800102e <LCD_FillRect+0x19a>
				break;
 8001072:	e064      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 8001074:	43eb      	mvns	r3, r5
 8001076:	b2dd      	uxtb	r5, r3
				mask_lb = ~mask_lb;
 8001078:	ea6f 0308 	mvn.w	r3, r8
 800107c:	fa5f f883 	uxtb.w	r8, r3
				do {
					cntr = dW;
 8001080:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001082:	68fc      	ldr	r4, [r7, #12]
					*ptr++ &= mask_fb;
 8001084:	4623      	mov	r3, r4
 8001086:	1c5c      	adds	r4, r3, #1
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	402a      	ands	r2, r5
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001090:	e003      	b.n	800109a <LCD_FillRect+0x206>
						*ptr++ = 0x00;
 8001092:	4623      	mov	r3, r4
 8001094:	1c5c      	adds	r4, r3, #1
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800109a:	1e73      	subs	r3, r6, #1
 800109c:	b29e      	uxth	r6, r3
 800109e:	2e00      	cmp	r6, #0
 80010a0:	d1f7      	bne.n	8001092 <LCD_FillRect+0x1fe>
					};
					*ptr &= mask_lb;
 80010a2:	7823      	ldrb	r3, [r4, #0]
 80010a4:	ea08 0303 	and.w	r3, r8, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3332      	adds	r3, #50	; 0x32
 80010b0:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	80ba      	strh	r2, [r7, #4]
 80010b8:	883a      	ldrh	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d8e0      	bhi.n	8001080 <LCD_FillRect+0x1ec>
				break;
 80010be:	bf00      	nop
 80010c0:	e03d      	b.n	800113e <LCD_FillRect+0x2aa>
		}
	} else {
		// Single byte
		mask_fb &= mask_lb;
 80010c2:	ea05 0308 	and.w	r3, r5, r8
 80010c6:	b2dd      	uxtb	r5, r3

		switch (LCD_PixelMode) {
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <LCD_FillRect+0x2c8>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d003      	beq.n	80010d8 <LCD_FillRect+0x244>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d012      	beq.n	80010fa <LCD_FillRect+0x266>
 80010d4:	e021      	b.n	800111a <LCD_FillRect+0x286>
			case LCD_PRES:
 80010d6:	bf00      	nop
				do {
					*ptr_base |= mask_fb;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	432b      	orrs	r3, r5
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3332      	adds	r3, #50	; 0x32
 80010e8:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	80ba      	strh	r2, [r7, #4]
 80010f0:	883a      	ldrh	r2, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d8ef      	bhi.n	80010d6 <LCD_FillRect+0x242>
				break;
 80010f6:	e022      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 80010f8:	bf00      	nop
				do {
					*ptr_base ^= mask_fb;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	406b      	eors	r3, r5
 8001100:	b2da      	uxtb	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3332      	adds	r3, #50	; 0x32
 800110a:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	80ba      	strh	r2, [r7, #4]
 8001112:	883a      	ldrh	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8ef      	bhi.n	80010f8 <LCD_FillRect+0x264>
				break;
 8001118:	e011      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 800111a:	43eb      	mvns	r3, r5
 800111c:	b2dd      	uxtb	r5, r3
				do {
					*ptr_base &= mask_fb;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	402b      	ands	r3, r5
 8001124:	b2da      	uxtb	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3332      	adds	r3, #50	; 0x32
 800112e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	80ba      	strh	r2, [r7, #4]
 8001136:	883a      	ldrh	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f0      	bhi.n	800111e <LCD_FillRect+0x28a>
				break;
 800113c:	bf00      	nop
		}
	}
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000000 	.word	0x20000000
 8001150:	08017d84 	.word	0x08017d84
 8001154:	08017d8c 	.word	0x08017d8c
 8001158:	20000394 	.word	0x20000394
 800115c:	20028aa8 	.word	0x20028aa8

08001160 <LCD_Line>:

// Draw line
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Line(int16_t X1, int16_t Y1, int16_t X2, int16_t Y2) {
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	4603      	mov	r3, r0
 8001174:	80bb      	strh	r3, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	807b      	strh	r3, [r7, #2]
 800117a:	4613      	mov	r3, r2
 800117c:	803b      	strh	r3, [r7, #0]
	int16_t dX = X2 - X1;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	82bb      	strh	r3, [r7, #20]
	int16_t dY = Y2 - Y1;
 8001188:	883a      	ldrh	r2, [r7, #0]
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	827b      	strh	r3, [r7, #18]
	int16_t dXsym = (dX > 0) ? 1 : -1;
 8001192:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	dd01      	ble.n	800119e <LCD_Line+0x3e>
 800119a:	2301      	movs	r3, #1
 800119c:	e001      	b.n	80011a2 <LCD_Line+0x42>
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	823b      	strh	r3, [r7, #16]
	int16_t dYsym = (dY > 0) ? 1 : -1;
 80011a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dd01      	ble.n	80011b0 <LCD_Line+0x50>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e001      	b.n	80011b4 <LCD_Line+0x54>
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	81fb      	strh	r3, [r7, #14]

	if (dX == 0) {
 80011b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d106      	bne.n	80011cc <LCD_Line+0x6c>
		LCD_VLine(X1, Y1, Y2);
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	88b9      	ldrh	r1, [r7, #4]
 80011c2:	883a      	ldrh	r2, [r7, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fdd3 	bl	8000d70 <LCD_VLine>
		return;
 80011ca:	e08d      	b.n	80012e8 <LCD_Line+0x188>
	}
	if (dY == 0) {
 80011cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d106      	bne.n	80011e2 <LCD_Line+0x82>
		LCD_HLine(X1, X2, Y1);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	8879      	ldrh	r1, [r7, #2]
 80011d8:	88ba      	ldrh	r2, [r7, #4]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd78 	bl	8000cd0 <LCD_HLine>
		return;
 80011e0:	e082      	b.n	80012e8 <LCD_Line+0x188>
	}

	dX *= dXsym;
 80011e2:	8aba      	ldrh	r2, [r7, #20]
 80011e4:	8a3b      	ldrh	r3, [r7, #16]
 80011e6:	fb12 f303 	smulbb	r3, r2, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	82bb      	strh	r3, [r7, #20]
	dY *= dYsym;
 80011ee:	8a7a      	ldrh	r2, [r7, #18]
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	fb12 f303 	smulbb	r3, r2, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	827b      	strh	r3, [r7, #18]
	int16_t dX2 = dX << 1;
 80011fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	81bb      	strh	r3, [r7, #12]
	int16_t dY2 = dY << 1;
 8001202:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	817b      	strh	r3, [r7, #10]
	int16_t di;

	if (dX >= dY) {
 800120a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800120e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001212:	429a      	cmp	r2, r3
 8001214:	db30      	blt.n	8001278 <LCD_Line+0x118>
		di = dY2 - dX;
 8001216:	897a      	ldrh	r2, [r7, #10]
 8001218:	8abb      	ldrh	r3, [r7, #20]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	b29b      	uxth	r3, r3
 800121e:	82fb      	strh	r3, [r7, #22]
		while (X1 != X2) {
 8001220:	e023      	b.n	800126a <LCD_Line+0x10a>
			LCD_Pixel(X1, Y1);
 8001222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001226:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fbab 	bl	8000988 <LCD_Pixel>
			X1 += dXsym;
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	8a3b      	ldrh	r3, [r7, #16]
 8001236:	4413      	add	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	80fb      	strh	r3, [r7, #6]
			if (di < 0) {
 800123c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001240:	2b00      	cmp	r3, #0
 8001242:	da05      	bge.n	8001250 <LCD_Line+0xf0>
				di += dY2;
 8001244:	8afa      	ldrh	r2, [r7, #22]
 8001246:	897b      	ldrh	r3, [r7, #10]
 8001248:	4413      	add	r3, r2
 800124a:	b29b      	uxth	r3, r3
 800124c:	82fb      	strh	r3, [r7, #22]
 800124e:	e00c      	b.n	800126a <LCD_Line+0x10a>
			} else {
				di += dY2 - dX2;
 8001250:	897a      	ldrh	r2, [r7, #10]
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	b29a      	uxth	r2, r3
 8001258:	8afb      	ldrh	r3, [r7, #22]
 800125a:	4413      	add	r3, r2
 800125c:	b29b      	uxth	r3, r3
 800125e:	82fb      	strh	r3, [r7, #22]
				Y1 += dYsym;
 8001260:	88ba      	ldrh	r2, [r7, #4]
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	4413      	add	r3, r2
 8001266:	b29b      	uxth	r3, r3
 8001268:	80bb      	strh	r3, [r7, #4]
		while (X1 != X2) {
 800126a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800126e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001272:	429a      	cmp	r2, r3
 8001274:	d1d5      	bne.n	8001222 <LCD_Line+0xc2>
 8001276:	e02f      	b.n	80012d8 <LCD_Line+0x178>
			}
		}
	} else {
		di = dX2 - dY;
 8001278:	89ba      	ldrh	r2, [r7, #12]
 800127a:	8a7b      	ldrh	r3, [r7, #18]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	b29b      	uxth	r3, r3
 8001280:	82fb      	strh	r3, [r7, #22]
		while (Y1 != Y2) {
 8001282:	e023      	b.n	80012cc <LCD_Line+0x16c>
			LCD_Pixel(X1, Y1);
 8001284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001288:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fb7a 	bl	8000988 <LCD_Pixel>
			Y1 += dYsym;
 8001294:	88ba      	ldrh	r2, [r7, #4]
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	4413      	add	r3, r2
 800129a:	b29b      	uxth	r3, r3
 800129c:	80bb      	strh	r3, [r7, #4]
			if (di < 0) {
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	da05      	bge.n	80012b2 <LCD_Line+0x152>
				di += dX2;
 80012a6:	8afa      	ldrh	r2, [r7, #22]
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	82fb      	strh	r3, [r7, #22]
 80012b0:	e00c      	b.n	80012cc <LCD_Line+0x16c>
			} else {
				di += dX2 - dY2;
 80012b2:	89ba      	ldrh	r2, [r7, #12]
 80012b4:	897b      	ldrh	r3, [r7, #10]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	8afb      	ldrh	r3, [r7, #22]
 80012bc:	4413      	add	r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	82fb      	strh	r3, [r7, #22]
				X1 += dXsym;
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	8a3b      	ldrh	r3, [r7, #16]
 80012c6:	4413      	add	r3, r2
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	80fb      	strh	r3, [r7, #6]
		while (Y1 != Y2) {
 80012cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d1d5      	bne.n	8001284 <LCD_Line+0x124>
			}
		}
	}
	LCD_Pixel(X1, Y1);
 80012d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012dc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fb50 	bl	8000988 <LCD_Pixel>
}
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <LCD_PutChar>:
// input:
//   X,Y - character top left corner coordinates
//   chr - character to be drawn
//   font - pointer to font
// return: character width in pixels
uint8_t LCD_PutChar(uint16_t X, uint16_t Y, uint8_t chr, const Font_TypeDef *font) {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b088      	sub	sp, #32
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4603      	mov	r3, r0
 80012f8:	81fb      	strh	r3, [r7, #14]
 80012fa:	460b      	mov	r3, r1
 80012fc:	81bb      	strh	r3, [r7, #12]
 80012fe:	4613      	mov	r3, r2
 8001300:	72fb      	strb	r3, [r7, #11]
	uint8_t tmpCh;
	uint8_t bL;
	const uint8_t *pCh;

	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	7afa      	ldrb	r2, [r7, #11]
 8001308:	429a      	cmp	r2, r3
 800130a:	d304      	bcc.n	8001316 <LCD_PutChar+0x28>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	795b      	ldrb	r3, [r3, #5]
 8001310:	7afa      	ldrb	r2, [r7, #11]
 8001312:	429a      	cmp	r2, r3
 8001314:	d902      	bls.n	800131c <LCD_PutChar+0x2e>
		chr = font->font_UnknownChar;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	799b      	ldrb	r3, [r3, #6]
 800131a:	72fb      	strb	r3, [r7, #11]
	}

	// Pointer to the first byte of character in font data array
	pCh = &font->font_Data[(chr - font->font_MinChar) * font->font_BPC];
 800131c:	7afb      	ldrb	r3, [r7, #11]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	7912      	ldrb	r2, [r2, #4]
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	7892      	ldrb	r2, [r2, #2]
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	3307      	adds	r3, #7
 8001332:	617b      	str	r3, [r7, #20]

	// Draw character
	if (font->font_Scan == FONT_V) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	78db      	ldrb	r3, [r3, #3]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d177      	bne.n	800142c <LCD_PutChar+0x13e>
		// Vertical pixels order
		if (font->font_Height < 9) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	785b      	ldrb	r3, [r3, #1]
 8001340:	2b08      	cmp	r3, #8
 8001342:	d829      	bhi.n	8001398 <LCD_PutChar+0xaa>
			// Height is 8 pixels or less (one byte per column)
			pX = X;
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001348:	e01e      	b.n	8001388 <LCD_PutChar+0x9a>
				pY = Y;
 800134a:	89bb      	ldrh	r3, [r7, #12]
 800134c:	83bb      	strh	r3, [r7, #28]
				tmpCh = *pCh++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	617a      	str	r2, [r7, #20]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001358:	e010      	b.n	800137c <LCD_PutChar+0x8e>
					if (tmpCh & 0x01) {
 800135a:	7efb      	ldrb	r3, [r7, #27]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <LCD_PutChar+0x82>
						LCD_Pixel(pX, pY);
 8001364:	8bfb      	ldrh	r3, [r7, #30]
 8001366:	8bba      	ldrh	r2, [r7, #28]
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fb0c 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001370:	7efb      	ldrb	r3, [r7, #27]
 8001372:	085b      	lsrs	r3, r3, #1
 8001374:	76fb      	strb	r3, [r7, #27]
					pY++;
 8001376:	8bbb      	ldrh	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	83bb      	strh	r3, [r7, #28]
				while (tmpCh) {
 800137c:	7efb      	ldrb	r3, [r7, #27]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1eb      	bne.n	800135a <LCD_PutChar+0x6c>
				}
				pX++;
 8001382:	8bfb      	ldrh	r3, [r7, #30]
 8001384:	3301      	adds	r3, #1
 8001386:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001388:	8bfa      	ldrh	r2, [r7, #30]
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	7809      	ldrb	r1, [r1, #0]
 8001390:	440b      	add	r3, r1
 8001392:	429a      	cmp	r2, r3
 8001394:	dbd9      	blt.n	800134a <LCD_PutChar+0x5c>
 8001396:	e0c0      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Height is more than 8 pixels (several bytes per column)
			pX = X;
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800139c:	e03e      	b.n	800141c <LCD_PutChar+0x12e>
				pY = Y;
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 80013a2:	e031      	b.n	8001408 <LCD_PutChar+0x11a>
					bL = 8;
 80013a4:	2308      	movs	r3, #8
 80013a6:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	617a      	str	r2, [r7, #20]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80013b2:	7efb      	ldrb	r3, [r7, #27]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d022      	beq.n	80013fe <LCD_PutChar+0x110>
						while (bL) {
 80013b8:	e01d      	b.n	80013f6 <LCD_PutChar+0x108>
							if (tmpCh & 0x01) {
 80013ba:	7efb      	ldrb	r3, [r7, #27]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <LCD_PutChar+0xe2>
								LCD_Pixel(pX, pY);
 80013c4:	8bfb      	ldrh	r3, [r7, #30]
 80013c6:	8bba      	ldrh	r2, [r7, #28]
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fadc 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80013d0:	7efb      	ldrb	r3, [r7, #27]
 80013d2:	085b      	lsrs	r3, r3, #1
 80013d4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80013d6:	7efb      	ldrb	r3, [r7, #27]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <LCD_PutChar+0xfc>
								pY++;
 80013dc:	8bbb      	ldrh	r3, [r7, #28]
 80013de:	3301      	adds	r3, #1
 80013e0:	83bb      	strh	r3, [r7, #28]
								bL--;
 80013e2:	7ebb      	ldrb	r3, [r7, #26]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	76bb      	strb	r3, [r7, #26]
 80013e8:	e005      	b.n	80013f6 <LCD_PutChar+0x108>
							} else {
								pY += bL;
 80013ea:	7ebb      	ldrb	r3, [r7, #26]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	8bbb      	ldrh	r3, [r7, #28]
 80013f0:	4413      	add	r3, r2
 80013f2:	83bb      	strh	r3, [r7, #28]
								break;
 80013f4:	e008      	b.n	8001408 <LCD_PutChar+0x11a>
						while (bL) {
 80013f6:	7ebb      	ldrb	r3, [r7, #26]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1de      	bne.n	80013ba <LCD_PutChar+0xcc>
 80013fc:	e004      	b.n	8001408 <LCD_PutChar+0x11a>
							}
						}
					} else {
						pY += bL;
 80013fe:	7ebb      	ldrb	r3, [r7, #26]
 8001400:	b29a      	uxth	r2, r3
 8001402:	8bbb      	ldrh	r3, [r7, #28]
 8001404:	4413      	add	r3, r2
 8001406:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 8001408:	8bba      	ldrh	r2, [r7, #28]
 800140a:	89bb      	ldrh	r3, [r7, #12]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	7849      	ldrb	r1, [r1, #1]
 8001410:	440b      	add	r3, r1
 8001412:	429a      	cmp	r2, r3
 8001414:	dbc6      	blt.n	80013a4 <LCD_PutChar+0xb6>
					}
				}
				pX++;
 8001416:	8bfb      	ldrh	r3, [r7, #30]
 8001418:	3301      	adds	r3, #1
 800141a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800141c:	8bfa      	ldrh	r2, [r7, #30]
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	7809      	ldrb	r1, [r1, #0]
 8001424:	440b      	add	r3, r1
 8001426:	429a      	cmp	r2, r3
 8001428:	dbb9      	blt.n	800139e <LCD_PutChar+0xb0>
 800142a:	e076      	b.n	800151a <LCD_PutChar+0x22c>
			}
		}
	} else {
		// Horizontal pixels order
		if (font->font_Width < 9) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d829      	bhi.n	8001488 <LCD_PutChar+0x19a>
			// Width is 8 pixels or less (one byte per row)
			pY = Y;
 8001434:	89bb      	ldrh	r3, [r7, #12]
 8001436:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001438:	e01e      	b.n	8001478 <LCD_PutChar+0x18a>
				pX = X;
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	83fb      	strh	r3, [r7, #30]
				tmpCh = *pCh++;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	617a      	str	r2, [r7, #20]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001448:	e010      	b.n	800146c <LCD_PutChar+0x17e>
					if (tmpCh & 0x01) {
 800144a:	7efb      	ldrb	r3, [r7, #27]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <LCD_PutChar+0x172>
						LCD_Pixel(pX, pY);
 8001454:	8bfb      	ldrh	r3, [r7, #30]
 8001456:	8bba      	ldrh	r2, [r7, #28]
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fa94 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001460:	7efb      	ldrb	r3, [r7, #27]
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	76fb      	strb	r3, [r7, #27]
					pX++;
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	3301      	adds	r3, #1
 800146a:	83fb      	strh	r3, [r7, #30]
				while (tmpCh) {
 800146c:	7efb      	ldrb	r3, [r7, #27]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1eb      	bne.n	800144a <LCD_PutChar+0x15c>
				}
				pY++;
 8001472:	8bbb      	ldrh	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001478:	8bba      	ldrh	r2, [r7, #28]
 800147a:	89bb      	ldrh	r3, [r7, #12]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	7849      	ldrb	r1, [r1, #1]
 8001480:	440b      	add	r3, r1
 8001482:	429a      	cmp	r2, r3
 8001484:	dbd9      	blt.n	800143a <LCD_PutChar+0x14c>
 8001486:	e048      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Width is more than 8 pixels (several bytes per row)
			pY = Y;
 8001488:	89bb      	ldrh	r3, [r7, #12]
 800148a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800148c:	e03e      	b.n	800150c <LCD_PutChar+0x21e>
				pX = X;
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 8001492:	e031      	b.n	80014f8 <LCD_PutChar+0x20a>
					bL = 8;
 8001494:	2308      	movs	r3, #8
 8001496:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	617a      	str	r2, [r7, #20]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80014a2:	7efb      	ldrb	r3, [r7, #27]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <LCD_PutChar+0x200>
						while (bL) {
 80014a8:	e01d      	b.n	80014e6 <LCD_PutChar+0x1f8>
							if (tmpCh & 0x01) {
 80014aa:	7efb      	ldrb	r3, [r7, #27]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <LCD_PutChar+0x1d2>
								LCD_Pixel(pX, pY);
 80014b4:	8bfb      	ldrh	r3, [r7, #30]
 80014b6:	8bba      	ldrh	r2, [r7, #28]
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fa64 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80014c0:	7efb      	ldrb	r3, [r7, #27]
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80014c6:	7efb      	ldrb	r3, [r7, #27]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <LCD_PutChar+0x1ec>
								pX++;
 80014cc:	8bfb      	ldrh	r3, [r7, #30]
 80014ce:	3301      	adds	r3, #1
 80014d0:	83fb      	strh	r3, [r7, #30]
								bL--;
 80014d2:	7ebb      	ldrb	r3, [r7, #26]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	76bb      	strb	r3, [r7, #26]
 80014d8:	e005      	b.n	80014e6 <LCD_PutChar+0x1f8>
							} else {
								pX += bL;
 80014da:	7ebb      	ldrb	r3, [r7, #26]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	8bfb      	ldrh	r3, [r7, #30]
 80014e0:	4413      	add	r3, r2
 80014e2:	83fb      	strh	r3, [r7, #30]
								break;
 80014e4:	e008      	b.n	80014f8 <LCD_PutChar+0x20a>
						while (bL) {
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1de      	bne.n	80014aa <LCD_PutChar+0x1bc>
 80014ec:	e004      	b.n	80014f8 <LCD_PutChar+0x20a>
							}
						}
					} else {
						pX += bL;
 80014ee:	7ebb      	ldrb	r3, [r7, #26]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	8bfb      	ldrh	r3, [r7, #30]
 80014f4:	4413      	add	r3, r2
 80014f6:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 80014f8:	8bfa      	ldrh	r2, [r7, #30]
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	7809      	ldrb	r1, [r1, #0]
 8001500:	440b      	add	r3, r1
 8001502:	429a      	cmp	r2, r3
 8001504:	dbc6      	blt.n	8001494 <LCD_PutChar+0x1a6>
					}
				}
				pY++;
 8001506:	8bbb      	ldrh	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800150c:	8bba      	ldrh	r2, [r7, #28]
 800150e:	89bb      	ldrh	r3, [r7, #12]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	7849      	ldrb	r1, [r1, #1]
 8001514:	440b      	add	r3, r1
 8001516:	429a      	cmp	r2, r3
 8001518:	dbb9      	blt.n	800148e <LCD_PutChar+0x1a0>
			}
		}
	}

	return font->font_Width + 1;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	b2db      	uxtb	r3, r3
}
 8001522:	4618      	mov	r0, r3
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <LCD_PutStr>:
// input:
//   X,Y - top left coordinates of first character
//   str - pointer to zero-terminated string
//   font - pointer to font
// return: string width in pixels
uint16_t LCD_PutStr(uint16_t X, uint16_t Y, const char *str, const Font_TypeDef *font) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60ba      	str	r2, [r7, #8]
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4603      	mov	r3, r0
 8001538:	81fb      	strh	r3, [r7, #14]
 800153a:	460b      	mov	r3, r1
 800153c:	81bb      	strh	r3, [r7, #12]
	uint16_t pX = X;
 800153e:	89fb      	ldrh	r3, [r7, #14]
 8001540:	82fb      	strh	r3, [r7, #22]
	uint16_t eX = scr_width - font->font_Width - 1;
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <LCD_PutStr+0x6c>)
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	82bb      	strh	r3, [r7, #20]

	while (*str) {
 8001554:	e011      	b.n	800157a <LCD_PutStr+0x4e>
		pX += LCD_PutChar(pX, Y, *str++, font);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	60ba      	str	r2, [r7, #8]
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	89b9      	ldrh	r1, [r7, #12]
 8001560:	8af8      	ldrh	r0, [r7, #22]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f7ff fec3 	bl	80012ee <LCD_PutChar>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	8afb      	ldrh	r3, [r7, #22]
 800156e:	4413      	add	r3, r2
 8001570:	82fb      	strh	r3, [r7, #22]
		if (pX > eX) break;
 8001572:	8afa      	ldrh	r2, [r7, #22]
 8001574:	8abb      	ldrh	r3, [r7, #20]
 8001576:	429a      	cmp	r2, r3
 8001578:	d804      	bhi.n	8001584 <LCD_PutStr+0x58>
	while (*str) {
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1e9      	bne.n	8001556 <LCD_PutStr+0x2a>
 8001582:	e000      	b.n	8001586 <LCD_PutStr+0x5a>
		if (pX > eX) break;
 8001584:	bf00      	nop
	}

	return (pX - X);
 8001586:	8afa      	ldrh	r2, [r7, #22]
 8001588:	89fb      	ldrh	r3, [r7, #14]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	b29b      	uxth	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20028aaa 	.word	0x20028aaa

0800159c <LCD_PutInt>:
// input:
//   X,Y - top left coordinates of first symbol
//   num - signed integer value
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutInt(uint16_t X, uint16_t Y, int32_t num, const Font_TypeDef *font) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4603      	mov	r3, r0
 80015a8:	81fb      	strh	r3, [r7, #14]
 80015aa:	460b      	mov	r3, r1
 80015ac:	81bb      	strh	r3, [r7, #12]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t pX = X;
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	843b      	strh	r3, [r7, #32]

	// String termination character
	*pStr++ = '\0';
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	627a      	str	r2, [r7, #36]	; 0x24
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]

	// Convert number to characters
	if (num < 0) {
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da05      	bge.n	80015da <LCD_PutInt+0x3e>
		neg = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	425b      	negs	r3, r3
 80015d8:	60bb      	str	r3, [r7, #8]
	}
	do { *pStr++ = (num % 10) + '0'; } while (num /= 10);
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <LCD_PutInt+0xc8>)
 80015de:	fb83 1302 	smull	r1, r3, r3, r2
 80015e2:	1099      	asrs	r1, r3, #2
 80015e4:	17d3      	asrs	r3, r2, #31
 80015e6:	1ac9      	subs	r1, r1, r3
 80015e8:	460b      	mov	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	1ad1      	subs	r1, r2, r3
 80015f2:	b2ca      	uxtb	r2, r1
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	1c59      	adds	r1, r3, #1
 80015f8:	6279      	str	r1, [r7, #36]	; 0x24
 80015fa:	3230      	adds	r2, #48	; 0x30
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <LCD_PutInt+0xc8>)
 8001604:	fb82 1203 	smull	r1, r2, r2, r3
 8001608:	1092      	asrs	r2, r2, #2
 800160a:	17db      	asrs	r3, r3, #31
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1e1      	bne.n	80015da <LCD_PutInt+0x3e>
	if (neg) {
 8001616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800161a:	2b00      	cmp	r3, #0
 800161c:	d011      	beq.n	8001642 <LCD_PutInt+0xa6>
		*pStr++ = '-';
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	627a      	str	r2, [r7, #36]	; 0x24
 8001624:	222d      	movs	r2, #45	; 0x2d
 8001626:	701a      	strb	r2, [r3, #0]
	}

	// Draw a number
	while (*--pStr) {
 8001628:	e00b      	b.n	8001642 <LCD_PutInt+0xa6>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	89b9      	ldrh	r1, [r7, #12]
 8001630:	8c38      	ldrh	r0, [r7, #32]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f7ff fe5b 	bl	80012ee <LCD_PutChar>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	8c3b      	ldrh	r3, [r7, #32]
 800163e:	4413      	add	r3, r2
 8001640:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	3b01      	subs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ec      	bne.n	800162a <LCD_PutInt+0x8e>
	}

	return (pX - X);
 8001650:	8c3b      	ldrh	r3, [r7, #32]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b2db      	uxtb	r3, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	66666667 	.word	0x66666667

08001668 <LCD_PutIntF>:
//   X,Y - top left coordinates of first symbol
//   num - unsigned integer value
//   decimals - number of digits after decimal point
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutIntF(uint16_t X, uint16_t Y, int32_t num, uint8_t decimals, const Font_TypeDef *font) {
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b08b      	sub	sp, #44	; 0x2c
 800166c:	af00      	add	r7, sp, #0
 800166e:	60ba      	str	r2, [r7, #8]
 8001670:	461a      	mov	r2, r3
 8001672:	4603      	mov	r3, r0
 8001674:	81fb      	strh	r3, [r7, #14]
 8001676:	460b      	mov	r3, r1
 8001678:	81bb      	strh	r3, [r7, #12]
 800167a:	4613      	mov	r3, r2
 800167c:	71fb      	strb	r3, [r7, #7]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t strLen = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint16_t pX = X;
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	843b      	strh	r3, [r7, #32]

	// Convert number to characters
	*pStr++ = '\0'; // String termination character
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	627a      	str	r2, [r7, #36]	; 0x24
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
	if (num < 0) {
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da05      	bge.n	80016b0 <LCD_PutIntF+0x48>
		neg = 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	425b      	negs	r3, r3
 80016ae:	60bb      	str	r3, [r7, #8]
	}
	do {
		*pStr++ = (num % 10) + '0';
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <LCD_PutIntF+0x160>)
 80016b4:	fb83 1302 	smull	r1, r3, r3, r2
 80016b8:	1099      	asrs	r1, r3, #2
 80016ba:	17d3      	asrs	r3, r2, #31
 80016bc:	1ac9      	subs	r1, r1, r3
 80016be:	460b      	mov	r3, r1
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	1ad1      	subs	r1, r2, r3
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	1c59      	adds	r1, r3, #1
 80016ce:	6279      	str	r1, [r7, #36]	; 0x24
 80016d0:	3230      	adds	r2, #48	; 0x30
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]
		strLen++;
 80016d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80016da:	3301      	adds	r3, #1
 80016dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	} while (num /= 10);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4a39      	ldr	r2, [pc, #228]	; (80017c8 <LCD_PutIntF+0x160>)
 80016e4:	fb82 1203 	smull	r1, r2, r2, r3
 80016e8:	1092      	asrs	r2, r2, #2
 80016ea:	17db      	asrs	r3, r3, #31
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1dc      	bne.n	80016b0 <LCD_PutIntF+0x48>

	// Add leading zeroes
	if (strLen <= decimals) {
 80016f6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d80f      	bhi.n	8001720 <LCD_PutIntF+0xb8>
		while (strLen <= decimals) {
 8001700:	e009      	b.n	8001716 <LCD_PutIntF+0xae>
			*pStr++ = '0';
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	627a      	str	r2, [r7, #36]	; 0x24
 8001708:	2230      	movs	r2, #48	; 0x30
 800170a:	701a      	strb	r2, [r3, #0]
			strLen++;
 800170c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001710:	3301      	adds	r3, #1
 8001712:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		while (strLen <= decimals) {
 8001716:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	429a      	cmp	r2, r3
 800171e:	d9f0      	bls.n	8001702 <LCD_PutIntF+0x9a>
		}
	}

	// Minus sign?
	if (neg) {
 8001720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03d      	beq.n	80017a4 <LCD_PutIntF+0x13c>
		*pStr++ = '-';
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	627a      	str	r2, [r7, #36]	; 0x24
 800172e:	222d      	movs	r2, #45	; 0x2d
 8001730:	701a      	strb	r2, [r3, #0]
		strLen++;
 8001732:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001736:	3301      	adds	r3, #1
 8001738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	}

	// Draw a number
	while (*--pStr) {
 800173c:	e032      	b.n	80017a4 <LCD_PutIntF+0x13c>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	781a      	ldrb	r2, [r3, #0]
 8001742:	89b9      	ldrh	r1, [r7, #12]
 8001744:	8c38      	ldrh	r0, [r7, #32]
 8001746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001748:	f7ff fdd1 	bl	80012ee <LCD_PutChar>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	8c3b      	ldrh	r3, [r7, #32]
 8001752:	4413      	add	r3, r2
 8001754:	843b      	strh	r3, [r7, #32]
		if (decimals && (--strLen == decimals)) {
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <LCD_PutIntF+0x13c>
 800175c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001760:	3b01      	subs	r3, #1
 8001762:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001766:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	429a      	cmp	r2, r3
 800176e:	d119      	bne.n	80017a4 <LCD_PutIntF+0x13c>
			// Draw decimal point
			LCD_Rect(pX, Y + font->font_Height - 2, pX + 1, Y + font->font_Height - 1);
 8001770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	b29a      	uxth	r2, r3
 8001776:	89bb      	ldrh	r3, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b02      	subs	r3, #2
 800177e:	b299      	uxth	r1, r3
 8001780:	8c3b      	ldrh	r3, [r7, #32]
 8001782:	3301      	adds	r3, #1
 8001784:	b29c      	uxth	r4, r3
 8001786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001788:	785b      	ldrb	r3, [r3, #1]
 800178a:	b29a      	uxth	r2, r3
 800178c:	89bb      	ldrh	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29b      	uxth	r3, r3
 8001796:	8c38      	ldrh	r0, [r7, #32]
 8001798:	4622      	mov	r2, r4
 800179a:	f7ff fb39 	bl	8000e10 <LCD_Rect>
			pX += 3;
 800179e:	8c3b      	ldrh	r3, [r7, #32]
 80017a0:	3303      	adds	r3, #3
 80017a2:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	3b01      	subs	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1c5      	bne.n	800173e <LCD_PutIntF+0xd6>
		}
	}

	return (pX - X);
 80017b2:	8c3b      	ldrh	r3, [r7, #32]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	89fb      	ldrh	r3, [r7, #14]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	b2db      	uxtb	r3, r3
}
 80017be:	4618      	mov	r0, r3
 80017c0:	372c      	adds	r7, #44	; 0x2c
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	66666667 	.word	0x66666667

080017cc <drawUpDownArrow>:
		   HAL_SPI_Transmit(&hspi4, (uint8_t *)test, sizeof(test), 100);
	   	   SMLCD_SCS_L;
		   HAL_Delay(5);
	   }
}
void drawUpDownArrow(uint16_t X, uint16_t Y, uint16_t S, uint16_t dir){
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4623      	mov	r3, r4
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	4603      	mov	r3, r0
 80017e0:	80bb      	strh	r3, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	803b      	strh	r3, [r7, #0]
	int i=X;
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	61bb      	str	r3, [r7, #24]
	int j=Y;
 80017ee:	88bb      	ldrh	r3, [r7, #4]
 80017f0:	617b      	str	r3, [r7, #20]
	int size=S;
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	613b      	str	r3, [r7, #16]
	int direction = dir;
 80017f6:	883b      	ldrh	r3, [r7, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
	int lineCounter;
	if((direction==0)||(direction==1)){
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <drawUpDownArrow+0x3a>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d11f      	bne.n	8001846 <drawUpDownArrow+0x7a>
		LCD_FillRect(i-size, j-(size*2), i+size, j+(size*2));
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	b29a      	uxth	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	b29b      	uxth	r3, r3
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	b298      	uxth	r0, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	b29a      	uxth	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	b29b      	uxth	r3, r3
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	b29b      	uxth	r3, r3
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	b299      	uxth	r1, r3
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	b29a      	uxth	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	b29b      	uxth	r3, r3
 800182a:	4413      	add	r3, r2
 800182c:	b29c      	uxth	r4, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	b29b      	uxth	r3, r3
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4413      	add	r3, r2
 800183c:	b29b      	uxth	r3, r3
 800183e:	4622      	mov	r2, r4
 8001840:	f7ff fb28 	bl	8000e94 <LCD_FillRect>
 8001844:	e01e      	b.n	8001884 <drawUpDownArrow+0xb8>
	}
	else{
		LCD_FillRect(i-(size*2), j-size, i+(size*2), j+size);
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	b29a      	uxth	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	b29b      	uxth	r3, r3
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	b298      	uxth	r0, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	b29a      	uxth	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	b29b      	uxth	r3, r3
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b299      	uxth	r1, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	b29b      	uxth	r3, r3
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	b29b      	uxth	r3, r3
 800186e:	4413      	add	r3, r2
 8001870:	b29c      	uxth	r4, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	b29a      	uxth	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4413      	add	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	4622      	mov	r2, r4
 8001880:	f7ff fb08 	bl	8000e94 <LCD_FillRect>
	}
	switch(direction)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b03      	cmp	r3, #3
 8001888:	f200 8234 	bhi.w	8001cf4 <drawUpDownArrow+0x528>
 800188c:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <drawUpDownArrow+0xc8>)
 800188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001892:	bf00      	nop
 8001894:	080018a5 	.word	0x080018a5
 8001898:	080019bb 	.word	0x080019bb
 800189c:	08001ad1 	.word	0x08001ad1
 80018a0:	08001be3 	.word	0x08001be3
	{
	case 0: //upwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e03d      	b.n	8001926 <drawUpDownArrow+0x15a>
			LCD_Line(i-(size*2)+lineCounter,j-(size*2 +1)-lineCounter, i+(size*2)-lineCounter, j-(size*2 +1)-lineCounter);
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b218      	sxth	r0, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29b      	uxth	r3, r3
 80018e0:	b219      	sxth	r1, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b21c      	sxth	r4, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	b29b      	uxth	r3, r3
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	b29b      	uxth	r3, r3
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	b29a      	uxth	r2, r3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	b29b      	uxth	r3, r3
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	b21b      	sxth	r3, r3
 800191a:	4622      	mov	r2, r4
 800191c:	f7ff fc20 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3301      	adds	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbbc      	blt.n	80018aa <drawUpDownArrow+0xde>
		}
		LCD_Line(i-(size*2),j-(size*2 +1),i,j-(size*4));
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	b29a      	uxth	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	b29b      	uxth	r3, r3
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	b29b      	uxth	r3, r3
 8001940:	b218      	sxth	r0, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	b29a      	uxth	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	b29b      	uxth	r3, r3
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	b29b      	uxth	r3, r3
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b01      	subs	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	b219      	sxth	r1, r3
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	b21c      	sxth	r4, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	b29a      	uxth	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	b29b      	uxth	r3, r3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	b29b      	uxth	r3, r3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	b29b      	uxth	r3, r3
 800196c:	b21b      	sxth	r3, r3
 800196e:	4622      	mov	r2, r4
 8001970:	f7ff fbf6 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j-(size*2 +1),i,j-(size*4));
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	b29b      	uxth	r3, r3
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b29b      	uxth	r3, r3
 8001984:	b218      	sxth	r0, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	b29a      	uxth	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	b29b      	uxth	r3, r3
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	b29b      	uxth	r3, r3
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b29b      	uxth	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	b29b      	uxth	r3, r3
 800199a:	b219      	sxth	r1, r3
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	b21c      	sxth	r4, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	4622      	mov	r2, r4
 80019b4:	f7ff fbd4 	bl	8001160 <LCD_Line>
		break;
 80019b8:	e19c      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 1:  //downwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e03d      	b.n	8001a3c <drawUpDownArrow+0x270>
			LCD_Line(i-(size*2)+lineCounter,j+(size*2 +1)+lineCounter, i+(size*2)-lineCounter, j+(size*2 +1)+lineCounter);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	b218      	sxth	r0, r3
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3301      	adds	r3, #1
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b219      	sxth	r1, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	b21c      	sxth	r4, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	4622      	mov	r2, r4
 8001a32:	f7ff fb95 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbbc      	blt.n	80019c0 <drawUpDownArrow+0x1f4>
		}
		LCD_Line(i-(size*2),j+(size*2 +1),i,j+(size*4));
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b218      	sxth	r0, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b219      	sxth	r1, r3
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	b21c      	sxth	r4, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4622      	mov	r2, r4
 8001a86:	f7ff fb6b 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j+(size*2 +1),i,j+(size*4));
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b218      	sxth	r0, r3
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b219      	sxth	r1, r3
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	b21c      	sxth	r4, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	4622      	mov	r2, r4
 8001aca:	f7ff fb49 	bl	8001160 <LCD_Line>
		break;
 8001ace:	e111      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 2:{   //rightwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	e03d      	b.n	8001b52 <drawUpDownArrow+0x386>
			LCD_Line(i+(size*2+1)+lineCounter,j+(size*2)-lineCounter, i+(size*2+1)+lineCounter, j-(size*2)+lineCounter);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	b218      	sxth	r0, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	b219      	sxth	r1, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21c      	sxth	r4, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4622      	mov	r2, r4
 8001b48:	f7ff fb0a 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbbc      	blt.n	8001ad6 <drawUpDownArrow+0x30a>
		}
		LCD_Line(i+(size*2+1),j+(size*2),i+(size*4),j);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b218      	sxth	r0, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b219      	sxth	r1, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	f7ff fae1 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2+1),j-(size*2),i+(size*4),j);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	b218      	sxth	r0, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b219      	sxth	r1, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	f7ff fac0 	bl	8001160 <LCD_Line>
		break;
 8001be0:	e088      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 3:{   //leftwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e03d      	b.n	8001c64 <drawUpDownArrow+0x498>
			LCD_Line(i-(size*2+1)-lineCounter,j+(size*2)-lineCounter, i-(size*2+1)-lineCounter, j-(size*2)+lineCounter);
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b218      	sxth	r0, r3
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b219      	sxth	r1, r3
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	b21c      	sxth	r4, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4622      	mov	r2, r4
 8001c5a:	f7ff fa81 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	dbbc      	blt.n	8001be8 <drawUpDownArrow+0x41c>
		}
		LCD_Line(i-(size*2+1),j+(size*2),i-(size*4),j);
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b218      	sxth	r0, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	b219      	sxth	r1, r3
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	f7ff fa58 	bl	8001160 <LCD_Line>
		LCD_Line(i-(size*2+1),j-(size*2),i-(size*4),j);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b218      	sxth	r0, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b219      	sxth	r1, r3
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	f7ff fa37 	bl	8001160 <LCD_Line>
		break;
 8001cf2:	bf00      	nop
	}
	}

}
 8001cf4:	bf00      	nop
 8001cf6:	3724      	adds	r7, #36	; 0x24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b09d      	sub	sp, #116	; 0x74
 8001d00:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d02:	f007 fc3a 	bl	800957a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d06:	f000 fa1d 	bl	8002144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0a:	f001 f863 	bl	8002dd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d0e:	f001 f80f 	bl	8002d30 <MX_DMA_Init>
  MX_ADC1_Init();
 8001d12:	f000 fabf 	bl	8002294 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001d16:	f000 fb9b 	bl	8002450 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001d1a:	f000 fc15 	bl	8002548 <MX_ADC3_Init>
  MX_I2C1_Init();
 8001d1e:	f000 fcab 	bl	8002678 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d22:	f000 fce9 	bl	80026f8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001d26:	f000 fd27 	bl	8002778 <MX_I2C3_Init>
  MX_I2C4_Init();
 8001d2a:	f000 fd67 	bl	80027fc <MX_I2C4_Init>
  MX_RTC_Init();
 8001d2e:	f000 fda5 	bl	800287c <MX_RTC_Init>
  MX_SPI4_Init();
 8001d32:	f000 fdc9 	bl	80028c8 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001d36:	f000 fe05 	bl	8002944 <MX_SPI5_Init>
  MX_TIM4_Init();
 8001d3a:	f000 fe41 	bl	80029c0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001d3e:	f000 feb7 	bl	8002ab0 <MX_TIM5_Init>
  MX_UART4_Init();
 8001d42:	f000 ff37 	bl	8002bb4 <MX_UART4_Init>
  MX_UART5_Init();
 8001d46:	f000 ff65 	bl	8002c14 <MX_UART5_Init>
  MX_UART7_Init();
 8001d4a:	f000 ff93 	bl	8002c74 <MX_UART7_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d4e:	f000 ffc1 	bl	8002cd4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_ConfigChannel();
  outputGPIOBufInitialization();
 8001d52:	f001 f9ef 	bl	8003134 <outputGPIOBufInitialization>
  memset(errorLEDState,0,sizeof(errorLEDState));
 8001d56:	220c      	movs	r2, #12
 8001d58:	2100      	movs	r1, #0
 8001d5a:	48c7      	ldr	r0, [pc, #796]	; (8002078 <main+0x37c>)
 8001d5c:	f011 fc15 	bl	801358a <memset>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	49c5      	ldr	r1, [pc, #788]	; (800207c <main+0x380>)
 8001d66:	48c6      	ldr	r0, [pc, #792]	; (8002080 <main+0x384>)
 8001d68:	f007 fddc 	bl	8009924 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	49c4      	ldr	r1, [pc, #784]	; (8002084 <main+0x388>)
 8001d72:	48c5      	ldr	r0, [pc, #788]	; (8002088 <main+0x38c>)
 8001d74:	f007 fdd6 	bl	8009924 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8001d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7c:	49c3      	ldr	r1, [pc, #780]	; (800208c <main+0x390>)
 8001d7e:	48c4      	ldr	r0, [pc, #784]	; (8002090 <main+0x394>)
 8001d80:	f007 fdd0 	bl	8009924 <HAL_ADC_Start_DMA>



  configureLEDDriver();
 8001d84:	f001 fc7a 	bl	800367c <configureLEDDriver>
  HAL_UART_Receive_DMA(&huart5, soc_Uart_RX_Buf, sizeof(soc_Uart_RX_Buf));
 8001d88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d8c:	49c1      	ldr	r1, [pc, #772]	; (8002094 <main+0x398>)
 8001d8e:	48c2      	ldr	r0, [pc, #776]	; (8002098 <main+0x39c>)
 8001d90:	f00d fc96 	bl	800f6c0 <HAL_UART_Receive_DMA>
  uint8_t data[5];
  int x;
  for(x=0;x<5;x++){
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	e00c      	b.n	8001db4 <main+0xb8>
	  data[x]=0xfa+x;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	3b06      	subs	r3, #6
 8001da0:	b2d9      	uxtb	r1, r3
 8001da2:	f107 0208 	add.w	r2, r7, #8
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	4413      	add	r3, r2
 8001daa:	460a      	mov	r2, r1
 8001dac:	701a      	strb	r2, [r3, #0]
  for(x=0;x<5;x++){
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	ddef      	ble.n	8001d9a <main+0x9e>
  }
  writeDataToSpareEEPROM((uint8_t*)data,SPARE_ADDRESS,0x00,sizeof(data),100);
 8001dba:	f107 0008 	add.w	r0, r7, #8
 8001dbe:	2364      	movs	r3, #100	; 0x64
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2305      	movs	r3, #5
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	21a6      	movs	r1, #166	; 0xa6
 8001dc8:	f007 fb52 	bl	8009470 <writeDataToSpareEEPROM>
  for(int x=0;x<5;x++){
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	e008      	b.n	8001de4 <main+0xe8>
	  data[x]=0;
 8001dd2:	f107 0208 	add.w	r2, r7, #8
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
  for(int x=0;x<5;x++){
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	3301      	adds	r3, #1
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	ddf3      	ble.n	8001dd2 <main+0xd6>
  }
  readDataFromSpareEEPROM((uint8_t*)data,SPARE_ADDRESS,0x00,sizeof(data),100);
 8001dea:	f107 0008 	add.w	r0, r7, #8
 8001dee:	2364      	movs	r3, #100	; 0x64
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2305      	movs	r3, #5
 8001df4:	2200      	movs	r2, #0
 8001df6:	21a6      	movs	r1, #166	; 0xa6
 8001df8:	f007 fb78 	bl	80094ec <readDataFromSpareEEPROM>
  data[1]=0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	727b      	strb	r3, [r7, #9]
  uint8_t spiDataRead[6];
  memset(data,0x00, sizeof(data));
 8001e00:	f107 0308 	add.w	r3, r7, #8
 8001e04:	2205      	movs	r2, #5
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f011 fbbe 	bl	801358a <memset>
  winbondSPIDeviceIDRead(hspi5,(uint8_t*)spiDataRead);
 8001e0e:	4ca3      	ldr	r4, [pc, #652]	; (800209c <main+0x3a0>)
 8001e10:	463b      	mov	r3, r7
 8001e12:	9315      	str	r3, [sp, #84]	; 0x54
 8001e14:	4668      	mov	r0, sp
 8001e16:	f104 0310 	add.w	r3, r4, #16
 8001e1a:	2254      	movs	r2, #84	; 0x54
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f011 fba9 	bl	8013574 <memcpy>
 8001e22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e26:	f002 fa15 	bl	8004254 <winbondSPIDeviceIDRead>
  //char buf[30];
  spareUartTransmitRead("Lets see what comes out!");
 8001e2a:	489d      	ldr	r0, [pc, #628]	; (80020a0 <main+0x3a4>)
 8001e2c:	f002 fa38 	bl	80042a0 <spareUartTransmitRead>
  x=0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
    setErrorLED(0,ON);
 8001e34:	2101      	movs	r1, #1
 8001e36:	2000      	movs	r0, #0
 8001e38:	f001 fcac 	bl	8003794 <setErrorLED>
    HAL_Delay(1000);
 8001e3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e40:	f007 fbc8 	bl	80095d4 <HAL_Delay>
    setErrorLED(1,OFF);
 8001e44:	2100      	movs	r1, #0
 8001e46:	2001      	movs	r0, #1
 8001e48:	f001 fca4 	bl	8003794 <setErrorLED>
    setErrorLED(8,ON);
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	2008      	movs	r0, #8
 8001e50:	f001 fca0 	bl	8003794 <setErrorLED>
    HAL_Delay(1000);
 8001e54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e58:	f007 fbbc 	bl	80095d4 <HAL_Delay>
    setErrorLED(8,OFF);
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2008      	movs	r0, #8
 8001e60:	f001 fc98 	bl	8003794 <setErrorLED>
    setErrorLED(9,ON);
 8001e64:	2101      	movs	r1, #1
 8001e66:	2009      	movs	r0, #9
 8001e68:	f001 fc94 	bl	8003794 <setErrorLED>
    HAL_Delay(1000);
 8001e6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e70:	f007 fbb0 	bl	80095d4 <HAL_Delay>
    setErrorLED(8,ON);
 8001e74:	2101      	movs	r1, #1
 8001e76:	2008      	movs	r0, #8
 8001e78:	f001 fc8c 	bl	8003794 <setErrorLED>
    setErrorLED(9,ON);
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	2009      	movs	r0, #9
 8001e80:	f001 fc88 	bl	8003794 <setErrorLED>
    HAL_Delay(1000);
 8001e84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e88:	f007 fba4 	bl	80095d4 <HAL_Delay>
    setErrorLED(9,OFF);
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2009      	movs	r0, #9
 8001e90:	f001 fc80 	bl	8003794 <setErrorLED>
    BTN0_ON;
 8001e94:	2201      	movs	r2, #1
 8001e96:	2104      	movs	r1, #4
 8001e98:	4882      	ldr	r0, [pc, #520]	; (80020a4 <main+0x3a8>)
 8001e9a:	f009 f815 	bl	800aec8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e9e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ea2:	f007 fb97 	bl	80095d4 <HAL_Delay>
    BTN1_ON;
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2108      	movs	r1, #8
 8001eaa:	487e      	ldr	r0, [pc, #504]	; (80020a4 <main+0x3a8>)
 8001eac:	f009 f80c 	bl	800aec8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001eb0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001eb4:	f007 fb8e 	bl	80095d4 <HAL_Delay>
    BTN2_ON;
 8001eb8:	2201      	movs	r2, #1
 8001eba:	2110      	movs	r1, #16
 8001ebc:	4879      	ldr	r0, [pc, #484]	; (80020a4 <main+0x3a8>)
 8001ebe:	f009 f803 	bl	800aec8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001ec2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ec6:	f007 fb85 	bl	80095d4 <HAL_Delay>
    BTN3_ON;
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2120      	movs	r1, #32
 8001ece:	4875      	ldr	r0, [pc, #468]	; (80020a4 <main+0x3a8>)
 8001ed0:	f008 fffa 	bl	800aec8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001ed4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ed8:	f007 fb7c 	bl	80095d4 <HAL_Delay>
    BTN4_ON;
 8001edc:	2201      	movs	r2, #1
 8001ede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee2:	4870      	ldr	r0, [pc, #448]	; (80020a4 <main+0x3a8>)
 8001ee4:	f008 fff0 	bl	800aec8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001ee8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001eec:	f007 fb72 	bl	80095d4 <HAL_Delay>
    BTN5_ON;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef6:	486b      	ldr	r0, [pc, #428]	; (80020a4 <main+0x3a8>)
 8001ef8:	f008 ffe6 	bl	800aec8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001efc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f00:	f007 fb68 	bl	80095d4 <HAL_Delay>
    EDL_SW_ON;
 8001f04:	2201      	movs	r2, #1
 8001f06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f0a:	4867      	ldr	r0, [pc, #412]	; (80020a8 <main+0x3ac>)
 8001f0c:	f008 ffdc 	bl	800aec8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f10:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f14:	f007 fb5e 	bl	80095d4 <HAL_Delay>
    EX_SW_ON;
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f1e:	4862      	ldr	r0, [pc, #392]	; (80020a8 <main+0x3ac>)
 8001f20:	f008 ffd2 	bl	800aec8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f24:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f28:	f007 fb54 	bl	80095d4 <HAL_Delay>
    BTN0_OFF;
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2104      	movs	r1, #4
 8001f30:	485c      	ldr	r0, [pc, #368]	; (80020a4 <main+0x3a8>)
 8001f32:	f008 ffc9 	bl	800aec8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f36:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f3a:	f007 fb4b 	bl	80095d4 <HAL_Delay>
    BTN1_OFF;
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2108      	movs	r1, #8
 8001f42:	4858      	ldr	r0, [pc, #352]	; (80020a4 <main+0x3a8>)
 8001f44:	f008 ffc0 	bl	800aec8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f48:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f4c:	f007 fb42 	bl	80095d4 <HAL_Delay>
    BTN2_OFF;
 8001f50:	2200      	movs	r2, #0
 8001f52:	2110      	movs	r1, #16
 8001f54:	4853      	ldr	r0, [pc, #332]	; (80020a4 <main+0x3a8>)
 8001f56:	f008 ffb7 	bl	800aec8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f5a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f5e:	f007 fb39 	bl	80095d4 <HAL_Delay>
    BTN3_OFF;
 8001f62:	2200      	movs	r2, #0
 8001f64:	2120      	movs	r1, #32
 8001f66:	484f      	ldr	r0, [pc, #316]	; (80020a4 <main+0x3a8>)
 8001f68:	f008 ffae 	bl	800aec8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f6c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f70:	f007 fb30 	bl	80095d4 <HAL_Delay>
    BTN4_OFF;
 8001f74:	2200      	movs	r2, #0
 8001f76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f7a:	484a      	ldr	r0, [pc, #296]	; (80020a4 <main+0x3a8>)
 8001f7c:	f008 ffa4 	bl	800aec8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f80:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f84:	f007 fb26 	bl	80095d4 <HAL_Delay>
    BTN5_OFF;
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f8e:	4845      	ldr	r0, [pc, #276]	; (80020a4 <main+0x3a8>)
 8001f90:	f008 ff9a 	bl	800aec8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f98:	f007 fb1c 	bl	80095d4 <HAL_Delay>
    EDL_SW_OFF;
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa2:	4841      	ldr	r0, [pc, #260]	; (80020a8 <main+0x3ac>)
 8001fa4:	f008 ff90 	bl	800aec8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001fa8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001fac:	f007 fb12 	bl	80095d4 <HAL_Delay>
    EX_SW_OFF;
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fb6:	483c      	ldr	r0, [pc, #240]	; (80020a8 <main+0x3ac>)
 8001fb8:	f008 ff86 	bl	800aec8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001fbc:	f00e fb98 	bl	80106f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(startHeartbeat, NULL, &Heartbeat_attributes);
 8001fc0:	4a3a      	ldr	r2, [pc, #232]	; (80020ac <main+0x3b0>)
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	483a      	ldr	r0, [pc, #232]	; (80020b0 <main+0x3b4>)
 8001fc6:	f00e fbfd 	bl	80107c4 <osThreadNew>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <main+0x3b8>)
 8001fce:	601a      	str	r2, [r3, #0]

  /* creation of adcRead */
  adcReadHandle = osThreadNew(startADCRead, NULL, &adcRead_attributes);
 8001fd0:	4a39      	ldr	r2, [pc, #228]	; (80020b8 <main+0x3bc>)
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4839      	ldr	r0, [pc, #228]	; (80020bc <main+0x3c0>)
 8001fd6:	f00e fbf5 	bl	80107c4 <osThreadNew>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	4b38      	ldr	r3, [pc, #224]	; (80020c0 <main+0x3c4>)
 8001fde:	601a      	str	r2, [r3, #0]

  /* creation of DatScreenBlink */
  DatScreenBlinkHandle = osThreadNew(GetDaScreenBlink, NULL, &DatScreenBlink_attributes);
 8001fe0:	4a38      	ldr	r2, [pc, #224]	; (80020c4 <main+0x3c8>)
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4838      	ldr	r0, [pc, #224]	; (80020c8 <main+0x3cc>)
 8001fe6:	f00e fbed 	bl	80107c4 <osThreadNew>
 8001fea:	4602      	mov	r2, r0
 8001fec:	4b37      	ldr	r3, [pc, #220]	; (80020cc <main+0x3d0>)
 8001fee:	601a      	str	r2, [r3, #0]

  /* creation of gpioInputRead */
  gpioInputReadHandle = osThreadNew(startGpioInputRead, NULL, &gpioInputRead_attributes);
 8001ff0:	4a37      	ldr	r2, [pc, #220]	; (80020d0 <main+0x3d4>)
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4837      	ldr	r0, [pc, #220]	; (80020d4 <main+0x3d8>)
 8001ff6:	f00e fbe5 	bl	80107c4 <osThreadNew>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <main+0x3dc>)
 8001ffe:	601a      	str	r2, [r3, #0]

  /* creation of navigationTask */
  navigationTaskHandle = osThreadNew(startNavigationTask, NULL, &navigationTask_attributes);
 8002000:	4a36      	ldr	r2, [pc, #216]	; (80020dc <main+0x3e0>)
 8002002:	2100      	movs	r1, #0
 8002004:	4836      	ldr	r0, [pc, #216]	; (80020e0 <main+0x3e4>)
 8002006:	f00e fbdd 	bl	80107c4 <osThreadNew>
 800200a:	4602      	mov	r2, r0
 800200c:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <main+0x3e8>)
 800200e:	601a      	str	r2, [r3, #0]

  /* creation of errorLEDs */
  errorLEDsHandle = osThreadNew(startErrorLEDs, NULL, &errorLEDs_attributes);
 8002010:	4a35      	ldr	r2, [pc, #212]	; (80020e8 <main+0x3ec>)
 8002012:	2100      	movs	r1, #0
 8002014:	4835      	ldr	r0, [pc, #212]	; (80020ec <main+0x3f0>)
 8002016:	f00e fbd5 	bl	80107c4 <osThreadNew>
 800201a:	4602      	mov	r2, r0
 800201c:	4b34      	ldr	r3, [pc, #208]	; (80020f0 <main+0x3f4>)
 800201e:	601a      	str	r2, [r3, #0]

  /* creation of zionRead */
  zionReadHandle = osThreadNew(startZionRead, NULL, &zionRead_attributes);
 8002020:	4a34      	ldr	r2, [pc, #208]	; (80020f4 <main+0x3f8>)
 8002022:	2100      	movs	r1, #0
 8002024:	4834      	ldr	r0, [pc, #208]	; (80020f8 <main+0x3fc>)
 8002026:	f00e fbcd 	bl	80107c4 <osThreadNew>
 800202a:	4602      	mov	r2, r0
 800202c:	4b33      	ldr	r3, [pc, #204]	; (80020fc <main+0x400>)
 800202e:	601a      	str	r2, [r3, #0]

  /* creation of bootButtons */
  bootButtonsHandle = osThreadNew(startBootButtons, NULL, &bootButtons_attributes);
 8002030:	4a33      	ldr	r2, [pc, #204]	; (8002100 <main+0x404>)
 8002032:	2100      	movs	r1, #0
 8002034:	4833      	ldr	r0, [pc, #204]	; (8002104 <main+0x408>)
 8002036:	f00e fbc5 	bl	80107c4 <osThreadNew>
 800203a:	4602      	mov	r2, r0
 800203c:	4b32      	ldr	r3, [pc, #200]	; (8002108 <main+0x40c>)
 800203e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002040:	f00e fb8a 	bl	8010758 <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_Delay(1000);
 8002044:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002048:	f007 fac4 	bl	80095d4 <HAL_Delay>
	  if (!x) {
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d160      	bne.n	8002114 <main+0x418>
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
 8002052:	2201      	movs	r2, #1
 8002054:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002058:	482c      	ldr	r0, [pc, #176]	; (800210c <main+0x410>)
 800205a:	f008 ff35 	bl	800aec8 <HAL_GPIO_WritePin>
		  x=1;
 800205e:	2301      	movs	r3, #1
 8002060:	617b      	str	r3, [r7, #20]

		  //uartTransmitChar("hello\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8002062:	2201      	movs	r2, #1
 8002064:	2110      	movs	r1, #16
 8002066:	482a      	ldr	r0, [pc, #168]	; (8002110 <main+0x414>)
 8002068:	f008 ff2e 	bl	800aec8 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 800206c:	2200      	movs	r2, #0
 800206e:	2110      	movs	r1, #16
 8002070:	4827      	ldr	r0, [pc, #156]	; (8002110 <main+0x414>)
 8002072:	f008 ff29 	bl	800aec8 <HAL_GPIO_WritePin>
 8002076:	e7e5      	b.n	8002044 <main+0x348>
 8002078:	2002e6dc 	.word	0x2002e6dc
 800207c:	200296b0 	.word	0x200296b0
 8002080:	2002be44 	.word	0x2002be44
 8002084:	2002e770 	.word	0x2002e770
 8002088:	20028d40 	.word	0x20028d40
 800208c:	2002bfcc 	.word	0x2002bfcc
 8002090:	2002bef0 	.word	0x2002bef0
 8002094:	200292c8 	.word	0x200292c8
 8002098:	2002bdc4 	.word	0x2002bdc4
 800209c:	20028c8c 	.word	0x20028c8c
 80020a0:	08017648 	.word	0x08017648
 80020a4:	40021400 	.word	0x40021400
 80020a8:	40020400 	.word	0x40020400
 80020ac:	08017d94 	.word	0x08017d94
 80020b0:	080042f1 	.word	0x080042f1
 80020b4:	2002e76c 	.word	0x2002e76c
 80020b8:	08017db8 	.word	0x08017db8
 80020bc:	08004311 	.word	0x08004311
 80020c0:	20030f44 	.word	0x20030f44
 80020c4:	08017ddc 	.word	0x08017ddc
 80020c8:	08004391 	.word	0x08004391
 80020cc:	20030f40 	.word	0x20030f40
 80020d0:	08017e00 	.word	0x08017e00
 80020d4:	08004459 	.word	0x08004459
 80020d8:	2002beec 	.word	0x2002beec
 80020dc:	08017e24 	.word	0x08017e24
 80020e0:	08004585 	.word	0x08004585
 80020e4:	2002bfc8 	.word	0x2002bfc8
 80020e8:	08017e48 	.word	0x08017e48
 80020ec:	08004705 	.word	0x08004705
 80020f0:	20028d30 	.word	0x20028d30
 80020f4:	08017e6c 	.word	0x08017e6c
 80020f8:	080049b9 	.word	0x080049b9
 80020fc:	2002e6e8 	.word	0x2002e6e8
 8002100:	08017e90 	.word	0x08017e90
 8002104:	08004bc9 	.word	0x08004bc9
 8002108:	2002bdc0 	.word	0x2002bdc0
 800210c:	40022000 	.word	0x40022000
 8002110:	40021000 	.word	0x40021000
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
 8002114:	2200      	movs	r2, #0
 8002116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800211a:	4808      	ldr	r0, [pc, #32]	; (800213c <main+0x440>)
 800211c:	f008 fed4 	bl	800aec8 <HAL_GPIO_WritePin>
		  x=0;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
		  //uartTransmitChar("here\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8002124:	2201      	movs	r2, #1
 8002126:	2110      	movs	r1, #16
 8002128:	4805      	ldr	r0, [pc, #20]	; (8002140 <main+0x444>)
 800212a:	f008 fecd 	bl	800aec8 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
 8002130:	2110      	movs	r1, #16
 8002132:	4803      	ldr	r0, [pc, #12]	; (8002140 <main+0x444>)
 8002134:	f008 fec8 	bl	800aec8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8002138:	e784      	b.n	8002044 <main+0x348>
 800213a:	bf00      	nop
 800213c:	40022000 	.word	0x40022000
 8002140:	40021000 	.word	0x40021000

08002144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b0b8      	sub	sp, #224	; 0xe0
 8002148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800214a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800214e:	2234      	movs	r2, #52	; 0x34
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f011 fa19 	bl	801358a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002158:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002168:	f107 0308 	add.w	r3, r7, #8
 800216c:	2290      	movs	r2, #144	; 0x90
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f011 fa0a 	bl	801358a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002176:	f00a f937 	bl	800c3e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800217a:	4b43      	ldr	r3, [pc, #268]	; (8002288 <SystemClock_Config+0x144>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217e:	4a42      	ldr	r2, [pc, #264]	; (8002288 <SystemClock_Config+0x144>)
 8002180:	f023 0318 	bic.w	r3, r3, #24
 8002184:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	4b40      	ldr	r3, [pc, #256]	; (8002288 <SystemClock_Config+0x144>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	4a3f      	ldr	r2, [pc, #252]	; (8002288 <SystemClock_Config+0x144>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002190:	6413      	str	r3, [r2, #64]	; 0x40
 8002192:	4b3d      	ldr	r3, [pc, #244]	; (8002288 <SystemClock_Config+0x144>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800219e:	4b3b      	ldr	r3, [pc, #236]	; (800228c <SystemClock_Config+0x148>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021a6:	4a39      	ldr	r2, [pc, #228]	; (800228c <SystemClock_Config+0x148>)
 80021a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	4b37      	ldr	r3, [pc, #220]	; (800228c <SystemClock_Config+0x148>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80021ba:	2305      	movs	r3, #5
 80021bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ce:	2302      	movs	r3, #2
 80021d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 15;
 80021dc:	230f      	movs	r3, #15
 80021de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 80021e2:	2390      	movs	r3, #144	; 0x90
 80021e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021e8:	2302      	movs	r3, #2
 80021ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80021ee:	2305      	movs	r3, #5
 80021f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021f8:	4618      	mov	r0, r3
 80021fa:	f00a f905 	bl	800c408 <HAL_RCC_OscConfig>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002204:	f002 fefc 	bl	8005000 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002208:	230f      	movs	r3, #15
 800220a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800220e:	2302      	movs	r3, #2
 8002210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800221a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800221e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002226:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800222a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800222e:	2103      	movs	r1, #3
 8002230:	4618      	mov	r0, r3
 8002232:	f00a fb97 	bl	800c964 <HAL_RCC_ClockConfig>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800223c:	f002 fee0 	bl	8005000 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <SystemClock_Config+0x14c>)
 8002242:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002244:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002248:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800224a:	2300      	movs	r3, #0
 800224c:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800224e:	2300      	movs	r3, #0
 8002250:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8002252:	2300      	movs	r3, #0
 8002254:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002256:	2300      	movs	r3, #0
 8002258:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800225a:	2300      	movs	r3, #0
 800225c:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800225e:	2300      	movs	r3, #0
 8002260:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002262:	2300      	movs	r3, #0
 8002264:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800226c:	f107 0308 	add.w	r3, r7, #8
 8002270:	4618      	mov	r0, r3
 8002272:	f00a fd7b 	bl	800cd6c <HAL_RCCEx_PeriphCLKConfig>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 800227c:	f002 fec0 	bl	8005000 <Error_Handler>
  }
}
 8002280:	bf00      	nop
 8002282:	37e0      	adds	r7, #224	; 0xe0
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	40007000 	.word	0x40007000
 8002290:	0023d620 	.word	0x0023d620

08002294 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800229a:	463b      	mov	r3, r7
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022a6:	4b67      	ldr	r3, [pc, #412]	; (8002444 <MX_ADC1_Init+0x1b0>)
 80022a8:	4a67      	ldr	r2, [pc, #412]	; (8002448 <MX_ADC1_Init+0x1b4>)
 80022aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022ac:	4b65      	ldr	r3, [pc, #404]	; (8002444 <MX_ADC1_Init+0x1b0>)
 80022ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022b4:	4b63      	ldr	r3, [pc, #396]	; (8002444 <MX_ADC1_Init+0x1b0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022ba:	4b62      	ldr	r3, [pc, #392]	; (8002444 <MX_ADC1_Init+0x1b0>)
 80022bc:	2201      	movs	r2, #1
 80022be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022c0:	4b60      	ldr	r3, [pc, #384]	; (8002444 <MX_ADC1_Init+0x1b0>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022c6:	4b5f      	ldr	r3, [pc, #380]	; (8002444 <MX_ADC1_Init+0x1b0>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022ce:	4b5d      	ldr	r3, [pc, #372]	; (8002444 <MX_ADC1_Init+0x1b0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022d4:	4b5b      	ldr	r3, [pc, #364]	; (8002444 <MX_ADC1_Init+0x1b0>)
 80022d6:	4a5d      	ldr	r2, [pc, #372]	; (800244c <MX_ADC1_Init+0x1b8>)
 80022d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022da:	4b5a      	ldr	r3, [pc, #360]	; (8002444 <MX_ADC1_Init+0x1b0>)
 80022dc:	2200      	movs	r2, #0
 80022de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 80022e0:	4b58      	ldr	r3, [pc, #352]	; (8002444 <MX_ADC1_Init+0x1b0>)
 80022e2:	220b      	movs	r2, #11
 80022e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80022e6:	4b57      	ldr	r3, [pc, #348]	; (8002444 <MX_ADC1_Init+0x1b0>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022ee:	4b55      	ldr	r3, [pc, #340]	; (8002444 <MX_ADC1_Init+0x1b0>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022f4:	4853      	ldr	r0, [pc, #332]	; (8002444 <MX_ADC1_Init+0x1b0>)
 80022f6:	f007 f98f 	bl	8009618 <HAL_ADC_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002300:	f002 fe7e 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002304:	2303      	movs	r3, #3
 8002306:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002308:	2301      	movs	r3, #1
 800230a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800230c:	2307      	movs	r3, #7
 800230e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002310:	463b      	mov	r3, r7
 8002312:	4619      	mov	r1, r3
 8002314:	484b      	ldr	r0, [pc, #300]	; (8002444 <MX_ADC1_Init+0x1b0>)
 8002316:	f007 fc5b 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002320:	f002 fe6e 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002324:	2304      	movs	r3, #4
 8002326:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002328:	2302      	movs	r3, #2
 800232a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800232c:	463b      	mov	r3, r7
 800232e:	4619      	mov	r1, r3
 8002330:	4844      	ldr	r0, [pc, #272]	; (8002444 <MX_ADC1_Init+0x1b0>)
 8002332:	f007 fc4d 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800233c:	f002 fe60 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002340:	2305      	movs	r3, #5
 8002342:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002344:	2303      	movs	r3, #3
 8002346:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002348:	463b      	mov	r3, r7
 800234a:	4619      	mov	r1, r3
 800234c:	483d      	ldr	r0, [pc, #244]	; (8002444 <MX_ADC1_Init+0x1b0>)
 800234e:	f007 fc3f 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002358:	f002 fe52 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800235c:	2306      	movs	r3, #6
 800235e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002360:	2304      	movs	r3, #4
 8002362:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002364:	463b      	mov	r3, r7
 8002366:	4619      	mov	r1, r3
 8002368:	4836      	ldr	r0, [pc, #216]	; (8002444 <MX_ADC1_Init+0x1b0>)
 800236a:	f007 fc31 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002374:	f002 fe44 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002378:	2307      	movs	r3, #7
 800237a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800237c:	2305      	movs	r3, #5
 800237e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002380:	463b      	mov	r3, r7
 8002382:	4619      	mov	r1, r3
 8002384:	482f      	ldr	r0, [pc, #188]	; (8002444 <MX_ADC1_Init+0x1b0>)
 8002386:	f007 fc23 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002390:	f002 fe36 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002394:	2308      	movs	r3, #8
 8002396:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002398:	2306      	movs	r3, #6
 800239a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800239c:	463b      	mov	r3, r7
 800239e:	4619      	mov	r1, r3
 80023a0:	4828      	ldr	r0, [pc, #160]	; (8002444 <MX_ADC1_Init+0x1b0>)
 80023a2:	f007 fc15 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80023ac:	f002 fe28 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80023b0:	2309      	movs	r3, #9
 80023b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80023b4:	2307      	movs	r3, #7
 80023b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023b8:	463b      	mov	r3, r7
 80023ba:	4619      	mov	r1, r3
 80023bc:	4821      	ldr	r0, [pc, #132]	; (8002444 <MX_ADC1_Init+0x1b0>)
 80023be:	f007 fc07 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80023c8:	f002 fe1a 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80023cc:	230a      	movs	r3, #10
 80023ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80023d0:	2308      	movs	r3, #8
 80023d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023d4:	463b      	mov	r3, r7
 80023d6:	4619      	mov	r1, r3
 80023d8:	481a      	ldr	r0, [pc, #104]	; (8002444 <MX_ADC1_Init+0x1b0>)
 80023da:	f007 fbf9 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80023e4:	f002 fe0c 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80023e8:	230b      	movs	r3, #11
 80023ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80023ec:	2309      	movs	r3, #9
 80023ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023f0:	463b      	mov	r3, r7
 80023f2:	4619      	mov	r1, r3
 80023f4:	4813      	ldr	r0, [pc, #76]	; (8002444 <MX_ADC1_Init+0x1b0>)
 80023f6:	f007 fbeb 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002400:	f002 fdfe 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002404:	230c      	movs	r3, #12
 8002406:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8002408:	230a      	movs	r3, #10
 800240a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800240c:	463b      	mov	r3, r7
 800240e:	4619      	mov	r1, r3
 8002410:	480c      	ldr	r0, [pc, #48]	; (8002444 <MX_ADC1_Init+0x1b0>)
 8002412:	f007 fbdd 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 800241c:	f002 fdf0 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002420:	230d      	movs	r3, #13
 8002422:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8002424:	230b      	movs	r3, #11
 8002426:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002428:	463b      	mov	r3, r7
 800242a:	4619      	mov	r1, r3
 800242c:	4805      	ldr	r0, [pc, #20]	; (8002444 <MX_ADC1_Init+0x1b0>)
 800242e:	f007 fbcf 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8002438:	f002 fde2 	bl	8005000 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	2002be44 	.word	0x2002be44
 8002448:	40012000 	.word	0x40012000
 800244c:	0f000001 	.word	0x0f000001

08002450 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002456:	463b      	mov	r3, r7
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002462:	4b36      	ldr	r3, [pc, #216]	; (800253c <MX_ADC2_Init+0xec>)
 8002464:	4a36      	ldr	r2, [pc, #216]	; (8002540 <MX_ADC2_Init+0xf0>)
 8002466:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002468:	4b34      	ldr	r3, [pc, #208]	; (800253c <MX_ADC2_Init+0xec>)
 800246a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800246e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002470:	4b32      	ldr	r3, [pc, #200]	; (800253c <MX_ADC2_Init+0xec>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002476:	4b31      	ldr	r3, [pc, #196]	; (800253c <MX_ADC2_Init+0xec>)
 8002478:	2201      	movs	r2, #1
 800247a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800247c:	4b2f      	ldr	r3, [pc, #188]	; (800253c <MX_ADC2_Init+0xec>)
 800247e:	2201      	movs	r2, #1
 8002480:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002482:	4b2e      	ldr	r3, [pc, #184]	; (800253c <MX_ADC2_Init+0xec>)
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800248a:	4b2c      	ldr	r3, [pc, #176]	; (800253c <MX_ADC2_Init+0xec>)
 800248c:	2200      	movs	r2, #0
 800248e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002490:	4b2a      	ldr	r3, [pc, #168]	; (800253c <MX_ADC2_Init+0xec>)
 8002492:	4a2c      	ldr	r2, [pc, #176]	; (8002544 <MX_ADC2_Init+0xf4>)
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002496:	4b29      	ldr	r3, [pc, #164]	; (800253c <MX_ADC2_Init+0xec>)
 8002498:	2200      	movs	r2, #0
 800249a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <MX_ADC2_Init+0xec>)
 800249e:	2204      	movs	r2, #4
 80024a0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80024a2:	4b26      	ldr	r3, [pc, #152]	; (800253c <MX_ADC2_Init+0xec>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024aa:	4b24      	ldr	r3, [pc, #144]	; (800253c <MX_ADC2_Init+0xec>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80024b0:	4822      	ldr	r0, [pc, #136]	; (800253c <MX_ADC2_Init+0xec>)
 80024b2:	f007 f8b1 	bl	8009618 <HAL_ADC_Init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80024bc:	f002 fda0 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024c4:	2301      	movs	r3, #1
 80024c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80024c8:	2307      	movs	r3, #7
 80024ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024cc:	463b      	mov	r3, r7
 80024ce:	4619      	mov	r1, r3
 80024d0:	481a      	ldr	r0, [pc, #104]	; (800253c <MX_ADC2_Init+0xec>)
 80024d2:	f007 fb7d 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80024dc:	f002 fd90 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80024e0:	2301      	movs	r3, #1
 80024e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80024e4:	2302      	movs	r3, #2
 80024e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024e8:	463b      	mov	r3, r7
 80024ea:	4619      	mov	r1, r3
 80024ec:	4813      	ldr	r0, [pc, #76]	; (800253c <MX_ADC2_Init+0xec>)
 80024ee:	f007 fb6f 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80024f8:	f002 fd82 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80024fc:	230e      	movs	r3, #14
 80024fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002500:	2303      	movs	r3, #3
 8002502:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002504:	463b      	mov	r3, r7
 8002506:	4619      	mov	r1, r3
 8002508:	480c      	ldr	r0, [pc, #48]	; (800253c <MX_ADC2_Init+0xec>)
 800250a:	f007 fb61 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8002514:	f002 fd74 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002518:	230f      	movs	r3, #15
 800251a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800251c:	2304      	movs	r3, #4
 800251e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002520:	463b      	mov	r3, r7
 8002522:	4619      	mov	r1, r3
 8002524:	4805      	ldr	r0, [pc, #20]	; (800253c <MX_ADC2_Init+0xec>)
 8002526:	f007 fb53 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8002530:	f002 fd66 	bl	8005000 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20028d40 	.word	0x20028d40
 8002540:	40012100 	.word	0x40012100
 8002544:	0f000001 	.word	0x0f000001

08002548 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800254e:	463b      	mov	r3, r7
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800255a:	4b44      	ldr	r3, [pc, #272]	; (800266c <MX_ADC3_Init+0x124>)
 800255c:	4a44      	ldr	r2, [pc, #272]	; (8002670 <MX_ADC3_Init+0x128>)
 800255e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002560:	4b42      	ldr	r3, [pc, #264]	; (800266c <MX_ADC3_Init+0x124>)
 8002562:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002566:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002568:	4b40      	ldr	r3, [pc, #256]	; (800266c <MX_ADC3_Init+0x124>)
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800256e:	4b3f      	ldr	r3, [pc, #252]	; (800266c <MX_ADC3_Init+0x124>)
 8002570:	2201      	movs	r2, #1
 8002572:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002574:	4b3d      	ldr	r3, [pc, #244]	; (800266c <MX_ADC3_Init+0x124>)
 8002576:	2201      	movs	r2, #1
 8002578:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800257a:	4b3c      	ldr	r3, [pc, #240]	; (800266c <MX_ADC3_Init+0x124>)
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002582:	4b3a      	ldr	r3, [pc, #232]	; (800266c <MX_ADC3_Init+0x124>)
 8002584:	2200      	movs	r2, #0
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002588:	4b38      	ldr	r3, [pc, #224]	; (800266c <MX_ADC3_Init+0x124>)
 800258a:	4a3a      	ldr	r2, [pc, #232]	; (8002674 <MX_ADC3_Init+0x12c>)
 800258c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800258e:	4b37      	ldr	r3, [pc, #220]	; (800266c <MX_ADC3_Init+0x124>)
 8002590:	2200      	movs	r2, #0
 8002592:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8002594:	4b35      	ldr	r3, [pc, #212]	; (800266c <MX_ADC3_Init+0x124>)
 8002596:	2206      	movs	r2, #6
 8002598:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800259a:	4b34      	ldr	r3, [pc, #208]	; (800266c <MX_ADC3_Init+0x124>)
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025a2:	4b32      	ldr	r3, [pc, #200]	; (800266c <MX_ADC3_Init+0x124>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80025a8:	4830      	ldr	r0, [pc, #192]	; (800266c <MX_ADC3_Init+0x124>)
 80025aa:	f007 f835 	bl	8009618 <HAL_ADC_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80025b4:	f002 fd24 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80025b8:	2302      	movs	r3, #2
 80025ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025bc:	2301      	movs	r3, #1
 80025be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80025c0:	2307      	movs	r3, #7
 80025c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80025c4:	463b      	mov	r3, r7
 80025c6:	4619      	mov	r1, r3
 80025c8:	4828      	ldr	r0, [pc, #160]	; (800266c <MX_ADC3_Init+0x124>)
 80025ca:	f007 fb01 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80025d4:	f002 fd14 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80025d8:	2304      	movs	r3, #4
 80025da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80025dc:	2302      	movs	r3, #2
 80025de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80025e0:	463b      	mov	r3, r7
 80025e2:	4619      	mov	r1, r3
 80025e4:	4821      	ldr	r0, [pc, #132]	; (800266c <MX_ADC3_Init+0x124>)
 80025e6:	f007 faf3 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 80025f0:	f002 fd06 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80025f4:	2305      	movs	r3, #5
 80025f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80025f8:	2303      	movs	r3, #3
 80025fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80025fc:	463b      	mov	r3, r7
 80025fe:	4619      	mov	r1, r3
 8002600:	481a      	ldr	r0, [pc, #104]	; (800266c <MX_ADC3_Init+0x124>)
 8002602:	f007 fae5 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 800260c:	f002 fcf8 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002610:	2306      	movs	r3, #6
 8002612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002614:	2304      	movs	r3, #4
 8002616:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002618:	463b      	mov	r3, r7
 800261a:	4619      	mov	r1, r3
 800261c:	4813      	ldr	r0, [pc, #76]	; (800266c <MX_ADC3_Init+0x124>)
 800261e:	f007 fad7 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8002628:	f002 fcea 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800262c:	2307      	movs	r3, #7
 800262e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002630:	2305      	movs	r3, #5
 8002632:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002634:	463b      	mov	r3, r7
 8002636:	4619      	mov	r1, r3
 8002638:	480c      	ldr	r0, [pc, #48]	; (800266c <MX_ADC3_Init+0x124>)
 800263a:	f007 fac9 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8002644:	f002 fcdc 	bl	8005000 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002648:	2308      	movs	r3, #8
 800264a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800264c:	2306      	movs	r3, #6
 800264e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002650:	463b      	mov	r3, r7
 8002652:	4619      	mov	r1, r3
 8002654:	4805      	ldr	r0, [pc, #20]	; (800266c <MX_ADC3_Init+0x124>)
 8002656:	f007 fabb 	bl	8009bd0 <HAL_ADC_ConfigChannel>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8002660:	f002 fcce 	bl	8005000 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  /* USER CODE END ADC3_Init 2 */

}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	2002bef0 	.word	0x2002bef0
 8002670:	40012200 	.word	0x40012200
 8002674:	0f000001 	.word	0x0f000001

08002678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <MX_I2C1_Init+0x74>)
 800267e:	4a1c      	ldr	r2, [pc, #112]	; (80026f0 <MX_I2C1_Init+0x78>)
 8002680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007074AF;
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <MX_I2C1_Init+0x74>)
 8002684:	4a1b      	ldr	r2, [pc, #108]	; (80026f4 <MX_I2C1_Init+0x7c>)
 8002686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002688:	4b18      	ldr	r3, [pc, #96]	; (80026ec <MX_I2C1_Init+0x74>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800268e:	4b17      	ldr	r3, [pc, #92]	; (80026ec <MX_I2C1_Init+0x74>)
 8002690:	2201      	movs	r2, #1
 8002692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002694:	4b15      	ldr	r3, [pc, #84]	; (80026ec <MX_I2C1_Init+0x74>)
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <MX_I2C1_Init+0x74>)
 800269c:	2200      	movs	r2, #0
 800269e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <MX_I2C1_Init+0x74>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <MX_I2C1_Init+0x74>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026ac:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <MX_I2C1_Init+0x74>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026b2:	480e      	ldr	r0, [pc, #56]	; (80026ec <MX_I2C1_Init+0x74>)
 80026b4:	f008 fc60 	bl	800af78 <HAL_I2C_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026be:	f002 fc9f 	bl	8005000 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026c2:	2100      	movs	r1, #0
 80026c4:	4809      	ldr	r0, [pc, #36]	; (80026ec <MX_I2C1_Init+0x74>)
 80026c6:	f009 fc8f 	bl	800bfe8 <HAL_I2CEx_ConfigAnalogFilter>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026d0:	f002 fc96 	bl	8005000 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026d4:	2100      	movs	r1, #0
 80026d6:	4805      	ldr	r0, [pc, #20]	; (80026ec <MX_I2C1_Init+0x74>)
 80026d8:	f009 fcd1 	bl	800c07e <HAL_I2CEx_ConfigDigitalFilter>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026e2:	f002 fc8d 	bl	8005000 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20028d88 	.word	0x20028d88
 80026f0:	40005400 	.word	0x40005400
 80026f4:	007074af 	.word	0x007074af

080026f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026fc:	4b1b      	ldr	r3, [pc, #108]	; (800276c <MX_I2C2_Init+0x74>)
 80026fe:	4a1c      	ldr	r2, [pc, #112]	; (8002770 <MX_I2C2_Init+0x78>)
 8002700:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x007074AF;
 8002702:	4b1a      	ldr	r3, [pc, #104]	; (800276c <MX_I2C2_Init+0x74>)
 8002704:	4a1b      	ldr	r2, [pc, #108]	; (8002774 <MX_I2C2_Init+0x7c>)
 8002706:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002708:	4b18      	ldr	r3, [pc, #96]	; (800276c <MX_I2C2_Init+0x74>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800270e:	4b17      	ldr	r3, [pc, #92]	; (800276c <MX_I2C2_Init+0x74>)
 8002710:	2201      	movs	r2, #1
 8002712:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002714:	4b15      	ldr	r3, [pc, #84]	; (800276c <MX_I2C2_Init+0x74>)
 8002716:	2200      	movs	r2, #0
 8002718:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800271a:	4b14      	ldr	r3, [pc, #80]	; (800276c <MX_I2C2_Init+0x74>)
 800271c:	2200      	movs	r2, #0
 800271e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002720:	4b12      	ldr	r3, [pc, #72]	; (800276c <MX_I2C2_Init+0x74>)
 8002722:	2200      	movs	r2, #0
 8002724:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <MX_I2C2_Init+0x74>)
 8002728:	2200      	movs	r2, #0
 800272a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800272c:	4b0f      	ldr	r3, [pc, #60]	; (800276c <MX_I2C2_Init+0x74>)
 800272e:	2200      	movs	r2, #0
 8002730:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002732:	480e      	ldr	r0, [pc, #56]	; (800276c <MX_I2C2_Init+0x74>)
 8002734:	f008 fc20 	bl	800af78 <HAL_I2C_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800273e:	f002 fc5f 	bl	8005000 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002742:	2100      	movs	r1, #0
 8002744:	4809      	ldr	r0, [pc, #36]	; (800276c <MX_I2C2_Init+0x74>)
 8002746:	f009 fc4f 	bl	800bfe8 <HAL_I2CEx_ConfigAnalogFilter>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002750:	f002 fc56 	bl	8005000 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002754:	2100      	movs	r1, #0
 8002756:	4805      	ldr	r0, [pc, #20]	; (800276c <MX_I2C2_Init+0x74>)
 8002758:	f009 fc91 	bl	800c07e <HAL_I2CEx_ConfigDigitalFilter>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002762:	f002 fc4d 	bl	8005000 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200291d8 	.word	0x200291d8
 8002770:	40005800 	.word	0x40005800
 8002774:	007074af 	.word	0x007074af

08002778 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800277c:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <MX_I2C3_Init+0x78>)
 800277e:	4a1d      	ldr	r2, [pc, #116]	; (80027f4 <MX_I2C3_Init+0x7c>)
 8002780:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x100029FE;
 8002782:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <MX_I2C3_Init+0x78>)
 8002784:	4a1c      	ldr	r2, [pc, #112]	; (80027f8 <MX_I2C3_Init+0x80>)
 8002786:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 152;
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <MX_I2C3_Init+0x78>)
 800278a:	2298      	movs	r2, #152	; 0x98
 800278c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800278e:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <MX_I2C3_Init+0x78>)
 8002790:	2201      	movs	r2, #1
 8002792:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002794:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <MX_I2C3_Init+0x78>)
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <MX_I2C3_Init+0x78>)
 800279c:	2200      	movs	r2, #0
 800279e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <MX_I2C3_Init+0x78>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <MX_I2C3_Init+0x78>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ac:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <MX_I2C3_Init+0x78>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80027b2:	480f      	ldr	r0, [pc, #60]	; (80027f0 <MX_I2C3_Init+0x78>)
 80027b4:	f008 fbe0 	bl	800af78 <HAL_I2C_Init>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80027be:	f002 fc1f 	bl	8005000 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027c2:	2100      	movs	r1, #0
 80027c4:	480a      	ldr	r0, [pc, #40]	; (80027f0 <MX_I2C3_Init+0x78>)
 80027c6:	f009 fc0f 	bl	800bfe8 <HAL_I2CEx_ConfigAnalogFilter>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80027d0:	f002 fc16 	bl	8005000 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80027d4:	2100      	movs	r1, #0
 80027d6:	4806      	ldr	r0, [pc, #24]	; (80027f0 <MX_I2C3_Init+0x78>)
 80027d8:	f009 fc51 	bl	800c07e <HAL_I2CEx_ConfigDigitalFilter>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80027e2:	f002 fc0d 	bl	8005000 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80027e6:	2004      	movs	r0, #4
 80027e8:	f009 fc96 	bl	800c118 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20028b74 	.word	0x20028b74
 80027f4:	40005c00 	.word	0x40005c00
 80027f8:	100029fe 	.word	0x100029fe

080027fc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <MX_I2C4_Init+0x74>)
 8002802:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <MX_I2C4_Init+0x78>)
 8002804:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x007074AF;
 8002806:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <MX_I2C4_Init+0x74>)
 8002808:	4a1b      	ldr	r2, [pc, #108]	; (8002878 <MX_I2C4_Init+0x7c>)
 800280a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800280c:	4b18      	ldr	r3, [pc, #96]	; (8002870 <MX_I2C4_Init+0x74>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002812:	4b17      	ldr	r3, [pc, #92]	; (8002870 <MX_I2C4_Init+0x74>)
 8002814:	2201      	movs	r2, #1
 8002816:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002818:	4b15      	ldr	r3, [pc, #84]	; (8002870 <MX_I2C4_Init+0x74>)
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800281e:	4b14      	ldr	r3, [pc, #80]	; (8002870 <MX_I2C4_Init+0x74>)
 8002820:	2200      	movs	r2, #0
 8002822:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002824:	4b12      	ldr	r3, [pc, #72]	; (8002870 <MX_I2C4_Init+0x74>)
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800282a:	4b11      	ldr	r3, [pc, #68]	; (8002870 <MX_I2C4_Init+0x74>)
 800282c:	2200      	movs	r2, #0
 800282e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002830:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <MX_I2C4_Init+0x74>)
 8002832:	2200      	movs	r2, #0
 8002834:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002836:	480e      	ldr	r0, [pc, #56]	; (8002870 <MX_I2C4_Init+0x74>)
 8002838:	f008 fb9e 	bl	800af78 <HAL_I2C_Init>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002842:	f002 fbdd 	bl	8005000 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002846:	2100      	movs	r1, #0
 8002848:	4809      	ldr	r0, [pc, #36]	; (8002870 <MX_I2C4_Init+0x74>)
 800284a:	f009 fbcd 	bl	800bfe8 <HAL_I2CEx_ConfigAnalogFilter>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002854:	f002 fbd4 	bl	8005000 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002858:	2100      	movs	r1, #0
 800285a:	4805      	ldr	r0, [pc, #20]	; (8002870 <MX_I2C4_Init+0x74>)
 800285c:	f009 fc0f 	bl	800c07e <HAL_I2CEx_ConfigDigitalFilter>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002866:	f002 fbcb 	bl	8005000 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20028bc0 	.word	0x20028bc0
 8002874:	40006000 	.word	0x40006000
 8002878:	007074af 	.word	0x007074af

0800287c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <MX_RTC_Init+0x44>)
 8002882:	4a10      	ldr	r2, [pc, #64]	; (80028c4 <MX_RTC_Init+0x48>)
 8002884:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <MX_RTC_Init+0x44>)
 8002888:	2200      	movs	r2, #0
 800288a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <MX_RTC_Init+0x44>)
 800288e:	227f      	movs	r2, #127	; 0x7f
 8002890:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <MX_RTC_Init+0x44>)
 8002894:	22ff      	movs	r2, #255	; 0xff
 8002896:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <MX_RTC_Init+0x44>)
 800289a:	2200      	movs	r2, #0
 800289c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <MX_RTC_Init+0x44>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <MX_RTC_Init+0x44>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028aa:	4805      	ldr	r0, [pc, #20]	; (80028c0 <MX_RTC_Init+0x44>)
 80028ac:	f00a fe84 	bl	800d5b8 <HAL_RTC_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80028b6:	f002 fba3 	bl	8005000 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	2002bfa8 	.word	0x2002bfa8
 80028c4:	40002800 	.word	0x40002800

080028c8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <MX_SPI4_Init+0x74>)
 80028ce:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <MX_SPI4_Init+0x78>)
 80028d0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80028d2:	4b1a      	ldr	r3, [pc, #104]	; (800293c <MX_SPI4_Init+0x74>)
 80028d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028d8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80028da:	4b18      	ldr	r3, [pc, #96]	; (800293c <MX_SPI4_Init+0x74>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80028e0:	4b16      	ldr	r3, [pc, #88]	; (800293c <MX_SPI4_Init+0x74>)
 80028e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028e6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028e8:	4b14      	ldr	r3, [pc, #80]	; (800293c <MX_SPI4_Init+0x74>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028ee:	4b13      	ldr	r3, [pc, #76]	; (800293c <MX_SPI4_Init+0x74>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80028f4:	4b11      	ldr	r3, [pc, #68]	; (800293c <MX_SPI4_Init+0x74>)
 80028f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028fa:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <MX_SPI4_Init+0x74>)
 80028fe:	2210      	movs	r2, #16
 8002900:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <MX_SPI4_Init+0x74>)
 8002904:	2200      	movs	r2, #0
 8002906:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <MX_SPI4_Init+0x74>)
 800290a:	2200      	movs	r2, #0
 800290c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <MX_SPI4_Init+0x74>)
 8002910:	2200      	movs	r2, #0
 8002912:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002914:	4b09      	ldr	r3, [pc, #36]	; (800293c <MX_SPI4_Init+0x74>)
 8002916:	2207      	movs	r2, #7
 8002918:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <MX_SPI4_Init+0x74>)
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <MX_SPI4_Init+0x74>)
 8002922:	2200      	movs	r2, #0
 8002924:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002926:	4805      	ldr	r0, [pc, #20]	; (800293c <MX_SPI4_Init+0x74>)
 8002928:	f00a feee 	bl	800d708 <HAL_SPI_Init>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002932:	f002 fb65 	bl	8005000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20028ab0 	.word	0x20028ab0
 8002940:	40013400 	.word	0x40013400

08002944 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <MX_SPI5_Init+0x74>)
 800294a:	4a1c      	ldr	r2, [pc, #112]	; (80029bc <MX_SPI5_Init+0x78>)
 800294c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <MX_SPI5_Init+0x74>)
 8002950:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002954:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002956:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <MX_SPI5_Init+0x74>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800295c:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <MX_SPI5_Init+0x74>)
 800295e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002962:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <MX_SPI5_Init+0x74>)
 8002966:	2200      	movs	r2, #0
 8002968:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800296a:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <MX_SPI5_Init+0x74>)
 800296c:	2200      	movs	r2, #0
 800296e:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <MX_SPI5_Init+0x74>)
 8002972:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002976:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <MX_SPI5_Init+0x74>)
 800297a:	2218      	movs	r2, #24
 800297c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <MX_SPI5_Init+0x74>)
 8002980:	2200      	movs	r2, #0
 8002982:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <MX_SPI5_Init+0x74>)
 8002986:	2200      	movs	r2, #0
 8002988:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <MX_SPI5_Init+0x74>)
 800298c:	2200      	movs	r2, #0
 800298e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <MX_SPI5_Init+0x74>)
 8002992:	2207      	movs	r2, #7
 8002994:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <MX_SPI5_Init+0x74>)
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <MX_SPI5_Init+0x74>)
 800299e:	2200      	movs	r2, #0
 80029a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_SPI5_Init+0x74>)
 80029a4:	f00a feb0 	bl	800d708 <HAL_SPI_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80029ae:	f002 fb27 	bl	8005000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20028c8c 	.word	0x20028c8c
 80029bc:	40015000 	.word	0x40015000

080029c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08e      	sub	sp, #56	; 0x38
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	605a      	str	r2, [r3, #4]
 80029d0:	609a      	str	r2, [r3, #8]
 80029d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029d4:	f107 031c 	add.w	r3, r7, #28
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029e0:	463b      	mov	r3, r7
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	60da      	str	r2, [r3, #12]
 80029ec:	611a      	str	r2, [r3, #16]
 80029ee:	615a      	str	r2, [r3, #20]
 80029f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029f2:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <MX_TIM4_Init+0xe8>)
 80029f4:	4a2d      	ldr	r2, [pc, #180]	; (8002aac <MX_TIM4_Init+0xec>)
 80029f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80029f8:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <MX_TIM4_Init+0xe8>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029fe:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <MX_TIM4_Init+0xe8>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002a04:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <MX_TIM4_Init+0xe8>)
 8002a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a0a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a0c:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <MX_TIM4_Init+0xe8>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a12:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <MX_TIM4_Init+0xe8>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a18:	4823      	ldr	r0, [pc, #140]	; (8002aa8 <MX_TIM4_Init+0xe8>)
 8002a1a:	f00b fcbd 	bl	800e398 <HAL_TIM_Base_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002a24:	f002 faec 	bl	8005000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a32:	4619      	mov	r1, r3
 8002a34:	481c      	ldr	r0, [pc, #112]	; (8002aa8 <MX_TIM4_Init+0xe8>)
 8002a36:	f00b ff71 	bl	800e91c <HAL_TIM_ConfigClockSource>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002a40:	f002 fade 	bl	8005000 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a44:	4818      	ldr	r0, [pc, #96]	; (8002aa8 <MX_TIM4_Init+0xe8>)
 8002a46:	f00b fcfd 	bl	800e444 <HAL_TIM_PWM_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002a50:	f002 fad6 	bl	8005000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a5c:	f107 031c 	add.w	r3, r7, #28
 8002a60:	4619      	mov	r1, r3
 8002a62:	4811      	ldr	r0, [pc, #68]	; (8002aa8 <MX_TIM4_Init+0xe8>)
 8002a64:	f00c fbd4 	bl	800f210 <HAL_TIMEx_MasterConfigSynchronization>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002a6e:	f002 fac7 	bl	8005000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a72:	2360      	movs	r3, #96	; 0x60
 8002a74:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a82:	463b      	mov	r3, r7
 8002a84:	2200      	movs	r2, #0
 8002a86:	4619      	mov	r1, r3
 8002a88:	4807      	ldr	r0, [pc, #28]	; (8002aa8 <MX_TIM4_Init+0xe8>)
 8002a8a:	f00b fe2f 	bl	800e6ec <HAL_TIM_PWM_ConfigChannel>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002a94:	f002 fab4 	bl	8005000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002a98:	4803      	ldr	r0, [pc, #12]	; (8002aa8 <MX_TIM4_Init+0xe8>)
 8002a9a:	f005 fdcb 	bl	8008634 <HAL_TIM_MspPostInit>

}
 8002a9e:	bf00      	nop
 8002aa0:	3738      	adds	r7, #56	; 0x38
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20028cf0 	.word	0x20028cf0
 8002aac:	40000800 	.word	0x40000800

08002ab0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08e      	sub	sp, #56	; 0x38
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac4:	f107 031c 	add.w	r3, r7, #28
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ad0:	463b      	mov	r3, r7
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	605a      	str	r2, [r3, #4]
 8002ad8:	609a      	str	r2, [r3, #8]
 8002ada:	60da      	str	r2, [r3, #12]
 8002adc:	611a      	str	r2, [r3, #16]
 8002ade:	615a      	str	r2, [r3, #20]
 8002ae0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ae2:	4b32      	ldr	r3, [pc, #200]	; (8002bac <MX_TIM5_Init+0xfc>)
 8002ae4:	4a32      	ldr	r2, [pc, #200]	; (8002bb0 <MX_TIM5_Init+0x100>)
 8002ae6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002ae8:	4b30      	ldr	r3, [pc, #192]	; (8002bac <MX_TIM5_Init+0xfc>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aee:	4b2f      	ldr	r3, [pc, #188]	; (8002bac <MX_TIM5_Init+0xfc>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002af4:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <MX_TIM5_Init+0xfc>)
 8002af6:	f04f 32ff 	mov.w	r2, #4294967295
 8002afa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002afc:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <MX_TIM5_Init+0xfc>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b02:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <MX_TIM5_Init+0xfc>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002b08:	4828      	ldr	r0, [pc, #160]	; (8002bac <MX_TIM5_Init+0xfc>)
 8002b0a:	f00b fc45 	bl	800e398 <HAL_TIM_Base_Init>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002b14:	f002 fa74 	bl	8005000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b22:	4619      	mov	r1, r3
 8002b24:	4821      	ldr	r0, [pc, #132]	; (8002bac <MX_TIM5_Init+0xfc>)
 8002b26:	f00b fef9 	bl	800e91c <HAL_TIM_ConfigClockSource>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002b30:	f002 fa66 	bl	8005000 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b34:	481d      	ldr	r0, [pc, #116]	; (8002bac <MX_TIM5_Init+0xfc>)
 8002b36:	f00b fc85 	bl	800e444 <HAL_TIM_PWM_Init>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002b40:	f002 fa5e 	bl	8005000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b4c:	f107 031c 	add.w	r3, r7, #28
 8002b50:	4619      	mov	r1, r3
 8002b52:	4816      	ldr	r0, [pc, #88]	; (8002bac <MX_TIM5_Init+0xfc>)
 8002b54:	f00c fb5c 	bl	800f210 <HAL_TIMEx_MasterConfigSynchronization>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002b5e:	f002 fa4f 	bl	8005000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b62:	2360      	movs	r3, #96	; 0x60
 8002b64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b72:	463b      	mov	r3, r7
 8002b74:	2200      	movs	r2, #0
 8002b76:	4619      	mov	r1, r3
 8002b78:	480c      	ldr	r0, [pc, #48]	; (8002bac <MX_TIM5_Init+0xfc>)
 8002b7a:	f00b fdb7 	bl	800e6ec <HAL_TIM_PWM_ConfigChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002b84:	f002 fa3c 	bl	8005000 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b88:	463b      	mov	r3, r7
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4807      	ldr	r0, [pc, #28]	; (8002bac <MX_TIM5_Init+0xfc>)
 8002b90:	f00b fdac 	bl	800e6ec <HAL_TIM_PWM_ConfigChannel>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8002b9a:	f002 fa31 	bl	8005000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002b9e:	4803      	ldr	r0, [pc, #12]	; (8002bac <MX_TIM5_Init+0xfc>)
 8002ba0:	f005 fd48 	bl	8008634 <HAL_TIM_MspPostInit>

}
 8002ba4:	bf00      	nop
 8002ba6:	3738      	adds	r7, #56	; 0x38
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20029288 	.word	0x20029288
 8002bb0:	40000c00 	.word	0x40000c00

08002bb4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <MX_UART4_Init+0x58>)
 8002bba:	4a15      	ldr	r2, [pc, #84]	; (8002c10 <MX_UART4_Init+0x5c>)
 8002bbc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <MX_UART4_Init+0x58>)
 8002bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bc4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <MX_UART4_Init+0x58>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <MX_UART4_Init+0x58>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <MX_UART4_Init+0x58>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <MX_UART4_Init+0x58>)
 8002bda:	220c      	movs	r2, #12
 8002bdc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <MX_UART4_Init+0x58>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <MX_UART4_Init+0x58>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <MX_UART4_Init+0x58>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <MX_UART4_Init+0x58>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002bf6:	4805      	ldr	r0, [pc, #20]	; (8002c0c <MX_UART4_Init+0x58>)
 8002bf8:	f00c fbb6 	bl	800f368 <HAL_UART_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002c02:	f002 f9fd 	bl	8005000 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	2002e6ec 	.word	0x2002e6ec
 8002c10:	40004c00 	.word	0x40004c00

08002c14 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002c18:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <MX_UART5_Init+0x58>)
 8002c1a:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <MX_UART5_Init+0x5c>)
 8002c1c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002c1e:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <MX_UART5_Init+0x58>)
 8002c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c24:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002c26:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <MX_UART5_Init+0x58>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <MX_UART5_Init+0x58>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002c32:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <MX_UART5_Init+0x58>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <MX_UART5_Init+0x58>)
 8002c3a:	220c      	movs	r2, #12
 8002c3c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <MX_UART5_Init+0x58>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <MX_UART5_Init+0x58>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c4a:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <MX_UART5_Init+0x58>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <MX_UART5_Init+0x58>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002c56:	4805      	ldr	r0, [pc, #20]	; (8002c6c <MX_UART5_Init+0x58>)
 8002c58:	f00c fb86 	bl	800f368 <HAL_UART_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002c62:	f002 f9cd 	bl	8005000 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	2002bdc4 	.word	0x2002bdc4
 8002c70:	40005000 	.word	0x40005000

08002c74 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002c78:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <MX_UART7_Init+0x58>)
 8002c7a:	4a15      	ldr	r2, [pc, #84]	; (8002cd0 <MX_UART7_Init+0x5c>)
 8002c7c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002c7e:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <MX_UART7_Init+0x58>)
 8002c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c84:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <MX_UART7_Init+0x58>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <MX_UART7_Init+0x58>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002c92:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <MX_UART7_Init+0x58>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <MX_UART7_Init+0x58>)
 8002c9a:	220c      	movs	r2, #12
 8002c9c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <MX_UART7_Init+0x58>)
 8002ca0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002ca4:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <MX_UART7_Init+0x58>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cac:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <MX_UART7_Init+0x58>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <MX_UART7_Init+0x58>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002cb8:	4804      	ldr	r0, [pc, #16]	; (8002ccc <MX_UART7_Init+0x58>)
 8002cba:	f00c fb55 	bl	800f368 <HAL_UART_Init>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_UART7_Init+0x54>
  {
    Error_Handler();
 8002cc4:	f002 f99c 	bl	8005000 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20028c0c 	.word	0x20028c0c
 8002cd0:	40007800 	.word	0x40007800

08002cd4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002cd8:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002cde:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ce2:	2206      	movs	r2, #6
 8002ce4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ce8:	2202      	movs	r2, #2
 8002cea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002d0a:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002d16:	4805      	ldr	r0, [pc, #20]	; (8002d2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d18:	f009 fa1e 	bl	800c158 <HAL_PCD_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002d22:	f002 f96d 	bl	8005000 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20028dd4 	.word	0x20028dd4

08002d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d36:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <MX_DMA_Init+0xa0>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4a25      	ldr	r2, [pc, #148]	; (8002dd0 <MX_DMA_Init+0xa0>)
 8002d3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d40:	6313      	str	r3, [r2, #48]	; 0x30
 8002d42:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <MX_DMA_Init+0xa0>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <MX_DMA_Init+0xa0>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a1f      	ldr	r2, [pc, #124]	; (8002dd0 <MX_DMA_Init+0xa0>)
 8002d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <MX_DMA_Init+0xa0>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2105      	movs	r1, #5
 8002d6a:	200b      	movs	r0, #11
 8002d6c:	f007 fab8 	bl	800a2e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002d70:	200b      	movs	r0, #11
 8002d72:	f007 fad1 	bl	800a318 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002d76:	2200      	movs	r2, #0
 8002d78:	2105      	movs	r1, #5
 8002d7a:	200d      	movs	r0, #13
 8002d7c:	f007 fab0 	bl	800a2e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002d80:	200d      	movs	r0, #13
 8002d82:	f007 fac9 	bl	800a318 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2105      	movs	r1, #5
 8002d8a:	200e      	movs	r0, #14
 8002d8c:	f007 faa8 	bl	800a2e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002d90:	200e      	movs	r0, #14
 8002d92:	f007 fac1 	bl	800a318 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002d96:	2200      	movs	r2, #0
 8002d98:	2105      	movs	r1, #5
 8002d9a:	2038      	movs	r0, #56	; 0x38
 8002d9c:	f007 faa0 	bl	800a2e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002da0:	2038      	movs	r0, #56	; 0x38
 8002da2:	f007 fab9 	bl	800a318 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002da6:	2200      	movs	r2, #0
 8002da8:	2105      	movs	r1, #5
 8002daa:	2039      	movs	r0, #57	; 0x39
 8002dac:	f007 fa98 	bl	800a2e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002db0:	2039      	movs	r0, #57	; 0x39
 8002db2:	f007 fab1 	bl	800a318 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2105      	movs	r1, #5
 8002dba:	203a      	movs	r0, #58	; 0x3a
 8002dbc:	f007 fa90 	bl	800a2e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002dc0:	203a      	movs	r0, #58	; 0x3a
 8002dc2:	f007 faa9 	bl	800a318 <HAL_NVIC_EnableIRQ>

}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800

08002dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b090      	sub	sp, #64	; 0x40
 8002dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	60da      	str	r2, [r3, #12]
 8002de8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dea:	4bb0      	ldr	r3, [pc, #704]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4aaf      	ldr	r2, [pc, #700]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002df0:	f043 0310 	orr.w	r3, r3, #16
 8002df4:	6313      	str	r3, [r2, #48]	; 0x30
 8002df6:	4bad      	ldr	r3, [pc, #692]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e02:	4baa      	ldr	r3, [pc, #680]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	4aa9      	ldr	r2, [pc, #676]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0e:	4ba7      	ldr	r3, [pc, #668]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1a:	4ba4      	ldr	r3, [pc, #656]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	4aa3      	ldr	r2, [pc, #652]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	6313      	str	r3, [r2, #48]	; 0x30
 8002e26:	4ba1      	ldr	r3, [pc, #644]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	623b      	str	r3, [r7, #32]
 8002e30:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e32:	4b9e      	ldr	r3, [pc, #632]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4a9d      	ldr	r2, [pc, #628]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3e:	4b9b      	ldr	r3, [pc, #620]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	61fb      	str	r3, [r7, #28]
 8002e48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4a:	4b98      	ldr	r3, [pc, #608]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4a97      	ldr	r2, [pc, #604]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6313      	str	r3, [r2, #48]	; 0x30
 8002e56:	4b95      	ldr	r3, [pc, #596]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e62:	4b92      	ldr	r3, [pc, #584]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a91      	ldr	r2, [pc, #580]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b8f      	ldr	r3, [pc, #572]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002e7a:	4b8c      	ldr	r3, [pc, #560]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a8b      	ldr	r2, [pc, #556]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b89      	ldr	r3, [pc, #548]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e92:	4b86      	ldr	r3, [pc, #536]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	4a85      	ldr	r2, [pc, #532]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002e98:	f043 0320 	orr.w	r3, r3, #32
 8002e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9e:	4b83      	ldr	r3, [pc, #524]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eaa:	4b80      	ldr	r3, [pc, #512]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a7f      	ldr	r2, [pc, #508]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002eb0:	f043 0308 	orr.w	r3, r3, #8
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b7d      	ldr	r3, [pc, #500]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ec2:	4b7a      	ldr	r3, [pc, #488]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a79      	ldr	r2, [pc, #484]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b77      	ldr	r3, [pc, #476]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed6:	607b      	str	r3, [r7, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002eda:	4b74      	ldr	r3, [pc, #464]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a73      	ldr	r2, [pc, #460]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002ee0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b71      	ldr	r3, [pc, #452]	; (80030ac <MX_GPIO_Init+0x2d8>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2110      	movs	r1, #16
 8002ef6:	486e      	ldr	r0, [pc, #440]	; (80030b0 <MX_GPIO_Init+0x2dc>)
 8002ef8:	f007 ffe6 	bl	800aec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002efc:	2200      	movs	r2, #0
 8002efe:	f244 012f 	movw	r1, #16431	; 0x402f
 8002f02:	486c      	ldr	r0, [pc, #432]	; (80030b4 <MX_GPIO_Init+0x2e0>)
 8002f04:	f007 ffe0 	bl	800aec8 <HAL_GPIO_WritePin>
                          |OUT0_1V8_Pin|OUT2_1V8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f241 1150 	movw	r1, #4432	; 0x1150
 8002f0e:	486a      	ldr	r0, [pc, #424]	; (80030b8 <MX_GPIO_Init+0x2e4>)
 8002f10:	f007 ffda 	bl	800aec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MCU_CTRL2_Pin|MCU_CTRL1_Pin, GPIO_PIN_RESET);
 8002f14:	2200      	movs	r2, #0
 8002f16:	2103      	movs	r1, #3
 8002f18:	4868      	ldr	r0, [pc, #416]	; (80030bc <MX_GPIO_Init+0x2e8>)
 8002f1a:	f007 ffd5 	bl	800aec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f243 013c 	movw	r1, #12348	; 0x303c
 8002f24:	4866      	ldr	r0, [pc, #408]	; (80030c0 <MX_GPIO_Init+0x2ec>)
 8002f26:	f007 ffcf 	bl	800aec8 <HAL_GPIO_WritePin>
                          |BTN4_Pin|BTN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin, GPIO_PIN_RESET);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f241 0104 	movw	r1, #4100	; 0x1004
 8002f30:	4864      	ldr	r0, [pc, #400]	; (80030c4 <MX_GPIO_Init+0x2f0>)
 8002f32:	f007 ffc9 	bl	800aec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin, GPIO_PIN_RESET);
 8002f36:	2200      	movs	r2, #0
 8002f38:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002f3c:	4862      	ldr	r0, [pc, #392]	; (80030c8 <MX_GPIO_Init+0x2f4>)
 8002f3e:	f007 ffc3 	bl	800aec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8002f42:	2200      	movs	r2, #0
 8002f44:	211b      	movs	r1, #27
 8002f46:	4861      	ldr	r0, [pc, #388]	; (80030cc <MX_GPIO_Init+0x2f8>)
 8002f48:	f007 ffbe 	bl	800aec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_SS_Pin;
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f50:	2301      	movs	r3, #1
 8002f52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_SS_GPIO_Port, &GPIO_InitStruct);
 8002f5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f60:	4619      	mov	r1, r3
 8002f62:	4853      	ldr	r0, [pc, #332]	; (80030b0 <MX_GPIO_Init+0x2dc>)
 8002f64:	f007 fdee 	bl	800ab44 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT11_Pin */
  GPIO_InitStruct.Pin = UI_INPUT11_Pin;
 8002f68:	2308      	movs	r3, #8
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT11_GPIO_Port, &GPIO_InitStruct);
 8002f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f78:	4619      	mov	r1, r3
 8002f7a:	484d      	ldr	r0, [pc, #308]	; (80030b0 <MX_GPIO_Init+0x2dc>)
 8002f7c:	f007 fde2 	bl	800ab44 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_1V8_Pin OUT1_1V8_Pin OUT1_OD_Pin OUT0_OD_Pin
                           OUT0_1V8_Pin OUT2_1V8_Pin */
  GPIO_InitStruct.Pin = OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002f80:	f244 032f 	movw	r3, #16431	; 0x402f
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |OUT0_1V8_Pin|OUT2_1V8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f86:	2301      	movs	r3, #1
 8002f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f96:	4619      	mov	r1, r3
 8002f98:	4846      	ldr	r0, [pc, #280]	; (80030b4 <MX_GPIO_Init+0x2e0>)
 8002f9a:	f007 fdd3 	bl	800ab44 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT0_Pin */
  GPIO_InitStruct.Pin = UI_INPUT0_Pin;
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT0_GPIO_Port, &GPIO_InitStruct);
 8002faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4845      	ldr	r0, [pc, #276]	; (80030c8 <MX_GPIO_Init+0x2f4>)
 8002fb2:	f007 fdc7 	bl	800ab44 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_CONFIG_Pin OUT1_CONFIG_Pin OUT2_CONFIG_Pin MCU_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin;
 8002fb6:	f241 1350 	movw	r3, #4432	; 0x1150
 8002fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002fc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fcc:	4619      	mov	r1, r3
 8002fce:	483a      	ldr	r0, [pc, #232]	; (80030b8 <MX_GPIO_Init+0x2e4>)
 8002fd0:	f007 fdb8 	bl	800ab44 <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin BACK_BTN_Pin */
  GPIO_InitStruct.Pin = DWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin|BACK_BTN_Pin;
 8002fd4:	23f0      	movs	r3, #240	; 0xf0
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fd8:	4b3d      	ldr	r3, [pc, #244]	; (80030d0 <MX_GPIO_Init+0x2fc>)
 8002fda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002fe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4835      	ldr	r0, [pc, #212]	; (80030bc <MX_GPIO_Init+0x2e8>)
 8002fe8:	f007 fdac 	bl	800ab44 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT1_Pin */
  GPIO_InitStruct.Pin = UI_INPUT1_Pin;
 8002fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT1_GPIO_Port, &GPIO_InitStruct);
 8002ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ffe:	4619      	mov	r1, r3
 8003000:	4834      	ldr	r0, [pc, #208]	; (80030d4 <MX_GPIO_Init+0x300>)
 8003002:	f007 fd9f 	bl	800ab44 <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_INPUT2_Pin UI_INPUT10_Pin UI_INPUT5_Pin UI_INPUT9_Pin
                           UI_INPUT4_Pin UI_INPUT3_Pin UI_INPUT7_Pin UI_INPUT8_Pin
                           UI_INPUT6_Pin */
  GPIO_InitStruct.Pin = UI_INPUT2_Pin|UI_INPUT10_Pin|UI_INPUT5_Pin|UI_INPUT9_Pin
 8003006:	f64f 7310 	movw	r3, #65296	; 0xff10
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |UI_INPUT4_Pin|UI_INPUT3_Pin|UI_INPUT7_Pin|UI_INPUT8_Pin
                          |UI_INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800300c:	2300      	movs	r3, #0
 800300e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003018:	4619      	mov	r1, r3
 800301a:	482f      	ldr	r0, [pc, #188]	; (80030d8 <MX_GPIO_Init+0x304>)
 800301c:	f007 fd92 	bl	800ab44 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL2_Pin MCU_CTRL1_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL2_Pin|MCU_CTRL1_Pin;
 8003020:	2303      	movs	r3, #3
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003024:	2301      	movs	r3, #1
 8003026:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302c:	2300      	movs	r3, #0
 800302e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003034:	4619      	mov	r1, r3
 8003036:	4821      	ldr	r0, [pc, #132]	; (80030bc <MX_GPIO_Init+0x2e8>)
 8003038:	f007 fd84 	bl	800ab44 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 800303c:	f243 033c 	movw	r3, #12348	; 0x303c
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BTN4_Pin|BTN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003042:	2301      	movs	r3, #1
 8003044:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	2300      	movs	r3, #0
 8003048:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304a:	2300      	movs	r3, #0
 800304c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800304e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003052:	4619      	mov	r1, r3
 8003054:	481a      	ldr	r0, [pc, #104]	; (80030c0 <MX_GPIO_Init+0x2ec>)
 8003056:	f007 fd75 	bl	800ab44 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_CONFIG_Pin FRONT_LED_CTRL_Pin */
  GPIO_InitStruct.Pin = OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin;
 800305a:	f241 0304 	movw	r3, #4100	; 0x1004
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003060:	2301      	movs	r3, #1
 8003062:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003068:	2300      	movs	r3, #0
 800306a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800306c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003070:	4619      	mov	r1, r3
 8003072:	4814      	ldr	r0, [pc, #80]	; (80030c4 <MX_GPIO_Init+0x2f0>)
 8003074:	f007 fd66 	bl	800ab44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ZION_PWR_EN_Pin EDL_EN_Pin SPARE_SW_EN_Pin */
  GPIO_InitStruct.Pin = ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin;
 8003078:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800307e:	2301      	movs	r3, #1
 8003080:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003082:	2300      	movs	r3, #0
 8003084:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003086:	2300      	movs	r3, #0
 8003088:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800308a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800308e:	4619      	mov	r1, r3
 8003090:	480d      	ldr	r0, [pc, #52]	; (80030c8 <MX_GPIO_Init+0x2f4>)
 8003092:	f007 fd57 	bl	800ab44 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL0_Pin UART_MUX_CTRL_Pin LCD_EXTMODE_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin;
 8003096:	231b      	movs	r3, #27
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309a:	2301      	movs	r3, #1
 800309c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a2:	2300      	movs	r3, #0
 80030a4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80030a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030aa:	e017      	b.n	80030dc <MX_GPIO_Init+0x308>
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40021800 	.word	0x40021800
 80030b8:	40022000 	.word	0x40022000
 80030bc:	40022800 	.word	0x40022800
 80030c0:	40021400 	.word	0x40021400
 80030c4:	40021c00 	.word	0x40021c00
 80030c8:	40020400 	.word	0x40020400
 80030cc:	40022400 	.word	0x40022400
 80030d0:	10210000 	.word	0x10210000
 80030d4:	40020800 	.word	0x40020800
 80030d8:	40020c00 	.word	0x40020c00
 80030dc:	4619      	mov	r1, r3
 80030de:	480b      	ldr	r0, [pc, #44]	; (800310c <MX_GPIO_Init+0x338>)
 80030e0:	f007 fd30 	bl	800ab44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2105      	movs	r1, #5
 80030e8:	200a      	movs	r0, #10
 80030ea:	f007 f8f9 	bl	800a2e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80030ee:	200a      	movs	r0, #10
 80030f0:	f007 f912 	bl	800a318 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80030f4:	2200      	movs	r2, #0
 80030f6:	2105      	movs	r1, #5
 80030f8:	2017      	movs	r0, #23
 80030fa:	f007 f8f1 	bl	800a2e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030fe:	2017      	movs	r0, #23
 8003100:	f007 f90a 	bl	800a318 <HAL_NVIC_EnableIRQ>

}
 8003104:	bf00      	nop
 8003106:	3740      	adds	r7, #64	; 0x40
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40022400 	.word	0x40022400

08003110 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 8003118:	1d39      	adds	r1, r7, #4
 800311a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800311e:	2201      	movs	r2, #1
 8003120:	4803      	ldr	r0, [pc, #12]	; (8003130 <__io_putchar+0x20>)
 8003122:	f00c f96f 	bl	800f404 <HAL_UART_Transmit>

	return ch;
 8003126:	687b      	ldr	r3, [r7, #4]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20028c0c 	.word	0x20028c0c

08003134 <outputGPIOBufInitialization>:

void outputGPIOBufInitialization(){
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
	memset(gpioOutputState,0,sizeof(gpioOutputState));
 8003138:	220e      	movs	r2, #14
 800313a:	2100      	movs	r1, #0
 800313c:	480d      	ldr	r0, [pc, #52]	; (8003174 <outputGPIOBufInitialization+0x40>)
 800313e:	f010 fa24 	bl	801358a <memset>
	setOutputGPIOState(outputGPIOs.odOut_0, ON); //set OD to high impediance
 8003142:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <outputGPIOBufInitialization+0x44>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	2101      	movs	r1, #1
 8003148:	4618      	mov	r0, r3
 800314a:	f000 f817 	bl	800317c <setOutputGPIOState>
	setOutputGPIOState(outputGPIOs.odOut_1, ON); //set OD to high impediance
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <outputGPIOBufInitialization+0x44>)
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	2101      	movs	r1, #1
 8003154:	4618      	mov	r0, r3
 8003156:	f000 f811 	bl	800317c <setOutputGPIOState>
	gpioOutputState[outputGPIOs.odOut_0]=1;
 800315a:	4b07      	ldr	r3, [pc, #28]	; (8003178 <outputGPIOBufInitialization+0x44>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	4a05      	ldr	r2, [pc, #20]	; (8003174 <outputGPIOBufInitialization+0x40>)
 8003160:	2101      	movs	r1, #1
 8003162:	54d1      	strb	r1, [r2, r3]
	gpioOutputState[outputGPIOs.odOut_1]=1;
 8003164:	4b04      	ldr	r3, [pc, #16]	; (8003178 <outputGPIOBufInitialization+0x44>)
 8003166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003168:	4a02      	ldr	r2, [pc, #8]	; (8003174 <outputGPIOBufInitialization+0x40>)
 800316a:	2101      	movs	r1, #1
 800316c:	54d1      	strb	r1, [r2, r3]
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	2002bf98 	.word	0x2002bf98
 8003178:	20000044 	.word	0x20000044

0800317c <setOutputGPIOState>:

void setOutputGPIOState(int gpio, int state){
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]

	if(gpio == outputGPIOs.configOut_0){
 8003186:	4b87      	ldr	r3, [pc, #540]	; (80033a4 <setOutputGPIOState+0x228>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	d10d      	bne.n	80031ac <setOutputGPIOState+0x30>
		HAL_GPIO_WritePin(GPIOH,OUT0_CONFIG_Pin,state);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	2104      	movs	r1, #4
 8003198:	4883      	ldr	r0, [pc, #524]	; (80033a8 <setOutputGPIOState+0x22c>)
 800319a:	f007 fe95 	bl	800aec8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_0] = state;
 800319e:	4b81      	ldr	r3, [pc, #516]	; (80033a4 <setOutputGPIOState+0x228>)
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	b2d1      	uxtb	r1, r2
 80031a6:	4a81      	ldr	r2, [pc, #516]	; (80033ac <setOutputGPIOState+0x230>)
 80031a8:	54d1      	strb	r1, [r2, r3]

	else if(gpio == outputGPIOs.odOut_1){
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
		gpioOutputState[outputGPIOs.odOut_1] = state;
	}
}
 80031aa:	e0f7      	b.n	800339c <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_1){
 80031ac:	4b7d      	ldr	r3, [pc, #500]	; (80033a4 <setOutputGPIOState+0x228>)
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d10d      	bne.n	80031d2 <setOutputGPIOState+0x56>
		HAL_GPIO_WritePin(GPIOI,OUT1_CONFIG_Pin,state);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	2110      	movs	r1, #16
 80031be:	487c      	ldr	r0, [pc, #496]	; (80033b0 <setOutputGPIOState+0x234>)
 80031c0:	f007 fe82 	bl	800aec8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_1] = state;
 80031c4:	4b77      	ldr	r3, [pc, #476]	; (80033a4 <setOutputGPIOState+0x228>)
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	b2d1      	uxtb	r1, r2
 80031cc:	4a77      	ldr	r2, [pc, #476]	; (80033ac <setOutputGPIOState+0x230>)
 80031ce:	54d1      	strb	r1, [r2, r3]
}
 80031d0:	e0e4      	b.n	800339c <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_2){
 80031d2:	4b74      	ldr	r3, [pc, #464]	; (80033a4 <setOutputGPIOState+0x228>)
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d10d      	bne.n	80031f8 <setOutputGPIOState+0x7c>
		HAL_GPIO_WritePin(GPIOI,OUT2_CONFIG_Pin,state);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	2140      	movs	r1, #64	; 0x40
 80031e4:	4872      	ldr	r0, [pc, #456]	; (80033b0 <setOutputGPIOState+0x234>)
 80031e6:	f007 fe6f 	bl	800aec8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_2] = state;
 80031ea:	4b6e      	ldr	r3, [pc, #440]	; (80033a4 <setOutputGPIOState+0x228>)
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	b2d1      	uxtb	r1, r2
 80031f2:	4a6e      	ldr	r2, [pc, #440]	; (80033ac <setOutputGPIOState+0x230>)
 80031f4:	54d1      	strb	r1, [r2, r3]
}
 80031f6:	e0d1      	b.n	800339c <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_3){
 80031f8:	4b6a      	ldr	r3, [pc, #424]	; (80033a4 <setOutputGPIOState+0x228>)
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d10e      	bne.n	8003220 <setOutputGPIOState+0xa4>
		HAL_GPIO_WritePin(GPIOI,OUT3_CONFIG_Pin,state);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	f44f 7180 	mov.w	r1, #256	; 0x100
 800320c:	4868      	ldr	r0, [pc, #416]	; (80033b0 <setOutputGPIOState+0x234>)
 800320e:	f007 fe5b 	bl	800aec8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_3] = state;
 8003212:	4b64      	ldr	r3, [pc, #400]	; (80033a4 <setOutputGPIOState+0x228>)
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	b2d1      	uxtb	r1, r2
 800321a:	4a64      	ldr	r2, [pc, #400]	; (80033ac <setOutputGPIOState+0x230>)
 800321c:	54d1      	strb	r1, [r2, r3]
}
 800321e:	e0bd      	b.n	800339c <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_0){
 8003220:	4b60      	ldr	r3, [pc, #384]	; (80033a4 <setOutputGPIOState+0x228>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	429a      	cmp	r2, r3
 8003228:	d10d      	bne.n	8003246 <setOutputGPIOState+0xca>
		HAL_GPIO_WritePin(GPIOJ,MCU_CTRL0_Pin,state);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	2110      	movs	r1, #16
 8003232:	4860      	ldr	r0, [pc, #384]	; (80033b4 <setOutputGPIOState+0x238>)
 8003234:	f007 fe48 	bl	800aec8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_0] = state;
 8003238:	4b5a      	ldr	r3, [pc, #360]	; (80033a4 <setOutputGPIOState+0x228>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	b2d1      	uxtb	r1, r2
 8003240:	4a5a      	ldr	r2, [pc, #360]	; (80033ac <setOutputGPIOState+0x230>)
 8003242:	54d1      	strb	r1, [r2, r3]
}
 8003244:	e0aa      	b.n	800339c <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_1){
 8003246:	4b57      	ldr	r3, [pc, #348]	; (80033a4 <setOutputGPIOState+0x228>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	d10d      	bne.n	800326c <setOutputGPIOState+0xf0>
		HAL_GPIO_WritePin(GPIOK,MCU_CTRL1_Pin,state);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	2101      	movs	r1, #1
 8003258:	4857      	ldr	r0, [pc, #348]	; (80033b8 <setOutputGPIOState+0x23c>)
 800325a:	f007 fe35 	bl	800aec8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_1] = state;
 800325e:	4b51      	ldr	r3, [pc, #324]	; (80033a4 <setOutputGPIOState+0x228>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	b2d1      	uxtb	r1, r2
 8003266:	4a51      	ldr	r2, [pc, #324]	; (80033ac <setOutputGPIOState+0x230>)
 8003268:	54d1      	strb	r1, [r2, r3]
}
 800326a:	e097      	b.n	800339c <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_2){
 800326c:	4b4d      	ldr	r3, [pc, #308]	; (80033a4 <setOutputGPIOState+0x228>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	429a      	cmp	r2, r3
 8003274:	d10d      	bne.n	8003292 <setOutputGPIOState+0x116>
		HAL_GPIO_WritePin(GPIOK,MCU_CTRL2_Pin,state);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	2102      	movs	r1, #2
 800327e:	484e      	ldr	r0, [pc, #312]	; (80033b8 <setOutputGPIOState+0x23c>)
 8003280:	f007 fe22 	bl	800aec8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_2] = state;
 8003284:	4b47      	ldr	r3, [pc, #284]	; (80033a4 <setOutputGPIOState+0x228>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	b2d1      	uxtb	r1, r2
 800328c:	4a47      	ldr	r2, [pc, #284]	; (80033ac <setOutputGPIOState+0x230>)
 800328e:	54d1      	strb	r1, [r2, r3]
}
 8003290:	e084      	b.n	800339c <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_3){
 8003292:	4b44      	ldr	r3, [pc, #272]	; (80033a4 <setOutputGPIOState+0x228>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	d10d      	bne.n	80032b8 <setOutputGPIOState+0x13c>
		HAL_GPIO_WritePin(GPIOJ,UART_MUX_CTRL_Pin,state);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	2108      	movs	r1, #8
 80032a4:	4843      	ldr	r0, [pc, #268]	; (80033b4 <setOutputGPIOState+0x238>)
 80032a6:	f007 fe0f 	bl	800aec8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_3] = state;
 80032aa:	4b3e      	ldr	r3, [pc, #248]	; (80033a4 <setOutputGPIOState+0x228>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	b2d1      	uxtb	r1, r2
 80032b2:	4a3e      	ldr	r2, [pc, #248]	; (80033ac <setOutputGPIOState+0x230>)
 80032b4:	54d1      	strb	r1, [r2, r3]
}
 80032b6:	e071      	b.n	800339c <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_0){
 80032b8:	4b3a      	ldr	r3, [pc, #232]	; (80033a4 <setOutputGPIOState+0x228>)
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d10d      	bne.n	80032de <setOutputGPIOState+0x162>
		HAL_GPIO_WritePin(GPIOG,OUT0_1V8_Pin,state);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	2101      	movs	r1, #1
 80032ca:	483c      	ldr	r0, [pc, #240]	; (80033bc <setOutputGPIOState+0x240>)
 80032cc:	f007 fdfc 	bl	800aec8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_0] = state;
 80032d0:	4b34      	ldr	r3, [pc, #208]	; (80033a4 <setOutputGPIOState+0x228>)
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	b2d1      	uxtb	r1, r2
 80032d8:	4a34      	ldr	r2, [pc, #208]	; (80033ac <setOutputGPIOState+0x230>)
 80032da:	54d1      	strb	r1, [r2, r3]
}
 80032dc:	e05e      	b.n	800339c <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_1){
 80032de:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <setOutputGPIOState+0x228>)
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d10d      	bne.n	8003304 <setOutputGPIOState+0x188>
		HAL_GPIO_WritePin(GPIOG,OUT1_1V8_Pin,state);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	2102      	movs	r1, #2
 80032f0:	4832      	ldr	r0, [pc, #200]	; (80033bc <setOutputGPIOState+0x240>)
 80032f2:	f007 fde9 	bl	800aec8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_1] = state;
 80032f6:	4b2b      	ldr	r3, [pc, #172]	; (80033a4 <setOutputGPIOState+0x228>)
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	b2d1      	uxtb	r1, r2
 80032fe:	4a2b      	ldr	r2, [pc, #172]	; (80033ac <setOutputGPIOState+0x230>)
 8003300:	54d1      	strb	r1, [r2, r3]
}
 8003302:	e04b      	b.n	800339c <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_2){
 8003304:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <setOutputGPIOState+0x228>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	429a      	cmp	r2, r3
 800330c:	d10d      	bne.n	800332a <setOutputGPIOState+0x1ae>
		HAL_GPIO_WritePin(GPIOG,OUT2_1V8_Pin,state);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	2120      	movs	r1, #32
 8003316:	4829      	ldr	r0, [pc, #164]	; (80033bc <setOutputGPIOState+0x240>)
 8003318:	f007 fdd6 	bl	800aec8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_2] = state;
 800331c:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <setOutputGPIOState+0x228>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	b2d1      	uxtb	r1, r2
 8003324:	4a21      	ldr	r2, [pc, #132]	; (80033ac <setOutputGPIOState+0x230>)
 8003326:	54d1      	strb	r1, [r2, r3]
}
 8003328:	e038      	b.n	800339c <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_3){
 800332a:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <setOutputGPIOState+0x228>)
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	429a      	cmp	r2, r3
 8003332:	d10e      	bne.n	8003352 <setOutputGPIOState+0x1d6>
		HAL_GPIO_WritePin(GPIOG,OUT3_1V8_Pin,state);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800333e:	481f      	ldr	r0, [pc, #124]	; (80033bc <setOutputGPIOState+0x240>)
 8003340:	f007 fdc2 	bl	800aec8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_3] = state;
 8003344:	4b17      	ldr	r3, [pc, #92]	; (80033a4 <setOutputGPIOState+0x228>)
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	b2d1      	uxtb	r1, r2
 800334c:	4a17      	ldr	r2, [pc, #92]	; (80033ac <setOutputGPIOState+0x230>)
 800334e:	54d1      	strb	r1, [r2, r3]
}
 8003350:	e024      	b.n	800339c <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.odOut_0){
 8003352:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <setOutputGPIOState+0x228>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	d10d      	bne.n	8003378 <setOutputGPIOState+0x1fc>
		HAL_GPIO_WritePin(GPIOG,OUT0_OD_Pin,state);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	2104      	movs	r1, #4
 8003364:	4815      	ldr	r0, [pc, #84]	; (80033bc <setOutputGPIOState+0x240>)
 8003366:	f007 fdaf 	bl	800aec8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.odOut_0] = state;
 800336a:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <setOutputGPIOState+0x228>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	b2d1      	uxtb	r1, r2
 8003372:	4a0e      	ldr	r2, [pc, #56]	; (80033ac <setOutputGPIOState+0x230>)
 8003374:	54d1      	strb	r1, [r2, r3]
}
 8003376:	e011      	b.n	800339c <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.odOut_1){
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <setOutputGPIOState+0x228>)
 800337a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	429a      	cmp	r2, r3
 8003380:	d10c      	bne.n	800339c <setOutputGPIOState+0x220>
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	2108      	movs	r1, #8
 800338a:	480c      	ldr	r0, [pc, #48]	; (80033bc <setOutputGPIOState+0x240>)
 800338c:	f007 fd9c 	bl	800aec8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.odOut_1] = state;
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <setOutputGPIOState+0x228>)
 8003392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	b2d1      	uxtb	r1, r2
 8003398:	4a04      	ldr	r2, [pc, #16]	; (80033ac <setOutputGPIOState+0x230>)
 800339a:	54d1      	strb	r1, [r2, r3]
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20000044 	.word	0x20000044
 80033a8:	40021c00 	.word	0x40021c00
 80033ac:	2002bf98 	.word	0x2002bf98
 80033b0:	40022000 	.word	0x40022000
 80033b4:	40022400 	.word	0x40022400
 80033b8:	40022800 	.word	0x40022800
 80033bc:	40021800 	.word	0x40021800

080033c0 <uartTransmitInt>:
	uart_buf_len = sprintf(uart_buf, message);
	if (uart == 7){
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}
}
void uartTransmitInt(uint16_t *number, int uart){
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b098      	sub	sp, #96	; 0x60
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
	char uart_buf[80];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, "0x%x\r\n", number);
 80033ca:	f107 030c 	add.w	r3, r7, #12
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4909      	ldr	r1, [pc, #36]	; (80033f8 <uartTransmitInt+0x38>)
 80033d2:	4618      	mov	r0, r3
 80033d4:	f010 ff5e 	bl	8014294 <siprintf>
 80033d8:	65f8      	str	r0, [r7, #92]	; 0x5c
	if (uart == 7){
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b07      	cmp	r3, #7
 80033de:	d107      	bne.n	80033f0 <uartTransmitInt+0x30>
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
 80033e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	f107 010c 	add.w	r1, r7, #12
 80033e8:	2364      	movs	r3, #100	; 0x64
 80033ea:	4804      	ldr	r0, [pc, #16]	; (80033fc <uartTransmitInt+0x3c>)
 80033ec:	f00c f80a 	bl	800f404 <HAL_UART_Transmit>
	}

}
 80033f0:	bf00      	nop
 80033f2:	3760      	adds	r7, #96	; 0x60
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	08017664 	.word	0x08017664
 80033fc:	20028c0c 	.word	0x20028c0c

08003400 <readI2CRegister>:
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}

}

uint8_t * readI2CRegister(uint8_t address, uint8_t reg, int bytes, int i2CBank){
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af02      	add	r7, sp, #8
 8003406:	60ba      	str	r2, [r7, #8]
 8003408:	607b      	str	r3, [r7, #4]
 800340a:	4603      	mov	r3, r0
 800340c:	73fb      	strb	r3, [r7, #15]
 800340e:	460b      	mov	r3, r1
 8003410:	73bb      	strb	r3, [r7, #14]
	static uint8_t buf[20];
	HAL_StatusTypeDef ret;
	buf[0]=reg;
 8003412:	4a4f      	ldr	r2, [pc, #316]	; (8003550 <readI2CRegister+0x150>)
 8003414:	7bbb      	ldrb	r3, [r7, #14]
 8003416:	7013      	strb	r3, [r2, #0]
  	if(i2CBank == 1){
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d10c      	bne.n	8003438 <readI2CRegister+0x38>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	b299      	uxth	r1, r3
 8003422:	f04f 33ff 	mov.w	r3, #4294967295
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	2301      	movs	r3, #1
 800342a:	4a49      	ldr	r2, [pc, #292]	; (8003550 <readI2CRegister+0x150>)
 800342c:	4849      	ldr	r0, [pc, #292]	; (8003554 <readI2CRegister+0x154>)
 800342e:	f007 fe33 	bl	800b098 <HAL_I2C_Master_Transmit>
 8003432:	4603      	mov	r3, r0
 8003434:	75fb      	strb	r3, [r7, #23]
 8003436:	e02e      	b.n	8003496 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 2){
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d10c      	bne.n	8003458 <readI2CRegister+0x58>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	b299      	uxth	r1, r3
 8003442:	f04f 33ff 	mov.w	r3, #4294967295
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2301      	movs	r3, #1
 800344a:	4a41      	ldr	r2, [pc, #260]	; (8003550 <readI2CRegister+0x150>)
 800344c:	4842      	ldr	r0, [pc, #264]	; (8003558 <readI2CRegister+0x158>)
 800344e:	f007 fe23 	bl	800b098 <HAL_I2C_Master_Transmit>
 8003452:	4603      	mov	r3, r0
 8003454:	75fb      	strb	r3, [r7, #23]
 8003456:	e01e      	b.n	8003496 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 3){
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b03      	cmp	r3, #3
 800345c:	d10c      	bne.n	8003478 <readI2CRegister+0x78>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, 1, HAL_MAX_DELAY);
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	b299      	uxth	r1, r3
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2301      	movs	r3, #1
 800346a:	4a39      	ldr	r2, [pc, #228]	; (8003550 <readI2CRegister+0x150>)
 800346c:	483b      	ldr	r0, [pc, #236]	; (800355c <readI2CRegister+0x15c>)
 800346e:	f007 fe13 	bl	800b098 <HAL_I2C_Master_Transmit>
 8003472:	4603      	mov	r3, r0
 8003474:	75fb      	strb	r3, [r7, #23]
 8003476:	e00e      	b.n	8003496 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 4){
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b04      	cmp	r3, #4
 800347c:	d10b      	bne.n	8003496 <readI2CRegister+0x96>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, 1, HAL_MAX_DELAY);
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	b299      	uxth	r1, r3
 8003482:	f04f 33ff 	mov.w	r3, #4294967295
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	2301      	movs	r3, #1
 800348a:	4a31      	ldr	r2, [pc, #196]	; (8003550 <readI2CRegister+0x150>)
 800348c:	4834      	ldr	r0, [pc, #208]	; (8003560 <readI2CRegister+0x160>)
 800348e:	f007 fe03 	bl	800b098 <HAL_I2C_Master_Transmit>
 8003492:	4603      	mov	r3, r0
 8003494:	75fb      	strb	r3, [r7, #23]
  	}
	  if ( ret != HAL_OK ) {
 8003496:	7dfb      	ldrb	r3, [r7, #23]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <readI2CRegister+0xa0>
	          return (uint8_t*)0xfe;
 800349c:	23fe      	movs	r3, #254	; 0xfe
 800349e:	e052      	b.n	8003546 <readI2CRegister+0x146>
	        }
	  else {
		  if(i2CBank == 1){
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d10e      	bne.n	80034c4 <readI2CRegister+0xc4>
				ret = HAL_I2C_Master_Receive(&hi2c1, address, buf, bytes, HAL_MAX_DELAY);
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	b299      	uxth	r1, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	f04f 33ff 	mov.w	r3, #4294967295
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	4a26      	ldr	r2, [pc, #152]	; (8003550 <readI2CRegister+0x150>)
 80034b8:	4826      	ldr	r0, [pc, #152]	; (8003554 <readI2CRegister+0x154>)
 80034ba:	f007 fee1 	bl	800b280 <HAL_I2C_Master_Receive>
 80034be:	4603      	mov	r3, r0
 80034c0:	75fb      	strb	r3, [r7, #23]
 80034c2:	e034      	b.n	800352e <readI2CRegister+0x12e>
			}
			else if(i2CBank == 2){
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d10e      	bne.n	80034e8 <readI2CRegister+0xe8>
				ret = HAL_I2C_Master_Receive(&hi2c2, address, buf, bytes, HAL_MAX_DELAY);
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	b299      	uxth	r1, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	4a1d      	ldr	r2, [pc, #116]	; (8003550 <readI2CRegister+0x150>)
 80034dc:	481e      	ldr	r0, [pc, #120]	; (8003558 <readI2CRegister+0x158>)
 80034de:	f007 fecf 	bl	800b280 <HAL_I2C_Master_Receive>
 80034e2:	4603      	mov	r3, r0
 80034e4:	75fb      	strb	r3, [r7, #23]
 80034e6:	e022      	b.n	800352e <readI2CRegister+0x12e>
			}
			else if(i2CBank == 3){
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d10e      	bne.n	800350c <readI2CRegister+0x10c>
				ret = HAL_I2C_Master_Receive(&hi2c3, address, buf, bytes, HAL_MAX_DELAY);
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	b299      	uxth	r1, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	f04f 33ff 	mov.w	r3, #4294967295
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	4a14      	ldr	r2, [pc, #80]	; (8003550 <readI2CRegister+0x150>)
 8003500:	4816      	ldr	r0, [pc, #88]	; (800355c <readI2CRegister+0x15c>)
 8003502:	f007 febd 	bl	800b280 <HAL_I2C_Master_Receive>
 8003506:	4603      	mov	r3, r0
 8003508:	75fb      	strb	r3, [r7, #23]
 800350a:	e010      	b.n	800352e <readI2CRegister+0x12e>
			}
			else if(i2CBank == 4){
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b04      	cmp	r3, #4
 8003510:	d10d      	bne.n	800352e <readI2CRegister+0x12e>
				ret = HAL_I2C_Master_Receive(&hi2c4, address, buf, bytes, HAL_MAX_DELAY);
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	b299      	uxth	r1, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	b29a      	uxth	r2, r3
 800351a:	f04f 33ff 	mov.w	r3, #4294967295
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	4a0b      	ldr	r2, [pc, #44]	; (8003550 <readI2CRegister+0x150>)
 8003524:	480e      	ldr	r0, [pc, #56]	; (8003560 <readI2CRegister+0x160>)
 8003526:	f007 feab 	bl	800b280 <HAL_I2C_Master_Receive>
 800352a:	4603      	mov	r3, r0
 800352c:	75fb      	strb	r3, [r7, #23]
			}
		  if ( ret != HAL_OK ) {
 800352e:	7dfb      	ldrb	r3, [r7, #23]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <readI2CRegister+0x138>
		          return (uint8_t*)0xfe;
 8003534:	23fe      	movs	r3, #254	; 0xfe
 8003536:	e006      	b.n	8003546 <readI2CRegister+0x146>
		        }
		  else{
			  uartTransmitInt(buf[0],7);
 8003538:	4b05      	ldr	r3, [pc, #20]	; (8003550 <readI2CRegister+0x150>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2107      	movs	r1, #7
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff ff3e 	bl	80033c0 <uartTransmitInt>
			  return buf;
 8003544:	4b02      	ldr	r3, [pc, #8]	; (8003550 <readI2CRegister+0x150>)
		  }
}
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	2000330c 	.word	0x2000330c
 8003554:	20028d88 	.word	0x20028d88
 8003558:	200291d8 	.word	0x200291d8
 800355c:	20028b74 	.word	0x20028b74
 8003560:	20028bc0 	.word	0x20028bc0

08003564 <writeI2CRegister>:
int writeI2CRegister(uint8_t address, uint8_t reg, uint8_t * bytes, int numBytes, int i2CBank){
 8003564:	b580      	push	{r7, lr}
 8003566:	b08e      	sub	sp, #56	; 0x38
 8003568:	af02      	add	r7, sp, #8
 800356a:	60ba      	str	r2, [r7, #8]
 800356c:	607b      	str	r3, [r7, #4]
 800356e:	4603      	mov	r3, r0
 8003570:	73fb      	strb	r3, [r7, #15]
 8003572:	460b      	mov	r3, r1
 8003574:	73bb      	strb	r3, [r7, #14]
	  	uint8_t buf[20];
	  	HAL_StatusTypeDef ret;
	  	buf[0]=reg;
 8003576:	7bbb      	ldrb	r3, [r7, #14]
 8003578:	753b      	strb	r3, [r7, #20]
	  	int x = 0;
 800357a:	2300      	movs	r3, #0
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 800357e:	2300      	movs	r3, #0
 8003580:	62bb      	str	r3, [r7, #40]	; 0x28
 8003582:	e00d      	b.n	80035a0 <writeI2CRegister+0x3c>
	  		buf[1+x] = bytes[x];
 8003584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	441a      	add	r2, r3
 800358a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358c:	3301      	adds	r3, #1
 800358e:	7812      	ldrb	r2, [r2, #0]
 8003590:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003594:	440b      	add	r3, r1
 8003596:	f803 2c1c 	strb.w	r2, [r3, #-28]
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 800359a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359c:	3301      	adds	r3, #1
 800359e:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d9ee      	bls.n	8003584 <writeI2CRegister+0x20>
	  	}
	  	if(i2CBank == 1){
 80035a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d112      	bne.n	80035d2 <writeI2CRegister+0x6e>
	  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, numBytes+1, HAL_MAX_DELAY);
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	b299      	uxth	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3301      	adds	r3, #1
 80035b6:	b298      	uxth	r0, r3
 80035b8:	f107 0214 	add.w	r2, r7, #20
 80035bc:	f04f 33ff 	mov.w	r3, #4294967295
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	4603      	mov	r3, r0
 80035c4:	4829      	ldr	r0, [pc, #164]	; (800366c <writeI2CRegister+0x108>)
 80035c6:	f007 fd67 	bl	800b098 <HAL_I2C_Master_Transmit>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80035d0:	e040      	b.n	8003654 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 2){
 80035d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d112      	bne.n	80035fe <writeI2CRegister+0x9a>
	  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, numBytes+1, HAL_MAX_DELAY);
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	b299      	uxth	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3301      	adds	r3, #1
 80035e2:	b298      	uxth	r0, r3
 80035e4:	f107 0214 	add.w	r2, r7, #20
 80035e8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	4603      	mov	r3, r0
 80035f0:	481f      	ldr	r0, [pc, #124]	; (8003670 <writeI2CRegister+0x10c>)
 80035f2:	f007 fd51 	bl	800b098 <HAL_I2C_Master_Transmit>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80035fc:	e02a      	b.n	8003654 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 3){
 80035fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003600:	2b03      	cmp	r3, #3
 8003602:	d112      	bne.n	800362a <writeI2CRegister+0xc6>
	  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	b299      	uxth	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	b29b      	uxth	r3, r3
 800360c:	3301      	adds	r3, #1
 800360e:	b298      	uxth	r0, r3
 8003610:	f107 0214 	add.w	r2, r7, #20
 8003614:	f04f 33ff 	mov.w	r3, #4294967295
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	4603      	mov	r3, r0
 800361c:	4815      	ldr	r0, [pc, #84]	; (8003674 <writeI2CRegister+0x110>)
 800361e:	f007 fd3b 	bl	800b098 <HAL_I2C_Master_Transmit>
 8003622:	4603      	mov	r3, r0
 8003624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003628:	e014      	b.n	8003654 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 4){
 800362a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362c:	2b04      	cmp	r3, #4
 800362e:	d111      	bne.n	8003654 <writeI2CRegister+0xf0>
	  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	b299      	uxth	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	b29b      	uxth	r3, r3
 8003638:	3301      	adds	r3, #1
 800363a:	b298      	uxth	r0, r3
 800363c:	f107 0214 	add.w	r2, r7, #20
 8003640:	f04f 33ff 	mov.w	r3, #4294967295
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	4603      	mov	r3, r0
 8003648:	480b      	ldr	r0, [pc, #44]	; (8003678 <writeI2CRegister+0x114>)
 800364a:	f007 fd25 	bl	800b098 <HAL_I2C_Master_Transmit>
 800364e:	4603      	mov	r3, r0
 8003650:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  	}
	  	if ( ret != HAL_OK ) {
 8003654:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <writeI2CRegister+0xfc>
	  	          return 0;
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <writeI2CRegister+0xfe>
	  	        }
	  	else {
	  		  return 1;
 8003660:	2301      	movs	r3, #1
	  }
}
 8003662:	4618      	mov	r0, r3
 8003664:	3730      	adds	r7, #48	; 0x30
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20028d88 	.word	0x20028d88
 8003670:	200291d8 	.word	0x200291d8
 8003674:	20028b74 	.word	0x20028b74
 8003678:	20028bc0 	.word	0x20028bc0

0800367c <configureLEDDriver>:
void configureLEDDriver(){
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af02      	add	r7, sp, #8
	uint8_t currentMultiplier = 0b00000001;
 8003682:	2301      	movs	r3, #1
 8003684:	71fb      	strb	r3, [r7, #7]
	static uint8_t* clear[1];
	clear[0]=0x0;
 8003686:	4b41      	ldr	r3, [pc, #260]	; (800378c <configureLEDDriver+0x110>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
	uint8_t * buf;
	//reduce the current multiplier to set brightness lower. See if this works. If not, we can work with PWM.
	writeI2CRegister(LED.address, LED.iref_reg, (uint8_t*)currentMultiplier,1,LED.i2cBank);
 800368c:	4b40      	ldr	r3, [pc, #256]	; (8003790 <configureLEDDriver+0x114>)
 800368e:	7818      	ldrb	r0, [r3, #0]
 8003690:	4b3f      	ldr	r3, [pc, #252]	; (8003790 <configureLEDDriver+0x114>)
 8003692:	7999      	ldrb	r1, [r3, #6]
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	461a      	mov	r2, r3
 8003698:	4b3d      	ldr	r3, [pc, #244]	; (8003790 <configureLEDDriver+0x114>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	2301      	movs	r3, #1
 80036a0:	f7ff ff60 	bl	8003564 <writeI2CRegister>
	buf = readI2CRegister(LED.address,LED.iref_reg,1,LED.i2cBank);
 80036a4:	4b3a      	ldr	r3, [pc, #232]	; (8003790 <configureLEDDriver+0x114>)
 80036a6:	7818      	ldrb	r0, [r3, #0]
 80036a8:	4b39      	ldr	r3, [pc, #228]	; (8003790 <configureLEDDriver+0x114>)
 80036aa:	7999      	ldrb	r1, [r3, #6]
 80036ac:	4b38      	ldr	r3, [pc, #224]	; (8003790 <configureLEDDriver+0x114>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f7ff fea5 	bl	8003400 <readI2CRegister>
 80036b6:	6038      	str	r0, [r7, #0]
	uartTransmitInt(buf[0],7);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2107      	movs	r1, #7
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fe7e 	bl	80033c0 <uartTransmitInt>
	//Turn on oscillator. Must be turned on before LED driver functions
	writeI2CRegister(LED.address,LED.mode0_reg,(uint8_t*)LED.mode0_oscon_value,1,LED.i2cBank);
 80036c4:	4b32      	ldr	r3, [pc, #200]	; (8003790 <configureLEDDriver+0x114>)
 80036c6:	7818      	ldrb	r0, [r3, #0]
 80036c8:	4b31      	ldr	r3, [pc, #196]	; (8003790 <configureLEDDriver+0x114>)
 80036ca:	7859      	ldrb	r1, [r3, #1]
 80036cc:	4b30      	ldr	r3, [pc, #192]	; (8003790 <configureLEDDriver+0x114>)
 80036ce:	79db      	ldrb	r3, [r3, #7]
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b2f      	ldr	r3, [pc, #188]	; (8003790 <configureLEDDriver+0x114>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	2301      	movs	r3, #1
 80036da:	f7ff ff43 	bl	8003564 <writeI2CRegister>
	//clear the default state of the led register.
	writeI2CRegister(LED.address,LED.led0_reg,(uint8_t*)clear,1,LED.i2cBank);
 80036de:	4b2c      	ldr	r3, [pc, #176]	; (8003790 <configureLEDDriver+0x114>)
 80036e0:	7818      	ldrb	r0, [r3, #0]
 80036e2:	4b2b      	ldr	r3, [pc, #172]	; (8003790 <configureLEDDriver+0x114>)
 80036e4:	7899      	ldrb	r1, [r3, #2]
 80036e6:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <configureLEDDriver+0x114>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	2301      	movs	r3, #1
 80036ee:	4a27      	ldr	r2, [pc, #156]	; (800378c <configureLEDDriver+0x110>)
 80036f0:	f7ff ff38 	bl	8003564 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led1_reg,(uint8_t*)clear,1,LED.i2cBank);
 80036f4:	4b26      	ldr	r3, [pc, #152]	; (8003790 <configureLEDDriver+0x114>)
 80036f6:	7818      	ldrb	r0, [r3, #0]
 80036f8:	4b25      	ldr	r3, [pc, #148]	; (8003790 <configureLEDDriver+0x114>)
 80036fa:	78d9      	ldrb	r1, [r3, #3]
 80036fc:	4b24      	ldr	r3, [pc, #144]	; (8003790 <configureLEDDriver+0x114>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	2301      	movs	r3, #1
 8003704:	4a21      	ldr	r2, [pc, #132]	; (800378c <configureLEDDriver+0x110>)
 8003706:	f7ff ff2d 	bl	8003564 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led2_reg,(uint8_t*)clear,1,LED.i2cBank);
 800370a:	4b21      	ldr	r3, [pc, #132]	; (8003790 <configureLEDDriver+0x114>)
 800370c:	7818      	ldrb	r0, [r3, #0]
 800370e:	4b20      	ldr	r3, [pc, #128]	; (8003790 <configureLEDDriver+0x114>)
 8003710:	7919      	ldrb	r1, [r3, #4]
 8003712:	4b1f      	ldr	r3, [pc, #124]	; (8003790 <configureLEDDriver+0x114>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2301      	movs	r3, #1
 800371a:	4a1c      	ldr	r2, [pc, #112]	; (800378c <configureLEDDriver+0x110>)
 800371c:	f7ff ff22 	bl	8003564 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led3_reg,(uint8_t*)clear,1,LED.i2cBank);
 8003720:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <configureLEDDriver+0x114>)
 8003722:	7818      	ldrb	r0, [r3, #0]
 8003724:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <configureLEDDriver+0x114>)
 8003726:	7959      	ldrb	r1, [r3, #5]
 8003728:	4b19      	ldr	r3, [pc, #100]	; (8003790 <configureLEDDriver+0x114>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	2301      	movs	r3, #1
 8003730:	4a16      	ldr	r2, [pc, #88]	; (800378c <configureLEDDriver+0x110>)
 8003732:	f7ff ff17 	bl	8003564 <writeI2CRegister>
	//set the PWM for the tri-color led. Thing is bright so PWM is very low.
	writeI2CRegister(LED.address,LED.led7_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 8003736:	4b16      	ldr	r3, [pc, #88]	; (8003790 <configureLEDDriver+0x114>)
 8003738:	7818      	ldrb	r0, [r3, #0]
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <configureLEDDriver+0x114>)
 800373c:	7a19      	ldrb	r1, [r3, #8]
 800373e:	4b14      	ldr	r3, [pc, #80]	; (8003790 <configureLEDDriver+0x114>)
 8003740:	7adb      	ldrb	r3, [r3, #11]
 8003742:	461a      	mov	r2, r3
 8003744:	4b12      	ldr	r3, [pc, #72]	; (8003790 <configureLEDDriver+0x114>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2301      	movs	r3, #1
 800374c:	f7ff ff0a 	bl	8003564 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led8_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <configureLEDDriver+0x114>)
 8003752:	7818      	ldrb	r0, [r3, #0]
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <configureLEDDriver+0x114>)
 8003756:	7a59      	ldrb	r1, [r3, #9]
 8003758:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <configureLEDDriver+0x114>)
 800375a:	7adb      	ldrb	r3, [r3, #11]
 800375c:	461a      	mov	r2, r3
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <configureLEDDriver+0x114>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	2301      	movs	r3, #1
 8003766:	f7ff fefd 	bl	8003564 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led9_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 800376a:	4b09      	ldr	r3, [pc, #36]	; (8003790 <configureLEDDriver+0x114>)
 800376c:	7818      	ldrb	r0, [r3, #0]
 800376e:	4b08      	ldr	r3, [pc, #32]	; (8003790 <configureLEDDriver+0x114>)
 8003770:	7a99      	ldrb	r1, [r3, #10]
 8003772:	4b07      	ldr	r3, [pc, #28]	; (8003790 <configureLEDDriver+0x114>)
 8003774:	7adb      	ldrb	r3, [r3, #11]
 8003776:	461a      	mov	r2, r3
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <configureLEDDriver+0x114>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2301      	movs	r3, #1
 8003780:	f7ff fef0 	bl	8003564 <writeI2CRegister>
}
 8003784:	bf00      	nop
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	20003320 	.word	0x20003320
 8003790:	20000004 	.word	0x20000004

08003794 <setErrorLED>:

//Configures specified LED to either fully on or off.
void setErrorLED(int led,_Bool change){
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	; 0x28
 8003798:	af02      	add	r7, sp, #8
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	70fb      	strb	r3, [r7, #3]
	const uint8_t led0 = 0b00000001;
 80037a0:	2301      	movs	r3, #1
 80037a2:	76bb      	strb	r3, [r7, #26]
	const uint8_t led1 = 0b00000100;
 80037a4:	2304      	movs	r3, #4
 80037a6:	767b      	strb	r3, [r7, #25]
	const uint8_t led2 = 0b00010000;
 80037a8:	2310      	movs	r3, #16
 80037aa:	763b      	strb	r3, [r7, #24]
	const uint8_t led3 = 0b01000000;
 80037ac:	2340      	movs	r3, #64	; 0x40
 80037ae:	75fb      	strb	r3, [r7, #23]
	const uint8_t led0_pwm = 0b00000010;
 80037b0:	2302      	movs	r3, #2
 80037b2:	75bb      	strb	r3, [r7, #22]
	const uint8_t led1_pwm = 0b00001000;
 80037b4:	2308      	movs	r3, #8
 80037b6:	757b      	strb	r3, [r7, #21]
	const uint8_t led2_pwm = 0b00100000;
 80037b8:	2320      	movs	r3, #32
 80037ba:	753b      	strb	r3, [r7, #20]
	const uint8_t led3_pwm = 0b10000000;
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	74fb      	strb	r3, [r7, #19]
  	uint8_t* ledRegisterContents;
  	int ledBitNumber;
  	uint8_t ledRegister;
	if(led <4){
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	dc05      	bgt.n	80037d2 <setErrorLED+0x3e>
		ledRegister = LED.led0_reg;
 80037c6:	4b80      	ldr	r3, [pc, #512]	; (80039c8 <setErrorLED+0x234>)
 80037c8:	789b      	ldrb	r3, [r3, #2]
 80037ca:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	61fb      	str	r3, [r7, #28]
 80037d0:	e019      	b.n	8003806 <setErrorLED+0x72>
	}
	else if(led <8){
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b07      	cmp	r3, #7
 80037d6:	dc06      	bgt.n	80037e6 <setErrorLED+0x52>
		ledRegister = LED.led1_reg;
 80037d8:	4b7b      	ldr	r3, [pc, #492]	; (80039c8 <setErrorLED+0x234>)
 80037da:	78db      	ldrb	r3, [r3, #3]
 80037dc:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-4;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3b04      	subs	r3, #4
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	e00f      	b.n	8003806 <setErrorLED+0x72>
	}
	else if(led <12){
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b0b      	cmp	r3, #11
 80037ea:	dc06      	bgt.n	80037fa <setErrorLED+0x66>
		ledRegister = LED.led2_reg;
 80037ec:	4b76      	ldr	r3, [pc, #472]	; (80039c8 <setErrorLED+0x234>)
 80037ee:	791b      	ldrb	r3, [r3, #4]
 80037f0:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-8;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3b08      	subs	r3, #8
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	e005      	b.n	8003806 <setErrorLED+0x72>
	}
	else{ //put this in to humor those who want to try using unconnected LEDs
		ledRegister = LED.led3_reg;
 80037fa:	4b73      	ldr	r3, [pc, #460]	; (80039c8 <setErrorLED+0x234>)
 80037fc:	795b      	ldrb	r3, [r3, #5]
 80037fe:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-12;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3b0c      	subs	r3, #12
 8003804:	61fb      	str	r3, [r7, #28]
	}
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8003806:	4b70      	ldr	r3, [pc, #448]	; (80039c8 <setErrorLED+0x234>)
 8003808:	7818      	ldrb	r0, [r3, #0]
 800380a:	4b6f      	ldr	r3, [pc, #444]	; (80039c8 <setErrorLED+0x234>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	7ef9      	ldrb	r1, [r7, #27]
 8003810:	2201      	movs	r2, #1
 8003812:	f7ff fdf5 	bl	8003400 <readI2CRegister>
 8003816:	60f8      	str	r0, [r7, #12]
	switch(ledBitNumber){
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	2b03      	cmp	r3, #3
 800381c:	f200 80bd 	bhi.w	800399a <setErrorLED+0x206>
 8003820:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <setErrorLED+0x94>)
 8003822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003826:	bf00      	nop
 8003828:	08003839 	.word	0x08003839
 800382c:	0800389f 	.word	0x0800389f
 8003830:	08003905 	.word	0x08003905
 8003834:	08003935 	.word	0x08003935

	case 0:
		if(change){
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d012      	beq.n	8003864 <setErrorLED+0xd0>
			if(led == 8){
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d107      	bne.n	8003854 <setErrorLED+0xc0>
				ledRegisterContents[0] |= led0_pwm;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	781a      	ldrb	r2, [r3, #0]
 8003848:	7dbb      	ldrb	r3, [r7, #22]
 800384a:	4313      	orrs	r3, r2
 800384c:	b2da      	uxtb	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led0;
			}
		}
		break;
 8003852:	e0a2      	b.n	800399a <setErrorLED+0x206>
				ledRegisterContents[0] |= led0;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	781a      	ldrb	r2, [r3, #0]
 8003858:	7ebb      	ldrb	r3, [r7, #26]
 800385a:	4313      	orrs	r3, r2
 800385c:	b2da      	uxtb	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	701a      	strb	r2, [r3, #0]
		break;
 8003862:	e09a      	b.n	800399a <setErrorLED+0x206>
			if(led == 8){
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b08      	cmp	r3, #8
 8003868:	d10c      	bne.n	8003884 <setErrorLED+0xf0>
				ledRegisterContents[0] &= ~led0_pwm;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	b25a      	sxtb	r2, r3
 8003870:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003874:	43db      	mvns	r3, r3
 8003876:	b25b      	sxtb	r3, r3
 8003878:	4013      	ands	r3, r2
 800387a:	b25b      	sxtb	r3, r3
 800387c:	b2da      	uxtb	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	701a      	strb	r2, [r3, #0]
		break;
 8003882:	e08a      	b.n	800399a <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led0;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	b25a      	sxtb	r2, r3
 800388a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800388e:	43db      	mvns	r3, r3
 8003890:	b25b      	sxtb	r3, r3
 8003892:	4013      	ands	r3, r2
 8003894:	b25b      	sxtb	r3, r3
 8003896:	b2da      	uxtb	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	701a      	strb	r2, [r3, #0]
		break;
 800389c:	e07d      	b.n	800399a <setErrorLED+0x206>

	case 1:
		if(change){
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d012      	beq.n	80038ca <setErrorLED+0x136>
			if(led == 9){
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b09      	cmp	r3, #9
 80038a8:	d107      	bne.n	80038ba <setErrorLED+0x126>
				ledRegisterContents[0] |= led1_pwm;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	7d7b      	ldrb	r3, [r7, #21]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led1;
			}
		}
		break;
 80038b8:	e06f      	b.n	800399a <setErrorLED+0x206>
				ledRegisterContents[0] |= led1;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	781a      	ldrb	r2, [r3, #0]
 80038be:	7e7b      	ldrb	r3, [r7, #25]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	701a      	strb	r2, [r3, #0]
		break;
 80038c8:	e067      	b.n	800399a <setErrorLED+0x206>
			if(led == 9){
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b09      	cmp	r3, #9
 80038ce:	d10c      	bne.n	80038ea <setErrorLED+0x156>
				ledRegisterContents[0] &= ~led1_pwm;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b25a      	sxtb	r2, r3
 80038d6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80038da:	43db      	mvns	r3, r3
 80038dc:	b25b      	sxtb	r3, r3
 80038de:	4013      	ands	r3, r2
 80038e0:	b25b      	sxtb	r3, r3
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	701a      	strb	r2, [r3, #0]
		break;
 80038e8:	e057      	b.n	800399a <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	b25a      	sxtb	r2, r3
 80038f0:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	b25b      	sxtb	r3, r3
 80038f8:	4013      	ands	r3, r2
 80038fa:	b25b      	sxtb	r3, r3
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	701a      	strb	r2, [r3, #0]
		break;
 8003902:	e04a      	b.n	800399a <setErrorLED+0x206>

	case 2:
		if(change){
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <setErrorLED+0x186>
				ledRegisterContents[0] |= led2;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	781a      	ldrb	r2, [r3, #0]
 800390e:	7e3b      	ldrb	r3, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	b2da      	uxtb	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	701a      	strb	r2, [r3, #0]
		}
		else{

			ledRegisterContents[0] &= ~led2;
		}
		break;
 8003918:	e03f      	b.n	800399a <setErrorLED+0x206>
			ledRegisterContents[0] &= ~led2;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	b25a      	sxtb	r2, r3
 8003920:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003924:	43db      	mvns	r3, r3
 8003926:	b25b      	sxtb	r3, r3
 8003928:	4013      	ands	r3, r2
 800392a:	b25b      	sxtb	r3, r3
 800392c:	b2da      	uxtb	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	701a      	strb	r2, [r3, #0]
		break;
 8003932:	e032      	b.n	800399a <setErrorLED+0x206>

	case 3:
		if(change){
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d012      	beq.n	8003960 <setErrorLED+0x1cc>
			if(led == 7){
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b07      	cmp	r3, #7
 800393e:	d107      	bne.n	8003950 <setErrorLED+0x1bc>
				ledRegisterContents[0] |= led3_pwm;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	781a      	ldrb	r2, [r3, #0]
 8003944:	7cfb      	ldrb	r3, [r7, #19]
 8003946:	4313      	orrs	r3, r2
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led3;
			}
		}
		break;
 800394e:	e023      	b.n	8003998 <setErrorLED+0x204>
				ledRegisterContents[0] |= led3;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	781a      	ldrb	r2, [r3, #0]
 8003954:	7dfb      	ldrb	r3, [r7, #23]
 8003956:	4313      	orrs	r3, r2
 8003958:	b2da      	uxtb	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	701a      	strb	r2, [r3, #0]
		break;
 800395e:	e01b      	b.n	8003998 <setErrorLED+0x204>
			if(led == 7){
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b07      	cmp	r3, #7
 8003964:	d10c      	bne.n	8003980 <setErrorLED+0x1ec>
				ledRegisterContents[0] &= ~led3_pwm;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	b25a      	sxtb	r2, r3
 800396c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003970:	43db      	mvns	r3, r3
 8003972:	b25b      	sxtb	r3, r3
 8003974:	4013      	ands	r3, r2
 8003976:	b25b      	sxtb	r3, r3
 8003978:	b2da      	uxtb	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	701a      	strb	r2, [r3, #0]
		break;
 800397e:	e00b      	b.n	8003998 <setErrorLED+0x204>
				ledRegisterContents[0] &= ~led3;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	b25a      	sxtb	r2, r3
 8003986:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800398a:	43db      	mvns	r3, r3
 800398c:	b25b      	sxtb	r3, r3
 800398e:	4013      	ands	r3, r2
 8003990:	b25b      	sxtb	r3, r3
 8003992:	b2da      	uxtb	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	701a      	strb	r2, [r3, #0]
		break;
 8003998:	bf00      	nop
	}
	writeI2CRegister(LED.address,ledRegister,ledRegisterContents,1,LED.i2cBank);
 800399a:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <setErrorLED+0x234>)
 800399c:	7818      	ldrb	r0, [r3, #0]
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <setErrorLED+0x234>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	7ef9      	ldrb	r1, [r7, #27]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	2301      	movs	r3, #1
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	f7ff fddb 	bl	8003564 <writeI2CRegister>
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 80039ae:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <setErrorLED+0x234>)
 80039b0:	7818      	ldrb	r0, [r3, #0]
 80039b2:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <setErrorLED+0x234>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	7ef9      	ldrb	r1, [r7, #27]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f7ff fd21 	bl	8003400 <readI2CRegister>
 80039be:	60f8      	str	r0, [r7, #12]
}
 80039c0:	bf00      	nop
 80039c2:	3720      	adds	r7, #32
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20000004 	.word	0x20000004

080039cc <getADCValues>:


float* getADCValues(){
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b09e      	sub	sp, #120	; 0x78
 80039d0:	af00      	add	r7, sp, #0
	//intialize a static float array to return from the method. Make static to avoid the data changing on return
	static float adcValues[21];
	//make an integer array to store the adc counts. ADC counts are out of 4096
	int avgADCCounterValues[21];
	//empty the integer array
	memset(avgADCCounterValues, 0, sizeof(avgADCCounterValues));
 80039d2:	463b      	mov	r3, r7
 80039d4:	2254      	movs	r2, #84	; 0x54
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f00f fdd6 	bl	801358a <memset>
	int adcChannelCounter,avgCounter,adcIndex;
	//variables to denote what interval the data in the adc buffers repeats. ADC format is [data0, 0x00, data1, 0x00...]
	//the interval is (#ofchannels activated on bank) * 2
	int adc1DataRepeat=22;
 80039de:	2316      	movs	r3, #22
 80039e0:	66bb      	str	r3, [r7, #104]	; 0x68
	int adc2DataRepeat=8;
 80039e2:	2308      	movs	r3, #8
 80039e4:	667b      	str	r3, [r7, #100]	; 0x64
	int adc3DataRepeat=12;
 80039e6:	230c      	movs	r3, #12
 80039e8:	663b      	str	r3, [r7, #96]	; 0x60
	//iterate through all 21 adc channels...
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 80039ea:	2300      	movs	r3, #0
 80039ec:	677b      	str	r3, [r7, #116]	; 0x74
 80039ee:	e171      	b.n	8003cd4 <getADCValues+0x308>
		//for the first channels of the adc banks (ADC Bank 1's first channel is ADC3, ADC bank 2's first channel is ADC0, ADC bank 3's first channel is adc2
		if((adcChannelCounter==Adc.adc0) || (adcChannelCounter==Adc.adc2) || (adcChannelCounter==Adc.adc3)){
 80039f0:	4b97      	ldr	r3, [pc, #604]	; (8003c50 <getADCValues+0x284>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d009      	beq.n	8003a0e <getADCValues+0x42>
 80039fa:	4b95      	ldr	r3, [pc, #596]	; (8003c50 <getADCValues+0x284>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d004      	beq.n	8003a0e <getADCValues+0x42>
 8003a04:	4b92      	ldr	r3, [pc, #584]	; (8003c50 <getADCValues+0x284>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d102      	bne.n	8003a14 <getADCValues+0x48>
			//first data entry for each buffer will be the data for these adcs
			adcIndex=0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a12:	e071      	b.n	8003af8 <getADCValues+0x12c>
		}
		//for the second channels of the adc banks (ADC Bank 1's second channel is ADC4, ADC bank 2's second channel is ADC1, ADC bank 3's second channel is adc14
		else if((adcChannelCounter==Adc.adc1) || (adcChannelCounter==Adc.adc14) || (adcChannelCounter==Adc.adc4)){
 8003a14:	4b8e      	ldr	r3, [pc, #568]	; (8003c50 <getADCValues+0x284>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d009      	beq.n	8003a32 <getADCValues+0x66>
 8003a1e:	4b8c      	ldr	r3, [pc, #560]	; (8003c50 <getADCValues+0x284>)
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d004      	beq.n	8003a32 <getADCValues+0x66>
 8003a28:	4b89      	ldr	r3, [pc, #548]	; (8003c50 <getADCValues+0x284>)
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d102      	bne.n	8003a38 <getADCValues+0x6c>
			adcIndex=2;
 8003a32:	2302      	movs	r3, #2
 8003a34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a36:	e05f      	b.n	8003af8 <getADCValues+0x12c>
		}
		//for the third channels of the adc banks (ADC Bank 1's third channel is ADC5, ADC bank 2's third channel is spareSpiADC, ADC bank 3's third channel is adc15
		else if((adcChannelCounter==Adc.spareSpiADC) || (adcChannelCounter==Adc.adc15) || (adcChannelCounter==Adc.adc5)){
 8003a38:	4b85      	ldr	r3, [pc, #532]	; (8003c50 <getADCValues+0x284>)
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d009      	beq.n	8003a56 <getADCValues+0x8a>
 8003a42:	4b83      	ldr	r3, [pc, #524]	; (8003c50 <getADCValues+0x284>)
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d004      	beq.n	8003a56 <getADCValues+0x8a>
 8003a4c:	4b80      	ldr	r3, [pc, #512]	; (8003c50 <getADCValues+0x284>)
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d102      	bne.n	8003a5c <getADCValues+0x90>
			adcIndex=4;
 8003a56:	2304      	movs	r3, #4
 8003a58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a5a:	e04d      	b.n	8003af8 <getADCValues+0x12c>
		}
		//for the fourth channels of the adc banks (ADC Bank 1's fourth channel is adc6, ADC bank 2's fourth channel is spareUARTADC, ADC bank 3's fourth channel is configADC
		else if((adcChannelCounter == Adc.spareUartADC) || (adcChannelCounter==Adc.configADC) || (adcChannelCounter==Adc.adc6)){
 8003a5c:	4b7c      	ldr	r3, [pc, #496]	; (8003c50 <getADCValues+0x284>)
 8003a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a60:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d009      	beq.n	8003a7a <getADCValues+0xae>
 8003a66:	4b7a      	ldr	r3, [pc, #488]	; (8003c50 <getADCValues+0x284>)
 8003a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d004      	beq.n	8003a7a <getADCValues+0xae>
 8003a70:	4b77      	ldr	r3, [pc, #476]	; (8003c50 <getADCValues+0x284>)
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d102      	bne.n	8003a80 <getADCValues+0xb4>
			adcIndex=6;
 8003a7a:	2306      	movs	r3, #6
 8003a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a7e:	e03b      	b.n	8003af8 <getADCValues+0x12c>
		}
		//for the fifth channels of the adc banks (ADC Bank 1's fifth channel is ADC7, ADC bank 3's fifth channel is zionADC
		else if((adcChannelCounter==Adc.zionADC) || (adcChannelCounter==Adc.adc7)){
 8003a80:	4b73      	ldr	r3, [pc, #460]	; (8003c50 <getADCValues+0x284>)
 8003a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a84:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d004      	beq.n	8003a94 <getADCValues+0xc8>
 8003a8a:	4b71      	ldr	r3, [pc, #452]	; (8003c50 <getADCValues+0x284>)
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d102      	bne.n	8003a9a <getADCValues+0xce>
			adcIndex=8;
 8003a94:	2308      	movs	r3, #8
 8003a96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a98:	e02e      	b.n	8003af8 <getADCValues+0x12c>
		}
		//for the sixth channels of the adc banks (ADC Bank 1's sixth channel is ADC8, ADC bank 3's sixth channel is spareI2cADC
		else if((adcChannelCounter == Adc.spareI2cADC) || (adcChannelCounter==Adc.adc8)){
 8003a9a:	4b6d      	ldr	r3, [pc, #436]	; (8003c50 <getADCValues+0x284>)
 8003a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d004      	beq.n	8003aae <getADCValues+0xe2>
 8003aa4:	4b6a      	ldr	r3, [pc, #424]	; (8003c50 <getADCValues+0x284>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d102      	bne.n	8003ab4 <getADCValues+0xe8>
			adcIndex=10;
 8003aae:	230a      	movs	r3, #10
 8003ab0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ab2:	e021      	b.n	8003af8 <getADCValues+0x12c>
		}
		//for the seventh channels of the adc banks (ADC Bank 1's seventh channel is ADC9)
		else if(adcChannelCounter==Adc.adc9){
 8003ab4:	4b66      	ldr	r3, [pc, #408]	; (8003c50 <getADCValues+0x284>)
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d102      	bne.n	8003ac4 <getADCValues+0xf8>
			adcIndex=12;
 8003abe:	230c      	movs	r3, #12
 8003ac0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ac2:	e019      	b.n	8003af8 <getADCValues+0x12c>
		}
		//for the eighth channels of the adc banks (ADC Bank 1's eighth channel is ADC10)
		else if(adcChannelCounter==Adc.adc10){
 8003ac4:	4b62      	ldr	r3, [pc, #392]	; (8003c50 <getADCValues+0x284>)
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d102      	bne.n	8003ad4 <getADCValues+0x108>
			adcIndex=14;
 8003ace:	230e      	movs	r3, #14
 8003ad0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ad2:	e011      	b.n	8003af8 <getADCValues+0x12c>
		}
		//for the nineth channels of the adc banks (ADC Bank 1's nineth channel is ADC11)
		else if(adcChannelCounter==Adc.adc11){
 8003ad4:	4b5e      	ldr	r3, [pc, #376]	; (8003c50 <getADCValues+0x284>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d102      	bne.n	8003ae4 <getADCValues+0x118>
			adcIndex=16;
 8003ade:	2310      	movs	r3, #16
 8003ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ae2:	e009      	b.n	8003af8 <getADCValues+0x12c>
		}
		//for the tenth channels of the adc banks (ADC Bank 1's tenth channel is ADC12)
		else if(adcChannelCounter==Adc.adc12){
 8003ae4:	4b5a      	ldr	r3, [pc, #360]	; (8003c50 <getADCValues+0x284>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d102      	bne.n	8003af4 <getADCValues+0x128>
			adcIndex=18;
 8003aee:	2312      	movs	r3, #18
 8003af0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003af2:	e001      	b.n	8003af8 <getADCValues+0x12c>
		}
		//for the eleventh channels of the adc banks (ADC Bank 1's eleventh channel is ADC13)
		else{
			adcIndex=20;
 8003af4:	2314      	movs	r3, #20
 8003af6:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		//for the channels that belong to the second ADC bank
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8003af8:	4b55      	ldr	r3, [pc, #340]	; (8003c50 <getADCValues+0x284>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d00e      	beq.n	8003b20 <getADCValues+0x154>
 8003b02:	4b53      	ldr	r3, [pc, #332]	; (8003c50 <getADCValues+0x284>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d009      	beq.n	8003b20 <getADCValues+0x154>
 8003b0c:	4b50      	ldr	r3, [pc, #320]	; (8003c50 <getADCValues+0x284>)
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d004      	beq.n	8003b20 <getADCValues+0x154>
 8003b16:	4b4e      	ldr	r3, [pc, #312]	; (8003c50 <getADCValues+0x284>)
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d13a      	bne.n	8003b96 <getADCValues+0x1ca>
			//parse through the buffers to grab enough values to make the asked for average amount
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003b20:	2300      	movs	r3, #0
 8003b22:	673b      	str	r3, [r7, #112]	; 0x70
 8003b24:	e033      	b.n	8003b8e <getADCValues+0x1c2>
				//adjust the index to match the next data point in the buffer
				int shiftedIndex = adcIndex + (adc2DataRepeat*avgCounter);
 8003b26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b28:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b30:	4413      	add	r3, r2
 8003b32:	657b      	str	r3, [r7, #84]	; 0x54
				//add it to the rolling average count
				avgADCCounterValues[adcChannelCounter]+=adc2_buf[shiftedIndex];
 8003b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b42:	4944      	ldr	r1, [pc, #272]	; (8003c54 <getADCValues+0x288>)
 8003b44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b46:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003b4a:	441a      	add	r2, r3
 8003b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003b54:	440b      	add	r3, r1
 8003b56:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b5c:	2b13      	cmp	r3, #19
 8003b5e:	d113      	bne.n	8003b88 <getADCValues+0x1bc>
					//at the end, divide the total amount to get our averaged Value
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b68:	4413      	add	r3, r2
 8003b6a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b6e:	4a3a      	ldr	r2, [pc, #232]	; (8003c58 <getADCValues+0x28c>)
 8003b70:	fb82 1203 	smull	r1, r2, r2, r3
 8003b74:	10d2      	asrs	r2, r2, #3
 8003b76:	17db      	asrs	r3, r3, #31
 8003b78:	1ad2      	subs	r2, r2, r3
 8003b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003b82:	440b      	add	r3, r1
 8003b84:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003b88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	673b      	str	r3, [r7, #112]	; 0x70
 8003b8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b90:	2b13      	cmp	r3, #19
 8003b92:	ddc8      	ble.n	8003b26 <getADCValues+0x15a>
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8003b94:	e09b      	b.n	8003cce <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the third ADC bank
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 8003b96:	4b2e      	ldr	r3, [pc, #184]	; (8003c50 <getADCValues+0x284>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d018      	beq.n	8003bd2 <getADCValues+0x206>
 8003ba0:	4b2b      	ldr	r3, [pc, #172]	; (8003c50 <getADCValues+0x284>)
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d013      	beq.n	8003bd2 <getADCValues+0x206>
 8003baa:	4b29      	ldr	r3, [pc, #164]	; (8003c50 <getADCValues+0x284>)
 8003bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d00e      	beq.n	8003bd2 <getADCValues+0x206>
 8003bb4:	4b26      	ldr	r3, [pc, #152]	; (8003c50 <getADCValues+0x284>)
 8003bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d009      	beq.n	8003bd2 <getADCValues+0x206>
 8003bbe:	4b24      	ldr	r3, [pc, #144]	; (8003c50 <getADCValues+0x284>)
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d004      	beq.n	8003bd2 <getADCValues+0x206>
 8003bc8:	4b21      	ldr	r3, [pc, #132]	; (8003c50 <getADCValues+0x284>)
 8003bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bcc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d13a      	bne.n	8003c48 <getADCValues+0x27c>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	673b      	str	r3, [r7, #112]	; 0x70
 8003bd6:	e033      	b.n	8003c40 <getADCValues+0x274>
				int shiftedIndex = adcIndex + (adc3DataRepeat*avgCounter);
 8003bd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003bdc:	fb02 f303 	mul.w	r3, r2, r3
 8003be0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003be2:	4413      	add	r3, r2
 8003be4:	65bb      	str	r3, [r7, #88]	; 0x58
				avgADCCounterValues[adcChannelCounter]+=adc3_buf[shiftedIndex];
 8003be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003bee:	4413      	add	r3, r2
 8003bf0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003bf4:	4919      	ldr	r1, [pc, #100]	; (8003c5c <getADCValues+0x290>)
 8003bf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bf8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003bfc:	441a      	add	r2, r3
 8003bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003c06:	440b      	add	r3, r1
 8003c08:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003c0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c0e:	2b13      	cmp	r3, #19
 8003c10:	d113      	bne.n	8003c3a <getADCValues+0x26e>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c20:	4a0d      	ldr	r2, [pc, #52]	; (8003c58 <getADCValues+0x28c>)
 8003c22:	fb82 1203 	smull	r1, r2, r2, r3
 8003c26:	10d2      	asrs	r2, r2, #3
 8003c28:	17db      	asrs	r3, r3, #31
 8003c2a:	1ad2      	subs	r2, r2, r3
 8003c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003c34:	440b      	add	r3, r1
 8003c36:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003c3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	673b      	str	r3, [r7, #112]	; 0x70
 8003c40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c42:	2b13      	cmp	r3, #19
 8003c44:	ddc8      	ble.n	8003bd8 <getADCValues+0x20c>
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 8003c46:	e042      	b.n	8003cce <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the first ADC bank
		else{
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003c48:	2300      	movs	r3, #0
 8003c4a:	673b      	str	r3, [r7, #112]	; 0x70
 8003c4c:	e03c      	b.n	8003cc8 <getADCValues+0x2fc>
 8003c4e:	bf00      	nop
 8003c50:	2000007c 	.word	0x2000007c
 8003c54:	2002e770 	.word	0x2002e770
 8003c58:	66666667 	.word	0x66666667
 8003c5c:	2002bfcc 	.word	0x2002bfcc
				int shiftedIndex = adcIndex + (adc1DataRepeat*avgCounter);
 8003c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003c64:	fb02 f303 	mul.w	r3, r2, r3
 8003c68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c6a:	4413      	add	r3, r2
 8003c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
				avgADCCounterValues[adcChannelCounter]+=adc1_buf[shiftedIndex];
 8003c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c76:	4413      	add	r3, r2
 8003c78:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c7c:	49c9      	ldr	r1, [pc, #804]	; (8003fa4 <getADCValues+0x5d8>)
 8003c7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c80:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003c84:	441a      	add	r2, r3
 8003c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003c8e:	440b      	add	r3, r1
 8003c90:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003c94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c96:	2b13      	cmp	r3, #19
 8003c98:	d113      	bne.n	8003cc2 <getADCValues+0x2f6>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003ca8:	4abf      	ldr	r2, [pc, #764]	; (8003fa8 <getADCValues+0x5dc>)
 8003caa:	fb82 1203 	smull	r1, r2, r2, r3
 8003cae:	10d2      	asrs	r2, r2, #3
 8003cb0:	17db      	asrs	r3, r3, #31
 8003cb2:	1ad2      	subs	r2, r2, r3
 8003cb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003cbc:	440b      	add	r3, r1
 8003cbe:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003cc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	673b      	str	r3, [r7, #112]	; 0x70
 8003cc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cca:	2b13      	cmp	r3, #19
 8003ccc:	ddc8      	ble.n	8003c60 <getADCValues+0x294>
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 8003cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	677b      	str	r3, [r7, #116]	; 0x74
 8003cd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd6:	2b14      	cmp	r3, #20
 8003cd8:	f77f ae8a 	ble.w	80039f0 <getADCValues+0x24>
				}
			}
		}
	}
	//for adc inputs with names ADC#, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (3)
	adcValues[Adc.adc0] = (avgADCCounterValues[Adc.adc0] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003cdc:	4bb3      	ldr	r3, [pc, #716]	; (8003fac <getADCValues+0x5e0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cf4:	4bad      	ldr	r3, [pc, #692]	; (8003fac <getADCValues+0x5e0>)
 8003cf6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cfe:	4bab      	ldr	r3, [pc, #684]	; (8003fac <getADCValues+0x5e0>)
 8003d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d02:	ee07 3a90 	vmov	s15, r3
 8003d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d0a:	4ba8      	ldr	r3, [pc, #672]	; (8003fac <getADCValues+0x5e0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d12:	4aa7      	ldr	r2, [pc, #668]	; (8003fb0 <getADCValues+0x5e4>)
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc1] = (avgADCCounterValues[Adc.adc1] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003d1c:	4ba3      	ldr	r3, [pc, #652]	; (8003fac <getADCValues+0x5e0>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d26:	4413      	add	r3, r2
 8003d28:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d2c:	ee07 3a90 	vmov	s15, r3
 8003d30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d34:	4b9d      	ldr	r3, [pc, #628]	; (8003fac <getADCValues+0x5e0>)
 8003d36:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d3e:	4b9b      	ldr	r3, [pc, #620]	; (8003fac <getADCValues+0x5e0>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d4a:	4b98      	ldr	r3, [pc, #608]	; (8003fac <getADCValues+0x5e0>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d52:	4a97      	ldr	r2, [pc, #604]	; (8003fb0 <getADCValues+0x5e4>)
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc2] = (avgADCCounterValues[Adc.adc2] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003d5c:	4b93      	ldr	r3, [pc, #588]	; (8003fac <getADCValues+0x5e0>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d66:	4413      	add	r3, r2
 8003d68:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d6c:	ee07 3a90 	vmov	s15, r3
 8003d70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d74:	4b8d      	ldr	r3, [pc, #564]	; (8003fac <getADCValues+0x5e0>)
 8003d76:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d7e:	4b8b      	ldr	r3, [pc, #556]	; (8003fac <getADCValues+0x5e0>)
 8003d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8a:	4b88      	ldr	r3, [pc, #544]	; (8003fac <getADCValues+0x5e0>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d92:	4a87      	ldr	r2, [pc, #540]	; (8003fb0 <getADCValues+0x5e4>)
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc3] = (avgADCCounterValues[Adc.adc3] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003d9c:	4b83      	ldr	r3, [pc, #524]	; (8003fac <getADCValues+0x5e0>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003da6:	4413      	add	r3, r2
 8003da8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003dac:	ee07 3a90 	vmov	s15, r3
 8003db0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003db4:	4b7d      	ldr	r3, [pc, #500]	; (8003fac <getADCValues+0x5e0>)
 8003db6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003dba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dbe:	4b7b      	ldr	r3, [pc, #492]	; (8003fac <getADCValues+0x5e0>)
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dca:	4b78      	ldr	r3, [pc, #480]	; (8003fac <getADCValues+0x5e0>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd2:	4a77      	ldr	r2, [pc, #476]	; (8003fb0 <getADCValues+0x5e4>)
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc4] = (avgADCCounterValues[Adc.adc4] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003ddc:	4b73      	ldr	r3, [pc, #460]	; (8003fac <getADCValues+0x5e0>)
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003de6:	4413      	add	r3, r2
 8003de8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003dec:	ee07 3a90 	vmov	s15, r3
 8003df0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003df4:	4b6d      	ldr	r3, [pc, #436]	; (8003fac <getADCValues+0x5e0>)
 8003df6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003dfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dfe:	4b6b      	ldr	r3, [pc, #428]	; (8003fac <getADCValues+0x5e0>)
 8003e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e02:	ee07 3a90 	vmov	s15, r3
 8003e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e0a:	4b68      	ldr	r3, [pc, #416]	; (8003fac <getADCValues+0x5e0>)
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e12:	4a67      	ldr	r2, [pc, #412]	; (8003fb0 <getADCValues+0x5e4>)
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc5] = (avgADCCounterValues[Adc.adc5] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003e1c:	4b63      	ldr	r3, [pc, #396]	; (8003fac <getADCValues+0x5e0>)
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e26:	4413      	add	r3, r2
 8003e28:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003e2c:	ee07 3a90 	vmov	s15, r3
 8003e30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e34:	4b5d      	ldr	r3, [pc, #372]	; (8003fac <getADCValues+0x5e0>)
 8003e36:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e3e:	4b5b      	ldr	r3, [pc, #364]	; (8003fac <getADCValues+0x5e0>)
 8003e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e4a:	4b58      	ldr	r3, [pc, #352]	; (8003fac <getADCValues+0x5e0>)
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e52:	4a57      	ldr	r2, [pc, #348]	; (8003fb0 <getADCValues+0x5e4>)
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc6] = (avgADCCounterValues[Adc.adc6] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003e5c:	4b53      	ldr	r3, [pc, #332]	; (8003fac <getADCValues+0x5e0>)
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e66:	4413      	add	r3, r2
 8003e68:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003e6c:	ee07 3a90 	vmov	s15, r3
 8003e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e74:	4b4d      	ldr	r3, [pc, #308]	; (8003fac <getADCValues+0x5e0>)
 8003e76:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e7e:	4b4b      	ldr	r3, [pc, #300]	; (8003fac <getADCValues+0x5e0>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e8a:	4b48      	ldr	r3, [pc, #288]	; (8003fac <getADCValues+0x5e0>)
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e92:	4a47      	ldr	r2, [pc, #284]	; (8003fb0 <getADCValues+0x5e4>)
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc7] = (avgADCCounterValues[Adc.adc7] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003e9c:	4b43      	ldr	r3, [pc, #268]	; (8003fac <getADCValues+0x5e0>)
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003eac:	ee07 3a90 	vmov	s15, r3
 8003eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eb4:	4b3d      	ldr	r3, [pc, #244]	; (8003fac <getADCValues+0x5e0>)
 8003eb6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ebe:	4b3b      	ldr	r3, [pc, #236]	; (8003fac <getADCValues+0x5e0>)
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eca:	4b38      	ldr	r3, [pc, #224]	; (8003fac <getADCValues+0x5e0>)
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed2:	4a37      	ldr	r2, [pc, #220]	; (8003fb0 <getADCValues+0x5e4>)
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc8] = (avgADCCounterValues[Adc.adc8] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003edc:	4b33      	ldr	r3, [pc, #204]	; (8003fac <getADCValues+0x5e0>)
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003eec:	ee07 3a90 	vmov	s15, r3
 8003ef0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ef4:	4b2d      	ldr	r3, [pc, #180]	; (8003fac <getADCValues+0x5e0>)
 8003ef6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003efa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003efe:	4b2b      	ldr	r3, [pc, #172]	; (8003fac <getADCValues+0x5e0>)
 8003f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f0a:	4b28      	ldr	r3, [pc, #160]	; (8003fac <getADCValues+0x5e0>)
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f12:	4a27      	ldr	r2, [pc, #156]	; (8003fb0 <getADCValues+0x5e4>)
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc9] = (avgADCCounterValues[Adc.adc9] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003f1c:	4b23      	ldr	r3, [pc, #140]	; (8003fac <getADCValues+0x5e0>)
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003f26:	4413      	add	r3, r2
 8003f28:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003f2c:	ee07 3a90 	vmov	s15, r3
 8003f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f34:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <getADCValues+0x5e0>)
 8003f36:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003f3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f3e:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <getADCValues+0x5e0>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f4a:	4b18      	ldr	r3, [pc, #96]	; (8003fac <getADCValues+0x5e0>)
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f52:	4a17      	ldr	r2, [pc, #92]	; (8003fb0 <getADCValues+0x5e4>)
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc10] = (avgADCCounterValues[Adc.adc10] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003f5c:	4b13      	ldr	r3, [pc, #76]	; (8003fac <getADCValues+0x5e0>)
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003f66:	4413      	add	r3, r2
 8003f68:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003f6c:	ee07 3a90 	vmov	s15, r3
 8003f70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f74:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <getADCValues+0x5e0>)
 8003f76:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <getADCValues+0x5e0>)
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f8a:	4b08      	ldr	r3, [pc, #32]	; (8003fac <getADCValues+0x5e0>)
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f92:	4a07      	ldr	r2, [pc, #28]	; (8003fb0 <getADCValues+0x5e4>)
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc11] = (avgADCCounterValues[Adc.adc11] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003f9c:	4b03      	ldr	r3, [pc, #12]	; (8003fac <getADCValues+0x5e0>)
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	e007      	b.n	8003fb4 <getADCValues+0x5e8>
 8003fa4:	200296b0 	.word	0x200296b0
 8003fa8:	66666667 	.word	0x66666667
 8003fac:	2000007c 	.word	0x2000007c
 8003fb0:	20003324 	.word	0x20003324
 8003fb4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003fb8:	4413      	add	r3, r2
 8003fba:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fc6:	4b9c      	ldr	r3, [pc, #624]	; (8004238 <getADCValues+0x86c>)
 8003fc8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fd0:	4b99      	ldr	r3, [pc, #612]	; (8004238 <getADCValues+0x86c>)
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	ee07 3a90 	vmov	s15, r3
 8003fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fdc:	4b96      	ldr	r3, [pc, #600]	; (8004238 <getADCValues+0x86c>)
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe4:	4a95      	ldr	r2, [pc, #596]	; (800423c <getADCValues+0x870>)
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc12] = (avgADCCounterValues[Adc.adc12] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003fee:	4b92      	ldr	r3, [pc, #584]	; (8004238 <getADCValues+0x86c>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004006:	4b8c      	ldr	r3, [pc, #560]	; (8004238 <getADCValues+0x86c>)
 8004008:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800400c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004010:	4b89      	ldr	r3, [pc, #548]	; (8004238 <getADCValues+0x86c>)
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004014:	ee07 3a90 	vmov	s15, r3
 8004018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800401c:	4b86      	ldr	r3, [pc, #536]	; (8004238 <getADCValues+0x86c>)
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004024:	4a85      	ldr	r2, [pc, #532]	; (800423c <getADCValues+0x870>)
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc13] = (avgADCCounterValues[Adc.adc13] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800402e:	4b82      	ldr	r3, [pc, #520]	; (8004238 <getADCValues+0x86c>)
 8004030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004038:	4413      	add	r3, r2
 800403a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004046:	4b7c      	ldr	r3, [pc, #496]	; (8004238 <getADCValues+0x86c>)
 8004048:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800404c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004050:	4b79      	ldr	r3, [pc, #484]	; (8004238 <getADCValues+0x86c>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	ee07 3a90 	vmov	s15, r3
 8004058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800405c:	4b76      	ldr	r3, [pc, #472]	; (8004238 <getADCValues+0x86c>)
 800405e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004064:	4a75      	ldr	r2, [pc, #468]	; (800423c <getADCValues+0x870>)
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc14] = (avgADCCounterValues[Adc.adc14] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800406e:	4b72      	ldr	r3, [pc, #456]	; (8004238 <getADCValues+0x86c>)
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004078:	4413      	add	r3, r2
 800407a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004086:	4b6c      	ldr	r3, [pc, #432]	; (8004238 <getADCValues+0x86c>)
 8004088:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800408c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004090:	4b69      	ldr	r3, [pc, #420]	; (8004238 <getADCValues+0x86c>)
 8004092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004094:	ee07 3a90 	vmov	s15, r3
 8004098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800409c:	4b66      	ldr	r3, [pc, #408]	; (8004238 <getADCValues+0x86c>)
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a4:	4a65      	ldr	r2, [pc, #404]	; (800423c <getADCValues+0x870>)
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc15] = (avgADCCounterValues[Adc.adc15] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80040ae:	4b62      	ldr	r3, [pc, #392]	; (8004238 <getADCValues+0x86c>)
 80040b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80040b8:	4413      	add	r3, r2
 80040ba:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040c6:	4b5c      	ldr	r3, [pc, #368]	; (8004238 <getADCValues+0x86c>)
 80040c8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80040cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040d0:	4b59      	ldr	r3, [pc, #356]	; (8004238 <getADCValues+0x86c>)
 80040d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d4:	ee07 3a90 	vmov	s15, r3
 80040d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040dc:	4b56      	ldr	r3, [pc, #344]	; (8004238 <getADCValues+0x86c>)
 80040de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e4:	4a55      	ldr	r2, [pc, #340]	; (800423c <getADCValues+0x870>)
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	edc3 7a00 	vstr	s15, [r3]
	//for other adc inputs, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (2)
	adcValues[Adc.spareSpiADC] = (avgADCCounterValues[Adc.spareSpiADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 80040ee:	4b52      	ldr	r3, [pc, #328]	; (8004238 <getADCValues+0x86c>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80040f8:	4413      	add	r3, r2
 80040fa:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004106:	4b4c      	ldr	r3, [pc, #304]	; (8004238 <getADCValues+0x86c>)
 8004108:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800410c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004110:	4b49      	ldr	r3, [pc, #292]	; (8004238 <getADCValues+0x86c>)
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	ee07 3a90 	vmov	s15, r3
 8004118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800411c:	4b46      	ldr	r3, [pc, #280]	; (8004238 <getADCValues+0x86c>)
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004124:	4a45      	ldr	r2, [pc, #276]	; (800423c <getADCValues+0x870>)
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareUartADC] = (avgADCCounterValues[Adc.spareUartADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800412e:	4b42      	ldr	r3, [pc, #264]	; (8004238 <getADCValues+0x86c>)
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004138:	4413      	add	r3, r2
 800413a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800413e:	ee07 3a90 	vmov	s15, r3
 8004142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004146:	4b3c      	ldr	r3, [pc, #240]	; (8004238 <getADCValues+0x86c>)
 8004148:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800414c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004150:	4b39      	ldr	r3, [pc, #228]	; (8004238 <getADCValues+0x86c>)
 8004152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004154:	ee07 3a90 	vmov	s15, r3
 8004158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800415c:	4b36      	ldr	r3, [pc, #216]	; (8004238 <getADCValues+0x86c>)
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004164:	4a35      	ldr	r2, [pc, #212]	; (800423c <getADCValues+0x870>)
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.configADC] = (avgADCCounterValues[Adc.configADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800416e:	4b32      	ldr	r3, [pc, #200]	; (8004238 <getADCValues+0x86c>)
 8004170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004178:	4413      	add	r3, r2
 800417a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004186:	4b2c      	ldr	r3, [pc, #176]	; (8004238 <getADCValues+0x86c>)
 8004188:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800418c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004190:	4b29      	ldr	r3, [pc, #164]	; (8004238 <getADCValues+0x86c>)
 8004192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800419c:	4b26      	ldr	r3, [pc, #152]	; (8004238 <getADCValues+0x86c>)
 800419e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a4:	4a25      	ldr	r2, [pc, #148]	; (800423c <getADCValues+0x870>)
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.zionADC] = (avgADCCounterValues[Adc.zionADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 80041ae:	4b22      	ldr	r3, [pc, #136]	; (8004238 <getADCValues+0x86c>)
 80041b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80041b8:	4413      	add	r3, r2
 80041ba:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041c6:	4b1c      	ldr	r3, [pc, #112]	; (8004238 <getADCValues+0x86c>)
 80041c8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80041cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041d0:	4b19      	ldr	r3, [pc, #100]	; (8004238 <getADCValues+0x86c>)
 80041d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d4:	ee07 3a90 	vmov	s15, r3
 80041d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041dc:	4b16      	ldr	r3, [pc, #88]	; (8004238 <getADCValues+0x86c>)
 80041de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e4:	4a15      	ldr	r2, [pc, #84]	; (800423c <getADCValues+0x870>)
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareI2cADC] = (avgADCCounterValues[Adc.spareI2cADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 80041ee:	4b12      	ldr	r3, [pc, #72]	; (8004238 <getADCValues+0x86c>)
 80041f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80041f8:	4413      	add	r3, r2
 80041fa:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004206:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <getADCValues+0x86c>)
 8004208:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800420c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004210:	4b09      	ldr	r3, [pc, #36]	; (8004238 <getADCValues+0x86c>)
 8004212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800421c:	4b06      	ldr	r3, [pc, #24]	; (8004238 <getADCValues+0x86c>)
 800421e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004224:	4a05      	ldr	r2, [pc, #20]	; (800423c <getADCValues+0x870>)
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	edc3 7a00 	vstr	s15, [r3]
	return adcValues;
 800422e:	4b03      	ldr	r3, [pc, #12]	; (800423c <getADCValues+0x870>)
}
 8004230:	4618      	mov	r0, r3
 8004232:	3778      	adds	r7, #120	; 0x78
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	2000007c 	.word	0x2000007c
 800423c:	20003324 	.word	0x20003324

08004240 <HAL_ADC_ConvCpltCallback>:
//// Called when first half of buffer is filled
//void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
//}
//
//// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <winbondSPIDeviceIDRead>:

void winbondSPIDeviceIDRead(SPI_HandleTypeDef hspi, uint8_t* data){
 8004254:	b084      	sub	sp, #16
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af02      	add	r7, sp, #8
 800425c:	f107 0c10 	add.w	ip, r7, #16
 8004260:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t dataSent[1] = {0x9f};
 8004264:	239f      	movs	r3, #159	; 0x9f
 8004266:	713b      	strb	r3, [r7, #4]
	SPARE_SS_ON;
 8004268:	2201      	movs	r2, #1
 800426a:	2120      	movs	r1, #32
 800426c:	480b      	ldr	r0, [pc, #44]	; (800429c <winbondSPIDeviceIDRead+0x48>)
 800426e:	f006 fe2b 	bl	800aec8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi, (uint8_t*)dataSent, data,4,100);
 8004272:	1d39      	adds	r1, r7, #4
 8004274:	2364      	movs	r3, #100	; 0x64
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	2304      	movs	r3, #4
 800427a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800427c:	f107 0010 	add.w	r0, r7, #16
 8004280:	f009 fc3a 	bl	800daf8 <HAL_SPI_TransmitReceive>
	SPARE_SS_OFF;
 8004284:	2200      	movs	r2, #0
 8004286:	2120      	movs	r1, #32
 8004288:	4804      	ldr	r0, [pc, #16]	; (800429c <winbondSPIDeviceIDRead+0x48>)
 800428a:	f006 fe1d 	bl	800aec8 <HAL_GPIO_WritePin>
	int x;
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004298:	b004      	add	sp, #16
 800429a:	4770      	bx	lr
 800429c:	40021c00 	.word	0x40021c00

080042a0 <spareUartTransmitRead>:

void spareUartTransmitRead(char *message){
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b0e8      	sub	sp, #416	; 0x1a0
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	1d3b      	adds	r3, r7, #4
 80042a8:	6018      	str	r0, [r3, #0]
	char uart_buf[200];
	char uart_receive_buf[200];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, message);
 80042aa:	1d3b      	adds	r3, r7, #4
 80042ac:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80042b0:	6819      	ldr	r1, [r3, #0]
 80042b2:	4610      	mov	r0, r2
 80042b4:	f00f ffee 	bl	8014294 <siprintf>
 80042b8:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
	HAL_UART_Transmit(&SPARE_UART,(uint8_t *)uart_buf, uart_buf_len,1000);
 80042bc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 80042c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ca:	4808      	ldr	r0, [pc, #32]	; (80042ec <spareUartTransmitRead+0x4c>)
 80042cc:	f00b f89a 	bl	800f404 <HAL_UART_Transmit>
	HAL_UART_Receive(&SPARE_UART,(uint8_t*)uart_receive_buf, sizeof(uart_receive_buf),1000);
 80042d0:	f107 010c 	add.w	r1, r7, #12
 80042d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042d8:	22c8      	movs	r2, #200	; 0xc8
 80042da:	4804      	ldr	r0, [pc, #16]	; (80042ec <spareUartTransmitRead+0x4c>)
 80042dc:	f00b f923 	bl	800f526 <HAL_UART_Receive>
	int x;
}
 80042e0:	bf00      	nop
 80042e2:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	2002e6ec 	.word	0x2002e6ec

080042f0 <startHeartbeat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startHeartbeat */
void startHeartbeat(void *argument)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 80042f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042fc:	4803      	ldr	r0, [pc, #12]	; (800430c <startHeartbeat+0x1c>)
 80042fe:	f006 fdfc 	bl	800aefa <HAL_GPIO_TogglePin>
	  osDelay(500);
 8004302:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004306:	f00c fb09 	bl	801091c <osDelay>
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 800430a:	e7f5      	b.n	80042f8 <startHeartbeat+0x8>
 800430c:	40022000 	.word	0x40022000

08004310 <startADCRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCRead */
void startADCRead(void *argument)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCRead */
  /* Infinite loop */
  for(;;)
  {
	  //empty out the data ready variables and the adc3_bufs
	memset(adcRestart,0,sizeof(adcRestart));
 8004318:	2203      	movs	r2, #3
 800431a:	2100      	movs	r1, #0
 800431c:	4815      	ldr	r0, [pc, #84]	; (8004374 <startADCRead+0x64>)
 800431e:	f00f f934 	bl	801358a <memset>
	memset(adc1_buf, 0, sizeof(adc1_buf));
 8004322:	f242 7210 	movw	r2, #10000	; 0x2710
 8004326:	2100      	movs	r1, #0
 8004328:	4813      	ldr	r0, [pc, #76]	; (8004378 <startADCRead+0x68>)
 800432a:	f00f f92e 	bl	801358a <memset>
	memset(adc2_buf, 0, sizeof(adc2_buf));
 800432e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004332:	2100      	movs	r1, #0
 8004334:	4811      	ldr	r0, [pc, #68]	; (800437c <startADCRead+0x6c>)
 8004336:	f00f f928 	bl	801358a <memset>
	memset(adc3_buf, 0, sizeof(adc3_buf));
 800433a:	f242 7210 	movw	r2, #10000	; 0x2710
 800433e:	2100      	movs	r1, #0
 8004340:	480f      	ldr	r0, [pc, #60]	; (8004380 <startADCRead+0x70>)
 8004342:	f00f f922 	bl	801358a <memset>
	//restart the DMAs.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	490b      	ldr	r1, [pc, #44]	; (8004378 <startADCRead+0x68>)
 800434c:	480d      	ldr	r0, [pc, #52]	; (8004384 <startADCRead+0x74>)
 800434e:	f005 fae9 	bl	8009924 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8004352:	f241 3288 	movw	r2, #5000	; 0x1388
 8004356:	4909      	ldr	r1, [pc, #36]	; (800437c <startADCRead+0x6c>)
 8004358:	480b      	ldr	r0, [pc, #44]	; (8004388 <startADCRead+0x78>)
 800435a:	f005 fae3 	bl	8009924 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 800435e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004362:	4907      	ldr	r1, [pc, #28]	; (8004380 <startADCRead+0x70>)
 8004364:	4809      	ldr	r0, [pc, #36]	; (800438c <startADCRead+0x7c>)
 8004366:	f005 fadd 	bl	8009924 <HAL_ADC_Start_DMA>
    osDelay(600);
 800436a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800436e:	f00c fad5 	bl	801091c <osDelay>
	memset(adcRestart,0,sizeof(adcRestart));
 8004372:	e7d1      	b.n	8004318 <startADCRead+0x8>
 8004374:	20029284 	.word	0x20029284
 8004378:	200296b0 	.word	0x200296b0
 800437c:	2002e770 	.word	0x2002e770
 8004380:	2002bfcc 	.word	0x2002bfcc
 8004384:	2002be44 	.word	0x2002be44
 8004388:	20028d40 	.word	0x20028d40
 800438c:	2002bef0 	.word	0x2002bef0

08004390 <GetDaScreenBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetDaScreenBlink */
void GetDaScreenBlink(void *argument)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDaScreenBlink */
  /* Infinite loop */
//	 int x = 0;
//	 float *adcValues;
//	 HAL_StatusTypeDef ret;
	 initializeDisplay();
 8004398:	f000 fe42 	bl	8005020 <initializeDisplay>
	 uint32_t ulNotifiedValue;
	 uint8_t button_val = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	73fb      	strb	r3, [r7, #15]
	 uint8_t menu_val = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	73bb      	strb	r3, [r7, #14]
	 uint8_t running_menu = 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	737b      	strb	r3, [r7, #13]
//	 int *readI2c;
//	 int zionCleared=0;
	   for(;;)
	   {
	 	  ulNotifiedValue = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60bb      	str	r3, [r7, #8]
	 	  xTaskNotifyWait(NOTIFY_NOCLEAR, NOTIFY_CLEARALL, &ulNotifiedValue, portMAX_DELAY);
 80043ac:	f107 0208 	add.w	r2, r7, #8
 80043b0:	f04f 33ff 	mov.w	r3, #4294967295
 80043b4:	21ff      	movs	r1, #255	; 0xff
 80043b6:	2000      	movs	r0, #0
 80043b8:	f00d ffe6 	bl	8012388 <xTaskNotifyWait>
	 	  // button press decode
	 	  button_val = (ulNotifiedValue & NOTIFY_BTN_MASK);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	f003 030f 	and.w	r3, r3, #15
 80043c4:	73fb      	strb	r3, [r7, #15]
	 	  menu_val = ((ulNotifiedValue & NOTIFY_MENU_MASK) >> NOTIFY_MENU_BIT);
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	73bb      	strb	r3, [r7, #14]
	 	  running_menu = ((ulNotifiedValue & NOTIFY_RUN_MENU_MASK) >> NOTIFY_MENU_RUN_BIT);
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	0a1b      	lsrs	r3, r3, #8
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	737b      	strb	r3, [r7, #13]
	 //	  printf("highlighed menu: %d\n\r", menu_val);
	 //	  printf("button_press: %d\r\n", button_val);

	 	  // If the BACK button was pressed, just run the SEL button case with the previous menu

		  switch(running_menu)
 80043de:	7b7b      	ldrb	r3, [r7, #13]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d82c      	bhi.n	8004440 <GetDaScreenBlink+0xb0>
 80043e6:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <GetDaScreenBlink+0x5c>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	08004411 	.word	0x08004411
 80043f0:	080043fd 	.word	0x080043fd
 80043f4:	08004421 	.word	0x08004421
 80043f8:	08004431 	.word	0x08004431
		  {
		  case BOOT_MENU:
		  {
			  printf("BOOT_MENU\r\n");
 80043fc:	4812      	ldr	r0, [pc, #72]	; (8004448 <GetDaScreenBlink+0xb8>)
 80043fe:	f00f ff3b 	bl	8014278 <puts>
			  drawBootMenu(menu_val, button_val, running_menu);
 8004402:	7bbb      	ldrb	r3, [r7, #14]
 8004404:	7b7a      	ldrb	r2, [r7, #13]
 8004406:	7bf9      	ldrb	r1, [r7, #15]
 8004408:	4618      	mov	r0, r3
 800440a:	f002 ff1d 	bl	8007248 <drawBootMenu>
			  //uartTransmitChar("switch BOOT_MENU\r\n",7);
			  break;
 800440e:	e017      	b.n	8004440 <GetDaScreenBlink+0xb0>
		  }
		  case MAIN_MENU:
		  {
			  printf("MAIN_MENU\r\n");
 8004410:	480e      	ldr	r0, [pc, #56]	; (800444c <GetDaScreenBlink+0xbc>)
 8004412:	f00f ff31 	bl	8014278 <puts>
			  drawMainMenu(menu_val);
 8004416:	7bbb      	ldrb	r3, [r7, #14]
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fe2b 	bl	8005074 <drawMainMenu>
			  //uartTransmitChar("switch MAIN_MENU\r\n",7);
			  break;
 800441e:	e00f      	b.n	8004440 <GetDaScreenBlink+0xb0>
		  }
		  case STATUS_MENU:
		  {
			  printf("STATUS_MENU\r\n");
 8004420:	480b      	ldr	r0, [pc, #44]	; (8004450 <GetDaScreenBlink+0xc0>)
 8004422:	f00f ff29 	bl	8014278 <puts>
			  drawStatusMenu(menu_val);
 8004426:	7bbb      	ldrb	r3, [r7, #14]
 8004428:	4618      	mov	r0, r3
 800442a:	f001 f921 	bl	8005670 <drawStatusMenu>
			  //uartTransmitChar("switch STATUS_MENU\r\n",7);
			  break;
 800442e:	e007      	b.n	8004440 <GetDaScreenBlink+0xb0>
		  }
		  case SYSTEM_INFO_MENU:
		  {
			  printf("SYSTEM INFO MENU\r\n");
 8004430:	4808      	ldr	r0, [pc, #32]	; (8004454 <GetDaScreenBlink+0xc4>)
 8004432:	f00f ff21 	bl	8014278 <puts>
			  //uartTransmitChar("switch SYSTEM INFO_MENU\r\n",7);
			  drawSystemInfoMenu(menu_val);
 8004436:	7bbb      	ldrb	r3, [r7, #14]
 8004438:	4618      	mov	r0, r3
 800443a:	f002 fab5 	bl	80069a8 <drawSystemInfoMenu>
			  break;
 800443e:	bf00      	nop
		  }
		  }
	 	  osDelay(100);
 8004440:	2064      	movs	r0, #100	; 0x64
 8004442:	f00c fa6b 	bl	801091c <osDelay>
	 	  ulNotifiedValue = 0;
 8004446:	e7af      	b.n	80043a8 <GetDaScreenBlink+0x18>
 8004448:	08017674 	.word	0x08017674
 800444c:	08017680 	.word	0x08017680
 8004450:	0801768c 	.word	0x0801768c
 8004454:	0801769c 	.word	0x0801769c

08004458 <startGpioInputRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGpioInputRead */
void startGpioInputRead(void *argument)
{
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGpioInputRead */
  /* Infinite loop */
  for(;;)
  {
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8004460:	4b42      	ldr	r3, [pc, #264]	; (800456c <startGpioInputRead+0x114>)
 8004462:	681c      	ldr	r4, [r3, #0]
 8004464:	2180      	movs	r1, #128	; 0x80
 8004466:	4842      	ldr	r0, [pc, #264]	; (8004570 <startGpioInputRead+0x118>)
 8004468:	f006 fd16 	bl	800ae98 <HAL_GPIO_ReadPin>
 800446c:	4603      	mov	r3, r0
 800446e:	461a      	mov	r2, r3
 8004470:	4b40      	ldr	r3, [pc, #256]	; (8004574 <startGpioInputRead+0x11c>)
 8004472:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input1] = HAL_GPIO_ReadPin(UI_INPUT1_GPIO_Port,UI_INPUT1_Pin);
 8004474:	4b3d      	ldr	r3, [pc, #244]	; (800456c <startGpioInputRead+0x114>)
 8004476:	685c      	ldr	r4, [r3, #4]
 8004478:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800447c:	483e      	ldr	r0, [pc, #248]	; (8004578 <startGpioInputRead+0x120>)
 800447e:	f006 fd0b 	bl	800ae98 <HAL_GPIO_ReadPin>
 8004482:	4603      	mov	r3, r0
 8004484:	461a      	mov	r2, r3
 8004486:	4b3b      	ldr	r3, [pc, #236]	; (8004574 <startGpioInputRead+0x11c>)
 8004488:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input2] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT2_Pin);
 800448a:	4b38      	ldr	r3, [pc, #224]	; (800456c <startGpioInputRead+0x114>)
 800448c:	689c      	ldr	r4, [r3, #8]
 800448e:	2110      	movs	r1, #16
 8004490:	483a      	ldr	r0, [pc, #232]	; (800457c <startGpioInputRead+0x124>)
 8004492:	f006 fd01 	bl	800ae98 <HAL_GPIO_ReadPin>
 8004496:	4603      	mov	r3, r0
 8004498:	461a      	mov	r2, r3
 800449a:	4b36      	ldr	r3, [pc, #216]	; (8004574 <startGpioInputRead+0x11c>)
 800449c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input3] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT3_Pin);
 800449e:	4b33      	ldr	r3, [pc, #204]	; (800456c <startGpioInputRead+0x114>)
 80044a0:	68dc      	ldr	r4, [r3, #12]
 80044a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044a6:	4835      	ldr	r0, [pc, #212]	; (800457c <startGpioInputRead+0x124>)
 80044a8:	f006 fcf6 	bl	800ae98 <HAL_GPIO_ReadPin>
 80044ac:	4603      	mov	r3, r0
 80044ae:	461a      	mov	r2, r3
 80044b0:	4b30      	ldr	r3, [pc, #192]	; (8004574 <startGpioInputRead+0x11c>)
 80044b2:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input4] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT4_Pin);
 80044b4:	4b2d      	ldr	r3, [pc, #180]	; (800456c <startGpioInputRead+0x114>)
 80044b6:	691c      	ldr	r4, [r3, #16]
 80044b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044bc:	482f      	ldr	r0, [pc, #188]	; (800457c <startGpioInputRead+0x124>)
 80044be:	f006 fceb 	bl	800ae98 <HAL_GPIO_ReadPin>
 80044c2:	4603      	mov	r3, r0
 80044c4:	461a      	mov	r2, r3
 80044c6:	4b2b      	ldr	r3, [pc, #172]	; (8004574 <startGpioInputRead+0x11c>)
 80044c8:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input5] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT5_Pin);
 80044ca:	4b28      	ldr	r3, [pc, #160]	; (800456c <startGpioInputRead+0x114>)
 80044cc:	695c      	ldr	r4, [r3, #20]
 80044ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80044d2:	482a      	ldr	r0, [pc, #168]	; (800457c <startGpioInputRead+0x124>)
 80044d4:	f006 fce0 	bl	800ae98 <HAL_GPIO_ReadPin>
 80044d8:	4603      	mov	r3, r0
 80044da:	461a      	mov	r2, r3
 80044dc:	4b25      	ldr	r3, [pc, #148]	; (8004574 <startGpioInputRead+0x11c>)
 80044de:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input6] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT6_Pin);
 80044e0:	4b22      	ldr	r3, [pc, #136]	; (800456c <startGpioInputRead+0x114>)
 80044e2:	699c      	ldr	r4, [r3, #24]
 80044e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044e8:	4824      	ldr	r0, [pc, #144]	; (800457c <startGpioInputRead+0x124>)
 80044ea:	f006 fcd5 	bl	800ae98 <HAL_GPIO_ReadPin>
 80044ee:	4603      	mov	r3, r0
 80044f0:	461a      	mov	r2, r3
 80044f2:	4b20      	ldr	r3, [pc, #128]	; (8004574 <startGpioInputRead+0x11c>)
 80044f4:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input7] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT7_Pin);
 80044f6:	4b1d      	ldr	r3, [pc, #116]	; (800456c <startGpioInputRead+0x114>)
 80044f8:	69dc      	ldr	r4, [r3, #28]
 80044fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044fe:	481f      	ldr	r0, [pc, #124]	; (800457c <startGpioInputRead+0x124>)
 8004500:	f006 fcca 	bl	800ae98 <HAL_GPIO_ReadPin>
 8004504:	4603      	mov	r3, r0
 8004506:	461a      	mov	r2, r3
 8004508:	4b1a      	ldr	r3, [pc, #104]	; (8004574 <startGpioInputRead+0x11c>)
 800450a:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input8] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT8_Pin);
 800450c:	4b17      	ldr	r3, [pc, #92]	; (800456c <startGpioInputRead+0x114>)
 800450e:	6a1c      	ldr	r4, [r3, #32]
 8004510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004514:	4819      	ldr	r0, [pc, #100]	; (800457c <startGpioInputRead+0x124>)
 8004516:	f006 fcbf 	bl	800ae98 <HAL_GPIO_ReadPin>
 800451a:	4603      	mov	r3, r0
 800451c:	461a      	mov	r2, r3
 800451e:	4b15      	ldr	r3, [pc, #84]	; (8004574 <startGpioInputRead+0x11c>)
 8004520:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input9] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT9_Pin);
 8004522:	4b12      	ldr	r3, [pc, #72]	; (800456c <startGpioInputRead+0x114>)
 8004524:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004526:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800452a:	4814      	ldr	r0, [pc, #80]	; (800457c <startGpioInputRead+0x124>)
 800452c:	f006 fcb4 	bl	800ae98 <HAL_GPIO_ReadPin>
 8004530:	4603      	mov	r3, r0
 8004532:	461a      	mov	r2, r3
 8004534:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <startGpioInputRead+0x11c>)
 8004536:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input10] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT10_Pin);
 8004538:	4b0c      	ldr	r3, [pc, #48]	; (800456c <startGpioInputRead+0x114>)
 800453a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800453c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004540:	480e      	ldr	r0, [pc, #56]	; (800457c <startGpioInputRead+0x124>)
 8004542:	f006 fca9 	bl	800ae98 <HAL_GPIO_ReadPin>
 8004546:	4603      	mov	r3, r0
 8004548:	461a      	mov	r2, r3
 800454a:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <startGpioInputRead+0x11c>)
 800454c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input11] = HAL_GPIO_ReadPin(UI_INPUT11_GPIO_Port,UI_INPUT11_Pin);
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <startGpioInputRead+0x114>)
 8004550:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004552:	2108      	movs	r1, #8
 8004554:	480a      	ldr	r0, [pc, #40]	; (8004580 <startGpioInputRead+0x128>)
 8004556:	f006 fc9f 	bl	800ae98 <HAL_GPIO_ReadPin>
 800455a:	4603      	mov	r3, r0
 800455c:	461a      	mov	r2, r3
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <startGpioInputRead+0x11c>)
 8004560:	551a      	strb	r2, [r3, r4]
	  osDelay(950);
 8004562:	f240 30b6 	movw	r0, #950	; 0x3b6
 8004566:	f00c f9d9 	bl	801091c <osDelay>
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 800456a:	e779      	b.n	8004460 <startGpioInputRead+0x8>
 800456c:	20000014 	.word	0x20000014
 8004570:	40020400 	.word	0x40020400
 8004574:	20028d34 	.word	0x20028d34
 8004578:	40020800 	.word	0x40020800
 800457c:	40020c00 	.word	0x40020c00
 8004580:	40021000 	.word	0x40021000

08004584 <startNavigationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startNavigationTask */
void startNavigationTask(void *argument)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startNavigationTask */
	uint8_t menu_highlight = MENU_TOP;	// variable indicates what menu item is currently being highlighted
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
	uint8_t	menu_run = MAIN_MENU;		// variable to track what menu is currently running
 8004590:	2301      	movs	r3, #1
 8004592:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_menu = menu_run;		// variable to track what the previous menu running was, this is used for the BACK button
 8004594:	7bbb      	ldrb	r3, [r7, #14]
 8004596:	737b      	strb	r3, [r7, #13]
	uint8_t menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 8004598:	2303      	movs	r3, #3
 800459a:	733b      	strb	r3, [r7, #12]
	uint8_t prev_menu_highlight = menu_highlight; //variable to track previous menu highlight
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	72fb      	strb	r3, [r7, #11]
	// Clear button flags here

  /* Infinite loop */
  for(;;)
  {
	switch(inputButtonSet)
 80045a0:	4b55      	ldr	r3, [pc, #340]	; (80046f8 <startNavigationTask+0x174>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d86f      	bhi.n	800468a <startNavigationTask+0x106>
 80045aa:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <startNavigationTask+0x2c>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045f3 	.word	0x080045f3
 80045b8:	08004627 	.word	0x08004627
 80045bc:	08004655 	.word	0x08004655
	{
	case UP:
	{
		if ((menu_highlight == MENU_TOP) || bootButtons.bootModeSet)
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d070      	beq.n	80046a8 <startNavigationTask+0x124>
 80045c6:	4b4d      	ldr	r3, [pc, #308]	; (80046fc <startNavigationTask+0x178>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d16c      	bne.n	80046a8 <startNavigationTask+0x124>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight - 1;
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
			// task notify the display task with UP and current highlighted item
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu indicator highlight flags
			// [8:11]: currently running menu flags
			xTaskNotify(DatScreenBlinkHandle, (UP | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80045d4:	4b4a      	ldr	r3, [pc, #296]	; (8004700 <startNavigationTask+0x17c>)
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	f043 0201 	orr.w	r2, r3, #1
 80045e0:	7bbb      	ldrb	r3, [r7, #14]
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	4313      	orrs	r3, r2
 80045e6:	4619      	mov	r1, r3
 80045e8:	2300      	movs	r3, #0
 80045ea:	2204      	movs	r2, #4
 80045ec:	f00d ff26 	bl	801243c <xTaskGenericNotify>
		}
		break;
 80045f0:	e05a      	b.n	80046a8 <startNavigationTask+0x124>
	}
	case DWN:
	{
		if ((menu_highlight >= menu_Max_Items) || (bootButtons.bootModeSet))
 80045f2:	7bfa      	ldrb	r2, [r7, #15]
 80045f4:	7b3b      	ldrb	r3, [r7, #12]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d258      	bcs.n	80046ac <startNavigationTask+0x128>
 80045fa:	4b40      	ldr	r3, [pc, #256]	; (80046fc <startNavigationTask+0x178>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d154      	bne.n	80046ac <startNavigationTask+0x128>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight + 1;
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	3301      	adds	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu selection flags
			// [8:11]: currently running menu flags
			// [12:15]: previously running menu flags
			xTaskNotify(DatScreenBlinkHandle, (DWN | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004608:	4b3d      	ldr	r3, [pc, #244]	; (8004700 <startNavigationTask+0x17c>)
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	f043 0202 	orr.w	r2, r3, #2
 8004614:	7bbb      	ldrb	r3, [r7, #14]
 8004616:	021b      	lsls	r3, r3, #8
 8004618:	4313      	orrs	r3, r2
 800461a:	4619      	mov	r1, r3
 800461c:	2300      	movs	r3, #0
 800461e:	2204      	movs	r2, #4
 8004620:	f00d ff0c 	bl	801243c <xTaskGenericNotify>
		}
		break;
 8004624:	e042      	b.n	80046ac <startNavigationTask+0x128>
	}
	case BACK:
	{
		if(!(bootButtons.bootModeSet)){
 8004626:	4b35      	ldr	r3, [pc, #212]	; (80046fc <startNavigationTask+0x178>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d103      	bne.n	8004636 <startNavigationTask+0xb2>
			menu_run = prev_menu;
 800462e:	7b7b      	ldrb	r3, [r7, #13]
 8004630:	73bb      	strb	r3, [r7, #14]
			menu_highlight = prev_menu_highlight; //set the highlight back to where it was for the previous menu.
 8004632:	7afb      	ldrb	r3, [r7, #11]
 8004634:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (BACK | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004636:	4b32      	ldr	r3, [pc, #200]	; (8004700 <startNavigationTask+0x17c>)
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	f043 0203 	orr.w	r2, r3, #3
 8004642:	7bbb      	ldrb	r3, [r7, #14]
 8004644:	021b      	lsls	r3, r3, #8
 8004646:	4313      	orrs	r3, r2
 8004648:	4619      	mov	r1, r3
 800464a:	2300      	movs	r3, #0
 800464c:	2204      	movs	r2, #4
 800464e:	f00d fef5 	bl	801243c <xTaskGenericNotify>
		break;
 8004652:	e02c      	b.n	80046ae <startNavigationTask+0x12a>
	}
	case SEL:
	{
		if(menu_run==MAIN_MENU){
 8004654:	7bbb      	ldrb	r3, [r7, #14]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d108      	bne.n	800466c <startNavigationTask+0xe8>
			prev_menu = menu_run;		// save currently running menu for BACK button
 800465a:	7bbb      	ldrb	r3, [r7, #14]
 800465c:	737b      	strb	r3, [r7, #13]
			menu_run = menu_highlight+1;	// update the currently running menu to what the user SELECTED. Requires +1 to match with menu values
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	3301      	adds	r3, #1
 8004662:	73bb      	strb	r3, [r7, #14]
			prev_menu_highlight = menu_highlight; //keep track of the previous menu's highlight for when back is pressed
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	72fb      	strb	r3, [r7, #11]
			menu_highlight=MENU_TOP; //reset the menu highlight for the next menu
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (SEL | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 800466c:	4b24      	ldr	r3, [pc, #144]	; (8004700 <startNavigationTask+0x17c>)
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	7bfb      	ldrb	r3, [r7, #15]
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	f043 0204 	orr.w	r2, r3, #4
 8004678:	7bbb      	ldrb	r3, [r7, #14]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	4313      	orrs	r3, r2
 800467e:	4619      	mov	r1, r3
 8004680:	2300      	movs	r3, #0
 8004682:	2204      	movs	r2, #4
 8004684:	f00d feda 	bl	801243c <xTaskGenericNotify>
		break;
 8004688:	e011      	b.n	80046ae <startNavigationTask+0x12a>
	}
	default:
		// task notify the display task with no button press.  Just refresh the current running menu.
		xTaskNotify(DatScreenBlinkHandle, (NO_BTN_PRESS | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 800468a:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <startNavigationTask+0x17c>)
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	f043 0205 	orr.w	r2, r3, #5
 8004696:	7bbb      	ldrb	r3, [r7, #14]
 8004698:	021b      	lsls	r3, r3, #8
 800469a:	4313      	orrs	r3, r2
 800469c:	4619      	mov	r1, r3
 800469e:	2300      	movs	r3, #0
 80046a0:	2204      	movs	r2, #4
 80046a2:	f00d fecb 	bl	801243c <xTaskGenericNotify>
		break;
 80046a6:	e002      	b.n	80046ae <startNavigationTask+0x12a>
		break;
 80046a8:	bf00      	nop
 80046aa:	e000      	b.n	80046ae <startNavigationTask+0x12a>
		break;
 80046ac:	bf00      	nop
	}
	//initialize the max indicator for each menu
	switch(menu_run){
 80046ae:	7bbb      	ldrb	r3, [r7, #14]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d816      	bhi.n	80046e4 <startNavigationTask+0x160>
 80046b6:	a201      	add	r2, pc, #4	; (adr r2, 80046bc <startNavigationTask+0x138>)
 80046b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046bc:	080046d3 	.word	0x080046d3
 80046c0:	080046cd 	.word	0x080046cd
 80046c4:	080046d9 	.word	0x080046d9
 80046c8:	080046df 	.word	0x080046df

	case BOOT_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 80046cc:	2305      	movs	r3, #5
 80046ce:	733b      	strb	r3, [r7, #12]
		break;
 80046d0:	e00b      	b.n	80046ea <startNavigationTask+0x166>
	}
	case MAIN_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 80046d2:	2303      	movs	r3, #3
 80046d4:	733b      	strb	r3, [r7, #12]
		break;
 80046d6:	e008      	b.n	80046ea <startNavigationTask+0x166>
	}
	case STATUS_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_STATUS_MENU;
 80046d8:	2303      	movs	r3, #3
 80046da:	733b      	strb	r3, [r7, #12]
		break;
 80046dc:	e005      	b.n	80046ea <startNavigationTask+0x166>
	}
	case SYSTEM_INFO_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_SYSTEM_INFO_MENU;
 80046de:	2302      	movs	r3, #2
 80046e0:	733b      	strb	r3, [r7, #12]
		break;
 80046e2:	e002      	b.n	80046ea <startNavigationTask+0x166>
	}
	default:
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 80046e4:	2305      	movs	r3, #5
 80046e6:	733b      	strb	r3, [r7, #12]
		break;
 80046e8:	bf00      	nop
	}
	inputButtonSet = NO_BTN_PRESS;
 80046ea:	4b03      	ldr	r3, [pc, #12]	; (80046f8 <startNavigationTask+0x174>)
 80046ec:	2205      	movs	r2, #5
 80046ee:	701a      	strb	r2, [r3, #0]
    osDelay(200);
 80046f0:	20c8      	movs	r0, #200	; 0xc8
 80046f2:	f00c f913 	bl	801091c <osDelay>
	switch(inputButtonSet)
 80046f6:	e753      	b.n	80045a0 <startNavigationTask+0x1c>
 80046f8:	200000dc 	.word	0x200000dc
 80046fc:	200032ac 	.word	0x200032ac
 8004700:	20030f40 	.word	0x20030f40

08004704 <startErrorLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startErrorLEDs */
void startErrorLEDs(void *argument)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af02      	add	r7, sp, #8
 800470a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	int i2cCheck;
	float * presentADCValues;
  for(;;)
  {
	  if(adcRestart[0] && adcRestart[1] && adcRestart[2]){
 800470c:	4ba4      	ldr	r3, [pc, #656]	; (80049a0 <startErrorLEDs+0x29c>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <startErrorLEDs+0x26>
 8004714:	4ba2      	ldr	r3, [pc, #648]	; (80049a0 <startErrorLEDs+0x29c>)
 8004716:	785b      	ldrb	r3, [r3, #1]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d006      	beq.n	800472a <startErrorLEDs+0x26>
 800471c:	4ba0      	ldr	r3, [pc, #640]	; (80049a0 <startErrorLEDs+0x29c>)
 800471e:	789b      	ldrb	r3, [r3, #2]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <startErrorLEDs+0x26>
		  presentADCValues = getADCValues();
 8004724:	f7ff f952 	bl	80039cc <getADCValues>
 8004728:	60f8      	str	r0, [r7, #12]
	  }
	  if(*(presentADCValues+Adc.adc0) > 3.5){
 800472a:	4b9e      	ldr	r3, [pc, #632]	; (80049a4 <startErrorLEDs+0x2a0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	edd3 7a00 	vldr	s15, [r3]
 8004738:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 800473c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004744:	dd03      	ble.n	800474e <startErrorLEDs+0x4a>
		  errorLED.vsysPMIFault=0;
 8004746:	4b98      	ldr	r3, [pc, #608]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004748:	2200      	movs	r2, #0
 800474a:	605a      	str	r2, [r3, #4]
 800474c:	e002      	b.n	8004754 <startErrorLEDs+0x50>
	  }
	  else{
		  errorLED.vsysPMIFault=1;
 800474e:	4b96      	ldr	r3, [pc, #600]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004750:	2201      	movs	r2, #1
 8004752:	605a      	str	r2, [r3, #4]
	  }
	  if((!ZION.SOC_EEPROM_Detected && ZION.zionFinished) || (ZION.SOC_BoardFab <0)){
 8004754:	4b95      	ldr	r3, [pc, #596]	; (80049ac <startErrorLEDs+0x2a8>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d103      	bne.n	8004764 <startErrorLEDs+0x60>
 800475c:	4b93      	ldr	r3, [pc, #588]	; (80049ac <startErrorLEDs+0x2a8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d103      	bne.n	800476c <startErrorLEDs+0x68>
 8004764:	4b91      	ldr	r3, [pc, #580]	; (80049ac <startErrorLEDs+0x2a8>)
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	2b00      	cmp	r3, #0
 800476a:	da03      	bge.n	8004774 <startErrorLEDs+0x70>
		  errorLED.zionFault=1;
 800476c:	4b8e      	ldr	r3, [pc, #568]	; (80049a8 <startErrorLEDs+0x2a4>)
 800476e:	2201      	movs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	e002      	b.n	800477a <startErrorLEDs+0x76>
	  }
	  else{
		  errorLED.zionFault=0;
 8004774:	4b8c      	ldr	r3, [pc, #560]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
	  }
	  i2cCheck=writeI2CRegister(LED.address, 0xf0, 0x00,1,LED.i2cBank);
 800477a:	4b8d      	ldr	r3, [pc, #564]	; (80049b0 <startErrorLEDs+0x2ac>)
 800477c:	7818      	ldrb	r0, [r3, #0]
 800477e:	4b8c      	ldr	r3, [pc, #560]	; (80049b0 <startErrorLEDs+0x2ac>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	2301      	movs	r3, #1
 8004786:	2200      	movs	r2, #0
 8004788:	21f0      	movs	r1, #240	; 0xf0
 800478a:	f7fe feeb 	bl	8003564 <writeI2CRegister>
 800478e:	60b8      	str	r0, [r7, #8]

	  if(i2cCheck){
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <startErrorLEDs+0x9a>
		  errorLED.ledDriver=0;
 8004796:	4b84      	ldr	r3, [pc, #528]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	; 0x30
 800479c:	e002      	b.n	80047a4 <startErrorLEDs+0xa0>
	  }
	  else{
		  errorLED.ledDriver=1;
 800479e:	4b82      	ldr	r3, [pc, #520]	; (80049a8 <startErrorLEDs+0x2a4>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
	  }
	  //only allow the error led write commands if the led driver responds.
	  if(errorLED.ledDriver){
 80047a4:	4b80      	ldr	r3, [pc, #512]	; (80049a8 <startErrorLEDs+0x2a4>)
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 80f4 	beq.w	8004996 <startErrorLEDs+0x292>
		  setErrorLED(ZION_FAULT,errorLED.zionFault);
 80047ae:	4b7e      	ldr	r3, [pc, #504]	; (80049a8 <startErrorLEDs+0x2a4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bf14      	ite	ne
 80047b6:	2301      	movne	r3, #1
 80047b8:	2300      	moveq	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	4619      	mov	r1, r3
 80047be:	2000      	movs	r0, #0
 80047c0:	f7fe ffe8 	bl	8003794 <setErrorLED>
		  osDelay(20);
 80047c4:	2014      	movs	r0, #20
 80047c6:	f00c f8a9 	bl	801091c <osDelay>
		  setErrorLED(VSYSPMI_FAULT, errorLED.vsysPMIFault);
 80047ca:	4b77      	ldr	r3, [pc, #476]	; (80049a8 <startErrorLEDs+0x2a4>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bf14      	ite	ne
 80047d2:	2301      	movne	r3, #1
 80047d4:	2300      	moveq	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	4619      	mov	r1, r3
 80047da:	2001      	movs	r0, #1
 80047dc:	f7fe ffda 	bl	8003794 <setErrorLED>
		  osDelay(20);
 80047e0:	2014      	movs	r0, #20
 80047e2:	f00c f89b 	bl	801091c <osDelay>
		  switch(bootButtons.bootMode){
 80047e6:	4b73      	ldr	r3, [pc, #460]	; (80049b4 <startErrorLEDs+0x2b0>)
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	2b05      	cmp	r3, #5
 80047ec:	d84a      	bhi.n	8004884 <startErrorLEDs+0x180>
 80047ee:	a201      	add	r2, pc, #4	; (adr r2, 80047f4 <startErrorLEDs+0xf0>)
 80047f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f4:	0800480d 	.word	0x0800480d
 80047f8:	08004821 	.word	0x08004821
 80047fc:	08004835 	.word	0x08004835
 8004800:	08004849 	.word	0x08004849
 8004804:	08004871 	.word	0x08004871
 8004808:	0800485d 	.word	0x0800485d
				case UNINITIALIZED:
					errorLED.standard_boot=0;
 800480c:	4b66      	ldr	r3, [pc, #408]	; (80049a8 <startErrorLEDs+0x2a4>)
 800480e:	2200      	movs	r2, #0
 8004810:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=0;
 8004812:	4b65      	ldr	r3, [pc, #404]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004814:	2200      	movs	r2, #0
 8004816:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=0;
 8004818:	4b63      	ldr	r3, [pc, #396]	; (80049a8 <startErrorLEDs+0x2a4>)
 800481a:	2200      	movs	r2, #0
 800481c:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 800481e:	e031      	b.n	8004884 <startErrorLEDs+0x180>
				case STANDARD:
					errorLED.standard_boot=1;
 8004820:	4b61      	ldr	r3, [pc, #388]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004822:	2201      	movs	r2, #1
 8004824:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=0;
 8004826:	4b60      	ldr	r3, [pc, #384]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004828:	2200      	movs	r2, #0
 800482a:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=0;
 800482c:	4b5e      	ldr	r3, [pc, #376]	; (80049a8 <startErrorLEDs+0x2a4>)
 800482e:	2200      	movs	r2, #0
 8004830:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 8004832:	e027      	b.n	8004884 <startErrorLEDs+0x180>
				case UEFI:
					errorLED.standard_boot=0;
 8004834:	4b5c      	ldr	r3, [pc, #368]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004836:	2200      	movs	r2, #0
 8004838:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=1;
 800483a:	4b5b      	ldr	r3, [pc, #364]	; (80049a8 <startErrorLEDs+0x2a4>)
 800483c:	2201      	movs	r2, #1
 800483e:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=0;
 8004840:	4b59      	ldr	r3, [pc, #356]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004842:	2200      	movs	r2, #0
 8004844:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 8004846:	e01d      	b.n	8004884 <startErrorLEDs+0x180>
				case EDL:
					errorLED.standard_boot=0;
 8004848:	4b57      	ldr	r3, [pc, #348]	; (80049a8 <startErrorLEDs+0x2a4>)
 800484a:	2200      	movs	r2, #0
 800484c:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=0;
 800484e:	4b56      	ldr	r3, [pc, #344]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004850:	2200      	movs	r2, #0
 8004852:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=1;
 8004854:	4b54      	ldr	r3, [pc, #336]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004856:	2201      	movs	r2, #1
 8004858:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 800485a:	e013      	b.n	8004884 <startErrorLEDs+0x180>
				case MASS_STORAGE:
					errorLED.standard_boot=1;
 800485c:	4b52      	ldr	r3, [pc, #328]	; (80049a8 <startErrorLEDs+0x2a4>)
 800485e:	2201      	movs	r2, #1
 8004860:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=0;
 8004862:	4b51      	ldr	r3, [pc, #324]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004864:	2200      	movs	r2, #0
 8004866:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=1;
 8004868:	4b4f      	ldr	r3, [pc, #316]	; (80049a8 <startErrorLEDs+0x2a4>)
 800486a:	2201      	movs	r2, #1
 800486c:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 800486e:	e009      	b.n	8004884 <startErrorLEDs+0x180>
				case RECOVERY:
					errorLED.standard_boot=0;
 8004870:	4b4d      	ldr	r3, [pc, #308]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004872:	2200      	movs	r2, #0
 8004874:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=1;
 8004876:	4b4c      	ldr	r3, [pc, #304]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004878:	2201      	movs	r2, #1
 800487a:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=1;
 800487c:	4b4a      	ldr	r3, [pc, #296]	; (80049a8 <startErrorLEDs+0x2a4>)
 800487e:	2201      	movs	r2, #1
 8004880:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 8004882:	bf00      	nop
				}
		  setErrorLED(STANDARD_LED,errorLED.standard_boot);
 8004884:	4b48      	ldr	r3, [pc, #288]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	2b00      	cmp	r3, #0
 800488a:	bf14      	ite	ne
 800488c:	2301      	movne	r3, #1
 800488e:	2300      	moveq	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	4619      	mov	r1, r3
 8004894:	2007      	movs	r0, #7
 8004896:	f7fe ff7d 	bl	8003794 <setErrorLED>
		  osDelay(20);
 800489a:	2014      	movs	r0, #20
 800489c:	f00c f83e 	bl	801091c <osDelay>
		  setErrorLED(UEFI_LED,errorLED.uefi_boot);
 80048a0:	4b41      	ldr	r3, [pc, #260]	; (80049a8 <startErrorLEDs+0x2a4>)
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bf14      	ite	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	2300      	moveq	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	4619      	mov	r1, r3
 80048b0:	2008      	movs	r0, #8
 80048b2:	f7fe ff6f 	bl	8003794 <setErrorLED>
		  osDelay(20);
 80048b6:	2014      	movs	r0, #20
 80048b8:	f00c f830 	bl	801091c <osDelay>
		  setErrorLED(EDL_LED,errorLED.edl_boot);
 80048bc:	4b3a      	ldr	r3, [pc, #232]	; (80049a8 <startErrorLEDs+0x2a4>)
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf14      	ite	ne
 80048c4:	2301      	movne	r3, #1
 80048c6:	2300      	moveq	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	4619      	mov	r1, r3
 80048cc:	2009      	movs	r0, #9
 80048ce:	f7fe ff61 	bl	8003794 <setErrorLED>
		  osDelay(20);
 80048d2:	2014      	movs	r0, #20
 80048d4:	f00c f822 	bl	801091c <osDelay>
		  setErrorLED(FAULT3,errorLED.fault3);
 80048d8:	4b33      	ldr	r3, [pc, #204]	; (80049a8 <startErrorLEDs+0x2a4>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bf14      	ite	ne
 80048e0:	2301      	movne	r3, #1
 80048e2:	2300      	moveq	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	4619      	mov	r1, r3
 80048e8:	2002      	movs	r0, #2
 80048ea:	f7fe ff53 	bl	8003794 <setErrorLED>
		  osDelay(20);
 80048ee:	2014      	movs	r0, #20
 80048f0:	f00c f814 	bl	801091c <osDelay>
		  setErrorLED(FAULT4,errorLED.fault4);
 80048f4:	4b2c      	ldr	r3, [pc, #176]	; (80049a8 <startErrorLEDs+0x2a4>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf14      	ite	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	2300      	moveq	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	4619      	mov	r1, r3
 8004904:	2003      	movs	r0, #3
 8004906:	f7fe ff45 	bl	8003794 <setErrorLED>
		  osDelay(20);
 800490a:	2014      	movs	r0, #20
 800490c:	f00c f806 	bl	801091c <osDelay>
		  setErrorLED(FAULT5,errorLED.fault5);
 8004910:	4b25      	ldr	r3, [pc, #148]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf14      	ite	ne
 8004918:	2301      	movne	r3, #1
 800491a:	2300      	moveq	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	4619      	mov	r1, r3
 8004920:	2004      	movs	r0, #4
 8004922:	f7fe ff37 	bl	8003794 <setErrorLED>
		  osDelay(20);
 8004926:	2014      	movs	r0, #20
 8004928:	f00b fff8 	bl	801091c <osDelay>
		  setErrorLED(FAULT6,errorLED.fault6);
 800492c:	4b1e      	ldr	r3, [pc, #120]	; (80049a8 <startErrorLEDs+0x2a4>)
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	4619      	mov	r1, r3
 800493c:	2005      	movs	r0, #5
 800493e:	f7fe ff29 	bl	8003794 <setErrorLED>
		  osDelay(20);
 8004942:	2014      	movs	r0, #20
 8004944:	f00b ffea 	bl	801091c <osDelay>
		  setErrorLED(FAULT7,errorLED.fault7);
 8004948:	4b17      	ldr	r3, [pc, #92]	; (80049a8 <startErrorLEDs+0x2a4>)
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	bf14      	ite	ne
 8004950:	2301      	movne	r3, #1
 8004952:	2300      	moveq	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	4619      	mov	r1, r3
 8004958:	2006      	movs	r0, #6
 800495a:	f7fe ff1b 	bl	8003794 <setErrorLED>
		  osDelay(20);
 800495e:	2014      	movs	r0, #20
 8004960:	f00b ffdc 	bl	801091c <osDelay>
		  setErrorLED(FAULT8,errorLED.fault8);
 8004964:	4b10      	ldr	r3, [pc, #64]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	2b00      	cmp	r3, #0
 800496a:	bf14      	ite	ne
 800496c:	2301      	movne	r3, #1
 800496e:	2300      	moveq	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	4619      	mov	r1, r3
 8004974:	200a      	movs	r0, #10
 8004976:	f7fe ff0d 	bl	8003794 <setErrorLED>
		  osDelay(20);
 800497a:	2014      	movs	r0, #20
 800497c:	f00b ffce 	bl	801091c <osDelay>
		  setErrorLED(FAULT9,errorLED.fault9);
 8004980:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <startErrorLEDs+0x2a4>)
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf14      	ite	ne
 8004988:	2301      	movne	r3, #1
 800498a:	2300      	moveq	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	4619      	mov	r1, r3
 8004990:	200b      	movs	r0, #11
 8004992:	f7fe feff 	bl	8003794 <setErrorLED>
	  }

    osDelay(500);
 8004996:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800499a:	f00b ffbf 	bl	801091c <osDelay>
	  if(adcRestart[0] && adcRestart[1] && adcRestart[2]){
 800499e:	e6b5      	b.n	800470c <startErrorLEDs+0x8>
 80049a0:	20029284 	.word	0x20029284
 80049a4:	2000007c 	.word	0x2000007c
 80049a8:	200032d8 	.word	0x200032d8
 80049ac:	20003274 	.word	0x20003274
 80049b0:	20000004 	.word	0x20000004
 80049b4:	200032ac 	.word	0x200032ac

080049b8 <startZionRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startZionRead */
void startZionRead(void *argument)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startZionRead */
  /* Infinite loop */
	float * adcValuePointer;
	int * zionEEPROMPresent;
	int * zionHeaderData;
	int switchOn=0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61fb      	str	r3, [r7, #28]
	float zionVoltage=77;
 80049c4:	4b79      	ldr	r3, [pc, #484]	; (8004bac <startZionRead+0x1f4>)
 80049c6:	61bb      	str	r3, [r7, #24]

  for(;;)
  {
	  if(!ZION.zionFinished){
 80049c8:	4b79      	ldr	r3, [pc, #484]	; (8004bb0 <startZionRead+0x1f8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f040 80e5 	bne.w	8004b9c <startZionRead+0x1e4>
		  if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 80049d2:	4b78      	ldr	r3, [pc, #480]	; (8004bb4 <startZionRead+0x1fc>)
 80049d4:	781a      	ldrb	r2, [r3, #0]
 80049d6:	4b77      	ldr	r3, [pc, #476]	; (8004bb4 <startZionRead+0x1fc>)
 80049d8:	785b      	ldrb	r3, [r3, #1]
 80049da:	4013      	ands	r3, r2
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	4b75      	ldr	r3, [pc, #468]	; (8004bb4 <startZionRead+0x1fc>)
 80049e0:	789b      	ldrb	r3, [r3, #2]
 80049e2:	4013      	ands	r3, r2
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <startZionRead+0x46>
			  adcValuePointer = getADCValues();
 80049ea:	f7fe ffef 	bl	80039cc <getADCValues>
 80049ee:	6178      	str	r0, [r7, #20]
			  zionVoltage = *(adcValuePointer + Adc.zionADC);
 80049f0:	4b71      	ldr	r3, [pc, #452]	; (8004bb8 <startZionRead+0x200>)
 80049f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4413      	add	r3, r2
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	61bb      	str	r3, [r7, #24]
		  }
		  if(zionVoltage != 77){
 80049fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a02:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8004bbc <startZionRead+0x204>
 8004a06:	eef4 7a47 	vcmp.f32	s15, s14
 8004a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0e:	f000 80c8 	beq.w	8004ba2 <startZionRead+0x1ea>
			  if(zionVoltage > 3.0 && (!switchOn)){
 8004a12:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a16:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a22:	dd5d      	ble.n	8004ae0 <startZionRead+0x128>
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d15a      	bne.n	8004ae0 <startZionRead+0x128>
				  int runtime = (HAL_GetTick()/1000);
 8004a2a:	f004 fdc7 	bl	80095bc <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	4b63      	ldr	r3, [pc, #396]	; (8004bc0 <startZionRead+0x208>)
 8004a32:	fba3 2302 	umull	r2, r3, r3, r2
 8004a36:	099b      	lsrs	r3, r3, #6
 8004a38:	613b      	str	r3, [r7, #16]
				  if(runtime > 15){
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b0f      	cmp	r3, #15
 8004a3e:	f340 80af 	ble.w	8004ba0 <startZionRead+0x1e8>
					  zionEEPROMPresent= zionEEPROMPresence();
 8004a42:	f004 fa5f 	bl	8008f04 <zionEEPROMPresence>
 8004a46:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d012      	beq.n	8004a76 <startZionRead+0xbe>
						  ZION.SOC_EEPROM_Detected = 1;
 8004a50:	4b57      	ldr	r3, [pc, #348]	; (8004bb0 <startZionRead+0x1f8>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 8004a56:	20a6      	movs	r0, #166	; 0xa6
 8004a58:	f004 faa4 	bl	8008fa4 <parseZionEEPROM>
 8004a5c:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a53      	ldr	r2, [pc, #332]	; (8004bb0 <startZionRead+0x1f8>)
 8004a64:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	4a51      	ldr	r2, [pc, #324]	; (8004bb0 <startZionRead+0x1f8>)
 8004a6c:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	4a4f      	ldr	r2, [pc, #316]	; (8004bb0 <startZionRead+0x1f8>)
 8004a74:	61d3      	str	r3, [r2, #28]
					  }

					  if(*(zionEEPROMPresent+1)){
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d012      	beq.n	8004aa6 <startZionRead+0xee>
						  ZION.ASIC_EEPROM_Detected = 1;
 8004a80:	4b4b      	ldr	r3, [pc, #300]	; (8004bb0 <startZionRead+0x1f8>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 8004a86:	20a8      	movs	r0, #168	; 0xa8
 8004a88:	f004 fa8c 	bl	8008fa4 <parseZionEEPROM>
 8004a8c:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a47      	ldr	r2, [pc, #284]	; (8004bb0 <startZionRead+0x1f8>)
 8004a94:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	4a45      	ldr	r2, [pc, #276]	; (8004bb0 <startZionRead+0x1f8>)
 8004a9c:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	4a43      	ldr	r2, [pc, #268]	; (8004bb0 <startZionRead+0x1f8>)
 8004aa4:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d012      	beq.n	8004ad6 <startZionRead+0x11e>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 8004ab0:	4b3f      	ldr	r3, [pc, #252]	; (8004bb0 <startZionRead+0x1f8>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 8004ab6:	20aa      	movs	r0, #170	; 0xaa
 8004ab8:	f004 fa74 	bl	8008fa4 <parseZionEEPROM>
 8004abc:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a3b      	ldr	r2, [pc, #236]	; (8004bb0 <startZionRead+0x1f8>)
 8004ac4:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	4a39      	ldr	r2, [pc, #228]	; (8004bb0 <startZionRead+0x1f8>)
 8004acc:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	4a37      	ldr	r2, [pc, #220]	; (8004bb0 <startZionRead+0x1f8>)
 8004ad4:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 8004ad6:	4b36      	ldr	r3, [pc, #216]	; (8004bb0 <startZionRead+0x1f8>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 8004adc:	f00b ff18 	bl	8010910 <osThreadExit>
				  }
			  }
			  else{
				  if(!switchOn){
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10b      	bne.n	8004afe <startZionRead+0x146>
					  HAL_GPIO_WritePin(ZION_PWR_EN_GPIO_Port,ZION_PWR_EN_Pin,1);
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004aec:	4835      	ldr	r0, [pc, #212]	; (8004bc4 <startZionRead+0x20c>)
 8004aee:	f006 f9eb 	bl	800aec8 <HAL_GPIO_WritePin>
					  ZION.zionSwitch = 1;
 8004af2:	4b2f      	ldr	r3, [pc, #188]	; (8004bb0 <startZionRead+0x1f8>)
 8004af4:	2201      	movs	r2, #1
 8004af6:	605a      	str	r2, [r3, #4]
					  switchOn=1;
 8004af8:	2301      	movs	r3, #1
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	e051      	b.n	8004ba2 <startZionRead+0x1ea>
				  }
				  else{
					  zionEEPROMPresent= zionEEPROMPresence();
 8004afe:	f004 fa01 	bl	8008f04 <zionEEPROMPresence>
 8004b02:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d012      	beq.n	8004b32 <startZionRead+0x17a>
						  ZION.SOC_EEPROM_Detected = 1;
 8004b0c:	4b28      	ldr	r3, [pc, #160]	; (8004bb0 <startZionRead+0x1f8>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 8004b12:	20a6      	movs	r0, #166	; 0xa6
 8004b14:	f004 fa46 	bl	8008fa4 <parseZionEEPROM>
 8004b18:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a24      	ldr	r2, [pc, #144]	; (8004bb0 <startZionRead+0x1f8>)
 8004b20:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	4a22      	ldr	r2, [pc, #136]	; (8004bb0 <startZionRead+0x1f8>)
 8004b28:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	4a20      	ldr	r2, [pc, #128]	; (8004bb0 <startZionRead+0x1f8>)
 8004b30:	61d3      	str	r3, [r2, #28]
					  }
					  if(*(zionEEPROMPresent+1)){
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3304      	adds	r3, #4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d012      	beq.n	8004b62 <startZionRead+0x1aa>
						  ZION.ASIC_EEPROM_Detected = 1;
 8004b3c:	4b1c      	ldr	r3, [pc, #112]	; (8004bb0 <startZionRead+0x1f8>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 8004b42:	20a8      	movs	r0, #168	; 0xa8
 8004b44:	f004 fa2e 	bl	8008fa4 <parseZionEEPROM>
 8004b48:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a18      	ldr	r2, [pc, #96]	; (8004bb0 <startZionRead+0x1f8>)
 8004b50:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	4a16      	ldr	r2, [pc, #88]	; (8004bb0 <startZionRead+0x1f8>)
 8004b58:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	4a14      	ldr	r2, [pc, #80]	; (8004bb0 <startZionRead+0x1f8>)
 8004b60:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3308      	adds	r3, #8
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d012      	beq.n	8004b92 <startZionRead+0x1da>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 8004b6c:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <startZionRead+0x1f8>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 8004b72:	20aa      	movs	r0, #170	; 0xaa
 8004b74:	f004 fa16 	bl	8008fa4 <parseZionEEPROM>
 8004b78:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a0c      	ldr	r2, [pc, #48]	; (8004bb0 <startZionRead+0x1f8>)
 8004b80:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	4a0a      	ldr	r2, [pc, #40]	; (8004bb0 <startZionRead+0x1f8>)
 8004b88:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	4a08      	ldr	r2, [pc, #32]	; (8004bb0 <startZionRead+0x1f8>)
 8004b90:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 8004b92:	4b07      	ldr	r3, [pc, #28]	; (8004bb0 <startZionRead+0x1f8>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 8004b98:	f00b feba 	bl	8010910 <osThreadExit>
			  }
		  }
	  }
	  else{
		  //should never get here but added for completeness
		  osThreadExit();
 8004b9c:	f00b feb8 	bl	8010910 <osThreadExit>
			  if(zionVoltage > 3.0 && (!switchOn)){
 8004ba0:	bf00      	nop
	  }
    osDelay(400);
 8004ba2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004ba6:	f00b feb9 	bl	801091c <osDelay>
	  if(!ZION.zionFinished){
 8004baa:	e70d      	b.n	80049c8 <startZionRead+0x10>
 8004bac:	429a0000 	.word	0x429a0000
 8004bb0:	20003274 	.word	0x20003274
 8004bb4:	20029284 	.word	0x20029284
 8004bb8:	2000007c 	.word	0x2000007c
 8004bbc:	429a0000 	.word	0x429a0000
 8004bc0:	10624dd3 	.word	0x10624dd3
 8004bc4:	40020400 	.word	0x40020400

08004bc8 <startBootButtons>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBootButtons */
void startBootButtons(void *argument)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBootButtons */
  /* Infinite loop */
	int pwrBtnReady=0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
	int timeTurnedOn=0;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	613b      	str	r3, [r7, #16]
	int pwrOn=0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]
	int presentTime=0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
	  if(bootButtons.bootModeSet){
 8004be0:	4b92      	ldr	r3, [pc, #584]	; (8004e2c <startBootButtons+0x264>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 81ed 	beq.w	8004fc4 <startBootButtons+0x3fc>
		  presentTime = (HAL_GetTick());
 8004bea:	f004 fce7 	bl	80095bc <HAL_GetTick>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	60bb      	str	r3, [r7, #8]
		  if(timeTurnedOn==0){
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <startBootButtons+0x34>
			  timeTurnedOn=presentTime;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	613b      	str	r3, [r7, #16]
		  }
		  if(bootButtons.bootMode !=0){
 8004bfc:	4b8b      	ldr	r3, [pc, #556]	; (8004e2c <startBootButtons+0x264>)
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 80ce 	beq.w	8004da2 <startBootButtons+0x1da>
			  if(bootButtons.btn1){ //DPAD UP
 8004c06:	4b89      	ldr	r3, [pc, #548]	; (8004e2c <startBootButtons+0x264>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d006      	beq.n	8004c1c <startBootButtons+0x54>
				  BTN1_ON;
 8004c0e:	2201      	movs	r2, #1
 8004c10:	2108      	movs	r1, #8
 8004c12:	4887      	ldr	r0, [pc, #540]	; (8004e30 <startBootButtons+0x268>)
 8004c14:	f006 f958 	bl	800aec8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn2){ //DPAD RIGHT
 8004c1c:	4b83      	ldr	r3, [pc, #524]	; (8004e2c <startBootButtons+0x264>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d006      	beq.n	8004c32 <startBootButtons+0x6a>
				  BTN2_ON;
 8004c24:	2201      	movs	r2, #1
 8004c26:	2110      	movs	r1, #16
 8004c28:	4881      	ldr	r0, [pc, #516]	; (8004e30 <startBootButtons+0x268>)
 8004c2a:	f006 f94d 	bl	800aec8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn3){ //DPAD LEFT
 8004c32:	4b7e      	ldr	r3, [pc, #504]	; (8004e2c <startBootButtons+0x264>)
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d006      	beq.n	8004c48 <startBootButtons+0x80>
				  BTN3_ON;
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	2120      	movs	r1, #32
 8004c3e:	487c      	ldr	r0, [pc, #496]	; (8004e30 <startBootButtons+0x268>)
 8004c40:	f006 f942 	bl	800aec8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004c44:	2301      	movs	r3, #1
 8004c46:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn4){
 8004c48:	4b78      	ldr	r3, [pc, #480]	; (8004e2c <startBootButtons+0x264>)
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d007      	beq.n	8004c60 <startBootButtons+0x98>
				  BTN4_ON;
 8004c50:	2201      	movs	r2, #1
 8004c52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c56:	4876      	ldr	r0, [pc, #472]	; (8004e30 <startBootButtons+0x268>)
 8004c58:	f006 f936 	bl	800aec8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn5){
 8004c60:	4b72      	ldr	r3, [pc, #456]	; (8004e2c <startBootButtons+0x264>)
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d007      	beq.n	8004c78 <startBootButtons+0xb0>
				  BTN5_ON;
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c6e:	4870      	ldr	r0, [pc, #448]	; (8004e30 <startBootButtons+0x268>)
 8004c70:	f006 f92a 	bl	800aec8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004c74:	2301      	movs	r3, #1
 8004c76:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.edl_sw){
 8004c78:	4b6c      	ldr	r3, [pc, #432]	; (8004e2c <startBootButtons+0x264>)
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <startBootButtons+0xc8>
				  EDL_SW_ON;
 8004c80:	2201      	movs	r2, #1
 8004c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c86:	486b      	ldr	r0, [pc, #428]	; (8004e34 <startBootButtons+0x26c>)
 8004c88:	f006 f91e 	bl	800aec8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.ex_sw){
 8004c90:	4b66      	ldr	r3, [pc, #408]	; (8004e2c <startBootButtons+0x264>)
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d007      	beq.n	8004ca8 <startBootButtons+0xe0>
				  EX_SW_ON;
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c9e:	4865      	ldr	r0, [pc, #404]	; (8004e34 <startBootButtons+0x26c>)
 8004ca0:	f006 f912 	bl	800aec8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	617b      	str	r3, [r7, #20]
			  }
			  setOutputGPIOState(outputGPIOs.odOut_0, OFF); //set the reset GPIO.
 8004ca8:	4b63      	ldr	r3, [pc, #396]	; (8004e38 <startBootButtons+0x270>)
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	2100      	movs	r1, #0
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe fa64 	bl	800317c <setOutputGPIOState>
			  osDelay(500);
 8004cb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004cb8:	f00b fe30 	bl	801091c <osDelay>
			  setOutputGPIOState(outputGPIOs.odOut_0, ON); //turn off the reset GPIO
 8004cbc:	4b5e      	ldr	r3, [pc, #376]	; (8004e38 <startBootButtons+0x270>)
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe fa5a 	bl	800317c <setOutputGPIOState>
			  osDelay(500);
 8004cc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ccc:	f00b fe26 	bl	801091c <osDelay>
			  BTN1_OFF;
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2108      	movs	r1, #8
 8004cd4:	4856      	ldr	r0, [pc, #344]	; (8004e30 <startBootButtons+0x268>)
 8004cd6:	f006 f8f7 	bl	800aec8 <HAL_GPIO_WritePin>
			  BTN2_OFF;
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2110      	movs	r1, #16
 8004cde:	4854      	ldr	r0, [pc, #336]	; (8004e30 <startBootButtons+0x268>)
 8004ce0:	f006 f8f2 	bl	800aec8 <HAL_GPIO_WritePin>
			  BTN3_OFF;
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2120      	movs	r1, #32
 8004ce8:	4851      	ldr	r0, [pc, #324]	; (8004e30 <startBootButtons+0x268>)
 8004cea:	f006 f8ed 	bl	800aec8 <HAL_GPIO_WritePin>
			  BTN4_OFF;
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004cf4:	484e      	ldr	r0, [pc, #312]	; (8004e30 <startBootButtons+0x268>)
 8004cf6:	f006 f8e7 	bl	800aec8 <HAL_GPIO_WritePin>
			  BTN5_OFF;
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d00:	484b      	ldr	r0, [pc, #300]	; (8004e30 <startBootButtons+0x268>)
 8004d02:	f006 f8e1 	bl	800aec8 <HAL_GPIO_WritePin>
			  EDL_SW_OFF;
 8004d06:	2200      	movs	r2, #0
 8004d08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d0c:	4849      	ldr	r0, [pc, #292]	; (8004e34 <startBootButtons+0x26c>)
 8004d0e:	f006 f8db 	bl	800aec8 <HAL_GPIO_WritePin>
			  EX_SW_OFF;
 8004d12:	2200      	movs	r2, #0
 8004d14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d18:	4846      	ldr	r0, [pc, #280]	; (8004e34 <startBootButtons+0x26c>)
 8004d1a:	f006 f8d5 	bl	800aec8 <HAL_GPIO_WritePin>
			  if(bootButtons.btn1){
 8004d1e:	4b43      	ldr	r3, [pc, #268]	; (8004e2c <startBootButtons+0x264>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <startBootButtons+0x166>
				  bootButtons.bootMode= RECOVERY;
 8004d26:	4b41      	ldr	r3, [pc, #260]	; (8004e2c <startBootButtons+0x264>)
 8004d28:	2204      	movs	r2, #4
 8004d2a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d2c:	e01a      	b.n	8004d64 <startBootButtons+0x19c>
				  //errorLEDState[RECOVERY_LED]=1;
			  }
			  else if(bootButtons.btn2){
 8004d2e:	4b3f      	ldr	r3, [pc, #252]	; (8004e2c <startBootButtons+0x264>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <startBootButtons+0x176>
				  bootButtons.bootMode= MASS_STORAGE;
 8004d36:	4b3d      	ldr	r3, [pc, #244]	; (8004e2c <startBootButtons+0x264>)
 8004d38:	2205      	movs	r2, #5
 8004d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d3c:	e012      	b.n	8004d64 <startBootButtons+0x19c>
				 // errorLEDState[MASS_STORAGE_LED]=1;
			  }
			  else if(bootButtons.btn3){
 8004d3e:	4b3b      	ldr	r3, [pc, #236]	; (8004e2c <startBootButtons+0x264>)
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <startBootButtons+0x186>
				  bootButtons.bootMode= UEFI;
 8004d46:	4b39      	ldr	r3, [pc, #228]	; (8004e2c <startBootButtons+0x264>)
 8004d48:	2202      	movs	r2, #2
 8004d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d4c:	e00a      	b.n	8004d64 <startBootButtons+0x19c>
				  //errorLEDState[UEFI_LED]=1;
			  }
			  else if(bootButtons.edl_sw){
 8004d4e:	4b37      	ldr	r3, [pc, #220]	; (8004e2c <startBootButtons+0x264>)
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <startBootButtons+0x196>
				  bootButtons.bootMode= EDL;
 8004d56:	4b35      	ldr	r3, [pc, #212]	; (8004e2c <startBootButtons+0x264>)
 8004d58:	2203      	movs	r2, #3
 8004d5a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d5c:	e002      	b.n	8004d64 <startBootButtons+0x19c>
				  //errorLEDState[EDL_LED]=1;
			  }
			  else{
				  bootButtons.bootMode=STANDARD;
 8004d5e:	4b33      	ldr	r3, [pc, #204]	; (8004e2c <startBootButtons+0x264>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	629a      	str	r2, [r3, #40]	; 0x28
				  //errorLEDState[STANDARD_LED]=1;
			  }
			  bootButtons.btn0=0;
 8004d64:	4b31      	ldr	r3, [pc, #196]	; (8004e2c <startBootButtons+0x264>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	605a      	str	r2, [r3, #4]
			  bootButtons.btn1=0;
 8004d6a:	4b30      	ldr	r3, [pc, #192]	; (8004e2c <startBootButtons+0x264>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	609a      	str	r2, [r3, #8]
			  bootButtons.btn2=0;
 8004d70:	4b2e      	ldr	r3, [pc, #184]	; (8004e2c <startBootButtons+0x264>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	60da      	str	r2, [r3, #12]
			  bootButtons.btn3=0;
 8004d76:	4b2d      	ldr	r3, [pc, #180]	; (8004e2c <startBootButtons+0x264>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	611a      	str	r2, [r3, #16]
			  bootButtons.btn4=0;
 8004d7c:	4b2b      	ldr	r3, [pc, #172]	; (8004e2c <startBootButtons+0x264>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	615a      	str	r2, [r3, #20]
			  bootButtons.btn5=0;
 8004d82:	4b2a      	ldr	r3, [pc, #168]	; (8004e2c <startBootButtons+0x264>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	619a      	str	r2, [r3, #24]
			  bootButtons.edl_sw=0;
 8004d88:	4b28      	ldr	r3, [pc, #160]	; (8004e2c <startBootButtons+0x264>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	61da      	str	r2, [r3, #28]
			  bootButtons.ex_sw=0;
 8004d8e:	4b27      	ldr	r3, [pc, #156]	; (8004e2c <startBootButtons+0x264>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	621a      	str	r2, [r3, #32]
			  bootButtons.modeClear=1;
 8004d94:	4b25      	ldr	r3, [pc, #148]	; (8004e2c <startBootButtons+0x264>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	625a      	str	r2, [r3, #36]	; 0x24
			  bootButtons.bootModeSet=0;
 8004d9a:	4b24      	ldr	r3, [pc, #144]	; (8004e2c <startBootButtons+0x264>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e110      	b.n	8004fc4 <startBootButtons+0x3fc>

		  }
		  else{
			  if((bootButtons.btn0) || pwrBtnReady){ //power button
 8004da2:	4b22      	ldr	r3, [pc, #136]	; (8004e2c <startBootButtons+0x264>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d102      	bne.n	8004db0 <startBootButtons+0x1e8>
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d06a      	beq.n	8004e86 <startBootButtons+0x2be>
				  BTN0_ON;
 8004db0:	2201      	movs	r2, #1
 8004db2:	2104      	movs	r1, #4
 8004db4:	481e      	ldr	r0, [pc, #120]	; (8004e30 <startBootButtons+0x268>)
 8004db6:	f006 f887 	bl	800aec8 <HAL_GPIO_WritePin>
				  timeTurnedOn = (HAL_GetTick());
 8004dba:	f004 fbff 	bl	80095bc <HAL_GetTick>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	613b      	str	r3, [r7, #16]
				  pwrBtnReady=0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	617b      	str	r3, [r7, #20]
				  pwrOn = 1;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]
				  osDelay(500);
 8004dca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004dce:	f00b fda5 	bl	801091c <osDelay>
				  BTN0_OFF;
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2104      	movs	r1, #4
 8004dd6:	4816      	ldr	r0, [pc, #88]	; (8004e30 <startBootButtons+0x268>)
 8004dd8:	f006 f876 	bl	800aec8 <HAL_GPIO_WritePin>
				  osDelay(500);
 8004ddc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004de0:	f00b fd9c 	bl	801091c <osDelay>
				  pwrOn=0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]
				  timeTurnedOn=0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	613b      	str	r3, [r7, #16]
				  if(bootButtons.btn0){
 8004dec:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <startBootButtons+0x264>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <startBootButtons+0x234>
					  bootButtons.bootMode= STANDARD;
 8004df4:	4b0d      	ldr	r3, [pc, #52]	; (8004e2c <startBootButtons+0x264>)
 8004df6:	2201      	movs	r2, #1
 8004df8:	629a      	str	r2, [r3, #40]	; 0x28
 8004dfa:	e026      	b.n	8004e4a <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn1){
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <startBootButtons+0x264>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <startBootButtons+0x244>
					  bootButtons.bootMode= RECOVERY;
 8004e04:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <startBootButtons+0x264>)
 8004e06:	2204      	movs	r2, #4
 8004e08:	629a      	str	r2, [r3, #40]	; 0x28
 8004e0a:	e01e      	b.n	8004e4a <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn2){
 8004e0c:	4b07      	ldr	r3, [pc, #28]	; (8004e2c <startBootButtons+0x264>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <startBootButtons+0x254>
					  bootButtons.bootMode= MASS_STORAGE;
 8004e14:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <startBootButtons+0x264>)
 8004e16:	2205      	movs	r2, #5
 8004e18:	629a      	str	r2, [r3, #40]	; 0x28
 8004e1a:	e016      	b.n	8004e4a <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn3){
 8004e1c:	4b03      	ldr	r3, [pc, #12]	; (8004e2c <startBootButtons+0x264>)
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00b      	beq.n	8004e3c <startBootButtons+0x274>
					  bootButtons.bootMode= UEFI;
 8004e24:	4b01      	ldr	r3, [pc, #4]	; (8004e2c <startBootButtons+0x264>)
 8004e26:	2202      	movs	r2, #2
 8004e28:	629a      	str	r2, [r3, #40]	; 0x28
 8004e2a:	e00e      	b.n	8004e4a <startBootButtons+0x282>
 8004e2c:	200032ac 	.word	0x200032ac
 8004e30:	40021400 	.word	0x40021400
 8004e34:	40020400 	.word	0x40020400
 8004e38:	20000044 	.word	0x20000044
				  }
				  else if(bootButtons.edl_sw){
 8004e3c:	4b64      	ldr	r3, [pc, #400]	; (8004fd0 <startBootButtons+0x408>)
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <startBootButtons+0x282>
					  bootButtons.bootMode= EDL;
 8004e44:	4b62      	ldr	r3, [pc, #392]	; (8004fd0 <startBootButtons+0x408>)
 8004e46:	2203      	movs	r2, #3
 8004e48:	629a      	str	r2, [r3, #40]	; 0x28
				  }
				  bootButtons.btn0=0;
 8004e4a:	4b61      	ldr	r3, [pc, #388]	; (8004fd0 <startBootButtons+0x408>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	605a      	str	r2, [r3, #4]
				  bootButtons.btn1=0;
 8004e50:	4b5f      	ldr	r3, [pc, #380]	; (8004fd0 <startBootButtons+0x408>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	609a      	str	r2, [r3, #8]
				  bootButtons.btn2=0;
 8004e56:	4b5e      	ldr	r3, [pc, #376]	; (8004fd0 <startBootButtons+0x408>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	60da      	str	r2, [r3, #12]
				  bootButtons.btn3=0;
 8004e5c:	4b5c      	ldr	r3, [pc, #368]	; (8004fd0 <startBootButtons+0x408>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	611a      	str	r2, [r3, #16]
				  bootButtons.btn4=0;
 8004e62:	4b5b      	ldr	r3, [pc, #364]	; (8004fd0 <startBootButtons+0x408>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	615a      	str	r2, [r3, #20]
				  bootButtons.btn5=0;
 8004e68:	4b59      	ldr	r3, [pc, #356]	; (8004fd0 <startBootButtons+0x408>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	619a      	str	r2, [r3, #24]
				  bootButtons.edl_sw=0;
 8004e6e:	4b58      	ldr	r3, [pc, #352]	; (8004fd0 <startBootButtons+0x408>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	61da      	str	r2, [r3, #28]
				  bootButtons.ex_sw=0;
 8004e74:	4b56      	ldr	r3, [pc, #344]	; (8004fd0 <startBootButtons+0x408>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	621a      	str	r2, [r3, #32]
				  bootButtons.modeClear=1;
 8004e7a:	4b55      	ldr	r3, [pc, #340]	; (8004fd0 <startBootButtons+0x408>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	625a      	str	r2, [r3, #36]	; 0x24
				  bootButtons.bootModeSet=0;
 8004e80:	4b53      	ldr	r3, [pc, #332]	; (8004fd0 <startBootButtons+0x408>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
				  //osDelay(300);
			  }
			  if(bootButtons.btn1){ //DPAD UP
 8004e86:	4b52      	ldr	r3, [pc, #328]	; (8004fd0 <startBootButtons+0x408>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <startBootButtons+0x2d6>
				  BTN1_ON;
 8004e8e:	2201      	movs	r2, #1
 8004e90:	2108      	movs	r1, #8
 8004e92:	4850      	ldr	r0, [pc, #320]	; (8004fd4 <startBootButtons+0x40c>)
 8004e94:	f006 f818 	bl	800aec8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	e008      	b.n	8004eb0 <startBootButtons+0x2e8>
			  }
			  else if(!(bootButtons.btn1)){ //DPAD UP
 8004e9e:	4b4c      	ldr	r3, [pc, #304]	; (8004fd0 <startBootButtons+0x408>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d104      	bne.n	8004eb0 <startBootButtons+0x2e8>
				  BTN1_OFF;
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2108      	movs	r1, #8
 8004eaa:	484a      	ldr	r0, [pc, #296]	; (8004fd4 <startBootButtons+0x40c>)
 8004eac:	f006 f80c 	bl	800aec8 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn2){ //DPAD RIGHT
 8004eb0:	4b47      	ldr	r3, [pc, #284]	; (8004fd0 <startBootButtons+0x408>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <startBootButtons+0x300>
				  BTN2_ON;
 8004eb8:	2201      	movs	r2, #1
 8004eba:	2110      	movs	r1, #16
 8004ebc:	4845      	ldr	r0, [pc, #276]	; (8004fd4 <startBootButtons+0x40c>)
 8004ebe:	f006 f803 	bl	800aec8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	e008      	b.n	8004eda <startBootButtons+0x312>
			  }
			  else if(!(bootButtons.btn2)){ //DPAD RIGHT
 8004ec8:	4b41      	ldr	r3, [pc, #260]	; (8004fd0 <startBootButtons+0x408>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d104      	bne.n	8004eda <startBootButtons+0x312>
				  BTN2_OFF;
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2110      	movs	r1, #16
 8004ed4:	483f      	ldr	r0, [pc, #252]	; (8004fd4 <startBootButtons+0x40c>)
 8004ed6:	f005 fff7 	bl	800aec8 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn3){ //DPAD LEFT
 8004eda:	4b3d      	ldr	r3, [pc, #244]	; (8004fd0 <startBootButtons+0x408>)
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d007      	beq.n	8004ef2 <startBootButtons+0x32a>
				  BTN3_ON;
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	2120      	movs	r1, #32
 8004ee6:	483b      	ldr	r0, [pc, #236]	; (8004fd4 <startBootButtons+0x40c>)
 8004ee8:	f005 ffee 	bl	800aec8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004eec:	2301      	movs	r3, #1
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e008      	b.n	8004f04 <startBootButtons+0x33c>
			  }
			  else if(!(bootButtons.btn3)){ //DPAD LEFT
 8004ef2:	4b37      	ldr	r3, [pc, #220]	; (8004fd0 <startBootButtons+0x408>)
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d104      	bne.n	8004f04 <startBootButtons+0x33c>
				  BTN3_OFF;
 8004efa:	2200      	movs	r2, #0
 8004efc:	2120      	movs	r1, #32
 8004efe:	4835      	ldr	r0, [pc, #212]	; (8004fd4 <startBootButtons+0x40c>)
 8004f00:	f005 ffe2 	bl	800aec8 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn4){
 8004f04:	4b32      	ldr	r3, [pc, #200]	; (8004fd0 <startBootButtons+0x408>)
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <startBootButtons+0x356>
				  BTN4_ON;
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f12:	4830      	ldr	r0, [pc, #192]	; (8004fd4 <startBootButtons+0x40c>)
 8004f14:	f005 ffd8 	bl	800aec8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e00d      	b.n	8004f3a <startBootButtons+0x372>
			  }
			  else if(!(bootButtons.btn4)){
 8004f1e:	4b2c      	ldr	r3, [pc, #176]	; (8004fd0 <startBootButtons+0x408>)
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d109      	bne.n	8004f3a <startBootButtons+0x372>
				  BTN4_OFF;
 8004f26:	2200      	movs	r2, #0
 8004f28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f2c:	4829      	ldr	r0, [pc, #164]	; (8004fd4 <startBootButtons+0x40c>)
 8004f2e:	f005 ffcb 	bl	800aec8 <HAL_GPIO_WritePin>
				  osDelay(300);
 8004f32:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004f36:	f00b fcf1 	bl	801091c <osDelay>
			  }
			  if(bootButtons.btn5){
 8004f3a:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <startBootButtons+0x408>)
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d008      	beq.n	8004f54 <startBootButtons+0x38c>
				  BTN5_ON;
 8004f42:	2201      	movs	r2, #1
 8004f44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f48:	4822      	ldr	r0, [pc, #136]	; (8004fd4 <startBootButtons+0x40c>)
 8004f4a:	f005 ffbd 	bl	800aec8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e009      	b.n	8004f68 <startBootButtons+0x3a0>
			  }
			  else if(!(bootButtons.btn5)){
 8004f54:	4b1e      	ldr	r3, [pc, #120]	; (8004fd0 <startBootButtons+0x408>)
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d105      	bne.n	8004f68 <startBootButtons+0x3a0>
				  BTN5_OFF;
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f62:	481c      	ldr	r0, [pc, #112]	; (8004fd4 <startBootButtons+0x40c>)
 8004f64:	f005 ffb0 	bl	800aec8 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.edl_sw){
 8004f68:	4b19      	ldr	r3, [pc, #100]	; (8004fd0 <startBootButtons+0x408>)
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <startBootButtons+0x3ba>
				  EDL_SW_ON;
 8004f70:	2201      	movs	r2, #1
 8004f72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f76:	4818      	ldr	r0, [pc, #96]	; (8004fd8 <startBootButtons+0x410>)
 8004f78:	f005 ffa6 	bl	800aec8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	e009      	b.n	8004f96 <startBootButtons+0x3ce>
			  }
			  else if(!(bootButtons.edl_sw)){
 8004f82:	4b13      	ldr	r3, [pc, #76]	; (8004fd0 <startBootButtons+0x408>)
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d105      	bne.n	8004f96 <startBootButtons+0x3ce>
				  EDL_SW_OFF;
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f90:	4811      	ldr	r0, [pc, #68]	; (8004fd8 <startBootButtons+0x410>)
 8004f92:	f005 ff99 	bl	800aec8 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.ex_sw){
 8004f96:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <startBootButtons+0x408>)
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d008      	beq.n	8004fb0 <startBootButtons+0x3e8>
				  EX_SW_ON;
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fa4:	480c      	ldr	r0, [pc, #48]	; (8004fd8 <startBootButtons+0x410>)
 8004fa6:	f005 ff8f 	bl	800aec8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004faa:	2301      	movs	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	e009      	b.n	8004fc4 <startBootButtons+0x3fc>
			  }
			  else if(!(bootButtons.ex_sw)){
 8004fb0:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <startBootButtons+0x408>)
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d105      	bne.n	8004fc4 <startBootButtons+0x3fc>
				  EX_SW_OFF;
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fbe:	4806      	ldr	r0, [pc, #24]	; (8004fd8 <startBootButtons+0x410>)
 8004fc0:	f005 ff82 	bl	800aec8 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
		  }
	  }
    osDelay(800);
 8004fc4:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004fc8:	f00b fca8 	bl	801091c <osDelay>
	  if(bootButtons.bootModeSet){
 8004fcc:	e608      	b.n	8004be0 <startBootButtons+0x18>
 8004fce:	bf00      	nop
 8004fd0:	200032ac 	.word	0x200032ac
 8004fd4:	40021400 	.word	0x40021400
 8004fd8:	40020400 	.word	0x40020400

08004fdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a04      	ldr	r2, [pc, #16]	; (8004ffc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d101      	bne.n	8004ff2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004fee:	f004 fad1 	bl	8009594 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004ff2:	bf00      	nop
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40001000 	.word	0x40001000

08005000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005004:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005006:	e7fe      	b.n	8005006 <Error_Handler+0x6>

08005008 <SMLCD_Enable>:

#define SMLCD_SPI_PORT             hspi4
// Public macros and functions

// Enable the display (using DISP pin)
__STATIC_INLINE void SMLCD_Enable(void) {
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
	SMLCD_DISP_H;
 800500c:	2201      	movs	r2, #1
 800500e:	2102      	movs	r1, #2
 8005010:	4802      	ldr	r0, [pc, #8]	; (800501c <SMLCD_Enable+0x14>)
 8005012:	f005 ff59 	bl	800aec8 <HAL_GPIO_WritePin>
}
 8005016:	bf00      	nop
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40022400 	.word	0x40022400

08005020 <initializeDisplay>:

int previousMenu = 0;
float displayAdcValues[21];
int setIndicator=0;

void initializeDisplay(){
 8005020:	b590      	push	{r4, r7, lr}
 8005022:	b099      	sub	sp, #100	; 0x64
 8005024:	af16      	add	r7, sp, #88	; 0x58
	SMLCD_InitGPIO();
 8005026:	f7fb faf7 	bl	8000618 <SMLCD_InitGPIO>
	SMLCD_Init(hspi4);
 800502a:	4c10      	ldr	r4, [pc, #64]	; (800506c <initializeDisplay+0x4c>)
 800502c:	4668      	mov	r0, sp
 800502e:	f104 0310 	add.w	r3, r4, #16
 8005032:	2254      	movs	r2, #84	; 0x54
 8005034:	4619      	mov	r1, r3
 8005036:	f00e fa9d 	bl	8013574 <memcpy>
 800503a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800503e:	f7fb fb0b 	bl	8000658 <SMLCD_Init>
	SMLCD_Enable();
 8005042:	f7ff ffe1 	bl	8005008 <SMLCD_Enable>
	SMLCD_Clear();
 8005046:	f7fb fb27 	bl	8000698 <SMLCD_Clear>
#define ORI 0
	uint8_t ori;
	if (ORI == 0){
		ori = LCD_ORIENT_NORMAL;
 800504a:	2301      	movs	r3, #1
 800504c:	71fb      	strb	r3, [r7, #7]
	}
	SMLCD_Orientation(ori);
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	4618      	mov	r0, r3
 8005052:	f7fb fc63 	bl	800091c <SMLCD_Orientation>
	LCD_Clear();
 8005056:	f7fb fc89 	bl	800096c <LCD_Clear>
	memset(displayAdcValues,0,sizeof(displayAdcValues));
 800505a:	2254      	movs	r2, #84	; 0x54
 800505c:	2100      	movs	r1, #0
 800505e:	4804      	ldr	r0, [pc, #16]	; (8005070 <initializeDisplay+0x50>)
 8005060:	f00e fa93 	bl	801358a <memset>
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	bd90      	pop	{r4, r7, pc}
 800506c:	20028ab0 	.word	0x20028ab0
 8005070:	20030f48 	.word	0x20030f48

08005074 <drawMainMenu>:

void drawMainMenu(int indicator){
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
	int i,j;
	previousMenu=0;
 800507c:	4b48      	ldr	r3, [pc, #288]	; (80051a0 <drawMainMenu+0x12c>)
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]
	getLatestADC();
 8005082:	f002 fdb9 	bl	8007bf8 <getLatestADC>
	LCD_Clear();
 8005086:	f7fb fc71 	bl	800096c <LCD_Clear>
	LCD_PixelMode = LCD_PSET;
 800508a:	4b46      	ldr	r3, [pc, #280]	; (80051a4 <drawMainMenu+0x130>)
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8005090:	4b45      	ldr	r3, [pc, #276]	; (80051a8 <drawMainMenu+0x134>)
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	4b44      	ldr	r3, [pc, #272]	; (80051ac <drawMainMenu+0x138>)
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	3b01      	subs	r3, #1
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2100      	movs	r1, #0
 80050a2:	2000      	movs	r0, #0
 80050a4:	f7fb feb4 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 80050a8:	4b3f      	ldr	r3, [pc, #252]	; (80051a8 <drawMainMenu+0x134>)
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	3b03      	subs	r3, #3
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	4b3e      	ldr	r3, [pc, #248]	; (80051ac <drawMainMenu+0x138>)
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	3b03      	subs	r3, #3
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2102      	movs	r1, #2
 80050ba:	2002      	movs	r0, #2
 80050bc:	f7fb fea8 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 80050c0:	230a      	movs	r3, #10
 80050c2:	60bb      	str	r3, [r7, #8]
	j  = 10;
 80050c4:	230a      	movs	r3, #10
 80050c6:	60fb      	str	r3, [r7, #12]
	printFaults(i,j);
 80050c8:	68f9      	ldr	r1, [r7, #12]
 80050ca:	68b8      	ldr	r0, [r7, #8]
 80050cc:	f002 fdc2 	bl	8007c54 <printFaults>
	//i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
	//i += LCD_PutStr(i, j, "So many!", fnt7x10);
	i=150;
 80050d0:	2396      	movs	r3, #150	; 0x96
 80050d2:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	b298      	uxth	r0, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	b299      	uxth	r1, r3
 80050dc:	4b34      	ldr	r3, [pc, #208]	; (80051b0 <drawMainMenu+0x13c>)
 80050de:	4a35      	ldr	r2, [pc, #212]	; (80051b4 <drawMainMenu+0x140>)
 80050e0:	f7fc fa24 	bl	800152c <LCD_PutStr>
 80050e4:	4603      	mov	r3, r0
 80050e6:	461a      	mov	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4413      	add	r3, r2
 80050ec:	60bb      	str	r3, [r7, #8]
	if(displayAdcValues[Adc.adc0] >3.5){
 80050ee:	4b32      	ldr	r3, [pc, #200]	; (80051b8 <drawMainMenu+0x144>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a32      	ldr	r2, [pc, #200]	; (80051bc <drawMainMenu+0x148>)
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	edd3 7a00 	vldr	s15, [r3]
 80050fc:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8005100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005108:	dd68      	ble.n	80051dc <drawMainMenu+0x168>
		//errorLED.vsysPMIFault=0;
		switch(bootButtons.bootMode){
 800510a:	4b2d      	ldr	r3, [pc, #180]	; (80051c0 <drawMainMenu+0x14c>)
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	2b05      	cmp	r3, #5
 8005110:	d86c      	bhi.n	80051ec <drawMainMenu+0x178>
 8005112:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <drawMainMenu+0xa4>)
 8005114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005118:	08005131 	.word	0x08005131
 800511c:	08005143 	.word	0x08005143
 8005120:	08005155 	.word	0x08005155
 8005124:	08005167 	.word	0x08005167
 8005128:	0800518b 	.word	0x0800518b
 800512c:	08005179 	.word	0x08005179
		case UNINITIALIZED:
			LCD_PutStr(i, j, "OFF", fnt7x10);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	b298      	uxth	r0, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	b299      	uxth	r1, r3
 8005138:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <drawMainMenu+0x13c>)
 800513a:	4a22      	ldr	r2, [pc, #136]	; (80051c4 <drawMainMenu+0x150>)
 800513c:	f7fc f9f6 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 0;
			//errorLED.edl_boot  = 0;
			break;
 8005140:	e054      	b.n	80051ec <drawMainMenu+0x178>
		case STANDARD:
			LCD_PutStr(i, j, "OS", fnt7x10);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	b298      	uxth	r0, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	b299      	uxth	r1, r3
 800514a:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <drawMainMenu+0x13c>)
 800514c:	4a1e      	ldr	r2, [pc, #120]	; (80051c8 <drawMainMenu+0x154>)
 800514e:	f7fc f9ed 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 1;
			//errorLED.uefi_boot  = 0;
			//errorLED.edl_boot  = 0;
			break;
 8005152:	e04b      	b.n	80051ec <drawMainMenu+0x178>
		case UEFI:
			LCD_PutStr(i, j, "UEFI", fnt7x10);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	b298      	uxth	r0, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	b299      	uxth	r1, r3
 800515c:	4b14      	ldr	r3, [pc, #80]	; (80051b0 <drawMainMenu+0x13c>)
 800515e:	4a1b      	ldr	r2, [pc, #108]	; (80051cc <drawMainMenu+0x158>)
 8005160:	f7fc f9e4 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 1;
			//errorLED.edl_boot  = 0;
			break;
 8005164:	e042      	b.n	80051ec <drawMainMenu+0x178>
		case EDL:
			LCD_PutStr(i, j, "EDL", fnt7x10);
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	b298      	uxth	r0, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	b299      	uxth	r1, r3
 800516e:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <drawMainMenu+0x13c>)
 8005170:	4a17      	ldr	r2, [pc, #92]	; (80051d0 <drawMainMenu+0x15c>)
 8005172:	f7fc f9db 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 0;
			//errorLED.edl_boot  = 1;
			break;
 8005176:	e039      	b.n	80051ec <drawMainMenu+0x178>
		case MASS_STORAGE:
			LCD_PutStr(i, j, "MASS", fnt7x10);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	b298      	uxth	r0, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	b299      	uxth	r1, r3
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <drawMainMenu+0x13c>)
 8005182:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <drawMainMenu+0x160>)
 8005184:	f7fc f9d2 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 1;
			//errorLED.uefi_boot  = 1;
			//errorLED.edl_boot  = 0;
			break;
 8005188:	e030      	b.n	80051ec <drawMainMenu+0x178>
		case RECOVERY:
			LCD_PutStr(i, j, "FFU", fnt7x10);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	b298      	uxth	r0, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	b299      	uxth	r1, r3
 8005192:	4b07      	ldr	r3, [pc, #28]	; (80051b0 <drawMainMenu+0x13c>)
 8005194:	4a10      	ldr	r2, [pc, #64]	; (80051d8 <drawMainMenu+0x164>)
 8005196:	f7fc f9c9 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 1;
			//errorLED.edl_boot  = 1;
			break;
 800519a:	bf00      	nop
 800519c:	e026      	b.n	80051ec <drawMainMenu+0x178>
 800519e:	bf00      	nop
 80051a0:	20003378 	.word	0x20003378
 80051a4:	20028aa8 	.word	0x20028aa8
 80051a8:	20028aaa 	.word	0x20028aaa
 80051ac:	20028aac 	.word	0x20028aac
 80051b0:	08017eb4 	.word	0x08017eb4
 80051b4:	080176b0 	.word	0x080176b0
 80051b8:	20000128 	.word	0x20000128
 80051bc:	20030f48 	.word	0x20030f48
 80051c0:	200032ac 	.word	0x200032ac
 80051c4:	080176b8 	.word	0x080176b8
 80051c8:	080176bc 	.word	0x080176bc
 80051cc:	080176c0 	.word	0x080176c0
 80051d0:	080176c8 	.word	0x080176c8
 80051d4:	080176cc 	.word	0x080176cc
 80051d8:	080176d4 	.word	0x080176d4
		}
	}
	else{
		LCD_PutStr(i, j, "OFF", fnt7x10);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	b298      	uxth	r0, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	b299      	uxth	r1, r3
 80051e4:	4b96      	ldr	r3, [pc, #600]	; (8005440 <drawMainMenu+0x3cc>)
 80051e6:	4a97      	ldr	r2, [pc, #604]	; (8005444 <drawMainMenu+0x3d0>)
 80051e8:	f7fc f9a0 	bl	800152c <LCD_PutStr>
		//errorLED.standard_boot = 0;
		//errorLED.uefi_boot  = 0;
		//errorLED.edl_boot  = 0;

	}
	i  = 135;
 80051ec:	2387      	movs	r3, #135	; 0x87
 80051ee:	60bb      	str	r3, [r7, #8]
	j += 14;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	330e      	adds	r3, #14
 80051f4:	60fb      	str	r3, [r7, #12]

	// Horizontal divider
	LCD_FillRect(2, j, scr_width - 94, j + 3);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	b299      	uxth	r1, r3
 80051fa:	4b93      	ldr	r3, [pc, #588]	; (8005448 <drawMainMenu+0x3d4>)
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	3b5e      	subs	r3, #94	; 0x5e
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	b29b      	uxth	r3, r3
 8005206:	3303      	adds	r3, #3
 8005208:	b29b      	uxth	r3, r3
 800520a:	2002      	movs	r0, #2
 800520c:	f7fb fe42 	bl	8000e94 <LCD_FillRect>

	// Vertical divider
	LCD_FillRect(i + 5, 2, i + 8, j);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	b29b      	uxth	r3, r3
 8005214:	3305      	adds	r3, #5
 8005216:	b298      	uxth	r0, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	b29b      	uxth	r3, r3
 800521c:	3308      	adds	r3, #8
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	b29b      	uxth	r3, r3
 8005224:	2102      	movs	r1, #2
 8005226:	f7fb fe35 	bl	8000e94 <LCD_FillRect>
	LCD_FillRect(scr_width-97, 2, scr_width-94,scr_height-1);
 800522a:	4b87      	ldr	r3, [pc, #540]	; (8005448 <drawMainMenu+0x3d4>)
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	3b61      	subs	r3, #97	; 0x61
 8005230:	b298      	uxth	r0, r3
 8005232:	4b85      	ldr	r3, [pc, #532]	; (8005448 <drawMainMenu+0x3d4>)
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	3b5e      	subs	r3, #94	; 0x5e
 8005238:	b29a      	uxth	r2, r3
 800523a:	4b84      	ldr	r3, [pc, #528]	; (800544c <drawMainMenu+0x3d8>)
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	3b01      	subs	r3, #1
 8005240:	b29b      	uxth	r3, r3
 8005242:	2102      	movs	r1, #2
 8005244:	f7fb fe26 	bl	8000e94 <LCD_FillRect>
	i  = scr_width-90;
 8005248:	4b7f      	ldr	r3, [pc, #508]	; (8005448 <drawMainMenu+0x3d4>)
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	3b5a      	subs	r3, #90	; 0x5a
 800524e:	60bb      	str	r3, [r7, #8]
	j  = 3;
 8005250:	2303      	movs	r3, #3
 8005252:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	b298      	uxth	r0, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b02      	subs	r3, #2
 800525e:	b299      	uxth	r1, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	b29b      	uxth	r3, r3
 8005264:	330c      	adds	r3, #12
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	b29b      	uxth	r3, r3
 800526c:	3308      	adds	r3, #8
 800526e:	b29b      	uxth	r3, r3
 8005270:	f7fb fe10 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	3314      	adds	r3, #20
 8005278:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "ZION FLT", fnt7x10);
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	b298      	uxth	r0, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	b299      	uxth	r1, r3
 8005282:	4b6f      	ldr	r3, [pc, #444]	; (8005440 <drawMainMenu+0x3cc>)
 8005284:	4a72      	ldr	r2, [pc, #456]	; (8005450 <drawMainMenu+0x3dc>)
 8005286:	f7fc f951 	bl	800152c <LCD_PutStr>
	j+=22;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3316      	adds	r3, #22
 800528e:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 8005290:	4b6d      	ldr	r3, [pc, #436]	; (8005448 <drawMainMenu+0x3d4>)
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	3b5a      	subs	r3, #90	; 0x5a
 8005296:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	b298      	uxth	r0, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b02      	subs	r3, #2
 80052a2:	b299      	uxth	r1, r3
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	330c      	adds	r3, #12
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3308      	adds	r3, #8
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f7fb fdee 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	3314      	adds	r3, #20
 80052bc:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "VSYS FLT", fnt7x10);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	b298      	uxth	r0, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	b299      	uxth	r1, r3
 80052c6:	4b5e      	ldr	r3, [pc, #376]	; (8005440 <drawMainMenu+0x3cc>)
 80052c8:	4a62      	ldr	r2, [pc, #392]	; (8005454 <drawMainMenu+0x3e0>)
 80052ca:	f7fc f92f 	bl	800152c <LCD_PutStr>
	i  = scr_width-90;
 80052ce:	4b5e      	ldr	r3, [pc, #376]	; (8005448 <drawMainMenu+0x3d4>)
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	3b5a      	subs	r3, #90	; 0x5a
 80052d4:	60bb      	str	r3, [r7, #8]
	j  += 22;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3316      	adds	r3, #22
 80052da:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	b298      	uxth	r0, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b02      	subs	r3, #2
 80052e6:	b299      	uxth	r1, r3
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	330c      	adds	r3, #12
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3308      	adds	r3, #8
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	f7fb fdcc 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	3314      	adds	r3, #20
 8005300:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT3", fnt7x10);
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	b298      	uxth	r0, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	b299      	uxth	r1, r3
 800530a:	4b4d      	ldr	r3, [pc, #308]	; (8005440 <drawMainMenu+0x3cc>)
 800530c:	4a52      	ldr	r2, [pc, #328]	; (8005458 <drawMainMenu+0x3e4>)
 800530e:	f7fc f90d 	bl	800152c <LCD_PutStr>
	j+=22;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3316      	adds	r3, #22
 8005316:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 8005318:	4b4b      	ldr	r3, [pc, #300]	; (8005448 <drawMainMenu+0x3d4>)
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	3b5a      	subs	r3, #90	; 0x5a
 800531e:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	b298      	uxth	r0, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b02      	subs	r3, #2
 800532a:	b299      	uxth	r1, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	b29b      	uxth	r3, r3
 8005330:	330c      	adds	r3, #12
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	b29b      	uxth	r3, r3
 8005338:	3308      	adds	r3, #8
 800533a:	b29b      	uxth	r3, r3
 800533c:	f7fb fdaa 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	3314      	adds	r3, #20
 8005344:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT4", fnt7x10);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	b298      	uxth	r0, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	b299      	uxth	r1, r3
 800534e:	4b3c      	ldr	r3, [pc, #240]	; (8005440 <drawMainMenu+0x3cc>)
 8005350:	4a42      	ldr	r2, [pc, #264]	; (800545c <drawMainMenu+0x3e8>)
 8005352:	f7fc f8eb 	bl	800152c <LCD_PutStr>
	i  = scr_width-90;
 8005356:	4b3c      	ldr	r3, [pc, #240]	; (8005448 <drawMainMenu+0x3d4>)
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	3b5a      	subs	r3, #90	; 0x5a
 800535c:	60bb      	str	r3, [r7, #8]
	j  += 22;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3316      	adds	r3, #22
 8005362:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	b298      	uxth	r0, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b02      	subs	r3, #2
 800536e:	b299      	uxth	r1, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	b29b      	uxth	r3, r3
 8005374:	330c      	adds	r3, #12
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	b29b      	uxth	r3, r3
 800537c:	3308      	adds	r3, #8
 800537e:	b29b      	uxth	r3, r3
 8005380:	f7fb fd88 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	3314      	adds	r3, #20
 8005388:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT5", fnt7x10);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	b298      	uxth	r0, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	b299      	uxth	r1, r3
 8005392:	4b2b      	ldr	r3, [pc, #172]	; (8005440 <drawMainMenu+0x3cc>)
 8005394:	4a32      	ldr	r2, [pc, #200]	; (8005460 <drawMainMenu+0x3ec>)
 8005396:	f7fc f8c9 	bl	800152c <LCD_PutStr>
	j+=22;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3316      	adds	r3, #22
 800539e:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 80053a0:	4b29      	ldr	r3, [pc, #164]	; (8005448 <drawMainMenu+0x3d4>)
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	3b5a      	subs	r3, #90	; 0x5a
 80053a6:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	b298      	uxth	r0, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b02      	subs	r3, #2
 80053b2:	b299      	uxth	r1, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	330c      	adds	r3, #12
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3308      	adds	r3, #8
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	f7fb fd66 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	3314      	adds	r3, #20
 80053cc:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT6", fnt7x10);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	b298      	uxth	r0, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	b299      	uxth	r1, r3
 80053d6:	4b1a      	ldr	r3, [pc, #104]	; (8005440 <drawMainMenu+0x3cc>)
 80053d8:	4a22      	ldr	r2, [pc, #136]	; (8005464 <drawMainMenu+0x3f0>)
 80053da:	f7fc f8a7 	bl	800152c <LCD_PutStr>
	i  = scr_width-90;
 80053de:	4b1a      	ldr	r3, [pc, #104]	; (8005448 <drawMainMenu+0x3d4>)
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	3b5a      	subs	r3, #90	; 0x5a
 80053e4:	60bb      	str	r3, [r7, #8]
	j  +=22;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3316      	adds	r3, #22
 80053ea:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	b298      	uxth	r0, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b02      	subs	r3, #2
 80053f6:	b299      	uxth	r1, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	330c      	adds	r3, #12
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	b29b      	uxth	r3, r3
 8005404:	3308      	adds	r3, #8
 8005406:	b29b      	uxth	r3, r3
 8005408:	f7fb fd44 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	3314      	adds	r3, #20
 8005410:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT7", fnt7x10);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	b298      	uxth	r0, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	b299      	uxth	r1, r3
 800541a:	4b09      	ldr	r3, [pc, #36]	; (8005440 <drawMainMenu+0x3cc>)
 800541c:	4a12      	ldr	r2, [pc, #72]	; (8005468 <drawMainMenu+0x3f4>)
 800541e:	f7fc f885 	bl	800152c <LCD_PutStr>
	j+=22;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3316      	adds	r3, #22
 8005426:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 8005428:	4b07      	ldr	r3, [pc, #28]	; (8005448 <drawMainMenu+0x3d4>)
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	3b5a      	subs	r3, #90	; 0x5a
 800542e:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	b298      	uxth	r0, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b02      	subs	r3, #2
 800543a:	b299      	uxth	r1, r3
 800543c:	e016      	b.n	800546c <drawMainMenu+0x3f8>
 800543e:	bf00      	nop
 8005440:	08017eb4 	.word	0x08017eb4
 8005444:	080176b8 	.word	0x080176b8
 8005448:	20028aaa 	.word	0x20028aaa
 800544c:	20028aac 	.word	0x20028aac
 8005450:	080176d8 	.word	0x080176d8
 8005454:	080176e4 	.word	0x080176e4
 8005458:	080176f0 	.word	0x080176f0
 800545c:	080176f8 	.word	0x080176f8
 8005460:	08017700 	.word	0x08017700
 8005464:	08017708 	.word	0x08017708
 8005468:	08017710 	.word	0x08017710
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	b29b      	uxth	r3, r3
 8005470:	330c      	adds	r3, #12
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	b29b      	uxth	r3, r3
 8005478:	3308      	adds	r3, #8
 800547a:	b29b      	uxth	r3, r3
 800547c:	f7fb fd0a 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	3314      	adds	r3, #20
 8005484:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT8", fnt7x10);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	b298      	uxth	r0, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	b299      	uxth	r1, r3
 800548e:	4b6f      	ldr	r3, [pc, #444]	; (800564c <drawMainMenu+0x5d8>)
 8005490:	4a6f      	ldr	r2, [pc, #444]	; (8005650 <drawMainMenu+0x5dc>)
 8005492:	f7fc f84b 	bl	800152c <LCD_PutStr>
	i  = scr_width-90;
 8005496:	4b6f      	ldr	r3, [pc, #444]	; (8005654 <drawMainMenu+0x5e0>)
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	3b5a      	subs	r3, #90	; 0x5a
 800549c:	60bb      	str	r3, [r7, #8]
	j  +=22;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	3316      	adds	r3, #22
 80054a2:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	b298      	uxth	r0, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b02      	subs	r3, #2
 80054ae:	b299      	uxth	r1, r3
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	330c      	adds	r3, #12
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3308      	adds	r3, #8
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f7fb fce8 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	3314      	adds	r3, #20
 80054c8:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT9", fnt7x10);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	b298      	uxth	r0, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	b299      	uxth	r1, r3
 80054d2:	4b5e      	ldr	r3, [pc, #376]	; (800564c <drawMainMenu+0x5d8>)
 80054d4:	4a60      	ldr	r2, [pc, #384]	; (8005658 <drawMainMenu+0x5e4>)
 80054d6:	f7fc f829 	bl	800152c <LCD_PutStr>
	j = scr_height-20;
 80054da:	4b60      	ldr	r3, [pc, #384]	; (800565c <drawMainMenu+0x5e8>)
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	3b14      	subs	r3, #20
 80054e0:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 80054e2:	4b5c      	ldr	r3, [pc, #368]	; (8005654 <drawMainMenu+0x5e0>)
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	3b5a      	subs	r3, #90	; 0x5a
 80054e8:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	b298      	uxth	r0, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b02      	subs	r3, #2
 80054f4:	b299      	uxth	r1, r3
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	330c      	adds	r3, #12
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	b29b      	uxth	r3, r3
 8005502:	3308      	adds	r3, #8
 8005504:	b29b      	uxth	r3, r3
 8005506:	f7fb fcc5 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	3314      	adds	r3, #20
 800550e:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "MODE", fnt7x10);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	b298      	uxth	r0, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	b299      	uxth	r1, r3
 8005518:	4b4c      	ldr	r3, [pc, #304]	; (800564c <drawMainMenu+0x5d8>)
 800551a:	4a51      	ldr	r2, [pc, #324]	; (8005660 <drawMainMenu+0x5ec>)
 800551c:	f7fc f806 	bl	800152c <LCD_PutStr>

	i=100;
 8005520:	2364      	movs	r3, #100	; 0x64
 8005522:	60bb      	str	r3, [r7, #8]
	j=75;
 8005524:	234b      	movs	r3, #75	; 0x4b
 8005526:	60fb      	str	r3, [r7, #12]
	i+=20;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	3314      	adds	r3, #20
 800552c:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "BOOT MODE", fnt7x10);
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	b298      	uxth	r0, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	b299      	uxth	r1, r3
 8005536:	4b45      	ldr	r3, [pc, #276]	; (800564c <drawMainMenu+0x5d8>)
 8005538:	4a4a      	ldr	r2, [pc, #296]	; (8005664 <drawMainMenu+0x5f0>)
 800553a:	f7fb fff7 	bl	800152c <LCD_PutStr>
	j+=15;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	330f      	adds	r3, #15
 8005542:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 71, j + 2);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b03      	subs	r3, #3
 800554a:	b298      	uxth	r0, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b02      	subs	r3, #2
 8005552:	b299      	uxth	r1, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	b29b      	uxth	r3, r3
 8005558:	3347      	adds	r3, #71	; 0x47
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	b29b      	uxth	r3, r3
 8005560:	3302      	adds	r3, #2
 8005562:	b29b      	uxth	r3, r3
 8005564:	f7fb fc96 	bl	8000e94 <LCD_FillRect>

	i=100;
 8005568:	2364      	movs	r3, #100	; 0x64
 800556a:	60bb      	str	r3, [r7, #8]
	j=110;
 800556c:	236e      	movs	r3, #110	; 0x6e
 800556e:	60fb      	str	r3, [r7, #12]
	i+=20;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	3314      	adds	r3, #20
 8005574:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "STATUS", fnt7x10);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	b298      	uxth	r0, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	b299      	uxth	r1, r3
 800557e:	4b33      	ldr	r3, [pc, #204]	; (800564c <drawMainMenu+0x5d8>)
 8005580:	4a39      	ldr	r2, [pc, #228]	; (8005668 <drawMainMenu+0x5f4>)
 8005582:	f7fb ffd3 	bl	800152c <LCD_PutStr>
	j+=15;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	330f      	adds	r3, #15
 800558a:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 50, j + 2);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	b29b      	uxth	r3, r3
 8005590:	3b03      	subs	r3, #3
 8005592:	b298      	uxth	r0, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b02      	subs	r3, #2
 800559a:	b299      	uxth	r1, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3332      	adds	r3, #50	; 0x32
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3302      	adds	r3, #2
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	f7fb fc72 	bl	8000e94 <LCD_FillRect>

	i=100;
 80055b0:	2364      	movs	r3, #100	; 0x64
 80055b2:	60bb      	str	r3, [r7, #8]
	j=145;
 80055b4:	2391      	movs	r3, #145	; 0x91
 80055b6:	60fb      	str	r3, [r7, #12]
	i+=20;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	3314      	adds	r3, #20
 80055bc:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "SYSTEM INFO", fnt7x10);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	b298      	uxth	r0, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	b299      	uxth	r1, r3
 80055c6:	4b21      	ldr	r3, [pc, #132]	; (800564c <drawMainMenu+0x5d8>)
 80055c8:	4a28      	ldr	r2, [pc, #160]	; (800566c <drawMainMenu+0x5f8>)
 80055ca:	f7fb ffaf 	bl	800152c <LCD_PutStr>
	j+=15;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	330f      	adds	r3, #15
 80055d2:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 85, j + 2);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b03      	subs	r3, #3
 80055da:	b298      	uxth	r0, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b02      	subs	r3, #2
 80055e2:	b299      	uxth	r1, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3355      	adds	r3, #85	; 0x55
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3302      	adds	r3, #2
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	f7fb fc4e 	bl	8000e94 <LCD_FillRect>
	i=100;
 80055f8:	2364      	movs	r3, #100	; 0x64
 80055fa:	60bb      	str	r3, [r7, #8]
	switch(indicator){
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d006      	beq.n	8005610 <drawMainMenu+0x59c>
 8005602:	2b03      	cmp	r3, #3
 8005604:	d007      	beq.n	8005616 <drawMainMenu+0x5a2>
 8005606:	2b01      	cmp	r3, #1
 8005608:	d108      	bne.n	800561c <drawMainMenu+0x5a8>
	case FIRST:
	{
		j=75;
 800560a:	234b      	movs	r3, #75	; 0x4b
 800560c:	60fb      	str	r3, [r7, #12]
		break;
 800560e:	e008      	b.n	8005622 <drawMainMenu+0x5ae>
	}
	case SECOND:
	{
		j=110;
 8005610:	236e      	movs	r3, #110	; 0x6e
 8005612:	60fb      	str	r3, [r7, #12]
		break;
 8005614:	e005      	b.n	8005622 <drawMainMenu+0x5ae>
	}
	case THIRD:
	{
		j=145;
 8005616:	2391      	movs	r3, #145	; 0x91
 8005618:	60fb      	str	r3, [r7, #12]
		break;
 800561a:	e002      	b.n	8005622 <drawMainMenu+0x5ae>
	}
	default:
	{
		j=75;
 800561c:	234b      	movs	r3, #75	; 0x4b
 800561e:	60fb      	str	r3, [r7, #12]
		break;
 8005620:	bf00      	nop
	}
	}
	LCD_FillRect(i, j, i + 12, j + 10);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	b298      	uxth	r0, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	b299      	uxth	r1, r3
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	b29b      	uxth	r3, r3
 800562e:	330c      	adds	r3, #12
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	b29b      	uxth	r3, r3
 8005636:	330a      	adds	r3, #10
 8005638:	b29b      	uxth	r3, r3
 800563a:	f7fb fc2b 	bl	8000e94 <LCD_FillRect>
	SMLCD_Flush();
 800563e:	f7fb f84b 	bl	80006d8 <SMLCD_Flush>
}
 8005642:	bf00      	nop
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	08017eb4 	.word	0x08017eb4
 8005650:	08017718 	.word	0x08017718
 8005654:	20028aaa 	.word	0x20028aaa
 8005658:	08017720 	.word	0x08017720
 800565c:	20028aac 	.word	0x20028aac
 8005660:	08017728 	.word	0x08017728
 8005664:	08017730 	.word	0x08017730
 8005668:	0801773c 	.word	0x0801773c
 800566c:	08017744 	.word	0x08017744

08005670 <drawStatusMenu>:

void drawStatusMenu(int indicator){
 8005670:	b580      	push	{r7, lr}
 8005672:	b090      	sub	sp, #64	; 0x40
 8005674:	af02      	add	r7, sp, #8
 8005676:	6078      	str	r0, [r7, #4]
	int i,j;
	//float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8005678:	2314      	movs	r3, #20
 800567a:	637b      	str	r3, [r7, #52]	; 0x34
	int inputGpioAlignment=245;
 800567c:	23f5      	movs	r3, #245	; 0xf5
 800567e:	633b      	str	r3, [r7, #48]	; 0x30
	int daughterCardAlignment=240;
 8005680:	23f0      	movs	r3, #240	; 0xf0
 8005682:	62fb      	str	r3, [r7, #44]	; 0x2c
	int i2cCheck;
	int arrowUp = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28
	int arrowDown=1;
 8005688:	2301      	movs	r3, #1
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
	int arrowSize=3;
 800568c:	2303      	movs	r3, #3
 800568e:	623b      	str	r3, [r7, #32]
	previousMenu=0;
 8005690:	4b95      	ldr	r3, [pc, #596]	; (80058e8 <drawStatusMenu+0x278>)
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8005696:	f7fb f969 	bl	800096c <LCD_Clear>
	getLatestADC();
 800569a:	f002 faad 	bl	8007bf8 <getLatestADC>
	drawMenuHeader();
 800569e:	f002 f9ef 	bl	8007a80 <drawMenuHeader>
	i  = 135;
 80056a2:	2387      	movs	r3, #135	; 0x87
 80056a4:	61fb      	str	r3, [r7, #28]
	j = 24;
 80056a6:	2318      	movs	r3, #24
 80056a8:	61bb      	str	r3, [r7, #24]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	b299      	uxth	r1, r3
 80056ae:	4b8f      	ldr	r3, [pc, #572]	; (80058ec <drawStatusMenu+0x27c>)
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	3b02      	subs	r3, #2
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3303      	adds	r3, #3
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2002      	movs	r0, #2
 80056c0:	f7fb fbe8 	bl	8000e94 <LCD_FillRect>
//	i  = 135;
//	j += 12;
//
//	//horizontal divider
//	LCD_FillRect(2, j, scr_width - 2, j + 3);
	switch(indicator){
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	f000 829a 	beq.w	8005c00 <drawStatusMenu+0x590>
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	f001 8037 	beq.w	8006740 <drawStatusMenu+0x10d0>
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	f041 813f 	bne.w	8006956 <drawStatusMenu+0x12e6>
	case 1:{
		i=35;
 80056d8:	2323      	movs	r3, #35	; 0x23
 80056da:	61fb      	str	r3, [r7, #28]
		j=90;
 80056dc:	235a      	movs	r3, #90	; 0x5a
 80056de:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b02      	subs	r3, #2
 80056e6:	b299      	uxth	r1, r3
 80056e8:	4b80      	ldr	r3, [pc, #512]	; (80058ec <drawStatusMenu+0x27c>)
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	3b02      	subs	r3, #2
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3302      	adds	r3, #2
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	2002      	movs	r0, #2
 80056fa:	f7fb fbcb 	bl	8000e94 <LCD_FillRect>
		j=75;
 80056fe:	234b      	movs	r3, #75	; 0x4b
 8005700:	61bb      	str	r3, [r7, #24]
		i=62;
 8005702:	233e      	movs	r3, #62	; 0x3e
 8005704:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	b298      	uxth	r0, r3
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	b299      	uxth	r1, r3
 800570e:	4b78      	ldr	r3, [pc, #480]	; (80058f0 <drawStatusMenu+0x280>)
 8005710:	4a78      	ldr	r2, [pc, #480]	; (80058f4 <drawStatusMenu+0x284>)
 8005712:	f7fb ff0b 	bl	800152c <LCD_PutStr>
 8005716:	4603      	mov	r3, r0
 8005718:	461a      	mov	r2, r3
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	61fb      	str	r3, [r7, #28]
		i+=145;
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	3391      	adds	r3, #145	; 0x91
 8005724:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "DAUGHTER CARDS:", fnt7x10);
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	b298      	uxth	r0, r3
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	b299      	uxth	r1, r3
 800572e:	4b70      	ldr	r3, [pc, #448]	; (80058f0 <drawStatusMenu+0x280>)
 8005730:	4a71      	ldr	r2, [pc, #452]	; (80058f8 <drawStatusMenu+0x288>)
 8005732:	f7fb fefb 	bl	800152c <LCD_PutStr>

		i=10;
 8005736:	230a      	movs	r3, #10
 8005738:	61fb      	str	r3, [r7, #28]
		j=95;
 800573a:	235f      	movs	r3, #95	; 0x5f
 800573c:	61bb      	str	r3, [r7, #24]

		i+= LCD_PutStr(i, j, "ZION FLT: ", fnt7x10);
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	b298      	uxth	r0, r3
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	b299      	uxth	r1, r3
 8005746:	4b6a      	ldr	r3, [pc, #424]	; (80058f0 <drawStatusMenu+0x280>)
 8005748:	4a6c      	ldr	r2, [pc, #432]	; (80058fc <drawStatusMenu+0x28c>)
 800574a:	f7fb feef 	bl	800152c <LCD_PutStr>
 800574e:	4603      	mov	r3, r0
 8005750:	461a      	mov	r2, r3
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	61fb      	str	r3, [r7, #28]
		if(errorLED.zionFault){
 8005758:	4b69      	ldr	r3, [pc, #420]	; (8005900 <drawStatusMenu+0x290>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <drawStatusMenu+0x102>
			LCD_PutStr(i, j, "SOC ZION ERROR", fnt7x10);
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	b298      	uxth	r0, r3
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	b299      	uxth	r1, r3
 8005768:	4b61      	ldr	r3, [pc, #388]	; (80058f0 <drawStatusMenu+0x280>)
 800576a:	4a66      	ldr	r2, [pc, #408]	; (8005904 <drawStatusMenu+0x294>)
 800576c:	f7fb fede 	bl	800152c <LCD_PutStr>
 8005770:	e007      	b.n	8005782 <drawStatusMenu+0x112>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	b298      	uxth	r0, r3
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	b299      	uxth	r1, r3
 800577a:	4b5d      	ldr	r3, [pc, #372]	; (80058f0 <drawStatusMenu+0x280>)
 800577c:	4a62      	ldr	r2, [pc, #392]	; (8005908 <drawStatusMenu+0x298>)
 800577e:	f7fb fed5 	bl	800152c <LCD_PutStr>
		}
		i=daughterCardAlignment;
 8005782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005784:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	b298      	uxth	r0, r3
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	b299      	uxth	r1, r3
 800578e:	4b58      	ldr	r3, [pc, #352]	; (80058f0 <drawStatusMenu+0x280>)
 8005790:	4a5e      	ldr	r2, [pc, #376]	; (800590c <drawStatusMenu+0x29c>)
 8005792:	f7fb fecb 	bl	800152c <LCD_PutStr>
 8005796:	4603      	mov	r3, r0
 8005798:	461a      	mov	r2, r3
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	4413      	add	r3, r2
 800579e:	61fb      	str	r3, [r7, #28]
		if(ZION.SOC_EEPROM_Detected){
 80057a0:	4b5b      	ldr	r3, [pc, #364]	; (8005910 <drawStatusMenu+0x2a0>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <drawStatusMenu+0x14a>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	b298      	uxth	r0, r3
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	b299      	uxth	r1, r3
 80057b0:	4b4f      	ldr	r3, [pc, #316]	; (80058f0 <drawStatusMenu+0x280>)
 80057b2:	4a58      	ldr	r2, [pc, #352]	; (8005914 <drawStatusMenu+0x2a4>)
 80057b4:	f7fb feba 	bl	800152c <LCD_PutStr>
 80057b8:	e007      	b.n	80057ca <drawStatusMenu+0x15a>
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	b298      	uxth	r0, r3
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	b299      	uxth	r1, r3
 80057c2:	4b4b      	ldr	r3, [pc, #300]	; (80058f0 <drawStatusMenu+0x280>)
 80057c4:	4a54      	ldr	r2, [pc, #336]	; (8005918 <drawStatusMenu+0x2a8>)
 80057c6:	f7fb feb1 	bl	800152c <LCD_PutStr>
		}
		i=10;
 80057ca:	230a      	movs	r3, #10
 80057cc:	61fb      	str	r3, [r7, #28]
		j+=15;
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	330f      	adds	r3, #15
 80057d2:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "VSYS_PMI: ", fnt7x10);
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	b298      	uxth	r0, r3
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	b299      	uxth	r1, r3
 80057dc:	4b44      	ldr	r3, [pc, #272]	; (80058f0 <drawStatusMenu+0x280>)
 80057de:	4a4f      	ldr	r2, [pc, #316]	; (800591c <drawStatusMenu+0x2ac>)
 80057e0:	f7fb fea4 	bl	800152c <LCD_PutStr>
 80057e4:	4603      	mov	r3, r0
 80057e6:	461a      	mov	r2, r3
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	4413      	add	r3, r2
 80057ec:	61fb      	str	r3, [r7, #28]
		if(errorLED.vsysPMIFault){
 80057ee:	4b44      	ldr	r3, [pc, #272]	; (8005900 <drawStatusMenu+0x290>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d008      	beq.n	8005808 <drawStatusMenu+0x198>
			LCD_PutStr(i, j, "VSYS PMI LOW", fnt7x10);
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	b298      	uxth	r0, r3
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	b299      	uxth	r1, r3
 80057fe:	4b3c      	ldr	r3, [pc, #240]	; (80058f0 <drawStatusMenu+0x280>)
 8005800:	4a47      	ldr	r2, [pc, #284]	; (8005920 <drawStatusMenu+0x2b0>)
 8005802:	f7fb fe93 	bl	800152c <LCD_PutStr>
 8005806:	e007      	b.n	8005818 <drawStatusMenu+0x1a8>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	b298      	uxth	r0, r3
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	b299      	uxth	r1, r3
 8005810:	4b37      	ldr	r3, [pc, #220]	; (80058f0 <drawStatusMenu+0x280>)
 8005812:	4a3d      	ldr	r2, [pc, #244]	; (8005908 <drawStatusMenu+0x298>)
 8005814:	f7fb fe8a 	bl	800152c <LCD_PutStr>
		}
		i=daughterCardAlignment;
 8005818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581a:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	b298      	uxth	r0, r3
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	b299      	uxth	r1, r3
 8005824:	4b32      	ldr	r3, [pc, #200]	; (80058f0 <drawStatusMenu+0x280>)
 8005826:	4a3f      	ldr	r2, [pc, #252]	; (8005924 <drawStatusMenu+0x2b4>)
 8005828:	f7fb fe80 	bl	800152c <LCD_PutStr>
 800582c:	4603      	mov	r3, r0
 800582e:	461a      	mov	r2, r3
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	4413      	add	r3, r2
 8005834:	61fb      	str	r3, [r7, #28]
		if(ZION.ASIC_EEPROM_Detected){
 8005836:	4b36      	ldr	r3, [pc, #216]	; (8005910 <drawStatusMenu+0x2a0>)
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d008      	beq.n	8005850 <drawStatusMenu+0x1e0>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	b298      	uxth	r0, r3
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	b299      	uxth	r1, r3
 8005846:	4b2a      	ldr	r3, [pc, #168]	; (80058f0 <drawStatusMenu+0x280>)
 8005848:	4a32      	ldr	r2, [pc, #200]	; (8005914 <drawStatusMenu+0x2a4>)
 800584a:	f7fb fe6f 	bl	800152c <LCD_PutStr>
 800584e:	e007      	b.n	8005860 <drawStatusMenu+0x1f0>
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	b298      	uxth	r0, r3
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	b299      	uxth	r1, r3
 8005858:	4b25      	ldr	r3, [pc, #148]	; (80058f0 <drawStatusMenu+0x280>)
 800585a:	4a2f      	ldr	r2, [pc, #188]	; (8005918 <drawStatusMenu+0x2a8>)
 800585c:	f7fb fe66 	bl	800152c <LCD_PutStr>
		}
		i=10;
 8005860:	230a      	movs	r3, #10
 8005862:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	330f      	adds	r3, #15
 8005868:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault3: ", fnt7x10);
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	b298      	uxth	r0, r3
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	b299      	uxth	r1, r3
 8005872:	4b1f      	ldr	r3, [pc, #124]	; (80058f0 <drawStatusMenu+0x280>)
 8005874:	4a2c      	ldr	r2, [pc, #176]	; (8005928 <drawStatusMenu+0x2b8>)
 8005876:	f7fb fe59 	bl	800152c <LCD_PutStr>
 800587a:	4603      	mov	r3, r0
 800587c:	461a      	mov	r2, r3
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	4413      	add	r3, r2
 8005882:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault3){
 8005884:	4b1e      	ldr	r3, [pc, #120]	; (8005900 <drawStatusMenu+0x290>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d008      	beq.n	800589e <drawStatusMenu+0x22e>
			LCD_PutStr(i, j, "FAULT 3 Triggered", fnt7x10);
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	b298      	uxth	r0, r3
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	b299      	uxth	r1, r3
 8005894:	4b16      	ldr	r3, [pc, #88]	; (80058f0 <drawStatusMenu+0x280>)
 8005896:	4a25      	ldr	r2, [pc, #148]	; (800592c <drawStatusMenu+0x2bc>)
 8005898:	f7fb fe48 	bl	800152c <LCD_PutStr>
 800589c:	e007      	b.n	80058ae <drawStatusMenu+0x23e>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	b298      	uxth	r0, r3
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	b299      	uxth	r1, r3
 80058a6:	4b12      	ldr	r3, [pc, #72]	; (80058f0 <drawStatusMenu+0x280>)
 80058a8:	4a17      	ldr	r2, [pc, #92]	; (8005908 <drawStatusMenu+0x298>)
 80058aa:	f7fb fe3f 	bl	800152c <LCD_PutStr>
		}
		i=daughterCardAlignment;
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "Display: ", fnt7x10);
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	b298      	uxth	r0, r3
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	b299      	uxth	r1, r3
 80058ba:	4b0d      	ldr	r3, [pc, #52]	; (80058f0 <drawStatusMenu+0x280>)
 80058bc:	4a1c      	ldr	r2, [pc, #112]	; (8005930 <drawStatusMenu+0x2c0>)
 80058be:	f7fb fe35 	bl	800152c <LCD_PutStr>
 80058c2:	4603      	mov	r3, r0
 80058c4:	461a      	mov	r2, r3
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	4413      	add	r3, r2
 80058ca:	61fb      	str	r3, [r7, #28]
		if(ZION.DISPLAY_EEPROM_Detected){
 80058cc:	4b10      	ldr	r3, [pc, #64]	; (8005910 <drawStatusMenu+0x2a0>)
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d02f      	beq.n	8005934 <drawStatusMenu+0x2c4>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	b298      	uxth	r0, r3
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	b299      	uxth	r1, r3
 80058dc:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <drawStatusMenu+0x280>)
 80058de:	4a0d      	ldr	r2, [pc, #52]	; (8005914 <drawStatusMenu+0x2a4>)
 80058e0:	f7fb fe24 	bl	800152c <LCD_PutStr>
 80058e4:	e02e      	b.n	8005944 <drawStatusMenu+0x2d4>
 80058e6:	bf00      	nop
 80058e8:	20003378 	.word	0x20003378
 80058ec:	20028aaa 	.word	0x20028aaa
 80058f0:	08017eb4 	.word	0x08017eb4
 80058f4:	08017750 	.word	0x08017750
 80058f8:	08017758 	.word	0x08017758
 80058fc:	08017768 	.word	0x08017768
 8005900:	200032d8 	.word	0x200032d8
 8005904:	08017774 	.word	0x08017774
 8005908:	08017784 	.word	0x08017784
 800590c:	0801778c 	.word	0x0801778c
 8005910:	20003274 	.word	0x20003274
 8005914:	08017794 	.word	0x08017794
 8005918:	080177a0 	.word	0x080177a0
 800591c:	080177ac 	.word	0x080177ac
 8005920:	080177b8 	.word	0x080177b8
 8005924:	080177c8 	.word	0x080177c8
 8005928:	080177d0 	.word	0x080177d0
 800592c:	080177dc 	.word	0x080177dc
 8005930:	080177f0 	.word	0x080177f0
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	b298      	uxth	r0, r3
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	b299      	uxth	r1, r3
 800593c:	4b72      	ldr	r3, [pc, #456]	; (8005b08 <drawStatusMenu+0x498>)
 800593e:	4a73      	ldr	r2, [pc, #460]	; (8005b0c <drawStatusMenu+0x49c>)
 8005940:	f7fb fdf4 	bl	800152c <LCD_PutStr>
		}

		i=10;
 8005944:	230a      	movs	r3, #10
 8005946:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	330f      	adds	r3, #15
 800594c:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault4: ", fnt7x10);
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	b298      	uxth	r0, r3
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	b299      	uxth	r1, r3
 8005956:	4b6c      	ldr	r3, [pc, #432]	; (8005b08 <drawStatusMenu+0x498>)
 8005958:	4a6d      	ldr	r2, [pc, #436]	; (8005b10 <drawStatusMenu+0x4a0>)
 800595a:	f7fb fde7 	bl	800152c <LCD_PutStr>
 800595e:	4603      	mov	r3, r0
 8005960:	461a      	mov	r2, r3
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	4413      	add	r3, r2
 8005966:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault4){
 8005968:	4b6a      	ldr	r3, [pc, #424]	; (8005b14 <drawStatusMenu+0x4a4>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d008      	beq.n	8005982 <drawStatusMenu+0x312>
			LCD_PutStr(i, j, "FAULT 4 Triggered", fnt7x10);
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	b298      	uxth	r0, r3
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	b299      	uxth	r1, r3
 8005978:	4b63      	ldr	r3, [pc, #396]	; (8005b08 <drawStatusMenu+0x498>)
 800597a:	4a67      	ldr	r2, [pc, #412]	; (8005b18 <drawStatusMenu+0x4a8>)
 800597c:	f7fb fdd6 	bl	800152c <LCD_PutStr>
 8005980:	e007      	b.n	8005992 <drawStatusMenu+0x322>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	b298      	uxth	r0, r3
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	b299      	uxth	r1, r3
 800598a:	4b5f      	ldr	r3, [pc, #380]	; (8005b08 <drawStatusMenu+0x498>)
 800598c:	4a63      	ldr	r2, [pc, #396]	; (8005b1c <drawStatusMenu+0x4ac>)
 800598e:	f7fb fdcd 	bl	800152c <LCD_PutStr>
		}

		i=10;
 8005992:	230a      	movs	r3, #10
 8005994:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	330f      	adds	r3, #15
 800599a:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault5: ", fnt7x10);
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	b298      	uxth	r0, r3
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	b299      	uxth	r1, r3
 80059a4:	4b58      	ldr	r3, [pc, #352]	; (8005b08 <drawStatusMenu+0x498>)
 80059a6:	4a5e      	ldr	r2, [pc, #376]	; (8005b20 <drawStatusMenu+0x4b0>)
 80059a8:	f7fb fdc0 	bl	800152c <LCD_PutStr>
 80059ac:	4603      	mov	r3, r0
 80059ae:	461a      	mov	r2, r3
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	4413      	add	r3, r2
 80059b4:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault5){
 80059b6:	4b57      	ldr	r3, [pc, #348]	; (8005b14 <drawStatusMenu+0x4a4>)
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d008      	beq.n	80059d0 <drawStatusMenu+0x360>
			LCD_PutStr(i, j, "FAULT 5 Triggered", fnt7x10);
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	b298      	uxth	r0, r3
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	b299      	uxth	r1, r3
 80059c6:	4b50      	ldr	r3, [pc, #320]	; (8005b08 <drawStatusMenu+0x498>)
 80059c8:	4a56      	ldr	r2, [pc, #344]	; (8005b24 <drawStatusMenu+0x4b4>)
 80059ca:	f7fb fdaf 	bl	800152c <LCD_PutStr>
 80059ce:	e007      	b.n	80059e0 <drawStatusMenu+0x370>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	b298      	uxth	r0, r3
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	b299      	uxth	r1, r3
 80059d8:	4b4b      	ldr	r3, [pc, #300]	; (8005b08 <drawStatusMenu+0x498>)
 80059da:	4a50      	ldr	r2, [pc, #320]	; (8005b1c <drawStatusMenu+0x4ac>)
 80059dc:	f7fb fda6 	bl	800152c <LCD_PutStr>
		}

		i=10;
 80059e0:	230a      	movs	r3, #10
 80059e2:	61fb      	str	r3, [r7, #28]
		j+=15;
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	330f      	adds	r3, #15
 80059e8:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault6: ", fnt7x10);
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	b298      	uxth	r0, r3
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	b299      	uxth	r1, r3
 80059f2:	4b45      	ldr	r3, [pc, #276]	; (8005b08 <drawStatusMenu+0x498>)
 80059f4:	4a4c      	ldr	r2, [pc, #304]	; (8005b28 <drawStatusMenu+0x4b8>)
 80059f6:	f7fb fd99 	bl	800152c <LCD_PutStr>
 80059fa:	4603      	mov	r3, r0
 80059fc:	461a      	mov	r2, r3
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	4413      	add	r3, r2
 8005a02:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault6){
 8005a04:	4b43      	ldr	r3, [pc, #268]	; (8005b14 <drawStatusMenu+0x4a4>)
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <drawStatusMenu+0x3ae>
			LCD_PutStr(i, j, "FAULT 6 Triggered", fnt7x10);
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	b298      	uxth	r0, r3
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	b299      	uxth	r1, r3
 8005a14:	4b3c      	ldr	r3, [pc, #240]	; (8005b08 <drawStatusMenu+0x498>)
 8005a16:	4a45      	ldr	r2, [pc, #276]	; (8005b2c <drawStatusMenu+0x4bc>)
 8005a18:	f7fb fd88 	bl	800152c <LCD_PutStr>
 8005a1c:	e007      	b.n	8005a2e <drawStatusMenu+0x3be>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	b298      	uxth	r0, r3
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	b299      	uxth	r1, r3
 8005a26:	4b38      	ldr	r3, [pc, #224]	; (8005b08 <drawStatusMenu+0x498>)
 8005a28:	4a3c      	ldr	r2, [pc, #240]	; (8005b1c <drawStatusMenu+0x4ac>)
 8005a2a:	f7fb fd7f 	bl	800152c <LCD_PutStr>
		}

		i=10;
 8005a2e:	230a      	movs	r3, #10
 8005a30:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	330f      	adds	r3, #15
 8005a36:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault7: ", fnt7x10);
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	b298      	uxth	r0, r3
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	b299      	uxth	r1, r3
 8005a40:	4b31      	ldr	r3, [pc, #196]	; (8005b08 <drawStatusMenu+0x498>)
 8005a42:	4a3b      	ldr	r2, [pc, #236]	; (8005b30 <drawStatusMenu+0x4c0>)
 8005a44:	f7fb fd72 	bl	800152c <LCD_PutStr>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	4413      	add	r3, r2
 8005a50:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault7){
 8005a52:	4b30      	ldr	r3, [pc, #192]	; (8005b14 <drawStatusMenu+0x4a4>)
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <drawStatusMenu+0x3fc>
			LCD_PutStr(i, j, "FAULT 7 Triggered", fnt7x10);
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	b298      	uxth	r0, r3
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	b299      	uxth	r1, r3
 8005a62:	4b29      	ldr	r3, [pc, #164]	; (8005b08 <drawStatusMenu+0x498>)
 8005a64:	4a33      	ldr	r2, [pc, #204]	; (8005b34 <drawStatusMenu+0x4c4>)
 8005a66:	f7fb fd61 	bl	800152c <LCD_PutStr>
 8005a6a:	e007      	b.n	8005a7c <drawStatusMenu+0x40c>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	b298      	uxth	r0, r3
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	b299      	uxth	r1, r3
 8005a74:	4b24      	ldr	r3, [pc, #144]	; (8005b08 <drawStatusMenu+0x498>)
 8005a76:	4a29      	ldr	r2, [pc, #164]	; (8005b1c <drawStatusMenu+0x4ac>)
 8005a78:	f7fb fd58 	bl	800152c <LCD_PutStr>
		}

		i=10;
 8005a7c:	230a      	movs	r3, #10
 8005a7e:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	330f      	adds	r3, #15
 8005a84:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault8: ", fnt7x10);
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	b298      	uxth	r0, r3
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	b299      	uxth	r1, r3
 8005a8e:	4b1e      	ldr	r3, [pc, #120]	; (8005b08 <drawStatusMenu+0x498>)
 8005a90:	4a29      	ldr	r2, [pc, #164]	; (8005b38 <drawStatusMenu+0x4c8>)
 8005a92:	f7fb fd4b 	bl	800152c <LCD_PutStr>
 8005a96:	4603      	mov	r3, r0
 8005a98:	461a      	mov	r2, r3
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault8){
 8005aa0:	4b1c      	ldr	r3, [pc, #112]	; (8005b14 <drawStatusMenu+0x4a4>)
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d008      	beq.n	8005aba <drawStatusMenu+0x44a>
			LCD_PutStr(i, j, "FAULT 8 Triggered", fnt7x10);
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	b298      	uxth	r0, r3
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	b299      	uxth	r1, r3
 8005ab0:	4b15      	ldr	r3, [pc, #84]	; (8005b08 <drawStatusMenu+0x498>)
 8005ab2:	4a22      	ldr	r2, [pc, #136]	; (8005b3c <drawStatusMenu+0x4cc>)
 8005ab4:	f7fb fd3a 	bl	800152c <LCD_PutStr>
 8005ab8:	e007      	b.n	8005aca <drawStatusMenu+0x45a>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	b298      	uxth	r0, r3
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	b299      	uxth	r1, r3
 8005ac2:	4b11      	ldr	r3, [pc, #68]	; (8005b08 <drawStatusMenu+0x498>)
 8005ac4:	4a15      	ldr	r2, [pc, #84]	; (8005b1c <drawStatusMenu+0x4ac>)
 8005ac6:	f7fb fd31 	bl	800152c <LCD_PutStr>
		}

		i=10;
 8005aca:	230a      	movs	r3, #10
 8005acc:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	330f      	adds	r3, #15
 8005ad2:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault9: ", fnt7x10);
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	b298      	uxth	r0, r3
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	b299      	uxth	r1, r3
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <drawStatusMenu+0x498>)
 8005ade:	4a18      	ldr	r2, [pc, #96]	; (8005b40 <drawStatusMenu+0x4d0>)
 8005ae0:	f7fb fd24 	bl	800152c <LCD_PutStr>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault9){
 8005aee:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <drawStatusMenu+0x4a4>)
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d028      	beq.n	8005b48 <drawStatusMenu+0x4d8>
			LCD_PutStr(i, j, "FAULT 9 Triggered", fnt7x10);
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	b298      	uxth	r0, r3
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	b299      	uxth	r1, r3
 8005afe:	4b02      	ldr	r3, [pc, #8]	; (8005b08 <drawStatusMenu+0x498>)
 8005b00:	4a10      	ldr	r2, [pc, #64]	; (8005b44 <drawStatusMenu+0x4d4>)
 8005b02:	f7fb fd13 	bl	800152c <LCD_PutStr>
 8005b06:	e027      	b.n	8005b58 <drawStatusMenu+0x4e8>
 8005b08:	08017eb4 	.word	0x08017eb4
 8005b0c:	080177a0 	.word	0x080177a0
 8005b10:	080177fc 	.word	0x080177fc
 8005b14:	200032d8 	.word	0x200032d8
 8005b18:	08017808 	.word	0x08017808
 8005b1c:	08017784 	.word	0x08017784
 8005b20:	0801781c 	.word	0x0801781c
 8005b24:	08017828 	.word	0x08017828
 8005b28:	0801783c 	.word	0x0801783c
 8005b2c:	08017848 	.word	0x08017848
 8005b30:	0801785c 	.word	0x0801785c
 8005b34:	08017868 	.word	0x08017868
 8005b38:	0801787c 	.word	0x0801787c
 8005b3c:	08017888 	.word	0x08017888
 8005b40:	0801789c 	.word	0x0801789c
 8005b44:	080178a8 	.word	0x080178a8
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	b298      	uxth	r0, r3
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	b299      	uxth	r1, r3
 8005b50:	4b27      	ldr	r3, [pc, #156]	; (8005bf0 <drawStatusMenu+0x580>)
 8005b52:	4a28      	ldr	r2, [pc, #160]	; (8005bf4 <drawStatusMenu+0x584>)
 8005b54:	f7fb fcea 	bl	800152c <LCD_PutStr>
		}


		//horizontal divider
		j=65;
 8005b58:	2341      	movs	r3, #65	; 0x41
 8005b5a:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b299      	uxth	r1, r3
 8005b64:	4b24      	ldr	r3, [pc, #144]	; (8005bf8 <drawStatusMenu+0x588>)
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	3b02      	subs	r3, #2
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3301      	adds	r3, #1
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2002      	movs	r0, #2
 8005b76:	f7fb f98d 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 8005b7a:	23e6      	movs	r3, #230	; 0xe6
 8005b7c:	61fb      	str	r3, [r7, #28]
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b03      	subs	r3, #3
 8005b84:	b298      	uxth	r0, r3
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	b299      	uxth	r1, r3
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3303      	adds	r3, #3
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	4b1a      	ldr	r3, [pc, #104]	; (8005bfc <drawStatusMenu+0x58c>)
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	3b02      	subs	r3, #2
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	f7fb f97b 	bl	8000e94 <LCD_FillRect>

		i=200;
 8005b9e:	23c8      	movs	r3, #200	; 0xc8
 8005ba0:	61fb      	str	r3, [r7, #28]
		j=220;
 8005ba2:	23dc      	movs	r3, #220	; 0xdc
 8005ba4:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	b298      	uxth	r0, r3
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	b299      	uxth	r1, r3
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f7fb fe09 	bl	80017cc <drawUpDownArrow>
		i=180;
 8005bba:	23b4      	movs	r3, #180	; 0xb4
 8005bbc:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	b298      	uxth	r0, r3
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	b299      	uxth	r1, r3
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f7fb fdfd 	bl	80017cc <drawUpDownArrow>
		i=220;
 8005bd2:	23dc      	movs	r3, #220	; 0xdc
 8005bd4:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	b298      	uxth	r0, r3
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	b299      	uxth	r1, r3
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	f7fb fdf1 	bl	80017cc <drawUpDownArrow>
		break;
 8005bea:	f000 beb4 	b.w	8006956 <drawStatusMenu+0x12e6>
 8005bee:	bf00      	nop
 8005bf0:	08017eb4 	.word	0x08017eb4
 8005bf4:	08017784 	.word	0x08017784
 8005bf8:	20028aaa 	.word	0x20028aaa
 8005bfc:	20028aac 	.word	0x20028aac
	}
	case 2:{
		i=35;
 8005c00:	2323      	movs	r3, #35	; 0x23
 8005c02:	61fb      	str	r3, [r7, #28]
		j=90;
 8005c04:	235a      	movs	r3, #90	; 0x5a
 8005c06:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	3b02      	subs	r3, #2
 8005c0e:	b299      	uxth	r1, r3
 8005c10:	4ba4      	ldr	r3, [pc, #656]	; (8005ea4 <drawStatusMenu+0x834>)
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	3b02      	subs	r3, #2
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	3302      	adds	r3, #2
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2002      	movs	r0, #2
 8005c22:	f7fb f937 	bl	8000e94 <LCD_FillRect>
		j=75;
 8005c26:	234b      	movs	r3, #75	; 0x4b
 8005c28:	61bb      	str	r3, [r7, #24]
		i=42;
 8005c2a:	232a      	movs	r3, #42	; 0x2a
 8005c2c:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "AI VOLTAGES:", fnt7x10);
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	b298      	uxth	r0, r3
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	b299      	uxth	r1, r3
 8005c36:	4b9c      	ldr	r3, [pc, #624]	; (8005ea8 <drawStatusMenu+0x838>)
 8005c38:	4a9c      	ldr	r2, [pc, #624]	; (8005eac <drawStatusMenu+0x83c>)
 8005c3a:	f7fb fc77 	bl	800152c <LCD_PutStr>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	461a      	mov	r2, r3
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	4413      	add	r3, r2
 8005c46:	61fb      	str	r3, [r7, #28]
		i+=125;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	337d      	adds	r3, #125	; 0x7d
 8005c4c:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "GPIO INPUTS:", fnt7x10);
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	b298      	uxth	r0, r3
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	b299      	uxth	r1, r3
 8005c56:	4b94      	ldr	r3, [pc, #592]	; (8005ea8 <drawStatusMenu+0x838>)
 8005c58:	4a95      	ldr	r2, [pc, #596]	; (8005eb0 <drawStatusMenu+0x840>)
 8005c5a:	f7fb fc67 	bl	800152c <LCD_PutStr>

		i=10;
 8005c5e:	230a      	movs	r3, #10
 8005c60:	61fb      	str	r3, [r7, #28]
		j=95;
 8005c62:	235f      	movs	r3, #95	; 0x5f
 8005c64:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI0: ", fnt7x10);
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	b298      	uxth	r0, r3
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	b299      	uxth	r1, r3
 8005c6e:	4b8e      	ldr	r3, [pc, #568]	; (8005ea8 <drawStatusMenu+0x838>)
 8005c70:	4a90      	ldr	r2, [pc, #576]	; (8005eb4 <drawStatusMenu+0x844>)
 8005c72:	f7fb fc5b 	bl	800152c <LCD_PutStr>
 8005c76:	4603      	mov	r3, r0
 8005c78:	461a      	mov	r2, r3
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc0];
 8005c80:	4b8d      	ldr	r3, [pc, #564]	; (8005eb8 <drawStatusMenu+0x848>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a8d      	ldr	r2, [pc, #564]	; (8005ebc <drawStatusMenu+0x84c>)
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	edd3 7a00 	vldr	s15, [r3]
 8005c8e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8005ec0 <drawStatusMenu+0x850>
 8005c92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c9a:	ee17 3a90 	vmov	r3, s15
 8005c9e:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	b298      	uxth	r0, r3
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	b299      	uxth	r1, r3
 8005ca8:	4b7f      	ldr	r3, [pc, #508]	; (8005ea8 <drawStatusMenu+0x838>)
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	2303      	movs	r3, #3
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	f7fb fcda 	bl	8001668 <LCD_PutIntF>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cba:	4413      	add	r3, r2
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI9: ", fnt7x10);
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	b298      	uxth	r0, r3
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	b299      	uxth	r1, r3
 8005cca:	4b77      	ldr	r3, [pc, #476]	; (8005ea8 <drawStatusMenu+0x838>)
 8005ccc:	4a7d      	ldr	r2, [pc, #500]	; (8005ec4 <drawStatusMenu+0x854>)
 8005cce:	f7fb fc2d 	bl	800152c <LCD_PutStr>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	4413      	add	r3, r2
 8005cda:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc9];
 8005cdc:	4b76      	ldr	r3, [pc, #472]	; (8005eb8 <drawStatusMenu+0x848>)
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	4a76      	ldr	r2, [pc, #472]	; (8005ebc <drawStatusMenu+0x84c>)
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	edd3 7a00 	vldr	s15, [r3]
 8005cea:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8005ec0 <drawStatusMenu+0x850>
 8005cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cf6:	ee17 3a90 	vmov	r3, s15
 8005cfa:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	b298      	uxth	r0, r3
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	b299      	uxth	r1, r3
 8005d04:	4b68      	ldr	r3, [pc, #416]	; (8005ea8 <drawStatusMenu+0x838>)
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	2303      	movs	r3, #3
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	f7fb fcac 	bl	8001668 <LCD_PutIntF>
 8005d10:	4603      	mov	r3, r0
 8005d12:	461a      	mov	r2, r3
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	4413      	add	r3, r2
 8005d18:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In0: ", fnt7x10);
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	b298      	uxth	r0, r3
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	b299      	uxth	r1, r3
 8005d26:	4b60      	ldr	r3, [pc, #384]	; (8005ea8 <drawStatusMenu+0x838>)
 8005d28:	4a67      	ldr	r2, [pc, #412]	; (8005ec8 <drawStatusMenu+0x858>)
 8005d2a:	f7fb fbff 	bl	800152c <LCD_PutStr>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	461a      	mov	r2, r3
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input0], fnt7x10)+adjacentSpacing;
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	b298      	uxth	r0, r3
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	b299      	uxth	r1, r3
 8005d40:	4b62      	ldr	r3, [pc, #392]	; (8005ecc <drawStatusMenu+0x85c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a62      	ldr	r2, [pc, #392]	; (8005ed0 <drawStatusMenu+0x860>)
 8005d46:	5cd3      	ldrb	r3, [r2, r3]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4b57      	ldr	r3, [pc, #348]	; (8005ea8 <drawStatusMenu+0x838>)
 8005d4c:	f7fb fc26 	bl	800159c <LCD_PutInt>
 8005d50:	4603      	mov	r3, r0
 8005d52:	461a      	mov	r2, r3
 8005d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d56:	4413      	add	r3, r2
 8005d58:	69fa      	ldr	r2, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In9: ", fnt7x10);
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	b298      	uxth	r0, r3
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	b299      	uxth	r1, r3
 8005d66:	4b50      	ldr	r3, [pc, #320]	; (8005ea8 <drawStatusMenu+0x838>)
 8005d68:	4a5a      	ldr	r2, [pc, #360]	; (8005ed4 <drawStatusMenu+0x864>)
 8005d6a:	f7fb fbdf 	bl	800152c <LCD_PutStr>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	461a      	mov	r2, r3
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	4413      	add	r3, r2
 8005d76:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input9], fnt7x10);
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	b298      	uxth	r0, r3
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	b299      	uxth	r1, r3
 8005d80:	4b52      	ldr	r3, [pc, #328]	; (8005ecc <drawStatusMenu+0x85c>)
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	4a52      	ldr	r2, [pc, #328]	; (8005ed0 <drawStatusMenu+0x860>)
 8005d86:	5cd3      	ldrb	r3, [r2, r3]
 8005d88:	461a      	mov	r2, r3
 8005d8a:	4b47      	ldr	r3, [pc, #284]	; (8005ea8 <drawStatusMenu+0x838>)
 8005d8c:	f7fb fc06 	bl	800159c <LCD_PutInt>
 8005d90:	4603      	mov	r3, r0
 8005d92:	461a      	mov	r2, r3
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	4413      	add	r3, r2
 8005d98:	61fb      	str	r3, [r7, #28]


		i=10;
 8005d9a:	230a      	movs	r3, #10
 8005d9c:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	330f      	adds	r3, #15
 8005da2:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI1: ", fnt7x10);
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	b298      	uxth	r0, r3
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	b299      	uxth	r1, r3
 8005dac:	4b3e      	ldr	r3, [pc, #248]	; (8005ea8 <drawStatusMenu+0x838>)
 8005dae:	4a4a      	ldr	r2, [pc, #296]	; (8005ed8 <drawStatusMenu+0x868>)
 8005db0:	f7fb fbbc 	bl	800152c <LCD_PutStr>
 8005db4:	4603      	mov	r3, r0
 8005db6:	461a      	mov	r2, r3
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc1];
 8005dbe:	4b3e      	ldr	r3, [pc, #248]	; (8005eb8 <drawStatusMenu+0x848>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	4a3e      	ldr	r2, [pc, #248]	; (8005ebc <drawStatusMenu+0x84c>)
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	edd3 7a00 	vldr	s15, [r3]
 8005dcc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8005ec0 <drawStatusMenu+0x850>
 8005dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dd8:	ee17 3a90 	vmov	r3, s15
 8005ddc:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	b298      	uxth	r0, r3
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	b299      	uxth	r1, r3
 8005de6:	4b30      	ldr	r3, [pc, #192]	; (8005ea8 <drawStatusMenu+0x838>)
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	2303      	movs	r3, #3
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	f7fb fc3b 	bl	8001668 <LCD_PutIntF>
 8005df2:	4603      	mov	r3, r0
 8005df4:	461a      	mov	r2, r3
 8005df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df8:	4413      	add	r3, r2
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI10: ", fnt7x10);
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	b298      	uxth	r0, r3
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	b299      	uxth	r1, r3
 8005e08:	4b27      	ldr	r3, [pc, #156]	; (8005ea8 <drawStatusMenu+0x838>)
 8005e0a:	4a34      	ldr	r2, [pc, #208]	; (8005edc <drawStatusMenu+0x86c>)
 8005e0c:	f7fb fb8e 	bl	800152c <LCD_PutStr>
 8005e10:	4603      	mov	r3, r0
 8005e12:	461a      	mov	r2, r3
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	4413      	add	r3, r2
 8005e18:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc10];
 8005e1a:	4b27      	ldr	r3, [pc, #156]	; (8005eb8 <drawStatusMenu+0x848>)
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1e:	4a27      	ldr	r2, [pc, #156]	; (8005ebc <drawStatusMenu+0x84c>)
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	edd3 7a00 	vldr	s15, [r3]
 8005e28:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8005ec0 <drawStatusMenu+0x850>
 8005e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e34:	ee17 3a90 	vmov	r3, s15
 8005e38:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	b298      	uxth	r0, r3
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	b299      	uxth	r1, r3
 8005e42:	4b19      	ldr	r3, [pc, #100]	; (8005ea8 <drawStatusMenu+0x838>)
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	2303      	movs	r3, #3
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	f7fb fc0d 	bl	8001668 <LCD_PutIntF>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	461a      	mov	r2, r3
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	4413      	add	r3, r2
 8005e56:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In1: ", fnt7x10);
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	b298      	uxth	r0, r3
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	b299      	uxth	r1, r3
 8005e64:	4b10      	ldr	r3, [pc, #64]	; (8005ea8 <drawStatusMenu+0x838>)
 8005e66:	4a1e      	ldr	r2, [pc, #120]	; (8005ee0 <drawStatusMenu+0x870>)
 8005e68:	f7fb fb60 	bl	800152c <LCD_PutStr>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	461a      	mov	r2, r3
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	4413      	add	r3, r2
 8005e74:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input1], fnt7x10)+adjacentSpacing;
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	b298      	uxth	r0, r3
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	b299      	uxth	r1, r3
 8005e7e:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <drawStatusMenu+0x85c>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	4a13      	ldr	r2, [pc, #76]	; (8005ed0 <drawStatusMenu+0x860>)
 8005e84:	5cd3      	ldrb	r3, [r2, r3]
 8005e86:	461a      	mov	r2, r3
 8005e88:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <drawStatusMenu+0x838>)
 8005e8a:	f7fb fb87 	bl	800159c <LCD_PutInt>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	461a      	mov	r2, r3
 8005e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e94:	4413      	add	r3, r2
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	4413      	add	r3, r2
 8005e9a:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In10: ", fnt7x10);
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	b298      	uxth	r0, r3
 8005ea0:	e020      	b.n	8005ee4 <drawStatusMenu+0x874>
 8005ea2:	bf00      	nop
 8005ea4:	20028aaa 	.word	0x20028aaa
 8005ea8:	08017eb4 	.word	0x08017eb4
 8005eac:	080178bc 	.word	0x080178bc
 8005eb0:	080178cc 	.word	0x080178cc
 8005eb4:	080178dc 	.word	0x080178dc
 8005eb8:	20000128 	.word	0x20000128
 8005ebc:	20030f48 	.word	0x20030f48
 8005ec0:	447a0000 	.word	0x447a0000
 8005ec4:	080178e4 	.word	0x080178e4
 8005ec8:	080178ec 	.word	0x080178ec
 8005ecc:	200000f8 	.word	0x200000f8
 8005ed0:	20028d34 	.word	0x20028d34
 8005ed4:	080178f4 	.word	0x080178f4
 8005ed8:	080178fc 	.word	0x080178fc
 8005edc:	08017904 	.word	0x08017904
 8005ee0:	0801790c 	.word	0x0801790c
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	b299      	uxth	r1, r3
 8005ee8:	4ba3      	ldr	r3, [pc, #652]	; (8006178 <drawStatusMenu+0xb08>)
 8005eea:	4aa4      	ldr	r2, [pc, #656]	; (800617c <drawStatusMenu+0xb0c>)
 8005eec:	f7fb fb1e 	bl	800152c <LCD_PutStr>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input10], fnt7x10);
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	b298      	uxth	r0, r3
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	b299      	uxth	r1, r3
 8005f02:	4b9f      	ldr	r3, [pc, #636]	; (8006180 <drawStatusMenu+0xb10>)
 8005f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f06:	4a9f      	ldr	r2, [pc, #636]	; (8006184 <drawStatusMenu+0xb14>)
 8005f08:	5cd3      	ldrb	r3, [r2, r3]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	4b9a      	ldr	r3, [pc, #616]	; (8006178 <drawStatusMenu+0xb08>)
 8005f0e:	f7fb fb45 	bl	800159c <LCD_PutInt>
 8005f12:	4603      	mov	r3, r0
 8005f14:	461a      	mov	r2, r3
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	61fb      	str	r3, [r7, #28]

		i=10;
 8005f1c:	230a      	movs	r3, #10
 8005f1e:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	330f      	adds	r3, #15
 8005f24:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI2: ", fnt7x10);
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	b298      	uxth	r0, r3
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	b299      	uxth	r1, r3
 8005f2e:	4b92      	ldr	r3, [pc, #584]	; (8006178 <drawStatusMenu+0xb08>)
 8005f30:	4a95      	ldr	r2, [pc, #596]	; (8006188 <drawStatusMenu+0xb18>)
 8005f32:	f7fb fafb 	bl	800152c <LCD_PutStr>
 8005f36:	4603      	mov	r3, r0
 8005f38:	461a      	mov	r2, r3
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc2];
 8005f40:	4b92      	ldr	r3, [pc, #584]	; (800618c <drawStatusMenu+0xb1c>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	4a92      	ldr	r2, [pc, #584]	; (8006190 <drawStatusMenu+0xb20>)
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	edd3 7a00 	vldr	s15, [r3]
 8005f4e:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8006194 <drawStatusMenu+0xb24>
 8005f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f5a:	ee17 3a90 	vmov	r3, s15
 8005f5e:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	b298      	uxth	r0, r3
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	b299      	uxth	r1, r3
 8005f68:	4b83      	ldr	r3, [pc, #524]	; (8006178 <drawStatusMenu+0xb08>)
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	f7fb fb7a 	bl	8001668 <LCD_PutIntF>
 8005f74:	4603      	mov	r3, r0
 8005f76:	461a      	mov	r2, r3
 8005f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7a:	4413      	add	r3, r2
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	4413      	add	r3, r2
 8005f80:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI11: ", fnt7x10);
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	b298      	uxth	r0, r3
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	b299      	uxth	r1, r3
 8005f8a:	4b7b      	ldr	r3, [pc, #492]	; (8006178 <drawStatusMenu+0xb08>)
 8005f8c:	4a82      	ldr	r2, [pc, #520]	; (8006198 <drawStatusMenu+0xb28>)
 8005f8e:	f7fb facd 	bl	800152c <LCD_PutStr>
 8005f92:	4603      	mov	r3, r0
 8005f94:	461a      	mov	r2, r3
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc11];
 8005f9c:	4b7b      	ldr	r3, [pc, #492]	; (800618c <drawStatusMenu+0xb1c>)
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	4a7b      	ldr	r2, [pc, #492]	; (8006190 <drawStatusMenu+0xb20>)
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	edd3 7a00 	vldr	s15, [r3]
 8005faa:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8006194 <drawStatusMenu+0xb24>
 8005fae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fb6:	ee17 3a90 	vmov	r3, s15
 8005fba:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	b298      	uxth	r0, r3
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	b299      	uxth	r1, r3
 8005fc4:	4b6c      	ldr	r3, [pc, #432]	; (8006178 <drawStatusMenu+0xb08>)
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	2303      	movs	r3, #3
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	f7fb fb4c 	bl	8001668 <LCD_PutIntF>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In2: ", fnt7x10);
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	b298      	uxth	r0, r3
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	b299      	uxth	r1, r3
 8005fe6:	4b64      	ldr	r3, [pc, #400]	; (8006178 <drawStatusMenu+0xb08>)
 8005fe8:	4a6c      	ldr	r2, [pc, #432]	; (800619c <drawStatusMenu+0xb2c>)
 8005fea:	f7fb fa9f 	bl	800152c <LCD_PutStr>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input2], fnt7x10)+adjacentSpacing;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	b298      	uxth	r0, r3
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	b299      	uxth	r1, r3
 8006000:	4b5f      	ldr	r3, [pc, #380]	; (8006180 <drawStatusMenu+0xb10>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	4a5f      	ldr	r2, [pc, #380]	; (8006184 <drawStatusMenu+0xb14>)
 8006006:	5cd3      	ldrb	r3, [r2, r3]
 8006008:	461a      	mov	r2, r3
 800600a:	4b5b      	ldr	r3, [pc, #364]	; (8006178 <drawStatusMenu+0xb08>)
 800600c:	f7fb fac6 	bl	800159c <LCD_PutInt>
 8006010:	4603      	mov	r3, r0
 8006012:	461a      	mov	r2, r3
 8006014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006016:	4413      	add	r3, r2
 8006018:	69fa      	ldr	r2, [r7, #28]
 800601a:	4413      	add	r3, r2
 800601c:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In11: ", fnt7x10);
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	b298      	uxth	r0, r3
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	b299      	uxth	r1, r3
 8006026:	4b54      	ldr	r3, [pc, #336]	; (8006178 <drawStatusMenu+0xb08>)
 8006028:	4a5d      	ldr	r2, [pc, #372]	; (80061a0 <drawStatusMenu+0xb30>)
 800602a:	f7fb fa7f 	bl	800152c <LCD_PutStr>
 800602e:	4603      	mov	r3, r0
 8006030:	461a      	mov	r2, r3
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input11], fnt7x10);
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	b298      	uxth	r0, r3
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	b299      	uxth	r1, r3
 8006040:	4b4f      	ldr	r3, [pc, #316]	; (8006180 <drawStatusMenu+0xb10>)
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	4a4f      	ldr	r2, [pc, #316]	; (8006184 <drawStatusMenu+0xb14>)
 8006046:	5cd3      	ldrb	r3, [r2, r3]
 8006048:	461a      	mov	r2, r3
 800604a:	4b4b      	ldr	r3, [pc, #300]	; (8006178 <drawStatusMenu+0xb08>)
 800604c:	f7fb faa6 	bl	800159c <LCD_PutInt>
 8006050:	4603      	mov	r3, r0
 8006052:	461a      	mov	r2, r3
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	4413      	add	r3, r2
 8006058:	61fb      	str	r3, [r7, #28]

		i=10;
 800605a:	230a      	movs	r3, #10
 800605c:	61fb      	str	r3, [r7, #28]
		j+=15;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	330f      	adds	r3, #15
 8006062:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI3: ", fnt7x10);
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	b298      	uxth	r0, r3
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	b299      	uxth	r1, r3
 800606c:	4b42      	ldr	r3, [pc, #264]	; (8006178 <drawStatusMenu+0xb08>)
 800606e:	4a4d      	ldr	r2, [pc, #308]	; (80061a4 <drawStatusMenu+0xb34>)
 8006070:	f7fb fa5c 	bl	800152c <LCD_PutStr>
 8006074:	4603      	mov	r3, r0
 8006076:	461a      	mov	r2, r3
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	4413      	add	r3, r2
 800607c:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc3];
 800607e:	4b43      	ldr	r3, [pc, #268]	; (800618c <drawStatusMenu+0xb1c>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	4a43      	ldr	r2, [pc, #268]	; (8006190 <drawStatusMenu+0xb20>)
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	edd3 7a00 	vldr	s15, [r3]
 800608c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006194 <drawStatusMenu+0xb24>
 8006090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006098:	ee17 3a90 	vmov	r3, s15
 800609c:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	b298      	uxth	r0, r3
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	b299      	uxth	r1, r3
 80060a6:	4b34      	ldr	r3, [pc, #208]	; (8006178 <drawStatusMenu+0xb08>)
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	2303      	movs	r3, #3
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	f7fb fadb 	bl	8001668 <LCD_PutIntF>
 80060b2:	4603      	mov	r3, r0
 80060b4:	461a      	mov	r2, r3
 80060b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b8:	4413      	add	r3, r2
 80060ba:	69fa      	ldr	r2, [r7, #28]
 80060bc:	4413      	add	r3, r2
 80060be:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI12: ", fnt7x10);
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	b298      	uxth	r0, r3
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	b299      	uxth	r1, r3
 80060c8:	4b2b      	ldr	r3, [pc, #172]	; (8006178 <drawStatusMenu+0xb08>)
 80060ca:	4a37      	ldr	r2, [pc, #220]	; (80061a8 <drawStatusMenu+0xb38>)
 80060cc:	f7fb fa2e 	bl	800152c <LCD_PutStr>
 80060d0:	4603      	mov	r3, r0
 80060d2:	461a      	mov	r2, r3
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	4413      	add	r3, r2
 80060d8:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc12];
 80060da:	4b2c      	ldr	r3, [pc, #176]	; (800618c <drawStatusMenu+0xb1c>)
 80060dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060de:	4a2c      	ldr	r2, [pc, #176]	; (8006190 <drawStatusMenu+0xb20>)
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	edd3 7a00 	vldr	s15, [r3]
 80060e8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006194 <drawStatusMenu+0xb24>
 80060ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060f4:	ee17 3a90 	vmov	r3, s15
 80060f8:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	b298      	uxth	r0, r3
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	b299      	uxth	r1, r3
 8006102:	4b1d      	ldr	r3, [pc, #116]	; (8006178 <drawStatusMenu+0xb08>)
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	2303      	movs	r3, #3
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	f7fb faad 	bl	8001668 <LCD_PutIntF>
 800610e:	4603      	mov	r3, r0
 8006110:	461a      	mov	r2, r3
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4413      	add	r3, r2
 8006116:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In3: ", fnt7x10);
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	b298      	uxth	r0, r3
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	b299      	uxth	r1, r3
 8006124:	4b14      	ldr	r3, [pc, #80]	; (8006178 <drawStatusMenu+0xb08>)
 8006126:	4a21      	ldr	r2, [pc, #132]	; (80061ac <drawStatusMenu+0xb3c>)
 8006128:	f7fb fa00 	bl	800152c <LCD_PutStr>
 800612c:	4603      	mov	r3, r0
 800612e:	461a      	mov	r2, r3
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	4413      	add	r3, r2
 8006134:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input3], fnt7x10);
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	b298      	uxth	r0, r3
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	b299      	uxth	r1, r3
 800613e:	4b10      	ldr	r3, [pc, #64]	; (8006180 <drawStatusMenu+0xb10>)
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	4a10      	ldr	r2, [pc, #64]	; (8006184 <drawStatusMenu+0xb14>)
 8006144:	5cd3      	ldrb	r3, [r2, r3]
 8006146:	461a      	mov	r2, r3
 8006148:	4b0b      	ldr	r3, [pc, #44]	; (8006178 <drawStatusMenu+0xb08>)
 800614a:	f7fb fa27 	bl	800159c <LCD_PutInt>


		i=10;
 800614e:	230a      	movs	r3, #10
 8006150:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	330f      	adds	r3, #15
 8006156:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI4: ", fnt7x10);
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	b298      	uxth	r0, r3
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	b299      	uxth	r1, r3
 8006160:	4b05      	ldr	r3, [pc, #20]	; (8006178 <drawStatusMenu+0xb08>)
 8006162:	4a13      	ldr	r2, [pc, #76]	; (80061b0 <drawStatusMenu+0xb40>)
 8006164:	f7fb f9e2 	bl	800152c <LCD_PutStr>
 8006168:	4603      	mov	r3, r0
 800616a:	461a      	mov	r2, r3
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	4413      	add	r3, r2
 8006170:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc4];
 8006172:	4b06      	ldr	r3, [pc, #24]	; (800618c <drawStatusMenu+0xb1c>)
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	e01d      	b.n	80061b4 <drawStatusMenu+0xb44>
 8006178:	08017eb4 	.word	0x08017eb4
 800617c:	08017914 	.word	0x08017914
 8006180:	200000f8 	.word	0x200000f8
 8006184:	20028d34 	.word	0x20028d34
 8006188:	0801791c 	.word	0x0801791c
 800618c:	20000128 	.word	0x20000128
 8006190:	20030f48 	.word	0x20030f48
 8006194:	447a0000 	.word	0x447a0000
 8006198:	08017924 	.word	0x08017924
 800619c:	0801792c 	.word	0x0801792c
 80061a0:	08017934 	.word	0x08017934
 80061a4:	0801793c 	.word	0x0801793c
 80061a8:	08017944 	.word	0x08017944
 80061ac:	0801794c 	.word	0x0801794c
 80061b0:	08017954 	.word	0x08017954
 80061b4:	4aa7      	ldr	r2, [pc, #668]	; (8006454 <drawStatusMenu+0xde4>)
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	edd3 7a00 	vldr	s15, [r3]
 80061be:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8006458 <drawStatusMenu+0xde8>
 80061c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061ca:	ee17 3a90 	vmov	r3, s15
 80061ce:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	b298      	uxth	r0, r3
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	b299      	uxth	r1, r3
 80061d8:	4ba0      	ldr	r3, [pc, #640]	; (800645c <drawStatusMenu+0xdec>)
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	2303      	movs	r3, #3
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	f7fb fa42 	bl	8001668 <LCD_PutIntF>
 80061e4:	4603      	mov	r3, r0
 80061e6:	461a      	mov	r2, r3
 80061e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ea:	4413      	add	r3, r2
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	4413      	add	r3, r2
 80061f0:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI13: ", fnt7x10);
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	b298      	uxth	r0, r3
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	b299      	uxth	r1, r3
 80061fa:	4b98      	ldr	r3, [pc, #608]	; (800645c <drawStatusMenu+0xdec>)
 80061fc:	4a98      	ldr	r2, [pc, #608]	; (8006460 <drawStatusMenu+0xdf0>)
 80061fe:	f7fb f995 	bl	800152c <LCD_PutStr>
 8006202:	4603      	mov	r3, r0
 8006204:	461a      	mov	r2, r3
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	4413      	add	r3, r2
 800620a:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc13];
 800620c:	4b95      	ldr	r3, [pc, #596]	; (8006464 <drawStatusMenu+0xdf4>)
 800620e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006210:	4a90      	ldr	r2, [pc, #576]	; (8006454 <drawStatusMenu+0xde4>)
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	edd3 7a00 	vldr	s15, [r3]
 800621a:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8006458 <drawStatusMenu+0xde8>
 800621e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006226:	ee17 3a90 	vmov	r3, s15
 800622a:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	b298      	uxth	r0, r3
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	b299      	uxth	r1, r3
 8006234:	4b89      	ldr	r3, [pc, #548]	; (800645c <drawStatusMenu+0xdec>)
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	2303      	movs	r3, #3
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	f7fb fa14 	bl	8001668 <LCD_PutIntF>
 8006240:	4603      	mov	r3, r0
 8006242:	461a      	mov	r2, r3
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	4413      	add	r3, r2
 8006248:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In4: ", fnt7x10);
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	b298      	uxth	r0, r3
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	b299      	uxth	r1, r3
 8006256:	4b81      	ldr	r3, [pc, #516]	; (800645c <drawStatusMenu+0xdec>)
 8006258:	4a83      	ldr	r2, [pc, #524]	; (8006468 <drawStatusMenu+0xdf8>)
 800625a:	f7fb f967 	bl	800152c <LCD_PutStr>
 800625e:	4603      	mov	r3, r0
 8006260:	461a      	mov	r2, r3
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input4], fnt7x10);
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	b298      	uxth	r0, r3
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	b299      	uxth	r1, r3
 8006270:	4b7e      	ldr	r3, [pc, #504]	; (800646c <drawStatusMenu+0xdfc>)
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	4a7e      	ldr	r2, [pc, #504]	; (8006470 <drawStatusMenu+0xe00>)
 8006276:	5cd3      	ldrb	r3, [r2, r3]
 8006278:	461a      	mov	r2, r3
 800627a:	4b78      	ldr	r3, [pc, #480]	; (800645c <drawStatusMenu+0xdec>)
 800627c:	f7fb f98e 	bl	800159c <LCD_PutInt>

		i=10;
 8006280:	230a      	movs	r3, #10
 8006282:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	330f      	adds	r3, #15
 8006288:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI5: ", fnt7x10);
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	b298      	uxth	r0, r3
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	b299      	uxth	r1, r3
 8006292:	4b72      	ldr	r3, [pc, #456]	; (800645c <drawStatusMenu+0xdec>)
 8006294:	4a77      	ldr	r2, [pc, #476]	; (8006474 <drawStatusMenu+0xe04>)
 8006296:	f7fb f949 	bl	800152c <LCD_PutStr>
 800629a:	4603      	mov	r3, r0
 800629c:	461a      	mov	r2, r3
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	4413      	add	r3, r2
 80062a2:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc5];
 80062a4:	4b6f      	ldr	r3, [pc, #444]	; (8006464 <drawStatusMenu+0xdf4>)
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	4a6a      	ldr	r2, [pc, #424]	; (8006454 <drawStatusMenu+0xde4>)
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	edd3 7a00 	vldr	s15, [r3]
 80062b2:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8006458 <drawStatusMenu+0xde8>
 80062b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062be:	ee17 3a90 	vmov	r3, s15
 80062c2:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	b298      	uxth	r0, r3
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	b299      	uxth	r1, r3
 80062cc:	4b63      	ldr	r3, [pc, #396]	; (800645c <drawStatusMenu+0xdec>)
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	2303      	movs	r3, #3
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	f7fb f9c8 	bl	8001668 <LCD_PutIntF>
 80062d8:	4603      	mov	r3, r0
 80062da:	461a      	mov	r2, r3
 80062dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062de:	4413      	add	r3, r2
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	4413      	add	r3, r2
 80062e4:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI14: ", fnt7x10);
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	b298      	uxth	r0, r3
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	b299      	uxth	r1, r3
 80062ee:	4b5b      	ldr	r3, [pc, #364]	; (800645c <drawStatusMenu+0xdec>)
 80062f0:	4a61      	ldr	r2, [pc, #388]	; (8006478 <drawStatusMenu+0xe08>)
 80062f2:	f7fb f91b 	bl	800152c <LCD_PutStr>
 80062f6:	4603      	mov	r3, r0
 80062f8:	461a      	mov	r2, r3
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	4413      	add	r3, r2
 80062fe:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc14];
 8006300:	4b58      	ldr	r3, [pc, #352]	; (8006464 <drawStatusMenu+0xdf4>)
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	4a53      	ldr	r2, [pc, #332]	; (8006454 <drawStatusMenu+0xde4>)
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	edd3 7a00 	vldr	s15, [r3]
 800630e:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8006458 <drawStatusMenu+0xde8>
 8006312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800631a:	ee17 3a90 	vmov	r3, s15
 800631e:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	b298      	uxth	r0, r3
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	b299      	uxth	r1, r3
 8006328:	4b4c      	ldr	r3, [pc, #304]	; (800645c <drawStatusMenu+0xdec>)
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	2303      	movs	r3, #3
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	f7fb f99a 	bl	8001668 <LCD_PutIntF>
 8006334:	4603      	mov	r3, r0
 8006336:	461a      	mov	r2, r3
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In5: ", fnt7x10);
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	b298      	uxth	r0, r3
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	b299      	uxth	r1, r3
 800634a:	4b44      	ldr	r3, [pc, #272]	; (800645c <drawStatusMenu+0xdec>)
 800634c:	4a4b      	ldr	r2, [pc, #300]	; (800647c <drawStatusMenu+0xe0c>)
 800634e:	f7fb f8ed 	bl	800152c <LCD_PutStr>
 8006352:	4603      	mov	r3, r0
 8006354:	461a      	mov	r2, r3
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	4413      	add	r3, r2
 800635a:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input5], fnt7x10);
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	b298      	uxth	r0, r3
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	b299      	uxth	r1, r3
 8006364:	4b41      	ldr	r3, [pc, #260]	; (800646c <drawStatusMenu+0xdfc>)
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	4a41      	ldr	r2, [pc, #260]	; (8006470 <drawStatusMenu+0xe00>)
 800636a:	5cd3      	ldrb	r3, [r2, r3]
 800636c:	461a      	mov	r2, r3
 800636e:	4b3b      	ldr	r3, [pc, #236]	; (800645c <drawStatusMenu+0xdec>)
 8006370:	f7fb f914 	bl	800159c <LCD_PutInt>

		i=10;
 8006374:	230a      	movs	r3, #10
 8006376:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	330f      	adds	r3, #15
 800637c:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI6: ", fnt7x10);
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	b298      	uxth	r0, r3
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	b299      	uxth	r1, r3
 8006386:	4b35      	ldr	r3, [pc, #212]	; (800645c <drawStatusMenu+0xdec>)
 8006388:	4a3d      	ldr	r2, [pc, #244]	; (8006480 <drawStatusMenu+0xe10>)
 800638a:	f7fb f8cf 	bl	800152c <LCD_PutStr>
 800638e:	4603      	mov	r3, r0
 8006390:	461a      	mov	r2, r3
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	4413      	add	r3, r2
 8006396:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc6];
 8006398:	4b32      	ldr	r3, [pc, #200]	; (8006464 <drawStatusMenu+0xdf4>)
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	4a2d      	ldr	r2, [pc, #180]	; (8006454 <drawStatusMenu+0xde4>)
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	edd3 7a00 	vldr	s15, [r3]
 80063a6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006458 <drawStatusMenu+0xde8>
 80063aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063b2:	ee17 3a90 	vmov	r3, s15
 80063b6:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	b298      	uxth	r0, r3
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	b299      	uxth	r1, r3
 80063c0:	4b26      	ldr	r3, [pc, #152]	; (800645c <drawStatusMenu+0xdec>)
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	2303      	movs	r3, #3
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	f7fb f94e 	bl	8001668 <LCD_PutIntF>
 80063cc:	4603      	mov	r3, r0
 80063ce:	461a      	mov	r2, r3
 80063d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d2:	4413      	add	r3, r2
 80063d4:	69fa      	ldr	r2, [r7, #28]
 80063d6:	4413      	add	r3, r2
 80063d8:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI15: ", fnt7x10);
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	b298      	uxth	r0, r3
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	b299      	uxth	r1, r3
 80063e2:	4b1e      	ldr	r3, [pc, #120]	; (800645c <drawStatusMenu+0xdec>)
 80063e4:	4a27      	ldr	r2, [pc, #156]	; (8006484 <drawStatusMenu+0xe14>)
 80063e6:	f7fb f8a1 	bl	800152c <LCD_PutStr>
 80063ea:	4603      	mov	r3, r0
 80063ec:	461a      	mov	r2, r3
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	4413      	add	r3, r2
 80063f2:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc15];
 80063f4:	4b1b      	ldr	r3, [pc, #108]	; (8006464 <drawStatusMenu+0xdf4>)
 80063f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f8:	4a16      	ldr	r2, [pc, #88]	; (8006454 <drawStatusMenu+0xde4>)
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	edd3 7a00 	vldr	s15, [r3]
 8006402:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006458 <drawStatusMenu+0xde8>
 8006406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800640a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800640e:	ee17 3a90 	vmov	r3, s15
 8006412:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	b298      	uxth	r0, r3
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	b299      	uxth	r1, r3
 800641c:	4b0f      	ldr	r3, [pc, #60]	; (800645c <drawStatusMenu+0xdec>)
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	2303      	movs	r3, #3
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	f7fb f920 	bl	8001668 <LCD_PutIntF>
 8006428:	4603      	mov	r3, r0
 800642a:	461a      	mov	r2, r3
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	4413      	add	r3, r2
 8006430:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In6: ", fnt7x10);
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	b298      	uxth	r0, r3
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	b299      	uxth	r1, r3
 800643e:	4b07      	ldr	r3, [pc, #28]	; (800645c <drawStatusMenu+0xdec>)
 8006440:	4a11      	ldr	r2, [pc, #68]	; (8006488 <drawStatusMenu+0xe18>)
 8006442:	f7fb f873 	bl	800152c <LCD_PutStr>
 8006446:	4603      	mov	r3, r0
 8006448:	461a      	mov	r2, r3
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	4413      	add	r3, r2
 800644e:	61fb      	str	r3, [r7, #28]
 8006450:	e01c      	b.n	800648c <drawStatusMenu+0xe1c>
 8006452:	bf00      	nop
 8006454:	20030f48 	.word	0x20030f48
 8006458:	447a0000 	.word	0x447a0000
 800645c:	08017eb4 	.word	0x08017eb4
 8006460:	0801795c 	.word	0x0801795c
 8006464:	20000128 	.word	0x20000128
 8006468:	08017964 	.word	0x08017964
 800646c:	200000f8 	.word	0x200000f8
 8006470:	20028d34 	.word	0x20028d34
 8006474:	0801796c 	.word	0x0801796c
 8006478:	08017974 	.word	0x08017974
 800647c:	0801797c 	.word	0x0801797c
 8006480:	08017984 	.word	0x08017984
 8006484:	0801798c 	.word	0x0801798c
 8006488:	08017994 	.word	0x08017994
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input6], fnt7x10);
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	b298      	uxth	r0, r3
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	b299      	uxth	r1, r3
 8006494:	4b9b      	ldr	r3, [pc, #620]	; (8006704 <drawStatusMenu+0x1094>)
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	4a9b      	ldr	r2, [pc, #620]	; (8006708 <drawStatusMenu+0x1098>)
 800649a:	5cd3      	ldrb	r3, [r2, r3]
 800649c:	461a      	mov	r2, r3
 800649e:	4b9b      	ldr	r3, [pc, #620]	; (800670c <drawStatusMenu+0x109c>)
 80064a0:	f7fb f87c 	bl	800159c <LCD_PutInt>

		i=10;
 80064a4:	230a      	movs	r3, #10
 80064a6:	61fb      	str	r3, [r7, #28]
		j+=15;
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	330f      	adds	r3, #15
 80064ac:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI7: ", fnt7x10);
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	b298      	uxth	r0, r3
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	b299      	uxth	r1, r3
 80064b6:	4b95      	ldr	r3, [pc, #596]	; (800670c <drawStatusMenu+0x109c>)
 80064b8:	4a95      	ldr	r2, [pc, #596]	; (8006710 <drawStatusMenu+0x10a0>)
 80064ba:	f7fb f837 	bl	800152c <LCD_PutStr>
 80064be:	4603      	mov	r3, r0
 80064c0:	461a      	mov	r2, r3
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4413      	add	r3, r2
 80064c6:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc7];
 80064c8:	4b92      	ldr	r3, [pc, #584]	; (8006714 <drawStatusMenu+0x10a4>)
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	4a92      	ldr	r2, [pc, #584]	; (8006718 <drawStatusMenu+0x10a8>)
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	edd3 7a00 	vldr	s15, [r3]
 80064d6:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800671c <drawStatusMenu+0x10ac>
 80064da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064e2:	ee17 3a90 	vmov	r3, s15
 80064e6:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	b298      	uxth	r0, r3
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	b299      	uxth	r1, r3
 80064f0:	4b86      	ldr	r3, [pc, #536]	; (800670c <drawStatusMenu+0x109c>)
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	2303      	movs	r3, #3
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	f7fb f8b6 	bl	8001668 <LCD_PutIntF>
 80064fc:	4603      	mov	r3, r0
 80064fe:	461a      	mov	r2, r3
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	4413      	add	r3, r2
 8006504:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In7: ", fnt7x10);
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	b298      	uxth	r0, r3
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	b299      	uxth	r1, r3
 8006512:	4b7e      	ldr	r3, [pc, #504]	; (800670c <drawStatusMenu+0x109c>)
 8006514:	4a82      	ldr	r2, [pc, #520]	; (8006720 <drawStatusMenu+0x10b0>)
 8006516:	f7fb f809 	bl	800152c <LCD_PutStr>
 800651a:	4603      	mov	r3, r0
 800651c:	461a      	mov	r2, r3
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input7], fnt7x10);
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	b298      	uxth	r0, r3
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	b299      	uxth	r1, r3
 800652c:	4b75      	ldr	r3, [pc, #468]	; (8006704 <drawStatusMenu+0x1094>)
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	4a75      	ldr	r2, [pc, #468]	; (8006708 <drawStatusMenu+0x1098>)
 8006532:	5cd3      	ldrb	r3, [r2, r3]
 8006534:	461a      	mov	r2, r3
 8006536:	4b75      	ldr	r3, [pc, #468]	; (800670c <drawStatusMenu+0x109c>)
 8006538:	f7fb f830 	bl	800159c <LCD_PutInt>

		i=10;
 800653c:	230a      	movs	r3, #10
 800653e:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	330f      	adds	r3, #15
 8006544:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI8: ", fnt7x10);
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	b298      	uxth	r0, r3
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	b299      	uxth	r1, r3
 800654e:	4b6f      	ldr	r3, [pc, #444]	; (800670c <drawStatusMenu+0x109c>)
 8006550:	4a74      	ldr	r2, [pc, #464]	; (8006724 <drawStatusMenu+0x10b4>)
 8006552:	f7fa ffeb 	bl	800152c <LCD_PutStr>
 8006556:	4603      	mov	r3, r0
 8006558:	461a      	mov	r2, r3
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	4413      	add	r3, r2
 800655e:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc8];
 8006560:	4b6c      	ldr	r3, [pc, #432]	; (8006714 <drawStatusMenu+0x10a4>)
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	4a6c      	ldr	r2, [pc, #432]	; (8006718 <drawStatusMenu+0x10a8>)
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	edd3 7a00 	vldr	s15, [r3]
 800656e:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800671c <drawStatusMenu+0x10ac>
 8006572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006576:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800657a:	ee17 3a90 	vmov	r3, s15
 800657e:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	b298      	uxth	r0, r3
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	b299      	uxth	r1, r3
 8006588:	4b60      	ldr	r3, [pc, #384]	; (800670c <drawStatusMenu+0x109c>)
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	2303      	movs	r3, #3
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	f7fb f86a 	bl	8001668 <LCD_PutIntF>
 8006594:	4603      	mov	r3, r0
 8006596:	461a      	mov	r2, r3
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	4413      	add	r3, r2
 800659c:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In8: ", fnt7x10);
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	b298      	uxth	r0, r3
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	b299      	uxth	r1, r3
 80065aa:	4b58      	ldr	r3, [pc, #352]	; (800670c <drawStatusMenu+0x109c>)
 80065ac:	4a5e      	ldr	r2, [pc, #376]	; (8006728 <drawStatusMenu+0x10b8>)
 80065ae:	f7fa ffbd 	bl	800152c <LCD_PutStr>
 80065b2:	4603      	mov	r3, r0
 80065b4:	461a      	mov	r2, r3
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	4413      	add	r3, r2
 80065ba:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input8], fnt7x10);
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	b298      	uxth	r0, r3
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	b299      	uxth	r1, r3
 80065c4:	4b4f      	ldr	r3, [pc, #316]	; (8006704 <drawStatusMenu+0x1094>)
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	4a4f      	ldr	r2, [pc, #316]	; (8006708 <drawStatusMenu+0x1098>)
 80065ca:	5cd3      	ldrb	r3, [r2, r3]
 80065cc:	461a      	mov	r2, r3
 80065ce:	4b4f      	ldr	r3, [pc, #316]	; (800670c <drawStatusMenu+0x109c>)
 80065d0:	f7fa ffe4 	bl	800159c <LCD_PutInt>
		//horizontal divider
		j=65;
 80065d4:	2341      	movs	r3, #65	; 0x41
 80065d6:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b299      	uxth	r1, r3
 80065e0:	4b52      	ldr	r3, [pc, #328]	; (800672c <drawStatusMenu+0x10bc>)
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	3b02      	subs	r3, #2
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	3301      	adds	r3, #1
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	2002      	movs	r0, #2
 80065f2:	f7fa fc4f 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 80065f6:	23e6      	movs	r3, #230	; 0xe6
 80065f8:	61fb      	str	r3, [r7, #28]
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b03      	subs	r3, #3
 8006600:	b298      	uxth	r0, r3
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	b299      	uxth	r1, r3
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	b29b      	uxth	r3, r3
 800660a:	3303      	adds	r3, #3
 800660c:	b29a      	uxth	r2, r3
 800660e:	4b48      	ldr	r3, [pc, #288]	; (8006730 <drawStatusMenu+0x10c0>)
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	3b02      	subs	r3, #2
 8006614:	b29b      	uxth	r3, r3
 8006616:	f7fa fc3d 	bl	8000e94 <LCD_FillRect>

		i=155;
 800661a:	239b      	movs	r3, #155	; 0x9b
 800661c:	61fb      	str	r3, [r7, #28]
		j=35;
 800661e:	2323      	movs	r3, #35	; 0x23
 8006620:	61bb      	str	r3, [r7, #24]
		LCD_PutStr(i,j,"YOUR AD HERE!",fnt7x10);
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	b298      	uxth	r0, r3
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	b299      	uxth	r1, r3
 800662a:	4b38      	ldr	r3, [pc, #224]	; (800670c <drawStatusMenu+0x109c>)
 800662c:	4a41      	ldr	r2, [pc, #260]	; (8006734 <drawStatusMenu+0x10c4>)
 800662e:	f7fa ff7d 	bl	800152c <LCD_PutStr>
		i=155;
 8006632:	239b      	movs	r3, #155	; 0x9b
 8006634:	61fb      	str	r3, [r7, #28]
		j=50;
 8006636:	2332      	movs	r3, #50	; 0x32
 8006638:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i,j,"Monthly fee: $",fnt7x10)+8;
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	b298      	uxth	r0, r3
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	b299      	uxth	r1, r3
 8006642:	4b32      	ldr	r3, [pc, #200]	; (800670c <drawStatusMenu+0x109c>)
 8006644:	4a3c      	ldr	r2, [pc, #240]	; (8006738 <drawStatusMenu+0x10c8>)
 8006646:	f7fa ff71 	bl	800152c <LCD_PutStr>
 800664a:	4603      	mov	r3, r0
 800664c:	3308      	adds	r3, #8
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	4413      	add	r3, r2
 8006652:	61fb      	str	r3, [r7, #28]
		j=28;
 8006654:	231c      	movs	r3, #28
 8006656:	61bb      	str	r3, [r7, #24]
		LCD_PutIntF(i,j,3999, 2,fnt_dig_big);
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	b298      	uxth	r0, r3
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	b299      	uxth	r1, r3
 8006660:	4b36      	ldr	r3, [pc, #216]	; (800673c <drawStatusMenu+0x10cc>)
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	2302      	movs	r3, #2
 8006666:	f640 729f 	movw	r2, #3999	; 0xf9f
 800666a:	f7fa fffd 	bl	8001668 <LCD_PutIntF>

		//draw the additional pages available indicators
		i=200;
 800666e:	23c8      	movs	r3, #200	; 0xc8
 8006670:	61fb      	str	r3, [r7, #28]
		j=220;
 8006672:	23dc      	movs	r3, #220	; 0xdc
 8006674:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	b298      	uxth	r0, r3
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	b299      	uxth	r1, r3
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	b29a      	uxth	r2, r3
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	b29b      	uxth	r3, r3
 8006686:	f7fb f8a1 	bl	80017cc <drawUpDownArrow>
		j=15;
 800668a:	230f      	movs	r3, #15
 800668c:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	b298      	uxth	r0, r3
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	b299      	uxth	r1, r3
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	b29a      	uxth	r2, r3
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	b29b      	uxth	r3, r3
 800669e:	f7fb f895 	bl	80017cc <drawUpDownArrow>
		i=180;
 80066a2:	23b4      	movs	r3, #180	; 0xb4
 80066a4:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	b298      	uxth	r0, r3
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	b299      	uxth	r1, r3
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f7fb f889 	bl	80017cc <drawUpDownArrow>
		j=220;
 80066ba:	23dc      	movs	r3, #220	; 0xdc
 80066bc:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	b298      	uxth	r0, r3
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	b299      	uxth	r1, r3
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	f7fb f87d 	bl	80017cc <drawUpDownArrow>
		i=220;
 80066d2:	23dc      	movs	r3, #220	; 0xdc
 80066d4:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	b298      	uxth	r0, r3
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	b299      	uxth	r1, r3
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f7fb f871 	bl	80017cc <drawUpDownArrow>
		j=15;
 80066ea:	230f      	movs	r3, #15
 80066ec:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	b298      	uxth	r0, r3
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	b299      	uxth	r1, r3
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f7fb f865 	bl	80017cc <drawUpDownArrow>
		break;
 8006702:	e128      	b.n	8006956 <drawStatusMenu+0x12e6>
 8006704:	200000f8 	.word	0x200000f8
 8006708:	20028d34 	.word	0x20028d34
 800670c:	08017eb4 	.word	0x08017eb4
 8006710:	0801799c 	.word	0x0801799c
 8006714:	20000128 	.word	0x20000128
 8006718:	20030f48 	.word	0x20030f48
 800671c:	447a0000 	.word	0x447a0000
 8006720:	080179a4 	.word	0x080179a4
 8006724:	080179ac 	.word	0x080179ac
 8006728:	080179b4 	.word	0x080179b4
 800672c:	20028aaa 	.word	0x20028aaa
 8006730:	20028aac 	.word	0x20028aac
 8006734:	080179bc 	.word	0x080179bc
 8006738:	080179cc 	.word	0x080179cc
 800673c:	08018274 	.word	0x08018274
	}
	case 3:{
		i=35;
 8006740:	2323      	movs	r3, #35	; 0x23
 8006742:	61fb      	str	r3, [r7, #28]
		j=75;
 8006744:	234b      	movs	r3, #75	; 0x4b
 8006746:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	b29b      	uxth	r3, r3
 800674c:	3b02      	subs	r3, #2
 800674e:	b299      	uxth	r1, r3
 8006750:	4b84      	ldr	r3, [pc, #528]	; (8006964 <drawStatusMenu+0x12f4>)
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	3b02      	subs	r3, #2
 8006756:	b29a      	uxth	r2, r3
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	b29b      	uxth	r3, r3
 800675c:	3302      	adds	r3, #2
 800675e:	b29b      	uxth	r3, r3
 8006760:	2002      	movs	r0, #2
 8006762:	f7fa fb97 	bl	8000e94 <LCD_FillRect>
		j=55;
 8006766:	2337      	movs	r3, #55	; 0x37
 8006768:	61bb      	str	r3, [r7, #24]
		i=150;
 800676a:	2396      	movs	r3, #150	; 0x96
 800676c:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "DEV UI HEALTH:", fnt7x10);
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	b298      	uxth	r0, r3
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	b299      	uxth	r1, r3
 8006776:	4b7c      	ldr	r3, [pc, #496]	; (8006968 <drawStatusMenu+0x12f8>)
 8006778:	4a7c      	ldr	r2, [pc, #496]	; (800696c <drawStatusMenu+0x12fc>)
 800677a:	f7fa fed7 	bl	800152c <LCD_PutStr>
 800677e:	4603      	mov	r3, r0
 8006780:	461a      	mov	r2, r3
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	4413      	add	r3, r2
 8006786:	61fb      	str	r3, [r7, #28]

		i=40;
 8006788:	2328      	movs	r3, #40	; 0x28
 800678a:	61fb      	str	r3, [r7, #28]
		j=85;
 800678c:	2355      	movs	r3, #85	; 0x55
 800678e:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "LCD: ", fnt7x10);
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	b298      	uxth	r0, r3
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	b299      	uxth	r1, r3
 8006798:	4b73      	ldr	r3, [pc, #460]	; (8006968 <drawStatusMenu+0x12f8>)
 800679a:	4a75      	ldr	r2, [pc, #468]	; (8006970 <drawStatusMenu+0x1300>)
 800679c:	f7fa fec6 	bl	800152c <LCD_PutStr>
 80067a0:	4603      	mov	r3, r0
 80067a2:	461a      	mov	r2, r3
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	4413      	add	r3, r2
 80067a8:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "Do you see me? Must be working!", fnt7x10);
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	b298      	uxth	r0, r3
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	b299      	uxth	r1, r3
 80067b2:	4b6d      	ldr	r3, [pc, #436]	; (8006968 <drawStatusMenu+0x12f8>)
 80067b4:	4a6f      	ldr	r2, [pc, #444]	; (8006974 <drawStatusMenu+0x1304>)
 80067b6:	f7fa feb9 	bl	800152c <LCD_PutStr>

		i=40;
 80067ba:	2328      	movs	r3, #40	; 0x28
 80067bc:	61fb      	str	r3, [r7, #28]
		j+=25;
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	3319      	adds	r3, #25
 80067c2:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "LED Driver: ", fnt7x10);
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	b298      	uxth	r0, r3
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	b299      	uxth	r1, r3
 80067cc:	4b66      	ldr	r3, [pc, #408]	; (8006968 <drawStatusMenu+0x12f8>)
 80067ce:	4a6a      	ldr	r2, [pc, #424]	; (8006978 <drawStatusMenu+0x1308>)
 80067d0:	f7fa feac 	bl	800152c <LCD_PutStr>
 80067d4:	4603      	mov	r3, r0
 80067d6:	461a      	mov	r2, r3
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	4413      	add	r3, r2
 80067dc:	61fb      	str	r3, [r7, #28]
		if(!(errorLED.ledDriver)){
 80067de:	4b67      	ldr	r3, [pc, #412]	; (800697c <drawStatusMenu+0x130c>)
 80067e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d108      	bne.n	80067f8 <drawStatusMenu+0x1188>
			LCD_PutStr(i, j, "Present", fnt7x10);
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	b298      	uxth	r0, r3
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	b299      	uxth	r1, r3
 80067ee:	4b5e      	ldr	r3, [pc, #376]	; (8006968 <drawStatusMenu+0x12f8>)
 80067f0:	4a63      	ldr	r2, [pc, #396]	; (8006980 <drawStatusMenu+0x1310>)
 80067f2:	f7fa fe9b 	bl	800152c <LCD_PutStr>
 80067f6:	e007      	b.n	8006808 <drawStatusMenu+0x1198>
		}
		else{
			LCD_PutStr(i, j, "Unresponsive", fnt7x10);
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	b298      	uxth	r0, r3
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	b299      	uxth	r1, r3
 8006800:	4b59      	ldr	r3, [pc, #356]	; (8006968 <drawStatusMenu+0x12f8>)
 8006802:	4a60      	ldr	r2, [pc, #384]	; (8006984 <drawStatusMenu+0x1314>)
 8006804:	f7fa fe92 	bl	800152c <LCD_PutStr>
		}

		i=40;
 8006808:	2328      	movs	r3, #40	; 0x28
 800680a:	61fb      	str	r3, [r7, #28]
		j+=25;
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	3319      	adds	r3, #25
 8006810:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "SOC UART: ", fnt7x10);
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	b298      	uxth	r0, r3
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	b299      	uxth	r1, r3
 800681a:	4b53      	ldr	r3, [pc, #332]	; (8006968 <drawStatusMenu+0x12f8>)
 800681c:	4a5a      	ldr	r2, [pc, #360]	; (8006988 <drawStatusMenu+0x1318>)
 800681e:	f7fa fe85 	bl	800152c <LCD_PutStr>
 8006822:	4603      	mov	r3, r0
 8006824:	461a      	mov	r2, r3
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	4413      	add	r3, r2
 800682a:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "Am I reading this now?", fnt7x10);
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	b298      	uxth	r0, r3
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	b299      	uxth	r1, r3
 8006834:	4b4c      	ldr	r3, [pc, #304]	; (8006968 <drawStatusMenu+0x12f8>)
 8006836:	4a55      	ldr	r2, [pc, #340]	; (800698c <drawStatusMenu+0x131c>)
 8006838:	f7fa fe78 	bl	800152c <LCD_PutStr>

		i=40;
 800683c:	2328      	movs	r3, #40	; 0x28
 800683e:	61fb      	str	r3, [r7, #28]
		j+=25;
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	3319      	adds	r3, #25
 8006844:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "SOC I2C: ", fnt7x10);
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	b298      	uxth	r0, r3
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	b299      	uxth	r1, r3
 800684e:	4b46      	ldr	r3, [pc, #280]	; (8006968 <drawStatusMenu+0x12f8>)
 8006850:	4a4f      	ldr	r2, [pc, #316]	; (8006990 <drawStatusMenu+0x1320>)
 8006852:	f7fa fe6b 	bl	800152c <LCD_PutStr>
 8006856:	4603      	mov	r3, r0
 8006858:	461a      	mov	r2, r3
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	4413      	add	r3, r2
 800685e:	61fb      	str	r3, [r7, #28]
		i2cCheck=writeI2CRegister(socI2cVoltageMux.address, 0x11, 0x00,1,socI2cVoltageMux.i2cBank);
 8006860:	4b4c      	ldr	r3, [pc, #304]	; (8006994 <drawStatusMenu+0x1324>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	4618      	mov	r0, r3
 8006866:	4b4b      	ldr	r3, [pc, #300]	; (8006994 <drawStatusMenu+0x1324>)
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	2301      	movs	r3, #1
 800686e:	2200      	movs	r2, #0
 8006870:	2111      	movs	r1, #17
 8006872:	f7fc fe77 	bl	8003564 <writeI2CRegister>
 8006876:	6178      	str	r0, [r7, #20]
		if(i2cCheck){
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d008      	beq.n	8006890 <drawStatusMenu+0x1220>
			LCD_PutStr(i, j, "Present", fnt7x10);
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	b298      	uxth	r0, r3
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	b299      	uxth	r1, r3
 8006886:	4b38      	ldr	r3, [pc, #224]	; (8006968 <drawStatusMenu+0x12f8>)
 8006888:	4a3d      	ldr	r2, [pc, #244]	; (8006980 <drawStatusMenu+0x1310>)
 800688a:	f7fa fe4f 	bl	800152c <LCD_PutStr>
 800688e:	e007      	b.n	80068a0 <drawStatusMenu+0x1230>
		}
		else{
			LCD_PutStr(i, j, "Undetected", fnt7x10);
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	b298      	uxth	r0, r3
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	b299      	uxth	r1, r3
 8006898:	4b33      	ldr	r3, [pc, #204]	; (8006968 <drawStatusMenu+0x12f8>)
 800689a:	4a3f      	ldr	r2, [pc, #252]	; (8006998 <drawStatusMenu+0x1328>)
 800689c:	f7fa fe46 	bl	800152c <LCD_PutStr>
		}


		i=40;
 80068a0:	2328      	movs	r3, #40	; 0x28
 80068a2:	61fb      	str	r3, [r7, #28]
		j+=25;
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	3319      	adds	r3, #25
 80068a8:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Dev UI Runtime: ", fnt7x10);
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	b298      	uxth	r0, r3
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	b299      	uxth	r1, r3
 80068b2:	4b2d      	ldr	r3, [pc, #180]	; (8006968 <drawStatusMenu+0x12f8>)
 80068b4:	4a39      	ldr	r2, [pc, #228]	; (800699c <drawStatusMenu+0x132c>)
 80068b6:	f7fa fe39 	bl	800152c <LCD_PutStr>
 80068ba:	4603      	mov	r3, r0
 80068bc:	461a      	mov	r2, r3
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	4413      	add	r3, r2
 80068c2:	61fb      	str	r3, [r7, #28]
		//GetTick provides runtime in milliseconds
		int runtime = (HAL_GetTick()/1000);
 80068c4:	f002 fe7a 	bl	80095bc <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	4b35      	ldr	r3, [pc, #212]	; (80069a0 <drawStatusMenu+0x1330>)
 80068cc:	fba3 2302 	umull	r2, r3, r3, r2
 80068d0:	099b      	lsrs	r3, r3, #6
 80068d2:	613b      	str	r3, [r7, #16]
		i+= LCD_PutInt(i, j, runtime, fnt7x10);
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	b298      	uxth	r0, r3
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	b299      	uxth	r1, r3
 80068dc:	4b22      	ldr	r3, [pc, #136]	; (8006968 <drawStatusMenu+0x12f8>)
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	f7fa fe5c 	bl	800159c <LCD_PutInt>
 80068e4:	4603      	mov	r3, r0
 80068e6:	461a      	mov	r2, r3
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	4413      	add	r3, r2
 80068ec:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, " seconds", fnt7x10);
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	b298      	uxth	r0, r3
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	b299      	uxth	r1, r3
 80068f6:	4b1c      	ldr	r3, [pc, #112]	; (8006968 <drawStatusMenu+0x12f8>)
 80068f8:	4a2a      	ldr	r2, [pc, #168]	; (80069a4 <drawStatusMenu+0x1334>)
 80068fa:	f7fa fe17 	bl	800152c <LCD_PutStr>
 80068fe:	4603      	mov	r3, r0
 8006900:	461a      	mov	r2, r3
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	4413      	add	r3, r2
 8006906:	61fb      	str	r3, [r7, #28]

		i=200;
 8006908:	23c8      	movs	r3, #200	; 0xc8
 800690a:	61fb      	str	r3, [r7, #28]
		j=15;
 800690c:	230f      	movs	r3, #15
 800690e:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	b298      	uxth	r0, r3
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	b299      	uxth	r1, r3
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	b29a      	uxth	r2, r3
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	b29b      	uxth	r3, r3
 8006920:	f7fa ff54 	bl	80017cc <drawUpDownArrow>
		i=180;
 8006924:	23b4      	movs	r3, #180	; 0xb4
 8006926:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	b298      	uxth	r0, r3
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	b299      	uxth	r1, r3
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	b29a      	uxth	r2, r3
 8006934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006936:	b29b      	uxth	r3, r3
 8006938:	f7fa ff48 	bl	80017cc <drawUpDownArrow>
		i=220;
 800693c:	23dc      	movs	r3, #220	; 0xdc
 800693e:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	b298      	uxth	r0, r3
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	b299      	uxth	r1, r3
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	b29a      	uxth	r2, r3
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	b29b      	uxth	r3, r3
 8006950:	f7fa ff3c 	bl	80017cc <drawUpDownArrow>

		break;
 8006954:	bf00      	nop
	}
	}

	SMLCD_Flush();
 8006956:	f7f9 febf 	bl	80006d8 <SMLCD_Flush>



}
 800695a:	bf00      	nop
 800695c:	3738      	adds	r7, #56	; 0x38
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20028aaa 	.word	0x20028aaa
 8006968:	08017eb4 	.word	0x08017eb4
 800696c:	080179dc 	.word	0x080179dc
 8006970:	080179ec 	.word	0x080179ec
 8006974:	080179f4 	.word	0x080179f4
 8006978:	08017a14 	.word	0x08017a14
 800697c:	200032d8 	.word	0x200032d8
 8006980:	08017a24 	.word	0x08017a24
 8006984:	08017a2c 	.word	0x08017a2c
 8006988:	08017a3c 	.word	0x08017a3c
 800698c:	08017a48 	.word	0x08017a48
 8006990:	08017a60 	.word	0x08017a60
 8006994:	200000e0 	.word	0x200000e0
 8006998:	080177a0 	.word	0x080177a0
 800699c:	08017a6c 	.word	0x08017a6c
 80069a0:	10624dd3 	.word	0x10624dd3
 80069a4:	08017a80 	.word	0x08017a80

080069a8 <drawSystemInfoMenu>:

void drawSystemInfoMenu(int indicator){
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08e      	sub	sp, #56	; 0x38
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	6078      	str	r0, [r7, #4]
	int i,j;
	//float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 80069b0:	2314      	movs	r3, #20
 80069b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	int indentAlignment=20;
 80069b4:	2314      	movs	r3, #20
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28
	int arrowUp = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
	int arrowDown=1;
 80069bc:	2301      	movs	r3, #1
 80069be:	623b      	str	r3, [r7, #32]
	int arrowSize=3;
 80069c0:	2303      	movs	r3, #3
 80069c2:	61fb      	str	r3, [r7, #28]
	int otherBoardAlignment = 230;
 80069c4:	23e6      	movs	r3, #230	; 0xe6
 80069c6:	61bb      	str	r3, [r7, #24]
	previousMenu=0;
 80069c8:	4b8f      	ldr	r3, [pc, #572]	; (8006c08 <drawSystemInfoMenu+0x260>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 80069ce:	f7f9 ffcd 	bl	800096c <LCD_Clear>
	getLatestADC();
 80069d2:	f001 f911 	bl	8007bf8 <getLatestADC>
	drawMenuHeader();
 80069d6:	f001 f853 	bl	8007a80 <drawMenuHeader>
	i  = 135;
 80069da:	2387      	movs	r3, #135	; 0x87
 80069dc:	617b      	str	r3, [r7, #20]
	j = 24;
 80069de:	2318      	movs	r3, #24
 80069e0:	613b      	str	r3, [r7, #16]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	b299      	uxth	r1, r3
 80069e6:	4b89      	ldr	r3, [pc, #548]	; (8006c0c <drawSystemInfoMenu+0x264>)
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	3b02      	subs	r3, #2
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3303      	adds	r3, #3
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2002      	movs	r0, #2
 80069f8:	f7fa fa4c 	bl	8000e94 <LCD_FillRect>
//	i  = 135;
//	j += 12;
//	//horizontal divider
//	LCD_FillRect(2, j, scr_width - 2, j + 3);

	switch(indicator){
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d003      	beq.n	8006a0a <drawSystemInfoMenu+0x62>
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	f000 82be 	beq.w	8006f84 <drawSystemInfoMenu+0x5dc>
 8006a08:	e3fe      	b.n	8007208 <drawSystemInfoMenu+0x860>
	case 1:{
		//i=35;
		//j=90;
		//LCD_FillRect(2, j - 2, scr_width-2, j + 2);

		j=45;
 8006a0a:	232d      	movs	r3, #45	; 0x2d
 8006a0c:	613b      	str	r3, [r7, #16]
		i=42;
 8006a0e:	232a      	movs	r3, #42	; 0x2a
 8006a10:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "FFU Version:", fnt7x10);
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	b298      	uxth	r0, r3
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	b299      	uxth	r1, r3
 8006a1a:	4b7d      	ldr	r3, [pc, #500]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006a1c:	4a7d      	ldr	r2, [pc, #500]	; (8006c14 <drawSystemInfoMenu+0x26c>)
 8006a1e:	f7fa fd85 	bl	800152c <LCD_PutStr>
 8006a22:	4603      	mov	r3, r0
 8006a24:	461a      	mov	r2, r3
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	4413      	add	r3, r2
 8006a2a:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Unknown", fnt7x10);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	b298      	uxth	r0, r3
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	b299      	uxth	r1, r3
 8006a34:	4b76      	ldr	r3, [pc, #472]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006a36:	4a78      	ldr	r2, [pc, #480]	; (8006c18 <drawSystemInfoMenu+0x270>)
 8006a38:	f7fa fd78 	bl	800152c <LCD_PutStr>

		j+=15;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	330f      	adds	r3, #15
 8006a40:	613b      	str	r3, [r7, #16]
		i=42;
 8006a42:	232a      	movs	r3, #42	; 0x2a
 8006a44:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "UI Firmware Version: ", fnt7x10);
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	b298      	uxth	r0, r3
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	b299      	uxth	r1, r3
 8006a4e:	4b70      	ldr	r3, [pc, #448]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006a50:	4a72      	ldr	r2, [pc, #456]	; (8006c1c <drawSystemInfoMenu+0x274>)
 8006a52:	f7fa fd6b 	bl	800152c <LCD_PutStr>
 8006a56:	4603      	mov	r3, r0
 8006a58:	461a      	mov	r2, r3
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "V0.0.1", fnt7x10);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	b298      	uxth	r0, r3
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	b299      	uxth	r1, r3
 8006a68:	4b69      	ldr	r3, [pc, #420]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006a6a:	4a6d      	ldr	r2, [pc, #436]	; (8006c20 <drawSystemInfoMenu+0x278>)
 8006a6c:	f7fa fd5e 	bl	800152c <LCD_PutStr>

		j+=30;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	331e      	adds	r3, #30
 8006a74:	613b      	str	r3, [r7, #16]
		i=10;
 8006a76:	230a      	movs	r3, #10
 8006a78:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Project:", fnt7x10);
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	b298      	uxth	r0, r3
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	b299      	uxth	r1, r3
 8006a82:	4b63      	ldr	r3, [pc, #396]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006a84:	4a67      	ldr	r2, [pc, #412]	; (8006c24 <drawSystemInfoMenu+0x27c>)
 8006a86:	f7fa fd51 	bl	800152c <LCD_PutStr>

		j+=15;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	330f      	adds	r3, #15
 8006a8e:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a92:	617b      	str	r3, [r7, #20]
		if((ZION.SOC_BoardID==1) || (ZION.ASIC_BoardID==1) || (ZION.DISPLAY_BoardID==1)){
 8006a94:	4b64      	ldr	r3, [pc, #400]	; (8006c28 <drawSystemInfoMenu+0x280>)
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d007      	beq.n	8006aac <drawSystemInfoMenu+0x104>
 8006a9c:	4b62      	ldr	r3, [pc, #392]	; (8006c28 <drawSystemInfoMenu+0x280>)
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d003      	beq.n	8006aac <drawSystemInfoMenu+0x104>
 8006aa4:	4b60      	ldr	r3, [pc, #384]	; (8006c28 <drawSystemInfoMenu+0x280>)
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d108      	bne.n	8006abe <drawSystemInfoMenu+0x116>
			LCD_PutStr(i, j, "Atlas", fnt7x10);
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	b298      	uxth	r0, r3
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	b299      	uxth	r1, r3
 8006ab4:	4b56      	ldr	r3, [pc, #344]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006ab6:	4a5d      	ldr	r2, [pc, #372]	; (8006c2c <drawSystemInfoMenu+0x284>)
 8006ab8:	f7fa fd38 	bl	800152c <LCD_PutStr>
 8006abc:	e007      	b.n	8006ace <drawSystemInfoMenu+0x126>
		}
		else{
			LCD_PutStr(i, j, "Unknown", fnt7x10);
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	b298      	uxth	r0, r3
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	b299      	uxth	r1, r3
 8006ac6:	4b52      	ldr	r3, [pc, #328]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006ac8:	4a53      	ldr	r2, [pc, #332]	; (8006c18 <drawSystemInfoMenu+0x270>)
 8006aca:	f7fa fd2f 	bl	800152c <LCD_PutStr>
		}

		j+=15;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	330f      	adds	r3, #15
 8006ad2:	613b      	str	r3, [r7, #16]
		i=10;
 8006ad4:	230a      	movs	r3, #10
 8006ad6:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "Board Versions: ", fnt7x10);
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	b298      	uxth	r0, r3
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	b299      	uxth	r1, r3
 8006ae0:	4b4b      	ldr	r3, [pc, #300]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006ae2:	4a53      	ldr	r2, [pc, #332]	; (8006c30 <drawSystemInfoMenu+0x288>)
 8006ae4:	f7fa fd22 	bl	800152c <LCD_PutStr>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	461a      	mov	r2, r3
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	4413      	add	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]
		i=otherBoardAlignment;
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Other Boards: ", fnt7x10);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	b298      	uxth	r0, r3
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	b299      	uxth	r1, r3
 8006afe:	4b44      	ldr	r3, [pc, #272]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006b00:	4a4c      	ldr	r2, [pc, #304]	; (8006c34 <drawSystemInfoMenu+0x28c>)
 8006b02:	f7fa fd13 	bl	800152c <LCD_PutStr>

		j+=15;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	330f      	adds	r3, #15
 8006b0a:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	b298      	uxth	r0, r3
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	b299      	uxth	r1, r3
 8006b18:	4b3d      	ldr	r3, [pc, #244]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006b1a:	4a47      	ldr	r2, [pc, #284]	; (8006c38 <drawSystemInfoMenu+0x290>)
 8006b1c:	f7fa fd06 	bl	800152c <LCD_PutStr>
 8006b20:	4603      	mov	r3, r0
 8006b22:	461a      	mov	r2, r3
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	4413      	add	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]
		if(ZION.SOC_BoardID==1){
 8006b2a:	4b3f      	ldr	r3, [pc, #252]	; (8006c28 <drawSystemInfoMenu+0x280>)
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d14a      	bne.n	8006bc8 <drawSystemInfoMenu+0x220>
			i+=LCD_PutStr(i, j, "TRIDENT ", fnt7x10);
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	b298      	uxth	r0, r3
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	b299      	uxth	r1, r3
 8006b3a:	4b35      	ldr	r3, [pc, #212]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006b3c:	4a3f      	ldr	r2, [pc, #252]	; (8006c3c <drawSystemInfoMenu+0x294>)
 8006b3e:	f7fa fcf5 	bl	800152c <LCD_PutStr>
 8006b42:	4603      	mov	r3, r0
 8006b44:	461a      	mov	r2, r3
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	4413      	add	r3, r2
 8006b4a:	617b      	str	r3, [r7, #20]
			switch(ZION.SOC_BoardFab){
 8006b4c:	4b36      	ldr	r3, [pc, #216]	; (8006c28 <drawSystemInfoMenu+0x280>)
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	3b01      	subs	r3, #1
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d82e      	bhi.n	8006bb4 <drawSystemInfoMenu+0x20c>
 8006b56:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <drawSystemInfoMenu+0x1b4>)
 8006b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5c:	08006b6d 	.word	0x08006b6d
 8006b60:	08006b7f 	.word	0x08006b7f
 8006b64:	08006b91 	.word	0x08006b91
 8006b68:	08006ba3 	.word	0x08006ba3
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	b298      	uxth	r0, r3
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	b299      	uxth	r1, r3
 8006b74:	4b26      	ldr	r3, [pc, #152]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006b76:	4a32      	ldr	r2, [pc, #200]	; (8006c40 <drawSystemInfoMenu+0x298>)
 8006b78:	f7fa fcd8 	bl	800152c <LCD_PutStr>
				break;
 8006b7c:	e076      	b.n	8006c6c <drawSystemInfoMenu+0x2c4>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	b298      	uxth	r0, r3
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	b299      	uxth	r1, r3
 8006b86:	4b22      	ldr	r3, [pc, #136]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006b88:	4a2e      	ldr	r2, [pc, #184]	; (8006c44 <drawSystemInfoMenu+0x29c>)
 8006b8a:	f7fa fccf 	bl	800152c <LCD_PutStr>
				break;
 8006b8e:	e06d      	b.n	8006c6c <drawSystemInfoMenu+0x2c4>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	b298      	uxth	r0, r3
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	b299      	uxth	r1, r3
 8006b98:	4b1d      	ldr	r3, [pc, #116]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006b9a:	4a2b      	ldr	r2, [pc, #172]	; (8006c48 <drawSystemInfoMenu+0x2a0>)
 8006b9c:	f7fa fcc6 	bl	800152c <LCD_PutStr>
				break;
 8006ba0:	e064      	b.n	8006c6c <drawSystemInfoMenu+0x2c4>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	b298      	uxth	r0, r3
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	b299      	uxth	r1, r3
 8006baa:	4b19      	ldr	r3, [pc, #100]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006bac:	4a27      	ldr	r2, [pc, #156]	; (8006c4c <drawSystemInfoMenu+0x2a4>)
 8006bae:	f7fa fcbd 	bl	800152c <LCD_PutStr>
				break;
 8006bb2:	e05b      	b.n	8006c6c <drawSystemInfoMenu+0x2c4>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	b298      	uxth	r0, r3
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	b299      	uxth	r1, r3
 8006bbc:	4b14      	ldr	r3, [pc, #80]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006bbe:	4a24      	ldr	r2, [pc, #144]	; (8006c50 <drawSystemInfoMenu+0x2a8>)
 8006bc0:	f7fa fcb4 	bl	800152c <LCD_PutStr>
				break;
 8006bc4:	bf00      	nop
 8006bc6:	e051      	b.n	8006c6c <drawSystemInfoMenu+0x2c4>
			}
			}
		}
		else{
			if(ZION.SOC_EEPROM_Detected){
 8006bc8:	4b17      	ldr	r3, [pc, #92]	; (8006c28 <drawSystemInfoMenu+0x280>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d045      	beq.n	8006c5c <drawSystemInfoMenu+0x2b4>
				if(ZION.SOC_BoardFab == -2){
 8006bd0:	4b15      	ldr	r3, [pc, #84]	; (8006c28 <drawSystemInfoMenu+0x280>)
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	f113 0f02 	cmn.w	r3, #2
 8006bd8:	d108      	bne.n	8006bec <drawSystemInfoMenu+0x244>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	b298      	uxth	r0, r3
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	b299      	uxth	r1, r3
 8006be2:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006be4:	4a1b      	ldr	r2, [pc, #108]	; (8006c54 <drawSystemInfoMenu+0x2ac>)
 8006be6:	f7fa fca1 	bl	800152c <LCD_PutStr>
 8006bea:	e03f      	b.n	8006c6c <drawSystemInfoMenu+0x2c4>
				}
				else if(ZION.SOC_BoardFab ==-1){
 8006bec:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <drawSystemInfoMenu+0x280>)
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf4:	d13a      	bne.n	8006c6c <drawSystemInfoMenu+0x2c4>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	b298      	uxth	r0, r3
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	b299      	uxth	r1, r3
 8006bfe:	4b04      	ldr	r3, [pc, #16]	; (8006c10 <drawSystemInfoMenu+0x268>)
 8006c00:	4a15      	ldr	r2, [pc, #84]	; (8006c58 <drawSystemInfoMenu+0x2b0>)
 8006c02:	f7fa fc93 	bl	800152c <LCD_PutStr>
 8006c06:	e031      	b.n	8006c6c <drawSystemInfoMenu+0x2c4>
 8006c08:	20003378 	.word	0x20003378
 8006c0c:	20028aaa 	.word	0x20028aaa
 8006c10:	08017eb4 	.word	0x08017eb4
 8006c14:	08017a8c 	.word	0x08017a8c
 8006c18:	08017a9c 	.word	0x08017a9c
 8006c1c:	08017aa4 	.word	0x08017aa4
 8006c20:	08017abc 	.word	0x08017abc
 8006c24:	08017ac4 	.word	0x08017ac4
 8006c28:	20003274 	.word	0x20003274
 8006c2c:	08017ad0 	.word	0x08017ad0
 8006c30:	08017ad8 	.word	0x08017ad8
 8006c34:	08017aec 	.word	0x08017aec
 8006c38:	0801778c 	.word	0x0801778c
 8006c3c:	08017afc 	.word	0x08017afc
 8006c40:	08017b08 	.word	0x08017b08
 8006c44:	08017b10 	.word	0x08017b10
 8006c48:	08017b18 	.word	0x08017b18
 8006c4c:	08017b20 	.word	0x08017b20
 8006c50:	08017b28 	.word	0x08017b28
 8006c54:	08017b30 	.word	0x08017b30
 8006c58:	08017b48 	.word	0x08017b48
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	b298      	uxth	r0, r3
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	b299      	uxth	r1, r3
 8006c64:	4b93      	ldr	r3, [pc, #588]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006c66:	4a94      	ldr	r2, [pc, #592]	; (8006eb8 <drawSystemInfoMenu+0x510>)
 8006c68:	f7fa fc60 	bl	800152c <LCD_PutStr>
			}
		}
		i=otherBoardAlignment+indentAlignment;
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	4413      	add	r3, r2
 8006c72:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	b298      	uxth	r0, r3
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	b299      	uxth	r1, r3
 8006c7c:	4b8d      	ldr	r3, [pc, #564]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006c7e:	4a8f      	ldr	r2, [pc, #572]	; (8006ebc <drawSystemInfoMenu+0x514>)
 8006c80:	f7fa fc54 	bl	800152c <LCD_PutStr>
 8006c84:	4603      	mov	r3, r0
 8006c86:	461a      	mov	r2, r3
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]
		if(ZION.zionSwitch){
 8006c8e:	4b8c      	ldr	r3, [pc, #560]	; (8006ec0 <drawSystemInfoMenu+0x518>)
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d008      	beq.n	8006ca8 <drawSystemInfoMenu+0x300>
			LCD_PutStr(i, j, "Not detected", fnt7x10);
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	b298      	uxth	r0, r3
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	b299      	uxth	r1, r3
 8006c9e:	4b85      	ldr	r3, [pc, #532]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006ca0:	4a88      	ldr	r2, [pc, #544]	; (8006ec4 <drawSystemInfoMenu+0x51c>)
 8006ca2:	f7fa fc43 	bl	800152c <LCD_PutStr>
 8006ca6:	e007      	b.n	8006cb8 <drawSystemInfoMenu+0x310>
		}
		else{
			LCD_PutStr(i, j, "Detected", fnt7x10);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	b298      	uxth	r0, r3
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	b299      	uxth	r1, r3
 8006cb0:	4b80      	ldr	r3, [pc, #512]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006cb2:	4a85      	ldr	r2, [pc, #532]	; (8006ec8 <drawSystemInfoMenu+0x520>)
 8006cb4:	f7fa fc3a 	bl	800152c <LCD_PutStr>
		}

		j+=15;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	330f      	adds	r3, #15
 8006cbc:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	b298      	uxth	r0, r3
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	b299      	uxth	r1, r3
 8006cca:	4b7a      	ldr	r3, [pc, #488]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006ccc:	4a7f      	ldr	r2, [pc, #508]	; (8006ecc <drawSystemInfoMenu+0x524>)
 8006cce:	f7fa fc2d 	bl	800152c <LCD_PutStr>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	4413      	add	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]
		if(ZION.ASIC_BoardID==1){
 8006cdc:	4b78      	ldr	r3, [pc, #480]	; (8006ec0 <drawSystemInfoMenu+0x518>)
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d14b      	bne.n	8006d7c <drawSystemInfoMenu+0x3d4>
			i+=LCD_PutStr(i, j, "TOGA ", fnt7x10);
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	b298      	uxth	r0, r3
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	b299      	uxth	r1, r3
 8006cec:	4b71      	ldr	r3, [pc, #452]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006cee:	4a78      	ldr	r2, [pc, #480]	; (8006ed0 <drawSystemInfoMenu+0x528>)
 8006cf0:	f7fa fc1c 	bl	800152c <LCD_PutStr>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	617b      	str	r3, [r7, #20]
			switch(ZION.ASIC_BoardFab){
 8006cfe:	4b70      	ldr	r3, [pc, #448]	; (8006ec0 <drawSystemInfoMenu+0x518>)
 8006d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d02:	3b01      	subs	r3, #1
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	d82f      	bhi.n	8006d68 <drawSystemInfoMenu+0x3c0>
 8006d08:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <drawSystemInfoMenu+0x368>)
 8006d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0e:	bf00      	nop
 8006d10:	08006d21 	.word	0x08006d21
 8006d14:	08006d33 	.word	0x08006d33
 8006d18:	08006d45 	.word	0x08006d45
 8006d1c:	08006d57 	.word	0x08006d57
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	b298      	uxth	r0, r3
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	b299      	uxth	r1, r3
 8006d28:	4b62      	ldr	r3, [pc, #392]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006d2a:	4a6a      	ldr	r2, [pc, #424]	; (8006ed4 <drawSystemInfoMenu+0x52c>)
 8006d2c:	f7fa fbfe 	bl	800152c <LCD_PutStr>
				break;
 8006d30:	e04c      	b.n	8006dcc <drawSystemInfoMenu+0x424>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	b298      	uxth	r0, r3
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	b299      	uxth	r1, r3
 8006d3a:	4b5e      	ldr	r3, [pc, #376]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006d3c:	4a66      	ldr	r2, [pc, #408]	; (8006ed8 <drawSystemInfoMenu+0x530>)
 8006d3e:	f7fa fbf5 	bl	800152c <LCD_PutStr>
				break;
 8006d42:	e043      	b.n	8006dcc <drawSystemInfoMenu+0x424>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	b298      	uxth	r0, r3
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	b299      	uxth	r1, r3
 8006d4c:	4b59      	ldr	r3, [pc, #356]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006d4e:	4a63      	ldr	r2, [pc, #396]	; (8006edc <drawSystemInfoMenu+0x534>)
 8006d50:	f7fa fbec 	bl	800152c <LCD_PutStr>
				break;
 8006d54:	e03a      	b.n	8006dcc <drawSystemInfoMenu+0x424>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	b298      	uxth	r0, r3
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	b299      	uxth	r1, r3
 8006d5e:	4b55      	ldr	r3, [pc, #340]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006d60:	4a5f      	ldr	r2, [pc, #380]	; (8006ee0 <drawSystemInfoMenu+0x538>)
 8006d62:	f7fa fbe3 	bl	800152c <LCD_PutStr>
				break;
 8006d66:	e031      	b.n	8006dcc <drawSystemInfoMenu+0x424>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	b298      	uxth	r0, r3
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	b299      	uxth	r1, r3
 8006d70:	4b50      	ldr	r3, [pc, #320]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006d72:	4a5c      	ldr	r2, [pc, #368]	; (8006ee4 <drawSystemInfoMenu+0x53c>)
 8006d74:	f7fa fbda 	bl	800152c <LCD_PutStr>
				break;
 8006d78:	bf00      	nop
 8006d7a:	e027      	b.n	8006dcc <drawSystemInfoMenu+0x424>
			}
			}
		}
		else{
			if(ZION.ASIC_EEPROM_Detected){
 8006d7c:	4b50      	ldr	r3, [pc, #320]	; (8006ec0 <drawSystemInfoMenu+0x518>)
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d01b      	beq.n	8006dbc <drawSystemInfoMenu+0x414>
				if(ZION.ASIC_BoardFab == -2){
 8006d84:	4b4e      	ldr	r3, [pc, #312]	; (8006ec0 <drawSystemInfoMenu+0x518>)
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	f113 0f02 	cmn.w	r3, #2
 8006d8c:	d108      	bne.n	8006da0 <drawSystemInfoMenu+0x3f8>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	b298      	uxth	r0, r3
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	b299      	uxth	r1, r3
 8006d96:	4b47      	ldr	r3, [pc, #284]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006d98:	4a53      	ldr	r2, [pc, #332]	; (8006ee8 <drawSystemInfoMenu+0x540>)
 8006d9a:	f7fa fbc7 	bl	800152c <LCD_PutStr>
 8006d9e:	e015      	b.n	8006dcc <drawSystemInfoMenu+0x424>
				}
				else if(ZION.ASIC_BoardFab ==-1){
 8006da0:	4b47      	ldr	r3, [pc, #284]	; (8006ec0 <drawSystemInfoMenu+0x518>)
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da8:	d110      	bne.n	8006dcc <drawSystemInfoMenu+0x424>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	b298      	uxth	r0, r3
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	b299      	uxth	r1, r3
 8006db2:	4b40      	ldr	r3, [pc, #256]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006db4:	4a4d      	ldr	r2, [pc, #308]	; (8006eec <drawSystemInfoMenu+0x544>)
 8006db6:	f7fa fbb9 	bl	800152c <LCD_PutStr>
 8006dba:	e007      	b.n	8006dcc <drawSystemInfoMenu+0x424>
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	b298      	uxth	r0, r3
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	b299      	uxth	r1, r3
 8006dc4:	4b3b      	ldr	r3, [pc, #236]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006dc6:	4a3c      	ldr	r2, [pc, #240]	; (8006eb8 <drawSystemInfoMenu+0x510>)
 8006dc8:	f7fa fbb0 	bl	800152c <LCD_PutStr>
			}
		}

		j+=15;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	330f      	adds	r3, #15
 8006dd0:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "DISPLAY: ", fnt7x10);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	b298      	uxth	r0, r3
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	b299      	uxth	r1, r3
 8006dde:	4b35      	ldr	r3, [pc, #212]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006de0:	4a43      	ldr	r2, [pc, #268]	; (8006ef0 <drawSystemInfoMenu+0x548>)
 8006de2:	f7fa fba3 	bl	800152c <LCD_PutStr>
 8006de6:	4603      	mov	r3, r0
 8006de8:	461a      	mov	r2, r3
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	4413      	add	r3, r2
 8006dee:	617b      	str	r3, [r7, #20]
		if(ZION.DISPLAY_BoardID==1){
 8006df0:	4b33      	ldr	r3, [pc, #204]	; (8006ec0 <drawSystemInfoMenu+0x518>)
 8006df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d14b      	bne.n	8006e90 <drawSystemInfoMenu+0x4e8>
			i+=LCD_PutStr(i, j, "KANU ", fnt7x10);
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	b298      	uxth	r0, r3
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	b299      	uxth	r1, r3
 8006e00:	4b2c      	ldr	r3, [pc, #176]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006e02:	4a3c      	ldr	r2, [pc, #240]	; (8006ef4 <drawSystemInfoMenu+0x54c>)
 8006e04:	f7fa fb92 	bl	800152c <LCD_PutStr>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	4413      	add	r3, r2
 8006e10:	617b      	str	r3, [r7, #20]
			switch(ZION.DISPLAY_BoardFab){
 8006e12:	4b2b      	ldr	r3, [pc, #172]	; (8006ec0 <drawSystemInfoMenu+0x518>)
 8006e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e16:	3b01      	subs	r3, #1
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d82f      	bhi.n	8006e7c <drawSystemInfoMenu+0x4d4>
 8006e1c:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <drawSystemInfoMenu+0x47c>)
 8006e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e22:	bf00      	nop
 8006e24:	08006e35 	.word	0x08006e35
 8006e28:	08006e47 	.word	0x08006e47
 8006e2c:	08006e59 	.word	0x08006e59
 8006e30:	08006e6b 	.word	0x08006e6b
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	b298      	uxth	r0, r3
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	b299      	uxth	r1, r3
 8006e3c:	4b1d      	ldr	r3, [pc, #116]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006e3e:	4a25      	ldr	r2, [pc, #148]	; (8006ed4 <drawSystemInfoMenu+0x52c>)
 8006e40:	f7fa fb74 	bl	800152c <LCD_PutStr>
				break;
 8006e44:	e06e      	b.n	8006f24 <drawSystemInfoMenu+0x57c>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	b298      	uxth	r0, r3
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	b299      	uxth	r1, r3
 8006e4e:	4b19      	ldr	r3, [pc, #100]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006e50:	4a21      	ldr	r2, [pc, #132]	; (8006ed8 <drawSystemInfoMenu+0x530>)
 8006e52:	f7fa fb6b 	bl	800152c <LCD_PutStr>
				break;
 8006e56:	e065      	b.n	8006f24 <drawSystemInfoMenu+0x57c>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	b298      	uxth	r0, r3
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	b299      	uxth	r1, r3
 8006e60:	4b14      	ldr	r3, [pc, #80]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006e62:	4a1e      	ldr	r2, [pc, #120]	; (8006edc <drawSystemInfoMenu+0x534>)
 8006e64:	f7fa fb62 	bl	800152c <LCD_PutStr>
				break;
 8006e68:	e05c      	b.n	8006f24 <drawSystemInfoMenu+0x57c>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	b298      	uxth	r0, r3
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	b299      	uxth	r1, r3
 8006e72:	4b10      	ldr	r3, [pc, #64]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006e74:	4a1a      	ldr	r2, [pc, #104]	; (8006ee0 <drawSystemInfoMenu+0x538>)
 8006e76:	f7fa fb59 	bl	800152c <LCD_PutStr>
				break;
 8006e7a:	e053      	b.n	8006f24 <drawSystemInfoMenu+0x57c>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	b298      	uxth	r0, r3
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	b299      	uxth	r1, r3
 8006e84:	4b0b      	ldr	r3, [pc, #44]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006e86:	4a17      	ldr	r2, [pc, #92]	; (8006ee4 <drawSystemInfoMenu+0x53c>)
 8006e88:	f7fa fb50 	bl	800152c <LCD_PutStr>
				break;
 8006e8c:	bf00      	nop
 8006e8e:	e049      	b.n	8006f24 <drawSystemInfoMenu+0x57c>
			}
			}
		}
		else{
			if(ZION.DISPLAY_EEPROM_Detected){
 8006e90:	4b0b      	ldr	r3, [pc, #44]	; (8006ec0 <drawSystemInfoMenu+0x518>)
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d03d      	beq.n	8006f14 <drawSystemInfoMenu+0x56c>
				if(ZION.DISPLAY_BoardFab == -2){
 8006e98:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <drawSystemInfoMenu+0x518>)
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9c:	f113 0f02 	cmn.w	r3, #2
 8006ea0:	d12a      	bne.n	8006ef8 <drawSystemInfoMenu+0x550>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	b298      	uxth	r0, r3
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	b299      	uxth	r1, r3
 8006eaa:	4b02      	ldr	r3, [pc, #8]	; (8006eb4 <drawSystemInfoMenu+0x50c>)
 8006eac:	4a0e      	ldr	r2, [pc, #56]	; (8006ee8 <drawSystemInfoMenu+0x540>)
 8006eae:	f7fa fb3d 	bl	800152c <LCD_PutStr>
 8006eb2:	e037      	b.n	8006f24 <drawSystemInfoMenu+0x57c>
 8006eb4:	08017eb4 	.word	0x08017eb4
 8006eb8:	08017b60 	.word	0x08017b60
 8006ebc:	08017b74 	.word	0x08017b74
 8006ec0:	20003274 	.word	0x20003274
 8006ec4:	08017b7c 	.word	0x08017b7c
 8006ec8:	08017794 	.word	0x08017794
 8006ecc:	080177c8 	.word	0x080177c8
 8006ed0:	08017b8c 	.word	0x08017b8c
 8006ed4:	08017b08 	.word	0x08017b08
 8006ed8:	08017b10 	.word	0x08017b10
 8006edc:	08017b18 	.word	0x08017b18
 8006ee0:	08017b20 	.word	0x08017b20
 8006ee4:	08017b28 	.word	0x08017b28
 8006ee8:	08017b30 	.word	0x08017b30
 8006eec:	08017b48 	.word	0x08017b48
 8006ef0:	08017b94 	.word	0x08017b94
 8006ef4:	08017ba0 	.word	0x08017ba0
				}
				else if(ZION.DISPLAY_BoardFab ==-1){
 8006ef8:	4b1e      	ldr	r3, [pc, #120]	; (8006f74 <drawSystemInfoMenu+0x5cc>)
 8006efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f00:	d110      	bne.n	8006f24 <drawSystemInfoMenu+0x57c>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	b298      	uxth	r0, r3
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	b299      	uxth	r1, r3
 8006f0a:	4b1b      	ldr	r3, [pc, #108]	; (8006f78 <drawSystemInfoMenu+0x5d0>)
 8006f0c:	4a1b      	ldr	r2, [pc, #108]	; (8006f7c <drawSystemInfoMenu+0x5d4>)
 8006f0e:	f7fa fb0d 	bl	800152c <LCD_PutStr>
 8006f12:	e007      	b.n	8006f24 <drawSystemInfoMenu+0x57c>
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	b298      	uxth	r0, r3
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	b299      	uxth	r1, r3
 8006f1c:	4b16      	ldr	r3, [pc, #88]	; (8006f78 <drawSystemInfoMenu+0x5d0>)
 8006f1e:	4a18      	ldr	r2, [pc, #96]	; (8006f80 <drawSystemInfoMenu+0x5d8>)
 8006f20:	f7fa fb04 	bl	800152c <LCD_PutStr>
			}
		}

		i=200;
 8006f24:	23c8      	movs	r3, #200	; 0xc8
 8006f26:	617b      	str	r3, [r7, #20]
		j=220;
 8006f28:	23dc      	movs	r3, #220	; 0xdc
 8006f2a:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	b298      	uxth	r0, r3
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	b299      	uxth	r1, r3
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	f7fa fc46 	bl	80017cc <drawUpDownArrow>
		i=180;
 8006f40:	23b4      	movs	r3, #180	; 0xb4
 8006f42:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	b298      	uxth	r0, r3
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	b299      	uxth	r1, r3
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f7fa fc3a 	bl	80017cc <drawUpDownArrow>
		i=220;
 8006f58:	23dc      	movs	r3, #220	; 0xdc
 8006f5a:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	b298      	uxth	r0, r3
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	b299      	uxth	r1, r3
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	f7fa fc2e 	bl	80017cc <drawUpDownArrow>
		break;
 8006f70:	e14a      	b.n	8007208 <drawSystemInfoMenu+0x860>
 8006f72:	bf00      	nop
 8006f74:	20003274 	.word	0x20003274
 8006f78:	08017eb4 	.word	0x08017eb4
 8006f7c:	08017b48 	.word	0x08017b48
 8006f80:	08017b60 	.word	0x08017b60
	}
	case 2:{
		j=45;
 8006f84:	232d      	movs	r3, #45	; 0x2d
 8006f86:	613b      	str	r3, [r7, #16]
		i=10;
 8006f88:	230a      	movs	r3, #10
 8006f8a:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "DEV UI BANK VOLTAGES:", fnt7x10);
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	b298      	uxth	r0, r3
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	b299      	uxth	r1, r3
 8006f94:	4b9f      	ldr	r3, [pc, #636]	; (8007214 <drawSystemInfoMenu+0x86c>)
 8006f96:	4aa0      	ldr	r2, [pc, #640]	; (8007218 <drawSystemInfoMenu+0x870>)
 8006f98:	f7fa fac8 	bl	800152c <LCD_PutStr>

		j+=25;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	3319      	adds	r3, #25
 8006fa0:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE UART: ", fnt7x10);
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	b298      	uxth	r0, r3
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	b299      	uxth	r1, r3
 8006fae:	4b99      	ldr	r3, [pc, #612]	; (8007214 <drawSystemInfoMenu+0x86c>)
 8006fb0:	4a9a      	ldr	r2, [pc, #616]	; (800721c <drawSystemInfoMenu+0x874>)
 8006fb2:	f7fa fabb 	bl	800152c <LCD_PutStr>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	461a      	mov	r2, r3
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareUartADC];
 8006fc0:	4b97      	ldr	r3, [pc, #604]	; (8007220 <drawSystemInfoMenu+0x878>)
 8006fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc4:	4a97      	ldr	r2, [pc, #604]	; (8007224 <drawSystemInfoMenu+0x87c>)
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	edd3 7a00 	vldr	s15, [r3]
 8006fce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006fd2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006fd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fda:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006fde:	ee17 3a90 	vmov	r3, s15
 8006fe2:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	b298      	uxth	r0, r3
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	b299      	uxth	r1, r3
 8006fec:	4b89      	ldr	r3, [pc, #548]	; (8007214 <drawSystemInfoMenu+0x86c>)
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	f7fa fb38 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	3319      	adds	r3, #25
 8006ffc:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007000:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE I2C: ", fnt7x10);
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	b298      	uxth	r0, r3
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	b299      	uxth	r1, r3
 800700a:	4b82      	ldr	r3, [pc, #520]	; (8007214 <drawSystemInfoMenu+0x86c>)
 800700c:	4a86      	ldr	r2, [pc, #536]	; (8007228 <drawSystemInfoMenu+0x880>)
 800700e:	f7fa fa8d 	bl	800152c <LCD_PutStr>
 8007012:	4603      	mov	r3, r0
 8007014:	461a      	mov	r2, r3
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	4413      	add	r3, r2
 800701a:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareI2cADC];
 800701c:	4b80      	ldr	r3, [pc, #512]	; (8007220 <drawSystemInfoMenu+0x878>)
 800701e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007020:	4a80      	ldr	r2, [pc, #512]	; (8007224 <drawSystemInfoMenu+0x87c>)
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	edd3 7a00 	vldr	s15, [r3]
 800702a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800702e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007032:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007036:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800703a:	ee17 3a90 	vmov	r3, s15
 800703e:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	b298      	uxth	r0, r3
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	b299      	uxth	r1, r3
 8007048:	4b72      	ldr	r3, [pc, #456]	; (8007214 <drawSystemInfoMenu+0x86c>)
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	2301      	movs	r3, #1
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	f7fa fb0a 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	3319      	adds	r3, #25
 8007058:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE SPI: ", fnt7x10);
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	b298      	uxth	r0, r3
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	b299      	uxth	r1, r3
 8007066:	4b6b      	ldr	r3, [pc, #428]	; (8007214 <drawSystemInfoMenu+0x86c>)
 8007068:	4a70      	ldr	r2, [pc, #448]	; (800722c <drawSystemInfoMenu+0x884>)
 800706a:	f7fa fa5f 	bl	800152c <LCD_PutStr>
 800706e:	4603      	mov	r3, r0
 8007070:	461a      	mov	r2, r3
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	4413      	add	r3, r2
 8007076:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareSpiADC];
 8007078:	4b69      	ldr	r3, [pc, #420]	; (8007220 <drawSystemInfoMenu+0x878>)
 800707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707c:	4a69      	ldr	r2, [pc, #420]	; (8007224 <drawSystemInfoMenu+0x87c>)
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	edd3 7a00 	vldr	s15, [r3]
 8007086:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800708a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800708e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007092:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007096:	ee17 3a90 	vmov	r3, s15
 800709a:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	b298      	uxth	r0, r3
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	b299      	uxth	r1, r3
 80070a4:	4b5b      	ldr	r3, [pc, #364]	; (8007214 <drawSystemInfoMenu+0x86c>)
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	2301      	movs	r3, #1
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	f7fa fadc 	bl	8001668 <LCD_PutIntF>

		j+=25;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	3319      	adds	r3, #25
 80070b4:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 80070b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b8:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "CONFIG: ", fnt7x10);
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	b298      	uxth	r0, r3
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	b299      	uxth	r1, r3
 80070c2:	4b54      	ldr	r3, [pc, #336]	; (8007214 <drawSystemInfoMenu+0x86c>)
 80070c4:	4a5a      	ldr	r2, [pc, #360]	; (8007230 <drawSystemInfoMenu+0x888>)
 80070c6:	f7fa fa31 	bl	800152c <LCD_PutStr>
 80070ca:	4603      	mov	r3, r0
 80070cc:	461a      	mov	r2, r3
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	4413      	add	r3, r2
 80070d2:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.configADC];
 80070d4:	4b52      	ldr	r3, [pc, #328]	; (8007220 <drawSystemInfoMenu+0x878>)
 80070d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d8:	4a52      	ldr	r2, [pc, #328]	; (8007224 <drawSystemInfoMenu+0x87c>)
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	edd3 7a00 	vldr	s15, [r3]
 80070e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80070e6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80070ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80070ee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80070f2:	ee17 3a90 	vmov	r3, s15
 80070f6:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	b298      	uxth	r0, r3
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	b299      	uxth	r1, r3
 8007100:	4b44      	ldr	r3, [pc, #272]	; (8007214 <drawSystemInfoMenu+0x86c>)
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	2301      	movs	r3, #1
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	f7fa faae 	bl	8001668 <LCD_PutIntF>

		j+=25;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	3319      	adds	r3, #25
 8007110:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8007112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007114:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	b298      	uxth	r0, r3
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	b299      	uxth	r1, r3
 800711e:	4b3d      	ldr	r3, [pc, #244]	; (8007214 <drawSystemInfoMenu+0x86c>)
 8007120:	4a44      	ldr	r2, [pc, #272]	; (8007234 <drawSystemInfoMenu+0x88c>)
 8007122:	f7fa fa03 	bl	800152c <LCD_PutStr>
 8007126:	4603      	mov	r3, r0
 8007128:	461a      	mov	r2, r3
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	4413      	add	r3, r2
 800712e:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.zionADC];
 8007130:	4b3b      	ldr	r3, [pc, #236]	; (8007220 <drawSystemInfoMenu+0x878>)
 8007132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007134:	4a3b      	ldr	r2, [pc, #236]	; (8007224 <drawSystemInfoMenu+0x87c>)
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4413      	add	r3, r2
 800713a:	edd3 7a00 	vldr	s15, [r3]
 800713e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007142:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007146:	ee27 7b06 	vmul.f64	d7, d7, d6
 800714a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800714e:	ee17 3a90 	vmov	r3, s15
 8007152:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10) + adjacentSpacing;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	b298      	uxth	r0, r3
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	b299      	uxth	r1, r3
 800715c:	4b2d      	ldr	r3, [pc, #180]	; (8007214 <drawSystemInfoMenu+0x86c>)
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	2301      	movs	r3, #1
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	f7fa fa80 	bl	8001668 <LCD_PutIntF>
 8007168:	4603      	mov	r3, r0
 800716a:	461a      	mov	r2, r3
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	4413      	add	r3, r2
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	4413      	add	r3, r2
 8007174:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "Zion Switch: ", fnt7x10);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	b298      	uxth	r0, r3
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	b299      	uxth	r1, r3
 800717e:	4b25      	ldr	r3, [pc, #148]	; (8007214 <drawSystemInfoMenu+0x86c>)
 8007180:	4a2d      	ldr	r2, [pc, #180]	; (8007238 <drawSystemInfoMenu+0x890>)
 8007182:	f7fa f9d3 	bl	800152c <LCD_PutStr>
 8007186:	4603      	mov	r3, r0
 8007188:	461a      	mov	r2, r3
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	4413      	add	r3, r2
 800718e:	617b      	str	r3, [r7, #20]
		if(ZION.zionSwitch ==1){
 8007190:	4b2a      	ldr	r3, [pc, #168]	; (800723c <drawSystemInfoMenu+0x894>)
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d108      	bne.n	80071aa <drawSystemInfoMenu+0x802>
			LCD_PutStr(i, j, "ACTIVE", fnt7x10);
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	b298      	uxth	r0, r3
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	b299      	uxth	r1, r3
 80071a0:	4b1c      	ldr	r3, [pc, #112]	; (8007214 <drawSystemInfoMenu+0x86c>)
 80071a2:	4a27      	ldr	r2, [pc, #156]	; (8007240 <drawSystemInfoMenu+0x898>)
 80071a4:	f7fa f9c2 	bl	800152c <LCD_PutStr>
 80071a8:	e007      	b.n	80071ba <drawSystemInfoMenu+0x812>
		}
		else{
			LCD_PutStr(i, j, "INACTIVE", fnt7x10);
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	b298      	uxth	r0, r3
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	b299      	uxth	r1, r3
 80071b2:	4b18      	ldr	r3, [pc, #96]	; (8007214 <drawSystemInfoMenu+0x86c>)
 80071b4:	4a23      	ldr	r2, [pc, #140]	; (8007244 <drawSystemInfoMenu+0x89c>)
 80071b6:	f7fa f9b9 	bl	800152c <LCD_PutStr>
		}



		i=200;
 80071ba:	23c8      	movs	r3, #200	; 0xc8
 80071bc:	617b      	str	r3, [r7, #20]
		j=15;
 80071be:	230f      	movs	r3, #15
 80071c0:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	b298      	uxth	r0, r3
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	b299      	uxth	r1, r3
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	f7fa fafb 	bl	80017cc <drawUpDownArrow>
		i=180;
 80071d6:	23b4      	movs	r3, #180	; 0xb4
 80071d8:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	b298      	uxth	r0, r3
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	b299      	uxth	r1, r3
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f7fa faef 	bl	80017cc <drawUpDownArrow>
		i=220;
 80071ee:	23dc      	movs	r3, #220	; 0xdc
 80071f0:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	b298      	uxth	r0, r3
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	b299      	uxth	r1, r3
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	b29b      	uxth	r3, r3
 8007202:	f7fa fae3 	bl	80017cc <drawUpDownArrow>

		break;
 8007206:	bf00      	nop
	}
	}
	SMLCD_Flush();
 8007208:	f7f9 fa66 	bl	80006d8 <SMLCD_Flush>
}
 800720c:	bf00      	nop
 800720e:	3730      	adds	r7, #48	; 0x30
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	08017eb4 	.word	0x08017eb4
 8007218:	08017ba8 	.word	0x08017ba8
 800721c:	08017bc0 	.word	0x08017bc0
 8007220:	20000128 	.word	0x20000128
 8007224:	20030f48 	.word	0x20030f48
 8007228:	08017bd0 	.word	0x08017bd0
 800722c:	08017bdc 	.word	0x08017bdc
 8007230:	08017be8 	.word	0x08017be8
 8007234:	08017b74 	.word	0x08017b74
 8007238:	08017bf4 	.word	0x08017bf4
 800723c:	20003274 	.word	0x20003274
 8007240:	08017c04 	.word	0x08017c04
 8007244:	08017c0c 	.word	0x08017c0c

08007248 <drawBootMenu>:

void drawBootMenu(int indicator, uint8_t button, int menu){
 8007248:	b580      	push	{r7, lr}
 800724a:	b088      	sub	sp, #32
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	460b      	mov	r3, r1
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	72fb      	strb	r3, [r7, #11]
	int i,j;
		int adjacentSpacing = 20;
 8007256:	2314      	movs	r3, #20
 8007258:	61bb      	str	r3, [r7, #24]
		int indentAlignment=50;
 800725a:	2332      	movs	r3, #50	; 0x32
 800725c:	617b      	str	r3, [r7, #20]


		LCD_Clear();
 800725e:	f7f9 fb85 	bl	800096c <LCD_Clear>
		getLatestADC();
 8007262:	f000 fcc9 	bl	8007bf8 <getLatestADC>
		drawMenuHeader();
 8007266:	f000 fc0b 	bl	8007a80 <drawMenuHeader>
		i  = 135;
 800726a:	2387      	movs	r3, #135	; 0x87
 800726c:	613b      	str	r3, [r7, #16]
		j = 24;
 800726e:	2318      	movs	r3, #24
 8007270:	61fb      	str	r3, [r7, #28]
		//horizontal divider
		LCD_FillRect(2, j, scr_width - 2, j + 3);
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	b299      	uxth	r1, r3
 8007276:	4b8d      	ldr	r3, [pc, #564]	; (80074ac <drawBootMenu+0x264>)
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	3b02      	subs	r3, #2
 800727c:	b29a      	uxth	r2, r3
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	b29b      	uxth	r3, r3
 8007282:	3303      	adds	r3, #3
 8007284:	b29b      	uxth	r3, r3
 8007286:	2002      	movs	r0, #2
 8007288:	f7f9 fe04 	bl	8000e94 <LCD_FillRect>
		if(displayAdcValues[Adc.adc0] >3.5){
 800728c:	4b88      	ldr	r3, [pc, #544]	; (80074b0 <drawBootMenu+0x268>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a88      	ldr	r2, [pc, #544]	; (80074b4 <drawBootMenu+0x26c>)
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	edd3 7a00 	vldr	s15, [r3]
 800729a:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 800729e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a6:	f340 839a 	ble.w	80079de <drawBootMenu+0x796>
			if(ZION.zionFinished){
 80072aa:	4b83      	ldr	r3, [pc, #524]	; (80074b8 <drawBootMenu+0x270>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 82d1 	beq.w	8007856 <drawBootMenu+0x60e>
				if((ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS)){
 80072b4:	4b80      	ldr	r3, [pc, #512]	; (80074b8 <drawBootMenu+0x270>)
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d008      	beq.n	80072ce <drawBootMenu+0x86>
 80072bc:	4b7e      	ldr	r3, [pc, #504]	; (80074b8 <drawBootMenu+0x270>)
 80072be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d004      	beq.n	80072ce <drawBootMenu+0x86>
 80072c4:	4b7c      	ldr	r3, [pc, #496]	; (80074b8 <drawBootMenu+0x270>)
 80072c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	f040 820d 	bne.w	80076e8 <drawBootMenu+0x4a0>
					j=45;
 80072ce:	232d      	movs	r3, #45	; 0x2d
 80072d0:	61fb      	str	r3, [r7, #28]
					i=5;
 80072d2:	2305      	movs	r3, #5
 80072d4:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i,j, "ATLAS RECOGNIZED. PROVIDING ATLAS BOOT MODES:", fnt7x10);
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	b298      	uxth	r0, r3
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	b299      	uxth	r1, r3
 80072de:	4b77      	ldr	r3, [pc, #476]	; (80074bc <drawBootMenu+0x274>)
 80072e0:	4a77      	ldr	r2, [pc, #476]	; (80074c0 <drawBootMenu+0x278>)
 80072e2:	f7fa f923 	bl	800152c <LCD_PutStr>
					j+=30;
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	331e      	adds	r3, #30
 80072ea:	61fb      	str	r3, [r7, #28]
					i=42;
 80072ec:	232a      	movs	r3, #42	; 0x2a
 80072ee:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	b298      	uxth	r0, r3
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	b299      	uxth	r1, r3
 80072f8:	4b70      	ldr	r3, [pc, #448]	; (80074bc <drawBootMenu+0x274>)
 80072fa:	4a72      	ldr	r2, [pc, #456]	; (80074c4 <drawBootMenu+0x27c>)
 80072fc:	f7fa f916 	bl	800152c <LCD_PutStr>
					i=indentAlignment;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	613b      	str	r3, [r7, #16]
					j+=20;
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	3314      	adds	r3, #20
 8007308:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "STANDARD", fnt7x10);
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	b298      	uxth	r0, r3
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	b299      	uxth	r1, r3
 8007312:	4b6a      	ldr	r3, [pc, #424]	; (80074bc <drawBootMenu+0x274>)
 8007314:	4a6c      	ldr	r2, [pc, #432]	; (80074c8 <drawBootMenu+0x280>)
 8007316:	f7fa f909 	bl	800152c <LCD_PutStr>
					j+=20;
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	3314      	adds	r3, #20
 800731e:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "EMERGENCY DOWNLOAD", fnt7x10);
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	b298      	uxth	r0, r3
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	b299      	uxth	r1, r3
 8007328:	4b64      	ldr	r3, [pc, #400]	; (80074bc <drawBootMenu+0x274>)
 800732a:	4a68      	ldr	r2, [pc, #416]	; (80074cc <drawBootMenu+0x284>)
 800732c:	f7fa f8fe 	bl	800152c <LCD_PutStr>
					j+=20;
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	3314      	adds	r3, #20
 8007334:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "RECOVERY", fnt7x10);
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	b298      	uxth	r0, r3
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	b299      	uxth	r1, r3
 800733e:	4b5f      	ldr	r3, [pc, #380]	; (80074bc <drawBootMenu+0x274>)
 8007340:	4a63      	ldr	r2, [pc, #396]	; (80074d0 <drawBootMenu+0x288>)
 8007342:	f7fa f8f3 	bl	800152c <LCD_PutStr>
					j+=20;
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	3314      	adds	r3, #20
 800734a:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "MASS STORAGE", fnt7x10);
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	b298      	uxth	r0, r3
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	b299      	uxth	r1, r3
 8007354:	4b59      	ldr	r3, [pc, #356]	; (80074bc <drawBootMenu+0x274>)
 8007356:	4a5f      	ldr	r2, [pc, #380]	; (80074d4 <drawBootMenu+0x28c>)
 8007358:	f7fa f8e8 	bl	800152c <LCD_PutStr>
					j+=20;
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	3314      	adds	r3, #20
 8007360:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "UEFI", fnt7x10);
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	b298      	uxth	r0, r3
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	b299      	uxth	r1, r3
 800736a:	4b54      	ldr	r3, [pc, #336]	; (80074bc <drawBootMenu+0x274>)
 800736c:	4a5a      	ldr	r2, [pc, #360]	; (80074d8 <drawBootMenu+0x290>)
 800736e:	f7fa f8dd 	bl	800152c <LCD_PutStr>
					i-= 17;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	3b11      	subs	r3, #17
 8007376:	613b      	str	r3, [r7, #16]
					if(setIndicator==0){
 8007378:	4b58      	ldr	r3, [pc, #352]	; (80074dc <drawBootMenu+0x294>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	f040 810d 	bne.w	800759c <drawBootMenu+0x354>
						switch(indicator){
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3b01      	subs	r3, #1
 8007386:	2b04      	cmp	r3, #4
 8007388:	f200 8104 	bhi.w	8007594 <drawBootMenu+0x34c>
 800738c:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <drawBootMenu+0x14c>)
 800738e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007392:	bf00      	nop
 8007394:	080073a9 	.word	0x080073a9
 8007398:	080073ff 	.word	0x080073ff
 800739c:	08007455 	.word	0x08007455
 80073a0:	080074e9 	.word	0x080074e9
 80073a4:	0800753f 	.word	0x0800753f
						case FIRST:
						{
							j=95;
 80073a8:	235f      	movs	r3, #95	; 0x5f
 80073aa:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 80073ac:	7afb      	ldrb	r3, [r7, #11]
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	bf0c      	ite	eq
 80073b2:	2301      	moveq	r3, #1
 80073b4:	2300      	movne	r3, #0
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	4b49      	ldr	r3, [pc, #292]	; (80074e0 <drawBootMenu+0x298>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	4299      	cmp	r1, r3
 80073c0:	bf0c      	ite	eq
 80073c2:	2301      	moveq	r3, #1
 80073c4:	2300      	movne	r3, #0
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	4013      	ands	r3, r2
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 8170 	beq.w	80076b2 <drawBootMenu+0x46a>
								i=140;
 80073d2:	238c      	movs	r3, #140	; 0x8c
 80073d4:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	b298      	uxth	r0, r3
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	3305      	adds	r3, #5
 80073e0:	b299      	uxth	r1, r3
 80073e2:	2303      	movs	r3, #3
 80073e4:	2203      	movs	r2, #3
 80073e6:	f7fa f9f1 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn0=1;
 80073ea:	4b3e      	ldr	r3, [pc, #248]	; (80074e4 <drawBootMenu+0x29c>)
 80073ec:	2201      	movs	r2, #1
 80073ee:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 80073f0:	4b3c      	ldr	r3, [pc, #240]	; (80074e4 <drawBootMenu+0x29c>)
 80073f2:	2201      	movs	r2, #1
 80073f4:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 80073f6:	4b39      	ldr	r3, [pc, #228]	; (80074dc <drawBootMenu+0x294>)
 80073f8:	2201      	movs	r2, #1
 80073fa:	601a      	str	r2, [r3, #0]
							}

							break;
 80073fc:	e159      	b.n	80076b2 <drawBootMenu+0x46a>
						}
						case SECOND:
						{
							j=115;
 80073fe:	2373      	movs	r3, #115	; 0x73
 8007400:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007402:	7afb      	ldrb	r3, [r7, #11]
 8007404:	2b04      	cmp	r3, #4
 8007406:	bf0c      	ite	eq
 8007408:	2301      	moveq	r3, #1
 800740a:	2300      	movne	r3, #0
 800740c:	b2da      	uxtb	r2, r3
 800740e:	4b34      	ldr	r3, [pc, #208]	; (80074e0 <drawBootMenu+0x298>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6879      	ldr	r1, [r7, #4]
 8007414:	4299      	cmp	r1, r3
 8007416:	bf0c      	ite	eq
 8007418:	2301      	moveq	r3, #1
 800741a:	2300      	movne	r3, #0
 800741c:	b2db      	uxtb	r3, r3
 800741e:	4013      	ands	r3, r2
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 8147 	beq.w	80076b6 <drawBootMenu+0x46e>
								i=220;
 8007428:	23dc      	movs	r3, #220	; 0xdc
 800742a:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	b298      	uxth	r0, r3
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	b29b      	uxth	r3, r3
 8007434:	3305      	adds	r3, #5
 8007436:	b299      	uxth	r1, r3
 8007438:	2303      	movs	r3, #3
 800743a:	2203      	movs	r2, #3
 800743c:	f7fa f9c6 	bl	80017cc <drawUpDownArrow>
								bootButtons.edl_sw=1;
 8007440:	4b28      	ldr	r3, [pc, #160]	; (80074e4 <drawBootMenu+0x29c>)
 8007442:	2201      	movs	r2, #1
 8007444:	61da      	str	r2, [r3, #28]
								bootButtons.bootModeSet=1;
 8007446:	4b27      	ldr	r3, [pc, #156]	; (80074e4 <drawBootMenu+0x29c>)
 8007448:	2201      	movs	r2, #1
 800744a:	601a      	str	r2, [r3, #0]
								setIndicator=2;
 800744c:	4b23      	ldr	r3, [pc, #140]	; (80074dc <drawBootMenu+0x294>)
 800744e:	2202      	movs	r2, #2
 8007450:	601a      	str	r2, [r3, #0]
							}

							break;
 8007452:	e130      	b.n	80076b6 <drawBootMenu+0x46e>
						}
						case THIRD:
						{
							j=135;
 8007454:	2387      	movs	r3, #135	; 0x87
 8007456:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007458:	7afb      	ldrb	r3, [r7, #11]
 800745a:	2b04      	cmp	r3, #4
 800745c:	bf0c      	ite	eq
 800745e:	2301      	moveq	r3, #1
 8007460:	2300      	movne	r3, #0
 8007462:	b2da      	uxtb	r2, r3
 8007464:	4b1e      	ldr	r3, [pc, #120]	; (80074e0 <drawBootMenu+0x298>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	4299      	cmp	r1, r3
 800746c:	bf0c      	ite	eq
 800746e:	2301      	moveq	r3, #1
 8007470:	2300      	movne	r3, #0
 8007472:	b2db      	uxtb	r3, r3
 8007474:	4013      	ands	r3, r2
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 811e 	beq.w	80076ba <drawBootMenu+0x472>
								i=130;
 800747e:	2382      	movs	r3, #130	; 0x82
 8007480:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	b298      	uxth	r0, r3
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	b29b      	uxth	r3, r3
 800748a:	3305      	adds	r3, #5
 800748c:	b299      	uxth	r1, r3
 800748e:	2303      	movs	r3, #3
 8007490:	2203      	movs	r2, #3
 8007492:	f7fa f99b 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn1=1;
 8007496:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <drawBootMenu+0x29c>)
 8007498:	2201      	movs	r2, #1
 800749a:	609a      	str	r2, [r3, #8]
								bootButtons.bootModeSet=1;
 800749c:	4b11      	ldr	r3, [pc, #68]	; (80074e4 <drawBootMenu+0x29c>)
 800749e:	2201      	movs	r2, #1
 80074a0:	601a      	str	r2, [r3, #0]
								setIndicator=3;
 80074a2:	4b0e      	ldr	r3, [pc, #56]	; (80074dc <drawBootMenu+0x294>)
 80074a4:	2203      	movs	r2, #3
 80074a6:	601a      	str	r2, [r3, #0]
							}

							break;
 80074a8:	e107      	b.n	80076ba <drawBootMenu+0x472>
 80074aa:	bf00      	nop
 80074ac:	20028aaa 	.word	0x20028aaa
 80074b0:	20000128 	.word	0x20000128
 80074b4:	20030f48 	.word	0x20030f48
 80074b8:	20003274 	.word	0x20003274
 80074bc:	08017eb4 	.word	0x08017eb4
 80074c0:	08017c18 	.word	0x08017c18
 80074c4:	08017c48 	.word	0x08017c48
 80074c8:	08017c64 	.word	0x08017c64
 80074cc:	08017c70 	.word	0x08017c70
 80074d0:	08017c84 	.word	0x08017c84
 80074d4:	08017c90 	.word	0x08017c90
 80074d8:	080176c0 	.word	0x080176c0
 80074dc:	2000337c 	.word	0x2000337c
 80074e0:	20003378 	.word	0x20003378
 80074e4:	200032ac 	.word	0x200032ac
						}
						case FOURTH:
						{
							j=155;
 80074e8:	239b      	movs	r3, #155	; 0x9b
 80074ea:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 80074ec:	7afb      	ldrb	r3, [r7, #11]
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	bf0c      	ite	eq
 80074f2:	2301      	moveq	r3, #1
 80074f4:	2300      	movne	r3, #0
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	4b78      	ldr	r3, [pc, #480]	; (80076dc <drawBootMenu+0x494>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6879      	ldr	r1, [r7, #4]
 80074fe:	4299      	cmp	r1, r3
 8007500:	bf0c      	ite	eq
 8007502:	2301      	moveq	r3, #1
 8007504:	2300      	movne	r3, #0
 8007506:	b2db      	uxtb	r3, r3
 8007508:	4013      	ands	r3, r2
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 80d6 	beq.w	80076be <drawBootMenu+0x476>
								i=160;
 8007512:	23a0      	movs	r3, #160	; 0xa0
 8007514:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	b298      	uxth	r0, r3
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	b29b      	uxth	r3, r3
 800751e:	3305      	adds	r3, #5
 8007520:	b299      	uxth	r1, r3
 8007522:	2303      	movs	r3, #3
 8007524:	2203      	movs	r2, #3
 8007526:	f7fa f951 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn2=1;
 800752a:	4b6d      	ldr	r3, [pc, #436]	; (80076e0 <drawBootMenu+0x498>)
 800752c:	2201      	movs	r2, #1
 800752e:	60da      	str	r2, [r3, #12]
								bootButtons.bootModeSet=1;
 8007530:	4b6b      	ldr	r3, [pc, #428]	; (80076e0 <drawBootMenu+0x498>)
 8007532:	2201      	movs	r2, #1
 8007534:	601a      	str	r2, [r3, #0]
								setIndicator=4;
 8007536:	4b6b      	ldr	r3, [pc, #428]	; (80076e4 <drawBootMenu+0x49c>)
 8007538:	2204      	movs	r2, #4
 800753a:	601a      	str	r2, [r3, #0]
							}

							break;
 800753c:	e0bf      	b.n	80076be <drawBootMenu+0x476>
						}
						case FIFTH:
						{
							j=175;
 800753e:	23af      	movs	r3, #175	; 0xaf
 8007540:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007542:	7afb      	ldrb	r3, [r7, #11]
 8007544:	2b04      	cmp	r3, #4
 8007546:	bf0c      	ite	eq
 8007548:	2301      	moveq	r3, #1
 800754a:	2300      	movne	r3, #0
 800754c:	b2da      	uxtb	r2, r3
 800754e:	4b63      	ldr	r3, [pc, #396]	; (80076dc <drawBootMenu+0x494>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6879      	ldr	r1, [r7, #4]
 8007554:	4299      	cmp	r1, r3
 8007556:	bf0c      	ite	eq
 8007558:	2301      	moveq	r3, #1
 800755a:	2300      	movne	r3, #0
 800755c:	b2db      	uxtb	r3, r3
 800755e:	4013      	ands	r3, r2
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 80ad 	beq.w	80076c2 <drawBootMenu+0x47a>
								i=100;
 8007568:	2364      	movs	r3, #100	; 0x64
 800756a:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	b298      	uxth	r0, r3
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	b29b      	uxth	r3, r3
 8007574:	3305      	adds	r3, #5
 8007576:	b299      	uxth	r1, r3
 8007578:	2303      	movs	r3, #3
 800757a:	2203      	movs	r2, #3
 800757c:	f7fa f926 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn3=1;
 8007580:	4b57      	ldr	r3, [pc, #348]	; (80076e0 <drawBootMenu+0x498>)
 8007582:	2201      	movs	r2, #1
 8007584:	611a      	str	r2, [r3, #16]
								bootButtons.bootModeSet=1;
 8007586:	4b56      	ldr	r3, [pc, #344]	; (80076e0 <drawBootMenu+0x498>)
 8007588:	2201      	movs	r2, #1
 800758a:	601a      	str	r2, [r3, #0]
								setIndicator=5;
 800758c:	4b55      	ldr	r3, [pc, #340]	; (80076e4 <drawBootMenu+0x49c>)
 800758e:	2205      	movs	r2, #5
 8007590:	601a      	str	r2, [r3, #0]
							}

							break;
 8007592:	e096      	b.n	80076c2 <drawBootMenu+0x47a>
						}
						default:
						{
							j=95;
 8007594:	235f      	movs	r3, #95	; 0x5f
 8007596:	61fb      	str	r3, [r7, #28]
							break;
 8007598:	bf00      	nop
 800759a:	e09d      	b.n	80076d8 <drawBootMenu+0x490>
						}
						}
					}
					else{
						switch(setIndicator){
 800759c:	4b51      	ldr	r3, [pc, #324]	; (80076e4 <drawBootMenu+0x49c>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3b01      	subs	r3, #1
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d87a      	bhi.n	800769c <drawBootMenu+0x454>
 80075a6:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <drawBootMenu+0x364>)
 80075a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ac:	080075c1 	.word	0x080075c1
 80075b0:	080075ed 	.word	0x080075ed
 80075b4:	08007619 	.word	0x08007619
 80075b8:	08007645 	.word	0x08007645
 80075bc:	08007671 	.word	0x08007671
						case FIRST:
						{
							j=95;
 80075c0:	235f      	movs	r3, #95	; 0x5f
 80075c2:	61fb      	str	r3, [r7, #28]
							i=140;
 80075c4:	238c      	movs	r3, #140	; 0x8c
 80075c6:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	b298      	uxth	r0, r3
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	3305      	adds	r3, #5
 80075d2:	b299      	uxth	r1, r3
 80075d4:	2303      	movs	r3, #3
 80075d6:	2203      	movs	r2, #3
 80075d8:	f7fa f8f8 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 80075dc:	4b40      	ldr	r3, [pc, #256]	; (80076e0 <drawBootMenu+0x498>)
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d070      	beq.n	80076c6 <drawBootMenu+0x47e>
								setIndicator=0;
 80075e4:	4b3f      	ldr	r3, [pc, #252]	; (80076e4 <drawBootMenu+0x49c>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	601a      	str	r2, [r3, #0]
							}
							break;
 80075ea:	e06c      	b.n	80076c6 <drawBootMenu+0x47e>
						}
						case SECOND:
						{
							j=115;
 80075ec:	2373      	movs	r3, #115	; 0x73
 80075ee:	61fb      	str	r3, [r7, #28]
							i=220;
 80075f0:	23dc      	movs	r3, #220	; 0xdc
 80075f2:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	b298      	uxth	r0, r3
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	3305      	adds	r3, #5
 80075fe:	b299      	uxth	r1, r3
 8007600:	2303      	movs	r3, #3
 8007602:	2203      	movs	r2, #3
 8007604:	f7fa f8e2 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007608:	4b35      	ldr	r3, [pc, #212]	; (80076e0 <drawBootMenu+0x498>)
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	2b00      	cmp	r3, #0
 800760e:	d05c      	beq.n	80076ca <drawBootMenu+0x482>
								setIndicator=0;
 8007610:	4b34      	ldr	r3, [pc, #208]	; (80076e4 <drawBootMenu+0x49c>)
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
							}
							break;
 8007616:	e058      	b.n	80076ca <drawBootMenu+0x482>
						}
						case THIRD:
						{
							j=135;
 8007618:	2387      	movs	r3, #135	; 0x87
 800761a:	61fb      	str	r3, [r7, #28]
							i=130;
 800761c:	2382      	movs	r3, #130	; 0x82
 800761e:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	b298      	uxth	r0, r3
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	b29b      	uxth	r3, r3
 8007628:	3305      	adds	r3, #5
 800762a:	b299      	uxth	r1, r3
 800762c:	2303      	movs	r3, #3
 800762e:	2203      	movs	r2, #3
 8007630:	f7fa f8cc 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007634:	4b2a      	ldr	r3, [pc, #168]	; (80076e0 <drawBootMenu+0x498>)
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	2b00      	cmp	r3, #0
 800763a:	d048      	beq.n	80076ce <drawBootMenu+0x486>
								setIndicator=0;
 800763c:	4b29      	ldr	r3, [pc, #164]	; (80076e4 <drawBootMenu+0x49c>)
 800763e:	2200      	movs	r2, #0
 8007640:	601a      	str	r2, [r3, #0]
							}
							break;
 8007642:	e044      	b.n	80076ce <drawBootMenu+0x486>
						}
						case FOURTH:
						{
							j=155;
 8007644:	239b      	movs	r3, #155	; 0x9b
 8007646:	61fb      	str	r3, [r7, #28]
							i=160;
 8007648:	23a0      	movs	r3, #160	; 0xa0
 800764a:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	b298      	uxth	r0, r3
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	b29b      	uxth	r3, r3
 8007654:	3305      	adds	r3, #5
 8007656:	b299      	uxth	r1, r3
 8007658:	2303      	movs	r3, #3
 800765a:	2203      	movs	r2, #3
 800765c:	f7fa f8b6 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007660:	4b1f      	ldr	r3, [pc, #124]	; (80076e0 <drawBootMenu+0x498>)
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	2b00      	cmp	r3, #0
 8007666:	d034      	beq.n	80076d2 <drawBootMenu+0x48a>
								setIndicator=0;
 8007668:	4b1e      	ldr	r3, [pc, #120]	; (80076e4 <drawBootMenu+0x49c>)
 800766a:	2200      	movs	r2, #0
 800766c:	601a      	str	r2, [r3, #0]
							}
							break;
 800766e:	e030      	b.n	80076d2 <drawBootMenu+0x48a>
						}
						case FIFTH:
						{
							j=175;
 8007670:	23af      	movs	r3, #175	; 0xaf
 8007672:	61fb      	str	r3, [r7, #28]
							i=100;
 8007674:	2364      	movs	r3, #100	; 0x64
 8007676:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	b298      	uxth	r0, r3
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	b29b      	uxth	r3, r3
 8007680:	3305      	adds	r3, #5
 8007682:	b299      	uxth	r1, r3
 8007684:	2303      	movs	r3, #3
 8007686:	2203      	movs	r2, #3
 8007688:	f7fa f8a0 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 800768c:	4b14      	ldr	r3, [pc, #80]	; (80076e0 <drawBootMenu+0x498>)
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	2b00      	cmp	r3, #0
 8007692:	d020      	beq.n	80076d6 <drawBootMenu+0x48e>
								setIndicator=0;
 8007694:	4b13      	ldr	r3, [pc, #76]	; (80076e4 <drawBootMenu+0x49c>)
 8007696:	2200      	movs	r2, #0
 8007698:	601a      	str	r2, [r3, #0]
							}
							break;
 800769a:	e01c      	b.n	80076d6 <drawBootMenu+0x48e>
						}
						default:
						{
							drawUpDownArrow(i, j+5, 3, 3);
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	b298      	uxth	r0, r3
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	3305      	adds	r3, #5
 80076a6:	b299      	uxth	r1, r3
 80076a8:	2303      	movs	r3, #3
 80076aa:	2203      	movs	r2, #3
 80076ac:	f7fa f88e 	bl	80017cc <drawUpDownArrow>
							break;
 80076b0:	e012      	b.n	80076d8 <drawBootMenu+0x490>
							break;
 80076b2:	bf00      	nop
 80076b4:	e1bf      	b.n	8007a36 <drawBootMenu+0x7ee>
							break;
 80076b6:	bf00      	nop
 80076b8:	e1bd      	b.n	8007a36 <drawBootMenu+0x7ee>
							break;
 80076ba:	bf00      	nop
 80076bc:	e1bb      	b.n	8007a36 <drawBootMenu+0x7ee>
							break;
 80076be:	bf00      	nop
 80076c0:	e1b9      	b.n	8007a36 <drawBootMenu+0x7ee>
							break;
 80076c2:	bf00      	nop
 80076c4:	e1b7      	b.n	8007a36 <drawBootMenu+0x7ee>
							break;
 80076c6:	bf00      	nop
 80076c8:	e1b5      	b.n	8007a36 <drawBootMenu+0x7ee>
							break;
 80076ca:	bf00      	nop
 80076cc:	e1b3      	b.n	8007a36 <drawBootMenu+0x7ee>
							break;
 80076ce:	bf00      	nop
 80076d0:	e1b1      	b.n	8007a36 <drawBootMenu+0x7ee>
							break;
 80076d2:	bf00      	nop
 80076d4:	e1af      	b.n	8007a36 <drawBootMenu+0x7ee>
							break;
 80076d6:	bf00      	nop
					if(setIndicator==0){
 80076d8:	e1ad      	b.n	8007a36 <drawBootMenu+0x7ee>
 80076da:	bf00      	nop
 80076dc:	20003378 	.word	0x20003378
 80076e0:	200032ac 	.word	0x200032ac
 80076e4:	2000337c 	.word	0x2000337c
						}
						}
					}
				}
				else{
					j=45;
 80076e8:	232d      	movs	r3, #45	; 0x2d
 80076ea:	61fb      	str	r3, [r7, #28]
					i=5;
 80076ec:	2305      	movs	r3, #5
 80076ee:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i,j, "UNKNOWN SYSTEM. STANDARD MODE ONLY:", fnt7x10);
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	b298      	uxth	r0, r3
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	b299      	uxth	r1, r3
 80076f8:	4b98      	ldr	r3, [pc, #608]	; (800795c <drawBootMenu+0x714>)
 80076fa:	4a99      	ldr	r2, [pc, #612]	; (8007960 <drawBootMenu+0x718>)
 80076fc:	f7f9 ff16 	bl	800152c <LCD_PutStr>
					j+=30;
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	331e      	adds	r3, #30
 8007704:	61fb      	str	r3, [r7, #28]
					i=42;
 8007706:	232a      	movs	r3, #42	; 0x2a
 8007708:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	b298      	uxth	r0, r3
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	b299      	uxth	r1, r3
 8007712:	4b92      	ldr	r3, [pc, #584]	; (800795c <drawBootMenu+0x714>)
 8007714:	4a93      	ldr	r2, [pc, #588]	; (8007964 <drawBootMenu+0x71c>)
 8007716:	f7f9 ff09 	bl	800152c <LCD_PutStr>
					i=indentAlignment;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	613b      	str	r3, [r7, #16]
					j+=20;
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	3314      	adds	r3, #20
 8007722:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "STANDARD", fnt7x10);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	b298      	uxth	r0, r3
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	b299      	uxth	r1, r3
 800772c:	4b8b      	ldr	r3, [pc, #556]	; (800795c <drawBootMenu+0x714>)
 800772e:	4a8e      	ldr	r2, [pc, #568]	; (8007968 <drawBootMenu+0x720>)
 8007730:	f7f9 fefc 	bl	800152c <LCD_PutStr>
					if(setIndicator==0){
 8007734:	4b8d      	ldr	r3, [pc, #564]	; (800796c <drawBootMenu+0x724>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d159      	bne.n	80077f0 <drawBootMenu+0x5a8>
						switch(indicator){
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d12a      	bne.n	8007798 <drawBootMenu+0x550>
						case FIRST:
						{
							j=95;
 8007742:	235f      	movs	r3, #95	; 0x5f
 8007744:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007746:	7afb      	ldrb	r3, [r7, #11]
 8007748:	2b04      	cmp	r3, #4
 800774a:	bf0c      	ite	eq
 800774c:	2301      	moveq	r3, #1
 800774e:	2300      	movne	r3, #0
 8007750:	b2da      	uxtb	r2, r3
 8007752:	4b87      	ldr	r3, [pc, #540]	; (8007970 <drawBootMenu+0x728>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6879      	ldr	r1, [r7, #4]
 8007758:	4299      	cmp	r1, r3
 800775a:	bf0c      	ite	eq
 800775c:	2301      	moveq	r3, #1
 800775e:	2300      	movne	r3, #0
 8007760:	b2db      	uxtb	r3, r3
 8007762:	4013      	ands	r3, r2
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 8156 	beq.w	8007a18 <drawBootMenu+0x7d0>
								i=140;
 800776c:	238c      	movs	r3, #140	; 0x8c
 800776e:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	b298      	uxth	r0, r3
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	b29b      	uxth	r3, r3
 8007778:	3305      	adds	r3, #5
 800777a:	b299      	uxth	r1, r3
 800777c:	2303      	movs	r3, #3
 800777e:	2203      	movs	r2, #3
 8007780:	f7fa f824 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn0=1;
 8007784:	4b7b      	ldr	r3, [pc, #492]	; (8007974 <drawBootMenu+0x72c>)
 8007786:	2201      	movs	r2, #1
 8007788:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 800778a:	4b7a      	ldr	r3, [pc, #488]	; (8007974 <drawBootMenu+0x72c>)
 800778c:	2201      	movs	r2, #1
 800778e:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 8007790:	4b76      	ldr	r3, [pc, #472]	; (800796c <drawBootMenu+0x724>)
 8007792:	2201      	movs	r2, #1
 8007794:	601a      	str	r2, [r3, #0]
							}
							break;
 8007796:	e13f      	b.n	8007a18 <drawBootMenu+0x7d0>
						}
						default:
						{
							j=95;
 8007798:	235f      	movs	r3, #95	; 0x5f
 800779a:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 800779c:	7afb      	ldrb	r3, [r7, #11]
 800779e:	2b04      	cmp	r3, #4
 80077a0:	bf0c      	ite	eq
 80077a2:	2301      	moveq	r3, #1
 80077a4:	2300      	movne	r3, #0
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	4b71      	ldr	r3, [pc, #452]	; (8007970 <drawBootMenu+0x728>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6879      	ldr	r1, [r7, #4]
 80077ae:	4299      	cmp	r1, r3
 80077b0:	bf0c      	ite	eq
 80077b2:	2301      	moveq	r3, #1
 80077b4:	2300      	movne	r3, #0
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	4013      	ands	r3, r2
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 812d 	beq.w	8007a1c <drawBootMenu+0x7d4>
								i=140;
 80077c2:	238c      	movs	r3, #140	; 0x8c
 80077c4:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	b298      	uxth	r0, r3
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	3305      	adds	r3, #5
 80077d0:	b299      	uxth	r1, r3
 80077d2:	2303      	movs	r3, #3
 80077d4:	2203      	movs	r2, #3
 80077d6:	f7f9 fff9 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn0=1;
 80077da:	4b66      	ldr	r3, [pc, #408]	; (8007974 <drawBootMenu+0x72c>)
 80077dc:	2201      	movs	r2, #1
 80077de:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 80077e0:	4b64      	ldr	r3, [pc, #400]	; (8007974 <drawBootMenu+0x72c>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 80077e6:	4b61      	ldr	r3, [pc, #388]	; (800796c <drawBootMenu+0x724>)
 80077e8:	2201      	movs	r2, #1
 80077ea:	601a      	str	r2, [r3, #0]
							}
							break;
 80077ec:	bf00      	nop
 80077ee:	e115      	b.n	8007a1c <drawBootMenu+0x7d4>
						}
						}
					}
					else{
						switch(setIndicator){
 80077f0:	4b5e      	ldr	r3, [pc, #376]	; (800796c <drawBootMenu+0x724>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d116      	bne.n	8007826 <drawBootMenu+0x5de>
						case FIRST:
						{
							j=95;
 80077f8:	235f      	movs	r3, #95	; 0x5f
 80077fa:	61fb      	str	r3, [r7, #28]
							i=140;
 80077fc:	238c      	movs	r3, #140	; 0x8c
 80077fe:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	b298      	uxth	r0, r3
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	b29b      	uxth	r3, r3
 8007808:	3305      	adds	r3, #5
 800780a:	b299      	uxth	r1, r3
 800780c:	2303      	movs	r3, #3
 800780e:	2203      	movs	r2, #3
 8007810:	f7f9 ffdc 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007814:	4b57      	ldr	r3, [pc, #348]	; (8007974 <drawBootMenu+0x72c>)
 8007816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 8101 	beq.w	8007a20 <drawBootMenu+0x7d8>
								setIndicator=0;
 800781e:	4b53      	ldr	r3, [pc, #332]	; (800796c <drawBootMenu+0x724>)
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
							}
							break;
 8007824:	e0fc      	b.n	8007a20 <drawBootMenu+0x7d8>
						}
						default:
						{
							j=95;
 8007826:	235f      	movs	r3, #95	; 0x5f
 8007828:	61fb      	str	r3, [r7, #28]
							i=140;
 800782a:	238c      	movs	r3, #140	; 0x8c
 800782c:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	b298      	uxth	r0, r3
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	b29b      	uxth	r3, r3
 8007836:	3305      	adds	r3, #5
 8007838:	b299      	uxth	r1, r3
 800783a:	2303      	movs	r3, #3
 800783c:	2203      	movs	r2, #3
 800783e:	f7f9 ffc5 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007842:	4b4c      	ldr	r3, [pc, #304]	; (8007974 <drawBootMenu+0x72c>)
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 80ec 	beq.w	8007a24 <drawBootMenu+0x7dc>
								setIndicator=0;
 800784c:	4b47      	ldr	r3, [pc, #284]	; (800796c <drawBootMenu+0x724>)
 800784e:	2200      	movs	r2, #0
 8007850:	601a      	str	r2, [r3, #0]
							}
							break;
 8007852:	bf00      	nop
 8007854:	e0e6      	b.n	8007a24 <drawBootMenu+0x7dc>
						}
					}
				}
			}
			else{
				j=45;
 8007856:	232d      	movs	r3, #45	; 0x2d
 8007858:	61fb      	str	r3, [r7, #28]
				i=15;
 800785a:	230f      	movs	r3, #15
 800785c:	613b      	str	r3, [r7, #16]
				LCD_PutStr(i,j, "WAITING ON ZION INFO. STANDARD MODE ONLY:", fnt7x10);
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	b298      	uxth	r0, r3
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	b299      	uxth	r1, r3
 8007866:	4b3d      	ldr	r3, [pc, #244]	; (800795c <drawBootMenu+0x714>)
 8007868:	4a43      	ldr	r2, [pc, #268]	; (8007978 <drawBootMenu+0x730>)
 800786a:	f7f9 fe5f 	bl	800152c <LCD_PutStr>
				j+=30;
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	331e      	adds	r3, #30
 8007872:	61fb      	str	r3, [r7, #28]
				i=42;
 8007874:	232a      	movs	r3, #42	; 0x2a
 8007876:	613b      	str	r3, [r7, #16]
				LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	b298      	uxth	r0, r3
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	b299      	uxth	r1, r3
 8007880:	4b36      	ldr	r3, [pc, #216]	; (800795c <drawBootMenu+0x714>)
 8007882:	4a38      	ldr	r2, [pc, #224]	; (8007964 <drawBootMenu+0x71c>)
 8007884:	f7f9 fe52 	bl	800152c <LCD_PutStr>
				i=indentAlignment;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	613b      	str	r3, [r7, #16]
				j+=20;
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	3314      	adds	r3, #20
 8007890:	61fb      	str	r3, [r7, #28]
				LCD_PutStr(i, j, "STANDARD", fnt7x10);
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	b298      	uxth	r0, r3
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	b299      	uxth	r1, r3
 800789a:	4b30      	ldr	r3, [pc, #192]	; (800795c <drawBootMenu+0x714>)
 800789c:	4a32      	ldr	r2, [pc, #200]	; (8007968 <drawBootMenu+0x720>)
 800789e:	f7f9 fe45 	bl	800152c <LCD_PutStr>
				if(setIndicator==0){
 80078a2:	4b32      	ldr	r3, [pc, #200]	; (800796c <drawBootMenu+0x724>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d168      	bne.n	800797c <drawBootMenu+0x734>
					switch(indicator){
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d12a      	bne.n	8007906 <drawBootMenu+0x6be>
					case FIRST:
					{
						j=95;
 80078b0:	235f      	movs	r3, #95	; 0x5f
 80078b2:	61fb      	str	r3, [r7, #28]
						if((button == SEL) & (previousMenu == menu)){
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	bf0c      	ite	eq
 80078ba:	2301      	moveq	r3, #1
 80078bc:	2300      	movne	r3, #0
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	4b2b      	ldr	r3, [pc, #172]	; (8007970 <drawBootMenu+0x728>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	4299      	cmp	r1, r3
 80078c8:	bf0c      	ite	eq
 80078ca:	2301      	moveq	r3, #1
 80078cc:	2300      	movne	r3, #0
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	4013      	ands	r3, r2
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 80a7 	beq.w	8007a28 <drawBootMenu+0x7e0>
							i=140;
 80078da:	238c      	movs	r3, #140	; 0x8c
 80078dc:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	b298      	uxth	r0, r3
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	3305      	adds	r3, #5
 80078e8:	b299      	uxth	r1, r3
 80078ea:	2303      	movs	r3, #3
 80078ec:	2203      	movs	r2, #3
 80078ee:	f7f9 ff6d 	bl	80017cc <drawUpDownArrow>
							bootButtons.btn0=1;
 80078f2:	4b20      	ldr	r3, [pc, #128]	; (8007974 <drawBootMenu+0x72c>)
 80078f4:	2201      	movs	r2, #1
 80078f6:	605a      	str	r2, [r3, #4]
							bootButtons.bootModeSet=1;
 80078f8:	4b1e      	ldr	r3, [pc, #120]	; (8007974 <drawBootMenu+0x72c>)
 80078fa:	2201      	movs	r2, #1
 80078fc:	601a      	str	r2, [r3, #0]
							setIndicator=1;
 80078fe:	4b1b      	ldr	r3, [pc, #108]	; (800796c <drawBootMenu+0x724>)
 8007900:	2201      	movs	r2, #1
 8007902:	601a      	str	r2, [r3, #0]
						}
						break;
 8007904:	e090      	b.n	8007a28 <drawBootMenu+0x7e0>
					}
					default:
					{
						j=95;
 8007906:	235f      	movs	r3, #95	; 0x5f
 8007908:	61fb      	str	r3, [r7, #28]
						if((button == SEL) & (previousMenu == menu)){
 800790a:	7afb      	ldrb	r3, [r7, #11]
 800790c:	2b04      	cmp	r3, #4
 800790e:	bf0c      	ite	eq
 8007910:	2301      	moveq	r3, #1
 8007912:	2300      	movne	r3, #0
 8007914:	b2da      	uxtb	r2, r3
 8007916:	4b16      	ldr	r3, [pc, #88]	; (8007970 <drawBootMenu+0x728>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	4299      	cmp	r1, r3
 800791e:	bf0c      	ite	eq
 8007920:	2301      	moveq	r3, #1
 8007922:	2300      	movne	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	4013      	ands	r3, r2
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d07e      	beq.n	8007a2c <drawBootMenu+0x7e4>
							i=140;
 800792e:	238c      	movs	r3, #140	; 0x8c
 8007930:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	b298      	uxth	r0, r3
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	b29b      	uxth	r3, r3
 800793a:	3305      	adds	r3, #5
 800793c:	b299      	uxth	r1, r3
 800793e:	2303      	movs	r3, #3
 8007940:	2203      	movs	r2, #3
 8007942:	f7f9 ff43 	bl	80017cc <drawUpDownArrow>
							bootButtons.btn0=1;
 8007946:	4b0b      	ldr	r3, [pc, #44]	; (8007974 <drawBootMenu+0x72c>)
 8007948:	2201      	movs	r2, #1
 800794a:	605a      	str	r2, [r3, #4]
							bootButtons.bootModeSet=1;
 800794c:	4b09      	ldr	r3, [pc, #36]	; (8007974 <drawBootMenu+0x72c>)
 800794e:	2201      	movs	r2, #1
 8007950:	601a      	str	r2, [r3, #0]
							setIndicator=1;
 8007952:	4b06      	ldr	r3, [pc, #24]	; (800796c <drawBootMenu+0x724>)
 8007954:	2201      	movs	r2, #1
 8007956:	601a      	str	r2, [r3, #0]
						}
						break;
 8007958:	bf00      	nop
 800795a:	e067      	b.n	8007a2c <drawBootMenu+0x7e4>
 800795c:	08017eb4 	.word	0x08017eb4
 8007960:	08017ca0 	.word	0x08017ca0
 8007964:	08017c48 	.word	0x08017c48
 8007968:	08017c64 	.word	0x08017c64
 800796c:	2000337c 	.word	0x2000337c
 8007970:	20003378 	.word	0x20003378
 8007974:	200032ac 	.word	0x200032ac
 8007978:	08017cc4 	.word	0x08017cc4
					}
					}
				}
				else{
					switch(setIndicator){
 800797c:	4b3a      	ldr	r3, [pc, #232]	; (8007a68 <drawBootMenu+0x820>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d115      	bne.n	80079b0 <drawBootMenu+0x768>
					case FIRST:
					{
						j=95;
 8007984:	235f      	movs	r3, #95	; 0x5f
 8007986:	61fb      	str	r3, [r7, #28]
						i=140;
 8007988:	238c      	movs	r3, #140	; 0x8c
 800798a:	613b      	str	r3, [r7, #16]
						drawUpDownArrow(i, j+5, 3, 3);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	b298      	uxth	r0, r3
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	b29b      	uxth	r3, r3
 8007994:	3305      	adds	r3, #5
 8007996:	b299      	uxth	r1, r3
 8007998:	2303      	movs	r3, #3
 800799a:	2203      	movs	r2, #3
 800799c:	f7f9 ff16 	bl	80017cc <drawUpDownArrow>
						if(bootButtons.modeClear){
 80079a0:	4b32      	ldr	r3, [pc, #200]	; (8007a6c <drawBootMenu+0x824>)
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d043      	beq.n	8007a30 <drawBootMenu+0x7e8>
							setIndicator=0;
 80079a8:	4b2f      	ldr	r3, [pc, #188]	; (8007a68 <drawBootMenu+0x820>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]
						}
						break;
 80079ae:	e03f      	b.n	8007a30 <drawBootMenu+0x7e8>
					}
					default:
					{
						j=95;
 80079b0:	235f      	movs	r3, #95	; 0x5f
 80079b2:	61fb      	str	r3, [r7, #28]
						i=140;
 80079b4:	238c      	movs	r3, #140	; 0x8c
 80079b6:	613b      	str	r3, [r7, #16]
						drawUpDownArrow(i, j+5, 3, 3);
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	b298      	uxth	r0, r3
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	3305      	adds	r3, #5
 80079c2:	b299      	uxth	r1, r3
 80079c4:	2303      	movs	r3, #3
 80079c6:	2203      	movs	r2, #3
 80079c8:	f7f9 ff00 	bl	80017cc <drawUpDownArrow>
						if(bootButtons.modeClear){
 80079cc:	4b27      	ldr	r3, [pc, #156]	; (8007a6c <drawBootMenu+0x824>)
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d02f      	beq.n	8007a34 <drawBootMenu+0x7ec>
							setIndicator=0;
 80079d4:	4b24      	ldr	r3, [pc, #144]	; (8007a68 <drawBootMenu+0x820>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	601a      	str	r2, [r3, #0]
						}
						break;
 80079da:	bf00      	nop
 80079dc:	e02a      	b.n	8007a34 <drawBootMenu+0x7ec>
					}
				}
			}
		}
		else{
			j=110;
 80079de:	236e      	movs	r3, #110	; 0x6e
 80079e0:	61fb      	str	r3, [r7, #28]
			i=120;
 80079e2:	2378      	movs	r3, #120	; 0x78
 80079e4:	613b      	str	r3, [r7, #16]
			bootButtons.bootMode=0;
 80079e6:	4b21      	ldr	r3, [pc, #132]	; (8007a6c <drawBootMenu+0x824>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	629a      	str	r2, [r3, #40]	; 0x28
			LCD_PutStr(i,j, "POWER SWITCH DISABLED!", fnt7x10);
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	b298      	uxth	r0, r3
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	b299      	uxth	r1, r3
 80079f4:	4b1e      	ldr	r3, [pc, #120]	; (8007a70 <drawBootMenu+0x828>)
 80079f6:	4a1f      	ldr	r2, [pc, #124]	; (8007a74 <drawBootMenu+0x82c>)
 80079f8:	f7f9 fd98 	bl	800152c <LCD_PutStr>
			j+=14;
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	330e      	adds	r3, #14
 8007a00:	61fb      	str	r3, [r7, #28]
			i=75;
 8007a02:	234b      	movs	r3, #75	; 0x4b
 8007a04:	613b      	str	r3, [r7, #16]
			LCD_PutStr(i,j, "Flip Switch to enable Boot Options!", fnt7x10);
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	b298      	uxth	r0, r3
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	b299      	uxth	r1, r3
 8007a0e:	4b18      	ldr	r3, [pc, #96]	; (8007a70 <drawBootMenu+0x828>)
 8007a10:	4a19      	ldr	r2, [pc, #100]	; (8007a78 <drawBootMenu+0x830>)
 8007a12:	f7f9 fd8b 	bl	800152c <LCD_PutStr>
 8007a16:	e00e      	b.n	8007a36 <drawBootMenu+0x7ee>
							break;
 8007a18:	bf00      	nop
 8007a1a:	e00c      	b.n	8007a36 <drawBootMenu+0x7ee>
							break;
 8007a1c:	bf00      	nop
 8007a1e:	e00a      	b.n	8007a36 <drawBootMenu+0x7ee>
							break;
 8007a20:	bf00      	nop
 8007a22:	e008      	b.n	8007a36 <drawBootMenu+0x7ee>
							break;
 8007a24:	bf00      	nop
 8007a26:	e006      	b.n	8007a36 <drawBootMenu+0x7ee>
						break;
 8007a28:	bf00      	nop
 8007a2a:	e004      	b.n	8007a36 <drawBootMenu+0x7ee>
						break;
 8007a2c:	bf00      	nop
 8007a2e:	e002      	b.n	8007a36 <drawBootMenu+0x7ee>
						break;
 8007a30:	bf00      	nop
 8007a32:	e000      	b.n	8007a36 <drawBootMenu+0x7ee>
						break;
 8007a34:	bf00      	nop
		}
		previousMenu=menu;
 8007a36:	4a11      	ldr	r2, [pc, #68]	; (8007a7c <drawBootMenu+0x834>)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6013      	str	r3, [r2, #0]
		i=25;
 8007a3c:	2319      	movs	r3, #25
 8007a3e:	613b      	str	r3, [r7, #16]
		LCD_FillRect(i, j, i + 12, j + 10);
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	b298      	uxth	r0, r3
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	b299      	uxth	r1, r3
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	330c      	adds	r3, #12
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	330a      	adds	r3, #10
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	f7f9 fa1c 	bl	8000e94 <LCD_FillRect>
		SMLCD_Flush();
 8007a5c:	f7f8 fe3c 	bl	80006d8 <SMLCD_Flush>
}
 8007a60:	bf00      	nop
 8007a62:	3720      	adds	r7, #32
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	2000337c 	.word	0x2000337c
 8007a6c:	200032ac 	.word	0x200032ac
 8007a70:	08017eb4 	.word	0x08017eb4
 8007a74:	08017cf0 	.word	0x08017cf0
 8007a78:	08017d08 	.word	0x08017d08
 8007a7c:	20003378 	.word	0x20003378

08007a80 <drawMenuHeader>:

void drawMenuHeader(){
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
	int i, j;
	LCD_PixelMode = LCD_PSET;
 8007a86:	4b4e      	ldr	r3, [pc, #312]	; (8007bc0 <drawMenuHeader+0x140>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8007a8c:	4b4d      	ldr	r3, [pc, #308]	; (8007bc4 <drawMenuHeader+0x144>)
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	4b4c      	ldr	r3, [pc, #304]	; (8007bc8 <drawMenuHeader+0x148>)
 8007a96:	881b      	ldrh	r3, [r3, #0]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	f7f9 f9b6 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8007aa4:	4b47      	ldr	r3, [pc, #284]	; (8007bc4 <drawMenuHeader+0x144>)
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	3b03      	subs	r3, #3
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	4b46      	ldr	r3, [pc, #280]	; (8007bc8 <drawMenuHeader+0x148>)
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	3b03      	subs	r3, #3
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	2102      	movs	r1, #2
 8007ab6:	2002      	movs	r0, #2
 8007ab8:	f7f9 f9aa 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8007abc:	230a      	movs	r3, #10
 8007abe:	607b      	str	r3, [r7, #4]
	j  = 10;
 8007ac0:	230a      	movs	r3, #10
 8007ac2:	603b      	str	r3, [r7, #0]
	printFaults(i,j);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f8c4 	bl	8007c54 <printFaults>
	i=275;
 8007acc:	f240 1313 	movw	r3, #275	; 0x113
 8007ad0:	607b      	str	r3, [r7, #4]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	b298      	uxth	r0, r3
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	b299      	uxth	r1, r3
 8007ada:	4b3c      	ldr	r3, [pc, #240]	; (8007bcc <drawMenuHeader+0x14c>)
 8007adc:	4a3c      	ldr	r2, [pc, #240]	; (8007bd0 <drawMenuHeader+0x150>)
 8007ade:	f7f9 fd25 	bl	800152c <LCD_PutStr>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4413      	add	r3, r2
 8007aea:	607b      	str	r3, [r7, #4]
	if(displayAdcValues[Adc.adc0] >3.5){
 8007aec:	4b39      	ldr	r3, [pc, #228]	; (8007bd4 <drawMenuHeader+0x154>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a39      	ldr	r2, [pc, #228]	; (8007bd8 <drawMenuHeader+0x158>)
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	edd3 7a00 	vldr	s15, [r3]
 8007afa:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8007afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b06:	dd4a      	ble.n	8007b9e <drawMenuHeader+0x11e>
		switch(bootButtons.bootMode){
 8007b08:	4b34      	ldr	r3, [pc, #208]	; (8007bdc <drawMenuHeader+0x15c>)
 8007b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0c:	2b05      	cmp	r3, #5
 8007b0e:	d84e      	bhi.n	8007bae <drawMenuHeader+0x12e>
 8007b10:	a201      	add	r2, pc, #4	; (adr r2, 8007b18 <drawMenuHeader+0x98>)
 8007b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b16:	bf00      	nop
 8007b18:	08007b31 	.word	0x08007b31
 8007b1c:	08007b43 	.word	0x08007b43
 8007b20:	08007b55 	.word	0x08007b55
 8007b24:	08007b67 	.word	0x08007b67
 8007b28:	08007b8b 	.word	0x08007b8b
 8007b2c:	08007b79 	.word	0x08007b79
		case UNINITIALIZED:
			LCD_PutStr(i, j, "OFF", fnt7x10);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	b298      	uxth	r0, r3
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	b299      	uxth	r1, r3
 8007b38:	4b24      	ldr	r3, [pc, #144]	; (8007bcc <drawMenuHeader+0x14c>)
 8007b3a:	4a29      	ldr	r2, [pc, #164]	; (8007be0 <drawMenuHeader+0x160>)
 8007b3c:	f7f9 fcf6 	bl	800152c <LCD_PutStr>
			break;
 8007b40:	e035      	b.n	8007bae <drawMenuHeader+0x12e>
		case STANDARD:
			LCD_PutStr(i, j, "OS", fnt7x10);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	b298      	uxth	r0, r3
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	b299      	uxth	r1, r3
 8007b4a:	4b20      	ldr	r3, [pc, #128]	; (8007bcc <drawMenuHeader+0x14c>)
 8007b4c:	4a25      	ldr	r2, [pc, #148]	; (8007be4 <drawMenuHeader+0x164>)
 8007b4e:	f7f9 fced 	bl	800152c <LCD_PutStr>
			break;
 8007b52:	e02c      	b.n	8007bae <drawMenuHeader+0x12e>
		case UEFI:
			LCD_PutStr(i, j, "UEFI", fnt7x10);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	b298      	uxth	r0, r3
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	b299      	uxth	r1, r3
 8007b5c:	4b1b      	ldr	r3, [pc, #108]	; (8007bcc <drawMenuHeader+0x14c>)
 8007b5e:	4a22      	ldr	r2, [pc, #136]	; (8007be8 <drawMenuHeader+0x168>)
 8007b60:	f7f9 fce4 	bl	800152c <LCD_PutStr>
			break;
 8007b64:	e023      	b.n	8007bae <drawMenuHeader+0x12e>
		case EDL:
			LCD_PutStr(i, j, "EDL", fnt7x10);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	b298      	uxth	r0, r3
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	b299      	uxth	r1, r3
 8007b6e:	4b17      	ldr	r3, [pc, #92]	; (8007bcc <drawMenuHeader+0x14c>)
 8007b70:	4a1e      	ldr	r2, [pc, #120]	; (8007bec <drawMenuHeader+0x16c>)
 8007b72:	f7f9 fcdb 	bl	800152c <LCD_PutStr>
			break;
 8007b76:	e01a      	b.n	8007bae <drawMenuHeader+0x12e>
		case MASS_STORAGE:
			LCD_PutStr(i, j, "MASS", fnt7x10);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	b298      	uxth	r0, r3
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	b299      	uxth	r1, r3
 8007b80:	4b12      	ldr	r3, [pc, #72]	; (8007bcc <drawMenuHeader+0x14c>)
 8007b82:	4a1b      	ldr	r2, [pc, #108]	; (8007bf0 <drawMenuHeader+0x170>)
 8007b84:	f7f9 fcd2 	bl	800152c <LCD_PutStr>
			break;
 8007b88:	e011      	b.n	8007bae <drawMenuHeader+0x12e>
		case RECOVERY:
			LCD_PutStr(i, j, "FFU", fnt7x10);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	b298      	uxth	r0, r3
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	b299      	uxth	r1, r3
 8007b92:	4b0e      	ldr	r3, [pc, #56]	; (8007bcc <drawMenuHeader+0x14c>)
 8007b94:	4a17      	ldr	r2, [pc, #92]	; (8007bf4 <drawMenuHeader+0x174>)
 8007b96:	f7f9 fcc9 	bl	800152c <LCD_PutStr>
			break;
 8007b9a:	bf00      	nop
 8007b9c:	e007      	b.n	8007bae <drawMenuHeader+0x12e>
		}
	}
	else{
		LCD_PutStr(i, j, "OFF", fnt7x10);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	b298      	uxth	r0, r3
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	b299      	uxth	r1, r3
 8007ba6:	4b09      	ldr	r3, [pc, #36]	; (8007bcc <drawMenuHeader+0x14c>)
 8007ba8:	4a0d      	ldr	r2, [pc, #52]	; (8007be0 <drawMenuHeader+0x160>)
 8007baa:	f7f9 fcbf 	bl	800152c <LCD_PutStr>
	}

	i  = 135;
 8007bae:	2387      	movs	r3, #135	; 0x87
 8007bb0:	607b      	str	r3, [r7, #4]
	j += 14;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	330e      	adds	r3, #14
 8007bb6:	603b      	str	r3, [r7, #0]


}
 8007bb8:	bf00      	nop
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	20028aa8 	.word	0x20028aa8
 8007bc4:	20028aaa 	.word	0x20028aaa
 8007bc8:	20028aac 	.word	0x20028aac
 8007bcc:	08017eb4 	.word	0x08017eb4
 8007bd0:	080176b0 	.word	0x080176b0
 8007bd4:	20000128 	.word	0x20000128
 8007bd8:	20030f48 	.word	0x20030f48
 8007bdc:	200032ac 	.word	0x200032ac
 8007be0:	080176b8 	.word	0x080176b8
 8007be4:	080176bc 	.word	0x080176bc
 8007be8:	080176c0 	.word	0x080176c0
 8007bec:	080176c8 	.word	0x080176c8
 8007bf0:	080176cc 	.word	0x080176cc
 8007bf4:	080176d4 	.word	0x080176d4

08007bf8 <getLatestADC>:

void getLatestADC(){
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
	int i;
	float * adcValuePointer;
	 if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8007bfe:	4b13      	ldr	r3, [pc, #76]	; (8007c4c <getLatestADC+0x54>)
 8007c00:	781a      	ldrb	r2, [r3, #0]
 8007c02:	4b12      	ldr	r3, [pc, #72]	; (8007c4c <getLatestADC+0x54>)
 8007c04:	785b      	ldrb	r3, [r3, #1]
 8007c06:	4013      	ands	r3, r2
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	4b10      	ldr	r3, [pc, #64]	; (8007c4c <getLatestADC+0x54>)
 8007c0c:	789b      	ldrb	r3, [r3, #2]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d016      	beq.n	8007c44 <getLatestADC+0x4c>
		  adcValuePointer = getADCValues();
 8007c16:	f7fb fed9 	bl	80039cc <getADCValues>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	603b      	str	r3, [r7, #0]
		  for(i=0;i<21;i++){
 8007c1e:	2300      	movs	r3, #0
 8007c20:	607b      	str	r3, [r7, #4]
 8007c22:	e00c      	b.n	8007c3e <getLatestADC+0x46>
	  		  displayAdcValues[i]=*(adcValuePointer+i);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	4908      	ldr	r1, [pc, #32]	; (8007c50 <getLatestADC+0x58>)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	440b      	add	r3, r1
 8007c36:	601a      	str	r2, [r3, #0]
		  for(i=0;i<21;i++){
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	607b      	str	r3, [r7, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b14      	cmp	r3, #20
 8007c42:	ddef      	ble.n	8007c24 <getLatestADC+0x2c>
		  }
	 }
}
 8007c44:	bf00      	nop
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	20029284 	.word	0x20029284
 8007c50:	20030f48 	.word	0x20030f48

08007c54 <printFaults>:
//print only the critical faults. Order is VSYS_PMI, ZION, FAULT3-9
int printFaults(int i, int j){
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
	int x = i;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	60fb      	str	r3, [r7, #12]
	int y = j;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	60bb      	str	r3, [r7, #8]
	x += LCD_PutStr(x, y, "FAULTS:", fnt7x10);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	b298      	uxth	r0, r3
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	b299      	uxth	r1, r3
 8007c6e:	4b67      	ldr	r3, [pc, #412]	; (8007e0c <printFaults+0x1b8>)
 8007c70:	4a67      	ldr	r2, [pc, #412]	; (8007e10 <printFaults+0x1bc>)
 8007c72:	f7f9 fc5b 	bl	800152c <LCD_PutStr>
 8007c76:	4603      	mov	r3, r0
 8007c78:	461a      	mov	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]
	if(errorLED.vsysPMIFault){
 8007c80:	4b64      	ldr	r3, [pc, #400]	; (8007e14 <printFaults+0x1c0>)
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00d      	beq.n	8007ca4 <printFaults+0x50>
		x += LCD_PutStr(x, y, "VSYS", fnt7x10);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	b298      	uxth	r0, r3
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	b299      	uxth	r1, r3
 8007c90:	4b5e      	ldr	r3, [pc, #376]	; (8007e0c <printFaults+0x1b8>)
 8007c92:	4a61      	ldr	r2, [pc, #388]	; (8007e18 <printFaults+0x1c4>)
 8007c94:	f7f9 fc4a 	bl	800152c <LCD_PutStr>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]
 8007ca2:	e0ae      	b.n	8007e02 <printFaults+0x1ae>
	}
	else if(errorLED.zionFault){
 8007ca4:	4b5b      	ldr	r3, [pc, #364]	; (8007e14 <printFaults+0x1c0>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00d      	beq.n	8007cc8 <printFaults+0x74>
		x += LCD_PutStr(x, y, "ZION", fnt7x10);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	b298      	uxth	r0, r3
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	b299      	uxth	r1, r3
 8007cb4:	4b55      	ldr	r3, [pc, #340]	; (8007e0c <printFaults+0x1b8>)
 8007cb6:	4a59      	ldr	r2, [pc, #356]	; (8007e1c <printFaults+0x1c8>)
 8007cb8:	f7f9 fc38 	bl	800152c <LCD_PutStr>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]
 8007cc6:	e09c      	b.n	8007e02 <printFaults+0x1ae>
	}
	else if(errorLED.fault3){
 8007cc8:	4b52      	ldr	r3, [pc, #328]	; (8007e14 <printFaults+0x1c0>)
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00d      	beq.n	8007cec <printFaults+0x98>
		x += LCD_PutStr(x, y, "FAULT3", fnt7x10);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	b298      	uxth	r0, r3
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	b299      	uxth	r1, r3
 8007cd8:	4b4c      	ldr	r3, [pc, #304]	; (8007e0c <printFaults+0x1b8>)
 8007cda:	4a51      	ldr	r2, [pc, #324]	; (8007e20 <printFaults+0x1cc>)
 8007cdc:	f7f9 fc26 	bl	800152c <LCD_PutStr>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	e08a      	b.n	8007e02 <printFaults+0x1ae>
	}
	else if(errorLED.fault4){
 8007cec:	4b49      	ldr	r3, [pc, #292]	; (8007e14 <printFaults+0x1c0>)
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00d      	beq.n	8007d10 <printFaults+0xbc>
		x += LCD_PutStr(x, y, "FAULT4", fnt7x10);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	b298      	uxth	r0, r3
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	b299      	uxth	r1, r3
 8007cfc:	4b43      	ldr	r3, [pc, #268]	; (8007e0c <printFaults+0x1b8>)
 8007cfe:	4a49      	ldr	r2, [pc, #292]	; (8007e24 <printFaults+0x1d0>)
 8007d00:	f7f9 fc14 	bl	800152c <LCD_PutStr>
 8007d04:	4603      	mov	r3, r0
 8007d06:	461a      	mov	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	e078      	b.n	8007e02 <printFaults+0x1ae>
	}
	else if(errorLED.fault5){
 8007d10:	4b40      	ldr	r3, [pc, #256]	; (8007e14 <printFaults+0x1c0>)
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00d      	beq.n	8007d34 <printFaults+0xe0>
		x += LCD_PutStr(x, y, "FAULT5", fnt7x10);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	b298      	uxth	r0, r3
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	b299      	uxth	r1, r3
 8007d20:	4b3a      	ldr	r3, [pc, #232]	; (8007e0c <printFaults+0x1b8>)
 8007d22:	4a41      	ldr	r2, [pc, #260]	; (8007e28 <printFaults+0x1d4>)
 8007d24:	f7f9 fc02 	bl	800152c <LCD_PutStr>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4413      	add	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]
 8007d32:	e066      	b.n	8007e02 <printFaults+0x1ae>
	}
	else if(errorLED.fault6){
 8007d34:	4b37      	ldr	r3, [pc, #220]	; (8007e14 <printFaults+0x1c0>)
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00d      	beq.n	8007d58 <printFaults+0x104>
		x += LCD_PutStr(x, y, "FAULT6", fnt7x10);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	b298      	uxth	r0, r3
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	b299      	uxth	r1, r3
 8007d44:	4b31      	ldr	r3, [pc, #196]	; (8007e0c <printFaults+0x1b8>)
 8007d46:	4a39      	ldr	r2, [pc, #228]	; (8007e2c <printFaults+0x1d8>)
 8007d48:	f7f9 fbf0 	bl	800152c <LCD_PutStr>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	461a      	mov	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4413      	add	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]
 8007d56:	e054      	b.n	8007e02 <printFaults+0x1ae>
	}
	else if(errorLED.fault7){
 8007d58:	4b2e      	ldr	r3, [pc, #184]	; (8007e14 <printFaults+0x1c0>)
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00d      	beq.n	8007d7c <printFaults+0x128>
		x += LCD_PutStr(x, y, "FAULT7", fnt7x10);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	b298      	uxth	r0, r3
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	b299      	uxth	r1, r3
 8007d68:	4b28      	ldr	r3, [pc, #160]	; (8007e0c <printFaults+0x1b8>)
 8007d6a:	4a31      	ldr	r2, [pc, #196]	; (8007e30 <printFaults+0x1dc>)
 8007d6c:	f7f9 fbde 	bl	800152c <LCD_PutStr>
 8007d70:	4603      	mov	r3, r0
 8007d72:	461a      	mov	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4413      	add	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]
 8007d7a:	e042      	b.n	8007e02 <printFaults+0x1ae>
	}
	else if(errorLED.fault8){
 8007d7c:	4b25      	ldr	r3, [pc, #148]	; (8007e14 <printFaults+0x1c0>)
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00d      	beq.n	8007da0 <printFaults+0x14c>
		x += LCD_PutStr(x, y, "FAULT8", fnt7x10);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	b298      	uxth	r0, r3
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	b299      	uxth	r1, r3
 8007d8c:	4b1f      	ldr	r3, [pc, #124]	; (8007e0c <printFaults+0x1b8>)
 8007d8e:	4a29      	ldr	r2, [pc, #164]	; (8007e34 <printFaults+0x1e0>)
 8007d90:	f7f9 fbcc 	bl	800152c <LCD_PutStr>
 8007d94:	4603      	mov	r3, r0
 8007d96:	461a      	mov	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	60fb      	str	r3, [r7, #12]
 8007d9e:	e030      	b.n	8007e02 <printFaults+0x1ae>
	}
	else if(errorLED.fault9){
 8007da0:	4b1c      	ldr	r3, [pc, #112]	; (8007e14 <printFaults+0x1c0>)
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00d      	beq.n	8007dc4 <printFaults+0x170>
		x += LCD_PutStr(x, y, "FAULT9", fnt7x10);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	b298      	uxth	r0, r3
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	b299      	uxth	r1, r3
 8007db0:	4b16      	ldr	r3, [pc, #88]	; (8007e0c <printFaults+0x1b8>)
 8007db2:	4a21      	ldr	r2, [pc, #132]	; (8007e38 <printFaults+0x1e4>)
 8007db4:	f7f9 fbba 	bl	800152c <LCD_PutStr>
 8007db8:	4603      	mov	r3, r0
 8007dba:	461a      	mov	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	e01e      	b.n	8007e02 <printFaults+0x1ae>
	}
	else if(errorLED.ledDriver){
 8007dc4:	4b13      	ldr	r3, [pc, #76]	; (8007e14 <printFaults+0x1c0>)
 8007dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00d      	beq.n	8007de8 <printFaults+0x194>
		x += LCD_PutStr(x, y, "LED DVR", fnt7x10);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	b298      	uxth	r0, r3
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	b299      	uxth	r1, r3
 8007dd4:	4b0d      	ldr	r3, [pc, #52]	; (8007e0c <printFaults+0x1b8>)
 8007dd6:	4a19      	ldr	r2, [pc, #100]	; (8007e3c <printFaults+0x1e8>)
 8007dd8:	f7f9 fba8 	bl	800152c <LCD_PutStr>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	461a      	mov	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4413      	add	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]
 8007de6:	e00c      	b.n	8007e02 <printFaults+0x1ae>
	}
	else{
		x += LCD_PutStr(x, y, "NONE!", fnt7x10);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	b298      	uxth	r0, r3
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	b299      	uxth	r1, r3
 8007df0:	4b06      	ldr	r3, [pc, #24]	; (8007e0c <printFaults+0x1b8>)
 8007df2:	4a13      	ldr	r2, [pc, #76]	; (8007e40 <printFaults+0x1ec>)
 8007df4:	f7f9 fb9a 	bl	800152c <LCD_PutStr>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4413      	add	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]
	}
	return x;
 8007e02:	68fb      	ldr	r3, [r7, #12]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	08017eb4 	.word	0x08017eb4
 8007e10:	08017750 	.word	0x08017750
 8007e14:	200032d8 	.word	0x200032d8
 8007e18:	08017d2c 	.word	0x08017d2c
 8007e1c:	08017d34 	.word	0x08017d34
 8007e20:	080176f0 	.word	0x080176f0
 8007e24:	080176f8 	.word	0x080176f8
 8007e28:	08017700 	.word	0x08017700
 8007e2c:	08017708 	.word	0x08017708
 8007e30:	08017710 	.word	0x08017710
 8007e34:	08017718 	.word	0x08017718
 8007e38:	08017720 	.word	0x08017720
 8007e3c:	08017d3c 	.word	0x08017d3c
 8007e40:	08017d44 	.word	0x08017d44

08007e44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007e4a:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <HAL_MspInit+0x4c>)
 8007e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4e:	4a10      	ldr	r2, [pc, #64]	; (8007e90 <HAL_MspInit+0x4c>)
 8007e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e54:	6413      	str	r3, [r2, #64]	; 0x40
 8007e56:	4b0e      	ldr	r3, [pc, #56]	; (8007e90 <HAL_MspInit+0x4c>)
 8007e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e5e:	607b      	str	r3, [r7, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e62:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <HAL_MspInit+0x4c>)
 8007e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e66:	4a0a      	ldr	r2, [pc, #40]	; (8007e90 <HAL_MspInit+0x4c>)
 8007e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8007e6e:	4b08      	ldr	r3, [pc, #32]	; (8007e90 <HAL_MspInit+0x4c>)
 8007e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e76:	603b      	str	r3, [r7, #0]
 8007e78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	210f      	movs	r1, #15
 8007e7e:	f06f 0001 	mvn.w	r0, #1
 8007e82:	f002 fa2d 	bl	800a2e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	40023800 	.word	0x40023800

08007e94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b094      	sub	sp, #80	; 0x50
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	605a      	str	r2, [r3, #4]
 8007ea6:	609a      	str	r2, [r3, #8]
 8007ea8:	60da      	str	r2, [r3, #12]
 8007eaa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a91      	ldr	r2, [pc, #580]	; (80080f8 <HAL_ADC_MspInit+0x264>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	f040 808c 	bne.w	8007fd0 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007eb8:	4b90      	ldr	r3, [pc, #576]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8007eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ebc:	4a8f      	ldr	r2, [pc, #572]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8007ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ec2:	6453      	str	r3, [r2, #68]	; 0x44
 8007ec4:	4b8d      	ldr	r3, [pc, #564]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8007ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ecc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ed0:	4b8a      	ldr	r3, [pc, #552]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8007ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed4:	4a89      	ldr	r2, [pc, #548]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8007ed6:	f043 0304 	orr.w	r3, r3, #4
 8007eda:	6313      	str	r3, [r2, #48]	; 0x30
 8007edc:	4b87      	ldr	r3, [pc, #540]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8007ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ee8:	4b84      	ldr	r3, [pc, #528]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8007eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eec:	4a83      	ldr	r2, [pc, #524]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8007eee:	f043 0301 	orr.w	r3, r3, #1
 8007ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8007ef4:	4b81      	ldr	r3, [pc, #516]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8007ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	633b      	str	r3, [r7, #48]	; 0x30
 8007efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f00:	4b7e      	ldr	r3, [pc, #504]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8007f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f04:	4a7d      	ldr	r2, [pc, #500]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8007f06:	f043 0302 	orr.w	r3, r3, #2
 8007f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8007f0c:	4b7b      	ldr	r3, [pc, #492]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8007f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f10:	f003 0302 	and.w	r3, r3, #2
 8007f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8007f18:	230f      	movs	r3, #15
 8007f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f20:	2300      	movs	r3, #0
 8007f22:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4875      	ldr	r0, [pc, #468]	; (8008100 <HAL_ADC_MspInit+0x26c>)
 8007f2c:	f002 fe0a 	bl	800ab44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC6_Pin|ADC5_Pin|ADC3_Pin
 8007f30:	23f8      	movs	r3, #248	; 0xf8
 8007f32:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007f34:	2303      	movs	r3, #3
 8007f36:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007f40:	4619      	mov	r1, r3
 8007f42:	4870      	ldr	r0, [pc, #448]	; (8008104 <HAL_ADC_MspInit+0x270>)
 8007f44:	f002 fdfe 	bl	800ab44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC9_Pin|ADC8_Pin;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f50:	2300      	movs	r3, #0
 8007f52:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007f58:	4619      	mov	r1, r3
 8007f5a:	486b      	ldr	r0, [pc, #428]	; (8008108 <HAL_ADC_MspInit+0x274>)
 8007f5c:	f002 fdf2 	bl	800ab44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8007f60:	4b6a      	ldr	r3, [pc, #424]	; (800810c <HAL_ADC_MspInit+0x278>)
 8007f62:	4a6b      	ldr	r2, [pc, #428]	; (8008110 <HAL_ADC_MspInit+0x27c>)
 8007f64:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007f66:	4b69      	ldr	r3, [pc, #420]	; (800810c <HAL_ADC_MspInit+0x278>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007f6c:	4b67      	ldr	r3, [pc, #412]	; (800810c <HAL_ADC_MspInit+0x278>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f72:	4b66      	ldr	r3, [pc, #408]	; (800810c <HAL_ADC_MspInit+0x278>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007f78:	4b64      	ldr	r3, [pc, #400]	; (800810c <HAL_ADC_MspInit+0x278>)
 8007f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f7e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007f80:	4b62      	ldr	r3, [pc, #392]	; (800810c <HAL_ADC_MspInit+0x278>)
 8007f82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007f86:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007f88:	4b60      	ldr	r3, [pc, #384]	; (800810c <HAL_ADC_MspInit+0x278>)
 8007f8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007f8e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8007f90:	4b5e      	ldr	r3, [pc, #376]	; (800810c <HAL_ADC_MspInit+0x278>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007f96:	4b5d      	ldr	r3, [pc, #372]	; (800810c <HAL_ADC_MspInit+0x278>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007f9c:	4b5b      	ldr	r3, [pc, #364]	; (800810c <HAL_ADC_MspInit+0x278>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007fa2:	485a      	ldr	r0, [pc, #360]	; (800810c <HAL_ADC_MspInit+0x278>)
 8007fa4:	f002 f9c6 	bl	800a334 <HAL_DMA_Init>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 8007fae:	f7fd f827 	bl	8005000 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a55      	ldr	r2, [pc, #340]	; (800810c <HAL_ADC_MspInit+0x278>)
 8007fb6:	639a      	str	r2, [r3, #56]	; 0x38
 8007fb8:	4a54      	ldr	r2, [pc, #336]	; (800810c <HAL_ADC_MspInit+0x278>)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2105      	movs	r1, #5
 8007fc2:	2012      	movs	r0, #18
 8007fc4:	f002 f98c 	bl	800a2e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007fc8:	2012      	movs	r0, #18
 8007fca:	f002 f9a5 	bl	800a318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8007fce:	e13a      	b.n	8008246 <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a4f      	ldr	r2, [pc, #316]	; (8008114 <HAL_ADC_MspInit+0x280>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	f040 80a2 	bne.w	8008120 <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007fdc:	4b47      	ldr	r3, [pc, #284]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8007fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe0:	4a46      	ldr	r2, [pc, #280]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8007fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007fe6:	6453      	str	r3, [r2, #68]	; 0x44
 8007fe8:	4b44      	ldr	r3, [pc, #272]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8007fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ff4:	4b41      	ldr	r3, [pc, #260]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8007ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff8:	4a40      	ldr	r2, [pc, #256]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8007ffa:	f043 0304 	orr.w	r3, r3, #4
 8007ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8008000:	4b3e      	ldr	r3, [pc, #248]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8008002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	627b      	str	r3, [r7, #36]	; 0x24
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800800c:	4b3b      	ldr	r3, [pc, #236]	; (80080fc <HAL_ADC_MspInit+0x268>)
 800800e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008010:	4a3a      	ldr	r2, [pc, #232]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8008012:	f043 0301 	orr.w	r3, r3, #1
 8008016:	6313      	str	r3, [r2, #48]	; 0x30
 8008018:	4b38      	ldr	r3, [pc, #224]	; (80080fc <HAL_ADC_MspInit+0x268>)
 800801a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	623b      	str	r3, [r7, #32]
 8008022:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008024:	4b35      	ldr	r3, [pc, #212]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8008026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008028:	4a34      	ldr	r2, [pc, #208]	; (80080fc <HAL_ADC_MspInit+0x268>)
 800802a:	f043 0302 	orr.w	r3, r3, #2
 800802e:	6313      	str	r3, [r2, #48]	; 0x30
 8008030:	4b32      	ldr	r3, [pc, #200]	; (80080fc <HAL_ADC_MspInit+0x268>)
 8008032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	61fb      	str	r3, [r7, #28]
 800803a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin
 800803c:	233f      	movs	r3, #63	; 0x3f
 800803e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008040:	2303      	movs	r3, #3
 8008042:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008044:	2300      	movs	r3, #0
 8008046:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008048:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800804c:	4619      	mov	r1, r3
 800804e:	482c      	ldr	r0, [pc, #176]	; (8008100 <HAL_ADC_MspInit+0x26c>)
 8008050:	f002 fd78 	bl	800ab44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin|ADC4_Pin|ADC6_Pin
 8008054:	237b      	movs	r3, #123	; 0x7b
 8008056:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008058:	2303      	movs	r3, #3
 800805a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800805c:	2300      	movs	r3, #0
 800805e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008060:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008064:	4619      	mov	r1, r3
 8008066:	4827      	ldr	r0, [pc, #156]	; (8008104 <HAL_ADC_MspInit+0x270>)
 8008068:	f002 fd6c 	bl	800ab44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC9_Pin;
 800806c:	2302      	movs	r3, #2
 800806e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008070:	2303      	movs	r3, #3
 8008072:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008074:	2300      	movs	r3, #0
 8008076:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ADC9_GPIO_Port, &GPIO_InitStruct);
 8008078:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800807c:	4619      	mov	r1, r3
 800807e:	4822      	ldr	r0, [pc, #136]	; (8008108 <HAL_ADC_MspInit+0x274>)
 8008080:	f002 fd60 	bl	800ab44 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8008084:	4b24      	ldr	r3, [pc, #144]	; (8008118 <HAL_ADC_MspInit+0x284>)
 8008086:	4a25      	ldr	r2, [pc, #148]	; (800811c <HAL_ADC_MspInit+0x288>)
 8008088:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800808a:	4b23      	ldr	r3, [pc, #140]	; (8008118 <HAL_ADC_MspInit+0x284>)
 800808c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008090:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008092:	4b21      	ldr	r3, [pc, #132]	; (8008118 <HAL_ADC_MspInit+0x284>)
 8008094:	2200      	movs	r2, #0
 8008096:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8008098:	4b1f      	ldr	r3, [pc, #124]	; (8008118 <HAL_ADC_MspInit+0x284>)
 800809a:	2200      	movs	r2, #0
 800809c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800809e:	4b1e      	ldr	r3, [pc, #120]	; (8008118 <HAL_ADC_MspInit+0x284>)
 80080a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080a4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80080a6:	4b1c      	ldr	r3, [pc, #112]	; (8008118 <HAL_ADC_MspInit+0x284>)
 80080a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80080ac:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80080ae:	4b1a      	ldr	r3, [pc, #104]	; (8008118 <HAL_ADC_MspInit+0x284>)
 80080b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80080b4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80080b6:	4b18      	ldr	r3, [pc, #96]	; (8008118 <HAL_ADC_MspInit+0x284>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80080bc:	4b16      	ldr	r3, [pc, #88]	; (8008118 <HAL_ADC_MspInit+0x284>)
 80080be:	2200      	movs	r2, #0
 80080c0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80080c2:	4b15      	ldr	r3, [pc, #84]	; (8008118 <HAL_ADC_MspInit+0x284>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80080c8:	4813      	ldr	r0, [pc, #76]	; (8008118 <HAL_ADC_MspInit+0x284>)
 80080ca:	f002 f933 	bl	800a334 <HAL_DMA_Init>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <HAL_ADC_MspInit+0x244>
      Error_Handler();
 80080d4:	f7fc ff94 	bl	8005000 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a0f      	ldr	r2, [pc, #60]	; (8008118 <HAL_ADC_MspInit+0x284>)
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38
 80080de:	4a0e      	ldr	r2, [pc, #56]	; (8008118 <HAL_ADC_MspInit+0x284>)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80080e4:	2200      	movs	r2, #0
 80080e6:	2105      	movs	r1, #5
 80080e8:	2012      	movs	r0, #18
 80080ea:	f002 f8f9 	bl	800a2e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80080ee:	2012      	movs	r0, #18
 80080f0:	f002 f912 	bl	800a318 <HAL_NVIC_EnableIRQ>
}
 80080f4:	e0a7      	b.n	8008246 <HAL_ADC_MspInit+0x3b2>
 80080f6:	bf00      	nop
 80080f8:	40012000 	.word	0x40012000
 80080fc:	40023800 	.word	0x40023800
 8008100:	40020800 	.word	0x40020800
 8008104:	40020000 	.word	0x40020000
 8008108:	40020400 	.word	0x40020400
 800810c:	2002bf38 	.word	0x2002bf38
 8008110:	40026410 	.word	0x40026410
 8008114:	40012100 	.word	0x40012100
 8008118:	20030e80 	.word	0x20030e80
 800811c:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a4a      	ldr	r2, [pc, #296]	; (8008250 <HAL_ADC_MspInit+0x3bc>)
 8008126:	4293      	cmp	r3, r2
 8008128:	f040 808d 	bne.w	8008246 <HAL_ADC_MspInit+0x3b2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800812c:	4b49      	ldr	r3, [pc, #292]	; (8008254 <HAL_ADC_MspInit+0x3c0>)
 800812e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008130:	4a48      	ldr	r2, [pc, #288]	; (8008254 <HAL_ADC_MspInit+0x3c0>)
 8008132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008136:	6453      	str	r3, [r2, #68]	; 0x44
 8008138:	4b46      	ldr	r3, [pc, #280]	; (8008254 <HAL_ADC_MspInit+0x3c0>)
 800813a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800813c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008140:	61bb      	str	r3, [r7, #24]
 8008142:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008144:	4b43      	ldr	r3, [pc, #268]	; (8008254 <HAL_ADC_MspInit+0x3c0>)
 8008146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008148:	4a42      	ldr	r2, [pc, #264]	; (8008254 <HAL_ADC_MspInit+0x3c0>)
 800814a:	f043 0320 	orr.w	r3, r3, #32
 800814e:	6313      	str	r3, [r2, #48]	; 0x30
 8008150:	4b40      	ldr	r3, [pc, #256]	; (8008254 <HAL_ADC_MspInit+0x3c0>)
 8008152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008154:	f003 0320 	and.w	r3, r3, #32
 8008158:	617b      	str	r3, [r7, #20]
 800815a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800815c:	4b3d      	ldr	r3, [pc, #244]	; (8008254 <HAL_ADC_MspInit+0x3c0>)
 800815e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008160:	4a3c      	ldr	r2, [pc, #240]	; (8008254 <HAL_ADC_MspInit+0x3c0>)
 8008162:	f043 0304 	orr.w	r3, r3, #4
 8008166:	6313      	str	r3, [r2, #48]	; 0x30
 8008168:	4b3a      	ldr	r3, [pc, #232]	; (8008254 <HAL_ADC_MspInit+0x3c0>)
 800816a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816c:	f003 0304 	and.w	r3, r3, #4
 8008170:	613b      	str	r3, [r7, #16]
 8008172:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008174:	4b37      	ldr	r3, [pc, #220]	; (8008254 <HAL_ADC_MspInit+0x3c0>)
 8008176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008178:	4a36      	ldr	r2, [pc, #216]	; (8008254 <HAL_ADC_MspInit+0x3c0>)
 800817a:	f043 0301 	orr.w	r3, r3, #1
 800817e:	6313      	str	r3, [r2, #48]	; 0x30
 8008180:	4b34      	ldr	r3, [pc, #208]	; (8008254 <HAL_ADC_MspInit+0x3c0>)
 8008182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	60fb      	str	r3, [r7, #12]
 800818a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC15_Pin|ADC14_Pin|PP_SPARE_I2C_ADC_Pin|ZION_SENSE_Pin
 800818c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8008190:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008192:	2303      	movs	r3, #3
 8008194:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008196:	2300      	movs	r3, #0
 8008198:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800819a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800819e:	4619      	mov	r1, r3
 80081a0:	482d      	ldr	r0, [pc, #180]	; (8008258 <HAL_ADC_MspInit+0x3c4>)
 80081a2:	f002 fccf 	bl	800ab44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 80081a6:	230f      	movs	r3, #15
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80081aa:	2303      	movs	r3, #3
 80081ac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80081b6:	4619      	mov	r1, r3
 80081b8:	4828      	ldr	r0, [pc, #160]	; (800825c <HAL_ADC_MspInit+0x3c8>)
 80081ba:	f002 fcc3 	bl	800ab44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 80081be:	230c      	movs	r3, #12
 80081c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80081c2:	2303      	movs	r3, #3
 80081c4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081c6:	2300      	movs	r3, #0
 80081c8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80081ce:	4619      	mov	r1, r3
 80081d0:	4823      	ldr	r0, [pc, #140]	; (8008260 <HAL_ADC_MspInit+0x3cc>)
 80081d2:	f002 fcb7 	bl	800ab44 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80081d6:	4b23      	ldr	r3, [pc, #140]	; (8008264 <HAL_ADC_MspInit+0x3d0>)
 80081d8:	4a23      	ldr	r2, [pc, #140]	; (8008268 <HAL_ADC_MspInit+0x3d4>)
 80081da:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80081dc:	4b21      	ldr	r3, [pc, #132]	; (8008264 <HAL_ADC_MspInit+0x3d0>)
 80081de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80081e2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80081e4:	4b1f      	ldr	r3, [pc, #124]	; (8008264 <HAL_ADC_MspInit+0x3d0>)
 80081e6:	2200      	movs	r2, #0
 80081e8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80081ea:	4b1e      	ldr	r3, [pc, #120]	; (8008264 <HAL_ADC_MspInit+0x3d0>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80081f0:	4b1c      	ldr	r3, [pc, #112]	; (8008264 <HAL_ADC_MspInit+0x3d0>)
 80081f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081f6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80081f8:	4b1a      	ldr	r3, [pc, #104]	; (8008264 <HAL_ADC_MspInit+0x3d0>)
 80081fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80081fe:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008200:	4b18      	ldr	r3, [pc, #96]	; (8008264 <HAL_ADC_MspInit+0x3d0>)
 8008202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008206:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8008208:	4b16      	ldr	r3, [pc, #88]	; (8008264 <HAL_ADC_MspInit+0x3d0>)
 800820a:	2200      	movs	r2, #0
 800820c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800820e:	4b15      	ldr	r3, [pc, #84]	; (8008264 <HAL_ADC_MspInit+0x3d0>)
 8008210:	2200      	movs	r2, #0
 8008212:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008214:	4b13      	ldr	r3, [pc, #76]	; (8008264 <HAL_ADC_MspInit+0x3d0>)
 8008216:	2200      	movs	r2, #0
 8008218:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800821a:	4812      	ldr	r0, [pc, #72]	; (8008264 <HAL_ADC_MspInit+0x3d0>)
 800821c:	f002 f88a 	bl	800a334 <HAL_DMA_Init>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <HAL_ADC_MspInit+0x396>
      Error_Handler();
 8008226:	f7fc feeb 	bl	8005000 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a0d      	ldr	r2, [pc, #52]	; (8008264 <HAL_ADC_MspInit+0x3d0>)
 800822e:	639a      	str	r2, [r3, #56]	; 0x38
 8008230:	4a0c      	ldr	r2, [pc, #48]	; (8008264 <HAL_ADC_MspInit+0x3d0>)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8008236:	2200      	movs	r2, #0
 8008238:	2105      	movs	r1, #5
 800823a:	2012      	movs	r0, #18
 800823c:	f002 f850 	bl	800a2e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8008240:	2012      	movs	r0, #18
 8008242:	f002 f869 	bl	800a318 <HAL_NVIC_EnableIRQ>
}
 8008246:	bf00      	nop
 8008248:	3750      	adds	r7, #80	; 0x50
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	40012200 	.word	0x40012200
 8008254:	40023800 	.word	0x40023800
 8008258:	40021400 	.word	0x40021400
 800825c:	40020800 	.word	0x40020800
 8008260:	40020000 	.word	0x40020000
 8008264:	20029224 	.word	0x20029224
 8008268:	40026428 	.word	0x40026428

0800826c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b090      	sub	sp, #64	; 0x40
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008274:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	605a      	str	r2, [r3, #4]
 800827e:	609a      	str	r2, [r3, #8]
 8008280:	60da      	str	r2, [r3, #12]
 8008282:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a6c      	ldr	r2, [pc, #432]	; (800843c <HAL_I2C_MspInit+0x1d0>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d129      	bne.n	80082e2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800828e:	4b6c      	ldr	r3, [pc, #432]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 8008290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008292:	4a6b      	ldr	r2, [pc, #428]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 8008294:	f043 0302 	orr.w	r3, r3, #2
 8008298:	6313      	str	r3, [r2, #48]	; 0x30
 800829a:	4b69      	ldr	r3, [pc, #420]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 800829c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LED_I2C_SCL_Pin|LED_I2C_SDA_Pin;
 80082a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80082aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80082ac:	2312      	movs	r3, #18
 80082ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80082b0:	2301      	movs	r3, #1
 80082b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082b4:	2303      	movs	r3, #3
 80082b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80082b8:	2304      	movs	r3, #4
 80082ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082c0:	4619      	mov	r1, r3
 80082c2:	4860      	ldr	r0, [pc, #384]	; (8008444 <HAL_I2C_MspInit+0x1d8>)
 80082c4:	f002 fc3e 	bl	800ab44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80082c8:	4b5d      	ldr	r3, [pc, #372]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 80082ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082cc:	4a5c      	ldr	r2, [pc, #368]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 80082ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082d2:	6413      	str	r3, [r2, #64]	; 0x40
 80082d4:	4b5a      	ldr	r3, [pc, #360]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 80082d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80082e0:	e0a7      	b.n	8008432 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a58      	ldr	r2, [pc, #352]	; (8008448 <HAL_I2C_MspInit+0x1dc>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d128      	bne.n	800833e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80082ec:	4b54      	ldr	r3, [pc, #336]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 80082ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f0:	4a53      	ldr	r2, [pc, #332]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 80082f2:	f043 0320 	orr.w	r3, r3, #32
 80082f6:	6313      	str	r3, [r2, #48]	; 0x30
 80082f8:	4b51      	ldr	r3, [pc, #324]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 80082fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fc:	f003 0320 	and.w	r3, r3, #32
 8008300:	623b      	str	r3, [r7, #32]
 8008302:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SPARE_I2C_SDA_3V3_Pin|SPARE_I2C_SCL_3V3_Pin;
 8008304:	2303      	movs	r3, #3
 8008306:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008308:	2312      	movs	r3, #18
 800830a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800830c:	2301      	movs	r3, #1
 800830e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008310:	2303      	movs	r3, #3
 8008312:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008314:	2304      	movs	r3, #4
 8008316:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800831c:	4619      	mov	r1, r3
 800831e:	484b      	ldr	r0, [pc, #300]	; (800844c <HAL_I2C_MspInit+0x1e0>)
 8008320:	f002 fc10 	bl	800ab44 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008324:	4b46      	ldr	r3, [pc, #280]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 8008326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008328:	4a45      	ldr	r2, [pc, #276]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 800832a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800832e:	6413      	str	r3, [r2, #64]	; 0x40
 8008330:	4b43      	ldr	r3, [pc, #268]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 8008332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008338:	61fb      	str	r3, [r7, #28]
 800833a:	69fb      	ldr	r3, [r7, #28]
}
 800833c:	e079      	b.n	8008432 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a43      	ldr	r2, [pc, #268]	; (8008450 <HAL_I2C_MspInit+0x1e4>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d146      	bne.n	80083d6 <HAL_I2C_MspInit+0x16a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008348:	4b3d      	ldr	r3, [pc, #244]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 800834a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800834c:	4a3c      	ldr	r2, [pc, #240]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 800834e:	f043 0304 	orr.w	r3, r3, #4
 8008352:	6313      	str	r3, [r2, #48]	; 0x30
 8008354:	4b3a      	ldr	r3, [pc, #232]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 8008356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008358:	f003 0304 	and.w	r3, r3, #4
 800835c:	61bb      	str	r3, [r7, #24]
 800835e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008360:	4b37      	ldr	r3, [pc, #220]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 8008362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008364:	4a36      	ldr	r2, [pc, #216]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 8008366:	f043 0301 	orr.w	r3, r3, #1
 800836a:	6313      	str	r3, [r2, #48]	; 0x30
 800836c:	4b34      	ldr	r3, [pc, #208]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 800836e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008370:	f003 0301 	and.w	r3, r3, #1
 8008374:	617b      	str	r3, [r7, #20]
 8008376:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SOC_I2C_SDA_3V3_Pin;
 8008378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800837c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800837e:	2312      	movs	r3, #18
 8008380:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008382:	2301      	movs	r3, #1
 8008384:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008386:	2303      	movs	r3, #3
 8008388:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800838a:	2304      	movs	r3, #4
 800838c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SDA_3V3_GPIO_Port, &GPIO_InitStruct);
 800838e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008392:	4619      	mov	r1, r3
 8008394:	482f      	ldr	r0, [pc, #188]	; (8008454 <HAL_I2C_MspInit+0x1e8>)
 8008396:	f002 fbd5 	bl	800ab44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_I2C_SCL_3V3_Pin;
 800839a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800839e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083a0:	2312      	movs	r3, #18
 80083a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80083a4:	2301      	movs	r3, #1
 80083a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083a8:	2303      	movs	r3, #3
 80083aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80083ac:	2304      	movs	r3, #4
 80083ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SCL_3V3_GPIO_Port, &GPIO_InitStruct);
 80083b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80083b4:	4619      	mov	r1, r3
 80083b6:	4828      	ldr	r0, [pc, #160]	; (8008458 <HAL_I2C_MspInit+0x1ec>)
 80083b8:	f002 fbc4 	bl	800ab44 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80083bc:	4b20      	ldr	r3, [pc, #128]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 80083be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c0:	4a1f      	ldr	r2, [pc, #124]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 80083c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80083c6:	6413      	str	r3, [r2, #64]	; 0x40
 80083c8:	4b1d      	ldr	r3, [pc, #116]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 80083ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083d0:	613b      	str	r3, [r7, #16]
 80083d2:	693b      	ldr	r3, [r7, #16]
}
 80083d4:	e02d      	b.n	8008432 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C4)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a20      	ldr	r2, [pc, #128]	; (800845c <HAL_I2C_MspInit+0x1f0>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d128      	bne.n	8008432 <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80083e0:	4b17      	ldr	r3, [pc, #92]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 80083e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e4:	4a16      	ldr	r2, [pc, #88]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 80083e6:	f043 0320 	orr.w	r3, r3, #32
 80083ea:	6313      	str	r3, [r2, #48]	; 0x30
 80083ec:	4b14      	ldr	r3, [pc, #80]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 80083ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f0:	f003 0320 	and.w	r3, r3, #32
 80083f4:	60fb      	str	r3, [r7, #12]
 80083f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_ZION_I2C_SDA_Pin|STM_ZION_I2C_SCL_Pin;
 80083f8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80083fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083fe:	2312      	movs	r3, #18
 8008400:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008402:	2301      	movs	r3, #1
 8008404:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008406:	2303      	movs	r3, #3
 8008408:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800840a:	2304      	movs	r3, #4
 800840c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800840e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008412:	4619      	mov	r1, r3
 8008414:	480d      	ldr	r0, [pc, #52]	; (800844c <HAL_I2C_MspInit+0x1e0>)
 8008416:	f002 fb95 	bl	800ab44 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800841a:	4b09      	ldr	r3, [pc, #36]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 800841c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841e:	4a08      	ldr	r2, [pc, #32]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 8008420:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008424:	6413      	str	r3, [r2, #64]	; 0x40
 8008426:	4b06      	ldr	r3, [pc, #24]	; (8008440 <HAL_I2C_MspInit+0x1d4>)
 8008428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800842e:	60bb      	str	r3, [r7, #8]
 8008430:	68bb      	ldr	r3, [r7, #8]
}
 8008432:	bf00      	nop
 8008434:	3740      	adds	r7, #64	; 0x40
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	40005400 	.word	0x40005400
 8008440:	40023800 	.word	0x40023800
 8008444:	40020400 	.word	0x40020400
 8008448:	40005800 	.word	0x40005800
 800844c:	40021400 	.word	0x40021400
 8008450:	40005c00 	.word	0x40005c00
 8008454:	40020800 	.word	0x40020800
 8008458:	40020000 	.word	0x40020000
 800845c:	40006000 	.word	0x40006000

08008460 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a07      	ldr	r2, [pc, #28]	; (800848c <HAL_RTC_MspInit+0x2c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d105      	bne.n	800847e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008472:	4b07      	ldr	r3, [pc, #28]	; (8008490 <HAL_RTC_MspInit+0x30>)
 8008474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008476:	4a06      	ldr	r2, [pc, #24]	; (8008490 <HAL_RTC_MspInit+0x30>)
 8008478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800847c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800847e:	bf00      	nop
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	40002800 	.word	0x40002800
 8008490:	40023800 	.word	0x40023800

08008494 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08c      	sub	sp, #48	; 0x30
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800849c:	f107 031c 	add.w	r3, r7, #28
 80084a0:	2200      	movs	r2, #0
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	605a      	str	r2, [r3, #4]
 80084a6:	609a      	str	r2, [r3, #8]
 80084a8:	60da      	str	r2, [r3, #12]
 80084aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a40      	ldr	r2, [pc, #256]	; (80085b4 <HAL_SPI_MspInit+0x120>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d130      	bne.n	8008518 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80084b6:	4b40      	ldr	r3, [pc, #256]	; (80085b8 <HAL_SPI_MspInit+0x124>)
 80084b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ba:	4a3f      	ldr	r2, [pc, #252]	; (80085b8 <HAL_SPI_MspInit+0x124>)
 80084bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80084c0:	6453      	str	r3, [r2, #68]	; 0x44
 80084c2:	4b3d      	ldr	r3, [pc, #244]	; (80085b8 <HAL_SPI_MspInit+0x124>)
 80084c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084ca:	61bb      	str	r3, [r7, #24]
 80084cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80084ce:	4b3a      	ldr	r3, [pc, #232]	; (80085b8 <HAL_SPI_MspInit+0x124>)
 80084d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d2:	4a39      	ldr	r2, [pc, #228]	; (80085b8 <HAL_SPI_MspInit+0x124>)
 80084d4:	f043 0310 	orr.w	r3, r3, #16
 80084d8:	6313      	str	r3, [r2, #48]	; 0x30
 80084da:	4b37      	ldr	r3, [pc, #220]	; (80085b8 <HAL_SPI_MspInit+0x124>)
 80084dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084de:	f003 0310 	and.w	r3, r3, #16
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 80084e6:	2364      	movs	r3, #100	; 0x64
 80084e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ea:	2302      	movs	r3, #2
 80084ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ee:	2300      	movs	r3, #0
 80084f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084f2:	2303      	movs	r3, #3
 80084f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80084f6:	2305      	movs	r3, #5
 80084f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80084fa:	f107 031c 	add.w	r3, r7, #28
 80084fe:	4619      	mov	r1, r3
 8008500:	482e      	ldr	r0, [pc, #184]	; (80085bc <HAL_SPI_MspInit+0x128>)
 8008502:	f002 fb1f 	bl	800ab44 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8008506:	2200      	movs	r2, #0
 8008508:	2105      	movs	r1, #5
 800850a:	2054      	movs	r0, #84	; 0x54
 800850c:	f001 fee8 	bl	800a2e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8008510:	2054      	movs	r0, #84	; 0x54
 8008512:	f001 ff01 	bl	800a318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8008516:	e049      	b.n	80085ac <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI5)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a28      	ldr	r2, [pc, #160]	; (80085c0 <HAL_SPI_MspInit+0x12c>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d144      	bne.n	80085ac <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8008522:	4b25      	ldr	r3, [pc, #148]	; (80085b8 <HAL_SPI_MspInit+0x124>)
 8008524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008526:	4a24      	ldr	r2, [pc, #144]	; (80085b8 <HAL_SPI_MspInit+0x124>)
 8008528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800852c:	6453      	str	r3, [r2, #68]	; 0x44
 800852e:	4b22      	ldr	r3, [pc, #136]	; (80085b8 <HAL_SPI_MspInit+0x124>)
 8008530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008536:	613b      	str	r3, [r7, #16]
 8008538:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800853a:	4b1f      	ldr	r3, [pc, #124]	; (80085b8 <HAL_SPI_MspInit+0x124>)
 800853c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853e:	4a1e      	ldr	r2, [pc, #120]	; (80085b8 <HAL_SPI_MspInit+0x124>)
 8008540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008544:	6313      	str	r3, [r2, #48]	; 0x30
 8008546:	4b1c      	ldr	r3, [pc, #112]	; (80085b8 <HAL_SPI_MspInit+0x124>)
 8008548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008552:	4b19      	ldr	r3, [pc, #100]	; (80085b8 <HAL_SPI_MspInit+0x124>)
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008556:	4a18      	ldr	r2, [pc, #96]	; (80085b8 <HAL_SPI_MspInit+0x124>)
 8008558:	f043 0320 	orr.w	r3, r3, #32
 800855c:	6313      	str	r3, [r2, #48]	; 0x30
 800855e:	4b16      	ldr	r3, [pc, #88]	; (80085b8 <HAL_SPI_MspInit+0x124>)
 8008560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008562:	f003 0320 	and.w	r3, r3, #32
 8008566:	60bb      	str	r3, [r7, #8]
 8008568:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPARE_SS_L_3V3_Pin|SPARE_MISO_3V3_Pin|SPARE_SCLK_3V3_Pin;
 800856a:	23e0      	movs	r3, #224	; 0xe0
 800856c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800856e:	2302      	movs	r3, #2
 8008570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008572:	2300      	movs	r3, #0
 8008574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008576:	2303      	movs	r3, #3
 8008578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800857a:	2305      	movs	r3, #5
 800857c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800857e:	f107 031c 	add.w	r3, r7, #28
 8008582:	4619      	mov	r1, r3
 8008584:	480f      	ldr	r0, [pc, #60]	; (80085c4 <HAL_SPI_MspInit+0x130>)
 8008586:	f002 fadd 	bl	800ab44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPARE_MOSI_3V3_Pin;
 800858a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800858e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008590:	2302      	movs	r3, #2
 8008592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008594:	2300      	movs	r3, #0
 8008596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008598:	2303      	movs	r3, #3
 800859a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800859c:	2305      	movs	r3, #5
 800859e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPARE_MOSI_3V3_GPIO_Port, &GPIO_InitStruct);
 80085a0:	f107 031c 	add.w	r3, r7, #28
 80085a4:	4619      	mov	r1, r3
 80085a6:	4808      	ldr	r0, [pc, #32]	; (80085c8 <HAL_SPI_MspInit+0x134>)
 80085a8:	f002 facc 	bl	800ab44 <HAL_GPIO_Init>
}
 80085ac:	bf00      	nop
 80085ae:	3730      	adds	r7, #48	; 0x30
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	40013400 	.word	0x40013400
 80085b8:	40023800 	.word	0x40023800
 80085bc:	40021000 	.word	0x40021000
 80085c0:	40015000 	.word	0x40015000
 80085c4:	40021c00 	.word	0x40021c00
 80085c8:	40021400 	.word	0x40021400

080085cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a13      	ldr	r2, [pc, #76]	; (8008628 <HAL_TIM_Base_MspInit+0x5c>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d10c      	bne.n	80085f8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80085de:	4b13      	ldr	r3, [pc, #76]	; (800862c <HAL_TIM_Base_MspInit+0x60>)
 80085e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e2:	4a12      	ldr	r2, [pc, #72]	; (800862c <HAL_TIM_Base_MspInit+0x60>)
 80085e4:	f043 0304 	orr.w	r3, r3, #4
 80085e8:	6413      	str	r3, [r2, #64]	; 0x40
 80085ea:	4b10      	ldr	r3, [pc, #64]	; (800862c <HAL_TIM_Base_MspInit+0x60>)
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	f003 0304 	and.w	r3, r3, #4
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80085f6:	e010      	b.n	800861a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a0c      	ldr	r2, [pc, #48]	; (8008630 <HAL_TIM_Base_MspInit+0x64>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d10b      	bne.n	800861a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008602:	4b0a      	ldr	r3, [pc, #40]	; (800862c <HAL_TIM_Base_MspInit+0x60>)
 8008604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008606:	4a09      	ldr	r2, [pc, #36]	; (800862c <HAL_TIM_Base_MspInit+0x60>)
 8008608:	f043 0308 	orr.w	r3, r3, #8
 800860c:	6413      	str	r3, [r2, #64]	; 0x40
 800860e:	4b07      	ldr	r3, [pc, #28]	; (800862c <HAL_TIM_Base_MspInit+0x60>)
 8008610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008612:	f003 0308 	and.w	r3, r3, #8
 8008616:	60bb      	str	r3, [r7, #8]
 8008618:	68bb      	ldr	r3, [r7, #8]
}
 800861a:	bf00      	nop
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	40000800 	.word	0x40000800
 800862c:	40023800 	.word	0x40023800
 8008630:	40000c00 	.word	0x40000c00

08008634 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08a      	sub	sp, #40	; 0x28
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800863c:	f107 0314 	add.w	r3, r7, #20
 8008640:	2200      	movs	r2, #0
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	605a      	str	r2, [r3, #4]
 8008646:	609a      	str	r2, [r3, #8]
 8008648:	60da      	str	r2, [r3, #12]
 800864a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a22      	ldr	r2, [pc, #136]	; (80086dc <HAL_TIM_MspPostInit+0xa8>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d11c      	bne.n	8008690 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008656:	4b22      	ldr	r3, [pc, #136]	; (80086e0 <HAL_TIM_MspPostInit+0xac>)
 8008658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865a:	4a21      	ldr	r2, [pc, #132]	; (80086e0 <HAL_TIM_MspPostInit+0xac>)
 800865c:	f043 0302 	orr.w	r3, r3, #2
 8008660:	6313      	str	r3, [r2, #48]	; 0x30
 8008662:	4b1f      	ldr	r3, [pc, #124]	; (80086e0 <HAL_TIM_MspPostInit+0xac>)
 8008664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008666:	f003 0302 	and.w	r3, r3, #2
 800866a:	613b      	str	r3, [r7, #16]
 800866c:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SPARE_TIM_Pin;
 800866e:	2340      	movs	r3, #64	; 0x40
 8008670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008672:	2302      	movs	r3, #2
 8008674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008676:	2300      	movs	r3, #0
 8008678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800867a:	2300      	movs	r3, #0
 800867c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800867e:	2302      	movs	r3, #2
 8008680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPARE_TIM_GPIO_Port, &GPIO_InitStruct);
 8008682:	f107 0314 	add.w	r3, r7, #20
 8008686:	4619      	mov	r1, r3
 8008688:	4816      	ldr	r0, [pc, #88]	; (80086e4 <HAL_TIM_MspPostInit+0xb0>)
 800868a:	f002 fa5b 	bl	800ab44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800868e:	e021      	b.n	80086d4 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a14      	ldr	r2, [pc, #80]	; (80086e8 <HAL_TIM_MspPostInit+0xb4>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d11c      	bne.n	80086d4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800869a:	4b11      	ldr	r3, [pc, #68]	; (80086e0 <HAL_TIM_MspPostInit+0xac>)
 800869c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869e:	4a10      	ldr	r2, [pc, #64]	; (80086e0 <HAL_TIM_MspPostInit+0xac>)
 80086a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a4:	6313      	str	r3, [r2, #48]	; 0x30
 80086a6:	4b0e      	ldr	r3, [pc, #56]	; (80086e0 <HAL_TIM_MspPostInit+0xac>)
 80086a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|LCD_EXTCOMM_Pin;
 80086b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80086b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086b8:	2302      	movs	r3, #2
 80086ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086bc:	2300      	movs	r3, #0
 80086be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086c0:	2300      	movs	r3, #0
 80086c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80086c4:	2302      	movs	r3, #2
 80086c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80086c8:	f107 0314 	add.w	r3, r7, #20
 80086cc:	4619      	mov	r1, r3
 80086ce:	4807      	ldr	r0, [pc, #28]	; (80086ec <HAL_TIM_MspPostInit+0xb8>)
 80086d0:	f002 fa38 	bl	800ab44 <HAL_GPIO_Init>
}
 80086d4:	bf00      	nop
 80086d6:	3728      	adds	r7, #40	; 0x28
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	40000800 	.word	0x40000800
 80086e0:	40023800 	.word	0x40023800
 80086e4:	40020400 	.word	0x40020400
 80086e8:	40000c00 	.word	0x40000c00
 80086ec:	40021c00 	.word	0x40021c00

080086f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08e      	sub	sp, #56	; 0x38
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086fc:	2200      	movs	r2, #0
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	605a      	str	r2, [r3, #4]
 8008702:	609a      	str	r2, [r3, #8]
 8008704:	60da      	str	r2, [r3, #12]
 8008706:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a9f      	ldr	r2, [pc, #636]	; (800898c <HAL_UART_MspInit+0x29c>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d158      	bne.n	80087c4 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008712:	4b9f      	ldr	r3, [pc, #636]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 8008714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008716:	4a9e      	ldr	r2, [pc, #632]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 8008718:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800871c:	6413      	str	r3, [r2, #64]	; 0x40
 800871e:	4b9c      	ldr	r3, [pc, #624]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 8008720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008726:	623b      	str	r3, [r7, #32]
 8008728:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800872a:	4b99      	ldr	r3, [pc, #612]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 800872c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872e:	4a98      	ldr	r2, [pc, #608]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 8008730:	f043 0304 	orr.w	r3, r3, #4
 8008734:	6313      	str	r3, [r2, #48]	; 0x30
 8008736:	4b96      	ldr	r3, [pc, #600]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 8008738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873a:	f003 0304 	and.w	r3, r3, #4
 800873e:	61fb      	str	r3, [r7, #28]
 8008740:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = SPARE_UART_RX_3V3_Pin|SPARE_UART_TX_3V3_Pin;
 8008742:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008748:	2302      	movs	r3, #2
 800874a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800874c:	2300      	movs	r3, #0
 800874e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008750:	2303      	movs	r3, #3
 8008752:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008754:	2308      	movs	r3, #8
 8008756:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800875c:	4619      	mov	r1, r3
 800875e:	488d      	ldr	r0, [pc, #564]	; (8008994 <HAL_UART_MspInit+0x2a4>)
 8008760:	f002 f9f0 	bl	800ab44 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8008764:	4b8c      	ldr	r3, [pc, #560]	; (8008998 <HAL_UART_MspInit+0x2a8>)
 8008766:	4a8d      	ldr	r2, [pc, #564]	; (800899c <HAL_UART_MspInit+0x2ac>)
 8008768:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800876a:	4b8b      	ldr	r3, [pc, #556]	; (8008998 <HAL_UART_MspInit+0x2a8>)
 800876c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008770:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008772:	4b89      	ldr	r3, [pc, #548]	; (8008998 <HAL_UART_MspInit+0x2a8>)
 8008774:	2200      	movs	r2, #0
 8008776:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008778:	4b87      	ldr	r3, [pc, #540]	; (8008998 <HAL_UART_MspInit+0x2a8>)
 800877a:	2200      	movs	r2, #0
 800877c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800877e:	4b86      	ldr	r3, [pc, #536]	; (8008998 <HAL_UART_MspInit+0x2a8>)
 8008780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008784:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008786:	4b84      	ldr	r3, [pc, #528]	; (8008998 <HAL_UART_MspInit+0x2a8>)
 8008788:	2200      	movs	r2, #0
 800878a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800878c:	4b82      	ldr	r3, [pc, #520]	; (8008998 <HAL_UART_MspInit+0x2a8>)
 800878e:	2200      	movs	r2, #0
 8008790:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8008792:	4b81      	ldr	r3, [pc, #516]	; (8008998 <HAL_UART_MspInit+0x2a8>)
 8008794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008798:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800879a:	4b7f      	ldr	r3, [pc, #508]	; (8008998 <HAL_UART_MspInit+0x2a8>)
 800879c:	2200      	movs	r2, #0
 800879e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80087a0:	4b7d      	ldr	r3, [pc, #500]	; (8008998 <HAL_UART_MspInit+0x2a8>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80087a6:	487c      	ldr	r0, [pc, #496]	; (8008998 <HAL_UART_MspInit+0x2a8>)
 80087a8:	f001 fdc4 	bl	800a334 <HAL_DMA_Init>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80087b2:	f7fc fc25 	bl	8005000 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a77      	ldr	r2, [pc, #476]	; (8008998 <HAL_UART_MspInit+0x2a8>)
 80087ba:	66da      	str	r2, [r3, #108]	; 0x6c
 80087bc:	4a76      	ldr	r2, [pc, #472]	; (8008998 <HAL_UART_MspInit+0x2a8>)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80087c2:	e0df      	b.n	8008984 <HAL_UART_MspInit+0x294>
  else if(huart->Instance==UART5)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a75      	ldr	r2, [pc, #468]	; (80089a0 <HAL_UART_MspInit+0x2b0>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d17d      	bne.n	80088ca <HAL_UART_MspInit+0x1da>
    __HAL_RCC_UART5_CLK_ENABLE();
 80087ce:	4b70      	ldr	r3, [pc, #448]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 80087d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d2:	4a6f      	ldr	r2, [pc, #444]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 80087d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087d8:	6413      	str	r3, [r2, #64]	; 0x40
 80087da:	4b6d      	ldr	r3, [pc, #436]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 80087dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087e2:	61bb      	str	r3, [r7, #24]
 80087e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80087e6:	4b6a      	ldr	r3, [pc, #424]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	4a69      	ldr	r2, [pc, #420]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 80087ec:	f043 0304 	orr.w	r3, r3, #4
 80087f0:	6313      	str	r3, [r2, #48]	; 0x30
 80087f2:	4b67      	ldr	r3, [pc, #412]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 80087f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f6:	f003 0304 	and.w	r3, r3, #4
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80087fe:	4b64      	ldr	r3, [pc, #400]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 8008800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008802:	4a63      	ldr	r2, [pc, #396]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 8008804:	f043 0308 	orr.w	r3, r3, #8
 8008808:	6313      	str	r3, [r2, #48]	; 0x30
 800880a:	4b61      	ldr	r3, [pc, #388]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 800880c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880e:	f003 0308 	and.w	r3, r3, #8
 8008812:	613b      	str	r3, [r7, #16]
 8008814:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SOC_UART_TX_3V3_Pin;
 8008816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800881c:	2302      	movs	r3, #2
 800881e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008820:	2300      	movs	r3, #0
 8008822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008824:	2303      	movs	r3, #3
 8008826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008828:	2308      	movs	r3, #8
 800882a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_TX_3V3_GPIO_Port, &GPIO_InitStruct);
 800882c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008830:	4619      	mov	r1, r3
 8008832:	4858      	ldr	r0, [pc, #352]	; (8008994 <HAL_UART_MspInit+0x2a4>)
 8008834:	f002 f986 	bl	800ab44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_UART_RX_3V3_Pin;
 8008838:	2304      	movs	r3, #4
 800883a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800883c:	2302      	movs	r3, #2
 800883e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008840:	2300      	movs	r3, #0
 8008842:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008844:	2303      	movs	r3, #3
 8008846:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008848:	2308      	movs	r3, #8
 800884a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_RX_3V3_GPIO_Port, &GPIO_InitStruct);
 800884c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008850:	4619      	mov	r1, r3
 8008852:	4854      	ldr	r0, [pc, #336]	; (80089a4 <HAL_UART_MspInit+0x2b4>)
 8008854:	f002 f976 	bl	800ab44 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8008858:	4b53      	ldr	r3, [pc, #332]	; (80089a8 <HAL_UART_MspInit+0x2b8>)
 800885a:	4a54      	ldr	r2, [pc, #336]	; (80089ac <HAL_UART_MspInit+0x2bc>)
 800885c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800885e:	4b52      	ldr	r3, [pc, #328]	; (80089a8 <HAL_UART_MspInit+0x2b8>)
 8008860:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008864:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008866:	4b50      	ldr	r3, [pc, #320]	; (80089a8 <HAL_UART_MspInit+0x2b8>)
 8008868:	2200      	movs	r2, #0
 800886a:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800886c:	4b4e      	ldr	r3, [pc, #312]	; (80089a8 <HAL_UART_MspInit+0x2b8>)
 800886e:	2200      	movs	r2, #0
 8008870:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008872:	4b4d      	ldr	r3, [pc, #308]	; (80089a8 <HAL_UART_MspInit+0x2b8>)
 8008874:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008878:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800887a:	4b4b      	ldr	r3, [pc, #300]	; (80089a8 <HAL_UART_MspInit+0x2b8>)
 800887c:	2200      	movs	r2, #0
 800887e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008880:	4b49      	ldr	r3, [pc, #292]	; (80089a8 <HAL_UART_MspInit+0x2b8>)
 8008882:	2200      	movs	r2, #0
 8008884:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8008886:	4b48      	ldr	r3, [pc, #288]	; (80089a8 <HAL_UART_MspInit+0x2b8>)
 8008888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800888c:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800888e:	4b46      	ldr	r3, [pc, #280]	; (80089a8 <HAL_UART_MspInit+0x2b8>)
 8008890:	2200      	movs	r2, #0
 8008892:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008894:	4b44      	ldr	r3, [pc, #272]	; (80089a8 <HAL_UART_MspInit+0x2b8>)
 8008896:	2204      	movs	r2, #4
 8008898:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800889a:	4b43      	ldr	r3, [pc, #268]	; (80089a8 <HAL_UART_MspInit+0x2b8>)
 800889c:	2203      	movs	r2, #3
 800889e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80088a0:	4b41      	ldr	r3, [pc, #260]	; (80089a8 <HAL_UART_MspInit+0x2b8>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80088a6:	4b40      	ldr	r3, [pc, #256]	; (80089a8 <HAL_UART_MspInit+0x2b8>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80088ac:	483e      	ldr	r0, [pc, #248]	; (80089a8 <HAL_UART_MspInit+0x2b8>)
 80088ae:	f001 fd41 	bl	800a334 <HAL_DMA_Init>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 80088b8:	f7fc fba2 	bl	8005000 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a3a      	ldr	r2, [pc, #232]	; (80089a8 <HAL_UART_MspInit+0x2b8>)
 80088c0:	66da      	str	r2, [r3, #108]	; 0x6c
 80088c2:	4a39      	ldr	r2, [pc, #228]	; (80089a8 <HAL_UART_MspInit+0x2b8>)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80088c8:	e05c      	b.n	8008984 <HAL_UART_MspInit+0x294>
  else if(huart->Instance==UART7)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a38      	ldr	r2, [pc, #224]	; (80089b0 <HAL_UART_MspInit+0x2c0>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d157      	bne.n	8008984 <HAL_UART_MspInit+0x294>
    __HAL_RCC_UART7_CLK_ENABLE();
 80088d4:	4b2e      	ldr	r3, [pc, #184]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 80088d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d8:	4a2d      	ldr	r2, [pc, #180]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 80088da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088de:	6413      	str	r3, [r2, #64]	; 0x40
 80088e0:	4b2b      	ldr	r3, [pc, #172]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 80088e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088e8:	60fb      	str	r3, [r7, #12]
 80088ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80088ec:	4b28      	ldr	r3, [pc, #160]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 80088ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f0:	4a27      	ldr	r2, [pc, #156]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 80088f2:	f043 0310 	orr.w	r3, r3, #16
 80088f6:	6313      	str	r3, [r2, #48]	; 0x30
 80088f8:	4b25      	ldr	r3, [pc, #148]	; (8008990 <HAL_UART_MspInit+0x2a0>)
 80088fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fc:	f003 0310 	and.w	r3, r3, #16
 8008900:	60bb      	str	r3, [r7, #8]
 8008902:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FTDI_UART_RX_Pin|FTDI_UART_CTS_L_Pin|FTDI_UART_TX_Pin|FTDI_UART_RTS_L_Pin;
 8008904:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8008908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800890a:	2302      	movs	r3, #2
 800890c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800890e:	2300      	movs	r3, #0
 8008910:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008912:	2303      	movs	r3, #3
 8008914:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8008916:	2308      	movs	r3, #8
 8008918:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800891a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800891e:	4619      	mov	r1, r3
 8008920:	4824      	ldr	r0, [pc, #144]	; (80089b4 <HAL_UART_MspInit+0x2c4>)
 8008922:	f002 f90f 	bl	800ab44 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8008926:	4b24      	ldr	r3, [pc, #144]	; (80089b8 <HAL_UART_MspInit+0x2c8>)
 8008928:	4a24      	ldr	r2, [pc, #144]	; (80089bc <HAL_UART_MspInit+0x2cc>)
 800892a:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 800892c:	4b22      	ldr	r3, [pc, #136]	; (80089b8 <HAL_UART_MspInit+0x2c8>)
 800892e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8008932:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008934:	4b20      	ldr	r3, [pc, #128]	; (80089b8 <HAL_UART_MspInit+0x2c8>)
 8008936:	2200      	movs	r2, #0
 8008938:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800893a:	4b1f      	ldr	r3, [pc, #124]	; (80089b8 <HAL_UART_MspInit+0x2c8>)
 800893c:	2200      	movs	r2, #0
 800893e:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008940:	4b1d      	ldr	r3, [pc, #116]	; (80089b8 <HAL_UART_MspInit+0x2c8>)
 8008942:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008946:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008948:	4b1b      	ldr	r3, [pc, #108]	; (80089b8 <HAL_UART_MspInit+0x2c8>)
 800894a:	2200      	movs	r2, #0
 800894c:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800894e:	4b1a      	ldr	r3, [pc, #104]	; (80089b8 <HAL_UART_MspInit+0x2c8>)
 8008950:	2200      	movs	r2, #0
 8008952:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8008954:	4b18      	ldr	r3, [pc, #96]	; (80089b8 <HAL_UART_MspInit+0x2c8>)
 8008956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800895a:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800895c:	4b16      	ldr	r3, [pc, #88]	; (80089b8 <HAL_UART_MspInit+0x2c8>)
 800895e:	2200      	movs	r2, #0
 8008960:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008962:	4b15      	ldr	r3, [pc, #84]	; (80089b8 <HAL_UART_MspInit+0x2c8>)
 8008964:	2200      	movs	r2, #0
 8008966:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8008968:	4813      	ldr	r0, [pc, #76]	; (80089b8 <HAL_UART_MspInit+0x2c8>)
 800896a:	f001 fce3 	bl	800a334 <HAL_DMA_Init>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <HAL_UART_MspInit+0x288>
      Error_Handler();
 8008974:	f7fc fb44 	bl	8005000 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a0f      	ldr	r2, [pc, #60]	; (80089b8 <HAL_UART_MspInit+0x2c8>)
 800897c:	66da      	str	r2, [r3, #108]	; 0x6c
 800897e:	4a0e      	ldr	r2, [pc, #56]	; (80089b8 <HAL_UART_MspInit+0x2c8>)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008984:	bf00      	nop
 8008986:	3738      	adds	r7, #56	; 0x38
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	40004c00 	.word	0x40004c00
 8008990:	40023800 	.word	0x40023800
 8008994:	40020800 	.word	0x40020800
 8008998:	20028b14 	.word	0x20028b14
 800899c:	40026040 	.word	0x40026040
 80089a0:	40005000 	.word	0x40005000
 80089a4:	40020c00 	.word	0x40020c00
 80089a8:	20030ee0 	.word	0x20030ee0
 80089ac:	40026010 	.word	0x40026010
 80089b0:	40007800 	.word	0x40007800
 80089b4:	40021000 	.word	0x40021000
 80089b8:	2002be8c 	.word	0x2002be8c
 80089bc:	40026058 	.word	0x40026058

080089c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b08a      	sub	sp, #40	; 0x28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089c8:	f107 0314 	add.w	r3, r7, #20
 80089cc:	2200      	movs	r2, #0
 80089ce:	601a      	str	r2, [r3, #0]
 80089d0:	605a      	str	r2, [r3, #4]
 80089d2:	609a      	str	r2, [r3, #8]
 80089d4:	60da      	str	r2, [r3, #12]
 80089d6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089e0:	d134      	bne.n	8008a4c <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089e2:	4b1c      	ldr	r3, [pc, #112]	; (8008a54 <HAL_PCD_MspInit+0x94>)
 80089e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e6:	4a1b      	ldr	r2, [pc, #108]	; (8008a54 <HAL_PCD_MspInit+0x94>)
 80089e8:	f043 0301 	orr.w	r3, r3, #1
 80089ec:	6313      	str	r3, [r2, #48]	; 0x30
 80089ee:	4b19      	ldr	r3, [pc, #100]	; (8008a54 <HAL_PCD_MspInit+0x94>)
 80089f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	613b      	str	r3, [r7, #16]
 80089f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 80089fa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80089fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a00:	2302      	movs	r3, #2
 8008a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a04:	2300      	movs	r3, #0
 8008a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a0c:	230a      	movs	r3, #10
 8008a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a10:	f107 0314 	add.w	r3, r7, #20
 8008a14:	4619      	mov	r1, r3
 8008a16:	4810      	ldr	r0, [pc, #64]	; (8008a58 <HAL_PCD_MspInit+0x98>)
 8008a18:	f002 f894 	bl	800ab44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a1c:	4b0d      	ldr	r3, [pc, #52]	; (8008a54 <HAL_PCD_MspInit+0x94>)
 8008a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a20:	4a0c      	ldr	r2, [pc, #48]	; (8008a54 <HAL_PCD_MspInit+0x94>)
 8008a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a26:	6353      	str	r3, [r2, #52]	; 0x34
 8008a28:	4b0a      	ldr	r3, [pc, #40]	; (8008a54 <HAL_PCD_MspInit+0x94>)
 8008a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	4b07      	ldr	r3, [pc, #28]	; (8008a54 <HAL_PCD_MspInit+0x94>)
 8008a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a38:	4a06      	ldr	r2, [pc, #24]	; (8008a54 <HAL_PCD_MspInit+0x94>)
 8008a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a3e:	6453      	str	r3, [r2, #68]	; 0x44
 8008a40:	4b04      	ldr	r3, [pc, #16]	; (8008a54 <HAL_PCD_MspInit+0x94>)
 8008a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a48:	60bb      	str	r3, [r7, #8]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8008a4c:	bf00      	nop
 8008a4e:	3728      	adds	r7, #40	; 0x28
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	40023800 	.word	0x40023800
 8008a58:	40020000 	.word	0x40020000

08008a5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08c      	sub	sp, #48	; 0x30
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008a64:	2300      	movs	r3, #0
 8008a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	6879      	ldr	r1, [r7, #4]
 8008a70:	2036      	movs	r0, #54	; 0x36
 8008a72:	f001 fc35 	bl	800a2e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008a76:	2036      	movs	r0, #54	; 0x36
 8008a78:	f001 fc4e 	bl	800a318 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008a7c:	4b1f      	ldr	r3, [pc, #124]	; (8008afc <HAL_InitTick+0xa0>)
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a80:	4a1e      	ldr	r2, [pc, #120]	; (8008afc <HAL_InitTick+0xa0>)
 8008a82:	f043 0310 	orr.w	r3, r3, #16
 8008a86:	6413      	str	r3, [r2, #64]	; 0x40
 8008a88:	4b1c      	ldr	r3, [pc, #112]	; (8008afc <HAL_InitTick+0xa0>)
 8008a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8c:	f003 0310 	and.w	r3, r3, #16
 8008a90:	60fb      	str	r3, [r7, #12]
 8008a92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008a94:	f107 0210 	add.w	r2, r7, #16
 8008a98:	f107 0314 	add.w	r3, r7, #20
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f004 f932 	bl	800cd08 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008aa4:	f004 f908 	bl	800ccb8 <HAL_RCC_GetPCLK1Freq>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab0:	4a13      	ldr	r2, [pc, #76]	; (8008b00 <HAL_InitTick+0xa4>)
 8008ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab6:	0c9b      	lsrs	r3, r3, #18
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008abc:	4b11      	ldr	r3, [pc, #68]	; (8008b04 <HAL_InitTick+0xa8>)
 8008abe:	4a12      	ldr	r2, [pc, #72]	; (8008b08 <HAL_InitTick+0xac>)
 8008ac0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8008ac2:	4b10      	ldr	r3, [pc, #64]	; (8008b04 <HAL_InitTick+0xa8>)
 8008ac4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008ac8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008aca:	4a0e      	ldr	r2, [pc, #56]	; (8008b04 <HAL_InitTick+0xa8>)
 8008acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ace:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008ad0:	4b0c      	ldr	r3, [pc, #48]	; (8008b04 <HAL_InitTick+0xa8>)
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ad6:	4b0b      	ldr	r3, [pc, #44]	; (8008b04 <HAL_InitTick+0xa8>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8008adc:	4809      	ldr	r0, [pc, #36]	; (8008b04 <HAL_InitTick+0xa8>)
 8008ade:	f005 fc5b 	bl	800e398 <HAL_TIM_Base_Init>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d104      	bne.n	8008af2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8008ae8:	4806      	ldr	r0, [pc, #24]	; (8008b04 <HAL_InitTick+0xa8>)
 8008aea:	f005 fc81 	bl	800e3f0 <HAL_TIM_Base_Start_IT>
 8008aee:	4603      	mov	r3, r0
 8008af0:	e000      	b.n	8008af4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3730      	adds	r7, #48	; 0x30
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	40023800 	.word	0x40023800
 8008b00:	431bde83 	.word	0x431bde83
 8008b04:	20030f9c 	.word	0x20030f9c
 8008b08:	40001000 	.word	0x40001000

08008b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008b10:	e7fe      	b.n	8008b10 <NMI_Handler+0x4>

08008b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b12:	b480      	push	{r7}
 8008b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b16:	e7fe      	b.n	8008b16 <HardFault_Handler+0x4>

08008b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008b1c:	e7fe      	b.n	8008b1c <MemManage_Handler+0x4>

08008b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008b22:	e7fe      	b.n	8008b22 <BusFault_Handler+0x4>

08008b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008b28:	e7fe      	b.n	8008b28 <UsageFault_Handler+0x4>

08008b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b2e:	bf00      	nop
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	int currentTicks = HAL_GetTick();
 8008b3e:	f000 fd3d 	bl	80095bc <HAL_GetTick>
 8008b42:	4603      	mov	r3, r0
 8008b44:	607b      	str	r3, [r7, #4]
	int currentDiff = currentTicks-timestamp;
 8008b46:	4b10      	ldr	r3, [pc, #64]	; (8008b88 <EXTI4_IRQHandler+0x50>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	603b      	str	r3, [r7, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8008b50:	2010      	movs	r0, #16
 8008b52:	f002 f9ed 	bl	800af30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if((inputButtonSet>buttonPriority.back) && (currentDiff>150)){
 8008b56:	4b0d      	ldr	r3, [pc, #52]	; (8008b8c <EXTI4_IRQHandler+0x54>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	4b0c      	ldr	r3, [pc, #48]	; (8008b90 <EXTI4_IRQHandler+0x58>)
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	dd07      	ble.n	8008b74 <EXTI4_IRQHandler+0x3c>
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	2b96      	cmp	r3, #150	; 0x96
 8008b68:	dd04      	ble.n	8008b74 <EXTI4_IRQHandler+0x3c>
	  inputButtonSet = buttonPriority.back;
 8008b6a:	4b09      	ldr	r3, [pc, #36]	; (8008b90 <EXTI4_IRQHandler+0x58>)
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <EXTI4_IRQHandler+0x54>)
 8008b72:	701a      	strb	r2, [r3, #0]
  }
  timestamp = HAL_GetTick();
 8008b74:	f000 fd22 	bl	80095bc <HAL_GetTick>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	4b02      	ldr	r3, [pc, #8]	; (8008b88 <EXTI4_IRQHandler+0x50>)
 8008b7e:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	20003380 	.word	0x20003380
 8008b8c:	200000dc 	.word	0x200000dc
 8008b90:	20000188 	.word	0x20000188

08008b94 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8008b98:	4802      	ldr	r0, [pc, #8]	; (8008ba4 <DMA1_Stream0_IRQHandler+0x10>)
 8008b9a:	f001 fd6b 	bl	800a674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008b9e:	bf00      	nop
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20030ee0 	.word	0x20030ee0

08008ba8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8008bac:	4802      	ldr	r0, [pc, #8]	; (8008bb8 <DMA1_Stream2_IRQHandler+0x10>)
 8008bae:	f001 fd61 	bl	800a674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8008bb2:	bf00      	nop
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20028b14 	.word	0x20028b14

08008bbc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8008bc0:	4802      	ldr	r0, [pc, #8]	; (8008bcc <DMA1_Stream3_IRQHandler+0x10>)
 8008bc2:	f001 fd57 	bl	800a674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8008bc6:	bf00      	nop
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	2002be8c 	.word	0x2002be8c

08008bd0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008bd4:	4805      	ldr	r0, [pc, #20]	; (8008bec <ADC_IRQHandler+0x1c>)
 8008bd6:	f000 fd63 	bl	80096a0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8008bda:	4805      	ldr	r0, [pc, #20]	; (8008bf0 <ADC_IRQHandler+0x20>)
 8008bdc:	f000 fd60 	bl	80096a0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8008be0:	4804      	ldr	r0, [pc, #16]	; (8008bf4 <ADC_IRQHandler+0x24>)
 8008be2:	f000 fd5d 	bl	80096a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008be6:	bf00      	nop
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	2002be44 	.word	0x2002be44
 8008bf0:	20028d40 	.word	0x20028d40
 8008bf4:	2002bef0 	.word	0x2002bef0

08008bf8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint8_t buttonStates[3];
	int currentTicks = HAL_GetTick();
 8008bfe:	f000 fcdd 	bl	80095bc <HAL_GetTick>
 8008c02:	4603      	mov	r3, r0
 8008c04:	60fb      	str	r3, [r7, #12]
	int currentDiff = currentTicks-timestamp;
 8008c06:	4b35      	ldr	r3, [pc, #212]	; (8008cdc <EXTI9_5_IRQHandler+0xe4>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	60bb      	str	r3, [r7, #8]
	buttonStates[0] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_5);
 8008c10:	2120      	movs	r1, #32
 8008c12:	4833      	ldr	r0, [pc, #204]	; (8008ce0 <EXTI9_5_IRQHandler+0xe8>)
 8008c14:	f002 f940 	bl	800ae98 <HAL_GPIO_ReadPin>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	713b      	strb	r3, [r7, #4]
	buttonStates[1] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_6);
 8008c1c:	2140      	movs	r1, #64	; 0x40
 8008c1e:	4830      	ldr	r0, [pc, #192]	; (8008ce0 <EXTI9_5_IRQHandler+0xe8>)
 8008c20:	f002 f93a 	bl	800ae98 <HAL_GPIO_ReadPin>
 8008c24:	4603      	mov	r3, r0
 8008c26:	717b      	strb	r3, [r7, #5]
	buttonStates[2] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_7);
 8008c28:	2180      	movs	r1, #128	; 0x80
 8008c2a:	482d      	ldr	r0, [pc, #180]	; (8008ce0 <EXTI9_5_IRQHandler+0xe8>)
 8008c2c:	f002 f934 	bl	800ae98 <HAL_GPIO_ReadPin>
 8008c30:	4603      	mov	r3, r0
 8008c32:	71bb      	strb	r3, [r7, #6]
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5) && (currentDiff>150)){ //up button
 8008c34:	4b2b      	ldr	r3, [pc, #172]	; (8008ce4 <EXTI9_5_IRQHandler+0xec>)
 8008c36:	695b      	ldr	r3, [r3, #20]
 8008c38:	f003 0320 	and.w	r3, r3, #32
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00f      	beq.n	8008c60 <EXTI9_5_IRQHandler+0x68>
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2b96      	cmp	r3, #150	; 0x96
 8008c44:	dd0c      	ble.n	8008c60 <EXTI9_5_IRQHandler+0x68>
		if(inputButtonSet > buttonPriority.up){
 8008c46:	4b28      	ldr	r3, [pc, #160]	; (8008ce8 <EXTI9_5_IRQHandler+0xf0>)
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	4b27      	ldr	r3, [pc, #156]	; (8008cec <EXTI9_5_IRQHandler+0xf4>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	dd30      	ble.n	8008cb6 <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.up;
 8008c54:	4b25      	ldr	r3, [pc, #148]	; (8008cec <EXTI9_5_IRQHandler+0xf4>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	4b23      	ldr	r3, [pc, #140]	; (8008ce8 <EXTI9_5_IRQHandler+0xf0>)
 8008c5c:	701a      	strb	r2, [r3, #0]
		if(inputButtonSet > buttonPriority.up){
 8008c5e:	e02a      	b.n	8008cb6 <EXTI9_5_IRQHandler+0xbe>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6) && (currentDiff>150)){ //sel button
 8008c60:	4b20      	ldr	r3, [pc, #128]	; (8008ce4 <EXTI9_5_IRQHandler+0xec>)
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00f      	beq.n	8008c8c <EXTI9_5_IRQHandler+0x94>
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2b96      	cmp	r3, #150	; 0x96
 8008c70:	dd0c      	ble.n	8008c8c <EXTI9_5_IRQHandler+0x94>
		if(inputButtonSet > buttonPriority.sel){
 8008c72:	4b1d      	ldr	r3, [pc, #116]	; (8008ce8 <EXTI9_5_IRQHandler+0xf0>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	4b1c      	ldr	r3, [pc, #112]	; (8008cec <EXTI9_5_IRQHandler+0xf4>)
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	dd1a      	ble.n	8008cb6 <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.sel;
 8008c80:	4b1a      	ldr	r3, [pc, #104]	; (8008cec <EXTI9_5_IRQHandler+0xf4>)
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	4b18      	ldr	r3, [pc, #96]	; (8008ce8 <EXTI9_5_IRQHandler+0xf0>)
 8008c88:	701a      	strb	r2, [r3, #0]
		if(inputButtonSet > buttonPriority.sel){
 8008c8a:	e014      	b.n	8008cb6 <EXTI9_5_IRQHandler+0xbe>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7) && (currentDiff>150)){ //down button
 8008c8c:	4b15      	ldr	r3, [pc, #84]	; (8008ce4 <EXTI9_5_IRQHandler+0xec>)
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00e      	beq.n	8008cb6 <EXTI9_5_IRQHandler+0xbe>
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2b96      	cmp	r3, #150	; 0x96
 8008c9c:	dd0b      	ble.n	8008cb6 <EXTI9_5_IRQHandler+0xbe>
		if(inputButtonSet > buttonPriority.down){
 8008c9e:	4b12      	ldr	r3, [pc, #72]	; (8008ce8 <EXTI9_5_IRQHandler+0xf0>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	4b11      	ldr	r3, [pc, #68]	; (8008cec <EXTI9_5_IRQHandler+0xf4>)
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	dd04      	ble.n	8008cb6 <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.down;
 8008cac:	4b0f      	ldr	r3, [pc, #60]	; (8008cec <EXTI9_5_IRQHandler+0xf4>)
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	4b0d      	ldr	r3, [pc, #52]	; (8008ce8 <EXTI9_5_IRQHandler+0xf0>)
 8008cb4:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8008cb6:	2020      	movs	r0, #32
 8008cb8:	f002 f93a 	bl	800af30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8008cbc:	2040      	movs	r0, #64	; 0x40
 8008cbe:	f002 f937 	bl	800af30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8008cc2:	2080      	movs	r0, #128	; 0x80
 8008cc4:	f002 f934 	bl	800af30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  timestamp = HAL_GetTick();
 8008cc8:	f000 fc78 	bl	80095bc <HAL_GetTick>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	461a      	mov	r2, r3
 8008cd0:	4b02      	ldr	r3, [pc, #8]	; (8008cdc <EXTI9_5_IRQHandler+0xe4>)
 8008cd2:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008cd4:	bf00      	nop
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	20003380 	.word	0x20003380
 8008ce0:	40022800 	.word	0x40022800
 8008ce4:	40013c00 	.word	0x40013c00
 8008ce8:	200000dc 	.word	0x200000dc
 8008cec:	20000188 	.word	0x20000188

08008cf0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008cf4:	4802      	ldr	r0, [pc, #8]	; (8008d00 <TIM6_DAC_IRQHandler+0x10>)
 8008cf6:	f005 fbda 	bl	800e4ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008cfa:	bf00      	nop
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20030f9c 	.word	0x20030f9c

08008d04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008d08:	4805      	ldr	r0, [pc, #20]	; (8008d20 <DMA2_Stream0_IRQHandler+0x1c>)
 8008d0a:	f001 fcb3 	bl	800a674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc1);
 8008d0e:	4805      	ldr	r0, [pc, #20]	; (8008d24 <DMA2_Stream0_IRQHandler+0x20>)
 8008d10:	f000 fef6 	bl	8009b00 <HAL_ADC_Stop_DMA>
  adcRestart[0]=1;
 8008d14:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <DMA2_Stream0_IRQHandler+0x24>)
 8008d16:	2201      	movs	r2, #1
 8008d18:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008d1a:	bf00      	nop
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	2002bf38 	.word	0x2002bf38
 8008d24:	2002be44 	.word	0x2002be44
 8008d28:	20029284 	.word	0x20029284

08008d2c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8008d30:	4805      	ldr	r0, [pc, #20]	; (8008d48 <DMA2_Stream1_IRQHandler+0x1c>)
 8008d32:	f001 fc9f 	bl	800a674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 8008d36:	4805      	ldr	r0, [pc, #20]	; (8008d4c <DMA2_Stream1_IRQHandler+0x20>)
 8008d38:	f000 fee2 	bl	8009b00 <HAL_ADC_Stop_DMA>
  adcRestart[2]=1;
 8008d3c:	4b04      	ldr	r3, [pc, #16]	; (8008d50 <DMA2_Stream1_IRQHandler+0x24>)
 8008d3e:	2201      	movs	r2, #1
 8008d40:	709a      	strb	r2, [r3, #2]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8008d42:	bf00      	nop
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20029224 	.word	0x20029224
 8008d4c:	2002bef0 	.word	0x2002bef0
 8008d50:	20029284 	.word	0x20029284

08008d54 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008d58:	4805      	ldr	r0, [pc, #20]	; (8008d70 <DMA2_Stream2_IRQHandler+0x1c>)
 8008d5a:	f001 fc8b 	bl	800a674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc2);
 8008d5e:	4805      	ldr	r0, [pc, #20]	; (8008d74 <DMA2_Stream2_IRQHandler+0x20>)
 8008d60:	f000 fece 	bl	8009b00 <HAL_ADC_Stop_DMA>
  adcRestart[1]=1;
 8008d64:	4b04      	ldr	r3, [pc, #16]	; (8008d78 <DMA2_Stream2_IRQHandler+0x24>)
 8008d66:	2201      	movs	r2, #1
 8008d68:	705a      	strb	r2, [r3, #1]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8008d6a:	bf00      	nop
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	20030e80 	.word	0x20030e80
 8008d74:	20028d40 	.word	0x20028d40
 8008d78:	20029284 	.word	0x20029284

08008d7c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8008d80:	4802      	ldr	r0, [pc, #8]	; (8008d8c <SPI4_IRQHandler+0x10>)
 8008d82:	f005 f8cd 	bl	800df20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8008d86:	bf00      	nop
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20028ab0 	.word	0x20028ab0

08008d90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	617b      	str	r3, [r7, #20]
 8008da0:	e00a      	b.n	8008db8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008da2:	f3af 8000 	nop.w
 8008da6:	4601      	mov	r1, r0
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	60ba      	str	r2, [r7, #8]
 8008dae:	b2ca      	uxtb	r2, r1
 8008db0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	3301      	adds	r3, #1
 8008db6:	617b      	str	r3, [r7, #20]
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	dbf0      	blt.n	8008da2 <_read+0x12>
	}

return len;
 8008dc0:	687b      	ldr	r3, [r7, #4]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3718      	adds	r7, #24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b086      	sub	sp, #24
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	60f8      	str	r0, [r7, #12]
 8008dd2:	60b9      	str	r1, [r7, #8]
 8008dd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	617b      	str	r3, [r7, #20]
 8008dda:	e009      	b.n	8008df0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	60ba      	str	r2, [r7, #8]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7fa f993 	bl	8003110 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	3301      	adds	r3, #1
 8008dee:	617b      	str	r3, [r7, #20]
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	dbf1      	blt.n	8008ddc <_write+0x12>
	}
	return len;
 8008df8:	687b      	ldr	r3, [r7, #4]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3718      	adds	r7, #24
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <_close>:

int _close(int file)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b083      	sub	sp, #12
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
	return -1;
 8008e0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b083      	sub	sp, #12
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008e2a:	605a      	str	r2, [r3, #4]
	return 0;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	370c      	adds	r7, #12
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <_isatty>:

int _isatty(int file)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b083      	sub	sp, #12
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
	return 1;
 8008e42:	2301      	movs	r3, #1
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
	return 0;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
	...

08008e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b086      	sub	sp, #24
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008e74:	4a14      	ldr	r2, [pc, #80]	; (8008ec8 <_sbrk+0x5c>)
 8008e76:	4b15      	ldr	r3, [pc, #84]	; (8008ecc <_sbrk+0x60>)
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008e80:	4b13      	ldr	r3, [pc, #76]	; (8008ed0 <_sbrk+0x64>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d102      	bne.n	8008e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008e88:	4b11      	ldr	r3, [pc, #68]	; (8008ed0 <_sbrk+0x64>)
 8008e8a:	4a12      	ldr	r2, [pc, #72]	; (8008ed4 <_sbrk+0x68>)
 8008e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008e8e:	4b10      	ldr	r3, [pc, #64]	; (8008ed0 <_sbrk+0x64>)
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4413      	add	r3, r2
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d207      	bcs.n	8008eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008e9c:	f00a fb40 	bl	8013520 <__errno>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	230c      	movs	r3, #12
 8008ea4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8008ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eaa:	e009      	b.n	8008ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008eac:	4b08      	ldr	r3, [pc, #32]	; (8008ed0 <_sbrk+0x64>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008eb2:	4b07      	ldr	r3, [pc, #28]	; (8008ed0 <_sbrk+0x64>)
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4413      	add	r3, r2
 8008eba:	4a05      	ldr	r2, [pc, #20]	; (8008ed0 <_sbrk+0x64>)
 8008ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3718      	adds	r7, #24
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	20080000 	.word	0x20080000
 8008ecc:	00000400 	.word	0x00000400
 8008ed0:	20003384 	.word	0x20003384
 8008ed4:	20031028 	.word	0x20031028

08008ed8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008edc:	4b08      	ldr	r3, [pc, #32]	; (8008f00 <SystemInit+0x28>)
 8008ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ee2:	4a07      	ldr	r2, [pc, #28]	; (8008f00 <SystemInit+0x28>)
 8008ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008eec:	4b04      	ldr	r3, [pc, #16]	; (8008f00 <SystemInit+0x28>)
 8008eee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008ef2:	609a      	str	r2, [r3, #8]
#endif
}
 8008ef4:	bf00      	nop
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	e000ed00 	.word	0xe000ed00

08008f04 <zionEEPROMPresence>:
 *      Author: auphilli
 */

#include "zionEeprom.h"

int * zionEEPROMPresence(){
 8008f04:	b580      	push	{r7, lr}
 8008f06:	af00      	add	r7, sp, #0
	static int eepromPresent[3];
	memset(eepromPresent, 0x00, sizeof(eepromPresent));
 8008f08:	220c      	movs	r2, #12
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	4814      	ldr	r0, [pc, #80]	; (8008f60 <zionEEPROMPresence+0x5c>)
 8008f0e:	f00a fb3c 	bl	801358a <memset>
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, SOC_ADDRESS, 2, 100)== HAL_OK){
 8008f12:	2364      	movs	r3, #100	; 0x64
 8008f14:	2202      	movs	r2, #2
 8008f16:	21a6      	movs	r1, #166	; 0xa6
 8008f18:	4812      	ldr	r0, [pc, #72]	; (8008f64 <zionEEPROMPresence+0x60>)
 8008f1a:	f002 fcd5 	bl	800b8c8 <HAL_I2C_IsDeviceReady>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d102      	bne.n	8008f2a <zionEEPROMPresence+0x26>
		eepromPresent[0]=1;
 8008f24:	4b0e      	ldr	r3, [pc, #56]	; (8008f60 <zionEEPROMPresence+0x5c>)
 8008f26:	2201      	movs	r2, #1
 8008f28:	601a      	str	r2, [r3, #0]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, ASIC_ADDRESS, 2, 100)== HAL_OK){
 8008f2a:	2364      	movs	r3, #100	; 0x64
 8008f2c:	2202      	movs	r2, #2
 8008f2e:	21a8      	movs	r1, #168	; 0xa8
 8008f30:	480c      	ldr	r0, [pc, #48]	; (8008f64 <zionEEPROMPresence+0x60>)
 8008f32:	f002 fcc9 	bl	800b8c8 <HAL_I2C_IsDeviceReady>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d102      	bne.n	8008f42 <zionEEPROMPresence+0x3e>
		eepromPresent[1]=1;
 8008f3c:	4b08      	ldr	r3, [pc, #32]	; (8008f60 <zionEEPROMPresence+0x5c>)
 8008f3e:	2201      	movs	r2, #1
 8008f40:	605a      	str	r2, [r3, #4]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, DISPLAY_ADDRESS, 2, 100)== HAL_OK){
 8008f42:	2364      	movs	r3, #100	; 0x64
 8008f44:	2202      	movs	r2, #2
 8008f46:	21aa      	movs	r1, #170	; 0xaa
 8008f48:	4806      	ldr	r0, [pc, #24]	; (8008f64 <zionEEPROMPresence+0x60>)
 8008f4a:	f002 fcbd 	bl	800b8c8 <HAL_I2C_IsDeviceReady>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d102      	bne.n	8008f5a <zionEEPROMPresence+0x56>
		eepromPresent[2]=1;
 8008f54:	4b02      	ldr	r3, [pc, #8]	; (8008f60 <zionEEPROMPresence+0x5c>)
 8008f56:	2201      	movs	r2, #1
 8008f58:	609a      	str	r2, [r3, #8]
	}
	return eepromPresent;
 8008f5a:	4b01      	ldr	r3, [pc, #4]	; (8008f60 <zionEEPROMPresence+0x5c>)
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20003388 	.word	0x20003388
 8008f64:	20028bc0 	.word	0x20028bc0

08008f68 <readDataFromEEPROM>:
		bytes+=32;
	}

}
//reads from the EEPROM can be continuous
void readDataFromEEPROM(uint8_t * data, uint8_t chipAddress, uint16_t memoryAddress, int len,uint16_t timeout){
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b088      	sub	sp, #32
 8008f6c:	af04      	add	r7, sp, #16
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	607b      	str	r3, [r7, #4]
 8008f72:	460b      	mov	r3, r1
 8008f74:	72fb      	strb	r3, [r7, #11]
 8008f76:	4613      	mov	r3, r2
 8008f78:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(&EEPROM_I2C,chipAddress,memoryAddress, I2C_MEMADD_SIZE_16BIT,data,len,timeout);
 8008f7a:	7afb      	ldrb	r3, [r7, #11]
 8008f7c:	b299      	uxth	r1, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	8b3a      	ldrh	r2, [r7, #24]
 8008f84:	8938      	ldrh	r0, [r7, #8]
 8008f86:	9202      	str	r2, [sp, #8]
 8008f88:	9301      	str	r3, [sp, #4]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	2302      	movs	r3, #2
 8008f90:	4602      	mov	r2, r0
 8008f92:	4803      	ldr	r0, [pc, #12]	; (8008fa0 <readDataFromEEPROM+0x38>)
 8008f94:	f002 fb7e 	bl	800b694 <HAL_I2C_Mem_Read>
}
 8008f98:	bf00      	nop
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	20028bc0 	.word	0x20028bc0

08008fa4 <parseZionEEPROM>:
		 writeDataToEEPROM((uint8_t*)zionEEPROMKanu,DISPLAY_ADDRESS,0x0,sizeof(zionEEPROMKanu), 500);
		 HAL_Delay(100);
	  }
}

int * parseZionEEPROM(uint8_t chipAddress){
 8008fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa8:	b0a6      	sub	sp, #152	; 0x98
 8008faa:	af02      	add	r7, sp, #8
 8008fac:	4603      	mov	r3, r0
 8008fae:	71fb      	strb	r3, [r7, #7]
 8008fb0:	466b      	mov	r3, sp
 8008fb2:	4698      	mov	r8, r3
	int foundTheEnd = 0;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int x=0;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int size = 100;
 8008fc0:	2364      	movs	r3, #100	; 0x64
 8008fc2:	673b      	str	r3, [r7, #112]	; 0x70
	int counter=6;
 8008fc4:	2306      	movs	r3, #6
 8008fc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int zeroWas5A=0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int validHeader=0;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
	int previousByteOfHeader[20];
	int index=0;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	67bb      	str	r3, [r7, #120]	; 0x78
	int indexSubtractor = 0;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	677b      	str	r3, [r7, #116]	; 0x74
	uint8_t letsParseSomeBytes[size];
 8008fdc:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8008fde:	1e6b      	subs	r3, r5, #1
 8008fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fe2:	462b      	mov	r3, r5
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	f04f 0200 	mov.w	r2, #0
 8008fea:	f04f 0300 	mov.w	r3, #0
 8008fee:	f04f 0400 	mov.w	r4, #0
 8008ff2:	00d4      	lsls	r4, r2, #3
 8008ff4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008ff8:	00cb      	lsls	r3, r1, #3
 8008ffa:	462b      	mov	r3, r5
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	f04f 0200 	mov.w	r2, #0
 8009002:	f04f 0300 	mov.w	r3, #0
 8009006:	f04f 0400 	mov.w	r4, #0
 800900a:	00d4      	lsls	r4, r2, #3
 800900c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8009010:	00cb      	lsls	r3, r1, #3
 8009012:	462b      	mov	r3, r5
 8009014:	3307      	adds	r3, #7
 8009016:	08db      	lsrs	r3, r3, #3
 8009018:	00db      	lsls	r3, r3, #3
 800901a:	ebad 0d03 	sub.w	sp, sp, r3
 800901e:	ab02      	add	r3, sp, #8
 8009020:	3300      	adds	r3, #0
 8009022:	66bb      	str	r3, [r7, #104]	; 0x68
	uint8_t pastParsedBytes[size];
 8009024:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8009026:	1e73      	subs	r3, r6, #1
 8009028:	667b      	str	r3, [r7, #100]	; 0x64
 800902a:	4633      	mov	r3, r6
 800902c:	4619      	mov	r1, r3
 800902e:	f04f 0200 	mov.w	r2, #0
 8009032:	f04f 0300 	mov.w	r3, #0
 8009036:	f04f 0400 	mov.w	r4, #0
 800903a:	00d4      	lsls	r4, r2, #3
 800903c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8009040:	00cb      	lsls	r3, r1, #3
 8009042:	4633      	mov	r3, r6
 8009044:	4619      	mov	r1, r3
 8009046:	f04f 0200 	mov.w	r2, #0
 800904a:	f04f 0300 	mov.w	r3, #0
 800904e:	f04f 0400 	mov.w	r4, #0
 8009052:	00d4      	lsls	r4, r2, #3
 8009054:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8009058:	00cb      	lsls	r3, r1, #3
 800905a:	4633      	mov	r3, r6
 800905c:	3307      	adds	r3, #7
 800905e:	08db      	lsrs	r3, r3, #3
 8009060:	00db      	lsls	r3, r3, #3
 8009062:	ebad 0d03 	sub.w	sp, sp, r3
 8009066:	ab02      	add	r3, sp, #8
 8009068:	3300      	adds	r3, #0
 800906a:	663b      	str	r3, [r7, #96]	; 0x60
	static int deviceHeaderBytes[5];

	memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 800906c:	f107 0308 	add.w	r3, r7, #8
 8009070:	2250      	movs	r2, #80	; 0x50
 8009072:	2100      	movs	r1, #0
 8009074:	4618      	mov	r0, r3
 8009076:	f00a fa88 	bl	801358a <memset>
	memset(pastParsedBytes,0,sizeof(pastParsedBytes));
 800907a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800907c:	4632      	mov	r2, r6
 800907e:	2100      	movs	r1, #0
 8009080:	4618      	mov	r0, r3
 8009082:	f00a fa82 	bl	801358a <memset>
	memset(letsParseSomeBytes,0,sizeof(letsParseSomeBytes));
 8009086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009088:	462a      	mov	r2, r5
 800908a:	2100      	movs	r1, #0
 800908c:	4618      	mov	r0, r3
 800908e:	f00a fa7c 	bl	801358a <memset>
	readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,0x00,sizeof(letsParseSomeBytes),100);
 8009092:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009094:	79f9      	ldrb	r1, [r7, #7]
 8009096:	2364      	movs	r3, #100	; 0x64
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	462b      	mov	r3, r5
 800909c:	2200      	movs	r2, #0
 800909e:	f7ff ff63 	bl	8008f68 <readDataFromEEPROM>
	//if the eeprom is uninitialized and/or improperly formated, just end.
	if(letsParseSomeBytes[0] == 0xff){
 80090a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	2bff      	cmp	r3, #255	; 0xff
 80090a8:	f040 811b 	bne.w	80092e2 <parseZionEEPROM+0x33e>
		foundTheEnd=1;
 80090ac:	2301      	movs	r3, #1
 80090ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		previousByteOfHeader[0]= -2;
 80090b2:	f06f 0301 	mvn.w	r3, #1
 80090b6:	60bb      	str	r3, [r7, #8]
	}
	while(!foundTheEnd){
 80090b8:	e113      	b.n	80092e2 <parseZionEEPROM+0x33e>
		//every time we reach the end of our data, store it in the past buffer and get more!
		if(!(index%size) & (index>0)){
 80090ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80090be:	fb93 f2f2 	sdiv	r2, r3, r2
 80090c2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80090c4:	fb01 f202 	mul.w	r2, r1, r2
 80090c8:	1a9b      	subs	r3, r3, r2
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	bf0c      	ite	eq
 80090ce:	2301      	moveq	r3, #1
 80090d0:	2300      	movne	r3, #0
 80090d2:	b2da      	uxtb	r2, r3
 80090d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	bfcc      	ite	gt
 80090da:	2301      	movgt	r3, #1
 80090dc:	2300      	movle	r3, #0
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	4013      	ands	r3, r2
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d025      	beq.n	8009134 <parseZionEEPROM+0x190>
			for(x=0;x<size;x++){
 80090e8:	2300      	movs	r3, #0
 80090ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80090ee:	e00f      	b.n	8009110 <parseZionEEPROM+0x16c>
				pastParsedBytes[x] = letsParseSomeBytes[x];
 80090f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090f6:	4413      	add	r3, r2
 80090f8:	7819      	ldrb	r1, [r3, #0]
 80090fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80090fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009100:	4413      	add	r3, r2
 8009102:	460a      	mov	r2, r1
 8009104:	701a      	strb	r2, [r3, #0]
			for(x=0;x<size;x++){
 8009106:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800910a:	3301      	adds	r3, #1
 800910c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009110:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009114:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009116:	429a      	cmp	r2, r3
 8009118:	dbea      	blt.n	80090f0 <parseZionEEPROM+0x14c>
			}
			readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,index,sizeof(letsParseSomeBytes),100);
 800911a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800911c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800911e:	b29a      	uxth	r2, r3
 8009120:	79f9      	ldrb	r1, [r7, #7]
 8009122:	2364      	movs	r3, #100	; 0x64
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	462b      	mov	r3, r5
 8009128:	f7ff ff1e 	bl	8008f68 <readDataFromEEPROM>
			indexSubtractor+=size;
 800912c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800912e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009130:	4413      	add	r3, r2
 8009132:	677b      	str	r3, [r7, #116]	; 0x74
		}
		//if 5 consecutive bits in a read operation are 0xff, time to give up finding the legit header
		if((letsParseSomeBytes[0] == 0xff) && (letsParseSomeBytes[1] == 0xff) && (letsParseSomeBytes[2] == 0xff) && (letsParseSomeBytes[3] == 0xff) && (letsParseSomeBytes[5] == 0xff)){
 8009134:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	2bff      	cmp	r3, #255	; 0xff
 800913a:	d116      	bne.n	800916a <parseZionEEPROM+0x1c6>
 800913c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800913e:	785b      	ldrb	r3, [r3, #1]
 8009140:	2bff      	cmp	r3, #255	; 0xff
 8009142:	d112      	bne.n	800916a <parseZionEEPROM+0x1c6>
 8009144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009146:	789b      	ldrb	r3, [r3, #2]
 8009148:	2bff      	cmp	r3, #255	; 0xff
 800914a:	d10e      	bne.n	800916a <parseZionEEPROM+0x1c6>
 800914c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800914e:	78db      	ldrb	r3, [r3, #3]
 8009150:	2bff      	cmp	r3, #255	; 0xff
 8009152:	d10a      	bne.n	800916a <parseZionEEPROM+0x1c6>
 8009154:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009156:	795b      	ldrb	r3, [r3, #5]
 8009158:	2bff      	cmp	r3, #255	; 0xff
 800915a:	d106      	bne.n	800916a <parseZionEEPROM+0x1c6>
			previousByteOfHeader[0]=-1;
 800915c:	f04f 33ff 	mov.w	r3, #4294967295
 8009160:	60bb      	str	r3, [r7, #8]
			foundTheEnd=1;
 8009162:	2301      	movs	r3, #1
 8009164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009168:	e0b8      	b.n	80092dc <parseZionEEPROM+0x338>
		}
		//if((letsParseSomeBytes[index] == 0xff)){
		else if(((letsParseSomeBytes[index-indexSubtractor] == 0x5a))|| ((letsParseSomeBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20)) || ((pastParsedBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20))){
 800916a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800916c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009172:	5cd3      	ldrb	r3, [r2, r3]
 8009174:	2b5a      	cmp	r3, #90	; 0x5a
 8009176:	d023      	beq.n	80091c0 <parseZionEEPROM+0x21c>
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800917c:	fb93 f2f2 	sdiv	r2, r3, r2
 8009180:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009182:	fb01 f202 	mul.w	r2, r1, r2
 8009186:	1a9b      	subs	r3, r3, r2
 8009188:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800918a:	5cd3      	ldrb	r3, [r2, r3]
 800918c:	2b5a      	cmp	r3, #90	; 0x5a
 800918e:	d104      	bne.n	800919a <parseZionEEPROM+0x1f6>
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	3314      	adds	r3, #20
 8009194:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009196:	429a      	cmp	r2, r3
 8009198:	db12      	blt.n	80091c0 <parseZionEEPROM+0x21c>
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800919e:	fb93 f2f2 	sdiv	r2, r3, r2
 80091a2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80091a4:	fb01 f202 	mul.w	r2, r1, r2
 80091a8:	1a9b      	subs	r3, r3, r2
 80091aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80091ac:	5cd3      	ldrb	r3, [r2, r3]
 80091ae:	2b5a      	cmp	r3, #90	; 0x5a
 80091b0:	f040 8094 	bne.w	80092dc <parseZionEEPROM+0x338>
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	3314      	adds	r3, #20
 80091b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80091ba:	429a      	cmp	r2, r3
 80091bc:	f280 808e 	bge.w	80092dc <parseZionEEPROM+0x338>
			if((previousByteOfHeader[0] == 0) & (!zeroWas5A) & ((letsParseSomeBytes[index-indexSubtractor] == 0x5a))){
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80091c6:	4313      	orrs	r3, r2
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	bf0c      	ite	eq
 80091cc:	2301      	moveq	r3, #1
 80091ce:	2300      	movne	r3, #0
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80091d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091d6:	1acb      	subs	r3, r1, r3
 80091d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80091da:	5ccb      	ldrb	r3, [r1, r3]
 80091dc:	2b5a      	cmp	r3, #90	; 0x5a
 80091de:	bf0c      	ite	eq
 80091e0:	2301      	moveq	r3, #1
 80091e2:	2300      	movne	r3, #0
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	4013      	ands	r3, r2
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d008      	beq.n	8009200 <parseZionEEPROM+0x25c>
				previousByteOfHeader[0] = index;
 80091ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091f0:	60bb      	str	r3, [r7, #8]
				if(index==0){
 80091f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d171      	bne.n	80092dc <parseZionEEPROM+0x338>
					zeroWas5A=1;
 80091f8:	2301      	movs	r3, #1
 80091fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091fe:	e06d      	b.n	80092dc <parseZionEEPROM+0x338>
				}
			}
			//if validHeader was set, we just need the next 14 bytes of data
			else if(validHeader){
 8009200:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009202:	2b00      	cmp	r3, #0
 8009204:	d015      	beq.n	8009232 <parseZionEEPROM+0x28e>
				previousByteOfHeader[counter]=index;
 8009206:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8009210:	4413      	add	r3, r2
 8009212:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009214:	f843 2c88 	str.w	r2, [r3, #-136]
				if(counter==19){
 8009218:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800921c:	2b13      	cmp	r3, #19
 800921e:	d102      	bne.n	8009226 <parseZionEEPROM+0x282>
					foundTheEnd=1;
 8009220:	2301      	movs	r3, #1
 8009222:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				}
				counter++;
 8009226:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800922a:	3301      	adds	r3, #1
 800922c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009230:	e054      	b.n	80092dc <parseZionEEPROM+0x338>
			}
			else{
				if((letsParseSomeBytes[index-indexSubtractor] == 0x45)){
 8009232:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009234:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800923a:	5cd3      	ldrb	r3, [r2, r3]
 800923c:	2b45      	cmp	r3, #69	; 0x45
 800923e:	d102      	bne.n	8009246 <parseZionEEPROM+0x2a2>
					previousByteOfHeader[1] = index;
 8009240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	e04a      	b.n	80092dc <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x46)) && (previousByteOfHeader[1] == index -1)){
 8009246:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800924e:	5cd3      	ldrb	r3, [r2, r3]
 8009250:	2b46      	cmp	r3, #70	; 0x46
 8009252:	d107      	bne.n	8009264 <parseZionEEPROM+0x2c0>
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009258:	3b01      	subs	r3, #1
 800925a:	429a      	cmp	r2, r3
 800925c:	d102      	bne.n	8009264 <parseZionEEPROM+0x2c0>
					previousByteOfHeader[2] = index;
 800925e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009260:	613b      	str	r3, [r7, #16]
 8009262:	e03b      	b.n	80092dc <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[2] == index -1)){
 8009264:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800926c:	5cd3      	ldrb	r3, [r2, r3]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d107      	bne.n	8009282 <parseZionEEPROM+0x2de>
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009276:	3b01      	subs	r3, #1
 8009278:	429a      	cmp	r2, r3
 800927a:	d102      	bne.n	8009282 <parseZionEEPROM+0x2de>
					previousByteOfHeader[3] = index;
 800927c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800927e:	617b      	str	r3, [r7, #20]
 8009280:	e02c      	b.n	80092dc <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[3] == index -1)){
 8009282:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800928a:	5cd3      	ldrb	r3, [r2, r3]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d107      	bne.n	80092a0 <parseZionEEPROM+0x2fc>
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009294:	3b01      	subs	r3, #1
 8009296:	429a      	cmp	r2, r3
 8009298:	d102      	bne.n	80092a0 <parseZionEEPROM+0x2fc>
					previousByteOfHeader[4] = index;
 800929a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800929c:	61bb      	str	r3, [r7, #24]
 800929e:	e01d      	b.n	80092dc <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x04)) && (previousByteOfHeader[4] == index -1)){
 80092a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80092a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092a8:	5cd3      	ldrb	r3, [r2, r3]
 80092aa:	2b04      	cmp	r3, #4
 80092ac:	d109      	bne.n	80092c2 <parseZionEEPROM+0x31e>
 80092ae:	69ba      	ldr	r2, [r7, #24]
 80092b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092b2:	3b01      	subs	r3, #1
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d104      	bne.n	80092c2 <parseZionEEPROM+0x31e>
					previousByteOfHeader[5] = index;
 80092b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092ba:	61fb      	str	r3, [r7, #28]
					validHeader=1;
 80092bc:	2301      	movs	r3, #1
 80092be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092c0:	e00c      	b.n	80092dc <parseZionEEPROM+0x338>
				}
				//if things didn't look good, erase it!
				else if (!validHeader){
 80092c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d109      	bne.n	80092dc <parseZionEEPROM+0x338>
					memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 80092c8:	f107 0308 	add.w	r3, r7, #8
 80092cc:	2250      	movs	r2, #80	; 0x50
 80092ce:	2100      	movs	r1, #0
 80092d0:	4618      	mov	r0, r3
 80092d2:	f00a f95a 	bl	801358a <memset>
					zeroWas5A=0;
 80092d6:	2300      	movs	r3, #0
 80092d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				}

			}
		}
		index++;
 80092dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092de:	3301      	adds	r3, #1
 80092e0:	67bb      	str	r3, [r7, #120]	; 0x78
	while(!foundTheEnd){
 80092e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f43f aee7 	beq.w	80090ba <parseZionEEPROM+0x116>
	}
	//if the eemprom is initialized
	if(previousByteOfHeader[0]>=0){
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f2c0 8085 	blt.w	80093fe <parseZionEEPROM+0x45a>
		//figure out on which index our data started
		int remainder = previousByteOfHeader[16]%size;
 80092f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80092f8:	fb93 f2f2 	sdiv	r2, r3, r2
 80092fc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80092fe:	fb01 f202 	mul.w	r2, r1, r2
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	65fb      	str	r3, [r7, #92]	; 0x5c
		//if some of our data is split between past read and present read
		if(remainder >((size-1)-4)){
 8009306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009308:	3b05      	subs	r3, #5
 800930a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800930c:	429a      	cmp	r2, r3
 800930e:	dd50      	ble.n	80093b2 <parseZionEEPROM+0x40e>
			//amount of bytes in the previous read
			int bytesInPreviousRead = (size-1) - remainder;
 8009310:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009312:	1e5a      	subs	r2, r3, #1
 8009314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	65bb      	str	r3, [r7, #88]	; 0x58
			//grab those bytes and store them in the buffer
			for(x=0;x<bytesInPreviousRead;x++){
 800931a:	2300      	movs	r3, #0
 800931c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009320:	e01c      	b.n	800935c <parseZionEEPROM+0x3b8>
				//deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfFF[0]-5+x];
				deviceHeaderBytes[x] = pastParsedBytes[previousByteOfHeader[16+x]%size];
 8009322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009326:	3310      	adds	r3, #16
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800932e:	4413      	add	r3, r2
 8009330:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009334:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009336:	fb93 f2f2 	sdiv	r2, r3, r2
 800933a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800933c:	fb01 f202 	mul.w	r2, r1, r2
 8009340:	1a9b      	subs	r3, r3, r2
 8009342:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009344:	5cd3      	ldrb	r3, [r2, r3]
 8009346:	4619      	mov	r1, r3
 8009348:	4a48      	ldr	r2, [pc, #288]	; (800946c <parseZionEEPROM+0x4c8>)
 800934a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800934e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<bytesInPreviousRead;x++){
 8009352:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009356:	3301      	adds	r3, #1
 8009358:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800935c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009360:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009362:	429a      	cmp	r2, r3
 8009364:	dbdd      	blt.n	8009322 <parseZionEEPROM+0x37e>
			}
			//grab the remaining bytes from the present buffer
			for(x=bytesInPreviousRead;x<4;x++){
 8009366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009368:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800936c:	e01c      	b.n	80093a8 <parseZionEEPROM+0x404>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 800936e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009372:	3310      	adds	r3, #16
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800937a:	4413      	add	r3, r2
 800937c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009380:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009382:	fb93 f2f2 	sdiv	r2, r3, r2
 8009386:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009388:	fb01 f202 	mul.w	r2, r1, r2
 800938c:	1a9b      	subs	r3, r3, r2
 800938e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009390:	5cd3      	ldrb	r3, [r2, r3]
 8009392:	4619      	mov	r1, r3
 8009394:	4a35      	ldr	r2, [pc, #212]	; (800946c <parseZionEEPROM+0x4c8>)
 8009396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800939a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=bytesInPreviousRead;x<4;x++){
 800939e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093a2:	3301      	adds	r3, #1
 80093a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80093a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093ac:	2b03      	cmp	r3, #3
 80093ae:	ddde      	ble.n	800936e <parseZionEEPROM+0x3ca>
 80093b0:	e052      	b.n	8009458 <parseZionEEPROM+0x4b4>
			}
		}
		else{
			//easy! all bytes are in the recent array. Grab them and store them.
			for(x=0;x<4;x++){
 80093b2:	2300      	movs	r3, #0
 80093b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80093b8:	e01c      	b.n	80093f4 <parseZionEEPROM+0x450>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 80093ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093be:	3310      	adds	r3, #16
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80093c6:	4413      	add	r3, r2
 80093c8:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80093cc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80093ce:	fb93 f2f2 	sdiv	r2, r3, r2
 80093d2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80093d4:	fb01 f202 	mul.w	r2, r1, r2
 80093d8:	1a9b      	subs	r3, r3, r2
 80093da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80093dc:	5cd3      	ldrb	r3, [r2, r3]
 80093de:	4619      	mov	r1, r3
 80093e0:	4a22      	ldr	r2, [pc, #136]	; (800946c <parseZionEEPROM+0x4c8>)
 80093e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 80093ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093ee:	3301      	adds	r3, #1
 80093f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80093f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093f8:	2b03      	cmp	r3, #3
 80093fa:	ddde      	ble.n	80093ba <parseZionEEPROM+0x416>
 80093fc:	e02c      	b.n	8009458 <parseZionEEPROM+0x4b4>
			}
		}
	}
	else{
		//send invalid data
		if(previousByteOfHeader[0] == -1){
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009404:	d114      	bne.n	8009430 <parseZionEEPROM+0x48c>
			//if eeprom is initialized but no device header data
			for(x=0;x<4;x++){
 8009406:	2300      	movs	r3, #0
 8009408:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800940c:	e00b      	b.n	8009426 <parseZionEEPROM+0x482>
				deviceHeaderBytes[x] = -2;
 800940e:	4a17      	ldr	r2, [pc, #92]	; (800946c <parseZionEEPROM+0x4c8>)
 8009410:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009414:	f06f 0101 	mvn.w	r1, #1
 8009418:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 800941c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009420:	3301      	adds	r3, #1
 8009422:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009426:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800942a:	2b03      	cmp	r3, #3
 800942c:	ddef      	ble.n	800940e <parseZionEEPROM+0x46a>
 800942e:	e013      	b.n	8009458 <parseZionEEPROM+0x4b4>
			}
		}
		//if eeprom is uninitialized
		else{
			for(x=0;x<4;x++){
 8009430:	2300      	movs	r3, #0
 8009432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009436:	e00b      	b.n	8009450 <parseZionEEPROM+0x4ac>
				deviceHeaderBytes[x] = -1;
 8009438:	4a0c      	ldr	r2, [pc, #48]	; (800946c <parseZionEEPROM+0x4c8>)
 800943a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800943e:	f04f 31ff 	mov.w	r1, #4294967295
 8009442:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 8009446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800944a:	3301      	adds	r3, #1
 800944c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009450:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009454:	2b03      	cmp	r3, #3
 8009456:	ddef      	ble.n	8009438 <parseZionEEPROM+0x494>
			}
		}
	}
	deviceHeaderBytes[4] = previousByteOfHeader[0];
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	4a04      	ldr	r2, [pc, #16]	; (800946c <parseZionEEPROM+0x4c8>)
 800945c:	6113      	str	r3, [r2, #16]
	return deviceHeaderBytes;
 800945e:	4b03      	ldr	r3, [pc, #12]	; (800946c <parseZionEEPROM+0x4c8>)
 8009460:	46c5      	mov	sp, r8
}
 8009462:	4618      	mov	r0, r3
 8009464:	3790      	adds	r7, #144	; 0x90
 8009466:	46bd      	mov	sp, r7
 8009468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800946c:	20003394 	.word	0x20003394

08009470 <writeDataToSpareEEPROM>:


void writeDataToSpareEEPROM(uint8_t * data, uint8_t chipAddress, uint16_t memoryAddress, int len,uint16_t timeout){
 8009470:	b590      	push	{r4, r7, lr}
 8009472:	b08b      	sub	sp, #44	; 0x2c
 8009474:	af04      	add	r7, sp, #16
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	607b      	str	r3, [r7, #4]
 800947a:	460b      	mov	r3, r1
 800947c:	72fb      	strb	r3, [r7, #11]
 800947e:	4613      	mov	r3, r2
 8009480:	813b      	strh	r3, [r7, #8]
	int bytes = 0;
 8009482:	2300      	movs	r3, #0
 8009484:	617b      	str	r3, [r7, #20]
	int writeSize=32; //32 bytes of data write are allowed per Page Write command
 8009486:	2320      	movs	r3, #32
 8009488:	613b      	str	r3, [r7, #16]
	while(bytes < len){
 800948a:	e024      	b.n	80094d6 <writeDataToSpareEEPROM+0x66>
		if((bytes+32)>len){
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	3320      	adds	r3, #32
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	429a      	cmp	r2, r3
 8009494:	da03      	bge.n	800949e <writeDataToSpareEEPROM+0x2e>
			writeSize=len-bytes; //partial page writes are allowed.
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	613b      	str	r3, [r7, #16]
		}
		HAL_I2C_Mem_Write(&SPARE_I2C,chipAddress,memoryAddress+bytes, I2C_MEMADD_SIZE_16BIT,data+bytes,writeSize,timeout);
 800949e:	7afb      	ldrb	r3, [r7, #11]
 80094a0:	b298      	uxth	r0, r3
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	893b      	ldrh	r3, [r7, #8]
 80094a8:	4413      	add	r3, r2
 80094aa:	b29c      	uxth	r4, r3
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	4413      	add	r3, r2
 80094b2:	693a      	ldr	r2, [r7, #16]
 80094b4:	b292      	uxth	r2, r2
 80094b6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80094b8:	9102      	str	r1, [sp, #8]
 80094ba:	9201      	str	r2, [sp, #4]
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	2302      	movs	r3, #2
 80094c0:	4622      	mov	r2, r4
 80094c2:	4601      	mov	r1, r0
 80094c4:	4808      	ldr	r0, [pc, #32]	; (80094e8 <writeDataToSpareEEPROM+0x78>)
 80094c6:	f001 ffd1 	bl	800b46c <HAL_I2C_Mem_Write>
		HAL_Delay(10); //give delay for EEPROM to write data to memory
 80094ca:	200a      	movs	r0, #10
 80094cc:	f000 f882 	bl	80095d4 <HAL_Delay>
		bytes+=32;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	3320      	adds	r3, #32
 80094d4:	617b      	str	r3, [r7, #20]
	while(bytes < len){
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	429a      	cmp	r2, r3
 80094dc:	dbd6      	blt.n	800948c <writeDataToSpareEEPROM+0x1c>
	}

}
 80094de:	bf00      	nop
 80094e0:	371c      	adds	r7, #28
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd90      	pop	{r4, r7, pc}
 80094e6:	bf00      	nop
 80094e8:	200291d8 	.word	0x200291d8

080094ec <readDataFromSpareEEPROM>:
//reads from the EEPROM can be continuous
void readDataFromSpareEEPROM(uint8_t * data, uint8_t chipAddress, uint16_t memoryAddress, int len,uint16_t timeout){
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af04      	add	r7, sp, #16
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	607b      	str	r3, [r7, #4]
 80094f6:	460b      	mov	r3, r1
 80094f8:	72fb      	strb	r3, [r7, #11]
 80094fa:	4613      	mov	r3, r2
 80094fc:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(&SPARE_I2C,chipAddress,memoryAddress, I2C_MEMADD_SIZE_16BIT,data,len,timeout);
 80094fe:	7afb      	ldrb	r3, [r7, #11]
 8009500:	b299      	uxth	r1, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	b29b      	uxth	r3, r3
 8009506:	8b3a      	ldrh	r2, [r7, #24]
 8009508:	8938      	ldrh	r0, [r7, #8]
 800950a:	9202      	str	r2, [sp, #8]
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	2302      	movs	r3, #2
 8009514:	4602      	mov	r2, r0
 8009516:	4803      	ldr	r0, [pc, #12]	; (8009524 <readDataFromSpareEEPROM+0x38>)
 8009518:	f002 f8bc 	bl	800b694 <HAL_I2C_Mem_Read>
}
 800951c:	bf00      	nop
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	200291d8 	.word	0x200291d8

08009528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009560 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800952c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800952e:	e003      	b.n	8009538 <LoopCopyDataInit>

08009530 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009530:	4b0c      	ldr	r3, [pc, #48]	; (8009564 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009532:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009534:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009536:	3104      	adds	r1, #4

08009538 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009538:	480b      	ldr	r0, [pc, #44]	; (8009568 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800953a:	4b0c      	ldr	r3, [pc, #48]	; (800956c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800953c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800953e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009540:	d3f6      	bcc.n	8009530 <CopyDataInit>
  ldr  r2, =_sbss
 8009542:	4a0b      	ldr	r2, [pc, #44]	; (8009570 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009544:	e002      	b.n	800954c <LoopFillZerobss>

08009546 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009546:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009548:	f842 3b04 	str.w	r3, [r2], #4

0800954c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800954c:	4b09      	ldr	r3, [pc, #36]	; (8009574 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800954e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009550:	d3f9      	bcc.n	8009546 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009552:	f7ff fcc1 	bl	8008ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009556:	f009 ffe9 	bl	801352c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800955a:	f7f8 fbcf 	bl	8001cfc <main>
  bx  lr    
 800955e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009560:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8009564:	08018878 	.word	0x08018878
  ldr  r0, =_sdata
 8009568:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800956c:	20000378 	.word	0x20000378
  ldr  r2, =_sbss
 8009570:	20000378 	.word	0x20000378
  ldr  r3, = _ebss
 8009574:	20031024 	.word	0x20031024

08009578 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009578:	e7fe      	b.n	8009578 <CAN1_RX0_IRQHandler>

0800957a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800957e:	2003      	movs	r0, #3
 8009580:	f000 fea3 	bl	800a2ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009584:	2000      	movs	r0, #0
 8009586:	f7ff fa69 	bl	8008a5c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800958a:	f7fe fc5b 	bl	8007e44 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	bd80      	pop	{r7, pc}

08009594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009594:	b480      	push	{r7}
 8009596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009598:	4b06      	ldr	r3, [pc, #24]	; (80095b4 <HAL_IncTick+0x20>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	461a      	mov	r2, r3
 800959e:	4b06      	ldr	r3, [pc, #24]	; (80095b8 <HAL_IncTick+0x24>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4413      	add	r3, r2
 80095a4:	4a04      	ldr	r2, [pc, #16]	; (80095b8 <HAL_IncTick+0x24>)
 80095a6:	6013      	str	r3, [r2, #0]
}
 80095a8:	bf00      	nop
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	200001a0 	.word	0x200001a0
 80095b8:	20030fdc 	.word	0x20030fdc

080095bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
  return uwTick;
 80095c0:	4b03      	ldr	r3, [pc, #12]	; (80095d0 <HAL_GetTick+0x14>)
 80095c2:	681b      	ldr	r3, [r3, #0]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	20030fdc 	.word	0x20030fdc

080095d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80095dc:	f7ff ffee 	bl	80095bc <HAL_GetTick>
 80095e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ec:	d005      	beq.n	80095fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80095ee:	4b09      	ldr	r3, [pc, #36]	; (8009614 <HAL_Delay+0x40>)
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	461a      	mov	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	4413      	add	r3, r2
 80095f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80095fa:	bf00      	nop
 80095fc:	f7ff ffde 	bl	80095bc <HAL_GetTick>
 8009600:	4602      	mov	r2, r0
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	429a      	cmp	r2, r3
 800960a:	d8f7      	bhi.n	80095fc <HAL_Delay+0x28>
  {
  }
}
 800960c:	bf00      	nop
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	200001a0 	.word	0x200001a0

08009618 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e031      	b.n	8009692 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009632:	2b00      	cmp	r3, #0
 8009634:	d109      	bne.n	800964a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7fe fc2c 	bl	8007e94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964e:	f003 0310 	and.w	r3, r3, #16
 8009652:	2b00      	cmp	r3, #0
 8009654:	d116      	bne.n	8009684 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800965a:	4b10      	ldr	r3, [pc, #64]	; (800969c <HAL_ADC_Init+0x84>)
 800965c:	4013      	ands	r3, r2
 800965e:	f043 0202 	orr.w	r2, r3, #2
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fbfc 	bl	8009e64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009676:	f023 0303 	bic.w	r3, r3, #3
 800967a:	f043 0201 	orr.w	r2, r3, #1
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	641a      	str	r2, [r3, #64]	; 0x40
 8009682:	e001      	b.n	8009688 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009690:	7bfb      	ldrb	r3, [r7, #15]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	ffffeefd 	.word	0xffffeefd

080096a0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80096a8:	2300      	movs	r3, #0
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	2300      	movs	r3, #0
 80096ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 0302 	and.w	r3, r3, #2
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	bf0c      	ite	eq
 80096be:	2301      	moveq	r3, #1
 80096c0:	2300      	movne	r3, #0
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	f003 0320 	and.w	r3, r3, #32
 80096d0:	2b20      	cmp	r3, #32
 80096d2:	bf0c      	ite	eq
 80096d4:	2301      	moveq	r3, #1
 80096d6:	2300      	movne	r3, #0
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d049      	beq.n	8009776 <HAL_ADC_IRQHandler+0xd6>
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d046      	beq.n	8009776 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ec:	f003 0310 	and.w	r3, r3, #16
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d105      	bne.n	8009700 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d12b      	bne.n	8009766 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009712:	2b00      	cmp	r3, #0
 8009714:	d127      	bne.n	8009766 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009720:	2b00      	cmp	r3, #0
 8009722:	d006      	beq.n	8009732 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800972e:	2b00      	cmp	r3, #0
 8009730:	d119      	bne.n	8009766 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	685a      	ldr	r2, [r3, #4]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 0220 	bic.w	r2, r2, #32
 8009740:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009756:	2b00      	cmp	r3, #0
 8009758:	d105      	bne.n	8009766 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975e:	f043 0201 	orr.w	r2, r3, #1
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7fa fd6a 	bl	8004240 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f06f 0212 	mvn.w	r2, #18
 8009774:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0304 	and.w	r3, r3, #4
 8009780:	2b04      	cmp	r3, #4
 8009782:	bf0c      	ite	eq
 8009784:	2301      	moveq	r3, #1
 8009786:	2300      	movne	r3, #0
 8009788:	b2db      	uxtb	r3, r3
 800978a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009796:	2b80      	cmp	r3, #128	; 0x80
 8009798:	bf0c      	ite	eq
 800979a:	2301      	moveq	r3, #1
 800979c:	2300      	movne	r3, #0
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d057      	beq.n	8009858 <HAL_ADC_IRQHandler+0x1b8>
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d054      	beq.n	8009858 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b2:	f003 0310 	and.w	r3, r3, #16
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d105      	bne.n	80097c6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d139      	bne.n	8009848 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097da:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d006      	beq.n	80097f0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d12b      	bne.n	8009848 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d124      	bne.n	8009848 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009808:	2b00      	cmp	r3, #0
 800980a:	d11d      	bne.n	8009848 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8009810:	2b00      	cmp	r3, #0
 8009812:	d119      	bne.n	8009848 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	685a      	ldr	r2, [r3, #4]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009822:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009828:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009838:	2b00      	cmp	r3, #0
 800983a:	d105      	bne.n	8009848 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009840:	f043 0201 	orr.w	r2, r3, #1
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fc87 	bl	800a15c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f06f 020c 	mvn.w	r2, #12
 8009856:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b01      	cmp	r3, #1
 8009864:	bf0c      	ite	eq
 8009866:	2301      	moveq	r3, #1
 8009868:	2300      	movne	r3, #0
 800986a:	b2db      	uxtb	r3, r3
 800986c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009878:	2b40      	cmp	r3, #64	; 0x40
 800987a:	bf0c      	ite	eq
 800987c:	2301      	moveq	r3, #1
 800987e:	2300      	movne	r3, #0
 8009880:	b2db      	uxtb	r3, r3
 8009882:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d017      	beq.n	80098ba <HAL_ADC_IRQHandler+0x21a>
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d014      	beq.n	80098ba <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b01      	cmp	r3, #1
 800989c:	d10d      	bne.n	80098ba <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f97c 	bl	8009ba8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f06f 0201 	mvn.w	r2, #1
 80098b8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 0320 	and.w	r3, r3, #32
 80098c4:	2b20      	cmp	r3, #32
 80098c6:	bf0c      	ite	eq
 80098c8:	2301      	moveq	r3, #1
 80098ca:	2300      	movne	r3, #0
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80098da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80098de:	bf0c      	ite	eq
 80098e0:	2301      	moveq	r3, #1
 80098e2:	2300      	movne	r3, #0
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d015      	beq.n	800991a <HAL_ADC_IRQHandler+0x27a>
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d012      	beq.n	800991a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f8:	f043 0202 	orr.w	r2, r3, #2
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f06f 0220 	mvn.w	r2, #32
 8009908:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f956 	bl	8009bbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f06f 0220 	mvn.w	r2, #32
 8009918:	601a      	str	r2, [r3, #0]
  }
}
 800991a:	bf00      	nop
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
	...

08009924 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800993a:	2b01      	cmp	r3, #1
 800993c:	d101      	bne.n	8009942 <HAL_ADC_Start_DMA+0x1e>
 800993e:	2302      	movs	r3, #2
 8009940:	e0c7      	b.n	8009ad2 <HAL_ADC_Start_DMA+0x1ae>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	f003 0301 	and.w	r3, r3, #1
 8009954:	2b01      	cmp	r3, #1
 8009956:	d018      	beq.n	800998a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	689a      	ldr	r2, [r3, #8]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f042 0201 	orr.w	r2, r2, #1
 8009966:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8009968:	4b5c      	ldr	r3, [pc, #368]	; (8009adc <HAL_ADC_Start_DMA+0x1b8>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a5c      	ldr	r2, [pc, #368]	; (8009ae0 <HAL_ADC_Start_DMA+0x1bc>)
 800996e:	fba2 2303 	umull	r2, r3, r2, r3
 8009972:	0c9a      	lsrs	r2, r3, #18
 8009974:	4613      	mov	r3, r2
 8009976:	005b      	lsls	r3, r3, #1
 8009978:	4413      	add	r3, r2
 800997a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800997c:	e002      	b.n	8009984 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	3b01      	subs	r3, #1
 8009982:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1f9      	bne.n	800997e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f003 0301 	and.w	r3, r3, #1
 8009994:	2b01      	cmp	r3, #1
 8009996:	f040 809b 	bne.w	8009ad0 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800999e:	4b51      	ldr	r3, [pc, #324]	; (8009ae4 <HAL_ADC_Start_DMA+0x1c0>)
 80099a0:	4013      	ands	r3, r2
 80099a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d007      	beq.n	80099c8 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80099c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099d4:	d106      	bne.n	80099e4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099da:	f023 0206 	bic.w	r2, r3, #6
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	645a      	str	r2, [r3, #68]	; 0x44
 80099e2:	e002      	b.n	80099ea <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f6:	4a3c      	ldr	r2, [pc, #240]	; (8009ae8 <HAL_ADC_Start_DMA+0x1c4>)
 80099f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fe:	4a3b      	ldr	r2, [pc, #236]	; (8009aec <HAL_ADC_Start_DMA+0x1c8>)
 8009a00:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a06:	4a3a      	ldr	r2, [pc, #232]	; (8009af0 <HAL_ADC_Start_DMA+0x1cc>)
 8009a08:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009a12:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	685a      	ldr	r2, [r3, #4]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009a22:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	689a      	ldr	r2, [r3, #8]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a32:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	334c      	adds	r3, #76	; 0x4c
 8009a3e:	4619      	mov	r1, r3
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f000 fd24 	bl	800a490 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8009a48:	4b2a      	ldr	r3, [pc, #168]	; (8009af4 <HAL_ADC_Start_DMA+0x1d0>)
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	f003 031f 	and.w	r3, r3, #31
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10f      	bne.n	8009a74 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d136      	bne.n	8009ad0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	689a      	ldr	r2, [r3, #8]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009a70:	609a      	str	r2, [r3, #8]
 8009a72:	e02d      	b.n	8009ad0 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a1f      	ldr	r2, [pc, #124]	; (8009af8 <HAL_ADC_Start_DMA+0x1d4>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d10e      	bne.n	8009a9c <HAL_ADC_Start_DMA+0x178>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d107      	bne.n	8009a9c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	689a      	ldr	r2, [r3, #8]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009a9a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8009a9c:	4b15      	ldr	r3, [pc, #84]	; (8009af4 <HAL_ADC_Start_DMA+0x1d0>)
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	f003 0310 	and.w	r3, r3, #16
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d113      	bne.n	8009ad0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a13      	ldr	r2, [pc, #76]	; (8009afc <HAL_ADC_Start_DMA+0x1d8>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d10e      	bne.n	8009ad0 <HAL_ADC_Start_DMA+0x1ac>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d107      	bne.n	8009ad0 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	689a      	ldr	r2, [r3, #8]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009ace:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	20000198 	.word	0x20000198
 8009ae0:	431bde83 	.word	0x431bde83
 8009ae4:	fffff8fe 	.word	0xfffff8fe
 8009ae8:	0800a059 	.word	0x0800a059
 8009aec:	0800a113 	.word	0x0800a113
 8009af0:	0800a12f 	.word	0x0800a12f
 8009af4:	40012300 	.word	0x40012300
 8009af8:	40012000 	.word	0x40012000
 8009afc:	40012200 	.word	0x40012200

08009b00 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d101      	bne.n	8009b1a <HAL_ADC_Stop_DMA+0x1a>
 8009b16:	2302      	movs	r3, #2
 8009b18:	e036      	b.n	8009b88 <HAL_ADC_Stop_DMA+0x88>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	689a      	ldr	r2, [r3, #8]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f022 0201 	bic.w	r2, r2, #1
 8009b30:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	f003 0301 	and.w	r3, r3, #1
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d11e      	bne.n	8009b7e <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	689a      	ldr	r2, [r3, #8]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b4e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b54:	4618      	mov	r0, r3
 8009b56:	f000 fcfb 	bl	800a550 <HAL_DMA_Abort>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	685a      	ldr	r2, [r3, #4]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8009b6c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b72:	4b07      	ldr	r3, [pc, #28]	; (8009b90 <HAL_ADC_Stop_DMA+0x90>)
 8009b74:	4013      	ands	r3, r2
 8009b76:	f043 0201 	orr.w	r2, r3, #1
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8009b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	ffffeefe 	.word	0xffffeefe

08009b94 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d101      	bne.n	8009bec <HAL_ADC_ConfigChannel+0x1c>
 8009be8:	2302      	movs	r3, #2
 8009bea:	e12a      	b.n	8009e42 <HAL_ADC_ConfigChannel+0x272>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b09      	cmp	r3, #9
 8009bfa:	d93a      	bls.n	8009c72 <HAL_ADC_ConfigChannel+0xa2>
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c04:	d035      	beq.n	8009c72 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68d9      	ldr	r1, [r3, #12]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	461a      	mov	r2, r3
 8009c14:	4613      	mov	r3, r2
 8009c16:	005b      	lsls	r3, r3, #1
 8009c18:	4413      	add	r3, r2
 8009c1a:	3b1e      	subs	r3, #30
 8009c1c:	2207      	movs	r2, #7
 8009c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c22:	43da      	mvns	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	400a      	ands	r2, r1
 8009c2a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a87      	ldr	r2, [pc, #540]	; (8009e50 <HAL_ADC_ConfigChannel+0x280>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d10a      	bne.n	8009c4c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68d9      	ldr	r1, [r3, #12]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	061a      	lsls	r2, r3, #24
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	430a      	orrs	r2, r1
 8009c48:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009c4a:	e035      	b.n	8009cb8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68d9      	ldr	r1, [r3, #12]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	689a      	ldr	r2, [r3, #8]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	4603      	mov	r3, r0
 8009c60:	005b      	lsls	r3, r3, #1
 8009c62:	4403      	add	r3, r0
 8009c64:	3b1e      	subs	r3, #30
 8009c66:	409a      	lsls	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	430a      	orrs	r2, r1
 8009c6e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009c70:	e022      	b.n	8009cb8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	6919      	ldr	r1, [r3, #16]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	461a      	mov	r2, r3
 8009c80:	4613      	mov	r3, r2
 8009c82:	005b      	lsls	r3, r3, #1
 8009c84:	4413      	add	r3, r2
 8009c86:	2207      	movs	r2, #7
 8009c88:	fa02 f303 	lsl.w	r3, r2, r3
 8009c8c:	43da      	mvns	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	400a      	ands	r2, r1
 8009c94:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	6919      	ldr	r1, [r3, #16]
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	689a      	ldr	r2, [r3, #8]
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	4603      	mov	r3, r0
 8009caa:	005b      	lsls	r3, r3, #1
 8009cac:	4403      	add	r3, r0
 8009cae:	409a      	lsls	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	430a      	orrs	r2, r1
 8009cb6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	2b06      	cmp	r3, #6
 8009cbe:	d824      	bhi.n	8009d0a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	3b05      	subs	r3, #5
 8009cd2:	221f      	movs	r2, #31
 8009cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd8:	43da      	mvns	r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	400a      	ands	r2, r1
 8009ce0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	4618      	mov	r0, r3
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	685a      	ldr	r2, [r3, #4]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	3b05      	subs	r3, #5
 8009cfc:	fa00 f203 	lsl.w	r2, r0, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	430a      	orrs	r2, r1
 8009d06:	635a      	str	r2, [r3, #52]	; 0x34
 8009d08:	e04c      	b.n	8009da4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	2b0c      	cmp	r3, #12
 8009d10:	d824      	bhi.n	8009d5c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	685a      	ldr	r2, [r3, #4]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4413      	add	r3, r2
 8009d22:	3b23      	subs	r3, #35	; 0x23
 8009d24:	221f      	movs	r2, #31
 8009d26:	fa02 f303 	lsl.w	r3, r2, r3
 8009d2a:	43da      	mvns	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	400a      	ands	r2, r1
 8009d32:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	4618      	mov	r0, r3
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	685a      	ldr	r2, [r3, #4]
 8009d46:	4613      	mov	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	3b23      	subs	r3, #35	; 0x23
 8009d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	430a      	orrs	r2, r1
 8009d58:	631a      	str	r2, [r3, #48]	; 0x30
 8009d5a:	e023      	b.n	8009da4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	4613      	mov	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4413      	add	r3, r2
 8009d6c:	3b41      	subs	r3, #65	; 0x41
 8009d6e:	221f      	movs	r2, #31
 8009d70:	fa02 f303 	lsl.w	r3, r2, r3
 8009d74:	43da      	mvns	r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	400a      	ands	r2, r1
 8009d7c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	4613      	mov	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	3b41      	subs	r3, #65	; 0x41
 8009d98:	fa00 f203 	lsl.w	r2, r0, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	430a      	orrs	r2, r1
 8009da2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a2a      	ldr	r2, [pc, #168]	; (8009e54 <HAL_ADC_ConfigChannel+0x284>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d10a      	bne.n	8009dc4 <HAL_ADC_ConfigChannel+0x1f4>
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009db6:	d105      	bne.n	8009dc4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8009db8:	4b27      	ldr	r3, [pc, #156]	; (8009e58 <HAL_ADC_ConfigChannel+0x288>)
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	4a26      	ldr	r2, [pc, #152]	; (8009e58 <HAL_ADC_ConfigChannel+0x288>)
 8009dbe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8009dc2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a22      	ldr	r2, [pc, #136]	; (8009e54 <HAL_ADC_ConfigChannel+0x284>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d109      	bne.n	8009de2 <HAL_ADC_ConfigChannel+0x212>
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b12      	cmp	r3, #18
 8009dd4:	d105      	bne.n	8009de2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8009dd6:	4b20      	ldr	r3, [pc, #128]	; (8009e58 <HAL_ADC_ConfigChannel+0x288>)
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	4a1f      	ldr	r2, [pc, #124]	; (8009e58 <HAL_ADC_ConfigChannel+0x288>)
 8009ddc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009de0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a1b      	ldr	r2, [pc, #108]	; (8009e54 <HAL_ADC_ConfigChannel+0x284>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d125      	bne.n	8009e38 <HAL_ADC_ConfigChannel+0x268>
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a17      	ldr	r2, [pc, #92]	; (8009e50 <HAL_ADC_ConfigChannel+0x280>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d003      	beq.n	8009dfe <HAL_ADC_ConfigChannel+0x22e>
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2b11      	cmp	r3, #17
 8009dfc:	d11c      	bne.n	8009e38 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8009dfe:	4b16      	ldr	r3, [pc, #88]	; (8009e58 <HAL_ADC_ConfigChannel+0x288>)
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	4a15      	ldr	r2, [pc, #84]	; (8009e58 <HAL_ADC_ConfigChannel+0x288>)
 8009e04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e08:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a10      	ldr	r2, [pc, #64]	; (8009e50 <HAL_ADC_ConfigChannel+0x280>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d111      	bne.n	8009e38 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8009e14:	4b11      	ldr	r3, [pc, #68]	; (8009e5c <HAL_ADC_ConfigChannel+0x28c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a11      	ldr	r2, [pc, #68]	; (8009e60 <HAL_ADC_ConfigChannel+0x290>)
 8009e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e1e:	0c9a      	lsrs	r2, r3, #18
 8009e20:	4613      	mov	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	005b      	lsls	r3, r3, #1
 8009e28:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8009e2a:	e002      	b.n	8009e32 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1f9      	bne.n	8009e2c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	10000012 	.word	0x10000012
 8009e54:	40012000 	.word	0x40012000
 8009e58:	40012300 	.word	0x40012300
 8009e5c:	20000198 	.word	0x20000198
 8009e60:	431bde83 	.word	0x431bde83

08009e64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8009e6c:	4b78      	ldr	r3, [pc, #480]	; (800a050 <ADC_Init+0x1ec>)
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	4a77      	ldr	r2, [pc, #476]	; (800a050 <ADC_Init+0x1ec>)
 8009e72:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009e76:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8009e78:	4b75      	ldr	r3, [pc, #468]	; (800a050 <ADC_Init+0x1ec>)
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	4973      	ldr	r1, [pc, #460]	; (800a050 <ADC_Init+0x1ec>)
 8009e82:	4313      	orrs	r3, r2
 8009e84:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	685a      	ldr	r2, [r3, #4]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	6859      	ldr	r1, [r3, #4]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	021a      	lsls	r2, r3, #8
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	430a      	orrs	r2, r1
 8009ea8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	685a      	ldr	r2, [r3, #4]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009eb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6859      	ldr	r1, [r3, #4]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	689a      	ldr	r2, [r3, #8]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	430a      	orrs	r2, r1
 8009eca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	689a      	ldr	r2, [r3, #8]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009eda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6899      	ldr	r1, [r3, #8]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68da      	ldr	r2, [r3, #12]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef2:	4a58      	ldr	r2, [pc, #352]	; (800a054 <ADC_Init+0x1f0>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d022      	beq.n	8009f3e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689a      	ldr	r2, [r3, #8]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009f06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	6899      	ldr	r1, [r3, #8]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	430a      	orrs	r2, r1
 8009f18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	689a      	ldr	r2, [r3, #8]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009f28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	6899      	ldr	r1, [r3, #8]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	430a      	orrs	r2, r1
 8009f3a:	609a      	str	r2, [r3, #8]
 8009f3c:	e00f      	b.n	8009f5e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	689a      	ldr	r2, [r3, #8]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009f4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689a      	ldr	r2, [r3, #8]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009f5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	689a      	ldr	r2, [r3, #8]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f022 0202 	bic.w	r2, r2, #2
 8009f6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	6899      	ldr	r1, [r3, #8]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	699b      	ldr	r3, [r3, #24]
 8009f78:	005a      	lsls	r2, r3, #1
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	430a      	orrs	r2, r1
 8009f80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d01b      	beq.n	8009fc4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	685a      	ldr	r2, [r3, #4]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	685a      	ldr	r2, [r3, #4]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009faa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	6859      	ldr	r1, [r3, #4]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	035a      	lsls	r2, r3, #13
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	605a      	str	r2, [r3, #4]
 8009fc2:	e007      	b.n	8009fd4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	685a      	ldr	r2, [r3, #4]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fd2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	69db      	ldr	r3, [r3, #28]
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	051a      	lsls	r2, r3, #20
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	430a      	orrs	r2, r1
 8009ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	689a      	ldr	r2, [r3, #8]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a008:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	6899      	ldr	r1, [r3, #8]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a016:	025a      	lsls	r2, r3, #9
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	430a      	orrs	r2, r1
 800a01e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	689a      	ldr	r2, [r3, #8]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a02e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6899      	ldr	r1, [r3, #8]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	029a      	lsls	r2, r3, #10
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	430a      	orrs	r2, r1
 800a042:	609a      	str	r2, [r3, #8]
}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	40012300 	.word	0x40012300
 800a054:	0f000001 	.word	0x0f000001

0800a058 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a064:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d13c      	bne.n	800a0ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a076:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d12b      	bne.n	800a0e4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a090:	2b00      	cmp	r3, #0
 800a092:	d127      	bne.n	800a0e4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d006      	beq.n	800a0b0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d119      	bne.n	800a0e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	685a      	ldr	r2, [r3, #4]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f022 0220 	bic.w	r2, r2, #32
 800a0be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d105      	bne.n	800a0e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0dc:	f043 0201 	orr.w	r2, r3, #1
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f7fa f8ab 	bl	8004240 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a0ea:	e00e      	b.n	800a10a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f0:	f003 0310 	and.w	r3, r3, #16
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d003      	beq.n	800a100 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f7ff fd5f 	bl	8009bbc <HAL_ADC_ErrorCallback>
}
 800a0fe:	e004      	b.n	800a10a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	4798      	blx	r3
}
 800a10a:	bf00      	nop
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b084      	sub	sp, #16
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f7ff fd37 	bl	8009b94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a126:	bf00      	nop
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b084      	sub	sp, #16
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2240      	movs	r2, #64	; 0x40
 800a140:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a146:	f043 0204 	orr.w	r2, r3, #4
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f7ff fd34 	bl	8009bbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a154:	bf00      	nop
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f003 0307 	and.w	r3, r3, #7
 800a17e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a180:	4b0b      	ldr	r3, [pc, #44]	; (800a1b0 <__NVIC_SetPriorityGrouping+0x40>)
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a18c:	4013      	ands	r3, r2
 800a18e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a198:	4b06      	ldr	r3, [pc, #24]	; (800a1b4 <__NVIC_SetPriorityGrouping+0x44>)
 800a19a:	4313      	orrs	r3, r2
 800a19c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a19e:	4a04      	ldr	r2, [pc, #16]	; (800a1b0 <__NVIC_SetPriorityGrouping+0x40>)
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	60d3      	str	r3, [r2, #12]
}
 800a1a4:	bf00      	nop
 800a1a6:	3714      	adds	r7, #20
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr
 800a1b0:	e000ed00 	.word	0xe000ed00
 800a1b4:	05fa0000 	.word	0x05fa0000

0800a1b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a1bc:	4b04      	ldr	r3, [pc, #16]	; (800a1d0 <__NVIC_GetPriorityGrouping+0x18>)
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	0a1b      	lsrs	r3, r3, #8
 800a1c2:	f003 0307 	and.w	r3, r3, #7
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr
 800a1d0:	e000ed00 	.word	0xe000ed00

0800a1d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	4603      	mov	r3, r0
 800a1dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	db0b      	blt.n	800a1fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a1e6:	79fb      	ldrb	r3, [r7, #7]
 800a1e8:	f003 021f 	and.w	r2, r3, #31
 800a1ec:	4907      	ldr	r1, [pc, #28]	; (800a20c <__NVIC_EnableIRQ+0x38>)
 800a1ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1f2:	095b      	lsrs	r3, r3, #5
 800a1f4:	2001      	movs	r0, #1
 800a1f6:	fa00 f202 	lsl.w	r2, r0, r2
 800a1fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a1fe:	bf00      	nop
 800a200:	370c      	adds	r7, #12
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop
 800a20c:	e000e100 	.word	0xe000e100

0800a210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	6039      	str	r1, [r7, #0]
 800a21a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a21c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a220:	2b00      	cmp	r3, #0
 800a222:	db0a      	blt.n	800a23a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	b2da      	uxtb	r2, r3
 800a228:	490c      	ldr	r1, [pc, #48]	; (800a25c <__NVIC_SetPriority+0x4c>)
 800a22a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a22e:	0112      	lsls	r2, r2, #4
 800a230:	b2d2      	uxtb	r2, r2
 800a232:	440b      	add	r3, r1
 800a234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a238:	e00a      	b.n	800a250 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	4908      	ldr	r1, [pc, #32]	; (800a260 <__NVIC_SetPriority+0x50>)
 800a240:	79fb      	ldrb	r3, [r7, #7]
 800a242:	f003 030f 	and.w	r3, r3, #15
 800a246:	3b04      	subs	r3, #4
 800a248:	0112      	lsls	r2, r2, #4
 800a24a:	b2d2      	uxtb	r2, r2
 800a24c:	440b      	add	r3, r1
 800a24e:	761a      	strb	r2, [r3, #24]
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	e000e100 	.word	0xe000e100
 800a260:	e000ed00 	.word	0xe000ed00

0800a264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a264:	b480      	push	{r7}
 800a266:	b089      	sub	sp, #36	; 0x24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f003 0307 	and.w	r3, r3, #7
 800a276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	f1c3 0307 	rsb	r3, r3, #7
 800a27e:	2b04      	cmp	r3, #4
 800a280:	bf28      	it	cs
 800a282:	2304      	movcs	r3, #4
 800a284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	3304      	adds	r3, #4
 800a28a:	2b06      	cmp	r3, #6
 800a28c:	d902      	bls.n	800a294 <NVIC_EncodePriority+0x30>
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	3b03      	subs	r3, #3
 800a292:	e000      	b.n	800a296 <NVIC_EncodePriority+0x32>
 800a294:	2300      	movs	r3, #0
 800a296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a298:	f04f 32ff 	mov.w	r2, #4294967295
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a2:	43da      	mvns	r2, r3
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	401a      	ands	r2, r3
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a2ac:	f04f 31ff 	mov.w	r1, #4294967295
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a2b6:	43d9      	mvns	r1, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2bc:	4313      	orrs	r3, r2
         );
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3724      	adds	r7, #36	; 0x24
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b082      	sub	sp, #8
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f7ff ff4c 	bl	800a170 <__NVIC_SetPriorityGrouping>
}
 800a2d8:	bf00      	nop
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
 800a2ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a2f2:	f7ff ff61 	bl	800a1b8 <__NVIC_GetPriorityGrouping>
 800a2f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	68b9      	ldr	r1, [r7, #8]
 800a2fc:	6978      	ldr	r0, [r7, #20]
 800a2fe:	f7ff ffb1 	bl	800a264 <NVIC_EncodePriority>
 800a302:	4602      	mov	r2, r0
 800a304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a308:	4611      	mov	r1, r2
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7ff ff80 	bl	800a210 <__NVIC_SetPriority>
}
 800a310:	bf00      	nop
 800a312:	3718      	adds	r7, #24
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	4603      	mov	r3, r0
 800a320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a326:	4618      	mov	r0, r3
 800a328:	f7ff ff54 	bl	800a1d4 <__NVIC_EnableIRQ>
}
 800a32c:	bf00      	nop
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a340:	f7ff f93c 	bl	80095bc <HAL_GetTick>
 800a344:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e099      	b.n	800a484 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2202      	movs	r2, #2
 800a35c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f022 0201 	bic.w	r2, r2, #1
 800a36e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a370:	e00f      	b.n	800a392 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a372:	f7ff f923 	bl	80095bc <HAL_GetTick>
 800a376:	4602      	mov	r2, r0
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	2b05      	cmp	r3, #5
 800a37e:	d908      	bls.n	800a392 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2220      	movs	r2, #32
 800a384:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2203      	movs	r2, #3
 800a38a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a38e:	2303      	movs	r3, #3
 800a390:	e078      	b.n	800a484 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0301 	and.w	r3, r3, #1
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d1e8      	bne.n	800a372 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	4b38      	ldr	r3, [pc, #224]	; (800a48c <HAL_DMA_Init+0x158>)
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3de:	697a      	ldr	r2, [r7, #20]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e8:	2b04      	cmp	r3, #4
 800a3ea:	d107      	bne.n	800a3fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	697a      	ldr	r2, [r7, #20]
 800a402:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	f023 0307 	bic.w	r3, r3, #7
 800a412:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a418:	697a      	ldr	r2, [r7, #20]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a422:	2b04      	cmp	r3, #4
 800a424:	d117      	bne.n	800a456 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a42a:	697a      	ldr	r2, [r7, #20]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00e      	beq.n	800a456 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 fb09 	bl	800aa50 <DMA_CheckFifoParam>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d008      	beq.n	800a456 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2240      	movs	r2, #64	; 0x40
 800a448:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2201      	movs	r2, #1
 800a44e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a452:	2301      	movs	r3, #1
 800a454:	e016      	b.n	800a484 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fac0 	bl	800a9e4 <DMA_CalcBaseAndBitshift>
 800a464:	4603      	mov	r3, r0
 800a466:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a46c:	223f      	movs	r2, #63	; 0x3f
 800a46e:	409a      	lsls	r2, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3718      	adds	r7, #24
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	e010803f 	.word	0xe010803f

0800a490 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
 800a49c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d101      	bne.n	800a4b6 <HAL_DMA_Start_IT+0x26>
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	e048      	b.n	800a548 <HAL_DMA_Start_IT+0xb8>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d137      	bne.n	800a53a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	68b9      	ldr	r1, [r7, #8]
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f000 fa52 	bl	800a988 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4e8:	223f      	movs	r2, #63	; 0x3f
 800a4ea:	409a      	lsls	r2, r3
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0216 	orr.w	r2, r2, #22
 800a4fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	695a      	ldr	r2, [r3, #20]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a50e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a514:	2b00      	cmp	r3, #0
 800a516:	d007      	beq.n	800a528 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f042 0208 	orr.w	r2, r2, #8
 800a526:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f042 0201 	orr.w	r2, r2, #1
 800a536:	601a      	str	r2, [r3, #0]
 800a538:	e005      	b.n	800a546 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a542:	2302      	movs	r3, #2
 800a544:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a546:	7dfb      	ldrb	r3, [r7, #23]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3718      	adds	r7, #24
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a55c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a55e:	f7ff f82d 	bl	80095bc <HAL_GetTick>
 800a562:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d008      	beq.n	800a582 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2280      	movs	r2, #128	; 0x80
 800a574:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	e052      	b.n	800a628 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f022 0216 	bic.w	r2, r2, #22
 800a590:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	695a      	ldr	r2, [r3, #20]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d103      	bne.n	800a5b2 <HAL_DMA_Abort+0x62>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d007      	beq.n	800a5c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f022 0208 	bic.w	r2, r2, #8
 800a5c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f022 0201 	bic.w	r2, r2, #1
 800a5d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a5d2:	e013      	b.n	800a5fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a5d4:	f7fe fff2 	bl	80095bc <HAL_GetTick>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	2b05      	cmp	r3, #5
 800a5e0:	d90c      	bls.n	800a5fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2203      	movs	r2, #3
 800a5f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e015      	b.n	800a628 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 0301 	and.w	r3, r3, #1
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1e4      	bne.n	800a5d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a60e:	223f      	movs	r2, #63	; 0x3f
 800a610:	409a      	lsls	r2, r3
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b02      	cmp	r3, #2
 800a642:	d004      	beq.n	800a64e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2280      	movs	r2, #128	; 0x80
 800a648:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e00c      	b.n	800a668 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2205      	movs	r2, #5
 800a652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f022 0201 	bic.w	r2, r2, #1
 800a664:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800a680:	4b92      	ldr	r3, [pc, #584]	; (800a8cc <HAL_DMA_IRQHandler+0x258>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a92      	ldr	r2, [pc, #584]	; (800a8d0 <HAL_DMA_IRQHandler+0x25c>)
 800a686:	fba2 2303 	umull	r2, r3, r2, r3
 800a68a:	0a9b      	lsrs	r3, r3, #10
 800a68c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a692:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a69e:	2208      	movs	r2, #8
 800a6a0:	409a      	lsls	r2, r3
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d01a      	beq.n	800a6e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 0304 	and.w	r3, r3, #4
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d013      	beq.n	800a6e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f022 0204 	bic.w	r2, r2, #4
 800a6c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6cc:	2208      	movs	r2, #8
 800a6ce:	409a      	lsls	r2, r3
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d8:	f043 0201 	orr.w	r2, r3, #1
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	409a      	lsls	r2, r3
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d012      	beq.n	800a716 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00b      	beq.n	800a716 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a702:	2201      	movs	r2, #1
 800a704:	409a      	lsls	r2, r3
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a70e:	f043 0202 	orr.w	r2, r3, #2
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a71a:	2204      	movs	r2, #4
 800a71c:	409a      	lsls	r2, r3
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	4013      	ands	r3, r2
 800a722:	2b00      	cmp	r3, #0
 800a724:	d012      	beq.n	800a74c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 0302 	and.w	r3, r3, #2
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00b      	beq.n	800a74c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a738:	2204      	movs	r2, #4
 800a73a:	409a      	lsls	r2, r3
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a744:	f043 0204 	orr.w	r2, r3, #4
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a750:	2210      	movs	r2, #16
 800a752:	409a      	lsls	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	4013      	ands	r3, r2
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d043      	beq.n	800a7e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 0308 	and.w	r3, r3, #8
 800a766:	2b00      	cmp	r3, #0
 800a768:	d03c      	beq.n	800a7e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a76e:	2210      	movs	r2, #16
 800a770:	409a      	lsls	r2, r3
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a780:	2b00      	cmp	r3, #0
 800a782:	d018      	beq.n	800a7b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d108      	bne.n	800a7a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a796:	2b00      	cmp	r3, #0
 800a798:	d024      	beq.n	800a7e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	4798      	blx	r3
 800a7a2:	e01f      	b.n	800a7e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d01b      	beq.n	800a7e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	4798      	blx	r3
 800a7b4:	e016      	b.n	800a7e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d107      	bne.n	800a7d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f022 0208 	bic.w	r2, r2, #8
 800a7d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d003      	beq.n	800a7e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7e8:	2220      	movs	r2, #32
 800a7ea:	409a      	lsls	r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	4013      	ands	r3, r2
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 808e 	beq.w	800a912 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 0310 	and.w	r3, r3, #16
 800a800:	2b00      	cmp	r3, #0
 800a802:	f000 8086 	beq.w	800a912 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a80a:	2220      	movs	r2, #32
 800a80c:	409a      	lsls	r2, r3
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	2b05      	cmp	r3, #5
 800a81c:	d136      	bne.n	800a88c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f022 0216 	bic.w	r2, r2, #22
 800a82c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	695a      	ldr	r2, [r3, #20]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a83c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a842:	2b00      	cmp	r3, #0
 800a844:	d103      	bne.n	800a84e <HAL_DMA_IRQHandler+0x1da>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d007      	beq.n	800a85e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f022 0208 	bic.w	r2, r2, #8
 800a85c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a862:	223f      	movs	r2, #63	; 0x3f
 800a864:	409a      	lsls	r2, r3
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d07d      	beq.n	800a97e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	4798      	blx	r3
        }
        return;
 800a88a:	e078      	b.n	800a97e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a896:	2b00      	cmp	r3, #0
 800a898:	d01c      	beq.n	800a8d4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d108      	bne.n	800a8ba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d030      	beq.n	800a912 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	4798      	blx	r3
 800a8b8:	e02b      	b.n	800a912 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d027      	beq.n	800a912 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	4798      	blx	r3
 800a8ca:	e022      	b.n	800a912 <HAL_DMA_IRQHandler+0x29e>
 800a8cc:	20000198 	.word	0x20000198
 800a8d0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10f      	bne.n	800a902 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f022 0210 	bic.w	r2, r2, #16
 800a8f0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a906:	2b00      	cmp	r3, #0
 800a908:	d003      	beq.n	800a912 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a916:	2b00      	cmp	r3, #0
 800a918:	d032      	beq.n	800a980 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a91e:	f003 0301 	and.w	r3, r3, #1
 800a922:	2b00      	cmp	r3, #0
 800a924:	d022      	beq.n	800a96c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2205      	movs	r2, #5
 800a92a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f022 0201 	bic.w	r2, r2, #1
 800a93c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	3301      	adds	r3, #1
 800a942:	60bb      	str	r3, [r7, #8]
 800a944:	697a      	ldr	r2, [r7, #20]
 800a946:	429a      	cmp	r2, r3
 800a948:	d307      	bcc.n	800a95a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f003 0301 	and.w	r3, r3, #1
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1f2      	bne.n	800a93e <HAL_DMA_IRQHandler+0x2ca>
 800a958:	e000      	b.n	800a95c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a95a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a970:	2b00      	cmp	r3, #0
 800a972:	d005      	beq.n	800a980 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	4798      	blx	r3
 800a97c:	e000      	b.n	800a980 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a97e:	bf00      	nop
    }
  }
}
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop

0800a988 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
 800a994:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a9a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	683a      	ldr	r2, [r7, #0]
 800a9ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	2b40      	cmp	r3, #64	; 0x40
 800a9b4:	d108      	bne.n	800a9c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a9c6:	e007      	b.n	800a9d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	60da      	str	r2, [r3, #12]
}
 800a9d8:	bf00      	nop
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	3b10      	subs	r3, #16
 800a9f4:	4a13      	ldr	r2, [pc, #76]	; (800aa44 <DMA_CalcBaseAndBitshift+0x60>)
 800a9f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9fa:	091b      	lsrs	r3, r3, #4
 800a9fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a9fe:	4a12      	ldr	r2, [pc, #72]	; (800aa48 <DMA_CalcBaseAndBitshift+0x64>)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	4413      	add	r3, r2
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	461a      	mov	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	d908      	bls.n	800aa24 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	461a      	mov	r2, r3
 800aa18:	4b0c      	ldr	r3, [pc, #48]	; (800aa4c <DMA_CalcBaseAndBitshift+0x68>)
 800aa1a:	4013      	ands	r3, r2
 800aa1c:	1d1a      	adds	r2, r3, #4
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	659a      	str	r2, [r3, #88]	; 0x58
 800aa22:	e006      	b.n	800aa32 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	461a      	mov	r2, r3
 800aa2a:	4b08      	ldr	r3, [pc, #32]	; (800aa4c <DMA_CalcBaseAndBitshift+0x68>)
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	aaaaaaab 	.word	0xaaaaaaab
 800aa48:	0801853c 	.word	0x0801853c
 800aa4c:	fffffc00 	.word	0xfffffc00

0800aa50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d11f      	bne.n	800aaaa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	2b03      	cmp	r3, #3
 800aa6e:	d855      	bhi.n	800ab1c <DMA_CheckFifoParam+0xcc>
 800aa70:	a201      	add	r2, pc, #4	; (adr r2, 800aa78 <DMA_CheckFifoParam+0x28>)
 800aa72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa76:	bf00      	nop
 800aa78:	0800aa89 	.word	0x0800aa89
 800aa7c:	0800aa9b 	.word	0x0800aa9b
 800aa80:	0800aa89 	.word	0x0800aa89
 800aa84:	0800ab1d 	.word	0x0800ab1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d045      	beq.n	800ab20 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa98:	e042      	b.n	800ab20 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aaa2:	d13f      	bne.n	800ab24 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aaa8:	e03c      	b.n	800ab24 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aab2:	d121      	bne.n	800aaf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	2b03      	cmp	r3, #3
 800aab8:	d836      	bhi.n	800ab28 <DMA_CheckFifoParam+0xd8>
 800aaba:	a201      	add	r2, pc, #4	; (adr r2, 800aac0 <DMA_CheckFifoParam+0x70>)
 800aabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac0:	0800aad1 	.word	0x0800aad1
 800aac4:	0800aad7 	.word	0x0800aad7
 800aac8:	0800aad1 	.word	0x0800aad1
 800aacc:	0800aae9 	.word	0x0800aae9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aad0:	2301      	movs	r3, #1
 800aad2:	73fb      	strb	r3, [r7, #15]
      break;
 800aad4:	e02f      	b.n	800ab36 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aada:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d024      	beq.n	800ab2c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aae6:	e021      	b.n	800ab2c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aaf0:	d11e      	bne.n	800ab30 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aaf6:	e01b      	b.n	800ab30 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d902      	bls.n	800ab04 <DMA_CheckFifoParam+0xb4>
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d003      	beq.n	800ab0a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ab02:	e018      	b.n	800ab36 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	73fb      	strb	r3, [r7, #15]
      break;
 800ab08:	e015      	b.n	800ab36 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00e      	beq.n	800ab34 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ab16:	2301      	movs	r3, #1
 800ab18:	73fb      	strb	r3, [r7, #15]
      break;
 800ab1a:	e00b      	b.n	800ab34 <DMA_CheckFifoParam+0xe4>
      break;
 800ab1c:	bf00      	nop
 800ab1e:	e00a      	b.n	800ab36 <DMA_CheckFifoParam+0xe6>
      break;
 800ab20:	bf00      	nop
 800ab22:	e008      	b.n	800ab36 <DMA_CheckFifoParam+0xe6>
      break;
 800ab24:	bf00      	nop
 800ab26:	e006      	b.n	800ab36 <DMA_CheckFifoParam+0xe6>
      break;
 800ab28:	bf00      	nop
 800ab2a:	e004      	b.n	800ab36 <DMA_CheckFifoParam+0xe6>
      break;
 800ab2c:	bf00      	nop
 800ab2e:	e002      	b.n	800ab36 <DMA_CheckFifoParam+0xe6>
      break;   
 800ab30:	bf00      	nop
 800ab32:	e000      	b.n	800ab36 <DMA_CheckFifoParam+0xe6>
      break;
 800ab34:	bf00      	nop
    }
  } 
  
  return status; 
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3714      	adds	r7, #20
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b089      	sub	sp, #36	; 0x24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800ab52:	2300      	movs	r3, #0
 800ab54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800ab56:	2300      	movs	r3, #0
 800ab58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800ab5e:	2300      	movs	r3, #0
 800ab60:	61fb      	str	r3, [r7, #28]
 800ab62:	e175      	b.n	800ae50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800ab64:	2201      	movs	r2, #1
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	fa02 f303 	lsl.w	r3, r2, r3
 800ab6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	4013      	ands	r3, r2
 800ab76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	f040 8164 	bne.w	800ae4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d00b      	beq.n	800aba2 <HAL_GPIO_Init+0x5e>
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d007      	beq.n	800aba2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab96:	2b11      	cmp	r3, #17
 800ab98:	d003      	beq.n	800aba2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	2b12      	cmp	r3, #18
 800aba0:	d130      	bne.n	800ac04 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	005b      	lsls	r3, r3, #1
 800abac:	2203      	movs	r2, #3
 800abae:	fa02 f303 	lsl.w	r3, r2, r3
 800abb2:	43db      	mvns	r3, r3
 800abb4:	69ba      	ldr	r2, [r7, #24]
 800abb6:	4013      	ands	r3, r2
 800abb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	68da      	ldr	r2, [r3, #12]
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	005b      	lsls	r3, r3, #1
 800abc2:	fa02 f303 	lsl.w	r3, r2, r3
 800abc6:	69ba      	ldr	r2, [r7, #24]
 800abc8:	4313      	orrs	r3, r2
 800abca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	69ba      	ldr	r2, [r7, #24]
 800abd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800abd8:	2201      	movs	r2, #1
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	fa02 f303 	lsl.w	r3, r2, r3
 800abe0:	43db      	mvns	r3, r3
 800abe2:	69ba      	ldr	r2, [r7, #24]
 800abe4:	4013      	ands	r3, r2
 800abe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	091b      	lsrs	r3, r3, #4
 800abee:	f003 0201 	and.w	r2, r3, #1
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	fa02 f303 	lsl.w	r3, r2, r3
 800abf8:	69ba      	ldr	r2, [r7, #24]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	69ba      	ldr	r2, [r7, #24]
 800ac02:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	005b      	lsls	r3, r3, #1
 800ac0e:	2203      	movs	r2, #3
 800ac10:	fa02 f303 	lsl.w	r3, r2, r3
 800ac14:	43db      	mvns	r3, r3
 800ac16:	69ba      	ldr	r2, [r7, #24]
 800ac18:	4013      	ands	r3, r2
 800ac1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	689a      	ldr	r2, [r3, #8]
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	005b      	lsls	r3, r3, #1
 800ac24:	fa02 f303 	lsl.w	r3, r2, r3
 800ac28:	69ba      	ldr	r2, [r7, #24]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	69ba      	ldr	r2, [r7, #24]
 800ac32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d003      	beq.n	800ac44 <HAL_GPIO_Init+0x100>
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	2b12      	cmp	r3, #18
 800ac42:	d123      	bne.n	800ac8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	08da      	lsrs	r2, r3, #3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	3208      	adds	r2, #8
 800ac4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	f003 0307 	and.w	r3, r3, #7
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	220f      	movs	r2, #15
 800ac5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac60:	43db      	mvns	r3, r3
 800ac62:	69ba      	ldr	r2, [r7, #24]
 800ac64:	4013      	ands	r3, r2
 800ac66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	691a      	ldr	r2, [r3, #16]
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	f003 0307 	and.w	r3, r3, #7
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	fa02 f303 	lsl.w	r3, r2, r3
 800ac78:	69ba      	ldr	r2, [r7, #24]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	08da      	lsrs	r2, r3, #3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	3208      	adds	r2, #8
 800ac86:	69b9      	ldr	r1, [r7, #24]
 800ac88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	005b      	lsls	r3, r3, #1
 800ac96:	2203      	movs	r2, #3
 800ac98:	fa02 f303 	lsl.w	r3, r2, r3
 800ac9c:	43db      	mvns	r3, r3
 800ac9e:	69ba      	ldr	r2, [r7, #24]
 800aca0:	4013      	ands	r3, r2
 800aca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	f003 0203 	and.w	r2, r3, #3
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	005b      	lsls	r3, r3, #1
 800acb0:	fa02 f303 	lsl.w	r3, r2, r3
 800acb4:	69ba      	ldr	r2, [r7, #24]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	69ba      	ldr	r2, [r7, #24]
 800acbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f000 80be 	beq.w	800ae4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acce:	4b65      	ldr	r3, [pc, #404]	; (800ae64 <HAL_GPIO_Init+0x320>)
 800acd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acd2:	4a64      	ldr	r2, [pc, #400]	; (800ae64 <HAL_GPIO_Init+0x320>)
 800acd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800acd8:	6453      	str	r3, [r2, #68]	; 0x44
 800acda:	4b62      	ldr	r3, [pc, #392]	; (800ae64 <HAL_GPIO_Init+0x320>)
 800acdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ace2:	60fb      	str	r3, [r7, #12]
 800ace4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800ace6:	4a60      	ldr	r2, [pc, #384]	; (800ae68 <HAL_GPIO_Init+0x324>)
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	089b      	lsrs	r3, r3, #2
 800acec:	3302      	adds	r3, #2
 800acee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	f003 0303 	and.w	r3, r3, #3
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	220f      	movs	r2, #15
 800acfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ad02:	43db      	mvns	r3, r3
 800ad04:	69ba      	ldr	r2, [r7, #24]
 800ad06:	4013      	ands	r3, r2
 800ad08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a57      	ldr	r2, [pc, #348]	; (800ae6c <HAL_GPIO_Init+0x328>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d037      	beq.n	800ad82 <HAL_GPIO_Init+0x23e>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a56      	ldr	r2, [pc, #344]	; (800ae70 <HAL_GPIO_Init+0x32c>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d031      	beq.n	800ad7e <HAL_GPIO_Init+0x23a>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a55      	ldr	r2, [pc, #340]	; (800ae74 <HAL_GPIO_Init+0x330>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d02b      	beq.n	800ad7a <HAL_GPIO_Init+0x236>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a54      	ldr	r2, [pc, #336]	; (800ae78 <HAL_GPIO_Init+0x334>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d025      	beq.n	800ad76 <HAL_GPIO_Init+0x232>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4a53      	ldr	r2, [pc, #332]	; (800ae7c <HAL_GPIO_Init+0x338>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d01f      	beq.n	800ad72 <HAL_GPIO_Init+0x22e>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4a52      	ldr	r2, [pc, #328]	; (800ae80 <HAL_GPIO_Init+0x33c>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d019      	beq.n	800ad6e <HAL_GPIO_Init+0x22a>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a51      	ldr	r2, [pc, #324]	; (800ae84 <HAL_GPIO_Init+0x340>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d013      	beq.n	800ad6a <HAL_GPIO_Init+0x226>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4a50      	ldr	r2, [pc, #320]	; (800ae88 <HAL_GPIO_Init+0x344>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d00d      	beq.n	800ad66 <HAL_GPIO_Init+0x222>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a4f      	ldr	r2, [pc, #316]	; (800ae8c <HAL_GPIO_Init+0x348>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d007      	beq.n	800ad62 <HAL_GPIO_Init+0x21e>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4a4e      	ldr	r2, [pc, #312]	; (800ae90 <HAL_GPIO_Init+0x34c>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d101      	bne.n	800ad5e <HAL_GPIO_Init+0x21a>
 800ad5a:	2309      	movs	r3, #9
 800ad5c:	e012      	b.n	800ad84 <HAL_GPIO_Init+0x240>
 800ad5e:	230a      	movs	r3, #10
 800ad60:	e010      	b.n	800ad84 <HAL_GPIO_Init+0x240>
 800ad62:	2308      	movs	r3, #8
 800ad64:	e00e      	b.n	800ad84 <HAL_GPIO_Init+0x240>
 800ad66:	2307      	movs	r3, #7
 800ad68:	e00c      	b.n	800ad84 <HAL_GPIO_Init+0x240>
 800ad6a:	2306      	movs	r3, #6
 800ad6c:	e00a      	b.n	800ad84 <HAL_GPIO_Init+0x240>
 800ad6e:	2305      	movs	r3, #5
 800ad70:	e008      	b.n	800ad84 <HAL_GPIO_Init+0x240>
 800ad72:	2304      	movs	r3, #4
 800ad74:	e006      	b.n	800ad84 <HAL_GPIO_Init+0x240>
 800ad76:	2303      	movs	r3, #3
 800ad78:	e004      	b.n	800ad84 <HAL_GPIO_Init+0x240>
 800ad7a:	2302      	movs	r3, #2
 800ad7c:	e002      	b.n	800ad84 <HAL_GPIO_Init+0x240>
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e000      	b.n	800ad84 <HAL_GPIO_Init+0x240>
 800ad82:	2300      	movs	r3, #0
 800ad84:	69fa      	ldr	r2, [r7, #28]
 800ad86:	f002 0203 	and.w	r2, r2, #3
 800ad8a:	0092      	lsls	r2, r2, #2
 800ad8c:	4093      	lsls	r3, r2
 800ad8e:	69ba      	ldr	r2, [r7, #24]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800ad94:	4934      	ldr	r1, [pc, #208]	; (800ae68 <HAL_GPIO_Init+0x324>)
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	089b      	lsrs	r3, r3, #2
 800ad9a:	3302      	adds	r3, #2
 800ad9c:	69ba      	ldr	r2, [r7, #24]
 800ad9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ada2:	4b3c      	ldr	r3, [pc, #240]	; (800ae94 <HAL_GPIO_Init+0x350>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	43db      	mvns	r3, r3
 800adac:	69ba      	ldr	r2, [r7, #24]
 800adae:	4013      	ands	r3, r2
 800adb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d003      	beq.n	800adc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800adbe:	69ba      	ldr	r2, [r7, #24]
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800adc6:	4a33      	ldr	r2, [pc, #204]	; (800ae94 <HAL_GPIO_Init+0x350>)
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800adcc:	4b31      	ldr	r3, [pc, #196]	; (800ae94 <HAL_GPIO_Init+0x350>)
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	43db      	mvns	r3, r3
 800add6:	69ba      	ldr	r2, [r7, #24]
 800add8:	4013      	ands	r3, r2
 800adda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d003      	beq.n	800adf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800ade8:	69ba      	ldr	r2, [r7, #24]
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	4313      	orrs	r3, r2
 800adee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800adf0:	4a28      	ldr	r2, [pc, #160]	; (800ae94 <HAL_GPIO_Init+0x350>)
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800adf6:	4b27      	ldr	r3, [pc, #156]	; (800ae94 <HAL_GPIO_Init+0x350>)
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	43db      	mvns	r3, r3
 800ae00:	69ba      	ldr	r2, [r7, #24]
 800ae02:	4013      	ands	r3, r2
 800ae04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d003      	beq.n	800ae1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800ae12:	69ba      	ldr	r2, [r7, #24]
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	4313      	orrs	r3, r2
 800ae18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ae1a:	4a1e      	ldr	r2, [pc, #120]	; (800ae94 <HAL_GPIO_Init+0x350>)
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ae20:	4b1c      	ldr	r3, [pc, #112]	; (800ae94 <HAL_GPIO_Init+0x350>)
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	43db      	mvns	r3, r3
 800ae2a:	69ba      	ldr	r2, [r7, #24]
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d003      	beq.n	800ae44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800ae3c:	69ba      	ldr	r2, [r7, #24]
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ae44:	4a13      	ldr	r2, [pc, #76]	; (800ae94 <HAL_GPIO_Init+0x350>)
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	61fb      	str	r3, [r7, #28]
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	2b0f      	cmp	r3, #15
 800ae54:	f67f ae86 	bls.w	800ab64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800ae58:	bf00      	nop
 800ae5a:	3724      	adds	r7, #36	; 0x24
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr
 800ae64:	40023800 	.word	0x40023800
 800ae68:	40013800 	.word	0x40013800
 800ae6c:	40020000 	.word	0x40020000
 800ae70:	40020400 	.word	0x40020400
 800ae74:	40020800 	.word	0x40020800
 800ae78:	40020c00 	.word	0x40020c00
 800ae7c:	40021000 	.word	0x40021000
 800ae80:	40021400 	.word	0x40021400
 800ae84:	40021800 	.word	0x40021800
 800ae88:	40021c00 	.word	0x40021c00
 800ae8c:	40022000 	.word	0x40022000
 800ae90:	40022400 	.word	0x40022400
 800ae94:	40013c00 	.word	0x40013c00

0800ae98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	460b      	mov	r3, r1
 800aea2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	691a      	ldr	r2, [r3, #16]
 800aea8:	887b      	ldrh	r3, [r7, #2]
 800aeaa:	4013      	ands	r3, r2
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d002      	beq.n	800aeb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	73fb      	strb	r3, [r7, #15]
 800aeb4:	e001      	b.n	800aeba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3714      	adds	r7, #20
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	807b      	strh	r3, [r7, #2]
 800aed4:	4613      	mov	r3, r2
 800aed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aed8:	787b      	ldrb	r3, [r7, #1]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d003      	beq.n	800aee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aede:	887a      	ldrh	r2, [r7, #2]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800aee4:	e003      	b.n	800aeee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800aee6:	887b      	ldrh	r3, [r7, #2]
 800aee8:	041a      	lsls	r2, r3, #16
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	619a      	str	r2, [r3, #24]
}
 800aeee:	bf00      	nop
 800aef0:	370c      	adds	r7, #12
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b083      	sub	sp, #12
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	460b      	mov	r3, r1
 800af04:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	695a      	ldr	r2, [r3, #20]
 800af0a:	887b      	ldrh	r3, [r7, #2]
 800af0c:	4013      	ands	r3, r2
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d004      	beq.n	800af1c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800af12:	887b      	ldrh	r3, [r7, #2]
 800af14:	041a      	lsls	r2, r3, #16
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800af1a:	e002      	b.n	800af22 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800af1c:	887a      	ldrh	r2, [r7, #2]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	619a      	str	r2, [r3, #24]
}
 800af22:	bf00      	nop
 800af24:	370c      	adds	r7, #12
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
	...

0800af30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	4603      	mov	r3, r0
 800af38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800af3a:	4b08      	ldr	r3, [pc, #32]	; (800af5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800af3c:	695a      	ldr	r2, [r3, #20]
 800af3e:	88fb      	ldrh	r3, [r7, #6]
 800af40:	4013      	ands	r3, r2
 800af42:	2b00      	cmp	r3, #0
 800af44:	d006      	beq.n	800af54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800af46:	4a05      	ldr	r2, [pc, #20]	; (800af5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800af48:	88fb      	ldrh	r3, [r7, #6]
 800af4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800af4c:	88fb      	ldrh	r3, [r7, #6]
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 f806 	bl	800af60 <HAL_GPIO_EXTI_Callback>
  }
}
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	40013c00 	.word	0x40013c00

0800af60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	4603      	mov	r3, r0
 800af68:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800af6a:	bf00      	nop
 800af6c:	370c      	adds	r7, #12
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
	...

0800af78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	e07f      	b.n	800b08a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b00      	cmp	r3, #0
 800af94:	d106      	bne.n	800afa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7fd f964 	bl	800826c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2224      	movs	r2, #36	; 0x24
 800afa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f022 0201 	bic.w	r2, r2, #1
 800afba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	685a      	ldr	r2, [r3, #4]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800afc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	689a      	ldr	r2, [r3, #8]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800afd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d107      	bne.n	800aff2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	689a      	ldr	r2, [r3, #8]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800afee:	609a      	str	r2, [r3, #8]
 800aff0:	e006      	b.n	800b000 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	689a      	ldr	r2, [r3, #8]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800affe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	2b02      	cmp	r3, #2
 800b006:	d104      	bne.n	800b012 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b010:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	6859      	ldr	r1, [r3, #4]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	4b1d      	ldr	r3, [pc, #116]	; (800b094 <HAL_I2C_Init+0x11c>)
 800b01e:	430b      	orrs	r3, r1
 800b020:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68da      	ldr	r2, [r3, #12]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b030:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	691a      	ldr	r2, [r3, #16]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	695b      	ldr	r3, [r3, #20]
 800b03a:	ea42 0103 	orr.w	r1, r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	699b      	ldr	r3, [r3, #24]
 800b042:	021a      	lsls	r2, r3, #8
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	430a      	orrs	r2, r1
 800b04a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	69d9      	ldr	r1, [r3, #28]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a1a      	ldr	r2, [r3, #32]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	430a      	orrs	r2, r1
 800b05a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f042 0201 	orr.w	r2, r2, #1
 800b06a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2220      	movs	r2, #32
 800b076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3708      	adds	r7, #8
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	02008000 	.word	0x02008000

0800b098 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b088      	sub	sp, #32
 800b09c:	af02      	add	r7, sp, #8
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	607a      	str	r2, [r7, #4]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	817b      	strh	r3, [r7, #10]
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	2b20      	cmp	r3, #32
 800b0b6:	f040 80da 	bne.w	800b26e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d101      	bne.n	800b0c8 <HAL_I2C_Master_Transmit+0x30>
 800b0c4:	2302      	movs	r3, #2
 800b0c6:	e0d3      	b.n	800b270 <HAL_I2C_Master_Transmit+0x1d8>
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b0d0:	f7fe fa74 	bl	80095bc <HAL_GetTick>
 800b0d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	9300      	str	r3, [sp, #0]
 800b0da:	2319      	movs	r3, #25
 800b0dc:	2201      	movs	r2, #1
 800b0de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b0e2:	68f8      	ldr	r0, [r7, #12]
 800b0e4:	f000 fdc4 	bl	800bc70 <I2C_WaitOnFlagUntilTimeout>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d001      	beq.n	800b0f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e0be      	b.n	800b270 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2221      	movs	r2, #33	; 0x21
 800b0f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2210      	movs	r2, #16
 800b0fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2200      	movs	r2, #0
 800b106:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	893a      	ldrh	r2, [r7, #8]
 800b112:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2200      	movs	r2, #0
 800b118:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b11e:	b29b      	uxth	r3, r3
 800b120:	2bff      	cmp	r3, #255	; 0xff
 800b122:	d90e      	bls.n	800b142 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	22ff      	movs	r2, #255	; 0xff
 800b128:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b12e:	b2da      	uxtb	r2, r3
 800b130:	8979      	ldrh	r1, [r7, #10]
 800b132:	4b51      	ldr	r3, [pc, #324]	; (800b278 <HAL_I2C_Master_Transmit+0x1e0>)
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f000 ff26 	bl	800bf8c <I2C_TransferConfig>
 800b140:	e06c      	b.n	800b21c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b146:	b29a      	uxth	r2, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b150:	b2da      	uxtb	r2, r3
 800b152:	8979      	ldrh	r1, [r7, #10]
 800b154:	4b48      	ldr	r3, [pc, #288]	; (800b278 <HAL_I2C_Master_Transmit+0x1e0>)
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f000 ff15 	bl	800bf8c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b162:	e05b      	b.n	800b21c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b164:	697a      	ldr	r2, [r7, #20]
 800b166:	6a39      	ldr	r1, [r7, #32]
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f000 fdc1 	bl	800bcf0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	e07b      	b.n	800b270 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17c:	781a      	ldrb	r2, [r3, #0]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b188:	1c5a      	adds	r2, r3, #1
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b192:	b29b      	uxth	r3, r3
 800b194:	3b01      	subs	r3, #1
 800b196:	b29a      	uxth	r2, r3
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d034      	beq.n	800b21c <HAL_I2C_Master_Transmit+0x184>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d130      	bne.n	800b21c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	6a3b      	ldr	r3, [r7, #32]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	2180      	movs	r1, #128	; 0x80
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	f000 fd53 	bl	800bc70 <I2C_WaitOnFlagUntilTimeout>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d001      	beq.n	800b1d4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e04d      	b.n	800b270 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	2bff      	cmp	r3, #255	; 0xff
 800b1dc:	d90e      	bls.n	800b1fc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	22ff      	movs	r2, #255	; 0xff
 800b1e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1e8:	b2da      	uxtb	r2, r3
 800b1ea:	8979      	ldrh	r1, [r7, #10]
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f000 fec9 	bl	800bf8c <I2C_TransferConfig>
 800b1fa:	e00f      	b.n	800b21c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b200:	b29a      	uxth	r2, r3
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	8979      	ldrh	r1, [r7, #10]
 800b20e:	2300      	movs	r3, #0
 800b210:	9300      	str	r3, [sp, #0]
 800b212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f000 feb8 	bl	800bf8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b220:	b29b      	uxth	r3, r3
 800b222:	2b00      	cmp	r3, #0
 800b224:	d19e      	bne.n	800b164 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b226:	697a      	ldr	r2, [r7, #20]
 800b228:	6a39      	ldr	r1, [r7, #32]
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	f000 fda0 	bl	800bd70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d001      	beq.n	800b23a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	e01a      	b.n	800b270 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2220      	movs	r2, #32
 800b240:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	6859      	ldr	r1, [r3, #4]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	4b0b      	ldr	r3, [pc, #44]	; (800b27c <HAL_I2C_Master_Transmit+0x1e4>)
 800b24e:	400b      	ands	r3, r1
 800b250:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2220      	movs	r2, #32
 800b256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2200      	movs	r2, #0
 800b266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b26a:	2300      	movs	r3, #0
 800b26c:	e000      	b.n	800b270 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b26e:	2302      	movs	r3, #2
  }
}
 800b270:	4618      	mov	r0, r3
 800b272:	3718      	adds	r7, #24
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	80002000 	.word	0x80002000
 800b27c:	fe00e800 	.word	0xfe00e800

0800b280 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b088      	sub	sp, #32
 800b284:	af02      	add	r7, sp, #8
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	607a      	str	r2, [r7, #4]
 800b28a:	461a      	mov	r2, r3
 800b28c:	460b      	mov	r3, r1
 800b28e:	817b      	strh	r3, [r7, #10]
 800b290:	4613      	mov	r3, r2
 800b292:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	2b20      	cmp	r3, #32
 800b29e:	f040 80db 	bne.w	800b458 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d101      	bne.n	800b2b0 <HAL_I2C_Master_Receive+0x30>
 800b2ac:	2302      	movs	r3, #2
 800b2ae:	e0d4      	b.n	800b45a <HAL_I2C_Master_Receive+0x1da>
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b2b8:	f7fe f980 	bl	80095bc <HAL_GetTick>
 800b2bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	2319      	movs	r3, #25
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f000 fcd0 	bl	800bc70 <I2C_WaitOnFlagUntilTimeout>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d001      	beq.n	800b2da <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e0bf      	b.n	800b45a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2222      	movs	r2, #34	; 0x22
 800b2de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2210      	movs	r2, #16
 800b2e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	893a      	ldrh	r2, [r7, #8]
 800b2fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b306:	b29b      	uxth	r3, r3
 800b308:	2bff      	cmp	r3, #255	; 0xff
 800b30a:	d90e      	bls.n	800b32a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	22ff      	movs	r2, #255	; 0xff
 800b310:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b316:	b2da      	uxtb	r2, r3
 800b318:	8979      	ldrh	r1, [r7, #10]
 800b31a:	4b52      	ldr	r3, [pc, #328]	; (800b464 <HAL_I2C_Master_Receive+0x1e4>)
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b322:	68f8      	ldr	r0, [r7, #12]
 800b324:	f000 fe32 	bl	800bf8c <I2C_TransferConfig>
 800b328:	e06d      	b.n	800b406 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b32e:	b29a      	uxth	r2, r3
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	8979      	ldrh	r1, [r7, #10]
 800b33c:	4b49      	ldr	r3, [pc, #292]	; (800b464 <HAL_I2C_Master_Receive+0x1e4>)
 800b33e:	9300      	str	r3, [sp, #0]
 800b340:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f000 fe21 	bl	800bf8c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b34a:	e05c      	b.n	800b406 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b34c:	697a      	ldr	r2, [r7, #20]
 800b34e:	6a39      	ldr	r1, [r7, #32]
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f000 fd49 	bl	800bde8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d001      	beq.n	800b360 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800b35c:	2301      	movs	r3, #1
 800b35e:	e07c      	b.n	800b45a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36a:	b2d2      	uxtb	r2, r2
 800b36c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b372:	1c5a      	adds	r2, r3, #1
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b37c:	3b01      	subs	r3, #1
 800b37e:	b29a      	uxth	r2, r3
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b388:	b29b      	uxth	r3, r3
 800b38a:	3b01      	subs	r3, #1
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b396:	b29b      	uxth	r3, r3
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d034      	beq.n	800b406 <HAL_I2C_Master_Receive+0x186>
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d130      	bne.n	800b406 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	6a3b      	ldr	r3, [r7, #32]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2180      	movs	r1, #128	; 0x80
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f000 fc5e 	bl	800bc70 <I2C_WaitOnFlagUntilTimeout>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d001      	beq.n	800b3be <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e04d      	b.n	800b45a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	2bff      	cmp	r3, #255	; 0xff
 800b3c6:	d90e      	bls.n	800b3e6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	22ff      	movs	r2, #255	; 0xff
 800b3cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3d2:	b2da      	uxtb	r2, r3
 800b3d4:	8979      	ldrh	r1, [r7, #10]
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f000 fdd4 	bl	800bf8c <I2C_TransferConfig>
 800b3e4:	e00f      	b.n	800b406 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3f4:	b2da      	uxtb	r2, r3
 800b3f6:	8979      	ldrh	r1, [r7, #10]
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	9300      	str	r3, [sp, #0]
 800b3fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f000 fdc3 	bl	800bf8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d19d      	bne.n	800b34c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b410:	697a      	ldr	r2, [r7, #20]
 800b412:	6a39      	ldr	r1, [r7, #32]
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	f000 fcab 	bl	800bd70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b41a:	4603      	mov	r3, r0
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d001      	beq.n	800b424 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b420:	2301      	movs	r3, #1
 800b422:	e01a      	b.n	800b45a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2220      	movs	r2, #32
 800b42a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	6859      	ldr	r1, [r3, #4]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	4b0c      	ldr	r3, [pc, #48]	; (800b468 <HAL_I2C_Master_Receive+0x1e8>)
 800b438:	400b      	ands	r3, r1
 800b43a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2220      	movs	r2, #32
 800b440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2200      	movs	r2, #0
 800b448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b454:	2300      	movs	r3, #0
 800b456:	e000      	b.n	800b45a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b458:	2302      	movs	r3, #2
  }
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3718      	adds	r7, #24
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	80002400 	.word	0x80002400
 800b468:	fe00e800 	.word	0xfe00e800

0800b46c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b088      	sub	sp, #32
 800b470:	af02      	add	r7, sp, #8
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	4608      	mov	r0, r1
 800b476:	4611      	mov	r1, r2
 800b478:	461a      	mov	r2, r3
 800b47a:	4603      	mov	r3, r0
 800b47c:	817b      	strh	r3, [r7, #10]
 800b47e:	460b      	mov	r3, r1
 800b480:	813b      	strh	r3, [r7, #8]
 800b482:	4613      	mov	r3, r2
 800b484:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	2b20      	cmp	r3, #32
 800b490:	f040 80f9 	bne.w	800b686 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b494:	6a3b      	ldr	r3, [r7, #32]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d002      	beq.n	800b4a0 <HAL_I2C_Mem_Write+0x34>
 800b49a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d105      	bne.n	800b4ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e0ed      	b.n	800b688 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d101      	bne.n	800b4ba <HAL_I2C_Mem_Write+0x4e>
 800b4b6:	2302      	movs	r3, #2
 800b4b8:	e0e6      	b.n	800b688 <HAL_I2C_Mem_Write+0x21c>
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2201      	movs	r2, #1
 800b4be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b4c2:	f7fe f87b 	bl	80095bc <HAL_GetTick>
 800b4c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	9300      	str	r3, [sp, #0]
 800b4cc:	2319      	movs	r3, #25
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f000 fbcb 	bl	800bc70 <I2C_WaitOnFlagUntilTimeout>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d001      	beq.n	800b4e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	e0d1      	b.n	800b688 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2221      	movs	r2, #33	; 0x21
 800b4e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2240      	movs	r2, #64	; 0x40
 800b4f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6a3a      	ldr	r2, [r7, #32]
 800b4fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b504:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2200      	movs	r2, #0
 800b50a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b50c:	88f8      	ldrh	r0, [r7, #6]
 800b50e:	893a      	ldrh	r2, [r7, #8]
 800b510:	8979      	ldrh	r1, [r7, #10]
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	9301      	str	r3, [sp, #4]
 800b516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b518:	9300      	str	r3, [sp, #0]
 800b51a:	4603      	mov	r3, r0
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f000 fadb 	bl	800bad8 <I2C_RequestMemoryWrite>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d005      	beq.n	800b534 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	e0a9      	b.n	800b688 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b538:	b29b      	uxth	r3, r3
 800b53a:	2bff      	cmp	r3, #255	; 0xff
 800b53c:	d90e      	bls.n	800b55c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	22ff      	movs	r2, #255	; 0xff
 800b542:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	8979      	ldrh	r1, [r7, #10]
 800b54c:	2300      	movs	r3, #0
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	f000 fd19 	bl	800bf8c <I2C_TransferConfig>
 800b55a:	e00f      	b.n	800b57c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b560:	b29a      	uxth	r2, r3
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b56a:	b2da      	uxtb	r2, r3
 800b56c:	8979      	ldrh	r1, [r7, #10]
 800b56e:	2300      	movs	r3, #0
 800b570:	9300      	str	r3, [sp, #0]
 800b572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f000 fd08 	bl	800bf8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b57c:	697a      	ldr	r2, [r7, #20]
 800b57e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f000 fbb5 	bl	800bcf0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d001      	beq.n	800b590 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b58c:	2301      	movs	r3, #1
 800b58e:	e07b      	b.n	800b688 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b594:	781a      	ldrb	r2, [r3, #0]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a0:	1c5a      	adds	r2, r3, #1
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d034      	beq.n	800b634 <HAL_I2C_Mem_Write+0x1c8>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d130      	bne.n	800b634 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d8:	2200      	movs	r2, #0
 800b5da:	2180      	movs	r1, #128	; 0x80
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f000 fb47 	bl	800bc70 <I2C_WaitOnFlagUntilTimeout>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e04d      	b.n	800b688 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	2bff      	cmp	r3, #255	; 0xff
 800b5f4:	d90e      	bls.n	800b614 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	22ff      	movs	r2, #255	; 0xff
 800b5fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b600:	b2da      	uxtb	r2, r3
 800b602:	8979      	ldrh	r1, [r7, #10]
 800b604:	2300      	movs	r3, #0
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 fcbd 	bl	800bf8c <I2C_TransferConfig>
 800b612:	e00f      	b.n	800b634 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b618:	b29a      	uxth	r2, r3
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b622:	b2da      	uxtb	r2, r3
 800b624:	8979      	ldrh	r1, [r7, #10]
 800b626:	2300      	movs	r3, #0
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b62e:	68f8      	ldr	r0, [r7, #12]
 800b630:	f000 fcac 	bl	800bf8c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b638:	b29b      	uxth	r3, r3
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d19e      	bne.n	800b57c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f000 fb94 	bl	800bd70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d001      	beq.n	800b652 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	e01a      	b.n	800b688 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2220      	movs	r2, #32
 800b658:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	6859      	ldr	r1, [r3, #4]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	4b0a      	ldr	r3, [pc, #40]	; (800b690 <HAL_I2C_Mem_Write+0x224>)
 800b666:	400b      	ands	r3, r1
 800b668:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2220      	movs	r2, #32
 800b66e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2200      	movs	r2, #0
 800b676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	e000      	b.n	800b688 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b686:	2302      	movs	r3, #2
  }
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3718      	adds	r7, #24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	fe00e800 	.word	0xfe00e800

0800b694 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b088      	sub	sp, #32
 800b698:	af02      	add	r7, sp, #8
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	4608      	mov	r0, r1
 800b69e:	4611      	mov	r1, r2
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	817b      	strh	r3, [r7, #10]
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	813b      	strh	r3, [r7, #8]
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	2b20      	cmp	r3, #32
 800b6b8:	f040 80fd 	bne.w	800b8b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6bc:	6a3b      	ldr	r3, [r7, #32]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d002      	beq.n	800b6c8 <HAL_I2C_Mem_Read+0x34>
 800b6c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d105      	bne.n	800b6d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e0f1      	b.n	800b8b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d101      	bne.n	800b6e2 <HAL_I2C_Mem_Read+0x4e>
 800b6de:	2302      	movs	r3, #2
 800b6e0:	e0ea      	b.n	800b8b8 <HAL_I2C_Mem_Read+0x224>
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b6ea:	f7fd ff67 	bl	80095bc <HAL_GetTick>
 800b6ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	9300      	str	r3, [sp, #0]
 800b6f4:	2319      	movs	r3, #25
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f000 fab7 	bl	800bc70 <I2C_WaitOnFlagUntilTimeout>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b708:	2301      	movs	r3, #1
 800b70a:	e0d5      	b.n	800b8b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2222      	movs	r2, #34	; 0x22
 800b710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2240      	movs	r2, #64	; 0x40
 800b718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6a3a      	ldr	r2, [r7, #32]
 800b726:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b72c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b734:	88f8      	ldrh	r0, [r7, #6]
 800b736:	893a      	ldrh	r2, [r7, #8]
 800b738:	8979      	ldrh	r1, [r7, #10]
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	9301      	str	r3, [sp, #4]
 800b73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	4603      	mov	r3, r0
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f000 fa1b 	bl	800bb80 <I2C_RequestMemoryRead>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d005      	beq.n	800b75c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2200      	movs	r2, #0
 800b754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b758:	2301      	movs	r3, #1
 800b75a:	e0ad      	b.n	800b8b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b760:	b29b      	uxth	r3, r3
 800b762:	2bff      	cmp	r3, #255	; 0xff
 800b764:	d90e      	bls.n	800b784 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	22ff      	movs	r2, #255	; 0xff
 800b76a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b770:	b2da      	uxtb	r2, r3
 800b772:	8979      	ldrh	r1, [r7, #10]
 800b774:	4b52      	ldr	r3, [pc, #328]	; (800b8c0 <HAL_I2C_Mem_Read+0x22c>)
 800b776:	9300      	str	r3, [sp, #0]
 800b778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f000 fc05 	bl	800bf8c <I2C_TransferConfig>
 800b782:	e00f      	b.n	800b7a4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b788:	b29a      	uxth	r2, r3
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b792:	b2da      	uxtb	r2, r3
 800b794:	8979      	ldrh	r1, [r7, #10]
 800b796:	4b4a      	ldr	r3, [pc, #296]	; (800b8c0 <HAL_I2C_Mem_Read+0x22c>)
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f000 fbf4 	bl	800bf8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	2104      	movs	r1, #4
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f000 fa5e 	bl	800bc70 <I2C_WaitOnFlagUntilTimeout>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e07c      	b.n	800b8b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c8:	b2d2      	uxtb	r2, r2
 800b7ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d0:	1c5a      	adds	r2, r3, #1
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d034      	beq.n	800b864 <HAL_I2C_Mem_Read+0x1d0>
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d130      	bne.n	800b864 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	9300      	str	r3, [sp, #0]
 800b806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b808:	2200      	movs	r2, #0
 800b80a:	2180      	movs	r1, #128	; 0x80
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f000 fa2f 	bl	800bc70 <I2C_WaitOnFlagUntilTimeout>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b818:	2301      	movs	r3, #1
 800b81a:	e04d      	b.n	800b8b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b820:	b29b      	uxth	r3, r3
 800b822:	2bff      	cmp	r3, #255	; 0xff
 800b824:	d90e      	bls.n	800b844 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	22ff      	movs	r2, #255	; 0xff
 800b82a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b830:	b2da      	uxtb	r2, r3
 800b832:	8979      	ldrh	r1, [r7, #10]
 800b834:	2300      	movs	r3, #0
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f000 fba5 	bl	800bf8c <I2C_TransferConfig>
 800b842:	e00f      	b.n	800b864 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b848:	b29a      	uxth	r2, r3
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b852:	b2da      	uxtb	r2, r3
 800b854:	8979      	ldrh	r1, [r7, #10]
 800b856:	2300      	movs	r3, #0
 800b858:	9300      	str	r3, [sp, #0]
 800b85a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	f000 fb94 	bl	800bf8c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b868:	b29b      	uxth	r3, r3
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d19a      	bne.n	800b7a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b86e:	697a      	ldr	r2, [r7, #20]
 800b870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f000 fa7c 	bl	800bd70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d001      	beq.n	800b882 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	e01a      	b.n	800b8b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2220      	movs	r2, #32
 800b888:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	6859      	ldr	r1, [r3, #4]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	4b0b      	ldr	r3, [pc, #44]	; (800b8c4 <HAL_I2C_Mem_Read+0x230>)
 800b896:	400b      	ands	r3, r1
 800b898:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2220      	movs	r2, #32
 800b89e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	e000      	b.n	800b8b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b8b6:	2302      	movs	r3, #2
  }
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	80002400 	.word	0x80002400
 800b8c4:	fe00e800 	.word	0xfe00e800

0800b8c8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b08a      	sub	sp, #40	; 0x28
 800b8cc:	af02      	add	r7, sp, #8
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	607a      	str	r2, [r7, #4]
 800b8d2:	603b      	str	r3, [r7, #0]
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	2b20      	cmp	r3, #32
 800b8e6:	f040 80ef 	bne.w	800bac8 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	699b      	ldr	r3, [r3, #24]
 800b8f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8f8:	d101      	bne.n	800b8fe <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800b8fa:	2302      	movs	r3, #2
 800b8fc:	e0e5      	b.n	800baca <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b904:	2b01      	cmp	r3, #1
 800b906:	d101      	bne.n	800b90c <HAL_I2C_IsDeviceReady+0x44>
 800b908:	2302      	movs	r3, #2
 800b90a:	e0de      	b.n	800baca <HAL_I2C_IsDeviceReady+0x202>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2201      	movs	r2, #1
 800b910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2224      	movs	r2, #36	; 0x24
 800b918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2200      	movs	r2, #0
 800b920:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	2b01      	cmp	r3, #1
 800b928:	d105      	bne.n	800b936 <HAL_I2C_IsDeviceReady+0x6e>
 800b92a:	897b      	ldrh	r3, [r7, #10]
 800b92c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b930:	4b68      	ldr	r3, [pc, #416]	; (800bad4 <HAL_I2C_IsDeviceReady+0x20c>)
 800b932:	4313      	orrs	r3, r2
 800b934:	e004      	b.n	800b940 <HAL_I2C_IsDeviceReady+0x78>
 800b936:	897b      	ldrh	r3, [r7, #10]
 800b938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b93c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	6812      	ldr	r2, [r2, #0]
 800b944:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800b946:	f7fd fe39 	bl	80095bc <HAL_GetTick>
 800b94a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	699b      	ldr	r3, [r3, #24]
 800b952:	f003 0320 	and.w	r3, r3, #32
 800b956:	2b20      	cmp	r3, #32
 800b958:	bf0c      	ite	eq
 800b95a:	2301      	moveq	r3, #1
 800b95c:	2300      	movne	r3, #0
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	f003 0310 	and.w	r3, r3, #16
 800b96c:	2b10      	cmp	r3, #16
 800b96e:	bf0c      	ite	eq
 800b970:	2301      	moveq	r3, #1
 800b972:	2300      	movne	r3, #0
 800b974:	b2db      	uxtb	r3, r3
 800b976:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b978:	e034      	b.n	800b9e4 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b980:	d01a      	beq.n	800b9b8 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b982:	f7fd fe1b 	bl	80095bc <HAL_GetTick>
 800b986:	4602      	mov	r2, r0
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	1ad3      	subs	r3, r2, r3
 800b98c:	683a      	ldr	r2, [r7, #0]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d302      	bcc.n	800b998 <HAL_I2C_IsDeviceReady+0xd0>
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10f      	bne.n	800b9b8 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2220      	movs	r2, #32
 800b99c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9a4:	f043 0220 	orr.w	r2, r3, #32
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e088      	b.n	800baca <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	699b      	ldr	r3, [r3, #24]
 800b9be:	f003 0320 	and.w	r3, r3, #32
 800b9c2:	2b20      	cmp	r3, #32
 800b9c4:	bf0c      	ite	eq
 800b9c6:	2301      	moveq	r3, #1
 800b9c8:	2300      	movne	r3, #0
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	699b      	ldr	r3, [r3, #24]
 800b9d4:	f003 0310 	and.w	r3, r3, #16
 800b9d8:	2b10      	cmp	r3, #16
 800b9da:	bf0c      	ite	eq
 800b9dc:	2301      	moveq	r3, #1
 800b9de:	2300      	movne	r3, #0
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b9e4:	7ffb      	ldrb	r3, [r7, #31]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d102      	bne.n	800b9f0 <HAL_I2C_IsDeviceReady+0x128>
 800b9ea:	7fbb      	ldrb	r3, [r7, #30]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d0c4      	beq.n	800b97a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	699b      	ldr	r3, [r3, #24]
 800b9f6:	f003 0310 	and.w	r3, r3, #16
 800b9fa:	2b10      	cmp	r3, #16
 800b9fc:	d01a      	beq.n	800ba34 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	9300      	str	r3, [sp, #0]
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	2200      	movs	r2, #0
 800ba06:	2120      	movs	r1, #32
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f000 f931 	bl	800bc70 <I2C_WaitOnFlagUntilTimeout>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d001      	beq.n	800ba18 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	e058      	b.n	800baca <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2220      	movs	r2, #32
 800ba1e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2220      	movs	r2, #32
 800ba24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	e04a      	b.n	800baca <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	2120      	movs	r1, #32
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	f000 f916 	bl	800bc70 <I2C_WaitOnFlagUntilTimeout>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d001      	beq.n	800ba4e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e03d      	b.n	800baca <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2210      	movs	r2, #16
 800ba54:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2220      	movs	r2, #32
 800ba5c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d118      	bne.n	800ba98 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba74:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	2120      	movs	r1, #32
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f000 f8f5 	bl	800bc70 <I2C_WaitOnFlagUntilTimeout>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e01c      	b.n	800baca <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2220      	movs	r2, #32
 800ba96:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	f63f af3d 	bhi.w	800b922 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2220      	movs	r2, #32
 800baac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bab4:	f043 0220 	orr.w	r2, r3, #32
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800bac4:	2301      	movs	r3, #1
 800bac6:	e000      	b.n	800baca <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800bac8:	2302      	movs	r3, #2
  }
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3720      	adds	r7, #32
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	02002000 	.word	0x02002000

0800bad8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af02      	add	r7, sp, #8
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	4608      	mov	r0, r1
 800bae2:	4611      	mov	r1, r2
 800bae4:	461a      	mov	r2, r3
 800bae6:	4603      	mov	r3, r0
 800bae8:	817b      	strh	r3, [r7, #10]
 800baea:	460b      	mov	r3, r1
 800baec:	813b      	strh	r3, [r7, #8]
 800baee:	4613      	mov	r3, r2
 800baf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800baf2:	88fb      	ldrh	r3, [r7, #6]
 800baf4:	b2da      	uxtb	r2, r3
 800baf6:	8979      	ldrh	r1, [r7, #10]
 800baf8:	4b20      	ldr	r3, [pc, #128]	; (800bb7c <I2C_RequestMemoryWrite+0xa4>)
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb00:	68f8      	ldr	r0, [r7, #12]
 800bb02:	f000 fa43 	bl	800bf8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb06:	69fa      	ldr	r2, [r7, #28]
 800bb08:	69b9      	ldr	r1, [r7, #24]
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f000 f8f0 	bl	800bcf0 <I2C_WaitOnTXISFlagUntilTimeout>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d001      	beq.n	800bb1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800bb16:	2301      	movs	r3, #1
 800bb18:	e02c      	b.n	800bb74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bb1a:	88fb      	ldrh	r3, [r7, #6]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d105      	bne.n	800bb2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bb20:	893b      	ldrh	r3, [r7, #8]
 800bb22:	b2da      	uxtb	r2, r3
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	629a      	str	r2, [r3, #40]	; 0x28
 800bb2a:	e015      	b.n	800bb58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bb2c:	893b      	ldrh	r3, [r7, #8]
 800bb2e:	0a1b      	lsrs	r3, r3, #8
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	b2da      	uxtb	r2, r3
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb3a:	69fa      	ldr	r2, [r7, #28]
 800bb3c:	69b9      	ldr	r1, [r7, #24]
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f000 f8d6 	bl	800bcf0 <I2C_WaitOnTXISFlagUntilTimeout>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d001      	beq.n	800bb4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e012      	b.n	800bb74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bb4e:	893b      	ldrh	r3, [r7, #8]
 800bb50:	b2da      	uxtb	r2, r3
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	2180      	movs	r1, #128	; 0x80
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f000 f884 	bl	800bc70 <I2C_WaitOnFlagUntilTimeout>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d001      	beq.n	800bb72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e000      	b.n	800bb74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800bb72:	2300      	movs	r3, #0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	80002000 	.word	0x80002000

0800bb80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af02      	add	r7, sp, #8
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	4608      	mov	r0, r1
 800bb8a:	4611      	mov	r1, r2
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	4603      	mov	r3, r0
 800bb90:	817b      	strh	r3, [r7, #10]
 800bb92:	460b      	mov	r3, r1
 800bb94:	813b      	strh	r3, [r7, #8]
 800bb96:	4613      	mov	r3, r2
 800bb98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bb9a:	88fb      	ldrh	r3, [r7, #6]
 800bb9c:	b2da      	uxtb	r2, r3
 800bb9e:	8979      	ldrh	r1, [r7, #10]
 800bba0:	4b20      	ldr	r3, [pc, #128]	; (800bc24 <I2C_RequestMemoryRead+0xa4>)
 800bba2:	9300      	str	r3, [sp, #0]
 800bba4:	2300      	movs	r3, #0
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f000 f9f0 	bl	800bf8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bbac:	69fa      	ldr	r2, [r7, #28]
 800bbae:	69b9      	ldr	r1, [r7, #24]
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f000 f89d 	bl	800bcf0 <I2C_WaitOnTXISFlagUntilTimeout>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d001      	beq.n	800bbc0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e02c      	b.n	800bc1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bbc0:	88fb      	ldrh	r3, [r7, #6]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d105      	bne.n	800bbd2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bbc6:	893b      	ldrh	r3, [r7, #8]
 800bbc8:	b2da      	uxtb	r2, r3
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	629a      	str	r2, [r3, #40]	; 0x28
 800bbd0:	e015      	b.n	800bbfe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bbd2:	893b      	ldrh	r3, [r7, #8]
 800bbd4:	0a1b      	lsrs	r3, r3, #8
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	b2da      	uxtb	r2, r3
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bbe0:	69fa      	ldr	r2, [r7, #28]
 800bbe2:	69b9      	ldr	r1, [r7, #24]
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f000 f883 	bl	800bcf0 <I2C_WaitOnTXISFlagUntilTimeout>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d001      	beq.n	800bbf4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e012      	b.n	800bc1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bbf4:	893b      	ldrh	r3, [r7, #8]
 800bbf6:	b2da      	uxtb	r2, r3
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	2200      	movs	r2, #0
 800bc06:	2140      	movs	r1, #64	; 0x40
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f000 f831 	bl	800bc70 <I2C_WaitOnFlagUntilTimeout>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d001      	beq.n	800bc18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800bc14:	2301      	movs	r3, #1
 800bc16:	e000      	b.n	800bc1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3710      	adds	r7, #16
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	80002000 	.word	0x80002000

0800bc28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	699b      	ldr	r3, [r3, #24]
 800bc36:	f003 0302 	and.w	r3, r3, #2
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d103      	bne.n	800bc46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2200      	movs	r2, #0
 800bc44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	699b      	ldr	r3, [r3, #24]
 800bc4c:	f003 0301 	and.w	r3, r3, #1
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d007      	beq.n	800bc64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	699a      	ldr	r2, [r3, #24]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f042 0201 	orr.w	r2, r2, #1
 800bc62:	619a      	str	r2, [r3, #24]
  }
}
 800bc64:	bf00      	nop
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	603b      	str	r3, [r7, #0]
 800bc7c:	4613      	mov	r3, r2
 800bc7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bc80:	e022      	b.n	800bcc8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc88:	d01e      	beq.n	800bcc8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc8a:	f7fd fc97 	bl	80095bc <HAL_GetTick>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	1ad3      	subs	r3, r2, r3
 800bc94:	683a      	ldr	r2, [r7, #0]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d302      	bcc.n	800bca0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d113      	bne.n	800bcc8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bca4:	f043 0220 	orr.w	r2, r3, #32
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2220      	movs	r2, #32
 800bcb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e00f      	b.n	800bce8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	699a      	ldr	r2, [r3, #24]
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	4013      	ands	r3, r2
 800bcd2:	68ba      	ldr	r2, [r7, #8]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	bf0c      	ite	eq
 800bcd8:	2301      	moveq	r3, #1
 800bcda:	2300      	movne	r3, #0
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	461a      	mov	r2, r3
 800bce0:	79fb      	ldrb	r3, [r7, #7]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d0cd      	beq.n	800bc82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bce6:	2300      	movs	r3, #0
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bcfc:	e02c      	b.n	800bd58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	68b9      	ldr	r1, [r7, #8]
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f000 f8dc 	bl	800bec0 <I2C_IsAcknowledgeFailed>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d001      	beq.n	800bd12 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e02a      	b.n	800bd68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd18:	d01e      	beq.n	800bd58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd1a:	f7fd fc4f 	bl	80095bc <HAL_GetTick>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	1ad3      	subs	r3, r2, r3
 800bd24:	68ba      	ldr	r2, [r7, #8]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d302      	bcc.n	800bd30 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d113      	bne.n	800bd58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd34:	f043 0220 	orr.w	r2, r3, #32
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2220      	movs	r2, #32
 800bd40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bd54:	2301      	movs	r3, #1
 800bd56:	e007      	b.n	800bd68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	699b      	ldr	r3, [r3, #24]
 800bd5e:	f003 0302 	and.w	r3, r3, #2
 800bd62:	2b02      	cmp	r3, #2
 800bd64:	d1cb      	bne.n	800bcfe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bd66:	2300      	movs	r3, #0
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd7c:	e028      	b.n	800bdd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	68b9      	ldr	r1, [r7, #8]
 800bd82:	68f8      	ldr	r0, [r7, #12]
 800bd84:	f000 f89c 	bl	800bec0 <I2C_IsAcknowledgeFailed>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d001      	beq.n	800bd92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e026      	b.n	800bde0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd92:	f7fd fc13 	bl	80095bc <HAL_GetTick>
 800bd96:	4602      	mov	r2, r0
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	1ad3      	subs	r3, r2, r3
 800bd9c:	68ba      	ldr	r2, [r7, #8]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d302      	bcc.n	800bda8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d113      	bne.n	800bdd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdac:	f043 0220 	orr.w	r2, r3, #32
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2220      	movs	r2, #32
 800bdb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e007      	b.n	800bde0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	699b      	ldr	r3, [r3, #24]
 800bdd6:	f003 0320 	and.w	r3, r3, #32
 800bdda:	2b20      	cmp	r3, #32
 800bddc:	d1cf      	bne.n	800bd7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bdde:	2300      	movs	r3, #0
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bdf4:	e055      	b.n	800bea2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	68b9      	ldr	r1, [r7, #8]
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f000 f860 	bl	800bec0 <I2C_IsAcknowledgeFailed>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d001      	beq.n	800be0a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	e053      	b.n	800beb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	f003 0320 	and.w	r3, r3, #32
 800be14:	2b20      	cmp	r3, #32
 800be16:	d129      	bne.n	800be6c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	699b      	ldr	r3, [r3, #24]
 800be1e:	f003 0304 	and.w	r3, r3, #4
 800be22:	2b04      	cmp	r3, #4
 800be24:	d105      	bne.n	800be32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d001      	beq.n	800be32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800be2e:	2300      	movs	r3, #0
 800be30:	e03f      	b.n	800beb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2220      	movs	r2, #32
 800be38:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	6859      	ldr	r1, [r3, #4]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	4b1d      	ldr	r3, [pc, #116]	; (800bebc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800be46:	400b      	ands	r3, r1
 800be48:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2200      	movs	r2, #0
 800be4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2220      	movs	r2, #32
 800be54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2200      	movs	r2, #0
 800be5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	e022      	b.n	800beb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be6c:	f7fd fba6 	bl	80095bc <HAL_GetTick>
 800be70:	4602      	mov	r2, r0
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	1ad3      	subs	r3, r2, r3
 800be76:	68ba      	ldr	r2, [r7, #8]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d302      	bcc.n	800be82 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10f      	bne.n	800bea2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be86:	f043 0220 	orr.w	r2, r3, #32
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2220      	movs	r2, #32
 800be92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2200      	movs	r2, #0
 800be9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800be9e:	2301      	movs	r3, #1
 800bea0:	e007      	b.n	800beb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	699b      	ldr	r3, [r3, #24]
 800bea8:	f003 0304 	and.w	r3, r3, #4
 800beac:	2b04      	cmp	r3, #4
 800beae:	d1a2      	bne.n	800bdf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	fe00e800 	.word	0xfe00e800

0800bec0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	699b      	ldr	r3, [r3, #24]
 800bed2:	f003 0310 	and.w	r3, r3, #16
 800bed6:	2b10      	cmp	r3, #16
 800bed8:	d151      	bne.n	800bf7e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800beda:	e022      	b.n	800bf22 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee2:	d01e      	beq.n	800bf22 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bee4:	f7fd fb6a 	bl	80095bc <HAL_GetTick>
 800bee8:	4602      	mov	r2, r0
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	1ad3      	subs	r3, r2, r3
 800beee:	68ba      	ldr	r2, [r7, #8]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d302      	bcc.n	800befa <I2C_IsAcknowledgeFailed+0x3a>
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d113      	bne.n	800bf22 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800befe:	f043 0220 	orr.w	r2, r3, #32
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2220      	movs	r2, #32
 800bf0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2200      	movs	r2, #0
 800bf12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e02e      	b.n	800bf80 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	699b      	ldr	r3, [r3, #24]
 800bf28:	f003 0320 	and.w	r3, r3, #32
 800bf2c:	2b20      	cmp	r3, #32
 800bf2e:	d1d5      	bne.n	800bedc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2210      	movs	r2, #16
 800bf36:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2220      	movs	r2, #32
 800bf3e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f7ff fe71 	bl	800bc28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	6859      	ldr	r1, [r3, #4]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	4b0d      	ldr	r3, [pc, #52]	; (800bf88 <I2C_IsAcknowledgeFailed+0xc8>)
 800bf52:	400b      	ands	r3, r1
 800bf54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf5a:	f043 0204 	orr.w	r2, r3, #4
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2220      	movs	r2, #32
 800bf66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2200      	movs	r2, #0
 800bf76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e000      	b.n	800bf80 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	fe00e800 	.word	0xfe00e800

0800bf8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	607b      	str	r3, [r7, #4]
 800bf96:	460b      	mov	r3, r1
 800bf98:	817b      	strh	r3, [r7, #10]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	685a      	ldr	r2, [r3, #4]
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	0d5b      	lsrs	r3, r3, #21
 800bfa8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800bfac:	4b0d      	ldr	r3, [pc, #52]	; (800bfe4 <I2C_TransferConfig+0x58>)
 800bfae:	430b      	orrs	r3, r1
 800bfb0:	43db      	mvns	r3, r3
 800bfb2:	ea02 0103 	and.w	r1, r2, r3
 800bfb6:	897b      	ldrh	r3, [r7, #10]
 800bfb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bfbc:	7a7b      	ldrb	r3, [r7, #9]
 800bfbe:	041b      	lsls	r3, r3, #16
 800bfc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bfc4:	431a      	orrs	r2, r3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	431a      	orrs	r2, r3
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	431a      	orrs	r2, r3
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	430a      	orrs	r2, r1
 800bfd4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800bfd6:	bf00      	nop
 800bfd8:	3714      	adds	r7, #20
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop
 800bfe4:	03ff63ff 	.word	0x03ff63ff

0800bfe8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	2b20      	cmp	r3, #32
 800bffc:	d138      	bne.n	800c070 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c004:	2b01      	cmp	r3, #1
 800c006:	d101      	bne.n	800c00c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c008:	2302      	movs	r3, #2
 800c00a:	e032      	b.n	800c072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2224      	movs	r2, #36	; 0x24
 800c018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f022 0201 	bic.w	r2, r2, #1
 800c02a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c03a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	6819      	ldr	r1, [r3, #0]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	683a      	ldr	r2, [r7, #0]
 800c048:	430a      	orrs	r2, r1
 800c04a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f042 0201 	orr.w	r2, r2, #1
 800c05a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2220      	movs	r2, #32
 800c060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c06c:	2300      	movs	r3, #0
 800c06e:	e000      	b.n	800c072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c070:	2302      	movs	r3, #2
  }
}
 800c072:	4618      	mov	r0, r3
 800c074:	370c      	adds	r7, #12
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr

0800c07e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c07e:	b480      	push	{r7}
 800c080:	b085      	sub	sp, #20
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
 800c086:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b20      	cmp	r3, #32
 800c092:	d139      	bne.n	800c108 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d101      	bne.n	800c0a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c09e:	2302      	movs	r3, #2
 800c0a0:	e033      	b.n	800c10a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2224      	movs	r2, #36	; 0x24
 800c0ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f022 0201 	bic.w	r2, r2, #1
 800c0c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c0d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	021b      	lsls	r3, r3, #8
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	68fa      	ldr	r2, [r7, #12]
 800c0e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f042 0201 	orr.w	r2, r2, #1
 800c0f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2220      	movs	r2, #32
 800c0f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c104:	2300      	movs	r3, #0
 800c106:	e000      	b.n	800c10a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c108:	2302      	movs	r3, #2
  }
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3714      	adds	r7, #20
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
	...

0800c118 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c120:	4b0b      	ldr	r3, [pc, #44]	; (800c150 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800c122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c124:	4a0a      	ldr	r2, [pc, #40]	; (800c150 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800c126:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c12a:	6453      	str	r3, [r2, #68]	; 0x44
 800c12c:	4b08      	ldr	r3, [pc, #32]	; (800c150 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800c12e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c134:	60fb      	str	r3, [r7, #12]
 800c136:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 800c138:	4b06      	ldr	r3, [pc, #24]	; (800c154 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800c13a:	685a      	ldr	r2, [r3, #4]
 800c13c:	4905      	ldr	r1, [pc, #20]	; (800c154 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4313      	orrs	r3, r2
 800c142:	604b      	str	r3, [r1, #4]
}
 800c144:	bf00      	nop
 800c146:	3714      	adds	r7, #20
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr
 800c150:	40023800 	.word	0x40023800
 800c154:	40013800 	.word	0x40013800

0800c158 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c15a:	b08f      	sub	sp, #60	; 0x3c
 800c15c:	af0a      	add	r7, sp, #40	; 0x28
 800c15e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d101      	bne.n	800c16a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c166:	2301      	movs	r3, #1
 800c168:	e116      	b.n	800c398 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c176:	b2db      	uxtb	r3, r3
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d106      	bne.n	800c18a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f7fc fc1b 	bl	80089c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2203      	movs	r2, #3
 800c18e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d102      	bne.n	800c1a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f004 f841 	bl	8010230 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	603b      	str	r3, [r7, #0]
 800c1b4:	687e      	ldr	r6, [r7, #4]
 800c1b6:	466d      	mov	r5, sp
 800c1b8:	f106 0410 	add.w	r4, r6, #16
 800c1bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c1c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c1c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c1c8:	e885 0003 	stmia.w	r5, {r0, r1}
 800c1cc:	1d33      	adds	r3, r6, #4
 800c1ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c1d0:	6838      	ldr	r0, [r7, #0]
 800c1d2:	f003 ffd5 	bl	8010180 <USB_CoreInit>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d005      	beq.n	800c1e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2202      	movs	r2, #2
 800c1e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e0d7      	b.n	800c398 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f004 f82f 	bl	8010252 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	73fb      	strb	r3, [r7, #15]
 800c1f8:	e04a      	b.n	800c290 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c1fa:	7bfa      	ldrb	r2, [r7, #15]
 800c1fc:	6879      	ldr	r1, [r7, #4]
 800c1fe:	4613      	mov	r3, r2
 800c200:	00db      	lsls	r3, r3, #3
 800c202:	1a9b      	subs	r3, r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	440b      	add	r3, r1
 800c208:	333d      	adds	r3, #61	; 0x3d
 800c20a:	2201      	movs	r2, #1
 800c20c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c20e:	7bfa      	ldrb	r2, [r7, #15]
 800c210:	6879      	ldr	r1, [r7, #4]
 800c212:	4613      	mov	r3, r2
 800c214:	00db      	lsls	r3, r3, #3
 800c216:	1a9b      	subs	r3, r3, r2
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	440b      	add	r3, r1
 800c21c:	333c      	adds	r3, #60	; 0x3c
 800c21e:	7bfa      	ldrb	r2, [r7, #15]
 800c220:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c222:	7bfa      	ldrb	r2, [r7, #15]
 800c224:	7bfb      	ldrb	r3, [r7, #15]
 800c226:	b298      	uxth	r0, r3
 800c228:	6879      	ldr	r1, [r7, #4]
 800c22a:	4613      	mov	r3, r2
 800c22c:	00db      	lsls	r3, r3, #3
 800c22e:	1a9b      	subs	r3, r3, r2
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	440b      	add	r3, r1
 800c234:	3342      	adds	r3, #66	; 0x42
 800c236:	4602      	mov	r2, r0
 800c238:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c23a:	7bfa      	ldrb	r2, [r7, #15]
 800c23c:	6879      	ldr	r1, [r7, #4]
 800c23e:	4613      	mov	r3, r2
 800c240:	00db      	lsls	r3, r3, #3
 800c242:	1a9b      	subs	r3, r3, r2
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	440b      	add	r3, r1
 800c248:	333f      	adds	r3, #63	; 0x3f
 800c24a:	2200      	movs	r2, #0
 800c24c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c24e:	7bfa      	ldrb	r2, [r7, #15]
 800c250:	6879      	ldr	r1, [r7, #4]
 800c252:	4613      	mov	r3, r2
 800c254:	00db      	lsls	r3, r3, #3
 800c256:	1a9b      	subs	r3, r3, r2
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	440b      	add	r3, r1
 800c25c:	3344      	adds	r3, #68	; 0x44
 800c25e:	2200      	movs	r2, #0
 800c260:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c262:	7bfa      	ldrb	r2, [r7, #15]
 800c264:	6879      	ldr	r1, [r7, #4]
 800c266:	4613      	mov	r3, r2
 800c268:	00db      	lsls	r3, r3, #3
 800c26a:	1a9b      	subs	r3, r3, r2
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	440b      	add	r3, r1
 800c270:	3348      	adds	r3, #72	; 0x48
 800c272:	2200      	movs	r2, #0
 800c274:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c276:	7bfa      	ldrb	r2, [r7, #15]
 800c278:	6879      	ldr	r1, [r7, #4]
 800c27a:	4613      	mov	r3, r2
 800c27c:	00db      	lsls	r3, r3, #3
 800c27e:	1a9b      	subs	r3, r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	440b      	add	r3, r1
 800c284:	3350      	adds	r3, #80	; 0x50
 800c286:	2200      	movs	r2, #0
 800c288:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c28a:	7bfb      	ldrb	r3, [r7, #15]
 800c28c:	3301      	adds	r3, #1
 800c28e:	73fb      	strb	r3, [r7, #15]
 800c290:	7bfa      	ldrb	r2, [r7, #15]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	429a      	cmp	r2, r3
 800c298:	d3af      	bcc.n	800c1fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c29a:	2300      	movs	r3, #0
 800c29c:	73fb      	strb	r3, [r7, #15]
 800c29e:	e044      	b.n	800c32a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c2a0:	7bfa      	ldrb	r2, [r7, #15]
 800c2a2:	6879      	ldr	r1, [r7, #4]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	00db      	lsls	r3, r3, #3
 800c2a8:	1a9b      	subs	r3, r3, r2
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	440b      	add	r3, r1
 800c2ae:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c2b6:	7bfa      	ldrb	r2, [r7, #15]
 800c2b8:	6879      	ldr	r1, [r7, #4]
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	00db      	lsls	r3, r3, #3
 800c2be:	1a9b      	subs	r3, r3, r2
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	440b      	add	r3, r1
 800c2c4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c2c8:	7bfa      	ldrb	r2, [r7, #15]
 800c2ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c2cc:	7bfa      	ldrb	r2, [r7, #15]
 800c2ce:	6879      	ldr	r1, [r7, #4]
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	00db      	lsls	r3, r3, #3
 800c2d4:	1a9b      	subs	r3, r3, r2
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	440b      	add	r3, r1
 800c2da:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c2de:	2200      	movs	r2, #0
 800c2e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c2e2:	7bfa      	ldrb	r2, [r7, #15]
 800c2e4:	6879      	ldr	r1, [r7, #4]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	00db      	lsls	r3, r3, #3
 800c2ea:	1a9b      	subs	r3, r3, r2
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	440b      	add	r3, r1
 800c2f0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c2f8:	7bfa      	ldrb	r2, [r7, #15]
 800c2fa:	6879      	ldr	r1, [r7, #4]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	00db      	lsls	r3, r3, #3
 800c300:	1a9b      	subs	r3, r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	440b      	add	r3, r1
 800c306:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c30a:	2200      	movs	r2, #0
 800c30c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c30e:	7bfa      	ldrb	r2, [r7, #15]
 800c310:	6879      	ldr	r1, [r7, #4]
 800c312:	4613      	mov	r3, r2
 800c314:	00db      	lsls	r3, r3, #3
 800c316:	1a9b      	subs	r3, r3, r2
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	440b      	add	r3, r1
 800c31c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c320:	2200      	movs	r2, #0
 800c322:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c324:	7bfb      	ldrb	r3, [r7, #15]
 800c326:	3301      	adds	r3, #1
 800c328:	73fb      	strb	r3, [r7, #15]
 800c32a:	7bfa      	ldrb	r2, [r7, #15]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	429a      	cmp	r2, r3
 800c332:	d3b5      	bcc.n	800c2a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	603b      	str	r3, [r7, #0]
 800c33a:	687e      	ldr	r6, [r7, #4]
 800c33c:	466d      	mov	r5, sp
 800c33e:	f106 0410 	add.w	r4, r6, #16
 800c342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c34a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c34e:	e885 0003 	stmia.w	r5, {r0, r1}
 800c352:	1d33      	adds	r3, r6, #4
 800c354:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c356:	6838      	ldr	r0, [r7, #0]
 800c358:	f003 ffa6 	bl	80102a8 <USB_DevInit>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d005      	beq.n	800c36e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2202      	movs	r2, #2
 800c366:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c36a:	2301      	movs	r3, #1
 800c36c:	e014      	b.n	800c398 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2201      	movs	r2, #1
 800c37a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c382:	2b01      	cmp	r3, #1
 800c384:	d102      	bne.n	800c38c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 f80a 	bl	800c3a0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4618      	mov	r0, r3
 800c392:	f004 f958 	bl	8010646 <USB_DevDisconnect>

  return HAL_OK;
 800c396:	2300      	movs	r3, #0
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3714      	adds	r7, #20
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c3a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	699b      	ldr	r3, [r3, #24]
 800c3c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3ce:	4b05      	ldr	r3, [pc, #20]	; (800c3e4 <HAL_PCDEx_ActivateLPM+0x44>)
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3714      	adds	r7, #20
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr
 800c3e4:	10000003 	.word	0x10000003

0800c3e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c3ec:	4b05      	ldr	r3, [pc, #20]	; (800c404 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a04      	ldr	r2, [pc, #16]	; (800c404 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c3f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3f6:	6013      	str	r3, [r2, #0]
}
 800c3f8:	bf00      	nop
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	40007000 	.word	0x40007000

0800c408 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b086      	sub	sp, #24
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c410:	2300      	movs	r3, #0
 800c412:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d101      	bne.n	800c41e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c41a:	2301      	movs	r3, #1
 800c41c:	e29b      	b.n	800c956 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f003 0301 	and.w	r3, r3, #1
 800c426:	2b00      	cmp	r3, #0
 800c428:	f000 8087 	beq.w	800c53a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c42c:	4b96      	ldr	r3, [pc, #600]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	f003 030c 	and.w	r3, r3, #12
 800c434:	2b04      	cmp	r3, #4
 800c436:	d00c      	beq.n	800c452 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c438:	4b93      	ldr	r3, [pc, #588]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	f003 030c 	and.w	r3, r3, #12
 800c440:	2b08      	cmp	r3, #8
 800c442:	d112      	bne.n	800c46a <HAL_RCC_OscConfig+0x62>
 800c444:	4b90      	ldr	r3, [pc, #576]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c44c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c450:	d10b      	bne.n	800c46a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c452:	4b8d      	ldr	r3, [pc, #564]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d06c      	beq.n	800c538 <HAL_RCC_OscConfig+0x130>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d168      	bne.n	800c538 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c466:	2301      	movs	r3, #1
 800c468:	e275      	b.n	800c956 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c472:	d106      	bne.n	800c482 <HAL_RCC_OscConfig+0x7a>
 800c474:	4b84      	ldr	r3, [pc, #528]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a83      	ldr	r2, [pc, #524]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c47a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c47e:	6013      	str	r3, [r2, #0]
 800c480:	e02e      	b.n	800c4e0 <HAL_RCC_OscConfig+0xd8>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d10c      	bne.n	800c4a4 <HAL_RCC_OscConfig+0x9c>
 800c48a:	4b7f      	ldr	r3, [pc, #508]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a7e      	ldr	r2, [pc, #504]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c494:	6013      	str	r3, [r2, #0]
 800c496:	4b7c      	ldr	r3, [pc, #496]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a7b      	ldr	r2, [pc, #492]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c49c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c4a0:	6013      	str	r3, [r2, #0]
 800c4a2:	e01d      	b.n	800c4e0 <HAL_RCC_OscConfig+0xd8>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4ac:	d10c      	bne.n	800c4c8 <HAL_RCC_OscConfig+0xc0>
 800c4ae:	4b76      	ldr	r3, [pc, #472]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a75      	ldr	r2, [pc, #468]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c4b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c4b8:	6013      	str	r3, [r2, #0]
 800c4ba:	4b73      	ldr	r3, [pc, #460]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a72      	ldr	r2, [pc, #456]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c4c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4c4:	6013      	str	r3, [r2, #0]
 800c4c6:	e00b      	b.n	800c4e0 <HAL_RCC_OscConfig+0xd8>
 800c4c8:	4b6f      	ldr	r3, [pc, #444]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a6e      	ldr	r2, [pc, #440]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c4ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4d2:	6013      	str	r3, [r2, #0]
 800c4d4:	4b6c      	ldr	r3, [pc, #432]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a6b      	ldr	r2, [pc, #428]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c4da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c4de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d013      	beq.n	800c510 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4e8:	f7fd f868 	bl	80095bc <HAL_GetTick>
 800c4ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c4ee:	e008      	b.n	800c502 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c4f0:	f7fd f864 	bl	80095bc <HAL_GetTick>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	1ad3      	subs	r3, r2, r3
 800c4fa:	2b64      	cmp	r3, #100	; 0x64
 800c4fc:	d901      	bls.n	800c502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c4fe:	2303      	movs	r3, #3
 800c500:	e229      	b.n	800c956 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c502:	4b61      	ldr	r3, [pc, #388]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d0f0      	beq.n	800c4f0 <HAL_RCC_OscConfig+0xe8>
 800c50e:	e014      	b.n	800c53a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c510:	f7fd f854 	bl	80095bc <HAL_GetTick>
 800c514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c516:	e008      	b.n	800c52a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c518:	f7fd f850 	bl	80095bc <HAL_GetTick>
 800c51c:	4602      	mov	r2, r0
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	2b64      	cmp	r3, #100	; 0x64
 800c524:	d901      	bls.n	800c52a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c526:	2303      	movs	r3, #3
 800c528:	e215      	b.n	800c956 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c52a:	4b57      	ldr	r3, [pc, #348]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1f0      	bne.n	800c518 <HAL_RCC_OscConfig+0x110>
 800c536:	e000      	b.n	800c53a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f003 0302 	and.w	r3, r3, #2
 800c542:	2b00      	cmp	r3, #0
 800c544:	d069      	beq.n	800c61a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c546:	4b50      	ldr	r3, [pc, #320]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	f003 030c 	and.w	r3, r3, #12
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00b      	beq.n	800c56a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c552:	4b4d      	ldr	r3, [pc, #308]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	f003 030c 	and.w	r3, r3, #12
 800c55a:	2b08      	cmp	r3, #8
 800c55c:	d11c      	bne.n	800c598 <HAL_RCC_OscConfig+0x190>
 800c55e:	4b4a      	ldr	r3, [pc, #296]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c566:	2b00      	cmp	r3, #0
 800c568:	d116      	bne.n	800c598 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c56a:	4b47      	ldr	r3, [pc, #284]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f003 0302 	and.w	r3, r3, #2
 800c572:	2b00      	cmp	r3, #0
 800c574:	d005      	beq.n	800c582 <HAL_RCC_OscConfig+0x17a>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d001      	beq.n	800c582 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	e1e9      	b.n	800c956 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c582:	4b41      	ldr	r3, [pc, #260]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	00db      	lsls	r3, r3, #3
 800c590:	493d      	ldr	r1, [pc, #244]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c592:	4313      	orrs	r3, r2
 800c594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c596:	e040      	b.n	800c61a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d023      	beq.n	800c5e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c5a0:	4b39      	ldr	r3, [pc, #228]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a38      	ldr	r2, [pc, #224]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c5a6:	f043 0301 	orr.w	r3, r3, #1
 800c5aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5ac:	f7fd f806 	bl	80095bc <HAL_GetTick>
 800c5b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c5b2:	e008      	b.n	800c5c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5b4:	f7fd f802 	bl	80095bc <HAL_GetTick>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	1ad3      	subs	r3, r2, r3
 800c5be:	2b02      	cmp	r3, #2
 800c5c0:	d901      	bls.n	800c5c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c5c2:	2303      	movs	r3, #3
 800c5c4:	e1c7      	b.n	800c956 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c5c6:	4b30      	ldr	r3, [pc, #192]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f003 0302 	and.w	r3, r3, #2
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d0f0      	beq.n	800c5b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c5d2:	4b2d      	ldr	r3, [pc, #180]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	691b      	ldr	r3, [r3, #16]
 800c5de:	00db      	lsls	r3, r3, #3
 800c5e0:	4929      	ldr	r1, [pc, #164]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	600b      	str	r3, [r1, #0]
 800c5e6:	e018      	b.n	800c61a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c5e8:	4b27      	ldr	r3, [pc, #156]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a26      	ldr	r2, [pc, #152]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c5ee:	f023 0301 	bic.w	r3, r3, #1
 800c5f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5f4:	f7fc ffe2 	bl	80095bc <HAL_GetTick>
 800c5f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c5fa:	e008      	b.n	800c60e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5fc:	f7fc ffde 	bl	80095bc <HAL_GetTick>
 800c600:	4602      	mov	r2, r0
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	1ad3      	subs	r3, r2, r3
 800c606:	2b02      	cmp	r3, #2
 800c608:	d901      	bls.n	800c60e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c60a:	2303      	movs	r3, #3
 800c60c:	e1a3      	b.n	800c956 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c60e:	4b1e      	ldr	r3, [pc, #120]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f003 0302 	and.w	r3, r3, #2
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1f0      	bne.n	800c5fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f003 0308 	and.w	r3, r3, #8
 800c622:	2b00      	cmp	r3, #0
 800c624:	d038      	beq.n	800c698 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d019      	beq.n	800c662 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c62e:	4b16      	ldr	r3, [pc, #88]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c632:	4a15      	ldr	r2, [pc, #84]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c634:	f043 0301 	orr.w	r3, r3, #1
 800c638:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c63a:	f7fc ffbf 	bl	80095bc <HAL_GetTick>
 800c63e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c640:	e008      	b.n	800c654 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c642:	f7fc ffbb 	bl	80095bc <HAL_GetTick>
 800c646:	4602      	mov	r2, r0
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	1ad3      	subs	r3, r2, r3
 800c64c:	2b02      	cmp	r3, #2
 800c64e:	d901      	bls.n	800c654 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c650:	2303      	movs	r3, #3
 800c652:	e180      	b.n	800c956 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c654:	4b0c      	ldr	r3, [pc, #48]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c658:	f003 0302 	and.w	r3, r3, #2
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d0f0      	beq.n	800c642 <HAL_RCC_OscConfig+0x23a>
 800c660:	e01a      	b.n	800c698 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c662:	4b09      	ldr	r3, [pc, #36]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c666:	4a08      	ldr	r2, [pc, #32]	; (800c688 <HAL_RCC_OscConfig+0x280>)
 800c668:	f023 0301 	bic.w	r3, r3, #1
 800c66c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c66e:	f7fc ffa5 	bl	80095bc <HAL_GetTick>
 800c672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c674:	e00a      	b.n	800c68c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c676:	f7fc ffa1 	bl	80095bc <HAL_GetTick>
 800c67a:	4602      	mov	r2, r0
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	1ad3      	subs	r3, r2, r3
 800c680:	2b02      	cmp	r3, #2
 800c682:	d903      	bls.n	800c68c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c684:	2303      	movs	r3, #3
 800c686:	e166      	b.n	800c956 <HAL_RCC_OscConfig+0x54e>
 800c688:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c68c:	4b92      	ldr	r3, [pc, #584]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c68e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c690:	f003 0302 	and.w	r3, r3, #2
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1ee      	bne.n	800c676 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f003 0304 	and.w	r3, r3, #4
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f000 80a4 	beq.w	800c7ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c6a6:	4b8c      	ldr	r3, [pc, #560]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d10d      	bne.n	800c6ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c6b2:	4b89      	ldr	r3, [pc, #548]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b6:	4a88      	ldr	r2, [pc, #544]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c6b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6bc:	6413      	str	r3, [r2, #64]	; 0x40
 800c6be:	4b86      	ldr	r3, [pc, #536]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6c6:	60bb      	str	r3, [r7, #8]
 800c6c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c6ce:	4b83      	ldr	r3, [pc, #524]	; (800c8dc <HAL_RCC_OscConfig+0x4d4>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d118      	bne.n	800c70c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c6da:	4b80      	ldr	r3, [pc, #512]	; (800c8dc <HAL_RCC_OscConfig+0x4d4>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a7f      	ldr	r2, [pc, #508]	; (800c8dc <HAL_RCC_OscConfig+0x4d4>)
 800c6e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c6e6:	f7fc ff69 	bl	80095bc <HAL_GetTick>
 800c6ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c6ec:	e008      	b.n	800c700 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c6ee:	f7fc ff65 	bl	80095bc <HAL_GetTick>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	1ad3      	subs	r3, r2, r3
 800c6f8:	2b64      	cmp	r3, #100	; 0x64
 800c6fa:	d901      	bls.n	800c700 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c6fc:	2303      	movs	r3, #3
 800c6fe:	e12a      	b.n	800c956 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c700:	4b76      	ldr	r3, [pc, #472]	; (800c8dc <HAL_RCC_OscConfig+0x4d4>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d0f0      	beq.n	800c6ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	2b01      	cmp	r3, #1
 800c712:	d106      	bne.n	800c722 <HAL_RCC_OscConfig+0x31a>
 800c714:	4b70      	ldr	r3, [pc, #448]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c718:	4a6f      	ldr	r2, [pc, #444]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c71a:	f043 0301 	orr.w	r3, r3, #1
 800c71e:	6713      	str	r3, [r2, #112]	; 0x70
 800c720:	e02d      	b.n	800c77e <HAL_RCC_OscConfig+0x376>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	689b      	ldr	r3, [r3, #8]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10c      	bne.n	800c744 <HAL_RCC_OscConfig+0x33c>
 800c72a:	4b6b      	ldr	r3, [pc, #428]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c72c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c72e:	4a6a      	ldr	r2, [pc, #424]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c730:	f023 0301 	bic.w	r3, r3, #1
 800c734:	6713      	str	r3, [r2, #112]	; 0x70
 800c736:	4b68      	ldr	r3, [pc, #416]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c73a:	4a67      	ldr	r2, [pc, #412]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c73c:	f023 0304 	bic.w	r3, r3, #4
 800c740:	6713      	str	r3, [r2, #112]	; 0x70
 800c742:	e01c      	b.n	800c77e <HAL_RCC_OscConfig+0x376>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	2b05      	cmp	r3, #5
 800c74a:	d10c      	bne.n	800c766 <HAL_RCC_OscConfig+0x35e>
 800c74c:	4b62      	ldr	r3, [pc, #392]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c74e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c750:	4a61      	ldr	r2, [pc, #388]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c752:	f043 0304 	orr.w	r3, r3, #4
 800c756:	6713      	str	r3, [r2, #112]	; 0x70
 800c758:	4b5f      	ldr	r3, [pc, #380]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c75a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c75c:	4a5e      	ldr	r2, [pc, #376]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c75e:	f043 0301 	orr.w	r3, r3, #1
 800c762:	6713      	str	r3, [r2, #112]	; 0x70
 800c764:	e00b      	b.n	800c77e <HAL_RCC_OscConfig+0x376>
 800c766:	4b5c      	ldr	r3, [pc, #368]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c76a:	4a5b      	ldr	r2, [pc, #364]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c76c:	f023 0301 	bic.w	r3, r3, #1
 800c770:	6713      	str	r3, [r2, #112]	; 0x70
 800c772:	4b59      	ldr	r3, [pc, #356]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c776:	4a58      	ldr	r2, [pc, #352]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c778:	f023 0304 	bic.w	r3, r3, #4
 800c77c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d015      	beq.n	800c7b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c786:	f7fc ff19 	bl	80095bc <HAL_GetTick>
 800c78a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c78c:	e00a      	b.n	800c7a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c78e:	f7fc ff15 	bl	80095bc <HAL_GetTick>
 800c792:	4602      	mov	r2, r0
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	1ad3      	subs	r3, r2, r3
 800c798:	f241 3288 	movw	r2, #5000	; 0x1388
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d901      	bls.n	800c7a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	e0d8      	b.n	800c956 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c7a4:	4b4c      	ldr	r3, [pc, #304]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c7a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7a8:	f003 0302 	and.w	r3, r3, #2
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d0ee      	beq.n	800c78e <HAL_RCC_OscConfig+0x386>
 800c7b0:	e014      	b.n	800c7dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7b2:	f7fc ff03 	bl	80095bc <HAL_GetTick>
 800c7b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c7b8:	e00a      	b.n	800c7d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c7ba:	f7fc feff 	bl	80095bc <HAL_GetTick>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d901      	bls.n	800c7d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c7cc:	2303      	movs	r3, #3
 800c7ce:	e0c2      	b.n	800c956 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c7d0:	4b41      	ldr	r3, [pc, #260]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c7d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7d4:	f003 0302 	and.w	r3, r3, #2
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1ee      	bne.n	800c7ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c7dc:	7dfb      	ldrb	r3, [r7, #23]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d105      	bne.n	800c7ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c7e2:	4b3d      	ldr	r3, [pc, #244]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e6:	4a3c      	ldr	r2, [pc, #240]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c7e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	699b      	ldr	r3, [r3, #24]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f000 80ae 	beq.w	800c954 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c7f8:	4b37      	ldr	r3, [pc, #220]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	f003 030c 	and.w	r3, r3, #12
 800c800:	2b08      	cmp	r3, #8
 800c802:	d06d      	beq.n	800c8e0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	699b      	ldr	r3, [r3, #24]
 800c808:	2b02      	cmp	r3, #2
 800c80a:	d14b      	bne.n	800c8a4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c80c:	4b32      	ldr	r3, [pc, #200]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a31      	ldr	r2, [pc, #196]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c818:	f7fc fed0 	bl	80095bc <HAL_GetTick>
 800c81c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c81e:	e008      	b.n	800c832 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c820:	f7fc fecc 	bl	80095bc <HAL_GetTick>
 800c824:	4602      	mov	r2, r0
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	2b02      	cmp	r3, #2
 800c82c:	d901      	bls.n	800c832 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c82e:	2303      	movs	r3, #3
 800c830:	e091      	b.n	800c956 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c832:	4b29      	ldr	r3, [pc, #164]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d1f0      	bne.n	800c820 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	69da      	ldr	r2, [r3, #28]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6a1b      	ldr	r3, [r3, #32]
 800c846:	431a      	orrs	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84c:	019b      	lsls	r3, r3, #6
 800c84e:	431a      	orrs	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c854:	085b      	lsrs	r3, r3, #1
 800c856:	3b01      	subs	r3, #1
 800c858:	041b      	lsls	r3, r3, #16
 800c85a:	431a      	orrs	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c860:	061b      	lsls	r3, r3, #24
 800c862:	431a      	orrs	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c868:	071b      	lsls	r3, r3, #28
 800c86a:	491b      	ldr	r1, [pc, #108]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c86c:	4313      	orrs	r3, r2
 800c86e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c870:	4b19      	ldr	r3, [pc, #100]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4a18      	ldr	r2, [pc, #96]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c87a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c87c:	f7fc fe9e 	bl	80095bc <HAL_GetTick>
 800c880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c882:	e008      	b.n	800c896 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c884:	f7fc fe9a 	bl	80095bc <HAL_GetTick>
 800c888:	4602      	mov	r2, r0
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	1ad3      	subs	r3, r2, r3
 800c88e:	2b02      	cmp	r3, #2
 800c890:	d901      	bls.n	800c896 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800c892:	2303      	movs	r3, #3
 800c894:	e05f      	b.n	800c956 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c896:	4b10      	ldr	r3, [pc, #64]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d0f0      	beq.n	800c884 <HAL_RCC_OscConfig+0x47c>
 800c8a2:	e057      	b.n	800c954 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8a4:	4b0c      	ldr	r3, [pc, #48]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a0b      	ldr	r2, [pc, #44]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c8aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c8ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8b0:	f7fc fe84 	bl	80095bc <HAL_GetTick>
 800c8b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8b6:	e008      	b.n	800c8ca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8b8:	f7fc fe80 	bl	80095bc <HAL_GetTick>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	1ad3      	subs	r3, r2, r3
 800c8c2:	2b02      	cmp	r3, #2
 800c8c4:	d901      	bls.n	800c8ca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800c8c6:	2303      	movs	r3, #3
 800c8c8:	e045      	b.n	800c956 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8ca:	4b03      	ldr	r3, [pc, #12]	; (800c8d8 <HAL_RCC_OscConfig+0x4d0>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d1f0      	bne.n	800c8b8 <HAL_RCC_OscConfig+0x4b0>
 800c8d6:	e03d      	b.n	800c954 <HAL_RCC_OscConfig+0x54c>
 800c8d8:	40023800 	.word	0x40023800
 800c8dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c8e0:	4b1f      	ldr	r3, [pc, #124]	; (800c960 <HAL_RCC_OscConfig+0x558>)
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	699b      	ldr	r3, [r3, #24]
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d030      	beq.n	800c950 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d129      	bne.n	800c950 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c906:	429a      	cmp	r2, r3
 800c908:	d122      	bne.n	800c950 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c910:	4013      	ands	r3, r2
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c916:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c918:	4293      	cmp	r3, r2
 800c91a:	d119      	bne.n	800c950 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c926:	085b      	lsrs	r3, r3, #1
 800c928:	3b01      	subs	r3, #1
 800c92a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d10f      	bne.n	800c950 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c93a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d107      	bne.n	800c950 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c94a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d001      	beq.n	800c954 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800c950:	2301      	movs	r3, #1
 800c952:	e000      	b.n	800c956 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3718      	adds	r7, #24
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	40023800 	.word	0x40023800

0800c964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c96e:	2300      	movs	r3, #0
 800c970:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d101      	bne.n	800c97c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c978:	2301      	movs	r3, #1
 800c97a:	e0d0      	b.n	800cb1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c97c:	4b6a      	ldr	r3, [pc, #424]	; (800cb28 <HAL_RCC_ClockConfig+0x1c4>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f003 030f 	and.w	r3, r3, #15
 800c984:	683a      	ldr	r2, [r7, #0]
 800c986:	429a      	cmp	r2, r3
 800c988:	d910      	bls.n	800c9ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c98a:	4b67      	ldr	r3, [pc, #412]	; (800cb28 <HAL_RCC_ClockConfig+0x1c4>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f023 020f 	bic.w	r2, r3, #15
 800c992:	4965      	ldr	r1, [pc, #404]	; (800cb28 <HAL_RCC_ClockConfig+0x1c4>)
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	4313      	orrs	r3, r2
 800c998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c99a:	4b63      	ldr	r3, [pc, #396]	; (800cb28 <HAL_RCC_ClockConfig+0x1c4>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f003 030f 	and.w	r3, r3, #15
 800c9a2:	683a      	ldr	r2, [r7, #0]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d001      	beq.n	800c9ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e0b8      	b.n	800cb1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f003 0302 	and.w	r3, r3, #2
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d020      	beq.n	800c9fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f003 0304 	and.w	r3, r3, #4
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d005      	beq.n	800c9d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c9c4:	4b59      	ldr	r3, [pc, #356]	; (800cb2c <HAL_RCC_ClockConfig+0x1c8>)
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	4a58      	ldr	r2, [pc, #352]	; (800cb2c <HAL_RCC_ClockConfig+0x1c8>)
 800c9ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c9ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f003 0308 	and.w	r3, r3, #8
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d005      	beq.n	800c9e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c9dc:	4b53      	ldr	r3, [pc, #332]	; (800cb2c <HAL_RCC_ClockConfig+0x1c8>)
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	4a52      	ldr	r2, [pc, #328]	; (800cb2c <HAL_RCC_ClockConfig+0x1c8>)
 800c9e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c9e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c9e8:	4b50      	ldr	r3, [pc, #320]	; (800cb2c <HAL_RCC_ClockConfig+0x1c8>)
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	494d      	ldr	r1, [pc, #308]	; (800cb2c <HAL_RCC_ClockConfig+0x1c8>)
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f003 0301 	and.w	r3, r3, #1
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d040      	beq.n	800ca88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d107      	bne.n	800ca1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca0e:	4b47      	ldr	r3, [pc, #284]	; (800cb2c <HAL_RCC_ClockConfig+0x1c8>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d115      	bne.n	800ca46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e07f      	b.n	800cb1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	2b02      	cmp	r3, #2
 800ca24:	d107      	bne.n	800ca36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca26:	4b41      	ldr	r3, [pc, #260]	; (800cb2c <HAL_RCC_ClockConfig+0x1c8>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d109      	bne.n	800ca46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ca32:	2301      	movs	r3, #1
 800ca34:	e073      	b.n	800cb1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ca36:	4b3d      	ldr	r3, [pc, #244]	; (800cb2c <HAL_RCC_ClockConfig+0x1c8>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f003 0302 	and.w	r3, r3, #2
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d101      	bne.n	800ca46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ca42:	2301      	movs	r3, #1
 800ca44:	e06b      	b.n	800cb1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ca46:	4b39      	ldr	r3, [pc, #228]	; (800cb2c <HAL_RCC_ClockConfig+0x1c8>)
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	f023 0203 	bic.w	r2, r3, #3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	4936      	ldr	r1, [pc, #216]	; (800cb2c <HAL_RCC_ClockConfig+0x1c8>)
 800ca54:	4313      	orrs	r3, r2
 800ca56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca58:	f7fc fdb0 	bl	80095bc <HAL_GetTick>
 800ca5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca5e:	e00a      	b.n	800ca76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca60:	f7fc fdac 	bl	80095bc <HAL_GetTick>
 800ca64:	4602      	mov	r2, r0
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	1ad3      	subs	r3, r2, r3
 800ca6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d901      	bls.n	800ca76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800ca72:	2303      	movs	r3, #3
 800ca74:	e053      	b.n	800cb1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca76:	4b2d      	ldr	r3, [pc, #180]	; (800cb2c <HAL_RCC_ClockConfig+0x1c8>)
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	f003 020c 	and.w	r2, r3, #12
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d1eb      	bne.n	800ca60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ca88:	4b27      	ldr	r3, [pc, #156]	; (800cb28 <HAL_RCC_ClockConfig+0x1c4>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f003 030f 	and.w	r3, r3, #15
 800ca90:	683a      	ldr	r2, [r7, #0]
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d210      	bcs.n	800cab8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca96:	4b24      	ldr	r3, [pc, #144]	; (800cb28 <HAL_RCC_ClockConfig+0x1c4>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f023 020f 	bic.w	r2, r3, #15
 800ca9e:	4922      	ldr	r1, [pc, #136]	; (800cb28 <HAL_RCC_ClockConfig+0x1c4>)
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	4313      	orrs	r3, r2
 800caa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800caa6:	4b20      	ldr	r3, [pc, #128]	; (800cb28 <HAL_RCC_ClockConfig+0x1c4>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f003 030f 	and.w	r3, r3, #15
 800caae:	683a      	ldr	r2, [r7, #0]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d001      	beq.n	800cab8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800cab4:	2301      	movs	r3, #1
 800cab6:	e032      	b.n	800cb1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f003 0304 	and.w	r3, r3, #4
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d008      	beq.n	800cad6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cac4:	4b19      	ldr	r3, [pc, #100]	; (800cb2c <HAL_RCC_ClockConfig+0x1c8>)
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	4916      	ldr	r1, [pc, #88]	; (800cb2c <HAL_RCC_ClockConfig+0x1c8>)
 800cad2:	4313      	orrs	r3, r2
 800cad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f003 0308 	and.w	r3, r3, #8
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d009      	beq.n	800caf6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cae2:	4b12      	ldr	r3, [pc, #72]	; (800cb2c <HAL_RCC_ClockConfig+0x1c8>)
 800cae4:	689b      	ldr	r3, [r3, #8]
 800cae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	00db      	lsls	r3, r3, #3
 800caf0:	490e      	ldr	r1, [pc, #56]	; (800cb2c <HAL_RCC_ClockConfig+0x1c8>)
 800caf2:	4313      	orrs	r3, r2
 800caf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800caf6:	f000 f821 	bl	800cb3c <HAL_RCC_GetSysClockFreq>
 800cafa:	4601      	mov	r1, r0
 800cafc:	4b0b      	ldr	r3, [pc, #44]	; (800cb2c <HAL_RCC_ClockConfig+0x1c8>)
 800cafe:	689b      	ldr	r3, [r3, #8]
 800cb00:	091b      	lsrs	r3, r3, #4
 800cb02:	f003 030f 	and.w	r3, r3, #15
 800cb06:	4a0a      	ldr	r2, [pc, #40]	; (800cb30 <HAL_RCC_ClockConfig+0x1cc>)
 800cb08:	5cd3      	ldrb	r3, [r2, r3]
 800cb0a:	fa21 f303 	lsr.w	r3, r1, r3
 800cb0e:	4a09      	ldr	r2, [pc, #36]	; (800cb34 <HAL_RCC_ClockConfig+0x1d0>)
 800cb10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800cb12:	4b09      	ldr	r3, [pc, #36]	; (800cb38 <HAL_RCC_ClockConfig+0x1d4>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7fb ffa0 	bl	8008a5c <HAL_InitTick>

  return HAL_OK;
 800cb1c:	2300      	movs	r3, #0
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3710      	adds	r7, #16
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	40023c00 	.word	0x40023c00
 800cb2c:	40023800 	.word	0x40023800
 800cb30:	08018524 	.word	0x08018524
 800cb34:	20000198 	.word	0x20000198
 800cb38:	2000019c 	.word	0x2000019c

0800cb3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb3e:	b085      	sub	sp, #20
 800cb40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800cb42:	2300      	movs	r3, #0
 800cb44:	607b      	str	r3, [r7, #4]
 800cb46:	2300      	movs	r3, #0
 800cb48:	60fb      	str	r3, [r7, #12]
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cb52:	4b50      	ldr	r3, [pc, #320]	; (800cc94 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	f003 030c 	and.w	r3, r3, #12
 800cb5a:	2b04      	cmp	r3, #4
 800cb5c:	d007      	beq.n	800cb6e <HAL_RCC_GetSysClockFreq+0x32>
 800cb5e:	2b08      	cmp	r3, #8
 800cb60:	d008      	beq.n	800cb74 <HAL_RCC_GetSysClockFreq+0x38>
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	f040 808d 	bne.w	800cc82 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cb68:	4b4b      	ldr	r3, [pc, #300]	; (800cc98 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cb6a:	60bb      	str	r3, [r7, #8]
      break;
 800cb6c:	e08c      	b.n	800cc88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cb6e:	4b4b      	ldr	r3, [pc, #300]	; (800cc9c <HAL_RCC_GetSysClockFreq+0x160>)
 800cb70:	60bb      	str	r3, [r7, #8]
      break;
 800cb72:	e089      	b.n	800cc88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cb74:	4b47      	ldr	r3, [pc, #284]	; (800cc94 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb7c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800cb7e:	4b45      	ldr	r3, [pc, #276]	; (800cc94 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d023      	beq.n	800cbd2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cb8a:	4b42      	ldr	r3, [pc, #264]	; (800cc94 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	099b      	lsrs	r3, r3, #6
 800cb90:	f04f 0400 	mov.w	r4, #0
 800cb94:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cb98:	f04f 0200 	mov.w	r2, #0
 800cb9c:	ea03 0501 	and.w	r5, r3, r1
 800cba0:	ea04 0602 	and.w	r6, r4, r2
 800cba4:	4a3d      	ldr	r2, [pc, #244]	; (800cc9c <HAL_RCC_GetSysClockFreq+0x160>)
 800cba6:	fb02 f106 	mul.w	r1, r2, r6
 800cbaa:	2200      	movs	r2, #0
 800cbac:	fb02 f205 	mul.w	r2, r2, r5
 800cbb0:	440a      	add	r2, r1
 800cbb2:	493a      	ldr	r1, [pc, #232]	; (800cc9c <HAL_RCC_GetSysClockFreq+0x160>)
 800cbb4:	fba5 0101 	umull	r0, r1, r5, r1
 800cbb8:	1853      	adds	r3, r2, r1
 800cbba:	4619      	mov	r1, r3
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f04f 0400 	mov.w	r4, #0
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	4623      	mov	r3, r4
 800cbc6:	f7f3 fb93 	bl	80002f0 <__aeabi_uldivmod>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	460c      	mov	r4, r1
 800cbce:	60fb      	str	r3, [r7, #12]
 800cbd0:	e049      	b.n	800cc66 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cbd2:	4b30      	ldr	r3, [pc, #192]	; (800cc94 <HAL_RCC_GetSysClockFreq+0x158>)
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	099b      	lsrs	r3, r3, #6
 800cbd8:	f04f 0400 	mov.w	r4, #0
 800cbdc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cbe0:	f04f 0200 	mov.w	r2, #0
 800cbe4:	ea03 0501 	and.w	r5, r3, r1
 800cbe8:	ea04 0602 	and.w	r6, r4, r2
 800cbec:	4629      	mov	r1, r5
 800cbee:	4632      	mov	r2, r6
 800cbf0:	f04f 0300 	mov.w	r3, #0
 800cbf4:	f04f 0400 	mov.w	r4, #0
 800cbf8:	0154      	lsls	r4, r2, #5
 800cbfa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800cbfe:	014b      	lsls	r3, r1, #5
 800cc00:	4619      	mov	r1, r3
 800cc02:	4622      	mov	r2, r4
 800cc04:	1b49      	subs	r1, r1, r5
 800cc06:	eb62 0206 	sbc.w	r2, r2, r6
 800cc0a:	f04f 0300 	mov.w	r3, #0
 800cc0e:	f04f 0400 	mov.w	r4, #0
 800cc12:	0194      	lsls	r4, r2, #6
 800cc14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cc18:	018b      	lsls	r3, r1, #6
 800cc1a:	1a5b      	subs	r3, r3, r1
 800cc1c:	eb64 0402 	sbc.w	r4, r4, r2
 800cc20:	f04f 0100 	mov.w	r1, #0
 800cc24:	f04f 0200 	mov.w	r2, #0
 800cc28:	00e2      	lsls	r2, r4, #3
 800cc2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cc2e:	00d9      	lsls	r1, r3, #3
 800cc30:	460b      	mov	r3, r1
 800cc32:	4614      	mov	r4, r2
 800cc34:	195b      	adds	r3, r3, r5
 800cc36:	eb44 0406 	adc.w	r4, r4, r6
 800cc3a:	f04f 0100 	mov.w	r1, #0
 800cc3e:	f04f 0200 	mov.w	r2, #0
 800cc42:	02a2      	lsls	r2, r4, #10
 800cc44:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800cc48:	0299      	lsls	r1, r3, #10
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	4614      	mov	r4, r2
 800cc4e:	4618      	mov	r0, r3
 800cc50:	4621      	mov	r1, r4
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f04f 0400 	mov.w	r4, #0
 800cc58:	461a      	mov	r2, r3
 800cc5a:	4623      	mov	r3, r4
 800cc5c:	f7f3 fb48 	bl	80002f0 <__aeabi_uldivmod>
 800cc60:	4603      	mov	r3, r0
 800cc62:	460c      	mov	r4, r1
 800cc64:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800cc66:	4b0b      	ldr	r3, [pc, #44]	; (800cc94 <HAL_RCC_GetSysClockFreq+0x158>)
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	0c1b      	lsrs	r3, r3, #16
 800cc6c:	f003 0303 	and.w	r3, r3, #3
 800cc70:	3301      	adds	r3, #1
 800cc72:	005b      	lsls	r3, r3, #1
 800cc74:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800cc76:	68fa      	ldr	r2, [r7, #12]
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc7e:	60bb      	str	r3, [r7, #8]
      break;
 800cc80:	e002      	b.n	800cc88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cc82:	4b05      	ldr	r3, [pc, #20]	; (800cc98 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cc84:	60bb      	str	r3, [r7, #8]
      break;
 800cc86:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cc88:	68bb      	ldr	r3, [r7, #8]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3714      	adds	r7, #20
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc92:	bf00      	nop
 800cc94:	40023800 	.word	0x40023800
 800cc98:	00f42400 	.word	0x00f42400
 800cc9c:	017d7840 	.word	0x017d7840

0800cca0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cca0:	b480      	push	{r7}
 800cca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cca4:	4b03      	ldr	r3, [pc, #12]	; (800ccb4 <HAL_RCC_GetHCLKFreq+0x14>)
 800cca6:	681b      	ldr	r3, [r3, #0]
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr
 800ccb2:	bf00      	nop
 800ccb4:	20000198 	.word	0x20000198

0800ccb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ccbc:	f7ff fff0 	bl	800cca0 <HAL_RCC_GetHCLKFreq>
 800ccc0:	4601      	mov	r1, r0
 800ccc2:	4b05      	ldr	r3, [pc, #20]	; (800ccd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	0a9b      	lsrs	r3, r3, #10
 800ccc8:	f003 0307 	and.w	r3, r3, #7
 800cccc:	4a03      	ldr	r2, [pc, #12]	; (800ccdc <HAL_RCC_GetPCLK1Freq+0x24>)
 800ccce:	5cd3      	ldrb	r3, [r2, r3]
 800ccd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	40023800 	.word	0x40023800
 800ccdc:	08018534 	.word	0x08018534

0800cce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cce4:	f7ff ffdc 	bl	800cca0 <HAL_RCC_GetHCLKFreq>
 800cce8:	4601      	mov	r1, r0
 800ccea:	4b05      	ldr	r3, [pc, #20]	; (800cd00 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ccec:	689b      	ldr	r3, [r3, #8]
 800ccee:	0b5b      	lsrs	r3, r3, #13
 800ccf0:	f003 0307 	and.w	r3, r3, #7
 800ccf4:	4a03      	ldr	r2, [pc, #12]	; (800cd04 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ccf6:	5cd3      	ldrb	r3, [r2, r3]
 800ccf8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	40023800 	.word	0x40023800
 800cd04:	08018534 	.word	0x08018534

0800cd08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	220f      	movs	r2, #15
 800cd16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cd18:	4b12      	ldr	r3, [pc, #72]	; (800cd64 <HAL_RCC_GetClockConfig+0x5c>)
 800cd1a:	689b      	ldr	r3, [r3, #8]
 800cd1c:	f003 0203 	and.w	r2, r3, #3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cd24:	4b0f      	ldr	r3, [pc, #60]	; (800cd64 <HAL_RCC_GetClockConfig+0x5c>)
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cd30:	4b0c      	ldr	r3, [pc, #48]	; (800cd64 <HAL_RCC_GetClockConfig+0x5c>)
 800cd32:	689b      	ldr	r3, [r3, #8]
 800cd34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cd3c:	4b09      	ldr	r3, [pc, #36]	; (800cd64 <HAL_RCC_GetClockConfig+0x5c>)
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	08db      	lsrs	r3, r3, #3
 800cd42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cd4a:	4b07      	ldr	r3, [pc, #28]	; (800cd68 <HAL_RCC_GetClockConfig+0x60>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f003 020f 	and.w	r2, r3, #15
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	601a      	str	r2, [r3, #0]
}
 800cd56:	bf00      	nop
 800cd58:	370c      	adds	r7, #12
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop
 800cd64:	40023800 	.word	0x40023800
 800cd68:	40023c00 	.word	0x40023c00

0800cd6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b088      	sub	sp, #32
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800cd74:	2300      	movs	r3, #0
 800cd76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800cd80:	2300      	movs	r3, #0
 800cd82:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800cd84:	2300      	movs	r3, #0
 800cd86:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f003 0301 	and.w	r3, r3, #1
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d012      	beq.n	800cdba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cd94:	4b69      	ldr	r3, [pc, #420]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	4a68      	ldr	r2, [pc, #416]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cd9e:	6093      	str	r3, [r2, #8]
 800cda0:	4b66      	ldr	r3, [pc, #408]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cda2:	689a      	ldr	r2, [r3, #8]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cda8:	4964      	ldr	r1, [pc, #400]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d101      	bne.n	800cdba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d017      	beq.n	800cdf6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cdc6:	4b5d      	ldr	r3, [pc, #372]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdd4:	4959      	ldr	r1, [pc, #356]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cde0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cde4:	d101      	bne.n	800cdea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800cde6:	2301      	movs	r3, #1
 800cde8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d101      	bne.n	800cdf6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d017      	beq.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ce02:	4b4e      	ldr	r3, [pc, #312]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce10:	494a      	ldr	r1, [pc, #296]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce12:	4313      	orrs	r3, r2
 800ce14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce20:	d101      	bne.n	800ce26 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ce22:	2301      	movs	r3, #1
 800ce24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d101      	bne.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d001      	beq.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f003 0320 	and.w	r3, r3, #32
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	f000 808b 	beq.w	800cf66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ce50:	4b3a      	ldr	r3, [pc, #232]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce54:	4a39      	ldr	r2, [pc, #228]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce5a:	6413      	str	r3, [r2, #64]	; 0x40
 800ce5c:	4b37      	ldr	r3, [pc, #220]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce64:	60bb      	str	r3, [r7, #8]
 800ce66:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ce68:	4b35      	ldr	r3, [pc, #212]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4a34      	ldr	r2, [pc, #208]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ce6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce74:	f7fc fba2 	bl	80095bc <HAL_GetTick>
 800ce78:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ce7a:	e008      	b.n	800ce8e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce7c:	f7fc fb9e 	bl	80095bc <HAL_GetTick>
 800ce80:	4602      	mov	r2, r0
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	2b64      	cmp	r3, #100	; 0x64
 800ce88:	d901      	bls.n	800ce8e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800ce8a:	2303      	movs	r3, #3
 800ce8c:	e38d      	b.n	800d5aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ce8e:	4b2c      	ldr	r3, [pc, #176]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d0f0      	beq.n	800ce7c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ce9a:	4b28      	ldr	r3, [pc, #160]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cea2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d035      	beq.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ceb2:	693a      	ldr	r2, [r7, #16]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d02e      	beq.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ceb8:	4b20      	ldr	r3, [pc, #128]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ceba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cec0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cec2:	4b1e      	ldr	r3, [pc, #120]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cec6:	4a1d      	ldr	r2, [pc, #116]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cecc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cece:	4b1b      	ldr	r3, [pc, #108]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ced0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ced2:	4a1a      	ldr	r2, [pc, #104]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ced4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ced8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ceda:	4a18      	ldr	r2, [pc, #96]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cee0:	4b16      	ldr	r3, [pc, #88]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cee4:	f003 0301 	and.w	r3, r3, #1
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d114      	bne.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ceec:	f7fc fb66 	bl	80095bc <HAL_GetTick>
 800cef0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cef2:	e00a      	b.n	800cf0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cef4:	f7fc fb62 	bl	80095bc <HAL_GetTick>
 800cef8:	4602      	mov	r2, r0
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d901      	bls.n	800cf0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800cf06:	2303      	movs	r3, #3
 800cf08:	e34f      	b.n	800d5aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cf0a:	4b0c      	ldr	r3, [pc, #48]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf0e:	f003 0302 	and.w	r3, r3, #2
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d0ee      	beq.n	800cef4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf22:	d111      	bne.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800cf24:	4b05      	ldr	r3, [pc, #20]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cf30:	4b04      	ldr	r3, [pc, #16]	; (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800cf32:	400b      	ands	r3, r1
 800cf34:	4901      	ldr	r1, [pc, #4]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf36:	4313      	orrs	r3, r2
 800cf38:	608b      	str	r3, [r1, #8]
 800cf3a:	e00b      	b.n	800cf54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800cf3c:	40023800 	.word	0x40023800
 800cf40:	40007000 	.word	0x40007000
 800cf44:	0ffffcff 	.word	0x0ffffcff
 800cf48:	4bb3      	ldr	r3, [pc, #716]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	4ab2      	ldr	r2, [pc, #712]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cf52:	6093      	str	r3, [r2, #8]
 800cf54:	4bb0      	ldr	r3, [pc, #704]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf60:	49ad      	ldr	r1, [pc, #692]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf62:	4313      	orrs	r3, r2
 800cf64:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f003 0310 	and.w	r3, r3, #16
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d010      	beq.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cf72:	4ba9      	ldr	r3, [pc, #676]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf78:	4aa7      	ldr	r2, [pc, #668]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cf7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800cf82:	4ba5      	ldr	r3, [pc, #660]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8c:	49a2      	ldr	r1, [pc, #648]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf8e:	4313      	orrs	r3, r2
 800cf90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d00a      	beq.n	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cfa0:	4b9d      	ldr	r3, [pc, #628]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfa6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfae:	499a      	ldr	r1, [pc, #616]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00a      	beq.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cfc2:	4b95      	ldr	r3, [pc, #596]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfd0:	4991      	ldr	r1, [pc, #580]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d00a      	beq.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cfe4:	4b8c      	ldr	r3, [pc, #560]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cff2:	4989      	ldr	r1, [pc, #548]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cff4:	4313      	orrs	r3, r2
 800cff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d002:	2b00      	cmp	r3, #0
 800d004:	d00a      	beq.n	800d01c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d006:	4b84      	ldr	r3, [pc, #528]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d00c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d014:	4980      	ldr	r1, [pc, #512]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d016:	4313      	orrs	r3, r2
 800d018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d024:	2b00      	cmp	r3, #0
 800d026:	d00a      	beq.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d028:	4b7b      	ldr	r3, [pc, #492]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d02a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d02e:	f023 0203 	bic.w	r2, r3, #3
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d036:	4978      	ldr	r1, [pc, #480]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d038:	4313      	orrs	r3, r2
 800d03a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00a      	beq.n	800d060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d04a:	4b73      	ldr	r3, [pc, #460]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d04c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d050:	f023 020c 	bic.w	r2, r3, #12
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d058:	496f      	ldr	r1, [pc, #444]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d05a:	4313      	orrs	r3, r2
 800d05c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d00a      	beq.n	800d082 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d06c:	4b6a      	ldr	r3, [pc, #424]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d06e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d072:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d07a:	4967      	ldr	r1, [pc, #412]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d07c:	4313      	orrs	r3, r2
 800d07e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d00a      	beq.n	800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d08e:	4b62      	ldr	r3, [pc, #392]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d094:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d09c:	495e      	ldr	r1, [pc, #376]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d00a      	beq.n	800d0c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d0b0:	4b59      	ldr	r3, [pc, #356]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0be:	4956      	ldr	r1, [pc, #344]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d00a      	beq.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d0d2:	4b51      	ldr	r3, [pc, #324]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0e0:	494d      	ldr	r1, [pc, #308]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d00a      	beq.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d0f4:	4b48      	ldr	r3, [pc, #288]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d102:	4945      	ldr	r1, [pc, #276]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d104:	4313      	orrs	r3, r2
 800d106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d112:	2b00      	cmp	r3, #0
 800d114:	d00a      	beq.n	800d12c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d116:	4b40      	ldr	r3, [pc, #256]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d11c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d124:	493c      	ldr	r1, [pc, #240]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d126:	4313      	orrs	r3, r2
 800d128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d134:	2b00      	cmp	r3, #0
 800d136:	d00a      	beq.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d138:	4b37      	ldr	r3, [pc, #220]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d13e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d146:	4934      	ldr	r1, [pc, #208]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d148:	4313      	orrs	r3, r2
 800d14a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d156:	2b00      	cmp	r3, #0
 800d158:	d011      	beq.n	800d17e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d15a:	4b2f      	ldr	r3, [pc, #188]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d15c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d160:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d168:	492b      	ldr	r1, [pc, #172]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d16a:	4313      	orrs	r3, r2
 800d16c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d178:	d101      	bne.n	800d17e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d17a:	2301      	movs	r3, #1
 800d17c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f003 0308 	and.w	r3, r3, #8
 800d186:	2b00      	cmp	r3, #0
 800d188:	d001      	beq.n	800d18e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d18a:	2301      	movs	r3, #1
 800d18c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00a      	beq.n	800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d19a:	4b1f      	ldr	r3, [pc, #124]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d19c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1a8:	491b      	ldr	r1, [pc, #108]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d00b      	beq.n	800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d1bc:	4b16      	ldr	r3, [pc, #88]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1cc:	4912      	ldr	r1, [pc, #72]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d00b      	beq.n	800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d1e0:	4b0d      	ldr	r3, [pc, #52]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1e6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1f0:	4909      	ldr	r1, [pc, #36]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00f      	beq.n	800d224 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d204:	4b04      	ldr	r3, [pc, #16]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d20a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d214:	e002      	b.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800d216:	bf00      	nop
 800d218:	40023800 	.word	0x40023800
 800d21c:	4985      	ldr	r1, [pc, #532]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d21e:	4313      	orrs	r3, r2
 800d220:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00b      	beq.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800d230:	4b80      	ldr	r3, [pc, #512]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d236:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d240:	497c      	ldr	r1, [pc, #496]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d242:	4313      	orrs	r3, r2
 800d244:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	2b01      	cmp	r3, #1
 800d24c:	d005      	beq.n	800d25a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d256:	f040 80d6 	bne.w	800d406 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d25a:	4b76      	ldr	r3, [pc, #472]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4a75      	ldr	r2, [pc, #468]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d260:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d266:	f7fc f9a9 	bl	80095bc <HAL_GetTick>
 800d26a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d26c:	e008      	b.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d26e:	f7fc f9a5 	bl	80095bc <HAL_GetTick>
 800d272:	4602      	mov	r2, r0
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	1ad3      	subs	r3, r2, r3
 800d278:	2b64      	cmp	r3, #100	; 0x64
 800d27a:	d901      	bls.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d27c:	2303      	movs	r3, #3
 800d27e:	e194      	b.n	800d5aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d280:	4b6c      	ldr	r3, [pc, #432]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1f0      	bne.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f003 0301 	and.w	r3, r3, #1
 800d294:	2b00      	cmp	r3, #0
 800d296:	d021      	beq.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0x570>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d11d      	bne.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d2a0:	4b64      	ldr	r3, [pc, #400]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2a6:	0c1b      	lsrs	r3, r3, #16
 800d2a8:	f003 0303 	and.w	r3, r3, #3
 800d2ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d2ae:	4b61      	ldr	r3, [pc, #388]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2b4:	0e1b      	lsrs	r3, r3, #24
 800d2b6:	f003 030f 	and.w	r3, r3, #15
 800d2ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	019a      	lsls	r2, r3, #6
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	041b      	lsls	r3, r3, #16
 800d2c6:	431a      	orrs	r2, r3
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	061b      	lsls	r3, r3, #24
 800d2cc:	431a      	orrs	r2, r3
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	689b      	ldr	r3, [r3, #8]
 800d2d2:	071b      	lsls	r3, r3, #28
 800d2d4:	4957      	ldr	r1, [pc, #348]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d004      	beq.n	800d2f2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2f0:	d00a      	beq.n	800d308 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d02e      	beq.n	800d35c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d306:	d129      	bne.n	800d35c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d308:	4b4a      	ldr	r3, [pc, #296]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d30a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d30e:	0c1b      	lsrs	r3, r3, #16
 800d310:	f003 0303 	and.w	r3, r3, #3
 800d314:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d316:	4b47      	ldr	r3, [pc, #284]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d31c:	0f1b      	lsrs	r3, r3, #28
 800d31e:	f003 0307 	and.w	r3, r3, #7
 800d322:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	019a      	lsls	r2, r3, #6
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	041b      	lsls	r3, r3, #16
 800d32e:	431a      	orrs	r2, r3
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	061b      	lsls	r3, r3, #24
 800d336:	431a      	orrs	r2, r3
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	071b      	lsls	r3, r3, #28
 800d33c:	493d      	ldr	r1, [pc, #244]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d33e:	4313      	orrs	r3, r2
 800d340:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d344:	4b3b      	ldr	r3, [pc, #236]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d34a:	f023 021f 	bic.w	r2, r3, #31
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d352:	3b01      	subs	r3, #1
 800d354:	4937      	ldr	r1, [pc, #220]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d356:	4313      	orrs	r3, r2
 800d358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d364:	2b00      	cmp	r3, #0
 800d366:	d01d      	beq.n	800d3a4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d368:	4b32      	ldr	r3, [pc, #200]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d36a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d36e:	0e1b      	lsrs	r3, r3, #24
 800d370:	f003 030f 	and.w	r3, r3, #15
 800d374:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d376:	4b2f      	ldr	r3, [pc, #188]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d37c:	0f1b      	lsrs	r3, r3, #28
 800d37e:	f003 0307 	and.w	r3, r3, #7
 800d382:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	019a      	lsls	r2, r3, #6
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	041b      	lsls	r3, r3, #16
 800d390:	431a      	orrs	r2, r3
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	061b      	lsls	r3, r3, #24
 800d396:	431a      	orrs	r2, r3
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	071b      	lsls	r3, r3, #28
 800d39c:	4925      	ldr	r1, [pc, #148]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d011      	beq.n	800d3d4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	019a      	lsls	r2, r3, #6
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	691b      	ldr	r3, [r3, #16]
 800d3ba:	041b      	lsls	r3, r3, #16
 800d3bc:	431a      	orrs	r2, r3
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	061b      	lsls	r3, r3, #24
 800d3c4:	431a      	orrs	r2, r3
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	071b      	lsls	r3, r3, #28
 800d3cc:	4919      	ldr	r1, [pc, #100]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d3d4:	4b17      	ldr	r3, [pc, #92]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4a16      	ldr	r2, [pc, #88]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d3de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3e0:	f7fc f8ec 	bl	80095bc <HAL_GetTick>
 800d3e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d3e6:	e008      	b.n	800d3fa <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d3e8:	f7fc f8e8 	bl	80095bc <HAL_GetTick>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	1ad3      	subs	r3, r2, r3
 800d3f2:	2b64      	cmp	r3, #100	; 0x64
 800d3f4:	d901      	bls.n	800d3fa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d3f6:	2303      	movs	r3, #3
 800d3f8:	e0d7      	b.n	800d5aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d3fa:	4b0e      	ldr	r3, [pc, #56]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d402:	2b00      	cmp	r3, #0
 800d404:	d0f0      	beq.n	800d3e8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d406:	69bb      	ldr	r3, [r7, #24]
 800d408:	2b01      	cmp	r3, #1
 800d40a:	f040 80cd 	bne.w	800d5a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d40e:	4b09      	ldr	r3, [pc, #36]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	4a08      	ldr	r2, [pc, #32]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d41a:	f7fc f8cf 	bl	80095bc <HAL_GetTick>
 800d41e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d420:	e00a      	b.n	800d438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d422:	f7fc f8cb 	bl	80095bc <HAL_GetTick>
 800d426:	4602      	mov	r2, r0
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	1ad3      	subs	r3, r2, r3
 800d42c:	2b64      	cmp	r3, #100	; 0x64
 800d42e:	d903      	bls.n	800d438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d430:	2303      	movs	r3, #3
 800d432:	e0ba      	b.n	800d5aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800d434:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d438:	4b5e      	ldr	r3, [pc, #376]	; (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d444:	d0ed      	beq.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d003      	beq.n	800d45a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d456:	2b00      	cmp	r3, #0
 800d458:	d009      	beq.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d462:	2b00      	cmp	r3, #0
 800d464:	d02e      	beq.n	800d4c4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d12a      	bne.n	800d4c4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d46e:	4b51      	ldr	r3, [pc, #324]	; (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d474:	0c1b      	lsrs	r3, r3, #16
 800d476:	f003 0303 	and.w	r3, r3, #3
 800d47a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d47c:	4b4d      	ldr	r3, [pc, #308]	; (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d47e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d482:	0f1b      	lsrs	r3, r3, #28
 800d484:	f003 0307 	and.w	r3, r3, #7
 800d488:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	695b      	ldr	r3, [r3, #20]
 800d48e:	019a      	lsls	r2, r3, #6
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	041b      	lsls	r3, r3, #16
 800d494:	431a      	orrs	r2, r3
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	699b      	ldr	r3, [r3, #24]
 800d49a:	061b      	lsls	r3, r3, #24
 800d49c:	431a      	orrs	r2, r3
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	071b      	lsls	r3, r3, #28
 800d4a2:	4944      	ldr	r1, [pc, #272]	; (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4a4:	4313      	orrs	r3, r2
 800d4a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d4aa:	4b42      	ldr	r3, [pc, #264]	; (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	021b      	lsls	r3, r3, #8
 800d4bc:	493d      	ldr	r1, [pc, #244]	; (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d022      	beq.n	800d516 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d4d8:	d11d      	bne.n	800d516 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d4da:	4b36      	ldr	r3, [pc, #216]	; (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4e0:	0e1b      	lsrs	r3, r3, #24
 800d4e2:	f003 030f 	and.w	r3, r3, #15
 800d4e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d4e8:	4b32      	ldr	r3, [pc, #200]	; (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4ee:	0f1b      	lsrs	r3, r3, #28
 800d4f0:	f003 0307 	and.w	r3, r3, #7
 800d4f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	695b      	ldr	r3, [r3, #20]
 800d4fa:	019a      	lsls	r2, r3, #6
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6a1b      	ldr	r3, [r3, #32]
 800d500:	041b      	lsls	r3, r3, #16
 800d502:	431a      	orrs	r2, r3
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	061b      	lsls	r3, r3, #24
 800d508:	431a      	orrs	r2, r3
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	071b      	lsls	r3, r3, #28
 800d50e:	4929      	ldr	r1, [pc, #164]	; (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d510:	4313      	orrs	r3, r2
 800d512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f003 0308 	and.w	r3, r3, #8
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d028      	beq.n	800d574 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d522:	4b24      	ldr	r3, [pc, #144]	; (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d528:	0e1b      	lsrs	r3, r3, #24
 800d52a:	f003 030f 	and.w	r3, r3, #15
 800d52e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d530:	4b20      	ldr	r3, [pc, #128]	; (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d536:	0c1b      	lsrs	r3, r3, #16
 800d538:	f003 0303 	and.w	r3, r3, #3
 800d53c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	695b      	ldr	r3, [r3, #20]
 800d542:	019a      	lsls	r2, r3, #6
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	041b      	lsls	r3, r3, #16
 800d548:	431a      	orrs	r2, r3
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	061b      	lsls	r3, r3, #24
 800d54e:	431a      	orrs	r2, r3
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	69db      	ldr	r3, [r3, #28]
 800d554:	071b      	lsls	r3, r3, #28
 800d556:	4917      	ldr	r1, [pc, #92]	; (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d558:	4313      	orrs	r3, r2
 800d55a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d55e:	4b15      	ldr	r3, [pc, #84]	; (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d564:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56c:	4911      	ldr	r1, [pc, #68]	; (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d56e:	4313      	orrs	r3, r2
 800d570:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d574:	4b0f      	ldr	r3, [pc, #60]	; (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4a0e      	ldr	r2, [pc, #56]	; (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d57a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d57e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d580:	f7fc f81c 	bl	80095bc <HAL_GetTick>
 800d584:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d586:	e008      	b.n	800d59a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d588:	f7fc f818 	bl	80095bc <HAL_GetTick>
 800d58c:	4602      	mov	r2, r0
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	1ad3      	subs	r3, r2, r3
 800d592:	2b64      	cmp	r3, #100	; 0x64
 800d594:	d901      	bls.n	800d59a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d596:	2303      	movs	r3, #3
 800d598:	e007      	b.n	800d5aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d59a:	4b06      	ldr	r3, [pc, #24]	; (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d5a6:	d1ef      	bne.n	800d588 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800d5a8:	2300      	movs	r3, #0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3720      	adds	r7, #32
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	40023800 	.word	0x40023800

0800d5b8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d101      	bne.n	800d5ca <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	e06b      	b.n	800d6a2 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	7f5b      	ldrb	r3, [r3, #29]
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d105      	bne.n	800d5e0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f7fa ff40 	bl	8008460 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2202      	movs	r2, #2
 800d5e4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	22ca      	movs	r2, #202	; 0xca
 800d5ec:	625a      	str	r2, [r3, #36]	; 0x24
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2253      	movs	r2, #83	; 0x53
 800d5f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 f85a 	bl	800d6b0 <RTC_EnterInitMode>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d008      	beq.n	800d614 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	22ff      	movs	r2, #255	; 0xff
 800d608:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2204      	movs	r2, #4
 800d60e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800d610:	2301      	movs	r3, #1
 800d612:	e046      	b.n	800d6a2 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	6899      	ldr	r1, [r3, #8]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	4b23      	ldr	r3, [pc, #140]	; (800d6ac <HAL_RTC_Init+0xf4>)
 800d620:	400b      	ands	r3, r1
 800d622:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	6899      	ldr	r1, [r3, #8]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	685a      	ldr	r2, [r3, #4]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	691b      	ldr	r3, [r3, #16]
 800d632:	431a      	orrs	r2, r3
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	695b      	ldr	r3, [r3, #20]
 800d638:	431a      	orrs	r2, r3
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	430a      	orrs	r2, r1
 800d640:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	687a      	ldr	r2, [r7, #4]
 800d648:	68d2      	ldr	r2, [r2, #12]
 800d64a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	6919      	ldr	r1, [r3, #16]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	689b      	ldr	r3, [r3, #8]
 800d656:	041a      	lsls	r2, r3, #16
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	430a      	orrs	r2, r1
 800d65e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	68da      	ldr	r2, [r3, #12]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d66e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f022 0208 	bic.w	r2, r2, #8
 800d67e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	699a      	ldr	r2, [r3, #24]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	430a      	orrs	r2, r1
 800d690:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	22ff      	movs	r2, #255	; 0xff
 800d698:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2201      	movs	r2, #1
 800d69e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800d6a0:	2300      	movs	r3, #0
  }
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3708      	adds	r7, #8
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	ff8fffbf 	.word	0xff8fffbf

0800d6b0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d119      	bne.n	800d6fe <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d6d2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d6d4:	f7fb ff72 	bl	80095bc <HAL_GetTick>
 800d6d8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d6da:	e009      	b.n	800d6f0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d6dc:	f7fb ff6e 	bl	80095bc <HAL_GetTick>
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	1ad3      	subs	r3, r2, r3
 800d6e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6ea:	d901      	bls.n	800d6f0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d6ec:	2303      	movs	r3, #3
 800d6ee:	e007      	b.n	800d700 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d0ee      	beq.n	800d6dc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d6fe:	2300      	movs	r3, #0
}
 800d700:	4618      	mov	r0, r3
 800d702:	3710      	adds	r7, #16
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d101      	bne.n	800d71a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d716:	2301      	movs	r3, #1
 800d718:	e084      	b.n	800d824 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2200      	movs	r2, #0
 800d71e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d106      	bne.n	800d73a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7fa fead 	bl	8008494 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2202      	movs	r2, #2
 800d73e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d750:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	68db      	ldr	r3, [r3, #12]
 800d756:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d75a:	d902      	bls.n	800d762 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d75c:	2300      	movs	r3, #0
 800d75e:	60fb      	str	r3, [r7, #12]
 800d760:	e002      	b.n	800d768 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d766:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d770:	d007      	beq.n	800d782 <HAL_SPI_Init+0x7a>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d77a:	d002      	beq.n	800d782 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2200      	movs	r2, #0
 800d780:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d786:	2b00      	cmp	r3, #0
 800d788:	d10b      	bne.n	800d7a2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d792:	d903      	bls.n	800d79c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2202      	movs	r2, #2
 800d798:	631a      	str	r2, [r3, #48]	; 0x30
 800d79a:	e002      	b.n	800d7a2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	685a      	ldr	r2, [r3, #4]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	689b      	ldr	r3, [r3, #8]
 800d7aa:	431a      	orrs	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	691b      	ldr	r3, [r3, #16]
 800d7b0:	431a      	orrs	r2, r3
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	695b      	ldr	r3, [r3, #20]
 800d7b6:	431a      	orrs	r2, r3
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	699b      	ldr	r3, [r3, #24]
 800d7bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d7c0:	431a      	orrs	r2, r3
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	69db      	ldr	r3, [r3, #28]
 800d7c6:	431a      	orrs	r2, r3
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6a1b      	ldr	r3, [r3, #32]
 800d7cc:	ea42 0103 	orr.w	r1, r2, r3
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	430a      	orrs	r2, r1
 800d7da:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	699b      	ldr	r3, [r3, #24]
 800d7e0:	0c1b      	lsrs	r3, r3, #16
 800d7e2:	f003 0204 	and.w	r2, r3, #4
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ea:	431a      	orrs	r2, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7f0:	431a      	orrs	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	68db      	ldr	r3, [r3, #12]
 800d7f6:	ea42 0103 	orr.w	r1, r2, r3
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68fa      	ldr	r2, [r7, #12]
 800d800:	430a      	orrs	r2, r1
 800d802:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	69da      	ldr	r2, [r3, #28]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d812:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2201      	movs	r2, #1
 800d81e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3710      	adds	r7, #16
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b088      	sub	sp, #32
 800d830:	af00      	add	r7, sp, #0
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	603b      	str	r3, [r7, #0]
 800d838:	4613      	mov	r3, r2
 800d83a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d83c:	2300      	movs	r3, #0
 800d83e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d846:	2b01      	cmp	r3, #1
 800d848:	d101      	bne.n	800d84e <HAL_SPI_Transmit+0x22>
 800d84a:	2302      	movs	r3, #2
 800d84c:	e150      	b.n	800daf0 <HAL_SPI_Transmit+0x2c4>
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2201      	movs	r2, #1
 800d852:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d856:	f7fb feb1 	bl	80095bc <HAL_GetTick>
 800d85a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d85c:	88fb      	ldrh	r3, [r7, #6]
 800d85e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d866:	b2db      	uxtb	r3, r3
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d002      	beq.n	800d872 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d86c:	2302      	movs	r3, #2
 800d86e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d870:	e135      	b.n	800dade <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d002      	beq.n	800d87e <HAL_SPI_Transmit+0x52>
 800d878:	88fb      	ldrh	r3, [r7, #6]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d102      	bne.n	800d884 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d87e:	2301      	movs	r3, #1
 800d880:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d882:	e12c      	b.n	800dade <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2203      	movs	r2, #3
 800d888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2200      	movs	r2, #0
 800d890:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	68ba      	ldr	r2, [r7, #8]
 800d896:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	88fa      	ldrh	r2, [r7, #6]
 800d89c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	88fa      	ldrh	r2, [r7, #6]
 800d8a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8ce:	d107      	bne.n	800d8e0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d8de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8ea:	2b40      	cmp	r3, #64	; 0x40
 800d8ec:	d007      	beq.n	800d8fe <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d906:	d94b      	bls.n	800d9a0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d002      	beq.n	800d916 <HAL_SPI_Transmit+0xea>
 800d910:	8afb      	ldrh	r3, [r7, #22]
 800d912:	2b01      	cmp	r3, #1
 800d914:	d13e      	bne.n	800d994 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d91a:	881a      	ldrh	r2, [r3, #0]
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d926:	1c9a      	adds	r2, r3, #2
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d930:	b29b      	uxth	r3, r3
 800d932:	3b01      	subs	r3, #1
 800d934:	b29a      	uxth	r2, r3
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d93a:	e02b      	b.n	800d994 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	689b      	ldr	r3, [r3, #8]
 800d942:	f003 0302 	and.w	r3, r3, #2
 800d946:	2b02      	cmp	r3, #2
 800d948:	d112      	bne.n	800d970 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d94e:	881a      	ldrh	r2, [r3, #0]
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d95a:	1c9a      	adds	r2, r3, #2
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d964:	b29b      	uxth	r3, r3
 800d966:	3b01      	subs	r3, #1
 800d968:	b29a      	uxth	r2, r3
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d96e:	e011      	b.n	800d994 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d970:	f7fb fe24 	bl	80095bc <HAL_GetTick>
 800d974:	4602      	mov	r2, r0
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	1ad3      	subs	r3, r2, r3
 800d97a:	683a      	ldr	r2, [r7, #0]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d803      	bhi.n	800d988 <HAL_SPI_Transmit+0x15c>
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d986:	d102      	bne.n	800d98e <HAL_SPI_Transmit+0x162>
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d102      	bne.n	800d994 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800d98e:	2303      	movs	r3, #3
 800d990:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d992:	e0a4      	b.n	800dade <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d998:	b29b      	uxth	r3, r3
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d1ce      	bne.n	800d93c <HAL_SPI_Transmit+0x110>
 800d99e:	e07c      	b.n	800da9a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d002      	beq.n	800d9ae <HAL_SPI_Transmit+0x182>
 800d9a8:	8afb      	ldrh	r3, [r7, #22]
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d170      	bne.n	800da90 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d912      	bls.n	800d9de <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9bc:	881a      	ldrh	r2, [r3, #0]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c8:	1c9a      	adds	r2, r3, #2
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	3b02      	subs	r3, #2
 800d9d6:	b29a      	uxth	r2, r3
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d9dc:	e058      	b.n	800da90 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	330c      	adds	r3, #12
 800d9e8:	7812      	ldrb	r2, [r2, #0]
 800d9ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f0:	1c5a      	adds	r2, r3, #1
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9fa:	b29b      	uxth	r3, r3
 800d9fc:	3b01      	subs	r3, #1
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800da04:	e044      	b.n	800da90 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	689b      	ldr	r3, [r3, #8]
 800da0c:	f003 0302 	and.w	r3, r3, #2
 800da10:	2b02      	cmp	r3, #2
 800da12:	d12b      	bne.n	800da6c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da18:	b29b      	uxth	r3, r3
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d912      	bls.n	800da44 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da22:	881a      	ldrh	r2, [r3, #0]
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da2e:	1c9a      	adds	r2, r3, #2
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da38:	b29b      	uxth	r3, r3
 800da3a:	3b02      	subs	r3, #2
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da42:	e025      	b.n	800da90 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	330c      	adds	r3, #12
 800da4e:	7812      	ldrb	r2, [r2, #0]
 800da50:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da56:	1c5a      	adds	r2, r3, #1
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da60:	b29b      	uxth	r3, r3
 800da62:	3b01      	subs	r3, #1
 800da64:	b29a      	uxth	r2, r3
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da6a:	e011      	b.n	800da90 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da6c:	f7fb fda6 	bl	80095bc <HAL_GetTick>
 800da70:	4602      	mov	r2, r0
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	1ad3      	subs	r3, r2, r3
 800da76:	683a      	ldr	r2, [r7, #0]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d803      	bhi.n	800da84 <HAL_SPI_Transmit+0x258>
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da82:	d102      	bne.n	800da8a <HAL_SPI_Transmit+0x25e>
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d102      	bne.n	800da90 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800da8a:	2303      	movs	r3, #3
 800da8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800da8e:	e026      	b.n	800dade <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da94:	b29b      	uxth	r3, r3
 800da96:	2b00      	cmp	r3, #0
 800da98:	d1b5      	bne.n	800da06 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800da9a:	69ba      	ldr	r2, [r7, #24]
 800da9c:	6839      	ldr	r1, [r7, #0]
 800da9e:	68f8      	ldr	r0, [r7, #12]
 800daa0:	f000 fc34 	bl	800e30c <SPI_EndRxTxTransaction>
 800daa4:	4603      	mov	r3, r0
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d002      	beq.n	800dab0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2220      	movs	r2, #32
 800daae:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	689b      	ldr	r3, [r3, #8]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d10a      	bne.n	800dace <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dab8:	2300      	movs	r3, #0
 800daba:	613b      	str	r3, [r7, #16]
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	613b      	str	r3, [r7, #16]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	689b      	ldr	r3, [r3, #8]
 800daca:	613b      	str	r3, [r7, #16]
 800dacc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d002      	beq.n	800dadc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800dad6:	2301      	movs	r3, #1
 800dad8:	77fb      	strb	r3, [r7, #31]
 800dada:	e000      	b.n	800dade <HAL_SPI_Transmit+0x2b2>
  }

error:
 800dadc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2201      	movs	r2, #1
 800dae2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2200      	movs	r2, #0
 800daea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800daee:	7ffb      	ldrb	r3, [r7, #31]
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3720      	adds	r7, #32
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b08a      	sub	sp, #40	; 0x28
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	607a      	str	r2, [r7, #4]
 800db04:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800db06:	2301      	movs	r3, #1
 800db08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800db0a:	2300      	movs	r3, #0
 800db0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800db16:	2b01      	cmp	r3, #1
 800db18:	d101      	bne.n	800db1e <HAL_SPI_TransmitReceive+0x26>
 800db1a:	2302      	movs	r3, #2
 800db1c:	e1fb      	b.n	800df16 <HAL_SPI_TransmitReceive+0x41e>
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2201      	movs	r2, #1
 800db22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db26:	f7fb fd49 	bl	80095bc <HAL_GetTick>
 800db2a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800db32:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800db3a:	887b      	ldrh	r3, [r7, #2]
 800db3c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800db3e:	887b      	ldrh	r3, [r7, #2]
 800db40:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800db42:	7efb      	ldrb	r3, [r7, #27]
 800db44:	2b01      	cmp	r3, #1
 800db46:	d00e      	beq.n	800db66 <HAL_SPI_TransmitReceive+0x6e>
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800db4e:	d106      	bne.n	800db5e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d102      	bne.n	800db5e <HAL_SPI_TransmitReceive+0x66>
 800db58:	7efb      	ldrb	r3, [r7, #27]
 800db5a:	2b04      	cmp	r3, #4
 800db5c:	d003      	beq.n	800db66 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800db5e:	2302      	movs	r3, #2
 800db60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800db64:	e1cd      	b.n	800df02 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d005      	beq.n	800db78 <HAL_SPI_TransmitReceive+0x80>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d002      	beq.n	800db78 <HAL_SPI_TransmitReceive+0x80>
 800db72:	887b      	ldrh	r3, [r7, #2]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d103      	bne.n	800db80 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800db78:	2301      	movs	r3, #1
 800db7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800db7e:	e1c0      	b.n	800df02 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800db86:	b2db      	uxtb	r3, r3
 800db88:	2b04      	cmp	r3, #4
 800db8a:	d003      	beq.n	800db94 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2205      	movs	r2, #5
 800db90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2200      	movs	r2, #0
 800db98:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	887a      	ldrh	r2, [r7, #2]
 800dba4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	887a      	ldrh	r2, [r7, #2]
 800dbac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	68ba      	ldr	r2, [r7, #8]
 800dbb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	887a      	ldrh	r2, [r7, #2]
 800dbba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	887a      	ldrh	r2, [r7, #2]
 800dbc0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dbd6:	d802      	bhi.n	800dbde <HAL_SPI_TransmitReceive+0xe6>
 800dbd8:	8a3b      	ldrh	r3, [r7, #16]
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	d908      	bls.n	800dbf0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	685a      	ldr	r2, [r3, #4]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dbec:	605a      	str	r2, [r3, #4]
 800dbee:	e007      	b.n	800dc00 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	685a      	ldr	r2, [r3, #4]
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dbfe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc0a:	2b40      	cmp	r3, #64	; 0x40
 800dc0c:	d007      	beq.n	800dc1e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	681a      	ldr	r2, [r3, #0]
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	68db      	ldr	r3, [r3, #12]
 800dc22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dc26:	d97c      	bls.n	800dd22 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d002      	beq.n	800dc36 <HAL_SPI_TransmitReceive+0x13e>
 800dc30:	8a7b      	ldrh	r3, [r7, #18]
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	d169      	bne.n	800dd0a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc3a:	881a      	ldrh	r2, [r3, #0]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc46:	1c9a      	adds	r2, r3, #2
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	3b01      	subs	r3, #1
 800dc54:	b29a      	uxth	r2, r3
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dc5a:	e056      	b.n	800dd0a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	f003 0302 	and.w	r3, r3, #2
 800dc66:	2b02      	cmp	r3, #2
 800dc68:	d11b      	bne.n	800dca2 <HAL_SPI_TransmitReceive+0x1aa>
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d016      	beq.n	800dca2 <HAL_SPI_TransmitReceive+0x1aa>
 800dc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d113      	bne.n	800dca2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc7e:	881a      	ldrh	r2, [r3, #0]
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8a:	1c9a      	adds	r2, r3, #2
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	3b01      	subs	r3, #1
 800dc98:	b29a      	uxth	r2, r3
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	689b      	ldr	r3, [r3, #8]
 800dca8:	f003 0301 	and.w	r3, r3, #1
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	d11c      	bne.n	800dcea <HAL_SPI_TransmitReceive+0x1f2>
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d016      	beq.n	800dcea <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	68da      	ldr	r2, [r3, #12]
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc6:	b292      	uxth	r2, r2
 800dcc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcce:	1c9a      	adds	r2, r3, #2
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	3b01      	subs	r3, #1
 800dcde:	b29a      	uxth	r2, r3
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dce6:	2301      	movs	r3, #1
 800dce8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dcea:	f7fb fc67 	bl	80095bc <HAL_GetTick>
 800dcee:	4602      	mov	r2, r0
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	1ad3      	subs	r3, r2, r3
 800dcf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d807      	bhi.n	800dd0a <HAL_SPI_TransmitReceive+0x212>
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd00:	d003      	beq.n	800dd0a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800dd02:	2303      	movs	r3, #3
 800dd04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800dd08:	e0fb      	b.n	800df02 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d1a3      	bne.n	800dc5c <HAL_SPI_TransmitReceive+0x164>
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d19d      	bne.n	800dc5c <HAL_SPI_TransmitReceive+0x164>
 800dd20:	e0df      	b.n	800dee2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d003      	beq.n	800dd32 <HAL_SPI_TransmitReceive+0x23a>
 800dd2a:	8a7b      	ldrh	r3, [r7, #18]
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	f040 80cb 	bne.w	800dec8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d912      	bls.n	800dd62 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd40:	881a      	ldrh	r2, [r3, #0]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd4c:	1c9a      	adds	r2, r3, #2
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	3b02      	subs	r3, #2
 800dd5a:	b29a      	uxth	r2, r3
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dd60:	e0b2      	b.n	800dec8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	330c      	adds	r3, #12
 800dd6c:	7812      	ldrb	r2, [r2, #0]
 800dd6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd74:	1c5a      	adds	r2, r3, #1
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	3b01      	subs	r3, #1
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd88:	e09e      	b.n	800dec8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	f003 0302 	and.w	r3, r3, #2
 800dd94:	2b02      	cmp	r3, #2
 800dd96:	d134      	bne.n	800de02 <HAL_SPI_TransmitReceive+0x30a>
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d02f      	beq.n	800de02 <HAL_SPI_TransmitReceive+0x30a>
 800dda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d12c      	bne.n	800de02 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	d912      	bls.n	800ddd8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb6:	881a      	ldrh	r2, [r3, #0]
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddc2:	1c9a      	adds	r2, r3, #2
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	3b02      	subs	r3, #2
 800ddd0:	b29a      	uxth	r2, r3
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ddd6:	e012      	b.n	800ddfe <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	330c      	adds	r3, #12
 800dde2:	7812      	ldrb	r2, [r2, #0]
 800dde4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddea:	1c5a      	adds	r2, r3, #1
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	3b01      	subs	r3, #1
 800ddf8:	b29a      	uxth	r2, r3
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ddfe:	2300      	movs	r3, #0
 800de00:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	689b      	ldr	r3, [r3, #8]
 800de08:	f003 0301 	and.w	r3, r3, #1
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d148      	bne.n	800dea2 <HAL_SPI_TransmitReceive+0x3aa>
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800de16:	b29b      	uxth	r3, r3
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d042      	beq.n	800dea2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800de22:	b29b      	uxth	r3, r3
 800de24:	2b01      	cmp	r3, #1
 800de26:	d923      	bls.n	800de70 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	68da      	ldr	r2, [r3, #12]
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de32:	b292      	uxth	r2, r2
 800de34:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de3a:	1c9a      	adds	r2, r3, #2
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800de46:	b29b      	uxth	r3, r3
 800de48:	3b02      	subs	r3, #2
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800de58:	b29b      	uxth	r3, r3
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d81f      	bhi.n	800de9e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	685a      	ldr	r2, [r3, #4]
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800de6c:	605a      	str	r2, [r3, #4]
 800de6e:	e016      	b.n	800de9e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f103 020c 	add.w	r2, r3, #12
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de7c:	7812      	ldrb	r2, [r2, #0]
 800de7e:	b2d2      	uxtb	r2, r2
 800de80:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de86:	1c5a      	adds	r2, r3, #1
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800de92:	b29b      	uxth	r3, r3
 800de94:	3b01      	subs	r3, #1
 800de96:	b29a      	uxth	r2, r3
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800de9e:	2301      	movs	r3, #1
 800dea0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800dea2:	f7fb fb8b 	bl	80095bc <HAL_GetTick>
 800dea6:	4602      	mov	r2, r0
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	1ad3      	subs	r3, r2, r3
 800deac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deae:	429a      	cmp	r2, r3
 800deb0:	d803      	bhi.n	800deba <HAL_SPI_TransmitReceive+0x3c2>
 800deb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deb8:	d102      	bne.n	800dec0 <HAL_SPI_TransmitReceive+0x3c8>
 800deba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800debc:	2b00      	cmp	r3, #0
 800debe:	d103      	bne.n	800dec8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800dec0:	2303      	movs	r3, #3
 800dec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800dec6:	e01c      	b.n	800df02 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800decc:	b29b      	uxth	r3, r3
 800dece:	2b00      	cmp	r3, #0
 800ded0:	f47f af5b 	bne.w	800dd8a <HAL_SPI_TransmitReceive+0x292>
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800deda:	b29b      	uxth	r3, r3
 800dedc:	2b00      	cmp	r3, #0
 800dede:	f47f af54 	bne.w	800dd8a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dee2:	69fa      	ldr	r2, [r7, #28]
 800dee4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	f000 fa10 	bl	800e30c <SPI_EndRxTxTransaction>
 800deec:	4603      	mov	r3, r0
 800deee:	2b00      	cmp	r3, #0
 800def0:	d006      	beq.n	800df00 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800def2:	2301      	movs	r3, #1
 800def4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2220      	movs	r2, #32
 800defc:	661a      	str	r2, [r3, #96]	; 0x60
 800defe:	e000      	b.n	800df02 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800df00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2201      	movs	r2, #1
 800df06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800df12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800df16:	4618      	mov	r0, r3
 800df18:	3728      	adds	r7, #40	; 0x28
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
	...

0800df20 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b088      	sub	sp, #32
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	689b      	ldr	r3, [r3, #8]
 800df36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	099b      	lsrs	r3, r3, #6
 800df3c:	f003 0301 	and.w	r3, r3, #1
 800df40:	2b00      	cmp	r3, #0
 800df42:	d10f      	bne.n	800df64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800df44:	69bb      	ldr	r3, [r7, #24]
 800df46:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d00a      	beq.n	800df64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	099b      	lsrs	r3, r3, #6
 800df52:	f003 0301 	and.w	r3, r3, #1
 800df56:	2b00      	cmp	r3, #0
 800df58:	d004      	beq.n	800df64 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	4798      	blx	r3
    return;
 800df62:	e0d8      	b.n	800e116 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800df64:	69bb      	ldr	r3, [r7, #24]
 800df66:	085b      	lsrs	r3, r3, #1
 800df68:	f003 0301 	and.w	r3, r3, #1
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d00a      	beq.n	800df86 <HAL_SPI_IRQHandler+0x66>
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	09db      	lsrs	r3, r3, #7
 800df74:	f003 0301 	and.w	r3, r3, #1
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d004      	beq.n	800df86 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	4798      	blx	r3
    return;
 800df84:	e0c7      	b.n	800e116 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800df86:	69bb      	ldr	r3, [r7, #24]
 800df88:	095b      	lsrs	r3, r3, #5
 800df8a:	f003 0301 	and.w	r3, r3, #1
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d10c      	bne.n	800dfac <HAL_SPI_IRQHandler+0x8c>
 800df92:	69bb      	ldr	r3, [r7, #24]
 800df94:	099b      	lsrs	r3, r3, #6
 800df96:	f003 0301 	and.w	r3, r3, #1
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d106      	bne.n	800dfac <HAL_SPI_IRQHandler+0x8c>
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	0a1b      	lsrs	r3, r3, #8
 800dfa2:	f003 0301 	and.w	r3, r3, #1
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	f000 80b5 	beq.w	800e116 <HAL_SPI_IRQHandler+0x1f6>
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	095b      	lsrs	r3, r3, #5
 800dfb0:	f003 0301 	and.w	r3, r3, #1
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f000 80ae 	beq.w	800e116 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800dfba:	69bb      	ldr	r3, [r7, #24]
 800dfbc:	099b      	lsrs	r3, r3, #6
 800dfbe:	f003 0301 	and.w	r3, r3, #1
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d023      	beq.n	800e00e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dfcc:	b2db      	uxtb	r3, r3
 800dfce:	2b03      	cmp	r3, #3
 800dfd0:	d011      	beq.n	800dff6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfd6:	f043 0204 	orr.w	r2, r3, #4
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dfde:	2300      	movs	r3, #0
 800dfe0:	617b      	str	r3, [r7, #20]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	68db      	ldr	r3, [r3, #12]
 800dfe8:	617b      	str	r3, [r7, #20]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	689b      	ldr	r3, [r3, #8]
 800dff0:	617b      	str	r3, [r7, #20]
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	e00b      	b.n	800e00e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dff6:	2300      	movs	r3, #0
 800dff8:	613b      	str	r3, [r7, #16]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	68db      	ldr	r3, [r3, #12]
 800e000:	613b      	str	r3, [r7, #16]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	689b      	ldr	r3, [r3, #8]
 800e008:	613b      	str	r3, [r7, #16]
 800e00a:	693b      	ldr	r3, [r7, #16]
        return;
 800e00c:	e083      	b.n	800e116 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e00e:	69bb      	ldr	r3, [r7, #24]
 800e010:	095b      	lsrs	r3, r3, #5
 800e012:	f003 0301 	and.w	r3, r3, #1
 800e016:	2b00      	cmp	r3, #0
 800e018:	d014      	beq.n	800e044 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e01e:	f043 0201 	orr.w	r2, r3, #1
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e026:	2300      	movs	r3, #0
 800e028:	60fb      	str	r3, [r7, #12]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	689b      	ldr	r3, [r3, #8]
 800e030:	60fb      	str	r3, [r7, #12]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e040:	601a      	str	r2, [r3, #0]
 800e042:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	0a1b      	lsrs	r3, r3, #8
 800e048:	f003 0301 	and.w	r3, r3, #1
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d00c      	beq.n	800e06a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e054:	f043 0208 	orr.w	r2, r3, #8
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e05c:	2300      	movs	r3, #0
 800e05e:	60bb      	str	r3, [r7, #8]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	60bb      	str	r3, [r7, #8]
 800e068:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d050      	beq.n	800e114 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	685a      	ldr	r2, [r3, #4]
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e080:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2201      	movs	r2, #1
 800e086:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	f003 0302 	and.w	r3, r3, #2
 800e090:	2b00      	cmp	r3, #0
 800e092:	d104      	bne.n	800e09e <HAL_SPI_IRQHandler+0x17e>
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	f003 0301 	and.w	r3, r3, #1
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d034      	beq.n	800e108 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	685a      	ldr	r2, [r3, #4]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f022 0203 	bic.w	r2, r2, #3
 800e0ac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d011      	beq.n	800e0da <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0ba:	4a18      	ldr	r2, [pc, #96]	; (800e11c <HAL_SPI_IRQHandler+0x1fc>)
 800e0bc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7fc fab4 	bl	800a630 <HAL_DMA_Abort_IT>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d005      	beq.n	800e0da <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d016      	beq.n	800e110 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0e6:	4a0d      	ldr	r2, [pc, #52]	; (800e11c <HAL_SPI_IRQHandler+0x1fc>)
 800e0e8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7fc fa9e 	bl	800a630 <HAL_DMA_Abort_IT>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d00a      	beq.n	800e110 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800e106:	e003      	b.n	800e110 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f000 f809 	bl	800e120 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e10e:	e000      	b.n	800e112 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800e110:	bf00      	nop
    return;
 800e112:	bf00      	nop
 800e114:	bf00      	nop
  }
}
 800e116:	3720      	adds	r7, #32
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}
 800e11c:	0800e135 	.word	0x0800e135

0800e120 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e120:	b480      	push	{r7}
 800e122:	b083      	sub	sp, #12
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e128:	bf00      	nop
 800e12a:	370c      	adds	r7, #12
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr

0800e134 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e140:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2200      	movs	r2, #0
 800e146:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2200      	movs	r2, #0
 800e14e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e150:	68f8      	ldr	r0, [r7, #12]
 800e152:	f7ff ffe5 	bl	800e120 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e156:	bf00      	nop
 800e158:	3710      	adds	r7, #16
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e15e:	b580      	push	{r7, lr}
 800e160:	b084      	sub	sp, #16
 800e162:	af00      	add	r7, sp, #0
 800e164:	60f8      	str	r0, [r7, #12]
 800e166:	60b9      	str	r1, [r7, #8]
 800e168:	603b      	str	r3, [r7, #0]
 800e16a:	4613      	mov	r3, r2
 800e16c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e16e:	e04c      	b.n	800e20a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e176:	d048      	beq.n	800e20a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e178:	f7fb fa20 	bl	80095bc <HAL_GetTick>
 800e17c:	4602      	mov	r2, r0
 800e17e:	69bb      	ldr	r3, [r7, #24]
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	683a      	ldr	r2, [r7, #0]
 800e184:	429a      	cmp	r2, r3
 800e186:	d902      	bls.n	800e18e <SPI_WaitFlagStateUntilTimeout+0x30>
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d13d      	bne.n	800e20a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	685a      	ldr	r2, [r3, #4]
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e19c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	685b      	ldr	r3, [r3, #4]
 800e1a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e1a6:	d111      	bne.n	800e1cc <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	689b      	ldr	r3, [r3, #8]
 800e1ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1b0:	d004      	beq.n	800e1bc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	689b      	ldr	r3, [r3, #8]
 800e1b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1ba:	d107      	bne.n	800e1cc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e1d4:	d10f      	bne.n	800e1f6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e1e4:	601a      	str	r2, [r3, #0]
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e1f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2200      	movs	r2, #0
 800e202:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e206:	2303      	movs	r3, #3
 800e208:	e00f      	b.n	800e22a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	689a      	ldr	r2, [r3, #8]
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	4013      	ands	r3, r2
 800e214:	68ba      	ldr	r2, [r7, #8]
 800e216:	429a      	cmp	r2, r3
 800e218:	bf0c      	ite	eq
 800e21a:	2301      	moveq	r3, #1
 800e21c:	2300      	movne	r3, #0
 800e21e:	b2db      	uxtb	r3, r3
 800e220:	461a      	mov	r2, r3
 800e222:	79fb      	ldrb	r3, [r7, #7]
 800e224:	429a      	cmp	r2, r3
 800e226:	d1a3      	bne.n	800e170 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e228:	2300      	movs	r3, #0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3710      	adds	r7, #16
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e232:	b580      	push	{r7, lr}
 800e234:	b084      	sub	sp, #16
 800e236:	af00      	add	r7, sp, #0
 800e238:	60f8      	str	r0, [r7, #12]
 800e23a:	60b9      	str	r1, [r7, #8]
 800e23c:	607a      	str	r2, [r7, #4]
 800e23e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800e240:	e057      	b.n	800e2f2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e248:	d106      	bne.n	800e258 <SPI_WaitFifoStateUntilTimeout+0x26>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d103      	bne.n	800e258 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	330c      	adds	r3, #12
 800e256:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e25e:	d048      	beq.n	800e2f2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e260:	f7fb f9ac 	bl	80095bc <HAL_GetTick>
 800e264:	4602      	mov	r2, r0
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	1ad3      	subs	r3, r2, r3
 800e26a:	683a      	ldr	r2, [r7, #0]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d902      	bls.n	800e276 <SPI_WaitFifoStateUntilTimeout+0x44>
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d13d      	bne.n	800e2f2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	685a      	ldr	r2, [r3, #4]
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e28e:	d111      	bne.n	800e2b4 <SPI_WaitFifoStateUntilTimeout+0x82>
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	689b      	ldr	r3, [r3, #8]
 800e294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e298:	d004      	beq.n	800e2a4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	689b      	ldr	r3, [r3, #8]
 800e29e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2a2:	d107      	bne.n	800e2b4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	681a      	ldr	r2, [r3, #0]
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e2b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e2bc:	d10f      	bne.n	800e2de <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e2cc:	601a      	str	r2, [r3, #0]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	681a      	ldr	r2, [r3, #0]
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e2dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e2ee:	2303      	movs	r3, #3
 800e2f0:	e008      	b.n	800e304 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	689a      	ldr	r2, [r3, #8]
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	4013      	ands	r3, r2
 800e2fc:	687a      	ldr	r2, [r7, #4]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d19f      	bne.n	800e242 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800e302:	2300      	movs	r3, #0
}
 800e304:	4618      	mov	r0, r3
 800e306:	3710      	adds	r7, #16
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b086      	sub	sp, #24
 800e310:	af02      	add	r7, sp, #8
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	9300      	str	r3, [sp, #0]
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	2200      	movs	r2, #0
 800e320:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e324:	68f8      	ldr	r0, [r7, #12]
 800e326:	f7ff ff84 	bl	800e232 <SPI_WaitFifoStateUntilTimeout>
 800e32a:	4603      	mov	r3, r0
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d007      	beq.n	800e340 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e334:	f043 0220 	orr.w	r2, r3, #32
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e33c:	2303      	movs	r3, #3
 800e33e:	e027      	b.n	800e390 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	9300      	str	r3, [sp, #0]
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	2200      	movs	r2, #0
 800e348:	2180      	movs	r1, #128	; 0x80
 800e34a:	68f8      	ldr	r0, [r7, #12]
 800e34c:	f7ff ff07 	bl	800e15e <SPI_WaitFlagStateUntilTimeout>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d007      	beq.n	800e366 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e35a:	f043 0220 	orr.w	r2, r3, #32
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e362:	2303      	movs	r3, #3
 800e364:	e014      	b.n	800e390 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	2200      	movs	r2, #0
 800e36e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e372:	68f8      	ldr	r0, [r7, #12]
 800e374:	f7ff ff5d 	bl	800e232 <SPI_WaitFifoStateUntilTimeout>
 800e378:	4603      	mov	r3, r0
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d007      	beq.n	800e38e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e382:	f043 0220 	orr.w	r2, r3, #32
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e38a:	2303      	movs	r3, #3
 800e38c:	e000      	b.n	800e390 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e38e:	2300      	movs	r3, #0
}
 800e390:	4618      	mov	r0, r3
 800e392:	3710      	adds	r7, #16
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d101      	bne.n	800e3aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	e01d      	b.n	800e3e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d106      	bne.n	800e3c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f7fa f904 	bl	80085cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2202      	movs	r2, #2
 800e3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	3304      	adds	r3, #4
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	4610      	mov	r0, r2
 800e3d8:	f000 fb82 	bl	800eae0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2201      	movs	r2, #1
 800e3e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3708      	adds	r7, #8
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
	...

0800e3f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b085      	sub	sp, #20
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	68da      	ldr	r2, [r3, #12]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f042 0201 	orr.w	r2, r2, #1
 800e406:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	689a      	ldr	r2, [r3, #8]
 800e40e:	4b0c      	ldr	r3, [pc, #48]	; (800e440 <HAL_TIM_Base_Start_IT+0x50>)
 800e410:	4013      	ands	r3, r2
 800e412:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2b06      	cmp	r3, #6
 800e418:	d00b      	beq.n	800e432 <HAL_TIM_Base_Start_IT+0x42>
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e420:	d007      	beq.n	800e432 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f042 0201 	orr.w	r2, r2, #1
 800e430:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e432:	2300      	movs	r3, #0
}
 800e434:	4618      	mov	r0, r3
 800e436:	3714      	adds	r7, #20
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr
 800e440:	00010007 	.word	0x00010007

0800e444 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d101      	bne.n	800e456 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e452:	2301      	movs	r3, #1
 800e454:	e01d      	b.n	800e492 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d106      	bne.n	800e470 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2200      	movs	r2, #0
 800e466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 f815 	bl	800e49a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2202      	movs	r2, #2
 800e474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681a      	ldr	r2, [r3, #0]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	3304      	adds	r3, #4
 800e480:	4619      	mov	r1, r3
 800e482:	4610      	mov	r0, r2
 800e484:	f000 fb2c 	bl	800eae0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2201      	movs	r2, #1
 800e48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e490:	2300      	movs	r3, #0
}
 800e492:	4618      	mov	r0, r3
 800e494:	3708      	adds	r7, #8
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e49a:	b480      	push	{r7}
 800e49c:	b083      	sub	sp, #12
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e4a2:	bf00      	nop
 800e4a4:	370c      	adds	r7, #12
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr

0800e4ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e4ae:	b580      	push	{r7, lr}
 800e4b0:	b082      	sub	sp, #8
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	691b      	ldr	r3, [r3, #16]
 800e4bc:	f003 0302 	and.w	r3, r3, #2
 800e4c0:	2b02      	cmp	r3, #2
 800e4c2:	d122      	bne.n	800e50a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	68db      	ldr	r3, [r3, #12]
 800e4ca:	f003 0302 	and.w	r3, r3, #2
 800e4ce:	2b02      	cmp	r3, #2
 800e4d0:	d11b      	bne.n	800e50a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f06f 0202 	mvn.w	r2, #2
 800e4da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2201      	movs	r2, #1
 800e4e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	699b      	ldr	r3, [r3, #24]
 800e4e8:	f003 0303 	and.w	r3, r3, #3
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d003      	beq.n	800e4f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 fad7 	bl	800eaa4 <HAL_TIM_IC_CaptureCallback>
 800e4f6:	e005      	b.n	800e504 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f000 fac9 	bl	800ea90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f000 fada 	bl	800eab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2200      	movs	r2, #0
 800e508:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	691b      	ldr	r3, [r3, #16]
 800e510:	f003 0304 	and.w	r3, r3, #4
 800e514:	2b04      	cmp	r3, #4
 800e516:	d122      	bne.n	800e55e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	f003 0304 	and.w	r3, r3, #4
 800e522:	2b04      	cmp	r3, #4
 800e524:	d11b      	bne.n	800e55e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f06f 0204 	mvn.w	r2, #4
 800e52e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2202      	movs	r2, #2
 800e534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	699b      	ldr	r3, [r3, #24]
 800e53c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e540:	2b00      	cmp	r3, #0
 800e542:	d003      	beq.n	800e54c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f000 faad 	bl	800eaa4 <HAL_TIM_IC_CaptureCallback>
 800e54a:	e005      	b.n	800e558 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f000 fa9f 	bl	800ea90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 fab0 	bl	800eab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	691b      	ldr	r3, [r3, #16]
 800e564:	f003 0308 	and.w	r3, r3, #8
 800e568:	2b08      	cmp	r3, #8
 800e56a:	d122      	bne.n	800e5b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	68db      	ldr	r3, [r3, #12]
 800e572:	f003 0308 	and.w	r3, r3, #8
 800e576:	2b08      	cmp	r3, #8
 800e578:	d11b      	bne.n	800e5b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f06f 0208 	mvn.w	r2, #8
 800e582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2204      	movs	r2, #4
 800e588:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	69db      	ldr	r3, [r3, #28]
 800e590:	f003 0303 	and.w	r3, r3, #3
 800e594:	2b00      	cmp	r3, #0
 800e596:	d003      	beq.n	800e5a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f000 fa83 	bl	800eaa4 <HAL_TIM_IC_CaptureCallback>
 800e59e:	e005      	b.n	800e5ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f000 fa75 	bl	800ea90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 fa86 	bl	800eab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	691b      	ldr	r3, [r3, #16]
 800e5b8:	f003 0310 	and.w	r3, r3, #16
 800e5bc:	2b10      	cmp	r3, #16
 800e5be:	d122      	bne.n	800e606 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	68db      	ldr	r3, [r3, #12]
 800e5c6:	f003 0310 	and.w	r3, r3, #16
 800e5ca:	2b10      	cmp	r3, #16
 800e5cc:	d11b      	bne.n	800e606 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f06f 0210 	mvn.w	r2, #16
 800e5d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2208      	movs	r2, #8
 800e5dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	69db      	ldr	r3, [r3, #28]
 800e5e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d003      	beq.n	800e5f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f000 fa59 	bl	800eaa4 <HAL_TIM_IC_CaptureCallback>
 800e5f2:	e005      	b.n	800e600 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 fa4b 	bl	800ea90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 fa5c 	bl	800eab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2200      	movs	r2, #0
 800e604:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	691b      	ldr	r3, [r3, #16]
 800e60c:	f003 0301 	and.w	r3, r3, #1
 800e610:	2b01      	cmp	r3, #1
 800e612:	d10e      	bne.n	800e632 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	68db      	ldr	r3, [r3, #12]
 800e61a:	f003 0301 	and.w	r3, r3, #1
 800e61e:	2b01      	cmp	r3, #1
 800e620:	d107      	bne.n	800e632 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f06f 0201 	mvn.w	r2, #1
 800e62a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f7f6 fcd5 	bl	8004fdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	691b      	ldr	r3, [r3, #16]
 800e638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e63c:	2b80      	cmp	r3, #128	; 0x80
 800e63e:	d10e      	bne.n	800e65e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	68db      	ldr	r3, [r3, #12]
 800e646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e64a:	2b80      	cmp	r3, #128	; 0x80
 800e64c:	d107      	bne.n	800e65e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f000 fe71 	bl	800f340 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	691b      	ldr	r3, [r3, #16]
 800e664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e66c:	d10e      	bne.n	800e68c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	68db      	ldr	r3, [r3, #12]
 800e674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e678:	2b80      	cmp	r3, #128	; 0x80
 800e67a:	d107      	bne.n	800e68c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f000 fe64 	bl	800f354 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	691b      	ldr	r3, [r3, #16]
 800e692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e696:	2b40      	cmp	r3, #64	; 0x40
 800e698:	d10e      	bne.n	800e6b8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6a4:	2b40      	cmp	r3, #64	; 0x40
 800e6a6:	d107      	bne.n	800e6b8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e6b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f000 fa0a 	bl	800eacc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	691b      	ldr	r3, [r3, #16]
 800e6be:	f003 0320 	and.w	r3, r3, #32
 800e6c2:	2b20      	cmp	r3, #32
 800e6c4:	d10e      	bne.n	800e6e4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	68db      	ldr	r3, [r3, #12]
 800e6cc:	f003 0320 	and.w	r3, r3, #32
 800e6d0:	2b20      	cmp	r3, #32
 800e6d2:	d107      	bne.n	800e6e4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f06f 0220 	mvn.w	r2, #32
 800e6dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f000 fe24 	bl	800f32c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e6e4:	bf00      	nop
 800e6e6:	3708      	adds	r7, #8
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}

0800e6ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e6fe:	2b01      	cmp	r3, #1
 800e700:	d101      	bne.n	800e706 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e702:	2302      	movs	r3, #2
 800e704:	e105      	b.n	800e912 <HAL_TIM_PWM_ConfigChannel+0x226>
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2201      	movs	r2, #1
 800e70a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2202      	movs	r2, #2
 800e712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2b14      	cmp	r3, #20
 800e71a:	f200 80f0 	bhi.w	800e8fe <HAL_TIM_PWM_ConfigChannel+0x212>
 800e71e:	a201      	add	r2, pc, #4	; (adr r2, 800e724 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e724:	0800e779 	.word	0x0800e779
 800e728:	0800e8ff 	.word	0x0800e8ff
 800e72c:	0800e8ff 	.word	0x0800e8ff
 800e730:	0800e8ff 	.word	0x0800e8ff
 800e734:	0800e7b9 	.word	0x0800e7b9
 800e738:	0800e8ff 	.word	0x0800e8ff
 800e73c:	0800e8ff 	.word	0x0800e8ff
 800e740:	0800e8ff 	.word	0x0800e8ff
 800e744:	0800e7fb 	.word	0x0800e7fb
 800e748:	0800e8ff 	.word	0x0800e8ff
 800e74c:	0800e8ff 	.word	0x0800e8ff
 800e750:	0800e8ff 	.word	0x0800e8ff
 800e754:	0800e83b 	.word	0x0800e83b
 800e758:	0800e8ff 	.word	0x0800e8ff
 800e75c:	0800e8ff 	.word	0x0800e8ff
 800e760:	0800e8ff 	.word	0x0800e8ff
 800e764:	0800e87d 	.word	0x0800e87d
 800e768:	0800e8ff 	.word	0x0800e8ff
 800e76c:	0800e8ff 	.word	0x0800e8ff
 800e770:	0800e8ff 	.word	0x0800e8ff
 800e774:	0800e8bd 	.word	0x0800e8bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	68b9      	ldr	r1, [r7, #8]
 800e77e:	4618      	mov	r0, r3
 800e780:	f000 fa4e 	bl	800ec20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	699a      	ldr	r2, [r3, #24]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f042 0208 	orr.w	r2, r2, #8
 800e792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	699a      	ldr	r2, [r3, #24]
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f022 0204 	bic.w	r2, r2, #4
 800e7a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	6999      	ldr	r1, [r3, #24]
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	691a      	ldr	r2, [r3, #16]
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	430a      	orrs	r2, r1
 800e7b4:	619a      	str	r2, [r3, #24]
      break;
 800e7b6:	e0a3      	b.n	800e900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	68b9      	ldr	r1, [r7, #8]
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f000 faa0 	bl	800ed04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	699a      	ldr	r2, [r3, #24]
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	699a      	ldr	r2, [r3, #24]
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e7e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	6999      	ldr	r1, [r3, #24]
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	691b      	ldr	r3, [r3, #16]
 800e7ee:	021a      	lsls	r2, r3, #8
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	430a      	orrs	r2, r1
 800e7f6:	619a      	str	r2, [r3, #24]
      break;
 800e7f8:	e082      	b.n	800e900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	68b9      	ldr	r1, [r7, #8]
 800e800:	4618      	mov	r0, r3
 800e802:	f000 faf7 	bl	800edf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	69da      	ldr	r2, [r3, #28]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f042 0208 	orr.w	r2, r2, #8
 800e814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	69da      	ldr	r2, [r3, #28]
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	f022 0204 	bic.w	r2, r2, #4
 800e824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	69d9      	ldr	r1, [r3, #28]
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	691a      	ldr	r2, [r3, #16]
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	430a      	orrs	r2, r1
 800e836:	61da      	str	r2, [r3, #28]
      break;
 800e838:	e062      	b.n	800e900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	68b9      	ldr	r1, [r7, #8]
 800e840:	4618      	mov	r0, r3
 800e842:	f000 fb4d 	bl	800eee0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	69da      	ldr	r2, [r3, #28]
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	69da      	ldr	r2, [r3, #28]
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	69d9      	ldr	r1, [r3, #28]
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	691b      	ldr	r3, [r3, #16]
 800e870:	021a      	lsls	r2, r3, #8
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	430a      	orrs	r2, r1
 800e878:	61da      	str	r2, [r3, #28]
      break;
 800e87a:	e041      	b.n	800e900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	68b9      	ldr	r1, [r7, #8]
 800e882:	4618      	mov	r0, r3
 800e884:	f000 fb84 	bl	800ef90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f042 0208 	orr.w	r2, r2, #8
 800e896:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f022 0204 	bic.w	r2, r2, #4
 800e8a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	691a      	ldr	r2, [r3, #16]
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	430a      	orrs	r2, r1
 800e8b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e8ba:	e021      	b.n	800e900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	68b9      	ldr	r1, [r7, #8]
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f000 fbb6 	bl	800f034 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e8d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e8e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	691b      	ldr	r3, [r3, #16]
 800e8f2:	021a      	lsls	r2, r3, #8
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	430a      	orrs	r2, r1
 800e8fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e8fc:	e000      	b.n	800e900 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800e8fe:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2201      	movs	r2, #1
 800e904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2200      	movs	r2, #0
 800e90c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e910:	2300      	movs	r3, #0
}
 800e912:	4618      	mov	r0, r3
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop

0800e91c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b084      	sub	sp, #16
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d101      	bne.n	800e934 <HAL_TIM_ConfigClockSource+0x18>
 800e930:	2302      	movs	r3, #2
 800e932:	e0a6      	b.n	800ea82 <HAL_TIM_ConfigClockSource+0x166>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2201      	movs	r2, #1
 800e938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2202      	movs	r2, #2
 800e940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	689b      	ldr	r3, [r3, #8]
 800e94a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e94c:	68fa      	ldr	r2, [r7, #12]
 800e94e:	4b4f      	ldr	r3, [pc, #316]	; (800ea8c <HAL_TIM_ConfigClockSource+0x170>)
 800e950:	4013      	ands	r3, r2
 800e952:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e95a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	2b40      	cmp	r3, #64	; 0x40
 800e96a:	d067      	beq.n	800ea3c <HAL_TIM_ConfigClockSource+0x120>
 800e96c:	2b40      	cmp	r3, #64	; 0x40
 800e96e:	d80b      	bhi.n	800e988 <HAL_TIM_ConfigClockSource+0x6c>
 800e970:	2b10      	cmp	r3, #16
 800e972:	d073      	beq.n	800ea5c <HAL_TIM_ConfigClockSource+0x140>
 800e974:	2b10      	cmp	r3, #16
 800e976:	d802      	bhi.n	800e97e <HAL_TIM_ConfigClockSource+0x62>
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d06f      	beq.n	800ea5c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e97c:	e078      	b.n	800ea70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e97e:	2b20      	cmp	r3, #32
 800e980:	d06c      	beq.n	800ea5c <HAL_TIM_ConfigClockSource+0x140>
 800e982:	2b30      	cmp	r3, #48	; 0x30
 800e984:	d06a      	beq.n	800ea5c <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e986:	e073      	b.n	800ea70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e988:	2b70      	cmp	r3, #112	; 0x70
 800e98a:	d00d      	beq.n	800e9a8 <HAL_TIM_ConfigClockSource+0x8c>
 800e98c:	2b70      	cmp	r3, #112	; 0x70
 800e98e:	d804      	bhi.n	800e99a <HAL_TIM_ConfigClockSource+0x7e>
 800e990:	2b50      	cmp	r3, #80	; 0x50
 800e992:	d033      	beq.n	800e9fc <HAL_TIM_ConfigClockSource+0xe0>
 800e994:	2b60      	cmp	r3, #96	; 0x60
 800e996:	d041      	beq.n	800ea1c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e998:	e06a      	b.n	800ea70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e99a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e99e:	d066      	beq.n	800ea6e <HAL_TIM_ConfigClockSource+0x152>
 800e9a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e9a4:	d017      	beq.n	800e9d6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e9a6:	e063      	b.n	800ea70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6818      	ldr	r0, [r3, #0]
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	6899      	ldr	r1, [r3, #8]
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	685a      	ldr	r2, [r3, #4]
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	68db      	ldr	r3, [r3, #12]
 800e9b8:	f000 fc0a 	bl	800f1d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	689b      	ldr	r3, [r3, #8]
 800e9c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e9ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	68fa      	ldr	r2, [r7, #12]
 800e9d2:	609a      	str	r2, [r3, #8]
      break;
 800e9d4:	e04c      	b.n	800ea70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6818      	ldr	r0, [r3, #0]
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	6899      	ldr	r1, [r3, #8]
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	685a      	ldr	r2, [r3, #4]
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	f000 fbf3 	bl	800f1d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	689a      	ldr	r2, [r3, #8]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e9f8:	609a      	str	r2, [r3, #8]
      break;
 800e9fa:	e039      	b.n	800ea70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6818      	ldr	r0, [r3, #0]
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	6859      	ldr	r1, [r3, #4]
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	461a      	mov	r2, r3
 800ea0a:	f000 fb67 	bl	800f0dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	2150      	movs	r1, #80	; 0x50
 800ea14:	4618      	mov	r0, r3
 800ea16:	f000 fbc0 	bl	800f19a <TIM_ITRx_SetConfig>
      break;
 800ea1a:	e029      	b.n	800ea70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6818      	ldr	r0, [r3, #0]
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	6859      	ldr	r1, [r3, #4]
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	461a      	mov	r2, r3
 800ea2a:	f000 fb86 	bl	800f13a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	2160      	movs	r1, #96	; 0x60
 800ea34:	4618      	mov	r0, r3
 800ea36:	f000 fbb0 	bl	800f19a <TIM_ITRx_SetConfig>
      break;
 800ea3a:	e019      	b.n	800ea70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6818      	ldr	r0, [r3, #0]
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	6859      	ldr	r1, [r3, #4]
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	68db      	ldr	r3, [r3, #12]
 800ea48:	461a      	mov	r2, r3
 800ea4a:	f000 fb47 	bl	800f0dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	2140      	movs	r1, #64	; 0x40
 800ea54:	4618      	mov	r0, r3
 800ea56:	f000 fba0 	bl	800f19a <TIM_ITRx_SetConfig>
      break;
 800ea5a:	e009      	b.n	800ea70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4619      	mov	r1, r3
 800ea66:	4610      	mov	r0, r2
 800ea68:	f000 fb97 	bl	800f19a <TIM_ITRx_SetConfig>
      break;
 800ea6c:	e000      	b.n	800ea70 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800ea6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2201      	movs	r2, #1
 800ea74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea80:	2300      	movs	r3, #0
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3710      	adds	r7, #16
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	fffeff88 	.word	0xfffeff88

0800ea90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b083      	sub	sp, #12
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ea98:	bf00      	nop
 800ea9a:	370c      	adds	r7, #12
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eaac:	bf00      	nop
 800eaae:	370c      	adds	r7, #12
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr

0800eab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b083      	sub	sp, #12
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eac0:	bf00      	nop
 800eac2:	370c      	adds	r7, #12
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr

0800eacc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eacc:	b480      	push	{r7}
 800eace:	b083      	sub	sp, #12
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ead4:	bf00      	nop
 800ead6:	370c      	adds	r7, #12
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr

0800eae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b085      	sub	sp, #20
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	4a40      	ldr	r2, [pc, #256]	; (800ebf4 <TIM_Base_SetConfig+0x114>)
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	d013      	beq.n	800eb20 <TIM_Base_SetConfig+0x40>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eafe:	d00f      	beq.n	800eb20 <TIM_Base_SetConfig+0x40>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	4a3d      	ldr	r2, [pc, #244]	; (800ebf8 <TIM_Base_SetConfig+0x118>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d00b      	beq.n	800eb20 <TIM_Base_SetConfig+0x40>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	4a3c      	ldr	r2, [pc, #240]	; (800ebfc <TIM_Base_SetConfig+0x11c>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d007      	beq.n	800eb20 <TIM_Base_SetConfig+0x40>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	4a3b      	ldr	r2, [pc, #236]	; (800ec00 <TIM_Base_SetConfig+0x120>)
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d003      	beq.n	800eb20 <TIM_Base_SetConfig+0x40>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	4a3a      	ldr	r2, [pc, #232]	; (800ec04 <TIM_Base_SetConfig+0x124>)
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	d108      	bne.n	800eb32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	685b      	ldr	r3, [r3, #4]
 800eb2c:	68fa      	ldr	r2, [r7, #12]
 800eb2e:	4313      	orrs	r3, r2
 800eb30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	4a2f      	ldr	r2, [pc, #188]	; (800ebf4 <TIM_Base_SetConfig+0x114>)
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d02b      	beq.n	800eb92 <TIM_Base_SetConfig+0xb2>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb40:	d027      	beq.n	800eb92 <TIM_Base_SetConfig+0xb2>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	4a2c      	ldr	r2, [pc, #176]	; (800ebf8 <TIM_Base_SetConfig+0x118>)
 800eb46:	4293      	cmp	r3, r2
 800eb48:	d023      	beq.n	800eb92 <TIM_Base_SetConfig+0xb2>
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	4a2b      	ldr	r2, [pc, #172]	; (800ebfc <TIM_Base_SetConfig+0x11c>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d01f      	beq.n	800eb92 <TIM_Base_SetConfig+0xb2>
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	4a2a      	ldr	r2, [pc, #168]	; (800ec00 <TIM_Base_SetConfig+0x120>)
 800eb56:	4293      	cmp	r3, r2
 800eb58:	d01b      	beq.n	800eb92 <TIM_Base_SetConfig+0xb2>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	4a29      	ldr	r2, [pc, #164]	; (800ec04 <TIM_Base_SetConfig+0x124>)
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	d017      	beq.n	800eb92 <TIM_Base_SetConfig+0xb2>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	4a28      	ldr	r2, [pc, #160]	; (800ec08 <TIM_Base_SetConfig+0x128>)
 800eb66:	4293      	cmp	r3, r2
 800eb68:	d013      	beq.n	800eb92 <TIM_Base_SetConfig+0xb2>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	4a27      	ldr	r2, [pc, #156]	; (800ec0c <TIM_Base_SetConfig+0x12c>)
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d00f      	beq.n	800eb92 <TIM_Base_SetConfig+0xb2>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	4a26      	ldr	r2, [pc, #152]	; (800ec10 <TIM_Base_SetConfig+0x130>)
 800eb76:	4293      	cmp	r3, r2
 800eb78:	d00b      	beq.n	800eb92 <TIM_Base_SetConfig+0xb2>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	4a25      	ldr	r2, [pc, #148]	; (800ec14 <TIM_Base_SetConfig+0x134>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d007      	beq.n	800eb92 <TIM_Base_SetConfig+0xb2>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	4a24      	ldr	r2, [pc, #144]	; (800ec18 <TIM_Base_SetConfig+0x138>)
 800eb86:	4293      	cmp	r3, r2
 800eb88:	d003      	beq.n	800eb92 <TIM_Base_SetConfig+0xb2>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4a23      	ldr	r2, [pc, #140]	; (800ec1c <TIM_Base_SetConfig+0x13c>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d108      	bne.n	800eba4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	68db      	ldr	r3, [r3, #12]
 800eb9e:	68fa      	ldr	r2, [r7, #12]
 800eba0:	4313      	orrs	r3, r2
 800eba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	695b      	ldr	r3, [r3, #20]
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	68fa      	ldr	r2, [r7, #12]
 800ebb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	689a      	ldr	r2, [r3, #8]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	4a0a      	ldr	r2, [pc, #40]	; (800ebf4 <TIM_Base_SetConfig+0x114>)
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	d003      	beq.n	800ebd8 <TIM_Base_SetConfig+0xf8>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	4a0c      	ldr	r2, [pc, #48]	; (800ec04 <TIM_Base_SetConfig+0x124>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d103      	bne.n	800ebe0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	691a      	ldr	r2, [r3, #16]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	615a      	str	r2, [r3, #20]
}
 800ebe6:	bf00      	nop
 800ebe8:	3714      	adds	r7, #20
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr
 800ebf2:	bf00      	nop
 800ebf4:	40010000 	.word	0x40010000
 800ebf8:	40000400 	.word	0x40000400
 800ebfc:	40000800 	.word	0x40000800
 800ec00:	40000c00 	.word	0x40000c00
 800ec04:	40010400 	.word	0x40010400
 800ec08:	40014000 	.word	0x40014000
 800ec0c:	40014400 	.word	0x40014400
 800ec10:	40014800 	.word	0x40014800
 800ec14:	40001800 	.word	0x40001800
 800ec18:	40001c00 	.word	0x40001c00
 800ec1c:	40002000 	.word	0x40002000

0800ec20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b087      	sub	sp, #28
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6a1b      	ldr	r3, [r3, #32]
 800ec2e:	f023 0201 	bic.w	r2, r3, #1
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6a1b      	ldr	r3, [r3, #32]
 800ec3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	685b      	ldr	r3, [r3, #4]
 800ec40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	699b      	ldr	r3, [r3, #24]
 800ec46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ec48:	68fa      	ldr	r2, [r7, #12]
 800ec4a:	4b2b      	ldr	r3, [pc, #172]	; (800ecf8 <TIM_OC1_SetConfig+0xd8>)
 800ec4c:	4013      	ands	r3, r2
 800ec4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f023 0303 	bic.w	r3, r3, #3
 800ec56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	68fa      	ldr	r2, [r7, #12]
 800ec5e:	4313      	orrs	r3, r2
 800ec60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	f023 0302 	bic.w	r3, r3, #2
 800ec68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	689b      	ldr	r3, [r3, #8]
 800ec6e:	697a      	ldr	r2, [r7, #20]
 800ec70:	4313      	orrs	r3, r2
 800ec72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	4a21      	ldr	r2, [pc, #132]	; (800ecfc <TIM_OC1_SetConfig+0xdc>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d003      	beq.n	800ec84 <TIM_OC1_SetConfig+0x64>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	4a20      	ldr	r2, [pc, #128]	; (800ed00 <TIM_OC1_SetConfig+0xe0>)
 800ec80:	4293      	cmp	r3, r2
 800ec82:	d10c      	bne.n	800ec9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	f023 0308 	bic.w	r3, r3, #8
 800ec8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	68db      	ldr	r3, [r3, #12]
 800ec90:	697a      	ldr	r2, [r7, #20]
 800ec92:	4313      	orrs	r3, r2
 800ec94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	f023 0304 	bic.w	r3, r3, #4
 800ec9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	4a16      	ldr	r2, [pc, #88]	; (800ecfc <TIM_OC1_SetConfig+0xdc>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d003      	beq.n	800ecae <TIM_OC1_SetConfig+0x8e>
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	4a15      	ldr	r2, [pc, #84]	; (800ed00 <TIM_OC1_SetConfig+0xe0>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d111      	bne.n	800ecd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ecb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ecbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	695b      	ldr	r3, [r3, #20]
 800ecc2:	693a      	ldr	r2, [r7, #16]
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	699b      	ldr	r3, [r3, #24]
 800eccc:	693a      	ldr	r2, [r7, #16]
 800ecce:	4313      	orrs	r3, r2
 800ecd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	693a      	ldr	r2, [r7, #16]
 800ecd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	68fa      	ldr	r2, [r7, #12]
 800ecdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	685a      	ldr	r2, [r3, #4]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	697a      	ldr	r2, [r7, #20]
 800ecea:	621a      	str	r2, [r3, #32]
}
 800ecec:	bf00      	nop
 800ecee:	371c      	adds	r7, #28
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr
 800ecf8:	fffeff8f 	.word	0xfffeff8f
 800ecfc:	40010000 	.word	0x40010000
 800ed00:	40010400 	.word	0x40010400

0800ed04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b087      	sub	sp, #28
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6a1b      	ldr	r3, [r3, #32]
 800ed12:	f023 0210 	bic.w	r2, r3, #16
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6a1b      	ldr	r3, [r3, #32]
 800ed1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	699b      	ldr	r3, [r3, #24]
 800ed2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ed2c:	68fa      	ldr	r2, [r7, #12]
 800ed2e:	4b2e      	ldr	r3, [pc, #184]	; (800ede8 <TIM_OC2_SetConfig+0xe4>)
 800ed30:	4013      	ands	r3, r2
 800ed32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ed3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	021b      	lsls	r3, r3, #8
 800ed42:	68fa      	ldr	r2, [r7, #12]
 800ed44:	4313      	orrs	r3, r2
 800ed46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	f023 0320 	bic.w	r3, r3, #32
 800ed4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	689b      	ldr	r3, [r3, #8]
 800ed54:	011b      	lsls	r3, r3, #4
 800ed56:	697a      	ldr	r2, [r7, #20]
 800ed58:	4313      	orrs	r3, r2
 800ed5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	4a23      	ldr	r2, [pc, #140]	; (800edec <TIM_OC2_SetConfig+0xe8>)
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d003      	beq.n	800ed6c <TIM_OC2_SetConfig+0x68>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	4a22      	ldr	r2, [pc, #136]	; (800edf0 <TIM_OC2_SetConfig+0xec>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d10d      	bne.n	800ed88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	68db      	ldr	r3, [r3, #12]
 800ed78:	011b      	lsls	r3, r3, #4
 800ed7a:	697a      	ldr	r2, [r7, #20]
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	4a18      	ldr	r2, [pc, #96]	; (800edec <TIM_OC2_SetConfig+0xe8>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d003      	beq.n	800ed98 <TIM_OC2_SetConfig+0x94>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	4a17      	ldr	r2, [pc, #92]	; (800edf0 <TIM_OC2_SetConfig+0xec>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d113      	bne.n	800edc0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ed9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eda6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	695b      	ldr	r3, [r3, #20]
 800edac:	009b      	lsls	r3, r3, #2
 800edae:	693a      	ldr	r2, [r7, #16]
 800edb0:	4313      	orrs	r3, r2
 800edb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	699b      	ldr	r3, [r3, #24]
 800edb8:	009b      	lsls	r3, r3, #2
 800edba:	693a      	ldr	r2, [r7, #16]
 800edbc:	4313      	orrs	r3, r2
 800edbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	693a      	ldr	r2, [r7, #16]
 800edc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	68fa      	ldr	r2, [r7, #12]
 800edca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	685a      	ldr	r2, [r3, #4]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	697a      	ldr	r2, [r7, #20]
 800edd8:	621a      	str	r2, [r3, #32]
}
 800edda:	bf00      	nop
 800eddc:	371c      	adds	r7, #28
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop
 800ede8:	feff8fff 	.word	0xfeff8fff
 800edec:	40010000 	.word	0x40010000
 800edf0:	40010400 	.word	0x40010400

0800edf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b087      	sub	sp, #28
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6a1b      	ldr	r3, [r3, #32]
 800ee02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6a1b      	ldr	r3, [r3, #32]
 800ee0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	685b      	ldr	r3, [r3, #4]
 800ee14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	69db      	ldr	r3, [r3, #28]
 800ee1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ee1c:	68fa      	ldr	r2, [r7, #12]
 800ee1e:	4b2d      	ldr	r3, [pc, #180]	; (800eed4 <TIM_OC3_SetConfig+0xe0>)
 800ee20:	4013      	ands	r3, r2
 800ee22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	f023 0303 	bic.w	r3, r3, #3
 800ee2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	68fa      	ldr	r2, [r7, #12]
 800ee32:	4313      	orrs	r3, r2
 800ee34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ee3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	021b      	lsls	r3, r3, #8
 800ee44:	697a      	ldr	r2, [r7, #20]
 800ee46:	4313      	orrs	r3, r2
 800ee48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4a22      	ldr	r2, [pc, #136]	; (800eed8 <TIM_OC3_SetConfig+0xe4>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d003      	beq.n	800ee5a <TIM_OC3_SetConfig+0x66>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	4a21      	ldr	r2, [pc, #132]	; (800eedc <TIM_OC3_SetConfig+0xe8>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d10d      	bne.n	800ee76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ee60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	68db      	ldr	r3, [r3, #12]
 800ee66:	021b      	lsls	r3, r3, #8
 800ee68:	697a      	ldr	r2, [r7, #20]
 800ee6a:	4313      	orrs	r3, r2
 800ee6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ee74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	4a17      	ldr	r2, [pc, #92]	; (800eed8 <TIM_OC3_SetConfig+0xe4>)
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d003      	beq.n	800ee86 <TIM_OC3_SetConfig+0x92>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	4a16      	ldr	r2, [pc, #88]	; (800eedc <TIM_OC3_SetConfig+0xe8>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d113      	bne.n	800eeae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ee94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	695b      	ldr	r3, [r3, #20]
 800ee9a:	011b      	lsls	r3, r3, #4
 800ee9c:	693a      	ldr	r2, [r7, #16]
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	699b      	ldr	r3, [r3, #24]
 800eea6:	011b      	lsls	r3, r3, #4
 800eea8:	693a      	ldr	r2, [r7, #16]
 800eeaa:	4313      	orrs	r3, r2
 800eeac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	693a      	ldr	r2, [r7, #16]
 800eeb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	68fa      	ldr	r2, [r7, #12]
 800eeb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	685a      	ldr	r2, [r3, #4]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	697a      	ldr	r2, [r7, #20]
 800eec6:	621a      	str	r2, [r3, #32]
}
 800eec8:	bf00      	nop
 800eeca:	371c      	adds	r7, #28
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr
 800eed4:	fffeff8f 	.word	0xfffeff8f
 800eed8:	40010000 	.word	0x40010000
 800eedc:	40010400 	.word	0x40010400

0800eee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b087      	sub	sp, #28
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6a1b      	ldr	r3, [r3, #32]
 800eeee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6a1b      	ldr	r3, [r3, #32]
 800eefa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	69db      	ldr	r3, [r3, #28]
 800ef06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ef08:	68fa      	ldr	r2, [r7, #12]
 800ef0a:	4b1e      	ldr	r3, [pc, #120]	; (800ef84 <TIM_OC4_SetConfig+0xa4>)
 800ef0c:	4013      	ands	r3, r2
 800ef0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	021b      	lsls	r3, r3, #8
 800ef1e:	68fa      	ldr	r2, [r7, #12]
 800ef20:	4313      	orrs	r3, r2
 800ef22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ef2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	689b      	ldr	r3, [r3, #8]
 800ef30:	031b      	lsls	r3, r3, #12
 800ef32:	693a      	ldr	r2, [r7, #16]
 800ef34:	4313      	orrs	r3, r2
 800ef36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	4a13      	ldr	r2, [pc, #76]	; (800ef88 <TIM_OC4_SetConfig+0xa8>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d003      	beq.n	800ef48 <TIM_OC4_SetConfig+0x68>
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	4a12      	ldr	r2, [pc, #72]	; (800ef8c <TIM_OC4_SetConfig+0xac>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d109      	bne.n	800ef5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ef4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	695b      	ldr	r3, [r3, #20]
 800ef54:	019b      	lsls	r3, r3, #6
 800ef56:	697a      	ldr	r2, [r7, #20]
 800ef58:	4313      	orrs	r3, r2
 800ef5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	697a      	ldr	r2, [r7, #20]
 800ef60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	68fa      	ldr	r2, [r7, #12]
 800ef66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	685a      	ldr	r2, [r3, #4]
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	693a      	ldr	r2, [r7, #16]
 800ef74:	621a      	str	r2, [r3, #32]
}
 800ef76:	bf00      	nop
 800ef78:	371c      	adds	r7, #28
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef80:	4770      	bx	lr
 800ef82:	bf00      	nop
 800ef84:	feff8fff 	.word	0xfeff8fff
 800ef88:	40010000 	.word	0x40010000
 800ef8c:	40010400 	.word	0x40010400

0800ef90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b087      	sub	sp, #28
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6a1b      	ldr	r3, [r3, #32]
 800ef9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6a1b      	ldr	r3, [r3, #32]
 800efaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800efb8:	68fa      	ldr	r2, [r7, #12]
 800efba:	4b1b      	ldr	r3, [pc, #108]	; (800f028 <TIM_OC5_SetConfig+0x98>)
 800efbc:	4013      	ands	r3, r2
 800efbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	68fa      	ldr	r2, [r7, #12]
 800efc6:	4313      	orrs	r3, r2
 800efc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800efd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	689b      	ldr	r3, [r3, #8]
 800efd6:	041b      	lsls	r3, r3, #16
 800efd8:	693a      	ldr	r2, [r7, #16]
 800efda:	4313      	orrs	r3, r2
 800efdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	4a12      	ldr	r2, [pc, #72]	; (800f02c <TIM_OC5_SetConfig+0x9c>)
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d003      	beq.n	800efee <TIM_OC5_SetConfig+0x5e>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	4a11      	ldr	r2, [pc, #68]	; (800f030 <TIM_OC5_SetConfig+0xa0>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d109      	bne.n	800f002 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eff4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	695b      	ldr	r3, [r3, #20]
 800effa:	021b      	lsls	r3, r3, #8
 800effc:	697a      	ldr	r2, [r7, #20]
 800effe:	4313      	orrs	r3, r2
 800f000:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	697a      	ldr	r2, [r7, #20]
 800f006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	68fa      	ldr	r2, [r7, #12]
 800f00c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	685a      	ldr	r2, [r3, #4]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	693a      	ldr	r2, [r7, #16]
 800f01a:	621a      	str	r2, [r3, #32]
}
 800f01c:	bf00      	nop
 800f01e:	371c      	adds	r7, #28
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr
 800f028:	fffeff8f 	.word	0xfffeff8f
 800f02c:	40010000 	.word	0x40010000
 800f030:	40010400 	.word	0x40010400

0800f034 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f034:	b480      	push	{r7}
 800f036:	b087      	sub	sp, #28
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6a1b      	ldr	r3, [r3, #32]
 800f042:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6a1b      	ldr	r3, [r3, #32]
 800f04e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f05a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f05c:	68fa      	ldr	r2, [r7, #12]
 800f05e:	4b1c      	ldr	r3, [pc, #112]	; (800f0d0 <TIM_OC6_SetConfig+0x9c>)
 800f060:	4013      	ands	r3, r2
 800f062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	021b      	lsls	r3, r3, #8
 800f06a:	68fa      	ldr	r2, [r7, #12]
 800f06c:	4313      	orrs	r3, r2
 800f06e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	689b      	ldr	r3, [r3, #8]
 800f07c:	051b      	lsls	r3, r3, #20
 800f07e:	693a      	ldr	r2, [r7, #16]
 800f080:	4313      	orrs	r3, r2
 800f082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4a13      	ldr	r2, [pc, #76]	; (800f0d4 <TIM_OC6_SetConfig+0xa0>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d003      	beq.n	800f094 <TIM_OC6_SetConfig+0x60>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a12      	ldr	r2, [pc, #72]	; (800f0d8 <TIM_OC6_SetConfig+0xa4>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d109      	bne.n	800f0a8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f09a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	695b      	ldr	r3, [r3, #20]
 800f0a0:	029b      	lsls	r3, r3, #10
 800f0a2:	697a      	ldr	r2, [r7, #20]
 800f0a4:	4313      	orrs	r3, r2
 800f0a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	697a      	ldr	r2, [r7, #20]
 800f0ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	68fa      	ldr	r2, [r7, #12]
 800f0b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	685a      	ldr	r2, [r3, #4]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	693a      	ldr	r2, [r7, #16]
 800f0c0:	621a      	str	r2, [r3, #32]
}
 800f0c2:	bf00      	nop
 800f0c4:	371c      	adds	r7, #28
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0cc:	4770      	bx	lr
 800f0ce:	bf00      	nop
 800f0d0:	feff8fff 	.word	0xfeff8fff
 800f0d4:	40010000 	.word	0x40010000
 800f0d8:	40010400 	.word	0x40010400

0800f0dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b087      	sub	sp, #28
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	60f8      	str	r0, [r7, #12]
 800f0e4:	60b9      	str	r1, [r7, #8]
 800f0e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	6a1b      	ldr	r3, [r3, #32]
 800f0ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	6a1b      	ldr	r3, [r3, #32]
 800f0f2:	f023 0201 	bic.w	r2, r3, #1
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	699b      	ldr	r3, [r3, #24]
 800f0fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	011b      	lsls	r3, r3, #4
 800f10c:	693a      	ldr	r2, [r7, #16]
 800f10e:	4313      	orrs	r3, r2
 800f110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	f023 030a 	bic.w	r3, r3, #10
 800f118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f11a:	697a      	ldr	r2, [r7, #20]
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	4313      	orrs	r3, r2
 800f120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	693a      	ldr	r2, [r7, #16]
 800f126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	697a      	ldr	r2, [r7, #20]
 800f12c:	621a      	str	r2, [r3, #32]
}
 800f12e:	bf00      	nop
 800f130:	371c      	adds	r7, #28
 800f132:	46bd      	mov	sp, r7
 800f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f138:	4770      	bx	lr

0800f13a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f13a:	b480      	push	{r7}
 800f13c:	b087      	sub	sp, #28
 800f13e:	af00      	add	r7, sp, #0
 800f140:	60f8      	str	r0, [r7, #12]
 800f142:	60b9      	str	r1, [r7, #8]
 800f144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	6a1b      	ldr	r3, [r3, #32]
 800f14a:	f023 0210 	bic.w	r2, r3, #16
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	699b      	ldr	r3, [r3, #24]
 800f156:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	6a1b      	ldr	r3, [r3, #32]
 800f15c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f164:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	031b      	lsls	r3, r3, #12
 800f16a:	697a      	ldr	r2, [r7, #20]
 800f16c:	4313      	orrs	r3, r2
 800f16e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f170:	693b      	ldr	r3, [r7, #16]
 800f172:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f176:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	011b      	lsls	r3, r3, #4
 800f17c:	693a      	ldr	r2, [r7, #16]
 800f17e:	4313      	orrs	r3, r2
 800f180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	697a      	ldr	r2, [r7, #20]
 800f186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	693a      	ldr	r2, [r7, #16]
 800f18c:	621a      	str	r2, [r3, #32]
}
 800f18e:	bf00      	nop
 800f190:	371c      	adds	r7, #28
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr

0800f19a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f19a:	b480      	push	{r7}
 800f19c:	b085      	sub	sp, #20
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
 800f1a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f1b2:	683a      	ldr	r2, [r7, #0]
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	f043 0307 	orr.w	r3, r3, #7
 800f1bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	68fa      	ldr	r2, [r7, #12]
 800f1c2:	609a      	str	r2, [r3, #8]
}
 800f1c4:	bf00      	nop
 800f1c6:	3714      	adds	r7, #20
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr

0800f1d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b087      	sub	sp, #28
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	60f8      	str	r0, [r7, #12]
 800f1d8:	60b9      	str	r1, [r7, #8]
 800f1da:	607a      	str	r2, [r7, #4]
 800f1dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	689b      	ldr	r3, [r3, #8]
 800f1e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f1ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	021a      	lsls	r2, r3, #8
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	431a      	orrs	r2, r3
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	4313      	orrs	r3, r2
 800f1f8:	697a      	ldr	r2, [r7, #20]
 800f1fa:	4313      	orrs	r3, r2
 800f1fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	697a      	ldr	r2, [r7, #20]
 800f202:	609a      	str	r2, [r3, #8]
}
 800f204:	bf00      	nop
 800f206:	371c      	adds	r7, #28
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr

0800f210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f210:	b480      	push	{r7}
 800f212:	b085      	sub	sp, #20
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f220:	2b01      	cmp	r3, #1
 800f222:	d101      	bne.n	800f228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f224:	2302      	movs	r3, #2
 800f226:	e06d      	b.n	800f304 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2201      	movs	r2, #1
 800f22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2202      	movs	r2, #2
 800f234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	689b      	ldr	r3, [r3, #8]
 800f246:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	4a30      	ldr	r2, [pc, #192]	; (800f310 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f24e:	4293      	cmp	r3, r2
 800f250:	d004      	beq.n	800f25c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	4a2f      	ldr	r2, [pc, #188]	; (800f314 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f258:	4293      	cmp	r3, r2
 800f25a:	d108      	bne.n	800f26e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f262:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	68fa      	ldr	r2, [r7, #12]
 800f26a:	4313      	orrs	r3, r2
 800f26c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f274:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	4313      	orrs	r3, r2
 800f27e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	68fa      	ldr	r2, [r7, #12]
 800f286:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	4a20      	ldr	r2, [pc, #128]	; (800f310 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f28e:	4293      	cmp	r3, r2
 800f290:	d022      	beq.n	800f2d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f29a:	d01d      	beq.n	800f2d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4a1d      	ldr	r2, [pc, #116]	; (800f318 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d018      	beq.n	800f2d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	4a1c      	ldr	r2, [pc, #112]	; (800f31c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f2ac:	4293      	cmp	r3, r2
 800f2ae:	d013      	beq.n	800f2d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	4a1a      	ldr	r2, [pc, #104]	; (800f320 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d00e      	beq.n	800f2d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	4a15      	ldr	r2, [pc, #84]	; (800f314 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f2c0:	4293      	cmp	r3, r2
 800f2c2:	d009      	beq.n	800f2d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	4a16      	ldr	r2, [pc, #88]	; (800f324 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f2ca:	4293      	cmp	r3, r2
 800f2cc:	d004      	beq.n	800f2d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	4a15      	ldr	r2, [pc, #84]	; (800f328 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d10c      	bne.n	800f2f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	689b      	ldr	r3, [r3, #8]
 800f2e4:	68ba      	ldr	r2, [r7, #8]
 800f2e6:	4313      	orrs	r3, r2
 800f2e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	68ba      	ldr	r2, [r7, #8]
 800f2f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2201      	movs	r2, #1
 800f2f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f302:	2300      	movs	r3, #0
}
 800f304:	4618      	mov	r0, r3
 800f306:	3714      	adds	r7, #20
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr
 800f310:	40010000 	.word	0x40010000
 800f314:	40010400 	.word	0x40010400
 800f318:	40000400 	.word	0x40000400
 800f31c:	40000800 	.word	0x40000800
 800f320:	40000c00 	.word	0x40000c00
 800f324:	40014000 	.word	0x40014000
 800f328:	40001800 	.word	0x40001800

0800f32c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b083      	sub	sp, #12
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f334:	bf00      	nop
 800f336:	370c      	adds	r7, #12
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr

0800f340 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f340:	b480      	push	{r7}
 800f342:	b083      	sub	sp, #12
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f348:	bf00      	nop
 800f34a:	370c      	adds	r7, #12
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr

0800f354 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f354:	b480      	push	{r7}
 800f356:	b083      	sub	sp, #12
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f35c:	bf00      	nop
 800f35e:	370c      	adds	r7, #12
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr

0800f368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d101      	bne.n	800f37a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f376:	2301      	movs	r3, #1
 800f378:	e040      	b.n	800f3fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d106      	bne.n	800f390 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2200      	movs	r2, #0
 800f386:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f7f9 f9b0 	bl	80086f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2224      	movs	r2, #36	; 0x24
 800f394:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f022 0201 	bic.w	r2, r2, #1
 800f3a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f000 fa2c 	bl	800f804 <UART_SetConfig>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	2b01      	cmp	r3, #1
 800f3b0:	d101      	bne.n	800f3b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	e022      	b.n	800f3fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d002      	beq.n	800f3c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f000 fcca 	bl	800fd58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	685a      	ldr	r2, [r3, #4]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f3d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	689a      	ldr	r2, [r3, #8]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f3e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f042 0201 	orr.w	r2, r2, #1
 800f3f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f000 fd51 	bl	800fe9c <UART_CheckIdleState>
 800f3fa:	4603      	mov	r3, r0
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3708      	adds	r7, #8
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}

0800f404 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b08a      	sub	sp, #40	; 0x28
 800f408:	af02      	add	r7, sp, #8
 800f40a:	60f8      	str	r0, [r7, #12]
 800f40c:	60b9      	str	r1, [r7, #8]
 800f40e:	603b      	str	r3, [r7, #0]
 800f410:	4613      	mov	r3, r2
 800f412:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f418:	2b20      	cmp	r3, #32
 800f41a:	d17f      	bne.n	800f51c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d002      	beq.n	800f428 <HAL_UART_Transmit+0x24>
 800f422:	88fb      	ldrh	r3, [r7, #6]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d101      	bne.n	800f42c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f428:	2301      	movs	r3, #1
 800f42a:	e078      	b.n	800f51e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f432:	2b01      	cmp	r3, #1
 800f434:	d101      	bne.n	800f43a <HAL_UART_Transmit+0x36>
 800f436:	2302      	movs	r3, #2
 800f438:	e071      	b.n	800f51e <HAL_UART_Transmit+0x11a>
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	2201      	movs	r2, #1
 800f43e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	2200      	movs	r2, #0
 800f446:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	2221      	movs	r2, #33	; 0x21
 800f44c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800f44e:	f7fa f8b5 	bl	80095bc <HAL_GetTick>
 800f452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	88fa      	ldrh	r2, [r7, #6]
 800f458:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	88fa      	ldrh	r2, [r7, #6]
 800f460:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	689b      	ldr	r3, [r3, #8]
 800f468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f46c:	d108      	bne.n	800f480 <HAL_UART_Transmit+0x7c>
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	691b      	ldr	r3, [r3, #16]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d104      	bne.n	800f480 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800f476:	2300      	movs	r3, #0
 800f478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	61bb      	str	r3, [r7, #24]
 800f47e:	e003      	b.n	800f488 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f484:	2300      	movs	r3, #0
 800f486:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	2200      	movs	r2, #0
 800f48c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800f490:	e02c      	b.n	800f4ec <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	9300      	str	r3, [sp, #0]
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	2200      	movs	r2, #0
 800f49a:	2180      	movs	r1, #128	; 0x80
 800f49c:	68f8      	ldr	r0, [r7, #12]
 800f49e:	f000 fd42 	bl	800ff26 <UART_WaitOnFlagUntilTimeout>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d001      	beq.n	800f4ac <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800f4a8:	2303      	movs	r3, #3
 800f4aa:	e038      	b.n	800f51e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d10b      	bne.n	800f4ca <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	881b      	ldrh	r3, [r3, #0]
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f4c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f4c2:	69bb      	ldr	r3, [r7, #24]
 800f4c4:	3302      	adds	r3, #2
 800f4c6:	61bb      	str	r3, [r7, #24]
 800f4c8:	e007      	b.n	800f4da <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f4ca:	69fb      	ldr	r3, [r7, #28]
 800f4cc:	781a      	ldrb	r2, [r3, #0]
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	3b01      	subs	r3, #1
 800f4e4:	b29a      	uxth	r2, r3
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d1cc      	bne.n	800f492 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	9300      	str	r3, [sp, #0]
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	2200      	movs	r2, #0
 800f500:	2140      	movs	r1, #64	; 0x40
 800f502:	68f8      	ldr	r0, [r7, #12]
 800f504:	f000 fd0f 	bl	800ff26 <UART_WaitOnFlagUntilTimeout>
 800f508:	4603      	mov	r3, r0
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d001      	beq.n	800f512 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800f50e:	2303      	movs	r3, #3
 800f510:	e005      	b.n	800f51e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	2220      	movs	r2, #32
 800f516:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800f518:	2300      	movs	r3, #0
 800f51a:	e000      	b.n	800f51e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800f51c:	2302      	movs	r3, #2
  }
}
 800f51e:	4618      	mov	r0, r3
 800f520:	3720      	adds	r7, #32
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}

0800f526 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f526:	b580      	push	{r7, lr}
 800f528:	b08a      	sub	sp, #40	; 0x28
 800f52a:	af02      	add	r7, sp, #8
 800f52c:	60f8      	str	r0, [r7, #12]
 800f52e:	60b9      	str	r1, [r7, #8]
 800f530:	603b      	str	r3, [r7, #0]
 800f532:	4613      	mov	r3, r2
 800f534:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f53a:	2b20      	cmp	r3, #32
 800f53c:	f040 80ba 	bne.w	800f6b4 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d002      	beq.n	800f54c <HAL_UART_Receive+0x26>
 800f546:	88fb      	ldrh	r3, [r7, #6]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d101      	bne.n	800f550 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800f54c:	2301      	movs	r3, #1
 800f54e:	e0b2      	b.n	800f6b6 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f556:	2b01      	cmp	r3, #1
 800f558:	d101      	bne.n	800f55e <HAL_UART_Receive+0x38>
 800f55a:	2302      	movs	r3, #2
 800f55c:	e0ab      	b.n	800f6b6 <HAL_UART_Receive+0x190>
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	2201      	movs	r2, #1
 800f562:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2200      	movs	r2, #0
 800f56a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2222      	movs	r2, #34	; 0x22
 800f570:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800f572:	f7fa f823 	bl	80095bc <HAL_GetTick>
 800f576:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	88fa      	ldrh	r2, [r7, #6]
 800f57c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	88fa      	ldrh	r2, [r7, #6]
 800f584:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	689b      	ldr	r3, [r3, #8]
 800f58c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f590:	d10e      	bne.n	800f5b0 <HAL_UART_Receive+0x8a>
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	691b      	ldr	r3, [r3, #16]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d105      	bne.n	800f5a6 <HAL_UART_Receive+0x80>
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f5a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f5a4:	e02d      	b.n	800f602 <HAL_UART_Receive+0xdc>
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	22ff      	movs	r2, #255	; 0xff
 800f5aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f5ae:	e028      	b.n	800f602 <HAL_UART_Receive+0xdc>
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	689b      	ldr	r3, [r3, #8]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d10d      	bne.n	800f5d4 <HAL_UART_Receive+0xae>
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	691b      	ldr	r3, [r3, #16]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d104      	bne.n	800f5ca <HAL_UART_Receive+0xa4>
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	22ff      	movs	r2, #255	; 0xff
 800f5c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f5c8:	e01b      	b.n	800f602 <HAL_UART_Receive+0xdc>
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	227f      	movs	r2, #127	; 0x7f
 800f5ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f5d2:	e016      	b.n	800f602 <HAL_UART_Receive+0xdc>
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	689b      	ldr	r3, [r3, #8]
 800f5d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f5dc:	d10d      	bne.n	800f5fa <HAL_UART_Receive+0xd4>
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	691b      	ldr	r3, [r3, #16]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d104      	bne.n	800f5f0 <HAL_UART_Receive+0xca>
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	227f      	movs	r2, #127	; 0x7f
 800f5ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f5ee:	e008      	b.n	800f602 <HAL_UART_Receive+0xdc>
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	223f      	movs	r2, #63	; 0x3f
 800f5f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f5f8:	e003      	b.n	800f602 <HAL_UART_Receive+0xdc>
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f608:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f612:	d108      	bne.n	800f626 <HAL_UART_Receive+0x100>
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	691b      	ldr	r3, [r3, #16]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d104      	bne.n	800f626 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800f61c:	2300      	movs	r3, #0
 800f61e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	61bb      	str	r3, [r7, #24]
 800f624:	e003      	b.n	800f62e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f62a:	2300      	movs	r3, #0
 800f62c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2200      	movs	r2, #0
 800f632:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f636:	e032      	b.n	800f69e <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	9300      	str	r3, [sp, #0]
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	2200      	movs	r2, #0
 800f640:	2120      	movs	r1, #32
 800f642:	68f8      	ldr	r0, [r7, #12]
 800f644:	f000 fc6f 	bl	800ff26 <UART_WaitOnFlagUntilTimeout>
 800f648:	4603      	mov	r3, r0
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d001      	beq.n	800f652 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800f64e:	2303      	movs	r3, #3
 800f650:	e031      	b.n	800f6b6 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800f652:	69fb      	ldr	r3, [r7, #28]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d10c      	bne.n	800f672 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f65e:	b29a      	uxth	r2, r3
 800f660:	8a7b      	ldrh	r3, [r7, #18]
 800f662:	4013      	ands	r3, r2
 800f664:	b29a      	uxth	r2, r3
 800f666:	69bb      	ldr	r3, [r7, #24]
 800f668:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f66a:	69bb      	ldr	r3, [r7, #24]
 800f66c:	3302      	adds	r3, #2
 800f66e:	61bb      	str	r3, [r7, #24]
 800f670:	e00c      	b.n	800f68c <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f678:	b2da      	uxtb	r2, r3
 800f67a:	8a7b      	ldrh	r3, [r7, #18]
 800f67c:	b2db      	uxtb	r3, r3
 800f67e:	4013      	ands	r3, r2
 800f680:	b2da      	uxtb	r2, r3
 800f682:	69fb      	ldr	r3, [r7, #28]
 800f684:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f686:	69fb      	ldr	r3, [r7, #28]
 800f688:	3301      	adds	r3, #1
 800f68a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f692:	b29b      	uxth	r3, r3
 800f694:	3b01      	subs	r3, #1
 800f696:	b29a      	uxth	r2, r3
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f6a4:	b29b      	uxth	r3, r3
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d1c6      	bne.n	800f638 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	2220      	movs	r2, #32
 800f6ae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	e000      	b.n	800f6b6 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 800f6b4:	2302      	movs	r3, #2
  }
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3720      	adds	r7, #32
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
	...

0800f6c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b084      	sub	sp, #16
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	60f8      	str	r0, [r7, #12]
 800f6c8:	60b9      	str	r1, [r7, #8]
 800f6ca:	4613      	mov	r3, r2
 800f6cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6d2:	2b20      	cmp	r3, #32
 800f6d4:	d16c      	bne.n	800f7b0 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800f6d6:	68bb      	ldr	r3, [r7, #8]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d002      	beq.n	800f6e2 <HAL_UART_Receive_DMA+0x22>
 800f6dc:	88fb      	ldrh	r3, [r7, #6]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d101      	bne.n	800f6e6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	e065      	b.n	800f7b2 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f6ec:	2b01      	cmp	r3, #1
 800f6ee:	d101      	bne.n	800f6f4 <HAL_UART_Receive_DMA+0x34>
 800f6f0:	2302      	movs	r3, #2
 800f6f2:	e05e      	b.n	800f7b2 <HAL_UART_Receive_DMA+0xf2>
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	68ba      	ldr	r2, [r7, #8]
 800f700:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	88fa      	ldrh	r2, [r7, #6]
 800f706:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	2200      	movs	r2, #0
 800f70e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	2222      	movs	r2, #34	; 0x22
 800f714:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d02a      	beq.n	800f774 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f722:	4a26      	ldr	r2, [pc, #152]	; (800f7bc <HAL_UART_Receive_DMA+0xfc>)
 800f724:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f72a:	4a25      	ldr	r2, [pc, #148]	; (800f7c0 <HAL_UART_Receive_DMA+0x100>)
 800f72c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f732:	4a24      	ldr	r2, [pc, #144]	; (800f7c4 <HAL_UART_Receive_DMA+0x104>)
 800f734:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f73a:	2200      	movs	r2, #0
 800f73c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	3324      	adds	r3, #36	; 0x24
 800f748:	4619      	mov	r1, r3
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f74e:	461a      	mov	r2, r3
 800f750:	88fb      	ldrh	r3, [r7, #6]
 800f752:	f7fa fe9d 	bl	800a490 <HAL_DMA_Start_IT>
 800f756:	4603      	mov	r3, r0
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d00b      	beq.n	800f774 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	2210      	movs	r2, #16
 800f760:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2200      	movs	r2, #0
 800f766:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	2220      	movs	r2, #32
 800f76e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800f770:	2301      	movs	r3, #1
 800f772:	e01e      	b.n	800f7b2 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2200      	movs	r2, #0
 800f778:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	681a      	ldr	r2, [r3, #0]
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f78a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	689a      	ldr	r2, [r3, #8]
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f042 0201 	orr.w	r2, r2, #1
 800f79a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	689a      	ldr	r2, [r3, #8]
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f7aa:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	e000      	b.n	800f7b2 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800f7b0:	2302      	movs	r3, #2
  }
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3710      	adds	r7, #16
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}
 800f7ba:	bf00      	nop
 800f7bc:	08010087 	.word	0x08010087
 800f7c0:	080100eb 	.word	0x080100eb
 800f7c4:	08010107 	.word	0x08010107

0800f7c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b083      	sub	sp, #12
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f7d0:	bf00      	nop
 800f7d2:	370c      	adds	r7, #12
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr

0800f7dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b083      	sub	sp, #12
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f7e4:	bf00      	nop
 800f7e6:	370c      	adds	r7, #12
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr

0800f7f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b083      	sub	sp, #12
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f7f8:	bf00      	nop
 800f7fa:	370c      	adds	r7, #12
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr

0800f804 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b088      	sub	sp, #32
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800f80c:	2300      	movs	r3, #0
 800f80e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800f810:	2300      	movs	r3, #0
 800f812:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	689a      	ldr	r2, [r3, #8]
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	691b      	ldr	r3, [r3, #16]
 800f81c:	431a      	orrs	r2, r3
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	695b      	ldr	r3, [r3, #20]
 800f822:	431a      	orrs	r2, r3
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	69db      	ldr	r3, [r3, #28]
 800f828:	4313      	orrs	r3, r2
 800f82a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	681a      	ldr	r2, [r3, #0]
 800f832:	4bb1      	ldr	r3, [pc, #708]	; (800faf8 <UART_SetConfig+0x2f4>)
 800f834:	4013      	ands	r3, r2
 800f836:	687a      	ldr	r2, [r7, #4]
 800f838:	6812      	ldr	r2, [r2, #0]
 800f83a:	6939      	ldr	r1, [r7, #16]
 800f83c:	430b      	orrs	r3, r1
 800f83e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	685b      	ldr	r3, [r3, #4]
 800f846:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	68da      	ldr	r2, [r3, #12]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	430a      	orrs	r2, r1
 800f854:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	699b      	ldr	r3, [r3, #24]
 800f85a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	6a1b      	ldr	r3, [r3, #32]
 800f860:	693a      	ldr	r2, [r7, #16]
 800f862:	4313      	orrs	r3, r2
 800f864:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	689b      	ldr	r3, [r3, #8]
 800f86c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	693a      	ldr	r2, [r7, #16]
 800f876:	430a      	orrs	r2, r1
 800f878:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	4a9f      	ldr	r2, [pc, #636]	; (800fafc <UART_SetConfig+0x2f8>)
 800f880:	4293      	cmp	r3, r2
 800f882:	d121      	bne.n	800f8c8 <UART_SetConfig+0xc4>
 800f884:	4b9e      	ldr	r3, [pc, #632]	; (800fb00 <UART_SetConfig+0x2fc>)
 800f886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f88a:	f003 0303 	and.w	r3, r3, #3
 800f88e:	2b03      	cmp	r3, #3
 800f890:	d816      	bhi.n	800f8c0 <UART_SetConfig+0xbc>
 800f892:	a201      	add	r2, pc, #4	; (adr r2, 800f898 <UART_SetConfig+0x94>)
 800f894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f898:	0800f8a9 	.word	0x0800f8a9
 800f89c:	0800f8b5 	.word	0x0800f8b5
 800f8a0:	0800f8af 	.word	0x0800f8af
 800f8a4:	0800f8bb 	.word	0x0800f8bb
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	77fb      	strb	r3, [r7, #31]
 800f8ac:	e151      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f8ae:	2302      	movs	r3, #2
 800f8b0:	77fb      	strb	r3, [r7, #31]
 800f8b2:	e14e      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f8b4:	2304      	movs	r3, #4
 800f8b6:	77fb      	strb	r3, [r7, #31]
 800f8b8:	e14b      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f8ba:	2308      	movs	r3, #8
 800f8bc:	77fb      	strb	r3, [r7, #31]
 800f8be:	e148      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f8c0:	2310      	movs	r3, #16
 800f8c2:	77fb      	strb	r3, [r7, #31]
 800f8c4:	bf00      	nop
 800f8c6:	e144      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	4a8d      	ldr	r2, [pc, #564]	; (800fb04 <UART_SetConfig+0x300>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d134      	bne.n	800f93c <UART_SetConfig+0x138>
 800f8d2:	4b8b      	ldr	r3, [pc, #556]	; (800fb00 <UART_SetConfig+0x2fc>)
 800f8d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8d8:	f003 030c 	and.w	r3, r3, #12
 800f8dc:	2b0c      	cmp	r3, #12
 800f8de:	d829      	bhi.n	800f934 <UART_SetConfig+0x130>
 800f8e0:	a201      	add	r2, pc, #4	; (adr r2, 800f8e8 <UART_SetConfig+0xe4>)
 800f8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8e6:	bf00      	nop
 800f8e8:	0800f91d 	.word	0x0800f91d
 800f8ec:	0800f935 	.word	0x0800f935
 800f8f0:	0800f935 	.word	0x0800f935
 800f8f4:	0800f935 	.word	0x0800f935
 800f8f8:	0800f929 	.word	0x0800f929
 800f8fc:	0800f935 	.word	0x0800f935
 800f900:	0800f935 	.word	0x0800f935
 800f904:	0800f935 	.word	0x0800f935
 800f908:	0800f923 	.word	0x0800f923
 800f90c:	0800f935 	.word	0x0800f935
 800f910:	0800f935 	.word	0x0800f935
 800f914:	0800f935 	.word	0x0800f935
 800f918:	0800f92f 	.word	0x0800f92f
 800f91c:	2300      	movs	r3, #0
 800f91e:	77fb      	strb	r3, [r7, #31]
 800f920:	e117      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f922:	2302      	movs	r3, #2
 800f924:	77fb      	strb	r3, [r7, #31]
 800f926:	e114      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f928:	2304      	movs	r3, #4
 800f92a:	77fb      	strb	r3, [r7, #31]
 800f92c:	e111      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f92e:	2308      	movs	r3, #8
 800f930:	77fb      	strb	r3, [r7, #31]
 800f932:	e10e      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f934:	2310      	movs	r3, #16
 800f936:	77fb      	strb	r3, [r7, #31]
 800f938:	bf00      	nop
 800f93a:	e10a      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4a71      	ldr	r2, [pc, #452]	; (800fb08 <UART_SetConfig+0x304>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d120      	bne.n	800f988 <UART_SetConfig+0x184>
 800f946:	4b6e      	ldr	r3, [pc, #440]	; (800fb00 <UART_SetConfig+0x2fc>)
 800f948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f94c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f950:	2b10      	cmp	r3, #16
 800f952:	d00f      	beq.n	800f974 <UART_SetConfig+0x170>
 800f954:	2b10      	cmp	r3, #16
 800f956:	d802      	bhi.n	800f95e <UART_SetConfig+0x15a>
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d005      	beq.n	800f968 <UART_SetConfig+0x164>
 800f95c:	e010      	b.n	800f980 <UART_SetConfig+0x17c>
 800f95e:	2b20      	cmp	r3, #32
 800f960:	d005      	beq.n	800f96e <UART_SetConfig+0x16a>
 800f962:	2b30      	cmp	r3, #48	; 0x30
 800f964:	d009      	beq.n	800f97a <UART_SetConfig+0x176>
 800f966:	e00b      	b.n	800f980 <UART_SetConfig+0x17c>
 800f968:	2300      	movs	r3, #0
 800f96a:	77fb      	strb	r3, [r7, #31]
 800f96c:	e0f1      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f96e:	2302      	movs	r3, #2
 800f970:	77fb      	strb	r3, [r7, #31]
 800f972:	e0ee      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f974:	2304      	movs	r3, #4
 800f976:	77fb      	strb	r3, [r7, #31]
 800f978:	e0eb      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f97a:	2308      	movs	r3, #8
 800f97c:	77fb      	strb	r3, [r7, #31]
 800f97e:	e0e8      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f980:	2310      	movs	r3, #16
 800f982:	77fb      	strb	r3, [r7, #31]
 800f984:	bf00      	nop
 800f986:	e0e4      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	4a5f      	ldr	r2, [pc, #380]	; (800fb0c <UART_SetConfig+0x308>)
 800f98e:	4293      	cmp	r3, r2
 800f990:	d120      	bne.n	800f9d4 <UART_SetConfig+0x1d0>
 800f992:	4b5b      	ldr	r3, [pc, #364]	; (800fb00 <UART_SetConfig+0x2fc>)
 800f994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f998:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f99c:	2b40      	cmp	r3, #64	; 0x40
 800f99e:	d00f      	beq.n	800f9c0 <UART_SetConfig+0x1bc>
 800f9a0:	2b40      	cmp	r3, #64	; 0x40
 800f9a2:	d802      	bhi.n	800f9aa <UART_SetConfig+0x1a6>
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d005      	beq.n	800f9b4 <UART_SetConfig+0x1b0>
 800f9a8:	e010      	b.n	800f9cc <UART_SetConfig+0x1c8>
 800f9aa:	2b80      	cmp	r3, #128	; 0x80
 800f9ac:	d005      	beq.n	800f9ba <UART_SetConfig+0x1b6>
 800f9ae:	2bc0      	cmp	r3, #192	; 0xc0
 800f9b0:	d009      	beq.n	800f9c6 <UART_SetConfig+0x1c2>
 800f9b2:	e00b      	b.n	800f9cc <UART_SetConfig+0x1c8>
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	77fb      	strb	r3, [r7, #31]
 800f9b8:	e0cb      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f9ba:	2302      	movs	r3, #2
 800f9bc:	77fb      	strb	r3, [r7, #31]
 800f9be:	e0c8      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f9c0:	2304      	movs	r3, #4
 800f9c2:	77fb      	strb	r3, [r7, #31]
 800f9c4:	e0c5      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f9c6:	2308      	movs	r3, #8
 800f9c8:	77fb      	strb	r3, [r7, #31]
 800f9ca:	e0c2      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f9cc:	2310      	movs	r3, #16
 800f9ce:	77fb      	strb	r3, [r7, #31]
 800f9d0:	bf00      	nop
 800f9d2:	e0be      	b.n	800fb52 <UART_SetConfig+0x34e>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	4a4d      	ldr	r2, [pc, #308]	; (800fb10 <UART_SetConfig+0x30c>)
 800f9da:	4293      	cmp	r3, r2
 800f9dc:	d124      	bne.n	800fa28 <UART_SetConfig+0x224>
 800f9de:	4b48      	ldr	r3, [pc, #288]	; (800fb00 <UART_SetConfig+0x2fc>)
 800f9e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f9e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9ec:	d012      	beq.n	800fa14 <UART_SetConfig+0x210>
 800f9ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9f2:	d802      	bhi.n	800f9fa <UART_SetConfig+0x1f6>
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d007      	beq.n	800fa08 <UART_SetConfig+0x204>
 800f9f8:	e012      	b.n	800fa20 <UART_SetConfig+0x21c>
 800f9fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9fe:	d006      	beq.n	800fa0e <UART_SetConfig+0x20a>
 800fa00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa04:	d009      	beq.n	800fa1a <UART_SetConfig+0x216>
 800fa06:	e00b      	b.n	800fa20 <UART_SetConfig+0x21c>
 800fa08:	2300      	movs	r3, #0
 800fa0a:	77fb      	strb	r3, [r7, #31]
 800fa0c:	e0a1      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fa0e:	2302      	movs	r3, #2
 800fa10:	77fb      	strb	r3, [r7, #31]
 800fa12:	e09e      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fa14:	2304      	movs	r3, #4
 800fa16:	77fb      	strb	r3, [r7, #31]
 800fa18:	e09b      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fa1a:	2308      	movs	r3, #8
 800fa1c:	77fb      	strb	r3, [r7, #31]
 800fa1e:	e098      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fa20:	2310      	movs	r3, #16
 800fa22:	77fb      	strb	r3, [r7, #31]
 800fa24:	bf00      	nop
 800fa26:	e094      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	4a39      	ldr	r2, [pc, #228]	; (800fb14 <UART_SetConfig+0x310>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d124      	bne.n	800fa7c <UART_SetConfig+0x278>
 800fa32:	4b33      	ldr	r3, [pc, #204]	; (800fb00 <UART_SetConfig+0x2fc>)
 800fa34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fa3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa40:	d012      	beq.n	800fa68 <UART_SetConfig+0x264>
 800fa42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa46:	d802      	bhi.n	800fa4e <UART_SetConfig+0x24a>
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d007      	beq.n	800fa5c <UART_SetConfig+0x258>
 800fa4c:	e012      	b.n	800fa74 <UART_SetConfig+0x270>
 800fa4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fa52:	d006      	beq.n	800fa62 <UART_SetConfig+0x25e>
 800fa54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fa58:	d009      	beq.n	800fa6e <UART_SetConfig+0x26a>
 800fa5a:	e00b      	b.n	800fa74 <UART_SetConfig+0x270>
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	77fb      	strb	r3, [r7, #31]
 800fa60:	e077      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fa62:	2302      	movs	r3, #2
 800fa64:	77fb      	strb	r3, [r7, #31]
 800fa66:	e074      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fa68:	2304      	movs	r3, #4
 800fa6a:	77fb      	strb	r3, [r7, #31]
 800fa6c:	e071      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fa6e:	2308      	movs	r3, #8
 800fa70:	77fb      	strb	r3, [r7, #31]
 800fa72:	e06e      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fa74:	2310      	movs	r3, #16
 800fa76:	77fb      	strb	r3, [r7, #31]
 800fa78:	bf00      	nop
 800fa7a:	e06a      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a25      	ldr	r2, [pc, #148]	; (800fb18 <UART_SetConfig+0x314>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d124      	bne.n	800fad0 <UART_SetConfig+0x2cc>
 800fa86:	4b1e      	ldr	r3, [pc, #120]	; (800fb00 <UART_SetConfig+0x2fc>)
 800fa88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa8c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800fa90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa94:	d012      	beq.n	800fabc <UART_SetConfig+0x2b8>
 800fa96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa9a:	d802      	bhi.n	800faa2 <UART_SetConfig+0x29e>
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d007      	beq.n	800fab0 <UART_SetConfig+0x2ac>
 800faa0:	e012      	b.n	800fac8 <UART_SetConfig+0x2c4>
 800faa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800faa6:	d006      	beq.n	800fab6 <UART_SetConfig+0x2b2>
 800faa8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800faac:	d009      	beq.n	800fac2 <UART_SetConfig+0x2be>
 800faae:	e00b      	b.n	800fac8 <UART_SetConfig+0x2c4>
 800fab0:	2300      	movs	r3, #0
 800fab2:	77fb      	strb	r3, [r7, #31]
 800fab4:	e04d      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fab6:	2302      	movs	r3, #2
 800fab8:	77fb      	strb	r3, [r7, #31]
 800faba:	e04a      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fabc:	2304      	movs	r3, #4
 800fabe:	77fb      	strb	r3, [r7, #31]
 800fac0:	e047      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fac2:	2308      	movs	r3, #8
 800fac4:	77fb      	strb	r3, [r7, #31]
 800fac6:	e044      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fac8:	2310      	movs	r3, #16
 800faca:	77fb      	strb	r3, [r7, #31]
 800facc:	bf00      	nop
 800face:	e040      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	4a11      	ldr	r2, [pc, #68]	; (800fb1c <UART_SetConfig+0x318>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d139      	bne.n	800fb4e <UART_SetConfig+0x34a>
 800fada:	4b09      	ldr	r3, [pc, #36]	; (800fb00 <UART_SetConfig+0x2fc>)
 800fadc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fae8:	d027      	beq.n	800fb3a <UART_SetConfig+0x336>
 800faea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800faee:	d817      	bhi.n	800fb20 <UART_SetConfig+0x31c>
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d01c      	beq.n	800fb2e <UART_SetConfig+0x32a>
 800faf4:	e027      	b.n	800fb46 <UART_SetConfig+0x342>
 800faf6:	bf00      	nop
 800faf8:	efff69f3 	.word	0xefff69f3
 800fafc:	40011000 	.word	0x40011000
 800fb00:	40023800 	.word	0x40023800
 800fb04:	40004400 	.word	0x40004400
 800fb08:	40004800 	.word	0x40004800
 800fb0c:	40004c00 	.word	0x40004c00
 800fb10:	40005000 	.word	0x40005000
 800fb14:	40011400 	.word	0x40011400
 800fb18:	40007800 	.word	0x40007800
 800fb1c:	40007c00 	.word	0x40007c00
 800fb20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb24:	d006      	beq.n	800fb34 <UART_SetConfig+0x330>
 800fb26:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fb2a:	d009      	beq.n	800fb40 <UART_SetConfig+0x33c>
 800fb2c:	e00b      	b.n	800fb46 <UART_SetConfig+0x342>
 800fb2e:	2300      	movs	r3, #0
 800fb30:	77fb      	strb	r3, [r7, #31]
 800fb32:	e00e      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fb34:	2302      	movs	r3, #2
 800fb36:	77fb      	strb	r3, [r7, #31]
 800fb38:	e00b      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fb3a:	2304      	movs	r3, #4
 800fb3c:	77fb      	strb	r3, [r7, #31]
 800fb3e:	e008      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fb40:	2308      	movs	r3, #8
 800fb42:	77fb      	strb	r3, [r7, #31]
 800fb44:	e005      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fb46:	2310      	movs	r3, #16
 800fb48:	77fb      	strb	r3, [r7, #31]
 800fb4a:	bf00      	nop
 800fb4c:	e001      	b.n	800fb52 <UART_SetConfig+0x34e>
 800fb4e:	2310      	movs	r3, #16
 800fb50:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	69db      	ldr	r3, [r3, #28]
 800fb56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb5a:	d17f      	bne.n	800fc5c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800fb5c:	7ffb      	ldrb	r3, [r7, #31]
 800fb5e:	2b08      	cmp	r3, #8
 800fb60:	d85c      	bhi.n	800fc1c <UART_SetConfig+0x418>
 800fb62:	a201      	add	r2, pc, #4	; (adr r2, 800fb68 <UART_SetConfig+0x364>)
 800fb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb68:	0800fb8d 	.word	0x0800fb8d
 800fb6c:	0800fbad 	.word	0x0800fbad
 800fb70:	0800fbcd 	.word	0x0800fbcd
 800fb74:	0800fc1d 	.word	0x0800fc1d
 800fb78:	0800fbe5 	.word	0x0800fbe5
 800fb7c:	0800fc1d 	.word	0x0800fc1d
 800fb80:	0800fc1d 	.word	0x0800fc1d
 800fb84:	0800fc1d 	.word	0x0800fc1d
 800fb88:	0800fc05 	.word	0x0800fc05
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fb8c:	f7fd f894 	bl	800ccb8 <HAL_RCC_GetPCLK1Freq>
 800fb90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	005a      	lsls	r2, r3, #1
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	685b      	ldr	r3, [r3, #4]
 800fb9a:	085b      	lsrs	r3, r3, #1
 800fb9c:	441a      	add	r2, r3
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	685b      	ldr	r3, [r3, #4]
 800fba2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	61bb      	str	r3, [r7, #24]
        break;
 800fbaa:	e03a      	b.n	800fc22 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fbac:	f7fd f898 	bl	800cce0 <HAL_RCC_GetPCLK2Freq>
 800fbb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	005a      	lsls	r2, r3, #1
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	685b      	ldr	r3, [r3, #4]
 800fbba:	085b      	lsrs	r3, r3, #1
 800fbbc:	441a      	add	r2, r3
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbc6:	b29b      	uxth	r3, r3
 800fbc8:	61bb      	str	r3, [r7, #24]
        break;
 800fbca:	e02a      	b.n	800fc22 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	085a      	lsrs	r2, r3, #1
 800fbd2:	4b5f      	ldr	r3, [pc, #380]	; (800fd50 <UART_SetConfig+0x54c>)
 800fbd4:	4413      	add	r3, r2
 800fbd6:	687a      	ldr	r2, [r7, #4]
 800fbd8:	6852      	ldr	r2, [r2, #4]
 800fbda:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbde:	b29b      	uxth	r3, r3
 800fbe0:	61bb      	str	r3, [r7, #24]
        break;
 800fbe2:	e01e      	b.n	800fc22 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fbe4:	f7fc ffaa 	bl	800cb3c <HAL_RCC_GetSysClockFreq>
 800fbe8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	005a      	lsls	r2, r3, #1
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	085b      	lsrs	r3, r3, #1
 800fbf4:	441a      	add	r2, r3
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbfe:	b29b      	uxth	r3, r3
 800fc00:	61bb      	str	r3, [r7, #24]
        break;
 800fc02:	e00e      	b.n	800fc22 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	685b      	ldr	r3, [r3, #4]
 800fc08:	085b      	lsrs	r3, r3, #1
 800fc0a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	61bb      	str	r3, [r7, #24]
        break;
 800fc1a:	e002      	b.n	800fc22 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	75fb      	strb	r3, [r7, #23]
        break;
 800fc20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc22:	69bb      	ldr	r3, [r7, #24]
 800fc24:	2b0f      	cmp	r3, #15
 800fc26:	d916      	bls.n	800fc56 <UART_SetConfig+0x452>
 800fc28:	69bb      	ldr	r3, [r7, #24]
 800fc2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc2e:	d212      	bcs.n	800fc56 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fc30:	69bb      	ldr	r3, [r7, #24]
 800fc32:	b29b      	uxth	r3, r3
 800fc34:	f023 030f 	bic.w	r3, r3, #15
 800fc38:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fc3a:	69bb      	ldr	r3, [r7, #24]
 800fc3c:	085b      	lsrs	r3, r3, #1
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	f003 0307 	and.w	r3, r3, #7
 800fc44:	b29a      	uxth	r2, r3
 800fc46:	897b      	ldrh	r3, [r7, #10]
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	897a      	ldrh	r2, [r7, #10]
 800fc52:	60da      	str	r2, [r3, #12]
 800fc54:	e070      	b.n	800fd38 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800fc56:	2301      	movs	r3, #1
 800fc58:	75fb      	strb	r3, [r7, #23]
 800fc5a:	e06d      	b.n	800fd38 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800fc5c:	7ffb      	ldrb	r3, [r7, #31]
 800fc5e:	2b08      	cmp	r3, #8
 800fc60:	d859      	bhi.n	800fd16 <UART_SetConfig+0x512>
 800fc62:	a201      	add	r2, pc, #4	; (adr r2, 800fc68 <UART_SetConfig+0x464>)
 800fc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc68:	0800fc8d 	.word	0x0800fc8d
 800fc6c:	0800fcab 	.word	0x0800fcab
 800fc70:	0800fcc9 	.word	0x0800fcc9
 800fc74:	0800fd17 	.word	0x0800fd17
 800fc78:	0800fce1 	.word	0x0800fce1
 800fc7c:	0800fd17 	.word	0x0800fd17
 800fc80:	0800fd17 	.word	0x0800fd17
 800fc84:	0800fd17 	.word	0x0800fd17
 800fc88:	0800fcff 	.word	0x0800fcff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fc8c:	f7fd f814 	bl	800ccb8 <HAL_RCC_GetPCLK1Freq>
 800fc90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	685b      	ldr	r3, [r3, #4]
 800fc96:	085a      	lsrs	r2, r3, #1
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	441a      	add	r2, r3
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	685b      	ldr	r3, [r3, #4]
 800fca0:	fbb2 f3f3 	udiv	r3, r2, r3
 800fca4:	b29b      	uxth	r3, r3
 800fca6:	61bb      	str	r3, [r7, #24]
        break;
 800fca8:	e038      	b.n	800fd1c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fcaa:	f7fd f819 	bl	800cce0 <HAL_RCC_GetPCLK2Freq>
 800fcae:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	685b      	ldr	r3, [r3, #4]
 800fcb4:	085a      	lsrs	r2, r3, #1
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	441a      	add	r2, r3
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	61bb      	str	r3, [r7, #24]
        break;
 800fcc6:	e029      	b.n	800fd1c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	085a      	lsrs	r2, r3, #1
 800fcce:	4b21      	ldr	r3, [pc, #132]	; (800fd54 <UART_SetConfig+0x550>)
 800fcd0:	4413      	add	r3, r2
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	6852      	ldr	r2, [r2, #4]
 800fcd6:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcda:	b29b      	uxth	r3, r3
 800fcdc:	61bb      	str	r3, [r7, #24]
        break;
 800fcde:	e01d      	b.n	800fd1c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fce0:	f7fc ff2c 	bl	800cb3c <HAL_RCC_GetSysClockFreq>
 800fce4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	685b      	ldr	r3, [r3, #4]
 800fcea:	085a      	lsrs	r2, r3, #1
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	441a      	add	r2, r3
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	685b      	ldr	r3, [r3, #4]
 800fcf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcf8:	b29b      	uxth	r3, r3
 800fcfa:	61bb      	str	r3, [r7, #24]
        break;
 800fcfc:	e00e      	b.n	800fd1c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	085b      	lsrs	r3, r3, #1
 800fd04:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	685b      	ldr	r3, [r3, #4]
 800fd0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd10:	b29b      	uxth	r3, r3
 800fd12:	61bb      	str	r3, [r7, #24]
        break;
 800fd14:	e002      	b.n	800fd1c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800fd16:	2301      	movs	r3, #1
 800fd18:	75fb      	strb	r3, [r7, #23]
        break;
 800fd1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fd1c:	69bb      	ldr	r3, [r7, #24]
 800fd1e:	2b0f      	cmp	r3, #15
 800fd20:	d908      	bls.n	800fd34 <UART_SetConfig+0x530>
 800fd22:	69bb      	ldr	r3, [r7, #24]
 800fd24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd28:	d204      	bcs.n	800fd34 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	69ba      	ldr	r2, [r7, #24]
 800fd30:	60da      	str	r2, [r3, #12]
 800fd32:	e001      	b.n	800fd38 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800fd34:	2301      	movs	r3, #1
 800fd36:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2200      	movs	r2, #0
 800fd42:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800fd44:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3720      	adds	r7, #32
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop
 800fd50:	01e84800 	.word	0x01e84800
 800fd54:	00f42400 	.word	0x00f42400

0800fd58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b083      	sub	sp, #12
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd64:	f003 0301 	and.w	r3, r3, #1
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d00a      	beq.n	800fd82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	430a      	orrs	r2, r1
 800fd80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd86:	f003 0302 	and.w	r3, r3, #2
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d00a      	beq.n	800fda4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	430a      	orrs	r2, r1
 800fda2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fda8:	f003 0304 	and.w	r3, r3, #4
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d00a      	beq.n	800fdc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	430a      	orrs	r2, r1
 800fdc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdca:	f003 0308 	and.w	r3, r3, #8
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d00a      	beq.n	800fde8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	430a      	orrs	r2, r1
 800fde6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdec:	f003 0310 	and.w	r3, r3, #16
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d00a      	beq.n	800fe0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	689b      	ldr	r3, [r3, #8]
 800fdfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	430a      	orrs	r2, r1
 800fe08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe0e:	f003 0320 	and.w	r3, r3, #32
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d00a      	beq.n	800fe2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	689b      	ldr	r3, [r3, #8]
 800fe1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	430a      	orrs	r2, r1
 800fe2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d01a      	beq.n	800fe6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	430a      	orrs	r2, r1
 800fe4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fe56:	d10a      	bne.n	800fe6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	685b      	ldr	r3, [r3, #4]
 800fe5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	430a      	orrs	r2, r1
 800fe6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d00a      	beq.n	800fe90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	430a      	orrs	r2, r1
 800fe8e:	605a      	str	r2, [r3, #4]
  }
}
 800fe90:	bf00      	nop
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr

0800fe9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b086      	sub	sp, #24
 800fea0:	af02      	add	r7, sp, #8
 800fea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2200      	movs	r2, #0
 800fea8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800feaa:	f7f9 fb87 	bl	80095bc <HAL_GetTick>
 800feae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	f003 0308 	and.w	r3, r3, #8
 800feba:	2b08      	cmp	r3, #8
 800febc:	d10e      	bne.n	800fedc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800febe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fec2:	9300      	str	r3, [sp, #0]
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2200      	movs	r2, #0
 800fec8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 f82a 	bl	800ff26 <UART_WaitOnFlagUntilTimeout>
 800fed2:	4603      	mov	r3, r0
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d001      	beq.n	800fedc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fed8:	2303      	movs	r3, #3
 800feda:	e020      	b.n	800ff1e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f003 0304 	and.w	r3, r3, #4
 800fee6:	2b04      	cmp	r3, #4
 800fee8:	d10e      	bne.n	800ff08 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800feea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800feee:	9300      	str	r3, [sp, #0]
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	2200      	movs	r2, #0
 800fef4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f000 f814 	bl	800ff26 <UART_WaitOnFlagUntilTimeout>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d001      	beq.n	800ff08 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ff04:	2303      	movs	r3, #3
 800ff06:	e00a      	b.n	800ff1e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2220      	movs	r2, #32
 800ff0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2220      	movs	r2, #32
 800ff12:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2200      	movs	r2, #0
 800ff18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ff1c:	2300      	movs	r3, #0
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3710      	adds	r7, #16
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}

0800ff26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ff26:	b580      	push	{r7, lr}
 800ff28:	b084      	sub	sp, #16
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	60f8      	str	r0, [r7, #12]
 800ff2e:	60b9      	str	r1, [r7, #8]
 800ff30:	603b      	str	r3, [r7, #0]
 800ff32:	4613      	mov	r3, r2
 800ff34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ff36:	e05d      	b.n	800fff4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ff38:	69bb      	ldr	r3, [r7, #24]
 800ff3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff3e:	d059      	beq.n	800fff4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ff40:	f7f9 fb3c 	bl	80095bc <HAL_GetTick>
 800ff44:	4602      	mov	r2, r0
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	1ad3      	subs	r3, r2, r3
 800ff4a:	69ba      	ldr	r2, [r7, #24]
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d302      	bcc.n	800ff56 <UART_WaitOnFlagUntilTimeout+0x30>
 800ff50:	69bb      	ldr	r3, [r7, #24]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d11b      	bne.n	800ff8e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	681a      	ldr	r2, [r3, #0]
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ff64:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	689a      	ldr	r2, [r3, #8]
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	f022 0201 	bic.w	r2, r2, #1
 800ff74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	2220      	movs	r2, #32
 800ff7a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2220      	movs	r2, #32
 800ff80:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2200      	movs	r2, #0
 800ff86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ff8a:	2303      	movs	r3, #3
 800ff8c:	e042      	b.n	8010014 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f003 0304 	and.w	r3, r3, #4
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d02b      	beq.n	800fff4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	69db      	ldr	r3, [r3, #28]
 800ffa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ffa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ffaa:	d123      	bne.n	800fff4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ffb4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ffc4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	689a      	ldr	r2, [r3, #8]
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	f022 0201 	bic.w	r2, r2, #1
 800ffd4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	2220      	movs	r2, #32
 800ffda:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	2220      	movs	r2, #32
 800ffe0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	2220      	movs	r2, #32
 800ffe6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	2200      	movs	r2, #0
 800ffec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800fff0:	2303      	movs	r3, #3
 800fff2:	e00f      	b.n	8010014 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	69da      	ldr	r2, [r3, #28]
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	4013      	ands	r3, r2
 800fffe:	68ba      	ldr	r2, [r7, #8]
 8010000:	429a      	cmp	r2, r3
 8010002:	bf0c      	ite	eq
 8010004:	2301      	moveq	r3, #1
 8010006:	2300      	movne	r3, #0
 8010008:	b2db      	uxtb	r3, r3
 801000a:	461a      	mov	r2, r3
 801000c:	79fb      	ldrb	r3, [r7, #7]
 801000e:	429a      	cmp	r2, r3
 8010010:	d092      	beq.n	800ff38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010012:	2300      	movs	r3, #0
}
 8010014:	4618      	mov	r0, r3
 8010016:	3710      	adds	r7, #16
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801001c:	b480      	push	{r7}
 801001e:	b083      	sub	sp, #12
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010032:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2220      	movs	r2, #32
 8010038:	675a      	str	r2, [r3, #116]	; 0x74
}
 801003a:	bf00      	nop
 801003c:	370c      	adds	r7, #12
 801003e:	46bd      	mov	sp, r7
 8010040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010044:	4770      	bx	lr

08010046 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010046:	b480      	push	{r7}
 8010048:	b083      	sub	sp, #12
 801004a:	af00      	add	r7, sp, #0
 801004c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	681a      	ldr	r2, [r3, #0]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801005c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	689a      	ldr	r2, [r3, #8]
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f022 0201 	bic.w	r2, r2, #1
 801006c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2220      	movs	r2, #32
 8010072:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2200      	movs	r2, #0
 8010078:	661a      	str	r2, [r3, #96]	; 0x60
}
 801007a:	bf00      	nop
 801007c:	370c      	adds	r7, #12
 801007e:	46bd      	mov	sp, r7
 8010080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010084:	4770      	bx	lr

08010086 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010086:	b580      	push	{r7, lr}
 8010088:	b084      	sub	sp, #16
 801008a:	af00      	add	r7, sp, #0
 801008c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010092:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	69db      	ldr	r3, [r3, #28]
 8010098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801009c:	d01e      	beq.n	80100dc <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2200      	movs	r2, #0
 80100a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	681a      	ldr	r2, [r3, #0]
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80100b4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	689a      	ldr	r2, [r3, #8]
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	f022 0201 	bic.w	r2, r2, #1
 80100c4:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	689a      	ldr	r2, [r3, #8]
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80100d4:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2220      	movs	r2, #32
 80100da:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80100dc:	68f8      	ldr	r0, [r7, #12]
 80100de:	f7ff fb73 	bl	800f7c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80100e2:	bf00      	nop
 80100e4:	3710      	adds	r7, #16
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}

080100ea <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80100ea:	b580      	push	{r7, lr}
 80100ec:	b084      	sub	sp, #16
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80100f8:	68f8      	ldr	r0, [r7, #12]
 80100fa:	f7ff fb6f 	bl	800f7dc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80100fe:	bf00      	nop
 8010100:	3710      	adds	r7, #16
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}

08010106 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010106:	b580      	push	{r7, lr}
 8010108:	b086      	sub	sp, #24
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010112:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010118:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801011e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	689b      	ldr	r3, [r3, #8]
 8010126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801012a:	2b80      	cmp	r3, #128	; 0x80
 801012c:	d109      	bne.n	8010142 <UART_DMAError+0x3c>
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	2b21      	cmp	r3, #33	; 0x21
 8010132:	d106      	bne.n	8010142 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010134:	697b      	ldr	r3, [r7, #20]
 8010136:	2200      	movs	r2, #0
 8010138:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 801013c:	6978      	ldr	r0, [r7, #20]
 801013e:	f7ff ff6d 	bl	801001c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	689b      	ldr	r3, [r3, #8]
 8010148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801014c:	2b40      	cmp	r3, #64	; 0x40
 801014e:	d109      	bne.n	8010164 <UART_DMAError+0x5e>
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	2b22      	cmp	r3, #34	; 0x22
 8010154:	d106      	bne.n	8010164 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	2200      	movs	r2, #0
 801015a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 801015e:	6978      	ldr	r0, [r7, #20]
 8010160:	f7ff ff71 	bl	8010046 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010168:	f043 0210 	orr.w	r2, r3, #16
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010170:	6978      	ldr	r0, [r7, #20]
 8010172:	f7ff fb3d 	bl	800f7f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010176:	bf00      	nop
 8010178:	3718      	adds	r7, #24
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}
	...

08010180 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010180:	b084      	sub	sp, #16
 8010182:	b580      	push	{r7, lr}
 8010184:	b084      	sub	sp, #16
 8010186:	af00      	add	r7, sp, #0
 8010188:	6078      	str	r0, [r7, #4]
 801018a:	f107 001c 	add.w	r0, r7, #28
 801018e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010194:	2b01      	cmp	r3, #1
 8010196:	d120      	bne.n	80101da <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801019c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	68da      	ldr	r2, [r3, #12]
 80101a8:	4b20      	ldr	r3, [pc, #128]	; (801022c <USB_CoreInit+0xac>)
 80101aa:	4013      	ands	r3, r2
 80101ac:	687a      	ldr	r2, [r7, #4]
 80101ae:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	68db      	ldr	r3, [r3, #12]
 80101b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80101bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101be:	2b01      	cmp	r3, #1
 80101c0:	d105      	bne.n	80101ce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	68db      	ldr	r3, [r3, #12]
 80101c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f000 fa52 	bl	8010678 <USB_CoreReset>
 80101d4:	4603      	mov	r3, r0
 80101d6:	73fb      	strb	r3, [r7, #15]
 80101d8:	e010      	b.n	80101fc <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	68db      	ldr	r3, [r3, #12]
 80101de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f000 fa46 	bl	8010678 <USB_CoreReset>
 80101ec:	4603      	mov	r3, r0
 80101ee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80101fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101fe:	2b01      	cmp	r3, #1
 8010200:	d10b      	bne.n	801021a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	689b      	ldr	r3, [r3, #8]
 8010206:	f043 0206 	orr.w	r2, r3, #6
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	689b      	ldr	r3, [r3, #8]
 8010212:	f043 0220 	orr.w	r2, r3, #32
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801021a:	7bfb      	ldrb	r3, [r7, #15]
}
 801021c:	4618      	mov	r0, r3
 801021e:	3710      	adds	r7, #16
 8010220:	46bd      	mov	sp, r7
 8010222:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010226:	b004      	add	sp, #16
 8010228:	4770      	bx	lr
 801022a:	bf00      	nop
 801022c:	ffbdffbf 	.word	0xffbdffbf

08010230 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010230:	b480      	push	{r7}
 8010232:	b083      	sub	sp, #12
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	689b      	ldr	r3, [r3, #8]
 801023c:	f023 0201 	bic.w	r2, r3, #1
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010244:	2300      	movs	r3, #0
}
 8010246:	4618      	mov	r0, r3
 8010248:	370c      	adds	r7, #12
 801024a:	46bd      	mov	sp, r7
 801024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010250:	4770      	bx	lr

08010252 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010252:	b580      	push	{r7, lr}
 8010254:	b082      	sub	sp, #8
 8010256:	af00      	add	r7, sp, #0
 8010258:	6078      	str	r0, [r7, #4]
 801025a:	460b      	mov	r3, r1
 801025c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801026a:	78fb      	ldrb	r3, [r7, #3]
 801026c:	2b01      	cmp	r3, #1
 801026e:	d106      	bne.n	801027e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	68db      	ldr	r3, [r3, #12]
 8010274:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	60da      	str	r2, [r3, #12]
 801027c:	e00b      	b.n	8010296 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 801027e:	78fb      	ldrb	r3, [r7, #3]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d106      	bne.n	8010292 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	68db      	ldr	r3, [r3, #12]
 8010288:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	60da      	str	r2, [r3, #12]
 8010290:	e001      	b.n	8010296 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010292:	2301      	movs	r3, #1
 8010294:	e003      	b.n	801029e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010296:	2032      	movs	r0, #50	; 0x32
 8010298:	f7f9 f99c 	bl	80095d4 <HAL_Delay>

  return HAL_OK;
 801029c:	2300      	movs	r3, #0
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3708      	adds	r7, #8
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
	...

080102a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80102a8:	b084      	sub	sp, #16
 80102aa:	b580      	push	{r7, lr}
 80102ac:	b086      	sub	sp, #24
 80102ae:	af00      	add	r7, sp, #0
 80102b0:	6078      	str	r0, [r7, #4]
 80102b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80102b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80102ba:	2300      	movs	r3, #0
 80102bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80102c2:	2300      	movs	r3, #0
 80102c4:	613b      	str	r3, [r7, #16]
 80102c6:	e009      	b.n	80102dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80102c8:	687a      	ldr	r2, [r7, #4]
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	3340      	adds	r3, #64	; 0x40
 80102ce:	009b      	lsls	r3, r3, #2
 80102d0:	4413      	add	r3, r2
 80102d2:	2200      	movs	r2, #0
 80102d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	3301      	adds	r3, #1
 80102da:	613b      	str	r3, [r7, #16]
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	2b0e      	cmp	r3, #14
 80102e0:	d9f2      	bls.n	80102c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80102e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d11c      	bne.n	8010322 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102ee:	685b      	ldr	r3, [r3, #4]
 80102f0:	68fa      	ldr	r2, [r7, #12]
 80102f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80102f6:	f043 0302 	orr.w	r3, r3, #2
 80102fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010300:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	601a      	str	r2, [r3, #0]
 8010320:	e005      	b.n	801032e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010326:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010334:	461a      	mov	r2, r3
 8010336:	2300      	movs	r3, #0
 8010338:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010340:	4619      	mov	r1, r3
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010348:	461a      	mov	r2, r3
 801034a:	680b      	ldr	r3, [r1, #0]
 801034c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801034e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010350:	2b01      	cmp	r3, #1
 8010352:	d10c      	bne.n	801036e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010356:	2b00      	cmp	r3, #0
 8010358:	d104      	bne.n	8010364 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801035a:	2100      	movs	r1, #0
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f000 f959 	bl	8010614 <USB_SetDevSpeed>
 8010362:	e018      	b.n	8010396 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010364:	2101      	movs	r1, #1
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f000 f954 	bl	8010614 <USB_SetDevSpeed>
 801036c:	e013      	b.n	8010396 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 801036e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010370:	2b03      	cmp	r3, #3
 8010372:	d10c      	bne.n	801038e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010376:	2b00      	cmp	r3, #0
 8010378:	d104      	bne.n	8010384 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801037a:	2100      	movs	r1, #0
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f000 f949 	bl	8010614 <USB_SetDevSpeed>
 8010382:	e008      	b.n	8010396 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010384:	2101      	movs	r1, #1
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f000 f944 	bl	8010614 <USB_SetDevSpeed>
 801038c:	e003      	b.n	8010396 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801038e:	2103      	movs	r1, #3
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f000 f93f 	bl	8010614 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010396:	2110      	movs	r1, #16
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f000 f8f3 	bl	8010584 <USB_FlushTxFifo>
 801039e:	4603      	mov	r3, r0
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d001      	beq.n	80103a8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80103a4:	2301      	movs	r3, #1
 80103a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f000 f911 	bl	80105d0 <USB_FlushRxFifo>
 80103ae:	4603      	mov	r3, r0
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d001      	beq.n	80103b8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80103b4:	2301      	movs	r3, #1
 80103b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103be:	461a      	mov	r2, r3
 80103c0:	2300      	movs	r3, #0
 80103c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103ca:	461a      	mov	r2, r3
 80103cc:	2300      	movs	r3, #0
 80103ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103d6:	461a      	mov	r2, r3
 80103d8:	2300      	movs	r3, #0
 80103da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80103dc:	2300      	movs	r3, #0
 80103de:	613b      	str	r3, [r7, #16]
 80103e0:	e043      	b.n	801046a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80103e2:	693b      	ldr	r3, [r7, #16]
 80103e4:	015a      	lsls	r2, r3, #5
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	4413      	add	r3, r2
 80103ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80103f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80103f8:	d118      	bne.n	801042c <USB_DevInit+0x184>
    {
      if (i == 0U)
 80103fa:	693b      	ldr	r3, [r7, #16]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d10a      	bne.n	8010416 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	015a      	lsls	r2, r3, #5
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	4413      	add	r3, r2
 8010408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801040c:	461a      	mov	r2, r3
 801040e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010412:	6013      	str	r3, [r2, #0]
 8010414:	e013      	b.n	801043e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	015a      	lsls	r2, r3, #5
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	4413      	add	r3, r2
 801041e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010422:	461a      	mov	r2, r3
 8010424:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010428:	6013      	str	r3, [r2, #0]
 801042a:	e008      	b.n	801043e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	015a      	lsls	r2, r3, #5
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	4413      	add	r3, r2
 8010434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010438:	461a      	mov	r2, r3
 801043a:	2300      	movs	r3, #0
 801043c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	015a      	lsls	r2, r3, #5
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	4413      	add	r3, r2
 8010446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801044a:	461a      	mov	r2, r3
 801044c:	2300      	movs	r3, #0
 801044e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	015a      	lsls	r2, r3, #5
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	4413      	add	r3, r2
 8010458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801045c:	461a      	mov	r2, r3
 801045e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010462:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	3301      	adds	r3, #1
 8010468:	613b      	str	r3, [r7, #16]
 801046a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801046c:	693a      	ldr	r2, [r7, #16]
 801046e:	429a      	cmp	r2, r3
 8010470:	d3b7      	bcc.n	80103e2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010472:	2300      	movs	r3, #0
 8010474:	613b      	str	r3, [r7, #16]
 8010476:	e043      	b.n	8010500 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	015a      	lsls	r2, r3, #5
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	4413      	add	r3, r2
 8010480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801048a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801048e:	d118      	bne.n	80104c2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8010490:	693b      	ldr	r3, [r7, #16]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d10a      	bne.n	80104ac <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	015a      	lsls	r2, r3, #5
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	4413      	add	r3, r2
 801049e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104a2:	461a      	mov	r2, r3
 80104a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80104a8:	6013      	str	r3, [r2, #0]
 80104aa:	e013      	b.n	80104d4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	015a      	lsls	r2, r3, #5
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	4413      	add	r3, r2
 80104b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104b8:	461a      	mov	r2, r3
 80104ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80104be:	6013      	str	r3, [r2, #0]
 80104c0:	e008      	b.n	80104d4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80104c2:	693b      	ldr	r3, [r7, #16]
 80104c4:	015a      	lsls	r2, r3, #5
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	4413      	add	r3, r2
 80104ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104ce:	461a      	mov	r2, r3
 80104d0:	2300      	movs	r3, #0
 80104d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	015a      	lsls	r2, r3, #5
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	4413      	add	r3, r2
 80104dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104e0:	461a      	mov	r2, r3
 80104e2:	2300      	movs	r3, #0
 80104e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	015a      	lsls	r2, r3, #5
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	4413      	add	r3, r2
 80104ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104f2:	461a      	mov	r2, r3
 80104f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80104f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	3301      	adds	r3, #1
 80104fe:	613b      	str	r3, [r7, #16]
 8010500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010502:	693a      	ldr	r2, [r7, #16]
 8010504:	429a      	cmp	r2, r3
 8010506:	d3b7      	bcc.n	8010478 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801050e:	691b      	ldr	r3, [r3, #16]
 8010510:	68fa      	ldr	r2, [r7, #12]
 8010512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010516:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801051a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2200      	movs	r2, #0
 8010520:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010528:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801052a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801052c:	2b00      	cmp	r3, #0
 801052e:	d105      	bne.n	801053c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	699b      	ldr	r3, [r3, #24]
 8010534:	f043 0210 	orr.w	r2, r3, #16
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	699a      	ldr	r2, [r3, #24]
 8010540:	4b0e      	ldr	r3, [pc, #56]	; (801057c <USB_DevInit+0x2d4>)
 8010542:	4313      	orrs	r3, r2
 8010544:	687a      	ldr	r2, [r7, #4]
 8010546:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801054a:	2b00      	cmp	r3, #0
 801054c:	d005      	beq.n	801055a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	699b      	ldr	r3, [r3, #24]
 8010552:	f043 0208 	orr.w	r2, r3, #8
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801055a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801055c:	2b01      	cmp	r3, #1
 801055e:	d105      	bne.n	801056c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	699a      	ldr	r2, [r3, #24]
 8010564:	4b06      	ldr	r3, [pc, #24]	; (8010580 <USB_DevInit+0x2d8>)
 8010566:	4313      	orrs	r3, r2
 8010568:	687a      	ldr	r2, [r7, #4]
 801056a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801056c:	7dfb      	ldrb	r3, [r7, #23]
}
 801056e:	4618      	mov	r0, r3
 8010570:	3718      	adds	r7, #24
 8010572:	46bd      	mov	sp, r7
 8010574:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010578:	b004      	add	sp, #16
 801057a:	4770      	bx	lr
 801057c:	803c3800 	.word	0x803c3800
 8010580:	40000004 	.word	0x40000004

08010584 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010584:	b480      	push	{r7}
 8010586:	b085      	sub	sp, #20
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801058e:	2300      	movs	r3, #0
 8010590:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	019b      	lsls	r3, r3, #6
 8010596:	f043 0220 	orr.w	r2, r3, #32
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	3301      	adds	r3, #1
 80105a2:	60fb      	str	r3, [r7, #12]
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	4a09      	ldr	r2, [pc, #36]	; (80105cc <USB_FlushTxFifo+0x48>)
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d901      	bls.n	80105b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80105ac:	2303      	movs	r3, #3
 80105ae:	e006      	b.n	80105be <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	691b      	ldr	r3, [r3, #16]
 80105b4:	f003 0320 	and.w	r3, r3, #32
 80105b8:	2b20      	cmp	r3, #32
 80105ba:	d0f0      	beq.n	801059e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80105bc:	2300      	movs	r3, #0
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3714      	adds	r7, #20
 80105c2:	46bd      	mov	sp, r7
 80105c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c8:	4770      	bx	lr
 80105ca:	bf00      	nop
 80105cc:	00030d40 	.word	0x00030d40

080105d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80105d0:	b480      	push	{r7}
 80105d2:	b085      	sub	sp, #20
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80105d8:	2300      	movs	r3, #0
 80105da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2210      	movs	r2, #16
 80105e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	3301      	adds	r3, #1
 80105e6:	60fb      	str	r3, [r7, #12]
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	4a09      	ldr	r2, [pc, #36]	; (8010610 <USB_FlushRxFifo+0x40>)
 80105ec:	4293      	cmp	r3, r2
 80105ee:	d901      	bls.n	80105f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80105f0:	2303      	movs	r3, #3
 80105f2:	e006      	b.n	8010602 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	691b      	ldr	r3, [r3, #16]
 80105f8:	f003 0310 	and.w	r3, r3, #16
 80105fc:	2b10      	cmp	r3, #16
 80105fe:	d0f0      	beq.n	80105e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8010600:	2300      	movs	r3, #0
}
 8010602:	4618      	mov	r0, r3
 8010604:	3714      	adds	r7, #20
 8010606:	46bd      	mov	sp, r7
 8010608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060c:	4770      	bx	lr
 801060e:	bf00      	nop
 8010610:	00030d40 	.word	0x00030d40

08010614 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010614:	b480      	push	{r7}
 8010616:	b085      	sub	sp, #20
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	460b      	mov	r3, r1
 801061e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	78fb      	ldrb	r3, [r7, #3]
 801062e:	68f9      	ldr	r1, [r7, #12]
 8010630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010634:	4313      	orrs	r3, r2
 8010636:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010638:	2300      	movs	r3, #0
}
 801063a:	4618      	mov	r0, r3
 801063c:	3714      	adds	r7, #20
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr

08010646 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010646:	b580      	push	{r7, lr}
 8010648:	b084      	sub	sp, #16
 801064a:	af00      	add	r7, sp, #0
 801064c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	68fa      	ldr	r2, [r7, #12]
 801065c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010660:	f043 0302 	orr.w	r3, r3, #2
 8010664:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8010666:	2003      	movs	r0, #3
 8010668:	f7f8 ffb4 	bl	80095d4 <HAL_Delay>

  return HAL_OK;
 801066c:	2300      	movs	r3, #0
}
 801066e:	4618      	mov	r0, r3
 8010670:	3710      	adds	r7, #16
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
	...

08010678 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010678:	b480      	push	{r7}
 801067a:	b085      	sub	sp, #20
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010680:	2300      	movs	r3, #0
 8010682:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	3301      	adds	r3, #1
 8010688:	60fb      	str	r3, [r7, #12]
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	4a13      	ldr	r2, [pc, #76]	; (80106dc <USB_CoreReset+0x64>)
 801068e:	4293      	cmp	r3, r2
 8010690:	d901      	bls.n	8010696 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010692:	2303      	movs	r3, #3
 8010694:	e01b      	b.n	80106ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	691b      	ldr	r3, [r3, #16]
 801069a:	2b00      	cmp	r3, #0
 801069c:	daf2      	bge.n	8010684 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801069e:	2300      	movs	r3, #0
 80106a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	691b      	ldr	r3, [r3, #16]
 80106a6:	f043 0201 	orr.w	r2, r3, #1
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	3301      	adds	r3, #1
 80106b2:	60fb      	str	r3, [r7, #12]
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	4a09      	ldr	r2, [pc, #36]	; (80106dc <USB_CoreReset+0x64>)
 80106b8:	4293      	cmp	r3, r2
 80106ba:	d901      	bls.n	80106c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80106bc:	2303      	movs	r3, #3
 80106be:	e006      	b.n	80106ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	691b      	ldr	r3, [r3, #16]
 80106c4:	f003 0301 	and.w	r3, r3, #1
 80106c8:	2b01      	cmp	r3, #1
 80106ca:	d0f0      	beq.n	80106ae <USB_CoreReset+0x36>

  return HAL_OK;
 80106cc:	2300      	movs	r3, #0
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3714      	adds	r7, #20
 80106d2:	46bd      	mov	sp, r7
 80106d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop
 80106dc:	00030d40 	.word	0x00030d40

080106e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80106e0:	b480      	push	{r7}
 80106e2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80106e4:	bf00      	nop
 80106e6:	46bd      	mov	sp, r7
 80106e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ec:	4770      	bx	lr
	...

080106f0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80106f0:	b480      	push	{r7}
 80106f2:	b085      	sub	sp, #20
 80106f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80106f6:	f3ef 8305 	mrs	r3, IPSR
 80106fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80106fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d10f      	bne.n	8010722 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010702:	f3ef 8310 	mrs	r3, PRIMASK
 8010706:	607b      	str	r3, [r7, #4]
  return(result);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d105      	bne.n	801071a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801070e:	f3ef 8311 	mrs	r3, BASEPRI
 8010712:	603b      	str	r3, [r7, #0]
  return(result);
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d007      	beq.n	801072a <osKernelInitialize+0x3a>
 801071a:	4b0e      	ldr	r3, [pc, #56]	; (8010754 <osKernelInitialize+0x64>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	2b02      	cmp	r3, #2
 8010720:	d103      	bne.n	801072a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8010722:	f06f 0305 	mvn.w	r3, #5
 8010726:	60fb      	str	r3, [r7, #12]
 8010728:	e00c      	b.n	8010744 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 801072a:	4b0a      	ldr	r3, [pc, #40]	; (8010754 <osKernelInitialize+0x64>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d105      	bne.n	801073e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010732:	4b08      	ldr	r3, [pc, #32]	; (8010754 <osKernelInitialize+0x64>)
 8010734:	2201      	movs	r2, #1
 8010736:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010738:	2300      	movs	r3, #0
 801073a:	60fb      	str	r3, [r7, #12]
 801073c:	e002      	b.n	8010744 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801073e:	f04f 33ff 	mov.w	r3, #4294967295
 8010742:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010744:	68fb      	ldr	r3, [r7, #12]
}
 8010746:	4618      	mov	r0, r3
 8010748:	3714      	adds	r7, #20
 801074a:	46bd      	mov	sp, r7
 801074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010750:	4770      	bx	lr
 8010752:	bf00      	nop
 8010754:	200033a8 	.word	0x200033a8

08010758 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010758:	b580      	push	{r7, lr}
 801075a:	b084      	sub	sp, #16
 801075c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801075e:	f3ef 8305 	mrs	r3, IPSR
 8010762:	60bb      	str	r3, [r7, #8]
  return(result);
 8010764:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010766:	2b00      	cmp	r3, #0
 8010768:	d10f      	bne.n	801078a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801076a:	f3ef 8310 	mrs	r3, PRIMASK
 801076e:	607b      	str	r3, [r7, #4]
  return(result);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d105      	bne.n	8010782 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010776:	f3ef 8311 	mrs	r3, BASEPRI
 801077a:	603b      	str	r3, [r7, #0]
  return(result);
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d007      	beq.n	8010792 <osKernelStart+0x3a>
 8010782:	4b0f      	ldr	r3, [pc, #60]	; (80107c0 <osKernelStart+0x68>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	2b02      	cmp	r3, #2
 8010788:	d103      	bne.n	8010792 <osKernelStart+0x3a>
    stat = osErrorISR;
 801078a:	f06f 0305 	mvn.w	r3, #5
 801078e:	60fb      	str	r3, [r7, #12]
 8010790:	e010      	b.n	80107b4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010792:	4b0b      	ldr	r3, [pc, #44]	; (80107c0 <osKernelStart+0x68>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	2b01      	cmp	r3, #1
 8010798:	d109      	bne.n	80107ae <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801079a:	f7ff ffa1 	bl	80106e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801079e:	4b08      	ldr	r3, [pc, #32]	; (80107c0 <osKernelStart+0x68>)
 80107a0:	2202      	movs	r2, #2
 80107a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80107a4:	f001 f916 	bl	80119d4 <vTaskStartScheduler>
      stat = osOK;
 80107a8:	2300      	movs	r3, #0
 80107aa:	60fb      	str	r3, [r7, #12]
 80107ac:	e002      	b.n	80107b4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80107ae:	f04f 33ff 	mov.w	r3, #4294967295
 80107b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80107b4:	68fb      	ldr	r3, [r7, #12]
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	3710      	adds	r7, #16
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}
 80107be:	bf00      	nop
 80107c0:	200033a8 	.word	0x200033a8

080107c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b090      	sub	sp, #64	; 0x40
 80107c8:	af04      	add	r7, sp, #16
 80107ca:	60f8      	str	r0, [r7, #12]
 80107cc:	60b9      	str	r1, [r7, #8]
 80107ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80107d0:	2300      	movs	r3, #0
 80107d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80107d4:	f3ef 8305 	mrs	r3, IPSR
 80107d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80107da:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80107dc:	2b00      	cmp	r3, #0
 80107de:	f040 808f 	bne.w	8010900 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107e2:	f3ef 8310 	mrs	r3, PRIMASK
 80107e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80107e8:	69bb      	ldr	r3, [r7, #24]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d105      	bne.n	80107fa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80107ee:	f3ef 8311 	mrs	r3, BASEPRI
 80107f2:	617b      	str	r3, [r7, #20]
  return(result);
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d003      	beq.n	8010802 <osThreadNew+0x3e>
 80107fa:	4b44      	ldr	r3, [pc, #272]	; (801090c <osThreadNew+0x148>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	2b02      	cmp	r3, #2
 8010800:	d07e      	beq.n	8010900 <osThreadNew+0x13c>
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d07b      	beq.n	8010900 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8010808:	2380      	movs	r3, #128	; 0x80
 801080a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 801080c:	2318      	movs	r3, #24
 801080e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8010810:	2300      	movs	r3, #0
 8010812:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8010814:	f04f 33ff 	mov.w	r3, #4294967295
 8010818:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d045      	beq.n	80108ac <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d002      	beq.n	801082e <osThreadNew+0x6a>
        name = attr->name;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	699b      	ldr	r3, [r3, #24]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d002      	beq.n	801083c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	699b      	ldr	r3, [r3, #24]
 801083a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801083c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083e:	2b00      	cmp	r3, #0
 8010840:	d008      	beq.n	8010854 <osThreadNew+0x90>
 8010842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010844:	2b38      	cmp	r3, #56	; 0x38
 8010846:	d805      	bhi.n	8010854 <osThreadNew+0x90>
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	685b      	ldr	r3, [r3, #4]
 801084c:	f003 0301 	and.w	r3, r3, #1
 8010850:	2b00      	cmp	r3, #0
 8010852:	d001      	beq.n	8010858 <osThreadNew+0x94>
        return (NULL);
 8010854:	2300      	movs	r3, #0
 8010856:	e054      	b.n	8010902 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	695b      	ldr	r3, [r3, #20]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d003      	beq.n	8010868 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	695b      	ldr	r3, [r3, #20]
 8010864:	089b      	lsrs	r3, r3, #2
 8010866:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	689b      	ldr	r3, [r3, #8]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d00e      	beq.n	801088e <osThreadNew+0xca>
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	68db      	ldr	r3, [r3, #12]
 8010874:	2b5b      	cmp	r3, #91	; 0x5b
 8010876:	d90a      	bls.n	801088e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801087c:	2b00      	cmp	r3, #0
 801087e:	d006      	beq.n	801088e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	695b      	ldr	r3, [r3, #20]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d002      	beq.n	801088e <osThreadNew+0xca>
        mem = 1;
 8010888:	2301      	movs	r3, #1
 801088a:	623b      	str	r3, [r7, #32]
 801088c:	e010      	b.n	80108b0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	689b      	ldr	r3, [r3, #8]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d10c      	bne.n	80108b0 <osThreadNew+0xec>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d108      	bne.n	80108b0 <osThreadNew+0xec>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	691b      	ldr	r3, [r3, #16]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d104      	bne.n	80108b0 <osThreadNew+0xec>
          mem = 0;
 80108a6:	2300      	movs	r3, #0
 80108a8:	623b      	str	r3, [r7, #32]
 80108aa:	e001      	b.n	80108b0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80108ac:	2300      	movs	r3, #0
 80108ae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80108b0:	6a3b      	ldr	r3, [r7, #32]
 80108b2:	2b01      	cmp	r3, #1
 80108b4:	d110      	bne.n	80108d8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80108ba:	687a      	ldr	r2, [r7, #4]
 80108bc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80108be:	9202      	str	r2, [sp, #8]
 80108c0:	9301      	str	r3, [sp, #4]
 80108c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c4:	9300      	str	r3, [sp, #0]
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80108cc:	68f8      	ldr	r0, [r7, #12]
 80108ce:	f000 fe31 	bl	8011534 <xTaskCreateStatic>
 80108d2:	4603      	mov	r3, r0
 80108d4:	613b      	str	r3, [r7, #16]
 80108d6:	e013      	b.n	8010900 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80108d8:	6a3b      	ldr	r3, [r7, #32]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d110      	bne.n	8010900 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80108de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e0:	b29a      	uxth	r2, r3
 80108e2:	f107 0310 	add.w	r3, r7, #16
 80108e6:	9301      	str	r3, [sp, #4]
 80108e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ea:	9300      	str	r3, [sp, #0]
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80108f0:	68f8      	ldr	r0, [r7, #12]
 80108f2:	f000 fe7f 	bl	80115f4 <xTaskCreate>
 80108f6:	4603      	mov	r3, r0
 80108f8:	2b01      	cmp	r3, #1
 80108fa:	d001      	beq.n	8010900 <osThreadNew+0x13c>
          hTask = NULL;
 80108fc:	2300      	movs	r3, #0
 80108fe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010900:	693b      	ldr	r3, [r7, #16]
}
 8010902:	4618      	mov	r0, r3
 8010904:	3730      	adds	r7, #48	; 0x30
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	200033a8 	.word	0x200033a8

08010910 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 8010910:	b580      	push	{r7, lr}
 8010912:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8010914:	2000      	movs	r0, #0
 8010916:	f000 ffb3 	bl	8011880 <vTaskDelete>
#endif
  for (;;);
 801091a:	e7fe      	b.n	801091a <osThreadExit+0xa>

0801091c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 801091c:	b580      	push	{r7, lr}
 801091e:	b086      	sub	sp, #24
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010924:	f3ef 8305 	mrs	r3, IPSR
 8010928:	613b      	str	r3, [r7, #16]
  return(result);
 801092a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 801092c:	2b00      	cmp	r3, #0
 801092e:	d10f      	bne.n	8010950 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010930:	f3ef 8310 	mrs	r3, PRIMASK
 8010934:	60fb      	str	r3, [r7, #12]
  return(result);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d105      	bne.n	8010948 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801093c:	f3ef 8311 	mrs	r3, BASEPRI
 8010940:	60bb      	str	r3, [r7, #8]
  return(result);
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d007      	beq.n	8010958 <osDelay+0x3c>
 8010948:	4b0a      	ldr	r3, [pc, #40]	; (8010974 <osDelay+0x58>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	2b02      	cmp	r3, #2
 801094e:	d103      	bne.n	8010958 <osDelay+0x3c>
    stat = osErrorISR;
 8010950:	f06f 0305 	mvn.w	r3, #5
 8010954:	617b      	str	r3, [r7, #20]
 8010956:	e007      	b.n	8010968 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010958:	2300      	movs	r3, #0
 801095a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d002      	beq.n	8010968 <osDelay+0x4c>
      vTaskDelay(ticks);
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f001 f800 	bl	8011968 <vTaskDelay>
    }
  }

  return (stat);
 8010968:	697b      	ldr	r3, [r7, #20]
}
 801096a:	4618      	mov	r0, r3
 801096c:	3718      	adds	r7, #24
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}
 8010972:	bf00      	nop
 8010974:	200033a8 	.word	0x200033a8

08010978 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010978:	b480      	push	{r7}
 801097a:	b085      	sub	sp, #20
 801097c:	af00      	add	r7, sp, #0
 801097e:	60f8      	str	r0, [r7, #12]
 8010980:	60b9      	str	r1, [r7, #8]
 8010982:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	4a07      	ldr	r2, [pc, #28]	; (80109a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8010988:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	4a06      	ldr	r2, [pc, #24]	; (80109a8 <vApplicationGetIdleTaskMemory+0x30>)
 801098e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2280      	movs	r2, #128	; 0x80
 8010994:	601a      	str	r2, [r3, #0]
}
 8010996:	bf00      	nop
 8010998:	3714      	adds	r7, #20
 801099a:	46bd      	mov	sp, r7
 801099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a0:	4770      	bx	lr
 80109a2:	bf00      	nop
 80109a4:	200033ac 	.word	0x200033ac
 80109a8:	20003408 	.word	0x20003408

080109ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80109ac:	b480      	push	{r7}
 80109ae:	b085      	sub	sp, #20
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	60f8      	str	r0, [r7, #12]
 80109b4:	60b9      	str	r1, [r7, #8]
 80109b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	4a07      	ldr	r2, [pc, #28]	; (80109d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80109bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80109be:	68bb      	ldr	r3, [r7, #8]
 80109c0:	4a06      	ldr	r2, [pc, #24]	; (80109dc <vApplicationGetTimerTaskMemory+0x30>)
 80109c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80109ca:	601a      	str	r2, [r3, #0]
}
 80109cc:	bf00      	nop
 80109ce:	3714      	adds	r7, #20
 80109d0:	46bd      	mov	sp, r7
 80109d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d6:	4770      	bx	lr
 80109d8:	20003608 	.word	0x20003608
 80109dc:	20003664 	.word	0x20003664

080109e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80109e0:	b480      	push	{r7}
 80109e2:	b083      	sub	sp, #12
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f103 0208 	add.w	r2, r3, #8
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f04f 32ff 	mov.w	r2, #4294967295
 80109f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f103 0208 	add.w	r2, r3, #8
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f103 0208 	add.w	r2, r3, #8
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2200      	movs	r2, #0
 8010a12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010a14:	bf00      	nop
 8010a16:	370c      	adds	r7, #12
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr

08010a20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010a20:	b480      	push	{r7}
 8010a22:	b083      	sub	sp, #12
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010a2e:	bf00      	nop
 8010a30:	370c      	adds	r7, #12
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr

08010a3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010a3a:	b480      	push	{r7}
 8010a3c:	b085      	sub	sp, #20
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
 8010a42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	685b      	ldr	r3, [r3, #4]
 8010a48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	68fa      	ldr	r2, [r7, #12]
 8010a4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	689a      	ldr	r2, [r3, #8]
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	689b      	ldr	r3, [r3, #8]
 8010a5c:	683a      	ldr	r2, [r7, #0]
 8010a5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	683a      	ldr	r2, [r7, #0]
 8010a64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	687a      	ldr	r2, [r7, #4]
 8010a6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	1c5a      	adds	r2, r3, #1
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	601a      	str	r2, [r3, #0]
}
 8010a76:	bf00      	nop
 8010a78:	3714      	adds	r7, #20
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a80:	4770      	bx	lr

08010a82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010a82:	b480      	push	{r7}
 8010a84:	b085      	sub	sp, #20
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	6078      	str	r0, [r7, #4]
 8010a8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a98:	d103      	bne.n	8010aa2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	691b      	ldr	r3, [r3, #16]
 8010a9e:	60fb      	str	r3, [r7, #12]
 8010aa0:	e00c      	b.n	8010abc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	3308      	adds	r3, #8
 8010aa6:	60fb      	str	r3, [r7, #12]
 8010aa8:	e002      	b.n	8010ab0 <vListInsert+0x2e>
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	685b      	ldr	r3, [r3, #4]
 8010aae:	60fb      	str	r3, [r7, #12]
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	685b      	ldr	r3, [r3, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	68ba      	ldr	r2, [r7, #8]
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d2f6      	bcs.n	8010aaa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	685a      	ldr	r2, [r3, #4]
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	685b      	ldr	r3, [r3, #4]
 8010ac8:	683a      	ldr	r2, [r7, #0]
 8010aca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	68fa      	ldr	r2, [r7, #12]
 8010ad0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	683a      	ldr	r2, [r7, #0]
 8010ad6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	687a      	ldr	r2, [r7, #4]
 8010adc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	1c5a      	adds	r2, r3, #1
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	601a      	str	r2, [r3, #0]
}
 8010ae8:	bf00      	nop
 8010aea:	3714      	adds	r7, #20
 8010aec:	46bd      	mov	sp, r7
 8010aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af2:	4770      	bx	lr

08010af4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010af4:	b480      	push	{r7}
 8010af6:	b085      	sub	sp, #20
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	691b      	ldr	r3, [r3, #16]
 8010b00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	687a      	ldr	r2, [r7, #4]
 8010b08:	6892      	ldr	r2, [r2, #8]
 8010b0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	689b      	ldr	r3, [r3, #8]
 8010b10:	687a      	ldr	r2, [r7, #4]
 8010b12:	6852      	ldr	r2, [r2, #4]
 8010b14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	685b      	ldr	r3, [r3, #4]
 8010b1a:	687a      	ldr	r2, [r7, #4]
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	d103      	bne.n	8010b28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	689a      	ldr	r2, [r3, #8]
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	1e5a      	subs	r2, r3, #1
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3714      	adds	r7, #20
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr

08010b48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b084      	sub	sp, #16
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d10b      	bne.n	8010b74 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b60:	b672      	cpsid	i
 8010b62:	f383 8811 	msr	BASEPRI, r3
 8010b66:	f3bf 8f6f 	isb	sy
 8010b6a:	f3bf 8f4f 	dsb	sy
 8010b6e:	b662      	cpsie	i
 8010b70:	60bb      	str	r3, [r7, #8]
 8010b72:	e7fe      	b.n	8010b72 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8010b74:	f002 f9d0 	bl	8012f18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	681a      	ldr	r2, [r3, #0]
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b80:	68f9      	ldr	r1, [r7, #12]
 8010b82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010b84:	fb01 f303 	mul.w	r3, r1, r3
 8010b88:	441a      	add	r2, r3
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	2200      	movs	r2, #0
 8010b92:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	681a      	ldr	r2, [r3, #0]
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	681a      	ldr	r2, [r3, #0]
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ba4:	3b01      	subs	r3, #1
 8010ba6:	68f9      	ldr	r1, [r7, #12]
 8010ba8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010baa:	fb01 f303 	mul.w	r3, r1, r3
 8010bae:	441a      	add	r2, r3
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	22ff      	movs	r2, #255	; 0xff
 8010bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	22ff      	movs	r2, #255	; 0xff
 8010bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d114      	bne.n	8010bf4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	691b      	ldr	r3, [r3, #16]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d01a      	beq.n	8010c08 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	3310      	adds	r3, #16
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f001 f98a 	bl	8011ef0 <xTaskRemoveFromEventList>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d012      	beq.n	8010c08 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010be2:	4b0d      	ldr	r3, [pc, #52]	; (8010c18 <xQueueGenericReset+0xd0>)
 8010be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010be8:	601a      	str	r2, [r3, #0]
 8010bea:	f3bf 8f4f 	dsb	sy
 8010bee:	f3bf 8f6f 	isb	sy
 8010bf2:	e009      	b.n	8010c08 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	3310      	adds	r3, #16
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7ff fef1 	bl	80109e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	3324      	adds	r3, #36	; 0x24
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7ff feec 	bl	80109e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010c08:	f002 f9b8 	bl	8012f7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010c0c:	2301      	movs	r3, #1
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	3710      	adds	r7, #16
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}
 8010c16:	bf00      	nop
 8010c18:	e000ed04 	.word	0xe000ed04

08010c1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b08e      	sub	sp, #56	; 0x38
 8010c20:	af02      	add	r7, sp, #8
 8010c22:	60f8      	str	r0, [r7, #12]
 8010c24:	60b9      	str	r1, [r7, #8]
 8010c26:	607a      	str	r2, [r7, #4]
 8010c28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d10b      	bne.n	8010c48 <xQueueGenericCreateStatic+0x2c>
 8010c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c34:	b672      	cpsid	i
 8010c36:	f383 8811 	msr	BASEPRI, r3
 8010c3a:	f3bf 8f6f 	isb	sy
 8010c3e:	f3bf 8f4f 	dsb	sy
 8010c42:	b662      	cpsie	i
 8010c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c46:	e7fe      	b.n	8010c46 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d10b      	bne.n	8010c66 <xQueueGenericCreateStatic+0x4a>
 8010c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c52:	b672      	cpsid	i
 8010c54:	f383 8811 	msr	BASEPRI, r3
 8010c58:	f3bf 8f6f 	isb	sy
 8010c5c:	f3bf 8f4f 	dsb	sy
 8010c60:	b662      	cpsie	i
 8010c62:	627b      	str	r3, [r7, #36]	; 0x24
 8010c64:	e7fe      	b.n	8010c64 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d002      	beq.n	8010c72 <xQueueGenericCreateStatic+0x56>
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d001      	beq.n	8010c76 <xQueueGenericCreateStatic+0x5a>
 8010c72:	2301      	movs	r3, #1
 8010c74:	e000      	b.n	8010c78 <xQueueGenericCreateStatic+0x5c>
 8010c76:	2300      	movs	r3, #0
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d10b      	bne.n	8010c94 <xQueueGenericCreateStatic+0x78>
 8010c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c80:	b672      	cpsid	i
 8010c82:	f383 8811 	msr	BASEPRI, r3
 8010c86:	f3bf 8f6f 	isb	sy
 8010c8a:	f3bf 8f4f 	dsb	sy
 8010c8e:	b662      	cpsie	i
 8010c90:	623b      	str	r3, [r7, #32]
 8010c92:	e7fe      	b.n	8010c92 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d102      	bne.n	8010ca0 <xQueueGenericCreateStatic+0x84>
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d101      	bne.n	8010ca4 <xQueueGenericCreateStatic+0x88>
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	e000      	b.n	8010ca6 <xQueueGenericCreateStatic+0x8a>
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d10b      	bne.n	8010cc2 <xQueueGenericCreateStatic+0xa6>
 8010caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cae:	b672      	cpsid	i
 8010cb0:	f383 8811 	msr	BASEPRI, r3
 8010cb4:	f3bf 8f6f 	isb	sy
 8010cb8:	f3bf 8f4f 	dsb	sy
 8010cbc:	b662      	cpsie	i
 8010cbe:	61fb      	str	r3, [r7, #28]
 8010cc0:	e7fe      	b.n	8010cc0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010cc2:	2350      	movs	r3, #80	; 0x50
 8010cc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	2b50      	cmp	r3, #80	; 0x50
 8010cca:	d00b      	beq.n	8010ce4 <xQueueGenericCreateStatic+0xc8>
 8010ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd0:	b672      	cpsid	i
 8010cd2:	f383 8811 	msr	BASEPRI, r3
 8010cd6:	f3bf 8f6f 	isb	sy
 8010cda:	f3bf 8f4f 	dsb	sy
 8010cde:	b662      	cpsie	i
 8010ce0:	61bb      	str	r3, [r7, #24]
 8010ce2:	e7fe      	b.n	8010ce2 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010ce4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d00d      	beq.n	8010d0c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010cf8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cfe:	9300      	str	r3, [sp, #0]
 8010d00:	4613      	mov	r3, r2
 8010d02:	687a      	ldr	r2, [r7, #4]
 8010d04:	68b9      	ldr	r1, [r7, #8]
 8010d06:	68f8      	ldr	r0, [r7, #12]
 8010d08:	f000 f805 	bl	8010d16 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3730      	adds	r7, #48	; 0x30
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}

08010d16 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010d16:	b580      	push	{r7, lr}
 8010d18:	b084      	sub	sp, #16
 8010d1a:	af00      	add	r7, sp, #0
 8010d1c:	60f8      	str	r0, [r7, #12]
 8010d1e:	60b9      	str	r1, [r7, #8]
 8010d20:	607a      	str	r2, [r7, #4]
 8010d22:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d103      	bne.n	8010d32 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010d2a:	69bb      	ldr	r3, [r7, #24]
 8010d2c:	69ba      	ldr	r2, [r7, #24]
 8010d2e:	601a      	str	r2, [r3, #0]
 8010d30:	e002      	b.n	8010d38 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010d32:	69bb      	ldr	r3, [r7, #24]
 8010d34:	687a      	ldr	r2, [r7, #4]
 8010d36:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010d38:	69bb      	ldr	r3, [r7, #24]
 8010d3a:	68fa      	ldr	r2, [r7, #12]
 8010d3c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010d3e:	69bb      	ldr	r3, [r7, #24]
 8010d40:	68ba      	ldr	r2, [r7, #8]
 8010d42:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010d44:	2101      	movs	r1, #1
 8010d46:	69b8      	ldr	r0, [r7, #24]
 8010d48:	f7ff fefe 	bl	8010b48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010d4c:	69bb      	ldr	r3, [r7, #24]
 8010d4e:	78fa      	ldrb	r2, [r7, #3]
 8010d50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010d54:	bf00      	nop
 8010d56:	3710      	adds	r7, #16
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}

08010d5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b08e      	sub	sp, #56	; 0x38
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	60f8      	str	r0, [r7, #12]
 8010d64:	60b9      	str	r1, [r7, #8]
 8010d66:	607a      	str	r2, [r7, #4]
 8010d68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d10b      	bne.n	8010d90 <xQueueGenericSend+0x34>
 8010d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d7c:	b672      	cpsid	i
 8010d7e:	f383 8811 	msr	BASEPRI, r3
 8010d82:	f3bf 8f6f 	isb	sy
 8010d86:	f3bf 8f4f 	dsb	sy
 8010d8a:	b662      	cpsie	i
 8010d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d8e:	e7fe      	b.n	8010d8e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d103      	bne.n	8010d9e <xQueueGenericSend+0x42>
 8010d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d101      	bne.n	8010da2 <xQueueGenericSend+0x46>
 8010d9e:	2301      	movs	r3, #1
 8010da0:	e000      	b.n	8010da4 <xQueueGenericSend+0x48>
 8010da2:	2300      	movs	r3, #0
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d10b      	bne.n	8010dc0 <xQueueGenericSend+0x64>
 8010da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dac:	b672      	cpsid	i
 8010dae:	f383 8811 	msr	BASEPRI, r3
 8010db2:	f3bf 8f6f 	isb	sy
 8010db6:	f3bf 8f4f 	dsb	sy
 8010dba:	b662      	cpsie	i
 8010dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8010dbe:	e7fe      	b.n	8010dbe <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	2b02      	cmp	r3, #2
 8010dc4:	d103      	bne.n	8010dce <xQueueGenericSend+0x72>
 8010dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dca:	2b01      	cmp	r3, #1
 8010dcc:	d101      	bne.n	8010dd2 <xQueueGenericSend+0x76>
 8010dce:	2301      	movs	r3, #1
 8010dd0:	e000      	b.n	8010dd4 <xQueueGenericSend+0x78>
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d10b      	bne.n	8010df0 <xQueueGenericSend+0x94>
 8010dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ddc:	b672      	cpsid	i
 8010dde:	f383 8811 	msr	BASEPRI, r3
 8010de2:	f3bf 8f6f 	isb	sy
 8010de6:	f3bf 8f4f 	dsb	sy
 8010dea:	b662      	cpsie	i
 8010dec:	623b      	str	r3, [r7, #32]
 8010dee:	e7fe      	b.n	8010dee <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010df0:	f001 fa3c 	bl	801226c <xTaskGetSchedulerState>
 8010df4:	4603      	mov	r3, r0
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d102      	bne.n	8010e00 <xQueueGenericSend+0xa4>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d101      	bne.n	8010e04 <xQueueGenericSend+0xa8>
 8010e00:	2301      	movs	r3, #1
 8010e02:	e000      	b.n	8010e06 <xQueueGenericSend+0xaa>
 8010e04:	2300      	movs	r3, #0
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d10b      	bne.n	8010e22 <xQueueGenericSend+0xc6>
 8010e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e0e:	b672      	cpsid	i
 8010e10:	f383 8811 	msr	BASEPRI, r3
 8010e14:	f3bf 8f6f 	isb	sy
 8010e18:	f3bf 8f4f 	dsb	sy
 8010e1c:	b662      	cpsie	i
 8010e1e:	61fb      	str	r3, [r7, #28]
 8010e20:	e7fe      	b.n	8010e20 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010e22:	f002 f879 	bl	8012f18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d302      	bcc.n	8010e38 <xQueueGenericSend+0xdc>
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	2b02      	cmp	r3, #2
 8010e36:	d129      	bne.n	8010e8c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010e38:	683a      	ldr	r2, [r7, #0]
 8010e3a:	68b9      	ldr	r1, [r7, #8]
 8010e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e3e:	f000 fa0d 	bl	801125c <prvCopyDataToQueue>
 8010e42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d010      	beq.n	8010e6e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e4e:	3324      	adds	r3, #36	; 0x24
 8010e50:	4618      	mov	r0, r3
 8010e52:	f001 f84d 	bl	8011ef0 <xTaskRemoveFromEventList>
 8010e56:	4603      	mov	r3, r0
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d013      	beq.n	8010e84 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010e5c:	4b3f      	ldr	r3, [pc, #252]	; (8010f5c <xQueueGenericSend+0x200>)
 8010e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e62:	601a      	str	r2, [r3, #0]
 8010e64:	f3bf 8f4f 	dsb	sy
 8010e68:	f3bf 8f6f 	isb	sy
 8010e6c:	e00a      	b.n	8010e84 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d007      	beq.n	8010e84 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010e74:	4b39      	ldr	r3, [pc, #228]	; (8010f5c <xQueueGenericSend+0x200>)
 8010e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e7a:	601a      	str	r2, [r3, #0]
 8010e7c:	f3bf 8f4f 	dsb	sy
 8010e80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010e84:	f002 f87a 	bl	8012f7c <vPortExitCritical>
				return pdPASS;
 8010e88:	2301      	movs	r3, #1
 8010e8a:	e063      	b.n	8010f54 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d103      	bne.n	8010e9a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010e92:	f002 f873 	bl	8012f7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010e96:	2300      	movs	r3, #0
 8010e98:	e05c      	b.n	8010f54 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d106      	bne.n	8010eae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010ea0:	f107 0314 	add.w	r3, r7, #20
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f001 f887 	bl	8011fb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010eaa:	2301      	movs	r3, #1
 8010eac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010eae:	f002 f865 	bl	8012f7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010eb2:	f000 fdf7 	bl	8011aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010eb6:	f002 f82f 	bl	8012f18 <vPortEnterCritical>
 8010eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ec0:	b25b      	sxtb	r3, r3
 8010ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ec6:	d103      	bne.n	8010ed0 <xQueueGenericSend+0x174>
 8010ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eca:	2200      	movs	r2, #0
 8010ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ed6:	b25b      	sxtb	r3, r3
 8010ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010edc:	d103      	bne.n	8010ee6 <xQueueGenericSend+0x18a>
 8010ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010ee6:	f002 f849 	bl	8012f7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010eea:	1d3a      	adds	r2, r7, #4
 8010eec:	f107 0314 	add.w	r3, r7, #20
 8010ef0:	4611      	mov	r1, r2
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f001 f876 	bl	8011fe4 <xTaskCheckForTimeOut>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d124      	bne.n	8010f48 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f00:	f000 faa4 	bl	801144c <prvIsQueueFull>
 8010f04:	4603      	mov	r3, r0
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d018      	beq.n	8010f3c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0c:	3310      	adds	r3, #16
 8010f0e:	687a      	ldr	r2, [r7, #4]
 8010f10:	4611      	mov	r1, r2
 8010f12:	4618      	mov	r0, r3
 8010f14:	f000 ff9a 	bl	8011e4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f1a:	f000 fa2f 	bl	801137c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010f1e:	f000 fdcf 	bl	8011ac0 <xTaskResumeAll>
 8010f22:	4603      	mov	r3, r0
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	f47f af7c 	bne.w	8010e22 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010f2a:	4b0c      	ldr	r3, [pc, #48]	; (8010f5c <xQueueGenericSend+0x200>)
 8010f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f30:	601a      	str	r2, [r3, #0]
 8010f32:	f3bf 8f4f 	dsb	sy
 8010f36:	f3bf 8f6f 	isb	sy
 8010f3a:	e772      	b.n	8010e22 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f3e:	f000 fa1d 	bl	801137c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010f42:	f000 fdbd 	bl	8011ac0 <xTaskResumeAll>
 8010f46:	e76c      	b.n	8010e22 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f4a:	f000 fa17 	bl	801137c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010f4e:	f000 fdb7 	bl	8011ac0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010f52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	3738      	adds	r7, #56	; 0x38
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}
 8010f5c:	e000ed04 	.word	0xe000ed04

08010f60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b08e      	sub	sp, #56	; 0x38
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	60f8      	str	r0, [r7, #12]
 8010f68:	60b9      	str	r1, [r7, #8]
 8010f6a:	607a      	str	r2, [r7, #4]
 8010f6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d10b      	bne.n	8010f90 <xQueueGenericSendFromISR+0x30>
 8010f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f7c:	b672      	cpsid	i
 8010f7e:	f383 8811 	msr	BASEPRI, r3
 8010f82:	f3bf 8f6f 	isb	sy
 8010f86:	f3bf 8f4f 	dsb	sy
 8010f8a:	b662      	cpsie	i
 8010f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8010f8e:	e7fe      	b.n	8010f8e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d103      	bne.n	8010f9e <xQueueGenericSendFromISR+0x3e>
 8010f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d101      	bne.n	8010fa2 <xQueueGenericSendFromISR+0x42>
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	e000      	b.n	8010fa4 <xQueueGenericSendFromISR+0x44>
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d10b      	bne.n	8010fc0 <xQueueGenericSendFromISR+0x60>
 8010fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fac:	b672      	cpsid	i
 8010fae:	f383 8811 	msr	BASEPRI, r3
 8010fb2:	f3bf 8f6f 	isb	sy
 8010fb6:	f3bf 8f4f 	dsb	sy
 8010fba:	b662      	cpsie	i
 8010fbc:	623b      	str	r3, [r7, #32]
 8010fbe:	e7fe      	b.n	8010fbe <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	2b02      	cmp	r3, #2
 8010fc4:	d103      	bne.n	8010fce <xQueueGenericSendFromISR+0x6e>
 8010fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fca:	2b01      	cmp	r3, #1
 8010fcc:	d101      	bne.n	8010fd2 <xQueueGenericSendFromISR+0x72>
 8010fce:	2301      	movs	r3, #1
 8010fd0:	e000      	b.n	8010fd4 <xQueueGenericSendFromISR+0x74>
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d10b      	bne.n	8010ff0 <xQueueGenericSendFromISR+0x90>
 8010fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fdc:	b672      	cpsid	i
 8010fde:	f383 8811 	msr	BASEPRI, r3
 8010fe2:	f3bf 8f6f 	isb	sy
 8010fe6:	f3bf 8f4f 	dsb	sy
 8010fea:	b662      	cpsie	i
 8010fec:	61fb      	str	r3, [r7, #28]
 8010fee:	e7fe      	b.n	8010fee <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010ff0:	f002 f872 	bl	80130d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010ff4:	f3ef 8211 	mrs	r2, BASEPRI
 8010ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ffc:	b672      	cpsid	i
 8010ffe:	f383 8811 	msr	BASEPRI, r3
 8011002:	f3bf 8f6f 	isb	sy
 8011006:	f3bf 8f4f 	dsb	sy
 801100a:	b662      	cpsie	i
 801100c:	61ba      	str	r2, [r7, #24]
 801100e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011010:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011012:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801101a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801101c:	429a      	cmp	r2, r3
 801101e:	d302      	bcc.n	8011026 <xQueueGenericSendFromISR+0xc6>
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	2b02      	cmp	r3, #2
 8011024:	d12c      	bne.n	8011080 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801102c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011030:	683a      	ldr	r2, [r7, #0]
 8011032:	68b9      	ldr	r1, [r7, #8]
 8011034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011036:	f000 f911 	bl	801125c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801103a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801103e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011042:	d112      	bne.n	801106a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011048:	2b00      	cmp	r3, #0
 801104a:	d016      	beq.n	801107a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801104c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801104e:	3324      	adds	r3, #36	; 0x24
 8011050:	4618      	mov	r0, r3
 8011052:	f000 ff4d 	bl	8011ef0 <xTaskRemoveFromEventList>
 8011056:	4603      	mov	r3, r0
 8011058:	2b00      	cmp	r3, #0
 801105a:	d00e      	beq.n	801107a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d00b      	beq.n	801107a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2201      	movs	r2, #1
 8011066:	601a      	str	r2, [r3, #0]
 8011068:	e007      	b.n	801107a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801106a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801106e:	3301      	adds	r3, #1
 8011070:	b2db      	uxtb	r3, r3
 8011072:	b25a      	sxtb	r2, r3
 8011074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801107a:	2301      	movs	r3, #1
 801107c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801107e:	e001      	b.n	8011084 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011080:	2300      	movs	r3, #0
 8011082:	637b      	str	r3, [r7, #52]	; 0x34
 8011084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011086:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011088:	693b      	ldr	r3, [r7, #16]
 801108a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801108e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011090:	4618      	mov	r0, r3
 8011092:	3738      	adds	r7, #56	; 0x38
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}

08011098 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b08c      	sub	sp, #48	; 0x30
 801109c:	af00      	add	r7, sp, #0
 801109e:	60f8      	str	r0, [r7, #12]
 80110a0:	60b9      	str	r1, [r7, #8]
 80110a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80110a4:	2300      	movs	r3, #0
 80110a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80110ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d10b      	bne.n	80110ca <xQueueReceive+0x32>
	__asm volatile
 80110b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b6:	b672      	cpsid	i
 80110b8:	f383 8811 	msr	BASEPRI, r3
 80110bc:	f3bf 8f6f 	isb	sy
 80110c0:	f3bf 8f4f 	dsb	sy
 80110c4:	b662      	cpsie	i
 80110c6:	623b      	str	r3, [r7, #32]
 80110c8:	e7fe      	b.n	80110c8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d103      	bne.n	80110d8 <xQueueReceive+0x40>
 80110d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d101      	bne.n	80110dc <xQueueReceive+0x44>
 80110d8:	2301      	movs	r3, #1
 80110da:	e000      	b.n	80110de <xQueueReceive+0x46>
 80110dc:	2300      	movs	r3, #0
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d10b      	bne.n	80110fa <xQueueReceive+0x62>
 80110e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e6:	b672      	cpsid	i
 80110e8:	f383 8811 	msr	BASEPRI, r3
 80110ec:	f3bf 8f6f 	isb	sy
 80110f0:	f3bf 8f4f 	dsb	sy
 80110f4:	b662      	cpsie	i
 80110f6:	61fb      	str	r3, [r7, #28]
 80110f8:	e7fe      	b.n	80110f8 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80110fa:	f001 f8b7 	bl	801226c <xTaskGetSchedulerState>
 80110fe:	4603      	mov	r3, r0
 8011100:	2b00      	cmp	r3, #0
 8011102:	d102      	bne.n	801110a <xQueueReceive+0x72>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d101      	bne.n	801110e <xQueueReceive+0x76>
 801110a:	2301      	movs	r3, #1
 801110c:	e000      	b.n	8011110 <xQueueReceive+0x78>
 801110e:	2300      	movs	r3, #0
 8011110:	2b00      	cmp	r3, #0
 8011112:	d10b      	bne.n	801112c <xQueueReceive+0x94>
 8011114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011118:	b672      	cpsid	i
 801111a:	f383 8811 	msr	BASEPRI, r3
 801111e:	f3bf 8f6f 	isb	sy
 8011122:	f3bf 8f4f 	dsb	sy
 8011126:	b662      	cpsie	i
 8011128:	61bb      	str	r3, [r7, #24]
 801112a:	e7fe      	b.n	801112a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801112c:	f001 fef4 	bl	8012f18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011134:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011138:	2b00      	cmp	r3, #0
 801113a:	d01f      	beq.n	801117c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801113c:	68b9      	ldr	r1, [r7, #8]
 801113e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011140:	f000 f8f6 	bl	8011330 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011146:	1e5a      	subs	r2, r3, #1
 8011148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801114a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801114e:	691b      	ldr	r3, [r3, #16]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d00f      	beq.n	8011174 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011156:	3310      	adds	r3, #16
 8011158:	4618      	mov	r0, r3
 801115a:	f000 fec9 	bl	8011ef0 <xTaskRemoveFromEventList>
 801115e:	4603      	mov	r3, r0
 8011160:	2b00      	cmp	r3, #0
 8011162:	d007      	beq.n	8011174 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011164:	4b3c      	ldr	r3, [pc, #240]	; (8011258 <xQueueReceive+0x1c0>)
 8011166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801116a:	601a      	str	r2, [r3, #0]
 801116c:	f3bf 8f4f 	dsb	sy
 8011170:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011174:	f001 ff02 	bl	8012f7c <vPortExitCritical>
				return pdPASS;
 8011178:	2301      	movs	r3, #1
 801117a:	e069      	b.n	8011250 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d103      	bne.n	801118a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011182:	f001 fefb 	bl	8012f7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011186:	2300      	movs	r3, #0
 8011188:	e062      	b.n	8011250 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801118c:	2b00      	cmp	r3, #0
 801118e:	d106      	bne.n	801119e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011190:	f107 0310 	add.w	r3, r7, #16
 8011194:	4618      	mov	r0, r3
 8011196:	f000 ff0f 	bl	8011fb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801119a:	2301      	movs	r3, #1
 801119c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801119e:	f001 feed 	bl	8012f7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80111a2:	f000 fc7f 	bl	8011aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80111a6:	f001 feb7 	bl	8012f18 <vPortEnterCritical>
 80111aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111b0:	b25b      	sxtb	r3, r3
 80111b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111b6:	d103      	bne.n	80111c0 <xQueueReceive+0x128>
 80111b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ba:	2200      	movs	r2, #0
 80111bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80111c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80111c6:	b25b      	sxtb	r3, r3
 80111c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111cc:	d103      	bne.n	80111d6 <xQueueReceive+0x13e>
 80111ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111d0:	2200      	movs	r2, #0
 80111d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80111d6:	f001 fed1 	bl	8012f7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80111da:	1d3a      	adds	r2, r7, #4
 80111dc:	f107 0310 	add.w	r3, r7, #16
 80111e0:	4611      	mov	r1, r2
 80111e2:	4618      	mov	r0, r3
 80111e4:	f000 fefe 	bl	8011fe4 <xTaskCheckForTimeOut>
 80111e8:	4603      	mov	r3, r0
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d123      	bne.n	8011236 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80111ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80111f0:	f000 f916 	bl	8011420 <prvIsQueueEmpty>
 80111f4:	4603      	mov	r3, r0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d017      	beq.n	801122a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80111fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111fc:	3324      	adds	r3, #36	; 0x24
 80111fe:	687a      	ldr	r2, [r7, #4]
 8011200:	4611      	mov	r1, r2
 8011202:	4618      	mov	r0, r3
 8011204:	f000 fe22 	bl	8011e4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801120a:	f000 f8b7 	bl	801137c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801120e:	f000 fc57 	bl	8011ac0 <xTaskResumeAll>
 8011212:	4603      	mov	r3, r0
 8011214:	2b00      	cmp	r3, #0
 8011216:	d189      	bne.n	801112c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8011218:	4b0f      	ldr	r3, [pc, #60]	; (8011258 <xQueueReceive+0x1c0>)
 801121a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801121e:	601a      	str	r2, [r3, #0]
 8011220:	f3bf 8f4f 	dsb	sy
 8011224:	f3bf 8f6f 	isb	sy
 8011228:	e780      	b.n	801112c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801122a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801122c:	f000 f8a6 	bl	801137c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011230:	f000 fc46 	bl	8011ac0 <xTaskResumeAll>
 8011234:	e77a      	b.n	801112c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011238:	f000 f8a0 	bl	801137c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801123c:	f000 fc40 	bl	8011ac0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011242:	f000 f8ed 	bl	8011420 <prvIsQueueEmpty>
 8011246:	4603      	mov	r3, r0
 8011248:	2b00      	cmp	r3, #0
 801124a:	f43f af6f 	beq.w	801112c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801124e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011250:	4618      	mov	r0, r3
 8011252:	3730      	adds	r7, #48	; 0x30
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	e000ed04 	.word	0xe000ed04

0801125c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b086      	sub	sp, #24
 8011260:	af00      	add	r7, sp, #0
 8011262:	60f8      	str	r0, [r7, #12]
 8011264:	60b9      	str	r1, [r7, #8]
 8011266:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011268:	2300      	movs	r3, #0
 801126a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011270:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011276:	2b00      	cmp	r3, #0
 8011278:	d10d      	bne.n	8011296 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d14d      	bne.n	801131e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	689b      	ldr	r3, [r3, #8]
 8011286:	4618      	mov	r0, r3
 8011288:	f001 f80e 	bl	80122a8 <xTaskPriorityDisinherit>
 801128c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	2200      	movs	r2, #0
 8011292:	609a      	str	r2, [r3, #8]
 8011294:	e043      	b.n	801131e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d119      	bne.n	80112d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	6858      	ldr	r0, [r3, #4]
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112a4:	461a      	mov	r2, r3
 80112a6:	68b9      	ldr	r1, [r7, #8]
 80112a8:	f002 f964 	bl	8013574 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	685a      	ldr	r2, [r3, #4]
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112b4:	441a      	add	r2, r3
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	685a      	ldr	r2, [r3, #4]
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	689b      	ldr	r3, [r3, #8]
 80112c2:	429a      	cmp	r2, r3
 80112c4:	d32b      	bcc.n	801131e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	681a      	ldr	r2, [r3, #0]
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	605a      	str	r2, [r3, #4]
 80112ce:	e026      	b.n	801131e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	68d8      	ldr	r0, [r3, #12]
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112d8:	461a      	mov	r2, r3
 80112da:	68b9      	ldr	r1, [r7, #8]
 80112dc:	f002 f94a 	bl	8013574 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	68da      	ldr	r2, [r3, #12]
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112e8:	425b      	negs	r3, r3
 80112ea:	441a      	add	r2, r3
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	68da      	ldr	r2, [r3, #12]
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d207      	bcs.n	801130c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	689a      	ldr	r2, [r3, #8]
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011304:	425b      	negs	r3, r3
 8011306:	441a      	add	r2, r3
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2b02      	cmp	r3, #2
 8011310:	d105      	bne.n	801131e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011312:	693b      	ldr	r3, [r7, #16]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d002      	beq.n	801131e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	3b01      	subs	r3, #1
 801131c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801131e:	693b      	ldr	r3, [r7, #16]
 8011320:	1c5a      	adds	r2, r3, #1
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011326:	697b      	ldr	r3, [r7, #20]
}
 8011328:	4618      	mov	r0, r3
 801132a:	3718      	adds	r7, #24
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}

08011330 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b082      	sub	sp, #8
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
 8011338:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801133e:	2b00      	cmp	r3, #0
 8011340:	d018      	beq.n	8011374 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	68da      	ldr	r2, [r3, #12]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801134a:	441a      	add	r2, r3
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	68da      	ldr	r2, [r3, #12]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	689b      	ldr	r3, [r3, #8]
 8011358:	429a      	cmp	r2, r3
 801135a:	d303      	bcc.n	8011364 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681a      	ldr	r2, [r3, #0]
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	68d9      	ldr	r1, [r3, #12]
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801136c:	461a      	mov	r2, r3
 801136e:	6838      	ldr	r0, [r7, #0]
 8011370:	f002 f900 	bl	8013574 <memcpy>
	}
}
 8011374:	bf00      	nop
 8011376:	3708      	adds	r7, #8
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}

0801137c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b084      	sub	sp, #16
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011384:	f001 fdc8 	bl	8012f18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801138e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011390:	e011      	b.n	80113b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011396:	2b00      	cmp	r3, #0
 8011398:	d012      	beq.n	80113c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	3324      	adds	r3, #36	; 0x24
 801139e:	4618      	mov	r0, r3
 80113a0:	f000 fda6 	bl	8011ef0 <xTaskRemoveFromEventList>
 80113a4:	4603      	mov	r3, r0
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d001      	beq.n	80113ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80113aa:	f000 fe7f 	bl	80120ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80113ae:	7bfb      	ldrb	r3, [r7, #15]
 80113b0:	3b01      	subs	r3, #1
 80113b2:	b2db      	uxtb	r3, r3
 80113b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80113b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	dce9      	bgt.n	8011392 <prvUnlockQueue+0x16>
 80113be:	e000      	b.n	80113c2 <prvUnlockQueue+0x46>
					break;
 80113c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	22ff      	movs	r2, #255	; 0xff
 80113c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80113ca:	f001 fdd7 	bl	8012f7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80113ce:	f001 fda3 	bl	8012f18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80113d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80113da:	e011      	b.n	8011400 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	691b      	ldr	r3, [r3, #16]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d012      	beq.n	801140a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	3310      	adds	r3, #16
 80113e8:	4618      	mov	r0, r3
 80113ea:	f000 fd81 	bl	8011ef0 <xTaskRemoveFromEventList>
 80113ee:	4603      	mov	r3, r0
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d001      	beq.n	80113f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80113f4:	f000 fe5a 	bl	80120ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80113f8:	7bbb      	ldrb	r3, [r7, #14]
 80113fa:	3b01      	subs	r3, #1
 80113fc:	b2db      	uxtb	r3, r3
 80113fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011404:	2b00      	cmp	r3, #0
 8011406:	dce9      	bgt.n	80113dc <prvUnlockQueue+0x60>
 8011408:	e000      	b.n	801140c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801140a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	22ff      	movs	r2, #255	; 0xff
 8011410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011414:	f001 fdb2 	bl	8012f7c <vPortExitCritical>
}
 8011418:	bf00      	nop
 801141a:	3710      	adds	r7, #16
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}

08011420 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b084      	sub	sp, #16
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011428:	f001 fd76 	bl	8012f18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011430:	2b00      	cmp	r3, #0
 8011432:	d102      	bne.n	801143a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011434:	2301      	movs	r3, #1
 8011436:	60fb      	str	r3, [r7, #12]
 8011438:	e001      	b.n	801143e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801143a:	2300      	movs	r3, #0
 801143c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801143e:	f001 fd9d 	bl	8012f7c <vPortExitCritical>

	return xReturn;
 8011442:	68fb      	ldr	r3, [r7, #12]
}
 8011444:	4618      	mov	r0, r3
 8011446:	3710      	adds	r7, #16
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}

0801144c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b084      	sub	sp, #16
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011454:	f001 fd60 	bl	8012f18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011460:	429a      	cmp	r2, r3
 8011462:	d102      	bne.n	801146a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011464:	2301      	movs	r3, #1
 8011466:	60fb      	str	r3, [r7, #12]
 8011468:	e001      	b.n	801146e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801146a:	2300      	movs	r3, #0
 801146c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801146e:	f001 fd85 	bl	8012f7c <vPortExitCritical>

	return xReturn;
 8011472:	68fb      	ldr	r3, [r7, #12]
}
 8011474:	4618      	mov	r0, r3
 8011476:	3710      	adds	r7, #16
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}

0801147c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801147c:	b480      	push	{r7}
 801147e:	b085      	sub	sp, #20
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
 8011484:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011486:	2300      	movs	r3, #0
 8011488:	60fb      	str	r3, [r7, #12]
 801148a:	e014      	b.n	80114b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801148c:	4a0e      	ldr	r2, [pc, #56]	; (80114c8 <vQueueAddToRegistry+0x4c>)
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d10b      	bne.n	80114b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011498:	490b      	ldr	r1, [pc, #44]	; (80114c8 <vQueueAddToRegistry+0x4c>)
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	683a      	ldr	r2, [r7, #0]
 801149e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80114a2:	4a09      	ldr	r2, [pc, #36]	; (80114c8 <vQueueAddToRegistry+0x4c>)
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	00db      	lsls	r3, r3, #3
 80114a8:	4413      	add	r3, r2
 80114aa:	687a      	ldr	r2, [r7, #4]
 80114ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80114ae:	e005      	b.n	80114bc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	3301      	adds	r3, #1
 80114b4:	60fb      	str	r3, [r7, #12]
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	2b07      	cmp	r3, #7
 80114ba:	d9e7      	bls.n	801148c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80114bc:	bf00      	nop
 80114be:	3714      	adds	r7, #20
 80114c0:	46bd      	mov	sp, r7
 80114c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c6:	4770      	bx	lr
 80114c8:	20030fe0 	.word	0x20030fe0

080114cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b086      	sub	sp, #24
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	60f8      	str	r0, [r7, #12]
 80114d4:	60b9      	str	r1, [r7, #8]
 80114d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80114dc:	f001 fd1c 	bl	8012f18 <vPortEnterCritical>
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80114e6:	b25b      	sxtb	r3, r3
 80114e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114ec:	d103      	bne.n	80114f6 <vQueueWaitForMessageRestricted+0x2a>
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	2200      	movs	r2, #0
 80114f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80114fc:	b25b      	sxtb	r3, r3
 80114fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011502:	d103      	bne.n	801150c <vQueueWaitForMessageRestricted+0x40>
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	2200      	movs	r2, #0
 8011508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801150c:	f001 fd36 	bl	8012f7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011514:	2b00      	cmp	r3, #0
 8011516:	d106      	bne.n	8011526 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	3324      	adds	r3, #36	; 0x24
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	68b9      	ldr	r1, [r7, #8]
 8011520:	4618      	mov	r0, r3
 8011522:	f000 fcb9 	bl	8011e98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011526:	6978      	ldr	r0, [r7, #20]
 8011528:	f7ff ff28 	bl	801137c <prvUnlockQueue>
	}
 801152c:	bf00      	nop
 801152e:	3718      	adds	r7, #24
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}

08011534 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011534:	b580      	push	{r7, lr}
 8011536:	b08e      	sub	sp, #56	; 0x38
 8011538:	af04      	add	r7, sp, #16
 801153a:	60f8      	str	r0, [r7, #12]
 801153c:	60b9      	str	r1, [r7, #8]
 801153e:	607a      	str	r2, [r7, #4]
 8011540:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011544:	2b00      	cmp	r3, #0
 8011546:	d10b      	bne.n	8011560 <xTaskCreateStatic+0x2c>
 8011548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801154c:	b672      	cpsid	i
 801154e:	f383 8811 	msr	BASEPRI, r3
 8011552:	f3bf 8f6f 	isb	sy
 8011556:	f3bf 8f4f 	dsb	sy
 801155a:	b662      	cpsie	i
 801155c:	623b      	str	r3, [r7, #32]
 801155e:	e7fe      	b.n	801155e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8011560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011562:	2b00      	cmp	r3, #0
 8011564:	d10b      	bne.n	801157e <xTaskCreateStatic+0x4a>
 8011566:	f04f 0350 	mov.w	r3, #80	; 0x50
 801156a:	b672      	cpsid	i
 801156c:	f383 8811 	msr	BASEPRI, r3
 8011570:	f3bf 8f6f 	isb	sy
 8011574:	f3bf 8f4f 	dsb	sy
 8011578:	b662      	cpsie	i
 801157a:	61fb      	str	r3, [r7, #28]
 801157c:	e7fe      	b.n	801157c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801157e:	235c      	movs	r3, #92	; 0x5c
 8011580:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	2b5c      	cmp	r3, #92	; 0x5c
 8011586:	d00b      	beq.n	80115a0 <xTaskCreateStatic+0x6c>
 8011588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801158c:	b672      	cpsid	i
 801158e:	f383 8811 	msr	BASEPRI, r3
 8011592:	f3bf 8f6f 	isb	sy
 8011596:	f3bf 8f4f 	dsb	sy
 801159a:	b662      	cpsie	i
 801159c:	61bb      	str	r3, [r7, #24]
 801159e:	e7fe      	b.n	801159e <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80115a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80115a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d01e      	beq.n	80115e6 <xTaskCreateStatic+0xb2>
 80115a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d01b      	beq.n	80115e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80115ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80115b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115b6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80115b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ba:	2202      	movs	r2, #2
 80115bc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80115c0:	2300      	movs	r3, #0
 80115c2:	9303      	str	r3, [sp, #12]
 80115c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c6:	9302      	str	r3, [sp, #8]
 80115c8:	f107 0314 	add.w	r3, r7, #20
 80115cc:	9301      	str	r3, [sp, #4]
 80115ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d0:	9300      	str	r3, [sp, #0]
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	687a      	ldr	r2, [r7, #4]
 80115d6:	68b9      	ldr	r1, [r7, #8]
 80115d8:	68f8      	ldr	r0, [r7, #12]
 80115da:	f000 f850 	bl	801167e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80115de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80115e0:	f000 f8de 	bl	80117a0 <prvAddNewTaskToReadyList>
 80115e4:	e001      	b.n	80115ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80115e6:	2300      	movs	r3, #0
 80115e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80115ea:	697b      	ldr	r3, [r7, #20]
	}
 80115ec:	4618      	mov	r0, r3
 80115ee:	3728      	adds	r7, #40	; 0x28
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b08c      	sub	sp, #48	; 0x30
 80115f8:	af04      	add	r7, sp, #16
 80115fa:	60f8      	str	r0, [r7, #12]
 80115fc:	60b9      	str	r1, [r7, #8]
 80115fe:	603b      	str	r3, [r7, #0]
 8011600:	4613      	mov	r3, r2
 8011602:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011604:	88fb      	ldrh	r3, [r7, #6]
 8011606:	009b      	lsls	r3, r3, #2
 8011608:	4618      	mov	r0, r3
 801160a:	f001 fda7 	bl	801315c <pvPortMalloc>
 801160e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011610:	697b      	ldr	r3, [r7, #20]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d00e      	beq.n	8011634 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011616:	205c      	movs	r0, #92	; 0x5c
 8011618:	f001 fda0 	bl	801315c <pvPortMalloc>
 801161c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801161e:	69fb      	ldr	r3, [r7, #28]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d003      	beq.n	801162c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011624:	69fb      	ldr	r3, [r7, #28]
 8011626:	697a      	ldr	r2, [r7, #20]
 8011628:	631a      	str	r2, [r3, #48]	; 0x30
 801162a:	e005      	b.n	8011638 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801162c:	6978      	ldr	r0, [r7, #20]
 801162e:	f001 fe5d 	bl	80132ec <vPortFree>
 8011632:	e001      	b.n	8011638 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011634:	2300      	movs	r3, #0
 8011636:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d017      	beq.n	801166e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801163e:	69fb      	ldr	r3, [r7, #28]
 8011640:	2200      	movs	r2, #0
 8011642:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011646:	88fa      	ldrh	r2, [r7, #6]
 8011648:	2300      	movs	r3, #0
 801164a:	9303      	str	r3, [sp, #12]
 801164c:	69fb      	ldr	r3, [r7, #28]
 801164e:	9302      	str	r3, [sp, #8]
 8011650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011652:	9301      	str	r3, [sp, #4]
 8011654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011656:	9300      	str	r3, [sp, #0]
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	68b9      	ldr	r1, [r7, #8]
 801165c:	68f8      	ldr	r0, [r7, #12]
 801165e:	f000 f80e 	bl	801167e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011662:	69f8      	ldr	r0, [r7, #28]
 8011664:	f000 f89c 	bl	80117a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011668:	2301      	movs	r3, #1
 801166a:	61bb      	str	r3, [r7, #24]
 801166c:	e002      	b.n	8011674 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801166e:	f04f 33ff 	mov.w	r3, #4294967295
 8011672:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011674:	69bb      	ldr	r3, [r7, #24]
	}
 8011676:	4618      	mov	r0, r3
 8011678:	3720      	adds	r7, #32
 801167a:	46bd      	mov	sp, r7
 801167c:	bd80      	pop	{r7, pc}

0801167e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801167e:	b580      	push	{r7, lr}
 8011680:	b088      	sub	sp, #32
 8011682:	af00      	add	r7, sp, #0
 8011684:	60f8      	str	r0, [r7, #12]
 8011686:	60b9      	str	r1, [r7, #8]
 8011688:	607a      	str	r2, [r7, #4]
 801168a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801168c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	009b      	lsls	r3, r3, #2
 8011694:	461a      	mov	r2, r3
 8011696:	21a5      	movs	r1, #165	; 0xa5
 8011698:	f001 ff77 	bl	801358a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801169c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801169e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80116a0:	6879      	ldr	r1, [r7, #4]
 80116a2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80116a6:	440b      	add	r3, r1
 80116a8:	009b      	lsls	r3, r3, #2
 80116aa:	4413      	add	r3, r2
 80116ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80116ae:	69bb      	ldr	r3, [r7, #24]
 80116b0:	f023 0307 	bic.w	r3, r3, #7
 80116b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80116b6:	69bb      	ldr	r3, [r7, #24]
 80116b8:	f003 0307 	and.w	r3, r3, #7
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d00b      	beq.n	80116d8 <prvInitialiseNewTask+0x5a>
 80116c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116c4:	b672      	cpsid	i
 80116c6:	f383 8811 	msr	BASEPRI, r3
 80116ca:	f3bf 8f6f 	isb	sy
 80116ce:	f3bf 8f4f 	dsb	sy
 80116d2:	b662      	cpsie	i
 80116d4:	617b      	str	r3, [r7, #20]
 80116d6:	e7fe      	b.n	80116d6 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d01f      	beq.n	801171e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80116de:	2300      	movs	r3, #0
 80116e0:	61fb      	str	r3, [r7, #28]
 80116e2:	e012      	b.n	801170a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80116e4:	68ba      	ldr	r2, [r7, #8]
 80116e6:	69fb      	ldr	r3, [r7, #28]
 80116e8:	4413      	add	r3, r2
 80116ea:	7819      	ldrb	r1, [r3, #0]
 80116ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116ee:	69fb      	ldr	r3, [r7, #28]
 80116f0:	4413      	add	r3, r2
 80116f2:	3334      	adds	r3, #52	; 0x34
 80116f4:	460a      	mov	r2, r1
 80116f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80116f8:	68ba      	ldr	r2, [r7, #8]
 80116fa:	69fb      	ldr	r3, [r7, #28]
 80116fc:	4413      	add	r3, r2
 80116fe:	781b      	ldrb	r3, [r3, #0]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d006      	beq.n	8011712 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	3301      	adds	r3, #1
 8011708:	61fb      	str	r3, [r7, #28]
 801170a:	69fb      	ldr	r3, [r7, #28]
 801170c:	2b0f      	cmp	r3, #15
 801170e:	d9e9      	bls.n	80116e4 <prvInitialiseNewTask+0x66>
 8011710:	e000      	b.n	8011714 <prvInitialiseNewTask+0x96>
			{
				break;
 8011712:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011716:	2200      	movs	r2, #0
 8011718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801171c:	e003      	b.n	8011726 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801171e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011720:	2200      	movs	r2, #0
 8011722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011728:	2b37      	cmp	r3, #55	; 0x37
 801172a:	d901      	bls.n	8011730 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801172c:	2337      	movs	r3, #55	; 0x37
 801172e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011734:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801173a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801173c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801173e:	2200      	movs	r2, #0
 8011740:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011744:	3304      	adds	r3, #4
 8011746:	4618      	mov	r0, r3
 8011748:	f7ff f96a 	bl	8010a20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801174c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801174e:	3318      	adds	r3, #24
 8011750:	4618      	mov	r0, r3
 8011752:	f7ff f965 	bl	8010a20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801175a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801175e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011764:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801176a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801176c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801176e:	2200      	movs	r2, #0
 8011770:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011774:	2200      	movs	r2, #0
 8011776:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801177a:	683a      	ldr	r2, [r7, #0]
 801177c:	68f9      	ldr	r1, [r7, #12]
 801177e:	69b8      	ldr	r0, [r7, #24]
 8011780:	f001 fabe 	bl	8012d00 <pxPortInitialiseStack>
 8011784:	4602      	mov	r2, r0
 8011786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011788:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178c:	2b00      	cmp	r3, #0
 801178e:	d002      	beq.n	8011796 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011796:	bf00      	nop
 8011798:	3720      	adds	r7, #32
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}
	...

080117a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b082      	sub	sp, #8
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80117a8:	f001 fbb6 	bl	8012f18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80117ac:	4b2d      	ldr	r3, [pc, #180]	; (8011864 <prvAddNewTaskToReadyList+0xc4>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	3301      	adds	r3, #1
 80117b2:	4a2c      	ldr	r2, [pc, #176]	; (8011864 <prvAddNewTaskToReadyList+0xc4>)
 80117b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80117b6:	4b2c      	ldr	r3, [pc, #176]	; (8011868 <prvAddNewTaskToReadyList+0xc8>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d109      	bne.n	80117d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80117be:	4a2a      	ldr	r2, [pc, #168]	; (8011868 <prvAddNewTaskToReadyList+0xc8>)
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80117c4:	4b27      	ldr	r3, [pc, #156]	; (8011864 <prvAddNewTaskToReadyList+0xc4>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	2b01      	cmp	r3, #1
 80117ca:	d110      	bne.n	80117ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80117cc:	f000 fc92 	bl	80120f4 <prvInitialiseTaskLists>
 80117d0:	e00d      	b.n	80117ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80117d2:	4b26      	ldr	r3, [pc, #152]	; (801186c <prvAddNewTaskToReadyList+0xcc>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d109      	bne.n	80117ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80117da:	4b23      	ldr	r3, [pc, #140]	; (8011868 <prvAddNewTaskToReadyList+0xc8>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117e4:	429a      	cmp	r2, r3
 80117e6:	d802      	bhi.n	80117ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80117e8:	4a1f      	ldr	r2, [pc, #124]	; (8011868 <prvAddNewTaskToReadyList+0xc8>)
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80117ee:	4b20      	ldr	r3, [pc, #128]	; (8011870 <prvAddNewTaskToReadyList+0xd0>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	3301      	adds	r3, #1
 80117f4:	4a1e      	ldr	r2, [pc, #120]	; (8011870 <prvAddNewTaskToReadyList+0xd0>)
 80117f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80117f8:	4b1d      	ldr	r3, [pc, #116]	; (8011870 <prvAddNewTaskToReadyList+0xd0>)
 80117fa:	681a      	ldr	r2, [r3, #0]
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011804:	4b1b      	ldr	r3, [pc, #108]	; (8011874 <prvAddNewTaskToReadyList+0xd4>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	429a      	cmp	r2, r3
 801180a:	d903      	bls.n	8011814 <prvAddNewTaskToReadyList+0x74>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011810:	4a18      	ldr	r2, [pc, #96]	; (8011874 <prvAddNewTaskToReadyList+0xd4>)
 8011812:	6013      	str	r3, [r2, #0]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011818:	4613      	mov	r3, r2
 801181a:	009b      	lsls	r3, r3, #2
 801181c:	4413      	add	r3, r2
 801181e:	009b      	lsls	r3, r3, #2
 8011820:	4a15      	ldr	r2, [pc, #84]	; (8011878 <prvAddNewTaskToReadyList+0xd8>)
 8011822:	441a      	add	r2, r3
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	3304      	adds	r3, #4
 8011828:	4619      	mov	r1, r3
 801182a:	4610      	mov	r0, r2
 801182c:	f7ff f905 	bl	8010a3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011830:	f001 fba4 	bl	8012f7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011834:	4b0d      	ldr	r3, [pc, #52]	; (801186c <prvAddNewTaskToReadyList+0xcc>)
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d00e      	beq.n	801185a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801183c:	4b0a      	ldr	r3, [pc, #40]	; (8011868 <prvAddNewTaskToReadyList+0xc8>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011846:	429a      	cmp	r2, r3
 8011848:	d207      	bcs.n	801185a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801184a:	4b0c      	ldr	r3, [pc, #48]	; (801187c <prvAddNewTaskToReadyList+0xdc>)
 801184c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011850:	601a      	str	r2, [r3, #0]
 8011852:	f3bf 8f4f 	dsb	sy
 8011856:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801185a:	bf00      	nop
 801185c:	3708      	adds	r7, #8
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
 8011862:	bf00      	nop
 8011864:	20003f38 	.word	0x20003f38
 8011868:	20003a64 	.word	0x20003a64
 801186c:	20003f44 	.word	0x20003f44
 8011870:	20003f54 	.word	0x20003f54
 8011874:	20003f40 	.word	0x20003f40
 8011878:	20003a68 	.word	0x20003a68
 801187c:	e000ed04 	.word	0xe000ed04

08011880 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8011880:	b580      	push	{r7, lr}
 8011882:	b084      	sub	sp, #16
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8011888:	f001 fb46 	bl	8012f18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d102      	bne.n	8011898 <vTaskDelete+0x18>
 8011892:	4b2d      	ldr	r3, [pc, #180]	; (8011948 <vTaskDelete+0xc8>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	e000      	b.n	801189a <vTaskDelete+0x1a>
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	3304      	adds	r3, #4
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7ff f927 	bl	8010af4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d004      	beq.n	80118b8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	3318      	adds	r3, #24
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7ff f91e 	bl	8010af4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80118b8:	4b24      	ldr	r3, [pc, #144]	; (801194c <vTaskDelete+0xcc>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	3301      	adds	r3, #1
 80118be:	4a23      	ldr	r2, [pc, #140]	; (801194c <vTaskDelete+0xcc>)
 80118c0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80118c2:	4b21      	ldr	r3, [pc, #132]	; (8011948 <vTaskDelete+0xc8>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	68fa      	ldr	r2, [r7, #12]
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d10b      	bne.n	80118e4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	3304      	adds	r3, #4
 80118d0:	4619      	mov	r1, r3
 80118d2:	481f      	ldr	r0, [pc, #124]	; (8011950 <vTaskDelete+0xd0>)
 80118d4:	f7ff f8b1 	bl	8010a3a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80118d8:	4b1e      	ldr	r3, [pc, #120]	; (8011954 <vTaskDelete+0xd4>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	3301      	adds	r3, #1
 80118de:	4a1d      	ldr	r2, [pc, #116]	; (8011954 <vTaskDelete+0xd4>)
 80118e0:	6013      	str	r3, [r2, #0]
 80118e2:	e009      	b.n	80118f8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80118e4:	4b1c      	ldr	r3, [pc, #112]	; (8011958 <vTaskDelete+0xd8>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	3b01      	subs	r3, #1
 80118ea:	4a1b      	ldr	r2, [pc, #108]	; (8011958 <vTaskDelete+0xd8>)
 80118ec:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80118ee:	68f8      	ldr	r0, [r7, #12]
 80118f0:	f000 fc6c 	bl	80121cc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80118f4:	f000 fc9a 	bl	801222c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80118f8:	f001 fb40 	bl	8012f7c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80118fc:	4b17      	ldr	r3, [pc, #92]	; (801195c <vTaskDelete+0xdc>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d01c      	beq.n	801193e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8011904:	4b10      	ldr	r3, [pc, #64]	; (8011948 <vTaskDelete+0xc8>)
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	68fa      	ldr	r2, [r7, #12]
 801190a:	429a      	cmp	r2, r3
 801190c:	d117      	bne.n	801193e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801190e:	4b14      	ldr	r3, [pc, #80]	; (8011960 <vTaskDelete+0xe0>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d00b      	beq.n	801192e <vTaskDelete+0xae>
 8011916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191a:	b672      	cpsid	i
 801191c:	f383 8811 	msr	BASEPRI, r3
 8011920:	f3bf 8f6f 	isb	sy
 8011924:	f3bf 8f4f 	dsb	sy
 8011928:	b662      	cpsie	i
 801192a:	60bb      	str	r3, [r7, #8]
 801192c:	e7fe      	b.n	801192c <vTaskDelete+0xac>
				portYIELD_WITHIN_API();
 801192e:	4b0d      	ldr	r3, [pc, #52]	; (8011964 <vTaskDelete+0xe4>)
 8011930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011934:	601a      	str	r2, [r3, #0]
 8011936:	f3bf 8f4f 	dsb	sy
 801193a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801193e:	bf00      	nop
 8011940:	3710      	adds	r7, #16
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}
 8011946:	bf00      	nop
 8011948:	20003a64 	.word	0x20003a64
 801194c:	20003f54 	.word	0x20003f54
 8011950:	20003f0c 	.word	0x20003f0c
 8011954:	20003f20 	.word	0x20003f20
 8011958:	20003f38 	.word	0x20003f38
 801195c:	20003f44 	.word	0x20003f44
 8011960:	20003f60 	.word	0x20003f60
 8011964:	e000ed04 	.word	0xe000ed04

08011968 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011968:	b580      	push	{r7, lr}
 801196a:	b084      	sub	sp, #16
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011970:	2300      	movs	r3, #0
 8011972:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d018      	beq.n	80119ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801197a:	4b14      	ldr	r3, [pc, #80]	; (80119cc <vTaskDelay+0x64>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d00b      	beq.n	801199a <vTaskDelay+0x32>
 8011982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011986:	b672      	cpsid	i
 8011988:	f383 8811 	msr	BASEPRI, r3
 801198c:	f3bf 8f6f 	isb	sy
 8011990:	f3bf 8f4f 	dsb	sy
 8011994:	b662      	cpsie	i
 8011996:	60bb      	str	r3, [r7, #8]
 8011998:	e7fe      	b.n	8011998 <vTaskDelay+0x30>
			vTaskSuspendAll();
 801199a:	f000 f883 	bl	8011aa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801199e:	2100      	movs	r1, #0
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f000 fe05 	bl	80125b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80119a6:	f000 f88b 	bl	8011ac0 <xTaskResumeAll>
 80119aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d107      	bne.n	80119c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80119b2:	4b07      	ldr	r3, [pc, #28]	; (80119d0 <vTaskDelay+0x68>)
 80119b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119b8:	601a      	str	r2, [r3, #0]
 80119ba:	f3bf 8f4f 	dsb	sy
 80119be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80119c2:	bf00      	nop
 80119c4:	3710      	adds	r7, #16
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}
 80119ca:	bf00      	nop
 80119cc:	20003f60 	.word	0x20003f60
 80119d0:	e000ed04 	.word	0xe000ed04

080119d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b08a      	sub	sp, #40	; 0x28
 80119d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80119da:	2300      	movs	r3, #0
 80119dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80119de:	2300      	movs	r3, #0
 80119e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80119e2:	463a      	mov	r2, r7
 80119e4:	1d39      	adds	r1, r7, #4
 80119e6:	f107 0308 	add.w	r3, r7, #8
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7fe ffc4 	bl	8010978 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80119f0:	6839      	ldr	r1, [r7, #0]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	68ba      	ldr	r2, [r7, #8]
 80119f6:	9202      	str	r2, [sp, #8]
 80119f8:	9301      	str	r3, [sp, #4]
 80119fa:	2300      	movs	r3, #0
 80119fc:	9300      	str	r3, [sp, #0]
 80119fe:	2300      	movs	r3, #0
 8011a00:	460a      	mov	r2, r1
 8011a02:	4922      	ldr	r1, [pc, #136]	; (8011a8c <vTaskStartScheduler+0xb8>)
 8011a04:	4822      	ldr	r0, [pc, #136]	; (8011a90 <vTaskStartScheduler+0xbc>)
 8011a06:	f7ff fd95 	bl	8011534 <xTaskCreateStatic>
 8011a0a:	4602      	mov	r2, r0
 8011a0c:	4b21      	ldr	r3, [pc, #132]	; (8011a94 <vTaskStartScheduler+0xc0>)
 8011a0e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011a10:	4b20      	ldr	r3, [pc, #128]	; (8011a94 <vTaskStartScheduler+0xc0>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d002      	beq.n	8011a1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011a18:	2301      	movs	r3, #1
 8011a1a:	617b      	str	r3, [r7, #20]
 8011a1c:	e001      	b.n	8011a22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	2b01      	cmp	r3, #1
 8011a26:	d102      	bne.n	8011a2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011a28:	f000 fe16 	bl	8012658 <xTimerCreateTimerTask>
 8011a2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	2b01      	cmp	r3, #1
 8011a32:	d117      	bne.n	8011a64 <vTaskStartScheduler+0x90>
 8011a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a38:	b672      	cpsid	i
 8011a3a:	f383 8811 	msr	BASEPRI, r3
 8011a3e:	f3bf 8f6f 	isb	sy
 8011a42:	f3bf 8f4f 	dsb	sy
 8011a46:	b662      	cpsie	i
 8011a48:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011a4a:	4b13      	ldr	r3, [pc, #76]	; (8011a98 <vTaskStartScheduler+0xc4>)
 8011a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8011a50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011a52:	4b12      	ldr	r3, [pc, #72]	; (8011a9c <vTaskStartScheduler+0xc8>)
 8011a54:	2201      	movs	r2, #1
 8011a56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011a58:	4b11      	ldr	r3, [pc, #68]	; (8011aa0 <vTaskStartScheduler+0xcc>)
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011a5e:	f001 f9df 	bl	8012e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011a62:	e00f      	b.n	8011a84 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a6a:	d10b      	bne.n	8011a84 <vTaskStartScheduler+0xb0>
 8011a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a70:	b672      	cpsid	i
 8011a72:	f383 8811 	msr	BASEPRI, r3
 8011a76:	f3bf 8f6f 	isb	sy
 8011a7a:	f3bf 8f4f 	dsb	sy
 8011a7e:	b662      	cpsie	i
 8011a80:	60fb      	str	r3, [r7, #12]
 8011a82:	e7fe      	b.n	8011a82 <vTaskStartScheduler+0xae>
}
 8011a84:	bf00      	nop
 8011a86:	3718      	adds	r7, #24
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}
 8011a8c:	08017d4c 	.word	0x08017d4c
 8011a90:	080120c5 	.word	0x080120c5
 8011a94:	20003f5c 	.word	0x20003f5c
 8011a98:	20003f58 	.word	0x20003f58
 8011a9c:	20003f44 	.word	0x20003f44
 8011aa0:	20003f3c 	.word	0x20003f3c

08011aa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011aa8:	4b04      	ldr	r3, [pc, #16]	; (8011abc <vTaskSuspendAll+0x18>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	3301      	adds	r3, #1
 8011aae:	4a03      	ldr	r2, [pc, #12]	; (8011abc <vTaskSuspendAll+0x18>)
 8011ab0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011ab2:	bf00      	nop
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aba:	4770      	bx	lr
 8011abc:	20003f60 	.word	0x20003f60

08011ac0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b084      	sub	sp, #16
 8011ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011aca:	2300      	movs	r3, #0
 8011acc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011ace:	4b42      	ldr	r3, [pc, #264]	; (8011bd8 <xTaskResumeAll+0x118>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d10b      	bne.n	8011aee <xTaskResumeAll+0x2e>
 8011ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ada:	b672      	cpsid	i
 8011adc:	f383 8811 	msr	BASEPRI, r3
 8011ae0:	f3bf 8f6f 	isb	sy
 8011ae4:	f3bf 8f4f 	dsb	sy
 8011ae8:	b662      	cpsie	i
 8011aea:	603b      	str	r3, [r7, #0]
 8011aec:	e7fe      	b.n	8011aec <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011aee:	f001 fa13 	bl	8012f18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011af2:	4b39      	ldr	r3, [pc, #228]	; (8011bd8 <xTaskResumeAll+0x118>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	3b01      	subs	r3, #1
 8011af8:	4a37      	ldr	r2, [pc, #220]	; (8011bd8 <xTaskResumeAll+0x118>)
 8011afa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011afc:	4b36      	ldr	r3, [pc, #216]	; (8011bd8 <xTaskResumeAll+0x118>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d162      	bne.n	8011bca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011b04:	4b35      	ldr	r3, [pc, #212]	; (8011bdc <xTaskResumeAll+0x11c>)
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d05e      	beq.n	8011bca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011b0c:	e02f      	b.n	8011b6e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b0e:	4b34      	ldr	r3, [pc, #208]	; (8011be0 <xTaskResumeAll+0x120>)
 8011b10:	68db      	ldr	r3, [r3, #12]
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	3318      	adds	r3, #24
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7fe ffea 	bl	8010af4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	3304      	adds	r3, #4
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7fe ffe5 	bl	8010af4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b2e:	4b2d      	ldr	r3, [pc, #180]	; (8011be4 <xTaskResumeAll+0x124>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d903      	bls.n	8011b3e <xTaskResumeAll+0x7e>
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b3a:	4a2a      	ldr	r2, [pc, #168]	; (8011be4 <xTaskResumeAll+0x124>)
 8011b3c:	6013      	str	r3, [r2, #0]
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b42:	4613      	mov	r3, r2
 8011b44:	009b      	lsls	r3, r3, #2
 8011b46:	4413      	add	r3, r2
 8011b48:	009b      	lsls	r3, r3, #2
 8011b4a:	4a27      	ldr	r2, [pc, #156]	; (8011be8 <xTaskResumeAll+0x128>)
 8011b4c:	441a      	add	r2, r3
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	3304      	adds	r3, #4
 8011b52:	4619      	mov	r1, r3
 8011b54:	4610      	mov	r0, r2
 8011b56:	f7fe ff70 	bl	8010a3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b5e:	4b23      	ldr	r3, [pc, #140]	; (8011bec <xTaskResumeAll+0x12c>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b64:	429a      	cmp	r2, r3
 8011b66:	d302      	bcc.n	8011b6e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8011b68:	4b21      	ldr	r3, [pc, #132]	; (8011bf0 <xTaskResumeAll+0x130>)
 8011b6a:	2201      	movs	r2, #1
 8011b6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011b6e:	4b1c      	ldr	r3, [pc, #112]	; (8011be0 <xTaskResumeAll+0x120>)
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d1cb      	bne.n	8011b0e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d001      	beq.n	8011b80 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011b7c:	f000 fb56 	bl	801222c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011b80:	4b1c      	ldr	r3, [pc, #112]	; (8011bf4 <xTaskResumeAll+0x134>)
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d010      	beq.n	8011bae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011b8c:	f000 f846 	bl	8011c1c <xTaskIncrementTick>
 8011b90:	4603      	mov	r3, r0
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d002      	beq.n	8011b9c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8011b96:	4b16      	ldr	r3, [pc, #88]	; (8011bf0 <xTaskResumeAll+0x130>)
 8011b98:	2201      	movs	r2, #1
 8011b9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	3b01      	subs	r3, #1
 8011ba0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d1f1      	bne.n	8011b8c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8011ba8:	4b12      	ldr	r3, [pc, #72]	; (8011bf4 <xTaskResumeAll+0x134>)
 8011baa:	2200      	movs	r2, #0
 8011bac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011bae:	4b10      	ldr	r3, [pc, #64]	; (8011bf0 <xTaskResumeAll+0x130>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d009      	beq.n	8011bca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011bba:	4b0f      	ldr	r3, [pc, #60]	; (8011bf8 <xTaskResumeAll+0x138>)
 8011bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bc0:	601a      	str	r2, [r3, #0]
 8011bc2:	f3bf 8f4f 	dsb	sy
 8011bc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011bca:	f001 f9d7 	bl	8012f7c <vPortExitCritical>

	return xAlreadyYielded;
 8011bce:	68bb      	ldr	r3, [r7, #8]
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3710      	adds	r7, #16
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}
 8011bd8:	20003f60 	.word	0x20003f60
 8011bdc:	20003f38 	.word	0x20003f38
 8011be0:	20003ef8 	.word	0x20003ef8
 8011be4:	20003f40 	.word	0x20003f40
 8011be8:	20003a68 	.word	0x20003a68
 8011bec:	20003a64 	.word	0x20003a64
 8011bf0:	20003f4c 	.word	0x20003f4c
 8011bf4:	20003f48 	.word	0x20003f48
 8011bf8:	e000ed04 	.word	0xe000ed04

08011bfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011bfc:	b480      	push	{r7}
 8011bfe:	b083      	sub	sp, #12
 8011c00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011c02:	4b05      	ldr	r3, [pc, #20]	; (8011c18 <xTaskGetTickCount+0x1c>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011c08:	687b      	ldr	r3, [r7, #4]
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	370c      	adds	r7, #12
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c14:	4770      	bx	lr
 8011c16:	bf00      	nop
 8011c18:	20003f3c 	.word	0x20003f3c

08011c1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b086      	sub	sp, #24
 8011c20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011c22:	2300      	movs	r3, #0
 8011c24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c26:	4b4f      	ldr	r3, [pc, #316]	; (8011d64 <xTaskIncrementTick+0x148>)
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	f040 808a 	bne.w	8011d44 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011c30:	4b4d      	ldr	r3, [pc, #308]	; (8011d68 <xTaskIncrementTick+0x14c>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	3301      	adds	r3, #1
 8011c36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011c38:	4a4b      	ldr	r2, [pc, #300]	; (8011d68 <xTaskIncrementTick+0x14c>)
 8011c3a:	693b      	ldr	r3, [r7, #16]
 8011c3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011c3e:	693b      	ldr	r3, [r7, #16]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d121      	bne.n	8011c88 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011c44:	4b49      	ldr	r3, [pc, #292]	; (8011d6c <xTaskIncrementTick+0x150>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d00b      	beq.n	8011c66 <xTaskIncrementTick+0x4a>
 8011c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c52:	b672      	cpsid	i
 8011c54:	f383 8811 	msr	BASEPRI, r3
 8011c58:	f3bf 8f6f 	isb	sy
 8011c5c:	f3bf 8f4f 	dsb	sy
 8011c60:	b662      	cpsie	i
 8011c62:	603b      	str	r3, [r7, #0]
 8011c64:	e7fe      	b.n	8011c64 <xTaskIncrementTick+0x48>
 8011c66:	4b41      	ldr	r3, [pc, #260]	; (8011d6c <xTaskIncrementTick+0x150>)
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	60fb      	str	r3, [r7, #12]
 8011c6c:	4b40      	ldr	r3, [pc, #256]	; (8011d70 <xTaskIncrementTick+0x154>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	4a3e      	ldr	r2, [pc, #248]	; (8011d6c <xTaskIncrementTick+0x150>)
 8011c72:	6013      	str	r3, [r2, #0]
 8011c74:	4a3e      	ldr	r2, [pc, #248]	; (8011d70 <xTaskIncrementTick+0x154>)
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	6013      	str	r3, [r2, #0]
 8011c7a:	4b3e      	ldr	r3, [pc, #248]	; (8011d74 <xTaskIncrementTick+0x158>)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	3301      	adds	r3, #1
 8011c80:	4a3c      	ldr	r2, [pc, #240]	; (8011d74 <xTaskIncrementTick+0x158>)
 8011c82:	6013      	str	r3, [r2, #0]
 8011c84:	f000 fad2 	bl	801222c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011c88:	4b3b      	ldr	r3, [pc, #236]	; (8011d78 <xTaskIncrementTick+0x15c>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	693a      	ldr	r2, [r7, #16]
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d349      	bcc.n	8011d26 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c92:	4b36      	ldr	r3, [pc, #216]	; (8011d6c <xTaskIncrementTick+0x150>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d104      	bne.n	8011ca6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c9c:	4b36      	ldr	r3, [pc, #216]	; (8011d78 <xTaskIncrementTick+0x15c>)
 8011c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8011ca2:	601a      	str	r2, [r3, #0]
					break;
 8011ca4:	e03f      	b.n	8011d26 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ca6:	4b31      	ldr	r3, [pc, #196]	; (8011d6c <xTaskIncrementTick+0x150>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	68db      	ldr	r3, [r3, #12]
 8011cac:	68db      	ldr	r3, [r3, #12]
 8011cae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	685b      	ldr	r3, [r3, #4]
 8011cb4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011cb6:	693a      	ldr	r2, [r7, #16]
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d203      	bcs.n	8011cc6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011cbe:	4a2e      	ldr	r2, [pc, #184]	; (8011d78 <xTaskIncrementTick+0x15c>)
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011cc4:	e02f      	b.n	8011d26 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011cc6:	68bb      	ldr	r3, [r7, #8]
 8011cc8:	3304      	adds	r3, #4
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7fe ff12 	bl	8010af4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d004      	beq.n	8011ce2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	3318      	adds	r3, #24
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7fe ff09 	bl	8010af4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011ce2:	68bb      	ldr	r3, [r7, #8]
 8011ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ce6:	4b25      	ldr	r3, [pc, #148]	; (8011d7c <xTaskIncrementTick+0x160>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d903      	bls.n	8011cf6 <xTaskIncrementTick+0xda>
 8011cee:	68bb      	ldr	r3, [r7, #8]
 8011cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cf2:	4a22      	ldr	r2, [pc, #136]	; (8011d7c <xTaskIncrementTick+0x160>)
 8011cf4:	6013      	str	r3, [r2, #0]
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cfa:	4613      	mov	r3, r2
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	4413      	add	r3, r2
 8011d00:	009b      	lsls	r3, r3, #2
 8011d02:	4a1f      	ldr	r2, [pc, #124]	; (8011d80 <xTaskIncrementTick+0x164>)
 8011d04:	441a      	add	r2, r3
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	3304      	adds	r3, #4
 8011d0a:	4619      	mov	r1, r3
 8011d0c:	4610      	mov	r0, r2
 8011d0e:	f7fe fe94 	bl	8010a3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d16:	4b1b      	ldr	r3, [pc, #108]	; (8011d84 <xTaskIncrementTick+0x168>)
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d3b8      	bcc.n	8011c92 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011d20:	2301      	movs	r3, #1
 8011d22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d24:	e7b5      	b.n	8011c92 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011d26:	4b17      	ldr	r3, [pc, #92]	; (8011d84 <xTaskIncrementTick+0x168>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d2c:	4914      	ldr	r1, [pc, #80]	; (8011d80 <xTaskIncrementTick+0x164>)
 8011d2e:	4613      	mov	r3, r2
 8011d30:	009b      	lsls	r3, r3, #2
 8011d32:	4413      	add	r3, r2
 8011d34:	009b      	lsls	r3, r3, #2
 8011d36:	440b      	add	r3, r1
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	2b01      	cmp	r3, #1
 8011d3c:	d907      	bls.n	8011d4e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8011d3e:	2301      	movs	r3, #1
 8011d40:	617b      	str	r3, [r7, #20]
 8011d42:	e004      	b.n	8011d4e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011d44:	4b10      	ldr	r3, [pc, #64]	; (8011d88 <xTaskIncrementTick+0x16c>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	3301      	adds	r3, #1
 8011d4a:	4a0f      	ldr	r2, [pc, #60]	; (8011d88 <xTaskIncrementTick+0x16c>)
 8011d4c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011d4e:	4b0f      	ldr	r3, [pc, #60]	; (8011d8c <xTaskIncrementTick+0x170>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d001      	beq.n	8011d5a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8011d56:	2301      	movs	r3, #1
 8011d58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011d5a:	697b      	ldr	r3, [r7, #20]
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	3718      	adds	r7, #24
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}
 8011d64:	20003f60 	.word	0x20003f60
 8011d68:	20003f3c 	.word	0x20003f3c
 8011d6c:	20003ef0 	.word	0x20003ef0
 8011d70:	20003ef4 	.word	0x20003ef4
 8011d74:	20003f50 	.word	0x20003f50
 8011d78:	20003f58 	.word	0x20003f58
 8011d7c:	20003f40 	.word	0x20003f40
 8011d80:	20003a68 	.word	0x20003a68
 8011d84:	20003a64 	.word	0x20003a64
 8011d88:	20003f48 	.word	0x20003f48
 8011d8c:	20003f4c 	.word	0x20003f4c

08011d90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011d90:	b480      	push	{r7}
 8011d92:	b085      	sub	sp, #20
 8011d94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011d96:	4b28      	ldr	r3, [pc, #160]	; (8011e38 <vTaskSwitchContext+0xa8>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d003      	beq.n	8011da6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011d9e:	4b27      	ldr	r3, [pc, #156]	; (8011e3c <vTaskSwitchContext+0xac>)
 8011da0:	2201      	movs	r2, #1
 8011da2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011da4:	e042      	b.n	8011e2c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8011da6:	4b25      	ldr	r3, [pc, #148]	; (8011e3c <vTaskSwitchContext+0xac>)
 8011da8:	2200      	movs	r2, #0
 8011daa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011dac:	4b24      	ldr	r3, [pc, #144]	; (8011e40 <vTaskSwitchContext+0xb0>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	60fb      	str	r3, [r7, #12]
 8011db2:	e011      	b.n	8011dd8 <vTaskSwitchContext+0x48>
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d10b      	bne.n	8011dd2 <vTaskSwitchContext+0x42>
 8011dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dbe:	b672      	cpsid	i
 8011dc0:	f383 8811 	msr	BASEPRI, r3
 8011dc4:	f3bf 8f6f 	isb	sy
 8011dc8:	f3bf 8f4f 	dsb	sy
 8011dcc:	b662      	cpsie	i
 8011dce:	607b      	str	r3, [r7, #4]
 8011dd0:	e7fe      	b.n	8011dd0 <vTaskSwitchContext+0x40>
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	3b01      	subs	r3, #1
 8011dd6:	60fb      	str	r3, [r7, #12]
 8011dd8:	491a      	ldr	r1, [pc, #104]	; (8011e44 <vTaskSwitchContext+0xb4>)
 8011dda:	68fa      	ldr	r2, [r7, #12]
 8011ddc:	4613      	mov	r3, r2
 8011dde:	009b      	lsls	r3, r3, #2
 8011de0:	4413      	add	r3, r2
 8011de2:	009b      	lsls	r3, r3, #2
 8011de4:	440b      	add	r3, r1
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d0e3      	beq.n	8011db4 <vTaskSwitchContext+0x24>
 8011dec:	68fa      	ldr	r2, [r7, #12]
 8011dee:	4613      	mov	r3, r2
 8011df0:	009b      	lsls	r3, r3, #2
 8011df2:	4413      	add	r3, r2
 8011df4:	009b      	lsls	r3, r3, #2
 8011df6:	4a13      	ldr	r2, [pc, #76]	; (8011e44 <vTaskSwitchContext+0xb4>)
 8011df8:	4413      	add	r3, r2
 8011dfa:	60bb      	str	r3, [r7, #8]
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	685b      	ldr	r3, [r3, #4]
 8011e00:	685a      	ldr	r2, [r3, #4]
 8011e02:	68bb      	ldr	r3, [r7, #8]
 8011e04:	605a      	str	r2, [r3, #4]
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	685a      	ldr	r2, [r3, #4]
 8011e0a:	68bb      	ldr	r3, [r7, #8]
 8011e0c:	3308      	adds	r3, #8
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d104      	bne.n	8011e1c <vTaskSwitchContext+0x8c>
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	685b      	ldr	r3, [r3, #4]
 8011e16:	685a      	ldr	r2, [r3, #4]
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	605a      	str	r2, [r3, #4]
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	685b      	ldr	r3, [r3, #4]
 8011e20:	68db      	ldr	r3, [r3, #12]
 8011e22:	4a09      	ldr	r2, [pc, #36]	; (8011e48 <vTaskSwitchContext+0xb8>)
 8011e24:	6013      	str	r3, [r2, #0]
 8011e26:	4a06      	ldr	r2, [pc, #24]	; (8011e40 <vTaskSwitchContext+0xb0>)
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	6013      	str	r3, [r2, #0]
}
 8011e2c:	bf00      	nop
 8011e2e:	3714      	adds	r7, #20
 8011e30:	46bd      	mov	sp, r7
 8011e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e36:	4770      	bx	lr
 8011e38:	20003f60 	.word	0x20003f60
 8011e3c:	20003f4c 	.word	0x20003f4c
 8011e40:	20003f40 	.word	0x20003f40
 8011e44:	20003a68 	.word	0x20003a68
 8011e48:	20003a64 	.word	0x20003a64

08011e4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b084      	sub	sp, #16
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d10b      	bne.n	8011e74 <vTaskPlaceOnEventList+0x28>
 8011e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e60:	b672      	cpsid	i
 8011e62:	f383 8811 	msr	BASEPRI, r3
 8011e66:	f3bf 8f6f 	isb	sy
 8011e6a:	f3bf 8f4f 	dsb	sy
 8011e6e:	b662      	cpsie	i
 8011e70:	60fb      	str	r3, [r7, #12]
 8011e72:	e7fe      	b.n	8011e72 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011e74:	4b07      	ldr	r3, [pc, #28]	; (8011e94 <vTaskPlaceOnEventList+0x48>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	3318      	adds	r3, #24
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f7fe fe00 	bl	8010a82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011e82:	2101      	movs	r1, #1
 8011e84:	6838      	ldr	r0, [r7, #0]
 8011e86:	f000 fb93 	bl	80125b0 <prvAddCurrentTaskToDelayedList>
}
 8011e8a:	bf00      	nop
 8011e8c:	3710      	adds	r7, #16
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}
 8011e92:	bf00      	nop
 8011e94:	20003a64 	.word	0x20003a64

08011e98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b086      	sub	sp, #24
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	60f8      	str	r0, [r7, #12]
 8011ea0:	60b9      	str	r1, [r7, #8]
 8011ea2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d10b      	bne.n	8011ec2 <vTaskPlaceOnEventListRestricted+0x2a>
 8011eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eae:	b672      	cpsid	i
 8011eb0:	f383 8811 	msr	BASEPRI, r3
 8011eb4:	f3bf 8f6f 	isb	sy
 8011eb8:	f3bf 8f4f 	dsb	sy
 8011ebc:	b662      	cpsie	i
 8011ebe:	617b      	str	r3, [r7, #20]
 8011ec0:	e7fe      	b.n	8011ec0 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011ec2:	4b0a      	ldr	r3, [pc, #40]	; (8011eec <vTaskPlaceOnEventListRestricted+0x54>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	3318      	adds	r3, #24
 8011ec8:	4619      	mov	r1, r3
 8011eca:	68f8      	ldr	r0, [r7, #12]
 8011ecc:	f7fe fdb5 	bl	8010a3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d002      	beq.n	8011edc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8011ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8011eda:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011edc:	6879      	ldr	r1, [r7, #4]
 8011ede:	68b8      	ldr	r0, [r7, #8]
 8011ee0:	f000 fb66 	bl	80125b0 <prvAddCurrentTaskToDelayedList>
	}
 8011ee4:	bf00      	nop
 8011ee6:	3718      	adds	r7, #24
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bd80      	pop	{r7, pc}
 8011eec:	20003a64 	.word	0x20003a64

08011ef0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b086      	sub	sp, #24
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	68db      	ldr	r3, [r3, #12]
 8011efc:	68db      	ldr	r3, [r3, #12]
 8011efe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011f00:	693b      	ldr	r3, [r7, #16]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d10b      	bne.n	8011f1e <xTaskRemoveFromEventList+0x2e>
 8011f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f0a:	b672      	cpsid	i
 8011f0c:	f383 8811 	msr	BASEPRI, r3
 8011f10:	f3bf 8f6f 	isb	sy
 8011f14:	f3bf 8f4f 	dsb	sy
 8011f18:	b662      	cpsie	i
 8011f1a:	60fb      	str	r3, [r7, #12]
 8011f1c:	e7fe      	b.n	8011f1c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	3318      	adds	r3, #24
 8011f22:	4618      	mov	r0, r3
 8011f24:	f7fe fde6 	bl	8010af4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f28:	4b1d      	ldr	r3, [pc, #116]	; (8011fa0 <xTaskRemoveFromEventList+0xb0>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d11d      	bne.n	8011f6c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	3304      	adds	r3, #4
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7fe fddd 	bl	8010af4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011f3a:	693b      	ldr	r3, [r7, #16]
 8011f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f3e:	4b19      	ldr	r3, [pc, #100]	; (8011fa4 <xTaskRemoveFromEventList+0xb4>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	429a      	cmp	r2, r3
 8011f44:	d903      	bls.n	8011f4e <xTaskRemoveFromEventList+0x5e>
 8011f46:	693b      	ldr	r3, [r7, #16]
 8011f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f4a:	4a16      	ldr	r2, [pc, #88]	; (8011fa4 <xTaskRemoveFromEventList+0xb4>)
 8011f4c:	6013      	str	r3, [r2, #0]
 8011f4e:	693b      	ldr	r3, [r7, #16]
 8011f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f52:	4613      	mov	r3, r2
 8011f54:	009b      	lsls	r3, r3, #2
 8011f56:	4413      	add	r3, r2
 8011f58:	009b      	lsls	r3, r3, #2
 8011f5a:	4a13      	ldr	r2, [pc, #76]	; (8011fa8 <xTaskRemoveFromEventList+0xb8>)
 8011f5c:	441a      	add	r2, r3
 8011f5e:	693b      	ldr	r3, [r7, #16]
 8011f60:	3304      	adds	r3, #4
 8011f62:	4619      	mov	r1, r3
 8011f64:	4610      	mov	r0, r2
 8011f66:	f7fe fd68 	bl	8010a3a <vListInsertEnd>
 8011f6a:	e005      	b.n	8011f78 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	3318      	adds	r3, #24
 8011f70:	4619      	mov	r1, r3
 8011f72:	480e      	ldr	r0, [pc, #56]	; (8011fac <xTaskRemoveFromEventList+0xbc>)
 8011f74:	f7fe fd61 	bl	8010a3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f7c:	4b0c      	ldr	r3, [pc, #48]	; (8011fb0 <xTaskRemoveFromEventList+0xc0>)
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f82:	429a      	cmp	r2, r3
 8011f84:	d905      	bls.n	8011f92 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011f86:	2301      	movs	r3, #1
 8011f88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011f8a:	4b0a      	ldr	r3, [pc, #40]	; (8011fb4 <xTaskRemoveFromEventList+0xc4>)
 8011f8c:	2201      	movs	r2, #1
 8011f8e:	601a      	str	r2, [r3, #0]
 8011f90:	e001      	b.n	8011f96 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8011f92:	2300      	movs	r3, #0
 8011f94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011f96:	697b      	ldr	r3, [r7, #20]
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3718      	adds	r7, #24
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}
 8011fa0:	20003f60 	.word	0x20003f60
 8011fa4:	20003f40 	.word	0x20003f40
 8011fa8:	20003a68 	.word	0x20003a68
 8011fac:	20003ef8 	.word	0x20003ef8
 8011fb0:	20003a64 	.word	0x20003a64
 8011fb4:	20003f4c 	.word	0x20003f4c

08011fb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011fb8:	b480      	push	{r7}
 8011fba:	b083      	sub	sp, #12
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011fc0:	4b06      	ldr	r3, [pc, #24]	; (8011fdc <vTaskInternalSetTimeOutState+0x24>)
 8011fc2:	681a      	ldr	r2, [r3, #0]
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011fc8:	4b05      	ldr	r3, [pc, #20]	; (8011fe0 <vTaskInternalSetTimeOutState+0x28>)
 8011fca:	681a      	ldr	r2, [r3, #0]
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	605a      	str	r2, [r3, #4]
}
 8011fd0:	bf00      	nop
 8011fd2:	370c      	adds	r7, #12
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fda:	4770      	bx	lr
 8011fdc:	20003f50 	.word	0x20003f50
 8011fe0:	20003f3c 	.word	0x20003f3c

08011fe4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b088      	sub	sp, #32
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
 8011fec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d10b      	bne.n	801200c <xTaskCheckForTimeOut+0x28>
 8011ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ff8:	b672      	cpsid	i
 8011ffa:	f383 8811 	msr	BASEPRI, r3
 8011ffe:	f3bf 8f6f 	isb	sy
 8012002:	f3bf 8f4f 	dsb	sy
 8012006:	b662      	cpsie	i
 8012008:	613b      	str	r3, [r7, #16]
 801200a:	e7fe      	b.n	801200a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d10b      	bne.n	801202a <xTaskCheckForTimeOut+0x46>
 8012012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012016:	b672      	cpsid	i
 8012018:	f383 8811 	msr	BASEPRI, r3
 801201c:	f3bf 8f6f 	isb	sy
 8012020:	f3bf 8f4f 	dsb	sy
 8012024:	b662      	cpsie	i
 8012026:	60fb      	str	r3, [r7, #12]
 8012028:	e7fe      	b.n	8012028 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 801202a:	f000 ff75 	bl	8012f18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801202e:	4b1d      	ldr	r3, [pc, #116]	; (80120a4 <xTaskCheckForTimeOut+0xc0>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	685b      	ldr	r3, [r3, #4]
 8012038:	69ba      	ldr	r2, [r7, #24]
 801203a:	1ad3      	subs	r3, r2, r3
 801203c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012046:	d102      	bne.n	801204e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012048:	2300      	movs	r3, #0
 801204a:	61fb      	str	r3, [r7, #28]
 801204c:	e023      	b.n	8012096 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681a      	ldr	r2, [r3, #0]
 8012052:	4b15      	ldr	r3, [pc, #84]	; (80120a8 <xTaskCheckForTimeOut+0xc4>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	429a      	cmp	r2, r3
 8012058:	d007      	beq.n	801206a <xTaskCheckForTimeOut+0x86>
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	69ba      	ldr	r2, [r7, #24]
 8012060:	429a      	cmp	r2, r3
 8012062:	d302      	bcc.n	801206a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012064:	2301      	movs	r3, #1
 8012066:	61fb      	str	r3, [r7, #28]
 8012068:	e015      	b.n	8012096 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	697a      	ldr	r2, [r7, #20]
 8012070:	429a      	cmp	r2, r3
 8012072:	d20b      	bcs.n	801208c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	681a      	ldr	r2, [r3, #0]
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	1ad2      	subs	r2, r2, r3
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f7ff ff99 	bl	8011fb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012086:	2300      	movs	r3, #0
 8012088:	61fb      	str	r3, [r7, #28]
 801208a:	e004      	b.n	8012096 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801208c:	683b      	ldr	r3, [r7, #0]
 801208e:	2200      	movs	r2, #0
 8012090:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012092:	2301      	movs	r3, #1
 8012094:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012096:	f000 ff71 	bl	8012f7c <vPortExitCritical>

	return xReturn;
 801209a:	69fb      	ldr	r3, [r7, #28]
}
 801209c:	4618      	mov	r0, r3
 801209e:	3720      	adds	r7, #32
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}
 80120a4:	20003f3c 	.word	0x20003f3c
 80120a8:	20003f50 	.word	0x20003f50

080120ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80120ac:	b480      	push	{r7}
 80120ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80120b0:	4b03      	ldr	r3, [pc, #12]	; (80120c0 <vTaskMissedYield+0x14>)
 80120b2:	2201      	movs	r2, #1
 80120b4:	601a      	str	r2, [r3, #0]
}
 80120b6:	bf00      	nop
 80120b8:	46bd      	mov	sp, r7
 80120ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120be:	4770      	bx	lr
 80120c0:	20003f4c 	.word	0x20003f4c

080120c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b082      	sub	sp, #8
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80120cc:	f000 f852 	bl	8012174 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80120d0:	4b06      	ldr	r3, [pc, #24]	; (80120ec <prvIdleTask+0x28>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	2b01      	cmp	r3, #1
 80120d6:	d9f9      	bls.n	80120cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80120d8:	4b05      	ldr	r3, [pc, #20]	; (80120f0 <prvIdleTask+0x2c>)
 80120da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120de:	601a      	str	r2, [r3, #0]
 80120e0:	f3bf 8f4f 	dsb	sy
 80120e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80120e8:	e7f0      	b.n	80120cc <prvIdleTask+0x8>
 80120ea:	bf00      	nop
 80120ec:	20003a68 	.word	0x20003a68
 80120f0:	e000ed04 	.word	0xe000ed04

080120f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b082      	sub	sp, #8
 80120f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80120fa:	2300      	movs	r3, #0
 80120fc:	607b      	str	r3, [r7, #4]
 80120fe:	e00c      	b.n	801211a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012100:	687a      	ldr	r2, [r7, #4]
 8012102:	4613      	mov	r3, r2
 8012104:	009b      	lsls	r3, r3, #2
 8012106:	4413      	add	r3, r2
 8012108:	009b      	lsls	r3, r3, #2
 801210a:	4a12      	ldr	r2, [pc, #72]	; (8012154 <prvInitialiseTaskLists+0x60>)
 801210c:	4413      	add	r3, r2
 801210e:	4618      	mov	r0, r3
 8012110:	f7fe fc66 	bl	80109e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	3301      	adds	r3, #1
 8012118:	607b      	str	r3, [r7, #4]
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	2b37      	cmp	r3, #55	; 0x37
 801211e:	d9ef      	bls.n	8012100 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012120:	480d      	ldr	r0, [pc, #52]	; (8012158 <prvInitialiseTaskLists+0x64>)
 8012122:	f7fe fc5d 	bl	80109e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012126:	480d      	ldr	r0, [pc, #52]	; (801215c <prvInitialiseTaskLists+0x68>)
 8012128:	f7fe fc5a 	bl	80109e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801212c:	480c      	ldr	r0, [pc, #48]	; (8012160 <prvInitialiseTaskLists+0x6c>)
 801212e:	f7fe fc57 	bl	80109e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012132:	480c      	ldr	r0, [pc, #48]	; (8012164 <prvInitialiseTaskLists+0x70>)
 8012134:	f7fe fc54 	bl	80109e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012138:	480b      	ldr	r0, [pc, #44]	; (8012168 <prvInitialiseTaskLists+0x74>)
 801213a:	f7fe fc51 	bl	80109e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801213e:	4b0b      	ldr	r3, [pc, #44]	; (801216c <prvInitialiseTaskLists+0x78>)
 8012140:	4a05      	ldr	r2, [pc, #20]	; (8012158 <prvInitialiseTaskLists+0x64>)
 8012142:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012144:	4b0a      	ldr	r3, [pc, #40]	; (8012170 <prvInitialiseTaskLists+0x7c>)
 8012146:	4a05      	ldr	r2, [pc, #20]	; (801215c <prvInitialiseTaskLists+0x68>)
 8012148:	601a      	str	r2, [r3, #0]
}
 801214a:	bf00      	nop
 801214c:	3708      	adds	r7, #8
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}
 8012152:	bf00      	nop
 8012154:	20003a68 	.word	0x20003a68
 8012158:	20003ec8 	.word	0x20003ec8
 801215c:	20003edc 	.word	0x20003edc
 8012160:	20003ef8 	.word	0x20003ef8
 8012164:	20003f0c 	.word	0x20003f0c
 8012168:	20003f24 	.word	0x20003f24
 801216c:	20003ef0 	.word	0x20003ef0
 8012170:	20003ef4 	.word	0x20003ef4

08012174 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b082      	sub	sp, #8
 8012178:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801217a:	e019      	b.n	80121b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801217c:	f000 fecc 	bl	8012f18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012180:	4b0f      	ldr	r3, [pc, #60]	; (80121c0 <prvCheckTasksWaitingTermination+0x4c>)
 8012182:	68db      	ldr	r3, [r3, #12]
 8012184:	68db      	ldr	r3, [r3, #12]
 8012186:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	3304      	adds	r3, #4
 801218c:	4618      	mov	r0, r3
 801218e:	f7fe fcb1 	bl	8010af4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012192:	4b0c      	ldr	r3, [pc, #48]	; (80121c4 <prvCheckTasksWaitingTermination+0x50>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	3b01      	subs	r3, #1
 8012198:	4a0a      	ldr	r2, [pc, #40]	; (80121c4 <prvCheckTasksWaitingTermination+0x50>)
 801219a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801219c:	4b0a      	ldr	r3, [pc, #40]	; (80121c8 <prvCheckTasksWaitingTermination+0x54>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	3b01      	subs	r3, #1
 80121a2:	4a09      	ldr	r2, [pc, #36]	; (80121c8 <prvCheckTasksWaitingTermination+0x54>)
 80121a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80121a6:	f000 fee9 	bl	8012f7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80121aa:	6878      	ldr	r0, [r7, #4]
 80121ac:	f000 f80e 	bl	80121cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80121b0:	4b05      	ldr	r3, [pc, #20]	; (80121c8 <prvCheckTasksWaitingTermination+0x54>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d1e1      	bne.n	801217c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80121b8:	bf00      	nop
 80121ba:	3708      	adds	r7, #8
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}
 80121c0:	20003f0c 	.word	0x20003f0c
 80121c4:	20003f38 	.word	0x20003f38
 80121c8:	20003f20 	.word	0x20003f20

080121cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b084      	sub	sp, #16
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d108      	bne.n	80121f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121e2:	4618      	mov	r0, r3
 80121e4:	f001 f882 	bl	80132ec <vPortFree>
				vPortFree( pxTCB );
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	f001 f87f 	bl	80132ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80121ee:	e019      	b.n	8012224 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80121f6:	2b01      	cmp	r3, #1
 80121f8:	d103      	bne.n	8012202 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f001 f876 	bl	80132ec <vPortFree>
	}
 8012200:	e010      	b.n	8012224 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012208:	2b02      	cmp	r3, #2
 801220a:	d00b      	beq.n	8012224 <prvDeleteTCB+0x58>
 801220c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012210:	b672      	cpsid	i
 8012212:	f383 8811 	msr	BASEPRI, r3
 8012216:	f3bf 8f6f 	isb	sy
 801221a:	f3bf 8f4f 	dsb	sy
 801221e:	b662      	cpsie	i
 8012220:	60fb      	str	r3, [r7, #12]
 8012222:	e7fe      	b.n	8012222 <prvDeleteTCB+0x56>
	}
 8012224:	bf00      	nop
 8012226:	3710      	adds	r7, #16
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}

0801222c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801222c:	b480      	push	{r7}
 801222e:	b083      	sub	sp, #12
 8012230:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012232:	4b0c      	ldr	r3, [pc, #48]	; (8012264 <prvResetNextTaskUnblockTime+0x38>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d104      	bne.n	8012246 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801223c:	4b0a      	ldr	r3, [pc, #40]	; (8012268 <prvResetNextTaskUnblockTime+0x3c>)
 801223e:	f04f 32ff 	mov.w	r2, #4294967295
 8012242:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012244:	e008      	b.n	8012258 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012246:	4b07      	ldr	r3, [pc, #28]	; (8012264 <prvResetNextTaskUnblockTime+0x38>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	68db      	ldr	r3, [r3, #12]
 801224c:	68db      	ldr	r3, [r3, #12]
 801224e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	685b      	ldr	r3, [r3, #4]
 8012254:	4a04      	ldr	r2, [pc, #16]	; (8012268 <prvResetNextTaskUnblockTime+0x3c>)
 8012256:	6013      	str	r3, [r2, #0]
}
 8012258:	bf00      	nop
 801225a:	370c      	adds	r7, #12
 801225c:	46bd      	mov	sp, r7
 801225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012262:	4770      	bx	lr
 8012264:	20003ef0 	.word	0x20003ef0
 8012268:	20003f58 	.word	0x20003f58

0801226c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801226c:	b480      	push	{r7}
 801226e:	b083      	sub	sp, #12
 8012270:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012272:	4b0b      	ldr	r3, [pc, #44]	; (80122a0 <xTaskGetSchedulerState+0x34>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d102      	bne.n	8012280 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801227a:	2301      	movs	r3, #1
 801227c:	607b      	str	r3, [r7, #4]
 801227e:	e008      	b.n	8012292 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012280:	4b08      	ldr	r3, [pc, #32]	; (80122a4 <xTaskGetSchedulerState+0x38>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d102      	bne.n	801228e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012288:	2302      	movs	r3, #2
 801228a:	607b      	str	r3, [r7, #4]
 801228c:	e001      	b.n	8012292 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801228e:	2300      	movs	r3, #0
 8012290:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012292:	687b      	ldr	r3, [r7, #4]
	}
 8012294:	4618      	mov	r0, r3
 8012296:	370c      	adds	r7, #12
 8012298:	46bd      	mov	sp, r7
 801229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229e:	4770      	bx	lr
 80122a0:	20003f44 	.word	0x20003f44
 80122a4:	20003f60 	.word	0x20003f60

080122a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b086      	sub	sp, #24
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80122b4:	2300      	movs	r3, #0
 80122b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d058      	beq.n	8012370 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80122be:	4b2f      	ldr	r3, [pc, #188]	; (801237c <xTaskPriorityDisinherit+0xd4>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	693a      	ldr	r2, [r7, #16]
 80122c4:	429a      	cmp	r2, r3
 80122c6:	d00b      	beq.n	80122e0 <xTaskPriorityDisinherit+0x38>
 80122c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122cc:	b672      	cpsid	i
 80122ce:	f383 8811 	msr	BASEPRI, r3
 80122d2:	f3bf 8f6f 	isb	sy
 80122d6:	f3bf 8f4f 	dsb	sy
 80122da:	b662      	cpsie	i
 80122dc:	60fb      	str	r3, [r7, #12]
 80122de:	e7fe      	b.n	80122de <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80122e0:	693b      	ldr	r3, [r7, #16]
 80122e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d10b      	bne.n	8012300 <xTaskPriorityDisinherit+0x58>
 80122e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ec:	b672      	cpsid	i
 80122ee:	f383 8811 	msr	BASEPRI, r3
 80122f2:	f3bf 8f6f 	isb	sy
 80122f6:	f3bf 8f4f 	dsb	sy
 80122fa:	b662      	cpsie	i
 80122fc:	60bb      	str	r3, [r7, #8]
 80122fe:	e7fe      	b.n	80122fe <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012304:	1e5a      	subs	r2, r3, #1
 8012306:	693b      	ldr	r3, [r7, #16]
 8012308:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801230a:	693b      	ldr	r3, [r7, #16]
 801230c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801230e:	693b      	ldr	r3, [r7, #16]
 8012310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012312:	429a      	cmp	r2, r3
 8012314:	d02c      	beq.n	8012370 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012316:	693b      	ldr	r3, [r7, #16]
 8012318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801231a:	2b00      	cmp	r3, #0
 801231c:	d128      	bne.n	8012370 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	3304      	adds	r3, #4
 8012322:	4618      	mov	r0, r3
 8012324:	f7fe fbe6 	bl	8010af4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012328:	693b      	ldr	r3, [r7, #16]
 801232a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801232c:	693b      	ldr	r3, [r7, #16]
 801232e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012334:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012338:	693b      	ldr	r3, [r7, #16]
 801233a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801233c:	693b      	ldr	r3, [r7, #16]
 801233e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012340:	4b0f      	ldr	r3, [pc, #60]	; (8012380 <xTaskPriorityDisinherit+0xd8>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	429a      	cmp	r2, r3
 8012346:	d903      	bls.n	8012350 <xTaskPriorityDisinherit+0xa8>
 8012348:	693b      	ldr	r3, [r7, #16]
 801234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801234c:	4a0c      	ldr	r2, [pc, #48]	; (8012380 <xTaskPriorityDisinherit+0xd8>)
 801234e:	6013      	str	r3, [r2, #0]
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012354:	4613      	mov	r3, r2
 8012356:	009b      	lsls	r3, r3, #2
 8012358:	4413      	add	r3, r2
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	4a09      	ldr	r2, [pc, #36]	; (8012384 <xTaskPriorityDisinherit+0xdc>)
 801235e:	441a      	add	r2, r3
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	3304      	adds	r3, #4
 8012364:	4619      	mov	r1, r3
 8012366:	4610      	mov	r0, r2
 8012368:	f7fe fb67 	bl	8010a3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801236c:	2301      	movs	r3, #1
 801236e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012370:	697b      	ldr	r3, [r7, #20]
	}
 8012372:	4618      	mov	r0, r3
 8012374:	3718      	adds	r7, #24
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}
 801237a:	bf00      	nop
 801237c:	20003a64 	.word	0x20003a64
 8012380:	20003f40 	.word	0x20003f40
 8012384:	20003a68 	.word	0x20003a68

08012388 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8012388:	b580      	push	{r7, lr}
 801238a:	b086      	sub	sp, #24
 801238c:	af00      	add	r7, sp, #0
 801238e:	60f8      	str	r0, [r7, #12]
 8012390:	60b9      	str	r1, [r7, #8]
 8012392:	607a      	str	r2, [r7, #4]
 8012394:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8012396:	f000 fdbf 	bl	8012f18 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801239a:	4b26      	ldr	r3, [pc, #152]	; (8012434 <xTaskNotifyWait+0xac>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80123a2:	b2db      	uxtb	r3, r3
 80123a4:	2b02      	cmp	r3, #2
 80123a6:	d01a      	beq.n	80123de <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80123a8:	4b22      	ldr	r3, [pc, #136]	; (8012434 <xTaskNotifyWait+0xac>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80123ae:	68fa      	ldr	r2, [r7, #12]
 80123b0:	43d2      	mvns	r2, r2
 80123b2:	400a      	ands	r2, r1
 80123b4:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80123b6:	4b1f      	ldr	r3, [pc, #124]	; (8012434 <xTaskNotifyWait+0xac>)
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	2201      	movs	r2, #1
 80123bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d00b      	beq.n	80123de <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80123c6:	2101      	movs	r1, #1
 80123c8:	6838      	ldr	r0, [r7, #0]
 80123ca:	f000 f8f1 	bl	80125b0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80123ce:	4b1a      	ldr	r3, [pc, #104]	; (8012438 <xTaskNotifyWait+0xb0>)
 80123d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123d4:	601a      	str	r2, [r3, #0]
 80123d6:	f3bf 8f4f 	dsb	sy
 80123da:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80123de:	f000 fdcd 	bl	8012f7c <vPortExitCritical>

		taskENTER_CRITICAL();
 80123e2:	f000 fd99 	bl	8012f18 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d004      	beq.n	80123f6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80123ec:	4b11      	ldr	r3, [pc, #68]	; (8012434 <xTaskNotifyWait+0xac>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80123f6:	4b0f      	ldr	r3, [pc, #60]	; (8012434 <xTaskNotifyWait+0xac>)
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80123fe:	b2db      	uxtb	r3, r3
 8012400:	2b02      	cmp	r3, #2
 8012402:	d002      	beq.n	801240a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8012404:	2300      	movs	r3, #0
 8012406:	617b      	str	r3, [r7, #20]
 8012408:	e008      	b.n	801241c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801240a:	4b0a      	ldr	r3, [pc, #40]	; (8012434 <xTaskNotifyWait+0xac>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012410:	68ba      	ldr	r2, [r7, #8]
 8012412:	43d2      	mvns	r2, r2
 8012414:	400a      	ands	r2, r1
 8012416:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8012418:	2301      	movs	r3, #1
 801241a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801241c:	4b05      	ldr	r3, [pc, #20]	; (8012434 <xTaskNotifyWait+0xac>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	2200      	movs	r2, #0
 8012422:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8012426:	f000 fda9 	bl	8012f7c <vPortExitCritical>

		return xReturn;
 801242a:	697b      	ldr	r3, [r7, #20]
	}
 801242c:	4618      	mov	r0, r3
 801242e:	3718      	adds	r7, #24
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}
 8012434:	20003a64 	.word	0x20003a64
 8012438:	e000ed04 	.word	0xe000ed04

0801243c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801243c:	b580      	push	{r7, lr}
 801243e:	b08a      	sub	sp, #40	; 0x28
 8012440:	af00      	add	r7, sp, #0
 8012442:	60f8      	str	r0, [r7, #12]
 8012444:	60b9      	str	r1, [r7, #8]
 8012446:	603b      	str	r3, [r7, #0]
 8012448:	4613      	mov	r3, r2
 801244a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801244c:	2301      	movs	r3, #1
 801244e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d10b      	bne.n	801246e <xTaskGenericNotify+0x32>
 8012456:	f04f 0350 	mov.w	r3, #80	; 0x50
 801245a:	b672      	cpsid	i
 801245c:	f383 8811 	msr	BASEPRI, r3
 8012460:	f3bf 8f6f 	isb	sy
 8012464:	f3bf 8f4f 	dsb	sy
 8012468:	b662      	cpsie	i
 801246a:	61bb      	str	r3, [r7, #24]
 801246c:	e7fe      	b.n	801246c <xTaskGenericNotify+0x30>
		pxTCB = xTaskToNotify;
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8012472:	f000 fd51 	bl	8012f18 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d003      	beq.n	8012484 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801247c:	6a3b      	ldr	r3, [r7, #32]
 801247e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012484:	6a3b      	ldr	r3, [r7, #32]
 8012486:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801248a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801248c:	6a3b      	ldr	r3, [r7, #32]
 801248e:	2202      	movs	r2, #2
 8012490:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8012494:	79fb      	ldrb	r3, [r7, #7]
 8012496:	2b04      	cmp	r3, #4
 8012498:	d827      	bhi.n	80124ea <xTaskGenericNotify+0xae>
 801249a:	a201      	add	r2, pc, #4	; (adr r2, 80124a0 <xTaskGenericNotify+0x64>)
 801249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124a0:	0801250d 	.word	0x0801250d
 80124a4:	080124b5 	.word	0x080124b5
 80124a8:	080124c3 	.word	0x080124c3
 80124ac:	080124cf 	.word	0x080124cf
 80124b0:	080124d7 	.word	0x080124d7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80124b4:	6a3b      	ldr	r3, [r7, #32]
 80124b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	431a      	orrs	r2, r3
 80124bc:	6a3b      	ldr	r3, [r7, #32]
 80124be:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80124c0:	e027      	b.n	8012512 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80124c2:	6a3b      	ldr	r3, [r7, #32]
 80124c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124c6:	1c5a      	adds	r2, r3, #1
 80124c8:	6a3b      	ldr	r3, [r7, #32]
 80124ca:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80124cc:	e021      	b.n	8012512 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80124ce:	6a3b      	ldr	r3, [r7, #32]
 80124d0:	68ba      	ldr	r2, [r7, #8]
 80124d2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80124d4:	e01d      	b.n	8012512 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80124d6:	7ffb      	ldrb	r3, [r7, #31]
 80124d8:	2b02      	cmp	r3, #2
 80124da:	d003      	beq.n	80124e4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80124dc:	6a3b      	ldr	r3, [r7, #32]
 80124de:	68ba      	ldr	r2, [r7, #8]
 80124e0:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80124e2:	e016      	b.n	8012512 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80124e4:	2300      	movs	r3, #0
 80124e6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80124e8:	e013      	b.n	8012512 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80124ea:	6a3b      	ldr	r3, [r7, #32]
 80124ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124f2:	d00d      	beq.n	8012510 <xTaskGenericNotify+0xd4>
 80124f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124f8:	b672      	cpsid	i
 80124fa:	f383 8811 	msr	BASEPRI, r3
 80124fe:	f3bf 8f6f 	isb	sy
 8012502:	f3bf 8f4f 	dsb	sy
 8012506:	b662      	cpsie	i
 8012508:	617b      	str	r3, [r7, #20]
 801250a:	e7fe      	b.n	801250a <xTaskGenericNotify+0xce>
					break;
 801250c:	bf00      	nop
 801250e:	e000      	b.n	8012512 <xTaskGenericNotify+0xd6>

					break;
 8012510:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012512:	7ffb      	ldrb	r3, [r7, #31]
 8012514:	2b01      	cmp	r3, #1
 8012516:	d13b      	bne.n	8012590 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012518:	6a3b      	ldr	r3, [r7, #32]
 801251a:	3304      	adds	r3, #4
 801251c:	4618      	mov	r0, r3
 801251e:	f7fe fae9 	bl	8010af4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8012522:	6a3b      	ldr	r3, [r7, #32]
 8012524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012526:	4b1e      	ldr	r3, [pc, #120]	; (80125a0 <xTaskGenericNotify+0x164>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	429a      	cmp	r2, r3
 801252c:	d903      	bls.n	8012536 <xTaskGenericNotify+0xfa>
 801252e:	6a3b      	ldr	r3, [r7, #32]
 8012530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012532:	4a1b      	ldr	r2, [pc, #108]	; (80125a0 <xTaskGenericNotify+0x164>)
 8012534:	6013      	str	r3, [r2, #0]
 8012536:	6a3b      	ldr	r3, [r7, #32]
 8012538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801253a:	4613      	mov	r3, r2
 801253c:	009b      	lsls	r3, r3, #2
 801253e:	4413      	add	r3, r2
 8012540:	009b      	lsls	r3, r3, #2
 8012542:	4a18      	ldr	r2, [pc, #96]	; (80125a4 <xTaskGenericNotify+0x168>)
 8012544:	441a      	add	r2, r3
 8012546:	6a3b      	ldr	r3, [r7, #32]
 8012548:	3304      	adds	r3, #4
 801254a:	4619      	mov	r1, r3
 801254c:	4610      	mov	r0, r2
 801254e:	f7fe fa74 	bl	8010a3a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012552:	6a3b      	ldr	r3, [r7, #32]
 8012554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012556:	2b00      	cmp	r3, #0
 8012558:	d00b      	beq.n	8012572 <xTaskGenericNotify+0x136>
 801255a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801255e:	b672      	cpsid	i
 8012560:	f383 8811 	msr	BASEPRI, r3
 8012564:	f3bf 8f6f 	isb	sy
 8012568:	f3bf 8f4f 	dsb	sy
 801256c:	b662      	cpsie	i
 801256e:	613b      	str	r3, [r7, #16]
 8012570:	e7fe      	b.n	8012570 <xTaskGenericNotify+0x134>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012572:	6a3b      	ldr	r3, [r7, #32]
 8012574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012576:	4b0c      	ldr	r3, [pc, #48]	; (80125a8 <xTaskGenericNotify+0x16c>)
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801257c:	429a      	cmp	r2, r3
 801257e:	d907      	bls.n	8012590 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8012580:	4b0a      	ldr	r3, [pc, #40]	; (80125ac <xTaskGenericNotify+0x170>)
 8012582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012586:	601a      	str	r2, [r3, #0]
 8012588:	f3bf 8f4f 	dsb	sy
 801258c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012590:	f000 fcf4 	bl	8012f7c <vPortExitCritical>

		return xReturn;
 8012594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012596:	4618      	mov	r0, r3
 8012598:	3728      	adds	r7, #40	; 0x28
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	20003f40 	.word	0x20003f40
 80125a4:	20003a68 	.word	0x20003a68
 80125a8:	20003a64 	.word	0x20003a64
 80125ac:	e000ed04 	.word	0xe000ed04

080125b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b084      	sub	sp, #16
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80125ba:	4b21      	ldr	r3, [pc, #132]	; (8012640 <prvAddCurrentTaskToDelayedList+0x90>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80125c0:	4b20      	ldr	r3, [pc, #128]	; (8012644 <prvAddCurrentTaskToDelayedList+0x94>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	3304      	adds	r3, #4
 80125c6:	4618      	mov	r0, r3
 80125c8:	f7fe fa94 	bl	8010af4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125d2:	d10a      	bne.n	80125ea <prvAddCurrentTaskToDelayedList+0x3a>
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d007      	beq.n	80125ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80125da:	4b1a      	ldr	r3, [pc, #104]	; (8012644 <prvAddCurrentTaskToDelayedList+0x94>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	3304      	adds	r3, #4
 80125e0:	4619      	mov	r1, r3
 80125e2:	4819      	ldr	r0, [pc, #100]	; (8012648 <prvAddCurrentTaskToDelayedList+0x98>)
 80125e4:	f7fe fa29 	bl	8010a3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80125e8:	e026      	b.n	8012638 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80125ea:	68fa      	ldr	r2, [r7, #12]
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	4413      	add	r3, r2
 80125f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80125f2:	4b14      	ldr	r3, [pc, #80]	; (8012644 <prvAddCurrentTaskToDelayedList+0x94>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	68ba      	ldr	r2, [r7, #8]
 80125f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80125fa:	68ba      	ldr	r2, [r7, #8]
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	429a      	cmp	r2, r3
 8012600:	d209      	bcs.n	8012616 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012602:	4b12      	ldr	r3, [pc, #72]	; (801264c <prvAddCurrentTaskToDelayedList+0x9c>)
 8012604:	681a      	ldr	r2, [r3, #0]
 8012606:	4b0f      	ldr	r3, [pc, #60]	; (8012644 <prvAddCurrentTaskToDelayedList+0x94>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	3304      	adds	r3, #4
 801260c:	4619      	mov	r1, r3
 801260e:	4610      	mov	r0, r2
 8012610:	f7fe fa37 	bl	8010a82 <vListInsert>
}
 8012614:	e010      	b.n	8012638 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012616:	4b0e      	ldr	r3, [pc, #56]	; (8012650 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012618:	681a      	ldr	r2, [r3, #0]
 801261a:	4b0a      	ldr	r3, [pc, #40]	; (8012644 <prvAddCurrentTaskToDelayedList+0x94>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	3304      	adds	r3, #4
 8012620:	4619      	mov	r1, r3
 8012622:	4610      	mov	r0, r2
 8012624:	f7fe fa2d 	bl	8010a82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012628:	4b0a      	ldr	r3, [pc, #40]	; (8012654 <prvAddCurrentTaskToDelayedList+0xa4>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	68ba      	ldr	r2, [r7, #8]
 801262e:	429a      	cmp	r2, r3
 8012630:	d202      	bcs.n	8012638 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012632:	4a08      	ldr	r2, [pc, #32]	; (8012654 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	6013      	str	r3, [r2, #0]
}
 8012638:	bf00      	nop
 801263a:	3710      	adds	r7, #16
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}
 8012640:	20003f3c 	.word	0x20003f3c
 8012644:	20003a64 	.word	0x20003a64
 8012648:	20003f24 	.word	0x20003f24
 801264c:	20003ef4 	.word	0x20003ef4
 8012650:	20003ef0 	.word	0x20003ef0
 8012654:	20003f58 	.word	0x20003f58

08012658 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b08a      	sub	sp, #40	; 0x28
 801265c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801265e:	2300      	movs	r3, #0
 8012660:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012662:	f000 fb0d 	bl	8012c80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012666:	4b1d      	ldr	r3, [pc, #116]	; (80126dc <xTimerCreateTimerTask+0x84>)
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d021      	beq.n	80126b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801266e:	2300      	movs	r3, #0
 8012670:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012672:	2300      	movs	r3, #0
 8012674:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012676:	1d3a      	adds	r2, r7, #4
 8012678:	f107 0108 	add.w	r1, r7, #8
 801267c:	f107 030c 	add.w	r3, r7, #12
 8012680:	4618      	mov	r0, r3
 8012682:	f7fe f993 	bl	80109ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012686:	6879      	ldr	r1, [r7, #4]
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	68fa      	ldr	r2, [r7, #12]
 801268c:	9202      	str	r2, [sp, #8]
 801268e:	9301      	str	r3, [sp, #4]
 8012690:	2302      	movs	r3, #2
 8012692:	9300      	str	r3, [sp, #0]
 8012694:	2300      	movs	r3, #0
 8012696:	460a      	mov	r2, r1
 8012698:	4911      	ldr	r1, [pc, #68]	; (80126e0 <xTimerCreateTimerTask+0x88>)
 801269a:	4812      	ldr	r0, [pc, #72]	; (80126e4 <xTimerCreateTimerTask+0x8c>)
 801269c:	f7fe ff4a 	bl	8011534 <xTaskCreateStatic>
 80126a0:	4602      	mov	r2, r0
 80126a2:	4b11      	ldr	r3, [pc, #68]	; (80126e8 <xTimerCreateTimerTask+0x90>)
 80126a4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80126a6:	4b10      	ldr	r3, [pc, #64]	; (80126e8 <xTimerCreateTimerTask+0x90>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d001      	beq.n	80126b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80126ae:	2301      	movs	r3, #1
 80126b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80126b2:	697b      	ldr	r3, [r7, #20]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d10b      	bne.n	80126d0 <xTimerCreateTimerTask+0x78>
 80126b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126bc:	b672      	cpsid	i
 80126be:	f383 8811 	msr	BASEPRI, r3
 80126c2:	f3bf 8f6f 	isb	sy
 80126c6:	f3bf 8f4f 	dsb	sy
 80126ca:	b662      	cpsie	i
 80126cc:	613b      	str	r3, [r7, #16]
 80126ce:	e7fe      	b.n	80126ce <xTimerCreateTimerTask+0x76>
	return xReturn;
 80126d0:	697b      	ldr	r3, [r7, #20]
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	3718      	adds	r7, #24
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}
 80126da:	bf00      	nop
 80126dc:	20003f94 	.word	0x20003f94
 80126e0:	08017d54 	.word	0x08017d54
 80126e4:	08012825 	.word	0x08012825
 80126e8:	20003f98 	.word	0x20003f98

080126ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b08a      	sub	sp, #40	; 0x28
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	60f8      	str	r0, [r7, #12]
 80126f4:	60b9      	str	r1, [r7, #8]
 80126f6:	607a      	str	r2, [r7, #4]
 80126f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80126fa:	2300      	movs	r3, #0
 80126fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d10b      	bne.n	801271c <xTimerGenericCommand+0x30>
 8012704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012708:	b672      	cpsid	i
 801270a:	f383 8811 	msr	BASEPRI, r3
 801270e:	f3bf 8f6f 	isb	sy
 8012712:	f3bf 8f4f 	dsb	sy
 8012716:	b662      	cpsie	i
 8012718:	623b      	str	r3, [r7, #32]
 801271a:	e7fe      	b.n	801271a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801271c:	4b19      	ldr	r3, [pc, #100]	; (8012784 <xTimerGenericCommand+0x98>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d02a      	beq.n	801277a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	2b05      	cmp	r3, #5
 8012734:	dc18      	bgt.n	8012768 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012736:	f7ff fd99 	bl	801226c <xTaskGetSchedulerState>
 801273a:	4603      	mov	r3, r0
 801273c:	2b02      	cmp	r3, #2
 801273e:	d109      	bne.n	8012754 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012740:	4b10      	ldr	r3, [pc, #64]	; (8012784 <xTimerGenericCommand+0x98>)
 8012742:	6818      	ldr	r0, [r3, #0]
 8012744:	f107 0110 	add.w	r1, r7, #16
 8012748:	2300      	movs	r3, #0
 801274a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801274c:	f7fe fb06 	bl	8010d5c <xQueueGenericSend>
 8012750:	6278      	str	r0, [r7, #36]	; 0x24
 8012752:	e012      	b.n	801277a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012754:	4b0b      	ldr	r3, [pc, #44]	; (8012784 <xTimerGenericCommand+0x98>)
 8012756:	6818      	ldr	r0, [r3, #0]
 8012758:	f107 0110 	add.w	r1, r7, #16
 801275c:	2300      	movs	r3, #0
 801275e:	2200      	movs	r2, #0
 8012760:	f7fe fafc 	bl	8010d5c <xQueueGenericSend>
 8012764:	6278      	str	r0, [r7, #36]	; 0x24
 8012766:	e008      	b.n	801277a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012768:	4b06      	ldr	r3, [pc, #24]	; (8012784 <xTimerGenericCommand+0x98>)
 801276a:	6818      	ldr	r0, [r3, #0]
 801276c:	f107 0110 	add.w	r1, r7, #16
 8012770:	2300      	movs	r3, #0
 8012772:	683a      	ldr	r2, [r7, #0]
 8012774:	f7fe fbf4 	bl	8010f60 <xQueueGenericSendFromISR>
 8012778:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801277c:	4618      	mov	r0, r3
 801277e:	3728      	adds	r7, #40	; 0x28
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}
 8012784:	20003f94 	.word	0x20003f94

08012788 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b088      	sub	sp, #32
 801278c:	af02      	add	r7, sp, #8
 801278e:	6078      	str	r0, [r7, #4]
 8012790:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012792:	4b23      	ldr	r3, [pc, #140]	; (8012820 <prvProcessExpiredTimer+0x98>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	68db      	ldr	r3, [r3, #12]
 8012798:	68db      	ldr	r3, [r3, #12]
 801279a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801279c:	697b      	ldr	r3, [r7, #20]
 801279e:	3304      	adds	r3, #4
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7fe f9a7 	bl	8010af4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80127a6:	697b      	ldr	r3, [r7, #20]
 80127a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127ac:	f003 0304 	and.w	r3, r3, #4
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d023      	beq.n	80127fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80127b4:	697b      	ldr	r3, [r7, #20]
 80127b6:	699a      	ldr	r2, [r3, #24]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	18d1      	adds	r1, r2, r3
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	683a      	ldr	r2, [r7, #0]
 80127c0:	6978      	ldr	r0, [r7, #20]
 80127c2:	f000 f8d3 	bl	801296c <prvInsertTimerInActiveList>
 80127c6:	4603      	mov	r3, r0
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d020      	beq.n	801280e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80127cc:	2300      	movs	r3, #0
 80127ce:	9300      	str	r3, [sp, #0]
 80127d0:	2300      	movs	r3, #0
 80127d2:	687a      	ldr	r2, [r7, #4]
 80127d4:	2100      	movs	r1, #0
 80127d6:	6978      	ldr	r0, [r7, #20]
 80127d8:	f7ff ff88 	bl	80126ec <xTimerGenericCommand>
 80127dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d114      	bne.n	801280e <prvProcessExpiredTimer+0x86>
 80127e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127e8:	b672      	cpsid	i
 80127ea:	f383 8811 	msr	BASEPRI, r3
 80127ee:	f3bf 8f6f 	isb	sy
 80127f2:	f3bf 8f4f 	dsb	sy
 80127f6:	b662      	cpsie	i
 80127f8:	60fb      	str	r3, [r7, #12]
 80127fa:	e7fe      	b.n	80127fa <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80127fc:	697b      	ldr	r3, [r7, #20]
 80127fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012802:	f023 0301 	bic.w	r3, r3, #1
 8012806:	b2da      	uxtb	r2, r3
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	6a1b      	ldr	r3, [r3, #32]
 8012812:	6978      	ldr	r0, [r7, #20]
 8012814:	4798      	blx	r3
}
 8012816:	bf00      	nop
 8012818:	3718      	adds	r7, #24
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}
 801281e:	bf00      	nop
 8012820:	20003f8c 	.word	0x20003f8c

08012824 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b084      	sub	sp, #16
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801282c:	f107 0308 	add.w	r3, r7, #8
 8012830:	4618      	mov	r0, r3
 8012832:	f000 f857 	bl	80128e4 <prvGetNextExpireTime>
 8012836:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	4619      	mov	r1, r3
 801283c:	68f8      	ldr	r0, [r7, #12]
 801283e:	f000 f803 	bl	8012848 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012842:	f000 f8d5 	bl	80129f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012846:	e7f1      	b.n	801282c <prvTimerTask+0x8>

08012848 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b084      	sub	sp, #16
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012852:	f7ff f927 	bl	8011aa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012856:	f107 0308 	add.w	r3, r7, #8
 801285a:	4618      	mov	r0, r3
 801285c:	f000 f866 	bl	801292c <prvSampleTimeNow>
 8012860:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012862:	68bb      	ldr	r3, [r7, #8]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d130      	bne.n	80128ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d10a      	bne.n	8012884 <prvProcessTimerOrBlockTask+0x3c>
 801286e:	687a      	ldr	r2, [r7, #4]
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	429a      	cmp	r2, r3
 8012874:	d806      	bhi.n	8012884 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012876:	f7ff f923 	bl	8011ac0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801287a:	68f9      	ldr	r1, [r7, #12]
 801287c:	6878      	ldr	r0, [r7, #4]
 801287e:	f7ff ff83 	bl	8012788 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012882:	e024      	b.n	80128ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d008      	beq.n	801289c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801288a:	4b13      	ldr	r3, [pc, #76]	; (80128d8 <prvProcessTimerOrBlockTask+0x90>)
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d101      	bne.n	8012898 <prvProcessTimerOrBlockTask+0x50>
 8012894:	2301      	movs	r3, #1
 8012896:	e000      	b.n	801289a <prvProcessTimerOrBlockTask+0x52>
 8012898:	2300      	movs	r3, #0
 801289a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801289c:	4b0f      	ldr	r3, [pc, #60]	; (80128dc <prvProcessTimerOrBlockTask+0x94>)
 801289e:	6818      	ldr	r0, [r3, #0]
 80128a0:	687a      	ldr	r2, [r7, #4]
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	1ad3      	subs	r3, r2, r3
 80128a6:	683a      	ldr	r2, [r7, #0]
 80128a8:	4619      	mov	r1, r3
 80128aa:	f7fe fe0f 	bl	80114cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80128ae:	f7ff f907 	bl	8011ac0 <xTaskResumeAll>
 80128b2:	4603      	mov	r3, r0
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d10a      	bne.n	80128ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80128b8:	4b09      	ldr	r3, [pc, #36]	; (80128e0 <prvProcessTimerOrBlockTask+0x98>)
 80128ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128be:	601a      	str	r2, [r3, #0]
 80128c0:	f3bf 8f4f 	dsb	sy
 80128c4:	f3bf 8f6f 	isb	sy
}
 80128c8:	e001      	b.n	80128ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80128ca:	f7ff f8f9 	bl	8011ac0 <xTaskResumeAll>
}
 80128ce:	bf00      	nop
 80128d0:	3710      	adds	r7, #16
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
 80128d6:	bf00      	nop
 80128d8:	20003f90 	.word	0x20003f90
 80128dc:	20003f94 	.word	0x20003f94
 80128e0:	e000ed04 	.word	0xe000ed04

080128e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80128e4:	b480      	push	{r7}
 80128e6:	b085      	sub	sp, #20
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80128ec:	4b0e      	ldr	r3, [pc, #56]	; (8012928 <prvGetNextExpireTime+0x44>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d101      	bne.n	80128fa <prvGetNextExpireTime+0x16>
 80128f6:	2201      	movs	r2, #1
 80128f8:	e000      	b.n	80128fc <prvGetNextExpireTime+0x18>
 80128fa:	2200      	movs	r2, #0
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d105      	bne.n	8012914 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012908:	4b07      	ldr	r3, [pc, #28]	; (8012928 <prvGetNextExpireTime+0x44>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	68db      	ldr	r3, [r3, #12]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	60fb      	str	r3, [r7, #12]
 8012912:	e001      	b.n	8012918 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012914:	2300      	movs	r3, #0
 8012916:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012918:	68fb      	ldr	r3, [r7, #12]
}
 801291a:	4618      	mov	r0, r3
 801291c:	3714      	adds	r7, #20
 801291e:	46bd      	mov	sp, r7
 8012920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012924:	4770      	bx	lr
 8012926:	bf00      	nop
 8012928:	20003f8c 	.word	0x20003f8c

0801292c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b084      	sub	sp, #16
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012934:	f7ff f962 	bl	8011bfc <xTaskGetTickCount>
 8012938:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801293a:	4b0b      	ldr	r3, [pc, #44]	; (8012968 <prvSampleTimeNow+0x3c>)
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	68fa      	ldr	r2, [r7, #12]
 8012940:	429a      	cmp	r2, r3
 8012942:	d205      	bcs.n	8012950 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012944:	f000 f936 	bl	8012bb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2201      	movs	r2, #1
 801294c:	601a      	str	r2, [r3, #0]
 801294e:	e002      	b.n	8012956 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2200      	movs	r2, #0
 8012954:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012956:	4a04      	ldr	r2, [pc, #16]	; (8012968 <prvSampleTimeNow+0x3c>)
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801295c:	68fb      	ldr	r3, [r7, #12]
}
 801295e:	4618      	mov	r0, r3
 8012960:	3710      	adds	r7, #16
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
 8012966:	bf00      	nop
 8012968:	20003f9c 	.word	0x20003f9c

0801296c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b086      	sub	sp, #24
 8012970:	af00      	add	r7, sp, #0
 8012972:	60f8      	str	r0, [r7, #12]
 8012974:	60b9      	str	r1, [r7, #8]
 8012976:	607a      	str	r2, [r7, #4]
 8012978:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801297a:	2300      	movs	r3, #0
 801297c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	68ba      	ldr	r2, [r7, #8]
 8012982:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	68fa      	ldr	r2, [r7, #12]
 8012988:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801298a:	68ba      	ldr	r2, [r7, #8]
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	429a      	cmp	r2, r3
 8012990:	d812      	bhi.n	80129b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012992:	687a      	ldr	r2, [r7, #4]
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	1ad2      	subs	r2, r2, r3
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	699b      	ldr	r3, [r3, #24]
 801299c:	429a      	cmp	r2, r3
 801299e:	d302      	bcc.n	80129a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80129a0:	2301      	movs	r3, #1
 80129a2:	617b      	str	r3, [r7, #20]
 80129a4:	e01b      	b.n	80129de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80129a6:	4b10      	ldr	r3, [pc, #64]	; (80129e8 <prvInsertTimerInActiveList+0x7c>)
 80129a8:	681a      	ldr	r2, [r3, #0]
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	3304      	adds	r3, #4
 80129ae:	4619      	mov	r1, r3
 80129b0:	4610      	mov	r0, r2
 80129b2:	f7fe f866 	bl	8010a82 <vListInsert>
 80129b6:	e012      	b.n	80129de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80129b8:	687a      	ldr	r2, [r7, #4]
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	429a      	cmp	r2, r3
 80129be:	d206      	bcs.n	80129ce <prvInsertTimerInActiveList+0x62>
 80129c0:	68ba      	ldr	r2, [r7, #8]
 80129c2:	683b      	ldr	r3, [r7, #0]
 80129c4:	429a      	cmp	r2, r3
 80129c6:	d302      	bcc.n	80129ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80129c8:	2301      	movs	r3, #1
 80129ca:	617b      	str	r3, [r7, #20]
 80129cc:	e007      	b.n	80129de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80129ce:	4b07      	ldr	r3, [pc, #28]	; (80129ec <prvInsertTimerInActiveList+0x80>)
 80129d0:	681a      	ldr	r2, [r3, #0]
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	3304      	adds	r3, #4
 80129d6:	4619      	mov	r1, r3
 80129d8:	4610      	mov	r0, r2
 80129da:	f7fe f852 	bl	8010a82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80129de:	697b      	ldr	r3, [r7, #20]
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	3718      	adds	r7, #24
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}
 80129e8:	20003f90 	.word	0x20003f90
 80129ec:	20003f8c 	.word	0x20003f8c

080129f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b08e      	sub	sp, #56	; 0x38
 80129f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80129f6:	e0cc      	b.n	8012b92 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	da19      	bge.n	8012a32 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80129fe:	1d3b      	adds	r3, r7, #4
 8012a00:	3304      	adds	r3, #4
 8012a02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d10b      	bne.n	8012a22 <prvProcessReceivedCommands+0x32>
 8012a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a0e:	b672      	cpsid	i
 8012a10:	f383 8811 	msr	BASEPRI, r3
 8012a14:	f3bf 8f6f 	isb	sy
 8012a18:	f3bf 8f4f 	dsb	sy
 8012a1c:	b662      	cpsie	i
 8012a1e:	61fb      	str	r3, [r7, #28]
 8012a20:	e7fe      	b.n	8012a20 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a28:	6850      	ldr	r0, [r2, #4]
 8012a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a2c:	6892      	ldr	r2, [r2, #8]
 8012a2e:	4611      	mov	r1, r2
 8012a30:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	f2c0 80ab 	blt.w	8012b90 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a40:	695b      	ldr	r3, [r3, #20]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d004      	beq.n	8012a50 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a48:	3304      	adds	r3, #4
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7fe f852 	bl	8010af4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012a50:	463b      	mov	r3, r7
 8012a52:	4618      	mov	r0, r3
 8012a54:	f7ff ff6a 	bl	801292c <prvSampleTimeNow>
 8012a58:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2b09      	cmp	r3, #9
 8012a5e:	f200 8098 	bhi.w	8012b92 <prvProcessReceivedCommands+0x1a2>
 8012a62:	a201      	add	r2, pc, #4	; (adr r2, 8012a68 <prvProcessReceivedCommands+0x78>)
 8012a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a68:	08012a91 	.word	0x08012a91
 8012a6c:	08012a91 	.word	0x08012a91
 8012a70:	08012a91 	.word	0x08012a91
 8012a74:	08012b07 	.word	0x08012b07
 8012a78:	08012b1b 	.word	0x08012b1b
 8012a7c:	08012b67 	.word	0x08012b67
 8012a80:	08012a91 	.word	0x08012a91
 8012a84:	08012a91 	.word	0x08012a91
 8012a88:	08012b07 	.word	0x08012b07
 8012a8c:	08012b1b 	.word	0x08012b1b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a96:	f043 0301 	orr.w	r3, r3, #1
 8012a9a:	b2da      	uxtb	r2, r3
 8012a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012aa2:	68ba      	ldr	r2, [r7, #8]
 8012aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aa6:	699b      	ldr	r3, [r3, #24]
 8012aa8:	18d1      	adds	r1, r2, r3
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ab0:	f7ff ff5c 	bl	801296c <prvInsertTimerInActiveList>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d06b      	beq.n	8012b92 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012abc:	6a1b      	ldr	r3, [r3, #32]
 8012abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ac0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ac8:	f003 0304 	and.w	r3, r3, #4
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d060      	beq.n	8012b92 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012ad0:	68ba      	ldr	r2, [r7, #8]
 8012ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ad4:	699b      	ldr	r3, [r3, #24]
 8012ad6:	441a      	add	r2, r3
 8012ad8:	2300      	movs	r3, #0
 8012ada:	9300      	str	r3, [sp, #0]
 8012adc:	2300      	movs	r3, #0
 8012ade:	2100      	movs	r1, #0
 8012ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ae2:	f7ff fe03 	bl	80126ec <xTimerGenericCommand>
 8012ae6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012ae8:	6a3b      	ldr	r3, [r7, #32]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d151      	bne.n	8012b92 <prvProcessReceivedCommands+0x1a2>
 8012aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af2:	b672      	cpsid	i
 8012af4:	f383 8811 	msr	BASEPRI, r3
 8012af8:	f3bf 8f6f 	isb	sy
 8012afc:	f3bf 8f4f 	dsb	sy
 8012b00:	b662      	cpsie	i
 8012b02:	61bb      	str	r3, [r7, #24]
 8012b04:	e7fe      	b.n	8012b04 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b0c:	f023 0301 	bic.w	r3, r3, #1
 8012b10:	b2da      	uxtb	r2, r3
 8012b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012b18:	e03b      	b.n	8012b92 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b20:	f043 0301 	orr.w	r3, r3, #1
 8012b24:	b2da      	uxtb	r2, r3
 8012b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012b2c:	68ba      	ldr	r2, [r7, #8]
 8012b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b34:	699b      	ldr	r3, [r3, #24]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d10b      	bne.n	8012b52 <prvProcessReceivedCommands+0x162>
 8012b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b3e:	b672      	cpsid	i
 8012b40:	f383 8811 	msr	BASEPRI, r3
 8012b44:	f3bf 8f6f 	isb	sy
 8012b48:	f3bf 8f4f 	dsb	sy
 8012b4c:	b662      	cpsie	i
 8012b4e:	617b      	str	r3, [r7, #20]
 8012b50:	e7fe      	b.n	8012b50 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b54:	699a      	ldr	r2, [r3, #24]
 8012b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b58:	18d1      	adds	r1, r2, r3
 8012b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b60:	f7ff ff04 	bl	801296c <prvInsertTimerInActiveList>
					break;
 8012b64:	e015      	b.n	8012b92 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b6c:	f003 0302 	and.w	r3, r3, #2
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d103      	bne.n	8012b7c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8012b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b76:	f000 fbb9 	bl	80132ec <vPortFree>
 8012b7a:	e00a      	b.n	8012b92 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b82:	f023 0301 	bic.w	r3, r3, #1
 8012b86:	b2da      	uxtb	r2, r3
 8012b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012b8e:	e000      	b.n	8012b92 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012b90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012b92:	4b07      	ldr	r3, [pc, #28]	; (8012bb0 <prvProcessReceivedCommands+0x1c0>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	1d39      	adds	r1, r7, #4
 8012b98:	2200      	movs	r2, #0
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f7fe fa7c 	bl	8011098 <xQueueReceive>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	f47f af28 	bne.w	80129f8 <prvProcessReceivedCommands+0x8>
	}
}
 8012ba8:	bf00      	nop
 8012baa:	3730      	adds	r7, #48	; 0x30
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}
 8012bb0:	20003f94 	.word	0x20003f94

08012bb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b088      	sub	sp, #32
 8012bb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012bba:	e049      	b.n	8012c50 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012bbc:	4b2e      	ldr	r3, [pc, #184]	; (8012c78 <prvSwitchTimerLists+0xc4>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	68db      	ldr	r3, [r3, #12]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012bc6:	4b2c      	ldr	r3, [pc, #176]	; (8012c78 <prvSwitchTimerLists+0xc4>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	68db      	ldr	r3, [r3, #12]
 8012bcc:	68db      	ldr	r3, [r3, #12]
 8012bce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	3304      	adds	r3, #4
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7fd ff8d 	bl	8010af4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	6a1b      	ldr	r3, [r3, #32]
 8012bde:	68f8      	ldr	r0, [r7, #12]
 8012be0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012be8:	f003 0304 	and.w	r3, r3, #4
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d02f      	beq.n	8012c50 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	699b      	ldr	r3, [r3, #24]
 8012bf4:	693a      	ldr	r2, [r7, #16]
 8012bf6:	4413      	add	r3, r2
 8012bf8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012bfa:	68ba      	ldr	r2, [r7, #8]
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	429a      	cmp	r2, r3
 8012c00:	d90e      	bls.n	8012c20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	68ba      	ldr	r2, [r7, #8]
 8012c06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	68fa      	ldr	r2, [r7, #12]
 8012c0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012c0e:	4b1a      	ldr	r3, [pc, #104]	; (8012c78 <prvSwitchTimerLists+0xc4>)
 8012c10:	681a      	ldr	r2, [r3, #0]
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	3304      	adds	r3, #4
 8012c16:	4619      	mov	r1, r3
 8012c18:	4610      	mov	r0, r2
 8012c1a:	f7fd ff32 	bl	8010a82 <vListInsert>
 8012c1e:	e017      	b.n	8012c50 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012c20:	2300      	movs	r3, #0
 8012c22:	9300      	str	r3, [sp, #0]
 8012c24:	2300      	movs	r3, #0
 8012c26:	693a      	ldr	r2, [r7, #16]
 8012c28:	2100      	movs	r1, #0
 8012c2a:	68f8      	ldr	r0, [r7, #12]
 8012c2c:	f7ff fd5e 	bl	80126ec <xTimerGenericCommand>
 8012c30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d10b      	bne.n	8012c50 <prvSwitchTimerLists+0x9c>
 8012c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c3c:	b672      	cpsid	i
 8012c3e:	f383 8811 	msr	BASEPRI, r3
 8012c42:	f3bf 8f6f 	isb	sy
 8012c46:	f3bf 8f4f 	dsb	sy
 8012c4a:	b662      	cpsie	i
 8012c4c:	603b      	str	r3, [r7, #0]
 8012c4e:	e7fe      	b.n	8012c4e <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012c50:	4b09      	ldr	r3, [pc, #36]	; (8012c78 <prvSwitchTimerLists+0xc4>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d1b0      	bne.n	8012bbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012c5a:	4b07      	ldr	r3, [pc, #28]	; (8012c78 <prvSwitchTimerLists+0xc4>)
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012c60:	4b06      	ldr	r3, [pc, #24]	; (8012c7c <prvSwitchTimerLists+0xc8>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	4a04      	ldr	r2, [pc, #16]	; (8012c78 <prvSwitchTimerLists+0xc4>)
 8012c66:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012c68:	4a04      	ldr	r2, [pc, #16]	; (8012c7c <prvSwitchTimerLists+0xc8>)
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	6013      	str	r3, [r2, #0]
}
 8012c6e:	bf00      	nop
 8012c70:	3718      	adds	r7, #24
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd80      	pop	{r7, pc}
 8012c76:	bf00      	nop
 8012c78:	20003f8c 	.word	0x20003f8c
 8012c7c:	20003f90 	.word	0x20003f90

08012c80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b082      	sub	sp, #8
 8012c84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012c86:	f000 f947 	bl	8012f18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012c8a:	4b15      	ldr	r3, [pc, #84]	; (8012ce0 <prvCheckForValidListAndQueue+0x60>)
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d120      	bne.n	8012cd4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012c92:	4814      	ldr	r0, [pc, #80]	; (8012ce4 <prvCheckForValidListAndQueue+0x64>)
 8012c94:	f7fd fea4 	bl	80109e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012c98:	4813      	ldr	r0, [pc, #76]	; (8012ce8 <prvCheckForValidListAndQueue+0x68>)
 8012c9a:	f7fd fea1 	bl	80109e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012c9e:	4b13      	ldr	r3, [pc, #76]	; (8012cec <prvCheckForValidListAndQueue+0x6c>)
 8012ca0:	4a10      	ldr	r2, [pc, #64]	; (8012ce4 <prvCheckForValidListAndQueue+0x64>)
 8012ca2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012ca4:	4b12      	ldr	r3, [pc, #72]	; (8012cf0 <prvCheckForValidListAndQueue+0x70>)
 8012ca6:	4a10      	ldr	r2, [pc, #64]	; (8012ce8 <prvCheckForValidListAndQueue+0x68>)
 8012ca8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012caa:	2300      	movs	r3, #0
 8012cac:	9300      	str	r3, [sp, #0]
 8012cae:	4b11      	ldr	r3, [pc, #68]	; (8012cf4 <prvCheckForValidListAndQueue+0x74>)
 8012cb0:	4a11      	ldr	r2, [pc, #68]	; (8012cf8 <prvCheckForValidListAndQueue+0x78>)
 8012cb2:	2110      	movs	r1, #16
 8012cb4:	200a      	movs	r0, #10
 8012cb6:	f7fd ffb1 	bl	8010c1c <xQueueGenericCreateStatic>
 8012cba:	4602      	mov	r2, r0
 8012cbc:	4b08      	ldr	r3, [pc, #32]	; (8012ce0 <prvCheckForValidListAndQueue+0x60>)
 8012cbe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012cc0:	4b07      	ldr	r3, [pc, #28]	; (8012ce0 <prvCheckForValidListAndQueue+0x60>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d005      	beq.n	8012cd4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012cc8:	4b05      	ldr	r3, [pc, #20]	; (8012ce0 <prvCheckForValidListAndQueue+0x60>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	490b      	ldr	r1, [pc, #44]	; (8012cfc <prvCheckForValidListAndQueue+0x7c>)
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7fe fbd4 	bl	801147c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012cd4:	f000 f952 	bl	8012f7c <vPortExitCritical>
}
 8012cd8:	bf00      	nop
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}
 8012cde:	bf00      	nop
 8012ce0:	20003f94 	.word	0x20003f94
 8012ce4:	20003f64 	.word	0x20003f64
 8012ce8:	20003f78 	.word	0x20003f78
 8012cec:	20003f8c 	.word	0x20003f8c
 8012cf0:	20003f90 	.word	0x20003f90
 8012cf4:	20004040 	.word	0x20004040
 8012cf8:	20003fa0 	.word	0x20003fa0
 8012cfc:	08017d5c 	.word	0x08017d5c

08012d00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012d00:	b480      	push	{r7}
 8012d02:	b085      	sub	sp, #20
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	60f8      	str	r0, [r7, #12]
 8012d08:	60b9      	str	r1, [r7, #8]
 8012d0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	3b04      	subs	r3, #4
 8012d10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	3b04      	subs	r3, #4
 8012d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	f023 0201 	bic.w	r2, r3, #1
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	3b04      	subs	r3, #4
 8012d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012d30:	4a0c      	ldr	r2, [pc, #48]	; (8012d64 <pxPortInitialiseStack+0x64>)
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	3b14      	subs	r3, #20
 8012d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012d3c:	687a      	ldr	r2, [r7, #4]
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	3b04      	subs	r3, #4
 8012d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	f06f 0202 	mvn.w	r2, #2
 8012d4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	3b20      	subs	r3, #32
 8012d54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012d56:	68fb      	ldr	r3, [r7, #12]
}
 8012d58:	4618      	mov	r0, r3
 8012d5a:	3714      	adds	r7, #20
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d62:	4770      	bx	lr
 8012d64:	08012d69 	.word	0x08012d69

08012d68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012d68:	b480      	push	{r7}
 8012d6a:	b085      	sub	sp, #20
 8012d6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012d72:	4b13      	ldr	r3, [pc, #76]	; (8012dc0 <prvTaskExitError+0x58>)
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d7a:	d00b      	beq.n	8012d94 <prvTaskExitError+0x2c>
 8012d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d80:	b672      	cpsid	i
 8012d82:	f383 8811 	msr	BASEPRI, r3
 8012d86:	f3bf 8f6f 	isb	sy
 8012d8a:	f3bf 8f4f 	dsb	sy
 8012d8e:	b662      	cpsie	i
 8012d90:	60fb      	str	r3, [r7, #12]
 8012d92:	e7fe      	b.n	8012d92 <prvTaskExitError+0x2a>
 8012d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d98:	b672      	cpsid	i
 8012d9a:	f383 8811 	msr	BASEPRI, r3
 8012d9e:	f3bf 8f6f 	isb	sy
 8012da2:	f3bf 8f4f 	dsb	sy
 8012da6:	b662      	cpsie	i
 8012da8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012daa:	bf00      	nop
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d0fc      	beq.n	8012dac <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012db2:	bf00      	nop
 8012db4:	3714      	adds	r7, #20
 8012db6:	46bd      	mov	sp, r7
 8012db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbc:	4770      	bx	lr
 8012dbe:	bf00      	nop
 8012dc0:	200001a4 	.word	0x200001a4
	...

08012dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012dd0:	4b07      	ldr	r3, [pc, #28]	; (8012df0 <pxCurrentTCBConst2>)
 8012dd2:	6819      	ldr	r1, [r3, #0]
 8012dd4:	6808      	ldr	r0, [r1, #0]
 8012dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dda:	f380 8809 	msr	PSP, r0
 8012dde:	f3bf 8f6f 	isb	sy
 8012de2:	f04f 0000 	mov.w	r0, #0
 8012de6:	f380 8811 	msr	BASEPRI, r0
 8012dea:	4770      	bx	lr
 8012dec:	f3af 8000 	nop.w

08012df0 <pxCurrentTCBConst2>:
 8012df0:	20003a64 	.word	0x20003a64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012df4:	bf00      	nop
 8012df6:	bf00      	nop

08012df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012df8:	4808      	ldr	r0, [pc, #32]	; (8012e1c <prvPortStartFirstTask+0x24>)
 8012dfa:	6800      	ldr	r0, [r0, #0]
 8012dfc:	6800      	ldr	r0, [r0, #0]
 8012dfe:	f380 8808 	msr	MSP, r0
 8012e02:	f04f 0000 	mov.w	r0, #0
 8012e06:	f380 8814 	msr	CONTROL, r0
 8012e0a:	b662      	cpsie	i
 8012e0c:	b661      	cpsie	f
 8012e0e:	f3bf 8f4f 	dsb	sy
 8012e12:	f3bf 8f6f 	isb	sy
 8012e16:	df00      	svc	0
 8012e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012e1a:	bf00      	nop
 8012e1c:	e000ed08 	.word	0xe000ed08

08012e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b084      	sub	sp, #16
 8012e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012e26:	4b36      	ldr	r3, [pc, #216]	; (8012f00 <xPortStartScheduler+0xe0>)
 8012e28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	781b      	ldrb	r3, [r3, #0]
 8012e2e:	b2db      	uxtb	r3, r3
 8012e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	22ff      	movs	r2, #255	; 0xff
 8012e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	781b      	ldrb	r3, [r3, #0]
 8012e3c:	b2db      	uxtb	r3, r3
 8012e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012e40:	78fb      	ldrb	r3, [r7, #3]
 8012e42:	b2db      	uxtb	r3, r3
 8012e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012e48:	b2da      	uxtb	r2, r3
 8012e4a:	4b2e      	ldr	r3, [pc, #184]	; (8012f04 <xPortStartScheduler+0xe4>)
 8012e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012e4e:	4b2e      	ldr	r3, [pc, #184]	; (8012f08 <xPortStartScheduler+0xe8>)
 8012e50:	2207      	movs	r2, #7
 8012e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012e54:	e009      	b.n	8012e6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012e56:	4b2c      	ldr	r3, [pc, #176]	; (8012f08 <xPortStartScheduler+0xe8>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	3b01      	subs	r3, #1
 8012e5c:	4a2a      	ldr	r2, [pc, #168]	; (8012f08 <xPortStartScheduler+0xe8>)
 8012e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012e60:	78fb      	ldrb	r3, [r7, #3]
 8012e62:	b2db      	uxtb	r3, r3
 8012e64:	005b      	lsls	r3, r3, #1
 8012e66:	b2db      	uxtb	r3, r3
 8012e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012e6a:	78fb      	ldrb	r3, [r7, #3]
 8012e6c:	b2db      	uxtb	r3, r3
 8012e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e72:	2b80      	cmp	r3, #128	; 0x80
 8012e74:	d0ef      	beq.n	8012e56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012e76:	4b24      	ldr	r3, [pc, #144]	; (8012f08 <xPortStartScheduler+0xe8>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	f1c3 0307 	rsb	r3, r3, #7
 8012e7e:	2b04      	cmp	r3, #4
 8012e80:	d00b      	beq.n	8012e9a <xPortStartScheduler+0x7a>
 8012e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e86:	b672      	cpsid	i
 8012e88:	f383 8811 	msr	BASEPRI, r3
 8012e8c:	f3bf 8f6f 	isb	sy
 8012e90:	f3bf 8f4f 	dsb	sy
 8012e94:	b662      	cpsie	i
 8012e96:	60bb      	str	r3, [r7, #8]
 8012e98:	e7fe      	b.n	8012e98 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012e9a:	4b1b      	ldr	r3, [pc, #108]	; (8012f08 <xPortStartScheduler+0xe8>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	021b      	lsls	r3, r3, #8
 8012ea0:	4a19      	ldr	r2, [pc, #100]	; (8012f08 <xPortStartScheduler+0xe8>)
 8012ea2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012ea4:	4b18      	ldr	r3, [pc, #96]	; (8012f08 <xPortStartScheduler+0xe8>)
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012eac:	4a16      	ldr	r2, [pc, #88]	; (8012f08 <xPortStartScheduler+0xe8>)
 8012eae:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	b2da      	uxtb	r2, r3
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012eb8:	4b14      	ldr	r3, [pc, #80]	; (8012f0c <xPortStartScheduler+0xec>)
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	4a13      	ldr	r2, [pc, #76]	; (8012f0c <xPortStartScheduler+0xec>)
 8012ebe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012ec2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012ec4:	4b11      	ldr	r3, [pc, #68]	; (8012f0c <xPortStartScheduler+0xec>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	4a10      	ldr	r2, [pc, #64]	; (8012f0c <xPortStartScheduler+0xec>)
 8012eca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012ece:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012ed0:	f000 f8d4 	bl	801307c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012ed4:	4b0e      	ldr	r3, [pc, #56]	; (8012f10 <xPortStartScheduler+0xf0>)
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012eda:	f000 f8f3 	bl	80130c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012ede:	4b0d      	ldr	r3, [pc, #52]	; (8012f14 <xPortStartScheduler+0xf4>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	4a0c      	ldr	r2, [pc, #48]	; (8012f14 <xPortStartScheduler+0xf4>)
 8012ee4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012ee8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012eea:	f7ff ff85 	bl	8012df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012eee:	f7fe ff4f 	bl	8011d90 <vTaskSwitchContext>
	prvTaskExitError();
 8012ef2:	f7ff ff39 	bl	8012d68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012ef6:	2300      	movs	r3, #0
}
 8012ef8:	4618      	mov	r0, r3
 8012efa:	3710      	adds	r7, #16
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}
 8012f00:	e000e400 	.word	0xe000e400
 8012f04:	20004090 	.word	0x20004090
 8012f08:	20004094 	.word	0x20004094
 8012f0c:	e000ed20 	.word	0xe000ed20
 8012f10:	200001a4 	.word	0x200001a4
 8012f14:	e000ef34 	.word	0xe000ef34

08012f18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012f18:	b480      	push	{r7}
 8012f1a:	b083      	sub	sp, #12
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f22:	b672      	cpsid	i
 8012f24:	f383 8811 	msr	BASEPRI, r3
 8012f28:	f3bf 8f6f 	isb	sy
 8012f2c:	f3bf 8f4f 	dsb	sy
 8012f30:	b662      	cpsie	i
 8012f32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012f34:	4b0f      	ldr	r3, [pc, #60]	; (8012f74 <vPortEnterCritical+0x5c>)
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	3301      	adds	r3, #1
 8012f3a:	4a0e      	ldr	r2, [pc, #56]	; (8012f74 <vPortEnterCritical+0x5c>)
 8012f3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012f3e:	4b0d      	ldr	r3, [pc, #52]	; (8012f74 <vPortEnterCritical+0x5c>)
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	2b01      	cmp	r3, #1
 8012f44:	d110      	bne.n	8012f68 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012f46:	4b0c      	ldr	r3, [pc, #48]	; (8012f78 <vPortEnterCritical+0x60>)
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	b2db      	uxtb	r3, r3
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d00b      	beq.n	8012f68 <vPortEnterCritical+0x50>
 8012f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f54:	b672      	cpsid	i
 8012f56:	f383 8811 	msr	BASEPRI, r3
 8012f5a:	f3bf 8f6f 	isb	sy
 8012f5e:	f3bf 8f4f 	dsb	sy
 8012f62:	b662      	cpsie	i
 8012f64:	603b      	str	r3, [r7, #0]
 8012f66:	e7fe      	b.n	8012f66 <vPortEnterCritical+0x4e>
	}
}
 8012f68:	bf00      	nop
 8012f6a:	370c      	adds	r7, #12
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f72:	4770      	bx	lr
 8012f74:	200001a4 	.word	0x200001a4
 8012f78:	e000ed04 	.word	0xe000ed04

08012f7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b083      	sub	sp, #12
 8012f80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012f82:	4b12      	ldr	r3, [pc, #72]	; (8012fcc <vPortExitCritical+0x50>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d10b      	bne.n	8012fa2 <vPortExitCritical+0x26>
 8012f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f8e:	b672      	cpsid	i
 8012f90:	f383 8811 	msr	BASEPRI, r3
 8012f94:	f3bf 8f6f 	isb	sy
 8012f98:	f3bf 8f4f 	dsb	sy
 8012f9c:	b662      	cpsie	i
 8012f9e:	607b      	str	r3, [r7, #4]
 8012fa0:	e7fe      	b.n	8012fa0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8012fa2:	4b0a      	ldr	r3, [pc, #40]	; (8012fcc <vPortExitCritical+0x50>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	3b01      	subs	r3, #1
 8012fa8:	4a08      	ldr	r2, [pc, #32]	; (8012fcc <vPortExitCritical+0x50>)
 8012faa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012fac:	4b07      	ldr	r3, [pc, #28]	; (8012fcc <vPortExitCritical+0x50>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d104      	bne.n	8012fbe <vPortExitCritical+0x42>
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8012fbe:	bf00      	nop
 8012fc0:	370c      	adds	r7, #12
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc8:	4770      	bx	lr
 8012fca:	bf00      	nop
 8012fcc:	200001a4 	.word	0x200001a4

08012fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012fd0:	f3ef 8009 	mrs	r0, PSP
 8012fd4:	f3bf 8f6f 	isb	sy
 8012fd8:	4b15      	ldr	r3, [pc, #84]	; (8013030 <pxCurrentTCBConst>)
 8012fda:	681a      	ldr	r2, [r3, #0]
 8012fdc:	f01e 0f10 	tst.w	lr, #16
 8012fe0:	bf08      	it	eq
 8012fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fea:	6010      	str	r0, [r2, #0]
 8012fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012ff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012ff4:	b672      	cpsid	i
 8012ff6:	f380 8811 	msr	BASEPRI, r0
 8012ffa:	f3bf 8f4f 	dsb	sy
 8012ffe:	f3bf 8f6f 	isb	sy
 8013002:	b662      	cpsie	i
 8013004:	f7fe fec4 	bl	8011d90 <vTaskSwitchContext>
 8013008:	f04f 0000 	mov.w	r0, #0
 801300c:	f380 8811 	msr	BASEPRI, r0
 8013010:	bc09      	pop	{r0, r3}
 8013012:	6819      	ldr	r1, [r3, #0]
 8013014:	6808      	ldr	r0, [r1, #0]
 8013016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801301a:	f01e 0f10 	tst.w	lr, #16
 801301e:	bf08      	it	eq
 8013020:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013024:	f380 8809 	msr	PSP, r0
 8013028:	f3bf 8f6f 	isb	sy
 801302c:	4770      	bx	lr
 801302e:	bf00      	nop

08013030 <pxCurrentTCBConst>:
 8013030:	20003a64 	.word	0x20003a64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013034:	bf00      	nop
 8013036:	bf00      	nop

08013038 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
	__asm volatile
 801303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013042:	b672      	cpsid	i
 8013044:	f383 8811 	msr	BASEPRI, r3
 8013048:	f3bf 8f6f 	isb	sy
 801304c:	f3bf 8f4f 	dsb	sy
 8013050:	b662      	cpsie	i
 8013052:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013054:	f7fe fde2 	bl	8011c1c <xTaskIncrementTick>
 8013058:	4603      	mov	r3, r0
 801305a:	2b00      	cmp	r3, #0
 801305c:	d003      	beq.n	8013066 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801305e:	4b06      	ldr	r3, [pc, #24]	; (8013078 <SysTick_Handler+0x40>)
 8013060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013064:	601a      	str	r2, [r3, #0]
 8013066:	2300      	movs	r3, #0
 8013068:	603b      	str	r3, [r7, #0]
	__asm volatile
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8013070:	bf00      	nop
 8013072:	3708      	adds	r7, #8
 8013074:	46bd      	mov	sp, r7
 8013076:	bd80      	pop	{r7, pc}
 8013078:	e000ed04 	.word	0xe000ed04

0801307c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801307c:	b480      	push	{r7}
 801307e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013080:	4b0b      	ldr	r3, [pc, #44]	; (80130b0 <vPortSetupTimerInterrupt+0x34>)
 8013082:	2200      	movs	r2, #0
 8013084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013086:	4b0b      	ldr	r3, [pc, #44]	; (80130b4 <vPortSetupTimerInterrupt+0x38>)
 8013088:	2200      	movs	r2, #0
 801308a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801308c:	4b0a      	ldr	r3, [pc, #40]	; (80130b8 <vPortSetupTimerInterrupt+0x3c>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	4a0a      	ldr	r2, [pc, #40]	; (80130bc <vPortSetupTimerInterrupt+0x40>)
 8013092:	fba2 2303 	umull	r2, r3, r2, r3
 8013096:	099b      	lsrs	r3, r3, #6
 8013098:	4a09      	ldr	r2, [pc, #36]	; (80130c0 <vPortSetupTimerInterrupt+0x44>)
 801309a:	3b01      	subs	r3, #1
 801309c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801309e:	4b04      	ldr	r3, [pc, #16]	; (80130b0 <vPortSetupTimerInterrupt+0x34>)
 80130a0:	2207      	movs	r2, #7
 80130a2:	601a      	str	r2, [r3, #0]
}
 80130a4:	bf00      	nop
 80130a6:	46bd      	mov	sp, r7
 80130a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ac:	4770      	bx	lr
 80130ae:	bf00      	nop
 80130b0:	e000e010 	.word	0xe000e010
 80130b4:	e000e018 	.word	0xe000e018
 80130b8:	20000198 	.word	0x20000198
 80130bc:	10624dd3 	.word	0x10624dd3
 80130c0:	e000e014 	.word	0xe000e014

080130c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80130c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80130d4 <vPortEnableVFP+0x10>
 80130c8:	6801      	ldr	r1, [r0, #0]
 80130ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80130ce:	6001      	str	r1, [r0, #0]
 80130d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80130d2:	bf00      	nop
 80130d4:	e000ed88 	.word	0xe000ed88

080130d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80130d8:	b480      	push	{r7}
 80130da:	b085      	sub	sp, #20
 80130dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80130de:	f3ef 8305 	mrs	r3, IPSR
 80130e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	2b0f      	cmp	r3, #15
 80130e8:	d915      	bls.n	8013116 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80130ea:	4a18      	ldr	r2, [pc, #96]	; (801314c <vPortValidateInterruptPriority+0x74>)
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	4413      	add	r3, r2
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80130f4:	4b16      	ldr	r3, [pc, #88]	; (8013150 <vPortValidateInterruptPriority+0x78>)
 80130f6:	781b      	ldrb	r3, [r3, #0]
 80130f8:	7afa      	ldrb	r2, [r7, #11]
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d20b      	bcs.n	8013116 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80130fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013102:	b672      	cpsid	i
 8013104:	f383 8811 	msr	BASEPRI, r3
 8013108:	f3bf 8f6f 	isb	sy
 801310c:	f3bf 8f4f 	dsb	sy
 8013110:	b662      	cpsie	i
 8013112:	607b      	str	r3, [r7, #4]
 8013114:	e7fe      	b.n	8013114 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013116:	4b0f      	ldr	r3, [pc, #60]	; (8013154 <vPortValidateInterruptPriority+0x7c>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801311e:	4b0e      	ldr	r3, [pc, #56]	; (8013158 <vPortValidateInterruptPriority+0x80>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	429a      	cmp	r2, r3
 8013124:	d90b      	bls.n	801313e <vPortValidateInterruptPriority+0x66>
 8013126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801312a:	b672      	cpsid	i
 801312c:	f383 8811 	msr	BASEPRI, r3
 8013130:	f3bf 8f6f 	isb	sy
 8013134:	f3bf 8f4f 	dsb	sy
 8013138:	b662      	cpsie	i
 801313a:	603b      	str	r3, [r7, #0]
 801313c:	e7fe      	b.n	801313c <vPortValidateInterruptPriority+0x64>
	}
 801313e:	bf00      	nop
 8013140:	3714      	adds	r7, #20
 8013142:	46bd      	mov	sp, r7
 8013144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013148:	4770      	bx	lr
 801314a:	bf00      	nop
 801314c:	e000e3f0 	.word	0xe000e3f0
 8013150:	20004090 	.word	0x20004090
 8013154:	e000ed0c 	.word	0xe000ed0c
 8013158:	20004094 	.word	0x20004094

0801315c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b08a      	sub	sp, #40	; 0x28
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013164:	2300      	movs	r3, #0
 8013166:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013168:	f7fe fc9c 	bl	8011aa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801316c:	4b5a      	ldr	r3, [pc, #360]	; (80132d8 <pvPortMalloc+0x17c>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d101      	bne.n	8013178 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013174:	f000 f916 	bl	80133a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013178:	4b58      	ldr	r3, [pc, #352]	; (80132dc <pvPortMalloc+0x180>)
 801317a:	681a      	ldr	r2, [r3, #0]
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	4013      	ands	r3, r2
 8013180:	2b00      	cmp	r3, #0
 8013182:	f040 8090 	bne.w	80132a6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d01e      	beq.n	80131ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801318c:	2208      	movs	r2, #8
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	4413      	add	r3, r2
 8013192:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f003 0307 	and.w	r3, r3, #7
 801319a:	2b00      	cmp	r3, #0
 801319c:	d015      	beq.n	80131ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f023 0307 	bic.w	r3, r3, #7
 80131a4:	3308      	adds	r3, #8
 80131a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	f003 0307 	and.w	r3, r3, #7
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d00b      	beq.n	80131ca <pvPortMalloc+0x6e>
 80131b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131b6:	b672      	cpsid	i
 80131b8:	f383 8811 	msr	BASEPRI, r3
 80131bc:	f3bf 8f6f 	isb	sy
 80131c0:	f3bf 8f4f 	dsb	sy
 80131c4:	b662      	cpsie	i
 80131c6:	617b      	str	r3, [r7, #20]
 80131c8:	e7fe      	b.n	80131c8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d06a      	beq.n	80132a6 <pvPortMalloc+0x14a>
 80131d0:	4b43      	ldr	r3, [pc, #268]	; (80132e0 <pvPortMalloc+0x184>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	687a      	ldr	r2, [r7, #4]
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d865      	bhi.n	80132a6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80131da:	4b42      	ldr	r3, [pc, #264]	; (80132e4 <pvPortMalloc+0x188>)
 80131dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80131de:	4b41      	ldr	r3, [pc, #260]	; (80132e4 <pvPortMalloc+0x188>)
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80131e4:	e004      	b.n	80131f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80131e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80131ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80131f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131f2:	685b      	ldr	r3, [r3, #4]
 80131f4:	687a      	ldr	r2, [r7, #4]
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d903      	bls.n	8013202 <pvPortMalloc+0xa6>
 80131fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d1f1      	bne.n	80131e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013202:	4b35      	ldr	r3, [pc, #212]	; (80132d8 <pvPortMalloc+0x17c>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013208:	429a      	cmp	r2, r3
 801320a:	d04c      	beq.n	80132a6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801320c:	6a3b      	ldr	r3, [r7, #32]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	2208      	movs	r2, #8
 8013212:	4413      	add	r3, r2
 8013214:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013218:	681a      	ldr	r2, [r3, #0]
 801321a:	6a3b      	ldr	r3, [r7, #32]
 801321c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013220:	685a      	ldr	r2, [r3, #4]
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	1ad2      	subs	r2, r2, r3
 8013226:	2308      	movs	r3, #8
 8013228:	005b      	lsls	r3, r3, #1
 801322a:	429a      	cmp	r2, r3
 801322c:	d920      	bls.n	8013270 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801322e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	4413      	add	r3, r2
 8013234:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013236:	69bb      	ldr	r3, [r7, #24]
 8013238:	f003 0307 	and.w	r3, r3, #7
 801323c:	2b00      	cmp	r3, #0
 801323e:	d00b      	beq.n	8013258 <pvPortMalloc+0xfc>
 8013240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013244:	b672      	cpsid	i
 8013246:	f383 8811 	msr	BASEPRI, r3
 801324a:	f3bf 8f6f 	isb	sy
 801324e:	f3bf 8f4f 	dsb	sy
 8013252:	b662      	cpsie	i
 8013254:	613b      	str	r3, [r7, #16]
 8013256:	e7fe      	b.n	8013256 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325a:	685a      	ldr	r2, [r3, #4]
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	1ad2      	subs	r2, r2, r3
 8013260:	69bb      	ldr	r3, [r7, #24]
 8013262:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013266:	687a      	ldr	r2, [r7, #4]
 8013268:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801326a:	69b8      	ldr	r0, [r7, #24]
 801326c:	f000 f8fe 	bl	801346c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013270:	4b1b      	ldr	r3, [pc, #108]	; (80132e0 <pvPortMalloc+0x184>)
 8013272:	681a      	ldr	r2, [r3, #0]
 8013274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013276:	685b      	ldr	r3, [r3, #4]
 8013278:	1ad3      	subs	r3, r2, r3
 801327a:	4a19      	ldr	r2, [pc, #100]	; (80132e0 <pvPortMalloc+0x184>)
 801327c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801327e:	4b18      	ldr	r3, [pc, #96]	; (80132e0 <pvPortMalloc+0x184>)
 8013280:	681a      	ldr	r2, [r3, #0]
 8013282:	4b19      	ldr	r3, [pc, #100]	; (80132e8 <pvPortMalloc+0x18c>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	429a      	cmp	r2, r3
 8013288:	d203      	bcs.n	8013292 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801328a:	4b15      	ldr	r3, [pc, #84]	; (80132e0 <pvPortMalloc+0x184>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	4a16      	ldr	r2, [pc, #88]	; (80132e8 <pvPortMalloc+0x18c>)
 8013290:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013294:	685a      	ldr	r2, [r3, #4]
 8013296:	4b11      	ldr	r3, [pc, #68]	; (80132dc <pvPortMalloc+0x180>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	431a      	orrs	r2, r3
 801329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801329e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80132a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132a2:	2200      	movs	r2, #0
 80132a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80132a6:	f7fe fc0b 	bl	8011ac0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80132aa:	69fb      	ldr	r3, [r7, #28]
 80132ac:	f003 0307 	and.w	r3, r3, #7
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d00b      	beq.n	80132cc <pvPortMalloc+0x170>
 80132b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132b8:	b672      	cpsid	i
 80132ba:	f383 8811 	msr	BASEPRI, r3
 80132be:	f3bf 8f6f 	isb	sy
 80132c2:	f3bf 8f4f 	dsb	sy
 80132c6:	b662      	cpsie	i
 80132c8:	60fb      	str	r3, [r7, #12]
 80132ca:	e7fe      	b.n	80132ca <pvPortMalloc+0x16e>
	return pvReturn;
 80132cc:	69fb      	ldr	r3, [r7, #28]
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	3728      	adds	r7, #40	; 0x28
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}
 80132d6:	bf00      	nop
 80132d8:	20028a90 	.word	0x20028a90
 80132dc:	20028a9c 	.word	0x20028a9c
 80132e0:	20028a94 	.word	0x20028a94
 80132e4:	20028a88 	.word	0x20028a88
 80132e8:	20028a98 	.word	0x20028a98

080132ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b086      	sub	sp, #24
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d04a      	beq.n	8013394 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80132fe:	2308      	movs	r3, #8
 8013300:	425b      	negs	r3, r3
 8013302:	697a      	ldr	r2, [r7, #20]
 8013304:	4413      	add	r3, r2
 8013306:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013308:	697b      	ldr	r3, [r7, #20]
 801330a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801330c:	693b      	ldr	r3, [r7, #16]
 801330e:	685a      	ldr	r2, [r3, #4]
 8013310:	4b22      	ldr	r3, [pc, #136]	; (801339c <vPortFree+0xb0>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	4013      	ands	r3, r2
 8013316:	2b00      	cmp	r3, #0
 8013318:	d10b      	bne.n	8013332 <vPortFree+0x46>
 801331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801331e:	b672      	cpsid	i
 8013320:	f383 8811 	msr	BASEPRI, r3
 8013324:	f3bf 8f6f 	isb	sy
 8013328:	f3bf 8f4f 	dsb	sy
 801332c:	b662      	cpsie	i
 801332e:	60fb      	str	r3, [r7, #12]
 8013330:	e7fe      	b.n	8013330 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013332:	693b      	ldr	r3, [r7, #16]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d00b      	beq.n	8013352 <vPortFree+0x66>
 801333a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801333e:	b672      	cpsid	i
 8013340:	f383 8811 	msr	BASEPRI, r3
 8013344:	f3bf 8f6f 	isb	sy
 8013348:	f3bf 8f4f 	dsb	sy
 801334c:	b662      	cpsie	i
 801334e:	60bb      	str	r3, [r7, #8]
 8013350:	e7fe      	b.n	8013350 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	685a      	ldr	r2, [r3, #4]
 8013356:	4b11      	ldr	r3, [pc, #68]	; (801339c <vPortFree+0xb0>)
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	4013      	ands	r3, r2
 801335c:	2b00      	cmp	r3, #0
 801335e:	d019      	beq.n	8013394 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d115      	bne.n	8013394 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	685a      	ldr	r2, [r3, #4]
 801336c:	4b0b      	ldr	r3, [pc, #44]	; (801339c <vPortFree+0xb0>)
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	43db      	mvns	r3, r3
 8013372:	401a      	ands	r2, r3
 8013374:	693b      	ldr	r3, [r7, #16]
 8013376:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013378:	f7fe fb94 	bl	8011aa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801337c:	693b      	ldr	r3, [r7, #16]
 801337e:	685a      	ldr	r2, [r3, #4]
 8013380:	4b07      	ldr	r3, [pc, #28]	; (80133a0 <vPortFree+0xb4>)
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	4413      	add	r3, r2
 8013386:	4a06      	ldr	r2, [pc, #24]	; (80133a0 <vPortFree+0xb4>)
 8013388:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801338a:	6938      	ldr	r0, [r7, #16]
 801338c:	f000 f86e 	bl	801346c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013390:	f7fe fb96 	bl	8011ac0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013394:	bf00      	nop
 8013396:	3718      	adds	r7, #24
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}
 801339c:	20028a9c 	.word	0x20028a9c
 80133a0:	20028a94 	.word	0x20028a94

080133a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80133a4:	b480      	push	{r7}
 80133a6:	b085      	sub	sp, #20
 80133a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80133aa:	4b29      	ldr	r3, [pc, #164]	; (8013450 <prvHeapInit+0xac>)
 80133ac:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80133ae:	4b29      	ldr	r3, [pc, #164]	; (8013454 <prvHeapInit+0xb0>)
 80133b0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	f003 0307 	and.w	r3, r3, #7
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d00c      	beq.n	80133d6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	3307      	adds	r3, #7
 80133c0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	f023 0307 	bic.w	r3, r3, #7
 80133c8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80133ca:	68ba      	ldr	r2, [r7, #8]
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	1ad3      	subs	r3, r2, r3
 80133d0:	4a20      	ldr	r2, [pc, #128]	; (8013454 <prvHeapInit+0xb0>)
 80133d2:	4413      	add	r3, r2
 80133d4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80133da:	4a1f      	ldr	r2, [pc, #124]	; (8013458 <prvHeapInit+0xb4>)
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80133e0:	4b1d      	ldr	r3, [pc, #116]	; (8013458 <prvHeapInit+0xb4>)
 80133e2:	2200      	movs	r2, #0
 80133e4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	68ba      	ldr	r2, [r7, #8]
 80133ea:	4413      	add	r3, r2
 80133ec:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80133ee:	2208      	movs	r2, #8
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	1a9b      	subs	r3, r3, r2
 80133f4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	f023 0307 	bic.w	r3, r3, #7
 80133fc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	4a16      	ldr	r2, [pc, #88]	; (801345c <prvHeapInit+0xb8>)
 8013402:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013404:	4b15      	ldr	r3, [pc, #84]	; (801345c <prvHeapInit+0xb8>)
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	2200      	movs	r2, #0
 801340a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801340c:	4b13      	ldr	r3, [pc, #76]	; (801345c <prvHeapInit+0xb8>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	2200      	movs	r2, #0
 8013412:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	68fa      	ldr	r2, [r7, #12]
 801341c:	1ad2      	subs	r2, r2, r3
 801341e:	683b      	ldr	r3, [r7, #0]
 8013420:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013422:	4b0e      	ldr	r3, [pc, #56]	; (801345c <prvHeapInit+0xb8>)
 8013424:	681a      	ldr	r2, [r3, #0]
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801342a:	683b      	ldr	r3, [r7, #0]
 801342c:	685b      	ldr	r3, [r3, #4]
 801342e:	4a0c      	ldr	r2, [pc, #48]	; (8013460 <prvHeapInit+0xbc>)
 8013430:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	685b      	ldr	r3, [r3, #4]
 8013436:	4a0b      	ldr	r2, [pc, #44]	; (8013464 <prvHeapInit+0xc0>)
 8013438:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801343a:	4b0b      	ldr	r3, [pc, #44]	; (8013468 <prvHeapInit+0xc4>)
 801343c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013440:	601a      	str	r2, [r3, #0]
}
 8013442:	bf00      	nop
 8013444:	3714      	adds	r7, #20
 8013446:	46bd      	mov	sp, r7
 8013448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344c:	4770      	bx	lr
 801344e:	bf00      	nop
 8013450:	000249f0 	.word	0x000249f0
 8013454:	20004098 	.word	0x20004098
 8013458:	20028a88 	.word	0x20028a88
 801345c:	20028a90 	.word	0x20028a90
 8013460:	20028a98 	.word	0x20028a98
 8013464:	20028a94 	.word	0x20028a94
 8013468:	20028a9c 	.word	0x20028a9c

0801346c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801346c:	b480      	push	{r7}
 801346e:	b085      	sub	sp, #20
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013474:	4b28      	ldr	r3, [pc, #160]	; (8013518 <prvInsertBlockIntoFreeList+0xac>)
 8013476:	60fb      	str	r3, [r7, #12]
 8013478:	e002      	b.n	8013480 <prvInsertBlockIntoFreeList+0x14>
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	60fb      	str	r3, [r7, #12]
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	687a      	ldr	r2, [r7, #4]
 8013486:	429a      	cmp	r2, r3
 8013488:	d8f7      	bhi.n	801347a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	685b      	ldr	r3, [r3, #4]
 8013492:	68ba      	ldr	r2, [r7, #8]
 8013494:	4413      	add	r3, r2
 8013496:	687a      	ldr	r2, [r7, #4]
 8013498:	429a      	cmp	r2, r3
 801349a:	d108      	bne.n	80134ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	685a      	ldr	r2, [r3, #4]
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	685b      	ldr	r3, [r3, #4]
 80134a4:	441a      	add	r2, r3
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	685b      	ldr	r3, [r3, #4]
 80134b6:	68ba      	ldr	r2, [r7, #8]
 80134b8:	441a      	add	r2, r3
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	429a      	cmp	r2, r3
 80134c0:	d118      	bne.n	80134f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	681a      	ldr	r2, [r3, #0]
 80134c6:	4b15      	ldr	r3, [pc, #84]	; (801351c <prvInsertBlockIntoFreeList+0xb0>)
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	429a      	cmp	r2, r3
 80134cc:	d00d      	beq.n	80134ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	685a      	ldr	r2, [r3, #4]
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	685b      	ldr	r3, [r3, #4]
 80134d8:	441a      	add	r2, r3
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	681a      	ldr	r2, [r3, #0]
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	601a      	str	r2, [r3, #0]
 80134e8:	e008      	b.n	80134fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80134ea:	4b0c      	ldr	r3, [pc, #48]	; (801351c <prvInsertBlockIntoFreeList+0xb0>)
 80134ec:	681a      	ldr	r2, [r3, #0]
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	601a      	str	r2, [r3, #0]
 80134f2:	e003      	b.n	80134fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	681a      	ldr	r2, [r3, #0]
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80134fc:	68fa      	ldr	r2, [r7, #12]
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	429a      	cmp	r2, r3
 8013502:	d002      	beq.n	801350a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	687a      	ldr	r2, [r7, #4]
 8013508:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801350a:	bf00      	nop
 801350c:	3714      	adds	r7, #20
 801350e:	46bd      	mov	sp, r7
 8013510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013514:	4770      	bx	lr
 8013516:	bf00      	nop
 8013518:	20028a88 	.word	0x20028a88
 801351c:	20028a90 	.word	0x20028a90

08013520 <__errno>:
 8013520:	4b01      	ldr	r3, [pc, #4]	; (8013528 <__errno+0x8>)
 8013522:	6818      	ldr	r0, [r3, #0]
 8013524:	4770      	bx	lr
 8013526:	bf00      	nop
 8013528:	200001a8 	.word	0x200001a8

0801352c <__libc_init_array>:
 801352c:	b570      	push	{r4, r5, r6, lr}
 801352e:	4e0d      	ldr	r6, [pc, #52]	; (8013564 <__libc_init_array+0x38>)
 8013530:	4c0d      	ldr	r4, [pc, #52]	; (8013568 <__libc_init_array+0x3c>)
 8013532:	1ba4      	subs	r4, r4, r6
 8013534:	10a4      	asrs	r4, r4, #2
 8013536:	2500      	movs	r5, #0
 8013538:	42a5      	cmp	r5, r4
 801353a:	d109      	bne.n	8013550 <__libc_init_array+0x24>
 801353c:	4e0b      	ldr	r6, [pc, #44]	; (801356c <__libc_init_array+0x40>)
 801353e:	4c0c      	ldr	r4, [pc, #48]	; (8013570 <__libc_init_array+0x44>)
 8013540:	f004 f840 	bl	80175c4 <_init>
 8013544:	1ba4      	subs	r4, r4, r6
 8013546:	10a4      	asrs	r4, r4, #2
 8013548:	2500      	movs	r5, #0
 801354a:	42a5      	cmp	r5, r4
 801354c:	d105      	bne.n	801355a <__libc_init_array+0x2e>
 801354e:	bd70      	pop	{r4, r5, r6, pc}
 8013550:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013554:	4798      	blx	r3
 8013556:	3501      	adds	r5, #1
 8013558:	e7ee      	b.n	8013538 <__libc_init_array+0xc>
 801355a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801355e:	4798      	blx	r3
 8013560:	3501      	adds	r5, #1
 8013562:	e7f2      	b.n	801354a <__libc_init_array+0x1e>
 8013564:	08018870 	.word	0x08018870
 8013568:	08018870 	.word	0x08018870
 801356c:	08018870 	.word	0x08018870
 8013570:	08018874 	.word	0x08018874

08013574 <memcpy>:
 8013574:	b510      	push	{r4, lr}
 8013576:	1e43      	subs	r3, r0, #1
 8013578:	440a      	add	r2, r1
 801357a:	4291      	cmp	r1, r2
 801357c:	d100      	bne.n	8013580 <memcpy+0xc>
 801357e:	bd10      	pop	{r4, pc}
 8013580:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013584:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013588:	e7f7      	b.n	801357a <memcpy+0x6>

0801358a <memset>:
 801358a:	4402      	add	r2, r0
 801358c:	4603      	mov	r3, r0
 801358e:	4293      	cmp	r3, r2
 8013590:	d100      	bne.n	8013594 <memset+0xa>
 8013592:	4770      	bx	lr
 8013594:	f803 1b01 	strb.w	r1, [r3], #1
 8013598:	e7f9      	b.n	801358e <memset+0x4>

0801359a <__cvt>:
 801359a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801359c:	ed2d 8b02 	vpush	{d8}
 80135a0:	eeb0 8b40 	vmov.f64	d8, d0
 80135a4:	b085      	sub	sp, #20
 80135a6:	4617      	mov	r7, r2
 80135a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80135aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80135ac:	ee18 2a90 	vmov	r2, s17
 80135b0:	f025 0520 	bic.w	r5, r5, #32
 80135b4:	2a00      	cmp	r2, #0
 80135b6:	bfb6      	itet	lt
 80135b8:	222d      	movlt	r2, #45	; 0x2d
 80135ba:	2200      	movge	r2, #0
 80135bc:	eeb1 8b40 	vneglt.f64	d8, d0
 80135c0:	2d46      	cmp	r5, #70	; 0x46
 80135c2:	460c      	mov	r4, r1
 80135c4:	701a      	strb	r2, [r3, #0]
 80135c6:	d004      	beq.n	80135d2 <__cvt+0x38>
 80135c8:	2d45      	cmp	r5, #69	; 0x45
 80135ca:	d100      	bne.n	80135ce <__cvt+0x34>
 80135cc:	3401      	adds	r4, #1
 80135ce:	2102      	movs	r1, #2
 80135d0:	e000      	b.n	80135d4 <__cvt+0x3a>
 80135d2:	2103      	movs	r1, #3
 80135d4:	ab03      	add	r3, sp, #12
 80135d6:	9301      	str	r3, [sp, #4]
 80135d8:	ab02      	add	r3, sp, #8
 80135da:	9300      	str	r3, [sp, #0]
 80135dc:	4622      	mov	r2, r4
 80135de:	4633      	mov	r3, r6
 80135e0:	eeb0 0b48 	vmov.f64	d0, d8
 80135e4:	f001 fe44 	bl	8015270 <_dtoa_r>
 80135e8:	2d47      	cmp	r5, #71	; 0x47
 80135ea:	d101      	bne.n	80135f0 <__cvt+0x56>
 80135ec:	07fb      	lsls	r3, r7, #31
 80135ee:	d51e      	bpl.n	801362e <__cvt+0x94>
 80135f0:	2d46      	cmp	r5, #70	; 0x46
 80135f2:	eb00 0304 	add.w	r3, r0, r4
 80135f6:	d10c      	bne.n	8013612 <__cvt+0x78>
 80135f8:	7802      	ldrb	r2, [r0, #0]
 80135fa:	2a30      	cmp	r2, #48	; 0x30
 80135fc:	d107      	bne.n	801360e <__cvt+0x74>
 80135fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013606:	bf1c      	itt	ne
 8013608:	f1c4 0401 	rsbne	r4, r4, #1
 801360c:	6034      	strne	r4, [r6, #0]
 801360e:	6832      	ldr	r2, [r6, #0]
 8013610:	4413      	add	r3, r2
 8013612:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801361a:	d007      	beq.n	801362c <__cvt+0x92>
 801361c:	2130      	movs	r1, #48	; 0x30
 801361e:	9a03      	ldr	r2, [sp, #12]
 8013620:	429a      	cmp	r2, r3
 8013622:	d204      	bcs.n	801362e <__cvt+0x94>
 8013624:	1c54      	adds	r4, r2, #1
 8013626:	9403      	str	r4, [sp, #12]
 8013628:	7011      	strb	r1, [r2, #0]
 801362a:	e7f8      	b.n	801361e <__cvt+0x84>
 801362c:	9303      	str	r3, [sp, #12]
 801362e:	9b03      	ldr	r3, [sp, #12]
 8013630:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013632:	1a1b      	subs	r3, r3, r0
 8013634:	6013      	str	r3, [r2, #0]
 8013636:	b005      	add	sp, #20
 8013638:	ecbd 8b02 	vpop	{d8}
 801363c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801363e <__exponent>:
 801363e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013640:	2900      	cmp	r1, #0
 8013642:	4604      	mov	r4, r0
 8013644:	bfba      	itte	lt
 8013646:	4249      	neglt	r1, r1
 8013648:	232d      	movlt	r3, #45	; 0x2d
 801364a:	232b      	movge	r3, #43	; 0x2b
 801364c:	2909      	cmp	r1, #9
 801364e:	f804 2b02 	strb.w	r2, [r4], #2
 8013652:	7043      	strb	r3, [r0, #1]
 8013654:	dd20      	ble.n	8013698 <__exponent+0x5a>
 8013656:	f10d 0307 	add.w	r3, sp, #7
 801365a:	461f      	mov	r7, r3
 801365c:	260a      	movs	r6, #10
 801365e:	fb91 f5f6 	sdiv	r5, r1, r6
 8013662:	fb06 1115 	mls	r1, r6, r5, r1
 8013666:	3130      	adds	r1, #48	; 0x30
 8013668:	2d09      	cmp	r5, #9
 801366a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801366e:	f103 32ff 	add.w	r2, r3, #4294967295
 8013672:	4629      	mov	r1, r5
 8013674:	dc09      	bgt.n	801368a <__exponent+0x4c>
 8013676:	3130      	adds	r1, #48	; 0x30
 8013678:	3b02      	subs	r3, #2
 801367a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801367e:	42bb      	cmp	r3, r7
 8013680:	4622      	mov	r2, r4
 8013682:	d304      	bcc.n	801368e <__exponent+0x50>
 8013684:	1a10      	subs	r0, r2, r0
 8013686:	b003      	add	sp, #12
 8013688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801368a:	4613      	mov	r3, r2
 801368c:	e7e7      	b.n	801365e <__exponent+0x20>
 801368e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013692:	f804 2b01 	strb.w	r2, [r4], #1
 8013696:	e7f2      	b.n	801367e <__exponent+0x40>
 8013698:	2330      	movs	r3, #48	; 0x30
 801369a:	4419      	add	r1, r3
 801369c:	7083      	strb	r3, [r0, #2]
 801369e:	1d02      	adds	r2, r0, #4
 80136a0:	70c1      	strb	r1, [r0, #3]
 80136a2:	e7ef      	b.n	8013684 <__exponent+0x46>
 80136a4:	0000      	movs	r0, r0
	...

080136a8 <_printf_float>:
 80136a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136ac:	b08d      	sub	sp, #52	; 0x34
 80136ae:	460c      	mov	r4, r1
 80136b0:	4616      	mov	r6, r2
 80136b2:	461f      	mov	r7, r3
 80136b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80136b8:	4605      	mov	r5, r0
 80136ba:	f002 ffcb 	bl	8016654 <_localeconv_r>
 80136be:	f8d0 b000 	ldr.w	fp, [r0]
 80136c2:	4658      	mov	r0, fp
 80136c4:	f7ec fdbc 	bl	8000240 <strlen>
 80136c8:	2300      	movs	r3, #0
 80136ca:	930a      	str	r3, [sp, #40]	; 0x28
 80136cc:	f8d8 3000 	ldr.w	r3, [r8]
 80136d0:	9005      	str	r0, [sp, #20]
 80136d2:	3307      	adds	r3, #7
 80136d4:	f023 0307 	bic.w	r3, r3, #7
 80136d8:	f103 0108 	add.w	r1, r3, #8
 80136dc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80136e0:	6822      	ldr	r2, [r4, #0]
 80136e2:	f8c8 1000 	str.w	r1, [r8]
 80136e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80136ea:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80136ee:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8013978 <_printf_float+0x2d0>
 80136f2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80136f6:	eeb0 6bc0 	vabs.f64	d6, d0
 80136fa:	eeb4 6b47 	vcmp.f64	d6, d7
 80136fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013702:	dd24      	ble.n	801374e <_printf_float+0xa6>
 8013704:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801370c:	d502      	bpl.n	8013714 <_printf_float+0x6c>
 801370e:	232d      	movs	r3, #45	; 0x2d
 8013710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013714:	499a      	ldr	r1, [pc, #616]	; (8013980 <_printf_float+0x2d8>)
 8013716:	4b9b      	ldr	r3, [pc, #620]	; (8013984 <_printf_float+0x2dc>)
 8013718:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801371c:	bf8c      	ite	hi
 801371e:	4688      	movhi	r8, r1
 8013720:	4698      	movls	r8, r3
 8013722:	f022 0204 	bic.w	r2, r2, #4
 8013726:	2303      	movs	r3, #3
 8013728:	6123      	str	r3, [r4, #16]
 801372a:	6022      	str	r2, [r4, #0]
 801372c:	f04f 0a00 	mov.w	sl, #0
 8013730:	9700      	str	r7, [sp, #0]
 8013732:	4633      	mov	r3, r6
 8013734:	aa0b      	add	r2, sp, #44	; 0x2c
 8013736:	4621      	mov	r1, r4
 8013738:	4628      	mov	r0, r5
 801373a:	f000 f9e1 	bl	8013b00 <_printf_common>
 801373e:	3001      	adds	r0, #1
 8013740:	f040 8089 	bne.w	8013856 <_printf_float+0x1ae>
 8013744:	f04f 30ff 	mov.w	r0, #4294967295
 8013748:	b00d      	add	sp, #52	; 0x34
 801374a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801374e:	eeb4 0b40 	vcmp.f64	d0, d0
 8013752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013756:	d702      	bvc.n	801375e <_printf_float+0xb6>
 8013758:	498b      	ldr	r1, [pc, #556]	; (8013988 <_printf_float+0x2e0>)
 801375a:	4b8c      	ldr	r3, [pc, #560]	; (801398c <_printf_float+0x2e4>)
 801375c:	e7dc      	b.n	8013718 <_printf_float+0x70>
 801375e:	6861      	ldr	r1, [r4, #4]
 8013760:	1c4b      	adds	r3, r1, #1
 8013762:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013766:	ab0a      	add	r3, sp, #40	; 0x28
 8013768:	a809      	add	r0, sp, #36	; 0x24
 801376a:	d13b      	bne.n	80137e4 <_printf_float+0x13c>
 801376c:	2106      	movs	r1, #6
 801376e:	6061      	str	r1, [r4, #4]
 8013770:	f04f 0c00 	mov.w	ip, #0
 8013774:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8013778:	e9cd 0900 	strd	r0, r9, [sp]
 801377c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013780:	6022      	str	r2, [r4, #0]
 8013782:	6861      	ldr	r1, [r4, #4]
 8013784:	4628      	mov	r0, r5
 8013786:	f7ff ff08 	bl	801359a <__cvt>
 801378a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801378e:	2b47      	cmp	r3, #71	; 0x47
 8013790:	4680      	mov	r8, r0
 8013792:	d109      	bne.n	80137a8 <_printf_float+0x100>
 8013794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013796:	1cd8      	adds	r0, r3, #3
 8013798:	db02      	blt.n	80137a0 <_printf_float+0xf8>
 801379a:	6862      	ldr	r2, [r4, #4]
 801379c:	4293      	cmp	r3, r2
 801379e:	dd47      	ble.n	8013830 <_printf_float+0x188>
 80137a0:	f1a9 0902 	sub.w	r9, r9, #2
 80137a4:	fa5f f989 	uxtb.w	r9, r9
 80137a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80137ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80137ae:	d824      	bhi.n	80137fa <_printf_float+0x152>
 80137b0:	3901      	subs	r1, #1
 80137b2:	464a      	mov	r2, r9
 80137b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80137b8:	9109      	str	r1, [sp, #36]	; 0x24
 80137ba:	f7ff ff40 	bl	801363e <__exponent>
 80137be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80137c0:	1813      	adds	r3, r2, r0
 80137c2:	2a01      	cmp	r2, #1
 80137c4:	4682      	mov	sl, r0
 80137c6:	6123      	str	r3, [r4, #16]
 80137c8:	dc02      	bgt.n	80137d0 <_printf_float+0x128>
 80137ca:	6822      	ldr	r2, [r4, #0]
 80137cc:	07d1      	lsls	r1, r2, #31
 80137ce:	d501      	bpl.n	80137d4 <_printf_float+0x12c>
 80137d0:	3301      	adds	r3, #1
 80137d2:	6123      	str	r3, [r4, #16]
 80137d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d0a9      	beq.n	8013730 <_printf_float+0x88>
 80137dc:	232d      	movs	r3, #45	; 0x2d
 80137de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80137e2:	e7a5      	b.n	8013730 <_printf_float+0x88>
 80137e4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80137e8:	f000 8178 	beq.w	8013adc <_printf_float+0x434>
 80137ec:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80137f0:	d1be      	bne.n	8013770 <_printf_float+0xc8>
 80137f2:	2900      	cmp	r1, #0
 80137f4:	d1bc      	bne.n	8013770 <_printf_float+0xc8>
 80137f6:	2101      	movs	r1, #1
 80137f8:	e7b9      	b.n	801376e <_printf_float+0xc6>
 80137fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80137fe:	d119      	bne.n	8013834 <_printf_float+0x18c>
 8013800:	2900      	cmp	r1, #0
 8013802:	6863      	ldr	r3, [r4, #4]
 8013804:	dd0c      	ble.n	8013820 <_printf_float+0x178>
 8013806:	6121      	str	r1, [r4, #16]
 8013808:	b913      	cbnz	r3, 8013810 <_printf_float+0x168>
 801380a:	6822      	ldr	r2, [r4, #0]
 801380c:	07d2      	lsls	r2, r2, #31
 801380e:	d502      	bpl.n	8013816 <_printf_float+0x16e>
 8013810:	3301      	adds	r3, #1
 8013812:	440b      	add	r3, r1
 8013814:	6123      	str	r3, [r4, #16]
 8013816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013818:	65a3      	str	r3, [r4, #88]	; 0x58
 801381a:	f04f 0a00 	mov.w	sl, #0
 801381e:	e7d9      	b.n	80137d4 <_printf_float+0x12c>
 8013820:	b913      	cbnz	r3, 8013828 <_printf_float+0x180>
 8013822:	6822      	ldr	r2, [r4, #0]
 8013824:	07d0      	lsls	r0, r2, #31
 8013826:	d501      	bpl.n	801382c <_printf_float+0x184>
 8013828:	3302      	adds	r3, #2
 801382a:	e7f3      	b.n	8013814 <_printf_float+0x16c>
 801382c:	2301      	movs	r3, #1
 801382e:	e7f1      	b.n	8013814 <_printf_float+0x16c>
 8013830:	f04f 0967 	mov.w	r9, #103	; 0x67
 8013834:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013838:	4293      	cmp	r3, r2
 801383a:	db05      	blt.n	8013848 <_printf_float+0x1a0>
 801383c:	6822      	ldr	r2, [r4, #0]
 801383e:	6123      	str	r3, [r4, #16]
 8013840:	07d1      	lsls	r1, r2, #31
 8013842:	d5e8      	bpl.n	8013816 <_printf_float+0x16e>
 8013844:	3301      	adds	r3, #1
 8013846:	e7e5      	b.n	8013814 <_printf_float+0x16c>
 8013848:	2b00      	cmp	r3, #0
 801384a:	bfd4      	ite	le
 801384c:	f1c3 0302 	rsble	r3, r3, #2
 8013850:	2301      	movgt	r3, #1
 8013852:	4413      	add	r3, r2
 8013854:	e7de      	b.n	8013814 <_printf_float+0x16c>
 8013856:	6823      	ldr	r3, [r4, #0]
 8013858:	055a      	lsls	r2, r3, #21
 801385a:	d407      	bmi.n	801386c <_printf_float+0x1c4>
 801385c:	6923      	ldr	r3, [r4, #16]
 801385e:	4642      	mov	r2, r8
 8013860:	4631      	mov	r1, r6
 8013862:	4628      	mov	r0, r5
 8013864:	47b8      	blx	r7
 8013866:	3001      	adds	r0, #1
 8013868:	d12a      	bne.n	80138c0 <_printf_float+0x218>
 801386a:	e76b      	b.n	8013744 <_printf_float+0x9c>
 801386c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013870:	f240 80de 	bls.w	8013a30 <_printf_float+0x388>
 8013874:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013878:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801387c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013880:	d133      	bne.n	80138ea <_printf_float+0x242>
 8013882:	2301      	movs	r3, #1
 8013884:	4a42      	ldr	r2, [pc, #264]	; (8013990 <_printf_float+0x2e8>)
 8013886:	4631      	mov	r1, r6
 8013888:	4628      	mov	r0, r5
 801388a:	47b8      	blx	r7
 801388c:	3001      	adds	r0, #1
 801388e:	f43f af59 	beq.w	8013744 <_printf_float+0x9c>
 8013892:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013896:	429a      	cmp	r2, r3
 8013898:	db02      	blt.n	80138a0 <_printf_float+0x1f8>
 801389a:	6823      	ldr	r3, [r4, #0]
 801389c:	07d8      	lsls	r0, r3, #31
 801389e:	d50f      	bpl.n	80138c0 <_printf_float+0x218>
 80138a0:	9b05      	ldr	r3, [sp, #20]
 80138a2:	465a      	mov	r2, fp
 80138a4:	4631      	mov	r1, r6
 80138a6:	4628      	mov	r0, r5
 80138a8:	47b8      	blx	r7
 80138aa:	3001      	adds	r0, #1
 80138ac:	f43f af4a 	beq.w	8013744 <_printf_float+0x9c>
 80138b0:	f04f 0800 	mov.w	r8, #0
 80138b4:	f104 091a 	add.w	r9, r4, #26
 80138b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138ba:	3b01      	subs	r3, #1
 80138bc:	4543      	cmp	r3, r8
 80138be:	dc09      	bgt.n	80138d4 <_printf_float+0x22c>
 80138c0:	6823      	ldr	r3, [r4, #0]
 80138c2:	079b      	lsls	r3, r3, #30
 80138c4:	f100 8105 	bmi.w	8013ad2 <_printf_float+0x42a>
 80138c8:	68e0      	ldr	r0, [r4, #12]
 80138ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138cc:	4298      	cmp	r0, r3
 80138ce:	bfb8      	it	lt
 80138d0:	4618      	movlt	r0, r3
 80138d2:	e739      	b.n	8013748 <_printf_float+0xa0>
 80138d4:	2301      	movs	r3, #1
 80138d6:	464a      	mov	r2, r9
 80138d8:	4631      	mov	r1, r6
 80138da:	4628      	mov	r0, r5
 80138dc:	47b8      	blx	r7
 80138de:	3001      	adds	r0, #1
 80138e0:	f43f af30 	beq.w	8013744 <_printf_float+0x9c>
 80138e4:	f108 0801 	add.w	r8, r8, #1
 80138e8:	e7e6      	b.n	80138b8 <_printf_float+0x210>
 80138ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	dc2b      	bgt.n	8013948 <_printf_float+0x2a0>
 80138f0:	2301      	movs	r3, #1
 80138f2:	4a27      	ldr	r2, [pc, #156]	; (8013990 <_printf_float+0x2e8>)
 80138f4:	4631      	mov	r1, r6
 80138f6:	4628      	mov	r0, r5
 80138f8:	47b8      	blx	r7
 80138fa:	3001      	adds	r0, #1
 80138fc:	f43f af22 	beq.w	8013744 <_printf_float+0x9c>
 8013900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013902:	b923      	cbnz	r3, 801390e <_printf_float+0x266>
 8013904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013906:	b913      	cbnz	r3, 801390e <_printf_float+0x266>
 8013908:	6823      	ldr	r3, [r4, #0]
 801390a:	07d9      	lsls	r1, r3, #31
 801390c:	d5d8      	bpl.n	80138c0 <_printf_float+0x218>
 801390e:	9b05      	ldr	r3, [sp, #20]
 8013910:	465a      	mov	r2, fp
 8013912:	4631      	mov	r1, r6
 8013914:	4628      	mov	r0, r5
 8013916:	47b8      	blx	r7
 8013918:	3001      	adds	r0, #1
 801391a:	f43f af13 	beq.w	8013744 <_printf_float+0x9c>
 801391e:	f04f 0900 	mov.w	r9, #0
 8013922:	f104 0a1a 	add.w	sl, r4, #26
 8013926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013928:	425b      	negs	r3, r3
 801392a:	454b      	cmp	r3, r9
 801392c:	dc01      	bgt.n	8013932 <_printf_float+0x28a>
 801392e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013930:	e795      	b.n	801385e <_printf_float+0x1b6>
 8013932:	2301      	movs	r3, #1
 8013934:	4652      	mov	r2, sl
 8013936:	4631      	mov	r1, r6
 8013938:	4628      	mov	r0, r5
 801393a:	47b8      	blx	r7
 801393c:	3001      	adds	r0, #1
 801393e:	f43f af01 	beq.w	8013744 <_printf_float+0x9c>
 8013942:	f109 0901 	add.w	r9, r9, #1
 8013946:	e7ee      	b.n	8013926 <_printf_float+0x27e>
 8013948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801394a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801394c:	429a      	cmp	r2, r3
 801394e:	bfa8      	it	ge
 8013950:	461a      	movge	r2, r3
 8013952:	2a00      	cmp	r2, #0
 8013954:	4691      	mov	r9, r2
 8013956:	dd07      	ble.n	8013968 <_printf_float+0x2c0>
 8013958:	4613      	mov	r3, r2
 801395a:	4631      	mov	r1, r6
 801395c:	4642      	mov	r2, r8
 801395e:	4628      	mov	r0, r5
 8013960:	47b8      	blx	r7
 8013962:	3001      	adds	r0, #1
 8013964:	f43f aeee 	beq.w	8013744 <_printf_float+0x9c>
 8013968:	f104 031a 	add.w	r3, r4, #26
 801396c:	f04f 0a00 	mov.w	sl, #0
 8013970:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013974:	9307      	str	r3, [sp, #28]
 8013976:	e017      	b.n	80139a8 <_printf_float+0x300>
 8013978:	ffffffff 	.word	0xffffffff
 801397c:	7fefffff 	.word	0x7fefffff
 8013980:	0801854c 	.word	0x0801854c
 8013984:	08018548 	.word	0x08018548
 8013988:	08018554 	.word	0x08018554
 801398c:	08018550 	.word	0x08018550
 8013990:	08018558 	.word	0x08018558
 8013994:	2301      	movs	r3, #1
 8013996:	9a07      	ldr	r2, [sp, #28]
 8013998:	4631      	mov	r1, r6
 801399a:	4628      	mov	r0, r5
 801399c:	47b8      	blx	r7
 801399e:	3001      	adds	r0, #1
 80139a0:	f43f aed0 	beq.w	8013744 <_printf_float+0x9c>
 80139a4:	f10a 0a01 	add.w	sl, sl, #1
 80139a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80139aa:	9306      	str	r3, [sp, #24]
 80139ac:	eba3 0309 	sub.w	r3, r3, r9
 80139b0:	4553      	cmp	r3, sl
 80139b2:	dcef      	bgt.n	8013994 <_printf_float+0x2ec>
 80139b4:	9b06      	ldr	r3, [sp, #24]
 80139b6:	4498      	add	r8, r3
 80139b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80139bc:	429a      	cmp	r2, r3
 80139be:	db15      	blt.n	80139ec <_printf_float+0x344>
 80139c0:	6823      	ldr	r3, [r4, #0]
 80139c2:	07da      	lsls	r2, r3, #31
 80139c4:	d412      	bmi.n	80139ec <_printf_float+0x344>
 80139c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139c8:	9a06      	ldr	r2, [sp, #24]
 80139ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80139cc:	1a9a      	subs	r2, r3, r2
 80139ce:	eba3 0a01 	sub.w	sl, r3, r1
 80139d2:	4592      	cmp	sl, r2
 80139d4:	bfa8      	it	ge
 80139d6:	4692      	movge	sl, r2
 80139d8:	f1ba 0f00 	cmp.w	sl, #0
 80139dc:	dc0e      	bgt.n	80139fc <_printf_float+0x354>
 80139de:	f04f 0800 	mov.w	r8, #0
 80139e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80139e6:	f104 091a 	add.w	r9, r4, #26
 80139ea:	e019      	b.n	8013a20 <_printf_float+0x378>
 80139ec:	9b05      	ldr	r3, [sp, #20]
 80139ee:	465a      	mov	r2, fp
 80139f0:	4631      	mov	r1, r6
 80139f2:	4628      	mov	r0, r5
 80139f4:	47b8      	blx	r7
 80139f6:	3001      	adds	r0, #1
 80139f8:	d1e5      	bne.n	80139c6 <_printf_float+0x31e>
 80139fa:	e6a3      	b.n	8013744 <_printf_float+0x9c>
 80139fc:	4653      	mov	r3, sl
 80139fe:	4642      	mov	r2, r8
 8013a00:	4631      	mov	r1, r6
 8013a02:	4628      	mov	r0, r5
 8013a04:	47b8      	blx	r7
 8013a06:	3001      	adds	r0, #1
 8013a08:	d1e9      	bne.n	80139de <_printf_float+0x336>
 8013a0a:	e69b      	b.n	8013744 <_printf_float+0x9c>
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	464a      	mov	r2, r9
 8013a10:	4631      	mov	r1, r6
 8013a12:	4628      	mov	r0, r5
 8013a14:	47b8      	blx	r7
 8013a16:	3001      	adds	r0, #1
 8013a18:	f43f ae94 	beq.w	8013744 <_printf_float+0x9c>
 8013a1c:	f108 0801 	add.w	r8, r8, #1
 8013a20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013a24:	1a9b      	subs	r3, r3, r2
 8013a26:	eba3 030a 	sub.w	r3, r3, sl
 8013a2a:	4543      	cmp	r3, r8
 8013a2c:	dcee      	bgt.n	8013a0c <_printf_float+0x364>
 8013a2e:	e747      	b.n	80138c0 <_printf_float+0x218>
 8013a30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a32:	2a01      	cmp	r2, #1
 8013a34:	dc01      	bgt.n	8013a3a <_printf_float+0x392>
 8013a36:	07db      	lsls	r3, r3, #31
 8013a38:	d539      	bpl.n	8013aae <_printf_float+0x406>
 8013a3a:	2301      	movs	r3, #1
 8013a3c:	4642      	mov	r2, r8
 8013a3e:	4631      	mov	r1, r6
 8013a40:	4628      	mov	r0, r5
 8013a42:	47b8      	blx	r7
 8013a44:	3001      	adds	r0, #1
 8013a46:	f43f ae7d 	beq.w	8013744 <_printf_float+0x9c>
 8013a4a:	9b05      	ldr	r3, [sp, #20]
 8013a4c:	465a      	mov	r2, fp
 8013a4e:	4631      	mov	r1, r6
 8013a50:	4628      	mov	r0, r5
 8013a52:	47b8      	blx	r7
 8013a54:	3001      	adds	r0, #1
 8013a56:	f108 0801 	add.w	r8, r8, #1
 8013a5a:	f43f ae73 	beq.w	8013744 <_printf_float+0x9c>
 8013a5e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a6c:	f103 33ff 	add.w	r3, r3, #4294967295
 8013a70:	d018      	beq.n	8013aa4 <_printf_float+0x3fc>
 8013a72:	4642      	mov	r2, r8
 8013a74:	4631      	mov	r1, r6
 8013a76:	4628      	mov	r0, r5
 8013a78:	47b8      	blx	r7
 8013a7a:	3001      	adds	r0, #1
 8013a7c:	d10e      	bne.n	8013a9c <_printf_float+0x3f4>
 8013a7e:	e661      	b.n	8013744 <_printf_float+0x9c>
 8013a80:	2301      	movs	r3, #1
 8013a82:	464a      	mov	r2, r9
 8013a84:	4631      	mov	r1, r6
 8013a86:	4628      	mov	r0, r5
 8013a88:	47b8      	blx	r7
 8013a8a:	3001      	adds	r0, #1
 8013a8c:	f43f ae5a 	beq.w	8013744 <_printf_float+0x9c>
 8013a90:	f108 0801 	add.w	r8, r8, #1
 8013a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a96:	3b01      	subs	r3, #1
 8013a98:	4543      	cmp	r3, r8
 8013a9a:	dcf1      	bgt.n	8013a80 <_printf_float+0x3d8>
 8013a9c:	4653      	mov	r3, sl
 8013a9e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013aa2:	e6dd      	b.n	8013860 <_printf_float+0x1b8>
 8013aa4:	f04f 0800 	mov.w	r8, #0
 8013aa8:	f104 091a 	add.w	r9, r4, #26
 8013aac:	e7f2      	b.n	8013a94 <_printf_float+0x3ec>
 8013aae:	2301      	movs	r3, #1
 8013ab0:	e7df      	b.n	8013a72 <_printf_float+0x3ca>
 8013ab2:	2301      	movs	r3, #1
 8013ab4:	464a      	mov	r2, r9
 8013ab6:	4631      	mov	r1, r6
 8013ab8:	4628      	mov	r0, r5
 8013aba:	47b8      	blx	r7
 8013abc:	3001      	adds	r0, #1
 8013abe:	f43f ae41 	beq.w	8013744 <_printf_float+0x9c>
 8013ac2:	f108 0801 	add.w	r8, r8, #1
 8013ac6:	68e3      	ldr	r3, [r4, #12]
 8013ac8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013aca:	1a9b      	subs	r3, r3, r2
 8013acc:	4543      	cmp	r3, r8
 8013ace:	dcf0      	bgt.n	8013ab2 <_printf_float+0x40a>
 8013ad0:	e6fa      	b.n	80138c8 <_printf_float+0x220>
 8013ad2:	f04f 0800 	mov.w	r8, #0
 8013ad6:	f104 0919 	add.w	r9, r4, #25
 8013ada:	e7f4      	b.n	8013ac6 <_printf_float+0x41e>
 8013adc:	2900      	cmp	r1, #0
 8013ade:	f43f ae8a 	beq.w	80137f6 <_printf_float+0x14e>
 8013ae2:	f04f 0c00 	mov.w	ip, #0
 8013ae6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8013aea:	e9cd 0900 	strd	r0, r9, [sp]
 8013aee:	6022      	str	r2, [r4, #0]
 8013af0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013af4:	4628      	mov	r0, r5
 8013af6:	f7ff fd50 	bl	801359a <__cvt>
 8013afa:	4680      	mov	r8, r0
 8013afc:	e64a      	b.n	8013794 <_printf_float+0xec>
 8013afe:	bf00      	nop

08013b00 <_printf_common>:
 8013b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b04:	4691      	mov	r9, r2
 8013b06:	461f      	mov	r7, r3
 8013b08:	688a      	ldr	r2, [r1, #8]
 8013b0a:	690b      	ldr	r3, [r1, #16]
 8013b0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013b10:	4293      	cmp	r3, r2
 8013b12:	bfb8      	it	lt
 8013b14:	4613      	movlt	r3, r2
 8013b16:	f8c9 3000 	str.w	r3, [r9]
 8013b1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013b1e:	4606      	mov	r6, r0
 8013b20:	460c      	mov	r4, r1
 8013b22:	b112      	cbz	r2, 8013b2a <_printf_common+0x2a>
 8013b24:	3301      	adds	r3, #1
 8013b26:	f8c9 3000 	str.w	r3, [r9]
 8013b2a:	6823      	ldr	r3, [r4, #0]
 8013b2c:	0699      	lsls	r1, r3, #26
 8013b2e:	bf42      	ittt	mi
 8013b30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013b34:	3302      	addmi	r3, #2
 8013b36:	f8c9 3000 	strmi.w	r3, [r9]
 8013b3a:	6825      	ldr	r5, [r4, #0]
 8013b3c:	f015 0506 	ands.w	r5, r5, #6
 8013b40:	d107      	bne.n	8013b52 <_printf_common+0x52>
 8013b42:	f104 0a19 	add.w	sl, r4, #25
 8013b46:	68e3      	ldr	r3, [r4, #12]
 8013b48:	f8d9 2000 	ldr.w	r2, [r9]
 8013b4c:	1a9b      	subs	r3, r3, r2
 8013b4e:	42ab      	cmp	r3, r5
 8013b50:	dc28      	bgt.n	8013ba4 <_printf_common+0xa4>
 8013b52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013b56:	6822      	ldr	r2, [r4, #0]
 8013b58:	3300      	adds	r3, #0
 8013b5a:	bf18      	it	ne
 8013b5c:	2301      	movne	r3, #1
 8013b5e:	0692      	lsls	r2, r2, #26
 8013b60:	d42d      	bmi.n	8013bbe <_printf_common+0xbe>
 8013b62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013b66:	4639      	mov	r1, r7
 8013b68:	4630      	mov	r0, r6
 8013b6a:	47c0      	blx	r8
 8013b6c:	3001      	adds	r0, #1
 8013b6e:	d020      	beq.n	8013bb2 <_printf_common+0xb2>
 8013b70:	6823      	ldr	r3, [r4, #0]
 8013b72:	68e5      	ldr	r5, [r4, #12]
 8013b74:	f8d9 2000 	ldr.w	r2, [r9]
 8013b78:	f003 0306 	and.w	r3, r3, #6
 8013b7c:	2b04      	cmp	r3, #4
 8013b7e:	bf08      	it	eq
 8013b80:	1aad      	subeq	r5, r5, r2
 8013b82:	68a3      	ldr	r3, [r4, #8]
 8013b84:	6922      	ldr	r2, [r4, #16]
 8013b86:	bf0c      	ite	eq
 8013b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b8c:	2500      	movne	r5, #0
 8013b8e:	4293      	cmp	r3, r2
 8013b90:	bfc4      	itt	gt
 8013b92:	1a9b      	subgt	r3, r3, r2
 8013b94:	18ed      	addgt	r5, r5, r3
 8013b96:	f04f 0900 	mov.w	r9, #0
 8013b9a:	341a      	adds	r4, #26
 8013b9c:	454d      	cmp	r5, r9
 8013b9e:	d11a      	bne.n	8013bd6 <_printf_common+0xd6>
 8013ba0:	2000      	movs	r0, #0
 8013ba2:	e008      	b.n	8013bb6 <_printf_common+0xb6>
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	4652      	mov	r2, sl
 8013ba8:	4639      	mov	r1, r7
 8013baa:	4630      	mov	r0, r6
 8013bac:	47c0      	blx	r8
 8013bae:	3001      	adds	r0, #1
 8013bb0:	d103      	bne.n	8013bba <_printf_common+0xba>
 8013bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8013bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bba:	3501      	adds	r5, #1
 8013bbc:	e7c3      	b.n	8013b46 <_printf_common+0x46>
 8013bbe:	18e1      	adds	r1, r4, r3
 8013bc0:	1c5a      	adds	r2, r3, #1
 8013bc2:	2030      	movs	r0, #48	; 0x30
 8013bc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013bc8:	4422      	add	r2, r4
 8013bca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013bce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013bd2:	3302      	adds	r3, #2
 8013bd4:	e7c5      	b.n	8013b62 <_printf_common+0x62>
 8013bd6:	2301      	movs	r3, #1
 8013bd8:	4622      	mov	r2, r4
 8013bda:	4639      	mov	r1, r7
 8013bdc:	4630      	mov	r0, r6
 8013bde:	47c0      	blx	r8
 8013be0:	3001      	adds	r0, #1
 8013be2:	d0e6      	beq.n	8013bb2 <_printf_common+0xb2>
 8013be4:	f109 0901 	add.w	r9, r9, #1
 8013be8:	e7d8      	b.n	8013b9c <_printf_common+0x9c>
	...

08013bec <_printf_i>:
 8013bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013bf0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013bf4:	460c      	mov	r4, r1
 8013bf6:	7e09      	ldrb	r1, [r1, #24]
 8013bf8:	b085      	sub	sp, #20
 8013bfa:	296e      	cmp	r1, #110	; 0x6e
 8013bfc:	4617      	mov	r7, r2
 8013bfe:	4606      	mov	r6, r0
 8013c00:	4698      	mov	r8, r3
 8013c02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c04:	f000 80b3 	beq.w	8013d6e <_printf_i+0x182>
 8013c08:	d822      	bhi.n	8013c50 <_printf_i+0x64>
 8013c0a:	2963      	cmp	r1, #99	; 0x63
 8013c0c:	d036      	beq.n	8013c7c <_printf_i+0x90>
 8013c0e:	d80a      	bhi.n	8013c26 <_printf_i+0x3a>
 8013c10:	2900      	cmp	r1, #0
 8013c12:	f000 80b9 	beq.w	8013d88 <_printf_i+0x19c>
 8013c16:	2958      	cmp	r1, #88	; 0x58
 8013c18:	f000 8083 	beq.w	8013d22 <_printf_i+0x136>
 8013c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013c24:	e032      	b.n	8013c8c <_printf_i+0xa0>
 8013c26:	2964      	cmp	r1, #100	; 0x64
 8013c28:	d001      	beq.n	8013c2e <_printf_i+0x42>
 8013c2a:	2969      	cmp	r1, #105	; 0x69
 8013c2c:	d1f6      	bne.n	8013c1c <_printf_i+0x30>
 8013c2e:	6820      	ldr	r0, [r4, #0]
 8013c30:	6813      	ldr	r3, [r2, #0]
 8013c32:	0605      	lsls	r5, r0, #24
 8013c34:	f103 0104 	add.w	r1, r3, #4
 8013c38:	d52a      	bpl.n	8013c90 <_printf_i+0xa4>
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	6011      	str	r1, [r2, #0]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	da03      	bge.n	8013c4a <_printf_i+0x5e>
 8013c42:	222d      	movs	r2, #45	; 0x2d
 8013c44:	425b      	negs	r3, r3
 8013c46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013c4a:	486f      	ldr	r0, [pc, #444]	; (8013e08 <_printf_i+0x21c>)
 8013c4c:	220a      	movs	r2, #10
 8013c4e:	e039      	b.n	8013cc4 <_printf_i+0xd8>
 8013c50:	2973      	cmp	r1, #115	; 0x73
 8013c52:	f000 809d 	beq.w	8013d90 <_printf_i+0x1a4>
 8013c56:	d808      	bhi.n	8013c6a <_printf_i+0x7e>
 8013c58:	296f      	cmp	r1, #111	; 0x6f
 8013c5a:	d020      	beq.n	8013c9e <_printf_i+0xb2>
 8013c5c:	2970      	cmp	r1, #112	; 0x70
 8013c5e:	d1dd      	bne.n	8013c1c <_printf_i+0x30>
 8013c60:	6823      	ldr	r3, [r4, #0]
 8013c62:	f043 0320 	orr.w	r3, r3, #32
 8013c66:	6023      	str	r3, [r4, #0]
 8013c68:	e003      	b.n	8013c72 <_printf_i+0x86>
 8013c6a:	2975      	cmp	r1, #117	; 0x75
 8013c6c:	d017      	beq.n	8013c9e <_printf_i+0xb2>
 8013c6e:	2978      	cmp	r1, #120	; 0x78
 8013c70:	d1d4      	bne.n	8013c1c <_printf_i+0x30>
 8013c72:	2378      	movs	r3, #120	; 0x78
 8013c74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013c78:	4864      	ldr	r0, [pc, #400]	; (8013e0c <_printf_i+0x220>)
 8013c7a:	e055      	b.n	8013d28 <_printf_i+0x13c>
 8013c7c:	6813      	ldr	r3, [r2, #0]
 8013c7e:	1d19      	adds	r1, r3, #4
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	6011      	str	r1, [r2, #0]
 8013c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	e08c      	b.n	8013daa <_printf_i+0x1be>
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	6011      	str	r1, [r2, #0]
 8013c94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013c98:	bf18      	it	ne
 8013c9a:	b21b      	sxthne	r3, r3
 8013c9c:	e7cf      	b.n	8013c3e <_printf_i+0x52>
 8013c9e:	6813      	ldr	r3, [r2, #0]
 8013ca0:	6825      	ldr	r5, [r4, #0]
 8013ca2:	1d18      	adds	r0, r3, #4
 8013ca4:	6010      	str	r0, [r2, #0]
 8013ca6:	0628      	lsls	r0, r5, #24
 8013ca8:	d501      	bpl.n	8013cae <_printf_i+0xc2>
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	e002      	b.n	8013cb4 <_printf_i+0xc8>
 8013cae:	0668      	lsls	r0, r5, #25
 8013cb0:	d5fb      	bpl.n	8013caa <_printf_i+0xbe>
 8013cb2:	881b      	ldrh	r3, [r3, #0]
 8013cb4:	4854      	ldr	r0, [pc, #336]	; (8013e08 <_printf_i+0x21c>)
 8013cb6:	296f      	cmp	r1, #111	; 0x6f
 8013cb8:	bf14      	ite	ne
 8013cba:	220a      	movne	r2, #10
 8013cbc:	2208      	moveq	r2, #8
 8013cbe:	2100      	movs	r1, #0
 8013cc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013cc4:	6865      	ldr	r5, [r4, #4]
 8013cc6:	60a5      	str	r5, [r4, #8]
 8013cc8:	2d00      	cmp	r5, #0
 8013cca:	f2c0 8095 	blt.w	8013df8 <_printf_i+0x20c>
 8013cce:	6821      	ldr	r1, [r4, #0]
 8013cd0:	f021 0104 	bic.w	r1, r1, #4
 8013cd4:	6021      	str	r1, [r4, #0]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d13d      	bne.n	8013d56 <_printf_i+0x16a>
 8013cda:	2d00      	cmp	r5, #0
 8013cdc:	f040 808e 	bne.w	8013dfc <_printf_i+0x210>
 8013ce0:	4665      	mov	r5, ip
 8013ce2:	2a08      	cmp	r2, #8
 8013ce4:	d10b      	bne.n	8013cfe <_printf_i+0x112>
 8013ce6:	6823      	ldr	r3, [r4, #0]
 8013ce8:	07db      	lsls	r3, r3, #31
 8013cea:	d508      	bpl.n	8013cfe <_printf_i+0x112>
 8013cec:	6923      	ldr	r3, [r4, #16]
 8013cee:	6862      	ldr	r2, [r4, #4]
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	bfde      	ittt	le
 8013cf4:	2330      	movle	r3, #48	; 0x30
 8013cf6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013cfa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013cfe:	ebac 0305 	sub.w	r3, ip, r5
 8013d02:	6123      	str	r3, [r4, #16]
 8013d04:	f8cd 8000 	str.w	r8, [sp]
 8013d08:	463b      	mov	r3, r7
 8013d0a:	aa03      	add	r2, sp, #12
 8013d0c:	4621      	mov	r1, r4
 8013d0e:	4630      	mov	r0, r6
 8013d10:	f7ff fef6 	bl	8013b00 <_printf_common>
 8013d14:	3001      	adds	r0, #1
 8013d16:	d14d      	bne.n	8013db4 <_printf_i+0x1c8>
 8013d18:	f04f 30ff 	mov.w	r0, #4294967295
 8013d1c:	b005      	add	sp, #20
 8013d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d22:	4839      	ldr	r0, [pc, #228]	; (8013e08 <_printf_i+0x21c>)
 8013d24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013d28:	6813      	ldr	r3, [r2, #0]
 8013d2a:	6821      	ldr	r1, [r4, #0]
 8013d2c:	1d1d      	adds	r5, r3, #4
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	6015      	str	r5, [r2, #0]
 8013d32:	060a      	lsls	r2, r1, #24
 8013d34:	d50b      	bpl.n	8013d4e <_printf_i+0x162>
 8013d36:	07ca      	lsls	r2, r1, #31
 8013d38:	bf44      	itt	mi
 8013d3a:	f041 0120 	orrmi.w	r1, r1, #32
 8013d3e:	6021      	strmi	r1, [r4, #0]
 8013d40:	b91b      	cbnz	r3, 8013d4a <_printf_i+0x15e>
 8013d42:	6822      	ldr	r2, [r4, #0]
 8013d44:	f022 0220 	bic.w	r2, r2, #32
 8013d48:	6022      	str	r2, [r4, #0]
 8013d4a:	2210      	movs	r2, #16
 8013d4c:	e7b7      	b.n	8013cbe <_printf_i+0xd2>
 8013d4e:	064d      	lsls	r5, r1, #25
 8013d50:	bf48      	it	mi
 8013d52:	b29b      	uxthmi	r3, r3
 8013d54:	e7ef      	b.n	8013d36 <_printf_i+0x14a>
 8013d56:	4665      	mov	r5, ip
 8013d58:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d5c:	fb02 3311 	mls	r3, r2, r1, r3
 8013d60:	5cc3      	ldrb	r3, [r0, r3]
 8013d62:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013d66:	460b      	mov	r3, r1
 8013d68:	2900      	cmp	r1, #0
 8013d6a:	d1f5      	bne.n	8013d58 <_printf_i+0x16c>
 8013d6c:	e7b9      	b.n	8013ce2 <_printf_i+0xf6>
 8013d6e:	6813      	ldr	r3, [r2, #0]
 8013d70:	6825      	ldr	r5, [r4, #0]
 8013d72:	6961      	ldr	r1, [r4, #20]
 8013d74:	1d18      	adds	r0, r3, #4
 8013d76:	6010      	str	r0, [r2, #0]
 8013d78:	0628      	lsls	r0, r5, #24
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	d501      	bpl.n	8013d82 <_printf_i+0x196>
 8013d7e:	6019      	str	r1, [r3, #0]
 8013d80:	e002      	b.n	8013d88 <_printf_i+0x19c>
 8013d82:	066a      	lsls	r2, r5, #25
 8013d84:	d5fb      	bpl.n	8013d7e <_printf_i+0x192>
 8013d86:	8019      	strh	r1, [r3, #0]
 8013d88:	2300      	movs	r3, #0
 8013d8a:	6123      	str	r3, [r4, #16]
 8013d8c:	4665      	mov	r5, ip
 8013d8e:	e7b9      	b.n	8013d04 <_printf_i+0x118>
 8013d90:	6813      	ldr	r3, [r2, #0]
 8013d92:	1d19      	adds	r1, r3, #4
 8013d94:	6011      	str	r1, [r2, #0]
 8013d96:	681d      	ldr	r5, [r3, #0]
 8013d98:	6862      	ldr	r2, [r4, #4]
 8013d9a:	2100      	movs	r1, #0
 8013d9c:	4628      	mov	r0, r5
 8013d9e:	f7ec fa57 	bl	8000250 <memchr>
 8013da2:	b108      	cbz	r0, 8013da8 <_printf_i+0x1bc>
 8013da4:	1b40      	subs	r0, r0, r5
 8013da6:	6060      	str	r0, [r4, #4]
 8013da8:	6863      	ldr	r3, [r4, #4]
 8013daa:	6123      	str	r3, [r4, #16]
 8013dac:	2300      	movs	r3, #0
 8013dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013db2:	e7a7      	b.n	8013d04 <_printf_i+0x118>
 8013db4:	6923      	ldr	r3, [r4, #16]
 8013db6:	462a      	mov	r2, r5
 8013db8:	4639      	mov	r1, r7
 8013dba:	4630      	mov	r0, r6
 8013dbc:	47c0      	blx	r8
 8013dbe:	3001      	adds	r0, #1
 8013dc0:	d0aa      	beq.n	8013d18 <_printf_i+0x12c>
 8013dc2:	6823      	ldr	r3, [r4, #0]
 8013dc4:	079b      	lsls	r3, r3, #30
 8013dc6:	d413      	bmi.n	8013df0 <_printf_i+0x204>
 8013dc8:	68e0      	ldr	r0, [r4, #12]
 8013dca:	9b03      	ldr	r3, [sp, #12]
 8013dcc:	4298      	cmp	r0, r3
 8013dce:	bfb8      	it	lt
 8013dd0:	4618      	movlt	r0, r3
 8013dd2:	e7a3      	b.n	8013d1c <_printf_i+0x130>
 8013dd4:	2301      	movs	r3, #1
 8013dd6:	464a      	mov	r2, r9
 8013dd8:	4639      	mov	r1, r7
 8013dda:	4630      	mov	r0, r6
 8013ddc:	47c0      	blx	r8
 8013dde:	3001      	adds	r0, #1
 8013de0:	d09a      	beq.n	8013d18 <_printf_i+0x12c>
 8013de2:	3501      	adds	r5, #1
 8013de4:	68e3      	ldr	r3, [r4, #12]
 8013de6:	9a03      	ldr	r2, [sp, #12]
 8013de8:	1a9b      	subs	r3, r3, r2
 8013dea:	42ab      	cmp	r3, r5
 8013dec:	dcf2      	bgt.n	8013dd4 <_printf_i+0x1e8>
 8013dee:	e7eb      	b.n	8013dc8 <_printf_i+0x1dc>
 8013df0:	2500      	movs	r5, #0
 8013df2:	f104 0919 	add.w	r9, r4, #25
 8013df6:	e7f5      	b.n	8013de4 <_printf_i+0x1f8>
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d1ac      	bne.n	8013d56 <_printf_i+0x16a>
 8013dfc:	7803      	ldrb	r3, [r0, #0]
 8013dfe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013e02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e06:	e76c      	b.n	8013ce2 <_printf_i+0xf6>
 8013e08:	0801855a 	.word	0x0801855a
 8013e0c:	0801856b 	.word	0x0801856b

08013e10 <_scanf_float>:
 8013e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e14:	469a      	mov	sl, r3
 8013e16:	688b      	ldr	r3, [r1, #8]
 8013e18:	4616      	mov	r6, r2
 8013e1a:	1e5a      	subs	r2, r3, #1
 8013e1c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013e20:	b087      	sub	sp, #28
 8013e22:	bf83      	ittte	hi
 8013e24:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013e28:	189b      	addhi	r3, r3, r2
 8013e2a:	9301      	strhi	r3, [sp, #4]
 8013e2c:	2300      	movls	r3, #0
 8013e2e:	bf86      	itte	hi
 8013e30:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013e34:	608b      	strhi	r3, [r1, #8]
 8013e36:	9301      	strls	r3, [sp, #4]
 8013e38:	680b      	ldr	r3, [r1, #0]
 8013e3a:	4688      	mov	r8, r1
 8013e3c:	f04f 0b00 	mov.w	fp, #0
 8013e40:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013e44:	f848 3b1c 	str.w	r3, [r8], #28
 8013e48:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8013e4c:	4607      	mov	r7, r0
 8013e4e:	460c      	mov	r4, r1
 8013e50:	4645      	mov	r5, r8
 8013e52:	465a      	mov	r2, fp
 8013e54:	46d9      	mov	r9, fp
 8013e56:	f8cd b008 	str.w	fp, [sp, #8]
 8013e5a:	68a1      	ldr	r1, [r4, #8]
 8013e5c:	b181      	cbz	r1, 8013e80 <_scanf_float+0x70>
 8013e5e:	6833      	ldr	r3, [r6, #0]
 8013e60:	781b      	ldrb	r3, [r3, #0]
 8013e62:	2b49      	cmp	r3, #73	; 0x49
 8013e64:	d071      	beq.n	8013f4a <_scanf_float+0x13a>
 8013e66:	d84d      	bhi.n	8013f04 <_scanf_float+0xf4>
 8013e68:	2b39      	cmp	r3, #57	; 0x39
 8013e6a:	d840      	bhi.n	8013eee <_scanf_float+0xde>
 8013e6c:	2b31      	cmp	r3, #49	; 0x31
 8013e6e:	f080 8088 	bcs.w	8013f82 <_scanf_float+0x172>
 8013e72:	2b2d      	cmp	r3, #45	; 0x2d
 8013e74:	f000 8090 	beq.w	8013f98 <_scanf_float+0x188>
 8013e78:	d815      	bhi.n	8013ea6 <_scanf_float+0x96>
 8013e7a:	2b2b      	cmp	r3, #43	; 0x2b
 8013e7c:	f000 808c 	beq.w	8013f98 <_scanf_float+0x188>
 8013e80:	f1b9 0f00 	cmp.w	r9, #0
 8013e84:	d003      	beq.n	8013e8e <_scanf_float+0x7e>
 8013e86:	6823      	ldr	r3, [r4, #0]
 8013e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013e8c:	6023      	str	r3, [r4, #0]
 8013e8e:	3a01      	subs	r2, #1
 8013e90:	2a01      	cmp	r2, #1
 8013e92:	f200 80ea 	bhi.w	801406a <_scanf_float+0x25a>
 8013e96:	4545      	cmp	r5, r8
 8013e98:	f200 80dc 	bhi.w	8014054 <_scanf_float+0x244>
 8013e9c:	2601      	movs	r6, #1
 8013e9e:	4630      	mov	r0, r6
 8013ea0:	b007      	add	sp, #28
 8013ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ea6:	2b2e      	cmp	r3, #46	; 0x2e
 8013ea8:	f000 809f 	beq.w	8013fea <_scanf_float+0x1da>
 8013eac:	2b30      	cmp	r3, #48	; 0x30
 8013eae:	d1e7      	bne.n	8013e80 <_scanf_float+0x70>
 8013eb0:	6820      	ldr	r0, [r4, #0]
 8013eb2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013eb6:	d064      	beq.n	8013f82 <_scanf_float+0x172>
 8013eb8:	9b01      	ldr	r3, [sp, #4]
 8013eba:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8013ebe:	6020      	str	r0, [r4, #0]
 8013ec0:	f109 0901 	add.w	r9, r9, #1
 8013ec4:	b11b      	cbz	r3, 8013ece <_scanf_float+0xbe>
 8013ec6:	3b01      	subs	r3, #1
 8013ec8:	3101      	adds	r1, #1
 8013eca:	9301      	str	r3, [sp, #4]
 8013ecc:	60a1      	str	r1, [r4, #8]
 8013ece:	68a3      	ldr	r3, [r4, #8]
 8013ed0:	3b01      	subs	r3, #1
 8013ed2:	60a3      	str	r3, [r4, #8]
 8013ed4:	6923      	ldr	r3, [r4, #16]
 8013ed6:	3301      	adds	r3, #1
 8013ed8:	6123      	str	r3, [r4, #16]
 8013eda:	6873      	ldr	r3, [r6, #4]
 8013edc:	3b01      	subs	r3, #1
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	6073      	str	r3, [r6, #4]
 8013ee2:	f340 80ac 	ble.w	801403e <_scanf_float+0x22e>
 8013ee6:	6833      	ldr	r3, [r6, #0]
 8013ee8:	3301      	adds	r3, #1
 8013eea:	6033      	str	r3, [r6, #0]
 8013eec:	e7b5      	b.n	8013e5a <_scanf_float+0x4a>
 8013eee:	2b45      	cmp	r3, #69	; 0x45
 8013ef0:	f000 8085 	beq.w	8013ffe <_scanf_float+0x1ee>
 8013ef4:	2b46      	cmp	r3, #70	; 0x46
 8013ef6:	d06a      	beq.n	8013fce <_scanf_float+0x1be>
 8013ef8:	2b41      	cmp	r3, #65	; 0x41
 8013efa:	d1c1      	bne.n	8013e80 <_scanf_float+0x70>
 8013efc:	2a01      	cmp	r2, #1
 8013efe:	d1bf      	bne.n	8013e80 <_scanf_float+0x70>
 8013f00:	2202      	movs	r2, #2
 8013f02:	e046      	b.n	8013f92 <_scanf_float+0x182>
 8013f04:	2b65      	cmp	r3, #101	; 0x65
 8013f06:	d07a      	beq.n	8013ffe <_scanf_float+0x1ee>
 8013f08:	d818      	bhi.n	8013f3c <_scanf_float+0x12c>
 8013f0a:	2b54      	cmp	r3, #84	; 0x54
 8013f0c:	d066      	beq.n	8013fdc <_scanf_float+0x1cc>
 8013f0e:	d811      	bhi.n	8013f34 <_scanf_float+0x124>
 8013f10:	2b4e      	cmp	r3, #78	; 0x4e
 8013f12:	d1b5      	bne.n	8013e80 <_scanf_float+0x70>
 8013f14:	2a00      	cmp	r2, #0
 8013f16:	d146      	bne.n	8013fa6 <_scanf_float+0x196>
 8013f18:	f1b9 0f00 	cmp.w	r9, #0
 8013f1c:	d145      	bne.n	8013faa <_scanf_float+0x19a>
 8013f1e:	6821      	ldr	r1, [r4, #0]
 8013f20:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013f24:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013f28:	d13f      	bne.n	8013faa <_scanf_float+0x19a>
 8013f2a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013f2e:	6021      	str	r1, [r4, #0]
 8013f30:	2201      	movs	r2, #1
 8013f32:	e02e      	b.n	8013f92 <_scanf_float+0x182>
 8013f34:	2b59      	cmp	r3, #89	; 0x59
 8013f36:	d01e      	beq.n	8013f76 <_scanf_float+0x166>
 8013f38:	2b61      	cmp	r3, #97	; 0x61
 8013f3a:	e7de      	b.n	8013efa <_scanf_float+0xea>
 8013f3c:	2b6e      	cmp	r3, #110	; 0x6e
 8013f3e:	d0e9      	beq.n	8013f14 <_scanf_float+0x104>
 8013f40:	d815      	bhi.n	8013f6e <_scanf_float+0x15e>
 8013f42:	2b66      	cmp	r3, #102	; 0x66
 8013f44:	d043      	beq.n	8013fce <_scanf_float+0x1be>
 8013f46:	2b69      	cmp	r3, #105	; 0x69
 8013f48:	d19a      	bne.n	8013e80 <_scanf_float+0x70>
 8013f4a:	f1bb 0f00 	cmp.w	fp, #0
 8013f4e:	d138      	bne.n	8013fc2 <_scanf_float+0x1b2>
 8013f50:	f1b9 0f00 	cmp.w	r9, #0
 8013f54:	d197      	bne.n	8013e86 <_scanf_float+0x76>
 8013f56:	6821      	ldr	r1, [r4, #0]
 8013f58:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013f5c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013f60:	d195      	bne.n	8013e8e <_scanf_float+0x7e>
 8013f62:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013f66:	6021      	str	r1, [r4, #0]
 8013f68:	f04f 0b01 	mov.w	fp, #1
 8013f6c:	e011      	b.n	8013f92 <_scanf_float+0x182>
 8013f6e:	2b74      	cmp	r3, #116	; 0x74
 8013f70:	d034      	beq.n	8013fdc <_scanf_float+0x1cc>
 8013f72:	2b79      	cmp	r3, #121	; 0x79
 8013f74:	d184      	bne.n	8013e80 <_scanf_float+0x70>
 8013f76:	f1bb 0f07 	cmp.w	fp, #7
 8013f7a:	d181      	bne.n	8013e80 <_scanf_float+0x70>
 8013f7c:	f04f 0b08 	mov.w	fp, #8
 8013f80:	e007      	b.n	8013f92 <_scanf_float+0x182>
 8013f82:	eb12 0f0b 	cmn.w	r2, fp
 8013f86:	f47f af7b 	bne.w	8013e80 <_scanf_float+0x70>
 8013f8a:	6821      	ldr	r1, [r4, #0]
 8013f8c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013f90:	6021      	str	r1, [r4, #0]
 8013f92:	702b      	strb	r3, [r5, #0]
 8013f94:	3501      	adds	r5, #1
 8013f96:	e79a      	b.n	8013ece <_scanf_float+0xbe>
 8013f98:	6821      	ldr	r1, [r4, #0]
 8013f9a:	0608      	lsls	r0, r1, #24
 8013f9c:	f57f af70 	bpl.w	8013e80 <_scanf_float+0x70>
 8013fa0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013fa4:	e7f4      	b.n	8013f90 <_scanf_float+0x180>
 8013fa6:	2a02      	cmp	r2, #2
 8013fa8:	d047      	beq.n	801403a <_scanf_float+0x22a>
 8013faa:	f1bb 0f01 	cmp.w	fp, #1
 8013fae:	d003      	beq.n	8013fb8 <_scanf_float+0x1a8>
 8013fb0:	f1bb 0f04 	cmp.w	fp, #4
 8013fb4:	f47f af64 	bne.w	8013e80 <_scanf_float+0x70>
 8013fb8:	f10b 0b01 	add.w	fp, fp, #1
 8013fbc:	fa5f fb8b 	uxtb.w	fp, fp
 8013fc0:	e7e7      	b.n	8013f92 <_scanf_float+0x182>
 8013fc2:	f1bb 0f03 	cmp.w	fp, #3
 8013fc6:	d0f7      	beq.n	8013fb8 <_scanf_float+0x1a8>
 8013fc8:	f1bb 0f05 	cmp.w	fp, #5
 8013fcc:	e7f2      	b.n	8013fb4 <_scanf_float+0x1a4>
 8013fce:	f1bb 0f02 	cmp.w	fp, #2
 8013fd2:	f47f af55 	bne.w	8013e80 <_scanf_float+0x70>
 8013fd6:	f04f 0b03 	mov.w	fp, #3
 8013fda:	e7da      	b.n	8013f92 <_scanf_float+0x182>
 8013fdc:	f1bb 0f06 	cmp.w	fp, #6
 8013fe0:	f47f af4e 	bne.w	8013e80 <_scanf_float+0x70>
 8013fe4:	f04f 0b07 	mov.w	fp, #7
 8013fe8:	e7d3      	b.n	8013f92 <_scanf_float+0x182>
 8013fea:	6821      	ldr	r1, [r4, #0]
 8013fec:	0588      	lsls	r0, r1, #22
 8013fee:	f57f af47 	bpl.w	8013e80 <_scanf_float+0x70>
 8013ff2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013ff6:	6021      	str	r1, [r4, #0]
 8013ff8:	f8cd 9008 	str.w	r9, [sp, #8]
 8013ffc:	e7c9      	b.n	8013f92 <_scanf_float+0x182>
 8013ffe:	6821      	ldr	r1, [r4, #0]
 8014000:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8014004:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014008:	d006      	beq.n	8014018 <_scanf_float+0x208>
 801400a:	0548      	lsls	r0, r1, #21
 801400c:	f57f af38 	bpl.w	8013e80 <_scanf_float+0x70>
 8014010:	f1b9 0f00 	cmp.w	r9, #0
 8014014:	f43f af3b 	beq.w	8013e8e <_scanf_float+0x7e>
 8014018:	0588      	lsls	r0, r1, #22
 801401a:	bf58      	it	pl
 801401c:	9802      	ldrpl	r0, [sp, #8]
 801401e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014022:	bf58      	it	pl
 8014024:	eba9 0000 	subpl.w	r0, r9, r0
 8014028:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801402c:	bf58      	it	pl
 801402e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8014032:	6021      	str	r1, [r4, #0]
 8014034:	f04f 0900 	mov.w	r9, #0
 8014038:	e7ab      	b.n	8013f92 <_scanf_float+0x182>
 801403a:	2203      	movs	r2, #3
 801403c:	e7a9      	b.n	8013f92 <_scanf_float+0x182>
 801403e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014042:	9205      	str	r2, [sp, #20]
 8014044:	4631      	mov	r1, r6
 8014046:	4638      	mov	r0, r7
 8014048:	4798      	blx	r3
 801404a:	9a05      	ldr	r2, [sp, #20]
 801404c:	2800      	cmp	r0, #0
 801404e:	f43f af04 	beq.w	8013e5a <_scanf_float+0x4a>
 8014052:	e715      	b.n	8013e80 <_scanf_float+0x70>
 8014054:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014058:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801405c:	4632      	mov	r2, r6
 801405e:	4638      	mov	r0, r7
 8014060:	4798      	blx	r3
 8014062:	6923      	ldr	r3, [r4, #16]
 8014064:	3b01      	subs	r3, #1
 8014066:	6123      	str	r3, [r4, #16]
 8014068:	e715      	b.n	8013e96 <_scanf_float+0x86>
 801406a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801406e:	2b06      	cmp	r3, #6
 8014070:	d80a      	bhi.n	8014088 <_scanf_float+0x278>
 8014072:	f1bb 0f02 	cmp.w	fp, #2
 8014076:	d966      	bls.n	8014146 <_scanf_float+0x336>
 8014078:	f1ab 0b03 	sub.w	fp, fp, #3
 801407c:	fa5f fb8b 	uxtb.w	fp, fp
 8014080:	eba5 0b0b 	sub.w	fp, r5, fp
 8014084:	455d      	cmp	r5, fp
 8014086:	d149      	bne.n	801411c <_scanf_float+0x30c>
 8014088:	6823      	ldr	r3, [r4, #0]
 801408a:	05da      	lsls	r2, r3, #23
 801408c:	d51f      	bpl.n	80140ce <_scanf_float+0x2be>
 801408e:	055b      	lsls	r3, r3, #21
 8014090:	d466      	bmi.n	8014160 <_scanf_float+0x350>
 8014092:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014096:	6923      	ldr	r3, [r4, #16]
 8014098:	2965      	cmp	r1, #101	; 0x65
 801409a:	f103 33ff 	add.w	r3, r3, #4294967295
 801409e:	f105 3bff 	add.w	fp, r5, #4294967295
 80140a2:	6123      	str	r3, [r4, #16]
 80140a4:	d00d      	beq.n	80140c2 <_scanf_float+0x2b2>
 80140a6:	2945      	cmp	r1, #69	; 0x45
 80140a8:	d00b      	beq.n	80140c2 <_scanf_float+0x2b2>
 80140aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80140ae:	4632      	mov	r2, r6
 80140b0:	4638      	mov	r0, r7
 80140b2:	4798      	blx	r3
 80140b4:	6923      	ldr	r3, [r4, #16]
 80140b6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80140ba:	3b01      	subs	r3, #1
 80140bc:	f1a5 0b02 	sub.w	fp, r5, #2
 80140c0:	6123      	str	r3, [r4, #16]
 80140c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80140c6:	4632      	mov	r2, r6
 80140c8:	4638      	mov	r0, r7
 80140ca:	4798      	blx	r3
 80140cc:	465d      	mov	r5, fp
 80140ce:	6826      	ldr	r6, [r4, #0]
 80140d0:	f016 0610 	ands.w	r6, r6, #16
 80140d4:	d170      	bne.n	80141b8 <_scanf_float+0x3a8>
 80140d6:	702e      	strb	r6, [r5, #0]
 80140d8:	6823      	ldr	r3, [r4, #0]
 80140da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80140de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80140e2:	d140      	bne.n	8014166 <_scanf_float+0x356>
 80140e4:	9b02      	ldr	r3, [sp, #8]
 80140e6:	eba9 0303 	sub.w	r3, r9, r3
 80140ea:	425a      	negs	r2, r3
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d147      	bne.n	8014180 <_scanf_float+0x370>
 80140f0:	2200      	movs	r2, #0
 80140f2:	4638      	mov	r0, r7
 80140f4:	4641      	mov	r1, r8
 80140f6:	f000 fecf 	bl	8014e98 <_strtod_r>
 80140fa:	6820      	ldr	r0, [r4, #0]
 80140fc:	f8da 3000 	ldr.w	r3, [sl]
 8014100:	f010 0f02 	tst.w	r0, #2
 8014104:	f103 0204 	add.w	r2, r3, #4
 8014108:	f8ca 2000 	str.w	r2, [sl]
 801410c:	d043      	beq.n	8014196 <_scanf_float+0x386>
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	ed83 0b00 	vstr	d0, [r3]
 8014114:	68e3      	ldr	r3, [r4, #12]
 8014116:	3301      	adds	r3, #1
 8014118:	60e3      	str	r3, [r4, #12]
 801411a:	e6c0      	b.n	8013e9e <_scanf_float+0x8e>
 801411c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014120:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014124:	4632      	mov	r2, r6
 8014126:	4638      	mov	r0, r7
 8014128:	4798      	blx	r3
 801412a:	6923      	ldr	r3, [r4, #16]
 801412c:	3b01      	subs	r3, #1
 801412e:	6123      	str	r3, [r4, #16]
 8014130:	e7a8      	b.n	8014084 <_scanf_float+0x274>
 8014132:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014136:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801413a:	4632      	mov	r2, r6
 801413c:	4638      	mov	r0, r7
 801413e:	4798      	blx	r3
 8014140:	6923      	ldr	r3, [r4, #16]
 8014142:	3b01      	subs	r3, #1
 8014144:	6123      	str	r3, [r4, #16]
 8014146:	4545      	cmp	r5, r8
 8014148:	d8f3      	bhi.n	8014132 <_scanf_float+0x322>
 801414a:	e6a7      	b.n	8013e9c <_scanf_float+0x8c>
 801414c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014150:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014154:	4632      	mov	r2, r6
 8014156:	4638      	mov	r0, r7
 8014158:	4798      	blx	r3
 801415a:	6923      	ldr	r3, [r4, #16]
 801415c:	3b01      	subs	r3, #1
 801415e:	6123      	str	r3, [r4, #16]
 8014160:	4545      	cmp	r5, r8
 8014162:	d8f3      	bhi.n	801414c <_scanf_float+0x33c>
 8014164:	e69a      	b.n	8013e9c <_scanf_float+0x8c>
 8014166:	9b03      	ldr	r3, [sp, #12]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d0c1      	beq.n	80140f0 <_scanf_float+0x2e0>
 801416c:	9904      	ldr	r1, [sp, #16]
 801416e:	230a      	movs	r3, #10
 8014170:	4632      	mov	r2, r6
 8014172:	3101      	adds	r1, #1
 8014174:	4638      	mov	r0, r7
 8014176:	f000 ff1b 	bl	8014fb0 <_strtol_r>
 801417a:	9b03      	ldr	r3, [sp, #12]
 801417c:	9d04      	ldr	r5, [sp, #16]
 801417e:	1ac2      	subs	r2, r0, r3
 8014180:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014184:	429d      	cmp	r5, r3
 8014186:	bf28      	it	cs
 8014188:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801418c:	490b      	ldr	r1, [pc, #44]	; (80141bc <_scanf_float+0x3ac>)
 801418e:	4628      	mov	r0, r5
 8014190:	f000 f880 	bl	8014294 <siprintf>
 8014194:	e7ac      	b.n	80140f0 <_scanf_float+0x2e0>
 8014196:	f010 0004 	ands.w	r0, r0, #4
 801419a:	d1b8      	bne.n	801410e <_scanf_float+0x2fe>
 801419c:	eeb4 0b40 	vcmp.f64	d0, d0
 80141a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141a4:	681d      	ldr	r5, [r3, #0]
 80141a6:	d704      	bvc.n	80141b2 <_scanf_float+0x3a2>
 80141a8:	f000 f86e 	bl	8014288 <nanf>
 80141ac:	ed85 0a00 	vstr	s0, [r5]
 80141b0:	e7b0      	b.n	8014114 <_scanf_float+0x304>
 80141b2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80141b6:	e7f9      	b.n	80141ac <_scanf_float+0x39c>
 80141b8:	2600      	movs	r6, #0
 80141ba:	e670      	b.n	8013e9e <_scanf_float+0x8e>
 80141bc:	0801857c 	.word	0x0801857c

080141c0 <_puts_r>:
 80141c0:	b570      	push	{r4, r5, r6, lr}
 80141c2:	460e      	mov	r6, r1
 80141c4:	4605      	mov	r5, r0
 80141c6:	b118      	cbz	r0, 80141d0 <_puts_r+0x10>
 80141c8:	6983      	ldr	r3, [r0, #24]
 80141ca:	b90b      	cbnz	r3, 80141d0 <_puts_r+0x10>
 80141cc:	f001 fe8c 	bl	8015ee8 <__sinit>
 80141d0:	69ab      	ldr	r3, [r5, #24]
 80141d2:	68ac      	ldr	r4, [r5, #8]
 80141d4:	b913      	cbnz	r3, 80141dc <_puts_r+0x1c>
 80141d6:	4628      	mov	r0, r5
 80141d8:	f001 fe86 	bl	8015ee8 <__sinit>
 80141dc:	4b23      	ldr	r3, [pc, #140]	; (801426c <_puts_r+0xac>)
 80141de:	429c      	cmp	r4, r3
 80141e0:	d117      	bne.n	8014212 <_puts_r+0x52>
 80141e2:	686c      	ldr	r4, [r5, #4]
 80141e4:	89a3      	ldrh	r3, [r4, #12]
 80141e6:	071b      	lsls	r3, r3, #28
 80141e8:	d51d      	bpl.n	8014226 <_puts_r+0x66>
 80141ea:	6923      	ldr	r3, [r4, #16]
 80141ec:	b1db      	cbz	r3, 8014226 <_puts_r+0x66>
 80141ee:	3e01      	subs	r6, #1
 80141f0:	68a3      	ldr	r3, [r4, #8]
 80141f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80141f6:	3b01      	subs	r3, #1
 80141f8:	60a3      	str	r3, [r4, #8]
 80141fa:	b9e9      	cbnz	r1, 8014238 <_puts_r+0x78>
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	da2e      	bge.n	801425e <_puts_r+0x9e>
 8014200:	4622      	mov	r2, r4
 8014202:	210a      	movs	r1, #10
 8014204:	4628      	mov	r0, r5
 8014206:	f000 fee5 	bl	8014fd4 <__swbuf_r>
 801420a:	3001      	adds	r0, #1
 801420c:	d011      	beq.n	8014232 <_puts_r+0x72>
 801420e:	200a      	movs	r0, #10
 8014210:	e011      	b.n	8014236 <_puts_r+0x76>
 8014212:	4b17      	ldr	r3, [pc, #92]	; (8014270 <_puts_r+0xb0>)
 8014214:	429c      	cmp	r4, r3
 8014216:	d101      	bne.n	801421c <_puts_r+0x5c>
 8014218:	68ac      	ldr	r4, [r5, #8]
 801421a:	e7e3      	b.n	80141e4 <_puts_r+0x24>
 801421c:	4b15      	ldr	r3, [pc, #84]	; (8014274 <_puts_r+0xb4>)
 801421e:	429c      	cmp	r4, r3
 8014220:	bf08      	it	eq
 8014222:	68ec      	ldreq	r4, [r5, #12]
 8014224:	e7de      	b.n	80141e4 <_puts_r+0x24>
 8014226:	4621      	mov	r1, r4
 8014228:	4628      	mov	r0, r5
 801422a:	f000 ff25 	bl	8015078 <__swsetup_r>
 801422e:	2800      	cmp	r0, #0
 8014230:	d0dd      	beq.n	80141ee <_puts_r+0x2e>
 8014232:	f04f 30ff 	mov.w	r0, #4294967295
 8014236:	bd70      	pop	{r4, r5, r6, pc}
 8014238:	2b00      	cmp	r3, #0
 801423a:	da04      	bge.n	8014246 <_puts_r+0x86>
 801423c:	69a2      	ldr	r2, [r4, #24]
 801423e:	429a      	cmp	r2, r3
 8014240:	dc06      	bgt.n	8014250 <_puts_r+0x90>
 8014242:	290a      	cmp	r1, #10
 8014244:	d004      	beq.n	8014250 <_puts_r+0x90>
 8014246:	6823      	ldr	r3, [r4, #0]
 8014248:	1c5a      	adds	r2, r3, #1
 801424a:	6022      	str	r2, [r4, #0]
 801424c:	7019      	strb	r1, [r3, #0]
 801424e:	e7cf      	b.n	80141f0 <_puts_r+0x30>
 8014250:	4622      	mov	r2, r4
 8014252:	4628      	mov	r0, r5
 8014254:	f000 febe 	bl	8014fd4 <__swbuf_r>
 8014258:	3001      	adds	r0, #1
 801425a:	d1c9      	bne.n	80141f0 <_puts_r+0x30>
 801425c:	e7e9      	b.n	8014232 <_puts_r+0x72>
 801425e:	6823      	ldr	r3, [r4, #0]
 8014260:	200a      	movs	r0, #10
 8014262:	1c5a      	adds	r2, r3, #1
 8014264:	6022      	str	r2, [r4, #0]
 8014266:	7018      	strb	r0, [r3, #0]
 8014268:	e7e5      	b.n	8014236 <_puts_r+0x76>
 801426a:	bf00      	nop
 801426c:	08018608 	.word	0x08018608
 8014270:	08018628 	.word	0x08018628
 8014274:	080185e8 	.word	0x080185e8

08014278 <puts>:
 8014278:	4b02      	ldr	r3, [pc, #8]	; (8014284 <puts+0xc>)
 801427a:	4601      	mov	r1, r0
 801427c:	6818      	ldr	r0, [r3, #0]
 801427e:	f7ff bf9f 	b.w	80141c0 <_puts_r>
 8014282:	bf00      	nop
 8014284:	200001a8 	.word	0x200001a8

08014288 <nanf>:
 8014288:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014290 <nanf+0x8>
 801428c:	4770      	bx	lr
 801428e:	bf00      	nop
 8014290:	7fc00000 	.word	0x7fc00000

08014294 <siprintf>:
 8014294:	b40e      	push	{r1, r2, r3}
 8014296:	b500      	push	{lr}
 8014298:	b09c      	sub	sp, #112	; 0x70
 801429a:	ab1d      	add	r3, sp, #116	; 0x74
 801429c:	9002      	str	r0, [sp, #8]
 801429e:	9006      	str	r0, [sp, #24]
 80142a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80142a4:	4809      	ldr	r0, [pc, #36]	; (80142cc <siprintf+0x38>)
 80142a6:	9107      	str	r1, [sp, #28]
 80142a8:	9104      	str	r1, [sp, #16]
 80142aa:	4909      	ldr	r1, [pc, #36]	; (80142d0 <siprintf+0x3c>)
 80142ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80142b0:	9105      	str	r1, [sp, #20]
 80142b2:	6800      	ldr	r0, [r0, #0]
 80142b4:	9301      	str	r3, [sp, #4]
 80142b6:	a902      	add	r1, sp, #8
 80142b8:	f002 ff68 	bl	801718c <_svfiprintf_r>
 80142bc:	9b02      	ldr	r3, [sp, #8]
 80142be:	2200      	movs	r2, #0
 80142c0:	701a      	strb	r2, [r3, #0]
 80142c2:	b01c      	add	sp, #112	; 0x70
 80142c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80142c8:	b003      	add	sp, #12
 80142ca:	4770      	bx	lr
 80142cc:	200001a8 	.word	0x200001a8
 80142d0:	ffff0208 	.word	0xffff0208

080142d4 <sulp>:
 80142d4:	b570      	push	{r4, r5, r6, lr}
 80142d6:	4604      	mov	r4, r0
 80142d8:	460d      	mov	r5, r1
 80142da:	4616      	mov	r6, r2
 80142dc:	ec45 4b10 	vmov	d0, r4, r5
 80142e0:	f002 fd10 	bl	8016d04 <__ulp>
 80142e4:	b17e      	cbz	r6, 8014306 <sulp+0x32>
 80142e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80142ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	dd09      	ble.n	8014306 <sulp+0x32>
 80142f2:	051b      	lsls	r3, r3, #20
 80142f4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80142f8:	2000      	movs	r0, #0
 80142fa:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80142fe:	ec41 0b17 	vmov	d7, r0, r1
 8014302:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014306:	bd70      	pop	{r4, r5, r6, pc}

08014308 <_strtod_l>:
 8014308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801430c:	ed2d 8b0c 	vpush	{d8-d13}
 8014310:	4698      	mov	r8, r3
 8014312:	b09d      	sub	sp, #116	; 0x74
 8014314:	2300      	movs	r3, #0
 8014316:	4604      	mov	r4, r0
 8014318:	4640      	mov	r0, r8
 801431a:	460e      	mov	r6, r1
 801431c:	9214      	str	r2, [sp, #80]	; 0x50
 801431e:	9318      	str	r3, [sp, #96]	; 0x60
 8014320:	f002 f995 	bl	801664e <__localeconv_l>
 8014324:	4681      	mov	r9, r0
 8014326:	6800      	ldr	r0, [r0, #0]
 8014328:	f7eb ff8a 	bl	8000240 <strlen>
 801432c:	f04f 0a00 	mov.w	sl, #0
 8014330:	4607      	mov	r7, r0
 8014332:	f04f 0b00 	mov.w	fp, #0
 8014336:	9617      	str	r6, [sp, #92]	; 0x5c
 8014338:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801433a:	781a      	ldrb	r2, [r3, #0]
 801433c:	2a0d      	cmp	r2, #13
 801433e:	d834      	bhi.n	80143aa <_strtod_l+0xa2>
 8014340:	2a09      	cmp	r2, #9
 8014342:	d238      	bcs.n	80143b6 <_strtod_l+0xae>
 8014344:	2a00      	cmp	r2, #0
 8014346:	d040      	beq.n	80143ca <_strtod_l+0xc2>
 8014348:	2300      	movs	r3, #0
 801434a:	930d      	str	r3, [sp, #52]	; 0x34
 801434c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801434e:	782b      	ldrb	r3, [r5, #0]
 8014350:	2b30      	cmp	r3, #48	; 0x30
 8014352:	f040 80b3 	bne.w	80144bc <_strtod_l+0x1b4>
 8014356:	786b      	ldrb	r3, [r5, #1]
 8014358:	2b58      	cmp	r3, #88	; 0x58
 801435a:	d001      	beq.n	8014360 <_strtod_l+0x58>
 801435c:	2b78      	cmp	r3, #120	; 0x78
 801435e:	d169      	bne.n	8014434 <_strtod_l+0x12c>
 8014360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014362:	9301      	str	r3, [sp, #4]
 8014364:	ab18      	add	r3, sp, #96	; 0x60
 8014366:	9300      	str	r3, [sp, #0]
 8014368:	f8cd 8008 	str.w	r8, [sp, #8]
 801436c:	ab19      	add	r3, sp, #100	; 0x64
 801436e:	4a8f      	ldr	r2, [pc, #572]	; (80145ac <_strtod_l+0x2a4>)
 8014370:	a917      	add	r1, sp, #92	; 0x5c
 8014372:	4620      	mov	r0, r4
 8014374:	f001 fe91 	bl	801609a <__gethex>
 8014378:	f010 0607 	ands.w	r6, r0, #7
 801437c:	4607      	mov	r7, r0
 801437e:	d005      	beq.n	801438c <_strtod_l+0x84>
 8014380:	2e06      	cmp	r6, #6
 8014382:	d12c      	bne.n	80143de <_strtod_l+0xd6>
 8014384:	3501      	adds	r5, #1
 8014386:	2300      	movs	r3, #0
 8014388:	9517      	str	r5, [sp, #92]	; 0x5c
 801438a:	930d      	str	r3, [sp, #52]	; 0x34
 801438c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801438e:	2b00      	cmp	r3, #0
 8014390:	f040 855e 	bne.w	8014e50 <_strtod_l+0xb48>
 8014394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014396:	b1eb      	cbz	r3, 80143d4 <_strtod_l+0xcc>
 8014398:	ec4b ab17 	vmov	d7, sl, fp
 801439c:	eeb1 0b47 	vneg.f64	d0, d7
 80143a0:	b01d      	add	sp, #116	; 0x74
 80143a2:	ecbd 8b0c 	vpop	{d8-d13}
 80143a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143aa:	2a2b      	cmp	r2, #43	; 0x2b
 80143ac:	d015      	beq.n	80143da <_strtod_l+0xd2>
 80143ae:	2a2d      	cmp	r2, #45	; 0x2d
 80143b0:	d004      	beq.n	80143bc <_strtod_l+0xb4>
 80143b2:	2a20      	cmp	r2, #32
 80143b4:	d1c8      	bne.n	8014348 <_strtod_l+0x40>
 80143b6:	3301      	adds	r3, #1
 80143b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80143ba:	e7bd      	b.n	8014338 <_strtod_l+0x30>
 80143bc:	2201      	movs	r2, #1
 80143be:	920d      	str	r2, [sp, #52]	; 0x34
 80143c0:	1c5a      	adds	r2, r3, #1
 80143c2:	9217      	str	r2, [sp, #92]	; 0x5c
 80143c4:	785b      	ldrb	r3, [r3, #1]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d1c0      	bne.n	801434c <_strtod_l+0x44>
 80143ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80143cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	f040 853c 	bne.w	8014e4c <_strtod_l+0xb44>
 80143d4:	ec4b ab10 	vmov	d0, sl, fp
 80143d8:	e7e2      	b.n	80143a0 <_strtod_l+0x98>
 80143da:	2200      	movs	r2, #0
 80143dc:	e7ef      	b.n	80143be <_strtod_l+0xb6>
 80143de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80143e0:	b13a      	cbz	r2, 80143f2 <_strtod_l+0xea>
 80143e2:	2135      	movs	r1, #53	; 0x35
 80143e4:	a81a      	add	r0, sp, #104	; 0x68
 80143e6:	f002 fd86 	bl	8016ef6 <__copybits>
 80143ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 80143ec:	4620      	mov	r0, r4
 80143ee:	f002 f9f1 	bl	80167d4 <_Bfree>
 80143f2:	3e01      	subs	r6, #1
 80143f4:	2e04      	cmp	r6, #4
 80143f6:	d806      	bhi.n	8014406 <_strtod_l+0xfe>
 80143f8:	e8df f006 	tbb	[pc, r6]
 80143fc:	1714030a 	.word	0x1714030a
 8014400:	0a          	.byte	0x0a
 8014401:	00          	.byte	0x00
 8014402:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8014406:	073b      	lsls	r3, r7, #28
 8014408:	d5c0      	bpl.n	801438c <_strtod_l+0x84>
 801440a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801440e:	e7bd      	b.n	801438c <_strtod_l+0x84>
 8014410:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8014414:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014416:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801441a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801441e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014422:	e7f0      	b.n	8014406 <_strtod_l+0xfe>
 8014424:	f8df b188 	ldr.w	fp, [pc, #392]	; 80145b0 <_strtod_l+0x2a8>
 8014428:	e7ed      	b.n	8014406 <_strtod_l+0xfe>
 801442a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801442e:	f04f 3aff 	mov.w	sl, #4294967295
 8014432:	e7e8      	b.n	8014406 <_strtod_l+0xfe>
 8014434:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014436:	1c5a      	adds	r2, r3, #1
 8014438:	9217      	str	r2, [sp, #92]	; 0x5c
 801443a:	785b      	ldrb	r3, [r3, #1]
 801443c:	2b30      	cmp	r3, #48	; 0x30
 801443e:	d0f9      	beq.n	8014434 <_strtod_l+0x12c>
 8014440:	2b00      	cmp	r3, #0
 8014442:	d0a3      	beq.n	801438c <_strtod_l+0x84>
 8014444:	2301      	movs	r3, #1
 8014446:	930a      	str	r3, [sp, #40]	; 0x28
 8014448:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801444a:	930c      	str	r3, [sp, #48]	; 0x30
 801444c:	2300      	movs	r3, #0
 801444e:	9306      	str	r3, [sp, #24]
 8014450:	9308      	str	r3, [sp, #32]
 8014452:	461d      	mov	r5, r3
 8014454:	220a      	movs	r2, #10
 8014456:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014458:	f890 8000 	ldrb.w	r8, [r0]
 801445c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8014460:	b2d9      	uxtb	r1, r3
 8014462:	2909      	cmp	r1, #9
 8014464:	d92c      	bls.n	80144c0 <_strtod_l+0x1b8>
 8014466:	463a      	mov	r2, r7
 8014468:	f8d9 1000 	ldr.w	r1, [r9]
 801446c:	f002 ffd9 	bl	8017422 <strncmp>
 8014470:	2800      	cmp	r0, #0
 8014472:	d035      	beq.n	80144e0 <_strtod_l+0x1d8>
 8014474:	2000      	movs	r0, #0
 8014476:	4642      	mov	r2, r8
 8014478:	462b      	mov	r3, r5
 801447a:	4601      	mov	r1, r0
 801447c:	9004      	str	r0, [sp, #16]
 801447e:	2a65      	cmp	r2, #101	; 0x65
 8014480:	d001      	beq.n	8014486 <_strtod_l+0x17e>
 8014482:	2a45      	cmp	r2, #69	; 0x45
 8014484:	d117      	bne.n	80144b6 <_strtod_l+0x1ae>
 8014486:	b923      	cbnz	r3, 8014492 <_strtod_l+0x18a>
 8014488:	b910      	cbnz	r0, 8014490 <_strtod_l+0x188>
 801448a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801448c:	2b00      	cmp	r3, #0
 801448e:	d09c      	beq.n	80143ca <_strtod_l+0xc2>
 8014490:	2300      	movs	r3, #0
 8014492:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014494:	1c72      	adds	r2, r6, #1
 8014496:	9217      	str	r2, [sp, #92]	; 0x5c
 8014498:	7872      	ldrb	r2, [r6, #1]
 801449a:	2a2b      	cmp	r2, #43	; 0x2b
 801449c:	f000 8082 	beq.w	80145a4 <_strtod_l+0x29c>
 80144a0:	2a2d      	cmp	r2, #45	; 0x2d
 80144a2:	d079      	beq.n	8014598 <_strtod_l+0x290>
 80144a4:	f04f 0e00 	mov.w	lr, #0
 80144a8:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80144ac:	f1bc 0f09 	cmp.w	ip, #9
 80144b0:	f240 8086 	bls.w	80145c0 <_strtod_l+0x2b8>
 80144b4:	9617      	str	r6, [sp, #92]	; 0x5c
 80144b6:	f04f 0800 	mov.w	r8, #0
 80144ba:	e0a8      	b.n	801460e <_strtod_l+0x306>
 80144bc:	2300      	movs	r3, #0
 80144be:	e7c2      	b.n	8014446 <_strtod_l+0x13e>
 80144c0:	2d08      	cmp	r5, #8
 80144c2:	bfd5      	itete	le
 80144c4:	9908      	ldrle	r1, [sp, #32]
 80144c6:	9906      	ldrgt	r1, [sp, #24]
 80144c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80144cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80144d0:	f100 0001 	add.w	r0, r0, #1
 80144d4:	bfd4      	ite	le
 80144d6:	9308      	strle	r3, [sp, #32]
 80144d8:	9306      	strgt	r3, [sp, #24]
 80144da:	3501      	adds	r5, #1
 80144dc:	9017      	str	r0, [sp, #92]	; 0x5c
 80144de:	e7ba      	b.n	8014456 <_strtod_l+0x14e>
 80144e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80144e2:	19da      	adds	r2, r3, r7
 80144e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80144e6:	5dda      	ldrb	r2, [r3, r7]
 80144e8:	2d00      	cmp	r5, #0
 80144ea:	d038      	beq.n	801455e <_strtod_l+0x256>
 80144ec:	4601      	mov	r1, r0
 80144ee:	462b      	mov	r3, r5
 80144f0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80144f4:	2f09      	cmp	r7, #9
 80144f6:	d913      	bls.n	8014520 <_strtod_l+0x218>
 80144f8:	2701      	movs	r7, #1
 80144fa:	9704      	str	r7, [sp, #16]
 80144fc:	e7bf      	b.n	801447e <_strtod_l+0x176>
 80144fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014500:	1c5a      	adds	r2, r3, #1
 8014502:	9217      	str	r2, [sp, #92]	; 0x5c
 8014504:	785a      	ldrb	r2, [r3, #1]
 8014506:	3001      	adds	r0, #1
 8014508:	2a30      	cmp	r2, #48	; 0x30
 801450a:	d0f8      	beq.n	80144fe <_strtod_l+0x1f6>
 801450c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014510:	2b08      	cmp	r3, #8
 8014512:	f200 84a2 	bhi.w	8014e5a <_strtod_l+0xb52>
 8014516:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014518:	930c      	str	r3, [sp, #48]	; 0x30
 801451a:	4601      	mov	r1, r0
 801451c:	2000      	movs	r0, #0
 801451e:	4603      	mov	r3, r0
 8014520:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8014524:	f100 0701 	add.w	r7, r0, #1
 8014528:	d013      	beq.n	8014552 <_strtod_l+0x24a>
 801452a:	4439      	add	r1, r7
 801452c:	eb00 0e03 	add.w	lr, r0, r3
 8014530:	461f      	mov	r7, r3
 8014532:	f04f 0c0a 	mov.w	ip, #10
 8014536:	45be      	cmp	lr, r7
 8014538:	d113      	bne.n	8014562 <_strtod_l+0x25a>
 801453a:	181f      	adds	r7, r3, r0
 801453c:	2f08      	cmp	r7, #8
 801453e:	f103 0301 	add.w	r3, r3, #1
 8014542:	4403      	add	r3, r0
 8014544:	dc1d      	bgt.n	8014582 <_strtod_l+0x27a>
 8014546:	9a08      	ldr	r2, [sp, #32]
 8014548:	200a      	movs	r0, #10
 801454a:	fb00 8202 	mla	r2, r0, r2, r8
 801454e:	9208      	str	r2, [sp, #32]
 8014550:	2700      	movs	r7, #0
 8014552:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014554:	1c50      	adds	r0, r2, #1
 8014556:	9017      	str	r0, [sp, #92]	; 0x5c
 8014558:	7852      	ldrb	r2, [r2, #1]
 801455a:	4638      	mov	r0, r7
 801455c:	e7c8      	b.n	80144f0 <_strtod_l+0x1e8>
 801455e:	4628      	mov	r0, r5
 8014560:	e7d2      	b.n	8014508 <_strtod_l+0x200>
 8014562:	2f08      	cmp	r7, #8
 8014564:	f107 0701 	add.w	r7, r7, #1
 8014568:	dc04      	bgt.n	8014574 <_strtod_l+0x26c>
 801456a:	9a08      	ldr	r2, [sp, #32]
 801456c:	fb0c f202 	mul.w	r2, ip, r2
 8014570:	9208      	str	r2, [sp, #32]
 8014572:	e7e0      	b.n	8014536 <_strtod_l+0x22e>
 8014574:	2f10      	cmp	r7, #16
 8014576:	bfde      	ittt	le
 8014578:	9a06      	ldrle	r2, [sp, #24]
 801457a:	fb0c f202 	mulle.w	r2, ip, r2
 801457e:	9206      	strle	r2, [sp, #24]
 8014580:	e7d9      	b.n	8014536 <_strtod_l+0x22e>
 8014582:	2b10      	cmp	r3, #16
 8014584:	bfdf      	itttt	le
 8014586:	9a06      	ldrle	r2, [sp, #24]
 8014588:	200a      	movle	r0, #10
 801458a:	fb00 8202 	mlale	r2, r0, r2, r8
 801458e:	9206      	strle	r2, [sp, #24]
 8014590:	e7de      	b.n	8014550 <_strtod_l+0x248>
 8014592:	2301      	movs	r3, #1
 8014594:	9304      	str	r3, [sp, #16]
 8014596:	e777      	b.n	8014488 <_strtod_l+0x180>
 8014598:	f04f 0e01 	mov.w	lr, #1
 801459c:	1cb2      	adds	r2, r6, #2
 801459e:	9217      	str	r2, [sp, #92]	; 0x5c
 80145a0:	78b2      	ldrb	r2, [r6, #2]
 80145a2:	e781      	b.n	80144a8 <_strtod_l+0x1a0>
 80145a4:	f04f 0e00 	mov.w	lr, #0
 80145a8:	e7f8      	b.n	801459c <_strtod_l+0x294>
 80145aa:	bf00      	nop
 80145ac:	08018584 	.word	0x08018584
 80145b0:	7ff00000 	.word	0x7ff00000
 80145b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80145b6:	f102 0c01 	add.w	ip, r2, #1
 80145ba:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80145be:	7852      	ldrb	r2, [r2, #1]
 80145c0:	2a30      	cmp	r2, #48	; 0x30
 80145c2:	d0f7      	beq.n	80145b4 <_strtod_l+0x2ac>
 80145c4:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 80145c8:	f1bc 0f08 	cmp.w	ip, #8
 80145cc:	f63f af73 	bhi.w	80144b6 <_strtod_l+0x1ae>
 80145d0:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 80145d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80145d6:	920e      	str	r2, [sp, #56]	; 0x38
 80145d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80145da:	f102 0c01 	add.w	ip, r2, #1
 80145de:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80145e2:	7852      	ldrb	r2, [r2, #1]
 80145e4:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 80145e8:	f1b9 0f09 	cmp.w	r9, #9
 80145ec:	d939      	bls.n	8014662 <_strtod_l+0x35a>
 80145ee:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80145f0:	ebac 0c07 	sub.w	ip, ip, r7
 80145f4:	f1bc 0f08 	cmp.w	ip, #8
 80145f8:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 80145fc:	dc37      	bgt.n	801466e <_strtod_l+0x366>
 80145fe:	45e0      	cmp	r8, ip
 8014600:	bfa8      	it	ge
 8014602:	46e0      	movge	r8, ip
 8014604:	f1be 0f00 	cmp.w	lr, #0
 8014608:	d001      	beq.n	801460e <_strtod_l+0x306>
 801460a:	f1c8 0800 	rsb	r8, r8, #0
 801460e:	2b00      	cmp	r3, #0
 8014610:	d151      	bne.n	80146b6 <_strtod_l+0x3ae>
 8014612:	2800      	cmp	r0, #0
 8014614:	f47f aeba 	bne.w	801438c <_strtod_l+0x84>
 8014618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801461a:	2b00      	cmp	r3, #0
 801461c:	f47f aeb6 	bne.w	801438c <_strtod_l+0x84>
 8014620:	9b04      	ldr	r3, [sp, #16]
 8014622:	2b00      	cmp	r3, #0
 8014624:	f47f aed1 	bne.w	80143ca <_strtod_l+0xc2>
 8014628:	2a4e      	cmp	r2, #78	; 0x4e
 801462a:	d027      	beq.n	801467c <_strtod_l+0x374>
 801462c:	dc21      	bgt.n	8014672 <_strtod_l+0x36a>
 801462e:	2a49      	cmp	r2, #73	; 0x49
 8014630:	f47f aecb 	bne.w	80143ca <_strtod_l+0xc2>
 8014634:	499a      	ldr	r1, [pc, #616]	; (80148a0 <_strtod_l+0x598>)
 8014636:	a817      	add	r0, sp, #92	; 0x5c
 8014638:	f001 ff62 	bl	8016500 <__match>
 801463c:	2800      	cmp	r0, #0
 801463e:	f43f aec4 	beq.w	80143ca <_strtod_l+0xc2>
 8014642:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014644:	4997      	ldr	r1, [pc, #604]	; (80148a4 <_strtod_l+0x59c>)
 8014646:	3b01      	subs	r3, #1
 8014648:	a817      	add	r0, sp, #92	; 0x5c
 801464a:	9317      	str	r3, [sp, #92]	; 0x5c
 801464c:	f001 ff58 	bl	8016500 <__match>
 8014650:	b910      	cbnz	r0, 8014658 <_strtod_l+0x350>
 8014652:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014654:	3301      	adds	r3, #1
 8014656:	9317      	str	r3, [sp, #92]	; 0x5c
 8014658:	f8df b260 	ldr.w	fp, [pc, #608]	; 80148bc <_strtod_l+0x5b4>
 801465c:	f04f 0a00 	mov.w	sl, #0
 8014660:	e694      	b.n	801438c <_strtod_l+0x84>
 8014662:	270a      	movs	r7, #10
 8014664:	fb07 2808 	mla	r8, r7, r8, r2
 8014668:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 801466c:	e7b4      	b.n	80145d8 <_strtod_l+0x2d0>
 801466e:	46e0      	mov	r8, ip
 8014670:	e7c8      	b.n	8014604 <_strtod_l+0x2fc>
 8014672:	2a69      	cmp	r2, #105	; 0x69
 8014674:	d0de      	beq.n	8014634 <_strtod_l+0x32c>
 8014676:	2a6e      	cmp	r2, #110	; 0x6e
 8014678:	f47f aea7 	bne.w	80143ca <_strtod_l+0xc2>
 801467c:	498a      	ldr	r1, [pc, #552]	; (80148a8 <_strtod_l+0x5a0>)
 801467e:	a817      	add	r0, sp, #92	; 0x5c
 8014680:	f001 ff3e 	bl	8016500 <__match>
 8014684:	2800      	cmp	r0, #0
 8014686:	f43f aea0 	beq.w	80143ca <_strtod_l+0xc2>
 801468a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801468c:	781b      	ldrb	r3, [r3, #0]
 801468e:	2b28      	cmp	r3, #40	; 0x28
 8014690:	d10e      	bne.n	80146b0 <_strtod_l+0x3a8>
 8014692:	aa1a      	add	r2, sp, #104	; 0x68
 8014694:	4985      	ldr	r1, [pc, #532]	; (80148ac <_strtod_l+0x5a4>)
 8014696:	a817      	add	r0, sp, #92	; 0x5c
 8014698:	f001 ff46 	bl	8016528 <__hexnan>
 801469c:	2805      	cmp	r0, #5
 801469e:	d107      	bne.n	80146b0 <_strtod_l+0x3a8>
 80146a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80146a2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80146a6:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80146aa:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80146ae:	e66d      	b.n	801438c <_strtod_l+0x84>
 80146b0:	f8df b20c 	ldr.w	fp, [pc, #524]	; 80148c0 <_strtod_l+0x5b8>
 80146b4:	e7d2      	b.n	801465c <_strtod_l+0x354>
 80146b6:	eddd 7a08 	vldr	s15, [sp, #32]
 80146ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80146be:	eba8 0201 	sub.w	r2, r8, r1
 80146c2:	2d00      	cmp	r5, #0
 80146c4:	bf08      	it	eq
 80146c6:	461d      	moveq	r5, r3
 80146c8:	2b10      	cmp	r3, #16
 80146ca:	9204      	str	r2, [sp, #16]
 80146cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80146d0:	461a      	mov	r2, r3
 80146d2:	bfa8      	it	ge
 80146d4:	2210      	movge	r2, #16
 80146d6:	2b09      	cmp	r3, #9
 80146d8:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80146dc:	dc14      	bgt.n	8014708 <_strtod_l+0x400>
 80146de:	9904      	ldr	r1, [sp, #16]
 80146e0:	2900      	cmp	r1, #0
 80146e2:	f43f ae53 	beq.w	801438c <_strtod_l+0x84>
 80146e6:	9904      	ldr	r1, [sp, #16]
 80146e8:	dd72      	ble.n	80147d0 <_strtod_l+0x4c8>
 80146ea:	2916      	cmp	r1, #22
 80146ec:	dc5a      	bgt.n	80147a4 <_strtod_l+0x49c>
 80146ee:	4970      	ldr	r1, [pc, #448]	; (80148b0 <_strtod_l+0x5a8>)
 80146f0:	9b04      	ldr	r3, [sp, #16]
 80146f2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80146f6:	ed91 7b00 	vldr	d7, [r1]
 80146fa:	ec4b ab16 	vmov	d6, sl, fp
 80146fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014702:	ec5b ab17 	vmov	sl, fp, d7
 8014706:	e641      	b.n	801438c <_strtod_l+0x84>
 8014708:	4969      	ldr	r1, [pc, #420]	; (80148b0 <_strtod_l+0x5a8>)
 801470a:	eddd 7a06 	vldr	s15, [sp, #24]
 801470e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014712:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8014716:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801471a:	2b0f      	cmp	r3, #15
 801471c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014720:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014724:	ec5b ab17 	vmov	sl, fp, d7
 8014728:	ddd9      	ble.n	80146de <_strtod_l+0x3d6>
 801472a:	9904      	ldr	r1, [sp, #16]
 801472c:	1a9a      	subs	r2, r3, r2
 801472e:	440a      	add	r2, r1
 8014730:	2a00      	cmp	r2, #0
 8014732:	f340 8096 	ble.w	8014862 <_strtod_l+0x55a>
 8014736:	f012 000f 	ands.w	r0, r2, #15
 801473a:	d00a      	beq.n	8014752 <_strtod_l+0x44a>
 801473c:	495c      	ldr	r1, [pc, #368]	; (80148b0 <_strtod_l+0x5a8>)
 801473e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014742:	ed91 7b00 	vldr	d7, [r1]
 8014746:	ec4b ab16 	vmov	d6, sl, fp
 801474a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801474e:	ec5b ab17 	vmov	sl, fp, d7
 8014752:	f032 020f 	bics.w	r2, r2, #15
 8014756:	d072      	beq.n	801483e <_strtod_l+0x536>
 8014758:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801475c:	dd45      	ble.n	80147ea <_strtod_l+0x4e2>
 801475e:	2500      	movs	r5, #0
 8014760:	46a8      	mov	r8, r5
 8014762:	9506      	str	r5, [sp, #24]
 8014764:	46a9      	mov	r9, r5
 8014766:	2322      	movs	r3, #34	; 0x22
 8014768:	f8df b150 	ldr.w	fp, [pc, #336]	; 80148bc <_strtod_l+0x5b4>
 801476c:	6023      	str	r3, [r4, #0]
 801476e:	f04f 0a00 	mov.w	sl, #0
 8014772:	9b06      	ldr	r3, [sp, #24]
 8014774:	2b00      	cmp	r3, #0
 8014776:	f43f ae09 	beq.w	801438c <_strtod_l+0x84>
 801477a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801477c:	4620      	mov	r0, r4
 801477e:	f002 f829 	bl	80167d4 <_Bfree>
 8014782:	4649      	mov	r1, r9
 8014784:	4620      	mov	r0, r4
 8014786:	f002 f825 	bl	80167d4 <_Bfree>
 801478a:	4641      	mov	r1, r8
 801478c:	4620      	mov	r0, r4
 801478e:	f002 f821 	bl	80167d4 <_Bfree>
 8014792:	9906      	ldr	r1, [sp, #24]
 8014794:	4620      	mov	r0, r4
 8014796:	f002 f81d 	bl	80167d4 <_Bfree>
 801479a:	4629      	mov	r1, r5
 801479c:	4620      	mov	r0, r4
 801479e:	f002 f819 	bl	80167d4 <_Bfree>
 80147a2:	e5f3      	b.n	801438c <_strtod_l+0x84>
 80147a4:	9804      	ldr	r0, [sp, #16]
 80147a6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80147aa:	4281      	cmp	r1, r0
 80147ac:	dbbd      	blt.n	801472a <_strtod_l+0x422>
 80147ae:	4a40      	ldr	r2, [pc, #256]	; (80148b0 <_strtod_l+0x5a8>)
 80147b0:	f1c3 030f 	rsb	r3, r3, #15
 80147b4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80147b8:	ed91 7b00 	vldr	d7, [r1]
 80147bc:	ec4b ab16 	vmov	d6, sl, fp
 80147c0:	1ac3      	subs	r3, r0, r3
 80147c2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80147c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80147ca:	ed92 6b00 	vldr	d6, [r2]
 80147ce:	e796      	b.n	80146fe <_strtod_l+0x3f6>
 80147d0:	3116      	adds	r1, #22
 80147d2:	dbaa      	blt.n	801472a <_strtod_l+0x422>
 80147d4:	4936      	ldr	r1, [pc, #216]	; (80148b0 <_strtod_l+0x5a8>)
 80147d6:	9b04      	ldr	r3, [sp, #16]
 80147d8:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 80147dc:	ed91 7b00 	vldr	d7, [r1]
 80147e0:	ec4b ab16 	vmov	d6, sl, fp
 80147e4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80147e8:	e78b      	b.n	8014702 <_strtod_l+0x3fa>
 80147ea:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80147ee:	2000      	movs	r0, #0
 80147f0:	4e30      	ldr	r6, [pc, #192]	; (80148b4 <_strtod_l+0x5ac>)
 80147f2:	1112      	asrs	r2, r2, #4
 80147f4:	4601      	mov	r1, r0
 80147f6:	2a01      	cmp	r2, #1
 80147f8:	dc23      	bgt.n	8014842 <_strtod_l+0x53a>
 80147fa:	b108      	cbz	r0, 8014800 <_strtod_l+0x4f8>
 80147fc:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8014800:	4a2c      	ldr	r2, [pc, #176]	; (80148b4 <_strtod_l+0x5ac>)
 8014802:	482d      	ldr	r0, [pc, #180]	; (80148b8 <_strtod_l+0x5b0>)
 8014804:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8014808:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801480c:	ed91 7b00 	vldr	d7, [r1]
 8014810:	ec4b ab16 	vmov	d6, sl, fp
 8014814:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014818:	ed8d 7b06 	vstr	d7, [sp, #24]
 801481c:	9907      	ldr	r1, [sp, #28]
 801481e:	4a27      	ldr	r2, [pc, #156]	; (80148bc <_strtod_l+0x5b4>)
 8014820:	400a      	ands	r2, r1
 8014822:	4282      	cmp	r2, r0
 8014824:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8014828:	d899      	bhi.n	801475e <_strtod_l+0x456>
 801482a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801482e:	4282      	cmp	r2, r0
 8014830:	bf86      	itte	hi
 8014832:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 80148c4 <_strtod_l+0x5bc>
 8014836:	f04f 3aff 	movhi.w	sl, #4294967295
 801483a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 801483e:	2700      	movs	r7, #0
 8014840:	e070      	b.n	8014924 <_strtod_l+0x61c>
 8014842:	07d7      	lsls	r7, r2, #31
 8014844:	d50a      	bpl.n	801485c <_strtod_l+0x554>
 8014846:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 801484a:	ed90 7b00 	vldr	d7, [r0]
 801484e:	ed9d 6b06 	vldr	d6, [sp, #24]
 8014852:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014856:	ed8d 7b06 	vstr	d7, [sp, #24]
 801485a:	2001      	movs	r0, #1
 801485c:	3101      	adds	r1, #1
 801485e:	1052      	asrs	r2, r2, #1
 8014860:	e7c9      	b.n	80147f6 <_strtod_l+0x4ee>
 8014862:	d0ec      	beq.n	801483e <_strtod_l+0x536>
 8014864:	4252      	negs	r2, r2
 8014866:	f012 000f 	ands.w	r0, r2, #15
 801486a:	d00a      	beq.n	8014882 <_strtod_l+0x57a>
 801486c:	4910      	ldr	r1, [pc, #64]	; (80148b0 <_strtod_l+0x5a8>)
 801486e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014872:	ed91 7b00 	vldr	d7, [r1]
 8014876:	ec4b ab16 	vmov	d6, sl, fp
 801487a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801487e:	ec5b ab17 	vmov	sl, fp, d7
 8014882:	1112      	asrs	r2, r2, #4
 8014884:	d0db      	beq.n	801483e <_strtod_l+0x536>
 8014886:	2a1f      	cmp	r2, #31
 8014888:	dd1e      	ble.n	80148c8 <_strtod_l+0x5c0>
 801488a:	2500      	movs	r5, #0
 801488c:	46a8      	mov	r8, r5
 801488e:	9506      	str	r5, [sp, #24]
 8014890:	46a9      	mov	r9, r5
 8014892:	2322      	movs	r3, #34	; 0x22
 8014894:	f04f 0a00 	mov.w	sl, #0
 8014898:	f04f 0b00 	mov.w	fp, #0
 801489c:	6023      	str	r3, [r4, #0]
 801489e:	e768      	b.n	8014772 <_strtod_l+0x46a>
 80148a0:	0801854d 	.word	0x0801854d
 80148a4:	080185db 	.word	0x080185db
 80148a8:	08018555 	.word	0x08018555
 80148ac:	08018598 	.word	0x08018598
 80148b0:	08018680 	.word	0x08018680
 80148b4:	08018658 	.word	0x08018658
 80148b8:	7ca00000 	.word	0x7ca00000
 80148bc:	7ff00000 	.word	0x7ff00000
 80148c0:	fff80000 	.word	0xfff80000
 80148c4:	7fefffff 	.word	0x7fefffff
 80148c8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80148cc:	f012 0710 	ands.w	r7, r2, #16
 80148d0:	49ab      	ldr	r1, [pc, #684]	; (8014b80 <_strtod_l+0x878>)
 80148d2:	bf18      	it	ne
 80148d4:	276a      	movne	r7, #106	; 0x6a
 80148d6:	2000      	movs	r0, #0
 80148d8:	2a00      	cmp	r2, #0
 80148da:	f300 8113 	bgt.w	8014b04 <_strtod_l+0x7fc>
 80148de:	b108      	cbz	r0, 80148e4 <_strtod_l+0x5dc>
 80148e0:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80148e4:	b1bf      	cbz	r7, 8014916 <_strtod_l+0x60e>
 80148e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80148ea:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80148ee:	2a00      	cmp	r2, #0
 80148f0:	4659      	mov	r1, fp
 80148f2:	dd10      	ble.n	8014916 <_strtod_l+0x60e>
 80148f4:	2a1f      	cmp	r2, #31
 80148f6:	f340 8113 	ble.w	8014b20 <_strtod_l+0x818>
 80148fa:	2a34      	cmp	r2, #52	; 0x34
 80148fc:	bfde      	ittt	le
 80148fe:	3a20      	suble	r2, #32
 8014900:	f04f 30ff 	movle.w	r0, #4294967295
 8014904:	fa00 f202 	lslle.w	r2, r0, r2
 8014908:	f04f 0a00 	mov.w	sl, #0
 801490c:	bfcc      	ite	gt
 801490e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014912:	ea02 0b01 	andle.w	fp, r2, r1
 8014916:	ec4b ab17 	vmov	d7, sl, fp
 801491a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801491e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014922:	d0b2      	beq.n	801488a <_strtod_l+0x582>
 8014924:	9a08      	ldr	r2, [sp, #32]
 8014926:	9200      	str	r2, [sp, #0]
 8014928:	990c      	ldr	r1, [sp, #48]	; 0x30
 801492a:	462a      	mov	r2, r5
 801492c:	4620      	mov	r0, r4
 801492e:	f001 ffa3 	bl	8016878 <__s2b>
 8014932:	9006      	str	r0, [sp, #24]
 8014934:	2800      	cmp	r0, #0
 8014936:	f43f af12 	beq.w	801475e <_strtod_l+0x456>
 801493a:	9a04      	ldr	r2, [sp, #16]
 801493c:	9b04      	ldr	r3, [sp, #16]
 801493e:	2a00      	cmp	r2, #0
 8014940:	f1c3 0300 	rsb	r3, r3, #0
 8014944:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8014b68 <_strtod_l+0x860>
 8014948:	bfa8      	it	ge
 801494a:	2300      	movge	r3, #0
 801494c:	ed9f ab88 	vldr	d10, [pc, #544]	; 8014b70 <_strtod_l+0x868>
 8014950:	ed9f bb89 	vldr	d11, [pc, #548]	; 8014b78 <_strtod_l+0x870>
 8014954:	930e      	str	r3, [sp, #56]	; 0x38
 8014956:	2500      	movs	r5, #0
 8014958:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801495c:	9310      	str	r3, [sp, #64]	; 0x40
 801495e:	46a8      	mov	r8, r5
 8014960:	9b06      	ldr	r3, [sp, #24]
 8014962:	4620      	mov	r0, r4
 8014964:	6859      	ldr	r1, [r3, #4]
 8014966:	f001 ff01 	bl	801676c <_Balloc>
 801496a:	4681      	mov	r9, r0
 801496c:	2800      	cmp	r0, #0
 801496e:	f43f aefa 	beq.w	8014766 <_strtod_l+0x45e>
 8014972:	9b06      	ldr	r3, [sp, #24]
 8014974:	691a      	ldr	r2, [r3, #16]
 8014976:	3202      	adds	r2, #2
 8014978:	f103 010c 	add.w	r1, r3, #12
 801497c:	0092      	lsls	r2, r2, #2
 801497e:	300c      	adds	r0, #12
 8014980:	f7fe fdf8 	bl	8013574 <memcpy>
 8014984:	aa1a      	add	r2, sp, #104	; 0x68
 8014986:	a919      	add	r1, sp, #100	; 0x64
 8014988:	ec4b ab10 	vmov	d0, sl, fp
 801498c:	4620      	mov	r0, r4
 801498e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8014992:	f002 fa2d 	bl	8016df0 <__d2b>
 8014996:	9018      	str	r0, [sp, #96]	; 0x60
 8014998:	2800      	cmp	r0, #0
 801499a:	f43f aee4 	beq.w	8014766 <_strtod_l+0x45e>
 801499e:	2101      	movs	r1, #1
 80149a0:	4620      	mov	r0, r4
 80149a2:	f001 fff5 	bl	8016990 <__i2b>
 80149a6:	4680      	mov	r8, r0
 80149a8:	2800      	cmp	r0, #0
 80149aa:	f43f aedc 	beq.w	8014766 <_strtod_l+0x45e>
 80149ae:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80149b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80149b2:	2e00      	cmp	r6, #0
 80149b4:	bfb1      	iteee	lt
 80149b6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 80149b8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80149ba:	9810      	ldrge	r0, [sp, #64]	; 0x40
 80149bc:	18f3      	addge	r3, r6, r3
 80149be:	bfba      	itte	lt
 80149c0:	1b98      	sublt	r0, r3, r6
 80149c2:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80149c4:	9308      	strge	r3, [sp, #32]
 80149c6:	eba6 0607 	sub.w	r6, r6, r7
 80149ca:	bfb8      	it	lt
 80149cc:	9308      	strlt	r3, [sp, #32]
 80149ce:	4416      	add	r6, r2
 80149d0:	4b6c      	ldr	r3, [pc, #432]	; (8014b84 <_strtod_l+0x87c>)
 80149d2:	3e01      	subs	r6, #1
 80149d4:	429e      	cmp	r6, r3
 80149d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80149da:	f280 80b4 	bge.w	8014b46 <_strtod_l+0x83e>
 80149de:	1b9b      	subs	r3, r3, r6
 80149e0:	2b1f      	cmp	r3, #31
 80149e2:	eba2 0203 	sub.w	r2, r2, r3
 80149e6:	f04f 0101 	mov.w	r1, #1
 80149ea:	f300 80a0 	bgt.w	8014b2e <_strtod_l+0x826>
 80149ee:	fa01 f303 	lsl.w	r3, r1, r3
 80149f2:	9311      	str	r3, [sp, #68]	; 0x44
 80149f4:	2300      	movs	r3, #0
 80149f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80149f8:	9b08      	ldr	r3, [sp, #32]
 80149fa:	4413      	add	r3, r2
 80149fc:	4402      	add	r2, r0
 80149fe:	18be      	adds	r6, r7, r2
 8014a00:	9a08      	ldr	r2, [sp, #32]
 8014a02:	429a      	cmp	r2, r3
 8014a04:	bfa8      	it	ge
 8014a06:	461a      	movge	r2, r3
 8014a08:	42b2      	cmp	r2, r6
 8014a0a:	bfa8      	it	ge
 8014a0c:	4632      	movge	r2, r6
 8014a0e:	2a00      	cmp	r2, #0
 8014a10:	dd04      	ble.n	8014a1c <_strtod_l+0x714>
 8014a12:	9908      	ldr	r1, [sp, #32]
 8014a14:	1a9b      	subs	r3, r3, r2
 8014a16:	1ab6      	subs	r6, r6, r2
 8014a18:	1a8a      	subs	r2, r1, r2
 8014a1a:	9208      	str	r2, [sp, #32]
 8014a1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a1e:	b1c2      	cbz	r2, 8014a52 <_strtod_l+0x74a>
 8014a20:	4641      	mov	r1, r8
 8014a22:	4620      	mov	r0, r4
 8014a24:	9315      	str	r3, [sp, #84]	; 0x54
 8014a26:	f002 f853 	bl	8016ad0 <__pow5mult>
 8014a2a:	4680      	mov	r8, r0
 8014a2c:	2800      	cmp	r0, #0
 8014a2e:	f43f ae9a 	beq.w	8014766 <_strtod_l+0x45e>
 8014a32:	4601      	mov	r1, r0
 8014a34:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014a36:	4620      	mov	r0, r4
 8014a38:	f001 ffb3 	bl	80169a2 <__multiply>
 8014a3c:	900c      	str	r0, [sp, #48]	; 0x30
 8014a3e:	2800      	cmp	r0, #0
 8014a40:	f43f ae91 	beq.w	8014766 <_strtod_l+0x45e>
 8014a44:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014a46:	4620      	mov	r0, r4
 8014a48:	f001 fec4 	bl	80167d4 <_Bfree>
 8014a4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014a4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a50:	9218      	str	r2, [sp, #96]	; 0x60
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	dc7c      	bgt.n	8014b50 <_strtod_l+0x848>
 8014a56:	9b04      	ldr	r3, [sp, #16]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	dd08      	ble.n	8014a6e <_strtod_l+0x766>
 8014a5c:	4649      	mov	r1, r9
 8014a5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014a60:	4620      	mov	r0, r4
 8014a62:	f002 f835 	bl	8016ad0 <__pow5mult>
 8014a66:	4681      	mov	r9, r0
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	f43f ae7c 	beq.w	8014766 <_strtod_l+0x45e>
 8014a6e:	2e00      	cmp	r6, #0
 8014a70:	dd08      	ble.n	8014a84 <_strtod_l+0x77c>
 8014a72:	4649      	mov	r1, r9
 8014a74:	4632      	mov	r2, r6
 8014a76:	4620      	mov	r0, r4
 8014a78:	f002 f878 	bl	8016b6c <__lshift>
 8014a7c:	4681      	mov	r9, r0
 8014a7e:	2800      	cmp	r0, #0
 8014a80:	f43f ae71 	beq.w	8014766 <_strtod_l+0x45e>
 8014a84:	9b08      	ldr	r3, [sp, #32]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	dd08      	ble.n	8014a9c <_strtod_l+0x794>
 8014a8a:	4641      	mov	r1, r8
 8014a8c:	461a      	mov	r2, r3
 8014a8e:	4620      	mov	r0, r4
 8014a90:	f002 f86c 	bl	8016b6c <__lshift>
 8014a94:	4680      	mov	r8, r0
 8014a96:	2800      	cmp	r0, #0
 8014a98:	f43f ae65 	beq.w	8014766 <_strtod_l+0x45e>
 8014a9c:	464a      	mov	r2, r9
 8014a9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014aa0:	4620      	mov	r0, r4
 8014aa2:	f002 f8d1 	bl	8016c48 <__mdiff>
 8014aa6:	4605      	mov	r5, r0
 8014aa8:	2800      	cmp	r0, #0
 8014aaa:	f43f ae5c 	beq.w	8014766 <_strtod_l+0x45e>
 8014aae:	68c3      	ldr	r3, [r0, #12]
 8014ab0:	930c      	str	r3, [sp, #48]	; 0x30
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	60c3      	str	r3, [r0, #12]
 8014ab6:	4641      	mov	r1, r8
 8014ab8:	f002 f8ac 	bl	8016c14 <__mcmp>
 8014abc:	2800      	cmp	r0, #0
 8014abe:	da63      	bge.n	8014b88 <_strtod_l+0x880>
 8014ac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ac2:	b9e3      	cbnz	r3, 8014afe <_strtod_l+0x7f6>
 8014ac4:	f1ba 0f00 	cmp.w	sl, #0
 8014ac8:	d119      	bne.n	8014afe <_strtod_l+0x7f6>
 8014aca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014ace:	b9b3      	cbnz	r3, 8014afe <_strtod_l+0x7f6>
 8014ad0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014ad4:	0d1b      	lsrs	r3, r3, #20
 8014ad6:	051b      	lsls	r3, r3, #20
 8014ad8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014adc:	d90f      	bls.n	8014afe <_strtod_l+0x7f6>
 8014ade:	696b      	ldr	r3, [r5, #20]
 8014ae0:	b913      	cbnz	r3, 8014ae8 <_strtod_l+0x7e0>
 8014ae2:	692b      	ldr	r3, [r5, #16]
 8014ae4:	2b01      	cmp	r3, #1
 8014ae6:	dd0a      	ble.n	8014afe <_strtod_l+0x7f6>
 8014ae8:	4629      	mov	r1, r5
 8014aea:	2201      	movs	r2, #1
 8014aec:	4620      	mov	r0, r4
 8014aee:	f002 f83d 	bl	8016b6c <__lshift>
 8014af2:	4641      	mov	r1, r8
 8014af4:	4605      	mov	r5, r0
 8014af6:	f002 f88d 	bl	8016c14 <__mcmp>
 8014afa:	2800      	cmp	r0, #0
 8014afc:	dc75      	bgt.n	8014bea <_strtod_l+0x8e2>
 8014afe:	2f00      	cmp	r7, #0
 8014b00:	d17f      	bne.n	8014c02 <_strtod_l+0x8fa>
 8014b02:	e63a      	b.n	801477a <_strtod_l+0x472>
 8014b04:	07d6      	lsls	r6, r2, #31
 8014b06:	d508      	bpl.n	8014b1a <_strtod_l+0x812>
 8014b08:	ed9d 6b06 	vldr	d6, [sp, #24]
 8014b0c:	ed91 7b00 	vldr	d7, [r1]
 8014b10:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014b14:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014b18:	2001      	movs	r0, #1
 8014b1a:	1052      	asrs	r2, r2, #1
 8014b1c:	3108      	adds	r1, #8
 8014b1e:	e6db      	b.n	80148d8 <_strtod_l+0x5d0>
 8014b20:	f04f 31ff 	mov.w	r1, #4294967295
 8014b24:	fa01 f202 	lsl.w	r2, r1, r2
 8014b28:	ea02 0a0a 	and.w	sl, r2, sl
 8014b2c:	e6f3      	b.n	8014916 <_strtod_l+0x60e>
 8014b2e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014b32:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014b36:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014b3a:	36e2      	adds	r6, #226	; 0xe2
 8014b3c:	fa01 f306 	lsl.w	r3, r1, r6
 8014b40:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b42:	9111      	str	r1, [sp, #68]	; 0x44
 8014b44:	e758      	b.n	80149f8 <_strtod_l+0x6f0>
 8014b46:	2300      	movs	r3, #0
 8014b48:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b4a:	2301      	movs	r3, #1
 8014b4c:	9311      	str	r3, [sp, #68]	; 0x44
 8014b4e:	e753      	b.n	80149f8 <_strtod_l+0x6f0>
 8014b50:	461a      	mov	r2, r3
 8014b52:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014b54:	4620      	mov	r0, r4
 8014b56:	f002 f809 	bl	8016b6c <__lshift>
 8014b5a:	9018      	str	r0, [sp, #96]	; 0x60
 8014b5c:	2800      	cmp	r0, #0
 8014b5e:	f47f af7a 	bne.w	8014a56 <_strtod_l+0x74e>
 8014b62:	e600      	b.n	8014766 <_strtod_l+0x45e>
 8014b64:	f3af 8000 	nop.w
 8014b68:	94a03595 	.word	0x94a03595
 8014b6c:	3fdfffff 	.word	0x3fdfffff
 8014b70:	35afe535 	.word	0x35afe535
 8014b74:	3fe00000 	.word	0x3fe00000
 8014b78:	94a03595 	.word	0x94a03595
 8014b7c:	3fcfffff 	.word	0x3fcfffff
 8014b80:	080185b0 	.word	0x080185b0
 8014b84:	fffffc02 	.word	0xfffffc02
 8014b88:	f8cd b020 	str.w	fp, [sp, #32]
 8014b8c:	f040 8085 	bne.w	8014c9a <_strtod_l+0x992>
 8014b90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b96:	b322      	cbz	r2, 8014be2 <_strtod_l+0x8da>
 8014b98:	4ab7      	ldr	r2, [pc, #732]	; (8014e78 <_strtod_l+0xb70>)
 8014b9a:	4293      	cmp	r3, r2
 8014b9c:	d154      	bne.n	8014c48 <_strtod_l+0x940>
 8014b9e:	4651      	mov	r1, sl
 8014ba0:	b1e7      	cbz	r7, 8014bdc <_strtod_l+0x8d4>
 8014ba2:	4bb6      	ldr	r3, [pc, #728]	; (8014e7c <_strtod_l+0xb74>)
 8014ba4:	465a      	mov	r2, fp
 8014ba6:	4013      	ands	r3, r2
 8014ba8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014bac:	f04f 32ff 	mov.w	r2, #4294967295
 8014bb0:	d803      	bhi.n	8014bba <_strtod_l+0x8b2>
 8014bb2:	0d1b      	lsrs	r3, r3, #20
 8014bb4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014bb8:	409a      	lsls	r2, r3
 8014bba:	4291      	cmp	r1, r2
 8014bbc:	d144      	bne.n	8014c48 <_strtod_l+0x940>
 8014bbe:	4bb0      	ldr	r3, [pc, #704]	; (8014e80 <_strtod_l+0xb78>)
 8014bc0:	9a08      	ldr	r2, [sp, #32]
 8014bc2:	429a      	cmp	r2, r3
 8014bc4:	d102      	bne.n	8014bcc <_strtod_l+0x8c4>
 8014bc6:	3101      	adds	r1, #1
 8014bc8:	f43f adcd 	beq.w	8014766 <_strtod_l+0x45e>
 8014bcc:	4bab      	ldr	r3, [pc, #684]	; (8014e7c <_strtod_l+0xb74>)
 8014bce:	9a08      	ldr	r2, [sp, #32]
 8014bd0:	401a      	ands	r2, r3
 8014bd2:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 8014bd6:	f04f 0a00 	mov.w	sl, #0
 8014bda:	e790      	b.n	8014afe <_strtod_l+0x7f6>
 8014bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8014be0:	e7eb      	b.n	8014bba <_strtod_l+0x8b2>
 8014be2:	bb8b      	cbnz	r3, 8014c48 <_strtod_l+0x940>
 8014be4:	f1ba 0f00 	cmp.w	sl, #0
 8014be8:	d12e      	bne.n	8014c48 <_strtod_l+0x940>
 8014bea:	465b      	mov	r3, fp
 8014bec:	4aa3      	ldr	r2, [pc, #652]	; (8014e7c <_strtod_l+0xb74>)
 8014bee:	b30f      	cbz	r7, 8014c34 <_strtod_l+0x92c>
 8014bf0:	ea02 010b 	and.w	r1, r2, fp
 8014bf4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014bf8:	dc1c      	bgt.n	8014c34 <_strtod_l+0x92c>
 8014bfa:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014bfe:	f77f ae48 	ble.w	8014892 <_strtod_l+0x58a>
 8014c02:	4aa0      	ldr	r2, [pc, #640]	; (8014e84 <_strtod_l+0xb7c>)
 8014c04:	2300      	movs	r3, #0
 8014c06:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8014c0a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8014c0e:	ec4b ab17 	vmov	d7, sl, fp
 8014c12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014c16:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014c1a:	9b05      	ldr	r3, [sp, #20]
 8014c1c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	f47f adaa 	bne.w	801477a <_strtod_l+0x472>
 8014c26:	9b04      	ldr	r3, [sp, #16]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	f47f ada6 	bne.w	801477a <_strtod_l+0x472>
 8014c2e:	2322      	movs	r3, #34	; 0x22
 8014c30:	6023      	str	r3, [r4, #0]
 8014c32:	e5a2      	b.n	801477a <_strtod_l+0x472>
 8014c34:	4013      	ands	r3, r2
 8014c36:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014c3a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014c3e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014c42:	f04f 3aff 	mov.w	sl, #4294967295
 8014c46:	e75a      	b.n	8014afe <_strtod_l+0x7f6>
 8014c48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c4a:	b18b      	cbz	r3, 8014c70 <_strtod_l+0x968>
 8014c4c:	9a08      	ldr	r2, [sp, #32]
 8014c4e:	4213      	tst	r3, r2
 8014c50:	f43f af55 	beq.w	8014afe <_strtod_l+0x7f6>
 8014c54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c56:	463a      	mov	r2, r7
 8014c58:	4650      	mov	r0, sl
 8014c5a:	4659      	mov	r1, fp
 8014c5c:	b163      	cbz	r3, 8014c78 <_strtod_l+0x970>
 8014c5e:	f7ff fb39 	bl	80142d4 <sulp>
 8014c62:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8014c66:	ee37 7b00 	vadd.f64	d7, d7, d0
 8014c6a:	ec5b ab17 	vmov	sl, fp, d7
 8014c6e:	e746      	b.n	8014afe <_strtod_l+0x7f6>
 8014c70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c72:	ea13 0f0a 	tst.w	r3, sl
 8014c76:	e7eb      	b.n	8014c50 <_strtod_l+0x948>
 8014c78:	f7ff fb2c 	bl	80142d4 <sulp>
 8014c7c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8014c80:	ee37 7b40 	vsub.f64	d7, d7, d0
 8014c84:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014c88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c90:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8014c94:	f43f adfd 	beq.w	8014892 <_strtod_l+0x58a>
 8014c98:	e731      	b.n	8014afe <_strtod_l+0x7f6>
 8014c9a:	4641      	mov	r1, r8
 8014c9c:	4628      	mov	r0, r5
 8014c9e:	f002 f8f6 	bl	8016e8e <__ratio>
 8014ca2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8014ca6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cae:	d869      	bhi.n	8014d84 <_strtod_l+0xa7c>
 8014cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d045      	beq.n	8014d42 <_strtod_l+0xa3a>
 8014cb6:	4b74      	ldr	r3, [pc, #464]	; (8014e88 <_strtod_l+0xb80>)
 8014cb8:	2200      	movs	r2, #0
 8014cba:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8014cbe:	9808      	ldr	r0, [sp, #32]
 8014cc0:	496e      	ldr	r1, [pc, #440]	; (8014e7c <_strtod_l+0xb74>)
 8014cc2:	ea00 0601 	and.w	r6, r0, r1
 8014cc6:	4871      	ldr	r0, [pc, #452]	; (8014e8c <_strtod_l+0xb84>)
 8014cc8:	4286      	cmp	r6, r0
 8014cca:	f040 8089 	bne.w	8014de0 <_strtod_l+0xad8>
 8014cce:	910f      	str	r1, [sp, #60]	; 0x3c
 8014cd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014cd4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8014cd8:	9908      	ldr	r1, [sp, #32]
 8014cda:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8014cde:	ec4b ab10 	vmov	d0, sl, fp
 8014ce2:	ec43 2b1c 	vmov	d12, r2, r3
 8014ce6:	f002 f80d 	bl	8016d04 <__ulp>
 8014cea:	ec4b ab1d 	vmov	d13, sl, fp
 8014cee:	eeac db00 	vfma.f64	d13, d12, d0
 8014cf2:	ed8d db08 	vstr	d13, [sp, #32]
 8014cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cf8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014cfa:	4a65      	ldr	r2, [pc, #404]	; (8014e90 <_strtod_l+0xb88>)
 8014cfc:	4019      	ands	r1, r3
 8014cfe:	4291      	cmp	r1, r2
 8014d00:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8014d04:	d948      	bls.n	8014d98 <_strtod_l+0xa90>
 8014d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d08:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014d0c:	4293      	cmp	r3, r2
 8014d0e:	d103      	bne.n	8014d18 <_strtod_l+0xa10>
 8014d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d12:	3301      	adds	r3, #1
 8014d14:	f43f ad27 	beq.w	8014766 <_strtod_l+0x45e>
 8014d18:	f8df b164 	ldr.w	fp, [pc, #356]	; 8014e80 <_strtod_l+0xb78>
 8014d1c:	f04f 3aff 	mov.w	sl, #4294967295
 8014d20:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014d22:	4620      	mov	r0, r4
 8014d24:	f001 fd56 	bl	80167d4 <_Bfree>
 8014d28:	4649      	mov	r1, r9
 8014d2a:	4620      	mov	r0, r4
 8014d2c:	f001 fd52 	bl	80167d4 <_Bfree>
 8014d30:	4641      	mov	r1, r8
 8014d32:	4620      	mov	r0, r4
 8014d34:	f001 fd4e 	bl	80167d4 <_Bfree>
 8014d38:	4629      	mov	r1, r5
 8014d3a:	4620      	mov	r0, r4
 8014d3c:	f001 fd4a 	bl	80167d4 <_Bfree>
 8014d40:	e60e      	b.n	8014960 <_strtod_l+0x658>
 8014d42:	f1ba 0f00 	cmp.w	sl, #0
 8014d46:	d113      	bne.n	8014d70 <_strtod_l+0xa68>
 8014d48:	9b08      	ldr	r3, [sp, #32]
 8014d4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014d4e:	b9b3      	cbnz	r3, 8014d7e <_strtod_l+0xa76>
 8014d50:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014d54:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d5c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8014d60:	d401      	bmi.n	8014d66 <_strtod_l+0xa5e>
 8014d62:	ee20 8b08 	vmul.f64	d8, d0, d8
 8014d66:	eeb1 7b48 	vneg.f64	d7, d8
 8014d6a:	ec53 2b17 	vmov	r2, r3, d7
 8014d6e:	e7a6      	b.n	8014cbe <_strtod_l+0x9b6>
 8014d70:	f1ba 0f01 	cmp.w	sl, #1
 8014d74:	d103      	bne.n	8014d7e <_strtod_l+0xa76>
 8014d76:	9b08      	ldr	r3, [sp, #32]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	f43f ad8a 	beq.w	8014892 <_strtod_l+0x58a>
 8014d7e:	2200      	movs	r2, #0
 8014d80:	4b44      	ldr	r3, [pc, #272]	; (8014e94 <_strtod_l+0xb8c>)
 8014d82:	e79a      	b.n	8014cba <_strtod_l+0x9b2>
 8014d84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d86:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8014d8a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d0e9      	beq.n	8014d66 <_strtod_l+0xa5e>
 8014d92:	ec53 2b18 	vmov	r2, r3, d8
 8014d96:	e792      	b.n	8014cbe <_strtod_l+0x9b6>
 8014d98:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014d9c:	2f00      	cmp	r7, #0
 8014d9e:	d1bf      	bne.n	8014d20 <_strtod_l+0xa18>
 8014da0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014da4:	0d1b      	lsrs	r3, r3, #20
 8014da6:	051b      	lsls	r3, r3, #20
 8014da8:	429e      	cmp	r6, r3
 8014daa:	d1b9      	bne.n	8014d20 <_strtod_l+0xa18>
 8014dac:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8014db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014db2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8014db6:	ee38 8b40 	vsub.f64	d8, d8, d0
 8014dba:	b92b      	cbnz	r3, 8014dc8 <_strtod_l+0xac0>
 8014dbc:	f1ba 0f00 	cmp.w	sl, #0
 8014dc0:	d102      	bne.n	8014dc8 <_strtod_l+0xac0>
 8014dc2:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8014dc6:	b3d2      	cbz	r2, 8014e3e <_strtod_l+0xb36>
 8014dc8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8014dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dd0:	f53f acd3 	bmi.w	801477a <_strtod_l+0x472>
 8014dd4:	eeb4 8bca 	vcmpe.f64	d8, d10
 8014dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ddc:	dda0      	ble.n	8014d20 <_strtod_l+0xa18>
 8014dde:	e4cc      	b.n	801477a <_strtod_l+0x472>
 8014de0:	b1ef      	cbz	r7, 8014e1e <_strtod_l+0xb16>
 8014de2:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8014de6:	d81a      	bhi.n	8014e1e <_strtod_l+0xb16>
 8014de8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8014e70 <_strtod_l+0xb68>
 8014dec:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014df4:	d810      	bhi.n	8014e18 <_strtod_l+0xb10>
 8014df6:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8014dfa:	ee17 3a90 	vmov	r3, s15
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	bf08      	it	eq
 8014e02:	2301      	moveq	r3, #1
 8014e04:	ee07 3a90 	vmov	s15, r3
 8014e08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e0a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8014e0e:	b99b      	cbnz	r3, 8014e38 <_strtod_l+0xb30>
 8014e10:	eeb1 7b48 	vneg.f64	d7, d8
 8014e14:	ec53 2b17 	vmov	r2, r3, d7
 8014e18:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8014e1c:	1b8b      	subs	r3, r1, r6
 8014e1e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014e22:	ec43 2b1c 	vmov	d12, r2, r3
 8014e26:	f001 ff6d 	bl	8016d04 <__ulp>
 8014e2a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8014e2e:	eeac 7b00 	vfma.f64	d7, d12, d0
 8014e32:	ec5b ab17 	vmov	sl, fp, d7
 8014e36:	e7b1      	b.n	8014d9c <_strtod_l+0xa94>
 8014e38:	ec53 2b18 	vmov	r2, r3, d8
 8014e3c:	e7ec      	b.n	8014e18 <_strtod_l+0xb10>
 8014e3e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8014e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e46:	f57f af6b 	bpl.w	8014d20 <_strtod_l+0xa18>
 8014e4a:	e496      	b.n	801477a <_strtod_l+0x472>
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	930d      	str	r3, [sp, #52]	; 0x34
 8014e50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014e52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e54:	6013      	str	r3, [r2, #0]
 8014e56:	f7ff ba9d 	b.w	8014394 <_strtod_l+0x8c>
 8014e5a:	2a65      	cmp	r2, #101	; 0x65
 8014e5c:	f04f 0100 	mov.w	r1, #0
 8014e60:	f43f ab97 	beq.w	8014592 <_strtod_l+0x28a>
 8014e64:	2701      	movs	r7, #1
 8014e66:	460b      	mov	r3, r1
 8014e68:	9704      	str	r7, [sp, #16]
 8014e6a:	f7ff bb0a 	b.w	8014482 <_strtod_l+0x17a>
 8014e6e:	bf00      	nop
 8014e70:	ffc00000 	.word	0xffc00000
 8014e74:	41dfffff 	.word	0x41dfffff
 8014e78:	000fffff 	.word	0x000fffff
 8014e7c:	7ff00000 	.word	0x7ff00000
 8014e80:	7fefffff 	.word	0x7fefffff
 8014e84:	39500000 	.word	0x39500000
 8014e88:	3ff00000 	.word	0x3ff00000
 8014e8c:	7fe00000 	.word	0x7fe00000
 8014e90:	7c9fffff 	.word	0x7c9fffff
 8014e94:	bff00000 	.word	0xbff00000

08014e98 <_strtod_r>:
 8014e98:	4b05      	ldr	r3, [pc, #20]	; (8014eb0 <_strtod_r+0x18>)
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	b410      	push	{r4}
 8014e9e:	6a1b      	ldr	r3, [r3, #32]
 8014ea0:	4c04      	ldr	r4, [pc, #16]	; (8014eb4 <_strtod_r+0x1c>)
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	bf08      	it	eq
 8014ea6:	4623      	moveq	r3, r4
 8014ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014eac:	f7ff ba2c 	b.w	8014308 <_strtod_l>
 8014eb0:	200001a8 	.word	0x200001a8
 8014eb4:	2000020c 	.word	0x2000020c

08014eb8 <_strtol_l.isra.0>:
 8014eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ebc:	4680      	mov	r8, r0
 8014ebe:	4689      	mov	r9, r1
 8014ec0:	4692      	mov	sl, r2
 8014ec2:	461e      	mov	r6, r3
 8014ec4:	460f      	mov	r7, r1
 8014ec6:	463d      	mov	r5, r7
 8014ec8:	9808      	ldr	r0, [sp, #32]
 8014eca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014ece:	f001 fbbb 	bl	8016648 <__locale_ctype_ptr_l>
 8014ed2:	4420      	add	r0, r4
 8014ed4:	7843      	ldrb	r3, [r0, #1]
 8014ed6:	f013 0308 	ands.w	r3, r3, #8
 8014eda:	d132      	bne.n	8014f42 <_strtol_l.isra.0+0x8a>
 8014edc:	2c2d      	cmp	r4, #45	; 0x2d
 8014ede:	d132      	bne.n	8014f46 <_strtol_l.isra.0+0x8e>
 8014ee0:	787c      	ldrb	r4, [r7, #1]
 8014ee2:	1cbd      	adds	r5, r7, #2
 8014ee4:	2201      	movs	r2, #1
 8014ee6:	2e00      	cmp	r6, #0
 8014ee8:	d05d      	beq.n	8014fa6 <_strtol_l.isra.0+0xee>
 8014eea:	2e10      	cmp	r6, #16
 8014eec:	d109      	bne.n	8014f02 <_strtol_l.isra.0+0x4a>
 8014eee:	2c30      	cmp	r4, #48	; 0x30
 8014ef0:	d107      	bne.n	8014f02 <_strtol_l.isra.0+0x4a>
 8014ef2:	782b      	ldrb	r3, [r5, #0]
 8014ef4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014ef8:	2b58      	cmp	r3, #88	; 0x58
 8014efa:	d14f      	bne.n	8014f9c <_strtol_l.isra.0+0xe4>
 8014efc:	786c      	ldrb	r4, [r5, #1]
 8014efe:	2610      	movs	r6, #16
 8014f00:	3502      	adds	r5, #2
 8014f02:	2a00      	cmp	r2, #0
 8014f04:	bf14      	ite	ne
 8014f06:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014f0a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014f0e:	2700      	movs	r7, #0
 8014f10:	fbb1 fcf6 	udiv	ip, r1, r6
 8014f14:	4638      	mov	r0, r7
 8014f16:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014f1a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014f1e:	2b09      	cmp	r3, #9
 8014f20:	d817      	bhi.n	8014f52 <_strtol_l.isra.0+0x9a>
 8014f22:	461c      	mov	r4, r3
 8014f24:	42a6      	cmp	r6, r4
 8014f26:	dd23      	ble.n	8014f70 <_strtol_l.isra.0+0xb8>
 8014f28:	1c7b      	adds	r3, r7, #1
 8014f2a:	d007      	beq.n	8014f3c <_strtol_l.isra.0+0x84>
 8014f2c:	4584      	cmp	ip, r0
 8014f2e:	d31c      	bcc.n	8014f6a <_strtol_l.isra.0+0xb2>
 8014f30:	d101      	bne.n	8014f36 <_strtol_l.isra.0+0x7e>
 8014f32:	45a6      	cmp	lr, r4
 8014f34:	db19      	blt.n	8014f6a <_strtol_l.isra.0+0xb2>
 8014f36:	fb00 4006 	mla	r0, r0, r6, r4
 8014f3a:	2701      	movs	r7, #1
 8014f3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f40:	e7eb      	b.n	8014f1a <_strtol_l.isra.0+0x62>
 8014f42:	462f      	mov	r7, r5
 8014f44:	e7bf      	b.n	8014ec6 <_strtol_l.isra.0+0xe>
 8014f46:	2c2b      	cmp	r4, #43	; 0x2b
 8014f48:	bf04      	itt	eq
 8014f4a:	1cbd      	addeq	r5, r7, #2
 8014f4c:	787c      	ldrbeq	r4, [r7, #1]
 8014f4e:	461a      	mov	r2, r3
 8014f50:	e7c9      	b.n	8014ee6 <_strtol_l.isra.0+0x2e>
 8014f52:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014f56:	2b19      	cmp	r3, #25
 8014f58:	d801      	bhi.n	8014f5e <_strtol_l.isra.0+0xa6>
 8014f5a:	3c37      	subs	r4, #55	; 0x37
 8014f5c:	e7e2      	b.n	8014f24 <_strtol_l.isra.0+0x6c>
 8014f5e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014f62:	2b19      	cmp	r3, #25
 8014f64:	d804      	bhi.n	8014f70 <_strtol_l.isra.0+0xb8>
 8014f66:	3c57      	subs	r4, #87	; 0x57
 8014f68:	e7dc      	b.n	8014f24 <_strtol_l.isra.0+0x6c>
 8014f6a:	f04f 37ff 	mov.w	r7, #4294967295
 8014f6e:	e7e5      	b.n	8014f3c <_strtol_l.isra.0+0x84>
 8014f70:	1c7b      	adds	r3, r7, #1
 8014f72:	d108      	bne.n	8014f86 <_strtol_l.isra.0+0xce>
 8014f74:	2322      	movs	r3, #34	; 0x22
 8014f76:	f8c8 3000 	str.w	r3, [r8]
 8014f7a:	4608      	mov	r0, r1
 8014f7c:	f1ba 0f00 	cmp.w	sl, #0
 8014f80:	d107      	bne.n	8014f92 <_strtol_l.isra.0+0xda>
 8014f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f86:	b102      	cbz	r2, 8014f8a <_strtol_l.isra.0+0xd2>
 8014f88:	4240      	negs	r0, r0
 8014f8a:	f1ba 0f00 	cmp.w	sl, #0
 8014f8e:	d0f8      	beq.n	8014f82 <_strtol_l.isra.0+0xca>
 8014f90:	b10f      	cbz	r7, 8014f96 <_strtol_l.isra.0+0xde>
 8014f92:	f105 39ff 	add.w	r9, r5, #4294967295
 8014f96:	f8ca 9000 	str.w	r9, [sl]
 8014f9a:	e7f2      	b.n	8014f82 <_strtol_l.isra.0+0xca>
 8014f9c:	2430      	movs	r4, #48	; 0x30
 8014f9e:	2e00      	cmp	r6, #0
 8014fa0:	d1af      	bne.n	8014f02 <_strtol_l.isra.0+0x4a>
 8014fa2:	2608      	movs	r6, #8
 8014fa4:	e7ad      	b.n	8014f02 <_strtol_l.isra.0+0x4a>
 8014fa6:	2c30      	cmp	r4, #48	; 0x30
 8014fa8:	d0a3      	beq.n	8014ef2 <_strtol_l.isra.0+0x3a>
 8014faa:	260a      	movs	r6, #10
 8014fac:	e7a9      	b.n	8014f02 <_strtol_l.isra.0+0x4a>
	...

08014fb0 <_strtol_r>:
 8014fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014fb2:	4c06      	ldr	r4, [pc, #24]	; (8014fcc <_strtol_r+0x1c>)
 8014fb4:	4d06      	ldr	r5, [pc, #24]	; (8014fd0 <_strtol_r+0x20>)
 8014fb6:	6824      	ldr	r4, [r4, #0]
 8014fb8:	6a24      	ldr	r4, [r4, #32]
 8014fba:	2c00      	cmp	r4, #0
 8014fbc:	bf08      	it	eq
 8014fbe:	462c      	moveq	r4, r5
 8014fc0:	9400      	str	r4, [sp, #0]
 8014fc2:	f7ff ff79 	bl	8014eb8 <_strtol_l.isra.0>
 8014fc6:	b003      	add	sp, #12
 8014fc8:	bd30      	pop	{r4, r5, pc}
 8014fca:	bf00      	nop
 8014fcc:	200001a8 	.word	0x200001a8
 8014fd0:	2000020c 	.word	0x2000020c

08014fd4 <__swbuf_r>:
 8014fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fd6:	460e      	mov	r6, r1
 8014fd8:	4614      	mov	r4, r2
 8014fda:	4605      	mov	r5, r0
 8014fdc:	b118      	cbz	r0, 8014fe6 <__swbuf_r+0x12>
 8014fde:	6983      	ldr	r3, [r0, #24]
 8014fe0:	b90b      	cbnz	r3, 8014fe6 <__swbuf_r+0x12>
 8014fe2:	f000 ff81 	bl	8015ee8 <__sinit>
 8014fe6:	4b21      	ldr	r3, [pc, #132]	; (801506c <__swbuf_r+0x98>)
 8014fe8:	429c      	cmp	r4, r3
 8014fea:	d12a      	bne.n	8015042 <__swbuf_r+0x6e>
 8014fec:	686c      	ldr	r4, [r5, #4]
 8014fee:	69a3      	ldr	r3, [r4, #24]
 8014ff0:	60a3      	str	r3, [r4, #8]
 8014ff2:	89a3      	ldrh	r3, [r4, #12]
 8014ff4:	071a      	lsls	r2, r3, #28
 8014ff6:	d52e      	bpl.n	8015056 <__swbuf_r+0x82>
 8014ff8:	6923      	ldr	r3, [r4, #16]
 8014ffa:	b363      	cbz	r3, 8015056 <__swbuf_r+0x82>
 8014ffc:	6923      	ldr	r3, [r4, #16]
 8014ffe:	6820      	ldr	r0, [r4, #0]
 8015000:	1ac0      	subs	r0, r0, r3
 8015002:	6963      	ldr	r3, [r4, #20]
 8015004:	b2f6      	uxtb	r6, r6
 8015006:	4283      	cmp	r3, r0
 8015008:	4637      	mov	r7, r6
 801500a:	dc04      	bgt.n	8015016 <__swbuf_r+0x42>
 801500c:	4621      	mov	r1, r4
 801500e:	4628      	mov	r0, r5
 8015010:	f000 ff00 	bl	8015e14 <_fflush_r>
 8015014:	bb28      	cbnz	r0, 8015062 <__swbuf_r+0x8e>
 8015016:	68a3      	ldr	r3, [r4, #8]
 8015018:	3b01      	subs	r3, #1
 801501a:	60a3      	str	r3, [r4, #8]
 801501c:	6823      	ldr	r3, [r4, #0]
 801501e:	1c5a      	adds	r2, r3, #1
 8015020:	6022      	str	r2, [r4, #0]
 8015022:	701e      	strb	r6, [r3, #0]
 8015024:	6963      	ldr	r3, [r4, #20]
 8015026:	3001      	adds	r0, #1
 8015028:	4283      	cmp	r3, r0
 801502a:	d004      	beq.n	8015036 <__swbuf_r+0x62>
 801502c:	89a3      	ldrh	r3, [r4, #12]
 801502e:	07db      	lsls	r3, r3, #31
 8015030:	d519      	bpl.n	8015066 <__swbuf_r+0x92>
 8015032:	2e0a      	cmp	r6, #10
 8015034:	d117      	bne.n	8015066 <__swbuf_r+0x92>
 8015036:	4621      	mov	r1, r4
 8015038:	4628      	mov	r0, r5
 801503a:	f000 feeb 	bl	8015e14 <_fflush_r>
 801503e:	b190      	cbz	r0, 8015066 <__swbuf_r+0x92>
 8015040:	e00f      	b.n	8015062 <__swbuf_r+0x8e>
 8015042:	4b0b      	ldr	r3, [pc, #44]	; (8015070 <__swbuf_r+0x9c>)
 8015044:	429c      	cmp	r4, r3
 8015046:	d101      	bne.n	801504c <__swbuf_r+0x78>
 8015048:	68ac      	ldr	r4, [r5, #8]
 801504a:	e7d0      	b.n	8014fee <__swbuf_r+0x1a>
 801504c:	4b09      	ldr	r3, [pc, #36]	; (8015074 <__swbuf_r+0xa0>)
 801504e:	429c      	cmp	r4, r3
 8015050:	bf08      	it	eq
 8015052:	68ec      	ldreq	r4, [r5, #12]
 8015054:	e7cb      	b.n	8014fee <__swbuf_r+0x1a>
 8015056:	4621      	mov	r1, r4
 8015058:	4628      	mov	r0, r5
 801505a:	f000 f80d 	bl	8015078 <__swsetup_r>
 801505e:	2800      	cmp	r0, #0
 8015060:	d0cc      	beq.n	8014ffc <__swbuf_r+0x28>
 8015062:	f04f 37ff 	mov.w	r7, #4294967295
 8015066:	4638      	mov	r0, r7
 8015068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801506a:	bf00      	nop
 801506c:	08018608 	.word	0x08018608
 8015070:	08018628 	.word	0x08018628
 8015074:	080185e8 	.word	0x080185e8

08015078 <__swsetup_r>:
 8015078:	4b32      	ldr	r3, [pc, #200]	; (8015144 <__swsetup_r+0xcc>)
 801507a:	b570      	push	{r4, r5, r6, lr}
 801507c:	681d      	ldr	r5, [r3, #0]
 801507e:	4606      	mov	r6, r0
 8015080:	460c      	mov	r4, r1
 8015082:	b125      	cbz	r5, 801508e <__swsetup_r+0x16>
 8015084:	69ab      	ldr	r3, [r5, #24]
 8015086:	b913      	cbnz	r3, 801508e <__swsetup_r+0x16>
 8015088:	4628      	mov	r0, r5
 801508a:	f000 ff2d 	bl	8015ee8 <__sinit>
 801508e:	4b2e      	ldr	r3, [pc, #184]	; (8015148 <__swsetup_r+0xd0>)
 8015090:	429c      	cmp	r4, r3
 8015092:	d10f      	bne.n	80150b4 <__swsetup_r+0x3c>
 8015094:	686c      	ldr	r4, [r5, #4]
 8015096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801509a:	b29a      	uxth	r2, r3
 801509c:	0715      	lsls	r5, r2, #28
 801509e:	d42c      	bmi.n	80150fa <__swsetup_r+0x82>
 80150a0:	06d0      	lsls	r0, r2, #27
 80150a2:	d411      	bmi.n	80150c8 <__swsetup_r+0x50>
 80150a4:	2209      	movs	r2, #9
 80150a6:	6032      	str	r2, [r6, #0]
 80150a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150ac:	81a3      	strh	r3, [r4, #12]
 80150ae:	f04f 30ff 	mov.w	r0, #4294967295
 80150b2:	e03e      	b.n	8015132 <__swsetup_r+0xba>
 80150b4:	4b25      	ldr	r3, [pc, #148]	; (801514c <__swsetup_r+0xd4>)
 80150b6:	429c      	cmp	r4, r3
 80150b8:	d101      	bne.n	80150be <__swsetup_r+0x46>
 80150ba:	68ac      	ldr	r4, [r5, #8]
 80150bc:	e7eb      	b.n	8015096 <__swsetup_r+0x1e>
 80150be:	4b24      	ldr	r3, [pc, #144]	; (8015150 <__swsetup_r+0xd8>)
 80150c0:	429c      	cmp	r4, r3
 80150c2:	bf08      	it	eq
 80150c4:	68ec      	ldreq	r4, [r5, #12]
 80150c6:	e7e6      	b.n	8015096 <__swsetup_r+0x1e>
 80150c8:	0751      	lsls	r1, r2, #29
 80150ca:	d512      	bpl.n	80150f2 <__swsetup_r+0x7a>
 80150cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80150ce:	b141      	cbz	r1, 80150e2 <__swsetup_r+0x6a>
 80150d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80150d4:	4299      	cmp	r1, r3
 80150d6:	d002      	beq.n	80150de <__swsetup_r+0x66>
 80150d8:	4630      	mov	r0, r6
 80150da:	f001 ff55 	bl	8016f88 <_free_r>
 80150de:	2300      	movs	r3, #0
 80150e0:	6363      	str	r3, [r4, #52]	; 0x34
 80150e2:	89a3      	ldrh	r3, [r4, #12]
 80150e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80150e8:	81a3      	strh	r3, [r4, #12]
 80150ea:	2300      	movs	r3, #0
 80150ec:	6063      	str	r3, [r4, #4]
 80150ee:	6923      	ldr	r3, [r4, #16]
 80150f0:	6023      	str	r3, [r4, #0]
 80150f2:	89a3      	ldrh	r3, [r4, #12]
 80150f4:	f043 0308 	orr.w	r3, r3, #8
 80150f8:	81a3      	strh	r3, [r4, #12]
 80150fa:	6923      	ldr	r3, [r4, #16]
 80150fc:	b94b      	cbnz	r3, 8015112 <__swsetup_r+0x9a>
 80150fe:	89a3      	ldrh	r3, [r4, #12]
 8015100:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015108:	d003      	beq.n	8015112 <__swsetup_r+0x9a>
 801510a:	4621      	mov	r1, r4
 801510c:	4630      	mov	r0, r6
 801510e:	f001 fad3 	bl	80166b8 <__smakebuf_r>
 8015112:	89a2      	ldrh	r2, [r4, #12]
 8015114:	f012 0301 	ands.w	r3, r2, #1
 8015118:	d00c      	beq.n	8015134 <__swsetup_r+0xbc>
 801511a:	2300      	movs	r3, #0
 801511c:	60a3      	str	r3, [r4, #8]
 801511e:	6963      	ldr	r3, [r4, #20]
 8015120:	425b      	negs	r3, r3
 8015122:	61a3      	str	r3, [r4, #24]
 8015124:	6923      	ldr	r3, [r4, #16]
 8015126:	b953      	cbnz	r3, 801513e <__swsetup_r+0xc6>
 8015128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801512c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015130:	d1ba      	bne.n	80150a8 <__swsetup_r+0x30>
 8015132:	bd70      	pop	{r4, r5, r6, pc}
 8015134:	0792      	lsls	r2, r2, #30
 8015136:	bf58      	it	pl
 8015138:	6963      	ldrpl	r3, [r4, #20]
 801513a:	60a3      	str	r3, [r4, #8]
 801513c:	e7f2      	b.n	8015124 <__swsetup_r+0xac>
 801513e:	2000      	movs	r0, #0
 8015140:	e7f7      	b.n	8015132 <__swsetup_r+0xba>
 8015142:	bf00      	nop
 8015144:	200001a8 	.word	0x200001a8
 8015148:	08018608 	.word	0x08018608
 801514c:	08018628 	.word	0x08018628
 8015150:	080185e8 	.word	0x080185e8

08015154 <quorem>:
 8015154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015158:	6903      	ldr	r3, [r0, #16]
 801515a:	690c      	ldr	r4, [r1, #16]
 801515c:	42a3      	cmp	r3, r4
 801515e:	4680      	mov	r8, r0
 8015160:	f2c0 8082 	blt.w	8015268 <quorem+0x114>
 8015164:	3c01      	subs	r4, #1
 8015166:	f101 0714 	add.w	r7, r1, #20
 801516a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801516e:	f100 0614 	add.w	r6, r0, #20
 8015172:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8015176:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801517a:	eb06 030c 	add.w	r3, r6, ip
 801517e:	3501      	adds	r5, #1
 8015180:	eb07 090c 	add.w	r9, r7, ip
 8015184:	9301      	str	r3, [sp, #4]
 8015186:	fbb0 f5f5 	udiv	r5, r0, r5
 801518a:	b395      	cbz	r5, 80151f2 <quorem+0x9e>
 801518c:	f04f 0a00 	mov.w	sl, #0
 8015190:	4638      	mov	r0, r7
 8015192:	46b6      	mov	lr, r6
 8015194:	46d3      	mov	fp, sl
 8015196:	f850 2b04 	ldr.w	r2, [r0], #4
 801519a:	b293      	uxth	r3, r2
 801519c:	fb05 a303 	mla	r3, r5, r3, sl
 80151a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80151a4:	b29b      	uxth	r3, r3
 80151a6:	ebab 0303 	sub.w	r3, fp, r3
 80151aa:	0c12      	lsrs	r2, r2, #16
 80151ac:	f8de b000 	ldr.w	fp, [lr]
 80151b0:	fb05 a202 	mla	r2, r5, r2, sl
 80151b4:	fa13 f38b 	uxtah	r3, r3, fp
 80151b8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80151bc:	fa1f fb82 	uxth.w	fp, r2
 80151c0:	f8de 2000 	ldr.w	r2, [lr]
 80151c4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80151c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80151cc:	b29b      	uxth	r3, r3
 80151ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80151d2:	4581      	cmp	r9, r0
 80151d4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80151d8:	f84e 3b04 	str.w	r3, [lr], #4
 80151dc:	d2db      	bcs.n	8015196 <quorem+0x42>
 80151de:	f856 300c 	ldr.w	r3, [r6, ip]
 80151e2:	b933      	cbnz	r3, 80151f2 <quorem+0x9e>
 80151e4:	9b01      	ldr	r3, [sp, #4]
 80151e6:	3b04      	subs	r3, #4
 80151e8:	429e      	cmp	r6, r3
 80151ea:	461a      	mov	r2, r3
 80151ec:	d330      	bcc.n	8015250 <quorem+0xfc>
 80151ee:	f8c8 4010 	str.w	r4, [r8, #16]
 80151f2:	4640      	mov	r0, r8
 80151f4:	f001 fd0e 	bl	8016c14 <__mcmp>
 80151f8:	2800      	cmp	r0, #0
 80151fa:	db25      	blt.n	8015248 <quorem+0xf4>
 80151fc:	3501      	adds	r5, #1
 80151fe:	4630      	mov	r0, r6
 8015200:	f04f 0c00 	mov.w	ip, #0
 8015204:	f857 2b04 	ldr.w	r2, [r7], #4
 8015208:	f8d0 e000 	ldr.w	lr, [r0]
 801520c:	b293      	uxth	r3, r2
 801520e:	ebac 0303 	sub.w	r3, ip, r3
 8015212:	0c12      	lsrs	r2, r2, #16
 8015214:	fa13 f38e 	uxtah	r3, r3, lr
 8015218:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801521c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015220:	b29b      	uxth	r3, r3
 8015222:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015226:	45b9      	cmp	r9, r7
 8015228:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801522c:	f840 3b04 	str.w	r3, [r0], #4
 8015230:	d2e8      	bcs.n	8015204 <quorem+0xb0>
 8015232:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8015236:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801523a:	b92a      	cbnz	r2, 8015248 <quorem+0xf4>
 801523c:	3b04      	subs	r3, #4
 801523e:	429e      	cmp	r6, r3
 8015240:	461a      	mov	r2, r3
 8015242:	d30b      	bcc.n	801525c <quorem+0x108>
 8015244:	f8c8 4010 	str.w	r4, [r8, #16]
 8015248:	4628      	mov	r0, r5
 801524a:	b003      	add	sp, #12
 801524c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015250:	6812      	ldr	r2, [r2, #0]
 8015252:	3b04      	subs	r3, #4
 8015254:	2a00      	cmp	r2, #0
 8015256:	d1ca      	bne.n	80151ee <quorem+0x9a>
 8015258:	3c01      	subs	r4, #1
 801525a:	e7c5      	b.n	80151e8 <quorem+0x94>
 801525c:	6812      	ldr	r2, [r2, #0]
 801525e:	3b04      	subs	r3, #4
 8015260:	2a00      	cmp	r2, #0
 8015262:	d1ef      	bne.n	8015244 <quorem+0xf0>
 8015264:	3c01      	subs	r4, #1
 8015266:	e7ea      	b.n	801523e <quorem+0xea>
 8015268:	2000      	movs	r0, #0
 801526a:	e7ee      	b.n	801524a <quorem+0xf6>
 801526c:	0000      	movs	r0, r0
	...

08015270 <_dtoa_r>:
 8015270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015274:	ec57 6b10 	vmov	r6, r7, d0
 8015278:	b095      	sub	sp, #84	; 0x54
 801527a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801527c:	9108      	str	r1, [sp, #32]
 801527e:	4604      	mov	r4, r0
 8015280:	920a      	str	r2, [sp, #40]	; 0x28
 8015282:	9311      	str	r3, [sp, #68]	; 0x44
 8015284:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8015288:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801528c:	b93d      	cbnz	r5, 801529e <_dtoa_r+0x2e>
 801528e:	2010      	movs	r0, #16
 8015290:	f001 fa52 	bl	8016738 <malloc>
 8015294:	6260      	str	r0, [r4, #36]	; 0x24
 8015296:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801529a:	6005      	str	r5, [r0, #0]
 801529c:	60c5      	str	r5, [r0, #12]
 801529e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152a0:	6819      	ldr	r1, [r3, #0]
 80152a2:	b151      	cbz	r1, 80152ba <_dtoa_r+0x4a>
 80152a4:	685a      	ldr	r2, [r3, #4]
 80152a6:	604a      	str	r2, [r1, #4]
 80152a8:	2301      	movs	r3, #1
 80152aa:	4093      	lsls	r3, r2
 80152ac:	608b      	str	r3, [r1, #8]
 80152ae:	4620      	mov	r0, r4
 80152b0:	f001 fa90 	bl	80167d4 <_Bfree>
 80152b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152b6:	2200      	movs	r2, #0
 80152b8:	601a      	str	r2, [r3, #0]
 80152ba:	1e3b      	subs	r3, r7, #0
 80152bc:	bfb9      	ittee	lt
 80152be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80152c2:	9303      	strlt	r3, [sp, #12]
 80152c4:	2300      	movge	r3, #0
 80152c6:	f8c8 3000 	strge.w	r3, [r8]
 80152ca:	9d03      	ldr	r5, [sp, #12]
 80152cc:	4bac      	ldr	r3, [pc, #688]	; (8015580 <_dtoa_r+0x310>)
 80152ce:	bfbc      	itt	lt
 80152d0:	2201      	movlt	r2, #1
 80152d2:	f8c8 2000 	strlt.w	r2, [r8]
 80152d6:	43ab      	bics	r3, r5
 80152d8:	d11b      	bne.n	8015312 <_dtoa_r+0xa2>
 80152da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80152dc:	f242 730f 	movw	r3, #9999	; 0x270f
 80152e0:	6013      	str	r3, [r2, #0]
 80152e2:	9b02      	ldr	r3, [sp, #8]
 80152e4:	b923      	cbnz	r3, 80152f0 <_dtoa_r+0x80>
 80152e6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80152ea:	2d00      	cmp	r5, #0
 80152ec:	f000 84dd 	beq.w	8015caa <_dtoa_r+0xa3a>
 80152f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80152f2:	b953      	cbnz	r3, 801530a <_dtoa_r+0x9a>
 80152f4:	4ba3      	ldr	r3, [pc, #652]	; (8015584 <_dtoa_r+0x314>)
 80152f6:	e020      	b.n	801533a <_dtoa_r+0xca>
 80152f8:	4ba3      	ldr	r3, [pc, #652]	; (8015588 <_dtoa_r+0x318>)
 80152fa:	9304      	str	r3, [sp, #16]
 80152fc:	3308      	adds	r3, #8
 80152fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015300:	6013      	str	r3, [r2, #0]
 8015302:	9804      	ldr	r0, [sp, #16]
 8015304:	b015      	add	sp, #84	; 0x54
 8015306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801530a:	4b9e      	ldr	r3, [pc, #632]	; (8015584 <_dtoa_r+0x314>)
 801530c:	9304      	str	r3, [sp, #16]
 801530e:	3303      	adds	r3, #3
 8015310:	e7f5      	b.n	80152fe <_dtoa_r+0x8e>
 8015312:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015316:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801531a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801531e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015322:	d10c      	bne.n	801533e <_dtoa_r+0xce>
 8015324:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015326:	2301      	movs	r3, #1
 8015328:	6013      	str	r3, [r2, #0]
 801532a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801532c:	2b00      	cmp	r3, #0
 801532e:	f000 84b9 	beq.w	8015ca4 <_dtoa_r+0xa34>
 8015332:	4b96      	ldr	r3, [pc, #600]	; (801558c <_dtoa_r+0x31c>)
 8015334:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015336:	6013      	str	r3, [r2, #0]
 8015338:	3b01      	subs	r3, #1
 801533a:	9304      	str	r3, [sp, #16]
 801533c:	e7e1      	b.n	8015302 <_dtoa_r+0x92>
 801533e:	a913      	add	r1, sp, #76	; 0x4c
 8015340:	aa12      	add	r2, sp, #72	; 0x48
 8015342:	ed9d 0b04 	vldr	d0, [sp, #16]
 8015346:	4620      	mov	r0, r4
 8015348:	f001 fd52 	bl	8016df0 <__d2b>
 801534c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8015350:	9001      	str	r0, [sp, #4]
 8015352:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015354:	2e00      	cmp	r6, #0
 8015356:	d046      	beq.n	80153e6 <_dtoa_r+0x176>
 8015358:	9805      	ldr	r0, [sp, #20]
 801535a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801535e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015362:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8015366:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801536a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801536e:	2700      	movs	r7, #0
 8015370:	ee07 aa90 	vmov	s15, sl
 8015374:	ec43 2b16 	vmov	d6, r2, r3
 8015378:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801537c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8015568 <_dtoa_r+0x2f8>
 8015380:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8015384:	ee36 7b47 	vsub.f64	d7, d6, d7
 8015388:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8015570 <_dtoa_r+0x300>
 801538c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8015390:	eeb0 7b46 	vmov.f64	d7, d6
 8015394:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8015578 <_dtoa_r+0x308>
 8015398:	eea5 7b06 	vfma.f64	d7, d5, d6
 801539c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80153a0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80153a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153a8:	ee16 ba90 	vmov	fp, s13
 80153ac:	d508      	bpl.n	80153c0 <_dtoa_r+0x150>
 80153ae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80153b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80153b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ba:	bf18      	it	ne
 80153bc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80153c0:	f1bb 0f16 	cmp.w	fp, #22
 80153c4:	d834      	bhi.n	8015430 <_dtoa_r+0x1c0>
 80153c6:	4b72      	ldr	r3, [pc, #456]	; (8015590 <_dtoa_r+0x320>)
 80153c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80153cc:	ed93 7b00 	vldr	d7, [r3]
 80153d0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80153d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80153d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153dc:	dd01      	ble.n	80153e2 <_dtoa_r+0x172>
 80153de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80153e2:	2300      	movs	r3, #0
 80153e4:	e025      	b.n	8015432 <_dtoa_r+0x1c2>
 80153e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80153e8:	eb01 0a03 	add.w	sl, r1, r3
 80153ec:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80153f0:	2b20      	cmp	r3, #32
 80153f2:	dd17      	ble.n	8015424 <_dtoa_r+0x1b4>
 80153f4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80153f8:	9a02      	ldr	r2, [sp, #8]
 80153fa:	409d      	lsls	r5, r3
 80153fc:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8015400:	fa22 f303 	lsr.w	r3, r2, r3
 8015404:	432b      	orrs	r3, r5
 8015406:	ee07 3a90 	vmov	s15, r3
 801540a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801540e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015412:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015416:	9805      	ldr	r0, [sp, #20]
 8015418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801541c:	2701      	movs	r7, #1
 801541e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8015422:	e7a5      	b.n	8015370 <_dtoa_r+0x100>
 8015424:	9a02      	ldr	r2, [sp, #8]
 8015426:	f1c3 0320 	rsb	r3, r3, #32
 801542a:	fa02 f303 	lsl.w	r3, r2, r3
 801542e:	e7ea      	b.n	8015406 <_dtoa_r+0x196>
 8015430:	2301      	movs	r3, #1
 8015432:	eba1 0a0a 	sub.w	sl, r1, sl
 8015436:	9310      	str	r3, [sp, #64]	; 0x40
 8015438:	f1ba 0301 	subs.w	r3, sl, #1
 801543c:	9307      	str	r3, [sp, #28]
 801543e:	bf43      	ittte	mi
 8015440:	2300      	movmi	r3, #0
 8015442:	f1ca 0a01 	rsbmi	sl, sl, #1
 8015446:	9307      	strmi	r3, [sp, #28]
 8015448:	f04f 0a00 	movpl.w	sl, #0
 801544c:	f1bb 0f00 	cmp.w	fp, #0
 8015450:	db19      	blt.n	8015486 <_dtoa_r+0x216>
 8015452:	9b07      	ldr	r3, [sp, #28]
 8015454:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8015458:	445b      	add	r3, fp
 801545a:	9307      	str	r3, [sp, #28]
 801545c:	f04f 0800 	mov.w	r8, #0
 8015460:	9b08      	ldr	r3, [sp, #32]
 8015462:	2b09      	cmp	r3, #9
 8015464:	d866      	bhi.n	8015534 <_dtoa_r+0x2c4>
 8015466:	2b05      	cmp	r3, #5
 8015468:	bfc4      	itt	gt
 801546a:	3b04      	subgt	r3, #4
 801546c:	9308      	strgt	r3, [sp, #32]
 801546e:	9b08      	ldr	r3, [sp, #32]
 8015470:	f1a3 0302 	sub.w	r3, r3, #2
 8015474:	bfcc      	ite	gt
 8015476:	2500      	movgt	r5, #0
 8015478:	2501      	movle	r5, #1
 801547a:	2b03      	cmp	r3, #3
 801547c:	d866      	bhi.n	801554c <_dtoa_r+0x2dc>
 801547e:	e8df f003 	tbb	[pc, r3]
 8015482:	5755      	.short	0x5755
 8015484:	4909      	.short	0x4909
 8015486:	2300      	movs	r3, #0
 8015488:	ebaa 0a0b 	sub.w	sl, sl, fp
 801548c:	f1cb 0800 	rsb	r8, fp, #0
 8015490:	930b      	str	r3, [sp, #44]	; 0x2c
 8015492:	e7e5      	b.n	8015460 <_dtoa_r+0x1f0>
 8015494:	2301      	movs	r3, #1
 8015496:	9309      	str	r3, [sp, #36]	; 0x24
 8015498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801549a:	2b00      	cmp	r3, #0
 801549c:	dd59      	ble.n	8015552 <_dtoa_r+0x2e2>
 801549e:	9306      	str	r3, [sp, #24]
 80154a0:	4699      	mov	r9, r3
 80154a2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80154a4:	2200      	movs	r2, #0
 80154a6:	6072      	str	r2, [r6, #4]
 80154a8:	2204      	movs	r2, #4
 80154aa:	f102 0014 	add.w	r0, r2, #20
 80154ae:	4298      	cmp	r0, r3
 80154b0:	6871      	ldr	r1, [r6, #4]
 80154b2:	d953      	bls.n	801555c <_dtoa_r+0x2ec>
 80154b4:	4620      	mov	r0, r4
 80154b6:	f001 f959 	bl	801676c <_Balloc>
 80154ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80154bc:	6030      	str	r0, [r6, #0]
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	9304      	str	r3, [sp, #16]
 80154c2:	f1b9 0f0e 	cmp.w	r9, #14
 80154c6:	f200 80c2 	bhi.w	801564e <_dtoa_r+0x3de>
 80154ca:	2d00      	cmp	r5, #0
 80154cc:	f000 80bf 	beq.w	801564e <_dtoa_r+0x3de>
 80154d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80154d4:	f1bb 0f00 	cmp.w	fp, #0
 80154d8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80154dc:	f340 80e6 	ble.w	80156ac <_dtoa_r+0x43c>
 80154e0:	4a2b      	ldr	r2, [pc, #172]	; (8015590 <_dtoa_r+0x320>)
 80154e2:	f00b 030f 	and.w	r3, fp, #15
 80154e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80154ea:	ed93 7b00 	vldr	d7, [r3]
 80154ee:	ea4f 132b 	mov.w	r3, fp, asr #4
 80154f2:	06da      	lsls	r2, r3, #27
 80154f4:	f140 80d8 	bpl.w	80156a8 <_dtoa_r+0x438>
 80154f8:	4a26      	ldr	r2, [pc, #152]	; (8015594 <_dtoa_r+0x324>)
 80154fa:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80154fe:	ed92 6b08 	vldr	d6, [r2, #32]
 8015502:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8015506:	ed8d 6b02 	vstr	d6, [sp, #8]
 801550a:	f003 030f 	and.w	r3, r3, #15
 801550e:	2203      	movs	r2, #3
 8015510:	4920      	ldr	r1, [pc, #128]	; (8015594 <_dtoa_r+0x324>)
 8015512:	e04a      	b.n	80155aa <_dtoa_r+0x33a>
 8015514:	2301      	movs	r3, #1
 8015516:	9309      	str	r3, [sp, #36]	; 0x24
 8015518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801551a:	445b      	add	r3, fp
 801551c:	f103 0901 	add.w	r9, r3, #1
 8015520:	9306      	str	r3, [sp, #24]
 8015522:	464b      	mov	r3, r9
 8015524:	2b01      	cmp	r3, #1
 8015526:	bfb8      	it	lt
 8015528:	2301      	movlt	r3, #1
 801552a:	e7ba      	b.n	80154a2 <_dtoa_r+0x232>
 801552c:	2300      	movs	r3, #0
 801552e:	e7b2      	b.n	8015496 <_dtoa_r+0x226>
 8015530:	2300      	movs	r3, #0
 8015532:	e7f0      	b.n	8015516 <_dtoa_r+0x2a6>
 8015534:	2501      	movs	r5, #1
 8015536:	2300      	movs	r3, #0
 8015538:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801553c:	f04f 33ff 	mov.w	r3, #4294967295
 8015540:	9306      	str	r3, [sp, #24]
 8015542:	4699      	mov	r9, r3
 8015544:	2200      	movs	r2, #0
 8015546:	2312      	movs	r3, #18
 8015548:	920a      	str	r2, [sp, #40]	; 0x28
 801554a:	e7aa      	b.n	80154a2 <_dtoa_r+0x232>
 801554c:	2301      	movs	r3, #1
 801554e:	9309      	str	r3, [sp, #36]	; 0x24
 8015550:	e7f4      	b.n	801553c <_dtoa_r+0x2cc>
 8015552:	2301      	movs	r3, #1
 8015554:	9306      	str	r3, [sp, #24]
 8015556:	4699      	mov	r9, r3
 8015558:	461a      	mov	r2, r3
 801555a:	e7f5      	b.n	8015548 <_dtoa_r+0x2d8>
 801555c:	3101      	adds	r1, #1
 801555e:	6071      	str	r1, [r6, #4]
 8015560:	0052      	lsls	r2, r2, #1
 8015562:	e7a2      	b.n	80154aa <_dtoa_r+0x23a>
 8015564:	f3af 8000 	nop.w
 8015568:	636f4361 	.word	0x636f4361
 801556c:	3fd287a7 	.word	0x3fd287a7
 8015570:	8b60c8b3 	.word	0x8b60c8b3
 8015574:	3fc68a28 	.word	0x3fc68a28
 8015578:	509f79fb 	.word	0x509f79fb
 801557c:	3fd34413 	.word	0x3fd34413
 8015580:	7ff00000 	.word	0x7ff00000
 8015584:	080185e1 	.word	0x080185e1
 8015588:	080185d8 	.word	0x080185d8
 801558c:	08018559 	.word	0x08018559
 8015590:	08018680 	.word	0x08018680
 8015594:	08018658 	.word	0x08018658
 8015598:	07de      	lsls	r6, r3, #31
 801559a:	d504      	bpl.n	80155a6 <_dtoa_r+0x336>
 801559c:	ed91 6b00 	vldr	d6, [r1]
 80155a0:	3201      	adds	r2, #1
 80155a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80155a6:	105b      	asrs	r3, r3, #1
 80155a8:	3108      	adds	r1, #8
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d1f4      	bne.n	8015598 <_dtoa_r+0x328>
 80155ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 80155b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80155b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80155ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80155bc:	2b00      	cmp	r3, #0
 80155be:	f000 80a7 	beq.w	8015710 <_dtoa_r+0x4a0>
 80155c2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80155c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80155ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80155ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155d2:	f140 809d 	bpl.w	8015710 <_dtoa_r+0x4a0>
 80155d6:	f1b9 0f00 	cmp.w	r9, #0
 80155da:	f000 8099 	beq.w	8015710 <_dtoa_r+0x4a0>
 80155de:	9b06      	ldr	r3, [sp, #24]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	dd30      	ble.n	8015646 <_dtoa_r+0x3d6>
 80155e4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80155e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80155ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80155f0:	9d06      	ldr	r5, [sp, #24]
 80155f2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80155f6:	3201      	adds	r2, #1
 80155f8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80155fc:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8015600:	ee07 2a90 	vmov	s15, r2
 8015604:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015608:	eea7 5b06 	vfma.f64	d5, d7, d6
 801560c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8015610:	9a03      	ldr	r2, [sp, #12]
 8015612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015616:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801561a:	2d00      	cmp	r5, #0
 801561c:	d17b      	bne.n	8015716 <_dtoa_r+0x4a6>
 801561e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015622:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015626:	ec41 0b17 	vmov	d7, r0, r1
 801562a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801562e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015632:	f300 8253 	bgt.w	8015adc <_dtoa_r+0x86c>
 8015636:	eeb1 7b47 	vneg.f64	d7, d7
 801563a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801563e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015642:	f100 8249 	bmi.w	8015ad8 <_dtoa_r+0x868>
 8015646:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801564a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801564e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015650:	2b00      	cmp	r3, #0
 8015652:	f2c0 8119 	blt.w	8015888 <_dtoa_r+0x618>
 8015656:	f1bb 0f0e 	cmp.w	fp, #14
 801565a:	f300 8115 	bgt.w	8015888 <_dtoa_r+0x618>
 801565e:	4bc3      	ldr	r3, [pc, #780]	; (801596c <_dtoa_r+0x6fc>)
 8015660:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015664:	ed93 6b00 	vldr	d6, [r3]
 8015668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801566a:	2b00      	cmp	r3, #0
 801566c:	f280 80ba 	bge.w	80157e4 <_dtoa_r+0x574>
 8015670:	f1b9 0f00 	cmp.w	r9, #0
 8015674:	f300 80b6 	bgt.w	80157e4 <_dtoa_r+0x574>
 8015678:	f040 822d 	bne.w	8015ad6 <_dtoa_r+0x866>
 801567c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015680:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015684:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015688:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801568c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015690:	464d      	mov	r5, r9
 8015692:	464f      	mov	r7, r9
 8015694:	f280 8204 	bge.w	8015aa0 <_dtoa_r+0x830>
 8015698:	9b04      	ldr	r3, [sp, #16]
 801569a:	9a04      	ldr	r2, [sp, #16]
 801569c:	1c5e      	adds	r6, r3, #1
 801569e:	2331      	movs	r3, #49	; 0x31
 80156a0:	7013      	strb	r3, [r2, #0]
 80156a2:	f10b 0b01 	add.w	fp, fp, #1
 80156a6:	e1ff      	b.n	8015aa8 <_dtoa_r+0x838>
 80156a8:	2202      	movs	r2, #2
 80156aa:	e731      	b.n	8015510 <_dtoa_r+0x2a0>
 80156ac:	d02e      	beq.n	801570c <_dtoa_r+0x49c>
 80156ae:	f1cb 0300 	rsb	r3, fp, #0
 80156b2:	4aae      	ldr	r2, [pc, #696]	; (801596c <_dtoa_r+0x6fc>)
 80156b4:	f003 010f 	and.w	r1, r3, #15
 80156b8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80156bc:	ed92 7b00 	vldr	d7, [r2]
 80156c0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80156c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80156c8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80156cc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80156d0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80156d4:	49a6      	ldr	r1, [pc, #664]	; (8015970 <_dtoa_r+0x700>)
 80156d6:	111b      	asrs	r3, r3, #4
 80156d8:	2000      	movs	r0, #0
 80156da:	2202      	movs	r2, #2
 80156dc:	b93b      	cbnz	r3, 80156ee <_dtoa_r+0x47e>
 80156de:	2800      	cmp	r0, #0
 80156e0:	f43f af6b 	beq.w	80155ba <_dtoa_r+0x34a>
 80156e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80156e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80156ec:	e765      	b.n	80155ba <_dtoa_r+0x34a>
 80156ee:	07dd      	lsls	r5, r3, #31
 80156f0:	d509      	bpl.n	8015706 <_dtoa_r+0x496>
 80156f2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80156f6:	ed91 7b00 	vldr	d7, [r1]
 80156fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80156fe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8015702:	3201      	adds	r2, #1
 8015704:	2001      	movs	r0, #1
 8015706:	105b      	asrs	r3, r3, #1
 8015708:	3108      	adds	r1, #8
 801570a:	e7e7      	b.n	80156dc <_dtoa_r+0x46c>
 801570c:	2202      	movs	r2, #2
 801570e:	e754      	b.n	80155ba <_dtoa_r+0x34a>
 8015710:	465b      	mov	r3, fp
 8015712:	464d      	mov	r5, r9
 8015714:	e770      	b.n	80155f8 <_dtoa_r+0x388>
 8015716:	4a95      	ldr	r2, [pc, #596]	; (801596c <_dtoa_r+0x6fc>)
 8015718:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801571c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015722:	ec41 0b17 	vmov	d7, r0, r1
 8015726:	b35a      	cbz	r2, 8015780 <_dtoa_r+0x510>
 8015728:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801572c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8015730:	9e04      	ldr	r6, [sp, #16]
 8015732:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015736:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801573a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801573e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015742:	ee14 2a90 	vmov	r2, s9
 8015746:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801574a:	3230      	adds	r2, #48	; 0x30
 801574c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015750:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015758:	f806 2b01 	strb.w	r2, [r6], #1
 801575c:	d43b      	bmi.n	80157d6 <_dtoa_r+0x566>
 801575e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015762:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801576a:	d472      	bmi.n	8015852 <_dtoa_r+0x5e2>
 801576c:	9a04      	ldr	r2, [sp, #16]
 801576e:	1ab2      	subs	r2, r6, r2
 8015770:	4295      	cmp	r5, r2
 8015772:	f77f af68 	ble.w	8015646 <_dtoa_r+0x3d6>
 8015776:	ee27 7b03 	vmul.f64	d7, d7, d3
 801577a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801577e:	e7de      	b.n	801573e <_dtoa_r+0x4ce>
 8015780:	9a04      	ldr	r2, [sp, #16]
 8015782:	ee24 7b07 	vmul.f64	d7, d4, d7
 8015786:	1956      	adds	r6, r2, r5
 8015788:	4611      	mov	r1, r2
 801578a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801578e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015792:	ee14 2a90 	vmov	r2, s9
 8015796:	3230      	adds	r2, #48	; 0x30
 8015798:	f801 2b01 	strb.w	r2, [r1], #1
 801579c:	42b1      	cmp	r1, r6
 801579e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80157a2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80157a6:	d11a      	bne.n	80157de <_dtoa_r+0x56e>
 80157a8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80157ac:	ee37 4b05 	vadd.f64	d4, d7, d5
 80157b0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80157b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157b8:	dc4b      	bgt.n	8015852 <_dtoa_r+0x5e2>
 80157ba:	ee35 7b47 	vsub.f64	d7, d5, d7
 80157be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80157c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157c6:	f57f af3e 	bpl.w	8015646 <_dtoa_r+0x3d6>
 80157ca:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80157ce:	2a30      	cmp	r2, #48	; 0x30
 80157d0:	f106 31ff 	add.w	r1, r6, #4294967295
 80157d4:	d001      	beq.n	80157da <_dtoa_r+0x56a>
 80157d6:	469b      	mov	fp, r3
 80157d8:	e02a      	b.n	8015830 <_dtoa_r+0x5c0>
 80157da:	460e      	mov	r6, r1
 80157dc:	e7f5      	b.n	80157ca <_dtoa_r+0x55a>
 80157de:	ee26 6b03 	vmul.f64	d6, d6, d3
 80157e2:	e7d4      	b.n	801578e <_dtoa_r+0x51e>
 80157e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80157e8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80157ec:	9e04      	ldr	r6, [sp, #16]
 80157ee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80157f2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80157f6:	ee15 3a10 	vmov	r3, s10
 80157fa:	3330      	adds	r3, #48	; 0x30
 80157fc:	f806 3b01 	strb.w	r3, [r6], #1
 8015800:	9b04      	ldr	r3, [sp, #16]
 8015802:	1af3      	subs	r3, r6, r3
 8015804:	4599      	cmp	r9, r3
 8015806:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801580a:	eea3 7b46 	vfms.f64	d7, d3, d6
 801580e:	d133      	bne.n	8015878 <_dtoa_r+0x608>
 8015810:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015814:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801581c:	dc18      	bgt.n	8015850 <_dtoa_r+0x5e0>
 801581e:	eeb4 7b46 	vcmp.f64	d7, d6
 8015822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015826:	d103      	bne.n	8015830 <_dtoa_r+0x5c0>
 8015828:	ee15 3a10 	vmov	r3, s10
 801582c:	07db      	lsls	r3, r3, #31
 801582e:	d40f      	bmi.n	8015850 <_dtoa_r+0x5e0>
 8015830:	9901      	ldr	r1, [sp, #4]
 8015832:	4620      	mov	r0, r4
 8015834:	f000 ffce 	bl	80167d4 <_Bfree>
 8015838:	2300      	movs	r3, #0
 801583a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801583c:	7033      	strb	r3, [r6, #0]
 801583e:	f10b 0301 	add.w	r3, fp, #1
 8015842:	6013      	str	r3, [r2, #0]
 8015844:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015846:	2b00      	cmp	r3, #0
 8015848:	f43f ad5b 	beq.w	8015302 <_dtoa_r+0x92>
 801584c:	601e      	str	r6, [r3, #0]
 801584e:	e558      	b.n	8015302 <_dtoa_r+0x92>
 8015850:	465b      	mov	r3, fp
 8015852:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8015856:	2939      	cmp	r1, #57	; 0x39
 8015858:	f106 32ff 	add.w	r2, r6, #4294967295
 801585c:	d106      	bne.n	801586c <_dtoa_r+0x5fc>
 801585e:	9904      	ldr	r1, [sp, #16]
 8015860:	4291      	cmp	r1, r2
 8015862:	d107      	bne.n	8015874 <_dtoa_r+0x604>
 8015864:	2230      	movs	r2, #48	; 0x30
 8015866:	700a      	strb	r2, [r1, #0]
 8015868:	3301      	adds	r3, #1
 801586a:	460a      	mov	r2, r1
 801586c:	7811      	ldrb	r1, [r2, #0]
 801586e:	3101      	adds	r1, #1
 8015870:	7011      	strb	r1, [r2, #0]
 8015872:	e7b0      	b.n	80157d6 <_dtoa_r+0x566>
 8015874:	4616      	mov	r6, r2
 8015876:	e7ec      	b.n	8015852 <_dtoa_r+0x5e2>
 8015878:	ee27 7b04 	vmul.f64	d7, d7, d4
 801587c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015884:	d1b3      	bne.n	80157ee <_dtoa_r+0x57e>
 8015886:	e7d3      	b.n	8015830 <_dtoa_r+0x5c0>
 8015888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801588a:	2a00      	cmp	r2, #0
 801588c:	f000 808d 	beq.w	80159aa <_dtoa_r+0x73a>
 8015890:	9a08      	ldr	r2, [sp, #32]
 8015892:	2a01      	cmp	r2, #1
 8015894:	dc72      	bgt.n	801597c <_dtoa_r+0x70c>
 8015896:	2f00      	cmp	r7, #0
 8015898:	d06c      	beq.n	8015974 <_dtoa_r+0x704>
 801589a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801589e:	4645      	mov	r5, r8
 80158a0:	4656      	mov	r6, sl
 80158a2:	9a07      	ldr	r2, [sp, #28]
 80158a4:	2101      	movs	r1, #1
 80158a6:	441a      	add	r2, r3
 80158a8:	4620      	mov	r0, r4
 80158aa:	449a      	add	sl, r3
 80158ac:	9207      	str	r2, [sp, #28]
 80158ae:	f001 f86f 	bl	8016990 <__i2b>
 80158b2:	4607      	mov	r7, r0
 80158b4:	2e00      	cmp	r6, #0
 80158b6:	dd0b      	ble.n	80158d0 <_dtoa_r+0x660>
 80158b8:	9b07      	ldr	r3, [sp, #28]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	dd08      	ble.n	80158d0 <_dtoa_r+0x660>
 80158be:	42b3      	cmp	r3, r6
 80158c0:	9a07      	ldr	r2, [sp, #28]
 80158c2:	bfa8      	it	ge
 80158c4:	4633      	movge	r3, r6
 80158c6:	ebaa 0a03 	sub.w	sl, sl, r3
 80158ca:	1af6      	subs	r6, r6, r3
 80158cc:	1ad3      	subs	r3, r2, r3
 80158ce:	9307      	str	r3, [sp, #28]
 80158d0:	f1b8 0f00 	cmp.w	r8, #0
 80158d4:	d01d      	beq.n	8015912 <_dtoa_r+0x6a2>
 80158d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d06a      	beq.n	80159b2 <_dtoa_r+0x742>
 80158dc:	b18d      	cbz	r5, 8015902 <_dtoa_r+0x692>
 80158de:	4639      	mov	r1, r7
 80158e0:	462a      	mov	r2, r5
 80158e2:	4620      	mov	r0, r4
 80158e4:	f001 f8f4 	bl	8016ad0 <__pow5mult>
 80158e8:	9a01      	ldr	r2, [sp, #4]
 80158ea:	4601      	mov	r1, r0
 80158ec:	4607      	mov	r7, r0
 80158ee:	4620      	mov	r0, r4
 80158f0:	f001 f857 	bl	80169a2 <__multiply>
 80158f4:	9901      	ldr	r1, [sp, #4]
 80158f6:	900c      	str	r0, [sp, #48]	; 0x30
 80158f8:	4620      	mov	r0, r4
 80158fa:	f000 ff6b 	bl	80167d4 <_Bfree>
 80158fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015900:	9301      	str	r3, [sp, #4]
 8015902:	ebb8 0205 	subs.w	r2, r8, r5
 8015906:	d004      	beq.n	8015912 <_dtoa_r+0x6a2>
 8015908:	9901      	ldr	r1, [sp, #4]
 801590a:	4620      	mov	r0, r4
 801590c:	f001 f8e0 	bl	8016ad0 <__pow5mult>
 8015910:	9001      	str	r0, [sp, #4]
 8015912:	2101      	movs	r1, #1
 8015914:	4620      	mov	r0, r4
 8015916:	f001 f83b 	bl	8016990 <__i2b>
 801591a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801591c:	4605      	mov	r5, r0
 801591e:	2b00      	cmp	r3, #0
 8015920:	f000 81ca 	beq.w	8015cb8 <_dtoa_r+0xa48>
 8015924:	461a      	mov	r2, r3
 8015926:	4601      	mov	r1, r0
 8015928:	4620      	mov	r0, r4
 801592a:	f001 f8d1 	bl	8016ad0 <__pow5mult>
 801592e:	9b08      	ldr	r3, [sp, #32]
 8015930:	2b01      	cmp	r3, #1
 8015932:	4605      	mov	r5, r0
 8015934:	dc44      	bgt.n	80159c0 <_dtoa_r+0x750>
 8015936:	9b02      	ldr	r3, [sp, #8]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d13c      	bne.n	80159b6 <_dtoa_r+0x746>
 801593c:	9b03      	ldr	r3, [sp, #12]
 801593e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015942:	2b00      	cmp	r3, #0
 8015944:	d137      	bne.n	80159b6 <_dtoa_r+0x746>
 8015946:	9b03      	ldr	r3, [sp, #12]
 8015948:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801594c:	0d1b      	lsrs	r3, r3, #20
 801594e:	051b      	lsls	r3, r3, #20
 8015950:	2b00      	cmp	r3, #0
 8015952:	d033      	beq.n	80159bc <_dtoa_r+0x74c>
 8015954:	9b07      	ldr	r3, [sp, #28]
 8015956:	3301      	adds	r3, #1
 8015958:	f10a 0a01 	add.w	sl, sl, #1
 801595c:	9307      	str	r3, [sp, #28]
 801595e:	f04f 0801 	mov.w	r8, #1
 8015962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015964:	bb73      	cbnz	r3, 80159c4 <_dtoa_r+0x754>
 8015966:	2001      	movs	r0, #1
 8015968:	e034      	b.n	80159d4 <_dtoa_r+0x764>
 801596a:	bf00      	nop
 801596c:	08018680 	.word	0x08018680
 8015970:	08018658 	.word	0x08018658
 8015974:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801597a:	e790      	b.n	801589e <_dtoa_r+0x62e>
 801597c:	f109 35ff 	add.w	r5, r9, #4294967295
 8015980:	45a8      	cmp	r8, r5
 8015982:	bfbf      	itttt	lt
 8015984:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8015986:	eba5 0808 	sublt.w	r8, r5, r8
 801598a:	4443      	addlt	r3, r8
 801598c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801598e:	bfb6      	itet	lt
 8015990:	46a8      	movlt	r8, r5
 8015992:	eba8 0505 	subge.w	r5, r8, r5
 8015996:	2500      	movlt	r5, #0
 8015998:	f1b9 0f00 	cmp.w	r9, #0
 801599c:	bfb9      	ittee	lt
 801599e:	ebaa 0609 	sublt.w	r6, sl, r9
 80159a2:	2300      	movlt	r3, #0
 80159a4:	4656      	movge	r6, sl
 80159a6:	464b      	movge	r3, r9
 80159a8:	e77b      	b.n	80158a2 <_dtoa_r+0x632>
 80159aa:	4645      	mov	r5, r8
 80159ac:	4656      	mov	r6, sl
 80159ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80159b0:	e780      	b.n	80158b4 <_dtoa_r+0x644>
 80159b2:	4642      	mov	r2, r8
 80159b4:	e7a8      	b.n	8015908 <_dtoa_r+0x698>
 80159b6:	f04f 0800 	mov.w	r8, #0
 80159ba:	e7d2      	b.n	8015962 <_dtoa_r+0x6f2>
 80159bc:	4698      	mov	r8, r3
 80159be:	e7d0      	b.n	8015962 <_dtoa_r+0x6f2>
 80159c0:	f04f 0800 	mov.w	r8, #0
 80159c4:	692b      	ldr	r3, [r5, #16]
 80159c6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80159ca:	6918      	ldr	r0, [r3, #16]
 80159cc:	f000 ff92 	bl	80168f4 <__hi0bits>
 80159d0:	f1c0 0020 	rsb	r0, r0, #32
 80159d4:	9b07      	ldr	r3, [sp, #28]
 80159d6:	4418      	add	r0, r3
 80159d8:	f010 001f 	ands.w	r0, r0, #31
 80159dc:	d047      	beq.n	8015a6e <_dtoa_r+0x7fe>
 80159de:	f1c0 0320 	rsb	r3, r0, #32
 80159e2:	2b04      	cmp	r3, #4
 80159e4:	dd3b      	ble.n	8015a5e <_dtoa_r+0x7ee>
 80159e6:	9b07      	ldr	r3, [sp, #28]
 80159e8:	f1c0 001c 	rsb	r0, r0, #28
 80159ec:	4482      	add	sl, r0
 80159ee:	4406      	add	r6, r0
 80159f0:	4403      	add	r3, r0
 80159f2:	9307      	str	r3, [sp, #28]
 80159f4:	f1ba 0f00 	cmp.w	sl, #0
 80159f8:	dd05      	ble.n	8015a06 <_dtoa_r+0x796>
 80159fa:	4652      	mov	r2, sl
 80159fc:	9901      	ldr	r1, [sp, #4]
 80159fe:	4620      	mov	r0, r4
 8015a00:	f001 f8b4 	bl	8016b6c <__lshift>
 8015a04:	9001      	str	r0, [sp, #4]
 8015a06:	9b07      	ldr	r3, [sp, #28]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	dd05      	ble.n	8015a18 <_dtoa_r+0x7a8>
 8015a0c:	4629      	mov	r1, r5
 8015a0e:	461a      	mov	r2, r3
 8015a10:	4620      	mov	r0, r4
 8015a12:	f001 f8ab 	bl	8016b6c <__lshift>
 8015a16:	4605      	mov	r5, r0
 8015a18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a1a:	b353      	cbz	r3, 8015a72 <_dtoa_r+0x802>
 8015a1c:	4629      	mov	r1, r5
 8015a1e:	9801      	ldr	r0, [sp, #4]
 8015a20:	f001 f8f8 	bl	8016c14 <__mcmp>
 8015a24:	2800      	cmp	r0, #0
 8015a26:	da24      	bge.n	8015a72 <_dtoa_r+0x802>
 8015a28:	2300      	movs	r3, #0
 8015a2a:	220a      	movs	r2, #10
 8015a2c:	9901      	ldr	r1, [sp, #4]
 8015a2e:	4620      	mov	r0, r4
 8015a30:	f000 fee7 	bl	8016802 <__multadd>
 8015a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a36:	9001      	str	r0, [sp, #4]
 8015a38:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	f000 8142 	beq.w	8015cc6 <_dtoa_r+0xa56>
 8015a42:	2300      	movs	r3, #0
 8015a44:	4639      	mov	r1, r7
 8015a46:	220a      	movs	r2, #10
 8015a48:	4620      	mov	r0, r4
 8015a4a:	f000 feda 	bl	8016802 <__multadd>
 8015a4e:	9b06      	ldr	r3, [sp, #24]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	4607      	mov	r7, r0
 8015a54:	dc4b      	bgt.n	8015aee <_dtoa_r+0x87e>
 8015a56:	9b08      	ldr	r3, [sp, #32]
 8015a58:	2b02      	cmp	r3, #2
 8015a5a:	dd48      	ble.n	8015aee <_dtoa_r+0x87e>
 8015a5c:	e011      	b.n	8015a82 <_dtoa_r+0x812>
 8015a5e:	d0c9      	beq.n	80159f4 <_dtoa_r+0x784>
 8015a60:	9a07      	ldr	r2, [sp, #28]
 8015a62:	331c      	adds	r3, #28
 8015a64:	441a      	add	r2, r3
 8015a66:	449a      	add	sl, r3
 8015a68:	441e      	add	r6, r3
 8015a6a:	4613      	mov	r3, r2
 8015a6c:	e7c1      	b.n	80159f2 <_dtoa_r+0x782>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	e7f6      	b.n	8015a60 <_dtoa_r+0x7f0>
 8015a72:	f1b9 0f00 	cmp.w	r9, #0
 8015a76:	dc34      	bgt.n	8015ae2 <_dtoa_r+0x872>
 8015a78:	9b08      	ldr	r3, [sp, #32]
 8015a7a:	2b02      	cmp	r3, #2
 8015a7c:	dd31      	ble.n	8015ae2 <_dtoa_r+0x872>
 8015a7e:	f8cd 9018 	str.w	r9, [sp, #24]
 8015a82:	9b06      	ldr	r3, [sp, #24]
 8015a84:	b963      	cbnz	r3, 8015aa0 <_dtoa_r+0x830>
 8015a86:	4629      	mov	r1, r5
 8015a88:	2205      	movs	r2, #5
 8015a8a:	4620      	mov	r0, r4
 8015a8c:	f000 feb9 	bl	8016802 <__multadd>
 8015a90:	4601      	mov	r1, r0
 8015a92:	4605      	mov	r5, r0
 8015a94:	9801      	ldr	r0, [sp, #4]
 8015a96:	f001 f8bd 	bl	8016c14 <__mcmp>
 8015a9a:	2800      	cmp	r0, #0
 8015a9c:	f73f adfc 	bgt.w	8015698 <_dtoa_r+0x428>
 8015aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015aa2:	9e04      	ldr	r6, [sp, #16]
 8015aa4:	ea6f 0b03 	mvn.w	fp, r3
 8015aa8:	f04f 0900 	mov.w	r9, #0
 8015aac:	4629      	mov	r1, r5
 8015aae:	4620      	mov	r0, r4
 8015ab0:	f000 fe90 	bl	80167d4 <_Bfree>
 8015ab4:	2f00      	cmp	r7, #0
 8015ab6:	f43f aebb 	beq.w	8015830 <_dtoa_r+0x5c0>
 8015aba:	f1b9 0f00 	cmp.w	r9, #0
 8015abe:	d005      	beq.n	8015acc <_dtoa_r+0x85c>
 8015ac0:	45b9      	cmp	r9, r7
 8015ac2:	d003      	beq.n	8015acc <_dtoa_r+0x85c>
 8015ac4:	4649      	mov	r1, r9
 8015ac6:	4620      	mov	r0, r4
 8015ac8:	f000 fe84 	bl	80167d4 <_Bfree>
 8015acc:	4639      	mov	r1, r7
 8015ace:	4620      	mov	r0, r4
 8015ad0:	f000 fe80 	bl	80167d4 <_Bfree>
 8015ad4:	e6ac      	b.n	8015830 <_dtoa_r+0x5c0>
 8015ad6:	2500      	movs	r5, #0
 8015ad8:	462f      	mov	r7, r5
 8015ada:	e7e1      	b.n	8015aa0 <_dtoa_r+0x830>
 8015adc:	469b      	mov	fp, r3
 8015ade:	462f      	mov	r7, r5
 8015ae0:	e5da      	b.n	8015698 <_dtoa_r+0x428>
 8015ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ae4:	f8cd 9018 	str.w	r9, [sp, #24]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	f000 80f3 	beq.w	8015cd4 <_dtoa_r+0xa64>
 8015aee:	2e00      	cmp	r6, #0
 8015af0:	dd05      	ble.n	8015afe <_dtoa_r+0x88e>
 8015af2:	4639      	mov	r1, r7
 8015af4:	4632      	mov	r2, r6
 8015af6:	4620      	mov	r0, r4
 8015af8:	f001 f838 	bl	8016b6c <__lshift>
 8015afc:	4607      	mov	r7, r0
 8015afe:	f1b8 0f00 	cmp.w	r8, #0
 8015b02:	d04c      	beq.n	8015b9e <_dtoa_r+0x92e>
 8015b04:	6879      	ldr	r1, [r7, #4]
 8015b06:	4620      	mov	r0, r4
 8015b08:	f000 fe30 	bl	801676c <_Balloc>
 8015b0c:	693a      	ldr	r2, [r7, #16]
 8015b0e:	3202      	adds	r2, #2
 8015b10:	4606      	mov	r6, r0
 8015b12:	0092      	lsls	r2, r2, #2
 8015b14:	f107 010c 	add.w	r1, r7, #12
 8015b18:	300c      	adds	r0, #12
 8015b1a:	f7fd fd2b 	bl	8013574 <memcpy>
 8015b1e:	2201      	movs	r2, #1
 8015b20:	4631      	mov	r1, r6
 8015b22:	4620      	mov	r0, r4
 8015b24:	f001 f822 	bl	8016b6c <__lshift>
 8015b28:	9b02      	ldr	r3, [sp, #8]
 8015b2a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8015b2e:	f003 0301 	and.w	r3, r3, #1
 8015b32:	46b9      	mov	r9, r7
 8015b34:	9307      	str	r3, [sp, #28]
 8015b36:	4607      	mov	r7, r0
 8015b38:	4629      	mov	r1, r5
 8015b3a:	9801      	ldr	r0, [sp, #4]
 8015b3c:	f7ff fb0a 	bl	8015154 <quorem>
 8015b40:	4649      	mov	r1, r9
 8015b42:	4606      	mov	r6, r0
 8015b44:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015b48:	9801      	ldr	r0, [sp, #4]
 8015b4a:	f001 f863 	bl	8016c14 <__mcmp>
 8015b4e:	463a      	mov	r2, r7
 8015b50:	9002      	str	r0, [sp, #8]
 8015b52:	4629      	mov	r1, r5
 8015b54:	4620      	mov	r0, r4
 8015b56:	f001 f877 	bl	8016c48 <__mdiff>
 8015b5a:	68c3      	ldr	r3, [r0, #12]
 8015b5c:	4602      	mov	r2, r0
 8015b5e:	bb03      	cbnz	r3, 8015ba2 <_dtoa_r+0x932>
 8015b60:	4601      	mov	r1, r0
 8015b62:	9009      	str	r0, [sp, #36]	; 0x24
 8015b64:	9801      	ldr	r0, [sp, #4]
 8015b66:	f001 f855 	bl	8016c14 <__mcmp>
 8015b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	4611      	mov	r1, r2
 8015b70:	4620      	mov	r0, r4
 8015b72:	9309      	str	r3, [sp, #36]	; 0x24
 8015b74:	f000 fe2e 	bl	80167d4 <_Bfree>
 8015b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b7a:	b9a3      	cbnz	r3, 8015ba6 <_dtoa_r+0x936>
 8015b7c:	9a08      	ldr	r2, [sp, #32]
 8015b7e:	b992      	cbnz	r2, 8015ba6 <_dtoa_r+0x936>
 8015b80:	9a07      	ldr	r2, [sp, #28]
 8015b82:	b982      	cbnz	r2, 8015ba6 <_dtoa_r+0x936>
 8015b84:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015b88:	d029      	beq.n	8015bde <_dtoa_r+0x96e>
 8015b8a:	9b02      	ldr	r3, [sp, #8]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	dd01      	ble.n	8015b94 <_dtoa_r+0x924>
 8015b90:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8015b94:	f10a 0601 	add.w	r6, sl, #1
 8015b98:	f88a 8000 	strb.w	r8, [sl]
 8015b9c:	e786      	b.n	8015aac <_dtoa_r+0x83c>
 8015b9e:	4638      	mov	r0, r7
 8015ba0:	e7c2      	b.n	8015b28 <_dtoa_r+0x8b8>
 8015ba2:	2301      	movs	r3, #1
 8015ba4:	e7e3      	b.n	8015b6e <_dtoa_r+0x8fe>
 8015ba6:	9a02      	ldr	r2, [sp, #8]
 8015ba8:	2a00      	cmp	r2, #0
 8015baa:	db04      	blt.n	8015bb6 <_dtoa_r+0x946>
 8015bac:	d124      	bne.n	8015bf8 <_dtoa_r+0x988>
 8015bae:	9a08      	ldr	r2, [sp, #32]
 8015bb0:	bb12      	cbnz	r2, 8015bf8 <_dtoa_r+0x988>
 8015bb2:	9a07      	ldr	r2, [sp, #28]
 8015bb4:	bb02      	cbnz	r2, 8015bf8 <_dtoa_r+0x988>
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	ddec      	ble.n	8015b94 <_dtoa_r+0x924>
 8015bba:	2201      	movs	r2, #1
 8015bbc:	9901      	ldr	r1, [sp, #4]
 8015bbe:	4620      	mov	r0, r4
 8015bc0:	f000 ffd4 	bl	8016b6c <__lshift>
 8015bc4:	4629      	mov	r1, r5
 8015bc6:	9001      	str	r0, [sp, #4]
 8015bc8:	f001 f824 	bl	8016c14 <__mcmp>
 8015bcc:	2800      	cmp	r0, #0
 8015bce:	dc03      	bgt.n	8015bd8 <_dtoa_r+0x968>
 8015bd0:	d1e0      	bne.n	8015b94 <_dtoa_r+0x924>
 8015bd2:	f018 0f01 	tst.w	r8, #1
 8015bd6:	d0dd      	beq.n	8015b94 <_dtoa_r+0x924>
 8015bd8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015bdc:	d1d8      	bne.n	8015b90 <_dtoa_r+0x920>
 8015bde:	2339      	movs	r3, #57	; 0x39
 8015be0:	f10a 0601 	add.w	r6, sl, #1
 8015be4:	f88a 3000 	strb.w	r3, [sl]
 8015be8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015bec:	2b39      	cmp	r3, #57	; 0x39
 8015bee:	f106 32ff 	add.w	r2, r6, #4294967295
 8015bf2:	d04c      	beq.n	8015c8e <_dtoa_r+0xa1e>
 8015bf4:	3301      	adds	r3, #1
 8015bf6:	e051      	b.n	8015c9c <_dtoa_r+0xa2c>
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	f10a 0601 	add.w	r6, sl, #1
 8015bfe:	dd05      	ble.n	8015c0c <_dtoa_r+0x99c>
 8015c00:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015c04:	d0eb      	beq.n	8015bde <_dtoa_r+0x96e>
 8015c06:	f108 0801 	add.w	r8, r8, #1
 8015c0a:	e7c5      	b.n	8015b98 <_dtoa_r+0x928>
 8015c0c:	9b04      	ldr	r3, [sp, #16]
 8015c0e:	9a06      	ldr	r2, [sp, #24]
 8015c10:	f806 8c01 	strb.w	r8, [r6, #-1]
 8015c14:	1af3      	subs	r3, r6, r3
 8015c16:	4293      	cmp	r3, r2
 8015c18:	d021      	beq.n	8015c5e <_dtoa_r+0x9ee>
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	220a      	movs	r2, #10
 8015c1e:	9901      	ldr	r1, [sp, #4]
 8015c20:	4620      	mov	r0, r4
 8015c22:	f000 fdee 	bl	8016802 <__multadd>
 8015c26:	45b9      	cmp	r9, r7
 8015c28:	9001      	str	r0, [sp, #4]
 8015c2a:	f04f 0300 	mov.w	r3, #0
 8015c2e:	f04f 020a 	mov.w	r2, #10
 8015c32:	4649      	mov	r1, r9
 8015c34:	4620      	mov	r0, r4
 8015c36:	d105      	bne.n	8015c44 <_dtoa_r+0x9d4>
 8015c38:	f000 fde3 	bl	8016802 <__multadd>
 8015c3c:	4681      	mov	r9, r0
 8015c3e:	4607      	mov	r7, r0
 8015c40:	46b2      	mov	sl, r6
 8015c42:	e779      	b.n	8015b38 <_dtoa_r+0x8c8>
 8015c44:	f000 fddd 	bl	8016802 <__multadd>
 8015c48:	4639      	mov	r1, r7
 8015c4a:	4681      	mov	r9, r0
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	220a      	movs	r2, #10
 8015c50:	4620      	mov	r0, r4
 8015c52:	f000 fdd6 	bl	8016802 <__multadd>
 8015c56:	4607      	mov	r7, r0
 8015c58:	e7f2      	b.n	8015c40 <_dtoa_r+0x9d0>
 8015c5a:	f04f 0900 	mov.w	r9, #0
 8015c5e:	2201      	movs	r2, #1
 8015c60:	9901      	ldr	r1, [sp, #4]
 8015c62:	4620      	mov	r0, r4
 8015c64:	f000 ff82 	bl	8016b6c <__lshift>
 8015c68:	4629      	mov	r1, r5
 8015c6a:	9001      	str	r0, [sp, #4]
 8015c6c:	f000 ffd2 	bl	8016c14 <__mcmp>
 8015c70:	2800      	cmp	r0, #0
 8015c72:	dcb9      	bgt.n	8015be8 <_dtoa_r+0x978>
 8015c74:	d102      	bne.n	8015c7c <_dtoa_r+0xa0c>
 8015c76:	f018 0f01 	tst.w	r8, #1
 8015c7a:	d1b5      	bne.n	8015be8 <_dtoa_r+0x978>
 8015c7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015c80:	2b30      	cmp	r3, #48	; 0x30
 8015c82:	f106 32ff 	add.w	r2, r6, #4294967295
 8015c86:	f47f af11 	bne.w	8015aac <_dtoa_r+0x83c>
 8015c8a:	4616      	mov	r6, r2
 8015c8c:	e7f6      	b.n	8015c7c <_dtoa_r+0xa0c>
 8015c8e:	9b04      	ldr	r3, [sp, #16]
 8015c90:	4293      	cmp	r3, r2
 8015c92:	d105      	bne.n	8015ca0 <_dtoa_r+0xa30>
 8015c94:	9a04      	ldr	r2, [sp, #16]
 8015c96:	f10b 0b01 	add.w	fp, fp, #1
 8015c9a:	2331      	movs	r3, #49	; 0x31
 8015c9c:	7013      	strb	r3, [r2, #0]
 8015c9e:	e705      	b.n	8015aac <_dtoa_r+0x83c>
 8015ca0:	4616      	mov	r6, r2
 8015ca2:	e7a1      	b.n	8015be8 <_dtoa_r+0x978>
 8015ca4:	4b16      	ldr	r3, [pc, #88]	; (8015d00 <_dtoa_r+0xa90>)
 8015ca6:	f7ff bb48 	b.w	801533a <_dtoa_r+0xca>
 8015caa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	f47f ab23 	bne.w	80152f8 <_dtoa_r+0x88>
 8015cb2:	4b14      	ldr	r3, [pc, #80]	; (8015d04 <_dtoa_r+0xa94>)
 8015cb4:	f7ff bb41 	b.w	801533a <_dtoa_r+0xca>
 8015cb8:	9b08      	ldr	r3, [sp, #32]
 8015cba:	2b01      	cmp	r3, #1
 8015cbc:	f77f ae3b 	ble.w	8015936 <_dtoa_r+0x6c6>
 8015cc0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8015cc4:	e64f      	b.n	8015966 <_dtoa_r+0x6f6>
 8015cc6:	9b06      	ldr	r3, [sp, #24]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	dc03      	bgt.n	8015cd4 <_dtoa_r+0xa64>
 8015ccc:	9b08      	ldr	r3, [sp, #32]
 8015cce:	2b02      	cmp	r3, #2
 8015cd0:	f73f aed7 	bgt.w	8015a82 <_dtoa_r+0x812>
 8015cd4:	9e04      	ldr	r6, [sp, #16]
 8015cd6:	9801      	ldr	r0, [sp, #4]
 8015cd8:	4629      	mov	r1, r5
 8015cda:	f7ff fa3b 	bl	8015154 <quorem>
 8015cde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015ce2:	f806 8b01 	strb.w	r8, [r6], #1
 8015ce6:	9b04      	ldr	r3, [sp, #16]
 8015ce8:	9a06      	ldr	r2, [sp, #24]
 8015cea:	1af3      	subs	r3, r6, r3
 8015cec:	429a      	cmp	r2, r3
 8015cee:	ddb4      	ble.n	8015c5a <_dtoa_r+0x9ea>
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	220a      	movs	r2, #10
 8015cf4:	9901      	ldr	r1, [sp, #4]
 8015cf6:	4620      	mov	r0, r4
 8015cf8:	f000 fd83 	bl	8016802 <__multadd>
 8015cfc:	9001      	str	r0, [sp, #4]
 8015cfe:	e7ea      	b.n	8015cd6 <_dtoa_r+0xa66>
 8015d00:	08018558 	.word	0x08018558
 8015d04:	080185d8 	.word	0x080185d8

08015d08 <__sflush_r>:
 8015d08:	898a      	ldrh	r2, [r1, #12]
 8015d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d0e:	4605      	mov	r5, r0
 8015d10:	0710      	lsls	r0, r2, #28
 8015d12:	460c      	mov	r4, r1
 8015d14:	d458      	bmi.n	8015dc8 <__sflush_r+0xc0>
 8015d16:	684b      	ldr	r3, [r1, #4]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	dc05      	bgt.n	8015d28 <__sflush_r+0x20>
 8015d1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	dc02      	bgt.n	8015d28 <__sflush_r+0x20>
 8015d22:	2000      	movs	r0, #0
 8015d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d2a:	2e00      	cmp	r6, #0
 8015d2c:	d0f9      	beq.n	8015d22 <__sflush_r+0x1a>
 8015d2e:	2300      	movs	r3, #0
 8015d30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015d34:	682f      	ldr	r7, [r5, #0]
 8015d36:	6a21      	ldr	r1, [r4, #32]
 8015d38:	602b      	str	r3, [r5, #0]
 8015d3a:	d032      	beq.n	8015da2 <__sflush_r+0x9a>
 8015d3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015d3e:	89a3      	ldrh	r3, [r4, #12]
 8015d40:	075a      	lsls	r2, r3, #29
 8015d42:	d505      	bpl.n	8015d50 <__sflush_r+0x48>
 8015d44:	6863      	ldr	r3, [r4, #4]
 8015d46:	1ac0      	subs	r0, r0, r3
 8015d48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015d4a:	b10b      	cbz	r3, 8015d50 <__sflush_r+0x48>
 8015d4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015d4e:	1ac0      	subs	r0, r0, r3
 8015d50:	2300      	movs	r3, #0
 8015d52:	4602      	mov	r2, r0
 8015d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d56:	6a21      	ldr	r1, [r4, #32]
 8015d58:	4628      	mov	r0, r5
 8015d5a:	47b0      	blx	r6
 8015d5c:	1c43      	adds	r3, r0, #1
 8015d5e:	89a3      	ldrh	r3, [r4, #12]
 8015d60:	d106      	bne.n	8015d70 <__sflush_r+0x68>
 8015d62:	6829      	ldr	r1, [r5, #0]
 8015d64:	291d      	cmp	r1, #29
 8015d66:	d848      	bhi.n	8015dfa <__sflush_r+0xf2>
 8015d68:	4a29      	ldr	r2, [pc, #164]	; (8015e10 <__sflush_r+0x108>)
 8015d6a:	40ca      	lsrs	r2, r1
 8015d6c:	07d6      	lsls	r6, r2, #31
 8015d6e:	d544      	bpl.n	8015dfa <__sflush_r+0xf2>
 8015d70:	2200      	movs	r2, #0
 8015d72:	6062      	str	r2, [r4, #4]
 8015d74:	04d9      	lsls	r1, r3, #19
 8015d76:	6922      	ldr	r2, [r4, #16]
 8015d78:	6022      	str	r2, [r4, #0]
 8015d7a:	d504      	bpl.n	8015d86 <__sflush_r+0x7e>
 8015d7c:	1c42      	adds	r2, r0, #1
 8015d7e:	d101      	bne.n	8015d84 <__sflush_r+0x7c>
 8015d80:	682b      	ldr	r3, [r5, #0]
 8015d82:	b903      	cbnz	r3, 8015d86 <__sflush_r+0x7e>
 8015d84:	6560      	str	r0, [r4, #84]	; 0x54
 8015d86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d88:	602f      	str	r7, [r5, #0]
 8015d8a:	2900      	cmp	r1, #0
 8015d8c:	d0c9      	beq.n	8015d22 <__sflush_r+0x1a>
 8015d8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d92:	4299      	cmp	r1, r3
 8015d94:	d002      	beq.n	8015d9c <__sflush_r+0x94>
 8015d96:	4628      	mov	r0, r5
 8015d98:	f001 f8f6 	bl	8016f88 <_free_r>
 8015d9c:	2000      	movs	r0, #0
 8015d9e:	6360      	str	r0, [r4, #52]	; 0x34
 8015da0:	e7c0      	b.n	8015d24 <__sflush_r+0x1c>
 8015da2:	2301      	movs	r3, #1
 8015da4:	4628      	mov	r0, r5
 8015da6:	47b0      	blx	r6
 8015da8:	1c41      	adds	r1, r0, #1
 8015daa:	d1c8      	bne.n	8015d3e <__sflush_r+0x36>
 8015dac:	682b      	ldr	r3, [r5, #0]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d0c5      	beq.n	8015d3e <__sflush_r+0x36>
 8015db2:	2b1d      	cmp	r3, #29
 8015db4:	d001      	beq.n	8015dba <__sflush_r+0xb2>
 8015db6:	2b16      	cmp	r3, #22
 8015db8:	d101      	bne.n	8015dbe <__sflush_r+0xb6>
 8015dba:	602f      	str	r7, [r5, #0]
 8015dbc:	e7b1      	b.n	8015d22 <__sflush_r+0x1a>
 8015dbe:	89a3      	ldrh	r3, [r4, #12]
 8015dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015dc4:	81a3      	strh	r3, [r4, #12]
 8015dc6:	e7ad      	b.n	8015d24 <__sflush_r+0x1c>
 8015dc8:	690f      	ldr	r7, [r1, #16]
 8015dca:	2f00      	cmp	r7, #0
 8015dcc:	d0a9      	beq.n	8015d22 <__sflush_r+0x1a>
 8015dce:	0793      	lsls	r3, r2, #30
 8015dd0:	680e      	ldr	r6, [r1, #0]
 8015dd2:	bf08      	it	eq
 8015dd4:	694b      	ldreq	r3, [r1, #20]
 8015dd6:	600f      	str	r7, [r1, #0]
 8015dd8:	bf18      	it	ne
 8015dda:	2300      	movne	r3, #0
 8015ddc:	eba6 0807 	sub.w	r8, r6, r7
 8015de0:	608b      	str	r3, [r1, #8]
 8015de2:	f1b8 0f00 	cmp.w	r8, #0
 8015de6:	dd9c      	ble.n	8015d22 <__sflush_r+0x1a>
 8015de8:	4643      	mov	r3, r8
 8015dea:	463a      	mov	r2, r7
 8015dec:	6a21      	ldr	r1, [r4, #32]
 8015dee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015df0:	4628      	mov	r0, r5
 8015df2:	47b0      	blx	r6
 8015df4:	2800      	cmp	r0, #0
 8015df6:	dc06      	bgt.n	8015e06 <__sflush_r+0xfe>
 8015df8:	89a3      	ldrh	r3, [r4, #12]
 8015dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015dfe:	81a3      	strh	r3, [r4, #12]
 8015e00:	f04f 30ff 	mov.w	r0, #4294967295
 8015e04:	e78e      	b.n	8015d24 <__sflush_r+0x1c>
 8015e06:	4407      	add	r7, r0
 8015e08:	eba8 0800 	sub.w	r8, r8, r0
 8015e0c:	e7e9      	b.n	8015de2 <__sflush_r+0xda>
 8015e0e:	bf00      	nop
 8015e10:	20400001 	.word	0x20400001

08015e14 <_fflush_r>:
 8015e14:	b538      	push	{r3, r4, r5, lr}
 8015e16:	690b      	ldr	r3, [r1, #16]
 8015e18:	4605      	mov	r5, r0
 8015e1a:	460c      	mov	r4, r1
 8015e1c:	b1db      	cbz	r3, 8015e56 <_fflush_r+0x42>
 8015e1e:	b118      	cbz	r0, 8015e28 <_fflush_r+0x14>
 8015e20:	6983      	ldr	r3, [r0, #24]
 8015e22:	b90b      	cbnz	r3, 8015e28 <_fflush_r+0x14>
 8015e24:	f000 f860 	bl	8015ee8 <__sinit>
 8015e28:	4b0c      	ldr	r3, [pc, #48]	; (8015e5c <_fflush_r+0x48>)
 8015e2a:	429c      	cmp	r4, r3
 8015e2c:	d109      	bne.n	8015e42 <_fflush_r+0x2e>
 8015e2e:	686c      	ldr	r4, [r5, #4]
 8015e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e34:	b17b      	cbz	r3, 8015e56 <_fflush_r+0x42>
 8015e36:	4621      	mov	r1, r4
 8015e38:	4628      	mov	r0, r5
 8015e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e3e:	f7ff bf63 	b.w	8015d08 <__sflush_r>
 8015e42:	4b07      	ldr	r3, [pc, #28]	; (8015e60 <_fflush_r+0x4c>)
 8015e44:	429c      	cmp	r4, r3
 8015e46:	d101      	bne.n	8015e4c <_fflush_r+0x38>
 8015e48:	68ac      	ldr	r4, [r5, #8]
 8015e4a:	e7f1      	b.n	8015e30 <_fflush_r+0x1c>
 8015e4c:	4b05      	ldr	r3, [pc, #20]	; (8015e64 <_fflush_r+0x50>)
 8015e4e:	429c      	cmp	r4, r3
 8015e50:	bf08      	it	eq
 8015e52:	68ec      	ldreq	r4, [r5, #12]
 8015e54:	e7ec      	b.n	8015e30 <_fflush_r+0x1c>
 8015e56:	2000      	movs	r0, #0
 8015e58:	bd38      	pop	{r3, r4, r5, pc}
 8015e5a:	bf00      	nop
 8015e5c:	08018608 	.word	0x08018608
 8015e60:	08018628 	.word	0x08018628
 8015e64:	080185e8 	.word	0x080185e8

08015e68 <std>:
 8015e68:	2300      	movs	r3, #0
 8015e6a:	b510      	push	{r4, lr}
 8015e6c:	4604      	mov	r4, r0
 8015e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8015e72:	6083      	str	r3, [r0, #8]
 8015e74:	8181      	strh	r1, [r0, #12]
 8015e76:	6643      	str	r3, [r0, #100]	; 0x64
 8015e78:	81c2      	strh	r2, [r0, #14]
 8015e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015e7e:	6183      	str	r3, [r0, #24]
 8015e80:	4619      	mov	r1, r3
 8015e82:	2208      	movs	r2, #8
 8015e84:	305c      	adds	r0, #92	; 0x5c
 8015e86:	f7fd fb80 	bl	801358a <memset>
 8015e8a:	4b05      	ldr	r3, [pc, #20]	; (8015ea0 <std+0x38>)
 8015e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8015e8e:	4b05      	ldr	r3, [pc, #20]	; (8015ea4 <std+0x3c>)
 8015e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8015e92:	4b05      	ldr	r3, [pc, #20]	; (8015ea8 <std+0x40>)
 8015e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015e96:	4b05      	ldr	r3, [pc, #20]	; (8015eac <std+0x44>)
 8015e98:	6224      	str	r4, [r4, #32]
 8015e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8015e9c:	bd10      	pop	{r4, pc}
 8015e9e:	bf00      	nop
 8015ea0:	0801739d 	.word	0x0801739d
 8015ea4:	080173bf 	.word	0x080173bf
 8015ea8:	080173f7 	.word	0x080173f7
 8015eac:	0801741b 	.word	0x0801741b

08015eb0 <_cleanup_r>:
 8015eb0:	4901      	ldr	r1, [pc, #4]	; (8015eb8 <_cleanup_r+0x8>)
 8015eb2:	f000 b885 	b.w	8015fc0 <_fwalk_reent>
 8015eb6:	bf00      	nop
 8015eb8:	08015e15 	.word	0x08015e15

08015ebc <__sfmoreglue>:
 8015ebc:	b570      	push	{r4, r5, r6, lr}
 8015ebe:	1e4a      	subs	r2, r1, #1
 8015ec0:	2568      	movs	r5, #104	; 0x68
 8015ec2:	4355      	muls	r5, r2
 8015ec4:	460e      	mov	r6, r1
 8015ec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015eca:	f001 f8ab 	bl	8017024 <_malloc_r>
 8015ece:	4604      	mov	r4, r0
 8015ed0:	b140      	cbz	r0, 8015ee4 <__sfmoreglue+0x28>
 8015ed2:	2100      	movs	r1, #0
 8015ed4:	e9c0 1600 	strd	r1, r6, [r0]
 8015ed8:	300c      	adds	r0, #12
 8015eda:	60a0      	str	r0, [r4, #8]
 8015edc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015ee0:	f7fd fb53 	bl	801358a <memset>
 8015ee4:	4620      	mov	r0, r4
 8015ee6:	bd70      	pop	{r4, r5, r6, pc}

08015ee8 <__sinit>:
 8015ee8:	6983      	ldr	r3, [r0, #24]
 8015eea:	b510      	push	{r4, lr}
 8015eec:	4604      	mov	r4, r0
 8015eee:	bb33      	cbnz	r3, 8015f3e <__sinit+0x56>
 8015ef0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015ef4:	6503      	str	r3, [r0, #80]	; 0x50
 8015ef6:	4b12      	ldr	r3, [pc, #72]	; (8015f40 <__sinit+0x58>)
 8015ef8:	4a12      	ldr	r2, [pc, #72]	; (8015f44 <__sinit+0x5c>)
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	6282      	str	r2, [r0, #40]	; 0x28
 8015efe:	4298      	cmp	r0, r3
 8015f00:	bf04      	itt	eq
 8015f02:	2301      	moveq	r3, #1
 8015f04:	6183      	streq	r3, [r0, #24]
 8015f06:	f000 f81f 	bl	8015f48 <__sfp>
 8015f0a:	6060      	str	r0, [r4, #4]
 8015f0c:	4620      	mov	r0, r4
 8015f0e:	f000 f81b 	bl	8015f48 <__sfp>
 8015f12:	60a0      	str	r0, [r4, #8]
 8015f14:	4620      	mov	r0, r4
 8015f16:	f000 f817 	bl	8015f48 <__sfp>
 8015f1a:	2200      	movs	r2, #0
 8015f1c:	60e0      	str	r0, [r4, #12]
 8015f1e:	2104      	movs	r1, #4
 8015f20:	6860      	ldr	r0, [r4, #4]
 8015f22:	f7ff ffa1 	bl	8015e68 <std>
 8015f26:	2201      	movs	r2, #1
 8015f28:	2109      	movs	r1, #9
 8015f2a:	68a0      	ldr	r0, [r4, #8]
 8015f2c:	f7ff ff9c 	bl	8015e68 <std>
 8015f30:	2202      	movs	r2, #2
 8015f32:	2112      	movs	r1, #18
 8015f34:	68e0      	ldr	r0, [r4, #12]
 8015f36:	f7ff ff97 	bl	8015e68 <std>
 8015f3a:	2301      	movs	r3, #1
 8015f3c:	61a3      	str	r3, [r4, #24]
 8015f3e:	bd10      	pop	{r4, pc}
 8015f40:	08018544 	.word	0x08018544
 8015f44:	08015eb1 	.word	0x08015eb1

08015f48 <__sfp>:
 8015f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f4a:	4b1b      	ldr	r3, [pc, #108]	; (8015fb8 <__sfp+0x70>)
 8015f4c:	681e      	ldr	r6, [r3, #0]
 8015f4e:	69b3      	ldr	r3, [r6, #24]
 8015f50:	4607      	mov	r7, r0
 8015f52:	b913      	cbnz	r3, 8015f5a <__sfp+0x12>
 8015f54:	4630      	mov	r0, r6
 8015f56:	f7ff ffc7 	bl	8015ee8 <__sinit>
 8015f5a:	3648      	adds	r6, #72	; 0x48
 8015f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015f60:	3b01      	subs	r3, #1
 8015f62:	d503      	bpl.n	8015f6c <__sfp+0x24>
 8015f64:	6833      	ldr	r3, [r6, #0]
 8015f66:	b133      	cbz	r3, 8015f76 <__sfp+0x2e>
 8015f68:	6836      	ldr	r6, [r6, #0]
 8015f6a:	e7f7      	b.n	8015f5c <__sfp+0x14>
 8015f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015f70:	b16d      	cbz	r5, 8015f8e <__sfp+0x46>
 8015f72:	3468      	adds	r4, #104	; 0x68
 8015f74:	e7f4      	b.n	8015f60 <__sfp+0x18>
 8015f76:	2104      	movs	r1, #4
 8015f78:	4638      	mov	r0, r7
 8015f7a:	f7ff ff9f 	bl	8015ebc <__sfmoreglue>
 8015f7e:	6030      	str	r0, [r6, #0]
 8015f80:	2800      	cmp	r0, #0
 8015f82:	d1f1      	bne.n	8015f68 <__sfp+0x20>
 8015f84:	230c      	movs	r3, #12
 8015f86:	603b      	str	r3, [r7, #0]
 8015f88:	4604      	mov	r4, r0
 8015f8a:	4620      	mov	r0, r4
 8015f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f8e:	4b0b      	ldr	r3, [pc, #44]	; (8015fbc <__sfp+0x74>)
 8015f90:	6665      	str	r5, [r4, #100]	; 0x64
 8015f92:	e9c4 5500 	strd	r5, r5, [r4]
 8015f96:	60a5      	str	r5, [r4, #8]
 8015f98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015f9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015fa0:	2208      	movs	r2, #8
 8015fa2:	4629      	mov	r1, r5
 8015fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015fa8:	f7fd faef 	bl	801358a <memset>
 8015fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015fb4:	e7e9      	b.n	8015f8a <__sfp+0x42>
 8015fb6:	bf00      	nop
 8015fb8:	08018544 	.word	0x08018544
 8015fbc:	ffff0001 	.word	0xffff0001

08015fc0 <_fwalk_reent>:
 8015fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fc4:	4680      	mov	r8, r0
 8015fc6:	4689      	mov	r9, r1
 8015fc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015fcc:	2600      	movs	r6, #0
 8015fce:	b914      	cbnz	r4, 8015fd6 <_fwalk_reent+0x16>
 8015fd0:	4630      	mov	r0, r6
 8015fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015fd6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015fda:	3f01      	subs	r7, #1
 8015fdc:	d501      	bpl.n	8015fe2 <_fwalk_reent+0x22>
 8015fde:	6824      	ldr	r4, [r4, #0]
 8015fe0:	e7f5      	b.n	8015fce <_fwalk_reent+0xe>
 8015fe2:	89ab      	ldrh	r3, [r5, #12]
 8015fe4:	2b01      	cmp	r3, #1
 8015fe6:	d907      	bls.n	8015ff8 <_fwalk_reent+0x38>
 8015fe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015fec:	3301      	adds	r3, #1
 8015fee:	d003      	beq.n	8015ff8 <_fwalk_reent+0x38>
 8015ff0:	4629      	mov	r1, r5
 8015ff2:	4640      	mov	r0, r8
 8015ff4:	47c8      	blx	r9
 8015ff6:	4306      	orrs	r6, r0
 8015ff8:	3568      	adds	r5, #104	; 0x68
 8015ffa:	e7ee      	b.n	8015fda <_fwalk_reent+0x1a>

08015ffc <rshift>:
 8015ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ffe:	6906      	ldr	r6, [r0, #16]
 8016000:	114b      	asrs	r3, r1, #5
 8016002:	429e      	cmp	r6, r3
 8016004:	f100 0414 	add.w	r4, r0, #20
 8016008:	dd30      	ble.n	801606c <rshift+0x70>
 801600a:	f011 011f 	ands.w	r1, r1, #31
 801600e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8016012:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8016016:	d108      	bne.n	801602a <rshift+0x2e>
 8016018:	4621      	mov	r1, r4
 801601a:	42b2      	cmp	r2, r6
 801601c:	460b      	mov	r3, r1
 801601e:	d211      	bcs.n	8016044 <rshift+0x48>
 8016020:	f852 3b04 	ldr.w	r3, [r2], #4
 8016024:	f841 3b04 	str.w	r3, [r1], #4
 8016028:	e7f7      	b.n	801601a <rshift+0x1e>
 801602a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801602e:	f1c1 0c20 	rsb	ip, r1, #32
 8016032:	40cd      	lsrs	r5, r1
 8016034:	3204      	adds	r2, #4
 8016036:	4623      	mov	r3, r4
 8016038:	42b2      	cmp	r2, r6
 801603a:	4617      	mov	r7, r2
 801603c:	d30c      	bcc.n	8016058 <rshift+0x5c>
 801603e:	601d      	str	r5, [r3, #0]
 8016040:	b105      	cbz	r5, 8016044 <rshift+0x48>
 8016042:	3304      	adds	r3, #4
 8016044:	1b1a      	subs	r2, r3, r4
 8016046:	42a3      	cmp	r3, r4
 8016048:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801604c:	bf08      	it	eq
 801604e:	2300      	moveq	r3, #0
 8016050:	6102      	str	r2, [r0, #16]
 8016052:	bf08      	it	eq
 8016054:	6143      	streq	r3, [r0, #20]
 8016056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016058:	683f      	ldr	r7, [r7, #0]
 801605a:	fa07 f70c 	lsl.w	r7, r7, ip
 801605e:	433d      	orrs	r5, r7
 8016060:	f843 5b04 	str.w	r5, [r3], #4
 8016064:	f852 5b04 	ldr.w	r5, [r2], #4
 8016068:	40cd      	lsrs	r5, r1
 801606a:	e7e5      	b.n	8016038 <rshift+0x3c>
 801606c:	4623      	mov	r3, r4
 801606e:	e7e9      	b.n	8016044 <rshift+0x48>

08016070 <__hexdig_fun>:
 8016070:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016074:	2b09      	cmp	r3, #9
 8016076:	d802      	bhi.n	801607e <__hexdig_fun+0xe>
 8016078:	3820      	subs	r0, #32
 801607a:	b2c0      	uxtb	r0, r0
 801607c:	4770      	bx	lr
 801607e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016082:	2b05      	cmp	r3, #5
 8016084:	d801      	bhi.n	801608a <__hexdig_fun+0x1a>
 8016086:	3847      	subs	r0, #71	; 0x47
 8016088:	e7f7      	b.n	801607a <__hexdig_fun+0xa>
 801608a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801608e:	2b05      	cmp	r3, #5
 8016090:	d801      	bhi.n	8016096 <__hexdig_fun+0x26>
 8016092:	3827      	subs	r0, #39	; 0x27
 8016094:	e7f1      	b.n	801607a <__hexdig_fun+0xa>
 8016096:	2000      	movs	r0, #0
 8016098:	4770      	bx	lr

0801609a <__gethex>:
 801609a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801609e:	b08b      	sub	sp, #44	; 0x2c
 80160a0:	468a      	mov	sl, r1
 80160a2:	9002      	str	r0, [sp, #8]
 80160a4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80160a6:	9306      	str	r3, [sp, #24]
 80160a8:	4690      	mov	r8, r2
 80160aa:	f000 fad0 	bl	801664e <__localeconv_l>
 80160ae:	6803      	ldr	r3, [r0, #0]
 80160b0:	9303      	str	r3, [sp, #12]
 80160b2:	4618      	mov	r0, r3
 80160b4:	f7ea f8c4 	bl	8000240 <strlen>
 80160b8:	9b03      	ldr	r3, [sp, #12]
 80160ba:	9001      	str	r0, [sp, #4]
 80160bc:	4403      	add	r3, r0
 80160be:	f04f 0b00 	mov.w	fp, #0
 80160c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80160c6:	9307      	str	r3, [sp, #28]
 80160c8:	f8da 3000 	ldr.w	r3, [sl]
 80160cc:	3302      	adds	r3, #2
 80160ce:	461f      	mov	r7, r3
 80160d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80160d4:	2830      	cmp	r0, #48	; 0x30
 80160d6:	d06c      	beq.n	80161b2 <__gethex+0x118>
 80160d8:	f7ff ffca 	bl	8016070 <__hexdig_fun>
 80160dc:	4604      	mov	r4, r0
 80160de:	2800      	cmp	r0, #0
 80160e0:	d16a      	bne.n	80161b8 <__gethex+0x11e>
 80160e2:	9a01      	ldr	r2, [sp, #4]
 80160e4:	9903      	ldr	r1, [sp, #12]
 80160e6:	4638      	mov	r0, r7
 80160e8:	f001 f99b 	bl	8017422 <strncmp>
 80160ec:	2800      	cmp	r0, #0
 80160ee:	d166      	bne.n	80161be <__gethex+0x124>
 80160f0:	9b01      	ldr	r3, [sp, #4]
 80160f2:	5cf8      	ldrb	r0, [r7, r3]
 80160f4:	18fe      	adds	r6, r7, r3
 80160f6:	f7ff ffbb 	bl	8016070 <__hexdig_fun>
 80160fa:	2800      	cmp	r0, #0
 80160fc:	d062      	beq.n	80161c4 <__gethex+0x12a>
 80160fe:	4633      	mov	r3, r6
 8016100:	7818      	ldrb	r0, [r3, #0]
 8016102:	2830      	cmp	r0, #48	; 0x30
 8016104:	461f      	mov	r7, r3
 8016106:	f103 0301 	add.w	r3, r3, #1
 801610a:	d0f9      	beq.n	8016100 <__gethex+0x66>
 801610c:	f7ff ffb0 	bl	8016070 <__hexdig_fun>
 8016110:	fab0 f580 	clz	r5, r0
 8016114:	096d      	lsrs	r5, r5, #5
 8016116:	4634      	mov	r4, r6
 8016118:	f04f 0b01 	mov.w	fp, #1
 801611c:	463a      	mov	r2, r7
 801611e:	4616      	mov	r6, r2
 8016120:	3201      	adds	r2, #1
 8016122:	7830      	ldrb	r0, [r6, #0]
 8016124:	f7ff ffa4 	bl	8016070 <__hexdig_fun>
 8016128:	2800      	cmp	r0, #0
 801612a:	d1f8      	bne.n	801611e <__gethex+0x84>
 801612c:	9a01      	ldr	r2, [sp, #4]
 801612e:	9903      	ldr	r1, [sp, #12]
 8016130:	4630      	mov	r0, r6
 8016132:	f001 f976 	bl	8017422 <strncmp>
 8016136:	b950      	cbnz	r0, 801614e <__gethex+0xb4>
 8016138:	b954      	cbnz	r4, 8016150 <__gethex+0xb6>
 801613a:	9b01      	ldr	r3, [sp, #4]
 801613c:	18f4      	adds	r4, r6, r3
 801613e:	4622      	mov	r2, r4
 8016140:	4616      	mov	r6, r2
 8016142:	3201      	adds	r2, #1
 8016144:	7830      	ldrb	r0, [r6, #0]
 8016146:	f7ff ff93 	bl	8016070 <__hexdig_fun>
 801614a:	2800      	cmp	r0, #0
 801614c:	d1f8      	bne.n	8016140 <__gethex+0xa6>
 801614e:	b10c      	cbz	r4, 8016154 <__gethex+0xba>
 8016150:	1ba4      	subs	r4, r4, r6
 8016152:	00a4      	lsls	r4, r4, #2
 8016154:	7833      	ldrb	r3, [r6, #0]
 8016156:	2b50      	cmp	r3, #80	; 0x50
 8016158:	d001      	beq.n	801615e <__gethex+0xc4>
 801615a:	2b70      	cmp	r3, #112	; 0x70
 801615c:	d140      	bne.n	80161e0 <__gethex+0x146>
 801615e:	7873      	ldrb	r3, [r6, #1]
 8016160:	2b2b      	cmp	r3, #43	; 0x2b
 8016162:	d031      	beq.n	80161c8 <__gethex+0x12e>
 8016164:	2b2d      	cmp	r3, #45	; 0x2d
 8016166:	d033      	beq.n	80161d0 <__gethex+0x136>
 8016168:	1c71      	adds	r1, r6, #1
 801616a:	f04f 0900 	mov.w	r9, #0
 801616e:	7808      	ldrb	r0, [r1, #0]
 8016170:	f7ff ff7e 	bl	8016070 <__hexdig_fun>
 8016174:	1e43      	subs	r3, r0, #1
 8016176:	b2db      	uxtb	r3, r3
 8016178:	2b18      	cmp	r3, #24
 801617a:	d831      	bhi.n	80161e0 <__gethex+0x146>
 801617c:	f1a0 0210 	sub.w	r2, r0, #16
 8016180:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016184:	f7ff ff74 	bl	8016070 <__hexdig_fun>
 8016188:	1e43      	subs	r3, r0, #1
 801618a:	b2db      	uxtb	r3, r3
 801618c:	2b18      	cmp	r3, #24
 801618e:	d922      	bls.n	80161d6 <__gethex+0x13c>
 8016190:	f1b9 0f00 	cmp.w	r9, #0
 8016194:	d000      	beq.n	8016198 <__gethex+0xfe>
 8016196:	4252      	negs	r2, r2
 8016198:	4414      	add	r4, r2
 801619a:	f8ca 1000 	str.w	r1, [sl]
 801619e:	b30d      	cbz	r5, 80161e4 <__gethex+0x14a>
 80161a0:	f1bb 0f00 	cmp.w	fp, #0
 80161a4:	bf0c      	ite	eq
 80161a6:	2706      	moveq	r7, #6
 80161a8:	2700      	movne	r7, #0
 80161aa:	4638      	mov	r0, r7
 80161ac:	b00b      	add	sp, #44	; 0x2c
 80161ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161b2:	f10b 0b01 	add.w	fp, fp, #1
 80161b6:	e78a      	b.n	80160ce <__gethex+0x34>
 80161b8:	2500      	movs	r5, #0
 80161ba:	462c      	mov	r4, r5
 80161bc:	e7ae      	b.n	801611c <__gethex+0x82>
 80161be:	463e      	mov	r6, r7
 80161c0:	2501      	movs	r5, #1
 80161c2:	e7c7      	b.n	8016154 <__gethex+0xba>
 80161c4:	4604      	mov	r4, r0
 80161c6:	e7fb      	b.n	80161c0 <__gethex+0x126>
 80161c8:	f04f 0900 	mov.w	r9, #0
 80161cc:	1cb1      	adds	r1, r6, #2
 80161ce:	e7ce      	b.n	801616e <__gethex+0xd4>
 80161d0:	f04f 0901 	mov.w	r9, #1
 80161d4:	e7fa      	b.n	80161cc <__gethex+0x132>
 80161d6:	230a      	movs	r3, #10
 80161d8:	fb03 0202 	mla	r2, r3, r2, r0
 80161dc:	3a10      	subs	r2, #16
 80161de:	e7cf      	b.n	8016180 <__gethex+0xe6>
 80161e0:	4631      	mov	r1, r6
 80161e2:	e7da      	b.n	801619a <__gethex+0x100>
 80161e4:	1bf3      	subs	r3, r6, r7
 80161e6:	3b01      	subs	r3, #1
 80161e8:	4629      	mov	r1, r5
 80161ea:	2b07      	cmp	r3, #7
 80161ec:	dc49      	bgt.n	8016282 <__gethex+0x1e8>
 80161ee:	9802      	ldr	r0, [sp, #8]
 80161f0:	f000 fabc 	bl	801676c <_Balloc>
 80161f4:	9b01      	ldr	r3, [sp, #4]
 80161f6:	f100 0914 	add.w	r9, r0, #20
 80161fa:	f04f 0b00 	mov.w	fp, #0
 80161fe:	f1c3 0301 	rsb	r3, r3, #1
 8016202:	4605      	mov	r5, r0
 8016204:	f8cd 9010 	str.w	r9, [sp, #16]
 8016208:	46da      	mov	sl, fp
 801620a:	9308      	str	r3, [sp, #32]
 801620c:	42b7      	cmp	r7, r6
 801620e:	d33b      	bcc.n	8016288 <__gethex+0x1ee>
 8016210:	9804      	ldr	r0, [sp, #16]
 8016212:	f840 ab04 	str.w	sl, [r0], #4
 8016216:	eba0 0009 	sub.w	r0, r0, r9
 801621a:	1080      	asrs	r0, r0, #2
 801621c:	6128      	str	r0, [r5, #16]
 801621e:	0147      	lsls	r7, r0, #5
 8016220:	4650      	mov	r0, sl
 8016222:	f000 fb67 	bl	80168f4 <__hi0bits>
 8016226:	f8d8 6000 	ldr.w	r6, [r8]
 801622a:	1a3f      	subs	r7, r7, r0
 801622c:	42b7      	cmp	r7, r6
 801622e:	dd64      	ble.n	80162fa <__gethex+0x260>
 8016230:	1bbf      	subs	r7, r7, r6
 8016232:	4639      	mov	r1, r7
 8016234:	4628      	mov	r0, r5
 8016236:	f000 fe78 	bl	8016f2a <__any_on>
 801623a:	4682      	mov	sl, r0
 801623c:	b178      	cbz	r0, 801625e <__gethex+0x1c4>
 801623e:	1e7b      	subs	r3, r7, #1
 8016240:	1159      	asrs	r1, r3, #5
 8016242:	f003 021f 	and.w	r2, r3, #31
 8016246:	f04f 0a01 	mov.w	sl, #1
 801624a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801624e:	fa0a f202 	lsl.w	r2, sl, r2
 8016252:	420a      	tst	r2, r1
 8016254:	d003      	beq.n	801625e <__gethex+0x1c4>
 8016256:	4553      	cmp	r3, sl
 8016258:	dc46      	bgt.n	80162e8 <__gethex+0x24e>
 801625a:	f04f 0a02 	mov.w	sl, #2
 801625e:	4639      	mov	r1, r7
 8016260:	4628      	mov	r0, r5
 8016262:	f7ff fecb 	bl	8015ffc <rshift>
 8016266:	443c      	add	r4, r7
 8016268:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801626c:	42a3      	cmp	r3, r4
 801626e:	da52      	bge.n	8016316 <__gethex+0x27c>
 8016270:	4629      	mov	r1, r5
 8016272:	9802      	ldr	r0, [sp, #8]
 8016274:	f000 faae 	bl	80167d4 <_Bfree>
 8016278:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801627a:	2300      	movs	r3, #0
 801627c:	6013      	str	r3, [r2, #0]
 801627e:	27a3      	movs	r7, #163	; 0xa3
 8016280:	e793      	b.n	80161aa <__gethex+0x110>
 8016282:	3101      	adds	r1, #1
 8016284:	105b      	asrs	r3, r3, #1
 8016286:	e7b0      	b.n	80161ea <__gethex+0x150>
 8016288:	1e73      	subs	r3, r6, #1
 801628a:	9305      	str	r3, [sp, #20]
 801628c:	9a07      	ldr	r2, [sp, #28]
 801628e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016292:	4293      	cmp	r3, r2
 8016294:	d018      	beq.n	80162c8 <__gethex+0x22e>
 8016296:	f1bb 0f20 	cmp.w	fp, #32
 801629a:	d107      	bne.n	80162ac <__gethex+0x212>
 801629c:	9b04      	ldr	r3, [sp, #16]
 801629e:	f8c3 a000 	str.w	sl, [r3]
 80162a2:	3304      	adds	r3, #4
 80162a4:	f04f 0a00 	mov.w	sl, #0
 80162a8:	9304      	str	r3, [sp, #16]
 80162aa:	46d3      	mov	fp, sl
 80162ac:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80162b0:	f7ff fede 	bl	8016070 <__hexdig_fun>
 80162b4:	f000 000f 	and.w	r0, r0, #15
 80162b8:	fa00 f00b 	lsl.w	r0, r0, fp
 80162bc:	ea4a 0a00 	orr.w	sl, sl, r0
 80162c0:	f10b 0b04 	add.w	fp, fp, #4
 80162c4:	9b05      	ldr	r3, [sp, #20]
 80162c6:	e00d      	b.n	80162e4 <__gethex+0x24a>
 80162c8:	9b05      	ldr	r3, [sp, #20]
 80162ca:	9a08      	ldr	r2, [sp, #32]
 80162cc:	4413      	add	r3, r2
 80162ce:	42bb      	cmp	r3, r7
 80162d0:	d3e1      	bcc.n	8016296 <__gethex+0x1fc>
 80162d2:	4618      	mov	r0, r3
 80162d4:	9a01      	ldr	r2, [sp, #4]
 80162d6:	9903      	ldr	r1, [sp, #12]
 80162d8:	9309      	str	r3, [sp, #36]	; 0x24
 80162da:	f001 f8a2 	bl	8017422 <strncmp>
 80162de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162e0:	2800      	cmp	r0, #0
 80162e2:	d1d8      	bne.n	8016296 <__gethex+0x1fc>
 80162e4:	461e      	mov	r6, r3
 80162e6:	e791      	b.n	801620c <__gethex+0x172>
 80162e8:	1eb9      	subs	r1, r7, #2
 80162ea:	4628      	mov	r0, r5
 80162ec:	f000 fe1d 	bl	8016f2a <__any_on>
 80162f0:	2800      	cmp	r0, #0
 80162f2:	d0b2      	beq.n	801625a <__gethex+0x1c0>
 80162f4:	f04f 0a03 	mov.w	sl, #3
 80162f8:	e7b1      	b.n	801625e <__gethex+0x1c4>
 80162fa:	da09      	bge.n	8016310 <__gethex+0x276>
 80162fc:	1bf7      	subs	r7, r6, r7
 80162fe:	4629      	mov	r1, r5
 8016300:	463a      	mov	r2, r7
 8016302:	9802      	ldr	r0, [sp, #8]
 8016304:	f000 fc32 	bl	8016b6c <__lshift>
 8016308:	1be4      	subs	r4, r4, r7
 801630a:	4605      	mov	r5, r0
 801630c:	f100 0914 	add.w	r9, r0, #20
 8016310:	f04f 0a00 	mov.w	sl, #0
 8016314:	e7a8      	b.n	8016268 <__gethex+0x1ce>
 8016316:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801631a:	42a0      	cmp	r0, r4
 801631c:	dd6a      	ble.n	80163f4 <__gethex+0x35a>
 801631e:	1b04      	subs	r4, r0, r4
 8016320:	42a6      	cmp	r6, r4
 8016322:	dc2e      	bgt.n	8016382 <__gethex+0x2e8>
 8016324:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016328:	2b02      	cmp	r3, #2
 801632a:	d022      	beq.n	8016372 <__gethex+0x2d8>
 801632c:	2b03      	cmp	r3, #3
 801632e:	d024      	beq.n	801637a <__gethex+0x2e0>
 8016330:	2b01      	cmp	r3, #1
 8016332:	d115      	bne.n	8016360 <__gethex+0x2c6>
 8016334:	42a6      	cmp	r6, r4
 8016336:	d113      	bne.n	8016360 <__gethex+0x2c6>
 8016338:	2e01      	cmp	r6, #1
 801633a:	dc0b      	bgt.n	8016354 <__gethex+0x2ba>
 801633c:	9a06      	ldr	r2, [sp, #24]
 801633e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016342:	6013      	str	r3, [r2, #0]
 8016344:	2301      	movs	r3, #1
 8016346:	612b      	str	r3, [r5, #16]
 8016348:	f8c9 3000 	str.w	r3, [r9]
 801634c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801634e:	2762      	movs	r7, #98	; 0x62
 8016350:	601d      	str	r5, [r3, #0]
 8016352:	e72a      	b.n	80161aa <__gethex+0x110>
 8016354:	1e71      	subs	r1, r6, #1
 8016356:	4628      	mov	r0, r5
 8016358:	f000 fde7 	bl	8016f2a <__any_on>
 801635c:	2800      	cmp	r0, #0
 801635e:	d1ed      	bne.n	801633c <__gethex+0x2a2>
 8016360:	4629      	mov	r1, r5
 8016362:	9802      	ldr	r0, [sp, #8]
 8016364:	f000 fa36 	bl	80167d4 <_Bfree>
 8016368:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801636a:	2300      	movs	r3, #0
 801636c:	6013      	str	r3, [r2, #0]
 801636e:	2750      	movs	r7, #80	; 0x50
 8016370:	e71b      	b.n	80161aa <__gethex+0x110>
 8016372:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016374:	2b00      	cmp	r3, #0
 8016376:	d0e1      	beq.n	801633c <__gethex+0x2a2>
 8016378:	e7f2      	b.n	8016360 <__gethex+0x2c6>
 801637a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801637c:	2b00      	cmp	r3, #0
 801637e:	d1dd      	bne.n	801633c <__gethex+0x2a2>
 8016380:	e7ee      	b.n	8016360 <__gethex+0x2c6>
 8016382:	1e67      	subs	r7, r4, #1
 8016384:	f1ba 0f00 	cmp.w	sl, #0
 8016388:	d131      	bne.n	80163ee <__gethex+0x354>
 801638a:	b127      	cbz	r7, 8016396 <__gethex+0x2fc>
 801638c:	4639      	mov	r1, r7
 801638e:	4628      	mov	r0, r5
 8016390:	f000 fdcb 	bl	8016f2a <__any_on>
 8016394:	4682      	mov	sl, r0
 8016396:	117a      	asrs	r2, r7, #5
 8016398:	2301      	movs	r3, #1
 801639a:	f007 071f 	and.w	r7, r7, #31
 801639e:	fa03 f707 	lsl.w	r7, r3, r7
 80163a2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80163a6:	4621      	mov	r1, r4
 80163a8:	421f      	tst	r7, r3
 80163aa:	4628      	mov	r0, r5
 80163ac:	bf18      	it	ne
 80163ae:	f04a 0a02 	orrne.w	sl, sl, #2
 80163b2:	1b36      	subs	r6, r6, r4
 80163b4:	f7ff fe22 	bl	8015ffc <rshift>
 80163b8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80163bc:	2702      	movs	r7, #2
 80163be:	f1ba 0f00 	cmp.w	sl, #0
 80163c2:	d048      	beq.n	8016456 <__gethex+0x3bc>
 80163c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80163c8:	2b02      	cmp	r3, #2
 80163ca:	d015      	beq.n	80163f8 <__gethex+0x35e>
 80163cc:	2b03      	cmp	r3, #3
 80163ce:	d017      	beq.n	8016400 <__gethex+0x366>
 80163d0:	2b01      	cmp	r3, #1
 80163d2:	d109      	bne.n	80163e8 <__gethex+0x34e>
 80163d4:	f01a 0f02 	tst.w	sl, #2
 80163d8:	d006      	beq.n	80163e8 <__gethex+0x34e>
 80163da:	f8d9 3000 	ldr.w	r3, [r9]
 80163de:	ea4a 0a03 	orr.w	sl, sl, r3
 80163e2:	f01a 0f01 	tst.w	sl, #1
 80163e6:	d10e      	bne.n	8016406 <__gethex+0x36c>
 80163e8:	f047 0710 	orr.w	r7, r7, #16
 80163ec:	e033      	b.n	8016456 <__gethex+0x3bc>
 80163ee:	f04f 0a01 	mov.w	sl, #1
 80163f2:	e7d0      	b.n	8016396 <__gethex+0x2fc>
 80163f4:	2701      	movs	r7, #1
 80163f6:	e7e2      	b.n	80163be <__gethex+0x324>
 80163f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80163fa:	f1c3 0301 	rsb	r3, r3, #1
 80163fe:	9315      	str	r3, [sp, #84]	; 0x54
 8016400:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016402:	2b00      	cmp	r3, #0
 8016404:	d0f0      	beq.n	80163e8 <__gethex+0x34e>
 8016406:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801640a:	f105 0314 	add.w	r3, r5, #20
 801640e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8016412:	eb03 010a 	add.w	r1, r3, sl
 8016416:	f04f 0c00 	mov.w	ip, #0
 801641a:	4618      	mov	r0, r3
 801641c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016420:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016424:	d01c      	beq.n	8016460 <__gethex+0x3c6>
 8016426:	3201      	adds	r2, #1
 8016428:	6002      	str	r2, [r0, #0]
 801642a:	2f02      	cmp	r7, #2
 801642c:	f105 0314 	add.w	r3, r5, #20
 8016430:	d138      	bne.n	80164a4 <__gethex+0x40a>
 8016432:	f8d8 2000 	ldr.w	r2, [r8]
 8016436:	3a01      	subs	r2, #1
 8016438:	42b2      	cmp	r2, r6
 801643a:	d10a      	bne.n	8016452 <__gethex+0x3b8>
 801643c:	1171      	asrs	r1, r6, #5
 801643e:	2201      	movs	r2, #1
 8016440:	f006 061f 	and.w	r6, r6, #31
 8016444:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016448:	fa02 f606 	lsl.w	r6, r2, r6
 801644c:	421e      	tst	r6, r3
 801644e:	bf18      	it	ne
 8016450:	4617      	movne	r7, r2
 8016452:	f047 0720 	orr.w	r7, r7, #32
 8016456:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016458:	601d      	str	r5, [r3, #0]
 801645a:	9b06      	ldr	r3, [sp, #24]
 801645c:	601c      	str	r4, [r3, #0]
 801645e:	e6a4      	b.n	80161aa <__gethex+0x110>
 8016460:	4299      	cmp	r1, r3
 8016462:	f843 cc04 	str.w	ip, [r3, #-4]
 8016466:	d8d8      	bhi.n	801641a <__gethex+0x380>
 8016468:	68ab      	ldr	r3, [r5, #8]
 801646a:	4599      	cmp	r9, r3
 801646c:	db12      	blt.n	8016494 <__gethex+0x3fa>
 801646e:	6869      	ldr	r1, [r5, #4]
 8016470:	9802      	ldr	r0, [sp, #8]
 8016472:	3101      	adds	r1, #1
 8016474:	f000 f97a 	bl	801676c <_Balloc>
 8016478:	692a      	ldr	r2, [r5, #16]
 801647a:	3202      	adds	r2, #2
 801647c:	f105 010c 	add.w	r1, r5, #12
 8016480:	4683      	mov	fp, r0
 8016482:	0092      	lsls	r2, r2, #2
 8016484:	300c      	adds	r0, #12
 8016486:	f7fd f875 	bl	8013574 <memcpy>
 801648a:	4629      	mov	r1, r5
 801648c:	9802      	ldr	r0, [sp, #8]
 801648e:	f000 f9a1 	bl	80167d4 <_Bfree>
 8016492:	465d      	mov	r5, fp
 8016494:	692b      	ldr	r3, [r5, #16]
 8016496:	1c5a      	adds	r2, r3, #1
 8016498:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801649c:	612a      	str	r2, [r5, #16]
 801649e:	2201      	movs	r2, #1
 80164a0:	615a      	str	r2, [r3, #20]
 80164a2:	e7c2      	b.n	801642a <__gethex+0x390>
 80164a4:	692a      	ldr	r2, [r5, #16]
 80164a6:	454a      	cmp	r2, r9
 80164a8:	dd0b      	ble.n	80164c2 <__gethex+0x428>
 80164aa:	2101      	movs	r1, #1
 80164ac:	4628      	mov	r0, r5
 80164ae:	f7ff fda5 	bl	8015ffc <rshift>
 80164b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80164b6:	3401      	adds	r4, #1
 80164b8:	42a3      	cmp	r3, r4
 80164ba:	f6ff aed9 	blt.w	8016270 <__gethex+0x1d6>
 80164be:	2701      	movs	r7, #1
 80164c0:	e7c7      	b.n	8016452 <__gethex+0x3b8>
 80164c2:	f016 061f 	ands.w	r6, r6, #31
 80164c6:	d0fa      	beq.n	80164be <__gethex+0x424>
 80164c8:	449a      	add	sl, r3
 80164ca:	f1c6 0620 	rsb	r6, r6, #32
 80164ce:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80164d2:	f000 fa0f 	bl	80168f4 <__hi0bits>
 80164d6:	42b0      	cmp	r0, r6
 80164d8:	dbe7      	blt.n	80164aa <__gethex+0x410>
 80164da:	e7f0      	b.n	80164be <__gethex+0x424>

080164dc <L_shift>:
 80164dc:	f1c2 0208 	rsb	r2, r2, #8
 80164e0:	0092      	lsls	r2, r2, #2
 80164e2:	b570      	push	{r4, r5, r6, lr}
 80164e4:	f1c2 0620 	rsb	r6, r2, #32
 80164e8:	6843      	ldr	r3, [r0, #4]
 80164ea:	6804      	ldr	r4, [r0, #0]
 80164ec:	fa03 f506 	lsl.w	r5, r3, r6
 80164f0:	432c      	orrs	r4, r5
 80164f2:	40d3      	lsrs	r3, r2
 80164f4:	6004      	str	r4, [r0, #0]
 80164f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80164fa:	4288      	cmp	r0, r1
 80164fc:	d3f4      	bcc.n	80164e8 <L_shift+0xc>
 80164fe:	bd70      	pop	{r4, r5, r6, pc}

08016500 <__match>:
 8016500:	b530      	push	{r4, r5, lr}
 8016502:	6803      	ldr	r3, [r0, #0]
 8016504:	3301      	adds	r3, #1
 8016506:	f811 4b01 	ldrb.w	r4, [r1], #1
 801650a:	b914      	cbnz	r4, 8016512 <__match+0x12>
 801650c:	6003      	str	r3, [r0, #0]
 801650e:	2001      	movs	r0, #1
 8016510:	bd30      	pop	{r4, r5, pc}
 8016512:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016516:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801651a:	2d19      	cmp	r5, #25
 801651c:	bf98      	it	ls
 801651e:	3220      	addls	r2, #32
 8016520:	42a2      	cmp	r2, r4
 8016522:	d0f0      	beq.n	8016506 <__match+0x6>
 8016524:	2000      	movs	r0, #0
 8016526:	e7f3      	b.n	8016510 <__match+0x10>

08016528 <__hexnan>:
 8016528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801652c:	680b      	ldr	r3, [r1, #0]
 801652e:	6801      	ldr	r1, [r0, #0]
 8016530:	115f      	asrs	r7, r3, #5
 8016532:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8016536:	f013 031f 	ands.w	r3, r3, #31
 801653a:	b087      	sub	sp, #28
 801653c:	bf18      	it	ne
 801653e:	3704      	addne	r7, #4
 8016540:	2500      	movs	r5, #0
 8016542:	1f3e      	subs	r6, r7, #4
 8016544:	4682      	mov	sl, r0
 8016546:	4690      	mov	r8, r2
 8016548:	9301      	str	r3, [sp, #4]
 801654a:	f847 5c04 	str.w	r5, [r7, #-4]
 801654e:	46b1      	mov	r9, r6
 8016550:	4634      	mov	r4, r6
 8016552:	9502      	str	r5, [sp, #8]
 8016554:	46ab      	mov	fp, r5
 8016556:	784a      	ldrb	r2, [r1, #1]
 8016558:	1c4b      	adds	r3, r1, #1
 801655a:	9303      	str	r3, [sp, #12]
 801655c:	b342      	cbz	r2, 80165b0 <__hexnan+0x88>
 801655e:	4610      	mov	r0, r2
 8016560:	9105      	str	r1, [sp, #20]
 8016562:	9204      	str	r2, [sp, #16]
 8016564:	f7ff fd84 	bl	8016070 <__hexdig_fun>
 8016568:	2800      	cmp	r0, #0
 801656a:	d143      	bne.n	80165f4 <__hexnan+0xcc>
 801656c:	9a04      	ldr	r2, [sp, #16]
 801656e:	9905      	ldr	r1, [sp, #20]
 8016570:	2a20      	cmp	r2, #32
 8016572:	d818      	bhi.n	80165a6 <__hexnan+0x7e>
 8016574:	9b02      	ldr	r3, [sp, #8]
 8016576:	459b      	cmp	fp, r3
 8016578:	dd13      	ble.n	80165a2 <__hexnan+0x7a>
 801657a:	454c      	cmp	r4, r9
 801657c:	d206      	bcs.n	801658c <__hexnan+0x64>
 801657e:	2d07      	cmp	r5, #7
 8016580:	dc04      	bgt.n	801658c <__hexnan+0x64>
 8016582:	462a      	mov	r2, r5
 8016584:	4649      	mov	r1, r9
 8016586:	4620      	mov	r0, r4
 8016588:	f7ff ffa8 	bl	80164dc <L_shift>
 801658c:	4544      	cmp	r4, r8
 801658e:	d944      	bls.n	801661a <__hexnan+0xf2>
 8016590:	2300      	movs	r3, #0
 8016592:	f1a4 0904 	sub.w	r9, r4, #4
 8016596:	f844 3c04 	str.w	r3, [r4, #-4]
 801659a:	f8cd b008 	str.w	fp, [sp, #8]
 801659e:	464c      	mov	r4, r9
 80165a0:	461d      	mov	r5, r3
 80165a2:	9903      	ldr	r1, [sp, #12]
 80165a4:	e7d7      	b.n	8016556 <__hexnan+0x2e>
 80165a6:	2a29      	cmp	r2, #41	; 0x29
 80165a8:	d14a      	bne.n	8016640 <__hexnan+0x118>
 80165aa:	3102      	adds	r1, #2
 80165ac:	f8ca 1000 	str.w	r1, [sl]
 80165b0:	f1bb 0f00 	cmp.w	fp, #0
 80165b4:	d044      	beq.n	8016640 <__hexnan+0x118>
 80165b6:	454c      	cmp	r4, r9
 80165b8:	d206      	bcs.n	80165c8 <__hexnan+0xa0>
 80165ba:	2d07      	cmp	r5, #7
 80165bc:	dc04      	bgt.n	80165c8 <__hexnan+0xa0>
 80165be:	462a      	mov	r2, r5
 80165c0:	4649      	mov	r1, r9
 80165c2:	4620      	mov	r0, r4
 80165c4:	f7ff ff8a 	bl	80164dc <L_shift>
 80165c8:	4544      	cmp	r4, r8
 80165ca:	d928      	bls.n	801661e <__hexnan+0xf6>
 80165cc:	4643      	mov	r3, r8
 80165ce:	f854 2b04 	ldr.w	r2, [r4], #4
 80165d2:	f843 2b04 	str.w	r2, [r3], #4
 80165d6:	42a6      	cmp	r6, r4
 80165d8:	d2f9      	bcs.n	80165ce <__hexnan+0xa6>
 80165da:	2200      	movs	r2, #0
 80165dc:	f843 2b04 	str.w	r2, [r3], #4
 80165e0:	429e      	cmp	r6, r3
 80165e2:	d2fb      	bcs.n	80165dc <__hexnan+0xb4>
 80165e4:	6833      	ldr	r3, [r6, #0]
 80165e6:	b91b      	cbnz	r3, 80165f0 <__hexnan+0xc8>
 80165e8:	4546      	cmp	r6, r8
 80165ea:	d127      	bne.n	801663c <__hexnan+0x114>
 80165ec:	2301      	movs	r3, #1
 80165ee:	6033      	str	r3, [r6, #0]
 80165f0:	2005      	movs	r0, #5
 80165f2:	e026      	b.n	8016642 <__hexnan+0x11a>
 80165f4:	3501      	adds	r5, #1
 80165f6:	2d08      	cmp	r5, #8
 80165f8:	f10b 0b01 	add.w	fp, fp, #1
 80165fc:	dd06      	ble.n	801660c <__hexnan+0xe4>
 80165fe:	4544      	cmp	r4, r8
 8016600:	d9cf      	bls.n	80165a2 <__hexnan+0x7a>
 8016602:	2300      	movs	r3, #0
 8016604:	f844 3c04 	str.w	r3, [r4, #-4]
 8016608:	2501      	movs	r5, #1
 801660a:	3c04      	subs	r4, #4
 801660c:	6822      	ldr	r2, [r4, #0]
 801660e:	f000 000f 	and.w	r0, r0, #15
 8016612:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016616:	6020      	str	r0, [r4, #0]
 8016618:	e7c3      	b.n	80165a2 <__hexnan+0x7a>
 801661a:	2508      	movs	r5, #8
 801661c:	e7c1      	b.n	80165a2 <__hexnan+0x7a>
 801661e:	9b01      	ldr	r3, [sp, #4]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d0df      	beq.n	80165e4 <__hexnan+0xbc>
 8016624:	f04f 32ff 	mov.w	r2, #4294967295
 8016628:	f1c3 0320 	rsb	r3, r3, #32
 801662c:	fa22 f303 	lsr.w	r3, r2, r3
 8016630:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016634:	401a      	ands	r2, r3
 8016636:	f847 2c04 	str.w	r2, [r7, #-4]
 801663a:	e7d3      	b.n	80165e4 <__hexnan+0xbc>
 801663c:	3e04      	subs	r6, #4
 801663e:	e7d1      	b.n	80165e4 <__hexnan+0xbc>
 8016640:	2004      	movs	r0, #4
 8016642:	b007      	add	sp, #28
 8016644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016648 <__locale_ctype_ptr_l>:
 8016648:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801664c:	4770      	bx	lr

0801664e <__localeconv_l>:
 801664e:	30f0      	adds	r0, #240	; 0xf0
 8016650:	4770      	bx	lr
	...

08016654 <_localeconv_r>:
 8016654:	4b04      	ldr	r3, [pc, #16]	; (8016668 <_localeconv_r+0x14>)
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	6a18      	ldr	r0, [r3, #32]
 801665a:	4b04      	ldr	r3, [pc, #16]	; (801666c <_localeconv_r+0x18>)
 801665c:	2800      	cmp	r0, #0
 801665e:	bf08      	it	eq
 8016660:	4618      	moveq	r0, r3
 8016662:	30f0      	adds	r0, #240	; 0xf0
 8016664:	4770      	bx	lr
 8016666:	bf00      	nop
 8016668:	200001a8 	.word	0x200001a8
 801666c:	2000020c 	.word	0x2000020c

08016670 <__swhatbuf_r>:
 8016670:	b570      	push	{r4, r5, r6, lr}
 8016672:	460e      	mov	r6, r1
 8016674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016678:	2900      	cmp	r1, #0
 801667a:	b096      	sub	sp, #88	; 0x58
 801667c:	4614      	mov	r4, r2
 801667e:	461d      	mov	r5, r3
 8016680:	da07      	bge.n	8016692 <__swhatbuf_r+0x22>
 8016682:	2300      	movs	r3, #0
 8016684:	602b      	str	r3, [r5, #0]
 8016686:	89b3      	ldrh	r3, [r6, #12]
 8016688:	061a      	lsls	r2, r3, #24
 801668a:	d410      	bmi.n	80166ae <__swhatbuf_r+0x3e>
 801668c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016690:	e00e      	b.n	80166b0 <__swhatbuf_r+0x40>
 8016692:	466a      	mov	r2, sp
 8016694:	f000 ff06 	bl	80174a4 <_fstat_r>
 8016698:	2800      	cmp	r0, #0
 801669a:	dbf2      	blt.n	8016682 <__swhatbuf_r+0x12>
 801669c:	9a01      	ldr	r2, [sp, #4]
 801669e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80166a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80166a6:	425a      	negs	r2, r3
 80166a8:	415a      	adcs	r2, r3
 80166aa:	602a      	str	r2, [r5, #0]
 80166ac:	e7ee      	b.n	801668c <__swhatbuf_r+0x1c>
 80166ae:	2340      	movs	r3, #64	; 0x40
 80166b0:	2000      	movs	r0, #0
 80166b2:	6023      	str	r3, [r4, #0]
 80166b4:	b016      	add	sp, #88	; 0x58
 80166b6:	bd70      	pop	{r4, r5, r6, pc}

080166b8 <__smakebuf_r>:
 80166b8:	898b      	ldrh	r3, [r1, #12]
 80166ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80166bc:	079d      	lsls	r5, r3, #30
 80166be:	4606      	mov	r6, r0
 80166c0:	460c      	mov	r4, r1
 80166c2:	d507      	bpl.n	80166d4 <__smakebuf_r+0x1c>
 80166c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80166c8:	6023      	str	r3, [r4, #0]
 80166ca:	6123      	str	r3, [r4, #16]
 80166cc:	2301      	movs	r3, #1
 80166ce:	6163      	str	r3, [r4, #20]
 80166d0:	b002      	add	sp, #8
 80166d2:	bd70      	pop	{r4, r5, r6, pc}
 80166d4:	ab01      	add	r3, sp, #4
 80166d6:	466a      	mov	r2, sp
 80166d8:	f7ff ffca 	bl	8016670 <__swhatbuf_r>
 80166dc:	9900      	ldr	r1, [sp, #0]
 80166de:	4605      	mov	r5, r0
 80166e0:	4630      	mov	r0, r6
 80166e2:	f000 fc9f 	bl	8017024 <_malloc_r>
 80166e6:	b948      	cbnz	r0, 80166fc <__smakebuf_r+0x44>
 80166e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166ec:	059a      	lsls	r2, r3, #22
 80166ee:	d4ef      	bmi.n	80166d0 <__smakebuf_r+0x18>
 80166f0:	f023 0303 	bic.w	r3, r3, #3
 80166f4:	f043 0302 	orr.w	r3, r3, #2
 80166f8:	81a3      	strh	r3, [r4, #12]
 80166fa:	e7e3      	b.n	80166c4 <__smakebuf_r+0xc>
 80166fc:	4b0d      	ldr	r3, [pc, #52]	; (8016734 <__smakebuf_r+0x7c>)
 80166fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8016700:	89a3      	ldrh	r3, [r4, #12]
 8016702:	6020      	str	r0, [r4, #0]
 8016704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016708:	81a3      	strh	r3, [r4, #12]
 801670a:	9b00      	ldr	r3, [sp, #0]
 801670c:	6163      	str	r3, [r4, #20]
 801670e:	9b01      	ldr	r3, [sp, #4]
 8016710:	6120      	str	r0, [r4, #16]
 8016712:	b15b      	cbz	r3, 801672c <__smakebuf_r+0x74>
 8016714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016718:	4630      	mov	r0, r6
 801671a:	f000 fed5 	bl	80174c8 <_isatty_r>
 801671e:	b128      	cbz	r0, 801672c <__smakebuf_r+0x74>
 8016720:	89a3      	ldrh	r3, [r4, #12]
 8016722:	f023 0303 	bic.w	r3, r3, #3
 8016726:	f043 0301 	orr.w	r3, r3, #1
 801672a:	81a3      	strh	r3, [r4, #12]
 801672c:	89a3      	ldrh	r3, [r4, #12]
 801672e:	431d      	orrs	r5, r3
 8016730:	81a5      	strh	r5, [r4, #12]
 8016732:	e7cd      	b.n	80166d0 <__smakebuf_r+0x18>
 8016734:	08015eb1 	.word	0x08015eb1

08016738 <malloc>:
 8016738:	4b02      	ldr	r3, [pc, #8]	; (8016744 <malloc+0xc>)
 801673a:	4601      	mov	r1, r0
 801673c:	6818      	ldr	r0, [r3, #0]
 801673e:	f000 bc71 	b.w	8017024 <_malloc_r>
 8016742:	bf00      	nop
 8016744:	200001a8 	.word	0x200001a8

08016748 <__ascii_mbtowc>:
 8016748:	b082      	sub	sp, #8
 801674a:	b901      	cbnz	r1, 801674e <__ascii_mbtowc+0x6>
 801674c:	a901      	add	r1, sp, #4
 801674e:	b142      	cbz	r2, 8016762 <__ascii_mbtowc+0x1a>
 8016750:	b14b      	cbz	r3, 8016766 <__ascii_mbtowc+0x1e>
 8016752:	7813      	ldrb	r3, [r2, #0]
 8016754:	600b      	str	r3, [r1, #0]
 8016756:	7812      	ldrb	r2, [r2, #0]
 8016758:	1c10      	adds	r0, r2, #0
 801675a:	bf18      	it	ne
 801675c:	2001      	movne	r0, #1
 801675e:	b002      	add	sp, #8
 8016760:	4770      	bx	lr
 8016762:	4610      	mov	r0, r2
 8016764:	e7fb      	b.n	801675e <__ascii_mbtowc+0x16>
 8016766:	f06f 0001 	mvn.w	r0, #1
 801676a:	e7f8      	b.n	801675e <__ascii_mbtowc+0x16>

0801676c <_Balloc>:
 801676c:	b570      	push	{r4, r5, r6, lr}
 801676e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016770:	4604      	mov	r4, r0
 8016772:	460e      	mov	r6, r1
 8016774:	b93d      	cbnz	r5, 8016786 <_Balloc+0x1a>
 8016776:	2010      	movs	r0, #16
 8016778:	f7ff ffde 	bl	8016738 <malloc>
 801677c:	6260      	str	r0, [r4, #36]	; 0x24
 801677e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016782:	6005      	str	r5, [r0, #0]
 8016784:	60c5      	str	r5, [r0, #12]
 8016786:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016788:	68eb      	ldr	r3, [r5, #12]
 801678a:	b183      	cbz	r3, 80167ae <_Balloc+0x42>
 801678c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801678e:	68db      	ldr	r3, [r3, #12]
 8016790:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016794:	b9b8      	cbnz	r0, 80167c6 <_Balloc+0x5a>
 8016796:	2101      	movs	r1, #1
 8016798:	fa01 f506 	lsl.w	r5, r1, r6
 801679c:	1d6a      	adds	r2, r5, #5
 801679e:	0092      	lsls	r2, r2, #2
 80167a0:	4620      	mov	r0, r4
 80167a2:	f000 fbe3 	bl	8016f6c <_calloc_r>
 80167a6:	b160      	cbz	r0, 80167c2 <_Balloc+0x56>
 80167a8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80167ac:	e00e      	b.n	80167cc <_Balloc+0x60>
 80167ae:	2221      	movs	r2, #33	; 0x21
 80167b0:	2104      	movs	r1, #4
 80167b2:	4620      	mov	r0, r4
 80167b4:	f000 fbda 	bl	8016f6c <_calloc_r>
 80167b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80167ba:	60e8      	str	r0, [r5, #12]
 80167bc:	68db      	ldr	r3, [r3, #12]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d1e4      	bne.n	801678c <_Balloc+0x20>
 80167c2:	2000      	movs	r0, #0
 80167c4:	bd70      	pop	{r4, r5, r6, pc}
 80167c6:	6802      	ldr	r2, [r0, #0]
 80167c8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80167cc:	2300      	movs	r3, #0
 80167ce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80167d2:	e7f7      	b.n	80167c4 <_Balloc+0x58>

080167d4 <_Bfree>:
 80167d4:	b570      	push	{r4, r5, r6, lr}
 80167d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80167d8:	4606      	mov	r6, r0
 80167da:	460d      	mov	r5, r1
 80167dc:	b93c      	cbnz	r4, 80167ee <_Bfree+0x1a>
 80167de:	2010      	movs	r0, #16
 80167e0:	f7ff ffaa 	bl	8016738 <malloc>
 80167e4:	6270      	str	r0, [r6, #36]	; 0x24
 80167e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80167ea:	6004      	str	r4, [r0, #0]
 80167ec:	60c4      	str	r4, [r0, #12]
 80167ee:	b13d      	cbz	r5, 8016800 <_Bfree+0x2c>
 80167f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80167f2:	686a      	ldr	r2, [r5, #4]
 80167f4:	68db      	ldr	r3, [r3, #12]
 80167f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80167fa:	6029      	str	r1, [r5, #0]
 80167fc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016800:	bd70      	pop	{r4, r5, r6, pc}

08016802 <__multadd>:
 8016802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016806:	690d      	ldr	r5, [r1, #16]
 8016808:	461f      	mov	r7, r3
 801680a:	4606      	mov	r6, r0
 801680c:	460c      	mov	r4, r1
 801680e:	f101 0c14 	add.w	ip, r1, #20
 8016812:	2300      	movs	r3, #0
 8016814:	f8dc 0000 	ldr.w	r0, [ip]
 8016818:	b281      	uxth	r1, r0
 801681a:	fb02 7101 	mla	r1, r2, r1, r7
 801681e:	0c0f      	lsrs	r7, r1, #16
 8016820:	0c00      	lsrs	r0, r0, #16
 8016822:	fb02 7000 	mla	r0, r2, r0, r7
 8016826:	b289      	uxth	r1, r1
 8016828:	3301      	adds	r3, #1
 801682a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801682e:	429d      	cmp	r5, r3
 8016830:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016834:	f84c 1b04 	str.w	r1, [ip], #4
 8016838:	dcec      	bgt.n	8016814 <__multadd+0x12>
 801683a:	b1d7      	cbz	r7, 8016872 <__multadd+0x70>
 801683c:	68a3      	ldr	r3, [r4, #8]
 801683e:	42ab      	cmp	r3, r5
 8016840:	dc12      	bgt.n	8016868 <__multadd+0x66>
 8016842:	6861      	ldr	r1, [r4, #4]
 8016844:	4630      	mov	r0, r6
 8016846:	3101      	adds	r1, #1
 8016848:	f7ff ff90 	bl	801676c <_Balloc>
 801684c:	6922      	ldr	r2, [r4, #16]
 801684e:	3202      	adds	r2, #2
 8016850:	f104 010c 	add.w	r1, r4, #12
 8016854:	4680      	mov	r8, r0
 8016856:	0092      	lsls	r2, r2, #2
 8016858:	300c      	adds	r0, #12
 801685a:	f7fc fe8b 	bl	8013574 <memcpy>
 801685e:	4621      	mov	r1, r4
 8016860:	4630      	mov	r0, r6
 8016862:	f7ff ffb7 	bl	80167d4 <_Bfree>
 8016866:	4644      	mov	r4, r8
 8016868:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801686c:	3501      	adds	r5, #1
 801686e:	615f      	str	r7, [r3, #20]
 8016870:	6125      	str	r5, [r4, #16]
 8016872:	4620      	mov	r0, r4
 8016874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016878 <__s2b>:
 8016878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801687c:	460c      	mov	r4, r1
 801687e:	4615      	mov	r5, r2
 8016880:	461f      	mov	r7, r3
 8016882:	2209      	movs	r2, #9
 8016884:	3308      	adds	r3, #8
 8016886:	4606      	mov	r6, r0
 8016888:	fb93 f3f2 	sdiv	r3, r3, r2
 801688c:	2100      	movs	r1, #0
 801688e:	2201      	movs	r2, #1
 8016890:	429a      	cmp	r2, r3
 8016892:	db20      	blt.n	80168d6 <__s2b+0x5e>
 8016894:	4630      	mov	r0, r6
 8016896:	f7ff ff69 	bl	801676c <_Balloc>
 801689a:	9b08      	ldr	r3, [sp, #32]
 801689c:	6143      	str	r3, [r0, #20]
 801689e:	2d09      	cmp	r5, #9
 80168a0:	f04f 0301 	mov.w	r3, #1
 80168a4:	6103      	str	r3, [r0, #16]
 80168a6:	dd19      	ble.n	80168dc <__s2b+0x64>
 80168a8:	f104 0809 	add.w	r8, r4, #9
 80168ac:	46c1      	mov	r9, r8
 80168ae:	442c      	add	r4, r5
 80168b0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80168b4:	4601      	mov	r1, r0
 80168b6:	3b30      	subs	r3, #48	; 0x30
 80168b8:	220a      	movs	r2, #10
 80168ba:	4630      	mov	r0, r6
 80168bc:	f7ff ffa1 	bl	8016802 <__multadd>
 80168c0:	45a1      	cmp	r9, r4
 80168c2:	d1f5      	bne.n	80168b0 <__s2b+0x38>
 80168c4:	eb08 0405 	add.w	r4, r8, r5
 80168c8:	3c08      	subs	r4, #8
 80168ca:	1b2d      	subs	r5, r5, r4
 80168cc:	1963      	adds	r3, r4, r5
 80168ce:	42bb      	cmp	r3, r7
 80168d0:	db07      	blt.n	80168e2 <__s2b+0x6a>
 80168d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168d6:	0052      	lsls	r2, r2, #1
 80168d8:	3101      	adds	r1, #1
 80168da:	e7d9      	b.n	8016890 <__s2b+0x18>
 80168dc:	340a      	adds	r4, #10
 80168de:	2509      	movs	r5, #9
 80168e0:	e7f3      	b.n	80168ca <__s2b+0x52>
 80168e2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80168e6:	4601      	mov	r1, r0
 80168e8:	3b30      	subs	r3, #48	; 0x30
 80168ea:	220a      	movs	r2, #10
 80168ec:	4630      	mov	r0, r6
 80168ee:	f7ff ff88 	bl	8016802 <__multadd>
 80168f2:	e7eb      	b.n	80168cc <__s2b+0x54>

080168f4 <__hi0bits>:
 80168f4:	0c02      	lsrs	r2, r0, #16
 80168f6:	0412      	lsls	r2, r2, #16
 80168f8:	4603      	mov	r3, r0
 80168fa:	b9b2      	cbnz	r2, 801692a <__hi0bits+0x36>
 80168fc:	0403      	lsls	r3, r0, #16
 80168fe:	2010      	movs	r0, #16
 8016900:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016904:	bf04      	itt	eq
 8016906:	021b      	lsleq	r3, r3, #8
 8016908:	3008      	addeq	r0, #8
 801690a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801690e:	bf04      	itt	eq
 8016910:	011b      	lsleq	r3, r3, #4
 8016912:	3004      	addeq	r0, #4
 8016914:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016918:	bf04      	itt	eq
 801691a:	009b      	lsleq	r3, r3, #2
 801691c:	3002      	addeq	r0, #2
 801691e:	2b00      	cmp	r3, #0
 8016920:	db06      	blt.n	8016930 <__hi0bits+0x3c>
 8016922:	005b      	lsls	r3, r3, #1
 8016924:	d503      	bpl.n	801692e <__hi0bits+0x3a>
 8016926:	3001      	adds	r0, #1
 8016928:	4770      	bx	lr
 801692a:	2000      	movs	r0, #0
 801692c:	e7e8      	b.n	8016900 <__hi0bits+0xc>
 801692e:	2020      	movs	r0, #32
 8016930:	4770      	bx	lr

08016932 <__lo0bits>:
 8016932:	6803      	ldr	r3, [r0, #0]
 8016934:	f013 0207 	ands.w	r2, r3, #7
 8016938:	4601      	mov	r1, r0
 801693a:	d00b      	beq.n	8016954 <__lo0bits+0x22>
 801693c:	07da      	lsls	r2, r3, #31
 801693e:	d423      	bmi.n	8016988 <__lo0bits+0x56>
 8016940:	0798      	lsls	r0, r3, #30
 8016942:	bf49      	itett	mi
 8016944:	085b      	lsrmi	r3, r3, #1
 8016946:	089b      	lsrpl	r3, r3, #2
 8016948:	2001      	movmi	r0, #1
 801694a:	600b      	strmi	r3, [r1, #0]
 801694c:	bf5c      	itt	pl
 801694e:	600b      	strpl	r3, [r1, #0]
 8016950:	2002      	movpl	r0, #2
 8016952:	4770      	bx	lr
 8016954:	b298      	uxth	r0, r3
 8016956:	b9a8      	cbnz	r0, 8016984 <__lo0bits+0x52>
 8016958:	0c1b      	lsrs	r3, r3, #16
 801695a:	2010      	movs	r0, #16
 801695c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016960:	bf04      	itt	eq
 8016962:	0a1b      	lsreq	r3, r3, #8
 8016964:	3008      	addeq	r0, #8
 8016966:	071a      	lsls	r2, r3, #28
 8016968:	bf04      	itt	eq
 801696a:	091b      	lsreq	r3, r3, #4
 801696c:	3004      	addeq	r0, #4
 801696e:	079a      	lsls	r2, r3, #30
 8016970:	bf04      	itt	eq
 8016972:	089b      	lsreq	r3, r3, #2
 8016974:	3002      	addeq	r0, #2
 8016976:	07da      	lsls	r2, r3, #31
 8016978:	d402      	bmi.n	8016980 <__lo0bits+0x4e>
 801697a:	085b      	lsrs	r3, r3, #1
 801697c:	d006      	beq.n	801698c <__lo0bits+0x5a>
 801697e:	3001      	adds	r0, #1
 8016980:	600b      	str	r3, [r1, #0]
 8016982:	4770      	bx	lr
 8016984:	4610      	mov	r0, r2
 8016986:	e7e9      	b.n	801695c <__lo0bits+0x2a>
 8016988:	2000      	movs	r0, #0
 801698a:	4770      	bx	lr
 801698c:	2020      	movs	r0, #32
 801698e:	4770      	bx	lr

08016990 <__i2b>:
 8016990:	b510      	push	{r4, lr}
 8016992:	460c      	mov	r4, r1
 8016994:	2101      	movs	r1, #1
 8016996:	f7ff fee9 	bl	801676c <_Balloc>
 801699a:	2201      	movs	r2, #1
 801699c:	6144      	str	r4, [r0, #20]
 801699e:	6102      	str	r2, [r0, #16]
 80169a0:	bd10      	pop	{r4, pc}

080169a2 <__multiply>:
 80169a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169a6:	4614      	mov	r4, r2
 80169a8:	690a      	ldr	r2, [r1, #16]
 80169aa:	6923      	ldr	r3, [r4, #16]
 80169ac:	429a      	cmp	r2, r3
 80169ae:	bfb8      	it	lt
 80169b0:	460b      	movlt	r3, r1
 80169b2:	4688      	mov	r8, r1
 80169b4:	bfbc      	itt	lt
 80169b6:	46a0      	movlt	r8, r4
 80169b8:	461c      	movlt	r4, r3
 80169ba:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80169be:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80169c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80169c6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80169ca:	eb07 0609 	add.w	r6, r7, r9
 80169ce:	42b3      	cmp	r3, r6
 80169d0:	bfb8      	it	lt
 80169d2:	3101      	addlt	r1, #1
 80169d4:	f7ff feca 	bl	801676c <_Balloc>
 80169d8:	f100 0514 	add.w	r5, r0, #20
 80169dc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80169e0:	462b      	mov	r3, r5
 80169e2:	2200      	movs	r2, #0
 80169e4:	4573      	cmp	r3, lr
 80169e6:	d316      	bcc.n	8016a16 <__multiply+0x74>
 80169e8:	f104 0214 	add.w	r2, r4, #20
 80169ec:	f108 0114 	add.w	r1, r8, #20
 80169f0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80169f4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80169f8:	9300      	str	r3, [sp, #0]
 80169fa:	9b00      	ldr	r3, [sp, #0]
 80169fc:	9201      	str	r2, [sp, #4]
 80169fe:	4293      	cmp	r3, r2
 8016a00:	d80c      	bhi.n	8016a1c <__multiply+0x7a>
 8016a02:	2e00      	cmp	r6, #0
 8016a04:	dd03      	ble.n	8016a0e <__multiply+0x6c>
 8016a06:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d05d      	beq.n	8016aca <__multiply+0x128>
 8016a0e:	6106      	str	r6, [r0, #16]
 8016a10:	b003      	add	sp, #12
 8016a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a16:	f843 2b04 	str.w	r2, [r3], #4
 8016a1a:	e7e3      	b.n	80169e4 <__multiply+0x42>
 8016a1c:	f8b2 b000 	ldrh.w	fp, [r2]
 8016a20:	f1bb 0f00 	cmp.w	fp, #0
 8016a24:	d023      	beq.n	8016a6e <__multiply+0xcc>
 8016a26:	4689      	mov	r9, r1
 8016a28:	46ac      	mov	ip, r5
 8016a2a:	f04f 0800 	mov.w	r8, #0
 8016a2e:	f859 4b04 	ldr.w	r4, [r9], #4
 8016a32:	f8dc a000 	ldr.w	sl, [ip]
 8016a36:	b2a3      	uxth	r3, r4
 8016a38:	fa1f fa8a 	uxth.w	sl, sl
 8016a3c:	fb0b a303 	mla	r3, fp, r3, sl
 8016a40:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016a44:	f8dc 4000 	ldr.w	r4, [ip]
 8016a48:	4443      	add	r3, r8
 8016a4a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016a4e:	fb0b 840a 	mla	r4, fp, sl, r8
 8016a52:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016a56:	46e2      	mov	sl, ip
 8016a58:	b29b      	uxth	r3, r3
 8016a5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016a5e:	454f      	cmp	r7, r9
 8016a60:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016a64:	f84a 3b04 	str.w	r3, [sl], #4
 8016a68:	d82b      	bhi.n	8016ac2 <__multiply+0x120>
 8016a6a:	f8cc 8004 	str.w	r8, [ip, #4]
 8016a6e:	9b01      	ldr	r3, [sp, #4]
 8016a70:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016a74:	3204      	adds	r2, #4
 8016a76:	f1ba 0f00 	cmp.w	sl, #0
 8016a7a:	d020      	beq.n	8016abe <__multiply+0x11c>
 8016a7c:	682b      	ldr	r3, [r5, #0]
 8016a7e:	4689      	mov	r9, r1
 8016a80:	46a8      	mov	r8, r5
 8016a82:	f04f 0b00 	mov.w	fp, #0
 8016a86:	f8b9 c000 	ldrh.w	ip, [r9]
 8016a8a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8016a8e:	fb0a 440c 	mla	r4, sl, ip, r4
 8016a92:	445c      	add	r4, fp
 8016a94:	46c4      	mov	ip, r8
 8016a96:	b29b      	uxth	r3, r3
 8016a98:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016a9c:	f84c 3b04 	str.w	r3, [ip], #4
 8016aa0:	f859 3b04 	ldr.w	r3, [r9], #4
 8016aa4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016aa8:	0c1b      	lsrs	r3, r3, #16
 8016aaa:	fb0a b303 	mla	r3, sl, r3, fp
 8016aae:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016ab2:	454f      	cmp	r7, r9
 8016ab4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016ab8:	d805      	bhi.n	8016ac6 <__multiply+0x124>
 8016aba:	f8c8 3004 	str.w	r3, [r8, #4]
 8016abe:	3504      	adds	r5, #4
 8016ac0:	e79b      	b.n	80169fa <__multiply+0x58>
 8016ac2:	46d4      	mov	ip, sl
 8016ac4:	e7b3      	b.n	8016a2e <__multiply+0x8c>
 8016ac6:	46e0      	mov	r8, ip
 8016ac8:	e7dd      	b.n	8016a86 <__multiply+0xe4>
 8016aca:	3e01      	subs	r6, #1
 8016acc:	e799      	b.n	8016a02 <__multiply+0x60>
	...

08016ad0 <__pow5mult>:
 8016ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ad4:	4615      	mov	r5, r2
 8016ad6:	f012 0203 	ands.w	r2, r2, #3
 8016ada:	4606      	mov	r6, r0
 8016adc:	460f      	mov	r7, r1
 8016ade:	d007      	beq.n	8016af0 <__pow5mult+0x20>
 8016ae0:	3a01      	subs	r2, #1
 8016ae2:	4c21      	ldr	r4, [pc, #132]	; (8016b68 <__pow5mult+0x98>)
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016aea:	f7ff fe8a 	bl	8016802 <__multadd>
 8016aee:	4607      	mov	r7, r0
 8016af0:	10ad      	asrs	r5, r5, #2
 8016af2:	d035      	beq.n	8016b60 <__pow5mult+0x90>
 8016af4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016af6:	b93c      	cbnz	r4, 8016b08 <__pow5mult+0x38>
 8016af8:	2010      	movs	r0, #16
 8016afa:	f7ff fe1d 	bl	8016738 <malloc>
 8016afe:	6270      	str	r0, [r6, #36]	; 0x24
 8016b00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016b04:	6004      	str	r4, [r0, #0]
 8016b06:	60c4      	str	r4, [r0, #12]
 8016b08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016b0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016b10:	b94c      	cbnz	r4, 8016b26 <__pow5mult+0x56>
 8016b12:	f240 2171 	movw	r1, #625	; 0x271
 8016b16:	4630      	mov	r0, r6
 8016b18:	f7ff ff3a 	bl	8016990 <__i2b>
 8016b1c:	2300      	movs	r3, #0
 8016b1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016b22:	4604      	mov	r4, r0
 8016b24:	6003      	str	r3, [r0, #0]
 8016b26:	f04f 0800 	mov.w	r8, #0
 8016b2a:	07eb      	lsls	r3, r5, #31
 8016b2c:	d50a      	bpl.n	8016b44 <__pow5mult+0x74>
 8016b2e:	4639      	mov	r1, r7
 8016b30:	4622      	mov	r2, r4
 8016b32:	4630      	mov	r0, r6
 8016b34:	f7ff ff35 	bl	80169a2 <__multiply>
 8016b38:	4639      	mov	r1, r7
 8016b3a:	4681      	mov	r9, r0
 8016b3c:	4630      	mov	r0, r6
 8016b3e:	f7ff fe49 	bl	80167d4 <_Bfree>
 8016b42:	464f      	mov	r7, r9
 8016b44:	106d      	asrs	r5, r5, #1
 8016b46:	d00b      	beq.n	8016b60 <__pow5mult+0x90>
 8016b48:	6820      	ldr	r0, [r4, #0]
 8016b4a:	b938      	cbnz	r0, 8016b5c <__pow5mult+0x8c>
 8016b4c:	4622      	mov	r2, r4
 8016b4e:	4621      	mov	r1, r4
 8016b50:	4630      	mov	r0, r6
 8016b52:	f7ff ff26 	bl	80169a2 <__multiply>
 8016b56:	6020      	str	r0, [r4, #0]
 8016b58:	f8c0 8000 	str.w	r8, [r0]
 8016b5c:	4604      	mov	r4, r0
 8016b5e:	e7e4      	b.n	8016b2a <__pow5mult+0x5a>
 8016b60:	4638      	mov	r0, r7
 8016b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b66:	bf00      	nop
 8016b68:	08018748 	.word	0x08018748

08016b6c <__lshift>:
 8016b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b70:	460c      	mov	r4, r1
 8016b72:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016b76:	6923      	ldr	r3, [r4, #16]
 8016b78:	6849      	ldr	r1, [r1, #4]
 8016b7a:	eb0a 0903 	add.w	r9, sl, r3
 8016b7e:	68a3      	ldr	r3, [r4, #8]
 8016b80:	4607      	mov	r7, r0
 8016b82:	4616      	mov	r6, r2
 8016b84:	f109 0501 	add.w	r5, r9, #1
 8016b88:	42ab      	cmp	r3, r5
 8016b8a:	db32      	blt.n	8016bf2 <__lshift+0x86>
 8016b8c:	4638      	mov	r0, r7
 8016b8e:	f7ff fded 	bl	801676c <_Balloc>
 8016b92:	2300      	movs	r3, #0
 8016b94:	4680      	mov	r8, r0
 8016b96:	f100 0114 	add.w	r1, r0, #20
 8016b9a:	461a      	mov	r2, r3
 8016b9c:	4553      	cmp	r3, sl
 8016b9e:	db2b      	blt.n	8016bf8 <__lshift+0x8c>
 8016ba0:	6920      	ldr	r0, [r4, #16]
 8016ba2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016ba6:	f104 0314 	add.w	r3, r4, #20
 8016baa:	f016 021f 	ands.w	r2, r6, #31
 8016bae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016bb2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016bb6:	d025      	beq.n	8016c04 <__lshift+0x98>
 8016bb8:	f1c2 0e20 	rsb	lr, r2, #32
 8016bbc:	2000      	movs	r0, #0
 8016bbe:	681e      	ldr	r6, [r3, #0]
 8016bc0:	468a      	mov	sl, r1
 8016bc2:	4096      	lsls	r6, r2
 8016bc4:	4330      	orrs	r0, r6
 8016bc6:	f84a 0b04 	str.w	r0, [sl], #4
 8016bca:	f853 0b04 	ldr.w	r0, [r3], #4
 8016bce:	459c      	cmp	ip, r3
 8016bd0:	fa20 f00e 	lsr.w	r0, r0, lr
 8016bd4:	d814      	bhi.n	8016c00 <__lshift+0x94>
 8016bd6:	6048      	str	r0, [r1, #4]
 8016bd8:	b108      	cbz	r0, 8016bde <__lshift+0x72>
 8016bda:	f109 0502 	add.w	r5, r9, #2
 8016bde:	3d01      	subs	r5, #1
 8016be0:	4638      	mov	r0, r7
 8016be2:	f8c8 5010 	str.w	r5, [r8, #16]
 8016be6:	4621      	mov	r1, r4
 8016be8:	f7ff fdf4 	bl	80167d4 <_Bfree>
 8016bec:	4640      	mov	r0, r8
 8016bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bf2:	3101      	adds	r1, #1
 8016bf4:	005b      	lsls	r3, r3, #1
 8016bf6:	e7c7      	b.n	8016b88 <__lshift+0x1c>
 8016bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016bfc:	3301      	adds	r3, #1
 8016bfe:	e7cd      	b.n	8016b9c <__lshift+0x30>
 8016c00:	4651      	mov	r1, sl
 8016c02:	e7dc      	b.n	8016bbe <__lshift+0x52>
 8016c04:	3904      	subs	r1, #4
 8016c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c0a:	f841 2f04 	str.w	r2, [r1, #4]!
 8016c0e:	459c      	cmp	ip, r3
 8016c10:	d8f9      	bhi.n	8016c06 <__lshift+0x9a>
 8016c12:	e7e4      	b.n	8016bde <__lshift+0x72>

08016c14 <__mcmp>:
 8016c14:	6903      	ldr	r3, [r0, #16]
 8016c16:	690a      	ldr	r2, [r1, #16]
 8016c18:	1a9b      	subs	r3, r3, r2
 8016c1a:	b530      	push	{r4, r5, lr}
 8016c1c:	d10c      	bne.n	8016c38 <__mcmp+0x24>
 8016c1e:	0092      	lsls	r2, r2, #2
 8016c20:	3014      	adds	r0, #20
 8016c22:	3114      	adds	r1, #20
 8016c24:	1884      	adds	r4, r0, r2
 8016c26:	4411      	add	r1, r2
 8016c28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016c2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016c30:	4295      	cmp	r5, r2
 8016c32:	d003      	beq.n	8016c3c <__mcmp+0x28>
 8016c34:	d305      	bcc.n	8016c42 <__mcmp+0x2e>
 8016c36:	2301      	movs	r3, #1
 8016c38:	4618      	mov	r0, r3
 8016c3a:	bd30      	pop	{r4, r5, pc}
 8016c3c:	42a0      	cmp	r0, r4
 8016c3e:	d3f3      	bcc.n	8016c28 <__mcmp+0x14>
 8016c40:	e7fa      	b.n	8016c38 <__mcmp+0x24>
 8016c42:	f04f 33ff 	mov.w	r3, #4294967295
 8016c46:	e7f7      	b.n	8016c38 <__mcmp+0x24>

08016c48 <__mdiff>:
 8016c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c4c:	460d      	mov	r5, r1
 8016c4e:	4607      	mov	r7, r0
 8016c50:	4611      	mov	r1, r2
 8016c52:	4628      	mov	r0, r5
 8016c54:	4614      	mov	r4, r2
 8016c56:	f7ff ffdd 	bl	8016c14 <__mcmp>
 8016c5a:	1e06      	subs	r6, r0, #0
 8016c5c:	d108      	bne.n	8016c70 <__mdiff+0x28>
 8016c5e:	4631      	mov	r1, r6
 8016c60:	4638      	mov	r0, r7
 8016c62:	f7ff fd83 	bl	801676c <_Balloc>
 8016c66:	2301      	movs	r3, #1
 8016c68:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c70:	bfa4      	itt	ge
 8016c72:	4623      	movge	r3, r4
 8016c74:	462c      	movge	r4, r5
 8016c76:	4638      	mov	r0, r7
 8016c78:	6861      	ldr	r1, [r4, #4]
 8016c7a:	bfa6      	itte	ge
 8016c7c:	461d      	movge	r5, r3
 8016c7e:	2600      	movge	r6, #0
 8016c80:	2601      	movlt	r6, #1
 8016c82:	f7ff fd73 	bl	801676c <_Balloc>
 8016c86:	692b      	ldr	r3, [r5, #16]
 8016c88:	60c6      	str	r6, [r0, #12]
 8016c8a:	6926      	ldr	r6, [r4, #16]
 8016c8c:	f105 0914 	add.w	r9, r5, #20
 8016c90:	f104 0214 	add.w	r2, r4, #20
 8016c94:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016c98:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016c9c:	f100 0514 	add.w	r5, r0, #20
 8016ca0:	f04f 0e00 	mov.w	lr, #0
 8016ca4:	f852 ab04 	ldr.w	sl, [r2], #4
 8016ca8:	f859 4b04 	ldr.w	r4, [r9], #4
 8016cac:	fa1e f18a 	uxtah	r1, lr, sl
 8016cb0:	b2a3      	uxth	r3, r4
 8016cb2:	1ac9      	subs	r1, r1, r3
 8016cb4:	0c23      	lsrs	r3, r4, #16
 8016cb6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016cba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016cbe:	b289      	uxth	r1, r1
 8016cc0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016cc4:	45c8      	cmp	r8, r9
 8016cc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016cca:	4694      	mov	ip, r2
 8016ccc:	f845 3b04 	str.w	r3, [r5], #4
 8016cd0:	d8e8      	bhi.n	8016ca4 <__mdiff+0x5c>
 8016cd2:	45bc      	cmp	ip, r7
 8016cd4:	d304      	bcc.n	8016ce0 <__mdiff+0x98>
 8016cd6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016cda:	b183      	cbz	r3, 8016cfe <__mdiff+0xb6>
 8016cdc:	6106      	str	r6, [r0, #16]
 8016cde:	e7c5      	b.n	8016c6c <__mdiff+0x24>
 8016ce0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016ce4:	fa1e f381 	uxtah	r3, lr, r1
 8016ce8:	141a      	asrs	r2, r3, #16
 8016cea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016cee:	b29b      	uxth	r3, r3
 8016cf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016cf4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016cf8:	f845 3b04 	str.w	r3, [r5], #4
 8016cfc:	e7e9      	b.n	8016cd2 <__mdiff+0x8a>
 8016cfe:	3e01      	subs	r6, #1
 8016d00:	e7e9      	b.n	8016cd6 <__mdiff+0x8e>
	...

08016d04 <__ulp>:
 8016d04:	4b12      	ldr	r3, [pc, #72]	; (8016d50 <__ulp+0x4c>)
 8016d06:	ee10 2a90 	vmov	r2, s1
 8016d0a:	401a      	ands	r2, r3
 8016d0c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	dd04      	ble.n	8016d1e <__ulp+0x1a>
 8016d14:	2000      	movs	r0, #0
 8016d16:	4619      	mov	r1, r3
 8016d18:	ec41 0b10 	vmov	d0, r0, r1
 8016d1c:	4770      	bx	lr
 8016d1e:	425b      	negs	r3, r3
 8016d20:	151b      	asrs	r3, r3, #20
 8016d22:	2b13      	cmp	r3, #19
 8016d24:	f04f 0000 	mov.w	r0, #0
 8016d28:	f04f 0100 	mov.w	r1, #0
 8016d2c:	dc04      	bgt.n	8016d38 <__ulp+0x34>
 8016d2e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016d32:	fa42 f103 	asr.w	r1, r2, r3
 8016d36:	e7ef      	b.n	8016d18 <__ulp+0x14>
 8016d38:	3b14      	subs	r3, #20
 8016d3a:	2b1e      	cmp	r3, #30
 8016d3c:	f04f 0201 	mov.w	r2, #1
 8016d40:	bfda      	itte	le
 8016d42:	f1c3 031f 	rsble	r3, r3, #31
 8016d46:	fa02 f303 	lslle.w	r3, r2, r3
 8016d4a:	4613      	movgt	r3, r2
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	e7e3      	b.n	8016d18 <__ulp+0x14>
 8016d50:	7ff00000 	.word	0x7ff00000

08016d54 <__b2d>:
 8016d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d56:	6905      	ldr	r5, [r0, #16]
 8016d58:	f100 0714 	add.w	r7, r0, #20
 8016d5c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016d60:	1f2e      	subs	r6, r5, #4
 8016d62:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016d66:	4620      	mov	r0, r4
 8016d68:	f7ff fdc4 	bl	80168f4 <__hi0bits>
 8016d6c:	f1c0 0320 	rsb	r3, r0, #32
 8016d70:	280a      	cmp	r0, #10
 8016d72:	600b      	str	r3, [r1, #0]
 8016d74:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016dec <__b2d+0x98>
 8016d78:	dc14      	bgt.n	8016da4 <__b2d+0x50>
 8016d7a:	f1c0 0e0b 	rsb	lr, r0, #11
 8016d7e:	fa24 f10e 	lsr.w	r1, r4, lr
 8016d82:	42b7      	cmp	r7, r6
 8016d84:	ea41 030c 	orr.w	r3, r1, ip
 8016d88:	bf34      	ite	cc
 8016d8a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016d8e:	2100      	movcs	r1, #0
 8016d90:	3015      	adds	r0, #21
 8016d92:	fa04 f000 	lsl.w	r0, r4, r0
 8016d96:	fa21 f10e 	lsr.w	r1, r1, lr
 8016d9a:	ea40 0201 	orr.w	r2, r0, r1
 8016d9e:	ec43 2b10 	vmov	d0, r2, r3
 8016da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016da4:	42b7      	cmp	r7, r6
 8016da6:	bf3a      	itte	cc
 8016da8:	f1a5 0608 	subcc.w	r6, r5, #8
 8016dac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016db0:	2100      	movcs	r1, #0
 8016db2:	380b      	subs	r0, #11
 8016db4:	d015      	beq.n	8016de2 <__b2d+0x8e>
 8016db6:	4084      	lsls	r4, r0
 8016db8:	f1c0 0520 	rsb	r5, r0, #32
 8016dbc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016dc0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016dc4:	42be      	cmp	r6, r7
 8016dc6:	fa21 fc05 	lsr.w	ip, r1, r5
 8016dca:	ea44 030c 	orr.w	r3, r4, ip
 8016dce:	bf8c      	ite	hi
 8016dd0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016dd4:	2400      	movls	r4, #0
 8016dd6:	fa01 f000 	lsl.w	r0, r1, r0
 8016dda:	40ec      	lsrs	r4, r5
 8016ddc:	ea40 0204 	orr.w	r2, r0, r4
 8016de0:	e7dd      	b.n	8016d9e <__b2d+0x4a>
 8016de2:	ea44 030c 	orr.w	r3, r4, ip
 8016de6:	460a      	mov	r2, r1
 8016de8:	e7d9      	b.n	8016d9e <__b2d+0x4a>
 8016dea:	bf00      	nop
 8016dec:	3ff00000 	.word	0x3ff00000

08016df0 <__d2b>:
 8016df0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016df4:	460e      	mov	r6, r1
 8016df6:	2101      	movs	r1, #1
 8016df8:	ec59 8b10 	vmov	r8, r9, d0
 8016dfc:	4615      	mov	r5, r2
 8016dfe:	f7ff fcb5 	bl	801676c <_Balloc>
 8016e02:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016e06:	4607      	mov	r7, r0
 8016e08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016e0c:	bb34      	cbnz	r4, 8016e5c <__d2b+0x6c>
 8016e0e:	9301      	str	r3, [sp, #4]
 8016e10:	f1b8 0300 	subs.w	r3, r8, #0
 8016e14:	d027      	beq.n	8016e66 <__d2b+0x76>
 8016e16:	a802      	add	r0, sp, #8
 8016e18:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016e1c:	f7ff fd89 	bl	8016932 <__lo0bits>
 8016e20:	9900      	ldr	r1, [sp, #0]
 8016e22:	b1f0      	cbz	r0, 8016e62 <__d2b+0x72>
 8016e24:	9a01      	ldr	r2, [sp, #4]
 8016e26:	f1c0 0320 	rsb	r3, r0, #32
 8016e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8016e2e:	430b      	orrs	r3, r1
 8016e30:	40c2      	lsrs	r2, r0
 8016e32:	617b      	str	r3, [r7, #20]
 8016e34:	9201      	str	r2, [sp, #4]
 8016e36:	9b01      	ldr	r3, [sp, #4]
 8016e38:	61bb      	str	r3, [r7, #24]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	bf14      	ite	ne
 8016e3e:	2102      	movne	r1, #2
 8016e40:	2101      	moveq	r1, #1
 8016e42:	6139      	str	r1, [r7, #16]
 8016e44:	b1c4      	cbz	r4, 8016e78 <__d2b+0x88>
 8016e46:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016e4a:	4404      	add	r4, r0
 8016e4c:	6034      	str	r4, [r6, #0]
 8016e4e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016e52:	6028      	str	r0, [r5, #0]
 8016e54:	4638      	mov	r0, r7
 8016e56:	b003      	add	sp, #12
 8016e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016e60:	e7d5      	b.n	8016e0e <__d2b+0x1e>
 8016e62:	6179      	str	r1, [r7, #20]
 8016e64:	e7e7      	b.n	8016e36 <__d2b+0x46>
 8016e66:	a801      	add	r0, sp, #4
 8016e68:	f7ff fd63 	bl	8016932 <__lo0bits>
 8016e6c:	9b01      	ldr	r3, [sp, #4]
 8016e6e:	617b      	str	r3, [r7, #20]
 8016e70:	2101      	movs	r1, #1
 8016e72:	6139      	str	r1, [r7, #16]
 8016e74:	3020      	adds	r0, #32
 8016e76:	e7e5      	b.n	8016e44 <__d2b+0x54>
 8016e78:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016e7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016e80:	6030      	str	r0, [r6, #0]
 8016e82:	6918      	ldr	r0, [r3, #16]
 8016e84:	f7ff fd36 	bl	80168f4 <__hi0bits>
 8016e88:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016e8c:	e7e1      	b.n	8016e52 <__d2b+0x62>

08016e8e <__ratio>:
 8016e8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e92:	4688      	mov	r8, r1
 8016e94:	4669      	mov	r1, sp
 8016e96:	4681      	mov	r9, r0
 8016e98:	f7ff ff5c 	bl	8016d54 <__b2d>
 8016e9c:	a901      	add	r1, sp, #4
 8016e9e:	4640      	mov	r0, r8
 8016ea0:	ec57 6b10 	vmov	r6, r7, d0
 8016ea4:	ee10 4a10 	vmov	r4, s0
 8016ea8:	f7ff ff54 	bl	8016d54 <__b2d>
 8016eac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016eb0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016eb4:	eba3 0c02 	sub.w	ip, r3, r2
 8016eb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016ebc:	1a9b      	subs	r3, r3, r2
 8016ebe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016ec2:	ec51 0b10 	vmov	r0, r1, d0
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	ee10 aa10 	vmov	sl, s0
 8016ecc:	bfce      	itee	gt
 8016ece:	463a      	movgt	r2, r7
 8016ed0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016ed4:	460a      	movle	r2, r1
 8016ed6:	463d      	mov	r5, r7
 8016ed8:	468b      	mov	fp, r1
 8016eda:	bfcc      	ite	gt
 8016edc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016ee0:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016ee4:	ec45 4b17 	vmov	d7, r4, r5
 8016ee8:	ec4b ab16 	vmov	d6, sl, fp
 8016eec:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8016ef0:	b003      	add	sp, #12
 8016ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ef6 <__copybits>:
 8016ef6:	3901      	subs	r1, #1
 8016ef8:	b510      	push	{r4, lr}
 8016efa:	1149      	asrs	r1, r1, #5
 8016efc:	6914      	ldr	r4, [r2, #16]
 8016efe:	3101      	adds	r1, #1
 8016f00:	f102 0314 	add.w	r3, r2, #20
 8016f04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016f08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016f0c:	42a3      	cmp	r3, r4
 8016f0e:	4602      	mov	r2, r0
 8016f10:	d303      	bcc.n	8016f1a <__copybits+0x24>
 8016f12:	2300      	movs	r3, #0
 8016f14:	428a      	cmp	r2, r1
 8016f16:	d305      	bcc.n	8016f24 <__copybits+0x2e>
 8016f18:	bd10      	pop	{r4, pc}
 8016f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f1e:	f840 2b04 	str.w	r2, [r0], #4
 8016f22:	e7f3      	b.n	8016f0c <__copybits+0x16>
 8016f24:	f842 3b04 	str.w	r3, [r2], #4
 8016f28:	e7f4      	b.n	8016f14 <__copybits+0x1e>

08016f2a <__any_on>:
 8016f2a:	f100 0214 	add.w	r2, r0, #20
 8016f2e:	6900      	ldr	r0, [r0, #16]
 8016f30:	114b      	asrs	r3, r1, #5
 8016f32:	4298      	cmp	r0, r3
 8016f34:	b510      	push	{r4, lr}
 8016f36:	db11      	blt.n	8016f5c <__any_on+0x32>
 8016f38:	dd0a      	ble.n	8016f50 <__any_on+0x26>
 8016f3a:	f011 011f 	ands.w	r1, r1, #31
 8016f3e:	d007      	beq.n	8016f50 <__any_on+0x26>
 8016f40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016f44:	fa24 f001 	lsr.w	r0, r4, r1
 8016f48:	fa00 f101 	lsl.w	r1, r0, r1
 8016f4c:	428c      	cmp	r4, r1
 8016f4e:	d10b      	bne.n	8016f68 <__any_on+0x3e>
 8016f50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016f54:	4293      	cmp	r3, r2
 8016f56:	d803      	bhi.n	8016f60 <__any_on+0x36>
 8016f58:	2000      	movs	r0, #0
 8016f5a:	bd10      	pop	{r4, pc}
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	e7f7      	b.n	8016f50 <__any_on+0x26>
 8016f60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016f64:	2900      	cmp	r1, #0
 8016f66:	d0f5      	beq.n	8016f54 <__any_on+0x2a>
 8016f68:	2001      	movs	r0, #1
 8016f6a:	e7f6      	b.n	8016f5a <__any_on+0x30>

08016f6c <_calloc_r>:
 8016f6c:	b538      	push	{r3, r4, r5, lr}
 8016f6e:	fb02 f401 	mul.w	r4, r2, r1
 8016f72:	4621      	mov	r1, r4
 8016f74:	f000 f856 	bl	8017024 <_malloc_r>
 8016f78:	4605      	mov	r5, r0
 8016f7a:	b118      	cbz	r0, 8016f84 <_calloc_r+0x18>
 8016f7c:	4622      	mov	r2, r4
 8016f7e:	2100      	movs	r1, #0
 8016f80:	f7fc fb03 	bl	801358a <memset>
 8016f84:	4628      	mov	r0, r5
 8016f86:	bd38      	pop	{r3, r4, r5, pc}

08016f88 <_free_r>:
 8016f88:	b538      	push	{r3, r4, r5, lr}
 8016f8a:	4605      	mov	r5, r0
 8016f8c:	2900      	cmp	r1, #0
 8016f8e:	d045      	beq.n	801701c <_free_r+0x94>
 8016f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f94:	1f0c      	subs	r4, r1, #4
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	bfb8      	it	lt
 8016f9a:	18e4      	addlt	r4, r4, r3
 8016f9c:	f000 facf 	bl	801753e <__malloc_lock>
 8016fa0:	4a1f      	ldr	r2, [pc, #124]	; (8017020 <_free_r+0x98>)
 8016fa2:	6813      	ldr	r3, [r2, #0]
 8016fa4:	4610      	mov	r0, r2
 8016fa6:	b933      	cbnz	r3, 8016fb6 <_free_r+0x2e>
 8016fa8:	6063      	str	r3, [r4, #4]
 8016faa:	6014      	str	r4, [r2, #0]
 8016fac:	4628      	mov	r0, r5
 8016fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016fb2:	f000 bac5 	b.w	8017540 <__malloc_unlock>
 8016fb6:	42a3      	cmp	r3, r4
 8016fb8:	d90c      	bls.n	8016fd4 <_free_r+0x4c>
 8016fba:	6821      	ldr	r1, [r4, #0]
 8016fbc:	1862      	adds	r2, r4, r1
 8016fbe:	4293      	cmp	r3, r2
 8016fc0:	bf04      	itt	eq
 8016fc2:	681a      	ldreq	r2, [r3, #0]
 8016fc4:	685b      	ldreq	r3, [r3, #4]
 8016fc6:	6063      	str	r3, [r4, #4]
 8016fc8:	bf04      	itt	eq
 8016fca:	1852      	addeq	r2, r2, r1
 8016fcc:	6022      	streq	r2, [r4, #0]
 8016fce:	6004      	str	r4, [r0, #0]
 8016fd0:	e7ec      	b.n	8016fac <_free_r+0x24>
 8016fd2:	4613      	mov	r3, r2
 8016fd4:	685a      	ldr	r2, [r3, #4]
 8016fd6:	b10a      	cbz	r2, 8016fdc <_free_r+0x54>
 8016fd8:	42a2      	cmp	r2, r4
 8016fda:	d9fa      	bls.n	8016fd2 <_free_r+0x4a>
 8016fdc:	6819      	ldr	r1, [r3, #0]
 8016fde:	1858      	adds	r0, r3, r1
 8016fe0:	42a0      	cmp	r0, r4
 8016fe2:	d10b      	bne.n	8016ffc <_free_r+0x74>
 8016fe4:	6820      	ldr	r0, [r4, #0]
 8016fe6:	4401      	add	r1, r0
 8016fe8:	1858      	adds	r0, r3, r1
 8016fea:	4282      	cmp	r2, r0
 8016fec:	6019      	str	r1, [r3, #0]
 8016fee:	d1dd      	bne.n	8016fac <_free_r+0x24>
 8016ff0:	6810      	ldr	r0, [r2, #0]
 8016ff2:	6852      	ldr	r2, [r2, #4]
 8016ff4:	605a      	str	r2, [r3, #4]
 8016ff6:	4401      	add	r1, r0
 8016ff8:	6019      	str	r1, [r3, #0]
 8016ffa:	e7d7      	b.n	8016fac <_free_r+0x24>
 8016ffc:	d902      	bls.n	8017004 <_free_r+0x7c>
 8016ffe:	230c      	movs	r3, #12
 8017000:	602b      	str	r3, [r5, #0]
 8017002:	e7d3      	b.n	8016fac <_free_r+0x24>
 8017004:	6820      	ldr	r0, [r4, #0]
 8017006:	1821      	adds	r1, r4, r0
 8017008:	428a      	cmp	r2, r1
 801700a:	bf04      	itt	eq
 801700c:	6811      	ldreq	r1, [r2, #0]
 801700e:	6852      	ldreq	r2, [r2, #4]
 8017010:	6062      	str	r2, [r4, #4]
 8017012:	bf04      	itt	eq
 8017014:	1809      	addeq	r1, r1, r0
 8017016:	6021      	streq	r1, [r4, #0]
 8017018:	605c      	str	r4, [r3, #4]
 801701a:	e7c7      	b.n	8016fac <_free_r+0x24>
 801701c:	bd38      	pop	{r3, r4, r5, pc}
 801701e:	bf00      	nop
 8017020:	20028aa0 	.word	0x20028aa0

08017024 <_malloc_r>:
 8017024:	b570      	push	{r4, r5, r6, lr}
 8017026:	1ccd      	adds	r5, r1, #3
 8017028:	f025 0503 	bic.w	r5, r5, #3
 801702c:	3508      	adds	r5, #8
 801702e:	2d0c      	cmp	r5, #12
 8017030:	bf38      	it	cc
 8017032:	250c      	movcc	r5, #12
 8017034:	2d00      	cmp	r5, #0
 8017036:	4606      	mov	r6, r0
 8017038:	db01      	blt.n	801703e <_malloc_r+0x1a>
 801703a:	42a9      	cmp	r1, r5
 801703c:	d903      	bls.n	8017046 <_malloc_r+0x22>
 801703e:	230c      	movs	r3, #12
 8017040:	6033      	str	r3, [r6, #0]
 8017042:	2000      	movs	r0, #0
 8017044:	bd70      	pop	{r4, r5, r6, pc}
 8017046:	f000 fa7a 	bl	801753e <__malloc_lock>
 801704a:	4a21      	ldr	r2, [pc, #132]	; (80170d0 <_malloc_r+0xac>)
 801704c:	6814      	ldr	r4, [r2, #0]
 801704e:	4621      	mov	r1, r4
 8017050:	b991      	cbnz	r1, 8017078 <_malloc_r+0x54>
 8017052:	4c20      	ldr	r4, [pc, #128]	; (80170d4 <_malloc_r+0xb0>)
 8017054:	6823      	ldr	r3, [r4, #0]
 8017056:	b91b      	cbnz	r3, 8017060 <_malloc_r+0x3c>
 8017058:	4630      	mov	r0, r6
 801705a:	f000 f98f 	bl	801737c <_sbrk_r>
 801705e:	6020      	str	r0, [r4, #0]
 8017060:	4629      	mov	r1, r5
 8017062:	4630      	mov	r0, r6
 8017064:	f000 f98a 	bl	801737c <_sbrk_r>
 8017068:	1c43      	adds	r3, r0, #1
 801706a:	d124      	bne.n	80170b6 <_malloc_r+0x92>
 801706c:	230c      	movs	r3, #12
 801706e:	6033      	str	r3, [r6, #0]
 8017070:	4630      	mov	r0, r6
 8017072:	f000 fa65 	bl	8017540 <__malloc_unlock>
 8017076:	e7e4      	b.n	8017042 <_malloc_r+0x1e>
 8017078:	680b      	ldr	r3, [r1, #0]
 801707a:	1b5b      	subs	r3, r3, r5
 801707c:	d418      	bmi.n	80170b0 <_malloc_r+0x8c>
 801707e:	2b0b      	cmp	r3, #11
 8017080:	d90f      	bls.n	80170a2 <_malloc_r+0x7e>
 8017082:	600b      	str	r3, [r1, #0]
 8017084:	50cd      	str	r5, [r1, r3]
 8017086:	18cc      	adds	r4, r1, r3
 8017088:	4630      	mov	r0, r6
 801708a:	f000 fa59 	bl	8017540 <__malloc_unlock>
 801708e:	f104 000b 	add.w	r0, r4, #11
 8017092:	1d23      	adds	r3, r4, #4
 8017094:	f020 0007 	bic.w	r0, r0, #7
 8017098:	1ac3      	subs	r3, r0, r3
 801709a:	d0d3      	beq.n	8017044 <_malloc_r+0x20>
 801709c:	425a      	negs	r2, r3
 801709e:	50e2      	str	r2, [r4, r3]
 80170a0:	e7d0      	b.n	8017044 <_malloc_r+0x20>
 80170a2:	428c      	cmp	r4, r1
 80170a4:	684b      	ldr	r3, [r1, #4]
 80170a6:	bf16      	itet	ne
 80170a8:	6063      	strne	r3, [r4, #4]
 80170aa:	6013      	streq	r3, [r2, #0]
 80170ac:	460c      	movne	r4, r1
 80170ae:	e7eb      	b.n	8017088 <_malloc_r+0x64>
 80170b0:	460c      	mov	r4, r1
 80170b2:	6849      	ldr	r1, [r1, #4]
 80170b4:	e7cc      	b.n	8017050 <_malloc_r+0x2c>
 80170b6:	1cc4      	adds	r4, r0, #3
 80170b8:	f024 0403 	bic.w	r4, r4, #3
 80170bc:	42a0      	cmp	r0, r4
 80170be:	d005      	beq.n	80170cc <_malloc_r+0xa8>
 80170c0:	1a21      	subs	r1, r4, r0
 80170c2:	4630      	mov	r0, r6
 80170c4:	f000 f95a 	bl	801737c <_sbrk_r>
 80170c8:	3001      	adds	r0, #1
 80170ca:	d0cf      	beq.n	801706c <_malloc_r+0x48>
 80170cc:	6025      	str	r5, [r4, #0]
 80170ce:	e7db      	b.n	8017088 <_malloc_r+0x64>
 80170d0:	20028aa0 	.word	0x20028aa0
 80170d4:	20028aa4 	.word	0x20028aa4

080170d8 <__ssputs_r>:
 80170d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170dc:	688e      	ldr	r6, [r1, #8]
 80170de:	429e      	cmp	r6, r3
 80170e0:	4682      	mov	sl, r0
 80170e2:	460c      	mov	r4, r1
 80170e4:	4690      	mov	r8, r2
 80170e6:	4699      	mov	r9, r3
 80170e8:	d837      	bhi.n	801715a <__ssputs_r+0x82>
 80170ea:	898a      	ldrh	r2, [r1, #12]
 80170ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80170f0:	d031      	beq.n	8017156 <__ssputs_r+0x7e>
 80170f2:	6825      	ldr	r5, [r4, #0]
 80170f4:	6909      	ldr	r1, [r1, #16]
 80170f6:	1a6f      	subs	r7, r5, r1
 80170f8:	6965      	ldr	r5, [r4, #20]
 80170fa:	2302      	movs	r3, #2
 80170fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017100:	fb95 f5f3 	sdiv	r5, r5, r3
 8017104:	f109 0301 	add.w	r3, r9, #1
 8017108:	443b      	add	r3, r7
 801710a:	429d      	cmp	r5, r3
 801710c:	bf38      	it	cc
 801710e:	461d      	movcc	r5, r3
 8017110:	0553      	lsls	r3, r2, #21
 8017112:	d530      	bpl.n	8017176 <__ssputs_r+0x9e>
 8017114:	4629      	mov	r1, r5
 8017116:	f7ff ff85 	bl	8017024 <_malloc_r>
 801711a:	4606      	mov	r6, r0
 801711c:	b950      	cbnz	r0, 8017134 <__ssputs_r+0x5c>
 801711e:	230c      	movs	r3, #12
 8017120:	f8ca 3000 	str.w	r3, [sl]
 8017124:	89a3      	ldrh	r3, [r4, #12]
 8017126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801712a:	81a3      	strh	r3, [r4, #12]
 801712c:	f04f 30ff 	mov.w	r0, #4294967295
 8017130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017134:	463a      	mov	r2, r7
 8017136:	6921      	ldr	r1, [r4, #16]
 8017138:	f7fc fa1c 	bl	8013574 <memcpy>
 801713c:	89a3      	ldrh	r3, [r4, #12]
 801713e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017146:	81a3      	strh	r3, [r4, #12]
 8017148:	6126      	str	r6, [r4, #16]
 801714a:	6165      	str	r5, [r4, #20]
 801714c:	443e      	add	r6, r7
 801714e:	1bed      	subs	r5, r5, r7
 8017150:	6026      	str	r6, [r4, #0]
 8017152:	60a5      	str	r5, [r4, #8]
 8017154:	464e      	mov	r6, r9
 8017156:	454e      	cmp	r6, r9
 8017158:	d900      	bls.n	801715c <__ssputs_r+0x84>
 801715a:	464e      	mov	r6, r9
 801715c:	4632      	mov	r2, r6
 801715e:	4641      	mov	r1, r8
 8017160:	6820      	ldr	r0, [r4, #0]
 8017162:	f000 f9d3 	bl	801750c <memmove>
 8017166:	68a3      	ldr	r3, [r4, #8]
 8017168:	1b9b      	subs	r3, r3, r6
 801716a:	60a3      	str	r3, [r4, #8]
 801716c:	6823      	ldr	r3, [r4, #0]
 801716e:	441e      	add	r6, r3
 8017170:	6026      	str	r6, [r4, #0]
 8017172:	2000      	movs	r0, #0
 8017174:	e7dc      	b.n	8017130 <__ssputs_r+0x58>
 8017176:	462a      	mov	r2, r5
 8017178:	f000 f9e3 	bl	8017542 <_realloc_r>
 801717c:	4606      	mov	r6, r0
 801717e:	2800      	cmp	r0, #0
 8017180:	d1e2      	bne.n	8017148 <__ssputs_r+0x70>
 8017182:	6921      	ldr	r1, [r4, #16]
 8017184:	4650      	mov	r0, sl
 8017186:	f7ff feff 	bl	8016f88 <_free_r>
 801718a:	e7c8      	b.n	801711e <__ssputs_r+0x46>

0801718c <_svfiprintf_r>:
 801718c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017190:	461d      	mov	r5, r3
 8017192:	898b      	ldrh	r3, [r1, #12]
 8017194:	061f      	lsls	r7, r3, #24
 8017196:	b09d      	sub	sp, #116	; 0x74
 8017198:	4680      	mov	r8, r0
 801719a:	460c      	mov	r4, r1
 801719c:	4616      	mov	r6, r2
 801719e:	d50f      	bpl.n	80171c0 <_svfiprintf_r+0x34>
 80171a0:	690b      	ldr	r3, [r1, #16]
 80171a2:	b96b      	cbnz	r3, 80171c0 <_svfiprintf_r+0x34>
 80171a4:	2140      	movs	r1, #64	; 0x40
 80171a6:	f7ff ff3d 	bl	8017024 <_malloc_r>
 80171aa:	6020      	str	r0, [r4, #0]
 80171ac:	6120      	str	r0, [r4, #16]
 80171ae:	b928      	cbnz	r0, 80171bc <_svfiprintf_r+0x30>
 80171b0:	230c      	movs	r3, #12
 80171b2:	f8c8 3000 	str.w	r3, [r8]
 80171b6:	f04f 30ff 	mov.w	r0, #4294967295
 80171ba:	e0c8      	b.n	801734e <_svfiprintf_r+0x1c2>
 80171bc:	2340      	movs	r3, #64	; 0x40
 80171be:	6163      	str	r3, [r4, #20]
 80171c0:	2300      	movs	r3, #0
 80171c2:	9309      	str	r3, [sp, #36]	; 0x24
 80171c4:	2320      	movs	r3, #32
 80171c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80171ca:	2330      	movs	r3, #48	; 0x30
 80171cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80171d0:	9503      	str	r5, [sp, #12]
 80171d2:	f04f 0b01 	mov.w	fp, #1
 80171d6:	4637      	mov	r7, r6
 80171d8:	463d      	mov	r5, r7
 80171da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80171de:	b10b      	cbz	r3, 80171e4 <_svfiprintf_r+0x58>
 80171e0:	2b25      	cmp	r3, #37	; 0x25
 80171e2:	d13e      	bne.n	8017262 <_svfiprintf_r+0xd6>
 80171e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80171e8:	d00b      	beq.n	8017202 <_svfiprintf_r+0x76>
 80171ea:	4653      	mov	r3, sl
 80171ec:	4632      	mov	r2, r6
 80171ee:	4621      	mov	r1, r4
 80171f0:	4640      	mov	r0, r8
 80171f2:	f7ff ff71 	bl	80170d8 <__ssputs_r>
 80171f6:	3001      	adds	r0, #1
 80171f8:	f000 80a4 	beq.w	8017344 <_svfiprintf_r+0x1b8>
 80171fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171fe:	4453      	add	r3, sl
 8017200:	9309      	str	r3, [sp, #36]	; 0x24
 8017202:	783b      	ldrb	r3, [r7, #0]
 8017204:	2b00      	cmp	r3, #0
 8017206:	f000 809d 	beq.w	8017344 <_svfiprintf_r+0x1b8>
 801720a:	2300      	movs	r3, #0
 801720c:	f04f 32ff 	mov.w	r2, #4294967295
 8017210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017214:	9304      	str	r3, [sp, #16]
 8017216:	9307      	str	r3, [sp, #28]
 8017218:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801721c:	931a      	str	r3, [sp, #104]	; 0x68
 801721e:	462f      	mov	r7, r5
 8017220:	2205      	movs	r2, #5
 8017222:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017226:	4850      	ldr	r0, [pc, #320]	; (8017368 <_svfiprintf_r+0x1dc>)
 8017228:	f7e9 f812 	bl	8000250 <memchr>
 801722c:	9b04      	ldr	r3, [sp, #16]
 801722e:	b9d0      	cbnz	r0, 8017266 <_svfiprintf_r+0xda>
 8017230:	06d9      	lsls	r1, r3, #27
 8017232:	bf44      	itt	mi
 8017234:	2220      	movmi	r2, #32
 8017236:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801723a:	071a      	lsls	r2, r3, #28
 801723c:	bf44      	itt	mi
 801723e:	222b      	movmi	r2, #43	; 0x2b
 8017240:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017244:	782a      	ldrb	r2, [r5, #0]
 8017246:	2a2a      	cmp	r2, #42	; 0x2a
 8017248:	d015      	beq.n	8017276 <_svfiprintf_r+0xea>
 801724a:	9a07      	ldr	r2, [sp, #28]
 801724c:	462f      	mov	r7, r5
 801724e:	2000      	movs	r0, #0
 8017250:	250a      	movs	r5, #10
 8017252:	4639      	mov	r1, r7
 8017254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017258:	3b30      	subs	r3, #48	; 0x30
 801725a:	2b09      	cmp	r3, #9
 801725c:	d94d      	bls.n	80172fa <_svfiprintf_r+0x16e>
 801725e:	b1b8      	cbz	r0, 8017290 <_svfiprintf_r+0x104>
 8017260:	e00f      	b.n	8017282 <_svfiprintf_r+0xf6>
 8017262:	462f      	mov	r7, r5
 8017264:	e7b8      	b.n	80171d8 <_svfiprintf_r+0x4c>
 8017266:	4a40      	ldr	r2, [pc, #256]	; (8017368 <_svfiprintf_r+0x1dc>)
 8017268:	1a80      	subs	r0, r0, r2
 801726a:	fa0b f000 	lsl.w	r0, fp, r0
 801726e:	4318      	orrs	r0, r3
 8017270:	9004      	str	r0, [sp, #16]
 8017272:	463d      	mov	r5, r7
 8017274:	e7d3      	b.n	801721e <_svfiprintf_r+0x92>
 8017276:	9a03      	ldr	r2, [sp, #12]
 8017278:	1d11      	adds	r1, r2, #4
 801727a:	6812      	ldr	r2, [r2, #0]
 801727c:	9103      	str	r1, [sp, #12]
 801727e:	2a00      	cmp	r2, #0
 8017280:	db01      	blt.n	8017286 <_svfiprintf_r+0xfa>
 8017282:	9207      	str	r2, [sp, #28]
 8017284:	e004      	b.n	8017290 <_svfiprintf_r+0x104>
 8017286:	4252      	negs	r2, r2
 8017288:	f043 0302 	orr.w	r3, r3, #2
 801728c:	9207      	str	r2, [sp, #28]
 801728e:	9304      	str	r3, [sp, #16]
 8017290:	783b      	ldrb	r3, [r7, #0]
 8017292:	2b2e      	cmp	r3, #46	; 0x2e
 8017294:	d10c      	bne.n	80172b0 <_svfiprintf_r+0x124>
 8017296:	787b      	ldrb	r3, [r7, #1]
 8017298:	2b2a      	cmp	r3, #42	; 0x2a
 801729a:	d133      	bne.n	8017304 <_svfiprintf_r+0x178>
 801729c:	9b03      	ldr	r3, [sp, #12]
 801729e:	1d1a      	adds	r2, r3, #4
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	9203      	str	r2, [sp, #12]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	bfb8      	it	lt
 80172a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80172ac:	3702      	adds	r7, #2
 80172ae:	9305      	str	r3, [sp, #20]
 80172b0:	4d2e      	ldr	r5, [pc, #184]	; (801736c <_svfiprintf_r+0x1e0>)
 80172b2:	7839      	ldrb	r1, [r7, #0]
 80172b4:	2203      	movs	r2, #3
 80172b6:	4628      	mov	r0, r5
 80172b8:	f7e8 ffca 	bl	8000250 <memchr>
 80172bc:	b138      	cbz	r0, 80172ce <_svfiprintf_r+0x142>
 80172be:	2340      	movs	r3, #64	; 0x40
 80172c0:	1b40      	subs	r0, r0, r5
 80172c2:	fa03 f000 	lsl.w	r0, r3, r0
 80172c6:	9b04      	ldr	r3, [sp, #16]
 80172c8:	4303      	orrs	r3, r0
 80172ca:	3701      	adds	r7, #1
 80172cc:	9304      	str	r3, [sp, #16]
 80172ce:	7839      	ldrb	r1, [r7, #0]
 80172d0:	4827      	ldr	r0, [pc, #156]	; (8017370 <_svfiprintf_r+0x1e4>)
 80172d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80172d6:	2206      	movs	r2, #6
 80172d8:	1c7e      	adds	r6, r7, #1
 80172da:	f7e8 ffb9 	bl	8000250 <memchr>
 80172de:	2800      	cmp	r0, #0
 80172e0:	d038      	beq.n	8017354 <_svfiprintf_r+0x1c8>
 80172e2:	4b24      	ldr	r3, [pc, #144]	; (8017374 <_svfiprintf_r+0x1e8>)
 80172e4:	bb13      	cbnz	r3, 801732c <_svfiprintf_r+0x1a0>
 80172e6:	9b03      	ldr	r3, [sp, #12]
 80172e8:	3307      	adds	r3, #7
 80172ea:	f023 0307 	bic.w	r3, r3, #7
 80172ee:	3308      	adds	r3, #8
 80172f0:	9303      	str	r3, [sp, #12]
 80172f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172f4:	444b      	add	r3, r9
 80172f6:	9309      	str	r3, [sp, #36]	; 0x24
 80172f8:	e76d      	b.n	80171d6 <_svfiprintf_r+0x4a>
 80172fa:	fb05 3202 	mla	r2, r5, r2, r3
 80172fe:	2001      	movs	r0, #1
 8017300:	460f      	mov	r7, r1
 8017302:	e7a6      	b.n	8017252 <_svfiprintf_r+0xc6>
 8017304:	2300      	movs	r3, #0
 8017306:	3701      	adds	r7, #1
 8017308:	9305      	str	r3, [sp, #20]
 801730a:	4619      	mov	r1, r3
 801730c:	250a      	movs	r5, #10
 801730e:	4638      	mov	r0, r7
 8017310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017314:	3a30      	subs	r2, #48	; 0x30
 8017316:	2a09      	cmp	r2, #9
 8017318:	d903      	bls.n	8017322 <_svfiprintf_r+0x196>
 801731a:	2b00      	cmp	r3, #0
 801731c:	d0c8      	beq.n	80172b0 <_svfiprintf_r+0x124>
 801731e:	9105      	str	r1, [sp, #20]
 8017320:	e7c6      	b.n	80172b0 <_svfiprintf_r+0x124>
 8017322:	fb05 2101 	mla	r1, r5, r1, r2
 8017326:	2301      	movs	r3, #1
 8017328:	4607      	mov	r7, r0
 801732a:	e7f0      	b.n	801730e <_svfiprintf_r+0x182>
 801732c:	ab03      	add	r3, sp, #12
 801732e:	9300      	str	r3, [sp, #0]
 8017330:	4622      	mov	r2, r4
 8017332:	4b11      	ldr	r3, [pc, #68]	; (8017378 <_svfiprintf_r+0x1ec>)
 8017334:	a904      	add	r1, sp, #16
 8017336:	4640      	mov	r0, r8
 8017338:	f7fc f9b6 	bl	80136a8 <_printf_float>
 801733c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017340:	4681      	mov	r9, r0
 8017342:	d1d6      	bne.n	80172f2 <_svfiprintf_r+0x166>
 8017344:	89a3      	ldrh	r3, [r4, #12]
 8017346:	065b      	lsls	r3, r3, #25
 8017348:	f53f af35 	bmi.w	80171b6 <_svfiprintf_r+0x2a>
 801734c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801734e:	b01d      	add	sp, #116	; 0x74
 8017350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017354:	ab03      	add	r3, sp, #12
 8017356:	9300      	str	r3, [sp, #0]
 8017358:	4622      	mov	r2, r4
 801735a:	4b07      	ldr	r3, [pc, #28]	; (8017378 <_svfiprintf_r+0x1ec>)
 801735c:	a904      	add	r1, sp, #16
 801735e:	4640      	mov	r0, r8
 8017360:	f7fc fc44 	bl	8013bec <_printf_i>
 8017364:	e7ea      	b.n	801733c <_svfiprintf_r+0x1b0>
 8017366:	bf00      	nop
 8017368:	08018754 	.word	0x08018754
 801736c:	0801875a 	.word	0x0801875a
 8017370:	0801875e 	.word	0x0801875e
 8017374:	080136a9 	.word	0x080136a9
 8017378:	080170d9 	.word	0x080170d9

0801737c <_sbrk_r>:
 801737c:	b538      	push	{r3, r4, r5, lr}
 801737e:	4c06      	ldr	r4, [pc, #24]	; (8017398 <_sbrk_r+0x1c>)
 8017380:	2300      	movs	r3, #0
 8017382:	4605      	mov	r5, r0
 8017384:	4608      	mov	r0, r1
 8017386:	6023      	str	r3, [r4, #0]
 8017388:	f7f1 fd70 	bl	8008e6c <_sbrk>
 801738c:	1c43      	adds	r3, r0, #1
 801738e:	d102      	bne.n	8017396 <_sbrk_r+0x1a>
 8017390:	6823      	ldr	r3, [r4, #0]
 8017392:	b103      	cbz	r3, 8017396 <_sbrk_r+0x1a>
 8017394:	602b      	str	r3, [r5, #0]
 8017396:	bd38      	pop	{r3, r4, r5, pc}
 8017398:	20031020 	.word	0x20031020

0801739c <__sread>:
 801739c:	b510      	push	{r4, lr}
 801739e:	460c      	mov	r4, r1
 80173a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173a4:	f000 f8f4 	bl	8017590 <_read_r>
 80173a8:	2800      	cmp	r0, #0
 80173aa:	bfab      	itete	ge
 80173ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80173ae:	89a3      	ldrhlt	r3, [r4, #12]
 80173b0:	181b      	addge	r3, r3, r0
 80173b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80173b6:	bfac      	ite	ge
 80173b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80173ba:	81a3      	strhlt	r3, [r4, #12]
 80173bc:	bd10      	pop	{r4, pc}

080173be <__swrite>:
 80173be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173c2:	461f      	mov	r7, r3
 80173c4:	898b      	ldrh	r3, [r1, #12]
 80173c6:	05db      	lsls	r3, r3, #23
 80173c8:	4605      	mov	r5, r0
 80173ca:	460c      	mov	r4, r1
 80173cc:	4616      	mov	r6, r2
 80173ce:	d505      	bpl.n	80173dc <__swrite+0x1e>
 80173d0:	2302      	movs	r3, #2
 80173d2:	2200      	movs	r2, #0
 80173d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173d8:	f000 f886 	bl	80174e8 <_lseek_r>
 80173dc:	89a3      	ldrh	r3, [r4, #12]
 80173de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80173e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80173e6:	81a3      	strh	r3, [r4, #12]
 80173e8:	4632      	mov	r2, r6
 80173ea:	463b      	mov	r3, r7
 80173ec:	4628      	mov	r0, r5
 80173ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173f2:	f000 b835 	b.w	8017460 <_write_r>

080173f6 <__sseek>:
 80173f6:	b510      	push	{r4, lr}
 80173f8:	460c      	mov	r4, r1
 80173fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173fe:	f000 f873 	bl	80174e8 <_lseek_r>
 8017402:	1c43      	adds	r3, r0, #1
 8017404:	89a3      	ldrh	r3, [r4, #12]
 8017406:	bf15      	itete	ne
 8017408:	6560      	strne	r0, [r4, #84]	; 0x54
 801740a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801740e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017412:	81a3      	strheq	r3, [r4, #12]
 8017414:	bf18      	it	ne
 8017416:	81a3      	strhne	r3, [r4, #12]
 8017418:	bd10      	pop	{r4, pc}

0801741a <__sclose>:
 801741a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801741e:	f000 b831 	b.w	8017484 <_close_r>

08017422 <strncmp>:
 8017422:	b510      	push	{r4, lr}
 8017424:	b16a      	cbz	r2, 8017442 <strncmp+0x20>
 8017426:	3901      	subs	r1, #1
 8017428:	1884      	adds	r4, r0, r2
 801742a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801742e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017432:	4293      	cmp	r3, r2
 8017434:	d103      	bne.n	801743e <strncmp+0x1c>
 8017436:	42a0      	cmp	r0, r4
 8017438:	d001      	beq.n	801743e <strncmp+0x1c>
 801743a:	2b00      	cmp	r3, #0
 801743c:	d1f5      	bne.n	801742a <strncmp+0x8>
 801743e:	1a98      	subs	r0, r3, r2
 8017440:	bd10      	pop	{r4, pc}
 8017442:	4610      	mov	r0, r2
 8017444:	e7fc      	b.n	8017440 <strncmp+0x1e>

08017446 <__ascii_wctomb>:
 8017446:	b149      	cbz	r1, 801745c <__ascii_wctomb+0x16>
 8017448:	2aff      	cmp	r2, #255	; 0xff
 801744a:	bf85      	ittet	hi
 801744c:	238a      	movhi	r3, #138	; 0x8a
 801744e:	6003      	strhi	r3, [r0, #0]
 8017450:	700a      	strbls	r2, [r1, #0]
 8017452:	f04f 30ff 	movhi.w	r0, #4294967295
 8017456:	bf98      	it	ls
 8017458:	2001      	movls	r0, #1
 801745a:	4770      	bx	lr
 801745c:	4608      	mov	r0, r1
 801745e:	4770      	bx	lr

08017460 <_write_r>:
 8017460:	b538      	push	{r3, r4, r5, lr}
 8017462:	4c07      	ldr	r4, [pc, #28]	; (8017480 <_write_r+0x20>)
 8017464:	4605      	mov	r5, r0
 8017466:	4608      	mov	r0, r1
 8017468:	4611      	mov	r1, r2
 801746a:	2200      	movs	r2, #0
 801746c:	6022      	str	r2, [r4, #0]
 801746e:	461a      	mov	r2, r3
 8017470:	f7f1 fcab 	bl	8008dca <_write>
 8017474:	1c43      	adds	r3, r0, #1
 8017476:	d102      	bne.n	801747e <_write_r+0x1e>
 8017478:	6823      	ldr	r3, [r4, #0]
 801747a:	b103      	cbz	r3, 801747e <_write_r+0x1e>
 801747c:	602b      	str	r3, [r5, #0]
 801747e:	bd38      	pop	{r3, r4, r5, pc}
 8017480:	20031020 	.word	0x20031020

08017484 <_close_r>:
 8017484:	b538      	push	{r3, r4, r5, lr}
 8017486:	4c06      	ldr	r4, [pc, #24]	; (80174a0 <_close_r+0x1c>)
 8017488:	2300      	movs	r3, #0
 801748a:	4605      	mov	r5, r0
 801748c:	4608      	mov	r0, r1
 801748e:	6023      	str	r3, [r4, #0]
 8017490:	f7f1 fcb7 	bl	8008e02 <_close>
 8017494:	1c43      	adds	r3, r0, #1
 8017496:	d102      	bne.n	801749e <_close_r+0x1a>
 8017498:	6823      	ldr	r3, [r4, #0]
 801749a:	b103      	cbz	r3, 801749e <_close_r+0x1a>
 801749c:	602b      	str	r3, [r5, #0]
 801749e:	bd38      	pop	{r3, r4, r5, pc}
 80174a0:	20031020 	.word	0x20031020

080174a4 <_fstat_r>:
 80174a4:	b538      	push	{r3, r4, r5, lr}
 80174a6:	4c07      	ldr	r4, [pc, #28]	; (80174c4 <_fstat_r+0x20>)
 80174a8:	2300      	movs	r3, #0
 80174aa:	4605      	mov	r5, r0
 80174ac:	4608      	mov	r0, r1
 80174ae:	4611      	mov	r1, r2
 80174b0:	6023      	str	r3, [r4, #0]
 80174b2:	f7f1 fcb2 	bl	8008e1a <_fstat>
 80174b6:	1c43      	adds	r3, r0, #1
 80174b8:	d102      	bne.n	80174c0 <_fstat_r+0x1c>
 80174ba:	6823      	ldr	r3, [r4, #0]
 80174bc:	b103      	cbz	r3, 80174c0 <_fstat_r+0x1c>
 80174be:	602b      	str	r3, [r5, #0]
 80174c0:	bd38      	pop	{r3, r4, r5, pc}
 80174c2:	bf00      	nop
 80174c4:	20031020 	.word	0x20031020

080174c8 <_isatty_r>:
 80174c8:	b538      	push	{r3, r4, r5, lr}
 80174ca:	4c06      	ldr	r4, [pc, #24]	; (80174e4 <_isatty_r+0x1c>)
 80174cc:	2300      	movs	r3, #0
 80174ce:	4605      	mov	r5, r0
 80174d0:	4608      	mov	r0, r1
 80174d2:	6023      	str	r3, [r4, #0]
 80174d4:	f7f1 fcb1 	bl	8008e3a <_isatty>
 80174d8:	1c43      	adds	r3, r0, #1
 80174da:	d102      	bne.n	80174e2 <_isatty_r+0x1a>
 80174dc:	6823      	ldr	r3, [r4, #0]
 80174de:	b103      	cbz	r3, 80174e2 <_isatty_r+0x1a>
 80174e0:	602b      	str	r3, [r5, #0]
 80174e2:	bd38      	pop	{r3, r4, r5, pc}
 80174e4:	20031020 	.word	0x20031020

080174e8 <_lseek_r>:
 80174e8:	b538      	push	{r3, r4, r5, lr}
 80174ea:	4c07      	ldr	r4, [pc, #28]	; (8017508 <_lseek_r+0x20>)
 80174ec:	4605      	mov	r5, r0
 80174ee:	4608      	mov	r0, r1
 80174f0:	4611      	mov	r1, r2
 80174f2:	2200      	movs	r2, #0
 80174f4:	6022      	str	r2, [r4, #0]
 80174f6:	461a      	mov	r2, r3
 80174f8:	f7f1 fcaa 	bl	8008e50 <_lseek>
 80174fc:	1c43      	adds	r3, r0, #1
 80174fe:	d102      	bne.n	8017506 <_lseek_r+0x1e>
 8017500:	6823      	ldr	r3, [r4, #0]
 8017502:	b103      	cbz	r3, 8017506 <_lseek_r+0x1e>
 8017504:	602b      	str	r3, [r5, #0]
 8017506:	bd38      	pop	{r3, r4, r5, pc}
 8017508:	20031020 	.word	0x20031020

0801750c <memmove>:
 801750c:	4288      	cmp	r0, r1
 801750e:	b510      	push	{r4, lr}
 8017510:	eb01 0302 	add.w	r3, r1, r2
 8017514:	d807      	bhi.n	8017526 <memmove+0x1a>
 8017516:	1e42      	subs	r2, r0, #1
 8017518:	4299      	cmp	r1, r3
 801751a:	d00a      	beq.n	8017532 <memmove+0x26>
 801751c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017520:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017524:	e7f8      	b.n	8017518 <memmove+0xc>
 8017526:	4283      	cmp	r3, r0
 8017528:	d9f5      	bls.n	8017516 <memmove+0xa>
 801752a:	1881      	adds	r1, r0, r2
 801752c:	1ad2      	subs	r2, r2, r3
 801752e:	42d3      	cmn	r3, r2
 8017530:	d100      	bne.n	8017534 <memmove+0x28>
 8017532:	bd10      	pop	{r4, pc}
 8017534:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017538:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801753c:	e7f7      	b.n	801752e <memmove+0x22>

0801753e <__malloc_lock>:
 801753e:	4770      	bx	lr

08017540 <__malloc_unlock>:
 8017540:	4770      	bx	lr

08017542 <_realloc_r>:
 8017542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017544:	4607      	mov	r7, r0
 8017546:	4614      	mov	r4, r2
 8017548:	460e      	mov	r6, r1
 801754a:	b921      	cbnz	r1, 8017556 <_realloc_r+0x14>
 801754c:	4611      	mov	r1, r2
 801754e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017552:	f7ff bd67 	b.w	8017024 <_malloc_r>
 8017556:	b922      	cbnz	r2, 8017562 <_realloc_r+0x20>
 8017558:	f7ff fd16 	bl	8016f88 <_free_r>
 801755c:	4625      	mov	r5, r4
 801755e:	4628      	mov	r0, r5
 8017560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017562:	f000 f827 	bl	80175b4 <_malloc_usable_size_r>
 8017566:	42a0      	cmp	r0, r4
 8017568:	d20f      	bcs.n	801758a <_realloc_r+0x48>
 801756a:	4621      	mov	r1, r4
 801756c:	4638      	mov	r0, r7
 801756e:	f7ff fd59 	bl	8017024 <_malloc_r>
 8017572:	4605      	mov	r5, r0
 8017574:	2800      	cmp	r0, #0
 8017576:	d0f2      	beq.n	801755e <_realloc_r+0x1c>
 8017578:	4631      	mov	r1, r6
 801757a:	4622      	mov	r2, r4
 801757c:	f7fb fffa 	bl	8013574 <memcpy>
 8017580:	4631      	mov	r1, r6
 8017582:	4638      	mov	r0, r7
 8017584:	f7ff fd00 	bl	8016f88 <_free_r>
 8017588:	e7e9      	b.n	801755e <_realloc_r+0x1c>
 801758a:	4635      	mov	r5, r6
 801758c:	e7e7      	b.n	801755e <_realloc_r+0x1c>
	...

08017590 <_read_r>:
 8017590:	b538      	push	{r3, r4, r5, lr}
 8017592:	4c07      	ldr	r4, [pc, #28]	; (80175b0 <_read_r+0x20>)
 8017594:	4605      	mov	r5, r0
 8017596:	4608      	mov	r0, r1
 8017598:	4611      	mov	r1, r2
 801759a:	2200      	movs	r2, #0
 801759c:	6022      	str	r2, [r4, #0]
 801759e:	461a      	mov	r2, r3
 80175a0:	f7f1 fbf6 	bl	8008d90 <_read>
 80175a4:	1c43      	adds	r3, r0, #1
 80175a6:	d102      	bne.n	80175ae <_read_r+0x1e>
 80175a8:	6823      	ldr	r3, [r4, #0]
 80175aa:	b103      	cbz	r3, 80175ae <_read_r+0x1e>
 80175ac:	602b      	str	r3, [r5, #0]
 80175ae:	bd38      	pop	{r3, r4, r5, pc}
 80175b0:	20031020 	.word	0x20031020

080175b4 <_malloc_usable_size_r>:
 80175b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80175b8:	1f18      	subs	r0, r3, #4
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	bfbc      	itt	lt
 80175be:	580b      	ldrlt	r3, [r1, r0]
 80175c0:	18c0      	addlt	r0, r0, r3
 80175c2:	4770      	bx	lr

080175c4 <_init>:
 80175c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175c6:	bf00      	nop
 80175c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175ca:	bc08      	pop	{r3}
 80175cc:	469e      	mov	lr, r3
 80175ce:	4770      	bx	lr

080175d0 <_fini>:
 80175d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175d2:	bf00      	nop
 80175d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175d6:	bc08      	pop	{r3}
 80175d8:	469e      	mov	lr, r3
 80175da:	4770      	bx	lr
