
Dev_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014184  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe8  08014388  08014388  00024388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015370  08015370  00030368  2**0
                  CONTENTS
  4 .ARM          00000008  08015370  08015370  00025370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015378  08015378  00030368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015378  08015378  00025378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801537c  0801537c  0002537c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  08015380  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00023df0  20000368  080156e8  00030368  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20024158  080156e8  00034158  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d6d1  00000000  00000000  00030396  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f81  00000000  00000000  0005da67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002240  00000000  00000000  000629e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002008  00000000  00000000  00064c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007063  00000000  00000000  00066c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c2ef  00000000  00000000  0006dc93  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011ae80  00000000  00000000  00089f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a4e02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a188  00000000  00000000  001a4e80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000368 	.word	0x20000368
 800021c:	00000000 	.word	0x00000000
 8000220:	0801436c 	.word	0x0801436c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000036c 	.word	0x2000036c
 800023c:	0801436c 	.word	0x0801436c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__reverse8bit>:
#define SWAP_VARS(A, B) do { (A) ^= (B); (B) ^= (A); (A) ^= (B); } while (0)


#if (!SMLCD_FLUSH_LUT)
// Reverse bits order in byte
__STATIC_INLINE uint8_t __reverse8bit(uint8_t byte) {
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
#if 1
	// Using ARM RBIT instruction
	// Since it operates with 32-bit values only, result must be shifted by 24 bits to the right
	return (uint8_t)(__RBIT(byte) >> 24);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	fa93 f3a3 	rbit	r3, r3
 8000604:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	0e1b      	lsrs	r3, r3, #24
 800060a:	b2db      	uxtb	r3, r3
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;

	return byte;
#endif
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <SMLCD_InitGPIO>:
#endif // SMLCD_FLUSH_LUT


// Initialize display control GPIO pins
void SMLCD_InitGPIO(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	//RCC->AHB2ENR |= SMLCD_GPIO_PERIPH;

	// Configure DISP pin
	//GPIO_set_mode(SMLCD_DISP_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_DISP_PIN);
	//GPIO_out_cfg(SMLCD_DISP_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_DISP_PIN);
	SMLCD_DISP_L;
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000622:	f008 fbbb 	bl	8008d9c <HAL_GPIO_WritePin>

	// Configure SCS pin
	//GPIO_set_mode(SMLCD_SCS_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_SCS_PIN);
	//GPIO_out_cfg(SMLCD_SCS_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_SCS_PIN);
	SMLCD_SCS_L;
 8000626:	2200      	movs	r2, #0
 8000628:	2110      	movs	r1, #16
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <SMLCD_InitGPIO+0x38>)
 800062c:	f008 fbb6 	bl	8008d9c <HAL_GPIO_WritePin>
	LCD_EXCOMM_L;
 8000630:	2200      	movs	r2, #0
 8000632:	2101      	movs	r1, #1
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000636:	f008 fbb1 	bl	8008d9c <HAL_GPIO_WritePin>
	LCD_FRONTLIGHT_H;
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <SMLCD_InitGPIO+0x3c>)
 8000642:	f008 fbab 	bl	8008d9c <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022400 	.word	0x40022400
 8000650:	40021000 	.word	0x40021000
 8000654:	40021c00 	.word	0x40021c00

08000658 <SMLCD_Init>:

// Initialize display
// note: SPI and GPIO must be initialized before calling this function
void SMLCD_Init(SPI_HandleTypeDef hspi) {
 8000658:	b084      	sub	sp, #16
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
 800065e:	f107 0c08 	add.w	ip, r7, #8
 8000662:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Set default drawing mode
	LCD_PixelMode = LCD_PSET;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <SMLCD_Init+0x38>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	SMLCD_SPI_PORT = hspi;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <SMLCD_Init+0x3c>)
 800066e:	4618      	mov	r0, r3
 8000670:	f107 0108 	add.w	r1, r7, #8
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	461a      	mov	r2, r3
 8000678:	f00f fe52 	bl	8010320 <memcpy>

	// Set initial image orientation
	SMLCD_Orientation(LCD_ORIENT_NORMAL);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 f94d 	bl	800091c <SMLCD_Orientation>
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800068a:	b004      	add	sp, #16
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20010338 	.word	0x20010338
 8000694:	20010340 	.word	0x20010340

08000698 <SMLCD_Clear>:

// Clear display memory (clear screen)
void SMLCD_Clear(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	// Send "Clear Screen" command
	uint8_t sendBytes[2];
	SMLCD_SCS_H;
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <SMLCD_Clear+0x38>)
 80006a4:	f008 fb7a 	bl	8008d9c <HAL_GPIO_WritePin>
	sendBytes[0]=SMLCD_CMD_CLS;
 80006a8:	2320      	movs	r3, #32
 80006aa:	713b      	strb	r3, [r7, #4]
	sendBytes[1]=SMLCD_CMD_NOP;
 80006ac:	2300      	movs	r3, #0
 80006ae:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, sendBytes, sizeof(sendBytes), 100);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	2202      	movs	r2, #2
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <SMLCD_Clear+0x3c>)
 80006b8:	f00a fc44 	bl	800af44 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_CLS, 1, 100);
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_CLS);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <SMLCD_Clear+0x38>)
 80006c2:	f008 fb6b 	bl	8008d9c <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	20010340 	.word	0x20010340

080006d8 <SMLCD_Flush>:
	SMLCD_SCS_L;
}
#endif // SMLCD_VCOM_SOFT

// Send vRAM buffer into display
void SMLCD_Flush(void) {
 80006d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006dc:	b08a      	sub	sp, #40	; 0x28
 80006de:	af00      	add	r7, sp, #0
 80006e0:	466b      	mov	r3, sp
 80006e2:	4698      	mov	r8, r3
	int commandByte=1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
	int lineByte=1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61fb      	str	r3, [r7, #28]
	int lineAmount=SCR_H;
 80006ec:	23f0      	movs	r3, #240	; 0xf0
 80006ee:	61bb      	str	r3, [r7, #24]
	int nopBytesPerLine= 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
	int dataBytesPerLine=SCR_W/8;
 80006f4:	2332      	movs	r3, #50	; 0x32
 80006f6:	613b      	str	r3, [r7, #16]
	int finalNOPByte=1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
	uint8_t transmitBuffer[commandByte + lineByte+nopBytesPerLine+dataBytesPerLine + finalNOPByte];
 80006fc:	6a3a      	ldr	r2, [r7, #32]
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	441a      	add	r2, r3
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	441a      	add	r2, r3
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	441a      	add	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	18d6      	adds	r6, r2, r3
 800070e:	1e73      	subs	r3, r6, #1
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4633      	mov	r3, r6
 8000714:	4619      	mov	r1, r3
 8000716:	f04f 0200 	mov.w	r2, #0
 800071a:	f04f 0300 	mov.w	r3, #0
 800071e:	f04f 0400 	mov.w	r4, #0
 8000722:	00d4      	lsls	r4, r2, #3
 8000724:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000728:	00cb      	lsls	r3, r1, #3
 800072a:	4633      	mov	r3, r6
 800072c:	4619      	mov	r1, r3
 800072e:	f04f 0200 	mov.w	r2, #0
 8000732:	f04f 0300 	mov.w	r3, #0
 8000736:	f04f 0400 	mov.w	r4, #0
 800073a:	00d4      	lsls	r4, r2, #3
 800073c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000740:	00cb      	lsls	r3, r1, #3
 8000742:	4633      	mov	r3, r6
 8000744:	3307      	adds	r3, #7
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	ebad 0d03 	sub.w	sp, sp, r3
 800074e:	466b      	mov	r3, sp
 8000750:	3300      	adds	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
	memset(transmitBuffer,0x0,sizeof(transmitBuffer));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4632      	mov	r2, r6
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f00f fdeb 	bl	8010336 <memset>
	#if 1

	register uint8_t *ptr = vRAM;
 8000760:	4d69      	ldr	r5, [pc, #420]	; (8000908 <SMLCD_Flush+0x230>)
	register uint8_t line = 0;
 8000762:	2400      	movs	r4, #0
	register uint32_t idx;
	int bufferCounter=1;
 8000764:	2301      	movs	r3, #1
 8000766:	603b      	str	r3, [r7, #0]
	int x=0;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24

	// Send "Write Line" command
	transmitBuffer[0]=SMLCD_CMD_WRITE;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2288      	movs	r2, #136	; 0x88
 8000770:	701a      	strb	r2, [r3, #0]
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE);
	switch (lcd_orientation) {
 8000772:	4b66      	ldr	r3, [pc, #408]	; (800090c <SMLCD_Flush+0x234>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b04      	cmp	r3, #4
 8000778:	d03b      	beq.n	80007f2 <SMLCD_Flush+0x11a>
 800077a:	2b08      	cmp	r3, #8
 800077c:	d05f      	beq.n	800083e <SMLCD_Flush+0x166>
 800077e:	2b02      	cmp	r3, #2
 8000780:	f040 8084 	bne.w	800088c <SMLCD_Flush+0x1b4>
		case LCD_ORIENT_CW:
			line = SCR_H + 1;
 8000784:	24f1      	movs	r4, #241	; 0xf1
			while (--line > 0) {
 8000786:	e02f      	b.n	80007e8 <SMLCD_Flush+0x110>
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2288      	movs	r2, #136	; 0x88
 800078c:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4622      	mov	r2, r4
 8000796:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000798:	2302      	movs	r3, #2
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
 800079c:	e009      	b.n	80007b2 <SMLCD_Flush+0xda>
					transmitBuffer[x]=*ptr;
 800079e:	7829      	ldrb	r1, [r5, #0]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a4:	4413      	add	r3, r2
 80007a6:	460a      	mov	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
					ptr++;
 80007aa:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	3301      	adds	r3, #1
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	2b33      	cmp	r3, #51	; 0x33
 80007b6:	ddf2      	ble.n	800079e <SMLCD_Flush+0xc6>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80007c8:	2201      	movs	r2, #1
 80007ca:	2110      	movs	r1, #16
 80007cc:	4850      	ldr	r0, [pc, #320]	; (8000910 <SMLCD_Flush+0x238>)
 80007ce:	f008 fae5 	bl	8008d9c <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	b2b2      	uxth	r2, r6
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	484e      	ldr	r0, [pc, #312]	; (8000914 <SMLCD_Flush+0x23c>)
 80007da:	f00a fbb3 	bl	800af44 <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80007de:	2200      	movs	r2, #0
 80007e0:	2110      	movs	r1, #16
 80007e2:	484b      	ldr	r0, [pc, #300]	; (8000910 <SMLCD_Flush+0x238>)
 80007e4:	f008 fada 	bl	8008d9c <HAL_GPIO_WritePin>
			while (--line > 0) {
 80007e8:	1e63      	subs	r3, r4, #1
 80007ea:	b2dc      	uxtb	r4, r3
 80007ec:	2c00      	cmp	r4, #0
 80007ee:	d1cb      	bne.n	8000788 <SMLCD_Flush+0xb0>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80007f0:	e084      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_CCW:
			line = SCR_H + 1;
 80007f2:	24f1      	movs	r4, #241	; 0xf1
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 80007f4:	4d48      	ldr	r5, [pc, #288]	; (8000918 <SMLCD_Flush+0x240>)
			while (--line > 0) {
 80007f6:	e01d      	b.n	8000834 <SMLCD_Flush+0x15c>

				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 80007f8:	4620      	mov	r0, r4
 80007fa:	f7ff fef9 	bl	80005f0 <__reverse8bit>
 80007fe:	4603      	mov	r3, r0
 8000800:	4619      	mov	r1, r3
 8000802:	2364      	movs	r3, #100	; 0x64
 8000804:	2201      	movs	r2, #1
 8000806:	4843      	ldr	r0, [pc, #268]	; (8000914 <SMLCD_Flush+0x23c>)
 8000808:	f00a fb9c 	bl	800af44 <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800080c:	2600      	movs	r6, #0
 800080e:	e009      	b.n	8000824 <SMLCD_Flush+0x14c>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 8000810:	462b      	mov	r3, r5
 8000812:	1e5d      	subs	r5, r3, #1
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	4619      	mov	r1, r3
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	2201      	movs	r2, #1
 800081c:	483d      	ldr	r0, [pc, #244]	; (8000914 <SMLCD_Flush+0x23c>)
 800081e:	f00a fb91 	bl	800af44 <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000822:	3601      	adds	r6, #1
 8000824:	2e31      	cmp	r6, #49	; 0x31
 8000826:	d9f3      	bls.n	8000810 <SMLCD_Flush+0x138>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	2201      	movs	r2, #1
 800082c:	2100      	movs	r1, #0
 800082e:	4839      	ldr	r0, [pc, #228]	; (8000914 <SMLCD_Flush+0x23c>)
 8000830:	f00a fb88 	bl	800af44 <HAL_SPI_Transmit>
			while (--line > 0) {
 8000834:	1e63      	subs	r3, r4, #1
 8000836:	b2dc      	uxtb	r4, r3
 8000838:	2c00      	cmp	r4, #0
 800083a:	d1dd      	bne.n	80007f8 <SMLCD_Flush+0x120>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800083c:	e05e      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_180:
			line = 0;
 800083e:	2400      	movs	r4, #0
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 8000840:	4d35      	ldr	r5, [pc, #212]	; (8000918 <SMLCD_Flush+0x240>)
			while (line++ < SCR_H + 1) {
 8000842:	e01d      	b.n	8000880 <SMLCD_Flush+0x1a8>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 8000844:	4620      	mov	r0, r4
 8000846:	f7ff fed3 	bl	80005f0 <__reverse8bit>
 800084a:	4603      	mov	r3, r0
 800084c:	4619      	mov	r1, r3
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	2201      	movs	r2, #1
 8000852:	4830      	ldr	r0, [pc, #192]	; (8000914 <SMLCD_Flush+0x23c>)
 8000854:	f00a fb76 	bl	800af44 <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000858:	2600      	movs	r6, #0
 800085a:	e009      	b.n	8000870 <SMLCD_Flush+0x198>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 800085c:	462b      	mov	r3, r5
 800085e:	1e5d      	subs	r5, r3, #1
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	2201      	movs	r2, #1
 8000868:	482a      	ldr	r0, [pc, #168]	; (8000914 <SMLCD_Flush+0x23c>)
 800086a:	f00a fb6b 	bl	800af44 <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800086e:	3601      	adds	r6, #1
 8000870:	2e31      	cmp	r6, #49	; 0x31
 8000872:	d9f3      	bls.n	800085c <SMLCD_Flush+0x184>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000874:	2364      	movs	r3, #100	; 0x64
 8000876:	2201      	movs	r2, #1
 8000878:	2100      	movs	r1, #0
 800087a:	4826      	ldr	r0, [pc, #152]	; (8000914 <SMLCD_Flush+0x23c>)
 800087c:	f00a fb62 	bl	800af44 <HAL_SPI_Transmit>
			while (line++ < SCR_H + 1) {
 8000880:	4623      	mov	r3, r4
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	b2d4      	uxtb	r4, r2
 8000886:	2bf0      	cmp	r3, #240	; 0xf0
 8000888:	d9dc      	bls.n	8000844 <SMLCD_Flush+0x16c>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800088a:	e037      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_NORMAL:
		default:
			line = 0;
 800088c:	2400      	movs	r4, #0
			while (line++ < SCR_H + 1) {
 800088e:	e02f      	b.n	80008f0 <SMLCD_Flush+0x218>
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, ptr, SCR_W >> 3, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2288      	movs	r2, #136	; 0x88
 8000894:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4622      	mov	r2, r4
 800089e:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008a0:	2302      	movs	r3, #2
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
 80008a4:	e009      	b.n	80008ba <SMLCD_Flush+0x1e2>
					transmitBuffer[x]=*ptr;
 80008a6:	7829      	ldrb	r1, [r5, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	4413      	add	r3, r2
 80008ae:	460a      	mov	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
					ptr++;
 80008b2:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b6:	3301      	adds	r3, #1
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	2b33      	cmp	r3, #51	; 0x33
 80008be:	ddf2      	ble.n	80008a6 <SMLCD_Flush+0x1ce>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	480e      	ldr	r0, [pc, #56]	; (8000910 <SMLCD_Flush+0x238>)
 80008d6:	f008 fa61 	bl	8008d9c <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	b2b2      	uxth	r2, r6
 80008de:	2364      	movs	r3, #100	; 0x64
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <SMLCD_Flush+0x23c>)
 80008e2:	f00a fb2f 	bl	800af44 <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80008e6:	2200      	movs	r2, #0
 80008e8:	2110      	movs	r1, #16
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <SMLCD_Flush+0x238>)
 80008ec:	f008 fa56 	bl	8008d9c <HAL_GPIO_WritePin>
			while (line++ < SCR_H + 1) {
 80008f0:	4623      	mov	r3, r4
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	b2d4      	uxtb	r4, r2
 80008f6:	2bf0      	cmp	r3, #240	; 0xf0
 80008f8:	d9ca      	bls.n	8000890 <SMLCD_Flush+0x1b8>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80008fa:	bf00      	nop
 80008fc:	46c5      	mov	sp, r8
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;

#endif
}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000908:	20000384 	.word	0x20000384
 800090c:	20000000 	.word	0x20000000
 8000910:	40021000 	.word	0x40021000
 8000914:	20010340 	.word	0x20010340
 8000918:	20003263 	.word	0x20003263

0800091c <SMLCD_Orientation>:

// Set screen orientation
// input:
//   orientation - one of LCD_ORIENT_xx values
void SMLCD_Orientation(uint8_t orientation) {
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	if (orientation & (LCD_ORIENT_CW | LCD_ORIENT_CCW)) {
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 0306 	and.w	r3, r3, #6
 800092c:	2b00      	cmp	r3, #0
 800092e:	d007      	beq.n	8000940 <SMLCD_Orientation+0x24>
		scr_width  = SCR_H;
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <SMLCD_Orientation+0x44>)
 8000932:	22f0      	movs	r2, #240	; 0xf0
 8000934:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_W;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <SMLCD_Orientation+0x48>)
 8000938:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800093c:	801a      	strh	r2, [r3, #0]
 800093e:	e006      	b.n	800094e <SMLCD_Orientation+0x32>
	} else {
		scr_width  = SCR_W;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <SMLCD_Orientation+0x44>)
 8000942:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000946:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_H;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SMLCD_Orientation+0x48>)
 800094a:	22f0      	movs	r2, #240	; 0xf0
 800094c:	801a      	strh	r2, [r3, #0]
	}
	lcd_orientation = orientation;
 800094e:	4a06      	ldr	r2, [pc, #24]	; (8000968 <SMLCD_Orientation+0x4c>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	7013      	strb	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	2001033a 	.word	0x2001033a
 8000964:	2001033c 	.word	0x2001033c
 8000968:	20000000 	.word	0x20000000

0800096c <LCD_Clear>:

// Clear the vRAM memory
// note: size of video buffer must be a multiple of 4
void LCD_Clear(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
#if 1
	// This variant can be faster, speed depends on libraries used
	// But also needs include of "string.h"
	//memset(vRAM, 0x0, (sizeof(vRAM) >> 2));
	memset(vRAM, 0xFFFFFFFF, sizeof(vRAM));
 8000970:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <LCD_Clear+0x18>)
 800097a:	f00f fcdc 	bl	8010336 <memset>

	while (i--) {
		*ptr++ = 0xFFFFFFFF;
	}
#endif
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000384 	.word	0x20000384

08000988 <LCD_Pixel>:
// input:
//   X, Y - coordinates of pixel
// note: value of LCD_PixelMode will be used as a drawing mode of a pixel
// note: X and Y coordinates are declared as "register uint32_t" for performance
//       for other compilers/CPUs this can/or should be changed to other type (16-bit)
void LCD_Pixel(register uint32_t X, register uint32_t Y) {
 8000988:	b4b0      	push	{r4, r5, r7}
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	460a      	mov	r2, r1
	register uint32_t offset;
	register uint8_t bpos;

#if (SMLCD_PIXEL_METHOD)
	switch (lcd_orientation) {
 8000990:	4928      	ldr	r1, [pc, #160]	; (8000a34 <LCD_Pixel+0xac>)
 8000992:	7809      	ldrb	r1, [r1, #0]
 8000994:	2904      	cmp	r1, #4
 8000996:	d009      	beq.n	80009ac <LCD_Pixel+0x24>
 8000998:	2908      	cmp	r1, #8
 800099a:	d002      	beq.n	80009a2 <LCD_Pixel+0x1a>
 800099c:	2902      	cmp	r1, #2
 800099e:	d00d      	beq.n	80009bc <LCD_Pixel+0x34>
		case LCD_ORIENT_CW:
			SWAP_VARS(X, Y);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 80009a0:	e010      	b.n	80009c4 <LCD_Pixel+0x3c>
			X = SCR_W - 1 - X;
 80009a2:	f240 118f 	movw	r1, #399	; 0x18f
 80009a6:	1ac9      	subs	r1, r1, r3
 80009a8:	460b      	mov	r3, r1
			break;
 80009aa:	e00b      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009ac:	4053      	eors	r3, r2
 80009ae:	405a      	eors	r2, r3
 80009b0:	4053      	eors	r3, r2
			X = SCR_W - 1 - X;
 80009b2:	f240 118f 	movw	r1, #399	; 0x18f
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	460b      	mov	r3, r1
			break;
 80009ba:	e003      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009bc:	4053      	eors	r3, r2
 80009be:	405a      	eors	r2, r3
 80009c0:	4053      	eors	r3, r2
			break;
 80009c2:	bf00      	nop
		X = SCR_W - 1 - X;
	}
#endif

	// Offset in video buffer
	offset = ((Y * SCR_W) + X) >> 3;
 80009c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80009c8:	fb01 f202 	mul.w	r2, r1, r2
 80009cc:	441a      	add	r2, r3
 80009ce:	08d4      	lsrs	r4, r2, #3

#if (SMLCD_PIXEL_SAFE)
	// Ensure offset is inside of video buffer
	if (offset > ((SCR_W * SCR_H) >> 3) - 1) {
 80009d0:	f642 62df 	movw	r2, #11999	; 0x2edf
 80009d4:	4294      	cmp	r4, r2
 80009d6:	d829      	bhi.n	8000a2c <LCD_Pixel+0xa4>
		return;
	}
#endif // SMLCD_PIXEL_SAFE

	// Bit position in byte
	bpos = X & 0x07;
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	b2dd      	uxtb	r5, r3
			break;
	}
#else // SMLCD_USE_BITBAND
	// Using access via array

	switch (LCD_PixelMode) {
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <LCD_Pixel+0xb0>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d002      	beq.n	80009ee <LCD_Pixel+0x66>
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d00a      	beq.n	8000a02 <LCD_Pixel+0x7a>
 80009ec:	e013      	b.n	8000a16 <LCD_Pixel+0x8e>
		case LCD_PRES:
			vRAM[offset] |= LUT_PRST[bpos];
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <LCD_Pixel+0xb4>)
 80009f0:	5d1a      	ldrb	r2, [r3, r4]
 80009f2:	4629      	mov	r1, r5
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <LCD_Pixel+0xb8>)
 80009f6:	5c5b      	ldrb	r3, [r3, r1]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <LCD_Pixel+0xb4>)
 80009fe:	551a      	strb	r2, [r3, r4]
			break;
 8000a00:	e015      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PINV:
			vRAM[offset] ^= LUT_PRST[bpos];
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a04:	5d1a      	ldrb	r2, [r3, r4]
 8000a06:	4629      	mov	r1, r5
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <LCD_Pixel+0xb8>)
 8000a0a:	5c5b      	ldrb	r3, [r3, r1]
 8000a0c:	4053      	eors	r3, r2
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a12:	551a      	strb	r2, [r3, r4]
			break;
 8000a14:	e00b      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PSET:
		default:
			vRAM[offset] &= LUT_PSET[bpos];
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a18:	5d1a      	ldrb	r2, [r3, r4]
 8000a1a:	4629      	mov	r1, r5
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <LCD_Pixel+0xbc>)
 8000a1e:	5c5b      	ldrb	r3, [r3, r1]
 8000a20:	4013      	ands	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a26:	551a      	strb	r2, [r3, r4]
			break;
 8000a28:	bf00      	nop
 8000a2a:	e000      	b.n	8000a2e <LCD_Pixel+0xa6>
		return;
 8000a2c:	bf00      	nop
	}
#endif // SMLCD_USE_BITBAND
}
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bcb0      	pop	{r4, r5, r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20010338 	.word	0x20010338
 8000a3c:	20000384 	.word	0x20000384
 8000a40:	080148e4 	.word	0x080148e4
 8000a44:	080148dc 	.word	0x080148dc

08000a48 <LCD_VLineInt>:
// Optimized vertical line drawing (without regard of screen rotation)
// input:
//   X - horizontal coordinate
//   Y - vertical coordinate
//   H - line height
static void LCD_VLineInt(uint16_t X, uint16_t Y, uint16_t H) {
 8000a48:	b4b0      	push	{r4, r5, r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
 8000a52:	460b      	mov	r3, r1
 8000a54:	80bb      	strh	r3, [r7, #4]
 8000a56:	4613      	mov	r3, r2
 8000a58:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a60:	fb02 f203 	mul.w	r2, r2, r3
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	4413      	add	r3, r2
 8000a68:	10db      	asrs	r3, r3, #3
 8000a6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <LCD_VLineInt+0xa0>)
 8000a6c:	189c      	adds	r4, r3, r2
	register uint8_t mask;

	// Draw line
	X &= 0x07;
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	80fb      	strh	r3, [r7, #6]
	switch (LCD_PixelMode) {
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <LCD_VLineInt+0xa4>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d002      	beq.n	8000a84 <LCD_VLineInt+0x3c>
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d00f      	beq.n	8000aa2 <LCD_VLineInt+0x5a>
 8000a82:	e01d      	b.n	8000ac0 <LCD_VLineInt+0x78>
		case LCD_PRES:
			mask = LUT_PRST[X];
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000a88:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000a8a:	e004      	b.n	8000a96 <LCD_VLineInt+0x4e>
				*ptr |= mask;
 8000a8c:	7823      	ldrb	r3, [r4, #0]
 8000a8e:	432b      	orrs	r3, r5
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000a94:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000a96:	887b      	ldrh	r3, [r7, #2]
 8000a98:	1e5a      	subs	r2, r3, #1
 8000a9a:	807a      	strh	r2, [r7, #2]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f5      	bne.n	8000a8c <LCD_VLineInt+0x44>
			}
			break;
 8000aa0:	e01d      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PINV:
			mask = LUT_PRST[X];
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000aa6:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000aa8:	e004      	b.n	8000ab4 <LCD_VLineInt+0x6c>
				*ptr ^= mask;
 8000aaa:	7823      	ldrb	r3, [r4, #0]
 8000aac:	406b      	eors	r3, r5
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ab2:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	807a      	strh	r2, [r7, #2]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f5      	bne.n	8000aaa <LCD_VLineInt+0x62>
			}
			break;
 8000abe:	e00e      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PSET:
		default:
			mask = LUT_PSET[X];
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <LCD_VLineInt+0xac>)
 8000ac4:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000ac6:	e004      	b.n	8000ad2 <LCD_VLineInt+0x8a>
				*ptr &= mask;
 8000ac8:	7823      	ldrb	r3, [r4, #0]
 8000aca:	402b      	ands	r3, r5
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ad0:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	807a      	strh	r2, [r7, #2]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1f5      	bne.n	8000ac8 <LCD_VLineInt+0x80>
			}
			break;
 8000adc:	bf00      	nop
	}
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bcb0      	pop	{r4, r5, r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	20000384 	.word	0x20000384
 8000aec:	20010338 	.word	0x20010338
 8000af0:	080148e4 	.word	0x080148e4
 8000af4:	080148dc 	.word	0x080148dc

08000af8 <LCD_HLineInt>:
// Optimized draw horizontal line (without regard of screen rotation)
// input:
//   X - horizontal coordinate of line start
//   Y - vertical coordinate
//   W - line width
static void LCD_HLineInt(uint16_t X, uint16_t Y, uint16_t W) {
 8000af8:	b4f0      	push	{r4, r5, r6, r7}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
 8000b02:	460b      	mov	r3, r1
 8000b04:	80bb      	strh	r3, [r7, #4]
 8000b06:	4613      	mov	r3, r2
 8000b08:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000b0a:	88bb      	ldrh	r3, [r7, #4]
 8000b0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b10:	fb02 f203 	mul.w	r2, r2, r3
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	4413      	add	r3, r2
 8000b18:	10db      	asrs	r3, r3, #3
 8000b1a:	4a69      	ldr	r2, [pc, #420]	; (8000cc0 <LCD_HLineInt+0x1c8>)
 8000b1c:	189c      	adds	r4, r3, r2
	register uint8_t modulo = X & 0x07;
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	b2de      	uxtb	r6, r3
	// Look-up tables
	static const uint8_t LUT_B1[] = { 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80 };
	static const uint8_t LUT_B2[] = { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

	// First partial byte
	if (modulo) {
 8000b28:	2e00      	cmp	r6, #0
 8000b2a:	d03a      	beq.n	8000ba2 <LCD_HLineInt+0xaa>
		// Get bit mask for first partial byte
		modulo = 8 - modulo;
 8000b2c:	f1c6 0308 	rsb	r3, r6, #8
 8000b30:	b2de      	uxtb	r6, r3
		mask = LUT_B1[modulo];
 8000b32:	4632      	mov	r2, r6
 8000b34:	4b63      	ldr	r3, [pc, #396]	; (8000cc4 <LCD_HLineInt+0x1cc>)
 8000b36:	5c9d      	ldrb	r5, [r3, r2]

		if (modulo > W) {
 8000b38:	b2b3      	uxth	r3, r6
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d206      	bcs.n	8000b4e <LCD_HLineInt+0x56>
			// Trim bit mask if line will not go out from a current byte
			mask |= LUT_B2[modulo - W];
 8000b40:	4632      	mov	r2, r6
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	4a60      	ldr	r2, [pc, #384]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000b48:	5cd3      	ldrb	r3, [r2, r3]
 8000b4a:	432b      	orrs	r3, r5
 8000b4c:	b2dd      	uxtb	r5, r3
		}

		// Update first partial byte
		switch (LCD_PixelMode) {
 8000b4e:	4b5f      	ldr	r3, [pc, #380]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d002      	beq.n	8000b5c <LCD_HLineInt+0x64>
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d00a      	beq.n	8000b70 <LCD_HLineInt+0x78>
 8000b5a:	e013      	b.n	8000b84 <LCD_HLineInt+0x8c>
			case LCD_PRES:
				*ptr |= ~mask;
 8000b5c:	7823      	ldrb	r3, [r4, #0]
 8000b5e:	b25a      	sxtb	r2, r3
 8000b60:	b26b      	sxtb	r3, r5
 8000b62:	43db      	mvns	r3, r3
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	7023      	strb	r3, [r4, #0]
				break;
 8000b6e:	e00e      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000b70:	7823      	ldrb	r3, [r4, #0]
 8000b72:	b25a      	sxtb	r2, r3
 8000b74:	b26b      	sxtb	r3, r5
 8000b76:	43db      	mvns	r3, r3
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	4053      	eors	r3, r2
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	7023      	strb	r3, [r4, #0]
				break;
 8000b82:	e004      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PSET:
			default:
				*ptr &=  mask;
 8000b84:	7823      	ldrb	r3, [r4, #0]
 8000b86:	402b      	ands	r3, r5
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	7023      	strb	r3, [r4, #0]
				break;
 8000b8c:	bf00      	nop
		}

		// Line is over?
		if (modulo > W) {
 8000b8e:	b2b3      	uxth	r3, r6
 8000b90:	887a      	ldrh	r2, [r7, #2]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f0c0 808f 	bcc.w	8000cb6 <LCD_HLineInt+0x1be>
			return;
		}

		// Shift pointer to the next byte in line and decrease line height counter
		ptr++;
 8000b98:	3401      	adds	r4, #1
		W -= modulo;
 8000b9a:	b2b3      	uxth	r3, r6
 8000b9c:	887a      	ldrh	r2, [r7, #2]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	807b      	strh	r3, [r7, #2]
	}

	// Fill solid bytes
	if (W > 32) {
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	2b20      	cmp	r3, #32
 8000ba6:	d92c      	bls.n	8000c02 <LCD_HLineInt+0x10a>
		// Modify 32 pixels at once
		register uint32_t *ptr32 = (uint32_t *)ptr;
		switch (LCD_PixelMode) {
 8000ba8:	4b48      	ldr	r3, [pc, #288]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d003      	beq.n	8000bb8 <LCD_HLineInt+0xc0>
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d00e      	beq.n	8000bd2 <LCD_HLineInt+0xda>
 8000bb4:	e01a      	b.n	8000bec <LCD_HLineInt+0xf4>
			case LCD_PRES:
 8000bb6:	bf00      	nop
				do {
					*ptr32++ = 0xFFFFFFFF;
 8000bb8:	4623      	mov	r3, r4
 8000bba:	1d1c      	adds	r4, r3, #4
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	3b20      	subs	r3, #32
 8000bc6:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	2b1f      	cmp	r3, #31
 8000bcc:	d8f3      	bhi.n	8000bb6 <LCD_HLineInt+0xbe>
				break;
 8000bce:	e018      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PINV:
 8000bd0:	bf00      	nop
				do {
					*ptr32++ ^= 0xFFFFFFFF;
 8000bd2:	4623      	mov	r3, r4
 8000bd4:	1d1c      	adds	r4, r3, #4
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	43d2      	mvns	r2, r2
 8000bda:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bdc:	887b      	ldrh	r3, [r7, #2]
 8000bde:	3b20      	subs	r3, #32
 8000be0:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	2b1f      	cmp	r3, #31
 8000be6:	d8f3      	bhi.n	8000bd0 <LCD_HLineInt+0xd8>
				break;
 8000be8:	e00b      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PSET:
 8000bea:	bf00      	nop
			default:
				do {
					*ptr32++ = 0x00000000;
 8000bec:	4623      	mov	r3, r4
 8000bee:	1d1c      	adds	r4, r3, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	3b20      	subs	r3, #32
 8000bf8:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	2b1f      	cmp	r3, #31
 8000bfe:	d8f4      	bhi.n	8000bea <LCD_HLineInt+0xf2>
				break;
 8000c00:	bf00      	nop
		}
		ptr = (uint8_t *)ptr32;
	}
	if (W > 7) {
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	2b07      	cmp	r3, #7
 8000c06:	d92c      	bls.n	8000c62 <LCD_HLineInt+0x16a>
		// Modify full bytes (8 pixels at once)
		switch (LCD_PixelMode) {
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d003      	beq.n	8000c18 <LCD_HLineInt+0x120>
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d00d      	beq.n	8000c30 <LCD_HLineInt+0x138>
 8000c14:	e01a      	b.n	8000c4c <LCD_HLineInt+0x154>
			case LCD_PRES:
 8000c16:	bf00      	nop
				do {
					*ptr++ = 0xFF;
 8000c18:	4623      	mov	r3, r4
 8000c1a:	1c5c      	adds	r4, r3, #1
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	3b08      	subs	r3, #8
 8000c24:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d8f4      	bhi.n	8000c16 <LCD_HLineInt+0x11e>
				break;
 8000c2c:	e01a      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PINV:
 8000c2e:	bf00      	nop
				do {
					*ptr++ ^= 0xFF;
 8000c30:	4623      	mov	r3, r4
 8000c32:	1c5c      	adds	r4, r3, #1
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	43d2      	mvns	r2, r2
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	3b08      	subs	r3, #8
 8000c40:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d8f2      	bhi.n	8000c2e <LCD_HLineInt+0x136>
				break;
 8000c48:	e00c      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PSET:
 8000c4a:	bf00      	nop
			default:
				do {
					*ptr++ = 0x00;
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	1c5c      	adds	r4, r3, #1
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	3b08      	subs	r3, #8
 8000c58:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	d8f4      	bhi.n	8000c4a <LCD_HLineInt+0x152>
				break;
 8000c60:	e000      	b.n	8000c64 <LCD_HLineInt+0x16c>
		}
	}
 8000c62:	bf00      	nop

	// Last partial byte?
	if (W) {
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d026      	beq.n	8000cb8 <LCD_HLineInt+0x1c0>
		mask = LUT_B2[8 - W];
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	f1c3 0308 	rsb	r3, r3, #8
 8000c70:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000c72:	5cd5      	ldrb	r5, [r2, r3]
		switch (LCD_PixelMode) {
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d002      	beq.n	8000c82 <LCD_HLineInt+0x18a>
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d00a      	beq.n	8000c96 <LCD_HLineInt+0x19e>
 8000c80:	e013      	b.n	8000caa <LCD_HLineInt+0x1b2>
			case LCD_PRES:
				*ptr |= ~mask;
 8000c82:	7823      	ldrb	r3, [r4, #0]
 8000c84:	b25a      	sxtb	r2, r3
 8000c86:	b26b      	sxtb	r3, r5
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	7023      	strb	r3, [r4, #0]
				break;
 8000c94:	e010      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000c96:	7823      	ldrb	r3, [r4, #0]
 8000c98:	b25a      	sxtb	r2, r3
 8000c9a:	b26b      	sxtb	r3, r5
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	4053      	eors	r3, r2
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	7023      	strb	r3, [r4, #0]
				break;
 8000ca8:	e006      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PSET:
			default:
				*ptr &= mask;
 8000caa:	7823      	ldrb	r3, [r4, #0]
 8000cac:	402b      	ands	r3, r5
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	7023      	strb	r3, [r4, #0]
				break;
 8000cb2:	bf00      	nop
 8000cb4:	e000      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			return;
 8000cb6:	bf00      	nop
		}
	}
}
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	20000384 	.word	0x20000384
 8000cc4:	080148ec 	.word	0x080148ec
 8000cc8:	080148f4 	.word	0x080148f4
 8000ccc:	20010338 	.word	0x20010338

08000cd0 <LCD_HLine>:

// Draw horizontal line
// input:
//   X1, X2 - left and right horizontal coordinates
//   Y - vertical coordinate
void LCD_HLine(uint16_t X1, uint16_t X2, uint16_t Y) {
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	80bb      	strh	r3, [r7, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	807b      	strh	r3, [r7, #2]
	register uint16_t X;
	register uint16_t L;

	if (X1 > X2) {
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d905      	bls.n	8000cf6 <LCD_HLine+0x26>
		X = X2; L = X1 - X2;
 8000cea:	88bd      	ldrh	r5, [r7, #4]
 8000cec:	88fa      	ldrh	r2, [r7, #6]
 8000cee:	88bb      	ldrh	r3, [r7, #4]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b29c      	uxth	r4, r3
 8000cf4:	e004      	b.n	8000d00 <LCD_HLine+0x30>
	} else {
		X = X1; L = X2 - X1;
 8000cf6:	88fd      	ldrh	r5, [r7, #6]
 8000cf8:	88ba      	ldrh	r2, [r7, #4]
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	b29c      	uxth	r4, r3
	}
	L++;
 8000d00:	4623      	mov	r3, r4
 8000d02:	3301      	adds	r3, #1
 8000d04:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <LCD_HLine+0x9c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d00a      	beq.n	8000d24 <LCD_HLine+0x54>
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d013      	beq.n	8000d3a <LCD_HLine+0x6a>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d11f      	bne.n	8000d56 <LCD_HLine+0x86>
		case LCD_ORIENT_CW:
			LCD_VLineInt(Y, X, L);
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	4622      	mov	r2, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe93 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d22:	e01f      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_VLineInt(SCR_W - 1 - Y, X, L);
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4622      	mov	r2, r4
 8000d30:	4629      	mov	r1, r5
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fe88 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d38:	e014      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_180:
			LCD_HLineInt(SCR_W - X - L, Y, L);
 8000d3a:	462b      	mov	r3, r5
 8000d3c:	425b      	negs	r3, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	1b1b      	subs	r3, r3, r4
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	8879      	ldrh	r1, [r7, #2]
 8000d4c:	4622      	mov	r2, r4
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fed2 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d54:	e006      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_HLineInt(X, Y, L);
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	4622      	mov	r2, r4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f7ff fecb 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d62:	bf00      	nop
	}
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d6c:	20000000 	.word	0x20000000

08000d70 <LCD_VLine>:

// Draw vertical line
// input:
//   X - horizontal coordinate
//   Y1,Y2 - top and bottom vertical coordinates
void LCD_VLine(uint16_t X, uint16_t Y1, uint16_t Y2) {
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	80bb      	strh	r3, [r7, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	807b      	strh	r3, [r7, #2]
	register uint16_t Y;
	register uint16_t L;

	if (Y1 > Y2) {
 8000d82:	88ba      	ldrh	r2, [r7, #4]
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d905      	bls.n	8000d96 <LCD_VLine+0x26>
		Y = Y2; L = Y1 - Y2;
 8000d8a:	887d      	ldrh	r5, [r7, #2]
 8000d8c:	88ba      	ldrh	r2, [r7, #4]
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	b29c      	uxth	r4, r3
 8000d94:	e004      	b.n	8000da0 <LCD_VLine+0x30>
	} else {
		Y = Y1; L = Y2 - Y1;
 8000d96:	88bd      	ldrh	r5, [r7, #4]
 8000d98:	887a      	ldrh	r2, [r7, #2]
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	b29c      	uxth	r4, r3
	}
	L++;
 8000da0:	4623      	mov	r3, r4
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <LCD_VLine+0x9c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d00a      	beq.n	8000dc4 <LCD_VLine+0x54>
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d016      	beq.n	8000de0 <LCD_VLine+0x70>
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d11f      	bne.n	8000df6 <LCD_VLine+0x86>
		case LCD_ORIENT_CW:
			LCD_HLineInt(Y, X, L);
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	4622      	mov	r2, r4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	f7ff fe9b 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dc2:	e01f      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_HLineInt(SCR_W - Y - L, X, L);
 8000dc4:	462b      	mov	r3, r5
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	1b1b      	subs	r3, r3, r4
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	88f9      	ldrh	r1, [r7, #6]
 8000dd6:	4622      	mov	r2, r4
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fe8d 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dde:	e011      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_180:
			LCD_VLineInt(SCR_W - 1 - X, Y, L);
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000de6:	3301      	adds	r3, #1
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4622      	mov	r2, r4
 8000dec:	4629      	mov	r1, r5
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fe2a 	bl	8000a48 <LCD_VLineInt>
			break;
 8000df4:	e006      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_VLineInt(X, Y, L);
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	4622      	mov	r2, r4
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe23 	bl	8000a48 <LCD_VLineInt>
			break;
 8000e02:	bf00      	nop
	}
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0c:	20000000 	.word	0x20000000

08000e10 <LCD_Rect>:

// Draw rectangle
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Rect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4604      	mov	r4, r0
 8000e18:	4608      	mov	r0, r1
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4623      	mov	r3, r4
 8000e20:	80fb      	strh	r3, [r7, #6]
 8000e22:	4603      	mov	r3, r0
 8000e24:	80bb      	strh	r3, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	807b      	strh	r3, [r7, #2]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	803b      	strh	r3, [r7, #0]
	LCD_HLine(X1, X2, Y1);
 8000e2e:	88ba      	ldrh	r2, [r7, #4]
 8000e30:	8879      	ldrh	r1, [r7, #2]
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff4b 	bl	8000cd0 <LCD_HLine>
	LCD_HLine(X1, X2, Y2);
 8000e3a:	883a      	ldrh	r2, [r7, #0]
 8000e3c:	8879      	ldrh	r1, [r7, #2]
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff45 	bl	8000cd0 <LCD_HLine>
	if (Y1 > Y2) {
 8000e46:	88ba      	ldrh	r2, [r7, #4]
 8000e48:	883b      	ldrh	r3, [r7, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d90b      	bls.n	8000e66 <LCD_Rect+0x56>
		SWAP_VARS(Y1, Y2);
 8000e4e:	88ba      	ldrh	r2, [r7, #4]
 8000e50:	883b      	ldrh	r3, [r7, #0]
 8000e52:	4053      	eors	r3, r2
 8000e54:	80bb      	strh	r3, [r7, #4]
 8000e56:	883a      	ldrh	r2, [r7, #0]
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	4053      	eors	r3, r2
 8000e5c:	803b      	strh	r3, [r7, #0]
 8000e5e:	88ba      	ldrh	r2, [r7, #4]
 8000e60:	883b      	ldrh	r3, [r7, #0]
 8000e62:	4053      	eors	r3, r2
 8000e64:	80bb      	strh	r3, [r7, #4]
	}
	Y1++;
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	80bb      	strh	r3, [r7, #4]
	Y2--;
 8000e6c:	883b      	ldrh	r3, [r7, #0]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	803b      	strh	r3, [r7, #0]
	LCD_VLine(X1, Y1, Y2);
 8000e72:	883a      	ldrh	r2, [r7, #0]
 8000e74:	88b9      	ldrh	r1, [r7, #4]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff79 	bl	8000d70 <LCD_VLine>
	LCD_VLine(X2, Y1, Y2);
 8000e7e:	883a      	ldrh	r2, [r7, #0]
 8000e80:	88b9      	ldrh	r1, [r7, #4]
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff73 	bl	8000d70 <LCD_VLine>
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd90      	pop	{r4, r7, pc}
	...

08000e94 <LCD_FillRect>:
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
// note: doesn't check vRAM boundaries, so caller must respect
//       screen width and height while specifying X and Y coordinates
void LCD_FillRect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e94:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	80fb      	strh	r3, [r7, #6]
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	80bb      	strh	r3, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	803b      	strh	r3, [r7, #0]
	static const uint8_t LUT_B1[] = { 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01 };
	static const uint8_t LUT_B2[] = { 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF };

	if (X1 > X2) {
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d90b      	bls.n	8000ed4 <LCD_FillRect+0x40>
		SWAP_VARS(X1, X2);
 8000ebc:	88fa      	ldrh	r2, [r7, #6]
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	4053      	eors	r3, r2
 8000ec2:	80fb      	strh	r3, [r7, #6]
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4053      	eors	r3, r2
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	4053      	eors	r3, r2
 8000ed2:	80fb      	strh	r3, [r7, #6]
	}

	if (Y1 > Y2) {
 8000ed4:	88ba      	ldrh	r2, [r7, #4]
 8000ed6:	883b      	ldrh	r3, [r7, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d90b      	bls.n	8000ef4 <LCD_FillRect+0x60>
		SWAP_VARS(Y1, Y2);
 8000edc:	88ba      	ldrh	r2, [r7, #4]
 8000ede:	883b      	ldrh	r3, [r7, #0]
 8000ee0:	4053      	eors	r3, r2
 8000ee2:	80bb      	strh	r3, [r7, #4]
 8000ee4:	883a      	ldrh	r2, [r7, #0]
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	4053      	eors	r3, r2
 8000eea:	803b      	strh	r3, [r7, #0]
 8000eec:	88ba      	ldrh	r2, [r7, #4]
 8000eee:	883b      	ldrh	r3, [r7, #0]
 8000ef0:	4053      	eors	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
	}

	uint16_t dW;

	switch (lcd_orientation) {
 8000ef4:	4b95      	ldr	r3, [pc, #596]	; (800114c <LCD_FillRect+0x2b8>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d011      	beq.n	8000f20 <LCD_FillRect+0x8c>
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d002      	beq.n	8000f06 <LCD_FillRect+0x72>
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d032      	beq.n	8000f6a <LCD_FillRect+0xd6>
			SWAP_VARS(X1, Y1);
			SWAP_VARS(X2, Y2);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 8000f04:	e04a      	b.n	8000f9c <LCD_FillRect+0x108>
			dW = SCR_W - 1 - X2;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f16:	3301      	adds	r3, #1
 8000f18:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f1a:	897b      	ldrh	r3, [r7, #10]
 8000f1c:	80fb      	strh	r3, [r7, #6]
			break;
 8000f1e:	e03d      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f20:	88fa      	ldrh	r2, [r7, #6]
 8000f22:	88bb      	ldrh	r3, [r7, #4]
 8000f24:	4053      	eors	r3, r2
 8000f26:	80fb      	strh	r3, [r7, #6]
 8000f28:	88ba      	ldrh	r2, [r7, #4]
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	4053      	eors	r3, r2
 8000f2e:	80bb      	strh	r3, [r7, #4]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	4053      	eors	r3, r2
 8000f36:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	883b      	ldrh	r3, [r7, #0]
 8000f3c:	4053      	eors	r3, r2
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	883a      	ldrh	r2, [r7, #0]
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	4053      	eors	r3, r2
 8000f46:	803b      	strh	r3, [r7, #0]
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	883b      	ldrh	r3, [r7, #0]
 8000f4c:	4053      	eors	r3, r2
 8000f4e:	807b      	strh	r3, [r7, #2]
			dW = SCR_W - 1 - X2;
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f56:	3301      	adds	r3, #1
 8000f58:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f60:	3301      	adds	r3, #1
 8000f62:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f64:	897b      	ldrh	r3, [r7, #10]
 8000f66:	80fb      	strh	r3, [r7, #6]
			break;
 8000f68:	e018      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f6a:	88fa      	ldrh	r2, [r7, #6]
 8000f6c:	88bb      	ldrh	r3, [r7, #4]
 8000f6e:	4053      	eors	r3, r2
 8000f70:	80fb      	strh	r3, [r7, #6]
 8000f72:	88ba      	ldrh	r2, [r7, #4]
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	4053      	eors	r3, r2
 8000f78:	80bb      	strh	r3, [r7, #4]
 8000f7a:	88fa      	ldrh	r2, [r7, #6]
 8000f7c:	88bb      	ldrh	r3, [r7, #4]
 8000f7e:	4053      	eors	r3, r2
 8000f80:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	883b      	ldrh	r3, [r7, #0]
 8000f86:	4053      	eors	r3, r2
 8000f88:	807b      	strh	r3, [r7, #2]
 8000f8a:	883a      	ldrh	r2, [r7, #0]
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	4053      	eors	r3, r2
 8000f90:	803b      	strh	r3, [r7, #0]
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	883b      	ldrh	r3, [r7, #0]
 8000f96:	4053      	eors	r3, r2
 8000f98:	807b      	strh	r3, [r7, #2]
			break;
 8000f9a:	bf00      	nop
	}

	// Mask for first and last byte
	register uint8_t mask_fb = LUT_B1[X1 & 0x07];
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	4a6b      	ldr	r2, [pc, #428]	; (8001150 <LCD_FillRect+0x2bc>)
 8000fa4:	5cd5      	ldrb	r5, [r2, r3]
	register uint8_t mask_lb = LUT_B2[X2 & 0x07];
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	4a69      	ldr	r2, [pc, #420]	; (8001154 <LCD_FillRect+0x2c0>)
 8000fae:	f812 8003 	ldrb.w	r8, [r2, r3]

	// Offset in vRAM
	uint8_t *ptr_base = &vRAM[(((Y1 * SCR_W) + X1) >> 3)];
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000fb8:	fb02 f203 	mul.w	r2, r2, r3
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	10db      	asrs	r3, r3, #3
 8000fc2:	4a65      	ldr	r2, [pc, #404]	; (8001158 <LCD_FillRect+0x2c4>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

	// Line width in bytes
	dW = (X2 >> 3) - (X1 >> 3);
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	08db      	lsrs	r3, r3, #3
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	817b      	strh	r3, [r7, #10]

	if (dW) {
 8000fd8:	897b      	ldrh	r3, [r7, #10]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d071      	beq.n	80010c2 <LCD_FillRect+0x22e>
		// Multiple bytes
		register uint16_t cntr;
		register uint8_t *ptr;

		switch (LCD_PixelMode) {
 8000fde:	4b5f      	ldr	r3, [pc, #380]	; (800115c <LCD_FillRect+0x2c8>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d003      	beq.n	8000fee <LCD_FillRect+0x15a>
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d022      	beq.n	8001030 <LCD_FillRect+0x19c>
 8000fea:	e043      	b.n	8001074 <LCD_FillRect+0x1e0>
			case LCD_PRES:
 8000fec:	bf00      	nop
				do {
					cntr = dW;
 8000fee:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8000ff0:	68fc      	ldr	r4, [r7, #12]
					*ptr++ |= mask_fb;
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	1c5c      	adds	r4, r3, #1
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	432a      	orrs	r2, r5
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8000ffe:	e003      	b.n	8001008 <LCD_FillRect+0x174>
						*ptr++ = 0xFF;
 8001000:	4623      	mov	r3, r4
 8001002:	1c5c      	adds	r4, r3, #1
 8001004:	22ff      	movs	r2, #255	; 0xff
 8001006:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001008:	1e73      	subs	r3, r6, #1
 800100a:	b29e      	uxth	r6, r3
 800100c:	2e00      	cmp	r6, #0
 800100e:	d1f7      	bne.n	8001000 <LCD_FillRect+0x16c>
					};
					*ptr |= mask_lb;
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	ea48 0303 	orr.w	r3, r8, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3332      	adds	r3, #50	; 0x32
 800101e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001020:	88bb      	ldrh	r3, [r7, #4]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	80ba      	strh	r2, [r7, #4]
 8001026:	883a      	ldrh	r2, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8df      	bhi.n	8000fec <LCD_FillRect+0x158>
				break;
 800102c:	e087      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 800102e:	bf00      	nop
				do {
					cntr = dW;
 8001030:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001032:	68fc      	ldr	r4, [r7, #12]
					*ptr++ ^= mask_fb;
 8001034:	4623      	mov	r3, r4
 8001036:	1c5c      	adds	r4, r3, #1
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	406a      	eors	r2, r5
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001040:	e005      	b.n	800104e <LCD_FillRect+0x1ba>
						*ptr++ ^= 0xFF;
 8001042:	4623      	mov	r3, r4
 8001044:	1c5c      	adds	r4, r3, #1
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	43d2      	mvns	r2, r2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800104e:	1e73      	subs	r3, r6, #1
 8001050:	b29e      	uxth	r6, r3
 8001052:	2e00      	cmp	r6, #0
 8001054:	d1f5      	bne.n	8001042 <LCD_FillRect+0x1ae>
					};
					*ptr ^= mask_lb;
 8001056:	7823      	ldrb	r3, [r4, #0]
 8001058:	ea88 0303 	eor.w	r3, r8, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3332      	adds	r3, #50	; 0x32
 8001064:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	80ba      	strh	r2, [r7, #4]
 800106c:	883a      	ldrh	r2, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d8dd      	bhi.n	800102e <LCD_FillRect+0x19a>
				break;
 8001072:	e064      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 8001074:	43eb      	mvns	r3, r5
 8001076:	b2dd      	uxtb	r5, r3
				mask_lb = ~mask_lb;
 8001078:	ea6f 0308 	mvn.w	r3, r8
 800107c:	fa5f f883 	uxtb.w	r8, r3
				do {
					cntr = dW;
 8001080:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001082:	68fc      	ldr	r4, [r7, #12]
					*ptr++ &= mask_fb;
 8001084:	4623      	mov	r3, r4
 8001086:	1c5c      	adds	r4, r3, #1
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	402a      	ands	r2, r5
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001090:	e003      	b.n	800109a <LCD_FillRect+0x206>
						*ptr++ = 0x00;
 8001092:	4623      	mov	r3, r4
 8001094:	1c5c      	adds	r4, r3, #1
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800109a:	1e73      	subs	r3, r6, #1
 800109c:	b29e      	uxth	r6, r3
 800109e:	2e00      	cmp	r6, #0
 80010a0:	d1f7      	bne.n	8001092 <LCD_FillRect+0x1fe>
					};
					*ptr &= mask_lb;
 80010a2:	7823      	ldrb	r3, [r4, #0]
 80010a4:	ea08 0303 	and.w	r3, r8, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3332      	adds	r3, #50	; 0x32
 80010b0:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	80ba      	strh	r2, [r7, #4]
 80010b8:	883a      	ldrh	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d8e0      	bhi.n	8001080 <LCD_FillRect+0x1ec>
				break;
 80010be:	bf00      	nop
 80010c0:	e03d      	b.n	800113e <LCD_FillRect+0x2aa>
		}
	} else {
		// Single byte
		mask_fb &= mask_lb;
 80010c2:	ea05 0308 	and.w	r3, r5, r8
 80010c6:	b2dd      	uxtb	r5, r3

		switch (LCD_PixelMode) {
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <LCD_FillRect+0x2c8>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d003      	beq.n	80010d8 <LCD_FillRect+0x244>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d012      	beq.n	80010fa <LCD_FillRect+0x266>
 80010d4:	e021      	b.n	800111a <LCD_FillRect+0x286>
			case LCD_PRES:
 80010d6:	bf00      	nop
				do {
					*ptr_base |= mask_fb;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	432b      	orrs	r3, r5
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3332      	adds	r3, #50	; 0x32
 80010e8:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	80ba      	strh	r2, [r7, #4]
 80010f0:	883a      	ldrh	r2, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d8ef      	bhi.n	80010d6 <LCD_FillRect+0x242>
				break;
 80010f6:	e022      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 80010f8:	bf00      	nop
				do {
					*ptr_base ^= mask_fb;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	406b      	eors	r3, r5
 8001100:	b2da      	uxtb	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3332      	adds	r3, #50	; 0x32
 800110a:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	80ba      	strh	r2, [r7, #4]
 8001112:	883a      	ldrh	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8ef      	bhi.n	80010f8 <LCD_FillRect+0x264>
				break;
 8001118:	e011      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 800111a:	43eb      	mvns	r3, r5
 800111c:	b2dd      	uxtb	r5, r3
				do {
					*ptr_base &= mask_fb;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	402b      	ands	r3, r5
 8001124:	b2da      	uxtb	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3332      	adds	r3, #50	; 0x32
 800112e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	80ba      	strh	r2, [r7, #4]
 8001136:	883a      	ldrh	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f0      	bhi.n	800111e <LCD_FillRect+0x28a>
				break;
 800113c:	bf00      	nop
		}
	}
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000000 	.word	0x20000000
 8001150:	080148fc 	.word	0x080148fc
 8001154:	08014904 	.word	0x08014904
 8001158:	20000384 	.word	0x20000384
 800115c:	20010338 	.word	0x20010338

08001160 <LCD_Line>:

// Draw line
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Line(int16_t X1, int16_t Y1, int16_t X2, int16_t Y2) {
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	4603      	mov	r3, r0
 8001174:	80bb      	strh	r3, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	807b      	strh	r3, [r7, #2]
 800117a:	4613      	mov	r3, r2
 800117c:	803b      	strh	r3, [r7, #0]
	int16_t dX = X2 - X1;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	82bb      	strh	r3, [r7, #20]
	int16_t dY = Y2 - Y1;
 8001188:	883a      	ldrh	r2, [r7, #0]
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	827b      	strh	r3, [r7, #18]
	int16_t dXsym = (dX > 0) ? 1 : -1;
 8001192:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	dd01      	ble.n	800119e <LCD_Line+0x3e>
 800119a:	2301      	movs	r3, #1
 800119c:	e001      	b.n	80011a2 <LCD_Line+0x42>
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	823b      	strh	r3, [r7, #16]
	int16_t dYsym = (dY > 0) ? 1 : -1;
 80011a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dd01      	ble.n	80011b0 <LCD_Line+0x50>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e001      	b.n	80011b4 <LCD_Line+0x54>
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	81fb      	strh	r3, [r7, #14]

	if (dX == 0) {
 80011b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d106      	bne.n	80011cc <LCD_Line+0x6c>
		LCD_VLine(X1, Y1, Y2);
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	88b9      	ldrh	r1, [r7, #4]
 80011c2:	883a      	ldrh	r2, [r7, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fdd3 	bl	8000d70 <LCD_VLine>
		return;
 80011ca:	e08d      	b.n	80012e8 <LCD_Line+0x188>
	}
	if (dY == 0) {
 80011cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d106      	bne.n	80011e2 <LCD_Line+0x82>
		LCD_HLine(X1, X2, Y1);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	8879      	ldrh	r1, [r7, #2]
 80011d8:	88ba      	ldrh	r2, [r7, #4]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd78 	bl	8000cd0 <LCD_HLine>
		return;
 80011e0:	e082      	b.n	80012e8 <LCD_Line+0x188>
	}

	dX *= dXsym;
 80011e2:	8aba      	ldrh	r2, [r7, #20]
 80011e4:	8a3b      	ldrh	r3, [r7, #16]
 80011e6:	fb12 f303 	smulbb	r3, r2, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	82bb      	strh	r3, [r7, #20]
	dY *= dYsym;
 80011ee:	8a7a      	ldrh	r2, [r7, #18]
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	fb12 f303 	smulbb	r3, r2, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	827b      	strh	r3, [r7, #18]
	int16_t dX2 = dX << 1;
 80011fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	81bb      	strh	r3, [r7, #12]
	int16_t dY2 = dY << 1;
 8001202:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	817b      	strh	r3, [r7, #10]
	int16_t di;

	if (dX >= dY) {
 800120a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800120e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001212:	429a      	cmp	r2, r3
 8001214:	db30      	blt.n	8001278 <LCD_Line+0x118>
		di = dY2 - dX;
 8001216:	897a      	ldrh	r2, [r7, #10]
 8001218:	8abb      	ldrh	r3, [r7, #20]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	b29b      	uxth	r3, r3
 800121e:	82fb      	strh	r3, [r7, #22]
		while (X1 != X2) {
 8001220:	e023      	b.n	800126a <LCD_Line+0x10a>
			LCD_Pixel(X1, Y1);
 8001222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001226:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fbab 	bl	8000988 <LCD_Pixel>
			X1 += dXsym;
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	8a3b      	ldrh	r3, [r7, #16]
 8001236:	4413      	add	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	80fb      	strh	r3, [r7, #6]
			if (di < 0) {
 800123c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001240:	2b00      	cmp	r3, #0
 8001242:	da05      	bge.n	8001250 <LCD_Line+0xf0>
				di += dY2;
 8001244:	8afa      	ldrh	r2, [r7, #22]
 8001246:	897b      	ldrh	r3, [r7, #10]
 8001248:	4413      	add	r3, r2
 800124a:	b29b      	uxth	r3, r3
 800124c:	82fb      	strh	r3, [r7, #22]
 800124e:	e00c      	b.n	800126a <LCD_Line+0x10a>
			} else {
				di += dY2 - dX2;
 8001250:	897a      	ldrh	r2, [r7, #10]
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	b29a      	uxth	r2, r3
 8001258:	8afb      	ldrh	r3, [r7, #22]
 800125a:	4413      	add	r3, r2
 800125c:	b29b      	uxth	r3, r3
 800125e:	82fb      	strh	r3, [r7, #22]
				Y1 += dYsym;
 8001260:	88ba      	ldrh	r2, [r7, #4]
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	4413      	add	r3, r2
 8001266:	b29b      	uxth	r3, r3
 8001268:	80bb      	strh	r3, [r7, #4]
		while (X1 != X2) {
 800126a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800126e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001272:	429a      	cmp	r2, r3
 8001274:	d1d5      	bne.n	8001222 <LCD_Line+0xc2>
 8001276:	e02f      	b.n	80012d8 <LCD_Line+0x178>
			}
		}
	} else {
		di = dX2 - dY;
 8001278:	89ba      	ldrh	r2, [r7, #12]
 800127a:	8a7b      	ldrh	r3, [r7, #18]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	b29b      	uxth	r3, r3
 8001280:	82fb      	strh	r3, [r7, #22]
		while (Y1 != Y2) {
 8001282:	e023      	b.n	80012cc <LCD_Line+0x16c>
			LCD_Pixel(X1, Y1);
 8001284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001288:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fb7a 	bl	8000988 <LCD_Pixel>
			Y1 += dYsym;
 8001294:	88ba      	ldrh	r2, [r7, #4]
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	4413      	add	r3, r2
 800129a:	b29b      	uxth	r3, r3
 800129c:	80bb      	strh	r3, [r7, #4]
			if (di < 0) {
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	da05      	bge.n	80012b2 <LCD_Line+0x152>
				di += dX2;
 80012a6:	8afa      	ldrh	r2, [r7, #22]
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	82fb      	strh	r3, [r7, #22]
 80012b0:	e00c      	b.n	80012cc <LCD_Line+0x16c>
			} else {
				di += dX2 - dY2;
 80012b2:	89ba      	ldrh	r2, [r7, #12]
 80012b4:	897b      	ldrh	r3, [r7, #10]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	8afb      	ldrh	r3, [r7, #22]
 80012bc:	4413      	add	r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	82fb      	strh	r3, [r7, #22]
				X1 += dXsym;
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	8a3b      	ldrh	r3, [r7, #16]
 80012c6:	4413      	add	r3, r2
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	80fb      	strh	r3, [r7, #6]
		while (Y1 != Y2) {
 80012cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d1d5      	bne.n	8001284 <LCD_Line+0x124>
			}
		}
	}
	LCD_Pixel(X1, Y1);
 80012d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012dc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fb50 	bl	8000988 <LCD_Pixel>
}
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <LCD_PutChar>:
// input:
//   X,Y - character top left corner coordinates
//   chr - character to be drawn
//   font - pointer to font
// return: character width in pixels
uint8_t LCD_PutChar(uint16_t X, uint16_t Y, uint8_t chr, const Font_TypeDef *font) {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b088      	sub	sp, #32
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4603      	mov	r3, r0
 80012f8:	81fb      	strh	r3, [r7, #14]
 80012fa:	460b      	mov	r3, r1
 80012fc:	81bb      	strh	r3, [r7, #12]
 80012fe:	4613      	mov	r3, r2
 8001300:	72fb      	strb	r3, [r7, #11]
	uint8_t tmpCh;
	uint8_t bL;
	const uint8_t *pCh;

	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	7afa      	ldrb	r2, [r7, #11]
 8001308:	429a      	cmp	r2, r3
 800130a:	d304      	bcc.n	8001316 <LCD_PutChar+0x28>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	795b      	ldrb	r3, [r3, #5]
 8001310:	7afa      	ldrb	r2, [r7, #11]
 8001312:	429a      	cmp	r2, r3
 8001314:	d902      	bls.n	800131c <LCD_PutChar+0x2e>
		chr = font->font_UnknownChar;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	799b      	ldrb	r3, [r3, #6]
 800131a:	72fb      	strb	r3, [r7, #11]
	}

	// Pointer to the first byte of character in font data array
	pCh = &font->font_Data[(chr - font->font_MinChar) * font->font_BPC];
 800131c:	7afb      	ldrb	r3, [r7, #11]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	7912      	ldrb	r2, [r2, #4]
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	7892      	ldrb	r2, [r2, #2]
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	3307      	adds	r3, #7
 8001332:	617b      	str	r3, [r7, #20]

	// Draw character
	if (font->font_Scan == FONT_V) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	78db      	ldrb	r3, [r3, #3]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d177      	bne.n	800142c <LCD_PutChar+0x13e>
		// Vertical pixels order
		if (font->font_Height < 9) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	785b      	ldrb	r3, [r3, #1]
 8001340:	2b08      	cmp	r3, #8
 8001342:	d829      	bhi.n	8001398 <LCD_PutChar+0xaa>
			// Height is 8 pixels or less (one byte per column)
			pX = X;
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001348:	e01e      	b.n	8001388 <LCD_PutChar+0x9a>
				pY = Y;
 800134a:	89bb      	ldrh	r3, [r7, #12]
 800134c:	83bb      	strh	r3, [r7, #28]
				tmpCh = *pCh++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	617a      	str	r2, [r7, #20]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001358:	e010      	b.n	800137c <LCD_PutChar+0x8e>
					if (tmpCh & 0x01) {
 800135a:	7efb      	ldrb	r3, [r7, #27]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <LCD_PutChar+0x82>
						LCD_Pixel(pX, pY);
 8001364:	8bfb      	ldrh	r3, [r7, #30]
 8001366:	8bba      	ldrh	r2, [r7, #28]
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fb0c 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001370:	7efb      	ldrb	r3, [r7, #27]
 8001372:	085b      	lsrs	r3, r3, #1
 8001374:	76fb      	strb	r3, [r7, #27]
					pY++;
 8001376:	8bbb      	ldrh	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	83bb      	strh	r3, [r7, #28]
				while (tmpCh) {
 800137c:	7efb      	ldrb	r3, [r7, #27]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1eb      	bne.n	800135a <LCD_PutChar+0x6c>
				}
				pX++;
 8001382:	8bfb      	ldrh	r3, [r7, #30]
 8001384:	3301      	adds	r3, #1
 8001386:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001388:	8bfa      	ldrh	r2, [r7, #30]
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	7809      	ldrb	r1, [r1, #0]
 8001390:	440b      	add	r3, r1
 8001392:	429a      	cmp	r2, r3
 8001394:	dbd9      	blt.n	800134a <LCD_PutChar+0x5c>
 8001396:	e0c0      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Height is more than 8 pixels (several bytes per column)
			pX = X;
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800139c:	e03e      	b.n	800141c <LCD_PutChar+0x12e>
				pY = Y;
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 80013a2:	e031      	b.n	8001408 <LCD_PutChar+0x11a>
					bL = 8;
 80013a4:	2308      	movs	r3, #8
 80013a6:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	617a      	str	r2, [r7, #20]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80013b2:	7efb      	ldrb	r3, [r7, #27]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d022      	beq.n	80013fe <LCD_PutChar+0x110>
						while (bL) {
 80013b8:	e01d      	b.n	80013f6 <LCD_PutChar+0x108>
							if (tmpCh & 0x01) {
 80013ba:	7efb      	ldrb	r3, [r7, #27]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <LCD_PutChar+0xe2>
								LCD_Pixel(pX, pY);
 80013c4:	8bfb      	ldrh	r3, [r7, #30]
 80013c6:	8bba      	ldrh	r2, [r7, #28]
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fadc 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80013d0:	7efb      	ldrb	r3, [r7, #27]
 80013d2:	085b      	lsrs	r3, r3, #1
 80013d4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80013d6:	7efb      	ldrb	r3, [r7, #27]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <LCD_PutChar+0xfc>
								pY++;
 80013dc:	8bbb      	ldrh	r3, [r7, #28]
 80013de:	3301      	adds	r3, #1
 80013e0:	83bb      	strh	r3, [r7, #28]
								bL--;
 80013e2:	7ebb      	ldrb	r3, [r7, #26]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	76bb      	strb	r3, [r7, #26]
 80013e8:	e005      	b.n	80013f6 <LCD_PutChar+0x108>
							} else {
								pY += bL;
 80013ea:	7ebb      	ldrb	r3, [r7, #26]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	8bbb      	ldrh	r3, [r7, #28]
 80013f0:	4413      	add	r3, r2
 80013f2:	83bb      	strh	r3, [r7, #28]
								break;
 80013f4:	e008      	b.n	8001408 <LCD_PutChar+0x11a>
						while (bL) {
 80013f6:	7ebb      	ldrb	r3, [r7, #26]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1de      	bne.n	80013ba <LCD_PutChar+0xcc>
 80013fc:	e004      	b.n	8001408 <LCD_PutChar+0x11a>
							}
						}
					} else {
						pY += bL;
 80013fe:	7ebb      	ldrb	r3, [r7, #26]
 8001400:	b29a      	uxth	r2, r3
 8001402:	8bbb      	ldrh	r3, [r7, #28]
 8001404:	4413      	add	r3, r2
 8001406:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 8001408:	8bba      	ldrh	r2, [r7, #28]
 800140a:	89bb      	ldrh	r3, [r7, #12]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	7849      	ldrb	r1, [r1, #1]
 8001410:	440b      	add	r3, r1
 8001412:	429a      	cmp	r2, r3
 8001414:	dbc6      	blt.n	80013a4 <LCD_PutChar+0xb6>
					}
				}
				pX++;
 8001416:	8bfb      	ldrh	r3, [r7, #30]
 8001418:	3301      	adds	r3, #1
 800141a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800141c:	8bfa      	ldrh	r2, [r7, #30]
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	7809      	ldrb	r1, [r1, #0]
 8001424:	440b      	add	r3, r1
 8001426:	429a      	cmp	r2, r3
 8001428:	dbb9      	blt.n	800139e <LCD_PutChar+0xb0>
 800142a:	e076      	b.n	800151a <LCD_PutChar+0x22c>
			}
		}
	} else {
		// Horizontal pixels order
		if (font->font_Width < 9) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d829      	bhi.n	8001488 <LCD_PutChar+0x19a>
			// Width is 8 pixels or less (one byte per row)
			pY = Y;
 8001434:	89bb      	ldrh	r3, [r7, #12]
 8001436:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001438:	e01e      	b.n	8001478 <LCD_PutChar+0x18a>
				pX = X;
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	83fb      	strh	r3, [r7, #30]
				tmpCh = *pCh++;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	617a      	str	r2, [r7, #20]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001448:	e010      	b.n	800146c <LCD_PutChar+0x17e>
					if (tmpCh & 0x01) {
 800144a:	7efb      	ldrb	r3, [r7, #27]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <LCD_PutChar+0x172>
						LCD_Pixel(pX, pY);
 8001454:	8bfb      	ldrh	r3, [r7, #30]
 8001456:	8bba      	ldrh	r2, [r7, #28]
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fa94 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001460:	7efb      	ldrb	r3, [r7, #27]
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	76fb      	strb	r3, [r7, #27]
					pX++;
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	3301      	adds	r3, #1
 800146a:	83fb      	strh	r3, [r7, #30]
				while (tmpCh) {
 800146c:	7efb      	ldrb	r3, [r7, #27]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1eb      	bne.n	800144a <LCD_PutChar+0x15c>
				}
				pY++;
 8001472:	8bbb      	ldrh	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001478:	8bba      	ldrh	r2, [r7, #28]
 800147a:	89bb      	ldrh	r3, [r7, #12]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	7849      	ldrb	r1, [r1, #1]
 8001480:	440b      	add	r3, r1
 8001482:	429a      	cmp	r2, r3
 8001484:	dbd9      	blt.n	800143a <LCD_PutChar+0x14c>
 8001486:	e048      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Width is more than 8 pixels (several bytes per row)
			pY = Y;
 8001488:	89bb      	ldrh	r3, [r7, #12]
 800148a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800148c:	e03e      	b.n	800150c <LCD_PutChar+0x21e>
				pX = X;
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 8001492:	e031      	b.n	80014f8 <LCD_PutChar+0x20a>
					bL = 8;
 8001494:	2308      	movs	r3, #8
 8001496:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	617a      	str	r2, [r7, #20]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80014a2:	7efb      	ldrb	r3, [r7, #27]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <LCD_PutChar+0x200>
						while (bL) {
 80014a8:	e01d      	b.n	80014e6 <LCD_PutChar+0x1f8>
							if (tmpCh & 0x01) {
 80014aa:	7efb      	ldrb	r3, [r7, #27]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <LCD_PutChar+0x1d2>
								LCD_Pixel(pX, pY);
 80014b4:	8bfb      	ldrh	r3, [r7, #30]
 80014b6:	8bba      	ldrh	r2, [r7, #28]
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fa64 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80014c0:	7efb      	ldrb	r3, [r7, #27]
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80014c6:	7efb      	ldrb	r3, [r7, #27]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <LCD_PutChar+0x1ec>
								pX++;
 80014cc:	8bfb      	ldrh	r3, [r7, #30]
 80014ce:	3301      	adds	r3, #1
 80014d0:	83fb      	strh	r3, [r7, #30]
								bL--;
 80014d2:	7ebb      	ldrb	r3, [r7, #26]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	76bb      	strb	r3, [r7, #26]
 80014d8:	e005      	b.n	80014e6 <LCD_PutChar+0x1f8>
							} else {
								pX += bL;
 80014da:	7ebb      	ldrb	r3, [r7, #26]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	8bfb      	ldrh	r3, [r7, #30]
 80014e0:	4413      	add	r3, r2
 80014e2:	83fb      	strh	r3, [r7, #30]
								break;
 80014e4:	e008      	b.n	80014f8 <LCD_PutChar+0x20a>
						while (bL) {
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1de      	bne.n	80014aa <LCD_PutChar+0x1bc>
 80014ec:	e004      	b.n	80014f8 <LCD_PutChar+0x20a>
							}
						}
					} else {
						pX += bL;
 80014ee:	7ebb      	ldrb	r3, [r7, #26]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	8bfb      	ldrh	r3, [r7, #30]
 80014f4:	4413      	add	r3, r2
 80014f6:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 80014f8:	8bfa      	ldrh	r2, [r7, #30]
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	7809      	ldrb	r1, [r1, #0]
 8001500:	440b      	add	r3, r1
 8001502:	429a      	cmp	r2, r3
 8001504:	dbc6      	blt.n	8001494 <LCD_PutChar+0x1a6>
					}
				}
				pY++;
 8001506:	8bbb      	ldrh	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800150c:	8bba      	ldrh	r2, [r7, #28]
 800150e:	89bb      	ldrh	r3, [r7, #12]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	7849      	ldrb	r1, [r1, #1]
 8001514:	440b      	add	r3, r1
 8001516:	429a      	cmp	r2, r3
 8001518:	dbb9      	blt.n	800148e <LCD_PutChar+0x1a0>
			}
		}
	}

	return font->font_Width + 1;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	b2db      	uxtb	r3, r3
}
 8001522:	4618      	mov	r0, r3
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <LCD_PutStr>:
// input:
//   X,Y - top left coordinates of first character
//   str - pointer to zero-terminated string
//   font - pointer to font
// return: string width in pixels
uint16_t LCD_PutStr(uint16_t X, uint16_t Y, const char *str, const Font_TypeDef *font) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60ba      	str	r2, [r7, #8]
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4603      	mov	r3, r0
 8001538:	81fb      	strh	r3, [r7, #14]
 800153a:	460b      	mov	r3, r1
 800153c:	81bb      	strh	r3, [r7, #12]
	uint16_t pX = X;
 800153e:	89fb      	ldrh	r3, [r7, #14]
 8001540:	82fb      	strh	r3, [r7, #22]
	uint16_t eX = scr_width - font->font_Width - 1;
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <LCD_PutStr+0x6c>)
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	82bb      	strh	r3, [r7, #20]

	while (*str) {
 8001554:	e011      	b.n	800157a <LCD_PutStr+0x4e>
		pX += LCD_PutChar(pX, Y, *str++, font);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	60ba      	str	r2, [r7, #8]
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	89b9      	ldrh	r1, [r7, #12]
 8001560:	8af8      	ldrh	r0, [r7, #22]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f7ff fec3 	bl	80012ee <LCD_PutChar>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	8afb      	ldrh	r3, [r7, #22]
 800156e:	4413      	add	r3, r2
 8001570:	82fb      	strh	r3, [r7, #22]
		if (pX > eX) break;
 8001572:	8afa      	ldrh	r2, [r7, #22]
 8001574:	8abb      	ldrh	r3, [r7, #20]
 8001576:	429a      	cmp	r2, r3
 8001578:	d804      	bhi.n	8001584 <LCD_PutStr+0x58>
	while (*str) {
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1e9      	bne.n	8001556 <LCD_PutStr+0x2a>
 8001582:	e000      	b.n	8001586 <LCD_PutStr+0x5a>
		if (pX > eX) break;
 8001584:	bf00      	nop
	}

	return (pX - X);
 8001586:	8afa      	ldrh	r2, [r7, #22]
 8001588:	89fb      	ldrh	r3, [r7, #14]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	b29b      	uxth	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2001033a 	.word	0x2001033a

0800159c <LCD_PutInt>:
// input:
//   X,Y - top left coordinates of first symbol
//   num - signed integer value
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutInt(uint16_t X, uint16_t Y, int32_t num, const Font_TypeDef *font) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4603      	mov	r3, r0
 80015a8:	81fb      	strh	r3, [r7, #14]
 80015aa:	460b      	mov	r3, r1
 80015ac:	81bb      	strh	r3, [r7, #12]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t pX = X;
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	843b      	strh	r3, [r7, #32]

	// String termination character
	*pStr++ = '\0';
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	627a      	str	r2, [r7, #36]	; 0x24
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]

	// Convert number to characters
	if (num < 0) {
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da05      	bge.n	80015da <LCD_PutInt+0x3e>
		neg = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	425b      	negs	r3, r3
 80015d8:	60bb      	str	r3, [r7, #8]
	}
	do { *pStr++ = (num % 10) + '0'; } while (num /= 10);
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <LCD_PutInt+0xc8>)
 80015de:	fb83 1302 	smull	r1, r3, r3, r2
 80015e2:	1099      	asrs	r1, r3, #2
 80015e4:	17d3      	asrs	r3, r2, #31
 80015e6:	1ac9      	subs	r1, r1, r3
 80015e8:	460b      	mov	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	1ad1      	subs	r1, r2, r3
 80015f2:	b2ca      	uxtb	r2, r1
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	1c59      	adds	r1, r3, #1
 80015f8:	6279      	str	r1, [r7, #36]	; 0x24
 80015fa:	3230      	adds	r2, #48	; 0x30
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <LCD_PutInt+0xc8>)
 8001604:	fb82 1203 	smull	r1, r2, r2, r3
 8001608:	1092      	asrs	r2, r2, #2
 800160a:	17db      	asrs	r3, r3, #31
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1e1      	bne.n	80015da <LCD_PutInt+0x3e>
	if (neg) {
 8001616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800161a:	2b00      	cmp	r3, #0
 800161c:	d011      	beq.n	8001642 <LCD_PutInt+0xa6>
		*pStr++ = '-';
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	627a      	str	r2, [r7, #36]	; 0x24
 8001624:	222d      	movs	r2, #45	; 0x2d
 8001626:	701a      	strb	r2, [r3, #0]
	}

	// Draw a number
	while (*--pStr) {
 8001628:	e00b      	b.n	8001642 <LCD_PutInt+0xa6>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	89b9      	ldrh	r1, [r7, #12]
 8001630:	8c38      	ldrh	r0, [r7, #32]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f7ff fe5b 	bl	80012ee <LCD_PutChar>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	8c3b      	ldrh	r3, [r7, #32]
 800163e:	4413      	add	r3, r2
 8001640:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	3b01      	subs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ec      	bne.n	800162a <LCD_PutInt+0x8e>
	}

	return (pX - X);
 8001650:	8c3b      	ldrh	r3, [r7, #32]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b2db      	uxtb	r3, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	66666667 	.word	0x66666667

08001668 <LCD_PutIntF>:
//   X,Y - top left coordinates of first symbol
//   num - unsigned integer value
//   decimals - number of digits after decimal point
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutIntF(uint16_t X, uint16_t Y, int32_t num, uint8_t decimals, const Font_TypeDef *font) {
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b08b      	sub	sp, #44	; 0x2c
 800166c:	af00      	add	r7, sp, #0
 800166e:	60ba      	str	r2, [r7, #8]
 8001670:	461a      	mov	r2, r3
 8001672:	4603      	mov	r3, r0
 8001674:	81fb      	strh	r3, [r7, #14]
 8001676:	460b      	mov	r3, r1
 8001678:	81bb      	strh	r3, [r7, #12]
 800167a:	4613      	mov	r3, r2
 800167c:	71fb      	strb	r3, [r7, #7]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t strLen = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint16_t pX = X;
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	843b      	strh	r3, [r7, #32]

	// Convert number to characters
	*pStr++ = '\0'; // String termination character
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	627a      	str	r2, [r7, #36]	; 0x24
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
	if (num < 0) {
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da05      	bge.n	80016b0 <LCD_PutIntF+0x48>
		neg = 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	425b      	negs	r3, r3
 80016ae:	60bb      	str	r3, [r7, #8]
	}
	do {
		*pStr++ = (num % 10) + '0';
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <LCD_PutIntF+0x160>)
 80016b4:	fb83 1302 	smull	r1, r3, r3, r2
 80016b8:	1099      	asrs	r1, r3, #2
 80016ba:	17d3      	asrs	r3, r2, #31
 80016bc:	1ac9      	subs	r1, r1, r3
 80016be:	460b      	mov	r3, r1
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	1ad1      	subs	r1, r2, r3
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	1c59      	adds	r1, r3, #1
 80016ce:	6279      	str	r1, [r7, #36]	; 0x24
 80016d0:	3230      	adds	r2, #48	; 0x30
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]
		strLen++;
 80016d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80016da:	3301      	adds	r3, #1
 80016dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	} while (num /= 10);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4a39      	ldr	r2, [pc, #228]	; (80017c8 <LCD_PutIntF+0x160>)
 80016e4:	fb82 1203 	smull	r1, r2, r2, r3
 80016e8:	1092      	asrs	r2, r2, #2
 80016ea:	17db      	asrs	r3, r3, #31
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1dc      	bne.n	80016b0 <LCD_PutIntF+0x48>

	// Add leading zeroes
	if (strLen <= decimals) {
 80016f6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d80f      	bhi.n	8001720 <LCD_PutIntF+0xb8>
		while (strLen <= decimals) {
 8001700:	e009      	b.n	8001716 <LCD_PutIntF+0xae>
			*pStr++ = '0';
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	627a      	str	r2, [r7, #36]	; 0x24
 8001708:	2230      	movs	r2, #48	; 0x30
 800170a:	701a      	strb	r2, [r3, #0]
			strLen++;
 800170c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001710:	3301      	adds	r3, #1
 8001712:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		while (strLen <= decimals) {
 8001716:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	429a      	cmp	r2, r3
 800171e:	d9f0      	bls.n	8001702 <LCD_PutIntF+0x9a>
		}
	}

	// Minus sign?
	if (neg) {
 8001720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03d      	beq.n	80017a4 <LCD_PutIntF+0x13c>
		*pStr++ = '-';
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	627a      	str	r2, [r7, #36]	; 0x24
 800172e:	222d      	movs	r2, #45	; 0x2d
 8001730:	701a      	strb	r2, [r3, #0]
		strLen++;
 8001732:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001736:	3301      	adds	r3, #1
 8001738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	}

	// Draw a number
	while (*--pStr) {
 800173c:	e032      	b.n	80017a4 <LCD_PutIntF+0x13c>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	781a      	ldrb	r2, [r3, #0]
 8001742:	89b9      	ldrh	r1, [r7, #12]
 8001744:	8c38      	ldrh	r0, [r7, #32]
 8001746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001748:	f7ff fdd1 	bl	80012ee <LCD_PutChar>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	8c3b      	ldrh	r3, [r7, #32]
 8001752:	4413      	add	r3, r2
 8001754:	843b      	strh	r3, [r7, #32]
		if (decimals && (--strLen == decimals)) {
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <LCD_PutIntF+0x13c>
 800175c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001760:	3b01      	subs	r3, #1
 8001762:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001766:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	429a      	cmp	r2, r3
 800176e:	d119      	bne.n	80017a4 <LCD_PutIntF+0x13c>
			// Draw decimal point
			LCD_Rect(pX, Y + font->font_Height - 2, pX + 1, Y + font->font_Height - 1);
 8001770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	b29a      	uxth	r2, r3
 8001776:	89bb      	ldrh	r3, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b02      	subs	r3, #2
 800177e:	b299      	uxth	r1, r3
 8001780:	8c3b      	ldrh	r3, [r7, #32]
 8001782:	3301      	adds	r3, #1
 8001784:	b29c      	uxth	r4, r3
 8001786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001788:	785b      	ldrb	r3, [r3, #1]
 800178a:	b29a      	uxth	r2, r3
 800178c:	89bb      	ldrh	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29b      	uxth	r3, r3
 8001796:	8c38      	ldrh	r0, [r7, #32]
 8001798:	4622      	mov	r2, r4
 800179a:	f7ff fb39 	bl	8000e10 <LCD_Rect>
			pX += 3;
 800179e:	8c3b      	ldrh	r3, [r7, #32]
 80017a0:	3303      	adds	r3, #3
 80017a2:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	3b01      	subs	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1c5      	bne.n	800173e <LCD_PutIntF+0xd6>
		}
	}

	return (pX - X);
 80017b2:	8c3b      	ldrh	r3, [r7, #32]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	89fb      	ldrh	r3, [r7, #14]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	b2db      	uxtb	r3, r3
}
 80017be:	4618      	mov	r0, r3
 80017c0:	372c      	adds	r7, #44	; 0x2c
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	66666667 	.word	0x66666667

080017cc <drawUpDownArrow>:
		   HAL_SPI_Transmit(&hspi4, (uint8_t *)test, sizeof(test), 100);
	   	   SMLCD_SCS_L;
		   HAL_Delay(5);
	   }
}
void drawUpDownArrow(uint16_t X, uint16_t Y, uint16_t S, uint16_t dir){
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4623      	mov	r3, r4
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	4603      	mov	r3, r0
 80017e0:	80bb      	strh	r3, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	803b      	strh	r3, [r7, #0]
	int i=X;
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	61bb      	str	r3, [r7, #24]
	int j=Y;
 80017ee:	88bb      	ldrh	r3, [r7, #4]
 80017f0:	617b      	str	r3, [r7, #20]
	int size=S;
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	613b      	str	r3, [r7, #16]
	int direction = dir;
 80017f6:	883b      	ldrh	r3, [r7, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
	int lineCounter;
	if((direction==0)||(direction==1)){
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <drawUpDownArrow+0x3a>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d11f      	bne.n	8001846 <drawUpDownArrow+0x7a>
		LCD_FillRect(i-size, j-(size*2), i+size, j+(size*2));
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	b29a      	uxth	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	b29b      	uxth	r3, r3
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	b298      	uxth	r0, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	b29a      	uxth	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	b29b      	uxth	r3, r3
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	b29b      	uxth	r3, r3
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	b299      	uxth	r1, r3
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	b29a      	uxth	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	b29b      	uxth	r3, r3
 800182a:	4413      	add	r3, r2
 800182c:	b29c      	uxth	r4, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	b29b      	uxth	r3, r3
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4413      	add	r3, r2
 800183c:	b29b      	uxth	r3, r3
 800183e:	4622      	mov	r2, r4
 8001840:	f7ff fb28 	bl	8000e94 <LCD_FillRect>
 8001844:	e01e      	b.n	8001884 <drawUpDownArrow+0xb8>
	}
	else{
		LCD_FillRect(i-(size*2), j-size, i+(size*2), j+size);
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	b29a      	uxth	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	b29b      	uxth	r3, r3
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	b298      	uxth	r0, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	b29a      	uxth	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	b29b      	uxth	r3, r3
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b299      	uxth	r1, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	b29b      	uxth	r3, r3
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	b29b      	uxth	r3, r3
 800186e:	4413      	add	r3, r2
 8001870:	b29c      	uxth	r4, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	b29a      	uxth	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4413      	add	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	4622      	mov	r2, r4
 8001880:	f7ff fb08 	bl	8000e94 <LCD_FillRect>
	}
	switch(direction)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b03      	cmp	r3, #3
 8001888:	f200 8234 	bhi.w	8001cf4 <drawUpDownArrow+0x528>
 800188c:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <drawUpDownArrow+0xc8>)
 800188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001892:	bf00      	nop
 8001894:	080018a5 	.word	0x080018a5
 8001898:	080019bb 	.word	0x080019bb
 800189c:	08001ad1 	.word	0x08001ad1
 80018a0:	08001be3 	.word	0x08001be3
	{
	case 0: //upwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e03d      	b.n	8001926 <drawUpDownArrow+0x15a>
			LCD_Line(i-(size*2)+lineCounter,j-(size*2 +1)-lineCounter, i+(size*2)-lineCounter, j-(size*2 +1)-lineCounter);
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b218      	sxth	r0, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29b      	uxth	r3, r3
 80018e0:	b219      	sxth	r1, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b21c      	sxth	r4, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	b29b      	uxth	r3, r3
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	b29b      	uxth	r3, r3
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	b29a      	uxth	r2, r3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	b29b      	uxth	r3, r3
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	b21b      	sxth	r3, r3
 800191a:	4622      	mov	r2, r4
 800191c:	f7ff fc20 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3301      	adds	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbbc      	blt.n	80018aa <drawUpDownArrow+0xde>
		}
		LCD_Line(i-(size*2),j-(size*2 +1),i,j-(size*4));
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	b29a      	uxth	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	b29b      	uxth	r3, r3
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	b29b      	uxth	r3, r3
 8001940:	b218      	sxth	r0, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	b29a      	uxth	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	b29b      	uxth	r3, r3
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	b29b      	uxth	r3, r3
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b01      	subs	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	b219      	sxth	r1, r3
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	b21c      	sxth	r4, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	b29a      	uxth	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	b29b      	uxth	r3, r3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	b29b      	uxth	r3, r3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	b29b      	uxth	r3, r3
 800196c:	b21b      	sxth	r3, r3
 800196e:	4622      	mov	r2, r4
 8001970:	f7ff fbf6 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j-(size*2 +1),i,j-(size*4));
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	b29b      	uxth	r3, r3
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b29b      	uxth	r3, r3
 8001984:	b218      	sxth	r0, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	b29a      	uxth	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	b29b      	uxth	r3, r3
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	b29b      	uxth	r3, r3
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b29b      	uxth	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	b29b      	uxth	r3, r3
 800199a:	b219      	sxth	r1, r3
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	b21c      	sxth	r4, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	4622      	mov	r2, r4
 80019b4:	f7ff fbd4 	bl	8001160 <LCD_Line>
		break;
 80019b8:	e19c      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 1:  //downwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e03d      	b.n	8001a3c <drawUpDownArrow+0x270>
			LCD_Line(i-(size*2)+lineCounter,j+(size*2 +1)+lineCounter, i+(size*2)-lineCounter, j+(size*2 +1)+lineCounter);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	b218      	sxth	r0, r3
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3301      	adds	r3, #1
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b219      	sxth	r1, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	b21c      	sxth	r4, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	4622      	mov	r2, r4
 8001a32:	f7ff fb95 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbbc      	blt.n	80019c0 <drawUpDownArrow+0x1f4>
		}
		LCD_Line(i-(size*2),j+(size*2 +1),i,j+(size*4));
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b218      	sxth	r0, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b219      	sxth	r1, r3
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	b21c      	sxth	r4, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4622      	mov	r2, r4
 8001a86:	f7ff fb6b 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j+(size*2 +1),i,j+(size*4));
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b218      	sxth	r0, r3
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b219      	sxth	r1, r3
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	b21c      	sxth	r4, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	4622      	mov	r2, r4
 8001aca:	f7ff fb49 	bl	8001160 <LCD_Line>
		break;
 8001ace:	e111      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 2:{   //rightwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	e03d      	b.n	8001b52 <drawUpDownArrow+0x386>
			LCD_Line(i+(size*2+1)+lineCounter,j+(size*2)-lineCounter, i+(size*2+1)+lineCounter, j-(size*2)+lineCounter);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	b218      	sxth	r0, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	b219      	sxth	r1, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21c      	sxth	r4, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4622      	mov	r2, r4
 8001b48:	f7ff fb0a 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbbc      	blt.n	8001ad6 <drawUpDownArrow+0x30a>
		}
		LCD_Line(i+(size*2+1),j+(size*2),i+(size*4),j);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b218      	sxth	r0, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b219      	sxth	r1, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	f7ff fae1 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2+1),j-(size*2),i+(size*4),j);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	b218      	sxth	r0, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b219      	sxth	r1, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	f7ff fac0 	bl	8001160 <LCD_Line>
		break;
 8001be0:	e088      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 3:{   //leftwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e03d      	b.n	8001c64 <drawUpDownArrow+0x498>
			LCD_Line(i-(size*2+1)-lineCounter,j+(size*2)-lineCounter, i-(size*2+1)-lineCounter, j-(size*2)+lineCounter);
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b218      	sxth	r0, r3
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b219      	sxth	r1, r3
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	b21c      	sxth	r4, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4622      	mov	r2, r4
 8001c5a:	f7ff fa81 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	dbbc      	blt.n	8001be8 <drawUpDownArrow+0x41c>
		}
		LCD_Line(i-(size*2+1),j+(size*2),i-(size*4),j);
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b218      	sxth	r0, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	b219      	sxth	r1, r3
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	f7ff fa58 	bl	8001160 <LCD_Line>
		LCD_Line(i-(size*2+1),j-(size*2),i-(size*4),j);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b218      	sxth	r0, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b219      	sxth	r1, r3
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	f7ff fa37 	bl	8001160 <LCD_Line>
		break;
 8001cf2:	bf00      	nop
	}
	}

}
 8001cf4:	bf00      	nop
 8001cf6:	3724      	adds	r7, #36	; 0x24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d02:	f005 fba4 	bl	800744e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d06:	f000 f8f3 	bl	8001ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0a:	f000 ff29 	bl	8002b60 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d0e:	f000 fee5 	bl	8002adc <MX_DMA_Init>
  MX_ADC1_Init();
 8001d12:	f000 f995 	bl	8002040 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001d16:	f000 fa71 	bl	80021fc <MX_ADC2_Init>
  MX_ADC3_Init();
 8001d1a:	f000 faeb 	bl	80022f4 <MX_ADC3_Init>
  MX_I2C1_Init();
 8001d1e:	f000 fb81 	bl	8002424 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d22:	f000 fbbf 	bl	80024a4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001d26:	f000 fbfd 	bl	8002524 <MX_I2C3_Init>
  MX_I2C4_Init();
 8001d2a:	f000 fc3d 	bl	80025a8 <MX_I2C4_Init>
  MX_RTC_Init();
 8001d2e:	f000 fc7b 	bl	8002628 <MX_RTC_Init>
  MX_SPI4_Init();
 8001d32:	f000 fc9f 	bl	8002674 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001d36:	f000 fcdb 	bl	80026f0 <MX_SPI5_Init>
  MX_TIM4_Init();
 8001d3a:	f000 fd17 	bl	800276c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001d3e:	f000 fd8d 	bl	800285c <MX_TIM5_Init>
  MX_UART4_Init();
 8001d42:	f000 fe0d 	bl	8002960 <MX_UART4_Init>
  MX_UART5_Init();
 8001d46:	f000 fe3b 	bl	80029c0 <MX_UART5_Init>
  MX_UART7_Init();
 8001d4a:	f000 fe69 	bl	8002a20 <MX_UART7_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d4e:	f000 fe97 	bl	8002a80 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_ConfigChannel();
  outputGPIOBufInitialization();
 8001d52:	f001 f8b5 	bl	8002ec0 <outputGPIOBufInitialization>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8001d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5a:	494e      	ldr	r1, [pc, #312]	; (8001e94 <main+0x198>)
 8001d5c:	484e      	ldr	r0, [pc, #312]	; (8001e98 <main+0x19c>)
 8001d5e:	f005 fd4b 	bl	80077f8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8001d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d66:	494d      	ldr	r1, [pc, #308]	; (8001e9c <main+0x1a0>)
 8001d68:	484d      	ldr	r0, [pc, #308]	; (8001ea0 <main+0x1a4>)
 8001d6a:	f005 fd45 	bl	80077f8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	494c      	ldr	r1, [pc, #304]	; (8001ea4 <main+0x1a8>)
 8001d74:	484c      	ldr	r0, [pc, #304]	; (8001ea8 <main+0x1ac>)
 8001d76:	f005 fd3f 	bl	80077f8 <HAL_ADC_Start_DMA>
   int x=1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	607b      	str	r3, [r7, #4]



  configureLEDDriver();
 8001d7e:	f001 fa09 	bl	8003194 <configureLEDDriver>
    setErrorLED(4,OFF);
 8001d82:	2100      	movs	r1, #0
 8001d84:	2004      	movs	r0, #4
 8001d86:	f001 fa91 	bl	80032ac <setErrorLED>
    HAL_Delay(1000);
 8001d8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d8e:	f005 fb8b 	bl	80074a8 <HAL_Delay>
    setErrorLED(7,OFF);
 8001d92:	2100      	movs	r1, #0
 8001d94:	2007      	movs	r0, #7
 8001d96:	f001 fa89 	bl	80032ac <setErrorLED>
    setErrorLED(8,ON);
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	2008      	movs	r0, #8
 8001d9e:	f001 fa85 	bl	80032ac <setErrorLED>
    HAL_Delay(1000);
 8001da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001da6:	f005 fb7f 	bl	80074a8 <HAL_Delay>
    setErrorLED(8,OFF);
 8001daa:	2100      	movs	r1, #0
 8001dac:	2008      	movs	r0, #8
 8001dae:	f001 fa7d 	bl	80032ac <setErrorLED>
    setErrorLED(9,ON);
 8001db2:	2101      	movs	r1, #1
 8001db4:	2009      	movs	r0, #9
 8001db6:	f001 fa79 	bl	80032ac <setErrorLED>
    HAL_Delay(1000);
 8001dba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dbe:	f005 fb73 	bl	80074a8 <HAL_Delay>
    setErrorLED(8,ON);
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	2008      	movs	r0, #8
 8001dc6:	f001 fa71 	bl	80032ac <setErrorLED>
    setErrorLED(9,ON);
 8001dca:	2101      	movs	r1, #1
 8001dcc:	2009      	movs	r0, #9
 8001dce:	f001 fa6d 	bl	80032ac <setErrorLED>
    HAL_Delay(1000);
 8001dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd6:	f005 fb67 	bl	80074a8 <HAL_Delay>
    setErrorLED(9,OFF);
 8001dda:	2100      	movs	r1, #0
 8001ddc:	2009      	movs	r0, #9
 8001dde:	f001 fa65 	bl	80032ac <setErrorLED>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001de2:	f00b fbdd 	bl	800d5a0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(startHeartbeat, NULL, &Heartbeat_attributes);
 8001de6:	4a31      	ldr	r2, [pc, #196]	; (8001eac <main+0x1b0>)
 8001de8:	2100      	movs	r1, #0
 8001dea:	4831      	ldr	r0, [pc, #196]	; (8001eb0 <main+0x1b4>)
 8001dec:	f00b fc42 	bl	800d674 <osThreadNew>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <main+0x1b8>)
 8001df4:	601a      	str	r2, [r3, #0]

  /* creation of adcRead */
  adcReadHandle = osThreadNew(startADCRead, NULL, &adcRead_attributes);
 8001df6:	4a30      	ldr	r2, [pc, #192]	; (8001eb8 <main+0x1bc>)
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4830      	ldr	r0, [pc, #192]	; (8001ebc <main+0x1c0>)
 8001dfc:	f00b fc3a 	bl	800d674 <osThreadNew>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <main+0x1c4>)
 8001e04:	601a      	str	r2, [r3, #0]

  /* creation of DatScreenBlink */
  DatScreenBlinkHandle = osThreadNew(GetDaScreenBlink, NULL, &DatScreenBlink_attributes);
 8001e06:	4a2f      	ldr	r2, [pc, #188]	; (8001ec4 <main+0x1c8>)
 8001e08:	2100      	movs	r1, #0
 8001e0a:	482f      	ldr	r0, [pc, #188]	; (8001ec8 <main+0x1cc>)
 8001e0c:	f00b fc32 	bl	800d674 <osThreadNew>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <main+0x1d0>)
 8001e14:	601a      	str	r2, [r3, #0]

  /* creation of gpioInputRead */
  gpioInputReadHandle = osThreadNew(startGpioInputRead, NULL, &gpioInputRead_attributes);
 8001e16:	4a2e      	ldr	r2, [pc, #184]	; (8001ed0 <main+0x1d4>)
 8001e18:	2100      	movs	r1, #0
 8001e1a:	482e      	ldr	r0, [pc, #184]	; (8001ed4 <main+0x1d8>)
 8001e1c:	f00b fc2a 	bl	800d674 <osThreadNew>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <main+0x1dc>)
 8001e24:	601a      	str	r2, [r3, #0]

  /* creation of navigationTask */
  navigationTaskHandle = osThreadNew(startNavigationTask, NULL, &navigationTask_attributes);
 8001e26:	4a2d      	ldr	r2, [pc, #180]	; (8001edc <main+0x1e0>)
 8001e28:	2100      	movs	r1, #0
 8001e2a:	482d      	ldr	r0, [pc, #180]	; (8001ee0 <main+0x1e4>)
 8001e2c:	f00b fc22 	bl	800d674 <osThreadNew>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <main+0x1e8>)
 8001e34:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001e36:	f00b fbe7 	bl	800d608 <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_Delay(1000);
 8001e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e3e:	f005 fb33 	bl	80074a8 <HAL_Delay>
	  if (!x) {
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d112      	bne.n	8001e6e <main+0x172>
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e4e:	4826      	ldr	r0, [pc, #152]	; (8001ee8 <main+0x1ec>)
 8001e50:	f006 ffa4 	bl	8008d9c <HAL_GPIO_WritePin>
		  x=1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	607b      	str	r3, [r7, #4]

		  //uartTransmitChar("hello\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	4823      	ldr	r0, [pc, #140]	; (8001eec <main+0x1f0>)
 8001e5e:	f006 ff9d 	bl	8008d9c <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2110      	movs	r1, #16
 8001e66:	4821      	ldr	r0, [pc, #132]	; (8001eec <main+0x1f0>)
 8001e68:	f006 ff98 	bl	8008d9c <HAL_GPIO_WritePin>
 8001e6c:	e7e5      	b.n	8001e3a <main+0x13e>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e74:	481c      	ldr	r0, [pc, #112]	; (8001ee8 <main+0x1ec>)
 8001e76:	f006 ff91 	bl	8008d9c <HAL_GPIO_WritePin>
		  x=0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
		  //uartTransmitChar("here\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2110      	movs	r1, #16
 8001e82:	481a      	ldr	r0, [pc, #104]	; (8001eec <main+0x1f0>)
 8001e84:	f006 ff8a 	bl	8008d9c <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2110      	movs	r1, #16
 8001e8c:	4817      	ldr	r0, [pc, #92]	; (8001eec <main+0x1f0>)
 8001e8e:	f006 ff85 	bl	8008d9c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001e92:	e7d2      	b.n	8001e3a <main+0x13e>
 8001e94:	20010af4 	.word	0x20010af4
 8001e98:	20013284 	.word	0x20013284
 8001e9c:	200218a4 	.word	0x200218a4
 8001ea0:	2001056c 	.word	0x2001056c
 8001ea4:	200133ac 	.word	0x200133ac
 8001ea8:	200132d0 	.word	0x200132d0
 8001eac:	0801490c 	.word	0x0801490c
 8001eb0:	08003e01 	.word	0x08003e01
 8001eb4:	200218a0 	.word	0x200218a0
 8001eb8:	08014930 	.word	0x08014930
 8001ebc:	08003e21 	.word	0x08003e21
 8001ec0:	20024078 	.word	0x20024078
 8001ec4:	08014954 	.word	0x08014954
 8001ec8:	08003ea1 	.word	0x08003ea1
 8001ecc:	20024074 	.word	0x20024074
 8001ed0:	08014978 	.word	0x08014978
 8001ed4:	08003f81 	.word	0x08003f81
 8001ed8:	200132cc 	.word	0x200132cc
 8001edc:	0801499c 	.word	0x0801499c
 8001ee0:	080040ad 	.word	0x080040ad
 8001ee4:	200133a8 	.word	0x200133a8
 8001ee8:	40022000 	.word	0x40022000
 8001eec:	40021000 	.word	0x40021000

08001ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b0b8      	sub	sp, #224	; 0xe0
 8001ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001efa:	2234      	movs	r2, #52	; 0x34
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f00e fa19 	bl	8010336 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f04:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f14:	f107 0308 	add.w	r3, r7, #8
 8001f18:	2290      	movs	r2, #144	; 0x90
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f00e fa0a 	bl	8010336 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f22:	f007 fded 	bl	8009b00 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f26:	4b43      	ldr	r3, [pc, #268]	; (8002034 <SystemClock_Config+0x144>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	4a42      	ldr	r2, [pc, #264]	; (8002034 <SystemClock_Config+0x144>)
 8001f2c:	f023 0318 	bic.w	r3, r3, #24
 8001f30:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4b40      	ldr	r3, [pc, #256]	; (8002034 <SystemClock_Config+0x144>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a3f      	ldr	r2, [pc, #252]	; (8002034 <SystemClock_Config+0x144>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <SystemClock_Config+0x144>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f4a:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <SystemClock_Config+0x148>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f52:	4a39      	ldr	r2, [pc, #228]	; (8002038 <SystemClock_Config+0x148>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b37      	ldr	r3, [pc, #220]	; (8002038 <SystemClock_Config+0x148>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001f66:	2305      	movs	r3, #5
 8001f68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f74:	2301      	movs	r3, #1
 8001f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001f88:	230f      	movs	r3, #15
 8001f8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001f8e:	2390      	movs	r3, #144	; 0x90
 8001f90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f94:	2302      	movs	r3, #2
 8001f96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f007 fdbb 	bl	8009b20 <HAL_RCC_OscConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001fb0:	f002 f940 	bl	8004234 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb4:	230f      	movs	r3, #15
 8001fb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fd6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001fda:	2103      	movs	r1, #3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f008 f84d 	bl	800a07c <HAL_RCC_ClockConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001fe8:	f002 f924 	bl	8004234 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <SystemClock_Config+0x14c>)
 8001fee:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001ffe:	2300      	movs	r3, #0
 8002000:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002002:	2300      	movs	r3, #0
 8002004:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002006:	2300      	movs	r3, #0
 8002008:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800200a:	2300      	movs	r3, #0
 800200c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800200e:	2300      	movs	r3, #0
 8002010:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002018:	f107 0308 	add.w	r3, r7, #8
 800201c:	4618      	mov	r0, r3
 800201e:	f008 fa31 	bl	800a484 <HAL_RCCEx_PeriphCLKConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8002028:	f002 f904 	bl	8004234 <Error_Handler>
  }
}
 800202c:	bf00      	nop
 800202e:	37e0      	adds	r7, #224	; 0xe0
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40023800 	.word	0x40023800
 8002038:	40007000 	.word	0x40007000
 800203c:	0023d620 	.word	0x0023d620

08002040 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002046:	463b      	mov	r3, r7
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002052:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002054:	4a67      	ldr	r2, [pc, #412]	; (80021f4 <MX_ADC1_Init+0x1b4>)
 8002056:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002058:	4b65      	ldr	r3, [pc, #404]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800205a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800205e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002060:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002066:	4b62      	ldr	r3, [pc, #392]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002068:	2201      	movs	r2, #1
 800206a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800206c:	4b60      	ldr	r3, [pc, #384]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800206e:	2201      	movs	r2, #1
 8002070:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002072:	4b5f      	ldr	r3, [pc, #380]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800207a:	4b5d      	ldr	r3, [pc, #372]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800207c:	2200      	movs	r2, #0
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002080:	4b5b      	ldr	r3, [pc, #364]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002082:	4a5d      	ldr	r2, [pc, #372]	; (80021f8 <MX_ADC1_Init+0x1b8>)
 8002084:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002086:	4b5a      	ldr	r3, [pc, #360]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002088:	2200      	movs	r2, #0
 800208a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 800208c:	4b58      	ldr	r3, [pc, #352]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800208e:	220b      	movs	r2, #11
 8002090:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002092:	4b57      	ldr	r3, [pc, #348]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800209a:	4b55      	ldr	r3, [pc, #340]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800209c:	2201      	movs	r2, #1
 800209e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020a0:	4853      	ldr	r0, [pc, #332]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80020a2:	f005 fa23 	bl	80074ec <HAL_ADC_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80020ac:	f002 f8c2 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80020b0:	2303      	movs	r3, #3
 80020b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020b4:	2301      	movs	r3, #1
 80020b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80020b8:	2307      	movs	r3, #7
 80020ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020bc:	463b      	mov	r3, r7
 80020be:	4619      	mov	r1, r3
 80020c0:	484b      	ldr	r0, [pc, #300]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80020c2:	f005 fcef 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020cc:	f002 f8b2 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80020d0:	2304      	movs	r3, #4
 80020d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020d4:	2302      	movs	r3, #2
 80020d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d8:	463b      	mov	r3, r7
 80020da:	4619      	mov	r1, r3
 80020dc:	4844      	ldr	r0, [pc, #272]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80020de:	f005 fce1 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80020e8:	f002 f8a4 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80020ec:	2305      	movs	r3, #5
 80020ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80020f0:	2303      	movs	r3, #3
 80020f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f4:	463b      	mov	r3, r7
 80020f6:	4619      	mov	r1, r3
 80020f8:	483d      	ldr	r0, [pc, #244]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80020fa:	f005 fcd3 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002104:	f002 f896 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002108:	2306      	movs	r3, #6
 800210a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800210c:	2304      	movs	r3, #4
 800210e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002110:	463b      	mov	r3, r7
 8002112:	4619      	mov	r1, r3
 8002114:	4836      	ldr	r0, [pc, #216]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002116:	f005 fcc5 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002120:	f002 f888 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002124:	2307      	movs	r3, #7
 8002126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002128:	2305      	movs	r3, #5
 800212a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800212c:	463b      	mov	r3, r7
 800212e:	4619      	mov	r1, r3
 8002130:	482f      	ldr	r0, [pc, #188]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002132:	f005 fcb7 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800213c:	f002 f87a 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002140:	2308      	movs	r3, #8
 8002142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002144:	2306      	movs	r3, #6
 8002146:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002148:	463b      	mov	r3, r7
 800214a:	4619      	mov	r1, r3
 800214c:	4828      	ldr	r0, [pc, #160]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800214e:	f005 fca9 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002158:	f002 f86c 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800215c:	2309      	movs	r3, #9
 800215e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002160:	2307      	movs	r3, #7
 8002162:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002164:	463b      	mov	r3, r7
 8002166:	4619      	mov	r1, r3
 8002168:	4821      	ldr	r0, [pc, #132]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800216a:	f005 fc9b 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002174:	f002 f85e 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002178:	230a      	movs	r3, #10
 800217a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800217c:	2308      	movs	r3, #8
 800217e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002180:	463b      	mov	r3, r7
 8002182:	4619      	mov	r1, r3
 8002184:	481a      	ldr	r0, [pc, #104]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002186:	f005 fc8d 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002190:	f002 f850 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002194:	230b      	movs	r3, #11
 8002196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002198:	2309      	movs	r3, #9
 800219a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800219c:	463b      	mov	r3, r7
 800219e:	4619      	mov	r1, r3
 80021a0:	4813      	ldr	r0, [pc, #76]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80021a2:	f005 fc7f 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80021ac:	f002 f842 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80021b0:	230c      	movs	r3, #12
 80021b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80021b4:	230a      	movs	r3, #10
 80021b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021b8:	463b      	mov	r3, r7
 80021ba:	4619      	mov	r1, r3
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80021be:	f005 fc71 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80021c8:	f002 f834 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80021cc:	230d      	movs	r3, #13
 80021ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80021d0:	230b      	movs	r3, #11
 80021d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021d4:	463b      	mov	r3, r7
 80021d6:	4619      	mov	r1, r3
 80021d8:	4805      	ldr	r0, [pc, #20]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80021da:	f005 fc63 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80021e4:	f002 f826 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20013284 	.word	0x20013284
 80021f4:	40012000 	.word	0x40012000
 80021f8:	0f000001 	.word	0x0f000001

080021fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002202:	463b      	mov	r3, r7
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002210:	4a36      	ldr	r2, [pc, #216]	; (80022ec <MX_ADC2_Init+0xf0>)
 8002212:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002214:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002216:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800221a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800221c:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <MX_ADC2_Init+0xec>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002222:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002224:	2201      	movs	r2, #1
 8002226:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002228:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <MX_ADC2_Init+0xec>)
 800222a:	2201      	movs	r2, #1
 800222c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800222e:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002236:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002238:	2200      	movs	r2, #0
 800223a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <MX_ADC2_Init+0xec>)
 800223e:	4a2c      	ldr	r2, [pc, #176]	; (80022f0 <MX_ADC2_Init+0xf4>)
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002242:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002244:	2200      	movs	r2, #0
 8002246:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <MX_ADC2_Init+0xec>)
 800224a:	2204      	movs	r2, #4
 800224c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800224e:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002256:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002258:	2201      	movs	r2, #1
 800225a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800225c:	4822      	ldr	r0, [pc, #136]	; (80022e8 <MX_ADC2_Init+0xec>)
 800225e:	f005 f945 	bl	80074ec <HAL_ADC_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002268:	f001 ffe4 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800226c:	2300      	movs	r3, #0
 800226e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002270:	2301      	movs	r3, #1
 8002272:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002274:	2307      	movs	r3, #7
 8002276:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002278:	463b      	mov	r3, r7
 800227a:	4619      	mov	r1, r3
 800227c:	481a      	ldr	r0, [pc, #104]	; (80022e8 <MX_ADC2_Init+0xec>)
 800227e:	f005 fc11 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002288:	f001 ffd4 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800228c:	2301      	movs	r3, #1
 800228e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002290:	2302      	movs	r3, #2
 8002292:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002294:	463b      	mov	r3, r7
 8002296:	4619      	mov	r1, r3
 8002298:	4813      	ldr	r0, [pc, #76]	; (80022e8 <MX_ADC2_Init+0xec>)
 800229a:	f005 fc03 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80022a4:	f001 ffc6 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80022a8:	230e      	movs	r3, #14
 80022aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80022ac:	2303      	movs	r3, #3
 80022ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022b0:	463b      	mov	r3, r7
 80022b2:	4619      	mov	r1, r3
 80022b4:	480c      	ldr	r0, [pc, #48]	; (80022e8 <MX_ADC2_Init+0xec>)
 80022b6:	f005 fbf5 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80022c0:	f001 ffb8 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80022c4:	230f      	movs	r3, #15
 80022c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80022c8:	2304      	movs	r3, #4
 80022ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022cc:	463b      	mov	r3, r7
 80022ce:	4619      	mov	r1, r3
 80022d0:	4805      	ldr	r0, [pc, #20]	; (80022e8 <MX_ADC2_Init+0xec>)
 80022d2:	f005 fbe7 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80022dc:	f001 ffaa 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	2001056c 	.word	0x2001056c
 80022ec:	40012100 	.word	0x40012100
 80022f0:	0f000001 	.word	0x0f000001

080022f4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022fa:	463b      	mov	r3, r7
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002306:	4b44      	ldr	r3, [pc, #272]	; (8002418 <MX_ADC3_Init+0x124>)
 8002308:	4a44      	ldr	r2, [pc, #272]	; (800241c <MX_ADC3_Init+0x128>)
 800230a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800230c:	4b42      	ldr	r3, [pc, #264]	; (8002418 <MX_ADC3_Init+0x124>)
 800230e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002312:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002314:	4b40      	ldr	r3, [pc, #256]	; (8002418 <MX_ADC3_Init+0x124>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800231a:	4b3f      	ldr	r3, [pc, #252]	; (8002418 <MX_ADC3_Init+0x124>)
 800231c:	2201      	movs	r2, #1
 800231e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002320:	4b3d      	ldr	r3, [pc, #244]	; (8002418 <MX_ADC3_Init+0x124>)
 8002322:	2201      	movs	r2, #1
 8002324:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002326:	4b3c      	ldr	r3, [pc, #240]	; (8002418 <MX_ADC3_Init+0x124>)
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800232e:	4b3a      	ldr	r3, [pc, #232]	; (8002418 <MX_ADC3_Init+0x124>)
 8002330:	2200      	movs	r2, #0
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002334:	4b38      	ldr	r3, [pc, #224]	; (8002418 <MX_ADC3_Init+0x124>)
 8002336:	4a3a      	ldr	r2, [pc, #232]	; (8002420 <MX_ADC3_Init+0x12c>)
 8002338:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800233a:	4b37      	ldr	r3, [pc, #220]	; (8002418 <MX_ADC3_Init+0x124>)
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8002340:	4b35      	ldr	r3, [pc, #212]	; (8002418 <MX_ADC3_Init+0x124>)
 8002342:	2206      	movs	r2, #6
 8002344:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002346:	4b34      	ldr	r3, [pc, #208]	; (8002418 <MX_ADC3_Init+0x124>)
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800234e:	4b32      	ldr	r3, [pc, #200]	; (8002418 <MX_ADC3_Init+0x124>)
 8002350:	2201      	movs	r2, #1
 8002352:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002354:	4830      	ldr	r0, [pc, #192]	; (8002418 <MX_ADC3_Init+0x124>)
 8002356:	f005 f8c9 	bl	80074ec <HAL_ADC_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002360:	f001 ff68 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002364:	2302      	movs	r3, #2
 8002366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002368:	2301      	movs	r3, #1
 800236a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800236c:	2307      	movs	r3, #7
 800236e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002370:	463b      	mov	r3, r7
 8002372:	4619      	mov	r1, r3
 8002374:	4828      	ldr	r0, [pc, #160]	; (8002418 <MX_ADC3_Init+0x124>)
 8002376:	f005 fb95 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002380:	f001 ff58 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002384:	2304      	movs	r3, #4
 8002386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002388:	2302      	movs	r3, #2
 800238a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800238c:	463b      	mov	r3, r7
 800238e:	4619      	mov	r1, r3
 8002390:	4821      	ldr	r0, [pc, #132]	; (8002418 <MX_ADC3_Init+0x124>)
 8002392:	f005 fb87 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 800239c:	f001 ff4a 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80023a0:	2305      	movs	r3, #5
 80023a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80023a4:	2303      	movs	r3, #3
 80023a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023a8:	463b      	mov	r3, r7
 80023aa:	4619      	mov	r1, r3
 80023ac:	481a      	ldr	r0, [pc, #104]	; (8002418 <MX_ADC3_Init+0x124>)
 80023ae:	f005 fb79 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80023b8:	f001 ff3c 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80023bc:	2306      	movs	r3, #6
 80023be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80023c0:	2304      	movs	r3, #4
 80023c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023c4:	463b      	mov	r3, r7
 80023c6:	4619      	mov	r1, r3
 80023c8:	4813      	ldr	r0, [pc, #76]	; (8002418 <MX_ADC3_Init+0x124>)
 80023ca:	f005 fb6b 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 80023d4:	f001 ff2e 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80023d8:	2307      	movs	r3, #7
 80023da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80023dc:	2305      	movs	r3, #5
 80023de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023e0:	463b      	mov	r3, r7
 80023e2:	4619      	mov	r1, r3
 80023e4:	480c      	ldr	r0, [pc, #48]	; (8002418 <MX_ADC3_Init+0x124>)
 80023e6:	f005 fb5d 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 80023f0:	f001 ff20 	bl	8004234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80023f4:	2308      	movs	r3, #8
 80023f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80023f8:	2306      	movs	r3, #6
 80023fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023fc:	463b      	mov	r3, r7
 80023fe:	4619      	mov	r1, r3
 8002400:	4805      	ldr	r0, [pc, #20]	; (8002418 <MX_ADC3_Init+0x124>)
 8002402:	f005 fb4f 	bl	8007aa4 <HAL_ADC_ConfigChannel>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 800240c:	f001 ff12 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  /* USER CODE END ADC3_Init 2 */

}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	200132d0 	.word	0x200132d0
 800241c:	40012200 	.word	0x40012200
 8002420:	0f000001 	.word	0x0f000001

08002424 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <MX_I2C1_Init+0x74>)
 800242a:	4a1c      	ldr	r2, [pc, #112]	; (800249c <MX_I2C1_Init+0x78>)
 800242c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007074AF;
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <MX_I2C1_Init+0x74>)
 8002430:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <MX_I2C1_Init+0x7c>)
 8002432:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002434:	4b18      	ldr	r3, [pc, #96]	; (8002498 <MX_I2C1_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <MX_I2C1_Init+0x74>)
 800243c:	2201      	movs	r2, #1
 800243e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002440:	4b15      	ldr	r3, [pc, #84]	; (8002498 <MX_I2C1_Init+0x74>)
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <MX_I2C1_Init+0x74>)
 8002448:	2200      	movs	r2, #0
 800244a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <MX_I2C1_Init+0x74>)
 800244e:	2200      	movs	r2, #0
 8002450:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <MX_I2C1_Init+0x74>)
 8002454:	2200      	movs	r2, #0
 8002456:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002458:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <MX_I2C1_Init+0x74>)
 800245a:	2200      	movs	r2, #0
 800245c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800245e:	480e      	ldr	r0, [pc, #56]	; (8002498 <MX_I2C1_Init+0x74>)
 8002460:	f006 fcf4 	bl	8008e4c <HAL_I2C_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800246a:	f001 fee3 	bl	8004234 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800246e:	2100      	movs	r1, #0
 8002470:	4809      	ldr	r0, [pc, #36]	; (8002498 <MX_I2C1_Init+0x74>)
 8002472:	f007 f945 	bl	8009700 <HAL_I2CEx_ConfigAnalogFilter>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800247c:	f001 feda 	bl	8004234 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002480:	2100      	movs	r1, #0
 8002482:	4805      	ldr	r0, [pc, #20]	; (8002498 <MX_I2C1_Init+0x74>)
 8002484:	f007 f987 	bl	8009796 <HAL_I2CEx_ConfigDigitalFilter>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800248e:	f001 fed1 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200105b4 	.word	0x200105b4
 800249c:	40005400 	.word	0x40005400
 80024a0:	007074af 	.word	0x007074af

080024a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <MX_I2C2_Init+0x74>)
 80024aa:	4a1c      	ldr	r2, [pc, #112]	; (800251c <MX_I2C2_Init+0x78>)
 80024ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x007074AF;
 80024ae:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <MX_I2C2_Init+0x74>)
 80024b0:	4a1b      	ldr	r2, [pc, #108]	; (8002520 <MX_I2C2_Init+0x7c>)
 80024b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80024b4:	4b18      	ldr	r3, [pc, #96]	; (8002518 <MX_I2C2_Init+0x74>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ba:	4b17      	ldr	r3, [pc, #92]	; (8002518 <MX_I2C2_Init+0x74>)
 80024bc:	2201      	movs	r2, #1
 80024be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024c0:	4b15      	ldr	r3, [pc, #84]	; (8002518 <MX_I2C2_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80024c6:	4b14      	ldr	r3, [pc, #80]	; (8002518 <MX_I2C2_Init+0x74>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <MX_I2C2_Init+0x74>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <MX_I2C2_Init+0x74>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <MX_I2C2_Init+0x74>)
 80024da:	2200      	movs	r2, #0
 80024dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024de:	480e      	ldr	r0, [pc, #56]	; (8002518 <MX_I2C2_Init+0x74>)
 80024e0:	f006 fcb4 	bl	8008e4c <HAL_I2C_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80024ea:	f001 fea3 	bl	8004234 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024ee:	2100      	movs	r1, #0
 80024f0:	4809      	ldr	r0, [pc, #36]	; (8002518 <MX_I2C2_Init+0x74>)
 80024f2:	f007 f905 	bl	8009700 <HAL_I2CEx_ConfigAnalogFilter>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80024fc:	f001 fe9a 	bl	8004234 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002500:	2100      	movs	r1, #0
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <MX_I2C2_Init+0x74>)
 8002504:	f007 f947 	bl	8009796 <HAL_I2CEx_ConfigDigitalFilter>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800250e:	f001 fe91 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20010a04 	.word	0x20010a04
 800251c:	40005800 	.word	0x40005800
 8002520:	007074af 	.word	0x007074af

08002524 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002528:	4b1c      	ldr	r3, [pc, #112]	; (800259c <MX_I2C3_Init+0x78>)
 800252a:	4a1d      	ldr	r2, [pc, #116]	; (80025a0 <MX_I2C3_Init+0x7c>)
 800252c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x100029FE;
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <MX_I2C3_Init+0x78>)
 8002530:	4a1c      	ldr	r2, [pc, #112]	; (80025a4 <MX_I2C3_Init+0x80>)
 8002532:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 152;
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <MX_I2C3_Init+0x78>)
 8002536:	2298      	movs	r2, #152	; 0x98
 8002538:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <MX_I2C3_Init+0x78>)
 800253c:	2201      	movs	r2, #1
 800253e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <MX_I2C3_Init+0x78>)
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <MX_I2C3_Init+0x78>)
 8002548:	2200      	movs	r2, #0
 800254a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <MX_I2C3_Init+0x78>)
 800254e:	2200      	movs	r2, #0
 8002550:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <MX_I2C3_Init+0x78>)
 8002554:	2200      	movs	r2, #0
 8002556:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002558:	4b10      	ldr	r3, [pc, #64]	; (800259c <MX_I2C3_Init+0x78>)
 800255a:	2200      	movs	r2, #0
 800255c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800255e:	480f      	ldr	r0, [pc, #60]	; (800259c <MX_I2C3_Init+0x78>)
 8002560:	f006 fc74 	bl	8008e4c <HAL_I2C_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800256a:	f001 fe63 	bl	8004234 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800256e:	2100      	movs	r1, #0
 8002570:	480a      	ldr	r0, [pc, #40]	; (800259c <MX_I2C3_Init+0x78>)
 8002572:	f007 f8c5 	bl	8009700 <HAL_I2CEx_ConfigAnalogFilter>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800257c:	f001 fe5a 	bl	8004234 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002580:	2100      	movs	r1, #0
 8002582:	4806      	ldr	r0, [pc, #24]	; (800259c <MX_I2C3_Init+0x78>)
 8002584:	f007 f907 	bl	8009796 <HAL_I2CEx_ConfigDigitalFilter>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800258e:	f001 fe51 	bl	8004234 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8002592:	2004      	movs	r0, #4
 8002594:	f007 f94c 	bl	8009830 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	200103a4 	.word	0x200103a4
 80025a0:	40005c00 	.word	0x40005c00
 80025a4:	100029fe 	.word	0x100029fe

080025a8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <MX_I2C4_Init+0x74>)
 80025ae:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <MX_I2C4_Init+0x78>)
 80025b0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x007074AF;
 80025b2:	4b1a      	ldr	r3, [pc, #104]	; (800261c <MX_I2C4_Init+0x74>)
 80025b4:	4a1b      	ldr	r2, [pc, #108]	; (8002624 <MX_I2C4_Init+0x7c>)
 80025b6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80025b8:	4b18      	ldr	r3, [pc, #96]	; (800261c <MX_I2C4_Init+0x74>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025be:	4b17      	ldr	r3, [pc, #92]	; (800261c <MX_I2C4_Init+0x74>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025c4:	4b15      	ldr	r3, [pc, #84]	; (800261c <MX_I2C4_Init+0x74>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80025ca:	4b14      	ldr	r3, [pc, #80]	; (800261c <MX_I2C4_Init+0x74>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <MX_I2C4_Init+0x74>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <MX_I2C4_Init+0x74>)
 80025d8:	2200      	movs	r2, #0
 80025da:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <MX_I2C4_Init+0x74>)
 80025de:	2200      	movs	r2, #0
 80025e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80025e2:	480e      	ldr	r0, [pc, #56]	; (800261c <MX_I2C4_Init+0x74>)
 80025e4:	f006 fc32 	bl	8008e4c <HAL_I2C_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80025ee:	f001 fe21 	bl	8004234 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025f2:	2100      	movs	r1, #0
 80025f4:	4809      	ldr	r0, [pc, #36]	; (800261c <MX_I2C4_Init+0x74>)
 80025f6:	f007 f883 	bl	8009700 <HAL_I2CEx_ConfigAnalogFilter>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002600:	f001 fe18 	bl	8004234 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002604:	2100      	movs	r1, #0
 8002606:	4805      	ldr	r0, [pc, #20]	; (800261c <MX_I2C4_Init+0x74>)
 8002608:	f007 f8c5 	bl	8009796 <HAL_I2CEx_ConfigDigitalFilter>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002612:	f001 fe0f 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200103f0 	.word	0x200103f0
 8002620:	40006000 	.word	0x40006000
 8002624:	007074af 	.word	0x007074af

08002628 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <MX_RTC_Init+0x44>)
 800262e:	4a10      	ldr	r2, [pc, #64]	; (8002670 <MX_RTC_Init+0x48>)
 8002630:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <MX_RTC_Init+0x44>)
 8002634:	2200      	movs	r2, #0
 8002636:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <MX_RTC_Init+0x44>)
 800263a:	227f      	movs	r2, #127	; 0x7f
 800263c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <MX_RTC_Init+0x44>)
 8002640:	22ff      	movs	r2, #255	; 0xff
 8002642:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <MX_RTC_Init+0x44>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <MX_RTC_Init+0x44>)
 800264c:	2200      	movs	r2, #0
 800264e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <MX_RTC_Init+0x44>)
 8002652:	2200      	movs	r2, #0
 8002654:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002656:	4805      	ldr	r0, [pc, #20]	; (800266c <MX_RTC_Init+0x44>)
 8002658:	f008 fb3a 	bl	800acd0 <HAL_RTC_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002662:	f001 fde7 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20013388 	.word	0x20013388
 8002670:	40002800 	.word	0x40002800

08002674 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <MX_SPI4_Init+0x74>)
 800267a:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <MX_SPI4_Init+0x78>)
 800267c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800267e:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <MX_SPI4_Init+0x74>)
 8002680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002684:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <MX_SPI4_Init+0x74>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800268c:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <MX_SPI4_Init+0x74>)
 800268e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002692:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <MX_SPI4_Init+0x74>)
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <MX_SPI4_Init+0x74>)
 800269c:	2200      	movs	r2, #0
 800269e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026a6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026aa:	2210      	movs	r2, #16
 80026ac:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026bc:	2200      	movs	r2, #0
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026c2:	2207      	movs	r2, #7
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026d4:	f008 fba4 	bl	800ae20 <HAL_SPI_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80026de:	f001 fda9 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20010340 	.word	0x20010340
 80026ec:	40013400 	.word	0x40013400

080026f0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <MX_SPI5_Init+0x74>)
 80026f6:	4a1c      	ldr	r2, [pc, #112]	; (8002768 <MX_SPI5_Init+0x78>)
 80026f8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <MX_SPI5_Init+0x74>)
 80026fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002700:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <MX_SPI5_Init+0x74>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <MX_SPI5_Init+0x74>)
 800270a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800270e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <MX_SPI5_Init+0x74>)
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <MX_SPI5_Init+0x74>)
 8002718:	2200      	movs	r2, #0
 800271a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <MX_SPI5_Init+0x74>)
 800271e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002722:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <MX_SPI5_Init+0x74>)
 8002726:	2218      	movs	r2, #24
 8002728:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <MX_SPI5_Init+0x74>)
 800272c:	2200      	movs	r2, #0
 800272e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <MX_SPI5_Init+0x74>)
 8002732:	2200      	movs	r2, #0
 8002734:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <MX_SPI5_Init+0x74>)
 8002738:	2200      	movs	r2, #0
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <MX_SPI5_Init+0x74>)
 800273e:	2207      	movs	r2, #7
 8002740:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <MX_SPI5_Init+0x74>)
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <MX_SPI5_Init+0x74>)
 800274a:	2200      	movs	r2, #0
 800274c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800274e:	4805      	ldr	r0, [pc, #20]	; (8002764 <MX_SPI5_Init+0x74>)
 8002750:	f008 fb66 	bl	800ae20 <HAL_SPI_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800275a:	f001 fd6b 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200104bc 	.word	0x200104bc
 8002768:	40015000 	.word	0x40015000

0800276c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08e      	sub	sp, #56	; 0x38
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	609a      	str	r2, [r3, #8]
 800277e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002780:	f107 031c 	add.w	r3, r7, #28
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800278c:	463b      	mov	r3, r7
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	60da      	str	r2, [r3, #12]
 8002798:	611a      	str	r2, [r3, #16]
 800279a:	615a      	str	r2, [r3, #20]
 800279c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027a0:	4a2d      	ldr	r2, [pc, #180]	; (8002858 <MX_TIM4_Init+0xec>)
 80027a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80027a4:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027aa:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80027b0:	4b28      	ldr	r3, [pc, #160]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b8:	4b26      	ldr	r3, [pc, #152]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027be:	4b25      	ldr	r3, [pc, #148]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027c4:	4823      	ldr	r0, [pc, #140]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027c6:	f008 ff5f 	bl	800b688 <HAL_TIM_Base_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80027d0:	f001 fd30 	bl	8004234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80027da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027de:	4619      	mov	r1, r3
 80027e0:	481c      	ldr	r0, [pc, #112]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027e2:	f009 fa13 	bl	800bc0c <HAL_TIM_ConfigClockSource>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80027ec:	f001 fd22 	bl	8004234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80027f0:	4818      	ldr	r0, [pc, #96]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027f2:	f008 ff9f 	bl	800b734 <HAL_TIM_PWM_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80027fc:	f001 fd1a 	bl	8004234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002808:	f107 031c 	add.w	r3, r7, #28
 800280c:	4619      	mov	r1, r3
 800280e:	4811      	ldr	r0, [pc, #68]	; (8002854 <MX_TIM4_Init+0xe8>)
 8002810:	f009 fe76 	bl	800c500 <HAL_TIMEx_MasterConfigSynchronization>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800281a:	f001 fd0b 	bl	8004234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800281e:	2360      	movs	r3, #96	; 0x60
 8002820:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002826:	2300      	movs	r3, #0
 8002828:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800282e:	463b      	mov	r3, r7
 8002830:	2200      	movs	r2, #0
 8002832:	4619      	mov	r1, r3
 8002834:	4807      	ldr	r0, [pc, #28]	; (8002854 <MX_TIM4_Init+0xe8>)
 8002836:	f009 f8d1 	bl	800b9dc <HAL_TIM_PWM_ConfigChannel>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002840:	f001 fcf8 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002844:	4803      	ldr	r0, [pc, #12]	; (8002854 <MX_TIM4_Init+0xe8>)
 8002846:	f004 fa23 	bl	8006c90 <HAL_TIM_MspPostInit>

}
 800284a:	bf00      	nop
 800284c:	3738      	adds	r7, #56	; 0x38
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20010520 	.word	0x20010520
 8002858:	40000800 	.word	0x40000800

0800285c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08e      	sub	sp, #56	; 0x38
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002870:	f107 031c 	add.w	r3, r7, #28
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800287c:	463b      	mov	r3, r7
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	60da      	str	r2, [r3, #12]
 8002888:	611a      	str	r2, [r3, #16]
 800288a:	615a      	str	r2, [r3, #20]
 800288c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800288e:	4b32      	ldr	r3, [pc, #200]	; (8002958 <MX_TIM5_Init+0xfc>)
 8002890:	4a32      	ldr	r2, [pc, #200]	; (800295c <MX_TIM5_Init+0x100>)
 8002892:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002894:	4b30      	ldr	r3, [pc, #192]	; (8002958 <MX_TIM5_Init+0xfc>)
 8002896:	2200      	movs	r2, #0
 8002898:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800289a:	4b2f      	ldr	r3, [pc, #188]	; (8002958 <MX_TIM5_Init+0xfc>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80028a0:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028a2:	f04f 32ff 	mov.w	r2, #4294967295
 80028a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a8:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ae:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80028b4:	4828      	ldr	r0, [pc, #160]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028b6:	f008 fee7 	bl	800b688 <HAL_TIM_Base_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80028c0:	f001 fcb8 	bl	8004234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80028ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028ce:	4619      	mov	r1, r3
 80028d0:	4821      	ldr	r0, [pc, #132]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028d2:	f009 f99b 	bl	800bc0c <HAL_TIM_ConfigClockSource>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80028dc:	f001 fcaa 	bl	8004234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80028e0:	481d      	ldr	r0, [pc, #116]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028e2:	f008 ff27 	bl	800b734 <HAL_TIM_PWM_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80028ec:	f001 fca2 	bl	8004234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	4619      	mov	r1, r3
 80028fe:	4816      	ldr	r0, [pc, #88]	; (8002958 <MX_TIM5_Init+0xfc>)
 8002900:	f009 fdfe 	bl	800c500 <HAL_TIMEx_MasterConfigSynchronization>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800290a:	f001 fc93 	bl	8004234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800290e:	2360      	movs	r3, #96	; 0x60
 8002910:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800291e:	463b      	mov	r3, r7
 8002920:	2200      	movs	r2, #0
 8002922:	4619      	mov	r1, r3
 8002924:	480c      	ldr	r0, [pc, #48]	; (8002958 <MX_TIM5_Init+0xfc>)
 8002926:	f009 f859 	bl	800b9dc <HAL_TIM_PWM_ConfigChannel>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002930:	f001 fc80 	bl	8004234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002934:	463b      	mov	r3, r7
 8002936:	2204      	movs	r2, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4807      	ldr	r0, [pc, #28]	; (8002958 <MX_TIM5_Init+0xfc>)
 800293c:	f009 f84e 	bl	800b9dc <HAL_TIM_PWM_ConfigChannel>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8002946:	f001 fc75 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800294a:	4803      	ldr	r0, [pc, #12]	; (8002958 <MX_TIM5_Init+0xfc>)
 800294c:	f004 f9a0 	bl	8006c90 <HAL_TIM_MspPostInit>

}
 8002950:	bf00      	nop
 8002952:	3738      	adds	r7, #56	; 0x38
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20010ab4 	.word	0x20010ab4
 800295c:	40000c00 	.word	0x40000c00

08002960 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <MX_UART4_Init+0x58>)
 8002966:	4a15      	ldr	r2, [pc, #84]	; (80029bc <MX_UART4_Init+0x5c>)
 8002968:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800296a:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <MX_UART4_Init+0x58>)
 800296c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002970:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <MX_UART4_Init+0x58>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <MX_UART4_Init+0x58>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <MX_UART4_Init+0x58>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <MX_UART4_Init+0x58>)
 8002986:	220c      	movs	r2, #12
 8002988:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <MX_UART4_Init+0x58>)
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <MX_UART4_Init+0x58>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <MX_UART4_Init+0x58>)
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <MX_UART4_Init+0x58>)
 800299e:	2200      	movs	r2, #0
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_UART4_Init+0x58>)
 80029a4:	f009 fe58 	bl	800c658 <HAL_UART_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80029ae:	f001 fc41 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20015abc 	.word	0x20015abc
 80029bc:	40004c00 	.word	0x40004c00

080029c0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80029c4:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <MX_UART5_Init+0x58>)
 80029c6:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <MX_UART5_Init+0x5c>)
 80029c8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80029ca:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <MX_UART5_Init+0x58>)
 80029cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029d0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80029d2:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <MX_UART5_Init+0x58>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <MX_UART5_Init+0x58>)
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80029de:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <MX_UART5_Init+0x58>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <MX_UART5_Init+0x58>)
 80029e6:	220c      	movs	r2, #12
 80029e8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <MX_UART5_Init+0x58>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <MX_UART5_Init+0x58>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <MX_UART5_Init+0x58>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <MX_UART5_Init+0x58>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002a02:	4805      	ldr	r0, [pc, #20]	; (8002a18 <MX_UART5_Init+0x58>)
 8002a04:	f009 fe28 	bl	800c658 <HAL_UART_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002a0e:	f001 fc11 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20013204 	.word	0x20013204
 8002a1c:	40005000 	.word	0x40005000

08002a20 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002a24:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a26:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <MX_UART7_Init+0x5c>)
 8002a28:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002a2a:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a30:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002a38:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a46:	220c      	movs	r2, #12
 8002a48:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a4c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002a50:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002a64:	4804      	ldr	r0, [pc, #16]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a66:	f009 fdf7 	bl	800c658 <HAL_UART_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_UART7_Init+0x54>
  {
    Error_Handler();
 8002a70:	f001 fbe0 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	2001043c 	.word	0x2001043c
 8002a7c:	40007800 	.word	0x40007800

08002a80 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002a8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a8e:	2206      	movs	r2, #6
 8002a90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a94:	2202      	movs	r2, #2
 8002a96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002ac2:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ac4:	f006 fed4 	bl	8009870 <HAL_PCD_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002ace:	f001 fbb1 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20010600 	.word	0x20010600

08002adc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ae2:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <MX_DMA_Init+0x80>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <MX_DMA_Init+0x80>)
 8002ae8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <MX_DMA_Init+0x80>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002afa:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <MX_DMA_Init+0x80>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <MX_DMA_Init+0x80>)
 8002b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <MX_DMA_Init+0x80>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2105      	movs	r1, #5
 8002b16:	200b      	movs	r0, #11
 8002b18:	f005 fb4c 	bl	80081b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002b1c:	200b      	movs	r0, #11
 8002b1e:	f005 fb65 	bl	80081ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2105      	movs	r1, #5
 8002b26:	2038      	movs	r0, #56	; 0x38
 8002b28:	f005 fb44 	bl	80081b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b2c:	2038      	movs	r0, #56	; 0x38
 8002b2e:	f005 fb5d 	bl	80081ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2105      	movs	r1, #5
 8002b36:	2039      	movs	r0, #57	; 0x39
 8002b38:	f005 fb3c 	bl	80081b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002b3c:	2039      	movs	r0, #57	; 0x39
 8002b3e:	f005 fb55 	bl	80081ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2105      	movs	r1, #5
 8002b46:	203a      	movs	r0, #58	; 0x3a
 8002b48:	f005 fb34 	bl	80081b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002b4c:	203a      	movs	r0, #58	; 0x3a
 8002b4e:	f005 fb4d 	bl	80081ec <HAL_NVIC_EnableIRQ>

}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800

08002b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b090      	sub	sp, #64	; 0x40
 8002b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	609a      	str	r2, [r3, #8]
 8002b72:	60da      	str	r2, [r3, #12]
 8002b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b76:	4bb0      	ldr	r3, [pc, #704]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4aaf      	ldr	r2, [pc, #700]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b7c:	f043 0310 	orr.w	r3, r3, #16
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4bad      	ldr	r3, [pc, #692]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b8e:	4baa      	ldr	r3, [pc, #680]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4aa9      	ldr	r2, [pc, #676]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4ba7      	ldr	r3, [pc, #668]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba6:	4ba4      	ldr	r3, [pc, #656]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4aa3      	ldr	r2, [pc, #652]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4ba1      	ldr	r3, [pc, #644]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	623b      	str	r3, [r7, #32]
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bbe:	4b9e      	ldr	r3, [pc, #632]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	4a9d      	ldr	r2, [pc, #628]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bca:	4b9b      	ldr	r3, [pc, #620]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd6:	4b98      	ldr	r3, [pc, #608]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a97      	ldr	r2, [pc, #604]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b95      	ldr	r3, [pc, #596]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	61bb      	str	r3, [r7, #24]
 8002bec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002bee:	4b92      	ldr	r3, [pc, #584]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a91      	ldr	r2, [pc, #580]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b8f      	ldr	r3, [pc, #572]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002c06:	4b8c      	ldr	r3, [pc, #560]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	4a8b      	ldr	r2, [pc, #556]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c10:	6313      	str	r3, [r2, #48]	; 0x30
 8002c12:	4b89      	ldr	r3, [pc, #548]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c1e:	4b86      	ldr	r3, [pc, #536]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a85      	ldr	r2, [pc, #532]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c24:	f043 0320 	orr.w	r3, r3, #32
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b83      	ldr	r3, [pc, #524]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c36:	4b80      	ldr	r3, [pc, #512]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a7f      	ldr	r2, [pc, #508]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c3c:	f043 0308 	orr.w	r3, r3, #8
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b7d      	ldr	r3, [pc, #500]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c4e:	4b7a      	ldr	r3, [pc, #488]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a79      	ldr	r2, [pc, #484]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b77      	ldr	r3, [pc, #476]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002c66:	4b74      	ldr	r3, [pc, #464]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a73      	ldr	r2, [pc, #460]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b71      	ldr	r3, [pc, #452]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2110      	movs	r1, #16
 8002c82:	486e      	ldr	r0, [pc, #440]	; (8002e3c <MX_GPIO_Init+0x2dc>)
 8002c84:	f006 f88a 	bl	8008d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f244 012f 	movw	r1, #16431	; 0x402f
 8002c8e:	486c      	ldr	r0, [pc, #432]	; (8002e40 <MX_GPIO_Init+0x2e0>)
 8002c90:	f006 f884 	bl	8008d9c <HAL_GPIO_WritePin>
                          |OUT0_1V8_Pin|OUT2_1V8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8002c94:	2200      	movs	r2, #0
 8002c96:	f241 1150 	movw	r1, #4432	; 0x1150
 8002c9a:	486a      	ldr	r0, [pc, #424]	; (8002e44 <MX_GPIO_Init+0x2e4>)
 8002c9c:	f006 f87e 	bl	8008d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MCU_CTRL2_Pin|MCU_CTRL1_Pin, GPIO_PIN_RESET);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2103      	movs	r1, #3
 8002ca4:	4868      	ldr	r0, [pc, #416]	; (8002e48 <MX_GPIO_Init+0x2e8>)
 8002ca6:	f006 f879 	bl	8008d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002caa:	2200      	movs	r2, #0
 8002cac:	f243 013c 	movw	r1, #12348	; 0x303c
 8002cb0:	4866      	ldr	r0, [pc, #408]	; (8002e4c <MX_GPIO_Init+0x2ec>)
 8002cb2:	f006 f873 	bl	8008d9c <HAL_GPIO_WritePin>
                          |BTN4_Pin|BTN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin, GPIO_PIN_RESET);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f241 0104 	movw	r1, #4100	; 0x1004
 8002cbc:	4864      	ldr	r0, [pc, #400]	; (8002e50 <MX_GPIO_Init+0x2f0>)
 8002cbe:	f006 f86d 	bl	8008d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin, GPIO_PIN_RESET);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002cc8:	4862      	ldr	r0, [pc, #392]	; (8002e54 <MX_GPIO_Init+0x2f4>)
 8002cca:	f006 f867 	bl	8008d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	211b      	movs	r1, #27
 8002cd2:	4861      	ldr	r0, [pc, #388]	; (8002e58 <MX_GPIO_Init+0x2f8>)
 8002cd4:	f006 f862 	bl	8008d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_SS_Pin;
 8002cd8:	2310      	movs	r3, #16
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_SS_GPIO_Port, &GPIO_InitStruct);
 8002ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cec:	4619      	mov	r1, r3
 8002cee:	4853      	ldr	r0, [pc, #332]	; (8002e3c <MX_GPIO_Init+0x2dc>)
 8002cf0:	f005 fe92 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT11_Pin */
  GPIO_InitStruct.Pin = UI_INPUT11_Pin;
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT11_GPIO_Port, &GPIO_InitStruct);
 8002d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d04:	4619      	mov	r1, r3
 8002d06:	484d      	ldr	r0, [pc, #308]	; (8002e3c <MX_GPIO_Init+0x2dc>)
 8002d08:	f005 fe86 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_1V8_Pin OUT1_1V8_Pin OUT1_OD_Pin OUT0_OD_Pin
                           OUT0_1V8_Pin OUT2_1V8_Pin */
  GPIO_InitStruct.Pin = OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002d0c:	f244 032f 	movw	r3, #16431	; 0x402f
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |OUT0_1V8_Pin|OUT2_1V8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d12:	2301      	movs	r3, #1
 8002d14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d22:	4619      	mov	r1, r3
 8002d24:	4846      	ldr	r0, [pc, #280]	; (8002e40 <MX_GPIO_Init+0x2e0>)
 8002d26:	f005 fe77 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT0_Pin */
  GPIO_InitStruct.Pin = UI_INPUT0_Pin;
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT0_GPIO_Port, &GPIO_InitStruct);
 8002d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4845      	ldr	r0, [pc, #276]	; (8002e54 <MX_GPIO_Init+0x2f4>)
 8002d3e:	f005 fe6b 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_CONFIG_Pin OUT1_CONFIG_Pin OUT2_CONFIG_Pin MCU_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin;
 8002d42:	f241 1350 	movw	r3, #4432	; 0x1150
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d50:	2300      	movs	r3, #0
 8002d52:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d58:	4619      	mov	r1, r3
 8002d5a:	483a      	ldr	r0, [pc, #232]	; (8002e44 <MX_GPIO_Init+0x2e4>)
 8002d5c:	f005 fe5c 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin BACK_BTN_Pin */
  GPIO_InitStruct.Pin = DWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin|BACK_BTN_Pin;
 8002d60:	23f0      	movs	r3, #240	; 0xf0
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d64:	4b3d      	ldr	r3, [pc, #244]	; (8002e5c <MX_GPIO_Init+0x2fc>)
 8002d66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d70:	4619      	mov	r1, r3
 8002d72:	4835      	ldr	r0, [pc, #212]	; (8002e48 <MX_GPIO_Init+0x2e8>)
 8002d74:	f005 fe50 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT1_Pin */
  GPIO_InitStruct.Pin = UI_INPUT1_Pin;
 8002d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT1_GPIO_Port, &GPIO_InitStruct);
 8002d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4834      	ldr	r0, [pc, #208]	; (8002e60 <MX_GPIO_Init+0x300>)
 8002d8e:	f005 fe43 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_INPUT2_Pin UI_INPUT10_Pin UI_INPUT5_Pin UI_INPUT9_Pin
                           UI_INPUT4_Pin UI_INPUT3_Pin UI_INPUT7_Pin UI_INPUT8_Pin
                           UI_INPUT6_Pin */
  GPIO_InitStruct.Pin = UI_INPUT2_Pin|UI_INPUT10_Pin|UI_INPUT5_Pin|UI_INPUT9_Pin
 8002d92:	f64f 7310 	movw	r3, #65296	; 0xff10
 8002d96:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |UI_INPUT4_Pin|UI_INPUT3_Pin|UI_INPUT7_Pin|UI_INPUT8_Pin
                          |UI_INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002da4:	4619      	mov	r1, r3
 8002da6:	482f      	ldr	r0, [pc, #188]	; (8002e64 <MX_GPIO_Init+0x304>)
 8002da8:	f005 fe36 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL2_Pin MCU_CTRL1_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL2_Pin|MCU_CTRL1_Pin;
 8002dac:	2303      	movs	r3, #3
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db0:	2301      	movs	r3, #1
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db8:	2300      	movs	r3, #0
 8002dba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002dbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4821      	ldr	r0, [pc, #132]	; (8002e48 <MX_GPIO_Init+0x2e8>)
 8002dc4:	f005 fe28 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002dc8:	f243 033c 	movw	r3, #12348	; 0x303c
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BTN4_Pin|BTN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dde:	4619      	mov	r1, r3
 8002de0:	481a      	ldr	r0, [pc, #104]	; (8002e4c <MX_GPIO_Init+0x2ec>)
 8002de2:	f005 fe19 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_CONFIG_Pin FRONT_LED_CTRL_Pin */
  GPIO_InitStruct.Pin = OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin;
 8002de6:	f241 0304 	movw	r3, #4100	; 0x1004
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dec:	2301      	movs	r3, #1
 8002dee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df4:	2300      	movs	r3, #0
 8002df6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4814      	ldr	r0, [pc, #80]	; (8002e50 <MX_GPIO_Init+0x2f0>)
 8002e00:	f005 fe0a 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ZION_PWR_EN_Pin EDL_EN_Pin SPARE_SW_EN_Pin */
  GPIO_InitStruct.Pin = ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin;
 8002e04:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e12:	2300      	movs	r3, #0
 8002e14:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	480d      	ldr	r0, [pc, #52]	; (8002e54 <MX_GPIO_Init+0x2f4>)
 8002e1e:	f005 fdfb 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL0_Pin UART_MUX_CTRL_Pin LCD_EXTMODE_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin;
 8002e22:	231b      	movs	r3, #27
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e26:	2301      	movs	r3, #1
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e36:	e017      	b.n	8002e68 <MX_GPIO_Init+0x308>
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40021800 	.word	0x40021800
 8002e44:	40022000 	.word	0x40022000
 8002e48:	40022800 	.word	0x40022800
 8002e4c:	40021400 	.word	0x40021400
 8002e50:	40021c00 	.word	0x40021c00
 8002e54:	40020400 	.word	0x40020400
 8002e58:	40022400 	.word	0x40022400
 8002e5c:	10210000 	.word	0x10210000
 8002e60:	40020800 	.word	0x40020800
 8002e64:	40020c00 	.word	0x40020c00
 8002e68:	4619      	mov	r1, r3
 8002e6a:	480b      	ldr	r0, [pc, #44]	; (8002e98 <MX_GPIO_Init+0x338>)
 8002e6c:	f005 fdd4 	bl	8008a18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002e70:	2200      	movs	r2, #0
 8002e72:	2105      	movs	r1, #5
 8002e74:	200a      	movs	r0, #10
 8002e76:	f005 f99d 	bl	80081b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002e7a:	200a      	movs	r0, #10
 8002e7c:	f005 f9b6 	bl	80081ec <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002e80:	2200      	movs	r2, #0
 8002e82:	2105      	movs	r1, #5
 8002e84:	2017      	movs	r0, #23
 8002e86:	f005 f995 	bl	80081b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e8a:	2017      	movs	r0, #23
 8002e8c:	f005 f9ae 	bl	80081ec <HAL_NVIC_EnableIRQ>

}
 8002e90:	bf00      	nop
 8002e92:	3740      	adds	r7, #64	; 0x40
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40022400 	.word	0x40022400

08002e9c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 8002ea4:	1d39      	adds	r1, r7, #4
 8002ea6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eaa:	2201      	movs	r2, #1
 8002eac:	4803      	ldr	r0, [pc, #12]	; (8002ebc <__io_putchar+0x20>)
 8002eae:	f009 fc21 	bl	800c6f4 <HAL_UART_Transmit>

	return ch;
 8002eb2:	687b      	ldr	r3, [r7, #4]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	2001043c 	.word	0x2001043c

08002ec0 <outputGPIOBufInitialization>:

void outputGPIOBufInitialization(){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
	memset(gpioOutputState,0,sizeof(gpioOutputState));
 8002ec4:	220e      	movs	r2, #14
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <outputGPIOBufInitialization+0x14>)
 8002eca:	f00d fa34 	bl	8010336 <memset>
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20013378 	.word	0x20013378

08002ed8 <uartTransmitInt>:
	uart_buf_len = sprintf(uart_buf, message);
	if (uart == 7){
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}
}
void uartTransmitInt(uint16_t *number, int uart){
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b098      	sub	sp, #96	; 0x60
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
	char uart_buf[80];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, "0x%x\r\n", number);
 8002ee2:	f107 030c 	add.w	r3, r7, #12
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4909      	ldr	r1, [pc, #36]	; (8002f10 <uartTransmitInt+0x38>)
 8002eea:	4618      	mov	r0, r3
 8002eec:	f00e f8a6 	bl	801103c <siprintf>
 8002ef0:	65f8      	str	r0, [r7, #92]	; 0x5c
	if (uart == 7){
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b07      	cmp	r3, #7
 8002ef6:	d107      	bne.n	8002f08 <uartTransmitInt+0x30>
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
 8002ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	f107 010c 	add.w	r1, r7, #12
 8002f00:	2364      	movs	r3, #100	; 0x64
 8002f02:	4804      	ldr	r0, [pc, #16]	; (8002f14 <uartTransmitInt+0x3c>)
 8002f04:	f009 fbf6 	bl	800c6f4 <HAL_UART_Transmit>
	}

}
 8002f08:	bf00      	nop
 8002f0a:	3760      	adds	r7, #96	; 0x60
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	080143cc 	.word	0x080143cc
 8002f14:	2001043c 	.word	0x2001043c

08002f18 <readI2CRegister>:
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}

}

uint8_t * readI2CRegister(uint8_t address, uint8_t reg, int bytes, int i2CBank){
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60ba      	str	r2, [r7, #8]
 8002f20:	607b      	str	r3, [r7, #4]
 8002f22:	4603      	mov	r3, r0
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	460b      	mov	r3, r1
 8002f28:	73bb      	strb	r3, [r7, #14]
	static uint8_t buf[20];
	HAL_StatusTypeDef ret;
	buf[0]=reg;
 8002f2a:	4a4f      	ldr	r2, [pc, #316]	; (8003068 <readI2CRegister+0x150>)
 8002f2c:	7bbb      	ldrb	r3, [r7, #14]
 8002f2e:	7013      	strb	r3, [r2, #0]
  	if(i2CBank == 1){
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10c      	bne.n	8002f50 <readI2CRegister+0x38>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	b299      	uxth	r1, r3
 8002f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2301      	movs	r3, #1
 8002f42:	4a49      	ldr	r2, [pc, #292]	; (8003068 <readI2CRegister+0x150>)
 8002f44:	4849      	ldr	r0, [pc, #292]	; (800306c <readI2CRegister+0x154>)
 8002f46:	f006 f811 	bl	8008f6c <HAL_I2C_Master_Transmit>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	75fb      	strb	r3, [r7, #23]
 8002f4e:	e02e      	b.n	8002fae <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 2){
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d10c      	bne.n	8002f70 <readI2CRegister+0x58>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	b299      	uxth	r1, r3
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2301      	movs	r3, #1
 8002f62:	4a41      	ldr	r2, [pc, #260]	; (8003068 <readI2CRegister+0x150>)
 8002f64:	4842      	ldr	r0, [pc, #264]	; (8003070 <readI2CRegister+0x158>)
 8002f66:	f006 f801 	bl	8008f6c <HAL_I2C_Master_Transmit>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	75fb      	strb	r3, [r7, #23]
 8002f6e:	e01e      	b.n	8002fae <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 3){
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d10c      	bne.n	8002f90 <readI2CRegister+0x78>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, 1, HAL_MAX_DELAY);
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	b299      	uxth	r1, r3
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2301      	movs	r3, #1
 8002f82:	4a39      	ldr	r2, [pc, #228]	; (8003068 <readI2CRegister+0x150>)
 8002f84:	483b      	ldr	r0, [pc, #236]	; (8003074 <readI2CRegister+0x15c>)
 8002f86:	f005 fff1 	bl	8008f6c <HAL_I2C_Master_Transmit>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	75fb      	strb	r3, [r7, #23]
 8002f8e:	e00e      	b.n	8002fae <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 4){
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d10b      	bne.n	8002fae <readI2CRegister+0x96>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, 1, HAL_MAX_DELAY);
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	b299      	uxth	r1, r3
 8002f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	4a31      	ldr	r2, [pc, #196]	; (8003068 <readI2CRegister+0x150>)
 8002fa4:	4834      	ldr	r0, [pc, #208]	; (8003078 <readI2CRegister+0x160>)
 8002fa6:	f005 ffe1 	bl	8008f6c <HAL_I2C_Master_Transmit>
 8002faa:	4603      	mov	r3, r0
 8002fac:	75fb      	strb	r3, [r7, #23]
  	}
	  if ( ret != HAL_OK ) {
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <readI2CRegister+0xa0>
	          return 0xfe;
 8002fb4:	23fe      	movs	r3, #254	; 0xfe
 8002fb6:	e052      	b.n	800305e <readI2CRegister+0x146>
	        }
	  else {
		  if(i2CBank == 1){
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d10e      	bne.n	8002fdc <readI2CRegister+0xc4>
				ret = HAL_I2C_Master_Receive(&hi2c1, address, buf, bytes, HAL_MAX_DELAY);
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	b299      	uxth	r1, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	4a26      	ldr	r2, [pc, #152]	; (8003068 <readI2CRegister+0x150>)
 8002fd0:	4826      	ldr	r0, [pc, #152]	; (800306c <readI2CRegister+0x154>)
 8002fd2:	f006 f8bf 	bl	8009154 <HAL_I2C_Master_Receive>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	75fb      	strb	r3, [r7, #23]
 8002fda:	e034      	b.n	8003046 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 2){
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d10e      	bne.n	8003000 <readI2CRegister+0xe8>
				ret = HAL_I2C_Master_Receive(&hi2c2, address, buf, bytes, HAL_MAX_DELAY);
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	b299      	uxth	r1, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <readI2CRegister+0x150>)
 8002ff4:	481e      	ldr	r0, [pc, #120]	; (8003070 <readI2CRegister+0x158>)
 8002ff6:	f006 f8ad 	bl	8009154 <HAL_I2C_Master_Receive>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	75fb      	strb	r3, [r7, #23]
 8002ffe:	e022      	b.n	8003046 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 3){
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d10e      	bne.n	8003024 <readI2CRegister+0x10c>
				ret = HAL_I2C_Master_Receive(&hi2c3, address, buf, bytes, HAL_MAX_DELAY);
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	b299      	uxth	r1, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	b29a      	uxth	r2, r3
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	4a14      	ldr	r2, [pc, #80]	; (8003068 <readI2CRegister+0x150>)
 8003018:	4816      	ldr	r0, [pc, #88]	; (8003074 <readI2CRegister+0x15c>)
 800301a:	f006 f89b 	bl	8009154 <HAL_I2C_Master_Receive>
 800301e:	4603      	mov	r3, r0
 8003020:	75fb      	strb	r3, [r7, #23]
 8003022:	e010      	b.n	8003046 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 4){
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b04      	cmp	r3, #4
 8003028:	d10d      	bne.n	8003046 <readI2CRegister+0x12e>
				ret = HAL_I2C_Master_Receive(&hi2c4, address, buf, bytes, HAL_MAX_DELAY);
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	b299      	uxth	r1, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	b29a      	uxth	r2, r3
 8003032:	f04f 33ff 	mov.w	r3, #4294967295
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	4a0b      	ldr	r2, [pc, #44]	; (8003068 <readI2CRegister+0x150>)
 800303c:	480e      	ldr	r0, [pc, #56]	; (8003078 <readI2CRegister+0x160>)
 800303e:	f006 f889 	bl	8009154 <HAL_I2C_Master_Receive>
 8003042:	4603      	mov	r3, r0
 8003044:	75fb      	strb	r3, [r7, #23]
			}
		  if ( ret != HAL_OK ) {
 8003046:	7dfb      	ldrb	r3, [r7, #23]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <readI2CRegister+0x138>
		          return 0xfe;
 800304c:	23fe      	movs	r3, #254	; 0xfe
 800304e:	e006      	b.n	800305e <readI2CRegister+0x146>
		        }
		  else{
			  uartTransmitInt(buf[0],7);
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <readI2CRegister+0x150>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2107      	movs	r1, #7
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff ff3e 	bl	8002ed8 <uartTransmitInt>
			  return buf;
 800305c:	4b02      	ldr	r3, [pc, #8]	; (8003068 <readI2CRegister+0x150>)
		  }
}
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20003264 	.word	0x20003264
 800306c:	200105b4 	.word	0x200105b4
 8003070:	20010a04 	.word	0x20010a04
 8003074:	200103a4 	.word	0x200103a4
 8003078:	200103f0 	.word	0x200103f0

0800307c <writeI2CRegister>:
int writeI2CRegister(uint8_t address, uint8_t reg, uint8_t * bytes, int numBytes, int i2CBank){
 800307c:	b580      	push	{r7, lr}
 800307e:	b08e      	sub	sp, #56	; 0x38
 8003080:	af02      	add	r7, sp, #8
 8003082:	60ba      	str	r2, [r7, #8]
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	4603      	mov	r3, r0
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	460b      	mov	r3, r1
 800308c:	73bb      	strb	r3, [r7, #14]
	  	uint8_t buf[20];
	  	HAL_StatusTypeDef ret;
	  	buf[0]=reg;
 800308e:	7bbb      	ldrb	r3, [r7, #14]
 8003090:	753b      	strb	r3, [r7, #20]
	  	int x = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 8003096:	2300      	movs	r3, #0
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
 800309a:	e00d      	b.n	80030b8 <writeI2CRegister+0x3c>
	  		buf[1+x] = bytes[x];
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	441a      	add	r2, r3
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a4:	3301      	adds	r3, #1
 80030a6:	7812      	ldrb	r2, [r2, #0]
 80030a8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80030ac:	440b      	add	r3, r1
 80030ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	3301      	adds	r3, #1
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d9ee      	bls.n	800309c <writeI2CRegister+0x20>
	  	}
	  	if(i2CBank == 1){
 80030be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d112      	bne.n	80030ea <writeI2CRegister+0x6e>
	  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, numBytes+1, HAL_MAX_DELAY);
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	b299      	uxth	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3301      	adds	r3, #1
 80030ce:	b298      	uxth	r0, r3
 80030d0:	f107 0214 	add.w	r2, r7, #20
 80030d4:	f04f 33ff 	mov.w	r3, #4294967295
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	4603      	mov	r3, r0
 80030dc:	4829      	ldr	r0, [pc, #164]	; (8003184 <writeI2CRegister+0x108>)
 80030de:	f005 ff45 	bl	8008f6c <HAL_I2C_Master_Transmit>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80030e8:	e040      	b.n	800316c <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 2){
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d112      	bne.n	8003116 <writeI2CRegister+0x9a>
	  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, numBytes+1, HAL_MAX_DELAY);
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	b299      	uxth	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3301      	adds	r3, #1
 80030fa:	b298      	uxth	r0, r3
 80030fc:	f107 0214 	add.w	r2, r7, #20
 8003100:	f04f 33ff 	mov.w	r3, #4294967295
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	4603      	mov	r3, r0
 8003108:	481f      	ldr	r0, [pc, #124]	; (8003188 <writeI2CRegister+0x10c>)
 800310a:	f005 ff2f 	bl	8008f6c <HAL_I2C_Master_Transmit>
 800310e:	4603      	mov	r3, r0
 8003110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003114:	e02a      	b.n	800316c <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 3){
 8003116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003118:	2b03      	cmp	r3, #3
 800311a:	d112      	bne.n	8003142 <writeI2CRegister+0xc6>
	  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, numBytes+1, HAL_MAX_DELAY);
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	b299      	uxth	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	b29b      	uxth	r3, r3
 8003124:	3301      	adds	r3, #1
 8003126:	b298      	uxth	r0, r3
 8003128:	f107 0214 	add.w	r2, r7, #20
 800312c:	f04f 33ff 	mov.w	r3, #4294967295
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	4603      	mov	r3, r0
 8003134:	4815      	ldr	r0, [pc, #84]	; (800318c <writeI2CRegister+0x110>)
 8003136:	f005 ff19 	bl	8008f6c <HAL_I2C_Master_Transmit>
 800313a:	4603      	mov	r3, r0
 800313c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003140:	e014      	b.n	800316c <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 4){
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	2b04      	cmp	r3, #4
 8003146:	d111      	bne.n	800316c <writeI2CRegister+0xf0>
	  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	b299      	uxth	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	b29b      	uxth	r3, r3
 8003150:	3301      	adds	r3, #1
 8003152:	b298      	uxth	r0, r3
 8003154:	f107 0214 	add.w	r2, r7, #20
 8003158:	f04f 33ff 	mov.w	r3, #4294967295
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	4603      	mov	r3, r0
 8003160:	480b      	ldr	r0, [pc, #44]	; (8003190 <writeI2CRegister+0x114>)
 8003162:	f005 ff03 	bl	8008f6c <HAL_I2C_Master_Transmit>
 8003166:	4603      	mov	r3, r0
 8003168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  	}
	  	if ( ret != HAL_OK ) {
 800316c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <writeI2CRegister+0xfc>
	  	          return 0;
 8003174:	2300      	movs	r3, #0
 8003176:	e000      	b.n	800317a <writeI2CRegister+0xfe>
	  	        }
	  	else {
	  		  return 1;
 8003178:	2301      	movs	r3, #1
	  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	3730      	adds	r7, #48	; 0x30
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200105b4 	.word	0x200105b4
 8003188:	20010a04 	.word	0x20010a04
 800318c:	200103a4 	.word	0x200103a4
 8003190:	200103f0 	.word	0x200103f0

08003194 <configureLEDDriver>:
void configureLEDDriver(){
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af02      	add	r7, sp, #8
	uint8_t currentMultiplier = 0b00000001;
 800319a:	2301      	movs	r3, #1
 800319c:	71fb      	strb	r3, [r7, #7]
	static uint8_t* clear[1];
	clear[0]=0x0;
 800319e:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <configureLEDDriver+0x110>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
	uint8_t * buf;
	//reduce the current multiplier to set brightness lower. See if this works. If not, we can work with PWM.
	writeI2CRegister(LED.address, LED.iref_reg, currentMultiplier,1,LED.i2cBank);
 80031a4:	4b40      	ldr	r3, [pc, #256]	; (80032a8 <configureLEDDriver+0x114>)
 80031a6:	7818      	ldrb	r0, [r3, #0]
 80031a8:	4b3f      	ldr	r3, [pc, #252]	; (80032a8 <configureLEDDriver+0x114>)
 80031aa:	7999      	ldrb	r1, [r3, #6]
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <configureLEDDriver+0x114>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	2301      	movs	r3, #1
 80031b8:	f7ff ff60 	bl	800307c <writeI2CRegister>
	buf = readI2CRegister(LED.address,LED.iref_reg,1,LED.i2cBank);
 80031bc:	4b3a      	ldr	r3, [pc, #232]	; (80032a8 <configureLEDDriver+0x114>)
 80031be:	7818      	ldrb	r0, [r3, #0]
 80031c0:	4b39      	ldr	r3, [pc, #228]	; (80032a8 <configureLEDDriver+0x114>)
 80031c2:	7999      	ldrb	r1, [r3, #6]
 80031c4:	4b38      	ldr	r3, [pc, #224]	; (80032a8 <configureLEDDriver+0x114>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f7ff fea5 	bl	8002f18 <readI2CRegister>
 80031ce:	6038      	str	r0, [r7, #0]
	uartTransmitInt(buf[0],7);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2107      	movs	r1, #7
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fe7e 	bl	8002ed8 <uartTransmitInt>
	//Turn on oscillator. Must be turned on before LED driver functions
	writeI2CRegister(LED.address,LED.mode0_reg,LED.mode0_oscon_value,1,LED.i2cBank);
 80031dc:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <configureLEDDriver+0x114>)
 80031de:	7818      	ldrb	r0, [r3, #0]
 80031e0:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <configureLEDDriver+0x114>)
 80031e2:	7859      	ldrb	r1, [r3, #1]
 80031e4:	4b30      	ldr	r3, [pc, #192]	; (80032a8 <configureLEDDriver+0x114>)
 80031e6:	79db      	ldrb	r3, [r3, #7]
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b2f      	ldr	r3, [pc, #188]	; (80032a8 <configureLEDDriver+0x114>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2301      	movs	r3, #1
 80031f2:	f7ff ff43 	bl	800307c <writeI2CRegister>
	//clear the default state of the led register.
	writeI2CRegister(LED.address,LED.led0_reg,clear,1,LED.i2cBank);
 80031f6:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <configureLEDDriver+0x114>)
 80031f8:	7818      	ldrb	r0, [r3, #0]
 80031fa:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <configureLEDDriver+0x114>)
 80031fc:	7899      	ldrb	r1, [r3, #2]
 80031fe:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <configureLEDDriver+0x114>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	2301      	movs	r3, #1
 8003206:	4a27      	ldr	r2, [pc, #156]	; (80032a4 <configureLEDDriver+0x110>)
 8003208:	f7ff ff38 	bl	800307c <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led1_reg,clear,1,LED.i2cBank);
 800320c:	4b26      	ldr	r3, [pc, #152]	; (80032a8 <configureLEDDriver+0x114>)
 800320e:	7818      	ldrb	r0, [r3, #0]
 8003210:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <configureLEDDriver+0x114>)
 8003212:	78d9      	ldrb	r1, [r3, #3]
 8003214:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <configureLEDDriver+0x114>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2301      	movs	r3, #1
 800321c:	4a21      	ldr	r2, [pc, #132]	; (80032a4 <configureLEDDriver+0x110>)
 800321e:	f7ff ff2d 	bl	800307c <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led2_reg,clear,1,LED.i2cBank);
 8003222:	4b21      	ldr	r3, [pc, #132]	; (80032a8 <configureLEDDriver+0x114>)
 8003224:	7818      	ldrb	r0, [r3, #0]
 8003226:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <configureLEDDriver+0x114>)
 8003228:	7919      	ldrb	r1, [r3, #4]
 800322a:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <configureLEDDriver+0x114>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2301      	movs	r3, #1
 8003232:	4a1c      	ldr	r2, [pc, #112]	; (80032a4 <configureLEDDriver+0x110>)
 8003234:	f7ff ff22 	bl	800307c <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led3_reg,clear,1,LED.i2cBank);
 8003238:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <configureLEDDriver+0x114>)
 800323a:	7818      	ldrb	r0, [r3, #0]
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <configureLEDDriver+0x114>)
 800323e:	7959      	ldrb	r1, [r3, #5]
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <configureLEDDriver+0x114>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	2301      	movs	r3, #1
 8003248:	4a16      	ldr	r2, [pc, #88]	; (80032a4 <configureLEDDriver+0x110>)
 800324a:	f7ff ff17 	bl	800307c <writeI2CRegister>
	//set the PWM for the tri-color led. Thing is bright so PWM is very low.
	writeI2CRegister(LED.address,LED.led7_pwm,LED.pwm,1,LED.i2cBank);
 800324e:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <configureLEDDriver+0x114>)
 8003250:	7818      	ldrb	r0, [r3, #0]
 8003252:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <configureLEDDriver+0x114>)
 8003254:	7a19      	ldrb	r1, [r3, #8]
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <configureLEDDriver+0x114>)
 8003258:	7adb      	ldrb	r3, [r3, #11]
 800325a:	461a      	mov	r2, r3
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <configureLEDDriver+0x114>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2301      	movs	r3, #1
 8003264:	f7ff ff0a 	bl	800307c <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led8_pwm,LED.pwm,1,LED.i2cBank);
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <configureLEDDriver+0x114>)
 800326a:	7818      	ldrb	r0, [r3, #0]
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <configureLEDDriver+0x114>)
 800326e:	7a59      	ldrb	r1, [r3, #9]
 8003270:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <configureLEDDriver+0x114>)
 8003272:	7adb      	ldrb	r3, [r3, #11]
 8003274:	461a      	mov	r2, r3
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <configureLEDDriver+0x114>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	2301      	movs	r3, #1
 800327e:	f7ff fefd 	bl	800307c <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led9_pwm,LED.pwm,1,LED.i2cBank);
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <configureLEDDriver+0x114>)
 8003284:	7818      	ldrb	r0, [r3, #0]
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <configureLEDDriver+0x114>)
 8003288:	7a99      	ldrb	r1, [r3, #10]
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <configureLEDDriver+0x114>)
 800328c:	7adb      	ldrb	r3, [r3, #11]
 800328e:	461a      	mov	r2, r3
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <configureLEDDriver+0x114>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	2301      	movs	r3, #1
 8003298:	f7ff fef0 	bl	800307c <writeI2CRegister>
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20003278 	.word	0x20003278
 80032a8:	20000004 	.word	0x20000004

080032ac <setErrorLED>:

//Configures specified LED to either fully on or off.
void setErrorLED(int led,_Bool change){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	; 0x28
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	70fb      	strb	r3, [r7, #3]
	const uint8_t led0 = 0b00000001;
 80032b8:	2301      	movs	r3, #1
 80032ba:	76bb      	strb	r3, [r7, #26]
	const uint8_t led1 = 0b00000100;
 80032bc:	2304      	movs	r3, #4
 80032be:	767b      	strb	r3, [r7, #25]
	const uint8_t led2 = 0b00010000;
 80032c0:	2310      	movs	r3, #16
 80032c2:	763b      	strb	r3, [r7, #24]
	const uint8_t led3 = 0b01000000;
 80032c4:	2340      	movs	r3, #64	; 0x40
 80032c6:	75fb      	strb	r3, [r7, #23]
	const uint8_t led0_pwm = 0b00000010;
 80032c8:	2302      	movs	r3, #2
 80032ca:	75bb      	strb	r3, [r7, #22]
	const uint8_t led1_pwm = 0b00001000;
 80032cc:	2308      	movs	r3, #8
 80032ce:	757b      	strb	r3, [r7, #21]
	const uint8_t led2_pwm = 0b00100000;
 80032d0:	2320      	movs	r3, #32
 80032d2:	753b      	strb	r3, [r7, #20]
	const uint8_t led3_pwm = 0b10000000;
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	74fb      	strb	r3, [r7, #19]
  	uint8_t* ledRegisterContents;
  	int ledBitNumber;
  	uint8_t ledRegister;
	if(led <4){
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	dc05      	bgt.n	80032ea <setErrorLED+0x3e>
		ledRegister = LED.led0_reg;
 80032de:	4b80      	ldr	r3, [pc, #512]	; (80034e0 <setErrorLED+0x234>)
 80032e0:	789b      	ldrb	r3, [r3, #2]
 80032e2:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	61fb      	str	r3, [r7, #28]
 80032e8:	e019      	b.n	800331e <setErrorLED+0x72>
	}
	else if(led <8){
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b07      	cmp	r3, #7
 80032ee:	dc06      	bgt.n	80032fe <setErrorLED+0x52>
		ledRegister = LED.led1_reg;
 80032f0:	4b7b      	ldr	r3, [pc, #492]	; (80034e0 <setErrorLED+0x234>)
 80032f2:	78db      	ldrb	r3, [r3, #3]
 80032f4:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-4;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3b04      	subs	r3, #4
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	e00f      	b.n	800331e <setErrorLED+0x72>
	}
	else if(led <12){
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b0b      	cmp	r3, #11
 8003302:	dc06      	bgt.n	8003312 <setErrorLED+0x66>
		ledRegister = LED.led2_reg;
 8003304:	4b76      	ldr	r3, [pc, #472]	; (80034e0 <setErrorLED+0x234>)
 8003306:	791b      	ldrb	r3, [r3, #4]
 8003308:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-8;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3b08      	subs	r3, #8
 800330e:	61fb      	str	r3, [r7, #28]
 8003310:	e005      	b.n	800331e <setErrorLED+0x72>
	}
	else{ //put this in to humor those who want to try using unconnected LEDs
		ledRegister = LED.led3_reg;
 8003312:	4b73      	ldr	r3, [pc, #460]	; (80034e0 <setErrorLED+0x234>)
 8003314:	795b      	ldrb	r3, [r3, #5]
 8003316:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-12;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3b0c      	subs	r3, #12
 800331c:	61fb      	str	r3, [r7, #28]
	}
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 800331e:	4b70      	ldr	r3, [pc, #448]	; (80034e0 <setErrorLED+0x234>)
 8003320:	7818      	ldrb	r0, [r3, #0]
 8003322:	4b6f      	ldr	r3, [pc, #444]	; (80034e0 <setErrorLED+0x234>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	7ef9      	ldrb	r1, [r7, #27]
 8003328:	2201      	movs	r2, #1
 800332a:	f7ff fdf5 	bl	8002f18 <readI2CRegister>
 800332e:	60f8      	str	r0, [r7, #12]
	switch(ledBitNumber){
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b03      	cmp	r3, #3
 8003334:	f200 80bd 	bhi.w	80034b2 <setErrorLED+0x206>
 8003338:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <setErrorLED+0x94>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003351 	.word	0x08003351
 8003344:	080033b7 	.word	0x080033b7
 8003348:	0800341d 	.word	0x0800341d
 800334c:	0800344d 	.word	0x0800344d

	case 0:
		if(change){
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d012      	beq.n	800337c <setErrorLED+0xd0>
			if(led == 8){
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b08      	cmp	r3, #8
 800335a:	d107      	bne.n	800336c <setErrorLED+0xc0>
				ledRegisterContents[0] |= led0_pwm;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	7dbb      	ldrb	r3, [r7, #22]
 8003362:	4313      	orrs	r3, r2
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led0;
			}
		}
		break;
 800336a:	e0a2      	b.n	80034b2 <setErrorLED+0x206>
				ledRegisterContents[0] |= led0;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	781a      	ldrb	r2, [r3, #0]
 8003370:	7ebb      	ldrb	r3, [r7, #26]
 8003372:	4313      	orrs	r3, r2
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	701a      	strb	r2, [r3, #0]
		break;
 800337a:	e09a      	b.n	80034b2 <setErrorLED+0x206>
			if(led == 8){
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b08      	cmp	r3, #8
 8003380:	d10c      	bne.n	800339c <setErrorLED+0xf0>
				ledRegisterContents[0] &= ~led0_pwm;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	b25a      	sxtb	r2, r3
 8003388:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800338c:	43db      	mvns	r3, r3
 800338e:	b25b      	sxtb	r3, r3
 8003390:	4013      	ands	r3, r2
 8003392:	b25b      	sxtb	r3, r3
 8003394:	b2da      	uxtb	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	701a      	strb	r2, [r3, #0]
		break;
 800339a:	e08a      	b.n	80034b2 <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led0;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	b25a      	sxtb	r2, r3
 80033a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	b25b      	sxtb	r3, r3
 80033aa:	4013      	ands	r3, r2
 80033ac:	b25b      	sxtb	r3, r3
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	701a      	strb	r2, [r3, #0]
		break;
 80033b4:	e07d      	b.n	80034b2 <setErrorLED+0x206>

	case 1:
		if(change){
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d012      	beq.n	80033e2 <setErrorLED+0x136>
			if(led == 9){
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b09      	cmp	r3, #9
 80033c0:	d107      	bne.n	80033d2 <setErrorLED+0x126>
				ledRegisterContents[0] |= led1_pwm;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	781a      	ldrb	r2, [r3, #0]
 80033c6:	7d7b      	ldrb	r3, [r7, #21]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led1;
			}
		}
		break;
 80033d0:	e06f      	b.n	80034b2 <setErrorLED+0x206>
				ledRegisterContents[0] |= led1;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	7e7b      	ldrb	r3, [r7, #25]
 80033d8:	4313      	orrs	r3, r2
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	701a      	strb	r2, [r3, #0]
		break;
 80033e0:	e067      	b.n	80034b2 <setErrorLED+0x206>
			if(led == 9){
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b09      	cmp	r3, #9
 80033e6:	d10c      	bne.n	8003402 <setErrorLED+0x156>
				ledRegisterContents[0] &= ~led1_pwm;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	b25a      	sxtb	r2, r3
 80033ee:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	b25b      	sxtb	r3, r3
 80033f6:	4013      	ands	r3, r2
 80033f8:	b25b      	sxtb	r3, r3
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	701a      	strb	r2, [r3, #0]
		break;
 8003400:	e057      	b.n	80034b2 <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led1;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	b25a      	sxtb	r2, r3
 8003408:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800340c:	43db      	mvns	r3, r3
 800340e:	b25b      	sxtb	r3, r3
 8003410:	4013      	ands	r3, r2
 8003412:	b25b      	sxtb	r3, r3
 8003414:	b2da      	uxtb	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	701a      	strb	r2, [r3, #0]
		break;
 800341a:	e04a      	b.n	80034b2 <setErrorLED+0x206>

	case 2:
		if(change){
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <setErrorLED+0x186>
				ledRegisterContents[0] |= led2;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	7e3b      	ldrb	r3, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	b2da      	uxtb	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	701a      	strb	r2, [r3, #0]
		}
		else{

			ledRegisterContents[0] &= ~led2;
		}
		break;
 8003430:	e03f      	b.n	80034b2 <setErrorLED+0x206>
			ledRegisterContents[0] &= ~led2;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	b25a      	sxtb	r2, r3
 8003438:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800343c:	43db      	mvns	r3, r3
 800343e:	b25b      	sxtb	r3, r3
 8003440:	4013      	ands	r3, r2
 8003442:	b25b      	sxtb	r3, r3
 8003444:	b2da      	uxtb	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	701a      	strb	r2, [r3, #0]
		break;
 800344a:	e032      	b.n	80034b2 <setErrorLED+0x206>

	case 3:
		if(change){
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d012      	beq.n	8003478 <setErrorLED+0x1cc>
			if(led == 7){
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b07      	cmp	r3, #7
 8003456:	d107      	bne.n	8003468 <setErrorLED+0x1bc>
				ledRegisterContents[0] |= led3_pwm;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	781a      	ldrb	r2, [r3, #0]
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	4313      	orrs	r3, r2
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led3;
			}
		}
		break;
 8003466:	e023      	b.n	80034b0 <setErrorLED+0x204>
				ledRegisterContents[0] |= led3;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	7dfb      	ldrb	r3, [r7, #23]
 800346e:	4313      	orrs	r3, r2
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	701a      	strb	r2, [r3, #0]
		break;
 8003476:	e01b      	b.n	80034b0 <setErrorLED+0x204>
			if(led == 7){
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b07      	cmp	r3, #7
 800347c:	d10c      	bne.n	8003498 <setErrorLED+0x1ec>
				ledRegisterContents[0] &= ~led3_pwm;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	b25a      	sxtb	r2, r3
 8003484:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003488:	43db      	mvns	r3, r3
 800348a:	b25b      	sxtb	r3, r3
 800348c:	4013      	ands	r3, r2
 800348e:	b25b      	sxtb	r3, r3
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	701a      	strb	r2, [r3, #0]
		break;
 8003496:	e00b      	b.n	80034b0 <setErrorLED+0x204>
				ledRegisterContents[0] &= ~led3;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	b25a      	sxtb	r2, r3
 800349e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	4013      	ands	r3, r2
 80034a8:	b25b      	sxtb	r3, r3
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	701a      	strb	r2, [r3, #0]
		break;
 80034b0:	bf00      	nop
	}
	writeI2CRegister(LED.address,ledRegister,ledRegisterContents,1,LED.i2cBank);
 80034b2:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <setErrorLED+0x234>)
 80034b4:	7818      	ldrb	r0, [r3, #0]
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <setErrorLED+0x234>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	7ef9      	ldrb	r1, [r7, #27]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	2301      	movs	r3, #1
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	f7ff fddb 	bl	800307c <writeI2CRegister>
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <setErrorLED+0x234>)
 80034c8:	7818      	ldrb	r0, [r3, #0]
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <setErrorLED+0x234>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	7ef9      	ldrb	r1, [r7, #27]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f7ff fd21 	bl	8002f18 <readI2CRegister>
 80034d6:	60f8      	str	r0, [r7, #12]
}
 80034d8:	bf00      	nop
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000004 	.word	0x20000004

080034e4 <getADCValues>:


float* getADCValues(){
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b09e      	sub	sp, #120	; 0x78
 80034e8:	af00      	add	r7, sp, #0
	//intialize a static float array to return from the method. Make static to avoid the data changing on return
	static float adcValues[21];
	//make an integer array to store the adc counts. ADC counts are out of 4096
	int avgADCCounterValues[21];
	//empty the integer array
	memset(avgADCCounterValues, 0, sizeof(avgADCCounterValues));
 80034ea:	463b      	mov	r3, r7
 80034ec:	2254      	movs	r2, #84	; 0x54
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f00c ff20 	bl	8010336 <memset>
	int adcChannelCounter,avgCounter,adcIndex;
	//variables to denote what interval the data in the adc buffers repeats. ADC format is [data0, 0x00, data1, 0x00...]
	//the interval is (#ofchannels activated on bank) * 2
	int adc1DataRepeat=22;
 80034f6:	2316      	movs	r3, #22
 80034f8:	66bb      	str	r3, [r7, #104]	; 0x68
	int adc2DataRepeat=8;
 80034fa:	2308      	movs	r3, #8
 80034fc:	667b      	str	r3, [r7, #100]	; 0x64
	int adc3DataRepeat=12;
 80034fe:	230c      	movs	r3, #12
 8003500:	663b      	str	r3, [r7, #96]	; 0x60
	//iterate through all 21 adc channels...
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 8003502:	2300      	movs	r3, #0
 8003504:	677b      	str	r3, [r7, #116]	; 0x74
 8003506:	e171      	b.n	80037ec <getADCValues+0x308>
		//for the first channels of the adc banks (ADC Bank 1's first channel is ADC3, ADC bank 2's first channel is ADC0, ADC bank 3's first channel is adc2
		if((adcChannelCounter==Adc.adc0) || (adcChannelCounter==Adc.adc2) || (adcChannelCounter==Adc.adc3)){
 8003508:	4b97      	ldr	r3, [pc, #604]	; (8003768 <getADCValues+0x284>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800350e:	429a      	cmp	r2, r3
 8003510:	d009      	beq.n	8003526 <getADCValues+0x42>
 8003512:	4b95      	ldr	r3, [pc, #596]	; (8003768 <getADCValues+0x284>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003518:	429a      	cmp	r2, r3
 800351a:	d004      	beq.n	8003526 <getADCValues+0x42>
 800351c:	4b92      	ldr	r3, [pc, #584]	; (8003768 <getADCValues+0x284>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003522:	429a      	cmp	r2, r3
 8003524:	d102      	bne.n	800352c <getADCValues+0x48>
			//first data entry for each buffer will be the data for these adcs
			adcIndex=0;
 8003526:	2300      	movs	r3, #0
 8003528:	66fb      	str	r3, [r7, #108]	; 0x6c
 800352a:	e071      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the second channels of the adc banks (ADC Bank 1's second channel is ADC4, ADC bank 2's second channel is ADC1, ADC bank 3's second channel is adc14
		else if((adcChannelCounter==Adc.adc1) || (adcChannelCounter==Adc.adc14) || (adcChannelCounter==Adc.adc4)){
 800352c:	4b8e      	ldr	r3, [pc, #568]	; (8003768 <getADCValues+0x284>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003532:	429a      	cmp	r2, r3
 8003534:	d009      	beq.n	800354a <getADCValues+0x66>
 8003536:	4b8c      	ldr	r3, [pc, #560]	; (8003768 <getADCValues+0x284>)
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800353c:	429a      	cmp	r2, r3
 800353e:	d004      	beq.n	800354a <getADCValues+0x66>
 8003540:	4b89      	ldr	r3, [pc, #548]	; (8003768 <getADCValues+0x284>)
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003546:	429a      	cmp	r2, r3
 8003548:	d102      	bne.n	8003550 <getADCValues+0x6c>
			adcIndex=2;
 800354a:	2302      	movs	r3, #2
 800354c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800354e:	e05f      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the third channels of the adc banks (ADC Bank 1's third channel is ADC5, ADC bank 2's third channel is spareSpiADC, ADC bank 3's third channel is adc15
		else if((adcChannelCounter==Adc.spareSpiADC) || (adcChannelCounter==Adc.adc15) || (adcChannelCounter==Adc.adc5)){
 8003550:	4b85      	ldr	r3, [pc, #532]	; (8003768 <getADCValues+0x284>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003556:	429a      	cmp	r2, r3
 8003558:	d009      	beq.n	800356e <getADCValues+0x8a>
 800355a:	4b83      	ldr	r3, [pc, #524]	; (8003768 <getADCValues+0x284>)
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003560:	429a      	cmp	r2, r3
 8003562:	d004      	beq.n	800356e <getADCValues+0x8a>
 8003564:	4b80      	ldr	r3, [pc, #512]	; (8003768 <getADCValues+0x284>)
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800356a:	429a      	cmp	r2, r3
 800356c:	d102      	bne.n	8003574 <getADCValues+0x90>
			adcIndex=4;
 800356e:	2304      	movs	r3, #4
 8003570:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003572:	e04d      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the fourth channels of the adc banks (ADC Bank 1's fourth channel is adc6, ADC bank 2's fourth channel is spareUARTADC, ADC bank 3's fourth channel is configADC
		else if((adcChannelCounter == Adc.spareUartADC) || (adcChannelCounter==Adc.configADC) || (adcChannelCounter==Adc.adc6)){
 8003574:	4b7c      	ldr	r3, [pc, #496]	; (8003768 <getADCValues+0x284>)
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800357a:	429a      	cmp	r2, r3
 800357c:	d009      	beq.n	8003592 <getADCValues+0xae>
 800357e:	4b7a      	ldr	r3, [pc, #488]	; (8003768 <getADCValues+0x284>)
 8003580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003582:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003584:	429a      	cmp	r2, r3
 8003586:	d004      	beq.n	8003592 <getADCValues+0xae>
 8003588:	4b77      	ldr	r3, [pc, #476]	; (8003768 <getADCValues+0x284>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800358e:	429a      	cmp	r2, r3
 8003590:	d102      	bne.n	8003598 <getADCValues+0xb4>
			adcIndex=6;
 8003592:	2306      	movs	r3, #6
 8003594:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003596:	e03b      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the fifth channels of the adc banks (ADC Bank 1's fifth channel is ADC7, ADC bank 3's fifth channel is zionADC
		else if((adcChannelCounter==Adc.zionADC) || (adcChannelCounter==Adc.adc7)){
 8003598:	4b73      	ldr	r3, [pc, #460]	; (8003768 <getADCValues+0x284>)
 800359a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800359c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800359e:	429a      	cmp	r2, r3
 80035a0:	d004      	beq.n	80035ac <getADCValues+0xc8>
 80035a2:	4b71      	ldr	r3, [pc, #452]	; (8003768 <getADCValues+0x284>)
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d102      	bne.n	80035b2 <getADCValues+0xce>
			adcIndex=8;
 80035ac:	2308      	movs	r3, #8
 80035ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035b0:	e02e      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the sixth channels of the adc banks (ADC Bank 1's sixth channel is ADC8, ADC bank 3's sixth channel is spareI2cADC
		else if((adcChannelCounter == Adc.spareI2cADC) || (adcChannelCounter==Adc.adc8)){
 80035b2:	4b6d      	ldr	r3, [pc, #436]	; (8003768 <getADCValues+0x284>)
 80035b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d004      	beq.n	80035c6 <getADCValues+0xe2>
 80035bc:	4b6a      	ldr	r3, [pc, #424]	; (8003768 <getADCValues+0x284>)
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d102      	bne.n	80035cc <getADCValues+0xe8>
			adcIndex=10;
 80035c6:	230a      	movs	r3, #10
 80035c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ca:	e021      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the seventh channels of the adc banks (ADC Bank 1's seventh channel is ADC9)
		else if(adcChannelCounter==Adc.adc9){
 80035cc:	4b66      	ldr	r3, [pc, #408]	; (8003768 <getADCValues+0x284>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d102      	bne.n	80035dc <getADCValues+0xf8>
			adcIndex=12;
 80035d6:	230c      	movs	r3, #12
 80035d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035da:	e019      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the eighth channels of the adc banks (ADC Bank 1's eighth channel is ADC10)
		else if(adcChannelCounter==Adc.adc10){
 80035dc:	4b62      	ldr	r3, [pc, #392]	; (8003768 <getADCValues+0x284>)
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d102      	bne.n	80035ec <getADCValues+0x108>
			adcIndex=14;
 80035e6:	230e      	movs	r3, #14
 80035e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ea:	e011      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the nineth channels of the adc banks (ADC Bank 1's nineth channel is ADC11)
		else if(adcChannelCounter==Adc.adc11){
 80035ec:	4b5e      	ldr	r3, [pc, #376]	; (8003768 <getADCValues+0x284>)
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d102      	bne.n	80035fc <getADCValues+0x118>
			adcIndex=16;
 80035f6:	2310      	movs	r3, #16
 80035f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035fa:	e009      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the tenth channels of the adc banks (ADC Bank 1's tenth channel is ADC12)
		else if(adcChannelCounter==Adc.adc12){
 80035fc:	4b5a      	ldr	r3, [pc, #360]	; (8003768 <getADCValues+0x284>)
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003602:	429a      	cmp	r2, r3
 8003604:	d102      	bne.n	800360c <getADCValues+0x128>
			adcIndex=18;
 8003606:	2312      	movs	r3, #18
 8003608:	66fb      	str	r3, [r7, #108]	; 0x6c
 800360a:	e001      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the eleventh channels of the adc banks (ADC Bank 1's eleventh channel is ADC13)
		else{
			adcIndex=20;
 800360c:	2314      	movs	r3, #20
 800360e:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		//for the channels that belong to the second ADC bank
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8003610:	4b55      	ldr	r3, [pc, #340]	; (8003768 <getADCValues+0x284>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003616:	429a      	cmp	r2, r3
 8003618:	d00e      	beq.n	8003638 <getADCValues+0x154>
 800361a:	4b53      	ldr	r3, [pc, #332]	; (8003768 <getADCValues+0x284>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003620:	429a      	cmp	r2, r3
 8003622:	d009      	beq.n	8003638 <getADCValues+0x154>
 8003624:	4b50      	ldr	r3, [pc, #320]	; (8003768 <getADCValues+0x284>)
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800362a:	429a      	cmp	r2, r3
 800362c:	d004      	beq.n	8003638 <getADCValues+0x154>
 800362e:	4b4e      	ldr	r3, [pc, #312]	; (8003768 <getADCValues+0x284>)
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003634:	429a      	cmp	r2, r3
 8003636:	d13a      	bne.n	80036ae <getADCValues+0x1ca>
			//parse through the buffers to grab enough values to make the asked for average amount
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003638:	2300      	movs	r3, #0
 800363a:	673b      	str	r3, [r7, #112]	; 0x70
 800363c:	e033      	b.n	80036a6 <getADCValues+0x1c2>
				//adjust the index to match the next data point in the buffer
				int shiftedIndex = adcIndex + (adc2DataRepeat*avgCounter);
 800363e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003640:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003648:	4413      	add	r3, r2
 800364a:	657b      	str	r3, [r7, #84]	; 0x54
				//add it to the rolling average count
				avgADCCounterValues[adcChannelCounter]+=adc2_buf[shiftedIndex];
 800364c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003654:	4413      	add	r3, r2
 8003656:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800365a:	4944      	ldr	r1, [pc, #272]	; (800376c <getADCValues+0x288>)
 800365c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800365e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003662:	441a      	add	r2, r3
 8003664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800366c:	440b      	add	r3, r1
 800366e:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003674:	2b13      	cmp	r3, #19
 8003676:	d113      	bne.n	80036a0 <getADCValues+0x1bc>
					//at the end, divide the total amount to get our averaged Value
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003680:	4413      	add	r3, r2
 8003682:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003686:	4a3a      	ldr	r2, [pc, #232]	; (8003770 <getADCValues+0x28c>)
 8003688:	fb82 1203 	smull	r1, r2, r2, r3
 800368c:	10d2      	asrs	r2, r2, #3
 800368e:	17db      	asrs	r3, r3, #31
 8003690:	1ad2      	subs	r2, r2, r3
 8003692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800369a:	440b      	add	r3, r1
 800369c:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80036a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a2:	3301      	adds	r3, #1
 80036a4:	673b      	str	r3, [r7, #112]	; 0x70
 80036a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a8:	2b13      	cmp	r3, #19
 80036aa:	ddc8      	ble.n	800363e <getADCValues+0x15a>
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 80036ac:	e09b      	b.n	80037e6 <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the third ADC bank
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 80036ae:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <getADCValues+0x284>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d018      	beq.n	80036ea <getADCValues+0x206>
 80036b8:	4b2b      	ldr	r3, [pc, #172]	; (8003768 <getADCValues+0x284>)
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036be:	429a      	cmp	r2, r3
 80036c0:	d013      	beq.n	80036ea <getADCValues+0x206>
 80036c2:	4b29      	ldr	r3, [pc, #164]	; (8003768 <getADCValues+0x284>)
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d00e      	beq.n	80036ea <getADCValues+0x206>
 80036cc:	4b26      	ldr	r3, [pc, #152]	; (8003768 <getADCValues+0x284>)
 80036ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d009      	beq.n	80036ea <getADCValues+0x206>
 80036d6:	4b24      	ldr	r3, [pc, #144]	; (8003768 <getADCValues+0x284>)
 80036d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036dc:	429a      	cmp	r2, r3
 80036de:	d004      	beq.n	80036ea <getADCValues+0x206>
 80036e0:	4b21      	ldr	r3, [pc, #132]	; (8003768 <getADCValues+0x284>)
 80036e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d13a      	bne.n	8003760 <getADCValues+0x27c>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80036ea:	2300      	movs	r3, #0
 80036ec:	673b      	str	r3, [r7, #112]	; 0x70
 80036ee:	e033      	b.n	8003758 <getADCValues+0x274>
				int shiftedIndex = adcIndex + (adc3DataRepeat*avgCounter);
 80036f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80036f4:	fb02 f303 	mul.w	r3, r2, r3
 80036f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036fa:	4413      	add	r3, r2
 80036fc:	65bb      	str	r3, [r7, #88]	; 0x58
				avgADCCounterValues[adcChannelCounter]+=adc3_buf[shiftedIndex];
 80036fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003706:	4413      	add	r3, r2
 8003708:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800370c:	4919      	ldr	r1, [pc, #100]	; (8003774 <getADCValues+0x290>)
 800370e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003710:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003714:	441a      	add	r2, r3
 8003716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800371e:	440b      	add	r3, r1
 8003720:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003724:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003726:	2b13      	cmp	r3, #19
 8003728:	d113      	bne.n	8003752 <getADCValues+0x26e>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 800372a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003732:	4413      	add	r3, r2
 8003734:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003738:	4a0d      	ldr	r2, [pc, #52]	; (8003770 <getADCValues+0x28c>)
 800373a:	fb82 1203 	smull	r1, r2, r2, r3
 800373e:	10d2      	asrs	r2, r2, #3
 8003740:	17db      	asrs	r3, r3, #31
 8003742:	1ad2      	subs	r2, r2, r3
 8003744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800374c:	440b      	add	r3, r1
 800374e:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003754:	3301      	adds	r3, #1
 8003756:	673b      	str	r3, [r7, #112]	; 0x70
 8003758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800375a:	2b13      	cmp	r3, #19
 800375c:	ddc8      	ble.n	80036f0 <getADCValues+0x20c>
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 800375e:	e042      	b.n	80037e6 <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the first ADC bank
		else{
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003760:	2300      	movs	r3, #0
 8003762:	673b      	str	r3, [r7, #112]	; 0x70
 8003764:	e03c      	b.n	80037e0 <getADCValues+0x2fc>
 8003766:	bf00      	nop
 8003768:	2000005c 	.word	0x2000005c
 800376c:	200218a4 	.word	0x200218a4
 8003770:	66666667 	.word	0x66666667
 8003774:	200133ac 	.word	0x200133ac
				int shiftedIndex = adcIndex + (adc1DataRepeat*avgCounter);
 8003778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800377a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800377c:	fb02 f303 	mul.w	r3, r2, r3
 8003780:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003782:	4413      	add	r3, r2
 8003784:	65fb      	str	r3, [r7, #92]	; 0x5c
				avgADCCounterValues[adcChannelCounter]+=adc1_buf[shiftedIndex];
 8003786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800378e:	4413      	add	r3, r2
 8003790:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003794:	49c9      	ldr	r1, [pc, #804]	; (8003abc <getADCValues+0x5d8>)
 8003796:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003798:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800379c:	441a      	add	r2, r3
 800379e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80037a6:	440b      	add	r3, r1
 80037a8:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 80037ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037ae:	2b13      	cmp	r3, #19
 80037b0:	d113      	bne.n	80037da <getADCValues+0x2f6>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 80037b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80037ba:	4413      	add	r3, r2
 80037bc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80037c0:	4abf      	ldr	r2, [pc, #764]	; (8003ac0 <getADCValues+0x5dc>)
 80037c2:	fb82 1203 	smull	r1, r2, r2, r3
 80037c6:	10d2      	asrs	r2, r2, #3
 80037c8:	17db      	asrs	r3, r3, #31
 80037ca:	1ad2      	subs	r2, r2, r3
 80037cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80037d4:	440b      	add	r3, r1
 80037d6:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80037da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037dc:	3301      	adds	r3, #1
 80037de:	673b      	str	r3, [r7, #112]	; 0x70
 80037e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037e2:	2b13      	cmp	r3, #19
 80037e4:	ddc8      	ble.n	8003778 <getADCValues+0x294>
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 80037e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e8:	3301      	adds	r3, #1
 80037ea:	677b      	str	r3, [r7, #116]	; 0x74
 80037ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ee:	2b14      	cmp	r3, #20
 80037f0:	f77f ae8a 	ble.w	8003508 <getADCValues+0x24>
				}
			}
		}
	}
	//for adc inputs with names ADC#, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (3)
	adcValues[Adc.adc0] = (avgADCCounterValues[Adc.adc0] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80037f4:	4bb3      	ldr	r3, [pc, #716]	; (8003ac4 <getADCValues+0x5e0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80037fe:	4413      	add	r3, r2
 8003800:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003804:	ee07 3a90 	vmov	s15, r3
 8003808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800380c:	4bad      	ldr	r3, [pc, #692]	; (8003ac4 <getADCValues+0x5e0>)
 800380e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003812:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003816:	4bab      	ldr	r3, [pc, #684]	; (8003ac4 <getADCValues+0x5e0>)
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003822:	4ba8      	ldr	r3, [pc, #672]	; (8003ac4 <getADCValues+0x5e0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	4aa7      	ldr	r2, [pc, #668]	; (8003ac8 <getADCValues+0x5e4>)
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc1] = (avgADCCounterValues[Adc.adc1] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003834:	4ba3      	ldr	r3, [pc, #652]	; (8003ac4 <getADCValues+0x5e0>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800383e:	4413      	add	r3, r2
 8003840:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003844:	ee07 3a90 	vmov	s15, r3
 8003848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800384c:	4b9d      	ldr	r3, [pc, #628]	; (8003ac4 <getADCValues+0x5e0>)
 800384e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003852:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003856:	4b9b      	ldr	r3, [pc, #620]	; (8003ac4 <getADCValues+0x5e0>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003862:	4b98      	ldr	r3, [pc, #608]	; (8003ac4 <getADCValues+0x5e0>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386a:	4a97      	ldr	r2, [pc, #604]	; (8003ac8 <getADCValues+0x5e4>)
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc2] = (avgADCCounterValues[Adc.adc2] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003874:	4b93      	ldr	r3, [pc, #588]	; (8003ac4 <getADCValues+0x5e0>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800387e:	4413      	add	r3, r2
 8003880:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003884:	ee07 3a90 	vmov	s15, r3
 8003888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800388c:	4b8d      	ldr	r3, [pc, #564]	; (8003ac4 <getADCValues+0x5e0>)
 800388e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003892:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003896:	4b8b      	ldr	r3, [pc, #556]	; (8003ac4 <getADCValues+0x5e0>)
 8003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038a2:	4b88      	ldr	r3, [pc, #544]	; (8003ac4 <getADCValues+0x5e0>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038aa:	4a87      	ldr	r2, [pc, #540]	; (8003ac8 <getADCValues+0x5e4>)
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc3] = (avgADCCounterValues[Adc.adc3] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80038b4:	4b83      	ldr	r3, [pc, #524]	; (8003ac4 <getADCValues+0x5e0>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80038be:	4413      	add	r3, r2
 80038c0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80038c4:	ee07 3a90 	vmov	s15, r3
 80038c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038cc:	4b7d      	ldr	r3, [pc, #500]	; (8003ac4 <getADCValues+0x5e0>)
 80038ce:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80038d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038d6:	4b7b      	ldr	r3, [pc, #492]	; (8003ac4 <getADCValues+0x5e0>)
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038e2:	4b78      	ldr	r3, [pc, #480]	; (8003ac4 <getADCValues+0x5e0>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ea:	4a77      	ldr	r2, [pc, #476]	; (8003ac8 <getADCValues+0x5e4>)
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc4] = (avgADCCounterValues[Adc.adc4] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80038f4:	4b73      	ldr	r3, [pc, #460]	; (8003ac4 <getADCValues+0x5e0>)
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80038fe:	4413      	add	r3, r2
 8003900:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003904:	ee07 3a90 	vmov	s15, r3
 8003908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800390c:	4b6d      	ldr	r3, [pc, #436]	; (8003ac4 <getADCValues+0x5e0>)
 800390e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003912:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003916:	4b6b      	ldr	r3, [pc, #428]	; (8003ac4 <getADCValues+0x5e0>)
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003922:	4b68      	ldr	r3, [pc, #416]	; (8003ac4 <getADCValues+0x5e0>)
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392a:	4a67      	ldr	r2, [pc, #412]	; (8003ac8 <getADCValues+0x5e4>)
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc5] = (avgADCCounterValues[Adc.adc5] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003934:	4b63      	ldr	r3, [pc, #396]	; (8003ac4 <getADCValues+0x5e0>)
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800393e:	4413      	add	r3, r2
 8003940:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003944:	ee07 3a90 	vmov	s15, r3
 8003948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800394c:	4b5d      	ldr	r3, [pc, #372]	; (8003ac4 <getADCValues+0x5e0>)
 800394e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003956:	4b5b      	ldr	r3, [pc, #364]	; (8003ac4 <getADCValues+0x5e0>)
 8003958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003962:	4b58      	ldr	r3, [pc, #352]	; (8003ac4 <getADCValues+0x5e0>)
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396a:	4a57      	ldr	r2, [pc, #348]	; (8003ac8 <getADCValues+0x5e4>)
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc6] = (avgADCCounterValues[Adc.adc6] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003974:	4b53      	ldr	r3, [pc, #332]	; (8003ac4 <getADCValues+0x5e0>)
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800397e:	4413      	add	r3, r2
 8003980:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003984:	ee07 3a90 	vmov	s15, r3
 8003988:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800398c:	4b4d      	ldr	r3, [pc, #308]	; (8003ac4 <getADCValues+0x5e0>)
 800398e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003996:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <getADCValues+0x5e0>)
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039a2:	4b48      	ldr	r3, [pc, #288]	; (8003ac4 <getADCValues+0x5e0>)
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039aa:	4a47      	ldr	r2, [pc, #284]	; (8003ac8 <getADCValues+0x5e4>)
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc7] = (avgADCCounterValues[Adc.adc7] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80039b4:	4b43      	ldr	r3, [pc, #268]	; (8003ac4 <getADCValues+0x5e0>)
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80039be:	4413      	add	r3, r2
 80039c0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80039c4:	ee07 3a90 	vmov	s15, r3
 80039c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039cc:	4b3d      	ldr	r3, [pc, #244]	; (8003ac4 <getADCValues+0x5e0>)
 80039ce:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80039d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039d6:	4b3b      	ldr	r3, [pc, #236]	; (8003ac4 <getADCValues+0x5e0>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039e2:	4b38      	ldr	r3, [pc, #224]	; (8003ac4 <getADCValues+0x5e0>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ea:	4a37      	ldr	r2, [pc, #220]	; (8003ac8 <getADCValues+0x5e4>)
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc8] = (avgADCCounterValues[Adc.adc8] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80039f4:	4b33      	ldr	r3, [pc, #204]	; (8003ac4 <getADCValues+0x5e0>)
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80039fe:	4413      	add	r3, r2
 8003a00:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a04:	ee07 3a90 	vmov	s15, r3
 8003a08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <getADCValues+0x5e0>)
 8003a0e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a16:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <getADCValues+0x5e0>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a22:	4b28      	ldr	r3, [pc, #160]	; (8003ac4 <getADCValues+0x5e0>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2a:	4a27      	ldr	r2, [pc, #156]	; (8003ac8 <getADCValues+0x5e4>)
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc9] = (avgADCCounterValues[Adc.adc9] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003a34:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <getADCValues+0x5e0>)
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003a3e:	4413      	add	r3, r2
 8003a40:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a44:	ee07 3a90 	vmov	s15, r3
 8003a48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <getADCValues+0x5e0>)
 8003a4e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a56:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <getADCValues+0x5e0>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a62:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <getADCValues+0x5e0>)
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6a:	4a17      	ldr	r2, [pc, #92]	; (8003ac8 <getADCValues+0x5e4>)
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc10] = (avgADCCounterValues[Adc.adc10] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <getADCValues+0x5e0>)
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003a7e:	4413      	add	r3, r2
 8003a80:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a84:	ee07 3a90 	vmov	s15, r3
 8003a88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <getADCValues+0x5e0>)
 8003a8e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003a92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <getADCValues+0x5e0>)
 8003a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <getADCValues+0x5e0>)
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aaa:	4a07      	ldr	r2, [pc, #28]	; (8003ac8 <getADCValues+0x5e4>)
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc11] = (avgADCCounterValues[Adc.adc11] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003ab4:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <getADCValues+0x5e0>)
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	e007      	b.n	8003acc <getADCValues+0x5e8>
 8003abc:	20010af4 	.word	0x20010af4
 8003ac0:	66666667 	.word	0x66666667
 8003ac4:	2000005c 	.word	0x2000005c
 8003ac8:	2000327c 	.word	0x2000327c
 8003acc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ade:	4b9c      	ldr	r3, [pc, #624]	; (8003d50 <getADCValues+0x86c>)
 8003ae0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ae8:	4b99      	ldr	r3, [pc, #612]	; (8003d50 <getADCValues+0x86c>)
 8003aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aec:	ee07 3a90 	vmov	s15, r3
 8003af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003af4:	4b96      	ldr	r3, [pc, #600]	; (8003d50 <getADCValues+0x86c>)
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afc:	4a95      	ldr	r2, [pc, #596]	; (8003d54 <getADCValues+0x870>)
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc12] = (avgADCCounterValues[Adc.adc12] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003b06:	4b92      	ldr	r3, [pc, #584]	; (8003d50 <getADCValues+0x86c>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b10:	4413      	add	r3, r2
 8003b12:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b1e:	4b8c      	ldr	r3, [pc, #560]	; (8003d50 <getADCValues+0x86c>)
 8003b20:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003b24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b28:	4b89      	ldr	r3, [pc, #548]	; (8003d50 <getADCValues+0x86c>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2c:	ee07 3a90 	vmov	s15, r3
 8003b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b34:	4b86      	ldr	r3, [pc, #536]	; (8003d50 <getADCValues+0x86c>)
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3c:	4a85      	ldr	r2, [pc, #532]	; (8003d54 <getADCValues+0x870>)
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc13] = (avgADCCounterValues[Adc.adc13] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003b46:	4b82      	ldr	r3, [pc, #520]	; (8003d50 <getADCValues+0x86c>)
 8003b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b50:	4413      	add	r3, r2
 8003b52:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b5e:	4b7c      	ldr	r3, [pc, #496]	; (8003d50 <getADCValues+0x86c>)
 8003b60:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003b64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b68:	4b79      	ldr	r3, [pc, #484]	; (8003d50 <getADCValues+0x86c>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	ee07 3a90 	vmov	s15, r3
 8003b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b74:	4b76      	ldr	r3, [pc, #472]	; (8003d50 <getADCValues+0x86c>)
 8003b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7c:	4a75      	ldr	r2, [pc, #468]	; (8003d54 <getADCValues+0x870>)
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc14] = (avgADCCounterValues[Adc.adc14] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003b86:	4b72      	ldr	r3, [pc, #456]	; (8003d50 <getADCValues+0x86c>)
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b90:	4413      	add	r3, r2
 8003b92:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b9e:	4b6c      	ldr	r3, [pc, #432]	; (8003d50 <getADCValues+0x86c>)
 8003ba0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ba8:	4b69      	ldr	r3, [pc, #420]	; (8003d50 <getADCValues+0x86c>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	ee07 3a90 	vmov	s15, r3
 8003bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bb4:	4b66      	ldr	r3, [pc, #408]	; (8003d50 <getADCValues+0x86c>)
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbc:	4a65      	ldr	r2, [pc, #404]	; (8003d54 <getADCValues+0x870>)
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc15] = (avgADCCounterValues[Adc.adc15] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003bc6:	4b62      	ldr	r3, [pc, #392]	; (8003d50 <getADCValues+0x86c>)
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bde:	4b5c      	ldr	r3, [pc, #368]	; (8003d50 <getADCValues+0x86c>)
 8003be0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003be8:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <getADCValues+0x86c>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	ee07 3a90 	vmov	s15, r3
 8003bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bf4:	4b56      	ldr	r3, [pc, #344]	; (8003d50 <getADCValues+0x86c>)
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfc:	4a55      	ldr	r2, [pc, #340]	; (8003d54 <getADCValues+0x870>)
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	edc3 7a00 	vstr	s15, [r3]
	//for other adc inputs, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (2)
	adcValues[Adc.spareSpiADC] = (avgADCCounterValues[Adc.spareSpiADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003c06:	4b52      	ldr	r3, [pc, #328]	; (8003d50 <getADCValues+0x86c>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c10:	4413      	add	r3, r2
 8003c12:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c1e:	4b4c      	ldr	r3, [pc, #304]	; (8003d50 <getADCValues+0x86c>)
 8003c20:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c28:	4b49      	ldr	r3, [pc, #292]	; (8003d50 <getADCValues+0x86c>)
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2c:	ee07 3a90 	vmov	s15, r3
 8003c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c34:	4b46      	ldr	r3, [pc, #280]	; (8003d50 <getADCValues+0x86c>)
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3c:	4a45      	ldr	r2, [pc, #276]	; (8003d54 <getADCValues+0x870>)
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareUartADC] = (avgADCCounterValues[Adc.spareUartADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003c46:	4b42      	ldr	r3, [pc, #264]	; (8003d50 <getADCValues+0x86c>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c50:	4413      	add	r3, r2
 8003c52:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c56:	ee07 3a90 	vmov	s15, r3
 8003c5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c5e:	4b3c      	ldr	r3, [pc, #240]	; (8003d50 <getADCValues+0x86c>)
 8003c60:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c68:	4b39      	ldr	r3, [pc, #228]	; (8003d50 <getADCValues+0x86c>)
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6c:	ee07 3a90 	vmov	s15, r3
 8003c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c74:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <getADCValues+0x86c>)
 8003c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7c:	4a35      	ldr	r2, [pc, #212]	; (8003d54 <getADCValues+0x870>)
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.configADC] = (avgADCCounterValues[Adc.configADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003c86:	4b32      	ldr	r3, [pc, #200]	; (8003d50 <getADCValues+0x86c>)
 8003c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c90:	4413      	add	r3, r2
 8003c92:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c9e:	4b2c      	ldr	r3, [pc, #176]	; (8003d50 <getADCValues+0x86c>)
 8003ca0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ca8:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <getADCValues+0x86c>)
 8003caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cac:	ee07 3a90 	vmov	s15, r3
 8003cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cb4:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <getADCValues+0x86c>)
 8003cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cbc:	4a25      	ldr	r2, [pc, #148]	; (8003d54 <getADCValues+0x870>)
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.zionADC] = (avgADCCounterValues[Adc.zionADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003cc6:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <getADCValues+0x86c>)
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003cd6:	ee07 3a90 	vmov	s15, r3
 8003cda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cde:	4b1c      	ldr	r3, [pc, #112]	; (8003d50 <getADCValues+0x86c>)
 8003ce0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ce8:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <getADCValues+0x86c>)
 8003cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cf4:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <getADCValues+0x86c>)
 8003cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfc:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <getADCValues+0x870>)
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareI2cADC] = (avgADCCounterValues[Adc.spareI2cADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <getADCValues+0x86c>)
 8003d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d10:	4413      	add	r3, r2
 8003d12:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <getADCValues+0x86c>)
 8003d20:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <getADCValues+0x86c>)
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2c:	ee07 3a90 	vmov	s15, r3
 8003d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <getADCValues+0x86c>)
 8003d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3c:	4a05      	ldr	r2, [pc, #20]	; (8003d54 <getADCValues+0x870>)
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	edc3 7a00 	vstr	s15, [r3]
	return adcValues;
 8003d46:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <getADCValues+0x870>)
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3778      	adds	r7, #120	; 0x78
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	2000005c 	.word	0x2000005c
 8003d54:	2000327c 	.word	0x2000327c

08003d58 <setVoltageMux>:

void setVoltageMux(int comChannel, int voltageChannel, int clear){
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
	uint8_t dataWriteCOMA[1];
	uint8_t dataWriteCOMB[1];
	int x;
	if((comChannel) & (!clear)){
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	bf0c      	ite	eq
 8003d6a:	2301      	moveq	r3, #1
 8003d6c:	2300      	movne	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d006      	beq.n	8003d88 <setVoltageMux+0x30>
		dataWriteCOMA[0] = socI2cVoltageMux.clearSwitches;
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <setVoltageMux+0x90>)
 8003d7c:	7cdb      	ldrb	r3, [r3, #19]
 8003d7e:	763b      	strb	r3, [r7, #24]
		dataWriteCOMB[0]= voltageChannel;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	753b      	strb	r3, [r7, #20]
 8003d86:	e011      	b.n	8003dac <setVoltageMux+0x54>
	}
	else if((!comChannel) & (!clear)){
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <setVoltageMux+0x48>
		dataWriteCOMA[0] = voltageChannel;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	763b      	strb	r3, [r7, #24]
		dataWriteCOMB[0]= socI2cVoltageMux.clearSwitches;
 8003d98:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <setVoltageMux+0x90>)
 8003d9a:	7cdb      	ldrb	r3, [r3, #19]
 8003d9c:	753b      	strb	r3, [r7, #20]
 8003d9e:	e005      	b.n	8003dac <setVoltageMux+0x54>
	}
	else{
		dataWriteCOMA[0] = socI2cVoltageMux.clearSwitches;
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <setVoltageMux+0x90>)
 8003da2:	7cdb      	ldrb	r3, [r3, #19]
 8003da4:	763b      	strb	r3, [r7, #24]
		dataWriteCOMB[0]= socI2cVoltageMux.clearSwitches;
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <setVoltageMux+0x90>)
 8003da8:	7cdb      	ldrb	r3, [r3, #19]
 8003daa:	753b      	strb	r3, [r7, #20]
	}
	x = writeI2CRegister(socI2cVoltageMux.address, socI2cVoltageMux.CMD_A_reg, dataWriteCOMA,sizeof(dataWriteCOMA), socI2cVoltageMux.i2cBank);
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <setVoltageMux+0x90>)
 8003dae:	7818      	ldrb	r0, [r3, #0]
 8003db0:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <setVoltageMux+0x90>)
 8003db2:	7859      	ldrb	r1, [r3, #1]
 8003db4:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <setVoltageMux+0x90>)
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f107 0218 	add.w	r2, r7, #24
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f7ff f95c 	bl	800307c <writeI2CRegister>
 8003dc4:	61f8      	str	r0, [r7, #28]
	x = writeI2CRegister(socI2cVoltageMux.address, socI2cVoltageMux.CMD_B_reg, dataWriteCOMB,sizeof(dataWriteCOMB), socI2cVoltageMux.i2cBank);
 8003dc6:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <setVoltageMux+0x90>)
 8003dc8:	7818      	ldrb	r0, [r3, #0]
 8003dca:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <setVoltageMux+0x90>)
 8003dcc:	7899      	ldrb	r1, [r3, #2]
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <setVoltageMux+0x90>)
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f107 0214 	add.w	r2, r7, #20
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f7ff f94f 	bl	800307c <writeI2CRegister>
 8003dde:	61f8      	str	r0, [r7, #28]
}
 8003de0:	bf00      	nop
 8003de2:	3720      	adds	r7, #32
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20000014 	.word	0x20000014

08003dec <HAL_ADC_ConvCpltCallback>:
//// Called when first half of buffer is filled
//void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
//}
//
//// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <startHeartbeat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startHeartbeat */
void startHeartbeat(void *argument)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8003e08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e0c:	4803      	ldr	r0, [pc, #12]	; (8003e1c <startHeartbeat+0x1c>)
 8003e0e:	f004 ffde 	bl	8008dce <HAL_GPIO_TogglePin>
	  osDelay(500);
 8003e12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e16:	f009 fcd3 	bl	800d7c0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8003e1a:	e7f5      	b.n	8003e08 <startHeartbeat+0x8>
 8003e1c:	40022000 	.word	0x40022000

08003e20 <startADCRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCRead */
void startADCRead(void *argument)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCRead */
  /* Infinite loop */
  for(;;)
  {
	  //empty out the data ready variables and the adc3_bufs
	memset(adcRestart,0,sizeof(adcRestart));
 8003e28:	2203      	movs	r2, #3
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4815      	ldr	r0, [pc, #84]	; (8003e84 <startADCRead+0x64>)
 8003e2e:	f00c fa82 	bl	8010336 <memset>
	memset(adc1_buf, 0, sizeof(adc1_buf));
 8003e32:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e36:	2100      	movs	r1, #0
 8003e38:	4813      	ldr	r0, [pc, #76]	; (8003e88 <startADCRead+0x68>)
 8003e3a:	f00c fa7c 	bl	8010336 <memset>
	memset(adc2_buf, 0, sizeof(adc2_buf));
 8003e3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e42:	2100      	movs	r1, #0
 8003e44:	4811      	ldr	r0, [pc, #68]	; (8003e8c <startADCRead+0x6c>)
 8003e46:	f00c fa76 	bl	8010336 <memset>
	memset(adc3_buf, 0, sizeof(adc3_buf));
 8003e4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e4e:	2100      	movs	r1, #0
 8003e50:	480f      	ldr	r0, [pc, #60]	; (8003e90 <startADCRead+0x70>)
 8003e52:	f00c fa70 	bl	8010336 <memset>
	//restart the DMAs.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	490b      	ldr	r1, [pc, #44]	; (8003e88 <startADCRead+0x68>)
 8003e5c:	480d      	ldr	r0, [pc, #52]	; (8003e94 <startADCRead+0x74>)
 8003e5e:	f003 fccb 	bl	80077f8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4909      	ldr	r1, [pc, #36]	; (8003e8c <startADCRead+0x6c>)
 8003e68:	480b      	ldr	r0, [pc, #44]	; (8003e98 <startADCRead+0x78>)
 8003e6a:	f003 fcc5 	bl	80077f8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8003e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e72:	4907      	ldr	r1, [pc, #28]	; (8003e90 <startADCRead+0x70>)
 8003e74:	4809      	ldr	r0, [pc, #36]	; (8003e9c <startADCRead+0x7c>)
 8003e76:	f003 fcbf 	bl	80077f8 <HAL_ADC_Start_DMA>
    osDelay(600);
 8003e7a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003e7e:	f009 fc9f 	bl	800d7c0 <osDelay>
  {
 8003e82:	e7d1      	b.n	8003e28 <startADCRead+0x8>
 8003e84:	20010ab0 	.word	0x20010ab0
 8003e88:	20010af4 	.word	0x20010af4
 8003e8c:	200218a4 	.word	0x200218a4
 8003e90:	200133ac 	.word	0x200133ac
 8003e94:	20013284 	.word	0x20013284
 8003e98:	2001056c 	.word	0x2001056c
 8003e9c:	200132d0 	.word	0x200132d0

08003ea0 <GetDaScreenBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetDaScreenBlink */
void GetDaScreenBlink(void *argument)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDaScreenBlink */
  /* Infinite loop */
	 int x = 0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
	 float *adcValues;
	 HAL_StatusTypeDef ret;
	 initializeDisplay();
 8003eac:	f000 f9d2 	bl	8004254 <initializeDisplay>
	 uint32_t ulNotifiedValue;
	 uint8_t button_val = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	74fb      	strb	r3, [r7, #19]
	 uint8_t menu_val = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	74bb      	strb	r3, [r7, #18]
	 uint8_t running_menu = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	747b      	strb	r3, [r7, #17]
	 int *readI2c;
	   for(;;)
	   {
	 	  ulNotifiedValue = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]
	 	  xTaskNotifyWait(NOTIFY_NOCLEAR, NOTIFY_CLEARALL, &ulNotifiedValue, portMAX_DELAY);
 8003ec0:	f107 020c 	add.w	r2, r7, #12
 8003ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec8:	21ff      	movs	r1, #255	; 0xff
 8003eca:	2000      	movs	r0, #0
 8003ecc:	f00b f93a 	bl	800f144 <xTaskNotifyWait>
	 	  // button press decode
	 	  button_val = (ulNotifiedValue & NOTIFY_BTN_MASK);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	74fb      	strb	r3, [r7, #19]
	 	  menu_val = ((ulNotifiedValue & NOTIFY_MENU_MASK) >> NOTIFY_MENU_BIT);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	74bb      	strb	r3, [r7, #18]
	 	  running_menu = ((ulNotifiedValue & NOTIFY_RUN_MENU_MASK) >> NOTIFY_MENU_RUN_BIT);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	0a1b      	lsrs	r3, r3, #8
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	747b      	strb	r3, [r7, #17]
	 	  setVoltageMux(COMA,socI2cVoltageMux.enableSW2,0);
 8003ef2:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <GetDaScreenBlink+0xcc>)
 8003ef4:	791b      	ldrb	r3, [r3, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	4619      	mov	r1, r3
 8003efa:	2000      	movs	r0, #0
 8003efc:	f7ff ff2c 	bl	8003d58 <setVoltageMux>
	 //	  printf("highlighed menu: %d\n\r", menu_val);
	 //	  printf("button_press: %d\r\n", button_val);

	 	  // If the BACK button was pressed, just run the SEL button case with the previous menu

		  switch(running_menu)
 8003f00:	7c7b      	ldrb	r3, [r7, #17]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d82d      	bhi.n	8003f64 <GetDaScreenBlink+0xc4>
 8003f08:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <GetDaScreenBlink+0x70>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003f35 	.word	0x08003f35
 8003f14:	08003f21 	.word	0x08003f21
 8003f18:	08003f45 	.word	0x08003f45
 8003f1c:	08003f55 	.word	0x08003f55
		  {
		  case BOOT_MENU:
		  {
			  printf("BOOT_MENU\r\n");
 8003f20:	4813      	ldr	r0, [pc, #76]	; (8003f70 <GetDaScreenBlink+0xd0>)
 8003f22:	f00d f87d 	bl	8011020 <puts>
			  drawBootMenu(menu_val, button_val, running_menu);
 8003f26:	7cbb      	ldrb	r3, [r7, #18]
 8003f28:	7c7a      	ldrb	r2, [r7, #17]
 8003f2a:	7cf9      	ldrb	r1, [r7, #19]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f002 f8f9 	bl	8006124 <drawBootMenu>
			  //uartTransmitChar("switch BOOT_MENU\r\n",7);
			  break;
 8003f32:	e017      	b.n	8003f64 <GetDaScreenBlink+0xc4>
		  }
		  case MAIN_MENU:
		  {
			  printf("MAIN_MENU\r\n");
 8003f34:	480f      	ldr	r0, [pc, #60]	; (8003f74 <GetDaScreenBlink+0xd4>)
 8003f36:	f00d f873 	bl	8011020 <puts>
			  drawMainMenu(menu_val);
 8003f3a:	7cbb      	ldrb	r3, [r7, #18]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 f9b3 	bl	80042a8 <drawMainMenu>
			  //uartTransmitChar("switch MAIN_MENU\r\n",7);
			  break;
 8003f42:	e00f      	b.n	8003f64 <GetDaScreenBlink+0xc4>
		  }
		  case STATUS_MENU:
		  {
			  printf("STATUS_MENU\r\n");
 8003f44:	480c      	ldr	r0, [pc, #48]	; (8003f78 <GetDaScreenBlink+0xd8>)
 8003f46:	f00d f86b 	bl	8011020 <puts>
			  drawStatusMenu(menu_val);
 8003f4a:	7cbb      	ldrb	r3, [r7, #18]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fc57 	bl	8004800 <drawStatusMenu>
			  //uartTransmitChar("switch STATUS_MENU\r\n",7);
			  break;
 8003f52:	e007      	b.n	8003f64 <GetDaScreenBlink+0xc4>
		  }
		  case SYSTEM_INFO_MENU:
		  {
			  printf("SYSTEM INFO MENU\r\n");
 8003f54:	4809      	ldr	r0, [pc, #36]	; (8003f7c <GetDaScreenBlink+0xdc>)
 8003f56:	f00d f863 	bl	8011020 <puts>
			  //uartTransmitChar("switch SYSTEM INFO_MENU\r\n",7);
			  drawSystemInfoMenu(menu_val);
 8003f5a:	7cbb      	ldrb	r3, [r7, #18]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f001 fdbb 	bl	8005ad8 <drawSystemInfoMenu>
			  break;
 8003f62:	bf00      	nop
		  }
		  }
	 	  osDelay(100);
 8003f64:	2064      	movs	r0, #100	; 0x64
 8003f66:	f009 fc2b 	bl	800d7c0 <osDelay>
	 	  ulNotifiedValue = 0;
 8003f6a:	e7a7      	b.n	8003ebc <GetDaScreenBlink+0x1c>
 8003f6c:	20000014 	.word	0x20000014
 8003f70:	080143dc 	.word	0x080143dc
 8003f74:	080143e8 	.word	0x080143e8
 8003f78:	080143f4 	.word	0x080143f4
 8003f7c:	08014404 	.word	0x08014404

08003f80 <startGpioInputRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGpioInputRead */
void startGpioInputRead(void *argument)
{
 8003f80:	b590      	push	{r4, r7, lr}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGpioInputRead */
  /* Infinite loop */
  for(;;)
  {
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8003f88:	4b42      	ldr	r3, [pc, #264]	; (8004094 <startGpioInputRead+0x114>)
 8003f8a:	681c      	ldr	r4, [r3, #0]
 8003f8c:	2180      	movs	r1, #128	; 0x80
 8003f8e:	4842      	ldr	r0, [pc, #264]	; (8004098 <startGpioInputRead+0x118>)
 8003f90:	f004 feec 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003f94:	4603      	mov	r3, r0
 8003f96:	461a      	mov	r2, r3
 8003f98:	4b40      	ldr	r3, [pc, #256]	; (800409c <startGpioInputRead+0x11c>)
 8003f9a:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input1] = HAL_GPIO_ReadPin(UI_INPUT1_GPIO_Port,UI_INPUT1_Pin);
 8003f9c:	4b3d      	ldr	r3, [pc, #244]	; (8004094 <startGpioInputRead+0x114>)
 8003f9e:	685c      	ldr	r4, [r3, #4]
 8003fa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fa4:	483e      	ldr	r0, [pc, #248]	; (80040a0 <startGpioInputRead+0x120>)
 8003fa6:	f004 fee1 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003faa:	4603      	mov	r3, r0
 8003fac:	461a      	mov	r2, r3
 8003fae:	4b3b      	ldr	r3, [pc, #236]	; (800409c <startGpioInputRead+0x11c>)
 8003fb0:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input2] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT2_Pin);
 8003fb2:	4b38      	ldr	r3, [pc, #224]	; (8004094 <startGpioInputRead+0x114>)
 8003fb4:	689c      	ldr	r4, [r3, #8]
 8003fb6:	2110      	movs	r1, #16
 8003fb8:	483a      	ldr	r0, [pc, #232]	; (80040a4 <startGpioInputRead+0x124>)
 8003fba:	f004 fed7 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4b36      	ldr	r3, [pc, #216]	; (800409c <startGpioInputRead+0x11c>)
 8003fc4:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input3] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT3_Pin);
 8003fc6:	4b33      	ldr	r3, [pc, #204]	; (8004094 <startGpioInputRead+0x114>)
 8003fc8:	68dc      	ldr	r4, [r3, #12]
 8003fca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fce:	4835      	ldr	r0, [pc, #212]	; (80040a4 <startGpioInputRead+0x124>)
 8003fd0:	f004 fecc 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4b30      	ldr	r3, [pc, #192]	; (800409c <startGpioInputRead+0x11c>)
 8003fda:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input4] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT4_Pin);
 8003fdc:	4b2d      	ldr	r3, [pc, #180]	; (8004094 <startGpioInputRead+0x114>)
 8003fde:	691c      	ldr	r4, [r3, #16]
 8003fe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fe4:	482f      	ldr	r0, [pc, #188]	; (80040a4 <startGpioInputRead+0x124>)
 8003fe6:	f004 fec1 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003fea:	4603      	mov	r3, r0
 8003fec:	461a      	mov	r2, r3
 8003fee:	4b2b      	ldr	r3, [pc, #172]	; (800409c <startGpioInputRead+0x11c>)
 8003ff0:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input5] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT5_Pin);
 8003ff2:	4b28      	ldr	r3, [pc, #160]	; (8004094 <startGpioInputRead+0x114>)
 8003ff4:	695c      	ldr	r4, [r3, #20]
 8003ff6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ffa:	482a      	ldr	r0, [pc, #168]	; (80040a4 <startGpioInputRead+0x124>)
 8003ffc:	f004 feb6 	bl	8008d6c <HAL_GPIO_ReadPin>
 8004000:	4603      	mov	r3, r0
 8004002:	461a      	mov	r2, r3
 8004004:	4b25      	ldr	r3, [pc, #148]	; (800409c <startGpioInputRead+0x11c>)
 8004006:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input6] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT6_Pin);
 8004008:	4b22      	ldr	r3, [pc, #136]	; (8004094 <startGpioInputRead+0x114>)
 800400a:	699c      	ldr	r4, [r3, #24]
 800400c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004010:	4824      	ldr	r0, [pc, #144]	; (80040a4 <startGpioInputRead+0x124>)
 8004012:	f004 feab 	bl	8008d6c <HAL_GPIO_ReadPin>
 8004016:	4603      	mov	r3, r0
 8004018:	461a      	mov	r2, r3
 800401a:	4b20      	ldr	r3, [pc, #128]	; (800409c <startGpioInputRead+0x11c>)
 800401c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input7] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT7_Pin);
 800401e:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <startGpioInputRead+0x114>)
 8004020:	69dc      	ldr	r4, [r3, #28]
 8004022:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004026:	481f      	ldr	r0, [pc, #124]	; (80040a4 <startGpioInputRead+0x124>)
 8004028:	f004 fea0 	bl	8008d6c <HAL_GPIO_ReadPin>
 800402c:	4603      	mov	r3, r0
 800402e:	461a      	mov	r2, r3
 8004030:	4b1a      	ldr	r3, [pc, #104]	; (800409c <startGpioInputRead+0x11c>)
 8004032:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input8] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT8_Pin);
 8004034:	4b17      	ldr	r3, [pc, #92]	; (8004094 <startGpioInputRead+0x114>)
 8004036:	6a1c      	ldr	r4, [r3, #32]
 8004038:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800403c:	4819      	ldr	r0, [pc, #100]	; (80040a4 <startGpioInputRead+0x124>)
 800403e:	f004 fe95 	bl	8008d6c <HAL_GPIO_ReadPin>
 8004042:	4603      	mov	r3, r0
 8004044:	461a      	mov	r2, r3
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <startGpioInputRead+0x11c>)
 8004048:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input9] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT9_Pin);
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <startGpioInputRead+0x114>)
 800404c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800404e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004052:	4814      	ldr	r0, [pc, #80]	; (80040a4 <startGpioInputRead+0x124>)
 8004054:	f004 fe8a 	bl	8008d6c <HAL_GPIO_ReadPin>
 8004058:	4603      	mov	r3, r0
 800405a:	461a      	mov	r2, r3
 800405c:	4b0f      	ldr	r3, [pc, #60]	; (800409c <startGpioInputRead+0x11c>)
 800405e:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input10] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT10_Pin);
 8004060:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <startGpioInputRead+0x114>)
 8004062:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004068:	480e      	ldr	r0, [pc, #56]	; (80040a4 <startGpioInputRead+0x124>)
 800406a:	f004 fe7f 	bl	8008d6c <HAL_GPIO_ReadPin>
 800406e:	4603      	mov	r3, r0
 8004070:	461a      	mov	r2, r3
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <startGpioInputRead+0x11c>)
 8004074:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input11] = HAL_GPIO_ReadPin(UI_INPUT11_GPIO_Port,UI_INPUT11_Pin);
 8004076:	4b07      	ldr	r3, [pc, #28]	; (8004094 <startGpioInputRead+0x114>)
 8004078:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800407a:	2108      	movs	r1, #8
 800407c:	480a      	ldr	r0, [pc, #40]	; (80040a8 <startGpioInputRead+0x128>)
 800407e:	f004 fe75 	bl	8008d6c <HAL_GPIO_ReadPin>
 8004082:	4603      	mov	r3, r0
 8004084:	461a      	mov	r2, r3
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <startGpioInputRead+0x11c>)
 8004088:	551a      	strb	r2, [r3, r4]
	  osDelay(950);
 800408a:	f240 30b6 	movw	r0, #950	; 0x3b6
 800408e:	f009 fb97 	bl	800d7c0 <osDelay>
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8004092:	e779      	b.n	8003f88 <startGpioInputRead+0x8>
 8004094:	2000002c 	.word	0x2000002c
 8004098:	40020400 	.word	0x40020400
 800409c:	20010560 	.word	0x20010560
 80040a0:	40020800 	.word	0x40020800
 80040a4:	40020c00 	.word	0x40020c00
 80040a8:	40021000 	.word	0x40021000

080040ac <startNavigationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startNavigationTask */
void startNavigationTask(void *argument)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startNavigationTask */
	uint8_t menu_highlight = MENU_TOP;	// variable indicates what menu item is currently being highlighted
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
	uint8_t	menu_run = MAIN_MENU;		// variable to track what menu is currently running
 80040b8:	2301      	movs	r3, #1
 80040ba:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_menu = menu_run;		// variable to track what the previous menu running was, this is used for the BACK button
 80040bc:	7bbb      	ldrb	r3, [r7, #14]
 80040be:	737b      	strb	r3, [r7, #13]
	uint8_t menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 80040c0:	2303      	movs	r3, #3
 80040c2:	733b      	strb	r3, [r7, #12]
	uint8_t prev_menu_highlight = menu_highlight; //variable to track previous menu highlight
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	72fb      	strb	r3, [r7, #11]
	// Clear button flags here

  /* Infinite loop */
  for(;;)
  {
	switch(inputButtonSet)
 80040c8:	4b4f      	ldr	r3, [pc, #316]	; (8004208 <startNavigationTask+0x15c>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d863      	bhi.n	800419a <startNavigationTask+0xee>
 80040d2:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <startNavigationTask+0x2c>)
 80040d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d8:	080040e9 	.word	0x080040e9
 80040dc:	08004113 	.word	0x08004113
 80040e0:	0800413f 	.word	0x0800413f
 80040e4:	08004165 	.word	0x08004165
	{
	case UP:
	{
		if (menu_highlight == MENU_TOP)
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d064      	beq.n	80041b8 <startNavigationTask+0x10c>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight - 1;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
			// task notify the display task with UP and current highlighted item
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu indicator highlight flags
			// [8:11]: currently running menu flags
			xTaskNotify(DatScreenBlinkHandle, (UP | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80040f4:	4b45      	ldr	r3, [pc, #276]	; (800420c <startNavigationTask+0x160>)
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	f043 0201 	orr.w	r2, r3, #1
 8004100:	7bbb      	ldrb	r3, [r7, #14]
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	4313      	orrs	r3, r2
 8004106:	4619      	mov	r1, r3
 8004108:	2300      	movs	r3, #0
 800410a:	2204      	movs	r2, #4
 800410c:	f00b f874 	bl	800f1f8 <xTaskGenericNotify>
		}
		break;
 8004110:	e052      	b.n	80041b8 <startNavigationTask+0x10c>
	}
	case DWN:
	{
		if (menu_highlight >= menu_Max_Items)
 8004112:	7bfa      	ldrb	r2, [r7, #15]
 8004114:	7b3b      	ldrb	r3, [r7, #12]
 8004116:	429a      	cmp	r2, r3
 8004118:	d250      	bcs.n	80041bc <startNavigationTask+0x110>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight + 1;
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	3301      	adds	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu selection flags
			// [8:11]: currently running menu flags
			// [12:15]: previously running menu flags
			xTaskNotify(DatScreenBlinkHandle, (DWN | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004120:	4b3a      	ldr	r3, [pc, #232]	; (800420c <startNavigationTask+0x160>)
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	f043 0202 	orr.w	r2, r3, #2
 800412c:	7bbb      	ldrb	r3, [r7, #14]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	4313      	orrs	r3, r2
 8004132:	4619      	mov	r1, r3
 8004134:	2300      	movs	r3, #0
 8004136:	2204      	movs	r2, #4
 8004138:	f00b f85e 	bl	800f1f8 <xTaskGenericNotify>
		}
		break;
 800413c:	e03e      	b.n	80041bc <startNavigationTask+0x110>
	}
	case BACK:
	{
		menu_run = prev_menu;
 800413e:	7b7b      	ldrb	r3, [r7, #13]
 8004140:	73bb      	strb	r3, [r7, #14]
		menu_highlight = prev_menu_highlight; //set the highlight back to where it was for the previous menu.
 8004142:	7afb      	ldrb	r3, [r7, #11]
 8004144:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (BACK | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004146:	4b31      	ldr	r3, [pc, #196]	; (800420c <startNavigationTask+0x160>)
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	f043 0203 	orr.w	r2, r3, #3
 8004152:	7bbb      	ldrb	r3, [r7, #14]
 8004154:	021b      	lsls	r3, r3, #8
 8004156:	4313      	orrs	r3, r2
 8004158:	4619      	mov	r1, r3
 800415a:	2300      	movs	r3, #0
 800415c:	2204      	movs	r2, #4
 800415e:	f00b f84b 	bl	800f1f8 <xTaskGenericNotify>
		break;
 8004162:	e02c      	b.n	80041be <startNavigationTask+0x112>
	}
	case SEL:
	{
		if(menu_run==MAIN_MENU){
 8004164:	7bbb      	ldrb	r3, [r7, #14]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d108      	bne.n	800417c <startNavigationTask+0xd0>
			prev_menu = menu_run;		// save currently running menu for BACK button
 800416a:	7bbb      	ldrb	r3, [r7, #14]
 800416c:	737b      	strb	r3, [r7, #13]
			menu_run = menu_highlight+1;	// update the currently running menu to what the user SELECTED. Requires +1 to match with menu values
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	3301      	adds	r3, #1
 8004172:	73bb      	strb	r3, [r7, #14]
			prev_menu_highlight = menu_highlight; //keep track of the previous menu's highlight for when back is pressed
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	72fb      	strb	r3, [r7, #11]
			menu_highlight=MENU_TOP; //reset the menu highlight for the next menu
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (SEL | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 800417c:	4b23      	ldr	r3, [pc, #140]	; (800420c <startNavigationTask+0x160>)
 800417e:	6818      	ldr	r0, [r3, #0]
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	f043 0204 	orr.w	r2, r3, #4
 8004188:	7bbb      	ldrb	r3, [r7, #14]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	4313      	orrs	r3, r2
 800418e:	4619      	mov	r1, r3
 8004190:	2300      	movs	r3, #0
 8004192:	2204      	movs	r2, #4
 8004194:	f00b f830 	bl	800f1f8 <xTaskGenericNotify>
		break;
 8004198:	e011      	b.n	80041be <startNavigationTask+0x112>
	}
	default:
		// task notify the display task with no button press.  Just refresh the current running menu.
		xTaskNotify(DatScreenBlinkHandle, (NO_BTN_PRESS | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 800419a:	4b1c      	ldr	r3, [pc, #112]	; (800420c <startNavigationTask+0x160>)
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	f043 0205 	orr.w	r2, r3, #5
 80041a6:	7bbb      	ldrb	r3, [r7, #14]
 80041a8:	021b      	lsls	r3, r3, #8
 80041aa:	4313      	orrs	r3, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	2300      	movs	r3, #0
 80041b0:	2204      	movs	r2, #4
 80041b2:	f00b f821 	bl	800f1f8 <xTaskGenericNotify>
		break;
 80041b6:	e002      	b.n	80041be <startNavigationTask+0x112>
		break;
 80041b8:	bf00      	nop
 80041ba:	e000      	b.n	80041be <startNavigationTask+0x112>
		break;
 80041bc:	bf00      	nop
	}
	//initialize the max indicator for each menu
	switch(menu_run){
 80041be:	7bbb      	ldrb	r3, [r7, #14]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	d816      	bhi.n	80041f4 <startNavigationTask+0x148>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <startNavigationTask+0x120>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	080041e3 	.word	0x080041e3
 80041d0:	080041dd 	.word	0x080041dd
 80041d4:	080041e9 	.word	0x080041e9
 80041d8:	080041ef 	.word	0x080041ef

	case BOOT_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 80041dc:	2305      	movs	r3, #5
 80041de:	733b      	strb	r3, [r7, #12]
		break;
 80041e0:	e00b      	b.n	80041fa <startNavigationTask+0x14e>
	}
	case MAIN_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 80041e2:	2303      	movs	r3, #3
 80041e4:	733b      	strb	r3, [r7, #12]
		break;
 80041e6:	e008      	b.n	80041fa <startNavigationTask+0x14e>
	}
	case STATUS_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_STATUS_MENU;
 80041e8:	2303      	movs	r3, #3
 80041ea:	733b      	strb	r3, [r7, #12]
		break;
 80041ec:	e005      	b.n	80041fa <startNavigationTask+0x14e>
	}
	case SYSTEM_INFO_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_SYSTEM_INFO_MENU;
 80041ee:	2302      	movs	r3, #2
 80041f0:	733b      	strb	r3, [r7, #12]
		break;
 80041f2:	e002      	b.n	80041fa <startNavigationTask+0x14e>
	}
	default:
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 80041f4:	2305      	movs	r3, #5
 80041f6:	733b      	strb	r3, [r7, #12]
		break;
 80041f8:	bf00      	nop
	}
	inputButtonSet = NO_BTN_PRESS;
 80041fa:	4b03      	ldr	r3, [pc, #12]	; (8004208 <startNavigationTask+0x15c>)
 80041fc:	2205      	movs	r2, #5
 80041fe:	701a      	strb	r2, [r3, #0]
    osDelay(200);
 8004200:	20c8      	movs	r0, #200	; 0xc8
 8004202:	f009 fadd 	bl	800d7c0 <osDelay>
	switch(inputButtonSet)
 8004206:	e75f      	b.n	80040c8 <startNavigationTask+0x1c>
 8004208:	200000bc 	.word	0x200000bc
 800420c:	20024074 	.word	0x20024074

08004210 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004222:	f003 f921 	bl	8007468 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40001000 	.word	0x40001000

08004234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004238:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800423a:	e7fe      	b.n	800423a <Error_Handler+0x6>

0800423c <SMLCD_Enable>:

#define SMLCD_SPI_PORT             hspi4
// Public macros and functions

// Enable the display (using DISP pin)
__STATIC_INLINE void SMLCD_Enable(void) {
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
	SMLCD_DISP_H;
 8004240:	2201      	movs	r2, #1
 8004242:	2102      	movs	r1, #2
 8004244:	4802      	ldr	r0, [pc, #8]	; (8004250 <SMLCD_Enable+0x14>)
 8004246:	f004 fda9 	bl	8008d9c <HAL_GPIO_WritePin>
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40022400 	.word	0x40022400

08004254 <initializeDisplay>:
#include "menu.h"

int previousMenu = 0;
float displayAdcValues[21];

void initializeDisplay(){
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b099      	sub	sp, #100	; 0x64
 8004258:	af16      	add	r7, sp, #88	; 0x58
	SMLCD_InitGPIO();
 800425a:	f7fc f9dd 	bl	8000618 <SMLCD_InitGPIO>
	SMLCD_Init(hspi4);
 800425e:	4c10      	ldr	r4, [pc, #64]	; (80042a0 <initializeDisplay+0x4c>)
 8004260:	4668      	mov	r0, sp
 8004262:	f104 0310 	add.w	r3, r4, #16
 8004266:	2254      	movs	r2, #84	; 0x54
 8004268:	4619      	mov	r1, r3
 800426a:	f00c f859 	bl	8010320 <memcpy>
 800426e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004272:	f7fc f9f1 	bl	8000658 <SMLCD_Init>
	SMLCD_Enable();
 8004276:	f7ff ffe1 	bl	800423c <SMLCD_Enable>
	SMLCD_Clear();
 800427a:	f7fc fa0d 	bl	8000698 <SMLCD_Clear>
#define ORI 0
	uint8_t ori;
	if (ORI == 0){
		ori = LCD_ORIENT_NORMAL;
 800427e:	2301      	movs	r3, #1
 8004280:	71fb      	strb	r3, [r7, #7]
	}
	SMLCD_Orientation(ori);
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	4618      	mov	r0, r3
 8004286:	f7fc fb49 	bl	800091c <SMLCD_Orientation>
	LCD_Clear();
 800428a:	f7fc fb6f 	bl	800096c <LCD_Clear>
	memset(displayAdcValues,0,sizeof(displayAdcValues));
 800428e:	2254      	movs	r2, #84	; 0x54
 8004290:	2100      	movs	r1, #0
 8004292:	4804      	ldr	r0, [pc, #16]	; (80042a4 <initializeDisplay+0x50>)
 8004294:	f00c f84f 	bl	8010336 <memset>
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	bd90      	pop	{r4, r7, pc}
 80042a0:	20010340 	.word	0x20010340
 80042a4:	2002407c 	.word	0x2002407c

080042a8 <drawMainMenu>:

void drawMainMenu(int indicator){
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	int i,j;
	previousMenu=0;
 80042b0:	4b9a      	ldr	r3, [pc, #616]	; (800451c <drawMainMenu+0x274>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 80042b6:	f7fc fb59 	bl	800096c <LCD_Clear>
	LCD_PixelMode = LCD_PSET;
 80042ba:	4b99      	ldr	r3, [pc, #612]	; (8004520 <drawMainMenu+0x278>)
 80042bc:	2200      	movs	r2, #0
 80042be:	701a      	strb	r2, [r3, #0]
	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 80042c0:	4b98      	ldr	r3, [pc, #608]	; (8004524 <drawMainMenu+0x27c>)
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	4b97      	ldr	r3, [pc, #604]	; (8004528 <drawMainMenu+0x280>)
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2100      	movs	r1, #0
 80042d2:	2000      	movs	r0, #0
 80042d4:	f7fc fd9c 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 80042d8:	4b92      	ldr	r3, [pc, #584]	; (8004524 <drawMainMenu+0x27c>)
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	3b03      	subs	r3, #3
 80042de:	b29a      	uxth	r2, r3
 80042e0:	4b91      	ldr	r3, [pc, #580]	; (8004528 <drawMainMenu+0x280>)
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	3b03      	subs	r3, #3
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2102      	movs	r1, #2
 80042ea:	2002      	movs	r0, #2
 80042ec:	f7fc fd90 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 80042f0:	230a      	movs	r3, #10
 80042f2:	60bb      	str	r3, [r7, #8]
	j  = 10;
 80042f4:	230a      	movs	r3, #10
 80042f6:	60fb      	str	r3, [r7, #12]
	i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	b298      	uxth	r0, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	b299      	uxth	r1, r3
 8004300:	4b8a      	ldr	r3, [pc, #552]	; (800452c <drawMainMenu+0x284>)
 8004302:	4a8b      	ldr	r2, [pc, #556]	; (8004530 <drawMainMenu+0x288>)
 8004304:	f7fd f912 	bl	800152c <LCD_PutStr>
 8004308:	4603      	mov	r3, r0
 800430a:	461a      	mov	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4413      	add	r3, r2
 8004310:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "So many!", fnt7x10);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	b298      	uxth	r0, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	b299      	uxth	r1, r3
 800431a:	4b84      	ldr	r3, [pc, #528]	; (800452c <drawMainMenu+0x284>)
 800431c:	4a85      	ldr	r2, [pc, #532]	; (8004534 <drawMainMenu+0x28c>)
 800431e:	f7fd f905 	bl	800152c <LCD_PutStr>
 8004322:	4603      	mov	r3, r0
 8004324:	461a      	mov	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4413      	add	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]
	i+=20;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	3314      	adds	r3, #20
 8004330:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	b298      	uxth	r0, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	b299      	uxth	r1, r3
 800433a:	4b7c      	ldr	r3, [pc, #496]	; (800452c <drawMainMenu+0x284>)
 800433c:	4a7e      	ldr	r2, [pc, #504]	; (8004538 <drawMainMenu+0x290>)
 800433e:	f7fd f8f5 	bl	800152c <LCD_PutStr>
 8004342:	4603      	mov	r3, r0
 8004344:	461a      	mov	r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4413      	add	r3, r2
 800434a:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "QED", fnt7x10);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	b298      	uxth	r0, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	b299      	uxth	r1, r3
 8004354:	4b75      	ldr	r3, [pc, #468]	; (800452c <drawMainMenu+0x284>)
 8004356:	4a79      	ldr	r2, [pc, #484]	; (800453c <drawMainMenu+0x294>)
 8004358:	f7fd f8e8 	bl	800152c <LCD_PutStr>
 800435c:	4603      	mov	r3, r0
 800435e:	461a      	mov	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4413      	add	r3, r2
 8004364:	60bb      	str	r3, [r7, #8]
	i  = 135;
 8004366:	2387      	movs	r3, #135	; 0x87
 8004368:	60bb      	str	r3, [r7, #8]
	j += 14;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	330e      	adds	r3, #14
 800436e:	60fb      	str	r3, [r7, #12]

	// Horizontal divider
	LCD_FillRect(2, j, scr_width - 94, j + 3);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	b299      	uxth	r1, r3
 8004374:	4b6b      	ldr	r3, [pc, #428]	; (8004524 <drawMainMenu+0x27c>)
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	3b5e      	subs	r3, #94	; 0x5e
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	b29b      	uxth	r3, r3
 8004380:	3303      	adds	r3, #3
 8004382:	b29b      	uxth	r3, r3
 8004384:	2002      	movs	r0, #2
 8004386:	f7fc fd85 	bl	8000e94 <LCD_FillRect>

	// Vertical divider
	LCD_FillRect(i + 5, 2, i + 8, j);
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	b29b      	uxth	r3, r3
 800438e:	3305      	adds	r3, #5
 8004390:	b298      	uxth	r0, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	b29b      	uxth	r3, r3
 8004396:	3308      	adds	r3, #8
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	b29b      	uxth	r3, r3
 800439e:	2102      	movs	r1, #2
 80043a0:	f7fc fd78 	bl	8000e94 <LCD_FillRect>
	LCD_FillRect(scr_width-97, 2, scr_width-94,scr_height-1);
 80043a4:	4b5f      	ldr	r3, [pc, #380]	; (8004524 <drawMainMenu+0x27c>)
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	3b61      	subs	r3, #97	; 0x61
 80043aa:	b298      	uxth	r0, r3
 80043ac:	4b5d      	ldr	r3, [pc, #372]	; (8004524 <drawMainMenu+0x27c>)
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	3b5e      	subs	r3, #94	; 0x5e
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	4b5c      	ldr	r3, [pc, #368]	; (8004528 <drawMainMenu+0x280>)
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2102      	movs	r1, #2
 80043be:	f7fc fd69 	bl	8000e94 <LCD_FillRect>
	i  = scr_width-80;
 80043c2:	4b58      	ldr	r3, [pc, #352]	; (8004524 <drawMainMenu+0x27c>)
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	3b50      	subs	r3, #80	; 0x50
 80043c8:	60bb      	str	r3, [r7, #8]
	j  = 3;
 80043ca:	2303      	movs	r3, #3
 80043cc:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	b298      	uxth	r0, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b02      	subs	r3, #2
 80043d8:	b299      	uxth	r1, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	330c      	adds	r3, #12
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3308      	adds	r3, #8
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f7fc fd53 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	3314      	adds	r3, #20
 80043f2:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT1 LED", fnt7x10);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	b298      	uxth	r0, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	b299      	uxth	r1, r3
 80043fc:	4b4b      	ldr	r3, [pc, #300]	; (800452c <drawMainMenu+0x284>)
 80043fe:	4a50      	ldr	r2, [pc, #320]	; (8004540 <drawMainMenu+0x298>)
 8004400:	f7fd f894 	bl	800152c <LCD_PutStr>
	j+=22;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3316      	adds	r3, #22
 8004408:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 800440a:	4b46      	ldr	r3, [pc, #280]	; (8004524 <drawMainMenu+0x27c>)
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	3b50      	subs	r3, #80	; 0x50
 8004410:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	b298      	uxth	r0, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b02      	subs	r3, #2
 800441c:	b299      	uxth	r1, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	b29b      	uxth	r3, r3
 8004422:	330c      	adds	r3, #12
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	b29b      	uxth	r3, r3
 800442a:	3308      	adds	r3, #8
 800442c:	b29b      	uxth	r3, r3
 800442e:	f7fc fd31 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	3314      	adds	r3, #20
 8004436:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT2 LED", fnt7x10);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	b298      	uxth	r0, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	b299      	uxth	r1, r3
 8004440:	4b3a      	ldr	r3, [pc, #232]	; (800452c <drawMainMenu+0x284>)
 8004442:	4a40      	ldr	r2, [pc, #256]	; (8004544 <drawMainMenu+0x29c>)
 8004444:	f7fd f872 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 8004448:	4b36      	ldr	r3, [pc, #216]	; (8004524 <drawMainMenu+0x27c>)
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	3b50      	subs	r3, #80	; 0x50
 800444e:	60bb      	str	r3, [r7, #8]
	j  += 22;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3316      	adds	r3, #22
 8004454:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	b298      	uxth	r0, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b02      	subs	r3, #2
 8004460:	b299      	uxth	r1, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	b29b      	uxth	r3, r3
 8004466:	330c      	adds	r3, #12
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	b29b      	uxth	r3, r3
 800446e:	3308      	adds	r3, #8
 8004470:	b29b      	uxth	r3, r3
 8004472:	f7fc fd0f 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	3314      	adds	r3, #20
 800447a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT3 LED", fnt7x10);
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	b298      	uxth	r0, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	b299      	uxth	r1, r3
 8004484:	4b29      	ldr	r3, [pc, #164]	; (800452c <drawMainMenu+0x284>)
 8004486:	4a30      	ldr	r2, [pc, #192]	; (8004548 <drawMainMenu+0x2a0>)
 8004488:	f7fd f850 	bl	800152c <LCD_PutStr>
	j+=22;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3316      	adds	r3, #22
 8004490:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 8004492:	4b24      	ldr	r3, [pc, #144]	; (8004524 <drawMainMenu+0x27c>)
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	3b50      	subs	r3, #80	; 0x50
 8004498:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	b298      	uxth	r0, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b02      	subs	r3, #2
 80044a4:	b299      	uxth	r1, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	330c      	adds	r3, #12
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3308      	adds	r3, #8
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f7fc fced 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	3314      	adds	r3, #20
 80044be:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT4 LED", fnt7x10);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	b298      	uxth	r0, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	b299      	uxth	r1, r3
 80044c8:	4b18      	ldr	r3, [pc, #96]	; (800452c <drawMainMenu+0x284>)
 80044ca:	4a20      	ldr	r2, [pc, #128]	; (800454c <drawMainMenu+0x2a4>)
 80044cc:	f7fd f82e 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 80044d0:	4b14      	ldr	r3, [pc, #80]	; (8004524 <drawMainMenu+0x27c>)
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	3b50      	subs	r3, #80	; 0x50
 80044d6:	60bb      	str	r3, [r7, #8]
	j  += 22;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3316      	adds	r3, #22
 80044dc:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	b298      	uxth	r0, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b02      	subs	r3, #2
 80044e8:	b299      	uxth	r1, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	330c      	adds	r3, #12
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3308      	adds	r3, #8
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f7fc fccb 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	3314      	adds	r3, #20
 8004502:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT5 LED", fnt7x10);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	b298      	uxth	r0, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	b299      	uxth	r1, r3
 800450c:	4b07      	ldr	r3, [pc, #28]	; (800452c <drawMainMenu+0x284>)
 800450e:	4a10      	ldr	r2, [pc, #64]	; (8004550 <drawMainMenu+0x2a8>)
 8004510:	f7fd f80c 	bl	800152c <LCD_PutStr>
	j+=22;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3316      	adds	r3, #22
 8004518:	e01c      	b.n	8004554 <drawMainMenu+0x2ac>
 800451a:	bf00      	nop
 800451c:	200032d0 	.word	0x200032d0
 8004520:	20010338 	.word	0x20010338
 8004524:	2001033a 	.word	0x2001033a
 8004528:	2001033c 	.word	0x2001033c
 800452c:	080149c0 	.word	0x080149c0
 8004530:	08014418 	.word	0x08014418
 8004534:	08014420 	.word	0x08014420
 8004538:	0801442c 	.word	0x0801442c
 800453c:	08014434 	.word	0x08014434
 8004540:	08014438 	.word	0x08014438
 8004544:	08014444 	.word	0x08014444
 8004548:	08014450 	.word	0x08014450
 800454c:	0801445c 	.word	0x0801445c
 8004550:	08014468 	.word	0x08014468
 8004554:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 8004556:	4b93      	ldr	r3, [pc, #588]	; (80047a4 <drawMainMenu+0x4fc>)
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	3b50      	subs	r3, #80	; 0x50
 800455c:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	b298      	uxth	r0, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b02      	subs	r3, #2
 8004568:	b299      	uxth	r1, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	b29b      	uxth	r3, r3
 800456e:	330c      	adds	r3, #12
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	b29b      	uxth	r3, r3
 8004576:	3308      	adds	r3, #8
 8004578:	b29b      	uxth	r3, r3
 800457a:	f7fc fc8b 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	3314      	adds	r3, #20
 8004582:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT6 LED", fnt7x10);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	b298      	uxth	r0, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	b299      	uxth	r1, r3
 800458c:	4b86      	ldr	r3, [pc, #536]	; (80047a8 <drawMainMenu+0x500>)
 800458e:	4a87      	ldr	r2, [pc, #540]	; (80047ac <drawMainMenu+0x504>)
 8004590:	f7fc ffcc 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 8004594:	4b83      	ldr	r3, [pc, #524]	; (80047a4 <drawMainMenu+0x4fc>)
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	3b50      	subs	r3, #80	; 0x50
 800459a:	60bb      	str	r3, [r7, #8]
	j  +=22;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3316      	adds	r3, #22
 80045a0:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	b298      	uxth	r0, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b02      	subs	r3, #2
 80045ac:	b299      	uxth	r1, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	330c      	adds	r3, #12
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3308      	adds	r3, #8
 80045bc:	b29b      	uxth	r3, r3
 80045be:	f7fc fc69 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	3314      	adds	r3, #20
 80045c6:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT7 LED", fnt7x10);
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	b298      	uxth	r0, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	b299      	uxth	r1, r3
 80045d0:	4b75      	ldr	r3, [pc, #468]	; (80047a8 <drawMainMenu+0x500>)
 80045d2:	4a77      	ldr	r2, [pc, #476]	; (80047b0 <drawMainMenu+0x508>)
 80045d4:	f7fc ffaa 	bl	800152c <LCD_PutStr>
	j+=22;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3316      	adds	r3, #22
 80045dc:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 80045de:	4b71      	ldr	r3, [pc, #452]	; (80047a4 <drawMainMenu+0x4fc>)
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	3b50      	subs	r3, #80	; 0x50
 80045e4:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	b298      	uxth	r0, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b02      	subs	r3, #2
 80045f0:	b299      	uxth	r1, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	330c      	adds	r3, #12
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3308      	adds	r3, #8
 8004600:	b29b      	uxth	r3, r3
 8004602:	f7fc fc47 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	3314      	adds	r3, #20
 800460a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT8 LED", fnt7x10);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	b298      	uxth	r0, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	b299      	uxth	r1, r3
 8004614:	4b64      	ldr	r3, [pc, #400]	; (80047a8 <drawMainMenu+0x500>)
 8004616:	4a67      	ldr	r2, [pc, #412]	; (80047b4 <drawMainMenu+0x50c>)
 8004618:	f7fc ff88 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 800461c:	4b61      	ldr	r3, [pc, #388]	; (80047a4 <drawMainMenu+0x4fc>)
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	3b50      	subs	r3, #80	; 0x50
 8004622:	60bb      	str	r3, [r7, #8]
	j  +=22;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3316      	adds	r3, #22
 8004628:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	b298      	uxth	r0, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b02      	subs	r3, #2
 8004634:	b299      	uxth	r1, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	b29b      	uxth	r3, r3
 800463a:	330c      	adds	r3, #12
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	b29b      	uxth	r3, r3
 8004642:	3308      	adds	r3, #8
 8004644:	b29b      	uxth	r3, r3
 8004646:	f7fc fc25 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	3314      	adds	r3, #20
 800464e:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT9 LED", fnt7x10);
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	b298      	uxth	r0, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	b299      	uxth	r1, r3
 8004658:	4b53      	ldr	r3, [pc, #332]	; (80047a8 <drawMainMenu+0x500>)
 800465a:	4a57      	ldr	r2, [pc, #348]	; (80047b8 <drawMainMenu+0x510>)
 800465c:	f7fc ff66 	bl	800152c <LCD_PutStr>
	j = scr_height-20;
 8004660:	4b56      	ldr	r3, [pc, #344]	; (80047bc <drawMainMenu+0x514>)
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	3b14      	subs	r3, #20
 8004666:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 8004668:	4b4e      	ldr	r3, [pc, #312]	; (80047a4 <drawMainMenu+0x4fc>)
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	3b50      	subs	r3, #80	; 0x50
 800466e:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	b298      	uxth	r0, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b02      	subs	r3, #2
 800467a:	b299      	uxth	r1, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	b29b      	uxth	r3, r3
 8004680:	330c      	adds	r3, #12
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	b29b      	uxth	r3, r3
 8004688:	3308      	adds	r3, #8
 800468a:	b29b      	uxth	r3, r3
 800468c:	f7fc fc02 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	3314      	adds	r3, #20
 8004694:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "MODE", fnt7x10);
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	b298      	uxth	r0, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	b299      	uxth	r1, r3
 800469e:	4b42      	ldr	r3, [pc, #264]	; (80047a8 <drawMainMenu+0x500>)
 80046a0:	4a47      	ldr	r2, [pc, #284]	; (80047c0 <drawMainMenu+0x518>)
 80046a2:	f7fc ff43 	bl	800152c <LCD_PutStr>

	i=100;
 80046a6:	2364      	movs	r3, #100	; 0x64
 80046a8:	60bb      	str	r3, [r7, #8]
	j=75;
 80046aa:	234b      	movs	r3, #75	; 0x4b
 80046ac:	60fb      	str	r3, [r7, #12]
	i+=20;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	3314      	adds	r3, #20
 80046b2:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "BOOT MODE", fnt7x10);
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	b298      	uxth	r0, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	b299      	uxth	r1, r3
 80046bc:	4b3a      	ldr	r3, [pc, #232]	; (80047a8 <drawMainMenu+0x500>)
 80046be:	4a41      	ldr	r2, [pc, #260]	; (80047c4 <drawMainMenu+0x51c>)
 80046c0:	f7fc ff34 	bl	800152c <LCD_PutStr>
	j+=15;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	330f      	adds	r3, #15
 80046c8:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 71, j + 2);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b03      	subs	r3, #3
 80046d0:	b298      	uxth	r0, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b02      	subs	r3, #2
 80046d8:	b299      	uxth	r1, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3347      	adds	r3, #71	; 0x47
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3302      	adds	r3, #2
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	f7fc fbd3 	bl	8000e94 <LCD_FillRect>

	i=100;
 80046ee:	2364      	movs	r3, #100	; 0x64
 80046f0:	60bb      	str	r3, [r7, #8]
	j=110;
 80046f2:	236e      	movs	r3, #110	; 0x6e
 80046f4:	60fb      	str	r3, [r7, #12]
	i+=20;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	3314      	adds	r3, #20
 80046fa:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "STATUS", fnt7x10);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	b298      	uxth	r0, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	b299      	uxth	r1, r3
 8004704:	4b28      	ldr	r3, [pc, #160]	; (80047a8 <drawMainMenu+0x500>)
 8004706:	4a30      	ldr	r2, [pc, #192]	; (80047c8 <drawMainMenu+0x520>)
 8004708:	f7fc ff10 	bl	800152c <LCD_PutStr>
	j+=15;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	330f      	adds	r3, #15
 8004710:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 50, j + 2);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b03      	subs	r3, #3
 8004718:	b298      	uxth	r0, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b02      	subs	r3, #2
 8004720:	b299      	uxth	r1, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	b29b      	uxth	r3, r3
 8004726:	3332      	adds	r3, #50	; 0x32
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	b29b      	uxth	r3, r3
 800472e:	3302      	adds	r3, #2
 8004730:	b29b      	uxth	r3, r3
 8004732:	f7fc fbaf 	bl	8000e94 <LCD_FillRect>

	i=100;
 8004736:	2364      	movs	r3, #100	; 0x64
 8004738:	60bb      	str	r3, [r7, #8]
	j=145;
 800473a:	2391      	movs	r3, #145	; 0x91
 800473c:	60fb      	str	r3, [r7, #12]
	i+=20;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	3314      	adds	r3, #20
 8004742:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "SYSTEM INFO", fnt7x10);
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	b298      	uxth	r0, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	b299      	uxth	r1, r3
 800474c:	4b16      	ldr	r3, [pc, #88]	; (80047a8 <drawMainMenu+0x500>)
 800474e:	4a1f      	ldr	r2, [pc, #124]	; (80047cc <drawMainMenu+0x524>)
 8004750:	f7fc feec 	bl	800152c <LCD_PutStr>
	j+=15;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	330f      	adds	r3, #15
 8004758:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 85, j + 2);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	b29b      	uxth	r3, r3
 800475e:	3b03      	subs	r3, #3
 8004760:	b298      	uxth	r0, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	b29b      	uxth	r3, r3
 8004766:	3b02      	subs	r3, #2
 8004768:	b299      	uxth	r1, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	b29b      	uxth	r3, r3
 800476e:	3355      	adds	r3, #85	; 0x55
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	b29b      	uxth	r3, r3
 8004776:	3302      	adds	r3, #2
 8004778:	b29b      	uxth	r3, r3
 800477a:	f7fc fb8b 	bl	8000e94 <LCD_FillRect>
	i=100;
 800477e:	2364      	movs	r3, #100	; 0x64
 8004780:	60bb      	str	r3, [r7, #8]
	switch(indicator){
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d006      	beq.n	8004796 <drawMainMenu+0x4ee>
 8004788:	2b03      	cmp	r3, #3
 800478a:	d007      	beq.n	800479c <drawMainMenu+0x4f4>
 800478c:	2b01      	cmp	r3, #1
 800478e:	d11f      	bne.n	80047d0 <drawMainMenu+0x528>
	case FIRST:
	{
		j=75;
 8004790:	234b      	movs	r3, #75	; 0x4b
 8004792:	60fb      	str	r3, [r7, #12]
		break;
 8004794:	e01f      	b.n	80047d6 <drawMainMenu+0x52e>
	}
	case SECOND:
	{
		j=110;
 8004796:	236e      	movs	r3, #110	; 0x6e
 8004798:	60fb      	str	r3, [r7, #12]
		break;
 800479a:	e01c      	b.n	80047d6 <drawMainMenu+0x52e>
	}
	case THIRD:
	{
		j=145;
 800479c:	2391      	movs	r3, #145	; 0x91
 800479e:	60fb      	str	r3, [r7, #12]
		break;
 80047a0:	e019      	b.n	80047d6 <drawMainMenu+0x52e>
 80047a2:	bf00      	nop
 80047a4:	2001033a 	.word	0x2001033a
 80047a8:	080149c0 	.word	0x080149c0
 80047ac:	08014474 	.word	0x08014474
 80047b0:	08014480 	.word	0x08014480
 80047b4:	0801448c 	.word	0x0801448c
 80047b8:	08014498 	.word	0x08014498
 80047bc:	2001033c 	.word	0x2001033c
 80047c0:	080144a4 	.word	0x080144a4
 80047c4:	080144ac 	.word	0x080144ac
 80047c8:	080144b8 	.word	0x080144b8
 80047cc:	080144c0 	.word	0x080144c0
	}
	default:
	{
		j=75;
 80047d0:	234b      	movs	r3, #75	; 0x4b
 80047d2:	60fb      	str	r3, [r7, #12]
		break;
 80047d4:	bf00      	nop
	}
	}
	LCD_FillRect(i, j, i + 12, j + 10);
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	b298      	uxth	r0, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	b299      	uxth	r1, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	330c      	adds	r3, #12
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	330a      	adds	r3, #10
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f7fc fb51 	bl	8000e94 <LCD_FillRect>
	SMLCD_Flush();
 80047f2:	f7fb ff71 	bl	80006d8 <SMLCD_Flush>
}
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop

08004800 <drawStatusMenu>:

void drawStatusMenu(int indicator){
 8004800:	b580      	push	{r7, lr}
 8004802:	b090      	sub	sp, #64	; 0x40
 8004804:	af02      	add	r7, sp, #8
 8004806:	6078      	str	r0, [r7, #4]
	int i,j;
	float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8004808:	2314      	movs	r3, #20
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int inputGpioAlignment=245;
 800480c:	23f5      	movs	r3, #245	; 0xf5
 800480e:	62bb      	str	r3, [r7, #40]	; 0x28
	int daughterCardAlignment=240;
 8004810:	23f0      	movs	r3, #240	; 0xf0
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
	int i2cCheck;
	int arrowUp = 0;
 8004814:	2300      	movs	r3, #0
 8004816:	623b      	str	r3, [r7, #32]
	int arrowDown=1;
 8004818:	2301      	movs	r3, #1
 800481a:	61fb      	str	r3, [r7, #28]
	int arrowSize=3;
 800481c:	2303      	movs	r3, #3
 800481e:	61bb      	str	r3, [r7, #24]
	previousMenu=0;
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <drawStatusMenu+0x50>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8004826:	f7fc f8a1 	bl	800096c <LCD_Clear>
	 if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 800482a:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <drawStatusMenu+0x54>)
 800482c:	781a      	ldrb	r2, [r3, #0]
 800482e:	4b09      	ldr	r3, [pc, #36]	; (8004854 <drawStatusMenu+0x54>)
 8004830:	785b      	ldrb	r3, [r3, #1]
 8004832:	4013      	ands	r3, r2
 8004834:	b2da      	uxtb	r2, r3
 8004836:	4b07      	ldr	r3, [pc, #28]	; (8004854 <drawStatusMenu+0x54>)
 8004838:	789b      	ldrb	r3, [r3, #2]
 800483a:	4013      	ands	r3, r2
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d01a      	beq.n	8004878 <drawStatusMenu+0x78>
 		  adcValuePointer = getADCValues();
 8004842:	f7fe fe4f 	bl	80034e4 <getADCValues>
 8004846:	4603      	mov	r3, r0
 8004848:	633b      	str	r3, [r7, #48]	; 0x30
 		  for(i=0;i<20;i++){
 800484a:	2300      	movs	r3, #0
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
 800484e:	e010      	b.n	8004872 <drawStatusMenu+0x72>
 8004850:	200032d0 	.word	0x200032d0
 8004854:	20010ab0 	.word	0x20010ab0
	  		  displayAdcValues[i]=*adcValuePointer;
 8004858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	499d      	ldr	r1, [pc, #628]	; (8004ad4 <drawStatusMenu+0x2d4>)
 800485e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	601a      	str	r2, [r3, #0]
	  		  adcValuePointer++;
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	3304      	adds	r3, #4
 800486a:	633b      	str	r3, [r7, #48]	; 0x30
 		  for(i=0;i<20;i++){
 800486c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486e:	3301      	adds	r3, #1
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
 8004872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004874:	2b13      	cmp	r3, #19
 8004876:	ddef      	ble.n	8004858 <drawStatusMenu+0x58>
 		  }
	 }
	LCD_PixelMode = LCD_PSET;
 8004878:	4b97      	ldr	r3, [pc, #604]	; (8004ad8 <drawStatusMenu+0x2d8>)
 800487a:	2200      	movs	r2, #0
 800487c:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 800487e:	4b97      	ldr	r3, [pc, #604]	; (8004adc <drawStatusMenu+0x2dc>)
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	4b96      	ldr	r3, [pc, #600]	; (8004ae0 <drawStatusMenu+0x2e0>)
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	3b01      	subs	r3, #1
 800488c:	b29b      	uxth	r3, r3
 800488e:	2100      	movs	r1, #0
 8004890:	2000      	movs	r0, #0
 8004892:	f7fc fabd 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8004896:	4b91      	ldr	r3, [pc, #580]	; (8004adc <drawStatusMenu+0x2dc>)
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	3b03      	subs	r3, #3
 800489c:	b29a      	uxth	r2, r3
 800489e:	4b90      	ldr	r3, [pc, #576]	; (8004ae0 <drawStatusMenu+0x2e0>)
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	3b03      	subs	r3, #3
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2102      	movs	r1, #2
 80048a8:	2002      	movs	r0, #2
 80048aa:	f7fc fab1 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 80048ae:	230a      	movs	r3, #10
 80048b0:	637b      	str	r3, [r7, #52]	; 0x34
	j  = 10;
 80048b2:	230a      	movs	r3, #10
 80048b4:	617b      	str	r3, [r7, #20]
	i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 80048b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b8:	b298      	uxth	r0, r3
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	b299      	uxth	r1, r3
 80048be:	4b89      	ldr	r3, [pc, #548]	; (8004ae4 <drawStatusMenu+0x2e4>)
 80048c0:	4a89      	ldr	r2, [pc, #548]	; (8004ae8 <drawStatusMenu+0x2e8>)
 80048c2:	f7fc fe33 	bl	800152c <LCD_PutStr>
 80048c6:	4603      	mov	r3, r0
 80048c8:	461a      	mov	r2, r3
 80048ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048cc:	4413      	add	r3, r2
 80048ce:	637b      	str	r3, [r7, #52]	; 0x34
	i += LCD_PutStr(i, j, "So many!", fnt7x10);
 80048d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d2:	b298      	uxth	r0, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	b299      	uxth	r1, r3
 80048d8:	4b82      	ldr	r3, [pc, #520]	; (8004ae4 <drawStatusMenu+0x2e4>)
 80048da:	4a84      	ldr	r2, [pc, #528]	; (8004aec <drawStatusMenu+0x2ec>)
 80048dc:	f7fc fe26 	bl	800152c <LCD_PutStr>
 80048e0:	4603      	mov	r3, r0
 80048e2:	461a      	mov	r2, r3
 80048e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e6:	4413      	add	r3, r2
 80048e8:	637b      	str	r3, [r7, #52]	; 0x34
	i+=170;
 80048ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ec:	33aa      	adds	r3, #170	; 0xaa
 80048ee:	637b      	str	r3, [r7, #52]	; 0x34
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 80048f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f2:	b298      	uxth	r0, r3
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	b299      	uxth	r1, r3
 80048f8:	4b7a      	ldr	r3, [pc, #488]	; (8004ae4 <drawStatusMenu+0x2e4>)
 80048fa:	4a7d      	ldr	r2, [pc, #500]	; (8004af0 <drawStatusMenu+0x2f0>)
 80048fc:	f7fc fe16 	bl	800152c <LCD_PutStr>
 8004900:	4603      	mov	r3, r0
 8004902:	461a      	mov	r2, r3
 8004904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004906:	4413      	add	r3, r2
 8004908:	637b      	str	r3, [r7, #52]	; 0x34
	i += LCD_PutStr(i, j, "QED", fnt7x10);
 800490a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490c:	b298      	uxth	r0, r3
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	b299      	uxth	r1, r3
 8004912:	4b74      	ldr	r3, [pc, #464]	; (8004ae4 <drawStatusMenu+0x2e4>)
 8004914:	4a77      	ldr	r2, [pc, #476]	; (8004af4 <drawStatusMenu+0x2f4>)
 8004916:	f7fc fe09 	bl	800152c <LCD_PutStr>
 800491a:	4603      	mov	r3, r0
 800491c:	461a      	mov	r2, r3
 800491e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004920:	4413      	add	r3, r2
 8004922:	637b      	str	r3, [r7, #52]	; 0x34
	i  = 135;
 8004924:	2387      	movs	r3, #135	; 0x87
 8004926:	637b      	str	r3, [r7, #52]	; 0x34
	j += 12;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	330c      	adds	r3, #12
 800492c:	617b      	str	r3, [r7, #20]

	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	b299      	uxth	r1, r3
 8004932:	4b6a      	ldr	r3, [pc, #424]	; (8004adc <drawStatusMenu+0x2dc>)
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	3b02      	subs	r3, #2
 8004938:	b29a      	uxth	r2, r3
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	b29b      	uxth	r3, r3
 800493e:	3303      	adds	r3, #3
 8004940:	b29b      	uxth	r3, r3
 8004942:	2002      	movs	r0, #2
 8004944:	f7fc faa6 	bl	8000e94 <LCD_FillRect>
	switch(indicator){
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b02      	cmp	r3, #2
 800494c:	f000 81e6 	beq.w	8004d1c <drawStatusMenu+0x51c>
 8004950:	2b03      	cmp	r3, #3
 8004952:	f000 8783 	beq.w	800585c <drawStatusMenu+0x105c>
 8004956:	2b01      	cmp	r3, #1
 8004958:	f041 8096 	bne.w	8005a88 <drawStatusMenu+0x1288>
	case 1:{
		i=35;
 800495c:	2323      	movs	r3, #35	; 0x23
 800495e:	637b      	str	r3, [r7, #52]	; 0x34
		j=90;
 8004960:	235a      	movs	r3, #90	; 0x5a
 8004962:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b02      	subs	r3, #2
 800496a:	b299      	uxth	r1, r3
 800496c:	4b5b      	ldr	r3, [pc, #364]	; (8004adc <drawStatusMenu+0x2dc>)
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	3b02      	subs	r3, #2
 8004972:	b29a      	uxth	r2, r3
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	b29b      	uxth	r3, r3
 8004978:	3302      	adds	r3, #2
 800497a:	b29b      	uxth	r3, r3
 800497c:	2002      	movs	r0, #2
 800497e:	f7fc fa89 	bl	8000e94 <LCD_FillRect>
		j=75;
 8004982:	234b      	movs	r3, #75	; 0x4b
 8004984:	617b      	str	r3, [r7, #20]
		i=62;
 8004986:	233e      	movs	r3, #62	; 0x3e
 8004988:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 800498a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498c:	b298      	uxth	r0, r3
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	b299      	uxth	r1, r3
 8004992:	4b54      	ldr	r3, [pc, #336]	; (8004ae4 <drawStatusMenu+0x2e4>)
 8004994:	4a54      	ldr	r2, [pc, #336]	; (8004ae8 <drawStatusMenu+0x2e8>)
 8004996:	f7fc fdc9 	bl	800152c <LCD_PutStr>
 800499a:	4603      	mov	r3, r0
 800499c:	461a      	mov	r2, r3
 800499e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a0:	4413      	add	r3, r2
 80049a2:	637b      	str	r3, [r7, #52]	; 0x34
		i+=145;
 80049a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a6:	3391      	adds	r3, #145	; 0x91
 80049a8:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "DAUGHTER CARDS:", fnt7x10);
 80049aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ac:	b298      	uxth	r0, r3
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	b299      	uxth	r1, r3
 80049b2:	4b4c      	ldr	r3, [pc, #304]	; (8004ae4 <drawStatusMenu+0x2e4>)
 80049b4:	4a50      	ldr	r2, [pc, #320]	; (8004af8 <drawStatusMenu+0x2f8>)
 80049b6:	f7fc fdb9 	bl	800152c <LCD_PutStr>

		i=10;
 80049ba:	230a      	movs	r3, #10
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
		j=95;
 80049be:	235f      	movs	r3, #95	; 0x5f
 80049c0:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault0: ", fnt7x10);
 80049c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c4:	b298      	uxth	r0, r3
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	b299      	uxth	r1, r3
 80049ca:	4b46      	ldr	r3, [pc, #280]	; (8004ae4 <drawStatusMenu+0x2e4>)
 80049cc:	4a4b      	ldr	r2, [pc, #300]	; (8004afc <drawStatusMenu+0x2fc>)
 80049ce:	f7fc fdad 	bl	800152c <LCD_PutStr>
 80049d2:	4603      	mov	r3, r0
 80049d4:	461a      	mov	r2, r3
 80049d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d8:	4413      	add	r3, r2
 80049da:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 80049dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049de:	b298      	uxth	r0, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	b299      	uxth	r1, r3
 80049e4:	4b3f      	ldr	r3, [pc, #252]	; (8004ae4 <drawStatusMenu+0x2e4>)
 80049e6:	4a46      	ldr	r2, [pc, #280]	; (8004b00 <drawStatusMenu+0x300>)
 80049e8:	f7fc fda0 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "SOC: ", fnt7x10);
 80049f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f2:	b298      	uxth	r0, r3
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	b299      	uxth	r1, r3
 80049f8:	4b3a      	ldr	r3, [pc, #232]	; (8004ae4 <drawStatusMenu+0x2e4>)
 80049fa:	4a42      	ldr	r2, [pc, #264]	; (8004b04 <drawStatusMenu+0x304>)
 80049fc:	f7fc fd96 	bl	800152c <LCD_PutStr>
 8004a00:	4603      	mov	r3, r0
 8004a02:	461a      	mov	r2, r3
 8004a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a06:	4413      	add	r3, r2
 8004a08:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i,j,"placeholder", fnt7x10);
 8004a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0c:	b298      	uxth	r0, r3
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	b299      	uxth	r1, r3
 8004a12:	4b34      	ldr	r3, [pc, #208]	; (8004ae4 <drawStatusMenu+0x2e4>)
 8004a14:	4a3a      	ldr	r2, [pc, #232]	; (8004b00 <drawStatusMenu+0x300>)
 8004a16:	f7fc fd89 	bl	800152c <LCD_PutStr>

		i=10;
 8004a1a:	230a      	movs	r3, #10
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	330f      	adds	r3, #15
 8004a22:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault1: ", fnt7x10);
 8004a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a26:	b298      	uxth	r0, r3
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	b299      	uxth	r1, r3
 8004a2c:	4b2d      	ldr	r3, [pc, #180]	; (8004ae4 <drawStatusMenu+0x2e4>)
 8004a2e:	4a36      	ldr	r2, [pc, #216]	; (8004b08 <drawStatusMenu+0x308>)
 8004a30:	f7fc fd7c 	bl	800152c <LCD_PutStr>
 8004a34:	4603      	mov	r3, r0
 8004a36:	461a      	mov	r2, r3
 8004a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3a:	4413      	add	r3, r2
 8004a3c:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a40:	b298      	uxth	r0, r3
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	b299      	uxth	r1, r3
 8004a46:	4b27      	ldr	r3, [pc, #156]	; (8004ae4 <drawStatusMenu+0x2e4>)
 8004a48:	4a2d      	ldr	r2, [pc, #180]	; (8004b00 <drawStatusMenu+0x300>)
 8004a4a:	f7fc fd6f 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 8004a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a54:	b298      	uxth	r0, r3
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	b299      	uxth	r1, r3
 8004a5a:	4b22      	ldr	r3, [pc, #136]	; (8004ae4 <drawStatusMenu+0x2e4>)
 8004a5c:	4a2b      	ldr	r2, [pc, #172]	; (8004b0c <drawStatusMenu+0x30c>)
 8004a5e:	f7fc fd65 	bl	800152c <LCD_PutStr>
 8004a62:	4603      	mov	r3, r0
 8004a64:	461a      	mov	r2, r3
 8004a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a68:	4413      	add	r3, r2
 8004a6a:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i,j,"placeholder", fnt7x10);
 8004a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6e:	b298      	uxth	r0, r3
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	b299      	uxth	r1, r3
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <drawStatusMenu+0x2e4>)
 8004a76:	4a22      	ldr	r2, [pc, #136]	; (8004b00 <drawStatusMenu+0x300>)
 8004a78:	f7fc fd58 	bl	800152c <LCD_PutStr>

		i=10;
 8004a7c:	230a      	movs	r3, #10
 8004a7e:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	330f      	adds	r3, #15
 8004a84:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault2: ", fnt7x10);
 8004a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a88:	b298      	uxth	r0, r3
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	b299      	uxth	r1, r3
 8004a8e:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <drawStatusMenu+0x2e4>)
 8004a90:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <drawStatusMenu+0x310>)
 8004a92:	f7fc fd4b 	bl	800152c <LCD_PutStr>
 8004a96:	4603      	mov	r3, r0
 8004a98:	461a      	mov	r2, r3
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9c:	4413      	add	r3, r2
 8004a9e:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa2:	b298      	uxth	r0, r3
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	b299      	uxth	r1, r3
 8004aa8:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <drawStatusMenu+0x2e4>)
 8004aaa:	4a15      	ldr	r2, [pc, #84]	; (8004b00 <drawStatusMenu+0x300>)
 8004aac:	f7fc fd3e 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "Display: ", fnt7x10);
 8004ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab6:	b298      	uxth	r0, r3
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	b299      	uxth	r1, r3
 8004abc:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <drawStatusMenu+0x2e4>)
 8004abe:	4a15      	ldr	r2, [pc, #84]	; (8004b14 <drawStatusMenu+0x314>)
 8004ac0:	f7fc fd34 	bl	800152c <LCD_PutStr>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aca:	4413      	add	r3, r2
 8004acc:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i,j,"placeholder", fnt7x10);
 8004ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad0:	b298      	uxth	r0, r3
 8004ad2:	e021      	b.n	8004b18 <drawStatusMenu+0x318>
 8004ad4:	2002407c 	.word	0x2002407c
 8004ad8:	20010338 	.word	0x20010338
 8004adc:	2001033a 	.word	0x2001033a
 8004ae0:	2001033c 	.word	0x2001033c
 8004ae4:	080149c0 	.word	0x080149c0
 8004ae8:	08014418 	.word	0x08014418
 8004aec:	08014420 	.word	0x08014420
 8004af0:	0801442c 	.word	0x0801442c
 8004af4:	08014434 	.word	0x08014434
 8004af8:	080144cc 	.word	0x080144cc
 8004afc:	080144dc 	.word	0x080144dc
 8004b00:	080144e8 	.word	0x080144e8
 8004b04:	080144f4 	.word	0x080144f4
 8004b08:	080144fc 	.word	0x080144fc
 8004b0c:	08014508 	.word	0x08014508
 8004b10:	08014510 	.word	0x08014510
 8004b14:	0801451c 	.word	0x0801451c
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	b299      	uxth	r1, r3
 8004b1c:	4b75      	ldr	r3, [pc, #468]	; (8004cf4 <drawStatusMenu+0x4f4>)
 8004b1e:	4a76      	ldr	r2, [pc, #472]	; (8004cf8 <drawStatusMenu+0x4f8>)
 8004b20:	f7fc fd04 	bl	800152c <LCD_PutStr>

		i=10;
 8004b24:	230a      	movs	r3, #10
 8004b26:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	330f      	adds	r3, #15
 8004b2c:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault3: ", fnt7x10);
 8004b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b30:	b298      	uxth	r0, r3
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	b299      	uxth	r1, r3
 8004b36:	4b6f      	ldr	r3, [pc, #444]	; (8004cf4 <drawStatusMenu+0x4f4>)
 8004b38:	4a70      	ldr	r2, [pc, #448]	; (8004cfc <drawStatusMenu+0x4fc>)
 8004b3a:	f7fc fcf7 	bl	800152c <LCD_PutStr>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	461a      	mov	r2, r3
 8004b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b44:	4413      	add	r3, r2
 8004b46:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4a:	b298      	uxth	r0, r3
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	b299      	uxth	r1, r3
 8004b50:	4b68      	ldr	r3, [pc, #416]	; (8004cf4 <drawStatusMenu+0x4f4>)
 8004b52:	4a69      	ldr	r2, [pc, #420]	; (8004cf8 <drawStatusMenu+0x4f8>)
 8004b54:	f7fc fcea 	bl	800152c <LCD_PutStr>

		i=10;
 8004b58:	230a      	movs	r3, #10
 8004b5a:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	330f      	adds	r3, #15
 8004b60:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault4: ", fnt7x10);
 8004b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b64:	b298      	uxth	r0, r3
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	b299      	uxth	r1, r3
 8004b6a:	4b62      	ldr	r3, [pc, #392]	; (8004cf4 <drawStatusMenu+0x4f4>)
 8004b6c:	4a64      	ldr	r2, [pc, #400]	; (8004d00 <drawStatusMenu+0x500>)
 8004b6e:	f7fc fcdd 	bl	800152c <LCD_PutStr>
 8004b72:	4603      	mov	r3, r0
 8004b74:	461a      	mov	r2, r3
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b78:	4413      	add	r3, r2
 8004b7a:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7e:	b298      	uxth	r0, r3
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	b299      	uxth	r1, r3
 8004b84:	4b5b      	ldr	r3, [pc, #364]	; (8004cf4 <drawStatusMenu+0x4f4>)
 8004b86:	4a5c      	ldr	r2, [pc, #368]	; (8004cf8 <drawStatusMenu+0x4f8>)
 8004b88:	f7fc fcd0 	bl	800152c <LCD_PutStr>

		i=10;
 8004b8c:	230a      	movs	r3, #10
 8004b8e:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	330f      	adds	r3, #15
 8004b94:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault5: ", fnt7x10);
 8004b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b98:	b298      	uxth	r0, r3
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	b299      	uxth	r1, r3
 8004b9e:	4b55      	ldr	r3, [pc, #340]	; (8004cf4 <drawStatusMenu+0x4f4>)
 8004ba0:	4a58      	ldr	r2, [pc, #352]	; (8004d04 <drawStatusMenu+0x504>)
 8004ba2:	f7fc fcc3 	bl	800152c <LCD_PutStr>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	461a      	mov	r2, r3
 8004baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bac:	4413      	add	r3, r2
 8004bae:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb2:	b298      	uxth	r0, r3
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	b299      	uxth	r1, r3
 8004bb8:	4b4e      	ldr	r3, [pc, #312]	; (8004cf4 <drawStatusMenu+0x4f4>)
 8004bba:	4a4f      	ldr	r2, [pc, #316]	; (8004cf8 <drawStatusMenu+0x4f8>)
 8004bbc:	f7fc fcb6 	bl	800152c <LCD_PutStr>

		i=10;
 8004bc0:	230a      	movs	r3, #10
 8004bc2:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	330f      	adds	r3, #15
 8004bc8:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault6: ", fnt7x10);
 8004bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bcc:	b298      	uxth	r0, r3
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	b299      	uxth	r1, r3
 8004bd2:	4b48      	ldr	r3, [pc, #288]	; (8004cf4 <drawStatusMenu+0x4f4>)
 8004bd4:	4a4c      	ldr	r2, [pc, #304]	; (8004d08 <drawStatusMenu+0x508>)
 8004bd6:	f7fc fca9 	bl	800152c <LCD_PutStr>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be0:	4413      	add	r3, r2
 8004be2:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be6:	b298      	uxth	r0, r3
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	b299      	uxth	r1, r3
 8004bec:	4b41      	ldr	r3, [pc, #260]	; (8004cf4 <drawStatusMenu+0x4f4>)
 8004bee:	4a42      	ldr	r2, [pc, #264]	; (8004cf8 <drawStatusMenu+0x4f8>)
 8004bf0:	f7fc fc9c 	bl	800152c <LCD_PutStr>

		i=10;
 8004bf4:	230a      	movs	r3, #10
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	330f      	adds	r3, #15
 8004bfc:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault7: ", fnt7x10);
 8004bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c00:	b298      	uxth	r0, r3
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	b299      	uxth	r1, r3
 8004c06:	4b3b      	ldr	r3, [pc, #236]	; (8004cf4 <drawStatusMenu+0x4f4>)
 8004c08:	4a40      	ldr	r2, [pc, #256]	; (8004d0c <drawStatusMenu+0x50c>)
 8004c0a:	f7fc fc8f 	bl	800152c <LCD_PutStr>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	461a      	mov	r2, r3
 8004c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c14:	4413      	add	r3, r2
 8004c16:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1a:	b298      	uxth	r0, r3
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	b299      	uxth	r1, r3
 8004c20:	4b34      	ldr	r3, [pc, #208]	; (8004cf4 <drawStatusMenu+0x4f4>)
 8004c22:	4a35      	ldr	r2, [pc, #212]	; (8004cf8 <drawStatusMenu+0x4f8>)
 8004c24:	f7fc fc82 	bl	800152c <LCD_PutStr>

		i=10;
 8004c28:	230a      	movs	r3, #10
 8004c2a:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	330f      	adds	r3, #15
 8004c30:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault8: ", fnt7x10);
 8004c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c34:	b298      	uxth	r0, r3
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	b299      	uxth	r1, r3
 8004c3a:	4b2e      	ldr	r3, [pc, #184]	; (8004cf4 <drawStatusMenu+0x4f4>)
 8004c3c:	4a34      	ldr	r2, [pc, #208]	; (8004d10 <drawStatusMenu+0x510>)
 8004c3e:	f7fc fc75 	bl	800152c <LCD_PutStr>
 8004c42:	4603      	mov	r3, r0
 8004c44:	461a      	mov	r2, r3
 8004c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c48:	4413      	add	r3, r2
 8004c4a:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4e:	b298      	uxth	r0, r3
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	b299      	uxth	r1, r3
 8004c54:	4b27      	ldr	r3, [pc, #156]	; (8004cf4 <drawStatusMenu+0x4f4>)
 8004c56:	4a28      	ldr	r2, [pc, #160]	; (8004cf8 <drawStatusMenu+0x4f8>)
 8004c58:	f7fc fc68 	bl	800152c <LCD_PutStr>


		//horizontal divider
		j=65;
 8004c5c:	2341      	movs	r3, #65	; 0x41
 8004c5e:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b299      	uxth	r1, r3
 8004c68:	4b2a      	ldr	r3, [pc, #168]	; (8004d14 <drawStatusMenu+0x514>)
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	3b02      	subs	r3, #2
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	3301      	adds	r3, #1
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2002      	movs	r0, #2
 8004c7a:	f7fc f90b 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 8004c7e:	23e6      	movs	r3, #230	; 0xe6
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 8004c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b03      	subs	r3, #3
 8004c88:	b298      	uxth	r0, r3
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	b299      	uxth	r1, r3
 8004c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3303      	adds	r3, #3
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	4b20      	ldr	r3, [pc, #128]	; (8004d18 <drawStatusMenu+0x518>)
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	3b02      	subs	r3, #2
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	f7fc f8f9 	bl	8000e94 <LCD_FillRect>

		i=200;
 8004ca2:	23c8      	movs	r3, #200	; 0xc8
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
		j=220;
 8004ca6:	23dc      	movs	r3, #220	; 0xdc
 8004ca8:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8004caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cac:	b298      	uxth	r0, r3
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	b299      	uxth	r1, r3
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f7fc fd87 	bl	80017cc <drawUpDownArrow>
		i=180;
 8004cbe:	23b4      	movs	r3, #180	; 0xb4
 8004cc0:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc4:	b298      	uxth	r0, r3
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	b299      	uxth	r1, r3
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f7fc fd7b 	bl	80017cc <drawUpDownArrow>
		i=220;
 8004cd6:	23dc      	movs	r3, #220	; 0xdc
 8004cd8:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8004cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cdc:	b298      	uxth	r0, r3
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	b299      	uxth	r1, r3
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f7fc fd6f 	bl	80017cc <drawUpDownArrow>
		break;
 8004cee:	f000 becb 	b.w	8005a88 <drawStatusMenu+0x1288>
 8004cf2:	bf00      	nop
 8004cf4:	080149c0 	.word	0x080149c0
 8004cf8:	080144e8 	.word	0x080144e8
 8004cfc:	08014528 	.word	0x08014528
 8004d00:	08014534 	.word	0x08014534
 8004d04:	08014540 	.word	0x08014540
 8004d08:	0801454c 	.word	0x0801454c
 8004d0c:	08014558 	.word	0x08014558
 8004d10:	08014564 	.word	0x08014564
 8004d14:	2001033a 	.word	0x2001033a
 8004d18:	2001033c 	.word	0x2001033c
	}
	case 2:{
		i=35;
 8004d1c:	2323      	movs	r3, #35	; 0x23
 8004d1e:	637b      	str	r3, [r7, #52]	; 0x34
		j=90;
 8004d20:	235a      	movs	r3, #90	; 0x5a
 8004d22:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b02      	subs	r3, #2
 8004d2a:	b299      	uxth	r1, r3
 8004d2c:	4ba4      	ldr	r3, [pc, #656]	; (8004fc0 <drawStatusMenu+0x7c0>)
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	3b02      	subs	r3, #2
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3302      	adds	r3, #2
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2002      	movs	r0, #2
 8004d3e:	f7fc f8a9 	bl	8000e94 <LCD_FillRect>
		j=75;
 8004d42:	234b      	movs	r3, #75	; 0x4b
 8004d44:	617b      	str	r3, [r7, #20]
		i=42;
 8004d46:	232a      	movs	r3, #42	; 0x2a
 8004d48:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutStr(i, j, "AI VOLTAGES:", fnt7x10);
 8004d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4c:	b298      	uxth	r0, r3
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	b299      	uxth	r1, r3
 8004d52:	4b9c      	ldr	r3, [pc, #624]	; (8004fc4 <drawStatusMenu+0x7c4>)
 8004d54:	4a9c      	ldr	r2, [pc, #624]	; (8004fc8 <drawStatusMenu+0x7c8>)
 8004d56:	f7fc fbe9 	bl	800152c <LCD_PutStr>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d60:	4413      	add	r3, r2
 8004d62:	637b      	str	r3, [r7, #52]	; 0x34
		i+=125;
 8004d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d66:	337d      	adds	r3, #125	; 0x7d
 8004d68:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "GPIO INPUTS:", fnt7x10);
 8004d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6c:	b298      	uxth	r0, r3
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	b299      	uxth	r1, r3
 8004d72:	4b94      	ldr	r3, [pc, #592]	; (8004fc4 <drawStatusMenu+0x7c4>)
 8004d74:	4a95      	ldr	r2, [pc, #596]	; (8004fcc <drawStatusMenu+0x7cc>)
 8004d76:	f7fc fbd9 	bl	800152c <LCD_PutStr>

		i=10;
 8004d7a:	230a      	movs	r3, #10
 8004d7c:	637b      	str	r3, [r7, #52]	; 0x34
		j=95;
 8004d7e:	235f      	movs	r3, #95	; 0x5f
 8004d80:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI0: ", fnt7x10);
 8004d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d84:	b298      	uxth	r0, r3
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	b299      	uxth	r1, r3
 8004d8a:	4b8e      	ldr	r3, [pc, #568]	; (8004fc4 <drawStatusMenu+0x7c4>)
 8004d8c:	4a90      	ldr	r2, [pc, #576]	; (8004fd0 <drawStatusMenu+0x7d0>)
 8004d8e:	f7fc fbcd 	bl	800152c <LCD_PutStr>
 8004d92:	4603      	mov	r3, r0
 8004d94:	461a      	mov	r2, r3
 8004d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d98:	4413      	add	r3, r2
 8004d9a:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc0];
 8004d9c:	4b8d      	ldr	r3, [pc, #564]	; (8004fd4 <drawStatusMenu+0x7d4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a8d      	ldr	r2, [pc, #564]	; (8004fd8 <drawStatusMenu+0x7d8>)
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	edd3 7a00 	vldr	s15, [r3]
 8004daa:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8004fdc <drawStatusMenu+0x7dc>
 8004dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004db2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004db6:	ee17 3a90 	vmov	r3, s15
 8004dba:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8004dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dbe:	b298      	uxth	r0, r3
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	b299      	uxth	r1, r3
 8004dc4:	4b7f      	ldr	r3, [pc, #508]	; (8004fc4 <drawStatusMenu+0x7c4>)
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	2303      	movs	r3, #3
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	f7fc fc4c 	bl	8001668 <LCD_PutIntF>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	4413      	add	r3, r2
 8004dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dda:	4413      	add	r3, r2
 8004ddc:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI9: ", fnt7x10);
 8004dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de0:	b298      	uxth	r0, r3
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	b299      	uxth	r1, r3
 8004de6:	4b77      	ldr	r3, [pc, #476]	; (8004fc4 <drawStatusMenu+0x7c4>)
 8004de8:	4a7d      	ldr	r2, [pc, #500]	; (8004fe0 <drawStatusMenu+0x7e0>)
 8004dea:	f7fc fb9f 	bl	800152c <LCD_PutStr>
 8004dee:	4603      	mov	r3, r0
 8004df0:	461a      	mov	r2, r3
 8004df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df4:	4413      	add	r3, r2
 8004df6:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc9];
 8004df8:	4b76      	ldr	r3, [pc, #472]	; (8004fd4 <drawStatusMenu+0x7d4>)
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	4a76      	ldr	r2, [pc, #472]	; (8004fd8 <drawStatusMenu+0x7d8>)
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	edd3 7a00 	vldr	s15, [r3]
 8004e06:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8004fdc <drawStatusMenu+0x7dc>
 8004e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e12:	ee17 3a90 	vmov	r3, s15
 8004e16:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8004e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1a:	b298      	uxth	r0, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	b299      	uxth	r1, r3
 8004e20:	4b68      	ldr	r3, [pc, #416]	; (8004fc4 <drawStatusMenu+0x7c4>)
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	2303      	movs	r3, #3
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	f7fc fc1e 	bl	8001668 <LCD_PutIntF>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	461a      	mov	r2, r3
 8004e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e32:	4413      	add	r3, r2
 8004e34:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In0: ", fnt7x10);
 8004e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3c:	b298      	uxth	r0, r3
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	b299      	uxth	r1, r3
 8004e42:	4b60      	ldr	r3, [pc, #384]	; (8004fc4 <drawStatusMenu+0x7c4>)
 8004e44:	4a67      	ldr	r2, [pc, #412]	; (8004fe4 <drawStatusMenu+0x7e4>)
 8004e46:	f7fc fb71 	bl	800152c <LCD_PutStr>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e50:	4413      	add	r3, r2
 8004e52:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input0], fnt7x10)+adjacentSpacing;
 8004e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e56:	b298      	uxth	r0, r3
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	b299      	uxth	r1, r3
 8004e5c:	4b62      	ldr	r3, [pc, #392]	; (8004fe8 <drawStatusMenu+0x7e8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a62      	ldr	r2, [pc, #392]	; (8004fec <drawStatusMenu+0x7ec>)
 8004e62:	5cd3      	ldrb	r3, [r2, r3]
 8004e64:	461a      	mov	r2, r3
 8004e66:	4b57      	ldr	r3, [pc, #348]	; (8004fc4 <drawStatusMenu+0x7c4>)
 8004e68:	f7fc fb98 	bl	800159c <LCD_PutInt>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	461a      	mov	r2, r3
 8004e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e72:	4413      	add	r3, r2
 8004e74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e76:	4413      	add	r3, r2
 8004e78:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In9: ", fnt7x10);
 8004e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7c:	b298      	uxth	r0, r3
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	b299      	uxth	r1, r3
 8004e82:	4b50      	ldr	r3, [pc, #320]	; (8004fc4 <drawStatusMenu+0x7c4>)
 8004e84:	4a5a      	ldr	r2, [pc, #360]	; (8004ff0 <drawStatusMenu+0x7f0>)
 8004e86:	f7fc fb51 	bl	800152c <LCD_PutStr>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e90:	4413      	add	r3, r2
 8004e92:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input9], fnt7x10);
 8004e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e96:	b298      	uxth	r0, r3
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	b299      	uxth	r1, r3
 8004e9c:	4b52      	ldr	r3, [pc, #328]	; (8004fe8 <drawStatusMenu+0x7e8>)
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	4a52      	ldr	r2, [pc, #328]	; (8004fec <drawStatusMenu+0x7ec>)
 8004ea2:	5cd3      	ldrb	r3, [r2, r3]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4b47      	ldr	r3, [pc, #284]	; (8004fc4 <drawStatusMenu+0x7c4>)
 8004ea8:	f7fc fb78 	bl	800159c <LCD_PutInt>
 8004eac:	4603      	mov	r3, r0
 8004eae:	461a      	mov	r2, r3
 8004eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb2:	4413      	add	r3, r2
 8004eb4:	637b      	str	r3, [r7, #52]	; 0x34


		i=10;
 8004eb6:	230a      	movs	r3, #10
 8004eb8:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	330f      	adds	r3, #15
 8004ebe:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI1: ", fnt7x10);
 8004ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec2:	b298      	uxth	r0, r3
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	b299      	uxth	r1, r3
 8004ec8:	4b3e      	ldr	r3, [pc, #248]	; (8004fc4 <drawStatusMenu+0x7c4>)
 8004eca:	4a4a      	ldr	r2, [pc, #296]	; (8004ff4 <drawStatusMenu+0x7f4>)
 8004ecc:	f7fc fb2e 	bl	800152c <LCD_PutStr>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed6:	4413      	add	r3, r2
 8004ed8:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc1];
 8004eda:	4b3e      	ldr	r3, [pc, #248]	; (8004fd4 <drawStatusMenu+0x7d4>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4a3e      	ldr	r2, [pc, #248]	; (8004fd8 <drawStatusMenu+0x7d8>)
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	edd3 7a00 	vldr	s15, [r3]
 8004ee8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004fdc <drawStatusMenu+0x7dc>
 8004eec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ef4:	ee17 3a90 	vmov	r3, s15
 8004ef8:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8004efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efc:	b298      	uxth	r0, r3
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	b299      	uxth	r1, r3
 8004f02:	4b30      	ldr	r3, [pc, #192]	; (8004fc4 <drawStatusMenu+0x7c4>)
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	2303      	movs	r3, #3
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	f7fc fbad 	bl	8001668 <LCD_PutIntF>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	461a      	mov	r2, r3
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	4413      	add	r3, r2
 8004f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f18:	4413      	add	r3, r2
 8004f1a:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI10: ", fnt7x10);
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1e:	b298      	uxth	r0, r3
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	b299      	uxth	r1, r3
 8004f24:	4b27      	ldr	r3, [pc, #156]	; (8004fc4 <drawStatusMenu+0x7c4>)
 8004f26:	4a34      	ldr	r2, [pc, #208]	; (8004ff8 <drawStatusMenu+0x7f8>)
 8004f28:	f7fc fb00 	bl	800152c <LCD_PutStr>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	461a      	mov	r2, r3
 8004f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f32:	4413      	add	r3, r2
 8004f34:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc10];
 8004f36:	4b27      	ldr	r3, [pc, #156]	; (8004fd4 <drawStatusMenu+0x7d4>)
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	4a27      	ldr	r2, [pc, #156]	; (8004fd8 <drawStatusMenu+0x7d8>)
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	edd3 7a00 	vldr	s15, [r3]
 8004f44:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004fdc <drawStatusMenu+0x7dc>
 8004f48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f50:	ee17 3a90 	vmov	r3, s15
 8004f54:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8004f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f58:	b298      	uxth	r0, r3
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	b299      	uxth	r1, r3
 8004f5e:	4b19      	ldr	r3, [pc, #100]	; (8004fc4 <drawStatusMenu+0x7c4>)
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	2303      	movs	r3, #3
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	f7fc fb7f 	bl	8001668 <LCD_PutIntF>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f70:	4413      	add	r3, r2
 8004f72:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In1: ", fnt7x10);
 8004f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7a:	b298      	uxth	r0, r3
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	b299      	uxth	r1, r3
 8004f80:	4b10      	ldr	r3, [pc, #64]	; (8004fc4 <drawStatusMenu+0x7c4>)
 8004f82:	4a1e      	ldr	r2, [pc, #120]	; (8004ffc <drawStatusMenu+0x7fc>)
 8004f84:	f7fc fad2 	bl	800152c <LCD_PutStr>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8e:	4413      	add	r3, r2
 8004f90:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input1], fnt7x10)+adjacentSpacing;
 8004f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f94:	b298      	uxth	r0, r3
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	b299      	uxth	r1, r3
 8004f9a:	4b13      	ldr	r3, [pc, #76]	; (8004fe8 <drawStatusMenu+0x7e8>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	4a13      	ldr	r2, [pc, #76]	; (8004fec <drawStatusMenu+0x7ec>)
 8004fa0:	5cd3      	ldrb	r3, [r2, r3]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <drawStatusMenu+0x7c4>)
 8004fa6:	f7fc faf9 	bl	800159c <LCD_PutInt>
 8004faa:	4603      	mov	r3, r0
 8004fac:	461a      	mov	r2, r3
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	4413      	add	r3, r2
 8004fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fb4:	4413      	add	r3, r2
 8004fb6:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In10: ", fnt7x10);
 8004fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fba:	b298      	uxth	r0, r3
 8004fbc:	e020      	b.n	8005000 <drawStatusMenu+0x800>
 8004fbe:	bf00      	nop
 8004fc0:	2001033a 	.word	0x2001033a
 8004fc4:	080149c0 	.word	0x080149c0
 8004fc8:	08014570 	.word	0x08014570
 8004fcc:	08014580 	.word	0x08014580
 8004fd0:	08014590 	.word	0x08014590
 8004fd4:	20000118 	.word	0x20000118
 8004fd8:	2002407c 	.word	0x2002407c
 8004fdc:	447a0000 	.word	0x447a0000
 8004fe0:	08014598 	.word	0x08014598
 8004fe4:	080145a0 	.word	0x080145a0
 8004fe8:	200000e8 	.word	0x200000e8
 8004fec:	20010560 	.word	0x20010560
 8004ff0:	080145a8 	.word	0x080145a8
 8004ff4:	080145b0 	.word	0x080145b0
 8004ff8:	080145b8 	.word	0x080145b8
 8004ffc:	080145c0 	.word	0x080145c0
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	b299      	uxth	r1, r3
 8005004:	4ba3      	ldr	r3, [pc, #652]	; (8005294 <drawStatusMenu+0xa94>)
 8005006:	4aa4      	ldr	r2, [pc, #656]	; (8005298 <drawStatusMenu+0xa98>)
 8005008:	f7fc fa90 	bl	800152c <LCD_PutStr>
 800500c:	4603      	mov	r3, r0
 800500e:	461a      	mov	r2, r3
 8005010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005012:	4413      	add	r3, r2
 8005014:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input10], fnt7x10);
 8005016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005018:	b298      	uxth	r0, r3
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	b299      	uxth	r1, r3
 800501e:	4b9f      	ldr	r3, [pc, #636]	; (800529c <drawStatusMenu+0xa9c>)
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	4a9f      	ldr	r2, [pc, #636]	; (80052a0 <drawStatusMenu+0xaa0>)
 8005024:	5cd3      	ldrb	r3, [r2, r3]
 8005026:	461a      	mov	r2, r3
 8005028:	4b9a      	ldr	r3, [pc, #616]	; (8005294 <drawStatusMenu+0xa94>)
 800502a:	f7fc fab7 	bl	800159c <LCD_PutInt>
 800502e:	4603      	mov	r3, r0
 8005030:	461a      	mov	r2, r3
 8005032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005034:	4413      	add	r3, r2
 8005036:	637b      	str	r3, [r7, #52]	; 0x34

		i=10;
 8005038:	230a      	movs	r3, #10
 800503a:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	330f      	adds	r3, #15
 8005040:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI2: ", fnt7x10);
 8005042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005044:	b298      	uxth	r0, r3
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	b299      	uxth	r1, r3
 800504a:	4b92      	ldr	r3, [pc, #584]	; (8005294 <drawStatusMenu+0xa94>)
 800504c:	4a95      	ldr	r2, [pc, #596]	; (80052a4 <drawStatusMenu+0xaa4>)
 800504e:	f7fc fa6d 	bl	800152c <LCD_PutStr>
 8005052:	4603      	mov	r3, r0
 8005054:	461a      	mov	r2, r3
 8005056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005058:	4413      	add	r3, r2
 800505a:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc2];
 800505c:	4b92      	ldr	r3, [pc, #584]	; (80052a8 <drawStatusMenu+0xaa8>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a92      	ldr	r2, [pc, #584]	; (80052ac <drawStatusMenu+0xaac>)
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	edd3 7a00 	vldr	s15, [r3]
 800506a:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80052b0 <drawStatusMenu+0xab0>
 800506e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005076:	ee17 3a90 	vmov	r3, s15
 800507a:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 800507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507e:	b298      	uxth	r0, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	b299      	uxth	r1, r3
 8005084:	4b83      	ldr	r3, [pc, #524]	; (8005294 <drawStatusMenu+0xa94>)
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2303      	movs	r3, #3
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	f7fc faec 	bl	8001668 <LCD_PutIntF>
 8005090:	4603      	mov	r3, r0
 8005092:	461a      	mov	r2, r3
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005096:	4413      	add	r3, r2
 8005098:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800509a:	4413      	add	r3, r2
 800509c:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI11: ", fnt7x10);
 800509e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a0:	b298      	uxth	r0, r3
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	b299      	uxth	r1, r3
 80050a6:	4b7b      	ldr	r3, [pc, #492]	; (8005294 <drawStatusMenu+0xa94>)
 80050a8:	4a82      	ldr	r2, [pc, #520]	; (80052b4 <drawStatusMenu+0xab4>)
 80050aa:	f7fc fa3f 	bl	800152c <LCD_PutStr>
 80050ae:	4603      	mov	r3, r0
 80050b0:	461a      	mov	r2, r3
 80050b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b4:	4413      	add	r3, r2
 80050b6:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc11];
 80050b8:	4b7b      	ldr	r3, [pc, #492]	; (80052a8 <drawStatusMenu+0xaa8>)
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	4a7b      	ldr	r2, [pc, #492]	; (80052ac <drawStatusMenu+0xaac>)
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	edd3 7a00 	vldr	s15, [r3]
 80050c6:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80052b0 <drawStatusMenu+0xab0>
 80050ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050d2:	ee17 3a90 	vmov	r3, s15
 80050d6:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80050d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050da:	b298      	uxth	r0, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	b299      	uxth	r1, r3
 80050e0:	4b6c      	ldr	r3, [pc, #432]	; (8005294 <drawStatusMenu+0xa94>)
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	2303      	movs	r3, #3
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	f7fc fabe 	bl	8001668 <LCD_PutIntF>
 80050ec:	4603      	mov	r3, r0
 80050ee:	461a      	mov	r2, r3
 80050f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f2:	4413      	add	r3, r2
 80050f4:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In2: ", fnt7x10);
 80050fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fc:	b298      	uxth	r0, r3
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	b299      	uxth	r1, r3
 8005102:	4b64      	ldr	r3, [pc, #400]	; (8005294 <drawStatusMenu+0xa94>)
 8005104:	4a6c      	ldr	r2, [pc, #432]	; (80052b8 <drawStatusMenu+0xab8>)
 8005106:	f7fc fa11 	bl	800152c <LCD_PutStr>
 800510a:	4603      	mov	r3, r0
 800510c:	461a      	mov	r2, r3
 800510e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005110:	4413      	add	r3, r2
 8005112:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input2], fnt7x10)+adjacentSpacing;
 8005114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005116:	b298      	uxth	r0, r3
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	b299      	uxth	r1, r3
 800511c:	4b5f      	ldr	r3, [pc, #380]	; (800529c <drawStatusMenu+0xa9c>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	4a5f      	ldr	r2, [pc, #380]	; (80052a0 <drawStatusMenu+0xaa0>)
 8005122:	5cd3      	ldrb	r3, [r2, r3]
 8005124:	461a      	mov	r2, r3
 8005126:	4b5b      	ldr	r3, [pc, #364]	; (8005294 <drawStatusMenu+0xa94>)
 8005128:	f7fc fa38 	bl	800159c <LCD_PutInt>
 800512c:	4603      	mov	r3, r0
 800512e:	461a      	mov	r2, r3
 8005130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005132:	4413      	add	r3, r2
 8005134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005136:	4413      	add	r3, r2
 8005138:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In11: ", fnt7x10);
 800513a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513c:	b298      	uxth	r0, r3
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	b299      	uxth	r1, r3
 8005142:	4b54      	ldr	r3, [pc, #336]	; (8005294 <drawStatusMenu+0xa94>)
 8005144:	4a5d      	ldr	r2, [pc, #372]	; (80052bc <drawStatusMenu+0xabc>)
 8005146:	f7fc f9f1 	bl	800152c <LCD_PutStr>
 800514a:	4603      	mov	r3, r0
 800514c:	461a      	mov	r2, r3
 800514e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005150:	4413      	add	r3, r2
 8005152:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input11], fnt7x10);
 8005154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005156:	b298      	uxth	r0, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	b299      	uxth	r1, r3
 800515c:	4b4f      	ldr	r3, [pc, #316]	; (800529c <drawStatusMenu+0xa9c>)
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	4a4f      	ldr	r2, [pc, #316]	; (80052a0 <drawStatusMenu+0xaa0>)
 8005162:	5cd3      	ldrb	r3, [r2, r3]
 8005164:	461a      	mov	r2, r3
 8005166:	4b4b      	ldr	r3, [pc, #300]	; (8005294 <drawStatusMenu+0xa94>)
 8005168:	f7fc fa18 	bl	800159c <LCD_PutInt>
 800516c:	4603      	mov	r3, r0
 800516e:	461a      	mov	r2, r3
 8005170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005172:	4413      	add	r3, r2
 8005174:	637b      	str	r3, [r7, #52]	; 0x34

		i=10;
 8005176:	230a      	movs	r3, #10
 8005178:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	330f      	adds	r3, #15
 800517e:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI3: ", fnt7x10);
 8005180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005182:	b298      	uxth	r0, r3
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	b299      	uxth	r1, r3
 8005188:	4b42      	ldr	r3, [pc, #264]	; (8005294 <drawStatusMenu+0xa94>)
 800518a:	4a4d      	ldr	r2, [pc, #308]	; (80052c0 <drawStatusMenu+0xac0>)
 800518c:	f7fc f9ce 	bl	800152c <LCD_PutStr>
 8005190:	4603      	mov	r3, r0
 8005192:	461a      	mov	r2, r3
 8005194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005196:	4413      	add	r3, r2
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc3];
 800519a:	4b43      	ldr	r3, [pc, #268]	; (80052a8 <drawStatusMenu+0xaa8>)
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	4a43      	ldr	r2, [pc, #268]	; (80052ac <drawStatusMenu+0xaac>)
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	edd3 7a00 	vldr	s15, [r3]
 80051a8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80052b0 <drawStatusMenu+0xab0>
 80051ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051b4:	ee17 3a90 	vmov	r3, s15
 80051b8:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80051ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051bc:	b298      	uxth	r0, r3
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	b299      	uxth	r1, r3
 80051c2:	4b34      	ldr	r3, [pc, #208]	; (8005294 <drawStatusMenu+0xa94>)
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	2303      	movs	r3, #3
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	f7fc fa4d 	bl	8001668 <LCD_PutIntF>
 80051ce:	4603      	mov	r3, r0
 80051d0:	461a      	mov	r2, r3
 80051d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d4:	4413      	add	r3, r2
 80051d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051d8:	4413      	add	r3, r2
 80051da:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI12: ", fnt7x10);
 80051dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051de:	b298      	uxth	r0, r3
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	b299      	uxth	r1, r3
 80051e4:	4b2b      	ldr	r3, [pc, #172]	; (8005294 <drawStatusMenu+0xa94>)
 80051e6:	4a37      	ldr	r2, [pc, #220]	; (80052c4 <drawStatusMenu+0xac4>)
 80051e8:	f7fc f9a0 	bl	800152c <LCD_PutStr>
 80051ec:	4603      	mov	r3, r0
 80051ee:	461a      	mov	r2, r3
 80051f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f2:	4413      	add	r3, r2
 80051f4:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc12];
 80051f6:	4b2c      	ldr	r3, [pc, #176]	; (80052a8 <drawStatusMenu+0xaa8>)
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	4a2c      	ldr	r2, [pc, #176]	; (80052ac <drawStatusMenu+0xaac>)
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	edd3 7a00 	vldr	s15, [r3]
 8005204:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80052b0 <drawStatusMenu+0xab0>
 8005208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800520c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005210:	ee17 3a90 	vmov	r3, s15
 8005214:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005218:	b298      	uxth	r0, r3
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	b299      	uxth	r1, r3
 800521e:	4b1d      	ldr	r3, [pc, #116]	; (8005294 <drawStatusMenu+0xa94>)
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	2303      	movs	r3, #3
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	f7fc fa1f 	bl	8001668 <LCD_PutIntF>
 800522a:	4603      	mov	r3, r0
 800522c:	461a      	mov	r2, r3
 800522e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005230:	4413      	add	r3, r2
 8005232:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In3: ", fnt7x10);
 8005238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523a:	b298      	uxth	r0, r3
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	b299      	uxth	r1, r3
 8005240:	4b14      	ldr	r3, [pc, #80]	; (8005294 <drawStatusMenu+0xa94>)
 8005242:	4a21      	ldr	r2, [pc, #132]	; (80052c8 <drawStatusMenu+0xac8>)
 8005244:	f7fc f972 	bl	800152c <LCD_PutStr>
 8005248:	4603      	mov	r3, r0
 800524a:	461a      	mov	r2, r3
 800524c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524e:	4413      	add	r3, r2
 8005250:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input3], fnt7x10);
 8005252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005254:	b298      	uxth	r0, r3
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	b299      	uxth	r1, r3
 800525a:	4b10      	ldr	r3, [pc, #64]	; (800529c <drawStatusMenu+0xa9c>)
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	4a10      	ldr	r2, [pc, #64]	; (80052a0 <drawStatusMenu+0xaa0>)
 8005260:	5cd3      	ldrb	r3, [r2, r3]
 8005262:	461a      	mov	r2, r3
 8005264:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <drawStatusMenu+0xa94>)
 8005266:	f7fc f999 	bl	800159c <LCD_PutInt>


		i=10;
 800526a:	230a      	movs	r3, #10
 800526c:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	330f      	adds	r3, #15
 8005272:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI4: ", fnt7x10);
 8005274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005276:	b298      	uxth	r0, r3
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	b299      	uxth	r1, r3
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <drawStatusMenu+0xa94>)
 800527e:	4a13      	ldr	r2, [pc, #76]	; (80052cc <drawStatusMenu+0xacc>)
 8005280:	f7fc f954 	bl	800152c <LCD_PutStr>
 8005284:	4603      	mov	r3, r0
 8005286:	461a      	mov	r2, r3
 8005288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528a:	4413      	add	r3, r2
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc4];
 800528e:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <drawStatusMenu+0xaa8>)
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	e01d      	b.n	80052d0 <drawStatusMenu+0xad0>
 8005294:	080149c0 	.word	0x080149c0
 8005298:	080145c8 	.word	0x080145c8
 800529c:	200000e8 	.word	0x200000e8
 80052a0:	20010560 	.word	0x20010560
 80052a4:	080145d0 	.word	0x080145d0
 80052a8:	20000118 	.word	0x20000118
 80052ac:	2002407c 	.word	0x2002407c
 80052b0:	447a0000 	.word	0x447a0000
 80052b4:	080145d8 	.word	0x080145d8
 80052b8:	080145e0 	.word	0x080145e0
 80052bc:	080145e8 	.word	0x080145e8
 80052c0:	080145f0 	.word	0x080145f0
 80052c4:	080145f8 	.word	0x080145f8
 80052c8:	08014600 	.word	0x08014600
 80052cc:	08014608 	.word	0x08014608
 80052d0:	4aa7      	ldr	r2, [pc, #668]	; (8005570 <drawStatusMenu+0xd70>)
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	edd3 7a00 	vldr	s15, [r3]
 80052da:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8005574 <drawStatusMenu+0xd74>
 80052de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052e6:	ee17 3a90 	vmov	r3, s15
 80052ea:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80052ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ee:	b298      	uxth	r0, r3
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	b299      	uxth	r1, r3
 80052f4:	4ba0      	ldr	r3, [pc, #640]	; (8005578 <drawStatusMenu+0xd78>)
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	2303      	movs	r3, #3
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	f7fc f9b4 	bl	8001668 <LCD_PutIntF>
 8005300:	4603      	mov	r3, r0
 8005302:	461a      	mov	r2, r3
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	4413      	add	r3, r2
 8005308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800530a:	4413      	add	r3, r2
 800530c:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI13: ", fnt7x10);
 800530e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005310:	b298      	uxth	r0, r3
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	b299      	uxth	r1, r3
 8005316:	4b98      	ldr	r3, [pc, #608]	; (8005578 <drawStatusMenu+0xd78>)
 8005318:	4a98      	ldr	r2, [pc, #608]	; (800557c <drawStatusMenu+0xd7c>)
 800531a:	f7fc f907 	bl	800152c <LCD_PutStr>
 800531e:	4603      	mov	r3, r0
 8005320:	461a      	mov	r2, r3
 8005322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005324:	4413      	add	r3, r2
 8005326:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc13];
 8005328:	4b95      	ldr	r3, [pc, #596]	; (8005580 <drawStatusMenu+0xd80>)
 800532a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532c:	4a90      	ldr	r2, [pc, #576]	; (8005570 <drawStatusMenu+0xd70>)
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	edd3 7a00 	vldr	s15, [r3]
 8005336:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8005574 <drawStatusMenu+0xd74>
 800533a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800533e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005342:	ee17 3a90 	vmov	r3, s15
 8005346:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534a:	b298      	uxth	r0, r3
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	b299      	uxth	r1, r3
 8005350:	4b89      	ldr	r3, [pc, #548]	; (8005578 <drawStatusMenu+0xd78>)
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2303      	movs	r3, #3
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	f7fc f986 	bl	8001668 <LCD_PutIntF>
 800535c:	4603      	mov	r3, r0
 800535e:	461a      	mov	r2, r3
 8005360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005362:	4413      	add	r3, r2
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 8005366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005368:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In4: ", fnt7x10);
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536c:	b298      	uxth	r0, r3
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	b299      	uxth	r1, r3
 8005372:	4b81      	ldr	r3, [pc, #516]	; (8005578 <drawStatusMenu+0xd78>)
 8005374:	4a83      	ldr	r2, [pc, #524]	; (8005584 <drawStatusMenu+0xd84>)
 8005376:	f7fc f8d9 	bl	800152c <LCD_PutStr>
 800537a:	4603      	mov	r3, r0
 800537c:	461a      	mov	r2, r3
 800537e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005380:	4413      	add	r3, r2
 8005382:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input4], fnt7x10);
 8005384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005386:	b298      	uxth	r0, r3
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	b299      	uxth	r1, r3
 800538c:	4b7e      	ldr	r3, [pc, #504]	; (8005588 <drawStatusMenu+0xd88>)
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	4a7e      	ldr	r2, [pc, #504]	; (800558c <drawStatusMenu+0xd8c>)
 8005392:	5cd3      	ldrb	r3, [r2, r3]
 8005394:	461a      	mov	r2, r3
 8005396:	4b78      	ldr	r3, [pc, #480]	; (8005578 <drawStatusMenu+0xd78>)
 8005398:	f7fc f900 	bl	800159c <LCD_PutInt>

		i=10;
 800539c:	230a      	movs	r3, #10
 800539e:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	330f      	adds	r3, #15
 80053a4:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI5: ", fnt7x10);
 80053a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a8:	b298      	uxth	r0, r3
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	b299      	uxth	r1, r3
 80053ae:	4b72      	ldr	r3, [pc, #456]	; (8005578 <drawStatusMenu+0xd78>)
 80053b0:	4a77      	ldr	r2, [pc, #476]	; (8005590 <drawStatusMenu+0xd90>)
 80053b2:	f7fc f8bb 	bl	800152c <LCD_PutStr>
 80053b6:	4603      	mov	r3, r0
 80053b8:	461a      	mov	r2, r3
 80053ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053bc:	4413      	add	r3, r2
 80053be:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc5];
 80053c0:	4b6f      	ldr	r3, [pc, #444]	; (8005580 <drawStatusMenu+0xd80>)
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	4a6a      	ldr	r2, [pc, #424]	; (8005570 <drawStatusMenu+0xd70>)
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	edd3 7a00 	vldr	s15, [r3]
 80053ce:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8005574 <drawStatusMenu+0xd74>
 80053d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053da:	ee17 3a90 	vmov	r3, s15
 80053de:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80053e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e2:	b298      	uxth	r0, r3
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	b299      	uxth	r1, r3
 80053e8:	4b63      	ldr	r3, [pc, #396]	; (8005578 <drawStatusMenu+0xd78>)
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	2303      	movs	r3, #3
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	f7fc f93a 	bl	8001668 <LCD_PutIntF>
 80053f4:	4603      	mov	r3, r0
 80053f6:	461a      	mov	r2, r3
 80053f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fa:	4413      	add	r3, r2
 80053fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053fe:	4413      	add	r3, r2
 8005400:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI14: ", fnt7x10);
 8005402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005404:	b298      	uxth	r0, r3
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	b299      	uxth	r1, r3
 800540a:	4b5b      	ldr	r3, [pc, #364]	; (8005578 <drawStatusMenu+0xd78>)
 800540c:	4a61      	ldr	r2, [pc, #388]	; (8005594 <drawStatusMenu+0xd94>)
 800540e:	f7fc f88d 	bl	800152c <LCD_PutStr>
 8005412:	4603      	mov	r3, r0
 8005414:	461a      	mov	r2, r3
 8005416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005418:	4413      	add	r3, r2
 800541a:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc14];
 800541c:	4b58      	ldr	r3, [pc, #352]	; (8005580 <drawStatusMenu+0xd80>)
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	4a53      	ldr	r2, [pc, #332]	; (8005570 <drawStatusMenu+0xd70>)
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	edd3 7a00 	vldr	s15, [r3]
 800542a:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8005574 <drawStatusMenu+0xd74>
 800542e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005436:	ee17 3a90 	vmov	r3, s15
 800543a:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 800543c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543e:	b298      	uxth	r0, r3
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	b299      	uxth	r1, r3
 8005444:	4b4c      	ldr	r3, [pc, #304]	; (8005578 <drawStatusMenu+0xd78>)
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	2303      	movs	r3, #3
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	f7fc f90c 	bl	8001668 <LCD_PutIntF>
 8005450:	4603      	mov	r3, r0
 8005452:	461a      	mov	r2, r3
 8005454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005456:	4413      	add	r3, r2
 8005458:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 800545a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In5: ", fnt7x10);
 800545e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005460:	b298      	uxth	r0, r3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	b299      	uxth	r1, r3
 8005466:	4b44      	ldr	r3, [pc, #272]	; (8005578 <drawStatusMenu+0xd78>)
 8005468:	4a4b      	ldr	r2, [pc, #300]	; (8005598 <drawStatusMenu+0xd98>)
 800546a:	f7fc f85f 	bl	800152c <LCD_PutStr>
 800546e:	4603      	mov	r3, r0
 8005470:	461a      	mov	r2, r3
 8005472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005474:	4413      	add	r3, r2
 8005476:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input5], fnt7x10);
 8005478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547a:	b298      	uxth	r0, r3
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	b299      	uxth	r1, r3
 8005480:	4b41      	ldr	r3, [pc, #260]	; (8005588 <drawStatusMenu+0xd88>)
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	4a41      	ldr	r2, [pc, #260]	; (800558c <drawStatusMenu+0xd8c>)
 8005486:	5cd3      	ldrb	r3, [r2, r3]
 8005488:	461a      	mov	r2, r3
 800548a:	4b3b      	ldr	r3, [pc, #236]	; (8005578 <drawStatusMenu+0xd78>)
 800548c:	f7fc f886 	bl	800159c <LCD_PutInt>

		i=10;
 8005490:	230a      	movs	r3, #10
 8005492:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	330f      	adds	r3, #15
 8005498:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI6: ", fnt7x10);
 800549a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549c:	b298      	uxth	r0, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	b299      	uxth	r1, r3
 80054a2:	4b35      	ldr	r3, [pc, #212]	; (8005578 <drawStatusMenu+0xd78>)
 80054a4:	4a3d      	ldr	r2, [pc, #244]	; (800559c <drawStatusMenu+0xd9c>)
 80054a6:	f7fc f841 	bl	800152c <LCD_PutStr>
 80054aa:	4603      	mov	r3, r0
 80054ac:	461a      	mov	r2, r3
 80054ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b0:	4413      	add	r3, r2
 80054b2:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc6];
 80054b4:	4b32      	ldr	r3, [pc, #200]	; (8005580 <drawStatusMenu+0xd80>)
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	4a2d      	ldr	r2, [pc, #180]	; (8005570 <drawStatusMenu+0xd70>)
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	edd3 7a00 	vldr	s15, [r3]
 80054c2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005574 <drawStatusMenu+0xd74>
 80054c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054ce:	ee17 3a90 	vmov	r3, s15
 80054d2:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80054d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d6:	b298      	uxth	r0, r3
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	b299      	uxth	r1, r3
 80054dc:	4b26      	ldr	r3, [pc, #152]	; (8005578 <drawStatusMenu+0xd78>)
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	2303      	movs	r3, #3
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	f7fc f8c0 	bl	8001668 <LCD_PutIntF>
 80054e8:	4603      	mov	r3, r0
 80054ea:	461a      	mov	r2, r3
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	4413      	add	r3, r2
 80054f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054f2:	4413      	add	r3, r2
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI15: ", fnt7x10);
 80054f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f8:	b298      	uxth	r0, r3
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	b299      	uxth	r1, r3
 80054fe:	4b1e      	ldr	r3, [pc, #120]	; (8005578 <drawStatusMenu+0xd78>)
 8005500:	4a27      	ldr	r2, [pc, #156]	; (80055a0 <drawStatusMenu+0xda0>)
 8005502:	f7fc f813 	bl	800152c <LCD_PutStr>
 8005506:	4603      	mov	r3, r0
 8005508:	461a      	mov	r2, r3
 800550a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550c:	4413      	add	r3, r2
 800550e:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc15];
 8005510:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <drawStatusMenu+0xd80>)
 8005512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005514:	4a16      	ldr	r2, [pc, #88]	; (8005570 <drawStatusMenu+0xd70>)
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	edd3 7a00 	vldr	s15, [r3]
 800551e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005574 <drawStatusMenu+0xd74>
 8005522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800552a:	ee17 3a90 	vmov	r3, s15
 800552e:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005532:	b298      	uxth	r0, r3
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	b299      	uxth	r1, r3
 8005538:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <drawStatusMenu+0xd78>)
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	2303      	movs	r3, #3
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	f7fc f892 	bl	8001668 <LCD_PutIntF>
 8005544:	4603      	mov	r3, r0
 8005546:	461a      	mov	r2, r3
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	4413      	add	r3, r2
 800554c:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In6: ", fnt7x10);
 8005552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005554:	b298      	uxth	r0, r3
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	b299      	uxth	r1, r3
 800555a:	4b07      	ldr	r3, [pc, #28]	; (8005578 <drawStatusMenu+0xd78>)
 800555c:	4a11      	ldr	r2, [pc, #68]	; (80055a4 <drawStatusMenu+0xda4>)
 800555e:	f7fb ffe5 	bl	800152c <LCD_PutStr>
 8005562:	4603      	mov	r3, r0
 8005564:	461a      	mov	r2, r3
 8005566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005568:	4413      	add	r3, r2
 800556a:	637b      	str	r3, [r7, #52]	; 0x34
 800556c:	e01c      	b.n	80055a8 <drawStatusMenu+0xda8>
 800556e:	bf00      	nop
 8005570:	2002407c 	.word	0x2002407c
 8005574:	447a0000 	.word	0x447a0000
 8005578:	080149c0 	.word	0x080149c0
 800557c:	08014610 	.word	0x08014610
 8005580:	20000118 	.word	0x20000118
 8005584:	08014618 	.word	0x08014618
 8005588:	200000e8 	.word	0x200000e8
 800558c:	20010560 	.word	0x20010560
 8005590:	08014620 	.word	0x08014620
 8005594:	08014628 	.word	0x08014628
 8005598:	08014630 	.word	0x08014630
 800559c:	08014638 	.word	0x08014638
 80055a0:	08014640 	.word	0x08014640
 80055a4:	08014648 	.word	0x08014648
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input6], fnt7x10);
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	b298      	uxth	r0, r3
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	b299      	uxth	r1, r3
 80055b0:	4b9b      	ldr	r3, [pc, #620]	; (8005820 <drawStatusMenu+0x1020>)
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	4a9b      	ldr	r2, [pc, #620]	; (8005824 <drawStatusMenu+0x1024>)
 80055b6:	5cd3      	ldrb	r3, [r2, r3]
 80055b8:	461a      	mov	r2, r3
 80055ba:	4b9b      	ldr	r3, [pc, #620]	; (8005828 <drawStatusMenu+0x1028>)
 80055bc:	f7fb ffee 	bl	800159c <LCD_PutInt>

		i=10;
 80055c0:	230a      	movs	r3, #10
 80055c2:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	330f      	adds	r3, #15
 80055c8:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI7: ", fnt7x10);
 80055ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055cc:	b298      	uxth	r0, r3
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	b299      	uxth	r1, r3
 80055d2:	4b95      	ldr	r3, [pc, #596]	; (8005828 <drawStatusMenu+0x1028>)
 80055d4:	4a95      	ldr	r2, [pc, #596]	; (800582c <drawStatusMenu+0x102c>)
 80055d6:	f7fb ffa9 	bl	800152c <LCD_PutStr>
 80055da:	4603      	mov	r3, r0
 80055dc:	461a      	mov	r2, r3
 80055de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e0:	4413      	add	r3, r2
 80055e2:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc7];
 80055e4:	4b92      	ldr	r3, [pc, #584]	; (8005830 <drawStatusMenu+0x1030>)
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	4a92      	ldr	r2, [pc, #584]	; (8005834 <drawStatusMenu+0x1034>)
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	edd3 7a00 	vldr	s15, [r3]
 80055f2:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8005838 <drawStatusMenu+0x1038>
 80055f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055fe:	ee17 3a90 	vmov	r3, s15
 8005602:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005606:	b298      	uxth	r0, r3
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	b299      	uxth	r1, r3
 800560c:	4b86      	ldr	r3, [pc, #536]	; (8005828 <drawStatusMenu+0x1028>)
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	2303      	movs	r3, #3
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	f7fc f828 	bl	8001668 <LCD_PutIntF>
 8005618:	4603      	mov	r3, r0
 800561a:	461a      	mov	r2, r3
 800561c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561e:	4413      	add	r3, r2
 8005620:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 8005622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In7: ", fnt7x10);
 8005626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005628:	b298      	uxth	r0, r3
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	b299      	uxth	r1, r3
 800562e:	4b7e      	ldr	r3, [pc, #504]	; (8005828 <drawStatusMenu+0x1028>)
 8005630:	4a82      	ldr	r2, [pc, #520]	; (800583c <drawStatusMenu+0x103c>)
 8005632:	f7fb ff7b 	bl	800152c <LCD_PutStr>
 8005636:	4603      	mov	r3, r0
 8005638:	461a      	mov	r2, r3
 800563a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563c:	4413      	add	r3, r2
 800563e:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input7], fnt7x10);
 8005640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005642:	b298      	uxth	r0, r3
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	b299      	uxth	r1, r3
 8005648:	4b75      	ldr	r3, [pc, #468]	; (8005820 <drawStatusMenu+0x1020>)
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	4a75      	ldr	r2, [pc, #468]	; (8005824 <drawStatusMenu+0x1024>)
 800564e:	5cd3      	ldrb	r3, [r2, r3]
 8005650:	461a      	mov	r2, r3
 8005652:	4b75      	ldr	r3, [pc, #468]	; (8005828 <drawStatusMenu+0x1028>)
 8005654:	f7fb ffa2 	bl	800159c <LCD_PutInt>

		i=10;
 8005658:	230a      	movs	r3, #10
 800565a:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	330f      	adds	r3, #15
 8005660:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI8: ", fnt7x10);
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005664:	b298      	uxth	r0, r3
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	b299      	uxth	r1, r3
 800566a:	4b6f      	ldr	r3, [pc, #444]	; (8005828 <drawStatusMenu+0x1028>)
 800566c:	4a74      	ldr	r2, [pc, #464]	; (8005840 <drawStatusMenu+0x1040>)
 800566e:	f7fb ff5d 	bl	800152c <LCD_PutStr>
 8005672:	4603      	mov	r3, r0
 8005674:	461a      	mov	r2, r3
 8005676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005678:	4413      	add	r3, r2
 800567a:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc8];
 800567c:	4b6c      	ldr	r3, [pc, #432]	; (8005830 <drawStatusMenu+0x1030>)
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	4a6c      	ldr	r2, [pc, #432]	; (8005834 <drawStatusMenu+0x1034>)
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	edd3 7a00 	vldr	s15, [r3]
 800568a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8005838 <drawStatusMenu+0x1038>
 800568e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005696:	ee17 3a90 	vmov	r3, s15
 800569a:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569e:	b298      	uxth	r0, r3
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	b299      	uxth	r1, r3
 80056a4:	4b60      	ldr	r3, [pc, #384]	; (8005828 <drawStatusMenu+0x1028>)
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	2303      	movs	r3, #3
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	f7fb ffdc 	bl	8001668 <LCD_PutIntF>
 80056b0:	4603      	mov	r3, r0
 80056b2:	461a      	mov	r2, r3
 80056b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b6:	4413      	add	r3, r2
 80056b8:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80056ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056bc:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In8: ", fnt7x10);
 80056be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c0:	b298      	uxth	r0, r3
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	b299      	uxth	r1, r3
 80056c6:	4b58      	ldr	r3, [pc, #352]	; (8005828 <drawStatusMenu+0x1028>)
 80056c8:	4a5e      	ldr	r2, [pc, #376]	; (8005844 <drawStatusMenu+0x1044>)
 80056ca:	f7fb ff2f 	bl	800152c <LCD_PutStr>
 80056ce:	4603      	mov	r3, r0
 80056d0:	461a      	mov	r2, r3
 80056d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d4:	4413      	add	r3, r2
 80056d6:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input8], fnt7x10);
 80056d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056da:	b298      	uxth	r0, r3
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	b299      	uxth	r1, r3
 80056e0:	4b4f      	ldr	r3, [pc, #316]	; (8005820 <drawStatusMenu+0x1020>)
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	4a4f      	ldr	r2, [pc, #316]	; (8005824 <drawStatusMenu+0x1024>)
 80056e6:	5cd3      	ldrb	r3, [r2, r3]
 80056e8:	461a      	mov	r2, r3
 80056ea:	4b4f      	ldr	r3, [pc, #316]	; (8005828 <drawStatusMenu+0x1028>)
 80056ec:	f7fb ff56 	bl	800159c <LCD_PutInt>
		//horizontal divider
		j=65;
 80056f0:	2341      	movs	r3, #65	; 0x41
 80056f2:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b299      	uxth	r1, r3
 80056fc:	4b52      	ldr	r3, [pc, #328]	; (8005848 <drawStatusMenu+0x1048>)
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	3b02      	subs	r3, #2
 8005702:	b29a      	uxth	r2, r3
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	b29b      	uxth	r3, r3
 8005708:	3301      	adds	r3, #1
 800570a:	b29b      	uxth	r3, r3
 800570c:	2002      	movs	r0, #2
 800570e:	f7fb fbc1 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 8005712:	23e6      	movs	r3, #230	; 0xe6
 8005714:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 8005716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b03      	subs	r3, #3
 800571c:	b298      	uxth	r0, r3
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	b299      	uxth	r1, r3
 8005722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005724:	b29b      	uxth	r3, r3
 8005726:	3303      	adds	r3, #3
 8005728:	b29a      	uxth	r2, r3
 800572a:	4b48      	ldr	r3, [pc, #288]	; (800584c <drawStatusMenu+0x104c>)
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	3b02      	subs	r3, #2
 8005730:	b29b      	uxth	r3, r3
 8005732:	f7fb fbaf 	bl	8000e94 <LCD_FillRect>

		i=155;
 8005736:	239b      	movs	r3, #155	; 0x9b
 8005738:	637b      	str	r3, [r7, #52]	; 0x34
		j=35;
 800573a:	2323      	movs	r3, #35	; 0x23
 800573c:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i,j,"YOUR AD HERE!",fnt7x10);
 800573e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005740:	b298      	uxth	r0, r3
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	b299      	uxth	r1, r3
 8005746:	4b38      	ldr	r3, [pc, #224]	; (8005828 <drawStatusMenu+0x1028>)
 8005748:	4a41      	ldr	r2, [pc, #260]	; (8005850 <drawStatusMenu+0x1050>)
 800574a:	f7fb feef 	bl	800152c <LCD_PutStr>
		i=155;
 800574e:	239b      	movs	r3, #155	; 0x9b
 8005750:	637b      	str	r3, [r7, #52]	; 0x34
		j=50;
 8005752:	2332      	movs	r3, #50	; 0x32
 8005754:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i,j,"Monthly fee: $",fnt7x10)+8;
 8005756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005758:	b298      	uxth	r0, r3
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	b299      	uxth	r1, r3
 800575e:	4b32      	ldr	r3, [pc, #200]	; (8005828 <drawStatusMenu+0x1028>)
 8005760:	4a3c      	ldr	r2, [pc, #240]	; (8005854 <drawStatusMenu+0x1054>)
 8005762:	f7fb fee3 	bl	800152c <LCD_PutStr>
 8005766:	4603      	mov	r3, r0
 8005768:	3308      	adds	r3, #8
 800576a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800576c:	4413      	add	r3, r2
 800576e:	637b      	str	r3, [r7, #52]	; 0x34
		j=28;
 8005770:	231c      	movs	r3, #28
 8005772:	617b      	str	r3, [r7, #20]
		LCD_PutIntF(i,j,3999, 2,fnt_dig_big);
 8005774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005776:	b298      	uxth	r0, r3
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	b299      	uxth	r1, r3
 800577c:	4b36      	ldr	r3, [pc, #216]	; (8005858 <drawStatusMenu+0x1058>)
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	2302      	movs	r3, #2
 8005782:	f640 729f 	movw	r2, #3999	; 0xf9f
 8005786:	f7fb ff6f 	bl	8001668 <LCD_PutIntF>

		//draw the additional pages available indicators
		i=200;
 800578a:	23c8      	movs	r3, #200	; 0xc8
 800578c:	637b      	str	r3, [r7, #52]	; 0x34
		j=220;
 800578e:	23dc      	movs	r3, #220	; 0xdc
 8005790:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005794:	b298      	uxth	r0, r3
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	b299      	uxth	r1, r3
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	b29a      	uxth	r2, r3
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	f7fc f813 	bl	80017cc <drawUpDownArrow>
		j=15;
 80057a6:	230f      	movs	r3, #15
 80057a8:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80057aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ac:	b298      	uxth	r0, r3
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	b299      	uxth	r1, r3
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f7fc f807 	bl	80017cc <drawUpDownArrow>
		i=180;
 80057be:	23b4      	movs	r3, #180	; 0xb4
 80057c0:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80057c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c4:	b298      	uxth	r0, r3
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	b299      	uxth	r1, r3
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f7fb fffb 	bl	80017cc <drawUpDownArrow>
		j=220;
 80057d6:	23dc      	movs	r3, #220	; 0xdc
 80057d8:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80057da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057dc:	b298      	uxth	r0, r3
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	b299      	uxth	r1, r3
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f7fb ffef 	bl	80017cc <drawUpDownArrow>
		i=220;
 80057ee:	23dc      	movs	r3, #220	; 0xdc
 80057f0:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80057f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f4:	b298      	uxth	r0, r3
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	b299      	uxth	r1, r3
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	b29b      	uxth	r3, r3
 8005802:	f7fb ffe3 	bl	80017cc <drawUpDownArrow>
		j=15;
 8005806:	230f      	movs	r3, #15
 8005808:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800580a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580c:	b298      	uxth	r0, r3
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	b299      	uxth	r1, r3
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	b29a      	uxth	r2, r3
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	b29b      	uxth	r3, r3
 800581a:	f7fb ffd7 	bl	80017cc <drawUpDownArrow>
		break;
 800581e:	e133      	b.n	8005a88 <drawStatusMenu+0x1288>
 8005820:	200000e8 	.word	0x200000e8
 8005824:	20010560 	.word	0x20010560
 8005828:	080149c0 	.word	0x080149c0
 800582c:	08014650 	.word	0x08014650
 8005830:	20000118 	.word	0x20000118
 8005834:	2002407c 	.word	0x2002407c
 8005838:	447a0000 	.word	0x447a0000
 800583c:	08014658 	.word	0x08014658
 8005840:	08014660 	.word	0x08014660
 8005844:	08014668 	.word	0x08014668
 8005848:	2001033a 	.word	0x2001033a
 800584c:	2001033c 	.word	0x2001033c
 8005850:	08014670 	.word	0x08014670
 8005854:	08014680 	.word	0x08014680
 8005858:	08014d80 	.word	0x08014d80
	}
	case 3:{
		i=35;
 800585c:	2323      	movs	r3, #35	; 0x23
 800585e:	637b      	str	r3, [r7, #52]	; 0x34
		j=75;
 8005860:	234b      	movs	r3, #75	; 0x4b
 8005862:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b02      	subs	r3, #2
 800586a:	b299      	uxth	r1, r3
 800586c:	4b89      	ldr	r3, [pc, #548]	; (8005a94 <drawStatusMenu+0x1294>)
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	3b02      	subs	r3, #2
 8005872:	b29a      	uxth	r2, r3
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	b29b      	uxth	r3, r3
 8005878:	3302      	adds	r3, #2
 800587a:	b29b      	uxth	r3, r3
 800587c:	2002      	movs	r0, #2
 800587e:	f7fb fb09 	bl	8000e94 <LCD_FillRect>
		j=55;
 8005882:	2337      	movs	r3, #55	; 0x37
 8005884:	617b      	str	r3, [r7, #20]
		i=150;
 8005886:	2396      	movs	r3, #150	; 0x96
 8005888:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutStr(i, j, "DEV UI HEALTH:", fnt7x10);
 800588a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588c:	b298      	uxth	r0, r3
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	b299      	uxth	r1, r3
 8005892:	4b81      	ldr	r3, [pc, #516]	; (8005a98 <drawStatusMenu+0x1298>)
 8005894:	4a81      	ldr	r2, [pc, #516]	; (8005a9c <drawStatusMenu+0x129c>)
 8005896:	f7fb fe49 	bl	800152c <LCD_PutStr>
 800589a:	4603      	mov	r3, r0
 800589c:	461a      	mov	r2, r3
 800589e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a0:	4413      	add	r3, r2
 80058a2:	637b      	str	r3, [r7, #52]	; 0x34

		i=40;
 80058a4:	2328      	movs	r3, #40	; 0x28
 80058a6:	637b      	str	r3, [r7, #52]	; 0x34
		j=85;
 80058a8:	2355      	movs	r3, #85	; 0x55
 80058aa:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "LCD: ", fnt7x10);
 80058ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ae:	b298      	uxth	r0, r3
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	b299      	uxth	r1, r3
 80058b4:	4b78      	ldr	r3, [pc, #480]	; (8005a98 <drawStatusMenu+0x1298>)
 80058b6:	4a7a      	ldr	r2, [pc, #488]	; (8005aa0 <drawStatusMenu+0x12a0>)
 80058b8:	f7fb fe38 	bl	800152c <LCD_PutStr>
 80058bc:	4603      	mov	r3, r0
 80058be:	461a      	mov	r2, r3
 80058c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c2:	4413      	add	r3, r2
 80058c4:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "Do you see me? Must be working!", fnt7x10);
 80058c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c8:	b298      	uxth	r0, r3
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	b299      	uxth	r1, r3
 80058ce:	4b72      	ldr	r3, [pc, #456]	; (8005a98 <drawStatusMenu+0x1298>)
 80058d0:	4a74      	ldr	r2, [pc, #464]	; (8005aa4 <drawStatusMenu+0x12a4>)
 80058d2:	f7fb fe2b 	bl	800152c <LCD_PutStr>

		i=40;
 80058d6:	2328      	movs	r3, #40	; 0x28
 80058d8:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	3319      	adds	r3, #25
 80058de:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "LED Driver: ", fnt7x10);
 80058e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e2:	b298      	uxth	r0, r3
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	b299      	uxth	r1, r3
 80058e8:	4b6b      	ldr	r3, [pc, #428]	; (8005a98 <drawStatusMenu+0x1298>)
 80058ea:	4a6f      	ldr	r2, [pc, #444]	; (8005aa8 <drawStatusMenu+0x12a8>)
 80058ec:	f7fb fe1e 	bl	800152c <LCD_PutStr>
 80058f0:	4603      	mov	r3, r0
 80058f2:	461a      	mov	r2, r3
 80058f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f6:	4413      	add	r3, r2
 80058f8:	637b      	str	r3, [r7, #52]	; 0x34
		//ping the LED Driver
		i2cCheck=writeI2CRegister(LED.address, 0xf0, 0x00,1,LED.i2cBank);
 80058fa:	4b6c      	ldr	r3, [pc, #432]	; (8005aac <drawStatusMenu+0x12ac>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	4b6a      	ldr	r3, [pc, #424]	; (8005aac <drawStatusMenu+0x12ac>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	2301      	movs	r3, #1
 8005908:	2200      	movs	r2, #0
 800590a:	21f0      	movs	r1, #240	; 0xf0
 800590c:	f7fd fbb6 	bl	800307c <writeI2CRegister>
 8005910:	6138      	str	r0, [r7, #16]

		if(i2cCheck){
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d008      	beq.n	800592a <drawStatusMenu+0x112a>
			LCD_PutStr(i, j, "Present", fnt7x10);
 8005918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591a:	b298      	uxth	r0, r3
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	b299      	uxth	r1, r3
 8005920:	4b5d      	ldr	r3, [pc, #372]	; (8005a98 <drawStatusMenu+0x1298>)
 8005922:	4a63      	ldr	r2, [pc, #396]	; (8005ab0 <drawStatusMenu+0x12b0>)
 8005924:	f7fb fe02 	bl	800152c <LCD_PutStr>
 8005928:	e007      	b.n	800593a <drawStatusMenu+0x113a>
		}
		else{
			LCD_PutStr(i, j, "Unresponsive", fnt7x10);
 800592a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592c:	b298      	uxth	r0, r3
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	b299      	uxth	r1, r3
 8005932:	4b59      	ldr	r3, [pc, #356]	; (8005a98 <drawStatusMenu+0x1298>)
 8005934:	4a5f      	ldr	r2, [pc, #380]	; (8005ab4 <drawStatusMenu+0x12b4>)
 8005936:	f7fb fdf9 	bl	800152c <LCD_PutStr>
		}

		i=40;
 800593a:	2328      	movs	r3, #40	; 0x28
 800593c:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	3319      	adds	r3, #25
 8005942:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "SOC UART: ", fnt7x10);
 8005944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005946:	b298      	uxth	r0, r3
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	b299      	uxth	r1, r3
 800594c:	4b52      	ldr	r3, [pc, #328]	; (8005a98 <drawStatusMenu+0x1298>)
 800594e:	4a5a      	ldr	r2, [pc, #360]	; (8005ab8 <drawStatusMenu+0x12b8>)
 8005950:	f7fb fdec 	bl	800152c <LCD_PutStr>
 8005954:	4603      	mov	r3, r0
 8005956:	461a      	mov	r2, r3
 8005958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595a:	4413      	add	r3, r2
 800595c:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "Am I reading this now?", fnt7x10);
 800595e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005960:	b298      	uxth	r0, r3
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	b299      	uxth	r1, r3
 8005966:	4b4c      	ldr	r3, [pc, #304]	; (8005a98 <drawStatusMenu+0x1298>)
 8005968:	4a54      	ldr	r2, [pc, #336]	; (8005abc <drawStatusMenu+0x12bc>)
 800596a:	f7fb fddf 	bl	800152c <LCD_PutStr>

		i=40;
 800596e:	2328      	movs	r3, #40	; 0x28
 8005970:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	3319      	adds	r3, #25
 8005976:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "SOC I2C: ", fnt7x10);
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	b298      	uxth	r0, r3
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	b299      	uxth	r1, r3
 8005980:	4b45      	ldr	r3, [pc, #276]	; (8005a98 <drawStatusMenu+0x1298>)
 8005982:	4a4f      	ldr	r2, [pc, #316]	; (8005ac0 <drawStatusMenu+0x12c0>)
 8005984:	f7fb fdd2 	bl	800152c <LCD_PutStr>
 8005988:	4603      	mov	r3, r0
 800598a:	461a      	mov	r2, r3
 800598c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598e:	4413      	add	r3, r2
 8005990:	637b      	str	r3, [r7, #52]	; 0x34
		i2cCheck=writeI2CRegister(socI2cVoltageMux.address, 0x11, 0x00,1,socI2cVoltageMux.i2cBank);
 8005992:	4b4c      	ldr	r3, [pc, #304]	; (8005ac4 <drawStatusMenu+0x12c4>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	4b4a      	ldr	r3, [pc, #296]	; (8005ac4 <drawStatusMenu+0x12c4>)
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	2301      	movs	r3, #1
 80059a0:	2200      	movs	r2, #0
 80059a2:	2111      	movs	r1, #17
 80059a4:	f7fd fb6a 	bl	800307c <writeI2CRegister>
 80059a8:	6138      	str	r0, [r7, #16]
		if(i2cCheck){
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <drawStatusMenu+0x11c2>
			LCD_PutStr(i, j, "Present", fnt7x10);
 80059b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b2:	b298      	uxth	r0, r3
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	b299      	uxth	r1, r3
 80059b8:	4b37      	ldr	r3, [pc, #220]	; (8005a98 <drawStatusMenu+0x1298>)
 80059ba:	4a3d      	ldr	r2, [pc, #244]	; (8005ab0 <drawStatusMenu+0x12b0>)
 80059bc:	f7fb fdb6 	bl	800152c <LCD_PutStr>
 80059c0:	e007      	b.n	80059d2 <drawStatusMenu+0x11d2>
		}
		else{
			LCD_PutStr(i, j, "Undetected", fnt7x10);
 80059c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c4:	b298      	uxth	r0, r3
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	b299      	uxth	r1, r3
 80059ca:	4b33      	ldr	r3, [pc, #204]	; (8005a98 <drawStatusMenu+0x1298>)
 80059cc:	4a3e      	ldr	r2, [pc, #248]	; (8005ac8 <drawStatusMenu+0x12c8>)
 80059ce:	f7fb fdad 	bl	800152c <LCD_PutStr>
		}


		i=40;
 80059d2:	2328      	movs	r3, #40	; 0x28
 80059d4:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	3319      	adds	r3, #25
 80059da:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Dev UI Runtime: ", fnt7x10);
 80059dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059de:	b298      	uxth	r0, r3
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	b299      	uxth	r1, r3
 80059e4:	4b2c      	ldr	r3, [pc, #176]	; (8005a98 <drawStatusMenu+0x1298>)
 80059e6:	4a39      	ldr	r2, [pc, #228]	; (8005acc <drawStatusMenu+0x12cc>)
 80059e8:	f7fb fda0 	bl	800152c <LCD_PutStr>
 80059ec:	4603      	mov	r3, r0
 80059ee:	461a      	mov	r2, r3
 80059f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f2:	4413      	add	r3, r2
 80059f4:	637b      	str	r3, [r7, #52]	; 0x34
		//GetTick provides runtime in milliseconds
		int runtime = (HAL_GetTick()/1000);
 80059f6:	f001 fd4b 	bl	8007490 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	4b34      	ldr	r3, [pc, #208]	; (8005ad0 <drawStatusMenu+0x12d0>)
 80059fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005a02:	099b      	lsrs	r3, r3, #6
 8005a04:	60fb      	str	r3, [r7, #12]
		i+= LCD_PutInt(i, j, runtime, fnt7x10);
 8005a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a08:	b298      	uxth	r0, r3
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	b299      	uxth	r1, r3
 8005a0e:	4b22      	ldr	r3, [pc, #136]	; (8005a98 <drawStatusMenu+0x1298>)
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	f7fb fdc3 	bl	800159c <LCD_PutInt>
 8005a16:	4603      	mov	r3, r0
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1c:	4413      	add	r3, r2
 8005a1e:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, " seconds", fnt7x10);
 8005a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a22:	b298      	uxth	r0, r3
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	b299      	uxth	r1, r3
 8005a28:	4b1b      	ldr	r3, [pc, #108]	; (8005a98 <drawStatusMenu+0x1298>)
 8005a2a:	4a2a      	ldr	r2, [pc, #168]	; (8005ad4 <drawStatusMenu+0x12d4>)
 8005a2c:	f7fb fd7e 	bl	800152c <LCD_PutStr>
 8005a30:	4603      	mov	r3, r0
 8005a32:	461a      	mov	r2, r3
 8005a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a36:	4413      	add	r3, r2
 8005a38:	637b      	str	r3, [r7, #52]	; 0x34

		i=200;
 8005a3a:	23c8      	movs	r3, #200	; 0xc8
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
		j=15;
 8005a3e:	230f      	movs	r3, #15
 8005a40:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a44:	b298      	uxth	r0, r3
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	b299      	uxth	r1, r3
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	f7fb febb 	bl	80017cc <drawUpDownArrow>
		i=180;
 8005a56:	23b4      	movs	r3, #180	; 0xb4
 8005a58:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5c:	b298      	uxth	r0, r3
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	b299      	uxth	r1, r3
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	f7fb feaf 	bl	80017cc <drawUpDownArrow>
		i=220;
 8005a6e:	23dc      	movs	r3, #220	; 0xdc
 8005a70:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a74:	b298      	uxth	r0, r3
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	b299      	uxth	r1, r3
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f7fb fea3 	bl	80017cc <drawUpDownArrow>

		break;
 8005a86:	bf00      	nop
	}
	}

	SMLCD_Flush();
 8005a88:	f7fa fe26 	bl	80006d8 <SMLCD_Flush>



}
 8005a8c:	bf00      	nop
 8005a8e:	3738      	adds	r7, #56	; 0x38
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	2001033a 	.word	0x2001033a
 8005a98:	080149c0 	.word	0x080149c0
 8005a9c:	08014690 	.word	0x08014690
 8005aa0:	080146a0 	.word	0x080146a0
 8005aa4:	080146a8 	.word	0x080146a8
 8005aa8:	080146c8 	.word	0x080146c8
 8005aac:	200000c0 	.word	0x200000c0
 8005ab0:	080146d8 	.word	0x080146d8
 8005ab4:	080146e0 	.word	0x080146e0
 8005ab8:	080146f0 	.word	0x080146f0
 8005abc:	080146fc 	.word	0x080146fc
 8005ac0:	08014714 	.word	0x08014714
 8005ac4:	200000d0 	.word	0x200000d0
 8005ac8:	08014720 	.word	0x08014720
 8005acc:	0801472c 	.word	0x0801472c
 8005ad0:	10624dd3 	.word	0x10624dd3
 8005ad4:	08014740 	.word	0x08014740

08005ad8 <drawSystemInfoMenu>:

void drawSystemInfoMenu(int indicator){
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08e      	sub	sp, #56	; 0x38
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	6078      	str	r0, [r7, #4]
	int i,j;
	float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8005ae0:	2314      	movs	r3, #20
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
	int indentAlignment=50;
 8005ae4:	2332      	movs	r3, #50	; 0x32
 8005ae6:	623b      	str	r3, [r7, #32]
	int arrowUp = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61fb      	str	r3, [r7, #28]
	int arrowDown=1;
 8005aec:	2301      	movs	r3, #1
 8005aee:	61bb      	str	r3, [r7, #24]
	int arrowSize=3;
 8005af0:	2303      	movs	r3, #3
 8005af2:	617b      	str	r3, [r7, #20]
	int otherBoardAlignment = 220;
 8005af4:	23dc      	movs	r3, #220	; 0xdc
 8005af6:	613b      	str	r3, [r7, #16]
	previousMenu=0;
 8005af8:	4b4b      	ldr	r3, [pc, #300]	; (8005c28 <drawSystemInfoMenu+0x150>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8005afe:	f7fa ff35 	bl	800096c <LCD_Clear>
	 if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8005b02:	4b4a      	ldr	r3, [pc, #296]	; (8005c2c <drawSystemInfoMenu+0x154>)
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	4b49      	ldr	r3, [pc, #292]	; (8005c2c <drawSystemInfoMenu+0x154>)
 8005b08:	785b      	ldrb	r3, [r3, #1]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	4b47      	ldr	r3, [pc, #284]	; (8005c2c <drawSystemInfoMenu+0x154>)
 8005b10:	789b      	ldrb	r3, [r3, #2]
 8005b12:	4013      	ands	r3, r2
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d016      	beq.n	8005b48 <drawSystemInfoMenu+0x70>
 		  adcValuePointer = getADCValues();
 8005b1a:	f7fd fce3 	bl	80034e4 <getADCValues>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	62bb      	str	r3, [r7, #40]	; 0x28
 		  for(i=0;i<20;i++){
 8005b22:	2300      	movs	r3, #0
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b26:	e00c      	b.n	8005b42 <drawSystemInfoMenu+0x6a>
	  		  displayAdcValues[i]=*adcValuePointer;
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	4940      	ldr	r1, [pc, #256]	; (8005c30 <drawSystemInfoMenu+0x158>)
 8005b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	440b      	add	r3, r1
 8005b34:	601a      	str	r2, [r3, #0]
	  		  adcValuePointer++;
 8005b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b38:	3304      	adds	r3, #4
 8005b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 		  for(i=0;i<20;i++){
 8005b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3e:	3301      	adds	r3, #1
 8005b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b44:	2b13      	cmp	r3, #19
 8005b46:	ddef      	ble.n	8005b28 <drawSystemInfoMenu+0x50>
 		  }
	 }
	LCD_PixelMode = LCD_PSET;
 8005b48:	4b3a      	ldr	r3, [pc, #232]	; (8005c34 <drawSystemInfoMenu+0x15c>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8005b4e:	4b3a      	ldr	r3, [pc, #232]	; (8005c38 <drawSystemInfoMenu+0x160>)
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	4b39      	ldr	r3, [pc, #228]	; (8005c3c <drawSystemInfoMenu+0x164>)
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2100      	movs	r1, #0
 8005b60:	2000      	movs	r0, #0
 8005b62:	f7fb f955 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8005b66:	4b34      	ldr	r3, [pc, #208]	; (8005c38 <drawSystemInfoMenu+0x160>)
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	3b03      	subs	r3, #3
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	4b33      	ldr	r3, [pc, #204]	; (8005c3c <drawSystemInfoMenu+0x164>)
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	3b03      	subs	r3, #3
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2102      	movs	r1, #2
 8005b78:	2002      	movs	r0, #2
 8005b7a:	f7fb f949 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8005b7e:	230a      	movs	r3, #10
 8005b80:	62fb      	str	r3, [r7, #44]	; 0x2c
	j  = 10;
 8005b82:	230a      	movs	r3, #10
 8005b84:	60fb      	str	r3, [r7, #12]
	i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	b298      	uxth	r0, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	b299      	uxth	r1, r3
 8005b8e:	4b2c      	ldr	r3, [pc, #176]	; (8005c40 <drawSystemInfoMenu+0x168>)
 8005b90:	4a2c      	ldr	r2, [pc, #176]	; (8005c44 <drawSystemInfoMenu+0x16c>)
 8005b92:	f7fb fccb 	bl	800152c <LCD_PutStr>
 8005b96:	4603      	mov	r3, r0
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	4413      	add	r3, r2
 8005b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	i += LCD_PutStr(i, j, "So many!", fnt7x10);
 8005ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba2:	b298      	uxth	r0, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	b299      	uxth	r1, r3
 8005ba8:	4b25      	ldr	r3, [pc, #148]	; (8005c40 <drawSystemInfoMenu+0x168>)
 8005baa:	4a27      	ldr	r2, [pc, #156]	; (8005c48 <drawSystemInfoMenu+0x170>)
 8005bac:	f7fb fcbe 	bl	800152c <LCD_PutStr>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	4413      	add	r3, r2
 8005bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	i+=170;
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	33aa      	adds	r3, #170	; 0xaa
 8005bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	b298      	uxth	r0, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	b299      	uxth	r1, r3
 8005bc8:	4b1d      	ldr	r3, [pc, #116]	; (8005c40 <drawSystemInfoMenu+0x168>)
 8005bca:	4a20      	ldr	r2, [pc, #128]	; (8005c4c <drawSystemInfoMenu+0x174>)
 8005bcc:	f7fb fcae 	bl	800152c <LCD_PutStr>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd6:	4413      	add	r3, r2
 8005bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	i += LCD_PutStr(i, j, "QED", fnt7x10);
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	b298      	uxth	r0, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	b299      	uxth	r1, r3
 8005be2:	4b17      	ldr	r3, [pc, #92]	; (8005c40 <drawSystemInfoMenu+0x168>)
 8005be4:	4a1a      	ldr	r2, [pc, #104]	; (8005c50 <drawSystemInfoMenu+0x178>)
 8005be6:	f7fb fca1 	bl	800152c <LCD_PutStr>
 8005bea:	4603      	mov	r3, r0
 8005bec:	461a      	mov	r2, r3
 8005bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf0:	4413      	add	r3, r2
 8005bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	i  = 135;
 8005bf4:	2387      	movs	r3, #135	; 0x87
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	j += 12;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	330c      	adds	r3, #12
 8005bfc:	60fb      	str	r3, [r7, #12]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	b299      	uxth	r1, r3
 8005c02:	4b0d      	ldr	r3, [pc, #52]	; (8005c38 <drawSystemInfoMenu+0x160>)
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	3b02      	subs	r3, #2
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3303      	adds	r3, #3
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2002      	movs	r0, #2
 8005c14:	f7fb f93e 	bl	8000e94 <LCD_FillRect>
	switch(indicator){
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d01a      	beq.n	8005c54 <drawSystemInfoMenu+0x17c>
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	f000 812e 	beq.w	8005e80 <drawSystemInfoMenu+0x3a8>
 8005c24:	e261      	b.n	80060ea <drawSystemInfoMenu+0x612>
 8005c26:	bf00      	nop
 8005c28:	200032d0 	.word	0x200032d0
 8005c2c:	20010ab0 	.word	0x20010ab0
 8005c30:	2002407c 	.word	0x2002407c
 8005c34:	20010338 	.word	0x20010338
 8005c38:	2001033a 	.word	0x2001033a
 8005c3c:	2001033c 	.word	0x2001033c
 8005c40:	080149c0 	.word	0x080149c0
 8005c44:	08014418 	.word	0x08014418
 8005c48:	08014420 	.word	0x08014420
 8005c4c:	0801442c 	.word	0x0801442c
 8005c50:	08014434 	.word	0x08014434
	case 1:{
		//i=35;
		//j=90;
		//LCD_FillRect(2, j - 2, scr_width-2, j + 2);

		j=45;
 8005c54:	232d      	movs	r3, #45	; 0x2d
 8005c56:	60fb      	str	r3, [r7, #12]
		i=42;
 8005c58:	232a      	movs	r3, #42	; 0x2a
 8005c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "FFU Version:", fnt7x10);
 8005c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5e:	b298      	uxth	r0, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	b299      	uxth	r1, r3
 8005c64:	4b77      	ldr	r3, [pc, #476]	; (8005e44 <drawSystemInfoMenu+0x36c>)
 8005c66:	4a78      	ldr	r2, [pc, #480]	; (8005e48 <drawSystemInfoMenu+0x370>)
 8005c68:	f7fb fc60 	bl	800152c <LCD_PutStr>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	461a      	mov	r2, r3
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	4413      	add	r3, r2
 8005c74:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Unknown", fnt7x10);
 8005c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c78:	b298      	uxth	r0, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	b299      	uxth	r1, r3
 8005c7e:	4b71      	ldr	r3, [pc, #452]	; (8005e44 <drawSystemInfoMenu+0x36c>)
 8005c80:	4a72      	ldr	r2, [pc, #456]	; (8005e4c <drawSystemInfoMenu+0x374>)
 8005c82:	f7fb fc53 	bl	800152c <LCD_PutStr>

		j+=15;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	330f      	adds	r3, #15
 8005c8a:	60fb      	str	r3, [r7, #12]
		i=42;
 8005c8c:	232a      	movs	r3, #42	; 0x2a
 8005c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "UI Firmware Version: ", fnt7x10);
 8005c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c92:	b298      	uxth	r0, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	b299      	uxth	r1, r3
 8005c98:	4b6a      	ldr	r3, [pc, #424]	; (8005e44 <drawSystemInfoMenu+0x36c>)
 8005c9a:	4a6d      	ldr	r2, [pc, #436]	; (8005e50 <drawSystemInfoMenu+0x378>)
 8005c9c:	f7fb fc46 	bl	800152c <LCD_PutStr>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca6:	4413      	add	r3, r2
 8005ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "V0.0.1", fnt7x10);
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	b298      	uxth	r0, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	b299      	uxth	r1, r3
 8005cb2:	4b64      	ldr	r3, [pc, #400]	; (8005e44 <drawSystemInfoMenu+0x36c>)
 8005cb4:	4a67      	ldr	r2, [pc, #412]	; (8005e54 <drawSystemInfoMenu+0x37c>)
 8005cb6:	f7fb fc39 	bl	800152c <LCD_PutStr>

		j+=30;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	331e      	adds	r3, #30
 8005cbe:	60fb      	str	r3, [r7, #12]
		i=10;
 8005cc0:	230a      	movs	r3, #10
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Project:", fnt7x10);
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc6:	b298      	uxth	r0, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	b299      	uxth	r1, r3
 8005ccc:	4b5d      	ldr	r3, [pc, #372]	; (8005e44 <drawSystemInfoMenu+0x36c>)
 8005cce:	4a62      	ldr	r2, [pc, #392]	; (8005e58 <drawSystemInfoMenu+0x380>)
 8005cd0:	f7fb fc2c 	bl	800152c <LCD_PutStr>

		j+=15;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	330f      	adds	r3, #15
 8005cd8:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Unknown", fnt7x10);
 8005cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce0:	b298      	uxth	r0, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	b299      	uxth	r1, r3
 8005ce6:	4b57      	ldr	r3, [pc, #348]	; (8005e44 <drawSystemInfoMenu+0x36c>)
 8005ce8:	4a58      	ldr	r2, [pc, #352]	; (8005e4c <drawSystemInfoMenu+0x374>)
 8005cea:	f7fb fc1f 	bl	800152c <LCD_PutStr>

		j+=15;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	330f      	adds	r3, #15
 8005cf2:	60fb      	str	r3, [r7, #12]
		i=10;
 8005cf4:	230a      	movs	r3, #10
 8005cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "Board Versions: ", fnt7x10);
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	b298      	uxth	r0, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	b299      	uxth	r1, r3
 8005d00:	4b50      	ldr	r3, [pc, #320]	; (8005e44 <drawSystemInfoMenu+0x36c>)
 8005d02:	4a56      	ldr	r2, [pc, #344]	; (8005e5c <drawSystemInfoMenu+0x384>)
 8005d04:	f7fb fc12 	bl	800152c <LCD_PutStr>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	4413      	add	r3, r2
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
		i=otherBoardAlignment;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Other Boards: ", fnt7x10);
 8005d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d18:	b298      	uxth	r0, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	b299      	uxth	r1, r3
 8005d1e:	4b49      	ldr	r3, [pc, #292]	; (8005e44 <drawSystemInfoMenu+0x36c>)
 8005d20:	4a4f      	ldr	r2, [pc, #316]	; (8005e60 <drawSystemInfoMenu+0x388>)
 8005d22:	f7fb fc03 	bl	800152c <LCD_PutStr>

		j+=15;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	330f      	adds	r3, #15
 8005d2a:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8005d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d32:	b298      	uxth	r0, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	b299      	uxth	r1, r3
 8005d38:	4b42      	ldr	r3, [pc, #264]	; (8005e44 <drawSystemInfoMenu+0x36c>)
 8005d3a:	4a4a      	ldr	r2, [pc, #296]	; (8005e64 <drawSystemInfoMenu+0x38c>)
 8005d3c:	f7fb fbf6 	bl	800152c <LCD_PutStr>
 8005d40:	4603      	mov	r3, r0
 8005d42:	461a      	mov	r2, r3
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	4413      	add	r3, r2
 8005d48:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Trident Fab A", fnt7x10);
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	b298      	uxth	r0, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	b299      	uxth	r1, r3
 8005d52:	4b3c      	ldr	r3, [pc, #240]	; (8005e44 <drawSystemInfoMenu+0x36c>)
 8005d54:	4a44      	ldr	r2, [pc, #272]	; (8005e68 <drawSystemInfoMenu+0x390>)
 8005d56:	f7fb fbe9 	bl	800152c <LCD_PutStr>
		i=otherBoardAlignment+indentAlignment;
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	4413      	add	r3, r2
 8005d60:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	b298      	uxth	r0, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	b299      	uxth	r1, r3
 8005d6a:	4b36      	ldr	r3, [pc, #216]	; (8005e44 <drawSystemInfoMenu+0x36c>)
 8005d6c:	4a3f      	ldr	r2, [pc, #252]	; (8005e6c <drawSystemInfoMenu+0x394>)
 8005d6e:	f7fb fbdd 	bl	800152c <LCD_PutStr>
 8005d72:	4603      	mov	r3, r0
 8005d74:	461a      	mov	r2, r3
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	4413      	add	r3, r2
 8005d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Not Here", fnt7x10);
 8005d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7e:	b298      	uxth	r0, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	b299      	uxth	r1, r3
 8005d84:	4b2f      	ldr	r3, [pc, #188]	; (8005e44 <drawSystemInfoMenu+0x36c>)
 8005d86:	4a3a      	ldr	r2, [pc, #232]	; (8005e70 <drawSystemInfoMenu+0x398>)
 8005d88:	f7fb fbd0 	bl	800152c <LCD_PutStr>

		j+=15;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	330f      	adds	r3, #15
 8005d90:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	b298      	uxth	r0, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	b299      	uxth	r1, r3
 8005d9e:	4b29      	ldr	r3, [pc, #164]	; (8005e44 <drawSystemInfoMenu+0x36c>)
 8005da0:	4a34      	ldr	r2, [pc, #208]	; (8005e74 <drawSystemInfoMenu+0x39c>)
 8005da2:	f7fb fbc3 	bl	800152c <LCD_PutStr>
 8005da6:	4603      	mov	r3, r0
 8005da8:	461a      	mov	r2, r3
 8005daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dac:	4413      	add	r3, r2
 8005dae:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Let's say it was Atlas", fnt7x10);
 8005db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db2:	b298      	uxth	r0, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	b299      	uxth	r1, r3
 8005db8:	4b22      	ldr	r3, [pc, #136]	; (8005e44 <drawSystemInfoMenu+0x36c>)
 8005dba:	4a2f      	ldr	r2, [pc, #188]	; (8005e78 <drawSystemInfoMenu+0x3a0>)
 8005dbc:	f7fb fbb6 	bl	800152c <LCD_PutStr>

		j+=15;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	330f      	adds	r3, #15
 8005dc4:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "DISPLAY: ", fnt7x10);
 8005dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dcc:	b298      	uxth	r0, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	b299      	uxth	r1, r3
 8005dd2:	4b1c      	ldr	r3, [pc, #112]	; (8005e44 <drawSystemInfoMenu+0x36c>)
 8005dd4:	4a29      	ldr	r2, [pc, #164]	; (8005e7c <drawSystemInfoMenu+0x3a4>)
 8005dd6:	f7fb fba9 	bl	800152c <LCD_PutStr>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	461a      	mov	r2, r3
 8005dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de0:	4413      	add	r3, r2
 8005de2:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Let's say it was Atlas", fnt7x10);
 8005de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de6:	b298      	uxth	r0, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	b299      	uxth	r1, r3
 8005dec:	4b15      	ldr	r3, [pc, #84]	; (8005e44 <drawSystemInfoMenu+0x36c>)
 8005dee:	4a22      	ldr	r2, [pc, #136]	; (8005e78 <drawSystemInfoMenu+0x3a0>)
 8005df0:	f7fb fb9c 	bl	800152c <LCD_PutStr>

		i=200;
 8005df4:	23c8      	movs	r3, #200	; 0xc8
 8005df6:	62fb      	str	r3, [r7, #44]	; 0x2c
		j=220;
 8005df8:	23dc      	movs	r3, #220	; 0xdc
 8005dfa:	60fb      	str	r3, [r7, #12]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfe:	b298      	uxth	r0, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	b299      	uxth	r1, r3
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f7fb fcde 	bl	80017cc <drawUpDownArrow>
		i=180;
 8005e10:	23b4      	movs	r3, #180	; 0xb4
 8005e12:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e16:	b298      	uxth	r0, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	b299      	uxth	r1, r3
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f7fb fcd2 	bl	80017cc <drawUpDownArrow>
		i=220;
 8005e28:	23dc      	movs	r3, #220	; 0xdc
 8005e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2e:	b298      	uxth	r0, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	b299      	uxth	r1, r3
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f7fb fcc6 	bl	80017cc <drawUpDownArrow>
		break;
 8005e40:	e153      	b.n	80060ea <drawSystemInfoMenu+0x612>
 8005e42:	bf00      	nop
 8005e44:	080149c0 	.word	0x080149c0
 8005e48:	0801474c 	.word	0x0801474c
 8005e4c:	0801475c 	.word	0x0801475c
 8005e50:	08014764 	.word	0x08014764
 8005e54:	0801477c 	.word	0x0801477c
 8005e58:	08014784 	.word	0x08014784
 8005e5c:	08014790 	.word	0x08014790
 8005e60:	080147a4 	.word	0x080147a4
 8005e64:	080144f4 	.word	0x080144f4
 8005e68:	080147b4 	.word	0x080147b4
 8005e6c:	080147c4 	.word	0x080147c4
 8005e70:	080147cc 	.word	0x080147cc
 8005e74:	08014508 	.word	0x08014508
 8005e78:	080147d8 	.word	0x080147d8
 8005e7c:	080147f0 	.word	0x080147f0
	}
	case 2:{
		j=45;
 8005e80:	232d      	movs	r3, #45	; 0x2d
 8005e82:	60fb      	str	r3, [r7, #12]
		i=10;
 8005e84:	230a      	movs	r3, #10
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "DEV UI BANK VOLTAGES:", fnt7x10);
 8005e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8a:	b298      	uxth	r0, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	b299      	uxth	r1, r3
 8005e90:	4b99      	ldr	r3, [pc, #612]	; (80060f8 <drawSystemInfoMenu+0x620>)
 8005e92:	4a9a      	ldr	r2, [pc, #616]	; (80060fc <drawSystemInfoMenu+0x624>)
 8005e94:	f7fb fb4a 	bl	800152c <LCD_PutStr>

		j+=25;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3319      	adds	r3, #25
 8005e9c:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SPARE UART: ", fnt7x10);
 8005ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea4:	b298      	uxth	r0, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	b299      	uxth	r1, r3
 8005eaa:	4b93      	ldr	r3, [pc, #588]	; (80060f8 <drawSystemInfoMenu+0x620>)
 8005eac:	4a94      	ldr	r2, [pc, #592]	; (8006100 <drawSystemInfoMenu+0x628>)
 8005eae:	f7fb fb3d 	bl	800152c <LCD_PutStr>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	4413      	add	r3, r2
 8005eba:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.spareUartADC];
 8005ebc:	4b91      	ldr	r3, [pc, #580]	; (8006104 <drawSystemInfoMenu+0x62c>)
 8005ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec0:	4a91      	ldr	r2, [pc, #580]	; (8006108 <drawSystemInfoMenu+0x630>)
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	edd3 7a00 	vldr	s15, [r3]
 8005eca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005ece:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005ed2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005ed6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005eda:	ee17 3a90 	vmov	r3, s15
 8005ede:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8005ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee2:	b298      	uxth	r0, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	b299      	uxth	r1, r3
 8005ee8:	4b83      	ldr	r3, [pc, #524]	; (80060f8 <drawSystemInfoMenu+0x620>)
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	2301      	movs	r3, #1
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	f7fb fbba 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	3319      	adds	r3, #25
 8005ef8:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SPARE I2C: ", fnt7x10);
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	b298      	uxth	r0, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	b299      	uxth	r1, r3
 8005f06:	4b7c      	ldr	r3, [pc, #496]	; (80060f8 <drawSystemInfoMenu+0x620>)
 8005f08:	4a80      	ldr	r2, [pc, #512]	; (800610c <drawSystemInfoMenu+0x634>)
 8005f0a:	f7fb fb0f 	bl	800152c <LCD_PutStr>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	461a      	mov	r2, r3
 8005f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f14:	4413      	add	r3, r2
 8005f16:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.spareI2cADC];
 8005f18:	4b7a      	ldr	r3, [pc, #488]	; (8006104 <drawSystemInfoMenu+0x62c>)
 8005f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1c:	4a7a      	ldr	r2, [pc, #488]	; (8006108 <drawSystemInfoMenu+0x630>)
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	edd3 7a00 	vldr	s15, [r3]
 8005f26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005f2a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005f2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005f32:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005f36:	ee17 3a90 	vmov	r3, s15
 8005f3a:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8005f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3e:	b298      	uxth	r0, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	b299      	uxth	r1, r3
 8005f44:	4b6c      	ldr	r3, [pc, #432]	; (80060f8 <drawSystemInfoMenu+0x620>)
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	2301      	movs	r3, #1
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	f7fb fb8c 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3319      	adds	r3, #25
 8005f54:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SPARE SPI: ", fnt7x10);
 8005f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5c:	b298      	uxth	r0, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	b299      	uxth	r1, r3
 8005f62:	4b65      	ldr	r3, [pc, #404]	; (80060f8 <drawSystemInfoMenu+0x620>)
 8005f64:	4a6a      	ldr	r2, [pc, #424]	; (8006110 <drawSystemInfoMenu+0x638>)
 8005f66:	f7fb fae1 	bl	800152c <LCD_PutStr>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	4413      	add	r3, r2
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.spareSpiADC];
 8005f74:	4b63      	ldr	r3, [pc, #396]	; (8006104 <drawSystemInfoMenu+0x62c>)
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	4a63      	ldr	r2, [pc, #396]	; (8006108 <drawSystemInfoMenu+0x630>)
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	edd3 7a00 	vldr	s15, [r3]
 8005f82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005f86:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005f8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005f8e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005f92:	ee17 3a90 	vmov	r3, s15
 8005f96:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8005f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9a:	b298      	uxth	r0, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	b299      	uxth	r1, r3
 8005fa0:	4b55      	ldr	r3, [pc, #340]	; (80060f8 <drawSystemInfoMenu+0x620>)
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	f7fb fb5e 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	3319      	adds	r3, #25
 8005fb0:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "CONFIG: ", fnt7x10);
 8005fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb8:	b298      	uxth	r0, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	b299      	uxth	r1, r3
 8005fbe:	4b4e      	ldr	r3, [pc, #312]	; (80060f8 <drawSystemInfoMenu+0x620>)
 8005fc0:	4a54      	ldr	r2, [pc, #336]	; (8006114 <drawSystemInfoMenu+0x63c>)
 8005fc2:	f7fb fab3 	bl	800152c <LCD_PutStr>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	4413      	add	r3, r2
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.configADC];
 8005fd0:	4b4c      	ldr	r3, [pc, #304]	; (8006104 <drawSystemInfoMenu+0x62c>)
 8005fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd4:	4a4c      	ldr	r2, [pc, #304]	; (8006108 <drawSystemInfoMenu+0x630>)
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	edd3 7a00 	vldr	s15, [r3]
 8005fde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005fe2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005fe6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005fea:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005fee:	ee17 3a90 	vmov	r3, s15
 8005ff2:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8005ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff6:	b298      	uxth	r0, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	b299      	uxth	r1, r3
 8005ffc:	4b3e      	ldr	r3, [pc, #248]	; (80060f8 <drawSystemInfoMenu+0x620>)
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	2301      	movs	r3, #1
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	f7fb fb30 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3319      	adds	r3, #25
 800600c:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8006012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006014:	b298      	uxth	r0, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	b299      	uxth	r1, r3
 800601a:	4b37      	ldr	r3, [pc, #220]	; (80060f8 <drawSystemInfoMenu+0x620>)
 800601c:	4a3e      	ldr	r2, [pc, #248]	; (8006118 <drawSystemInfoMenu+0x640>)
 800601e:	f7fb fa85 	bl	800152c <LCD_PutStr>
 8006022:	4603      	mov	r3, r0
 8006024:	461a      	mov	r2, r3
 8006026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006028:	4413      	add	r3, r2
 800602a:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.zionADC];
 800602c:	4b35      	ldr	r3, [pc, #212]	; (8006104 <drawSystemInfoMenu+0x62c>)
 800602e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006030:	4a35      	ldr	r2, [pc, #212]	; (8006108 <drawSystemInfoMenu+0x630>)
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	edd3 7a00 	vldr	s15, [r3]
 800603a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800603e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006042:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006046:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800604a:	ee17 3a90 	vmov	r3, s15
 800604e:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10) + adjacentSpacing;
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	b298      	uxth	r0, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	b299      	uxth	r1, r3
 8006058:	4b27      	ldr	r3, [pc, #156]	; (80060f8 <drawSystemInfoMenu+0x620>)
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	2301      	movs	r3, #1
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	f7fb fb02 	bl	8001668 <LCD_PutIntF>
 8006064:	4603      	mov	r3, r0
 8006066:	461a      	mov	r2, r3
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	4413      	add	r3, r2
 800606c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800606e:	4413      	add	r3, r2
 8006070:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "Zion Switch: ", fnt7x10);
 8006072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006074:	b298      	uxth	r0, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	b299      	uxth	r1, r3
 800607a:	4b1f      	ldr	r3, [pc, #124]	; (80060f8 <drawSystemInfoMenu+0x620>)
 800607c:	4a27      	ldr	r2, [pc, #156]	; (800611c <drawSystemInfoMenu+0x644>)
 800607e:	f7fb fa55 	bl	800152c <LCD_PutStr>
 8006082:	4603      	mov	r3, r0
 8006084:	461a      	mov	r2, r3
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	4413      	add	r3, r2
 800608a:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "INACTIVE", fnt7x10);
 800608c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608e:	b298      	uxth	r0, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	b299      	uxth	r1, r3
 8006094:	4b18      	ldr	r3, [pc, #96]	; (80060f8 <drawSystemInfoMenu+0x620>)
 8006096:	4a22      	ldr	r2, [pc, #136]	; (8006120 <drawSystemInfoMenu+0x648>)
 8006098:	f7fb fa48 	bl	800152c <LCD_PutStr>



		i=200;
 800609c:	23c8      	movs	r3, #200	; 0xc8
 800609e:	62fb      	str	r3, [r7, #44]	; 0x2c
		j=15;
 80060a0:	230f      	movs	r3, #15
 80060a2:	60fb      	str	r3, [r7, #12]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	b298      	uxth	r0, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	b299      	uxth	r1, r3
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f7fb fb8a 	bl	80017cc <drawUpDownArrow>
		i=180;
 80060b8:	23b4      	movs	r3, #180	; 0xb4
 80060ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80060bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060be:	b298      	uxth	r0, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	b299      	uxth	r1, r3
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	f7fb fb7e 	bl	80017cc <drawUpDownArrow>
		i=220;
 80060d0:	23dc      	movs	r3, #220	; 0xdc
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	b298      	uxth	r0, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	b299      	uxth	r1, r3
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	b29a      	uxth	r2, r3
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f7fb fb72 	bl	80017cc <drawUpDownArrow>

		break;
 80060e8:	bf00      	nop
	}
	}
	SMLCD_Flush();
 80060ea:	f7fa faf5 	bl	80006d8 <SMLCD_Flush>
}
 80060ee:	bf00      	nop
 80060f0:	3730      	adds	r7, #48	; 0x30
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	080149c0 	.word	0x080149c0
 80060fc:	080147fc 	.word	0x080147fc
 8006100:	08014814 	.word	0x08014814
 8006104:	20000118 	.word	0x20000118
 8006108:	2002407c 	.word	0x2002407c
 800610c:	08014824 	.word	0x08014824
 8006110:	08014830 	.word	0x08014830
 8006114:	0801483c 	.word	0x0801483c
 8006118:	080147c4 	.word	0x080147c4
 800611c:	08014848 	.word	0x08014848
 8006120:	08014858 	.word	0x08014858

08006124 <drawBootMenu>:

void drawBootMenu(int indicator, uint8_t button, int menu){
 8006124:	b580      	push	{r7, lr}
 8006126:	b088      	sub	sp, #32
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	460b      	mov	r3, r1
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	72fb      	strb	r3, [r7, #11]
	int i,j;
		int adjacentSpacing = 20;
 8006132:	2314      	movs	r3, #20
 8006134:	61bb      	str	r3, [r7, #24]
		int indentAlignment=50;
 8006136:	2332      	movs	r3, #50	; 0x32
 8006138:	617b      	str	r3, [r7, #20]


		LCD_Clear();
 800613a:	f7fa fc17 	bl	800096c <LCD_Clear>
		LCD_PixelMode = LCD_PSET;
 800613e:	4b94      	ldr	r3, [pc, #592]	; (8006390 <drawBootMenu+0x26c>)
 8006140:	2200      	movs	r2, #0
 8006142:	701a      	strb	r2, [r3, #0]

		LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8006144:	4b93      	ldr	r3, [pc, #588]	; (8006394 <drawBootMenu+0x270>)
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	3b01      	subs	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	4b92      	ldr	r3, [pc, #584]	; (8006398 <drawBootMenu+0x274>)
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	3b01      	subs	r3, #1
 8006152:	b29b      	uxth	r3, r3
 8006154:	2100      	movs	r1, #0
 8006156:	2000      	movs	r0, #0
 8006158:	f7fa fe5a 	bl	8000e10 <LCD_Rect>
		LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 800615c:	4b8d      	ldr	r3, [pc, #564]	; (8006394 <drawBootMenu+0x270>)
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	3b03      	subs	r3, #3
 8006162:	b29a      	uxth	r2, r3
 8006164:	4b8c      	ldr	r3, [pc, #560]	; (8006398 <drawBootMenu+0x274>)
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	3b03      	subs	r3, #3
 800616a:	b29b      	uxth	r3, r3
 800616c:	2102      	movs	r1, #2
 800616e:	2002      	movs	r0, #2
 8006170:	f7fa fe4e 	bl	8000e10 <LCD_Rect>

		// RTC :)
		i  = 10;
 8006174:	230a      	movs	r3, #10
 8006176:	613b      	str	r3, [r7, #16]
		j  = 10;
 8006178:	230a      	movs	r3, #10
 800617a:	61fb      	str	r3, [r7, #28]
		i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	b298      	uxth	r0, r3
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	b299      	uxth	r1, r3
 8006184:	4b85      	ldr	r3, [pc, #532]	; (800639c <drawBootMenu+0x278>)
 8006186:	4a86      	ldr	r2, [pc, #536]	; (80063a0 <drawBootMenu+0x27c>)
 8006188:	f7fb f9d0 	bl	800152c <LCD_PutStr>
 800618c:	4603      	mov	r3, r0
 800618e:	461a      	mov	r2, r3
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	4413      	add	r3, r2
 8006194:	613b      	str	r3, [r7, #16]
		i += LCD_PutStr(i, j, "So many!", fnt7x10);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	b298      	uxth	r0, r3
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	b299      	uxth	r1, r3
 800619e:	4b7f      	ldr	r3, [pc, #508]	; (800639c <drawBootMenu+0x278>)
 80061a0:	4a80      	ldr	r2, [pc, #512]	; (80063a4 <drawBootMenu+0x280>)
 80061a2:	f7fb f9c3 	bl	800152c <LCD_PutStr>
 80061a6:	4603      	mov	r3, r0
 80061a8:	461a      	mov	r2, r3
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	4413      	add	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]
		i+=170;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	33aa      	adds	r3, #170	; 0xaa
 80061b4:	613b      	str	r3, [r7, #16]
		i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	b298      	uxth	r0, r3
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	b299      	uxth	r1, r3
 80061be:	4b77      	ldr	r3, [pc, #476]	; (800639c <drawBootMenu+0x278>)
 80061c0:	4a79      	ldr	r2, [pc, #484]	; (80063a8 <drawBootMenu+0x284>)
 80061c2:	f7fb f9b3 	bl	800152c <LCD_PutStr>
 80061c6:	4603      	mov	r3, r0
 80061c8:	461a      	mov	r2, r3
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	4413      	add	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
		i += LCD_PutStr(i, j, "QED", fnt7x10);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	b298      	uxth	r0, r3
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	b299      	uxth	r1, r3
 80061d8:	4b70      	ldr	r3, [pc, #448]	; (800639c <drawBootMenu+0x278>)
 80061da:	4a74      	ldr	r2, [pc, #464]	; (80063ac <drawBootMenu+0x288>)
 80061dc:	f7fb f9a6 	bl	800152c <LCD_PutStr>
 80061e0:	4603      	mov	r3, r0
 80061e2:	461a      	mov	r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4413      	add	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
		i  = 135;
 80061ea:	2387      	movs	r3, #135	; 0x87
 80061ec:	613b      	str	r3, [r7, #16]
		j += 12;
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	330c      	adds	r3, #12
 80061f2:	61fb      	str	r3, [r7, #28]

		//horizontal divider
		LCD_FillRect(2, j, scr_width - 2, j + 3);
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	b299      	uxth	r1, r3
 80061f8:	4b66      	ldr	r3, [pc, #408]	; (8006394 <drawBootMenu+0x270>)
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	3b02      	subs	r3, #2
 80061fe:	b29a      	uxth	r2, r3
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	b29b      	uxth	r3, r3
 8006204:	3303      	adds	r3, #3
 8006206:	b29b      	uxth	r3, r3
 8006208:	2002      	movs	r0, #2
 800620a:	f7fa fe43 	bl	8000e94 <LCD_FillRect>

		j=45;
 800620e:	232d      	movs	r3, #45	; 0x2d
 8006210:	61fb      	str	r3, [r7, #28]
		i=42;
 8006212:	232a      	movs	r3, #42	; 0x2a
 8006214:	613b      	str	r3, [r7, #16]
		LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	b298      	uxth	r0, r3
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	b299      	uxth	r1, r3
 800621e:	4b5f      	ldr	r3, [pc, #380]	; (800639c <drawBootMenu+0x278>)
 8006220:	4a63      	ldr	r2, [pc, #396]	; (80063b0 <drawBootMenu+0x28c>)
 8006222:	f7fb f983 	bl	800152c <LCD_PutStr>
		j+=20;
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	3314      	adds	r3, #20
 800622a:	61fb      	str	r3, [r7, #28]
		i=indentAlignment;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	613b      	str	r3, [r7, #16]
		LCD_PutStr(i, j, "STANDARD", fnt7x10);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	b298      	uxth	r0, r3
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	b299      	uxth	r1, r3
 8006238:	4b58      	ldr	r3, [pc, #352]	; (800639c <drawBootMenu+0x278>)
 800623a:	4a5e      	ldr	r2, [pc, #376]	; (80063b4 <drawBootMenu+0x290>)
 800623c:	f7fb f976 	bl	800152c <LCD_PutStr>
		j+=20;
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	3314      	adds	r3, #20
 8006244:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "EMERGENCY DOWNLOAD", fnt7x10);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	b298      	uxth	r0, r3
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	b299      	uxth	r1, r3
 800624e:	4b53      	ldr	r3, [pc, #332]	; (800639c <drawBootMenu+0x278>)
 8006250:	4a59      	ldr	r2, [pc, #356]	; (80063b8 <drawBootMenu+0x294>)
 8006252:	f7fb f96b 	bl	800152c <LCD_PutStr>
		j+=20;
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	3314      	adds	r3, #20
 800625a:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "RECOVERY", fnt7x10);
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	b298      	uxth	r0, r3
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	b299      	uxth	r1, r3
 8006264:	4b4d      	ldr	r3, [pc, #308]	; (800639c <drawBootMenu+0x278>)
 8006266:	4a55      	ldr	r2, [pc, #340]	; (80063bc <drawBootMenu+0x298>)
 8006268:	f7fb f960 	bl	800152c <LCD_PutStr>
		j+=20;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	3314      	adds	r3, #20
 8006270:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "MASS STORAGE", fnt7x10);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	b298      	uxth	r0, r3
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	b299      	uxth	r1, r3
 800627a:	4b48      	ldr	r3, [pc, #288]	; (800639c <drawBootMenu+0x278>)
 800627c:	4a50      	ldr	r2, [pc, #320]	; (80063c0 <drawBootMenu+0x29c>)
 800627e:	f7fb f955 	bl	800152c <LCD_PutStr>
		j+=20;
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	3314      	adds	r3, #20
 8006286:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "UEFI", fnt7x10);
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	b298      	uxth	r0, r3
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	b299      	uxth	r1, r3
 8006290:	4b42      	ldr	r3, [pc, #264]	; (800639c <drawBootMenu+0x278>)
 8006292:	4a4c      	ldr	r2, [pc, #304]	; (80063c4 <drawBootMenu+0x2a0>)
 8006294:	f7fb f94a 	bl	800152c <LCD_PutStr>
		i-= 17;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	3b11      	subs	r3, #17
 800629c:	613b      	str	r3, [r7, #16]
		switch(indicator){
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	f200 80d4 	bhi.w	8006450 <drawBootMenu+0x32c>
 80062a8:	a201      	add	r2, pc, #4	; (adr r2, 80062b0 <drawBootMenu+0x18c>)
 80062aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ae:	bf00      	nop
 80062b0:	080062c5 	.word	0x080062c5
 80062b4:	08006309 	.word	0x08006309
 80062b8:	0800634d 	.word	0x0800634d
 80062bc:	080063cd 	.word	0x080063cd
 80062c0:	0800640f 	.word	0x0800640f
		case FIRST:
		{
			j=65;
 80062c4:	2341      	movs	r3, #65	; 0x41
 80062c6:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 80062c8:	7afb      	ldrb	r3, [r7, #11]
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	bf0c      	ite	eq
 80062ce:	2301      	moveq	r3, #1
 80062d0:	2300      	movne	r3, #0
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	4b3c      	ldr	r3, [pc, #240]	; (80063c8 <drawBootMenu+0x2a4>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	4299      	cmp	r1, r3
 80062dc:	bf0c      	ite	eq
 80062de:	2301      	moveq	r3, #1
 80062e0:	2300      	movne	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	4013      	ands	r3, r2
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 80b4 	beq.w	8006456 <drawBootMenu+0x332>
				i=140;
 80062ee:	238c      	movs	r3, #140	; 0x8c
 80062f0:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	b298      	uxth	r0, r3
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	3305      	adds	r3, #5
 80062fc:	b299      	uxth	r1, r3
 80062fe:	2303      	movs	r3, #3
 8006300:	2203      	movs	r2, #3
 8006302:	f7fb fa63 	bl	80017cc <drawUpDownArrow>
			}
			break;
 8006306:	e0a6      	b.n	8006456 <drawBootMenu+0x332>
		}
		case SECOND:
		{
			j=85;
 8006308:	2355      	movs	r3, #85	; 0x55
 800630a:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 800630c:	7afb      	ldrb	r3, [r7, #11]
 800630e:	2b04      	cmp	r3, #4
 8006310:	bf0c      	ite	eq
 8006312:	2301      	moveq	r3, #1
 8006314:	2300      	movne	r3, #0
 8006316:	b2da      	uxtb	r2, r3
 8006318:	4b2b      	ldr	r3, [pc, #172]	; (80063c8 <drawBootMenu+0x2a4>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6879      	ldr	r1, [r7, #4]
 800631e:	4299      	cmp	r1, r3
 8006320:	bf0c      	ite	eq
 8006322:	2301      	moveq	r3, #1
 8006324:	2300      	movne	r3, #0
 8006326:	b2db      	uxtb	r3, r3
 8006328:	4013      	ands	r3, r2
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 8094 	beq.w	800645a <drawBootMenu+0x336>
				i=220;
 8006332:	23dc      	movs	r3, #220	; 0xdc
 8006334:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	b298      	uxth	r0, r3
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	b29b      	uxth	r3, r3
 800633e:	3305      	adds	r3, #5
 8006340:	b299      	uxth	r1, r3
 8006342:	2303      	movs	r3, #3
 8006344:	2203      	movs	r2, #3
 8006346:	f7fb fa41 	bl	80017cc <drawUpDownArrow>
			}
			break;
 800634a:	e086      	b.n	800645a <drawBootMenu+0x336>
		}
		case THIRD:
		{
			j=105;
 800634c:	2369      	movs	r3, #105	; 0x69
 800634e:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 8006350:	7afb      	ldrb	r3, [r7, #11]
 8006352:	2b04      	cmp	r3, #4
 8006354:	bf0c      	ite	eq
 8006356:	2301      	moveq	r3, #1
 8006358:	2300      	movne	r3, #0
 800635a:	b2da      	uxtb	r2, r3
 800635c:	4b1a      	ldr	r3, [pc, #104]	; (80063c8 <drawBootMenu+0x2a4>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	4299      	cmp	r1, r3
 8006364:	bf0c      	ite	eq
 8006366:	2301      	moveq	r3, #1
 8006368:	2300      	movne	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	4013      	ands	r3, r2
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d074      	beq.n	800645e <drawBootMenu+0x33a>
				i=130;
 8006374:	2382      	movs	r3, #130	; 0x82
 8006376:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	b298      	uxth	r0, r3
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	b29b      	uxth	r3, r3
 8006380:	3305      	adds	r3, #5
 8006382:	b299      	uxth	r1, r3
 8006384:	2303      	movs	r3, #3
 8006386:	2203      	movs	r2, #3
 8006388:	f7fb fa20 	bl	80017cc <drawUpDownArrow>
			}
			break;
 800638c:	e067      	b.n	800645e <drawBootMenu+0x33a>
 800638e:	bf00      	nop
 8006390:	20010338 	.word	0x20010338
 8006394:	2001033a 	.word	0x2001033a
 8006398:	2001033c 	.word	0x2001033c
 800639c:	080149c0 	.word	0x080149c0
 80063a0:	08014418 	.word	0x08014418
 80063a4:	08014420 	.word	0x08014420
 80063a8:	0801442c 	.word	0x0801442c
 80063ac:	08014434 	.word	0x08014434
 80063b0:	08014864 	.word	0x08014864
 80063b4:	08014880 	.word	0x08014880
 80063b8:	0801488c 	.word	0x0801488c
 80063bc:	080148a0 	.word	0x080148a0
 80063c0:	080148ac 	.word	0x080148ac
 80063c4:	080148bc 	.word	0x080148bc
 80063c8:	200032d0 	.word	0x200032d0
		}
		case FOURTH:
		{
			j=125;
 80063cc:	237d      	movs	r3, #125	; 0x7d
 80063ce:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 80063d0:	7afb      	ldrb	r3, [r7, #11]
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	bf0c      	ite	eq
 80063d6:	2301      	moveq	r3, #1
 80063d8:	2300      	movne	r3, #0
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	4b2f      	ldr	r3, [pc, #188]	; (800649c <drawBootMenu+0x378>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6879      	ldr	r1, [r7, #4]
 80063e2:	4299      	cmp	r1, r3
 80063e4:	bf0c      	ite	eq
 80063e6:	2301      	moveq	r3, #1
 80063e8:	2300      	movne	r3, #0
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	4013      	ands	r3, r2
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d036      	beq.n	8006462 <drawBootMenu+0x33e>
				i=160;
 80063f4:	23a0      	movs	r3, #160	; 0xa0
 80063f6:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	b298      	uxth	r0, r3
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3305      	adds	r3, #5
 8006402:	b299      	uxth	r1, r3
 8006404:	2303      	movs	r3, #3
 8006406:	2203      	movs	r2, #3
 8006408:	f7fb f9e0 	bl	80017cc <drawUpDownArrow>
			}
			break;
 800640c:	e029      	b.n	8006462 <drawBootMenu+0x33e>
		}
		case FIFTH:
		{
			j=145;
 800640e:	2391      	movs	r3, #145	; 0x91
 8006410:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 8006412:	7afb      	ldrb	r3, [r7, #11]
 8006414:	2b04      	cmp	r3, #4
 8006416:	bf0c      	ite	eq
 8006418:	2301      	moveq	r3, #1
 800641a:	2300      	movne	r3, #0
 800641c:	b2da      	uxtb	r2, r3
 800641e:	4b1f      	ldr	r3, [pc, #124]	; (800649c <drawBootMenu+0x378>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	4299      	cmp	r1, r3
 8006426:	bf0c      	ite	eq
 8006428:	2301      	moveq	r3, #1
 800642a:	2300      	movne	r3, #0
 800642c:	b2db      	uxtb	r3, r3
 800642e:	4013      	ands	r3, r2
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d017      	beq.n	8006466 <drawBootMenu+0x342>
				i=100;
 8006436:	2364      	movs	r3, #100	; 0x64
 8006438:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	b298      	uxth	r0, r3
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	b29b      	uxth	r3, r3
 8006442:	3305      	adds	r3, #5
 8006444:	b299      	uxth	r1, r3
 8006446:	2303      	movs	r3, #3
 8006448:	2203      	movs	r2, #3
 800644a:	f7fb f9bf 	bl	80017cc <drawUpDownArrow>
			}
			break;
 800644e:	e00a      	b.n	8006466 <drawBootMenu+0x342>
		}
		default:
		{
			j=75;
 8006450:	234b      	movs	r3, #75	; 0x4b
 8006452:	61fb      	str	r3, [r7, #28]
			break;
 8006454:	e008      	b.n	8006468 <drawBootMenu+0x344>
			break;
 8006456:	bf00      	nop
 8006458:	e006      	b.n	8006468 <drawBootMenu+0x344>
			break;
 800645a:	bf00      	nop
 800645c:	e004      	b.n	8006468 <drawBootMenu+0x344>
			break;
 800645e:	bf00      	nop
 8006460:	e002      	b.n	8006468 <drawBootMenu+0x344>
			break;
 8006462:	bf00      	nop
 8006464:	e000      	b.n	8006468 <drawBootMenu+0x344>
			break;
 8006466:	bf00      	nop
		}
		}
		previousMenu=menu;
 8006468:	4a0c      	ldr	r2, [pc, #48]	; (800649c <drawBootMenu+0x378>)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6013      	str	r3, [r2, #0]
		i=25;
 800646e:	2319      	movs	r3, #25
 8006470:	613b      	str	r3, [r7, #16]
		LCD_FillRect(i, j, i + 12, j + 10);
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	b298      	uxth	r0, r3
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	b299      	uxth	r1, r3
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	b29b      	uxth	r3, r3
 800647e:	330c      	adds	r3, #12
 8006480:	b29a      	uxth	r2, r3
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	b29b      	uxth	r3, r3
 8006486:	330a      	adds	r3, #10
 8006488:	b29b      	uxth	r3, r3
 800648a:	f7fa fd03 	bl	8000e94 <LCD_FillRect>
		SMLCD_Flush();
 800648e:	f7fa f923 	bl	80006d8 <SMLCD_Flush>
}
 8006492:	bf00      	nop
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	200032d0 	.word	0x200032d0

080064a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <HAL_MspInit+0x4c>)
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	4a10      	ldr	r2, [pc, #64]	; (80064ec <HAL_MspInit+0x4c>)
 80064ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064b0:	6413      	str	r3, [r2, #64]	; 0x40
 80064b2:	4b0e      	ldr	r3, [pc, #56]	; (80064ec <HAL_MspInit+0x4c>)
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ba:	607b      	str	r3, [r7, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064be:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <HAL_MspInit+0x4c>)
 80064c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c2:	4a0a      	ldr	r2, [pc, #40]	; (80064ec <HAL_MspInit+0x4c>)
 80064c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064c8:	6453      	str	r3, [r2, #68]	; 0x44
 80064ca:	4b08      	ldr	r3, [pc, #32]	; (80064ec <HAL_MspInit+0x4c>)
 80064cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80064d6:	2200      	movs	r2, #0
 80064d8:	210f      	movs	r1, #15
 80064da:	f06f 0001 	mvn.w	r0, #1
 80064de:	f001 fe69 	bl	80081b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80064e2:	bf00      	nop
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	40023800 	.word	0x40023800

080064f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b094      	sub	sp, #80	; 0x50
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	605a      	str	r2, [r3, #4]
 8006502:	609a      	str	r2, [r3, #8]
 8006504:	60da      	str	r2, [r3, #12]
 8006506:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a91      	ldr	r2, [pc, #580]	; (8006754 <HAL_ADC_MspInit+0x264>)
 800650e:	4293      	cmp	r3, r2
 8006510:	f040 808c 	bne.w	800662c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006514:	4b90      	ldr	r3, [pc, #576]	; (8006758 <HAL_ADC_MspInit+0x268>)
 8006516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006518:	4a8f      	ldr	r2, [pc, #572]	; (8006758 <HAL_ADC_MspInit+0x268>)
 800651a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800651e:	6453      	str	r3, [r2, #68]	; 0x44
 8006520:	4b8d      	ldr	r3, [pc, #564]	; (8006758 <HAL_ADC_MspInit+0x268>)
 8006522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006528:	63bb      	str	r3, [r7, #56]	; 0x38
 800652a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800652c:	4b8a      	ldr	r3, [pc, #552]	; (8006758 <HAL_ADC_MspInit+0x268>)
 800652e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006530:	4a89      	ldr	r2, [pc, #548]	; (8006758 <HAL_ADC_MspInit+0x268>)
 8006532:	f043 0304 	orr.w	r3, r3, #4
 8006536:	6313      	str	r3, [r2, #48]	; 0x30
 8006538:	4b87      	ldr	r3, [pc, #540]	; (8006758 <HAL_ADC_MspInit+0x268>)
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	637b      	str	r3, [r7, #52]	; 0x34
 8006542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006544:	4b84      	ldr	r3, [pc, #528]	; (8006758 <HAL_ADC_MspInit+0x268>)
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	4a83      	ldr	r2, [pc, #524]	; (8006758 <HAL_ADC_MspInit+0x268>)
 800654a:	f043 0301 	orr.w	r3, r3, #1
 800654e:	6313      	str	r3, [r2, #48]	; 0x30
 8006550:	4b81      	ldr	r3, [pc, #516]	; (8006758 <HAL_ADC_MspInit+0x268>)
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	633b      	str	r3, [r7, #48]	; 0x30
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800655c:	4b7e      	ldr	r3, [pc, #504]	; (8006758 <HAL_ADC_MspInit+0x268>)
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006560:	4a7d      	ldr	r2, [pc, #500]	; (8006758 <HAL_ADC_MspInit+0x268>)
 8006562:	f043 0302 	orr.w	r3, r3, #2
 8006566:	6313      	str	r3, [r2, #48]	; 0x30
 8006568:	4b7b      	ldr	r3, [pc, #492]	; (8006758 <HAL_ADC_MspInit+0x268>)
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8006574:	230f      	movs	r3, #15
 8006576:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006578:	2303      	movs	r3, #3
 800657a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800657c:	2300      	movs	r3, #0
 800657e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006580:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006584:	4619      	mov	r1, r3
 8006586:	4875      	ldr	r0, [pc, #468]	; (800675c <HAL_ADC_MspInit+0x26c>)
 8006588:	f002 fa46 	bl	8008a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC6_Pin|ADC5_Pin|ADC3_Pin
 800658c:	23f8      	movs	r3, #248	; 0xf8
 800658e:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006590:	2303      	movs	r3, #3
 8006592:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006594:	2300      	movs	r3, #0
 8006596:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006598:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800659c:	4619      	mov	r1, r3
 800659e:	4870      	ldr	r0, [pc, #448]	; (8006760 <HAL_ADC_MspInit+0x270>)
 80065a0:	f002 fa3a 	bl	8008a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC9_Pin|ADC8_Pin;
 80065a4:	2303      	movs	r3, #3
 80065a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065a8:	2303      	movs	r3, #3
 80065aa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ac:	2300      	movs	r3, #0
 80065ae:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065b4:	4619      	mov	r1, r3
 80065b6:	486b      	ldr	r0, [pc, #428]	; (8006764 <HAL_ADC_MspInit+0x274>)
 80065b8:	f002 fa2e 	bl	8008a18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80065bc:	4b6a      	ldr	r3, [pc, #424]	; (8006768 <HAL_ADC_MspInit+0x278>)
 80065be:	4a6b      	ldr	r2, [pc, #428]	; (800676c <HAL_ADC_MspInit+0x27c>)
 80065c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80065c2:	4b69      	ldr	r3, [pc, #420]	; (8006768 <HAL_ADC_MspInit+0x278>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065c8:	4b67      	ldr	r3, [pc, #412]	; (8006768 <HAL_ADC_MspInit+0x278>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80065ce:	4b66      	ldr	r3, [pc, #408]	; (8006768 <HAL_ADC_MspInit+0x278>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80065d4:	4b64      	ldr	r3, [pc, #400]	; (8006768 <HAL_ADC_MspInit+0x278>)
 80065d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80065dc:	4b62      	ldr	r3, [pc, #392]	; (8006768 <HAL_ADC_MspInit+0x278>)
 80065de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80065e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80065e4:	4b60      	ldr	r3, [pc, #384]	; (8006768 <HAL_ADC_MspInit+0x278>)
 80065e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80065ea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80065ec:	4b5e      	ldr	r3, [pc, #376]	; (8006768 <HAL_ADC_MspInit+0x278>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80065f2:	4b5d      	ldr	r3, [pc, #372]	; (8006768 <HAL_ADC_MspInit+0x278>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065f8:	4b5b      	ldr	r3, [pc, #364]	; (8006768 <HAL_ADC_MspInit+0x278>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80065fe:	485a      	ldr	r0, [pc, #360]	; (8006768 <HAL_ADC_MspInit+0x278>)
 8006600:	f001 fe02 	bl	8008208 <HAL_DMA_Init>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 800660a:	f7fd fe13 	bl	8004234 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a55      	ldr	r2, [pc, #340]	; (8006768 <HAL_ADC_MspInit+0x278>)
 8006612:	639a      	str	r2, [r3, #56]	; 0x38
 8006614:	4a54      	ldr	r2, [pc, #336]	; (8006768 <HAL_ADC_MspInit+0x278>)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800661a:	2200      	movs	r2, #0
 800661c:	2105      	movs	r1, #5
 800661e:	2012      	movs	r0, #18
 8006620:	f001 fdc8 	bl	80081b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006624:	2012      	movs	r0, #18
 8006626:	f001 fde1 	bl	80081ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800662a:	e13a      	b.n	80068a2 <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a4f      	ldr	r2, [pc, #316]	; (8006770 <HAL_ADC_MspInit+0x280>)
 8006632:	4293      	cmp	r3, r2
 8006634:	f040 80a2 	bne.w	800677c <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006638:	4b47      	ldr	r3, [pc, #284]	; (8006758 <HAL_ADC_MspInit+0x268>)
 800663a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663c:	4a46      	ldr	r2, [pc, #280]	; (8006758 <HAL_ADC_MspInit+0x268>)
 800663e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006642:	6453      	str	r3, [r2, #68]	; 0x44
 8006644:	4b44      	ldr	r3, [pc, #272]	; (8006758 <HAL_ADC_MspInit+0x268>)
 8006646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800664c:	62bb      	str	r3, [r7, #40]	; 0x28
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006650:	4b41      	ldr	r3, [pc, #260]	; (8006758 <HAL_ADC_MspInit+0x268>)
 8006652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006654:	4a40      	ldr	r2, [pc, #256]	; (8006758 <HAL_ADC_MspInit+0x268>)
 8006656:	f043 0304 	orr.w	r3, r3, #4
 800665a:	6313      	str	r3, [r2, #48]	; 0x30
 800665c:	4b3e      	ldr	r3, [pc, #248]	; (8006758 <HAL_ADC_MspInit+0x268>)
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	627b      	str	r3, [r7, #36]	; 0x24
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006668:	4b3b      	ldr	r3, [pc, #236]	; (8006758 <HAL_ADC_MspInit+0x268>)
 800666a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666c:	4a3a      	ldr	r2, [pc, #232]	; (8006758 <HAL_ADC_MspInit+0x268>)
 800666e:	f043 0301 	orr.w	r3, r3, #1
 8006672:	6313      	str	r3, [r2, #48]	; 0x30
 8006674:	4b38      	ldr	r3, [pc, #224]	; (8006758 <HAL_ADC_MspInit+0x268>)
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	623b      	str	r3, [r7, #32]
 800667e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006680:	4b35      	ldr	r3, [pc, #212]	; (8006758 <HAL_ADC_MspInit+0x268>)
 8006682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006684:	4a34      	ldr	r2, [pc, #208]	; (8006758 <HAL_ADC_MspInit+0x268>)
 8006686:	f043 0302 	orr.w	r3, r3, #2
 800668a:	6313      	str	r3, [r2, #48]	; 0x30
 800668c:	4b32      	ldr	r3, [pc, #200]	; (8006758 <HAL_ADC_MspInit+0x268>)
 800668e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	61fb      	str	r3, [r7, #28]
 8006696:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin
 8006698:	233f      	movs	r3, #63	; 0x3f
 800669a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800669c:	2303      	movs	r3, #3
 800669e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066a8:	4619      	mov	r1, r3
 80066aa:	482c      	ldr	r0, [pc, #176]	; (800675c <HAL_ADC_MspInit+0x26c>)
 80066ac:	f002 f9b4 	bl	8008a18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin|ADC4_Pin|ADC6_Pin
 80066b0:	237b      	movs	r3, #123	; 0x7b
 80066b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066b4:	2303      	movs	r3, #3
 80066b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b8:	2300      	movs	r3, #0
 80066ba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066c0:	4619      	mov	r1, r3
 80066c2:	4827      	ldr	r0, [pc, #156]	; (8006760 <HAL_ADC_MspInit+0x270>)
 80066c4:	f002 f9a8 	bl	8008a18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC9_Pin;
 80066c8:	2302      	movs	r3, #2
 80066ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066cc:	2303      	movs	r3, #3
 80066ce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ADC9_GPIO_Port, &GPIO_InitStruct);
 80066d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066d8:	4619      	mov	r1, r3
 80066da:	4822      	ldr	r0, [pc, #136]	; (8006764 <HAL_ADC_MspInit+0x274>)
 80066dc:	f002 f99c 	bl	8008a18 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80066e0:	4b24      	ldr	r3, [pc, #144]	; (8006774 <HAL_ADC_MspInit+0x284>)
 80066e2:	4a25      	ldr	r2, [pc, #148]	; (8006778 <HAL_ADC_MspInit+0x288>)
 80066e4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80066e6:	4b23      	ldr	r3, [pc, #140]	; (8006774 <HAL_ADC_MspInit+0x284>)
 80066e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066ec:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066ee:	4b21      	ldr	r3, [pc, #132]	; (8006774 <HAL_ADC_MspInit+0x284>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80066f4:	4b1f      	ldr	r3, [pc, #124]	; (8006774 <HAL_ADC_MspInit+0x284>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80066fa:	4b1e      	ldr	r3, [pc, #120]	; (8006774 <HAL_ADC_MspInit+0x284>)
 80066fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006700:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006702:	4b1c      	ldr	r3, [pc, #112]	; (8006774 <HAL_ADC_MspInit+0x284>)
 8006704:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006708:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800670a:	4b1a      	ldr	r3, [pc, #104]	; (8006774 <HAL_ADC_MspInit+0x284>)
 800670c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006710:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8006712:	4b18      	ldr	r3, [pc, #96]	; (8006774 <HAL_ADC_MspInit+0x284>)
 8006714:	2200      	movs	r2, #0
 8006716:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8006718:	4b16      	ldr	r3, [pc, #88]	; (8006774 <HAL_ADC_MspInit+0x284>)
 800671a:	2200      	movs	r2, #0
 800671c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800671e:	4b15      	ldr	r3, [pc, #84]	; (8006774 <HAL_ADC_MspInit+0x284>)
 8006720:	2200      	movs	r2, #0
 8006722:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006724:	4813      	ldr	r0, [pc, #76]	; (8006774 <HAL_ADC_MspInit+0x284>)
 8006726:	f001 fd6f 	bl	8008208 <HAL_DMA_Init>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <HAL_ADC_MspInit+0x244>
      Error_Handler();
 8006730:	f7fd fd80 	bl	8004234 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a0f      	ldr	r2, [pc, #60]	; (8006774 <HAL_ADC_MspInit+0x284>)
 8006738:	639a      	str	r2, [r3, #56]	; 0x38
 800673a:	4a0e      	ldr	r2, [pc, #56]	; (8006774 <HAL_ADC_MspInit+0x284>)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8006740:	2200      	movs	r2, #0
 8006742:	2105      	movs	r1, #5
 8006744:	2012      	movs	r0, #18
 8006746:	f001 fd35 	bl	80081b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800674a:	2012      	movs	r0, #18
 800674c:	f001 fd4e 	bl	80081ec <HAL_NVIC_EnableIRQ>
}
 8006750:	e0a7      	b.n	80068a2 <HAL_ADC_MspInit+0x3b2>
 8006752:	bf00      	nop
 8006754:	40012000 	.word	0x40012000
 8006758:	40023800 	.word	0x40023800
 800675c:	40020800 	.word	0x40020800
 8006760:	40020000 	.word	0x40020000
 8006764:	40020400 	.word	0x40020400
 8006768:	20013318 	.word	0x20013318
 800676c:	40026410 	.word	0x40026410
 8006770:	40012100 	.word	0x40012100
 8006774:	20023fb4 	.word	0x20023fb4
 8006778:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a4a      	ldr	r2, [pc, #296]	; (80068ac <HAL_ADC_MspInit+0x3bc>)
 8006782:	4293      	cmp	r3, r2
 8006784:	f040 808d 	bne.w	80068a2 <HAL_ADC_MspInit+0x3b2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8006788:	4b49      	ldr	r3, [pc, #292]	; (80068b0 <HAL_ADC_MspInit+0x3c0>)
 800678a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678c:	4a48      	ldr	r2, [pc, #288]	; (80068b0 <HAL_ADC_MspInit+0x3c0>)
 800678e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006792:	6453      	str	r3, [r2, #68]	; 0x44
 8006794:	4b46      	ldr	r3, [pc, #280]	; (80068b0 <HAL_ADC_MspInit+0x3c0>)
 8006796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800679c:	61bb      	str	r3, [r7, #24]
 800679e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80067a0:	4b43      	ldr	r3, [pc, #268]	; (80068b0 <HAL_ADC_MspInit+0x3c0>)
 80067a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a4:	4a42      	ldr	r2, [pc, #264]	; (80068b0 <HAL_ADC_MspInit+0x3c0>)
 80067a6:	f043 0320 	orr.w	r3, r3, #32
 80067aa:	6313      	str	r3, [r2, #48]	; 0x30
 80067ac:	4b40      	ldr	r3, [pc, #256]	; (80068b0 <HAL_ADC_MspInit+0x3c0>)
 80067ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b0:	f003 0320 	and.w	r3, r3, #32
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067b8:	4b3d      	ldr	r3, [pc, #244]	; (80068b0 <HAL_ADC_MspInit+0x3c0>)
 80067ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067bc:	4a3c      	ldr	r2, [pc, #240]	; (80068b0 <HAL_ADC_MspInit+0x3c0>)
 80067be:	f043 0304 	orr.w	r3, r3, #4
 80067c2:	6313      	str	r3, [r2, #48]	; 0x30
 80067c4:	4b3a      	ldr	r3, [pc, #232]	; (80068b0 <HAL_ADC_MspInit+0x3c0>)
 80067c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	613b      	str	r3, [r7, #16]
 80067ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067d0:	4b37      	ldr	r3, [pc, #220]	; (80068b0 <HAL_ADC_MspInit+0x3c0>)
 80067d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d4:	4a36      	ldr	r2, [pc, #216]	; (80068b0 <HAL_ADC_MspInit+0x3c0>)
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	6313      	str	r3, [r2, #48]	; 0x30
 80067dc:	4b34      	ldr	r3, [pc, #208]	; (80068b0 <HAL_ADC_MspInit+0x3c0>)
 80067de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC15_Pin|ADC14_Pin|PP_SPARE_I2C_ADC_Pin|ZION_SENSE_Pin
 80067e8:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80067ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067ee:	2303      	movs	r3, #3
 80067f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80067f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067fa:	4619      	mov	r1, r3
 80067fc:	482d      	ldr	r0, [pc, #180]	; (80068b4 <HAL_ADC_MspInit+0x3c4>)
 80067fe:	f002 f90b 	bl	8008a18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8006802:	230f      	movs	r3, #15
 8006804:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006806:	2303      	movs	r3, #3
 8006808:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800680a:	2300      	movs	r3, #0
 800680c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800680e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006812:	4619      	mov	r1, r3
 8006814:	4828      	ldr	r0, [pc, #160]	; (80068b8 <HAL_ADC_MspInit+0x3c8>)
 8006816:	f002 f8ff 	bl	8008a18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 800681a:	230c      	movs	r3, #12
 800681c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800681e:	2303      	movs	r3, #3
 8006820:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006822:	2300      	movs	r3, #0
 8006824:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006826:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800682a:	4619      	mov	r1, r3
 800682c:	4823      	ldr	r0, [pc, #140]	; (80068bc <HAL_ADC_MspInit+0x3cc>)
 800682e:	f002 f8f3 	bl	8008a18 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8006832:	4b23      	ldr	r3, [pc, #140]	; (80068c0 <HAL_ADC_MspInit+0x3d0>)
 8006834:	4a23      	ldr	r2, [pc, #140]	; (80068c4 <HAL_ADC_MspInit+0x3d4>)
 8006836:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8006838:	4b21      	ldr	r3, [pc, #132]	; (80068c0 <HAL_ADC_MspInit+0x3d0>)
 800683a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800683e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006840:	4b1f      	ldr	r3, [pc, #124]	; (80068c0 <HAL_ADC_MspInit+0x3d0>)
 8006842:	2200      	movs	r2, #0
 8006844:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8006846:	4b1e      	ldr	r3, [pc, #120]	; (80068c0 <HAL_ADC_MspInit+0x3d0>)
 8006848:	2200      	movs	r2, #0
 800684a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800684c:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <HAL_ADC_MspInit+0x3d0>)
 800684e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006852:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006854:	4b1a      	ldr	r3, [pc, #104]	; (80068c0 <HAL_ADC_MspInit+0x3d0>)
 8006856:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800685a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800685c:	4b18      	ldr	r3, [pc, #96]	; (80068c0 <HAL_ADC_MspInit+0x3d0>)
 800685e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006862:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8006864:	4b16      	ldr	r3, [pc, #88]	; (80068c0 <HAL_ADC_MspInit+0x3d0>)
 8006866:	2200      	movs	r2, #0
 8006868:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800686a:	4b15      	ldr	r3, [pc, #84]	; (80068c0 <HAL_ADC_MspInit+0x3d0>)
 800686c:	2200      	movs	r2, #0
 800686e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006870:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <HAL_ADC_MspInit+0x3d0>)
 8006872:	2200      	movs	r2, #0
 8006874:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8006876:	4812      	ldr	r0, [pc, #72]	; (80068c0 <HAL_ADC_MspInit+0x3d0>)
 8006878:	f001 fcc6 	bl	8008208 <HAL_DMA_Init>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <HAL_ADC_MspInit+0x396>
      Error_Handler();
 8006882:	f7fd fcd7 	bl	8004234 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a0d      	ldr	r2, [pc, #52]	; (80068c0 <HAL_ADC_MspInit+0x3d0>)
 800688a:	639a      	str	r2, [r3, #56]	; 0x38
 800688c:	4a0c      	ldr	r2, [pc, #48]	; (80068c0 <HAL_ADC_MspInit+0x3d0>)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8006892:	2200      	movs	r2, #0
 8006894:	2105      	movs	r1, #5
 8006896:	2012      	movs	r0, #18
 8006898:	f001 fc8c 	bl	80081b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800689c:	2012      	movs	r0, #18
 800689e:	f001 fca5 	bl	80081ec <HAL_NVIC_EnableIRQ>
}
 80068a2:	bf00      	nop
 80068a4:	3750      	adds	r7, #80	; 0x50
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	40012200 	.word	0x40012200
 80068b0:	40023800 	.word	0x40023800
 80068b4:	40021400 	.word	0x40021400
 80068b8:	40020800 	.word	0x40020800
 80068bc:	40020000 	.word	0x40020000
 80068c0:	20010a50 	.word	0x20010a50
 80068c4:	40026428 	.word	0x40026428

080068c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b090      	sub	sp, #64	; 0x40
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	605a      	str	r2, [r3, #4]
 80068da:	609a      	str	r2, [r3, #8]
 80068dc:	60da      	str	r2, [r3, #12]
 80068de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a6c      	ldr	r2, [pc, #432]	; (8006a98 <HAL_I2C_MspInit+0x1d0>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d129      	bne.n	800693e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068ea:	4b6c      	ldr	r3, [pc, #432]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 80068ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ee:	4a6b      	ldr	r2, [pc, #428]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 80068f0:	f043 0302 	orr.w	r3, r3, #2
 80068f4:	6313      	str	r3, [r2, #48]	; 0x30
 80068f6:	4b69      	ldr	r3, [pc, #420]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 80068f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LED_I2C_SCL_Pin|LED_I2C_SDA_Pin;
 8006902:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006908:	2312      	movs	r3, #18
 800690a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800690c:	2301      	movs	r3, #1
 800690e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006910:	2303      	movs	r3, #3
 8006912:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006914:	2304      	movs	r3, #4
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800691c:	4619      	mov	r1, r3
 800691e:	4860      	ldr	r0, [pc, #384]	; (8006aa0 <HAL_I2C_MspInit+0x1d8>)
 8006920:	f002 f87a 	bl	8008a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006924:	4b5d      	ldr	r3, [pc, #372]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	4a5c      	ldr	r2, [pc, #368]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 800692a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800692e:	6413      	str	r3, [r2, #64]	; 0x40
 8006930:	4b5a      	ldr	r3, [pc, #360]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 8006932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800693c:	e0a7      	b.n	8006a8e <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a58      	ldr	r2, [pc, #352]	; (8006aa4 <HAL_I2C_MspInit+0x1dc>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d128      	bne.n	800699a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006948:	4b54      	ldr	r3, [pc, #336]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 800694a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694c:	4a53      	ldr	r2, [pc, #332]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 800694e:	f043 0320 	orr.w	r3, r3, #32
 8006952:	6313      	str	r3, [r2, #48]	; 0x30
 8006954:	4b51      	ldr	r3, [pc, #324]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 8006956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006958:	f003 0320 	and.w	r3, r3, #32
 800695c:	623b      	str	r3, [r7, #32]
 800695e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SPARE_I2C_SDA_3V3_Pin|SPARE_I2C_SCL_3V3_Pin;
 8006960:	2303      	movs	r3, #3
 8006962:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006964:	2312      	movs	r3, #18
 8006966:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006968:	2301      	movs	r3, #1
 800696a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800696c:	2303      	movs	r3, #3
 800696e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006970:	2304      	movs	r3, #4
 8006972:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006978:	4619      	mov	r1, r3
 800697a:	484b      	ldr	r0, [pc, #300]	; (8006aa8 <HAL_I2C_MspInit+0x1e0>)
 800697c:	f002 f84c 	bl	8008a18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006980:	4b46      	ldr	r3, [pc, #280]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	4a45      	ldr	r2, [pc, #276]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 8006986:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800698a:	6413      	str	r3, [r2, #64]	; 0x40
 800698c:	4b43      	ldr	r3, [pc, #268]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 800698e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006994:	61fb      	str	r3, [r7, #28]
 8006996:	69fb      	ldr	r3, [r7, #28]
}
 8006998:	e079      	b.n	8006a8e <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a43      	ldr	r2, [pc, #268]	; (8006aac <HAL_I2C_MspInit+0x1e4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d146      	bne.n	8006a32 <HAL_I2C_MspInit+0x16a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069a4:	4b3d      	ldr	r3, [pc, #244]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 80069a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a8:	4a3c      	ldr	r2, [pc, #240]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 80069aa:	f043 0304 	orr.w	r3, r3, #4
 80069ae:	6313      	str	r3, [r2, #48]	; 0x30
 80069b0:	4b3a      	ldr	r3, [pc, #232]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 80069b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b4:	f003 0304 	and.w	r3, r3, #4
 80069b8:	61bb      	str	r3, [r7, #24]
 80069ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069bc:	4b37      	ldr	r3, [pc, #220]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 80069be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c0:	4a36      	ldr	r2, [pc, #216]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	6313      	str	r3, [r2, #48]	; 0x30
 80069c8:	4b34      	ldr	r3, [pc, #208]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 80069ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	617b      	str	r3, [r7, #20]
 80069d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SOC_I2C_SDA_3V3_Pin;
 80069d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069da:	2312      	movs	r3, #18
 80069dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069de:	2301      	movs	r3, #1
 80069e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069e2:	2303      	movs	r3, #3
 80069e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80069e6:	2304      	movs	r3, #4
 80069e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SDA_3V3_GPIO_Port, &GPIO_InitStruct);
 80069ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80069ee:	4619      	mov	r1, r3
 80069f0:	482f      	ldr	r0, [pc, #188]	; (8006ab0 <HAL_I2C_MspInit+0x1e8>)
 80069f2:	f002 f811 	bl	8008a18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_I2C_SCL_3V3_Pin;
 80069f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069fc:	2312      	movs	r3, #18
 80069fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a00:	2301      	movs	r3, #1
 8006a02:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a04:	2303      	movs	r3, #3
 8006a06:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006a08:	2304      	movs	r3, #4
 8006a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SCL_3V3_GPIO_Port, &GPIO_InitStruct);
 8006a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a10:	4619      	mov	r1, r3
 8006a12:	4828      	ldr	r0, [pc, #160]	; (8006ab4 <HAL_I2C_MspInit+0x1ec>)
 8006a14:	f002 f800 	bl	8008a18 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006a18:	4b20      	ldr	r3, [pc, #128]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1c:	4a1f      	ldr	r2, [pc, #124]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 8006a1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a22:	6413      	str	r3, [r2, #64]	; 0x40
 8006a24:	4b1d      	ldr	r3, [pc, #116]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 8006a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a2c:	613b      	str	r3, [r7, #16]
 8006a2e:	693b      	ldr	r3, [r7, #16]
}
 8006a30:	e02d      	b.n	8006a8e <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C4)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a20      	ldr	r2, [pc, #128]	; (8006ab8 <HAL_I2C_MspInit+0x1f0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d128      	bne.n	8006a8e <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a3c:	4b17      	ldr	r3, [pc, #92]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 8006a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a40:	4a16      	ldr	r2, [pc, #88]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 8006a42:	f043 0320 	orr.w	r3, r3, #32
 8006a46:	6313      	str	r3, [r2, #48]	; 0x30
 8006a48:	4b14      	ldr	r3, [pc, #80]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_ZION_I2C_SDA_Pin|STM_ZION_I2C_SCL_Pin;
 8006a54:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a5a:	2312      	movs	r3, #18
 8006a5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a62:	2303      	movs	r3, #3
 8006a64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8006a66:	2304      	movs	r3, #4
 8006a68:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a6e:	4619      	mov	r1, r3
 8006a70:	480d      	ldr	r0, [pc, #52]	; (8006aa8 <HAL_I2C_MspInit+0x1e0>)
 8006a72:	f001 ffd1 	bl	8008a18 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8006a76:	4b09      	ldr	r3, [pc, #36]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	4a08      	ldr	r2, [pc, #32]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 8006a7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a80:	6413      	str	r3, [r2, #64]	; 0x40
 8006a82:	4b06      	ldr	r3, [pc, #24]	; (8006a9c <HAL_I2C_MspInit+0x1d4>)
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a8a:	60bb      	str	r3, [r7, #8]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
}
 8006a8e:	bf00      	nop
 8006a90:	3740      	adds	r7, #64	; 0x40
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	40005400 	.word	0x40005400
 8006a9c:	40023800 	.word	0x40023800
 8006aa0:	40020400 	.word	0x40020400
 8006aa4:	40005800 	.word	0x40005800
 8006aa8:	40021400 	.word	0x40021400
 8006aac:	40005c00 	.word	0x40005c00
 8006ab0:	40020800 	.word	0x40020800
 8006ab4:	40020000 	.word	0x40020000
 8006ab8:	40006000 	.word	0x40006000

08006abc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a07      	ldr	r2, [pc, #28]	; (8006ae8 <HAL_RTC_MspInit+0x2c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d105      	bne.n	8006ada <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006ace:	4b07      	ldr	r3, [pc, #28]	; (8006aec <HAL_RTC_MspInit+0x30>)
 8006ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad2:	4a06      	ldr	r2, [pc, #24]	; (8006aec <HAL_RTC_MspInit+0x30>)
 8006ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40002800 	.word	0x40002800
 8006aec:	40023800 	.word	0x40023800

08006af0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08c      	sub	sp, #48	; 0x30
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006af8:	f107 031c 	add.w	r3, r7, #28
 8006afc:	2200      	movs	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	605a      	str	r2, [r3, #4]
 8006b02:	609a      	str	r2, [r3, #8]
 8006b04:	60da      	str	r2, [r3, #12]
 8006b06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a40      	ldr	r2, [pc, #256]	; (8006c10 <HAL_SPI_MspInit+0x120>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d130      	bne.n	8006b74 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006b12:	4b40      	ldr	r3, [pc, #256]	; (8006c14 <HAL_SPI_MspInit+0x124>)
 8006b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b16:	4a3f      	ldr	r2, [pc, #252]	; (8006c14 <HAL_SPI_MspInit+0x124>)
 8006b18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b1e:	4b3d      	ldr	r3, [pc, #244]	; (8006c14 <HAL_SPI_MspInit+0x124>)
 8006b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b26:	61bb      	str	r3, [r7, #24]
 8006b28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b2a:	4b3a      	ldr	r3, [pc, #232]	; (8006c14 <HAL_SPI_MspInit+0x124>)
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	4a39      	ldr	r2, [pc, #228]	; (8006c14 <HAL_SPI_MspInit+0x124>)
 8006b30:	f043 0310 	orr.w	r3, r3, #16
 8006b34:	6313      	str	r3, [r2, #48]	; 0x30
 8006b36:	4b37      	ldr	r3, [pc, #220]	; (8006c14 <HAL_SPI_MspInit+0x124>)
 8006b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3a:	f003 0310 	and.w	r3, r3, #16
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8006b42:	2364      	movs	r3, #100	; 0x64
 8006b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b46:	2302      	movs	r3, #2
 8006b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8006b52:	2305      	movs	r3, #5
 8006b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b56:	f107 031c 	add.w	r3, r7, #28
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	482e      	ldr	r0, [pc, #184]	; (8006c18 <HAL_SPI_MspInit+0x128>)
 8006b5e:	f001 ff5b 	bl	8008a18 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8006b62:	2200      	movs	r2, #0
 8006b64:	2105      	movs	r1, #5
 8006b66:	2054      	movs	r0, #84	; 0x54
 8006b68:	f001 fb24 	bl	80081b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8006b6c:	2054      	movs	r0, #84	; 0x54
 8006b6e:	f001 fb3d 	bl	80081ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8006b72:	e049      	b.n	8006c08 <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI5)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a28      	ldr	r2, [pc, #160]	; (8006c1c <HAL_SPI_MspInit+0x12c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d144      	bne.n	8006c08 <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006b7e:	4b25      	ldr	r3, [pc, #148]	; (8006c14 <HAL_SPI_MspInit+0x124>)
 8006b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b82:	4a24      	ldr	r2, [pc, #144]	; (8006c14 <HAL_SPI_MspInit+0x124>)
 8006b84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b88:	6453      	str	r3, [r2, #68]	; 0x44
 8006b8a:	4b22      	ldr	r3, [pc, #136]	; (8006c14 <HAL_SPI_MspInit+0x124>)
 8006b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b92:	613b      	str	r3, [r7, #16]
 8006b94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006b96:	4b1f      	ldr	r3, [pc, #124]	; (8006c14 <HAL_SPI_MspInit+0x124>)
 8006b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9a:	4a1e      	ldr	r2, [pc, #120]	; (8006c14 <HAL_SPI_MspInit+0x124>)
 8006b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ba2:	4b1c      	ldr	r3, [pc, #112]	; (8006c14 <HAL_SPI_MspInit+0x124>)
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006bae:	4b19      	ldr	r3, [pc, #100]	; (8006c14 <HAL_SPI_MspInit+0x124>)
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb2:	4a18      	ldr	r2, [pc, #96]	; (8006c14 <HAL_SPI_MspInit+0x124>)
 8006bb4:	f043 0320 	orr.w	r3, r3, #32
 8006bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8006bba:	4b16      	ldr	r3, [pc, #88]	; (8006c14 <HAL_SPI_MspInit+0x124>)
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	60bb      	str	r3, [r7, #8]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPARE_SS_L_3V3_Pin|SPARE_MISO_3V3_Pin|SPARE_SCLK_3V3_Pin;
 8006bc6:	23e0      	movs	r3, #224	; 0xe0
 8006bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bca:	2302      	movs	r3, #2
 8006bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006bd6:	2305      	movs	r3, #5
 8006bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006bda:	f107 031c 	add.w	r3, r7, #28
 8006bde:	4619      	mov	r1, r3
 8006be0:	480f      	ldr	r0, [pc, #60]	; (8006c20 <HAL_SPI_MspInit+0x130>)
 8006be2:	f001 ff19 	bl	8008a18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPARE_MOSI_3V3_Pin;
 8006be6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bec:	2302      	movs	r3, #2
 8006bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006bf8:	2305      	movs	r3, #5
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPARE_MOSI_3V3_GPIO_Port, &GPIO_InitStruct);
 8006bfc:	f107 031c 	add.w	r3, r7, #28
 8006c00:	4619      	mov	r1, r3
 8006c02:	4808      	ldr	r0, [pc, #32]	; (8006c24 <HAL_SPI_MspInit+0x134>)
 8006c04:	f001 ff08 	bl	8008a18 <HAL_GPIO_Init>
}
 8006c08:	bf00      	nop
 8006c0a:	3730      	adds	r7, #48	; 0x30
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40013400 	.word	0x40013400
 8006c14:	40023800 	.word	0x40023800
 8006c18:	40021000 	.word	0x40021000
 8006c1c:	40015000 	.word	0x40015000
 8006c20:	40021c00 	.word	0x40021c00
 8006c24:	40021400 	.word	0x40021400

08006c28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a13      	ldr	r2, [pc, #76]	; (8006c84 <HAL_TIM_Base_MspInit+0x5c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d10c      	bne.n	8006c54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006c3a:	4b13      	ldr	r3, [pc, #76]	; (8006c88 <HAL_TIM_Base_MspInit+0x60>)
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	4a12      	ldr	r2, [pc, #72]	; (8006c88 <HAL_TIM_Base_MspInit+0x60>)
 8006c40:	f043 0304 	orr.w	r3, r3, #4
 8006c44:	6413      	str	r3, [r2, #64]	; 0x40
 8006c46:	4b10      	ldr	r3, [pc, #64]	; (8006c88 <HAL_TIM_Base_MspInit+0x60>)
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006c52:	e010      	b.n	8006c76 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a0c      	ldr	r2, [pc, #48]	; (8006c8c <HAL_TIM_Base_MspInit+0x64>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d10b      	bne.n	8006c76 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006c5e:	4b0a      	ldr	r3, [pc, #40]	; (8006c88 <HAL_TIM_Base_MspInit+0x60>)
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	4a09      	ldr	r2, [pc, #36]	; (8006c88 <HAL_TIM_Base_MspInit+0x60>)
 8006c64:	f043 0308 	orr.w	r3, r3, #8
 8006c68:	6413      	str	r3, [r2, #64]	; 0x40
 8006c6a:	4b07      	ldr	r3, [pc, #28]	; (8006c88 <HAL_TIM_Base_MspInit+0x60>)
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	f003 0308 	and.w	r3, r3, #8
 8006c72:	60bb      	str	r3, [r7, #8]
 8006c74:	68bb      	ldr	r3, [r7, #8]
}
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40000800 	.word	0x40000800
 8006c88:	40023800 	.word	0x40023800
 8006c8c:	40000c00 	.word	0x40000c00

08006c90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08a      	sub	sp, #40	; 0x28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c98:	f107 0314 	add.w	r3, r7, #20
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	605a      	str	r2, [r3, #4]
 8006ca2:	609a      	str	r2, [r3, #8]
 8006ca4:	60da      	str	r2, [r3, #12]
 8006ca6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a22      	ldr	r2, [pc, #136]	; (8006d38 <HAL_TIM_MspPostInit+0xa8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d11c      	bne.n	8006cec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cb2:	4b22      	ldr	r3, [pc, #136]	; (8006d3c <HAL_TIM_MspPostInit+0xac>)
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb6:	4a21      	ldr	r2, [pc, #132]	; (8006d3c <HAL_TIM_MspPostInit+0xac>)
 8006cb8:	f043 0302 	orr.w	r3, r3, #2
 8006cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cbe:	4b1f      	ldr	r3, [pc, #124]	; (8006d3c <HAL_TIM_MspPostInit+0xac>)
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SPARE_TIM_Pin;
 8006cca:	2340      	movs	r3, #64	; 0x40
 8006ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cce:	2302      	movs	r3, #2
 8006cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006cda:	2302      	movs	r3, #2
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPARE_TIM_GPIO_Port, &GPIO_InitStruct);
 8006cde:	f107 0314 	add.w	r3, r7, #20
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4816      	ldr	r0, [pc, #88]	; (8006d40 <HAL_TIM_MspPostInit+0xb0>)
 8006ce6:	f001 fe97 	bl	8008a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8006cea:	e021      	b.n	8006d30 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a14      	ldr	r2, [pc, #80]	; (8006d44 <HAL_TIM_MspPostInit+0xb4>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d11c      	bne.n	8006d30 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006cf6:	4b11      	ldr	r3, [pc, #68]	; (8006d3c <HAL_TIM_MspPostInit+0xac>)
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfa:	4a10      	ldr	r2, [pc, #64]	; (8006d3c <HAL_TIM_MspPostInit+0xac>)
 8006cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d00:	6313      	str	r3, [r2, #48]	; 0x30
 8006d02:	4b0e      	ldr	r3, [pc, #56]	; (8006d3c <HAL_TIM_MspPostInit+0xac>)
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|LCD_EXTCOMM_Pin;
 8006d0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d14:	2302      	movs	r3, #2
 8006d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006d20:	2302      	movs	r3, #2
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006d24:	f107 0314 	add.w	r3, r7, #20
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4807      	ldr	r0, [pc, #28]	; (8006d48 <HAL_TIM_MspPostInit+0xb8>)
 8006d2c:	f001 fe74 	bl	8008a18 <HAL_GPIO_Init>
}
 8006d30:	bf00      	nop
 8006d32:	3728      	adds	r7, #40	; 0x28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	40000800 	.word	0x40000800
 8006d3c:	40023800 	.word	0x40023800
 8006d40:	40020400 	.word	0x40020400
 8006d44:	40000c00 	.word	0x40000c00
 8006d48:	40021c00 	.word	0x40021c00

08006d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08e      	sub	sp, #56	; 0x38
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	605a      	str	r2, [r3, #4]
 8006d5e:	609a      	str	r2, [r3, #8]
 8006d60:	60da      	str	r2, [r3, #12]
 8006d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a6c      	ldr	r2, [pc, #432]	; (8006f1c <HAL_UART_MspInit+0x1d0>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d129      	bne.n	8006dc2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006d6e:	4b6c      	ldr	r3, [pc, #432]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	4a6b      	ldr	r2, [pc, #428]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006d74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d78:	6413      	str	r3, [r2, #64]	; 0x40
 8006d7a:	4b69      	ldr	r3, [pc, #420]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d82:	623b      	str	r3, [r7, #32]
 8006d84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d86:	4b66      	ldr	r3, [pc, #408]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8a:	4a65      	ldr	r2, [pc, #404]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006d8c:	f043 0304 	orr.w	r3, r3, #4
 8006d90:	6313      	str	r3, [r2, #48]	; 0x30
 8006d92:	4b63      	ldr	r3, [pc, #396]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	f003 0304 	and.w	r3, r3, #4
 8006d9a:	61fb      	str	r3, [r7, #28]
 8006d9c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = SPARE_UART_RX_3V3_Pin|SPARE_UART_TX_3V3_Pin;
 8006d9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006da4:	2302      	movs	r3, #2
 8006da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006da8:	2300      	movs	r3, #0
 8006daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dac:	2303      	movs	r3, #3
 8006dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006db0:	2308      	movs	r3, #8
 8006db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006db8:	4619      	mov	r1, r3
 8006dba:	485a      	ldr	r0, [pc, #360]	; (8006f24 <HAL_UART_MspInit+0x1d8>)
 8006dbc:	f001 fe2c 	bl	8008a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8006dc0:	e0a7      	b.n	8006f12 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART5)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a58      	ldr	r2, [pc, #352]	; (8006f28 <HAL_UART_MspInit+0x1dc>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d174      	bne.n	8006eb6 <HAL_UART_MspInit+0x16a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006dcc:	4b54      	ldr	r3, [pc, #336]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	4a53      	ldr	r2, [pc, #332]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006dd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8006dd8:	4b51      	ldr	r3, [pc, #324]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006de0:	61bb      	str	r3, [r7, #24]
 8006de2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006de4:	4b4e      	ldr	r3, [pc, #312]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de8:	4a4d      	ldr	r2, [pc, #308]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006dea:	f043 0304 	orr.w	r3, r3, #4
 8006dee:	6313      	str	r3, [r2, #48]	; 0x30
 8006df0:	4b4b      	ldr	r3, [pc, #300]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006dfc:	4b48      	ldr	r3, [pc, #288]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e00:	4a47      	ldr	r2, [pc, #284]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006e02:	f043 0308 	orr.w	r3, r3, #8
 8006e06:	6313      	str	r3, [r2, #48]	; 0x30
 8006e08:	4b45      	ldr	r3, [pc, #276]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SOC_UART_TX_3V3_Pin;
 8006e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e22:	2303      	movs	r3, #3
 8006e24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006e26:	2308      	movs	r3, #8
 8006e28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_TX_3V3_GPIO_Port, &GPIO_InitStruct);
 8006e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e2e:	4619      	mov	r1, r3
 8006e30:	483c      	ldr	r0, [pc, #240]	; (8006f24 <HAL_UART_MspInit+0x1d8>)
 8006e32:	f001 fdf1 	bl	8008a18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_UART_RX_3V3_Pin;
 8006e36:	2304      	movs	r3, #4
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e42:	2303      	movs	r3, #3
 8006e44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006e46:	2308      	movs	r3, #8
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_RX_3V3_GPIO_Port, &GPIO_InitStruct);
 8006e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4836      	ldr	r0, [pc, #216]	; (8006f2c <HAL_UART_MspInit+0x1e0>)
 8006e52:	f001 fde1 	bl	8008a18 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006e56:	4b36      	ldr	r3, [pc, #216]	; (8006f30 <HAL_UART_MspInit+0x1e4>)
 8006e58:	4a36      	ldr	r2, [pc, #216]	; (8006f34 <HAL_UART_MspInit+0x1e8>)
 8006e5a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8006e5c:	4b34      	ldr	r3, [pc, #208]	; (8006f30 <HAL_UART_MspInit+0x1e4>)
 8006e5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e62:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e64:	4b32      	ldr	r3, [pc, #200]	; (8006f30 <HAL_UART_MspInit+0x1e4>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e6a:	4b31      	ldr	r3, [pc, #196]	; (8006f30 <HAL_UART_MspInit+0x1e4>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006e70:	4b2f      	ldr	r3, [pc, #188]	; (8006f30 <HAL_UART_MspInit+0x1e4>)
 8006e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e76:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e78:	4b2d      	ldr	r3, [pc, #180]	; (8006f30 <HAL_UART_MspInit+0x1e4>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e7e:	4b2c      	ldr	r3, [pc, #176]	; (8006f30 <HAL_UART_MspInit+0x1e4>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8006e84:	4b2a      	ldr	r3, [pc, #168]	; (8006f30 <HAL_UART_MspInit+0x1e4>)
 8006e86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e8a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006e8c:	4b28      	ldr	r3, [pc, #160]	; (8006f30 <HAL_UART_MspInit+0x1e4>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e92:	4b27      	ldr	r3, [pc, #156]	; (8006f30 <HAL_UART_MspInit+0x1e4>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8006e98:	4825      	ldr	r0, [pc, #148]	; (8006f30 <HAL_UART_MspInit+0x1e4>)
 8006e9a:	f001 f9b5 	bl	8008208 <HAL_DMA_Init>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8006ea4:	f7fd f9c6 	bl	8004234 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a21      	ldr	r2, [pc, #132]	; (8006f30 <HAL_UART_MspInit+0x1e4>)
 8006eac:	66da      	str	r2, [r3, #108]	; 0x6c
 8006eae:	4a20      	ldr	r2, [pc, #128]	; (8006f30 <HAL_UART_MspInit+0x1e4>)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006eb4:	e02d      	b.n	8006f12 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART7)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a1f      	ldr	r2, [pc, #124]	; (8006f38 <HAL_UART_MspInit+0x1ec>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d128      	bne.n	8006f12 <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_UART7_CLK_ENABLE();
 8006ec0:	4b17      	ldr	r3, [pc, #92]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	4a16      	ldr	r2, [pc, #88]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006ec6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eca:	6413      	str	r3, [r2, #64]	; 0x40
 8006ecc:	4b14      	ldr	r3, [pc, #80]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ed4:	60fb      	str	r3, [r7, #12]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ed8:	4b11      	ldr	r3, [pc, #68]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006edc:	4a10      	ldr	r2, [pc, #64]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006ede:	f043 0310 	orr.w	r3, r3, #16
 8006ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ee4:	4b0e      	ldr	r3, [pc, #56]	; (8006f20 <HAL_UART_MspInit+0x1d4>)
 8006ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee8:	f003 0310 	and.w	r3, r3, #16
 8006eec:	60bb      	str	r3, [r7, #8]
 8006eee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FTDI_UART_RX_Pin|FTDI_UART_CTS_L_Pin|FTDI_UART_TX_Pin|FTDI_UART_RTS_L_Pin;
 8006ef0:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8006ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006efe:	2303      	movs	r3, #3
 8006f00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006f02:	2308      	movs	r3, #8
 8006f04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	480b      	ldr	r0, [pc, #44]	; (8006f3c <HAL_UART_MspInit+0x1f0>)
 8006f0e:	f001 fd83 	bl	8008a18 <HAL_GPIO_Init>
}
 8006f12:	bf00      	nop
 8006f14:	3738      	adds	r7, #56	; 0x38
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	40004c00 	.word	0x40004c00
 8006f20:	40023800 	.word	0x40023800
 8006f24:	40020800 	.word	0x40020800
 8006f28:	40005000 	.word	0x40005000
 8006f2c:	40020c00 	.word	0x40020c00
 8006f30:	20024014 	.word	0x20024014
 8006f34:	40026010 	.word	0x40026010
 8006f38:	40007800 	.word	0x40007800
 8006f3c:	40021000 	.word	0x40021000

08006f40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08a      	sub	sp, #40	; 0x28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f48:	f107 0314 	add.w	r3, r7, #20
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	605a      	str	r2, [r3, #4]
 8006f52:	609a      	str	r2, [r3, #8]
 8006f54:	60da      	str	r2, [r3, #12]
 8006f56:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f60:	d134      	bne.n	8006fcc <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f62:	4b1c      	ldr	r3, [pc, #112]	; (8006fd4 <HAL_PCD_MspInit+0x94>)
 8006f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f66:	4a1b      	ldr	r2, [pc, #108]	; (8006fd4 <HAL_PCD_MspInit+0x94>)
 8006f68:	f043 0301 	orr.w	r3, r3, #1
 8006f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f6e:	4b19      	ldr	r3, [pc, #100]	; (8006fd4 <HAL_PCD_MspInit+0x94>)
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	613b      	str	r3, [r7, #16]
 8006f78:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8006f7a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f80:	2302      	movs	r3, #2
 8006f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f84:	2300      	movs	r3, #0
 8006f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f8c:	230a      	movs	r3, #10
 8006f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f90:	f107 0314 	add.w	r3, r7, #20
 8006f94:	4619      	mov	r1, r3
 8006f96:	4810      	ldr	r0, [pc, #64]	; (8006fd8 <HAL_PCD_MspInit+0x98>)
 8006f98:	f001 fd3e 	bl	8008a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f9c:	4b0d      	ldr	r3, [pc, #52]	; (8006fd4 <HAL_PCD_MspInit+0x94>)
 8006f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa0:	4a0c      	ldr	r2, [pc, #48]	; (8006fd4 <HAL_PCD_MspInit+0x94>)
 8006fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa6:	6353      	str	r3, [r2, #52]	; 0x34
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	; (8006fd4 <HAL_PCD_MspInit+0x94>)
 8006faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <HAL_PCD_MspInit+0x94>)
 8006fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb8:	4a06      	ldr	r2, [pc, #24]	; (8006fd4 <HAL_PCD_MspInit+0x94>)
 8006fba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fbe:	6453      	str	r3, [r2, #68]	; 0x44
 8006fc0:	4b04      	ldr	r3, [pc, #16]	; (8006fd4 <HAL_PCD_MspInit+0x94>)
 8006fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fc8:	60bb      	str	r3, [r7, #8]
 8006fca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8006fcc:	bf00      	nop
 8006fce:	3728      	adds	r7, #40	; 0x28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	40023800 	.word	0x40023800
 8006fd8:	40020000 	.word	0x40020000

08006fdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08c      	sub	sp, #48	; 0x30
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8006fec:	2200      	movs	r2, #0
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	2036      	movs	r0, #54	; 0x36
 8006ff2:	f001 f8df 	bl	80081b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006ff6:	2036      	movs	r0, #54	; 0x36
 8006ff8:	f001 f8f8 	bl	80081ec <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006ffc:	4b1f      	ldr	r3, [pc, #124]	; (800707c <HAL_InitTick+0xa0>)
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	4a1e      	ldr	r2, [pc, #120]	; (800707c <HAL_InitTick+0xa0>)
 8007002:	f043 0310 	orr.w	r3, r3, #16
 8007006:	6413      	str	r3, [r2, #64]	; 0x40
 8007008:	4b1c      	ldr	r3, [pc, #112]	; (800707c <HAL_InitTick+0xa0>)
 800700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700c:	f003 0310 	and.w	r3, r3, #16
 8007010:	60fb      	str	r3, [r7, #12]
 8007012:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007014:	f107 0210 	add.w	r2, r7, #16
 8007018:	f107 0314 	add.w	r3, r7, #20
 800701c:	4611      	mov	r1, r2
 800701e:	4618      	mov	r0, r3
 8007020:	f003 f9fe 	bl	800a420 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8007024:	f003 f9d4 	bl	800a3d0 <HAL_RCC_GetPCLK1Freq>
 8007028:	4603      	mov	r3, r0
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007030:	4a13      	ldr	r2, [pc, #76]	; (8007080 <HAL_InitTick+0xa4>)
 8007032:	fba2 2303 	umull	r2, r3, r2, r3
 8007036:	0c9b      	lsrs	r3, r3, #18
 8007038:	3b01      	subs	r3, #1
 800703a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800703c:	4b11      	ldr	r3, [pc, #68]	; (8007084 <HAL_InitTick+0xa8>)
 800703e:	4a12      	ldr	r2, [pc, #72]	; (8007088 <HAL_InitTick+0xac>)
 8007040:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8007042:	4b10      	ldr	r3, [pc, #64]	; (8007084 <HAL_InitTick+0xa8>)
 8007044:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007048:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800704a:	4a0e      	ldr	r2, [pc, #56]	; (8007084 <HAL_InitTick+0xa8>)
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8007050:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <HAL_InitTick+0xa8>)
 8007052:	2200      	movs	r2, #0
 8007054:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007056:	4b0b      	ldr	r3, [pc, #44]	; (8007084 <HAL_InitTick+0xa8>)
 8007058:	2200      	movs	r2, #0
 800705a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800705c:	4809      	ldr	r0, [pc, #36]	; (8007084 <HAL_InitTick+0xa8>)
 800705e:	f004 fb13 	bl	800b688 <HAL_TIM_Base_Init>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d104      	bne.n	8007072 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8007068:	4806      	ldr	r0, [pc, #24]	; (8007084 <HAL_InitTick+0xa8>)
 800706a:	f004 fb39 	bl	800b6e0 <HAL_TIM_Base_Start_IT>
 800706e:	4603      	mov	r3, r0
 8007070:	e000      	b.n	8007074 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
}
 8007074:	4618      	mov	r0, r3
 8007076:	3730      	adds	r7, #48	; 0x30
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	40023800 	.word	0x40023800
 8007080:	431bde83 	.word	0x431bde83
 8007084:	200240d0 	.word	0x200240d0
 8007088:	40001000 	.word	0x40001000

0800708c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007090:	e7fe      	b.n	8007090 <NMI_Handler+0x4>

08007092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007092:	b480      	push	{r7}
 8007094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007096:	e7fe      	b.n	8007096 <HardFault_Handler+0x4>

08007098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800709c:	e7fe      	b.n	800709c <MemManage_Handler+0x4>

0800709e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800709e:	b480      	push	{r7}
 80070a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80070a2:	e7fe      	b.n	80070a2 <BusFault_Handler+0x4>

080070a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80070a4:	b480      	push	{r7}
 80070a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80070a8:	e7fe      	b.n	80070a8 <UsageFault_Handler+0x4>

080070aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80070aa:	b480      	push	{r7}
 80070ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80070ae:	bf00      	nop
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80070bc:	2010      	movs	r0, #16
 80070be:	f001 fea1 	bl	8008e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if(inputButtonSet>buttonPriority.back){
 80070c2:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <EXTI4_IRQHandler+0x28>)
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <EXTI4_IRQHandler+0x2c>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	dd04      	ble.n	80070da <EXTI4_IRQHandler+0x22>
	  inputButtonSet = buttonPriority.back;
 80070d0:	4b04      	ldr	r3, [pc, #16]	; (80070e4 <EXTI4_IRQHandler+0x2c>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	4b02      	ldr	r3, [pc, #8]	; (80070e0 <EXTI4_IRQHandler+0x28>)
 80070d8:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI4_IRQn 1 */
}
 80070da:	bf00      	nop
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	200000bc 	.word	0x200000bc
 80070e4:	20000178 	.word	0x20000178

080070e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80070ec:	4802      	ldr	r0, [pc, #8]	; (80070f8 <DMA1_Stream0_IRQHandler+0x10>)
 80070ee:	f001 fa2b 	bl	8008548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80070f2:	bf00      	nop
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20024014 	.word	0x20024014

080070fc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8007100:	4805      	ldr	r0, [pc, #20]	; (8007118 <ADC_IRQHandler+0x1c>)
 8007102:	f000 fa37 	bl	8007574 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8007106:	4805      	ldr	r0, [pc, #20]	; (800711c <ADC_IRQHandler+0x20>)
 8007108:	f000 fa34 	bl	8007574 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800710c:	4804      	ldr	r0, [pc, #16]	; (8007120 <ADC_IRQHandler+0x24>)
 800710e:	f000 fa31 	bl	8007574 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8007112:	bf00      	nop
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20013284 	.word	0x20013284
 800711c:	2001056c 	.word	0x2001056c
 8007120:	200132d0 	.word	0x200132d0

08007124 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint8_t buttonStates[3];
	buttonStates[0] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_5);
 800712a:	2120      	movs	r1, #32
 800712c:	482a      	ldr	r0, [pc, #168]	; (80071d8 <EXTI9_5_IRQHandler+0xb4>)
 800712e:	f001 fe1d 	bl	8008d6c <HAL_GPIO_ReadPin>
 8007132:	4603      	mov	r3, r0
 8007134:	713b      	strb	r3, [r7, #4]
	buttonStates[1] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_6);
 8007136:	2140      	movs	r1, #64	; 0x40
 8007138:	4827      	ldr	r0, [pc, #156]	; (80071d8 <EXTI9_5_IRQHandler+0xb4>)
 800713a:	f001 fe17 	bl	8008d6c <HAL_GPIO_ReadPin>
 800713e:	4603      	mov	r3, r0
 8007140:	717b      	strb	r3, [r7, #5]
	buttonStates[2] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_7);
 8007142:	2180      	movs	r1, #128	; 0x80
 8007144:	4824      	ldr	r0, [pc, #144]	; (80071d8 <EXTI9_5_IRQHandler+0xb4>)
 8007146:	f001 fe11 	bl	8008d6c <HAL_GPIO_ReadPin>
 800714a:	4603      	mov	r3, r0
 800714c:	71bb      	strb	r3, [r7, #6]
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5)){ //up button
 800714e:	4b23      	ldr	r3, [pc, #140]	; (80071dc <EXTI9_5_IRQHandler+0xb8>)
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00c      	beq.n	8007174 <EXTI9_5_IRQHandler+0x50>
		if(inputButtonSet > buttonPriority.up){
 800715a:	4b21      	ldr	r3, [pc, #132]	; (80071e0 <EXTI9_5_IRQHandler+0xbc>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	4b20      	ldr	r3, [pc, #128]	; (80071e4 <EXTI9_5_IRQHandler+0xc0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	429a      	cmp	r2, r3
 8007166:	dd2a      	ble.n	80071be <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.up;
 8007168:	4b1e      	ldr	r3, [pc, #120]	; (80071e4 <EXTI9_5_IRQHandler+0xc0>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	b2da      	uxtb	r2, r3
 800716e:	4b1c      	ldr	r3, [pc, #112]	; (80071e0 <EXTI9_5_IRQHandler+0xbc>)
 8007170:	701a      	strb	r2, [r3, #0]
 8007172:	e024      	b.n	80071be <EXTI9_5_IRQHandler+0x9a>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6)){ //sel button
 8007174:	4b19      	ldr	r3, [pc, #100]	; (80071dc <EXTI9_5_IRQHandler+0xb8>)
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00c      	beq.n	800719a <EXTI9_5_IRQHandler+0x76>
		if(inputButtonSet > buttonPriority.sel){
 8007180:	4b17      	ldr	r3, [pc, #92]	; (80071e0 <EXTI9_5_IRQHandler+0xbc>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	461a      	mov	r2, r3
 8007186:	4b17      	ldr	r3, [pc, #92]	; (80071e4 <EXTI9_5_IRQHandler+0xc0>)
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	429a      	cmp	r2, r3
 800718c:	dd17      	ble.n	80071be <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.sel;
 800718e:	4b15      	ldr	r3, [pc, #84]	; (80071e4 <EXTI9_5_IRQHandler+0xc0>)
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	b2da      	uxtb	r2, r3
 8007194:	4b12      	ldr	r3, [pc, #72]	; (80071e0 <EXTI9_5_IRQHandler+0xbc>)
 8007196:	701a      	strb	r2, [r3, #0]
 8007198:	e011      	b.n	80071be <EXTI9_5_IRQHandler+0x9a>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7)){ //down button
 800719a:	4b10      	ldr	r3, [pc, #64]	; (80071dc <EXTI9_5_IRQHandler+0xb8>)
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00b      	beq.n	80071be <EXTI9_5_IRQHandler+0x9a>
		if(inputButtonSet > buttonPriority.down){
 80071a6:	4b0e      	ldr	r3, [pc, #56]	; (80071e0 <EXTI9_5_IRQHandler+0xbc>)
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	4b0d      	ldr	r3, [pc, #52]	; (80071e4 <EXTI9_5_IRQHandler+0xc0>)
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	dd04      	ble.n	80071be <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.down;
 80071b4:	4b0b      	ldr	r3, [pc, #44]	; (80071e4 <EXTI9_5_IRQHandler+0xc0>)
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	4b09      	ldr	r3, [pc, #36]	; (80071e0 <EXTI9_5_IRQHandler+0xbc>)
 80071bc:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80071be:	2020      	movs	r0, #32
 80071c0:	f001 fe20 	bl	8008e04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80071c4:	2040      	movs	r0, #64	; 0x40
 80071c6:	f001 fe1d 	bl	8008e04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80071ca:	2080      	movs	r0, #128	; 0x80
 80071cc:	f001 fe1a 	bl	8008e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80071d0:	bf00      	nop
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	40022800 	.word	0x40022800
 80071dc:	40013c00 	.word	0x40013c00
 80071e0:	200000bc 	.word	0x200000bc
 80071e4:	20000178 	.word	0x20000178

080071e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80071ec:	4802      	ldr	r0, [pc, #8]	; (80071f8 <TIM6_DAC_IRQHandler+0x10>)
 80071ee:	f004 fad6 	bl	800b79e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80071f2:	bf00      	nop
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	200240d0 	.word	0x200240d0

080071fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007200:	4805      	ldr	r0, [pc, #20]	; (8007218 <DMA2_Stream0_IRQHandler+0x1c>)
 8007202:	f001 f9a1 	bl	8008548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc1);
 8007206:	4805      	ldr	r0, [pc, #20]	; (800721c <DMA2_Stream0_IRQHandler+0x20>)
 8007208:	f000 fbe4 	bl	80079d4 <HAL_ADC_Stop_DMA>
  adcRestart[0]=1;
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <DMA2_Stream0_IRQHandler+0x24>)
 800720e:	2201      	movs	r2, #1
 8007210:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007212:	bf00      	nop
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20013318 	.word	0x20013318
 800721c:	20013284 	.word	0x20013284
 8007220:	20010ab0 	.word	0x20010ab0

08007224 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8007228:	4805      	ldr	r0, [pc, #20]	; (8007240 <DMA2_Stream1_IRQHandler+0x1c>)
 800722a:	f001 f98d 	bl	8008548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 800722e:	4805      	ldr	r0, [pc, #20]	; (8007244 <DMA2_Stream1_IRQHandler+0x20>)
 8007230:	f000 fbd0 	bl	80079d4 <HAL_ADC_Stop_DMA>
  adcRestart[2]=1;
 8007234:	4b04      	ldr	r3, [pc, #16]	; (8007248 <DMA2_Stream1_IRQHandler+0x24>)
 8007236:	2201      	movs	r2, #1
 8007238:	709a      	strb	r2, [r3, #2]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800723a:	bf00      	nop
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20010a50 	.word	0x20010a50
 8007244:	200132d0 	.word	0x200132d0
 8007248:	20010ab0 	.word	0x20010ab0

0800724c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007250:	4805      	ldr	r0, [pc, #20]	; (8007268 <DMA2_Stream2_IRQHandler+0x1c>)
 8007252:	f001 f979 	bl	8008548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc2);
 8007256:	4805      	ldr	r0, [pc, #20]	; (800726c <DMA2_Stream2_IRQHandler+0x20>)
 8007258:	f000 fbbc 	bl	80079d4 <HAL_ADC_Stop_DMA>
  adcRestart[1]=1;
 800725c:	4b04      	ldr	r3, [pc, #16]	; (8007270 <DMA2_Stream2_IRQHandler+0x24>)
 800725e:	2201      	movs	r2, #1
 8007260:	705a      	strb	r2, [r3, #1]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007262:	bf00      	nop
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20023fb4 	.word	0x20023fb4
 800726c:	2001056c 	.word	0x2001056c
 8007270:	20010ab0 	.word	0x20010ab0

08007274 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8007278:	4802      	ldr	r0, [pc, #8]	; (8007284 <SPI4_IRQHandler+0x10>)
 800727a:	f003 ffc9 	bl	800b210 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800727e:	bf00      	nop
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20010340 	.word	0x20010340

08007288 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007294:	2300      	movs	r3, #0
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	e00a      	b.n	80072b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800729a:	f3af 8000 	nop.w
 800729e:	4601      	mov	r1, r0
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	60ba      	str	r2, [r7, #8]
 80072a6:	b2ca      	uxtb	r2, r1
 80072a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	3301      	adds	r3, #1
 80072ae:	617b      	str	r3, [r7, #20]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	dbf0      	blt.n	800729a <_read+0x12>
	}

return len;
 80072b8:	687b      	ldr	r3, [r7, #4]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b086      	sub	sp, #24
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072ce:	2300      	movs	r3, #0
 80072d0:	617b      	str	r3, [r7, #20]
 80072d2:	e009      	b.n	80072e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	1c5a      	adds	r2, r3, #1
 80072d8:	60ba      	str	r2, [r7, #8]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fb fddd 	bl	8002e9c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	3301      	adds	r3, #1
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	dbf1      	blt.n	80072d4 <_write+0x12>
	}
	return len;
 80072f0:	687b      	ldr	r3, [r7, #4]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <_close>:

int _close(int file)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
	return -1;
 8007302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007306:	4618      	mov	r0, r3
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007312:	b480      	push	{r7}
 8007314:	b083      	sub	sp, #12
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007322:	605a      	str	r2, [r3, #4]
	return 0;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <_isatty>:

int _isatty(int file)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
	return 1;
 800733a:	2301      	movs	r3, #1
}
 800733c:	4618      	mov	r0, r3
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
	return 0;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
	...

08007364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800736c:	4a14      	ldr	r2, [pc, #80]	; (80073c0 <_sbrk+0x5c>)
 800736e:	4b15      	ldr	r3, [pc, #84]	; (80073c4 <_sbrk+0x60>)
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007378:	4b13      	ldr	r3, [pc, #76]	; (80073c8 <_sbrk+0x64>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d102      	bne.n	8007386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007380:	4b11      	ldr	r3, [pc, #68]	; (80073c8 <_sbrk+0x64>)
 8007382:	4a12      	ldr	r2, [pc, #72]	; (80073cc <_sbrk+0x68>)
 8007384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007386:	4b10      	ldr	r3, [pc, #64]	; (80073c8 <_sbrk+0x64>)
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4413      	add	r3, r2
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	429a      	cmp	r2, r3
 8007392:	d207      	bcs.n	80073a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007394:	f008 ff9a 	bl	80102cc <__errno>
 8007398:	4602      	mov	r2, r0
 800739a:	230c      	movs	r3, #12
 800739c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800739e:	f04f 33ff 	mov.w	r3, #4294967295
 80073a2:	e009      	b.n	80073b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80073a4:	4b08      	ldr	r3, [pc, #32]	; (80073c8 <_sbrk+0x64>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80073aa:	4b07      	ldr	r3, [pc, #28]	; (80073c8 <_sbrk+0x64>)
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4413      	add	r3, r2
 80073b2:	4a05      	ldr	r2, [pc, #20]	; (80073c8 <_sbrk+0x64>)
 80073b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80073b6:	68fb      	ldr	r3, [r7, #12]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	20080000 	.word	0x20080000
 80073c4:	00000400 	.word	0x00000400
 80073c8:	200032d4 	.word	0x200032d4
 80073cc:	20024158 	.word	0x20024158

080073d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80073d0:	b480      	push	{r7}
 80073d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073d4:	4b08      	ldr	r3, [pc, #32]	; (80073f8 <SystemInit+0x28>)
 80073d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073da:	4a07      	ldr	r2, [pc, #28]	; (80073f8 <SystemInit+0x28>)
 80073dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80073e4:	4b04      	ldr	r3, [pc, #16]	; (80073f8 <SystemInit+0x28>)
 80073e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80073ea:	609a      	str	r2, [r3, #8]
#endif
}
 80073ec:	bf00      	nop
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	e000ed00 	.word	0xe000ed00

080073fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80073fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007434 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007400:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007402:	e003      	b.n	800740c <LoopCopyDataInit>

08007404 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007404:	4b0c      	ldr	r3, [pc, #48]	; (8007438 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007406:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007408:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800740a:	3104      	adds	r1, #4

0800740c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800740c:	480b      	ldr	r0, [pc, #44]	; (800743c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800740e:	4b0c      	ldr	r3, [pc, #48]	; (8007440 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007410:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007412:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007414:	d3f6      	bcc.n	8007404 <CopyDataInit>
  ldr  r2, =_sbss
 8007416:	4a0b      	ldr	r2, [pc, #44]	; (8007444 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007418:	e002      	b.n	8007420 <LoopFillZerobss>

0800741a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800741a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800741c:	f842 3b04 	str.w	r3, [r2], #4

08007420 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007420:	4b09      	ldr	r3, [pc, #36]	; (8007448 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007422:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007424:	d3f9      	bcc.n	800741a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007426:	f7ff ffd3 	bl	80073d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800742a:	f008 ff55 	bl	80102d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800742e:	f7fa fc65 	bl	8001cfc <main>
  bx  lr    
 8007432:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007434:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8007438:	08015380 	.word	0x08015380
  ldr  r0, =_sdata
 800743c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007440:	20000368 	.word	0x20000368
  ldr  r2, =_sbss
 8007444:	20000368 	.word	0x20000368
  ldr  r3, = _ebss
 8007448:	20024158 	.word	0x20024158

0800744c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800744c:	e7fe      	b.n	800744c <CAN1_RX0_IRQHandler>

0800744e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007452:	2003      	movs	r0, #3
 8007454:	f000 fea3 	bl	800819e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007458:	2000      	movs	r0, #0
 800745a:	f7ff fdbf 	bl	8006fdc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800745e:	f7ff f81f 	bl	80064a0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800746c:	4b06      	ldr	r3, [pc, #24]	; (8007488 <HAL_IncTick+0x20>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	4b06      	ldr	r3, [pc, #24]	; (800748c <HAL_IncTick+0x24>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4413      	add	r3, r2
 8007478:	4a04      	ldr	r2, [pc, #16]	; (800748c <HAL_IncTick+0x24>)
 800747a:	6013      	str	r3, [r2, #0]
}
 800747c:	bf00      	nop
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	20000190 	.word	0x20000190
 800748c:	20024110 	.word	0x20024110

08007490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007490:	b480      	push	{r7}
 8007492:	af00      	add	r7, sp, #0
  return uwTick;
 8007494:	4b03      	ldr	r3, [pc, #12]	; (80074a4 <HAL_GetTick+0x14>)
 8007496:	681b      	ldr	r3, [r3, #0]
}
 8007498:	4618      	mov	r0, r3
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	20024110 	.word	0x20024110

080074a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80074b0:	f7ff ffee 	bl	8007490 <HAL_GetTick>
 80074b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c0:	d005      	beq.n	80074ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80074c2:	4b09      	ldr	r3, [pc, #36]	; (80074e8 <HAL_Delay+0x40>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4413      	add	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80074ce:	bf00      	nop
 80074d0:	f7ff ffde 	bl	8007490 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d8f7      	bhi.n	80074d0 <HAL_Delay+0x28>
  {
  }
}
 80074e0:	bf00      	nop
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	20000190 	.word	0x20000190

080074ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e031      	b.n	8007566 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	2b00      	cmp	r3, #0
 8007508:	d109      	bne.n	800751e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7fe fff0 	bl	80064f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007522:	f003 0310 	and.w	r3, r3, #16
 8007526:	2b00      	cmp	r3, #0
 8007528:	d116      	bne.n	8007558 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800752e:	4b10      	ldr	r3, [pc, #64]	; (8007570 <HAL_ADC_Init+0x84>)
 8007530:	4013      	ands	r3, r2
 8007532:	f043 0202 	orr.w	r2, r3, #2
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fbfc 	bl	8007d38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	f023 0303 	bic.w	r3, r3, #3
 800754e:	f043 0201 	orr.w	r2, r3, #1
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	641a      	str	r2, [r3, #64]	; 0x40
 8007556:	e001      	b.n	800755c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007564:	7bfb      	ldrb	r3, [r7, #15]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	ffffeefd 	.word	0xffffeefd

08007574 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	60fb      	str	r3, [r7, #12]
 8007580:	2300      	movs	r3, #0
 8007582:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b02      	cmp	r3, #2
 8007590:	bf0c      	ite	eq
 8007592:	2301      	moveq	r3, #1
 8007594:	2300      	movne	r3, #0
 8007596:	b2db      	uxtb	r3, r3
 8007598:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b20      	cmp	r3, #32
 80075a6:	bf0c      	ite	eq
 80075a8:	2301      	moveq	r3, #1
 80075aa:	2300      	movne	r3, #0
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d049      	beq.n	800764a <HAL_ADC_IRQHandler+0xd6>
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d046      	beq.n	800764a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c0:	f003 0310 	and.w	r3, r3, #16
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d105      	bne.n	80075d4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d12b      	bne.n	800763a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d127      	bne.n	800763a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d006      	beq.n	8007606 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007602:	2b00      	cmp	r3, #0
 8007604:	d119      	bne.n	800763a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0220 	bic.w	r2, r2, #32
 8007614:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d105      	bne.n	800763a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	f043 0201 	orr.w	r2, r3, #1
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7fc fbd6 	bl	8003dec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f06f 0212 	mvn.w	r2, #18
 8007648:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b04      	cmp	r3, #4
 8007656:	bf0c      	ite	eq
 8007658:	2301      	moveq	r3, #1
 800765a:	2300      	movne	r3, #0
 800765c:	b2db      	uxtb	r3, r3
 800765e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800766a:	2b80      	cmp	r3, #128	; 0x80
 800766c:	bf0c      	ite	eq
 800766e:	2301      	moveq	r3, #1
 8007670:	2300      	movne	r3, #0
 8007672:	b2db      	uxtb	r3, r3
 8007674:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d057      	beq.n	800772c <HAL_ADC_IRQHandler+0x1b8>
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d054      	beq.n	800772c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007686:	f003 0310 	and.w	r3, r3, #16
 800768a:	2b00      	cmp	r3, #0
 800768c:	d105      	bne.n	800769a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d139      	bne.n	800771c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d006      	beq.n	80076c4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d12b      	bne.n	800771c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d124      	bne.n	800771c <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d11d      	bne.n	800771c <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d119      	bne.n	800771c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770c:	2b00      	cmp	r3, #0
 800770e:	d105      	bne.n	800771c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007714:	f043 0201 	orr.w	r2, r3, #1
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fc87 	bl	8008030 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f06f 020c 	mvn.w	r2, #12
 800772a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b01      	cmp	r3, #1
 8007738:	bf0c      	ite	eq
 800773a:	2301      	moveq	r3, #1
 800773c:	2300      	movne	r3, #0
 800773e:	b2db      	uxtb	r3, r3
 8007740:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774c:	2b40      	cmp	r3, #64	; 0x40
 800774e:	bf0c      	ite	eq
 8007750:	2301      	moveq	r3, #1
 8007752:	2300      	movne	r3, #0
 8007754:	b2db      	uxtb	r3, r3
 8007756:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d017      	beq.n	800778e <HAL_ADC_IRQHandler+0x21a>
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d014      	beq.n	800778e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b01      	cmp	r3, #1
 8007770:	d10d      	bne.n	800778e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f97c 	bl	8007a7c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f06f 0201 	mvn.w	r2, #1
 800778c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0320 	and.w	r3, r3, #32
 8007798:	2b20      	cmp	r3, #32
 800779a:	bf0c      	ite	eq
 800779c:	2301      	moveq	r3, #1
 800779e:	2300      	movne	r3, #0
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077b2:	bf0c      	ite	eq
 80077b4:	2301      	moveq	r3, #1
 80077b6:	2300      	movne	r3, #0
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d015      	beq.n	80077ee <HAL_ADC_IRQHandler+0x27a>
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d012      	beq.n	80077ee <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077cc:	f043 0202 	orr.w	r2, r3, #2
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f06f 0220 	mvn.w	r2, #32
 80077dc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f956 	bl	8007a90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f06f 0220 	mvn.w	r2, #32
 80077ec:	601a      	str	r2, [r3, #0]
  }
}
 80077ee:	bf00      	nop
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800780e:	2b01      	cmp	r3, #1
 8007810:	d101      	bne.n	8007816 <HAL_ADC_Start_DMA+0x1e>
 8007812:	2302      	movs	r3, #2
 8007814:	e0c7      	b.n	80079a6 <HAL_ADC_Start_DMA+0x1ae>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b01      	cmp	r3, #1
 800782a:	d018      	beq.n	800785e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689a      	ldr	r2, [r3, #8]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0201 	orr.w	r2, r2, #1
 800783a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800783c:	4b5c      	ldr	r3, [pc, #368]	; (80079b0 <HAL_ADC_Start_DMA+0x1b8>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a5c      	ldr	r2, [pc, #368]	; (80079b4 <HAL_ADC_Start_DMA+0x1bc>)
 8007842:	fba2 2303 	umull	r2, r3, r2, r3
 8007846:	0c9a      	lsrs	r2, r3, #18
 8007848:	4613      	mov	r3, r2
 800784a:	005b      	lsls	r3, r3, #1
 800784c:	4413      	add	r3, r2
 800784e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8007850:	e002      	b.n	8007858 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	3b01      	subs	r3, #1
 8007856:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1f9      	bne.n	8007852 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b01      	cmp	r3, #1
 800786a:	f040 809b 	bne.w	80079a4 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007872:	4b51      	ldr	r3, [pc, #324]	; (80079b8 <HAL_ADC_Start_DMA+0x1c0>)
 8007874:	4013      	ands	r3, r2
 8007876:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007888:	2b00      	cmp	r3, #0
 800788a:	d007      	beq.n	800789c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007890:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007894:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a8:	d106      	bne.n	80078b8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ae:	f023 0206 	bic.w	r2, r3, #6
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	645a      	str	r2, [r3, #68]	; 0x44
 80078b6:	e002      	b.n	80078be <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ca:	4a3c      	ldr	r2, [pc, #240]	; (80079bc <HAL_ADC_Start_DMA+0x1c4>)
 80078cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d2:	4a3b      	ldr	r2, [pc, #236]	; (80079c0 <HAL_ADC_Start_DMA+0x1c8>)
 80078d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078da:	4a3a      	ldr	r2, [pc, #232]	; (80079c4 <HAL_ADC_Start_DMA+0x1cc>)
 80078dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80078e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80078f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007906:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	334c      	adds	r3, #76	; 0x4c
 8007912:	4619      	mov	r1, r3
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f000 fd24 	bl	8008364 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800791c:	4b2a      	ldr	r3, [pc, #168]	; (80079c8 <HAL_ADC_Start_DMA+0x1d0>)
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f003 031f 	and.w	r3, r3, #31
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10f      	bne.n	8007948 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d136      	bne.n	80079a4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	689a      	ldr	r2, [r3, #8]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007944:	609a      	str	r2, [r3, #8]
 8007946:	e02d      	b.n	80079a4 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a1f      	ldr	r2, [pc, #124]	; (80079cc <HAL_ADC_Start_DMA+0x1d4>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d10e      	bne.n	8007970 <HAL_ADC_Start_DMA+0x178>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d107      	bne.n	8007970 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689a      	ldr	r2, [r3, #8]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800796e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007970:	4b15      	ldr	r3, [pc, #84]	; (80079c8 <HAL_ADC_Start_DMA+0x1d0>)
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f003 0310 	and.w	r3, r3, #16
 8007978:	2b00      	cmp	r3, #0
 800797a:	d113      	bne.n	80079a4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a13      	ldr	r2, [pc, #76]	; (80079d0 <HAL_ADC_Start_DMA+0x1d8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d10e      	bne.n	80079a4 <HAL_ADC_Start_DMA+0x1ac>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d107      	bne.n	80079a4 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80079a2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	20000188 	.word	0x20000188
 80079b4:	431bde83 	.word	0x431bde83
 80079b8:	fffff8fe 	.word	0xfffff8fe
 80079bc:	08007f2d 	.word	0x08007f2d
 80079c0:	08007fe7 	.word	0x08007fe7
 80079c4:	08008003 	.word	0x08008003
 80079c8:	40012300 	.word	0x40012300
 80079cc:	40012000 	.word	0x40012000
 80079d0:	40012200 	.word	0x40012200

080079d4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d101      	bne.n	80079ee <HAL_ADC_Stop_DMA+0x1a>
 80079ea:	2302      	movs	r3, #2
 80079ec:	e036      	b.n	8007a5c <HAL_ADC_Stop_DMA+0x88>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0201 	bic.w	r2, r2, #1
 8007a04:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d11e      	bne.n	8007a52 <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689a      	ldr	r2, [r3, #8]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a22:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 fcfb 	bl	8008424 <HAL_DMA_Abort>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007a40:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a46:	4b07      	ldr	r3, [pc, #28]	; (8007a64 <HAL_ADC_Stop_DMA+0x90>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	f043 0201 	orr.w	r2, r3, #1
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	ffffeefe 	.word	0xffffeefe

08007a68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d101      	bne.n	8007ac0 <HAL_ADC_ConfigChannel+0x1c>
 8007abc:	2302      	movs	r3, #2
 8007abe:	e12a      	b.n	8007d16 <HAL_ADC_ConfigChannel+0x272>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b09      	cmp	r3, #9
 8007ace:	d93a      	bls.n	8007b46 <HAL_ADC_ConfigChannel+0xa2>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ad8:	d035      	beq.n	8007b46 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68d9      	ldr	r1, [r3, #12]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	4613      	mov	r3, r2
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	4413      	add	r3, r2
 8007aee:	3b1e      	subs	r3, #30
 8007af0:	2207      	movs	r2, #7
 8007af2:	fa02 f303 	lsl.w	r3, r2, r3
 8007af6:	43da      	mvns	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	400a      	ands	r2, r1
 8007afe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a87      	ldr	r2, [pc, #540]	; (8007d24 <HAL_ADC_ConfigChannel+0x280>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d10a      	bne.n	8007b20 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68d9      	ldr	r1, [r3, #12]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	061a      	lsls	r2, r3, #24
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b1e:	e035      	b.n	8007b8c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68d9      	ldr	r1, [r3, #12]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	689a      	ldr	r2, [r3, #8]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	4618      	mov	r0, r3
 8007b32:	4603      	mov	r3, r0
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	4403      	add	r3, r0
 8007b38:	3b1e      	subs	r3, #30
 8007b3a:	409a      	lsls	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	430a      	orrs	r2, r1
 8007b42:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b44:	e022      	b.n	8007b8c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6919      	ldr	r1, [r3, #16]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	461a      	mov	r2, r3
 8007b54:	4613      	mov	r3, r2
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	4413      	add	r3, r2
 8007b5a:	2207      	movs	r2, #7
 8007b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b60:	43da      	mvns	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	400a      	ands	r2, r1
 8007b68:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6919      	ldr	r1, [r3, #16]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	005b      	lsls	r3, r3, #1
 8007b80:	4403      	add	r3, r0
 8007b82:	409a      	lsls	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	2b06      	cmp	r3, #6
 8007b92:	d824      	bhi.n	8007bde <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	3b05      	subs	r3, #5
 8007ba6:	221f      	movs	r2, #31
 8007ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bac:	43da      	mvns	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	400a      	ands	r2, r1
 8007bb4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	3b05      	subs	r3, #5
 8007bd0:	fa00 f203 	lsl.w	r2, r0, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	635a      	str	r2, [r3, #52]	; 0x34
 8007bdc:	e04c      	b.n	8007c78 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	2b0c      	cmp	r3, #12
 8007be4:	d824      	bhi.n	8007c30 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	3b23      	subs	r3, #35	; 0x23
 8007bf8:	221f      	movs	r2, #31
 8007bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfe:	43da      	mvns	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	400a      	ands	r2, r1
 8007c06:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	4618      	mov	r0, r3
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	3b23      	subs	r3, #35	; 0x23
 8007c22:	fa00 f203 	lsl.w	r2, r0, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	631a      	str	r2, [r3, #48]	; 0x30
 8007c2e:	e023      	b.n	8007c78 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	3b41      	subs	r3, #65	; 0x41
 8007c42:	221f      	movs	r2, #31
 8007c44:	fa02 f303 	lsl.w	r3, r2, r3
 8007c48:	43da      	mvns	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	400a      	ands	r2, r1
 8007c50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	4618      	mov	r0, r3
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	4613      	mov	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	3b41      	subs	r3, #65	; 0x41
 8007c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a2a      	ldr	r2, [pc, #168]	; (8007d28 <HAL_ADC_ConfigChannel+0x284>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d10a      	bne.n	8007c98 <HAL_ADC_ConfigChannel+0x1f4>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c8a:	d105      	bne.n	8007c98 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007c8c:	4b27      	ldr	r3, [pc, #156]	; (8007d2c <HAL_ADC_ConfigChannel+0x288>)
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	4a26      	ldr	r2, [pc, #152]	; (8007d2c <HAL_ADC_ConfigChannel+0x288>)
 8007c92:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007c96:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a22      	ldr	r2, [pc, #136]	; (8007d28 <HAL_ADC_ConfigChannel+0x284>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d109      	bne.n	8007cb6 <HAL_ADC_ConfigChannel+0x212>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b12      	cmp	r3, #18
 8007ca8:	d105      	bne.n	8007cb6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8007caa:	4b20      	ldr	r3, [pc, #128]	; (8007d2c <HAL_ADC_ConfigChannel+0x288>)
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	4a1f      	ldr	r2, [pc, #124]	; (8007d2c <HAL_ADC_ConfigChannel+0x288>)
 8007cb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007cb4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a1b      	ldr	r2, [pc, #108]	; (8007d28 <HAL_ADC_ConfigChannel+0x284>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d125      	bne.n	8007d0c <HAL_ADC_ConfigChannel+0x268>
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a17      	ldr	r2, [pc, #92]	; (8007d24 <HAL_ADC_ConfigChannel+0x280>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d003      	beq.n	8007cd2 <HAL_ADC_ConfigChannel+0x22e>
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b11      	cmp	r3, #17
 8007cd0:	d11c      	bne.n	8007d0c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007cd2:	4b16      	ldr	r3, [pc, #88]	; (8007d2c <HAL_ADC_ConfigChannel+0x288>)
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	4a15      	ldr	r2, [pc, #84]	; (8007d2c <HAL_ADC_ConfigChannel+0x288>)
 8007cd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007cdc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a10      	ldr	r2, [pc, #64]	; (8007d24 <HAL_ADC_ConfigChannel+0x280>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d111      	bne.n	8007d0c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007ce8:	4b11      	ldr	r3, [pc, #68]	; (8007d30 <HAL_ADC_ConfigChannel+0x28c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a11      	ldr	r2, [pc, #68]	; (8007d34 <HAL_ADC_ConfigChannel+0x290>)
 8007cee:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf2:	0c9a      	lsrs	r2, r3, #18
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007cfe:	e002      	b.n	8007d06 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1f9      	bne.n	8007d00 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	10000012 	.word	0x10000012
 8007d28:	40012000 	.word	0x40012000
 8007d2c:	40012300 	.word	0x40012300
 8007d30:	20000188 	.word	0x20000188
 8007d34:	431bde83 	.word	0x431bde83

08007d38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007d40:	4b78      	ldr	r3, [pc, #480]	; (8007f24 <ADC_Init+0x1ec>)
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	4a77      	ldr	r2, [pc, #476]	; (8007f24 <ADC_Init+0x1ec>)
 8007d46:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007d4a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007d4c:	4b75      	ldr	r3, [pc, #468]	; (8007f24 <ADC_Init+0x1ec>)
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	4973      	ldr	r1, [pc, #460]	; (8007f24 <ADC_Init+0x1ec>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6859      	ldr	r1, [r3, #4]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	021a      	lsls	r2, r3, #8
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007d8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6859      	ldr	r1, [r3, #4]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689a      	ldr	r2, [r3, #8]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	689a      	ldr	r2, [r3, #8]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6899      	ldr	r1, [r3, #8]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68da      	ldr	r2, [r3, #12]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc6:	4a58      	ldr	r2, [pc, #352]	; (8007f28 <ADC_Init+0x1f0>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d022      	beq.n	8007e12 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689a      	ldr	r2, [r3, #8]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007dda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6899      	ldr	r1, [r3, #8]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007dfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6899      	ldr	r1, [r3, #8]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	609a      	str	r2, [r3, #8]
 8007e10:	e00f      	b.n	8007e32 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689a      	ldr	r2, [r3, #8]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007e30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	689a      	ldr	r2, [r3, #8]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f022 0202 	bic.w	r2, r2, #2
 8007e40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6899      	ldr	r1, [r3, #8]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	005a      	lsls	r2, r3, #1
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d01b      	beq.n	8007e98 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007e7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6859      	ldr	r1, [r3, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	035a      	lsls	r2, r3, #13
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	605a      	str	r2, [r3, #4]
 8007e96:	e007      	b.n	8007ea8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ea6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	051a      	lsls	r2, r3, #20
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689a      	ldr	r2, [r3, #8]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007edc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6899      	ldr	r1, [r3, #8]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007eea:	025a      	lsls	r2, r3, #9
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689a      	ldr	r2, [r3, #8]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6899      	ldr	r1, [r3, #8]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	029a      	lsls	r2, r3, #10
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	609a      	str	r2, [r3, #8]
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	40012300 	.word	0x40012300
 8007f28:	0f000001 	.word	0x0f000001

08007f2c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f38:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d13c      	bne.n	8007fc0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d12b      	bne.n	8007fb8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d127      	bne.n	8007fb8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d006      	beq.n	8007f84 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d119      	bne.n	8007fb8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 0220 	bic.w	r2, r2, #32
 8007f92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d105      	bne.n	8007fb8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb0:	f043 0201 	orr.w	r2, r3, #1
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f7fb ff17 	bl	8003dec <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007fbe:	e00e      	b.n	8007fde <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc4:	f003 0310 	and.w	r3, r3, #16
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d003      	beq.n	8007fd4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff fd5f 	bl	8007a90 <HAL_ADC_ErrorCallback>
}
 8007fd2:	e004      	b.n	8007fde <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	4798      	blx	r3
}
 8007fde:	bf00      	nop
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f7ff fd37 	bl	8007a68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007ffa:	bf00      	nop
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2240      	movs	r2, #64	; 0x40
 8008014:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800801a:	f043 0204 	orr.w	r2, r3, #4
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f7ff fd34 	bl	8007a90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008028:	bf00      	nop
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008054:	4b0b      	ldr	r3, [pc, #44]	; (8008084 <__NVIC_SetPriorityGrouping+0x40>)
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008060:	4013      	ands	r3, r2
 8008062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800806c:	4b06      	ldr	r3, [pc, #24]	; (8008088 <__NVIC_SetPriorityGrouping+0x44>)
 800806e:	4313      	orrs	r3, r2
 8008070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008072:	4a04      	ldr	r2, [pc, #16]	; (8008084 <__NVIC_SetPriorityGrouping+0x40>)
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	60d3      	str	r3, [r2, #12]
}
 8008078:	bf00      	nop
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr
 8008084:	e000ed00 	.word	0xe000ed00
 8008088:	05fa0000 	.word	0x05fa0000

0800808c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800808c:	b480      	push	{r7}
 800808e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008090:	4b04      	ldr	r3, [pc, #16]	; (80080a4 <__NVIC_GetPriorityGrouping+0x18>)
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	0a1b      	lsrs	r3, r3, #8
 8008096:	f003 0307 	and.w	r3, r3, #7
}
 800809a:	4618      	mov	r0, r3
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	e000ed00 	.word	0xe000ed00

080080a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	db0b      	blt.n	80080d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080ba:	79fb      	ldrb	r3, [r7, #7]
 80080bc:	f003 021f 	and.w	r2, r3, #31
 80080c0:	4907      	ldr	r1, [pc, #28]	; (80080e0 <__NVIC_EnableIRQ+0x38>)
 80080c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080c6:	095b      	lsrs	r3, r3, #5
 80080c8:	2001      	movs	r0, #1
 80080ca:	fa00 f202 	lsl.w	r2, r0, r2
 80080ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80080d2:	bf00      	nop
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	e000e100 	.word	0xe000e100

080080e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	4603      	mov	r3, r0
 80080ec:	6039      	str	r1, [r7, #0]
 80080ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	db0a      	blt.n	800810e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	490c      	ldr	r1, [pc, #48]	; (8008130 <__NVIC_SetPriority+0x4c>)
 80080fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008102:	0112      	lsls	r2, r2, #4
 8008104:	b2d2      	uxtb	r2, r2
 8008106:	440b      	add	r3, r1
 8008108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800810c:	e00a      	b.n	8008124 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	b2da      	uxtb	r2, r3
 8008112:	4908      	ldr	r1, [pc, #32]	; (8008134 <__NVIC_SetPriority+0x50>)
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	f003 030f 	and.w	r3, r3, #15
 800811a:	3b04      	subs	r3, #4
 800811c:	0112      	lsls	r2, r2, #4
 800811e:	b2d2      	uxtb	r2, r2
 8008120:	440b      	add	r3, r1
 8008122:	761a      	strb	r2, [r3, #24]
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	e000e100 	.word	0xe000e100
 8008134:	e000ed00 	.word	0xe000ed00

08008138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008138:	b480      	push	{r7}
 800813a:	b089      	sub	sp, #36	; 0x24
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f003 0307 	and.w	r3, r3, #7
 800814a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	f1c3 0307 	rsb	r3, r3, #7
 8008152:	2b04      	cmp	r3, #4
 8008154:	bf28      	it	cs
 8008156:	2304      	movcs	r3, #4
 8008158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	3304      	adds	r3, #4
 800815e:	2b06      	cmp	r3, #6
 8008160:	d902      	bls.n	8008168 <NVIC_EncodePriority+0x30>
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	3b03      	subs	r3, #3
 8008166:	e000      	b.n	800816a <NVIC_EncodePriority+0x32>
 8008168:	2300      	movs	r3, #0
 800816a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800816c:	f04f 32ff 	mov.w	r2, #4294967295
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	fa02 f303 	lsl.w	r3, r2, r3
 8008176:	43da      	mvns	r2, r3
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	401a      	ands	r2, r3
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008180:	f04f 31ff 	mov.w	r1, #4294967295
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	fa01 f303 	lsl.w	r3, r1, r3
 800818a:	43d9      	mvns	r1, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008190:	4313      	orrs	r3, r2
         );
}
 8008192:	4618      	mov	r0, r3
 8008194:	3724      	adds	r7, #36	; 0x24
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff ff4c 	bl	8008044 <__NVIC_SetPriorityGrouping>
}
 80081ac:	bf00      	nop
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	4603      	mov	r3, r0
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80081c2:	2300      	movs	r3, #0
 80081c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80081c6:	f7ff ff61 	bl	800808c <__NVIC_GetPriorityGrouping>
 80081ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	68b9      	ldr	r1, [r7, #8]
 80081d0:	6978      	ldr	r0, [r7, #20]
 80081d2:	f7ff ffb1 	bl	8008138 <NVIC_EncodePriority>
 80081d6:	4602      	mov	r2, r0
 80081d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081dc:	4611      	mov	r1, r2
 80081de:	4618      	mov	r0, r3
 80081e0:	f7ff ff80 	bl	80080e4 <__NVIC_SetPriority>
}
 80081e4:	bf00      	nop
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4603      	mov	r3, r0
 80081f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80081f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7ff ff54 	bl	80080a8 <__NVIC_EnableIRQ>
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008214:	f7ff f93c 	bl	8007490 <HAL_GetTick>
 8008218:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e099      	b.n	8008358 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2202      	movs	r2, #2
 8008230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f022 0201 	bic.w	r2, r2, #1
 8008242:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008244:	e00f      	b.n	8008266 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008246:	f7ff f923 	bl	8007490 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	2b05      	cmp	r3, #5
 8008252:	d908      	bls.n	8008266 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2203      	movs	r2, #3
 800825e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e078      	b.n	8008358 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1e8      	bne.n	8008246 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	4b38      	ldr	r3, [pc, #224]	; (8008360 <HAL_DMA_Init+0x158>)
 8008280:	4013      	ands	r3, r2
 8008282:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685a      	ldr	r2, [r3, #4]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008292:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800829e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d107      	bne.n	80082d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c8:	4313      	orrs	r3, r2
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f023 0307 	bic.w	r3, r3, #7
 80082e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	d117      	bne.n	800832a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	4313      	orrs	r3, r2
 8008302:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00e      	beq.n	800832a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fb09 	bl	8008924 <DMA_CheckFifoParam>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d008      	beq.n	800832a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2240      	movs	r2, #64	; 0x40
 800831c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008326:	2301      	movs	r3, #1
 8008328:	e016      	b.n	8008358 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fac0 	bl	80088b8 <DMA_CalcBaseAndBitshift>
 8008338:	4603      	mov	r3, r0
 800833a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008340:	223f      	movs	r2, #63	; 0x3f
 8008342:	409a      	lsls	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	e010803f 	.word	0xe010803f

08008364 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008382:	2b01      	cmp	r3, #1
 8008384:	d101      	bne.n	800838a <HAL_DMA_Start_IT+0x26>
 8008386:	2302      	movs	r3, #2
 8008388:	e048      	b.n	800841c <HAL_DMA_Start_IT+0xb8>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b01      	cmp	r3, #1
 800839c:	d137      	bne.n	800840e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2202      	movs	r2, #2
 80083a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	68b9      	ldr	r1, [r7, #8]
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f000 fa52 	bl	800885c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083bc:	223f      	movs	r2, #63	; 0x3f
 80083be:	409a      	lsls	r2, r3
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f042 0216 	orr.w	r2, r2, #22
 80083d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	695a      	ldr	r2, [r3, #20]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083e2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d007      	beq.n	80083fc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f042 0208 	orr.w	r2, r2, #8
 80083fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f042 0201 	orr.w	r2, r2, #1
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	e005      	b.n	800841a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008416:	2302      	movs	r3, #2
 8008418:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800841a:	7dfb      	ldrb	r3, [r7, #23]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008430:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008432:	f7ff f82d 	bl	8007490 <HAL_GetTick>
 8008436:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d008      	beq.n	8008456 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2280      	movs	r2, #128	; 0x80
 8008448:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e052      	b.n	80084fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 0216 	bic.w	r2, r2, #22
 8008464:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	695a      	ldr	r2, [r3, #20]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008474:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847a:	2b00      	cmp	r3, #0
 800847c:	d103      	bne.n	8008486 <HAL_DMA_Abort+0x62>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008482:	2b00      	cmp	r3, #0
 8008484:	d007      	beq.n	8008496 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 0208 	bic.w	r2, r2, #8
 8008494:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 0201 	bic.w	r2, r2, #1
 80084a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084a6:	e013      	b.n	80084d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80084a8:	f7fe fff2 	bl	8007490 <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	2b05      	cmp	r3, #5
 80084b4:	d90c      	bls.n	80084d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2220      	movs	r2, #32
 80084ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2203      	movs	r2, #3
 80084c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e015      	b.n	80084fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1e4      	bne.n	80084a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e2:	223f      	movs	r2, #63	; 0x3f
 80084e4:	409a      	lsls	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b02      	cmp	r3, #2
 8008516:	d004      	beq.n	8008522 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2280      	movs	r2, #128	; 0x80
 800851c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e00c      	b.n	800853c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2205      	movs	r2, #5
 8008526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 0201 	bic.w	r2, r2, #1
 8008538:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008554:	4b92      	ldr	r3, [pc, #584]	; (80087a0 <HAL_DMA_IRQHandler+0x258>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a92      	ldr	r2, [pc, #584]	; (80087a4 <HAL_DMA_IRQHandler+0x25c>)
 800855a:	fba2 2303 	umull	r2, r3, r2, r3
 800855e:	0a9b      	lsrs	r3, r3, #10
 8008560:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008566:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008572:	2208      	movs	r2, #8
 8008574:	409a      	lsls	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	4013      	ands	r3, r2
 800857a:	2b00      	cmp	r3, #0
 800857c:	d01a      	beq.n	80085b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b00      	cmp	r3, #0
 800858a:	d013      	beq.n	80085b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0204 	bic.w	r2, r2, #4
 800859a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085a0:	2208      	movs	r2, #8
 80085a2:	409a      	lsls	r2, r3
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ac:	f043 0201 	orr.w	r2, r3, #1
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b8:	2201      	movs	r2, #1
 80085ba:	409a      	lsls	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4013      	ands	r3, r2
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d012      	beq.n	80085ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00b      	beq.n	80085ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d6:	2201      	movs	r2, #1
 80085d8:	409a      	lsls	r2, r3
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e2:	f043 0202 	orr.w	r2, r3, #2
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085ee:	2204      	movs	r2, #4
 80085f0:	409a      	lsls	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	4013      	ands	r3, r2
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d012      	beq.n	8008620 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0302 	and.w	r3, r3, #2
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00b      	beq.n	8008620 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800860c:	2204      	movs	r2, #4
 800860e:	409a      	lsls	r2, r3
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008618:	f043 0204 	orr.w	r2, r3, #4
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008624:	2210      	movs	r2, #16
 8008626:	409a      	lsls	r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	4013      	ands	r3, r2
 800862c:	2b00      	cmp	r3, #0
 800862e:	d043      	beq.n	80086b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0308 	and.w	r3, r3, #8
 800863a:	2b00      	cmp	r3, #0
 800863c:	d03c      	beq.n	80086b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008642:	2210      	movs	r2, #16
 8008644:	409a      	lsls	r2, r3
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d018      	beq.n	800868a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d108      	bne.n	8008678 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866a:	2b00      	cmp	r3, #0
 800866c:	d024      	beq.n	80086b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	4798      	blx	r3
 8008676:	e01f      	b.n	80086b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800867c:	2b00      	cmp	r3, #0
 800867e:	d01b      	beq.n	80086b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	4798      	blx	r3
 8008688:	e016      	b.n	80086b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008694:	2b00      	cmp	r3, #0
 8008696:	d107      	bne.n	80086a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 0208 	bic.w	r2, r2, #8
 80086a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086bc:	2220      	movs	r2, #32
 80086be:	409a      	lsls	r2, r3
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	4013      	ands	r3, r2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 808e 	beq.w	80087e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0310 	and.w	r3, r3, #16
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 8086 	beq.w	80087e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086de:	2220      	movs	r2, #32
 80086e0:	409a      	lsls	r2, r3
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b05      	cmp	r3, #5
 80086f0:	d136      	bne.n	8008760 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f022 0216 	bic.w	r2, r2, #22
 8008700:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	695a      	ldr	r2, [r3, #20]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008710:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008716:	2b00      	cmp	r3, #0
 8008718:	d103      	bne.n	8008722 <HAL_DMA_IRQHandler+0x1da>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800871e:	2b00      	cmp	r3, #0
 8008720:	d007      	beq.n	8008732 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 0208 	bic.w	r2, r2, #8
 8008730:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008736:	223f      	movs	r2, #63	; 0x3f
 8008738:	409a      	lsls	r2, r3
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008752:	2b00      	cmp	r3, #0
 8008754:	d07d      	beq.n	8008852 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	4798      	blx	r3
        }
        return;
 800875e:	e078      	b.n	8008852 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d01c      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d108      	bne.n	800878e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008780:	2b00      	cmp	r3, #0
 8008782:	d030      	beq.n	80087e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	4798      	blx	r3
 800878c:	e02b      	b.n	80087e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008792:	2b00      	cmp	r3, #0
 8008794:	d027      	beq.n	80087e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	4798      	blx	r3
 800879e:	e022      	b.n	80087e6 <HAL_DMA_IRQHandler+0x29e>
 80087a0:	20000188 	.word	0x20000188
 80087a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10f      	bne.n	80087d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f022 0210 	bic.w	r2, r2, #16
 80087c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d003      	beq.n	80087e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d032      	beq.n	8008854 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d022      	beq.n	8008840 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2205      	movs	r2, #5
 80087fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0201 	bic.w	r2, r2, #1
 8008810:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	3301      	adds	r3, #1
 8008816:	60bb      	str	r3, [r7, #8]
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	429a      	cmp	r2, r3
 800881c:	d307      	bcc.n	800882e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1f2      	bne.n	8008812 <HAL_DMA_IRQHandler+0x2ca>
 800882c:	e000      	b.n	8008830 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800882e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008844:	2b00      	cmp	r3, #0
 8008846:	d005      	beq.n	8008854 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	4798      	blx	r3
 8008850:	e000      	b.n	8008854 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008852:	bf00      	nop
    }
  }
}
 8008854:	3718      	adds	r7, #24
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop

0800885c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008878:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	2b40      	cmp	r3, #64	; 0x40
 8008888:	d108      	bne.n	800889c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800889a:	e007      	b.n	80088ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	60da      	str	r2, [r3, #12]
}
 80088ac:	bf00      	nop
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	3b10      	subs	r3, #16
 80088c8:	4a13      	ldr	r2, [pc, #76]	; (8008918 <DMA_CalcBaseAndBitshift+0x60>)
 80088ca:	fba2 2303 	umull	r2, r3, r2, r3
 80088ce:	091b      	lsrs	r3, r3, #4
 80088d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80088d2:	4a12      	ldr	r2, [pc, #72]	; (800891c <DMA_CalcBaseAndBitshift+0x64>)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4413      	add	r3, r2
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	d908      	bls.n	80088f8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	461a      	mov	r2, r3
 80088ec:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <DMA_CalcBaseAndBitshift+0x68>)
 80088ee:	4013      	ands	r3, r2
 80088f0:	1d1a      	adds	r2, r3, #4
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	659a      	str	r2, [r3, #88]	; 0x58
 80088f6:	e006      	b.n	8008906 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	461a      	mov	r2, r3
 80088fe:	4b08      	ldr	r3, [pc, #32]	; (8008920 <DMA_CalcBaseAndBitshift+0x68>)
 8008900:	4013      	ands	r3, r2
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800890a:	4618      	mov	r0, r3
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	aaaaaaab 	.word	0xaaaaaaab
 800891c:	08015048 	.word	0x08015048
 8008920:	fffffc00 	.word	0xfffffc00

08008924 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008934:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d11f      	bne.n	800897e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	2b03      	cmp	r3, #3
 8008942:	d855      	bhi.n	80089f0 <DMA_CheckFifoParam+0xcc>
 8008944:	a201      	add	r2, pc, #4	; (adr r2, 800894c <DMA_CheckFifoParam+0x28>)
 8008946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894a:	bf00      	nop
 800894c:	0800895d 	.word	0x0800895d
 8008950:	0800896f 	.word	0x0800896f
 8008954:	0800895d 	.word	0x0800895d
 8008958:	080089f1 	.word	0x080089f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d045      	beq.n	80089f4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800896c:	e042      	b.n	80089f4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008972:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008976:	d13f      	bne.n	80089f8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800897c:	e03c      	b.n	80089f8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008986:	d121      	bne.n	80089cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2b03      	cmp	r3, #3
 800898c:	d836      	bhi.n	80089fc <DMA_CheckFifoParam+0xd8>
 800898e:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <DMA_CheckFifoParam+0x70>)
 8008990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008994:	080089a5 	.word	0x080089a5
 8008998:	080089ab 	.word	0x080089ab
 800899c:	080089a5 	.word	0x080089a5
 80089a0:	080089bd 	.word	0x080089bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	73fb      	strb	r3, [r7, #15]
      break;
 80089a8:	e02f      	b.n	8008a0a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d024      	beq.n	8008a00 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089ba:	e021      	b.n	8008a00 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80089c4:	d11e      	bne.n	8008a04 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80089ca:	e01b      	b.n	8008a04 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d902      	bls.n	80089d8 <DMA_CheckFifoParam+0xb4>
 80089d2:	2b03      	cmp	r3, #3
 80089d4:	d003      	beq.n	80089de <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80089d6:	e018      	b.n	8008a0a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	73fb      	strb	r3, [r7, #15]
      break;
 80089dc:	e015      	b.n	8008a0a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00e      	beq.n	8008a08 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	73fb      	strb	r3, [r7, #15]
      break;
 80089ee:	e00b      	b.n	8008a08 <DMA_CheckFifoParam+0xe4>
      break;
 80089f0:	bf00      	nop
 80089f2:	e00a      	b.n	8008a0a <DMA_CheckFifoParam+0xe6>
      break;
 80089f4:	bf00      	nop
 80089f6:	e008      	b.n	8008a0a <DMA_CheckFifoParam+0xe6>
      break;
 80089f8:	bf00      	nop
 80089fa:	e006      	b.n	8008a0a <DMA_CheckFifoParam+0xe6>
      break;
 80089fc:	bf00      	nop
 80089fe:	e004      	b.n	8008a0a <DMA_CheckFifoParam+0xe6>
      break;
 8008a00:	bf00      	nop
 8008a02:	e002      	b.n	8008a0a <DMA_CheckFifoParam+0xe6>
      break;   
 8008a04:	bf00      	nop
 8008a06:	e000      	b.n	8008a0a <DMA_CheckFifoParam+0xe6>
      break;
 8008a08:	bf00      	nop
    }
  } 
  
  return status; 
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b089      	sub	sp, #36	; 0x24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008a22:	2300      	movs	r3, #0
 8008a24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008a26:	2300      	movs	r3, #0
 8008a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008a32:	2300      	movs	r3, #0
 8008a34:	61fb      	str	r3, [r7, #28]
 8008a36:	e175      	b.n	8008d24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008a38:	2201      	movs	r2, #1
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	4013      	ands	r3, r2
 8008a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	f040 8164 	bne.w	8008d1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d00b      	beq.n	8008a76 <HAL_GPIO_Init+0x5e>
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d007      	beq.n	8008a76 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a6a:	2b11      	cmp	r3, #17
 8008a6c:	d003      	beq.n	8008a76 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	2b12      	cmp	r3, #18
 8008a74:	d130      	bne.n	8008ad8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	2203      	movs	r2, #3
 8008a82:	fa02 f303 	lsl.w	r3, r2, r3
 8008a86:	43db      	mvns	r3, r3
 8008a88:	69ba      	ldr	r2, [r7, #24]
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	68da      	ldr	r2, [r3, #12]
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	005b      	lsls	r3, r3, #1
 8008a96:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	69ba      	ldr	r2, [r7, #24]
 8008aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008aac:	2201      	movs	r2, #1
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab4:	43db      	mvns	r3, r3
 8008ab6:	69ba      	ldr	r2, [r7, #24]
 8008ab8:	4013      	ands	r3, r2
 8008aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	091b      	lsrs	r3, r3, #4
 8008ac2:	f003 0201 	and.w	r2, r3, #1
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	005b      	lsls	r3, r3, #1
 8008ae2:	2203      	movs	r2, #3
 8008ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae8:	43db      	mvns	r3, r3
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	4013      	ands	r3, r2
 8008aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	005b      	lsls	r3, r3, #1
 8008af8:	fa02 f303 	lsl.w	r3, r2, r3
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	69ba      	ldr	r2, [r7, #24]
 8008b06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d003      	beq.n	8008b18 <HAL_GPIO_Init+0x100>
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	2b12      	cmp	r3, #18
 8008b16:	d123      	bne.n	8008b60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	08da      	lsrs	r2, r3, #3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3208      	adds	r2, #8
 8008b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	f003 0307 	and.w	r3, r3, #7
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	220f      	movs	r2, #15
 8008b30:	fa02 f303 	lsl.w	r3, r2, r3
 8008b34:	43db      	mvns	r3, r3
 8008b36:	69ba      	ldr	r2, [r7, #24]
 8008b38:	4013      	ands	r3, r2
 8008b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	691a      	ldr	r2, [r3, #16]
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4c:	69ba      	ldr	r2, [r7, #24]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	08da      	lsrs	r2, r3, #3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	3208      	adds	r2, #8
 8008b5a:	69b9      	ldr	r1, [r7, #24]
 8008b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	005b      	lsls	r3, r3, #1
 8008b6a:	2203      	movs	r2, #3
 8008b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b70:	43db      	mvns	r3, r3
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	4013      	ands	r3, r2
 8008b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	f003 0203 	and.w	r2, r3, #3
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	005b      	lsls	r3, r3, #1
 8008b84:	fa02 f303 	lsl.w	r3, r2, r3
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	69ba      	ldr	r2, [r7, #24]
 8008b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 80be 	beq.w	8008d1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ba2:	4b65      	ldr	r3, [pc, #404]	; (8008d38 <HAL_GPIO_Init+0x320>)
 8008ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ba6:	4a64      	ldr	r2, [pc, #400]	; (8008d38 <HAL_GPIO_Init+0x320>)
 8008ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bac:	6453      	str	r3, [r2, #68]	; 0x44
 8008bae:	4b62      	ldr	r3, [pc, #392]	; (8008d38 <HAL_GPIO_Init+0x320>)
 8008bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008bba:	4a60      	ldr	r2, [pc, #384]	; (8008d3c <HAL_GPIO_Init+0x324>)
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	089b      	lsrs	r3, r3, #2
 8008bc0:	3302      	adds	r3, #2
 8008bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	220f      	movs	r2, #15
 8008bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd6:	43db      	mvns	r3, r3
 8008bd8:	69ba      	ldr	r2, [r7, #24]
 8008bda:	4013      	ands	r3, r2
 8008bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a57      	ldr	r2, [pc, #348]	; (8008d40 <HAL_GPIO_Init+0x328>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d037      	beq.n	8008c56 <HAL_GPIO_Init+0x23e>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a56      	ldr	r2, [pc, #344]	; (8008d44 <HAL_GPIO_Init+0x32c>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d031      	beq.n	8008c52 <HAL_GPIO_Init+0x23a>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a55      	ldr	r2, [pc, #340]	; (8008d48 <HAL_GPIO_Init+0x330>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d02b      	beq.n	8008c4e <HAL_GPIO_Init+0x236>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a54      	ldr	r2, [pc, #336]	; (8008d4c <HAL_GPIO_Init+0x334>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d025      	beq.n	8008c4a <HAL_GPIO_Init+0x232>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a53      	ldr	r2, [pc, #332]	; (8008d50 <HAL_GPIO_Init+0x338>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d01f      	beq.n	8008c46 <HAL_GPIO_Init+0x22e>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a52      	ldr	r2, [pc, #328]	; (8008d54 <HAL_GPIO_Init+0x33c>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d019      	beq.n	8008c42 <HAL_GPIO_Init+0x22a>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a51      	ldr	r2, [pc, #324]	; (8008d58 <HAL_GPIO_Init+0x340>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d013      	beq.n	8008c3e <HAL_GPIO_Init+0x226>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a50      	ldr	r2, [pc, #320]	; (8008d5c <HAL_GPIO_Init+0x344>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d00d      	beq.n	8008c3a <HAL_GPIO_Init+0x222>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a4f      	ldr	r2, [pc, #316]	; (8008d60 <HAL_GPIO_Init+0x348>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d007      	beq.n	8008c36 <HAL_GPIO_Init+0x21e>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a4e      	ldr	r2, [pc, #312]	; (8008d64 <HAL_GPIO_Init+0x34c>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d101      	bne.n	8008c32 <HAL_GPIO_Init+0x21a>
 8008c2e:	2309      	movs	r3, #9
 8008c30:	e012      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c32:	230a      	movs	r3, #10
 8008c34:	e010      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c36:	2308      	movs	r3, #8
 8008c38:	e00e      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c3a:	2307      	movs	r3, #7
 8008c3c:	e00c      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c3e:	2306      	movs	r3, #6
 8008c40:	e00a      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c42:	2305      	movs	r3, #5
 8008c44:	e008      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c46:	2304      	movs	r3, #4
 8008c48:	e006      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e004      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c4e:	2302      	movs	r3, #2
 8008c50:	e002      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c52:	2301      	movs	r3, #1
 8008c54:	e000      	b.n	8008c58 <HAL_GPIO_Init+0x240>
 8008c56:	2300      	movs	r3, #0
 8008c58:	69fa      	ldr	r2, [r7, #28]
 8008c5a:	f002 0203 	and.w	r2, r2, #3
 8008c5e:	0092      	lsls	r2, r2, #2
 8008c60:	4093      	lsls	r3, r2
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008c68:	4934      	ldr	r1, [pc, #208]	; (8008d3c <HAL_GPIO_Init+0x324>)
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	089b      	lsrs	r3, r3, #2
 8008c6e:	3302      	adds	r3, #2
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008c76:	4b3c      	ldr	r3, [pc, #240]	; (8008d68 <HAL_GPIO_Init+0x350>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	43db      	mvns	r3, r3
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	4013      	ands	r3, r2
 8008c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d003      	beq.n	8008c9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008c92:	69ba      	ldr	r2, [r7, #24]
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008c9a:	4a33      	ldr	r2, [pc, #204]	; (8008d68 <HAL_GPIO_Init+0x350>)
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008ca0:	4b31      	ldr	r3, [pc, #196]	; (8008d68 <HAL_GPIO_Init+0x350>)
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	43db      	mvns	r3, r3
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	4013      	ands	r3, r2
 8008cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008cc4:	4a28      	ldr	r2, [pc, #160]	; (8008d68 <HAL_GPIO_Init+0x350>)
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008cca:	4b27      	ldr	r3, [pc, #156]	; (8008d68 <HAL_GPIO_Init+0x350>)
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	43db      	mvns	r3, r3
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008cee:	4a1e      	ldr	r2, [pc, #120]	; (8008d68 <HAL_GPIO_Init+0x350>)
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008cf4:	4b1c      	ldr	r3, [pc, #112]	; (8008d68 <HAL_GPIO_Init+0x350>)
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	43db      	mvns	r3, r3
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	4013      	ands	r3, r2
 8008d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d003      	beq.n	8008d18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008d10:	69ba      	ldr	r2, [r7, #24]
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008d18:	4a13      	ldr	r2, [pc, #76]	; (8008d68 <HAL_GPIO_Init+0x350>)
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	3301      	adds	r3, #1
 8008d22:	61fb      	str	r3, [r7, #28]
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	2b0f      	cmp	r3, #15
 8008d28:	f67f ae86 	bls.w	8008a38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008d2c:	bf00      	nop
 8008d2e:	3724      	adds	r7, #36	; 0x24
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr
 8008d38:	40023800 	.word	0x40023800
 8008d3c:	40013800 	.word	0x40013800
 8008d40:	40020000 	.word	0x40020000
 8008d44:	40020400 	.word	0x40020400
 8008d48:	40020800 	.word	0x40020800
 8008d4c:	40020c00 	.word	0x40020c00
 8008d50:	40021000 	.word	0x40021000
 8008d54:	40021400 	.word	0x40021400
 8008d58:	40021800 	.word	0x40021800
 8008d5c:	40021c00 	.word	0x40021c00
 8008d60:	40022000 	.word	0x40022000
 8008d64:	40022400 	.word	0x40022400
 8008d68:	40013c00 	.word	0x40013c00

08008d6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	691a      	ldr	r2, [r3, #16]
 8008d7c:	887b      	ldrh	r3, [r7, #2]
 8008d7e:	4013      	ands	r3, r2
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008d84:	2301      	movs	r3, #1
 8008d86:	73fb      	strb	r3, [r7, #15]
 8008d88:	e001      	b.n	8008d8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3714      	adds	r7, #20
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	807b      	strh	r3, [r7, #2]
 8008da8:	4613      	mov	r3, r2
 8008daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008dac:	787b      	ldrb	r3, [r7, #1]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d003      	beq.n	8008dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008db2:	887a      	ldrh	r2, [r7, #2]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008db8:	e003      	b.n	8008dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008dba:	887b      	ldrh	r3, [r7, #2]
 8008dbc:	041a      	lsls	r2, r3, #16
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	619a      	str	r2, [r3, #24]
}
 8008dc2:	bf00      	nop
 8008dc4:	370c      	adds	r7, #12
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b083      	sub	sp, #12
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	695a      	ldr	r2, [r3, #20]
 8008dde:	887b      	ldrh	r3, [r7, #2]
 8008de0:	4013      	ands	r3, r2
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d004      	beq.n	8008df0 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008de6:	887b      	ldrh	r3, [r7, #2]
 8008de8:	041a      	lsls	r2, r3, #16
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8008dee:	e002      	b.n	8008df6 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008df0:	887a      	ldrh	r2, [r7, #2]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	619a      	str	r2, [r3, #24]
}
 8008df6:	bf00      	nop
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
	...

08008e04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008e0e:	4b08      	ldr	r3, [pc, #32]	; (8008e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e10:	695a      	ldr	r2, [r3, #20]
 8008e12:	88fb      	ldrh	r3, [r7, #6]
 8008e14:	4013      	ands	r3, r2
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d006      	beq.n	8008e28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008e1a:	4a05      	ldr	r2, [pc, #20]	; (8008e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e1c:	88fb      	ldrh	r3, [r7, #6]
 8008e1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008e20:	88fb      	ldrh	r3, [r7, #6]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 f806 	bl	8008e34 <HAL_GPIO_EXTI_Callback>
  }
}
 8008e28:	bf00      	nop
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	40013c00 	.word	0x40013c00

08008e34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008e3e:	bf00      	nop
 8008e40:	370c      	adds	r7, #12
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
	...

08008e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d101      	bne.n	8008e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e07f      	b.n	8008f5e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d106      	bne.n	8008e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7fd fd28 	bl	80068c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2224      	movs	r2, #36	; 0x24
 8008e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f022 0201 	bic.w	r2, r2, #1
 8008e8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008e9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	689a      	ldr	r2, [r3, #8]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008eac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d107      	bne.n	8008ec6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	689a      	ldr	r2, [r3, #8]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ec2:	609a      	str	r2, [r3, #8]
 8008ec4:	e006      	b.n	8008ed4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	689a      	ldr	r2, [r3, #8]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008ed2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d104      	bne.n	8008ee6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ee4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6859      	ldr	r1, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	4b1d      	ldr	r3, [pc, #116]	; (8008f68 <HAL_I2C_Init+0x11c>)
 8008ef2:	430b      	orrs	r3, r1
 8008ef4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68da      	ldr	r2, [r3, #12]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	691a      	ldr	r2, [r3, #16]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	ea42 0103 	orr.w	r1, r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	021a      	lsls	r2, r3, #8
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	69d9      	ldr	r1, [r3, #28]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a1a      	ldr	r2, [r3, #32]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f042 0201 	orr.w	r2, r2, #1
 8008f3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2220      	movs	r2, #32
 8008f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	02008000 	.word	0x02008000

08008f6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af02      	add	r7, sp, #8
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	607a      	str	r2, [r7, #4]
 8008f76:	461a      	mov	r2, r3
 8008f78:	460b      	mov	r3, r1
 8008f7a:	817b      	strh	r3, [r7, #10]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	2b20      	cmp	r3, #32
 8008f8a:	f040 80da 	bne.w	8009142 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d101      	bne.n	8008f9c <HAL_I2C_Master_Transmit+0x30>
 8008f98:	2302      	movs	r3, #2
 8008f9a:	e0d3      	b.n	8009144 <HAL_I2C_Master_Transmit+0x1d8>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008fa4:	f7fe fa74 	bl	8007490 <HAL_GetTick>
 8008fa8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	2319      	movs	r3, #25
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f000 f9e6 	bl	8009388 <I2C_WaitOnFlagUntilTimeout>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d001      	beq.n	8008fc6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e0be      	b.n	8009144 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2221      	movs	r2, #33	; 0x21
 8008fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2210      	movs	r2, #16
 8008fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	893a      	ldrh	r2, [r7, #8]
 8008fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	2bff      	cmp	r3, #255	; 0xff
 8008ff6:	d90e      	bls.n	8009016 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	22ff      	movs	r2, #255	; 0xff
 8008ffc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009002:	b2da      	uxtb	r2, r3
 8009004:	8979      	ldrh	r1, [r7, #10]
 8009006:	4b51      	ldr	r3, [pc, #324]	; (800914c <HAL_I2C_Master_Transmit+0x1e0>)
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f000 fb48 	bl	80096a4 <I2C_TransferConfig>
 8009014:	e06c      	b.n	80090f0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800901a:	b29a      	uxth	r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009024:	b2da      	uxtb	r2, r3
 8009026:	8979      	ldrh	r1, [r7, #10]
 8009028:	4b48      	ldr	r3, [pc, #288]	; (800914c <HAL_I2C_Master_Transmit+0x1e0>)
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 fb37 	bl	80096a4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8009036:	e05b      	b.n	80090f0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	6a39      	ldr	r1, [r7, #32]
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 f9e3 	bl	8009408 <I2C_WaitOnTXISFlagUntilTimeout>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e07b      	b.n	8009144 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009050:	781a      	ldrb	r2, [r3, #0]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905c:	1c5a      	adds	r2, r3, #1
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009066:	b29b      	uxth	r3, r3
 8009068:	3b01      	subs	r3, #1
 800906a:	b29a      	uxth	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009074:	3b01      	subs	r3, #1
 8009076:	b29a      	uxth	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009080:	b29b      	uxth	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	d034      	beq.n	80090f0 <HAL_I2C_Master_Transmit+0x184>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800908a:	2b00      	cmp	r3, #0
 800908c:	d130      	bne.n	80090f0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	6a3b      	ldr	r3, [r7, #32]
 8009094:	2200      	movs	r2, #0
 8009096:	2180      	movs	r1, #128	; 0x80
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f000 f975 	bl	8009388 <I2C_WaitOnFlagUntilTimeout>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e04d      	b.n	8009144 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	2bff      	cmp	r3, #255	; 0xff
 80090b0:	d90e      	bls.n	80090d0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	22ff      	movs	r2, #255	; 0xff
 80090b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	8979      	ldrh	r1, [r7, #10]
 80090c0:	2300      	movs	r3, #0
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 faeb 	bl	80096a4 <I2C_TransferConfig>
 80090ce:	e00f      	b.n	80090f0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090de:	b2da      	uxtb	r2, r3
 80090e0:	8979      	ldrh	r1, [r7, #10]
 80090e2:	2300      	movs	r3, #0
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f000 fada 	bl	80096a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d19e      	bne.n	8009038 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	6a39      	ldr	r1, [r7, #32]
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 f9c2 	bl	8009488 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e01a      	b.n	8009144 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2220      	movs	r2, #32
 8009114:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6859      	ldr	r1, [r3, #4]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	4b0b      	ldr	r3, [pc, #44]	; (8009150 <HAL_I2C_Master_Transmit+0x1e4>)
 8009122:	400b      	ands	r3, r1
 8009124:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2220      	movs	r2, #32
 800912a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	e000      	b.n	8009144 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8009142:	2302      	movs	r3, #2
  }
}
 8009144:	4618      	mov	r0, r3
 8009146:	3718      	adds	r7, #24
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	80002000 	.word	0x80002000
 8009150:	fe00e800 	.word	0xfe00e800

08009154 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af02      	add	r7, sp, #8
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	607a      	str	r2, [r7, #4]
 800915e:	461a      	mov	r2, r3
 8009160:	460b      	mov	r3, r1
 8009162:	817b      	strh	r3, [r7, #10]
 8009164:	4613      	mov	r3, r2
 8009166:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2b20      	cmp	r3, #32
 8009172:	f040 80db 	bne.w	800932c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800917c:	2b01      	cmp	r3, #1
 800917e:	d101      	bne.n	8009184 <HAL_I2C_Master_Receive+0x30>
 8009180:	2302      	movs	r3, #2
 8009182:	e0d4      	b.n	800932e <HAL_I2C_Master_Receive+0x1da>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800918c:	f7fe f980 	bl	8007490 <HAL_GetTick>
 8009190:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	2319      	movs	r3, #25
 8009198:	2201      	movs	r2, #1
 800919a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 f8f2 	bl	8009388 <I2C_WaitOnFlagUntilTimeout>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e0bf      	b.n	800932e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2222      	movs	r2, #34	; 0x22
 80091b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2210      	movs	r2, #16
 80091ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	893a      	ldrh	r2, [r7, #8]
 80091ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091da:	b29b      	uxth	r3, r3
 80091dc:	2bff      	cmp	r3, #255	; 0xff
 80091de:	d90e      	bls.n	80091fe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	22ff      	movs	r2, #255	; 0xff
 80091e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	8979      	ldrh	r1, [r7, #10]
 80091ee:	4b52      	ldr	r3, [pc, #328]	; (8009338 <HAL_I2C_Master_Receive+0x1e4>)
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f000 fa54 	bl	80096a4 <I2C_TransferConfig>
 80091fc:	e06d      	b.n	80092da <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009202:	b29a      	uxth	r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800920c:	b2da      	uxtb	r2, r3
 800920e:	8979      	ldrh	r1, [r7, #10]
 8009210:	4b49      	ldr	r3, [pc, #292]	; (8009338 <HAL_I2C_Master_Receive+0x1e4>)
 8009212:	9300      	str	r3, [sp, #0]
 8009214:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f000 fa43 	bl	80096a4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800921e:	e05c      	b.n	80092da <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	6a39      	ldr	r1, [r7, #32]
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 f96b 	bl	8009500 <I2C_WaitOnRXNEFlagUntilTimeout>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e07c      	b.n	800932e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923e:	b2d2      	uxtb	r2, r2
 8009240:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009250:	3b01      	subs	r3, #1
 8009252:	b29a      	uxth	r2, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800925c:	b29b      	uxth	r3, r3
 800925e:	3b01      	subs	r3, #1
 8009260:	b29a      	uxth	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800926a:	b29b      	uxth	r3, r3
 800926c:	2b00      	cmp	r3, #0
 800926e:	d034      	beq.n	80092da <HAL_I2C_Master_Receive+0x186>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009274:	2b00      	cmp	r3, #0
 8009276:	d130      	bne.n	80092da <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	2200      	movs	r2, #0
 8009280:	2180      	movs	r1, #128	; 0x80
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f000 f880 	bl	8009388 <I2C_WaitOnFlagUntilTimeout>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e04d      	b.n	800932e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009296:	b29b      	uxth	r3, r3
 8009298:	2bff      	cmp	r3, #255	; 0xff
 800929a:	d90e      	bls.n	80092ba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	22ff      	movs	r2, #255	; 0xff
 80092a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	8979      	ldrh	r1, [r7, #10]
 80092aa:	2300      	movs	r3, #0
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f000 f9f6 	bl	80096a4 <I2C_TransferConfig>
 80092b8:	e00f      	b.n	80092da <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092be:	b29a      	uxth	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	8979      	ldrh	r1, [r7, #10]
 80092cc:	2300      	movs	r3, #0
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f000 f9e5 	bl	80096a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092de:	b29b      	uxth	r3, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d19d      	bne.n	8009220 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092e4:	697a      	ldr	r2, [r7, #20]
 80092e6:	6a39      	ldr	r1, [r7, #32]
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 f8cd 	bl	8009488 <I2C_WaitOnSTOPFlagUntilTimeout>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e01a      	b.n	800932e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2220      	movs	r2, #32
 80092fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	6859      	ldr	r1, [r3, #4]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	4b0c      	ldr	r3, [pc, #48]	; (800933c <HAL_I2C_Master_Receive+0x1e8>)
 800930c:	400b      	ands	r3, r1
 800930e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2220      	movs	r2, #32
 8009314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	e000      	b.n	800932e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800932c:	2302      	movs	r3, #2
  }
}
 800932e:	4618      	mov	r0, r3
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	80002400 	.word	0x80002400
 800933c:	fe00e800 	.word	0xfe00e800

08009340 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	f003 0302 	and.w	r3, r3, #2
 8009352:	2b02      	cmp	r3, #2
 8009354:	d103      	bne.n	800935e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2200      	movs	r2, #0
 800935c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	2b01      	cmp	r3, #1
 800936a:	d007      	beq.n	800937c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	699a      	ldr	r2, [r3, #24]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f042 0201 	orr.w	r2, r2, #1
 800937a:	619a      	str	r2, [r3, #24]
  }
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	603b      	str	r3, [r7, #0]
 8009394:	4613      	mov	r3, r2
 8009396:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009398:	e022      	b.n	80093e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a0:	d01e      	beq.n	80093e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093a2:	f7fe f875 	bl	8007490 <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	683a      	ldr	r2, [r7, #0]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d302      	bcc.n	80093b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d113      	bne.n	80093e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093bc:	f043 0220 	orr.w	r2, r3, #32
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2220      	movs	r2, #32
 80093c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e00f      	b.n	8009400 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	699a      	ldr	r2, [r3, #24]
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	4013      	ands	r3, r2
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	bf0c      	ite	eq
 80093f0:	2301      	moveq	r3, #1
 80093f2:	2300      	movne	r3, #0
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	461a      	mov	r2, r3
 80093f8:	79fb      	ldrb	r3, [r7, #7]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d0cd      	beq.n	800939a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009414:	e02c      	b.n	8009470 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	68b9      	ldr	r1, [r7, #8]
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f000 f8dc 	bl	80095d8 <I2C_IsAcknowledgeFailed>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d001      	beq.n	800942a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e02a      	b.n	8009480 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009430:	d01e      	beq.n	8009470 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009432:	f7fe f82d 	bl	8007490 <HAL_GetTick>
 8009436:	4602      	mov	r2, r0
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	429a      	cmp	r2, r3
 8009440:	d302      	bcc.n	8009448 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d113      	bne.n	8009470 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800944c:	f043 0220 	orr.w	r2, r3, #32
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2220      	movs	r2, #32
 8009458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e007      	b.n	8009480 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	f003 0302 	and.w	r3, r3, #2
 800947a:	2b02      	cmp	r3, #2
 800947c:	d1cb      	bne.n	8009416 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009494:	e028      	b.n	80094e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	68b9      	ldr	r1, [r7, #8]
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f000 f89c 	bl	80095d8 <I2C_IsAcknowledgeFailed>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e026      	b.n	80094f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094aa:	f7fd fff1 	bl	8007490 <HAL_GetTick>
 80094ae:	4602      	mov	r2, r0
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d302      	bcc.n	80094c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d113      	bne.n	80094e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c4:	f043 0220 	orr.w	r2, r3, #32
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2220      	movs	r2, #32
 80094d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	e007      	b.n	80094f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	f003 0320 	and.w	r3, r3, #32
 80094f2:	2b20      	cmp	r3, #32
 80094f4:	d1cf      	bne.n	8009496 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800950c:	e055      	b.n	80095ba <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	68b9      	ldr	r1, [r7, #8]
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f000 f860 	bl	80095d8 <I2C_IsAcknowledgeFailed>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e053      	b.n	80095ca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	f003 0320 	and.w	r3, r3, #32
 800952c:	2b20      	cmp	r3, #32
 800952e:	d129      	bne.n	8009584 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	f003 0304 	and.w	r3, r3, #4
 800953a:	2b04      	cmp	r3, #4
 800953c:	d105      	bne.n	800954a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	e03f      	b.n	80095ca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2220      	movs	r2, #32
 8009550:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	6859      	ldr	r1, [r3, #4]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	4b1d      	ldr	r3, [pc, #116]	; (80095d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800955e:	400b      	ands	r3, r1
 8009560:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2220      	movs	r2, #32
 800956c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e022      	b.n	80095ca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009584:	f7fd ff84 	bl	8007490 <HAL_GetTick>
 8009588:	4602      	mov	r2, r0
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	429a      	cmp	r2, r3
 8009592:	d302      	bcc.n	800959a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10f      	bne.n	80095ba <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800959e:	f043 0220 	orr.w	r2, r3, #32
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2220      	movs	r2, #32
 80095aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e007      	b.n	80095ca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	f003 0304 	and.w	r3, r3, #4
 80095c4:	2b04      	cmp	r3, #4
 80095c6:	d1a2      	bne.n	800950e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	fe00e800 	.word	0xfe00e800

080095d8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	699b      	ldr	r3, [r3, #24]
 80095ea:	f003 0310 	and.w	r3, r3, #16
 80095ee:	2b10      	cmp	r3, #16
 80095f0:	d151      	bne.n	8009696 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095f2:	e022      	b.n	800963a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095fa:	d01e      	beq.n	800963a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095fc:	f7fd ff48 	bl	8007490 <HAL_GetTick>
 8009600:	4602      	mov	r2, r0
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	429a      	cmp	r2, r3
 800960a:	d302      	bcc.n	8009612 <I2C_IsAcknowledgeFailed+0x3a>
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d113      	bne.n	800963a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009616:	f043 0220 	orr.w	r2, r3, #32
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2220      	movs	r2, #32
 8009622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e02e      	b.n	8009698 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	f003 0320 	and.w	r3, r3, #32
 8009644:	2b20      	cmp	r3, #32
 8009646:	d1d5      	bne.n	80095f4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2210      	movs	r2, #16
 800964e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2220      	movs	r2, #32
 8009656:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f7ff fe71 	bl	8009340 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6859      	ldr	r1, [r3, #4]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	4b0d      	ldr	r3, [pc, #52]	; (80096a0 <I2C_IsAcknowledgeFailed+0xc8>)
 800966a:	400b      	ands	r3, r1
 800966c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009672:	f043 0204 	orr.w	r2, r3, #4
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2220      	movs	r2, #32
 800967e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e000      	b.n	8009698 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	fe00e800 	.word	0xfe00e800

080096a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	607b      	str	r3, [r7, #4]
 80096ae:	460b      	mov	r3, r1
 80096b0:	817b      	strh	r3, [r7, #10]
 80096b2:	4613      	mov	r3, r2
 80096b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	0d5b      	lsrs	r3, r3, #21
 80096c0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80096c4:	4b0d      	ldr	r3, [pc, #52]	; (80096fc <I2C_TransferConfig+0x58>)
 80096c6:	430b      	orrs	r3, r1
 80096c8:	43db      	mvns	r3, r3
 80096ca:	ea02 0103 	and.w	r1, r2, r3
 80096ce:	897b      	ldrh	r3, [r7, #10]
 80096d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80096d4:	7a7b      	ldrb	r3, [r7, #9]
 80096d6:	041b      	lsls	r3, r3, #16
 80096d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80096dc:	431a      	orrs	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	431a      	orrs	r2, r3
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	431a      	orrs	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	430a      	orrs	r2, r1
 80096ec:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80096ee:	bf00      	nop
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	03ff63ff 	.word	0x03ff63ff

08009700 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009710:	b2db      	uxtb	r3, r3
 8009712:	2b20      	cmp	r3, #32
 8009714:	d138      	bne.n	8009788 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800971c:	2b01      	cmp	r3, #1
 800971e:	d101      	bne.n	8009724 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009720:	2302      	movs	r3, #2
 8009722:	e032      	b.n	800978a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2224      	movs	r2, #36	; 0x24
 8009730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f022 0201 	bic.w	r2, r2, #1
 8009742:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009752:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6819      	ldr	r1, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	430a      	orrs	r2, r1
 8009762:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0201 	orr.w	r2, r2, #1
 8009772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2220      	movs	r2, #32
 8009778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	e000      	b.n	800978a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009788:	2302      	movs	r3, #2
  }
}
 800978a:	4618      	mov	r0, r3
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009796:	b480      	push	{r7}
 8009798:	b085      	sub	sp, #20
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b20      	cmp	r3, #32
 80097aa:	d139      	bne.n	8009820 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d101      	bne.n	80097ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80097b6:	2302      	movs	r3, #2
 80097b8:	e033      	b.n	8009822 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2224      	movs	r2, #36	; 0x24
 80097c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f022 0201 	bic.w	r2, r2, #1
 80097d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80097e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	021b      	lsls	r3, r3, #8
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f042 0201 	orr.w	r2, r2, #1
 800980a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2220      	movs	r2, #32
 8009810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	e000      	b.n	8009822 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009820:	2302      	movs	r3, #2
  }
}
 8009822:	4618      	mov	r0, r3
 8009824:	3714      	adds	r7, #20
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr
	...

08009830 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009838:	4b0b      	ldr	r3, [pc, #44]	; (8009868 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800983a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800983c:	4a0a      	ldr	r2, [pc, #40]	; (8009868 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800983e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009842:	6453      	str	r3, [r2, #68]	; 0x44
 8009844:	4b08      	ldr	r3, [pc, #32]	; (8009868 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800984c:	60fb      	str	r3, [r7, #12]
 800984e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 8009850:	4b06      	ldr	r3, [pc, #24]	; (800986c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	4905      	ldr	r1, [pc, #20]	; (800986c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4313      	orrs	r3, r2
 800985a:	604b      	str	r3, [r1, #4]
}
 800985c:	bf00      	nop
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	40023800 	.word	0x40023800
 800986c:	40013800 	.word	0x40013800

08009870 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009872:	b08f      	sub	sp, #60	; 0x3c
 8009874:	af0a      	add	r7, sp, #40	; 0x28
 8009876:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d101      	bne.n	8009882 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e116      	b.n	8009ab0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	d106      	bne.n	80098a2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f7fd fb4f 	bl	8006f40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2203      	movs	r2, #3
 80098a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d102      	bne.n	80098bc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f003 fc0d 	bl	800d0e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	603b      	str	r3, [r7, #0]
 80098cc:	687e      	ldr	r6, [r7, #4]
 80098ce:	466d      	mov	r5, sp
 80098d0:	f106 0410 	add.w	r4, r6, #16
 80098d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80098d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80098dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80098e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80098e4:	1d33      	adds	r3, r6, #4
 80098e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098e8:	6838      	ldr	r0, [r7, #0]
 80098ea:	f003 fba1 	bl	800d030 <USB_CoreInit>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d005      	beq.n	8009900 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2202      	movs	r2, #2
 80098f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e0d7      	b.n	8009ab0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2100      	movs	r1, #0
 8009906:	4618      	mov	r0, r3
 8009908:	f003 fbfb 	bl	800d102 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800990c:	2300      	movs	r3, #0
 800990e:	73fb      	strb	r3, [r7, #15]
 8009910:	e04a      	b.n	80099a8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009912:	7bfa      	ldrb	r2, [r7, #15]
 8009914:	6879      	ldr	r1, [r7, #4]
 8009916:	4613      	mov	r3, r2
 8009918:	00db      	lsls	r3, r3, #3
 800991a:	1a9b      	subs	r3, r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	440b      	add	r3, r1
 8009920:	333d      	adds	r3, #61	; 0x3d
 8009922:	2201      	movs	r2, #1
 8009924:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009926:	7bfa      	ldrb	r2, [r7, #15]
 8009928:	6879      	ldr	r1, [r7, #4]
 800992a:	4613      	mov	r3, r2
 800992c:	00db      	lsls	r3, r3, #3
 800992e:	1a9b      	subs	r3, r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	440b      	add	r3, r1
 8009934:	333c      	adds	r3, #60	; 0x3c
 8009936:	7bfa      	ldrb	r2, [r7, #15]
 8009938:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800993a:	7bfa      	ldrb	r2, [r7, #15]
 800993c:	7bfb      	ldrb	r3, [r7, #15]
 800993e:	b298      	uxth	r0, r3
 8009940:	6879      	ldr	r1, [r7, #4]
 8009942:	4613      	mov	r3, r2
 8009944:	00db      	lsls	r3, r3, #3
 8009946:	1a9b      	subs	r3, r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	440b      	add	r3, r1
 800994c:	3342      	adds	r3, #66	; 0x42
 800994e:	4602      	mov	r2, r0
 8009950:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009952:	7bfa      	ldrb	r2, [r7, #15]
 8009954:	6879      	ldr	r1, [r7, #4]
 8009956:	4613      	mov	r3, r2
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	1a9b      	subs	r3, r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	440b      	add	r3, r1
 8009960:	333f      	adds	r3, #63	; 0x3f
 8009962:	2200      	movs	r2, #0
 8009964:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009966:	7bfa      	ldrb	r2, [r7, #15]
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	4613      	mov	r3, r2
 800996c:	00db      	lsls	r3, r3, #3
 800996e:	1a9b      	subs	r3, r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	440b      	add	r3, r1
 8009974:	3344      	adds	r3, #68	; 0x44
 8009976:	2200      	movs	r2, #0
 8009978:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800997a:	7bfa      	ldrb	r2, [r7, #15]
 800997c:	6879      	ldr	r1, [r7, #4]
 800997e:	4613      	mov	r3, r2
 8009980:	00db      	lsls	r3, r3, #3
 8009982:	1a9b      	subs	r3, r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	440b      	add	r3, r1
 8009988:	3348      	adds	r3, #72	; 0x48
 800998a:	2200      	movs	r2, #0
 800998c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800998e:	7bfa      	ldrb	r2, [r7, #15]
 8009990:	6879      	ldr	r1, [r7, #4]
 8009992:	4613      	mov	r3, r2
 8009994:	00db      	lsls	r3, r3, #3
 8009996:	1a9b      	subs	r3, r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	440b      	add	r3, r1
 800999c:	3350      	adds	r3, #80	; 0x50
 800999e:	2200      	movs	r2, #0
 80099a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
 80099a4:	3301      	adds	r3, #1
 80099a6:	73fb      	strb	r3, [r7, #15]
 80099a8:	7bfa      	ldrb	r2, [r7, #15]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d3af      	bcc.n	8009912 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099b2:	2300      	movs	r3, #0
 80099b4:	73fb      	strb	r3, [r7, #15]
 80099b6:	e044      	b.n	8009a42 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80099b8:	7bfa      	ldrb	r2, [r7, #15]
 80099ba:	6879      	ldr	r1, [r7, #4]
 80099bc:	4613      	mov	r3, r2
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	1a9b      	subs	r3, r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	440b      	add	r3, r1
 80099c6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80099ca:	2200      	movs	r2, #0
 80099cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80099ce:	7bfa      	ldrb	r2, [r7, #15]
 80099d0:	6879      	ldr	r1, [r7, #4]
 80099d2:	4613      	mov	r3, r2
 80099d4:	00db      	lsls	r3, r3, #3
 80099d6:	1a9b      	subs	r3, r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	440b      	add	r3, r1
 80099dc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80099e0:	7bfa      	ldrb	r2, [r7, #15]
 80099e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80099e4:	7bfa      	ldrb	r2, [r7, #15]
 80099e6:	6879      	ldr	r1, [r7, #4]
 80099e8:	4613      	mov	r3, r2
 80099ea:	00db      	lsls	r3, r3, #3
 80099ec:	1a9b      	subs	r3, r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	440b      	add	r3, r1
 80099f2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80099f6:	2200      	movs	r2, #0
 80099f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80099fa:	7bfa      	ldrb	r2, [r7, #15]
 80099fc:	6879      	ldr	r1, [r7, #4]
 80099fe:	4613      	mov	r3, r2
 8009a00:	00db      	lsls	r3, r3, #3
 8009a02:	1a9b      	subs	r3, r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	440b      	add	r3, r1
 8009a08:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009a10:	7bfa      	ldrb	r2, [r7, #15]
 8009a12:	6879      	ldr	r1, [r7, #4]
 8009a14:	4613      	mov	r3, r2
 8009a16:	00db      	lsls	r3, r3, #3
 8009a18:	1a9b      	subs	r3, r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	440b      	add	r3, r1
 8009a1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a22:	2200      	movs	r2, #0
 8009a24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009a26:	7bfa      	ldrb	r2, [r7, #15]
 8009a28:	6879      	ldr	r1, [r7, #4]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	00db      	lsls	r3, r3, #3
 8009a2e:	1a9b      	subs	r3, r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	440b      	add	r3, r1
 8009a34:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009a38:	2200      	movs	r2, #0
 8009a3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	73fb      	strb	r3, [r7, #15]
 8009a42:	7bfa      	ldrb	r2, [r7, #15]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d3b5      	bcc.n	80099b8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	603b      	str	r3, [r7, #0]
 8009a52:	687e      	ldr	r6, [r7, #4]
 8009a54:	466d      	mov	r5, sp
 8009a56:	f106 0410 	add.w	r4, r6, #16
 8009a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009a66:	e885 0003 	stmia.w	r5, {r0, r1}
 8009a6a:	1d33      	adds	r3, r6, #4
 8009a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a6e:	6838      	ldr	r0, [r7, #0]
 8009a70:	f003 fb72 	bl	800d158 <USB_DevInit>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d005      	beq.n	8009a86 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e014      	b.n	8009ab0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2201      	movs	r2, #1
 8009a92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d102      	bne.n	8009aa4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f80a 	bl	8009ab8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f003 fd24 	bl	800d4f6 <USB_DevDisconnect>

  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3714      	adds	r7, #20
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ab8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ae6:	4b05      	ldr	r3, [pc, #20]	; (8009afc <HAL_PCDEx_ActivateLPM+0x44>)
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3714      	adds	r7, #20
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	10000003 	.word	0x10000003

08009b00 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009b00:	b480      	push	{r7}
 8009b02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b04:	4b05      	ldr	r3, [pc, #20]	; (8009b1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a04      	ldr	r2, [pc, #16]	; (8009b1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b0e:	6013      	str	r3, [r2, #0]
}
 8009b10:	bf00      	nop
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	40007000 	.word	0x40007000

08009b20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d101      	bne.n	8009b36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e29b      	b.n	800a06e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f000 8087 	beq.w	8009c52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009b44:	4b96      	ldr	r3, [pc, #600]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	f003 030c 	and.w	r3, r3, #12
 8009b4c:	2b04      	cmp	r3, #4
 8009b4e:	d00c      	beq.n	8009b6a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b50:	4b93      	ldr	r3, [pc, #588]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f003 030c 	and.w	r3, r3, #12
 8009b58:	2b08      	cmp	r3, #8
 8009b5a:	d112      	bne.n	8009b82 <HAL_RCC_OscConfig+0x62>
 8009b5c:	4b90      	ldr	r3, [pc, #576]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b68:	d10b      	bne.n	8009b82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b6a:	4b8d      	ldr	r3, [pc, #564]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d06c      	beq.n	8009c50 <HAL_RCC_OscConfig+0x130>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d168      	bne.n	8009c50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e275      	b.n	800a06e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b8a:	d106      	bne.n	8009b9a <HAL_RCC_OscConfig+0x7a>
 8009b8c:	4b84      	ldr	r3, [pc, #528]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a83      	ldr	r2, [pc, #524]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b96:	6013      	str	r3, [r2, #0]
 8009b98:	e02e      	b.n	8009bf8 <HAL_RCC_OscConfig+0xd8>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10c      	bne.n	8009bbc <HAL_RCC_OscConfig+0x9c>
 8009ba2:	4b7f      	ldr	r3, [pc, #508]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a7e      	ldr	r2, [pc, #504]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bac:	6013      	str	r3, [r2, #0]
 8009bae:	4b7c      	ldr	r3, [pc, #496]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a7b      	ldr	r2, [pc, #492]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bb8:	6013      	str	r3, [r2, #0]
 8009bba:	e01d      	b.n	8009bf8 <HAL_RCC_OscConfig+0xd8>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009bc4:	d10c      	bne.n	8009be0 <HAL_RCC_OscConfig+0xc0>
 8009bc6:	4b76      	ldr	r3, [pc, #472]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a75      	ldr	r2, [pc, #468]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009bd0:	6013      	str	r3, [r2, #0]
 8009bd2:	4b73      	ldr	r3, [pc, #460]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a72      	ldr	r2, [pc, #456]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bdc:	6013      	str	r3, [r2, #0]
 8009bde:	e00b      	b.n	8009bf8 <HAL_RCC_OscConfig+0xd8>
 8009be0:	4b6f      	ldr	r3, [pc, #444]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a6e      	ldr	r2, [pc, #440]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bea:	6013      	str	r3, [r2, #0]
 8009bec:	4b6c      	ldr	r3, [pc, #432]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a6b      	ldr	r2, [pc, #428]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d013      	beq.n	8009c28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c00:	f7fd fc46 	bl	8007490 <HAL_GetTick>
 8009c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c06:	e008      	b.n	8009c1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c08:	f7fd fc42 	bl	8007490 <HAL_GetTick>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	2b64      	cmp	r3, #100	; 0x64
 8009c14:	d901      	bls.n	8009c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009c16:	2303      	movs	r3, #3
 8009c18:	e229      	b.n	800a06e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c1a:	4b61      	ldr	r3, [pc, #388]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d0f0      	beq.n	8009c08 <HAL_RCC_OscConfig+0xe8>
 8009c26:	e014      	b.n	8009c52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c28:	f7fd fc32 	bl	8007490 <HAL_GetTick>
 8009c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c2e:	e008      	b.n	8009c42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c30:	f7fd fc2e 	bl	8007490 <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	2b64      	cmp	r3, #100	; 0x64
 8009c3c:	d901      	bls.n	8009c42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e215      	b.n	800a06e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c42:	4b57      	ldr	r3, [pc, #348]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1f0      	bne.n	8009c30 <HAL_RCC_OscConfig+0x110>
 8009c4e:	e000      	b.n	8009c52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 0302 	and.w	r3, r3, #2
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d069      	beq.n	8009d32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009c5e:	4b50      	ldr	r3, [pc, #320]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	f003 030c 	and.w	r3, r3, #12
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00b      	beq.n	8009c82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c6a:	4b4d      	ldr	r3, [pc, #308]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	f003 030c 	and.w	r3, r3, #12
 8009c72:	2b08      	cmp	r3, #8
 8009c74:	d11c      	bne.n	8009cb0 <HAL_RCC_OscConfig+0x190>
 8009c76:	4b4a      	ldr	r3, [pc, #296]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d116      	bne.n	8009cb0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c82:	4b47      	ldr	r3, [pc, #284]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 0302 	and.w	r3, r3, #2
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d005      	beq.n	8009c9a <HAL_RCC_OscConfig+0x17a>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d001      	beq.n	8009c9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e1e9      	b.n	800a06e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c9a:	4b41      	ldr	r3, [pc, #260]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	00db      	lsls	r3, r3, #3
 8009ca8:	493d      	ldr	r1, [pc, #244]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009caa:	4313      	orrs	r3, r2
 8009cac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009cae:	e040      	b.n	8009d32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d023      	beq.n	8009d00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009cb8:	4b39      	ldr	r3, [pc, #228]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a38      	ldr	r2, [pc, #224]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009cbe:	f043 0301 	orr.w	r3, r3, #1
 8009cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cc4:	f7fd fbe4 	bl	8007490 <HAL_GetTick>
 8009cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cca:	e008      	b.n	8009cde <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ccc:	f7fd fbe0 	bl	8007490 <HAL_GetTick>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d901      	bls.n	8009cde <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	e1c7      	b.n	800a06e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cde:	4b30      	ldr	r3, [pc, #192]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 0302 	and.w	r3, r3, #2
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d0f0      	beq.n	8009ccc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cea:	4b2d      	ldr	r3, [pc, #180]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	00db      	lsls	r3, r3, #3
 8009cf8:	4929      	ldr	r1, [pc, #164]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	600b      	str	r3, [r1, #0]
 8009cfe:	e018      	b.n	8009d32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d00:	4b27      	ldr	r3, [pc, #156]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a26      	ldr	r2, [pc, #152]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009d06:	f023 0301 	bic.w	r3, r3, #1
 8009d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d0c:	f7fd fbc0 	bl	8007490 <HAL_GetTick>
 8009d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d12:	e008      	b.n	8009d26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d14:	f7fd fbbc 	bl	8007490 <HAL_GetTick>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	1ad3      	subs	r3, r2, r3
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d901      	bls.n	8009d26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009d22:	2303      	movs	r3, #3
 8009d24:	e1a3      	b.n	800a06e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d26:	4b1e      	ldr	r3, [pc, #120]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0302 	and.w	r3, r3, #2
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1f0      	bne.n	8009d14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f003 0308 	and.w	r3, r3, #8
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d038      	beq.n	8009db0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	695b      	ldr	r3, [r3, #20]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d019      	beq.n	8009d7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d46:	4b16      	ldr	r3, [pc, #88]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d4a:	4a15      	ldr	r2, [pc, #84]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009d4c:	f043 0301 	orr.w	r3, r3, #1
 8009d50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d52:	f7fd fb9d 	bl	8007490 <HAL_GetTick>
 8009d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d58:	e008      	b.n	8009d6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d5a:	f7fd fb99 	bl	8007490 <HAL_GetTick>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d901      	bls.n	8009d6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009d68:	2303      	movs	r3, #3
 8009d6a:	e180      	b.n	800a06e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d6c:	4b0c      	ldr	r3, [pc, #48]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d70:	f003 0302 	and.w	r3, r3, #2
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d0f0      	beq.n	8009d5a <HAL_RCC_OscConfig+0x23a>
 8009d78:	e01a      	b.n	8009db0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d7a:	4b09      	ldr	r3, [pc, #36]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d7e:	4a08      	ldr	r2, [pc, #32]	; (8009da0 <HAL_RCC_OscConfig+0x280>)
 8009d80:	f023 0301 	bic.w	r3, r3, #1
 8009d84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d86:	f7fd fb83 	bl	8007490 <HAL_GetTick>
 8009d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d8c:	e00a      	b.n	8009da4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d8e:	f7fd fb7f 	bl	8007490 <HAL_GetTick>
 8009d92:	4602      	mov	r2, r0
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d903      	bls.n	8009da4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	e166      	b.n	800a06e <HAL_RCC_OscConfig+0x54e>
 8009da0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009da4:	4b92      	ldr	r3, [pc, #584]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009da8:	f003 0302 	and.w	r3, r3, #2
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1ee      	bne.n	8009d8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f003 0304 	and.w	r3, r3, #4
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 80a4 	beq.w	8009f06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009dbe:	4b8c      	ldr	r3, [pc, #560]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d10d      	bne.n	8009de6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009dca:	4b89      	ldr	r3, [pc, #548]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dce:	4a88      	ldr	r2, [pc, #544]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8009dd6:	4b86      	ldr	r3, [pc, #536]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dde:	60bb      	str	r3, [r7, #8]
 8009de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009de2:	2301      	movs	r3, #1
 8009de4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009de6:	4b83      	ldr	r3, [pc, #524]	; (8009ff4 <HAL_RCC_OscConfig+0x4d4>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d118      	bne.n	8009e24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009df2:	4b80      	ldr	r3, [pc, #512]	; (8009ff4 <HAL_RCC_OscConfig+0x4d4>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a7f      	ldr	r2, [pc, #508]	; (8009ff4 <HAL_RCC_OscConfig+0x4d4>)
 8009df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009dfe:	f7fd fb47 	bl	8007490 <HAL_GetTick>
 8009e02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e04:	e008      	b.n	8009e18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e06:	f7fd fb43 	bl	8007490 <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	2b64      	cmp	r3, #100	; 0x64
 8009e12:	d901      	bls.n	8009e18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e12a      	b.n	800a06e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e18:	4b76      	ldr	r3, [pc, #472]	; (8009ff4 <HAL_RCC_OscConfig+0x4d4>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d0f0      	beq.n	8009e06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d106      	bne.n	8009e3a <HAL_RCC_OscConfig+0x31a>
 8009e2c:	4b70      	ldr	r3, [pc, #448]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e30:	4a6f      	ldr	r2, [pc, #444]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009e32:	f043 0301 	orr.w	r3, r3, #1
 8009e36:	6713      	str	r3, [r2, #112]	; 0x70
 8009e38:	e02d      	b.n	8009e96 <HAL_RCC_OscConfig+0x376>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10c      	bne.n	8009e5c <HAL_RCC_OscConfig+0x33c>
 8009e42:	4b6b      	ldr	r3, [pc, #428]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e46:	4a6a      	ldr	r2, [pc, #424]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009e48:	f023 0301 	bic.w	r3, r3, #1
 8009e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8009e4e:	4b68      	ldr	r3, [pc, #416]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e52:	4a67      	ldr	r2, [pc, #412]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009e54:	f023 0304 	bic.w	r3, r3, #4
 8009e58:	6713      	str	r3, [r2, #112]	; 0x70
 8009e5a:	e01c      	b.n	8009e96 <HAL_RCC_OscConfig+0x376>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	2b05      	cmp	r3, #5
 8009e62:	d10c      	bne.n	8009e7e <HAL_RCC_OscConfig+0x35e>
 8009e64:	4b62      	ldr	r3, [pc, #392]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e68:	4a61      	ldr	r2, [pc, #388]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009e6a:	f043 0304 	orr.w	r3, r3, #4
 8009e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8009e70:	4b5f      	ldr	r3, [pc, #380]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e74:	4a5e      	ldr	r2, [pc, #376]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009e76:	f043 0301 	orr.w	r3, r3, #1
 8009e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8009e7c:	e00b      	b.n	8009e96 <HAL_RCC_OscConfig+0x376>
 8009e7e:	4b5c      	ldr	r3, [pc, #368]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e82:	4a5b      	ldr	r2, [pc, #364]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009e84:	f023 0301 	bic.w	r3, r3, #1
 8009e88:	6713      	str	r3, [r2, #112]	; 0x70
 8009e8a:	4b59      	ldr	r3, [pc, #356]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e8e:	4a58      	ldr	r2, [pc, #352]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009e90:	f023 0304 	bic.w	r3, r3, #4
 8009e94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d015      	beq.n	8009eca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e9e:	f7fd faf7 	bl	8007490 <HAL_GetTick>
 8009ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ea4:	e00a      	b.n	8009ebc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ea6:	f7fd faf3 	bl	8007490 <HAL_GetTick>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d901      	bls.n	8009ebc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e0d8      	b.n	800a06e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ebc:	4b4c      	ldr	r3, [pc, #304]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec0:	f003 0302 	and.w	r3, r3, #2
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d0ee      	beq.n	8009ea6 <HAL_RCC_OscConfig+0x386>
 8009ec8:	e014      	b.n	8009ef4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009eca:	f7fd fae1 	bl	8007490 <HAL_GetTick>
 8009ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ed0:	e00a      	b.n	8009ee8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ed2:	f7fd fadd 	bl	8007490 <HAL_GetTick>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d901      	bls.n	8009ee8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	e0c2      	b.n	800a06e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ee8:	4b41      	ldr	r3, [pc, #260]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eec:	f003 0302 	and.w	r3, r3, #2
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1ee      	bne.n	8009ed2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009ef4:	7dfb      	ldrb	r3, [r7, #23]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d105      	bne.n	8009f06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009efa:	4b3d      	ldr	r3, [pc, #244]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efe:	4a3c      	ldr	r2, [pc, #240]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f000 80ae 	beq.w	800a06c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f10:	4b37      	ldr	r3, [pc, #220]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	f003 030c 	and.w	r3, r3, #12
 8009f18:	2b08      	cmp	r3, #8
 8009f1a:	d06d      	beq.n	8009ff8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	d14b      	bne.n	8009fbc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f24:	4b32      	ldr	r3, [pc, #200]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a31      	ldr	r2, [pc, #196]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f30:	f7fd faae 	bl	8007490 <HAL_GetTick>
 8009f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f36:	e008      	b.n	8009f4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f38:	f7fd faaa 	bl	8007490 <HAL_GetTick>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d901      	bls.n	8009f4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009f46:	2303      	movs	r3, #3
 8009f48:	e091      	b.n	800a06e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f4a:	4b29      	ldr	r3, [pc, #164]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1f0      	bne.n	8009f38 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	69da      	ldr	r2, [r3, #28]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	431a      	orrs	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f64:	019b      	lsls	r3, r3, #6
 8009f66:	431a      	orrs	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f6c:	085b      	lsrs	r3, r3, #1
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	041b      	lsls	r3, r3, #16
 8009f72:	431a      	orrs	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f78:	061b      	lsls	r3, r3, #24
 8009f7a:	431a      	orrs	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f80:	071b      	lsls	r3, r3, #28
 8009f82:	491b      	ldr	r1, [pc, #108]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009f84:	4313      	orrs	r3, r2
 8009f86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f88:	4b19      	ldr	r3, [pc, #100]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a18      	ldr	r2, [pc, #96]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f94:	f7fd fa7c 	bl	8007490 <HAL_GetTick>
 8009f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f9a:	e008      	b.n	8009fae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f9c:	f7fd fa78 	bl	8007490 <HAL_GetTick>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	1ad3      	subs	r3, r2, r3
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d901      	bls.n	8009fae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8009faa:	2303      	movs	r3, #3
 8009fac:	e05f      	b.n	800a06e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fae:	4b10      	ldr	r3, [pc, #64]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d0f0      	beq.n	8009f9c <HAL_RCC_OscConfig+0x47c>
 8009fba:	e057      	b.n	800a06c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fbc:	4b0c      	ldr	r3, [pc, #48]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a0b      	ldr	r2, [pc, #44]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fc8:	f7fd fa62 	bl	8007490 <HAL_GetTick>
 8009fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fce:	e008      	b.n	8009fe2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fd0:	f7fd fa5e 	bl	8007490 <HAL_GetTick>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	d901      	bls.n	8009fe2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e045      	b.n	800a06e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fe2:	4b03      	ldr	r3, [pc, #12]	; (8009ff0 <HAL_RCC_OscConfig+0x4d0>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1f0      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x4b0>
 8009fee:	e03d      	b.n	800a06c <HAL_RCC_OscConfig+0x54c>
 8009ff0:	40023800 	.word	0x40023800
 8009ff4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009ff8:	4b1f      	ldr	r3, [pc, #124]	; (800a078 <HAL_RCC_OscConfig+0x558>)
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	699b      	ldr	r3, [r3, #24]
 800a002:	2b01      	cmp	r3, #1
 800a004:	d030      	beq.n	800a068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a010:	429a      	cmp	r2, r3
 800a012:	d129      	bne.n	800a068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a01e:	429a      	cmp	r2, r3
 800a020:	d122      	bne.n	800a068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a028:	4013      	ands	r3, r2
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a02e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a030:	4293      	cmp	r3, r2
 800a032:	d119      	bne.n	800a068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03e:	085b      	lsrs	r3, r3, #1
 800a040:	3b01      	subs	r3, #1
 800a042:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a044:	429a      	cmp	r2, r3
 800a046:	d10f      	bne.n	800a068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a052:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a054:	429a      	cmp	r2, r3
 800a056:	d107      	bne.n	800a068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a062:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a064:	429a      	cmp	r2, r3
 800a066:	d001      	beq.n	800a06c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	e000      	b.n	800a06e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3718      	adds	r7, #24
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	40023800 	.word	0x40023800

0800a07c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a086:	2300      	movs	r3, #0
 800a088:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d101      	bne.n	800a094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e0d0      	b.n	800a236 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a094:	4b6a      	ldr	r3, [pc, #424]	; (800a240 <HAL_RCC_ClockConfig+0x1c4>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 030f 	and.w	r3, r3, #15
 800a09c:	683a      	ldr	r2, [r7, #0]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d910      	bls.n	800a0c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0a2:	4b67      	ldr	r3, [pc, #412]	; (800a240 <HAL_RCC_ClockConfig+0x1c4>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f023 020f 	bic.w	r2, r3, #15
 800a0aa:	4965      	ldr	r1, [pc, #404]	; (800a240 <HAL_RCC_ClockConfig+0x1c4>)
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0b2:	4b63      	ldr	r3, [pc, #396]	; (800a240 <HAL_RCC_ClockConfig+0x1c4>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 030f 	and.w	r3, r3, #15
 800a0ba:	683a      	ldr	r2, [r7, #0]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d001      	beq.n	800a0c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e0b8      	b.n	800a236 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0302 	and.w	r3, r3, #2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d020      	beq.n	800a112 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 0304 	and.w	r3, r3, #4
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d005      	beq.n	800a0e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a0dc:	4b59      	ldr	r3, [pc, #356]	; (800a244 <HAL_RCC_ClockConfig+0x1c8>)
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	4a58      	ldr	r2, [pc, #352]	; (800a244 <HAL_RCC_ClockConfig+0x1c8>)
 800a0e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a0e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 0308 	and.w	r3, r3, #8
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d005      	beq.n	800a100 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a0f4:	4b53      	ldr	r3, [pc, #332]	; (800a244 <HAL_RCC_ClockConfig+0x1c8>)
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	4a52      	ldr	r2, [pc, #328]	; (800a244 <HAL_RCC_ClockConfig+0x1c8>)
 800a0fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a0fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a100:	4b50      	ldr	r3, [pc, #320]	; (800a244 <HAL_RCC_ClockConfig+0x1c8>)
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	494d      	ldr	r1, [pc, #308]	; (800a244 <HAL_RCC_ClockConfig+0x1c8>)
 800a10e:	4313      	orrs	r3, r2
 800a110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 0301 	and.w	r3, r3, #1
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d040      	beq.n	800a1a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	2b01      	cmp	r3, #1
 800a124:	d107      	bne.n	800a136 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a126:	4b47      	ldr	r3, [pc, #284]	; (800a244 <HAL_RCC_ClockConfig+0x1c8>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d115      	bne.n	800a15e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	e07f      	b.n	800a236 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d107      	bne.n	800a14e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a13e:	4b41      	ldr	r3, [pc, #260]	; (800a244 <HAL_RCC_ClockConfig+0x1c8>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a146:	2b00      	cmp	r3, #0
 800a148:	d109      	bne.n	800a15e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e073      	b.n	800a236 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a14e:	4b3d      	ldr	r3, [pc, #244]	; (800a244 <HAL_RCC_ClockConfig+0x1c8>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f003 0302 	and.w	r3, r3, #2
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e06b      	b.n	800a236 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a15e:	4b39      	ldr	r3, [pc, #228]	; (800a244 <HAL_RCC_ClockConfig+0x1c8>)
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	f023 0203 	bic.w	r2, r3, #3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	4936      	ldr	r1, [pc, #216]	; (800a244 <HAL_RCC_ClockConfig+0x1c8>)
 800a16c:	4313      	orrs	r3, r2
 800a16e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a170:	f7fd f98e 	bl	8007490 <HAL_GetTick>
 800a174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a176:	e00a      	b.n	800a18e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a178:	f7fd f98a 	bl	8007490 <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	f241 3288 	movw	r2, #5000	; 0x1388
 800a186:	4293      	cmp	r3, r2
 800a188:	d901      	bls.n	800a18e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e053      	b.n	800a236 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a18e:	4b2d      	ldr	r3, [pc, #180]	; (800a244 <HAL_RCC_ClockConfig+0x1c8>)
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	f003 020c 	and.w	r2, r3, #12
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d1eb      	bne.n	800a178 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a1a0:	4b27      	ldr	r3, [pc, #156]	; (800a240 <HAL_RCC_ClockConfig+0x1c4>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 030f 	and.w	r3, r3, #15
 800a1a8:	683a      	ldr	r2, [r7, #0]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d210      	bcs.n	800a1d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1ae:	4b24      	ldr	r3, [pc, #144]	; (800a240 <HAL_RCC_ClockConfig+0x1c4>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f023 020f 	bic.w	r2, r3, #15
 800a1b6:	4922      	ldr	r1, [pc, #136]	; (800a240 <HAL_RCC_ClockConfig+0x1c4>)
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1be:	4b20      	ldr	r3, [pc, #128]	; (800a240 <HAL_RCC_ClockConfig+0x1c4>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 030f 	and.w	r3, r3, #15
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d001      	beq.n	800a1d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e032      	b.n	800a236 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0304 	and.w	r3, r3, #4
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d008      	beq.n	800a1ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a1dc:	4b19      	ldr	r3, [pc, #100]	; (800a244 <HAL_RCC_ClockConfig+0x1c8>)
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	4916      	ldr	r1, [pc, #88]	; (800a244 <HAL_RCC_ClockConfig+0x1c8>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 0308 	and.w	r3, r3, #8
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d009      	beq.n	800a20e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a1fa:	4b12      	ldr	r3, [pc, #72]	; (800a244 <HAL_RCC_ClockConfig+0x1c8>)
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	00db      	lsls	r3, r3, #3
 800a208:	490e      	ldr	r1, [pc, #56]	; (800a244 <HAL_RCC_ClockConfig+0x1c8>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a20e:	f000 f821 	bl	800a254 <HAL_RCC_GetSysClockFreq>
 800a212:	4601      	mov	r1, r0
 800a214:	4b0b      	ldr	r3, [pc, #44]	; (800a244 <HAL_RCC_ClockConfig+0x1c8>)
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	091b      	lsrs	r3, r3, #4
 800a21a:	f003 030f 	and.w	r3, r3, #15
 800a21e:	4a0a      	ldr	r2, [pc, #40]	; (800a248 <HAL_RCC_ClockConfig+0x1cc>)
 800a220:	5cd3      	ldrb	r3, [r2, r3]
 800a222:	fa21 f303 	lsr.w	r3, r1, r3
 800a226:	4a09      	ldr	r2, [pc, #36]	; (800a24c <HAL_RCC_ClockConfig+0x1d0>)
 800a228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a22a:	4b09      	ldr	r3, [pc, #36]	; (800a250 <HAL_RCC_ClockConfig+0x1d4>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fc fed4 	bl	8006fdc <HAL_InitTick>

  return HAL_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	40023c00 	.word	0x40023c00
 800a244:	40023800 	.word	0x40023800
 800a248:	08015030 	.word	0x08015030
 800a24c:	20000188 	.word	0x20000188
 800a250:	2000018c 	.word	0x2000018c

0800a254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	607b      	str	r3, [r7, #4]
 800a25e:	2300      	movs	r3, #0
 800a260:	60fb      	str	r3, [r7, #12]
 800a262:	2300      	movs	r3, #0
 800a264:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a26a:	4b50      	ldr	r3, [pc, #320]	; (800a3ac <HAL_RCC_GetSysClockFreq+0x158>)
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	f003 030c 	and.w	r3, r3, #12
 800a272:	2b04      	cmp	r3, #4
 800a274:	d007      	beq.n	800a286 <HAL_RCC_GetSysClockFreq+0x32>
 800a276:	2b08      	cmp	r3, #8
 800a278:	d008      	beq.n	800a28c <HAL_RCC_GetSysClockFreq+0x38>
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f040 808d 	bne.w	800a39a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a280:	4b4b      	ldr	r3, [pc, #300]	; (800a3b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a282:	60bb      	str	r3, [r7, #8]
      break;
 800a284:	e08c      	b.n	800a3a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a286:	4b4b      	ldr	r3, [pc, #300]	; (800a3b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800a288:	60bb      	str	r3, [r7, #8]
      break;
 800a28a:	e089      	b.n	800a3a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a28c:	4b47      	ldr	r3, [pc, #284]	; (800a3ac <HAL_RCC_GetSysClockFreq+0x158>)
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a294:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a296:	4b45      	ldr	r3, [pc, #276]	; (800a3ac <HAL_RCC_GetSysClockFreq+0x158>)
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d023      	beq.n	800a2ea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a2a2:	4b42      	ldr	r3, [pc, #264]	; (800a3ac <HAL_RCC_GetSysClockFreq+0x158>)
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	099b      	lsrs	r3, r3, #6
 800a2a8:	f04f 0400 	mov.w	r4, #0
 800a2ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a2b0:	f04f 0200 	mov.w	r2, #0
 800a2b4:	ea03 0501 	and.w	r5, r3, r1
 800a2b8:	ea04 0602 	and.w	r6, r4, r2
 800a2bc:	4a3d      	ldr	r2, [pc, #244]	; (800a3b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800a2be:	fb02 f106 	mul.w	r1, r2, r6
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	fb02 f205 	mul.w	r2, r2, r5
 800a2c8:	440a      	add	r2, r1
 800a2ca:	493a      	ldr	r1, [pc, #232]	; (800a3b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800a2cc:	fba5 0101 	umull	r0, r1, r5, r1
 800a2d0:	1853      	adds	r3, r2, r1
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f04f 0400 	mov.w	r4, #0
 800a2da:	461a      	mov	r2, r3
 800a2dc:	4623      	mov	r3, r4
 800a2de:	f7f6 f807 	bl	80002f0 <__aeabi_uldivmod>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	460c      	mov	r4, r1
 800a2e6:	60fb      	str	r3, [r7, #12]
 800a2e8:	e049      	b.n	800a37e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a2ea:	4b30      	ldr	r3, [pc, #192]	; (800a3ac <HAL_RCC_GetSysClockFreq+0x158>)
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	099b      	lsrs	r3, r3, #6
 800a2f0:	f04f 0400 	mov.w	r4, #0
 800a2f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a2f8:	f04f 0200 	mov.w	r2, #0
 800a2fc:	ea03 0501 	and.w	r5, r3, r1
 800a300:	ea04 0602 	and.w	r6, r4, r2
 800a304:	4629      	mov	r1, r5
 800a306:	4632      	mov	r2, r6
 800a308:	f04f 0300 	mov.w	r3, #0
 800a30c:	f04f 0400 	mov.w	r4, #0
 800a310:	0154      	lsls	r4, r2, #5
 800a312:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a316:	014b      	lsls	r3, r1, #5
 800a318:	4619      	mov	r1, r3
 800a31a:	4622      	mov	r2, r4
 800a31c:	1b49      	subs	r1, r1, r5
 800a31e:	eb62 0206 	sbc.w	r2, r2, r6
 800a322:	f04f 0300 	mov.w	r3, #0
 800a326:	f04f 0400 	mov.w	r4, #0
 800a32a:	0194      	lsls	r4, r2, #6
 800a32c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a330:	018b      	lsls	r3, r1, #6
 800a332:	1a5b      	subs	r3, r3, r1
 800a334:	eb64 0402 	sbc.w	r4, r4, r2
 800a338:	f04f 0100 	mov.w	r1, #0
 800a33c:	f04f 0200 	mov.w	r2, #0
 800a340:	00e2      	lsls	r2, r4, #3
 800a342:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a346:	00d9      	lsls	r1, r3, #3
 800a348:	460b      	mov	r3, r1
 800a34a:	4614      	mov	r4, r2
 800a34c:	195b      	adds	r3, r3, r5
 800a34e:	eb44 0406 	adc.w	r4, r4, r6
 800a352:	f04f 0100 	mov.w	r1, #0
 800a356:	f04f 0200 	mov.w	r2, #0
 800a35a:	02a2      	lsls	r2, r4, #10
 800a35c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a360:	0299      	lsls	r1, r3, #10
 800a362:	460b      	mov	r3, r1
 800a364:	4614      	mov	r4, r2
 800a366:	4618      	mov	r0, r3
 800a368:	4621      	mov	r1, r4
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f04f 0400 	mov.w	r4, #0
 800a370:	461a      	mov	r2, r3
 800a372:	4623      	mov	r3, r4
 800a374:	f7f5 ffbc 	bl	80002f0 <__aeabi_uldivmod>
 800a378:	4603      	mov	r3, r0
 800a37a:	460c      	mov	r4, r1
 800a37c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a37e:	4b0b      	ldr	r3, [pc, #44]	; (800a3ac <HAL_RCC_GetSysClockFreq+0x158>)
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	0c1b      	lsrs	r3, r3, #16
 800a384:	f003 0303 	and.w	r3, r3, #3
 800a388:	3301      	adds	r3, #1
 800a38a:	005b      	lsls	r3, r3, #1
 800a38c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	fbb2 f3f3 	udiv	r3, r2, r3
 800a396:	60bb      	str	r3, [r7, #8]
      break;
 800a398:	e002      	b.n	800a3a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a39a:	4b05      	ldr	r3, [pc, #20]	; (800a3b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a39c:	60bb      	str	r3, [r7, #8]
      break;
 800a39e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a3a0:	68bb      	ldr	r3, [r7, #8]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3714      	adds	r7, #20
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	40023800 	.word	0x40023800
 800a3b0:	00f42400 	.word	0x00f42400
 800a3b4:	017d7840 	.word	0x017d7840

0800a3b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a3bc:	4b03      	ldr	r3, [pc, #12]	; (800a3cc <HAL_RCC_GetHCLKFreq+0x14>)
 800a3be:	681b      	ldr	r3, [r3, #0]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	20000188 	.word	0x20000188

0800a3d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a3d4:	f7ff fff0 	bl	800a3b8 <HAL_RCC_GetHCLKFreq>
 800a3d8:	4601      	mov	r1, r0
 800a3da:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	0a9b      	lsrs	r3, r3, #10
 800a3e0:	f003 0307 	and.w	r3, r3, #7
 800a3e4:	4a03      	ldr	r2, [pc, #12]	; (800a3f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a3e6:	5cd3      	ldrb	r3, [r2, r3]
 800a3e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	40023800 	.word	0x40023800
 800a3f4:	08015040 	.word	0x08015040

0800a3f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a3fc:	f7ff ffdc 	bl	800a3b8 <HAL_RCC_GetHCLKFreq>
 800a400:	4601      	mov	r1, r0
 800a402:	4b05      	ldr	r3, [pc, #20]	; (800a418 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	0b5b      	lsrs	r3, r3, #13
 800a408:	f003 0307 	and.w	r3, r3, #7
 800a40c:	4a03      	ldr	r2, [pc, #12]	; (800a41c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a40e:	5cd3      	ldrb	r3, [r2, r3]
 800a410:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a414:	4618      	mov	r0, r3
 800a416:	bd80      	pop	{r7, pc}
 800a418:	40023800 	.word	0x40023800
 800a41c:	08015040 	.word	0x08015040

0800a420 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	220f      	movs	r2, #15
 800a42e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a430:	4b12      	ldr	r3, [pc, #72]	; (800a47c <HAL_RCC_GetClockConfig+0x5c>)
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f003 0203 	and.w	r2, r3, #3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a43c:	4b0f      	ldr	r3, [pc, #60]	; (800a47c <HAL_RCC_GetClockConfig+0x5c>)
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a448:	4b0c      	ldr	r3, [pc, #48]	; (800a47c <HAL_RCC_GetClockConfig+0x5c>)
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a454:	4b09      	ldr	r3, [pc, #36]	; (800a47c <HAL_RCC_GetClockConfig+0x5c>)
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	08db      	lsrs	r3, r3, #3
 800a45a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a462:	4b07      	ldr	r3, [pc, #28]	; (800a480 <HAL_RCC_GetClockConfig+0x60>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f003 020f 	and.w	r2, r3, #15
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	601a      	str	r2, [r3, #0]
}
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	40023800 	.word	0x40023800
 800a480:	40023c00 	.word	0x40023c00

0800a484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a48c:	2300      	movs	r3, #0
 800a48e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a490:	2300      	movs	r3, #0
 800a492:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a494:	2300      	movs	r3, #0
 800a496:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a498:	2300      	movs	r3, #0
 800a49a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a49c:	2300      	movs	r3, #0
 800a49e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 0301 	and.w	r3, r3, #1
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d012      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a4ac:	4b69      	ldr	r3, [pc, #420]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	4a68      	ldr	r2, [pc, #416]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a4b6:	6093      	str	r3, [r2, #8]
 800a4b8:	4b66      	ldr	r3, [pc, #408]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4ba:	689a      	ldr	r2, [r3, #8]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c0:	4964      	ldr	r1, [pc, #400]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d101      	bne.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d017      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a4de:	4b5d      	ldr	r3, [pc, #372]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ec:	4959      	ldr	r1, [pc, #356]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4fc:	d101      	bne.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a4fe:	2301      	movs	r3, #1
 800a500:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a50a:	2301      	movs	r3, #1
 800a50c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d017      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a51a:	4b4e      	ldr	r3, [pc, #312]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a51c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a520:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a528:	494a      	ldr	r1, [pc, #296]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a52a:	4313      	orrs	r3, r2
 800a52c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a538:	d101      	bne.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a53a:	2301      	movs	r3, #1
 800a53c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a542:	2b00      	cmp	r3, #0
 800a544:	d101      	bne.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a546:	2301      	movs	r3, #1
 800a548:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d001      	beq.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a556:	2301      	movs	r3, #1
 800a558:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 0320 	and.w	r3, r3, #32
 800a562:	2b00      	cmp	r3, #0
 800a564:	f000 808b 	beq.w	800a67e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a568:	4b3a      	ldr	r3, [pc, #232]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56c:	4a39      	ldr	r2, [pc, #228]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a56e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a572:	6413      	str	r3, [r2, #64]	; 0x40
 800a574:	4b37      	ldr	r3, [pc, #220]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a57c:	60bb      	str	r3, [r7, #8]
 800a57e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a580:	4b35      	ldr	r3, [pc, #212]	; (800a658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a34      	ldr	r2, [pc, #208]	; (800a658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a58a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a58c:	f7fc ff80 	bl	8007490 <HAL_GetTick>
 800a590:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a592:	e008      	b.n	800a5a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a594:	f7fc ff7c 	bl	8007490 <HAL_GetTick>
 800a598:	4602      	mov	r2, r0
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	2b64      	cmp	r3, #100	; 0x64
 800a5a0:	d901      	bls.n	800a5a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e38d      	b.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a5a6:	4b2c      	ldr	r3, [pc, #176]	; (800a658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d0f0      	beq.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a5b2:	4b28      	ldr	r3, [pc, #160]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d035      	beq.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d02e      	beq.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a5d0:	4b20      	ldr	r3, [pc, #128]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a5da:	4b1e      	ldr	r3, [pc, #120]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5de:	4a1d      	ldr	r2, [pc, #116]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5e4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a5e6:	4b1b      	ldr	r3, [pc, #108]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ea:	4a1a      	ldr	r2, [pc, #104]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a5f2:	4a18      	ldr	r2, [pc, #96]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a5f8:	4b16      	ldr	r3, [pc, #88]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	2b01      	cmp	r3, #1
 800a602:	d114      	bne.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a604:	f7fc ff44 	bl	8007490 <HAL_GetTick>
 800a608:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a60a:	e00a      	b.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a60c:	f7fc ff40 	bl	8007490 <HAL_GetTick>
 800a610:	4602      	mov	r2, r0
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	1ad3      	subs	r3, r2, r3
 800a616:	f241 3288 	movw	r2, #5000	; 0x1388
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d901      	bls.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a61e:	2303      	movs	r3, #3
 800a620:	e34f      	b.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a622:	4b0c      	ldr	r3, [pc, #48]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a626:	f003 0302 	and.w	r3, r3, #2
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d0ee      	beq.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a63a:	d111      	bne.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a63c:	4b05      	ldr	r3, [pc, #20]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a648:	4b04      	ldr	r3, [pc, #16]	; (800a65c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a64a:	400b      	ands	r3, r1
 800a64c:	4901      	ldr	r1, [pc, #4]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a64e:	4313      	orrs	r3, r2
 800a650:	608b      	str	r3, [r1, #8]
 800a652:	e00b      	b.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a654:	40023800 	.word	0x40023800
 800a658:	40007000 	.word	0x40007000
 800a65c:	0ffffcff 	.word	0x0ffffcff
 800a660:	4bb3      	ldr	r3, [pc, #716]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	4ab2      	ldr	r2, [pc, #712]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a666:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a66a:	6093      	str	r3, [r2, #8]
 800a66c:	4bb0      	ldr	r3, [pc, #704]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a66e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a678:	49ad      	ldr	r1, [pc, #692]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a67a:	4313      	orrs	r3, r2
 800a67c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 0310 	and.w	r3, r3, #16
 800a686:	2b00      	cmp	r3, #0
 800a688:	d010      	beq.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a68a:	4ba9      	ldr	r3, [pc, #676]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a68c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a690:	4aa7      	ldr	r2, [pc, #668]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a696:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a69a:	4ba5      	ldr	r3, [pc, #660]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a69c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a4:	49a2      	ldr	r1, [pc, #648]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00a      	beq.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a6b8:	4b9d      	ldr	r3, [pc, #628]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6c6:	499a      	ldr	r1, [pc, #616]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00a      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a6da:	4b95      	ldr	r3, [pc, #596]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6e8:	4991      	ldr	r1, [pc, #580]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00a      	beq.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a6fc:	4b8c      	ldr	r3, [pc, #560]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a702:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a70a:	4989      	ldr	r1, [pc, #548]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a70c:	4313      	orrs	r3, r2
 800a70e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00a      	beq.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a71e:	4b84      	ldr	r3, [pc, #528]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a724:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a72c:	4980      	ldr	r1, [pc, #512]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a72e:	4313      	orrs	r3, r2
 800a730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00a      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a740:	4b7b      	ldr	r3, [pc, #492]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a746:	f023 0203 	bic.w	r2, r3, #3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a74e:	4978      	ldr	r1, [pc, #480]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a750:	4313      	orrs	r3, r2
 800a752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00a      	beq.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a762:	4b73      	ldr	r3, [pc, #460]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a768:	f023 020c 	bic.w	r2, r3, #12
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a770:	496f      	ldr	r1, [pc, #444]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a772:	4313      	orrs	r3, r2
 800a774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00a      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a784:	4b6a      	ldr	r3, [pc, #424]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a78a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a792:	4967      	ldr	r1, [pc, #412]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a794:	4313      	orrs	r3, r2
 800a796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00a      	beq.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a7a6:	4b62      	ldr	r3, [pc, #392]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a7a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7b4:	495e      	ldr	r1, [pc, #376]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00a      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a7c8:	4b59      	ldr	r3, [pc, #356]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a7ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d6:	4956      	ldr	r1, [pc, #344]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00a      	beq.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a7ea:	4b51      	ldr	r3, [pc, #324]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a7ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f8:	494d      	ldr	r1, [pc, #308]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00a      	beq.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a80c:	4b48      	ldr	r3, [pc, #288]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a812:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a81a:	4945      	ldr	r1, [pc, #276]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a81c:	4313      	orrs	r3, r2
 800a81e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00a      	beq.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a82e:	4b40      	ldr	r3, [pc, #256]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a834:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a83c:	493c      	ldr	r1, [pc, #240]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a83e:	4313      	orrs	r3, r2
 800a840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00a      	beq.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a850:	4b37      	ldr	r3, [pc, #220]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a856:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a85e:	4934      	ldr	r1, [pc, #208]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a860:	4313      	orrs	r3, r2
 800a862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d011      	beq.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a872:	4b2f      	ldr	r3, [pc, #188]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a878:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a880:	492b      	ldr	r1, [pc, #172]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a882:	4313      	orrs	r3, r2
 800a884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a88c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a890:	d101      	bne.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a892:	2301      	movs	r3, #1
 800a894:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 0308 	and.w	r3, r3, #8
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00a      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a8b2:	4b1f      	ldr	r3, [pc, #124]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a8b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8c0:	491b      	ldr	r1, [pc, #108]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00b      	beq.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a8d4:	4b16      	ldr	r3, [pc, #88]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a8d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8e4:	4912      	ldr	r1, [pc, #72]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00b      	beq.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800a8f8:	4b0d      	ldr	r3, [pc, #52]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a8fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a908:	4909      	ldr	r1, [pc, #36]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a90a:	4313      	orrs	r3, r2
 800a90c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00f      	beq.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a91c:	4b04      	ldr	r3, [pc, #16]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a91e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a922:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a92c:	e002      	b.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800a92e:	bf00      	nop
 800a930:	40023800 	.word	0x40023800
 800a934:	4985      	ldr	r1, [pc, #532]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a936:	4313      	orrs	r3, r2
 800a938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00b      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a948:	4b80      	ldr	r3, [pc, #512]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a94a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a94e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a958:	497c      	ldr	r1, [pc, #496]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a95a:	4313      	orrs	r3, r2
 800a95c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	2b01      	cmp	r3, #1
 800a964:	d005      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a96e:	f040 80d6 	bne.w	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a972:	4b76      	ldr	r3, [pc, #472]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a75      	ldr	r2, [pc, #468]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a978:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a97c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a97e:	f7fc fd87 	bl	8007490 <HAL_GetTick>
 800a982:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a984:	e008      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a986:	f7fc fd83 	bl	8007490 <HAL_GetTick>
 800a98a:	4602      	mov	r2, r0
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	2b64      	cmp	r3, #100	; 0x64
 800a992:	d901      	bls.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a994:	2303      	movs	r3, #3
 800a996:	e194      	b.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a998:	4b6c      	ldr	r3, [pc, #432]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1f0      	bne.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f003 0301 	and.w	r3, r3, #1
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d021      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d11d      	bne.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a9b8:	4b64      	ldr	r3, [pc, #400]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a9ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9be:	0c1b      	lsrs	r3, r3, #16
 800a9c0:	f003 0303 	and.w	r3, r3, #3
 800a9c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a9c6:	4b61      	ldr	r3, [pc, #388]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a9c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9cc:	0e1b      	lsrs	r3, r3, #24
 800a9ce:	f003 030f 	and.w	r3, r3, #15
 800a9d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	019a      	lsls	r2, r3, #6
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	041b      	lsls	r3, r3, #16
 800a9de:	431a      	orrs	r2, r3
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	061b      	lsls	r3, r3, #24
 800a9e4:	431a      	orrs	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	071b      	lsls	r3, r3, #28
 800a9ec:	4957      	ldr	r1, [pc, #348]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d004      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x586>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa08:	d00a      	beq.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d02e      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa1e:	d129      	bne.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800aa20:	4b4a      	ldr	r3, [pc, #296]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aa22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa26:	0c1b      	lsrs	r3, r3, #16
 800aa28:	f003 0303 	and.w	r3, r3, #3
 800aa2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800aa2e:	4b47      	ldr	r3, [pc, #284]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aa30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa34:	0f1b      	lsrs	r3, r3, #28
 800aa36:	f003 0307 	and.w	r3, r3, #7
 800aa3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	019a      	lsls	r2, r3, #6
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	041b      	lsls	r3, r3, #16
 800aa46:	431a      	orrs	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	061b      	lsls	r3, r3, #24
 800aa4e:	431a      	orrs	r2, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	071b      	lsls	r3, r3, #28
 800aa54:	493d      	ldr	r1, [pc, #244]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aa56:	4313      	orrs	r3, r2
 800aa58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800aa5c:	4b3b      	ldr	r3, [pc, #236]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aa5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa62:	f023 021f 	bic.w	r2, r3, #31
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	4937      	ldr	r1, [pc, #220]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d01d      	beq.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800aa80:	4b32      	ldr	r3, [pc, #200]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aa82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa86:	0e1b      	lsrs	r3, r3, #24
 800aa88:	f003 030f 	and.w	r3, r3, #15
 800aa8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800aa8e:	4b2f      	ldr	r3, [pc, #188]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aa90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa94:	0f1b      	lsrs	r3, r3, #28
 800aa96:	f003 0307 	and.w	r3, r3, #7
 800aa9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	019a      	lsls	r2, r3, #6
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	041b      	lsls	r3, r3, #16
 800aaa8:	431a      	orrs	r2, r3
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	061b      	lsls	r3, r3, #24
 800aaae:	431a      	orrs	r2, r3
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	071b      	lsls	r3, r3, #28
 800aab4:	4925      	ldr	r1, [pc, #148]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aab6:	4313      	orrs	r3, r2
 800aab8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d011      	beq.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	019a      	lsls	r2, r3, #6
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	041b      	lsls	r3, r3, #16
 800aad4:	431a      	orrs	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	061b      	lsls	r3, r3, #24
 800aadc:	431a      	orrs	r2, r3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	071b      	lsls	r3, r3, #28
 800aae4:	4919      	ldr	r1, [pc, #100]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aae6:	4313      	orrs	r3, r2
 800aae8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800aaec:	4b17      	ldr	r3, [pc, #92]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a16      	ldr	r2, [pc, #88]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aaf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aaf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aaf8:	f7fc fcca 	bl	8007490 <HAL_GetTick>
 800aafc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800aafe:	e008      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ab00:	f7fc fcc6 	bl	8007490 <HAL_GetTick>
 800ab04:	4602      	mov	r2, r0
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	2b64      	cmp	r3, #100	; 0x64
 800ab0c:	d901      	bls.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	e0d7      	b.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ab12:	4b0e      	ldr	r3, [pc, #56]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d0f0      	beq.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	f040 80cd 	bne.w	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ab26:	4b09      	ldr	r3, [pc, #36]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a08      	ldr	r2, [pc, #32]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ab2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab32:	f7fc fcad 	bl	8007490 <HAL_GetTick>
 800ab36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ab38:	e00a      	b.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ab3a:	f7fc fca9 	bl	8007490 <HAL_GetTick>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	1ad3      	subs	r3, r2, r3
 800ab44:	2b64      	cmp	r3, #100	; 0x64
 800ab46:	d903      	bls.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ab48:	2303      	movs	r3, #3
 800ab4a:	e0ba      	b.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800ab4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ab50:	4b5e      	ldr	r3, [pc, #376]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab5c:	d0ed      	beq.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d003      	beq.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d009      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d02e      	beq.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d12a      	bne.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ab86:	4b51      	ldr	r3, [pc, #324]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ab88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab8c:	0c1b      	lsrs	r3, r3, #16
 800ab8e:	f003 0303 	and.w	r3, r3, #3
 800ab92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ab94:	4b4d      	ldr	r3, [pc, #308]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ab96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab9a:	0f1b      	lsrs	r3, r3, #28
 800ab9c:	f003 0307 	and.w	r3, r3, #7
 800aba0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	019a      	lsls	r2, r3, #6
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	041b      	lsls	r3, r3, #16
 800abac:	431a      	orrs	r2, r3
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	061b      	lsls	r3, r3, #24
 800abb4:	431a      	orrs	r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	071b      	lsls	r3, r3, #28
 800abba:	4944      	ldr	r1, [pc, #272]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800abbc:	4313      	orrs	r3, r2
 800abbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800abc2:	4b42      	ldr	r3, [pc, #264]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800abc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd0:	3b01      	subs	r3, #1
 800abd2:	021b      	lsls	r3, r3, #8
 800abd4:	493d      	ldr	r1, [pc, #244]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800abd6:	4313      	orrs	r3, r2
 800abd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d022      	beq.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abf0:	d11d      	bne.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800abf2:	4b36      	ldr	r3, [pc, #216]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800abf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf8:	0e1b      	lsrs	r3, r3, #24
 800abfa:	f003 030f 	and.w	r3, r3, #15
 800abfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ac00:	4b32      	ldr	r3, [pc, #200]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ac02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac06:	0f1b      	lsrs	r3, r3, #28
 800ac08:	f003 0307 	and.w	r3, r3, #7
 800ac0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	695b      	ldr	r3, [r3, #20]
 800ac12:	019a      	lsls	r2, r3, #6
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a1b      	ldr	r3, [r3, #32]
 800ac18:	041b      	lsls	r3, r3, #16
 800ac1a:	431a      	orrs	r2, r3
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	061b      	lsls	r3, r3, #24
 800ac20:	431a      	orrs	r2, r3
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	071b      	lsls	r3, r3, #28
 800ac26:	4929      	ldr	r1, [pc, #164]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f003 0308 	and.w	r3, r3, #8
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d028      	beq.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ac3a:	4b24      	ldr	r3, [pc, #144]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ac3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac40:	0e1b      	lsrs	r3, r3, #24
 800ac42:	f003 030f 	and.w	r3, r3, #15
 800ac46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ac48:	4b20      	ldr	r3, [pc, #128]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ac4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4e:	0c1b      	lsrs	r3, r3, #16
 800ac50:	f003 0303 	and.w	r3, r3, #3
 800ac54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	695b      	ldr	r3, [r3, #20]
 800ac5a:	019a      	lsls	r2, r3, #6
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	041b      	lsls	r3, r3, #16
 800ac60:	431a      	orrs	r2, r3
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	061b      	lsls	r3, r3, #24
 800ac66:	431a      	orrs	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	69db      	ldr	r3, [r3, #28]
 800ac6c:	071b      	lsls	r3, r3, #28
 800ac6e:	4917      	ldr	r1, [pc, #92]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ac70:	4313      	orrs	r3, r2
 800ac72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ac76:	4b15      	ldr	r3, [pc, #84]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ac78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac84:	4911      	ldr	r1, [pc, #68]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ac8c:	4b0f      	ldr	r3, [pc, #60]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a0e      	ldr	r2, [pc, #56]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ac92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac98:	f7fc fbfa 	bl	8007490 <HAL_GetTick>
 800ac9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ac9e:	e008      	b.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800aca0:	f7fc fbf6 	bl	8007490 <HAL_GetTick>
 800aca4:	4602      	mov	r2, r0
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	2b64      	cmp	r3, #100	; 0x64
 800acac:	d901      	bls.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800acae:	2303      	movs	r3, #3
 800acb0:	e007      	b.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800acb2:	4b06      	ldr	r3, [pc, #24]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acbe:	d1ef      	bne.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3720      	adds	r7, #32
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	40023800 	.word	0x40023800

0800acd0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d101      	bne.n	800ace2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e06b      	b.n	800adba <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	7f5b      	ldrb	r3, [r3, #29]
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d105      	bne.n	800acf8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f7fb fee2 	bl	8006abc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2202      	movs	r2, #2
 800acfc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	22ca      	movs	r2, #202	; 0xca
 800ad04:	625a      	str	r2, [r3, #36]	; 0x24
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2253      	movs	r2, #83	; 0x53
 800ad0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f85a 	bl	800adc8 <RTC_EnterInitMode>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d008      	beq.n	800ad2c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	22ff      	movs	r2, #255	; 0xff
 800ad20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2204      	movs	r2, #4
 800ad26:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e046      	b.n	800adba <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	6899      	ldr	r1, [r3, #8]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	4b23      	ldr	r3, [pc, #140]	; (800adc4 <HAL_RTC_Init+0xf4>)
 800ad38:	400b      	ands	r3, r1
 800ad3a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	6899      	ldr	r1, [r3, #8]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685a      	ldr	r2, [r3, #4]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	431a      	orrs	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	695b      	ldr	r3, [r3, #20]
 800ad50:	431a      	orrs	r2, r3
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	430a      	orrs	r2, r1
 800ad58:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	68d2      	ldr	r2, [r2, #12]
 800ad62:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	6919      	ldr	r1, [r3, #16]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	041a      	lsls	r2, r3, #16
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	430a      	orrs	r2, r1
 800ad76:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68da      	ldr	r2, [r3, #12]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad86:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f022 0208 	bic.w	r2, r2, #8
 800ad96:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	699a      	ldr	r2, [r3, #24]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	430a      	orrs	r2, r1
 800ada8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	22ff      	movs	r2, #255	; 0xff
 800adb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2201      	movs	r2, #1
 800adb6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800adb8:	2300      	movs	r3, #0
  }
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	ff8fffbf 	.word	0xff8fffbf

0800adc8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800add0:	2300      	movs	r3, #0
 800add2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d119      	bne.n	800ae16 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f04f 32ff 	mov.w	r2, #4294967295
 800adea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800adec:	f7fc fb50 	bl	8007490 <HAL_GetTick>
 800adf0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800adf2:	e009      	b.n	800ae08 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800adf4:	f7fc fb4c 	bl	8007490 <HAL_GetTick>
 800adf8:	4602      	mov	r2, r0
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae02:	d901      	bls.n	800ae08 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800ae04:	2303      	movs	r3, #3
 800ae06:	e007      	b.n	800ae18 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d0ee      	beq.n	800adf4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d101      	bne.n	800ae32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e084      	b.n	800af3c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d106      	bne.n	800ae52 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f7fb fe4f 	bl	8006af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2202      	movs	r2, #2
 800ae56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae68:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ae72:	d902      	bls.n	800ae7a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ae74:	2300      	movs	r3, #0
 800ae76:	60fb      	str	r3, [r7, #12]
 800ae78:	e002      	b.n	800ae80 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ae7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae7e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ae88:	d007      	beq.n	800ae9a <HAL_SPI_Init+0x7a>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ae92:	d002      	beq.n	800ae9a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10b      	bne.n	800aeba <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aeaa:	d903      	bls.n	800aeb4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2202      	movs	r2, #2
 800aeb0:	631a      	str	r2, [r3, #48]	; 0x30
 800aeb2:	e002      	b.n	800aeba <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685a      	ldr	r2, [r3, #4]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	431a      	orrs	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	431a      	orrs	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	431a      	orrs	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	699b      	ldr	r3, [r3, #24]
 800aed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aed8:	431a      	orrs	r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	69db      	ldr	r3, [r3, #28]
 800aede:	431a      	orrs	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6a1b      	ldr	r3, [r3, #32]
 800aee4:	ea42 0103 	orr.w	r1, r2, r3
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	430a      	orrs	r2, r1
 800aef2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	699b      	ldr	r3, [r3, #24]
 800aef8:	0c1b      	lsrs	r3, r3, #16
 800aefa:	f003 0204 	and.w	r2, r3, #4
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af02:	431a      	orrs	r2, r3
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af08:	431a      	orrs	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	ea42 0103 	orr.w	r1, r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	430a      	orrs	r2, r1
 800af1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	69da      	ldr	r2, [r3, #28]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2201      	movs	r2, #1
 800af36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b088      	sub	sp, #32
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	603b      	str	r3, [r7, #0]
 800af50:	4613      	mov	r3, r2
 800af52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af54:	2300      	movs	r3, #0
 800af56:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d101      	bne.n	800af66 <HAL_SPI_Transmit+0x22>
 800af62:	2302      	movs	r3, #2
 800af64:	e150      	b.n	800b208 <HAL_SPI_Transmit+0x2c4>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2201      	movs	r2, #1
 800af6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af6e:	f7fc fa8f 	bl	8007490 <HAL_GetTick>
 800af72:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800af74:	88fb      	ldrh	r3, [r7, #6]
 800af76:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	2b01      	cmp	r3, #1
 800af82:	d002      	beq.n	800af8a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800af84:	2302      	movs	r3, #2
 800af86:	77fb      	strb	r3, [r7, #31]
    goto error;
 800af88:	e135      	b.n	800b1f6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d002      	beq.n	800af96 <HAL_SPI_Transmit+0x52>
 800af90:	88fb      	ldrh	r3, [r7, #6]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d102      	bne.n	800af9c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800af96:	2301      	movs	r3, #1
 800af98:	77fb      	strb	r3, [r7, #31]
    goto error;
 800af9a:	e12c      	b.n	800b1f6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2203      	movs	r2, #3
 800afa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2200      	movs	r2, #0
 800afa8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	88fa      	ldrh	r2, [r7, #6]
 800afb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	88fa      	ldrh	r2, [r7, #6]
 800afba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2200      	movs	r2, #0
 800afc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2200      	movs	r2, #0
 800afd6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2200      	movs	r2, #0
 800afdc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afe6:	d107      	bne.n	800aff8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aff6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b002:	2b40      	cmp	r3, #64	; 0x40
 800b004:	d007      	beq.n	800b016 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b014:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b01e:	d94b      	bls.n	800b0b8 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d002      	beq.n	800b02e <HAL_SPI_Transmit+0xea>
 800b028:	8afb      	ldrh	r3, [r7, #22]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d13e      	bne.n	800b0ac <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b032:	881a      	ldrh	r2, [r3, #0]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03e:	1c9a      	adds	r2, r3, #2
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b048:	b29b      	uxth	r3, r3
 800b04a:	3b01      	subs	r3, #1
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b052:	e02b      	b.n	800b0ac <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	f003 0302 	and.w	r3, r3, #2
 800b05e:	2b02      	cmp	r3, #2
 800b060:	d112      	bne.n	800b088 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b066:	881a      	ldrh	r2, [r3, #0]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b072:	1c9a      	adds	r2, r3, #2
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	3b01      	subs	r3, #1
 800b080:	b29a      	uxth	r2, r3
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b086:	e011      	b.n	800b0ac <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b088:	f7fc fa02 	bl	8007490 <HAL_GetTick>
 800b08c:	4602      	mov	r2, r0
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	429a      	cmp	r2, r3
 800b096:	d803      	bhi.n	800b0a0 <HAL_SPI_Transmit+0x15c>
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09e:	d102      	bne.n	800b0a6 <HAL_SPI_Transmit+0x162>
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d102      	bne.n	800b0ac <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b0aa:	e0a4      	b.n	800b1f6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1ce      	bne.n	800b054 <HAL_SPI_Transmit+0x110>
 800b0b6:	e07c      	b.n	800b1b2 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d002      	beq.n	800b0c6 <HAL_SPI_Transmit+0x182>
 800b0c0:	8afb      	ldrh	r3, [r7, #22]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d170      	bne.n	800b1a8 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d912      	bls.n	800b0f6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d4:	881a      	ldrh	r2, [r3, #0]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e0:	1c9a      	adds	r2, r3, #2
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	3b02      	subs	r3, #2
 800b0ee:	b29a      	uxth	r2, r3
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b0f4:	e058      	b.n	800b1a8 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	330c      	adds	r3, #12
 800b100:	7812      	ldrb	r2, [r2, #0]
 800b102:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b108:	1c5a      	adds	r2, r3, #1
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b112:	b29b      	uxth	r3, r3
 800b114:	3b01      	subs	r3, #1
 800b116:	b29a      	uxth	r2, r3
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b11c:	e044      	b.n	800b1a8 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	f003 0302 	and.w	r3, r3, #2
 800b128:	2b02      	cmp	r3, #2
 800b12a:	d12b      	bne.n	800b184 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b130:	b29b      	uxth	r3, r3
 800b132:	2b01      	cmp	r3, #1
 800b134:	d912      	bls.n	800b15c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b13a:	881a      	ldrh	r2, [r3, #0]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b146:	1c9a      	adds	r2, r3, #2
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b150:	b29b      	uxth	r3, r3
 800b152:	3b02      	subs	r3, #2
 800b154:	b29a      	uxth	r2, r3
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b15a:	e025      	b.n	800b1a8 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	330c      	adds	r3, #12
 800b166:	7812      	ldrb	r2, [r2, #0]
 800b168:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16e:	1c5a      	adds	r2, r3, #1
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b178:	b29b      	uxth	r3, r3
 800b17a:	3b01      	subs	r3, #1
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b182:	e011      	b.n	800b1a8 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b184:	f7fc f984 	bl	8007490 <HAL_GetTick>
 800b188:	4602      	mov	r2, r0
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	1ad3      	subs	r3, r2, r3
 800b18e:	683a      	ldr	r2, [r7, #0]
 800b190:	429a      	cmp	r2, r3
 800b192:	d803      	bhi.n	800b19c <HAL_SPI_Transmit+0x258>
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b19a:	d102      	bne.n	800b1a2 <HAL_SPI_Transmit+0x25e>
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d102      	bne.n	800b1a8 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b1a6:	e026      	b.n	800b1f6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d1b5      	bne.n	800b11e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b1b2:	69ba      	ldr	r2, [r7, #24]
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f000 fa20 	bl	800b5fc <SPI_EndRxTxTransaction>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d002      	beq.n	800b1c8 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2220      	movs	r2, #32
 800b1c6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10a      	bne.n	800b1e6 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	613b      	str	r3, [r7, #16]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	613b      	str	r3, [r7, #16]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	613b      	str	r3, [r7, #16]
 800b1e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d002      	beq.n	800b1f4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	77fb      	strb	r3, [r7, #31]
 800b1f2:	e000      	b.n	800b1f6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 800b1f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2200      	movs	r2, #0
 800b202:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b206:	7ffb      	ldrb	r3, [r7, #31]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3720      	adds	r7, #32
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b088      	sub	sp, #32
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	099b      	lsrs	r3, r3, #6
 800b22c:	f003 0301 	and.w	r3, r3, #1
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10f      	bne.n	800b254 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00a      	beq.n	800b254 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	099b      	lsrs	r3, r3, #6
 800b242:	f003 0301 	and.w	r3, r3, #1
 800b246:	2b00      	cmp	r3, #0
 800b248:	d004      	beq.n	800b254 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	4798      	blx	r3
    return;
 800b252:	e0d8      	b.n	800b406 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	085b      	lsrs	r3, r3, #1
 800b258:	f003 0301 	and.w	r3, r3, #1
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00a      	beq.n	800b276 <HAL_SPI_IRQHandler+0x66>
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	09db      	lsrs	r3, r3, #7
 800b264:	f003 0301 	and.w	r3, r3, #1
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d004      	beq.n	800b276 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	4798      	blx	r3
    return;
 800b274:	e0c7      	b.n	800b406 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	095b      	lsrs	r3, r3, #5
 800b27a:	f003 0301 	and.w	r3, r3, #1
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10c      	bne.n	800b29c <HAL_SPI_IRQHandler+0x8c>
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	099b      	lsrs	r3, r3, #6
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d106      	bne.n	800b29c <HAL_SPI_IRQHandler+0x8c>
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	0a1b      	lsrs	r3, r3, #8
 800b292:	f003 0301 	and.w	r3, r3, #1
 800b296:	2b00      	cmp	r3, #0
 800b298:	f000 80b5 	beq.w	800b406 <HAL_SPI_IRQHandler+0x1f6>
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	095b      	lsrs	r3, r3, #5
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f000 80ae 	beq.w	800b406 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	099b      	lsrs	r3, r3, #6
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d023      	beq.n	800b2fe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	2b03      	cmp	r3, #3
 800b2c0:	d011      	beq.n	800b2e6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2c6:	f043 0204 	orr.w	r2, r3, #4
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	617b      	str	r3, [r7, #20]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	617b      	str	r3, [r7, #20]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	617b      	str	r3, [r7, #20]
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	e00b      	b.n	800b2fe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	613b      	str	r3, [r7, #16]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	613b      	str	r3, [r7, #16]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	613b      	str	r3, [r7, #16]
 800b2fa:	693b      	ldr	r3, [r7, #16]
        return;
 800b2fc:	e083      	b.n	800b406 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	095b      	lsrs	r3, r3, #5
 800b302:	f003 0301 	and.w	r3, r3, #1
 800b306:	2b00      	cmp	r3, #0
 800b308:	d014      	beq.n	800b334 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b30e:	f043 0201 	orr.w	r2, r3, #1
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b316:	2300      	movs	r3, #0
 800b318:	60fb      	str	r3, [r7, #12]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	60fb      	str	r3, [r7, #12]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b330:	601a      	str	r2, [r3, #0]
 800b332:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	0a1b      	lsrs	r3, r3, #8
 800b338:	f003 0301 	and.w	r3, r3, #1
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00c      	beq.n	800b35a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b344:	f043 0208 	orr.w	r2, r3, #8
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b34c:	2300      	movs	r3, #0
 800b34e:	60bb      	str	r3, [r7, #8]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	60bb      	str	r3, [r7, #8]
 800b358:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d050      	beq.n	800b404 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	685a      	ldr	r2, [r3, #4]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b370:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2201      	movs	r2, #1
 800b376:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	f003 0302 	and.w	r3, r3, #2
 800b380:	2b00      	cmp	r3, #0
 800b382:	d104      	bne.n	800b38e <HAL_SPI_IRQHandler+0x17e>
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	f003 0301 	and.w	r3, r3, #1
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d034      	beq.n	800b3f8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	685a      	ldr	r2, [r3, #4]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f022 0203 	bic.w	r2, r2, #3
 800b39c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d011      	beq.n	800b3ca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3aa:	4a18      	ldr	r2, [pc, #96]	; (800b40c <HAL_SPI_IRQHandler+0x1fc>)
 800b3ac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7fd f8a6 	bl	8008504 <HAL_DMA_Abort_IT>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d005      	beq.n	800b3ca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d016      	beq.n	800b400 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3d6:	4a0d      	ldr	r2, [pc, #52]	; (800b40c <HAL_SPI_IRQHandler+0x1fc>)
 800b3d8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fd f890 	bl	8008504 <HAL_DMA_Abort_IT>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00a      	beq.n	800b400 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800b3f6:	e003      	b.n	800b400 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 f809 	bl	800b410 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b3fe:	e000      	b.n	800b402 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800b400:	bf00      	nop
    return;
 800b402:	bf00      	nop
 800b404:	bf00      	nop
  }
}
 800b406:	3720      	adds	r7, #32
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	0800b425 	.word	0x0800b425

0800b410 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b430:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2200      	movs	r2, #0
 800b436:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2200      	movs	r2, #0
 800b43e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f7ff ffe5 	bl	800b410 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b446:	bf00      	nop
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b084      	sub	sp, #16
 800b452:	af00      	add	r7, sp, #0
 800b454:	60f8      	str	r0, [r7, #12]
 800b456:	60b9      	str	r1, [r7, #8]
 800b458:	603b      	str	r3, [r7, #0]
 800b45a:	4613      	mov	r3, r2
 800b45c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b45e:	e04c      	b.n	800b4fa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b466:	d048      	beq.n	800b4fa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b468:	f7fc f812 	bl	8007490 <HAL_GetTick>
 800b46c:	4602      	mov	r2, r0
 800b46e:	69bb      	ldr	r3, [r7, #24]
 800b470:	1ad3      	subs	r3, r2, r3
 800b472:	683a      	ldr	r2, [r7, #0]
 800b474:	429a      	cmp	r2, r3
 800b476:	d902      	bls.n	800b47e <SPI_WaitFlagStateUntilTimeout+0x30>
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d13d      	bne.n	800b4fa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	685a      	ldr	r2, [r3, #4]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b48c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b496:	d111      	bne.n	800b4bc <SPI_WaitFlagStateUntilTimeout+0x6e>
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4a0:	d004      	beq.n	800b4ac <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4aa:	d107      	bne.n	800b4bc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4c4:	d10f      	bne.n	800b4e6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b4d4:	601a      	str	r2, [r3, #0]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b4e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	e00f      	b.n	800b51a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	689a      	ldr	r2, [r3, #8]
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	4013      	ands	r3, r2
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	429a      	cmp	r2, r3
 800b508:	bf0c      	ite	eq
 800b50a:	2301      	moveq	r3, #1
 800b50c:	2300      	movne	r3, #0
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	461a      	mov	r2, r3
 800b512:	79fb      	ldrb	r3, [r7, #7]
 800b514:	429a      	cmp	r2, r3
 800b516:	d1a3      	bne.n	800b460 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b084      	sub	sp, #16
 800b526:	af00      	add	r7, sp, #0
 800b528:	60f8      	str	r0, [r7, #12]
 800b52a:	60b9      	str	r1, [r7, #8]
 800b52c:	607a      	str	r2, [r7, #4]
 800b52e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800b530:	e057      	b.n	800b5e2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b538:	d106      	bne.n	800b548 <SPI_WaitFifoStateUntilTimeout+0x26>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d103      	bne.n	800b548 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	330c      	adds	r3, #12
 800b546:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b54e:	d048      	beq.n	800b5e2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b550:	f7fb ff9e 	bl	8007490 <HAL_GetTick>
 800b554:	4602      	mov	r2, r0
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	1ad3      	subs	r3, r2, r3
 800b55a:	683a      	ldr	r2, [r7, #0]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d902      	bls.n	800b566 <SPI_WaitFifoStateUntilTimeout+0x44>
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d13d      	bne.n	800b5e2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	685a      	ldr	r2, [r3, #4]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b574:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b57e:	d111      	bne.n	800b5a4 <SPI_WaitFifoStateUntilTimeout+0x82>
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b588:	d004      	beq.n	800b594 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b592:	d107      	bne.n	800b5a4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5ac:	d10f      	bne.n	800b5ce <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b5bc:	601a      	str	r2, [r3, #0]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b5cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b5de:	2303      	movs	r3, #3
 800b5e0:	e008      	b.n	800b5f4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	689a      	ldr	r2, [r3, #8]
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	4013      	ands	r3, r2
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d19f      	bne.n	800b532 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af02      	add	r7, sp, #8
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	2200      	movs	r2, #0
 800b610:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f7ff ff84 	bl	800b522 <SPI_WaitFifoStateUntilTimeout>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d007      	beq.n	800b630 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b624:	f043 0220 	orr.w	r2, r3, #32
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b62c:	2303      	movs	r3, #3
 800b62e:	e027      	b.n	800b680 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2200      	movs	r2, #0
 800b638:	2180      	movs	r1, #128	; 0x80
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f7ff ff07 	bl	800b44e <SPI_WaitFlagStateUntilTimeout>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d007      	beq.n	800b656 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b64a:	f043 0220 	orr.w	r2, r3, #32
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b652:	2303      	movs	r3, #3
 800b654:	e014      	b.n	800b680 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	9300      	str	r3, [sp, #0]
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f7ff ff5d 	bl	800b522 <SPI_WaitFifoStateUntilTimeout>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d007      	beq.n	800b67e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b672:	f043 0220 	orr.w	r2, r3, #32
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b67a:	2303      	movs	r3, #3
 800b67c:	e000      	b.n	800b680 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d101      	bne.n	800b69a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b696:	2301      	movs	r3, #1
 800b698:	e01d      	b.n	800b6d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d106      	bne.n	800b6b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f7fb faba 	bl	8006c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2202      	movs	r2, #2
 800b6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	3304      	adds	r3, #4
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	4610      	mov	r0, r2
 800b6c8:	f000 fb82 	bl	800bdd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3708      	adds	r7, #8
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
	...

0800b6e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	68da      	ldr	r2, [r3, #12]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f042 0201 	orr.w	r2, r2, #1
 800b6f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	689a      	ldr	r2, [r3, #8]
 800b6fe:	4b0c      	ldr	r3, [pc, #48]	; (800b730 <HAL_TIM_Base_Start_IT+0x50>)
 800b700:	4013      	ands	r3, r2
 800b702:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2b06      	cmp	r3, #6
 800b708:	d00b      	beq.n	800b722 <HAL_TIM_Base_Start_IT+0x42>
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b710:	d007      	beq.n	800b722 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f042 0201 	orr.w	r2, r2, #1
 800b720:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3714      	adds	r7, #20
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr
 800b730:	00010007 	.word	0x00010007

0800b734 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d101      	bne.n	800b746 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b742:	2301      	movs	r3, #1
 800b744:	e01d      	b.n	800b782 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d106      	bne.n	800b760 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 f815 	bl	800b78a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2202      	movs	r2, #2
 800b764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	3304      	adds	r3, #4
 800b770:	4619      	mov	r1, r3
 800b772:	4610      	mov	r0, r2
 800b774:	f000 fb2c 	bl	800bdd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2201      	movs	r2, #1
 800b77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3708      	adds	r7, #8
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b78a:	b480      	push	{r7}
 800b78c:	b083      	sub	sp, #12
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b792:	bf00      	nop
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b082      	sub	sp, #8
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	f003 0302 	and.w	r3, r3, #2
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d122      	bne.n	800b7fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	f003 0302 	and.w	r3, r3, #2
 800b7be:	2b02      	cmp	r3, #2
 800b7c0:	d11b      	bne.n	800b7fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f06f 0202 	mvn.w	r2, #2
 800b7ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	699b      	ldr	r3, [r3, #24]
 800b7d8:	f003 0303 	and.w	r3, r3, #3
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d003      	beq.n	800b7e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 fad7 	bl	800bd94 <HAL_TIM_IC_CaptureCallback>
 800b7e6:	e005      	b.n	800b7f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 fac9 	bl	800bd80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 fada 	bl	800bda8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	691b      	ldr	r3, [r3, #16]
 800b800:	f003 0304 	and.w	r3, r3, #4
 800b804:	2b04      	cmp	r3, #4
 800b806:	d122      	bne.n	800b84e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	f003 0304 	and.w	r3, r3, #4
 800b812:	2b04      	cmp	r3, #4
 800b814:	d11b      	bne.n	800b84e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f06f 0204 	mvn.w	r2, #4
 800b81e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2202      	movs	r2, #2
 800b824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b830:	2b00      	cmp	r3, #0
 800b832:	d003      	beq.n	800b83c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 faad 	bl	800bd94 <HAL_TIM_IC_CaptureCallback>
 800b83a:	e005      	b.n	800b848 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 fa9f 	bl	800bd80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 fab0 	bl	800bda8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	f003 0308 	and.w	r3, r3, #8
 800b858:	2b08      	cmp	r3, #8
 800b85a:	d122      	bne.n	800b8a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	f003 0308 	and.w	r3, r3, #8
 800b866:	2b08      	cmp	r3, #8
 800b868:	d11b      	bne.n	800b8a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f06f 0208 	mvn.w	r2, #8
 800b872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2204      	movs	r2, #4
 800b878:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	69db      	ldr	r3, [r3, #28]
 800b880:	f003 0303 	and.w	r3, r3, #3
 800b884:	2b00      	cmp	r3, #0
 800b886:	d003      	beq.n	800b890 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 fa83 	bl	800bd94 <HAL_TIM_IC_CaptureCallback>
 800b88e:	e005      	b.n	800b89c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 fa75 	bl	800bd80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fa86 	bl	800bda8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	f003 0310 	and.w	r3, r3, #16
 800b8ac:	2b10      	cmp	r3, #16
 800b8ae:	d122      	bne.n	800b8f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	f003 0310 	and.w	r3, r3, #16
 800b8ba:	2b10      	cmp	r3, #16
 800b8bc:	d11b      	bne.n	800b8f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f06f 0210 	mvn.w	r2, #16
 800b8c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2208      	movs	r2, #8
 800b8cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	69db      	ldr	r3, [r3, #28]
 800b8d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d003      	beq.n	800b8e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 fa59 	bl	800bd94 <HAL_TIM_IC_CaptureCallback>
 800b8e2:	e005      	b.n	800b8f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 fa4b 	bl	800bd80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 fa5c 	bl	800bda8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	691b      	ldr	r3, [r3, #16]
 800b8fc:	f003 0301 	and.w	r3, r3, #1
 800b900:	2b01      	cmp	r3, #1
 800b902:	d10e      	bne.n	800b922 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	f003 0301 	and.w	r3, r3, #1
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d107      	bne.n	800b922 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f06f 0201 	mvn.w	r2, #1
 800b91a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f7f8 fc77 	bl	8004210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	691b      	ldr	r3, [r3, #16]
 800b928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b92c:	2b80      	cmp	r3, #128	; 0x80
 800b92e:	d10e      	bne.n	800b94e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b93a:	2b80      	cmp	r3, #128	; 0x80
 800b93c:	d107      	bne.n	800b94e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 fe71 	bl	800c630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b95c:	d10e      	bne.n	800b97c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b968:	2b80      	cmp	r3, #128	; 0x80
 800b96a:	d107      	bne.n	800b97c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 fe64 	bl	800c644 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	691b      	ldr	r3, [r3, #16]
 800b982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b986:	2b40      	cmp	r3, #64	; 0x40
 800b988:	d10e      	bne.n	800b9a8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b994:	2b40      	cmp	r3, #64	; 0x40
 800b996:	d107      	bne.n	800b9a8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b9a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 fa0a 	bl	800bdbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	691b      	ldr	r3, [r3, #16]
 800b9ae:	f003 0320 	and.w	r3, r3, #32
 800b9b2:	2b20      	cmp	r3, #32
 800b9b4:	d10e      	bne.n	800b9d4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	f003 0320 	and.w	r3, r3, #32
 800b9c0:	2b20      	cmp	r3, #32
 800b9c2:	d107      	bne.n	800b9d4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f06f 0220 	mvn.w	r2, #32
 800b9cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 fe24 	bl	800c61c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b9d4:	bf00      	nop
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d101      	bne.n	800b9f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	e105      	b.n	800bc02 <HAL_TIM_PWM_ConfigChannel+0x226>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2202      	movs	r2, #2
 800ba02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2b14      	cmp	r3, #20
 800ba0a:	f200 80f0 	bhi.w	800bbee <HAL_TIM_PWM_ConfigChannel+0x212>
 800ba0e:	a201      	add	r2, pc, #4	; (adr r2, 800ba14 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ba10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba14:	0800ba69 	.word	0x0800ba69
 800ba18:	0800bbef 	.word	0x0800bbef
 800ba1c:	0800bbef 	.word	0x0800bbef
 800ba20:	0800bbef 	.word	0x0800bbef
 800ba24:	0800baa9 	.word	0x0800baa9
 800ba28:	0800bbef 	.word	0x0800bbef
 800ba2c:	0800bbef 	.word	0x0800bbef
 800ba30:	0800bbef 	.word	0x0800bbef
 800ba34:	0800baeb 	.word	0x0800baeb
 800ba38:	0800bbef 	.word	0x0800bbef
 800ba3c:	0800bbef 	.word	0x0800bbef
 800ba40:	0800bbef 	.word	0x0800bbef
 800ba44:	0800bb2b 	.word	0x0800bb2b
 800ba48:	0800bbef 	.word	0x0800bbef
 800ba4c:	0800bbef 	.word	0x0800bbef
 800ba50:	0800bbef 	.word	0x0800bbef
 800ba54:	0800bb6d 	.word	0x0800bb6d
 800ba58:	0800bbef 	.word	0x0800bbef
 800ba5c:	0800bbef 	.word	0x0800bbef
 800ba60:	0800bbef 	.word	0x0800bbef
 800ba64:	0800bbad 	.word	0x0800bbad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	68b9      	ldr	r1, [r7, #8]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f000 fa4e 	bl	800bf10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	699a      	ldr	r2, [r3, #24]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f042 0208 	orr.w	r2, r2, #8
 800ba82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	699a      	ldr	r2, [r3, #24]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f022 0204 	bic.w	r2, r2, #4
 800ba92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	6999      	ldr	r1, [r3, #24]
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	691a      	ldr	r2, [r3, #16]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	430a      	orrs	r2, r1
 800baa4:	619a      	str	r2, [r3, #24]
      break;
 800baa6:	e0a3      	b.n	800bbf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	68b9      	ldr	r1, [r7, #8]
 800baae:	4618      	mov	r0, r3
 800bab0:	f000 faa0 	bl	800bff4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	699a      	ldr	r2, [r3, #24]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	699a      	ldr	r2, [r3, #24]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	6999      	ldr	r1, [r3, #24]
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	021a      	lsls	r2, r3, #8
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	430a      	orrs	r2, r1
 800bae6:	619a      	str	r2, [r3, #24]
      break;
 800bae8:	e082      	b.n	800bbf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68b9      	ldr	r1, [r7, #8]
 800baf0:	4618      	mov	r0, r3
 800baf2:	f000 faf7 	bl	800c0e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	69da      	ldr	r2, [r3, #28]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f042 0208 	orr.w	r2, r2, #8
 800bb04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	69da      	ldr	r2, [r3, #28]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f022 0204 	bic.w	r2, r2, #4
 800bb14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	69d9      	ldr	r1, [r3, #28]
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	691a      	ldr	r2, [r3, #16]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	430a      	orrs	r2, r1
 800bb26:	61da      	str	r2, [r3, #28]
      break;
 800bb28:	e062      	b.n	800bbf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	68b9      	ldr	r1, [r7, #8]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 fb4d 	bl	800c1d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	69da      	ldr	r2, [r3, #28]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	69da      	ldr	r2, [r3, #28]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	69d9      	ldr	r1, [r3, #28]
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	021a      	lsls	r2, r3, #8
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	430a      	orrs	r2, r1
 800bb68:	61da      	str	r2, [r3, #28]
      break;
 800bb6a:	e041      	b.n	800bbf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68b9      	ldr	r1, [r7, #8]
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 fb84 	bl	800c280 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f042 0208 	orr.w	r2, r2, #8
 800bb86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f022 0204 	bic.w	r2, r2, #4
 800bb96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	691a      	ldr	r2, [r3, #16]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	430a      	orrs	r2, r1
 800bba8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bbaa:	e021      	b.n	800bbf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68b9      	ldr	r1, [r7, #8]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f000 fbb6 	bl	800c324 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	691b      	ldr	r3, [r3, #16]
 800bbe2:	021a      	lsls	r2, r3, #8
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	430a      	orrs	r2, r1
 800bbea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bbec:	e000      	b.n	800bbf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800bbee:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc00:	2300      	movs	r3, #0
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop

0800bc0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d101      	bne.n	800bc24 <HAL_TIM_ConfigClockSource+0x18>
 800bc20:	2302      	movs	r3, #2
 800bc22:	e0a6      	b.n	800bd72 <HAL_TIM_ConfigClockSource+0x166>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2201      	movs	r2, #1
 800bc28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2202      	movs	r2, #2
 800bc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	4b4f      	ldr	r3, [pc, #316]	; (800bd7c <HAL_TIM_ConfigClockSource+0x170>)
 800bc40:	4013      	ands	r3, r2
 800bc42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b40      	cmp	r3, #64	; 0x40
 800bc5a:	d067      	beq.n	800bd2c <HAL_TIM_ConfigClockSource+0x120>
 800bc5c:	2b40      	cmp	r3, #64	; 0x40
 800bc5e:	d80b      	bhi.n	800bc78 <HAL_TIM_ConfigClockSource+0x6c>
 800bc60:	2b10      	cmp	r3, #16
 800bc62:	d073      	beq.n	800bd4c <HAL_TIM_ConfigClockSource+0x140>
 800bc64:	2b10      	cmp	r3, #16
 800bc66:	d802      	bhi.n	800bc6e <HAL_TIM_ConfigClockSource+0x62>
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d06f      	beq.n	800bd4c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800bc6c:	e078      	b.n	800bd60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bc6e:	2b20      	cmp	r3, #32
 800bc70:	d06c      	beq.n	800bd4c <HAL_TIM_ConfigClockSource+0x140>
 800bc72:	2b30      	cmp	r3, #48	; 0x30
 800bc74:	d06a      	beq.n	800bd4c <HAL_TIM_ConfigClockSource+0x140>
      break;
 800bc76:	e073      	b.n	800bd60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bc78:	2b70      	cmp	r3, #112	; 0x70
 800bc7a:	d00d      	beq.n	800bc98 <HAL_TIM_ConfigClockSource+0x8c>
 800bc7c:	2b70      	cmp	r3, #112	; 0x70
 800bc7e:	d804      	bhi.n	800bc8a <HAL_TIM_ConfigClockSource+0x7e>
 800bc80:	2b50      	cmp	r3, #80	; 0x50
 800bc82:	d033      	beq.n	800bcec <HAL_TIM_ConfigClockSource+0xe0>
 800bc84:	2b60      	cmp	r3, #96	; 0x60
 800bc86:	d041      	beq.n	800bd0c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800bc88:	e06a      	b.n	800bd60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bc8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc8e:	d066      	beq.n	800bd5e <HAL_TIM_ConfigClockSource+0x152>
 800bc90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc94:	d017      	beq.n	800bcc6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800bc96:	e063      	b.n	800bd60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6818      	ldr	r0, [r3, #0]
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	6899      	ldr	r1, [r3, #8]
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	685a      	ldr	r2, [r3, #4]
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	f000 fc0a 	bl	800c4c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bcba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	609a      	str	r2, [r3, #8]
      break;
 800bcc4:	e04c      	b.n	800bd60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6818      	ldr	r0, [r3, #0]
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	6899      	ldr	r1, [r3, #8]
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	685a      	ldr	r2, [r3, #4]
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	f000 fbf3 	bl	800c4c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	689a      	ldr	r2, [r3, #8]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bce8:	609a      	str	r2, [r3, #8]
      break;
 800bcea:	e039      	b.n	800bd60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6818      	ldr	r0, [r3, #0]
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	6859      	ldr	r1, [r3, #4]
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	f000 fb67 	bl	800c3cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2150      	movs	r1, #80	; 0x50
 800bd04:	4618      	mov	r0, r3
 800bd06:	f000 fbc0 	bl	800c48a <TIM_ITRx_SetConfig>
      break;
 800bd0a:	e029      	b.n	800bd60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6818      	ldr	r0, [r3, #0]
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	6859      	ldr	r1, [r3, #4]
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	461a      	mov	r2, r3
 800bd1a:	f000 fb86 	bl	800c42a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2160      	movs	r1, #96	; 0x60
 800bd24:	4618      	mov	r0, r3
 800bd26:	f000 fbb0 	bl	800c48a <TIM_ITRx_SetConfig>
      break;
 800bd2a:	e019      	b.n	800bd60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6818      	ldr	r0, [r3, #0]
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	6859      	ldr	r1, [r3, #4]
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	461a      	mov	r2, r3
 800bd3a:	f000 fb47 	bl	800c3cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	2140      	movs	r1, #64	; 0x40
 800bd44:	4618      	mov	r0, r3
 800bd46:	f000 fba0 	bl	800c48a <TIM_ITRx_SetConfig>
      break;
 800bd4a:	e009      	b.n	800bd60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4619      	mov	r1, r3
 800bd56:	4610      	mov	r0, r2
 800bd58:	f000 fb97 	bl	800c48a <TIM_ITRx_SetConfig>
      break;
 800bd5c:	e000      	b.n	800bd60 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800bd5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	fffeff88 	.word	0xfffeff88

0800bd80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd9c:	bf00      	nop
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bdc4:	bf00      	nop
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4a40      	ldr	r2, [pc, #256]	; (800bee4 <TIM_Base_SetConfig+0x114>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d013      	beq.n	800be10 <TIM_Base_SetConfig+0x40>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdee:	d00f      	beq.n	800be10 <TIM_Base_SetConfig+0x40>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4a3d      	ldr	r2, [pc, #244]	; (800bee8 <TIM_Base_SetConfig+0x118>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d00b      	beq.n	800be10 <TIM_Base_SetConfig+0x40>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a3c      	ldr	r2, [pc, #240]	; (800beec <TIM_Base_SetConfig+0x11c>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d007      	beq.n	800be10 <TIM_Base_SetConfig+0x40>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a3b      	ldr	r2, [pc, #236]	; (800bef0 <TIM_Base_SetConfig+0x120>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d003      	beq.n	800be10 <TIM_Base_SetConfig+0x40>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	4a3a      	ldr	r2, [pc, #232]	; (800bef4 <TIM_Base_SetConfig+0x124>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d108      	bne.n	800be22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	4313      	orrs	r3, r2
 800be20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4a2f      	ldr	r2, [pc, #188]	; (800bee4 <TIM_Base_SetConfig+0x114>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d02b      	beq.n	800be82 <TIM_Base_SetConfig+0xb2>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be30:	d027      	beq.n	800be82 <TIM_Base_SetConfig+0xb2>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4a2c      	ldr	r2, [pc, #176]	; (800bee8 <TIM_Base_SetConfig+0x118>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d023      	beq.n	800be82 <TIM_Base_SetConfig+0xb2>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a2b      	ldr	r2, [pc, #172]	; (800beec <TIM_Base_SetConfig+0x11c>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d01f      	beq.n	800be82 <TIM_Base_SetConfig+0xb2>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4a2a      	ldr	r2, [pc, #168]	; (800bef0 <TIM_Base_SetConfig+0x120>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d01b      	beq.n	800be82 <TIM_Base_SetConfig+0xb2>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4a29      	ldr	r2, [pc, #164]	; (800bef4 <TIM_Base_SetConfig+0x124>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d017      	beq.n	800be82 <TIM_Base_SetConfig+0xb2>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	4a28      	ldr	r2, [pc, #160]	; (800bef8 <TIM_Base_SetConfig+0x128>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d013      	beq.n	800be82 <TIM_Base_SetConfig+0xb2>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4a27      	ldr	r2, [pc, #156]	; (800befc <TIM_Base_SetConfig+0x12c>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d00f      	beq.n	800be82 <TIM_Base_SetConfig+0xb2>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4a26      	ldr	r2, [pc, #152]	; (800bf00 <TIM_Base_SetConfig+0x130>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d00b      	beq.n	800be82 <TIM_Base_SetConfig+0xb2>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4a25      	ldr	r2, [pc, #148]	; (800bf04 <TIM_Base_SetConfig+0x134>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d007      	beq.n	800be82 <TIM_Base_SetConfig+0xb2>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	4a24      	ldr	r2, [pc, #144]	; (800bf08 <TIM_Base_SetConfig+0x138>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d003      	beq.n	800be82 <TIM_Base_SetConfig+0xb2>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4a23      	ldr	r2, [pc, #140]	; (800bf0c <TIM_Base_SetConfig+0x13c>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d108      	bne.n	800be94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	4313      	orrs	r3, r2
 800be92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	695b      	ldr	r3, [r3, #20]
 800be9e:	4313      	orrs	r3, r2
 800bea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	689a      	ldr	r2, [r3, #8]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a0a      	ldr	r2, [pc, #40]	; (800bee4 <TIM_Base_SetConfig+0x114>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d003      	beq.n	800bec8 <TIM_Base_SetConfig+0xf8>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a0c      	ldr	r2, [pc, #48]	; (800bef4 <TIM_Base_SetConfig+0x124>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d103      	bne.n	800bed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	691a      	ldr	r2, [r3, #16]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	615a      	str	r2, [r3, #20]
}
 800bed6:	bf00      	nop
 800bed8:	3714      	adds	r7, #20
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr
 800bee2:	bf00      	nop
 800bee4:	40010000 	.word	0x40010000
 800bee8:	40000400 	.word	0x40000400
 800beec:	40000800 	.word	0x40000800
 800bef0:	40000c00 	.word	0x40000c00
 800bef4:	40010400 	.word	0x40010400
 800bef8:	40014000 	.word	0x40014000
 800befc:	40014400 	.word	0x40014400
 800bf00:	40014800 	.word	0x40014800
 800bf04:	40001800 	.word	0x40001800
 800bf08:	40001c00 	.word	0x40001c00
 800bf0c:	40002000 	.word	0x40002000

0800bf10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b087      	sub	sp, #28
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	f023 0201 	bic.w	r2, r3, #1
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a1b      	ldr	r3, [r3, #32]
 800bf2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	699b      	ldr	r3, [r3, #24]
 800bf36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bf38:	68fa      	ldr	r2, [r7, #12]
 800bf3a:	4b2b      	ldr	r3, [pc, #172]	; (800bfe8 <TIM_OC1_SetConfig+0xd8>)
 800bf3c:	4013      	ands	r3, r2
 800bf3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f023 0303 	bic.w	r3, r3, #3
 800bf46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	f023 0302 	bic.w	r3, r3, #2
 800bf58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	697a      	ldr	r2, [r7, #20]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a21      	ldr	r2, [pc, #132]	; (800bfec <TIM_OC1_SetConfig+0xdc>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d003      	beq.n	800bf74 <TIM_OC1_SetConfig+0x64>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4a20      	ldr	r2, [pc, #128]	; (800bff0 <TIM_OC1_SetConfig+0xe0>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d10c      	bne.n	800bf8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	f023 0308 	bic.w	r3, r3, #8
 800bf7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	697a      	ldr	r2, [r7, #20]
 800bf82:	4313      	orrs	r3, r2
 800bf84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	f023 0304 	bic.w	r3, r3, #4
 800bf8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	4a16      	ldr	r2, [pc, #88]	; (800bfec <TIM_OC1_SetConfig+0xdc>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d003      	beq.n	800bf9e <TIM_OC1_SetConfig+0x8e>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	4a15      	ldr	r2, [pc, #84]	; (800bff0 <TIM_OC1_SetConfig+0xe0>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d111      	bne.n	800bfc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	695b      	ldr	r3, [r3, #20]
 800bfb2:	693a      	ldr	r2, [r7, #16]
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	699b      	ldr	r3, [r3, #24]
 800bfbc:	693a      	ldr	r2, [r7, #16]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	693a      	ldr	r2, [r7, #16]
 800bfc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	685a      	ldr	r2, [r3, #4]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	697a      	ldr	r2, [r7, #20]
 800bfda:	621a      	str	r2, [r3, #32]
}
 800bfdc:	bf00      	nop
 800bfde:	371c      	adds	r7, #28
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr
 800bfe8:	fffeff8f 	.word	0xfffeff8f
 800bfec:	40010000 	.word	0x40010000
 800bff0:	40010400 	.word	0x40010400

0800bff4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b087      	sub	sp, #28
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a1b      	ldr	r3, [r3, #32]
 800c002:	f023 0210 	bic.w	r2, r3, #16
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a1b      	ldr	r3, [r3, #32]
 800c00e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	699b      	ldr	r3, [r3, #24]
 800c01a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	4b2e      	ldr	r3, [pc, #184]	; (800c0d8 <TIM_OC2_SetConfig+0xe4>)
 800c020:	4013      	ands	r3, r2
 800c022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c02a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	021b      	lsls	r3, r3, #8
 800c032:	68fa      	ldr	r2, [r7, #12]
 800c034:	4313      	orrs	r3, r2
 800c036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	f023 0320 	bic.w	r3, r3, #32
 800c03e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	011b      	lsls	r3, r3, #4
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	4313      	orrs	r3, r2
 800c04a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a23      	ldr	r2, [pc, #140]	; (800c0dc <TIM_OC2_SetConfig+0xe8>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d003      	beq.n	800c05c <TIM_OC2_SetConfig+0x68>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	4a22      	ldr	r2, [pc, #136]	; (800c0e0 <TIM_OC2_SetConfig+0xec>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d10d      	bne.n	800c078 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	011b      	lsls	r3, r3, #4
 800c06a:	697a      	ldr	r2, [r7, #20]
 800c06c:	4313      	orrs	r3, r2
 800c06e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c076:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4a18      	ldr	r2, [pc, #96]	; (800c0dc <TIM_OC2_SetConfig+0xe8>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d003      	beq.n	800c088 <TIM_OC2_SetConfig+0x94>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	4a17      	ldr	r2, [pc, #92]	; (800c0e0 <TIM_OC2_SetConfig+0xec>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d113      	bne.n	800c0b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c08e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c096:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	695b      	ldr	r3, [r3, #20]
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	693a      	ldr	r2, [r7, #16]
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	699b      	ldr	r3, [r3, #24]
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	693a      	ldr	r2, [r7, #16]
 800c0b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	68fa      	ldr	r2, [r7, #12]
 800c0ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	685a      	ldr	r2, [r3, #4]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	697a      	ldr	r2, [r7, #20]
 800c0c8:	621a      	str	r2, [r3, #32]
}
 800c0ca:	bf00      	nop
 800c0cc:	371c      	adds	r7, #28
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	feff8fff 	.word	0xfeff8fff
 800c0dc:	40010000 	.word	0x40010000
 800c0e0:	40010400 	.word	0x40010400

0800c0e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a1b      	ldr	r3, [r3, #32]
 800c0f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a1b      	ldr	r3, [r3, #32]
 800c0fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	69db      	ldr	r3, [r3, #28]
 800c10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	4b2d      	ldr	r3, [pc, #180]	; (800c1c4 <TIM_OC3_SetConfig+0xe0>)
 800c110:	4013      	ands	r3, r2
 800c112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f023 0303 	bic.w	r3, r3, #3
 800c11a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	4313      	orrs	r3, r2
 800c124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c12c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	021b      	lsls	r3, r3, #8
 800c134:	697a      	ldr	r2, [r7, #20]
 800c136:	4313      	orrs	r3, r2
 800c138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a22      	ldr	r2, [pc, #136]	; (800c1c8 <TIM_OC3_SetConfig+0xe4>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d003      	beq.n	800c14a <TIM_OC3_SetConfig+0x66>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	4a21      	ldr	r2, [pc, #132]	; (800c1cc <TIM_OC3_SetConfig+0xe8>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d10d      	bne.n	800c166 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	021b      	lsls	r3, r3, #8
 800c158:	697a      	ldr	r2, [r7, #20]
 800c15a:	4313      	orrs	r3, r2
 800c15c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4a17      	ldr	r2, [pc, #92]	; (800c1c8 <TIM_OC3_SetConfig+0xe4>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d003      	beq.n	800c176 <TIM_OC3_SetConfig+0x92>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4a16      	ldr	r2, [pc, #88]	; (800c1cc <TIM_OC3_SetConfig+0xe8>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d113      	bne.n	800c19e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c17c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	695b      	ldr	r3, [r3, #20]
 800c18a:	011b      	lsls	r3, r3, #4
 800c18c:	693a      	ldr	r2, [r7, #16]
 800c18e:	4313      	orrs	r3, r2
 800c190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	699b      	ldr	r3, [r3, #24]
 800c196:	011b      	lsls	r3, r3, #4
 800c198:	693a      	ldr	r2, [r7, #16]
 800c19a:	4313      	orrs	r3, r2
 800c19c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	693a      	ldr	r2, [r7, #16]
 800c1a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	685a      	ldr	r2, [r3, #4]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	697a      	ldr	r2, [r7, #20]
 800c1b6:	621a      	str	r2, [r3, #32]
}
 800c1b8:	bf00      	nop
 800c1ba:	371c      	adds	r7, #28
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr
 800c1c4:	fffeff8f 	.word	0xfffeff8f
 800c1c8:	40010000 	.word	0x40010000
 800c1cc:	40010400 	.word	0x40010400

0800c1d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b087      	sub	sp, #28
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a1b      	ldr	r3, [r3, #32]
 800c1de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6a1b      	ldr	r3, [r3, #32]
 800c1ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	69db      	ldr	r3, [r3, #28]
 800c1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c1f8:	68fa      	ldr	r2, [r7, #12]
 800c1fa:	4b1e      	ldr	r3, [pc, #120]	; (800c274 <TIM_OC4_SetConfig+0xa4>)
 800c1fc:	4013      	ands	r3, r2
 800c1fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	021b      	lsls	r3, r3, #8
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	4313      	orrs	r3, r2
 800c212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c21a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	031b      	lsls	r3, r3, #12
 800c222:	693a      	ldr	r2, [r7, #16]
 800c224:	4313      	orrs	r3, r2
 800c226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a13      	ldr	r2, [pc, #76]	; (800c278 <TIM_OC4_SetConfig+0xa8>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d003      	beq.n	800c238 <TIM_OC4_SetConfig+0x68>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a12      	ldr	r2, [pc, #72]	; (800c27c <TIM_OC4_SetConfig+0xac>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d109      	bne.n	800c24c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c23e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	695b      	ldr	r3, [r3, #20]
 800c244:	019b      	lsls	r3, r3, #6
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	4313      	orrs	r3, r2
 800c24a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	697a      	ldr	r2, [r7, #20]
 800c250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	68fa      	ldr	r2, [r7, #12]
 800c256:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	693a      	ldr	r2, [r7, #16]
 800c264:	621a      	str	r2, [r3, #32]
}
 800c266:	bf00      	nop
 800c268:	371c      	adds	r7, #28
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	feff8fff 	.word	0xfeff8fff
 800c278:	40010000 	.word	0x40010000
 800c27c:	40010400 	.word	0x40010400

0800c280 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c280:	b480      	push	{r7}
 800c282:	b087      	sub	sp, #28
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6a1b      	ldr	r3, [r3, #32]
 800c28e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6a1b      	ldr	r3, [r3, #32]
 800c29a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c2a8:	68fa      	ldr	r2, [r7, #12]
 800c2aa:	4b1b      	ldr	r3, [pc, #108]	; (800c318 <TIM_OC5_SetConfig+0x98>)
 800c2ac:	4013      	ands	r3, r2
 800c2ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c2c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	041b      	lsls	r3, r3, #16
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4a12      	ldr	r2, [pc, #72]	; (800c31c <TIM_OC5_SetConfig+0x9c>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d003      	beq.n	800c2de <TIM_OC5_SetConfig+0x5e>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a11      	ldr	r2, [pc, #68]	; (800c320 <TIM_OC5_SetConfig+0xa0>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d109      	bne.n	800c2f2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c2e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	695b      	ldr	r3, [r3, #20]
 800c2ea:	021b      	lsls	r3, r3, #8
 800c2ec:	697a      	ldr	r2, [r7, #20]
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	697a      	ldr	r2, [r7, #20]
 800c2f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	685a      	ldr	r2, [r3, #4]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	693a      	ldr	r2, [r7, #16]
 800c30a:	621a      	str	r2, [r3, #32]
}
 800c30c:	bf00      	nop
 800c30e:	371c      	adds	r7, #28
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	fffeff8f 	.word	0xfffeff8f
 800c31c:	40010000 	.word	0x40010000
 800c320:	40010400 	.word	0x40010400

0800c324 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c324:	b480      	push	{r7}
 800c326:	b087      	sub	sp, #28
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6a1b      	ldr	r3, [r3, #32]
 800c332:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6a1b      	ldr	r3, [r3, #32]
 800c33e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c34c:	68fa      	ldr	r2, [r7, #12]
 800c34e:	4b1c      	ldr	r3, [pc, #112]	; (800c3c0 <TIM_OC6_SetConfig+0x9c>)
 800c350:	4013      	ands	r3, r2
 800c352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	021b      	lsls	r3, r3, #8
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	051b      	lsls	r3, r3, #20
 800c36e:	693a      	ldr	r2, [r7, #16]
 800c370:	4313      	orrs	r3, r2
 800c372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	4a13      	ldr	r2, [pc, #76]	; (800c3c4 <TIM_OC6_SetConfig+0xa0>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d003      	beq.n	800c384 <TIM_OC6_SetConfig+0x60>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4a12      	ldr	r2, [pc, #72]	; (800c3c8 <TIM_OC6_SetConfig+0xa4>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d109      	bne.n	800c398 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c38a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	695b      	ldr	r3, [r3, #20]
 800c390:	029b      	lsls	r3, r3, #10
 800c392:	697a      	ldr	r2, [r7, #20]
 800c394:	4313      	orrs	r3, r2
 800c396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	697a      	ldr	r2, [r7, #20]
 800c39c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	685a      	ldr	r2, [r3, #4]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	693a      	ldr	r2, [r7, #16]
 800c3b0:	621a      	str	r2, [r3, #32]
}
 800c3b2:	bf00      	nop
 800c3b4:	371c      	adds	r7, #28
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	feff8fff 	.word	0xfeff8fff
 800c3c4:	40010000 	.word	0x40010000
 800c3c8:	40010400 	.word	0x40010400

0800c3cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b087      	sub	sp, #28
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6a1b      	ldr	r3, [r3, #32]
 800c3dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	6a1b      	ldr	r3, [r3, #32]
 800c3e2:	f023 0201 	bic.w	r2, r3, #1
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	699b      	ldr	r3, [r3, #24]
 800c3ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c3f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	011b      	lsls	r3, r3, #4
 800c3fc:	693a      	ldr	r2, [r7, #16]
 800c3fe:	4313      	orrs	r3, r2
 800c400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	f023 030a 	bic.w	r3, r3, #10
 800c408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c40a:	697a      	ldr	r2, [r7, #20]
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	4313      	orrs	r3, r2
 800c410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	693a      	ldr	r2, [r7, #16]
 800c416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	697a      	ldr	r2, [r7, #20]
 800c41c:	621a      	str	r2, [r3, #32]
}
 800c41e:	bf00      	nop
 800c420:	371c      	adds	r7, #28
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr

0800c42a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c42a:	b480      	push	{r7}
 800c42c:	b087      	sub	sp, #28
 800c42e:	af00      	add	r7, sp, #0
 800c430:	60f8      	str	r0, [r7, #12]
 800c432:	60b9      	str	r1, [r7, #8]
 800c434:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	6a1b      	ldr	r3, [r3, #32]
 800c43a:	f023 0210 	bic.w	r2, r3, #16
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	699b      	ldr	r3, [r3, #24]
 800c446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	6a1b      	ldr	r3, [r3, #32]
 800c44c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	031b      	lsls	r3, r3, #12
 800c45a:	697a      	ldr	r2, [r7, #20]
 800c45c:	4313      	orrs	r3, r2
 800c45e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c466:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	011b      	lsls	r3, r3, #4
 800c46c:	693a      	ldr	r2, [r7, #16]
 800c46e:	4313      	orrs	r3, r2
 800c470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	697a      	ldr	r2, [r7, #20]
 800c476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	693a      	ldr	r2, [r7, #16]
 800c47c:	621a      	str	r2, [r3, #32]
}
 800c47e:	bf00      	nop
 800c480:	371c      	adds	r7, #28
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr

0800c48a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c48a:	b480      	push	{r7}
 800c48c:	b085      	sub	sp, #20
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
 800c492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c4a2:	683a      	ldr	r2, [r7, #0]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	f043 0307 	orr.w	r3, r3, #7
 800c4ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	68fa      	ldr	r2, [r7, #12]
 800c4b2:	609a      	str	r2, [r3, #8]
}
 800c4b4:	bf00      	nop
 800c4b6:	3714      	adds	r7, #20
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b087      	sub	sp, #28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
 800c4cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	689b      	ldr	r3, [r3, #8]
 800c4d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c4da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	021a      	lsls	r2, r3, #8
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	431a      	orrs	r2, r3
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	697a      	ldr	r2, [r7, #20]
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	697a      	ldr	r2, [r7, #20]
 800c4f2:	609a      	str	r2, [r3, #8]
}
 800c4f4:	bf00      	nop
 800c4f6:	371c      	adds	r7, #28
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c500:	b480      	push	{r7}
 800c502:	b085      	sub	sp, #20
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c510:	2b01      	cmp	r3, #1
 800c512:	d101      	bne.n	800c518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c514:	2302      	movs	r3, #2
 800c516:	e06d      	b.n	800c5f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2202      	movs	r2, #2
 800c524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	689b      	ldr	r3, [r3, #8]
 800c536:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4a30      	ldr	r2, [pc, #192]	; (800c600 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d004      	beq.n	800c54c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a2f      	ldr	r2, [pc, #188]	; (800c604 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d108      	bne.n	800c55e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c552:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	4313      	orrs	r3, r2
 800c55c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c564:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	4313      	orrs	r3, r2
 800c56e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a20      	ldr	r2, [pc, #128]	; (800c600 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d022      	beq.n	800c5c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c58a:	d01d      	beq.n	800c5c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a1d      	ldr	r2, [pc, #116]	; (800c608 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d018      	beq.n	800c5c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a1c      	ldr	r2, [pc, #112]	; (800c60c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d013      	beq.n	800c5c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a1a      	ldr	r2, [pc, #104]	; (800c610 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d00e      	beq.n	800c5c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4a15      	ldr	r2, [pc, #84]	; (800c604 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d009      	beq.n	800c5c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a16      	ldr	r2, [pc, #88]	; (800c614 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d004      	beq.n	800c5c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a15      	ldr	r2, [pc, #84]	; (800c618 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d10c      	bne.n	800c5e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	68ba      	ldr	r2, [r7, #8]
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	68ba      	ldr	r2, [r7, #8]
 800c5e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5f2:	2300      	movs	r3, #0
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr
 800c600:	40010000 	.word	0x40010000
 800c604:	40010400 	.word	0x40010400
 800c608:	40000400 	.word	0x40000400
 800c60c:	40000800 	.word	0x40000800
 800c610:	40000c00 	.word	0x40000c00
 800c614:	40014000 	.word	0x40014000
 800c618:	40001800 	.word	0x40001800

0800c61c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c624:	bf00      	nop
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c638:	bf00      	nop
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c64c:	bf00      	nop
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d101      	bne.n	800c66a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c666:	2301      	movs	r3, #1
 800c668:	e040      	b.n	800c6ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d106      	bne.n	800c680 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2200      	movs	r2, #0
 800c676:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f7fa fb66 	bl	8006d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2224      	movs	r2, #36	; 0x24
 800c684:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f022 0201 	bic.w	r2, r2, #1
 800c694:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 f8be 	bl	800c818 <UART_SetConfig>
 800c69c:	4603      	mov	r3, r0
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d101      	bne.n	800c6a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e022      	b.n	800c6ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d002      	beq.n	800c6b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fb5c 	bl	800cd6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	685a      	ldr	r2, [r3, #4]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c6c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	689a      	ldr	r2, [r3, #8]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c6d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f042 0201 	orr.w	r2, r2, #1
 800c6e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 fbe3 	bl	800ceb0 <UART_CheckIdleState>
 800c6ea:	4603      	mov	r3, r0
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b08a      	sub	sp, #40	; 0x28
 800c6f8:	af02      	add	r7, sp, #8
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	603b      	str	r3, [r7, #0]
 800c700:	4613      	mov	r3, r2
 800c702:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c708:	2b20      	cmp	r3, #32
 800c70a:	d17f      	bne.n	800c80c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d002      	beq.n	800c718 <HAL_UART_Transmit+0x24>
 800c712:	88fb      	ldrh	r3, [r7, #6]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d101      	bne.n	800c71c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800c718:	2301      	movs	r3, #1
 800c71a:	e078      	b.n	800c80e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c722:	2b01      	cmp	r3, #1
 800c724:	d101      	bne.n	800c72a <HAL_UART_Transmit+0x36>
 800c726:	2302      	movs	r3, #2
 800c728:	e071      	b.n	800c80e <HAL_UART_Transmit+0x11a>
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	2201      	movs	r2, #1
 800c72e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2200      	movs	r2, #0
 800c736:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2221      	movs	r2, #33	; 0x21
 800c73c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800c73e:	f7fa fea7 	bl	8007490 <HAL_GetTick>
 800c742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	88fa      	ldrh	r2, [r7, #6]
 800c748:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	88fa      	ldrh	r2, [r7, #6]
 800c750:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	689b      	ldr	r3, [r3, #8]
 800c758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c75c:	d108      	bne.n	800c770 <HAL_UART_Transmit+0x7c>
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d104      	bne.n	800c770 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800c766:	2300      	movs	r3, #0
 800c768:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	61bb      	str	r3, [r7, #24]
 800c76e:	e003      	b.n	800c778 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c774:	2300      	movs	r3, #0
 800c776:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2200      	movs	r2, #0
 800c77c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800c780:	e02c      	b.n	800c7dc <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	9300      	str	r3, [sp, #0]
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	2200      	movs	r2, #0
 800c78a:	2180      	movs	r1, #128	; 0x80
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f000 fbd4 	bl	800cf3a <UART_WaitOnFlagUntilTimeout>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d001      	beq.n	800c79c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800c798:	2303      	movs	r3, #3
 800c79a:	e038      	b.n	800c80e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10b      	bne.n	800c7ba <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c7a2:	69bb      	ldr	r3, [r7, #24]
 800c7a4:	881b      	ldrh	r3, [r3, #0]
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c7b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	3302      	adds	r3, #2
 800c7b6:	61bb      	str	r3, [r7, #24]
 800c7b8:	e007      	b.n	800c7ca <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	781a      	ldrb	r2, [r3, #0]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	3b01      	subs	r3, #1
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d1cc      	bne.n	800c782 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	9300      	str	r3, [sp, #0]
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	2140      	movs	r1, #64	; 0x40
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f000 fba1 	bl	800cf3a <UART_WaitOnFlagUntilTimeout>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d001      	beq.n	800c802 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c7fe:	2303      	movs	r3, #3
 800c800:	e005      	b.n	800c80e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2220      	movs	r2, #32
 800c806:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800c808:	2300      	movs	r3, #0
 800c80a:	e000      	b.n	800c80e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800c80c:	2302      	movs	r3, #2
  }
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3720      	adds	r7, #32
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
	...

0800c818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b088      	sub	sp, #32
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800c820:	2300      	movs	r3, #0
 800c822:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800c824:	2300      	movs	r3, #0
 800c826:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	689a      	ldr	r2, [r3, #8]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	691b      	ldr	r3, [r3, #16]
 800c830:	431a      	orrs	r2, r3
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	695b      	ldr	r3, [r3, #20]
 800c836:	431a      	orrs	r2, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	69db      	ldr	r3, [r3, #28]
 800c83c:	4313      	orrs	r3, r2
 800c83e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	4bb1      	ldr	r3, [pc, #708]	; (800cb0c <UART_SetConfig+0x2f4>)
 800c848:	4013      	ands	r3, r2
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	6812      	ldr	r2, [r2, #0]
 800c84e:	6939      	ldr	r1, [r7, #16]
 800c850:	430b      	orrs	r3, r1
 800c852:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	68da      	ldr	r2, [r3, #12]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	430a      	orrs	r2, r1
 800c868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	699b      	ldr	r3, [r3, #24]
 800c86e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6a1b      	ldr	r3, [r3, #32]
 800c874:	693a      	ldr	r2, [r7, #16]
 800c876:	4313      	orrs	r3, r2
 800c878:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	693a      	ldr	r2, [r7, #16]
 800c88a:	430a      	orrs	r2, r1
 800c88c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4a9f      	ldr	r2, [pc, #636]	; (800cb10 <UART_SetConfig+0x2f8>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d121      	bne.n	800c8dc <UART_SetConfig+0xc4>
 800c898:	4b9e      	ldr	r3, [pc, #632]	; (800cb14 <UART_SetConfig+0x2fc>)
 800c89a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c89e:	f003 0303 	and.w	r3, r3, #3
 800c8a2:	2b03      	cmp	r3, #3
 800c8a4:	d816      	bhi.n	800c8d4 <UART_SetConfig+0xbc>
 800c8a6:	a201      	add	r2, pc, #4	; (adr r2, 800c8ac <UART_SetConfig+0x94>)
 800c8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ac:	0800c8bd 	.word	0x0800c8bd
 800c8b0:	0800c8c9 	.word	0x0800c8c9
 800c8b4:	0800c8c3 	.word	0x0800c8c3
 800c8b8:	0800c8cf 	.word	0x0800c8cf
 800c8bc:	2301      	movs	r3, #1
 800c8be:	77fb      	strb	r3, [r7, #31]
 800c8c0:	e151      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c8c2:	2302      	movs	r3, #2
 800c8c4:	77fb      	strb	r3, [r7, #31]
 800c8c6:	e14e      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c8c8:	2304      	movs	r3, #4
 800c8ca:	77fb      	strb	r3, [r7, #31]
 800c8cc:	e14b      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c8ce:	2308      	movs	r3, #8
 800c8d0:	77fb      	strb	r3, [r7, #31]
 800c8d2:	e148      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c8d4:	2310      	movs	r3, #16
 800c8d6:	77fb      	strb	r3, [r7, #31]
 800c8d8:	bf00      	nop
 800c8da:	e144      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a8d      	ldr	r2, [pc, #564]	; (800cb18 <UART_SetConfig+0x300>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d134      	bne.n	800c950 <UART_SetConfig+0x138>
 800c8e6:	4b8b      	ldr	r3, [pc, #556]	; (800cb14 <UART_SetConfig+0x2fc>)
 800c8e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8ec:	f003 030c 	and.w	r3, r3, #12
 800c8f0:	2b0c      	cmp	r3, #12
 800c8f2:	d829      	bhi.n	800c948 <UART_SetConfig+0x130>
 800c8f4:	a201      	add	r2, pc, #4	; (adr r2, 800c8fc <UART_SetConfig+0xe4>)
 800c8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8fa:	bf00      	nop
 800c8fc:	0800c931 	.word	0x0800c931
 800c900:	0800c949 	.word	0x0800c949
 800c904:	0800c949 	.word	0x0800c949
 800c908:	0800c949 	.word	0x0800c949
 800c90c:	0800c93d 	.word	0x0800c93d
 800c910:	0800c949 	.word	0x0800c949
 800c914:	0800c949 	.word	0x0800c949
 800c918:	0800c949 	.word	0x0800c949
 800c91c:	0800c937 	.word	0x0800c937
 800c920:	0800c949 	.word	0x0800c949
 800c924:	0800c949 	.word	0x0800c949
 800c928:	0800c949 	.word	0x0800c949
 800c92c:	0800c943 	.word	0x0800c943
 800c930:	2300      	movs	r3, #0
 800c932:	77fb      	strb	r3, [r7, #31]
 800c934:	e117      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c936:	2302      	movs	r3, #2
 800c938:	77fb      	strb	r3, [r7, #31]
 800c93a:	e114      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c93c:	2304      	movs	r3, #4
 800c93e:	77fb      	strb	r3, [r7, #31]
 800c940:	e111      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c942:	2308      	movs	r3, #8
 800c944:	77fb      	strb	r3, [r7, #31]
 800c946:	e10e      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c948:	2310      	movs	r3, #16
 800c94a:	77fb      	strb	r3, [r7, #31]
 800c94c:	bf00      	nop
 800c94e:	e10a      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a71      	ldr	r2, [pc, #452]	; (800cb1c <UART_SetConfig+0x304>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d120      	bne.n	800c99c <UART_SetConfig+0x184>
 800c95a:	4b6e      	ldr	r3, [pc, #440]	; (800cb14 <UART_SetConfig+0x2fc>)
 800c95c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c960:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c964:	2b10      	cmp	r3, #16
 800c966:	d00f      	beq.n	800c988 <UART_SetConfig+0x170>
 800c968:	2b10      	cmp	r3, #16
 800c96a:	d802      	bhi.n	800c972 <UART_SetConfig+0x15a>
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d005      	beq.n	800c97c <UART_SetConfig+0x164>
 800c970:	e010      	b.n	800c994 <UART_SetConfig+0x17c>
 800c972:	2b20      	cmp	r3, #32
 800c974:	d005      	beq.n	800c982 <UART_SetConfig+0x16a>
 800c976:	2b30      	cmp	r3, #48	; 0x30
 800c978:	d009      	beq.n	800c98e <UART_SetConfig+0x176>
 800c97a:	e00b      	b.n	800c994 <UART_SetConfig+0x17c>
 800c97c:	2300      	movs	r3, #0
 800c97e:	77fb      	strb	r3, [r7, #31]
 800c980:	e0f1      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c982:	2302      	movs	r3, #2
 800c984:	77fb      	strb	r3, [r7, #31]
 800c986:	e0ee      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c988:	2304      	movs	r3, #4
 800c98a:	77fb      	strb	r3, [r7, #31]
 800c98c:	e0eb      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c98e:	2308      	movs	r3, #8
 800c990:	77fb      	strb	r3, [r7, #31]
 800c992:	e0e8      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c994:	2310      	movs	r3, #16
 800c996:	77fb      	strb	r3, [r7, #31]
 800c998:	bf00      	nop
 800c99a:	e0e4      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a5f      	ldr	r2, [pc, #380]	; (800cb20 <UART_SetConfig+0x308>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d120      	bne.n	800c9e8 <UART_SetConfig+0x1d0>
 800c9a6:	4b5b      	ldr	r3, [pc, #364]	; (800cb14 <UART_SetConfig+0x2fc>)
 800c9a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c9b0:	2b40      	cmp	r3, #64	; 0x40
 800c9b2:	d00f      	beq.n	800c9d4 <UART_SetConfig+0x1bc>
 800c9b4:	2b40      	cmp	r3, #64	; 0x40
 800c9b6:	d802      	bhi.n	800c9be <UART_SetConfig+0x1a6>
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d005      	beq.n	800c9c8 <UART_SetConfig+0x1b0>
 800c9bc:	e010      	b.n	800c9e0 <UART_SetConfig+0x1c8>
 800c9be:	2b80      	cmp	r3, #128	; 0x80
 800c9c0:	d005      	beq.n	800c9ce <UART_SetConfig+0x1b6>
 800c9c2:	2bc0      	cmp	r3, #192	; 0xc0
 800c9c4:	d009      	beq.n	800c9da <UART_SetConfig+0x1c2>
 800c9c6:	e00b      	b.n	800c9e0 <UART_SetConfig+0x1c8>
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	77fb      	strb	r3, [r7, #31]
 800c9cc:	e0cb      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c9ce:	2302      	movs	r3, #2
 800c9d0:	77fb      	strb	r3, [r7, #31]
 800c9d2:	e0c8      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c9d4:	2304      	movs	r3, #4
 800c9d6:	77fb      	strb	r3, [r7, #31]
 800c9d8:	e0c5      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c9da:	2308      	movs	r3, #8
 800c9dc:	77fb      	strb	r3, [r7, #31]
 800c9de:	e0c2      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c9e0:	2310      	movs	r3, #16
 800c9e2:	77fb      	strb	r3, [r7, #31]
 800c9e4:	bf00      	nop
 800c9e6:	e0be      	b.n	800cb66 <UART_SetConfig+0x34e>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a4d      	ldr	r2, [pc, #308]	; (800cb24 <UART_SetConfig+0x30c>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d124      	bne.n	800ca3c <UART_SetConfig+0x224>
 800c9f2:	4b48      	ldr	r3, [pc, #288]	; (800cb14 <UART_SetConfig+0x2fc>)
 800c9f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca00:	d012      	beq.n	800ca28 <UART_SetConfig+0x210>
 800ca02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca06:	d802      	bhi.n	800ca0e <UART_SetConfig+0x1f6>
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d007      	beq.n	800ca1c <UART_SetConfig+0x204>
 800ca0c:	e012      	b.n	800ca34 <UART_SetConfig+0x21c>
 800ca0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca12:	d006      	beq.n	800ca22 <UART_SetConfig+0x20a>
 800ca14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca18:	d009      	beq.n	800ca2e <UART_SetConfig+0x216>
 800ca1a:	e00b      	b.n	800ca34 <UART_SetConfig+0x21c>
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	77fb      	strb	r3, [r7, #31]
 800ca20:	e0a1      	b.n	800cb66 <UART_SetConfig+0x34e>
 800ca22:	2302      	movs	r3, #2
 800ca24:	77fb      	strb	r3, [r7, #31]
 800ca26:	e09e      	b.n	800cb66 <UART_SetConfig+0x34e>
 800ca28:	2304      	movs	r3, #4
 800ca2a:	77fb      	strb	r3, [r7, #31]
 800ca2c:	e09b      	b.n	800cb66 <UART_SetConfig+0x34e>
 800ca2e:	2308      	movs	r3, #8
 800ca30:	77fb      	strb	r3, [r7, #31]
 800ca32:	e098      	b.n	800cb66 <UART_SetConfig+0x34e>
 800ca34:	2310      	movs	r3, #16
 800ca36:	77fb      	strb	r3, [r7, #31]
 800ca38:	bf00      	nop
 800ca3a:	e094      	b.n	800cb66 <UART_SetConfig+0x34e>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a39      	ldr	r2, [pc, #228]	; (800cb28 <UART_SetConfig+0x310>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d124      	bne.n	800ca90 <UART_SetConfig+0x278>
 800ca46:	4b33      	ldr	r3, [pc, #204]	; (800cb14 <UART_SetConfig+0x2fc>)
 800ca48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ca50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca54:	d012      	beq.n	800ca7c <UART_SetConfig+0x264>
 800ca56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca5a:	d802      	bhi.n	800ca62 <UART_SetConfig+0x24a>
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d007      	beq.n	800ca70 <UART_SetConfig+0x258>
 800ca60:	e012      	b.n	800ca88 <UART_SetConfig+0x270>
 800ca62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca66:	d006      	beq.n	800ca76 <UART_SetConfig+0x25e>
 800ca68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ca6c:	d009      	beq.n	800ca82 <UART_SetConfig+0x26a>
 800ca6e:	e00b      	b.n	800ca88 <UART_SetConfig+0x270>
 800ca70:	2301      	movs	r3, #1
 800ca72:	77fb      	strb	r3, [r7, #31]
 800ca74:	e077      	b.n	800cb66 <UART_SetConfig+0x34e>
 800ca76:	2302      	movs	r3, #2
 800ca78:	77fb      	strb	r3, [r7, #31]
 800ca7a:	e074      	b.n	800cb66 <UART_SetConfig+0x34e>
 800ca7c:	2304      	movs	r3, #4
 800ca7e:	77fb      	strb	r3, [r7, #31]
 800ca80:	e071      	b.n	800cb66 <UART_SetConfig+0x34e>
 800ca82:	2308      	movs	r3, #8
 800ca84:	77fb      	strb	r3, [r7, #31]
 800ca86:	e06e      	b.n	800cb66 <UART_SetConfig+0x34e>
 800ca88:	2310      	movs	r3, #16
 800ca8a:	77fb      	strb	r3, [r7, #31]
 800ca8c:	bf00      	nop
 800ca8e:	e06a      	b.n	800cb66 <UART_SetConfig+0x34e>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a25      	ldr	r2, [pc, #148]	; (800cb2c <UART_SetConfig+0x314>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d124      	bne.n	800cae4 <UART_SetConfig+0x2cc>
 800ca9a:	4b1e      	ldr	r3, [pc, #120]	; (800cb14 <UART_SetConfig+0x2fc>)
 800ca9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caa0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800caa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caa8:	d012      	beq.n	800cad0 <UART_SetConfig+0x2b8>
 800caaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caae:	d802      	bhi.n	800cab6 <UART_SetConfig+0x29e>
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d007      	beq.n	800cac4 <UART_SetConfig+0x2ac>
 800cab4:	e012      	b.n	800cadc <UART_SetConfig+0x2c4>
 800cab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800caba:	d006      	beq.n	800caca <UART_SetConfig+0x2b2>
 800cabc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cac0:	d009      	beq.n	800cad6 <UART_SetConfig+0x2be>
 800cac2:	e00b      	b.n	800cadc <UART_SetConfig+0x2c4>
 800cac4:	2300      	movs	r3, #0
 800cac6:	77fb      	strb	r3, [r7, #31]
 800cac8:	e04d      	b.n	800cb66 <UART_SetConfig+0x34e>
 800caca:	2302      	movs	r3, #2
 800cacc:	77fb      	strb	r3, [r7, #31]
 800cace:	e04a      	b.n	800cb66 <UART_SetConfig+0x34e>
 800cad0:	2304      	movs	r3, #4
 800cad2:	77fb      	strb	r3, [r7, #31]
 800cad4:	e047      	b.n	800cb66 <UART_SetConfig+0x34e>
 800cad6:	2308      	movs	r3, #8
 800cad8:	77fb      	strb	r3, [r7, #31]
 800cada:	e044      	b.n	800cb66 <UART_SetConfig+0x34e>
 800cadc:	2310      	movs	r3, #16
 800cade:	77fb      	strb	r3, [r7, #31]
 800cae0:	bf00      	nop
 800cae2:	e040      	b.n	800cb66 <UART_SetConfig+0x34e>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a11      	ldr	r2, [pc, #68]	; (800cb30 <UART_SetConfig+0x318>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d139      	bne.n	800cb62 <UART_SetConfig+0x34a>
 800caee:	4b09      	ldr	r3, [pc, #36]	; (800cb14 <UART_SetConfig+0x2fc>)
 800caf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800caf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cafc:	d027      	beq.n	800cb4e <UART_SetConfig+0x336>
 800cafe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb02:	d817      	bhi.n	800cb34 <UART_SetConfig+0x31c>
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d01c      	beq.n	800cb42 <UART_SetConfig+0x32a>
 800cb08:	e027      	b.n	800cb5a <UART_SetConfig+0x342>
 800cb0a:	bf00      	nop
 800cb0c:	efff69f3 	.word	0xefff69f3
 800cb10:	40011000 	.word	0x40011000
 800cb14:	40023800 	.word	0x40023800
 800cb18:	40004400 	.word	0x40004400
 800cb1c:	40004800 	.word	0x40004800
 800cb20:	40004c00 	.word	0x40004c00
 800cb24:	40005000 	.word	0x40005000
 800cb28:	40011400 	.word	0x40011400
 800cb2c:	40007800 	.word	0x40007800
 800cb30:	40007c00 	.word	0x40007c00
 800cb34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb38:	d006      	beq.n	800cb48 <UART_SetConfig+0x330>
 800cb3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cb3e:	d009      	beq.n	800cb54 <UART_SetConfig+0x33c>
 800cb40:	e00b      	b.n	800cb5a <UART_SetConfig+0x342>
 800cb42:	2300      	movs	r3, #0
 800cb44:	77fb      	strb	r3, [r7, #31]
 800cb46:	e00e      	b.n	800cb66 <UART_SetConfig+0x34e>
 800cb48:	2302      	movs	r3, #2
 800cb4a:	77fb      	strb	r3, [r7, #31]
 800cb4c:	e00b      	b.n	800cb66 <UART_SetConfig+0x34e>
 800cb4e:	2304      	movs	r3, #4
 800cb50:	77fb      	strb	r3, [r7, #31]
 800cb52:	e008      	b.n	800cb66 <UART_SetConfig+0x34e>
 800cb54:	2308      	movs	r3, #8
 800cb56:	77fb      	strb	r3, [r7, #31]
 800cb58:	e005      	b.n	800cb66 <UART_SetConfig+0x34e>
 800cb5a:	2310      	movs	r3, #16
 800cb5c:	77fb      	strb	r3, [r7, #31]
 800cb5e:	bf00      	nop
 800cb60:	e001      	b.n	800cb66 <UART_SetConfig+0x34e>
 800cb62:	2310      	movs	r3, #16
 800cb64:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	69db      	ldr	r3, [r3, #28]
 800cb6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb6e:	d17f      	bne.n	800cc70 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800cb70:	7ffb      	ldrb	r3, [r7, #31]
 800cb72:	2b08      	cmp	r3, #8
 800cb74:	d85c      	bhi.n	800cc30 <UART_SetConfig+0x418>
 800cb76:	a201      	add	r2, pc, #4	; (adr r2, 800cb7c <UART_SetConfig+0x364>)
 800cb78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb7c:	0800cba1 	.word	0x0800cba1
 800cb80:	0800cbc1 	.word	0x0800cbc1
 800cb84:	0800cbe1 	.word	0x0800cbe1
 800cb88:	0800cc31 	.word	0x0800cc31
 800cb8c:	0800cbf9 	.word	0x0800cbf9
 800cb90:	0800cc31 	.word	0x0800cc31
 800cb94:	0800cc31 	.word	0x0800cc31
 800cb98:	0800cc31 	.word	0x0800cc31
 800cb9c:	0800cc19 	.word	0x0800cc19
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cba0:	f7fd fc16 	bl	800a3d0 <HAL_RCC_GetPCLK1Freq>
 800cba4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	005a      	lsls	r2, r3, #1
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	085b      	lsrs	r3, r3, #1
 800cbb0:	441a      	add	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	61bb      	str	r3, [r7, #24]
        break;
 800cbbe:	e03a      	b.n	800cc36 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbc0:	f7fd fc1a 	bl	800a3f8 <HAL_RCC_GetPCLK2Freq>
 800cbc4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	005a      	lsls	r2, r3, #1
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	085b      	lsrs	r3, r3, #1
 800cbd0:	441a      	add	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	61bb      	str	r3, [r7, #24]
        break;
 800cbde:	e02a      	b.n	800cc36 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	085a      	lsrs	r2, r3, #1
 800cbe6:	4b5f      	ldr	r3, [pc, #380]	; (800cd64 <UART_SetConfig+0x54c>)
 800cbe8:	4413      	add	r3, r2
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	6852      	ldr	r2, [r2, #4]
 800cbee:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	61bb      	str	r3, [r7, #24]
        break;
 800cbf6:	e01e      	b.n	800cc36 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cbf8:	f7fd fb2c 	bl	800a254 <HAL_RCC_GetSysClockFreq>
 800cbfc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	005a      	lsls	r2, r3, #1
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	085b      	lsrs	r3, r3, #1
 800cc08:	441a      	add	r2, r3
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	61bb      	str	r3, [r7, #24]
        break;
 800cc16:	e00e      	b.n	800cc36 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	085b      	lsrs	r3, r3, #1
 800cc1e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	61bb      	str	r3, [r7, #24]
        break;
 800cc2e:	e002      	b.n	800cc36 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800cc30:	2301      	movs	r3, #1
 800cc32:	75fb      	strb	r3, [r7, #23]
        break;
 800cc34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc36:	69bb      	ldr	r3, [r7, #24]
 800cc38:	2b0f      	cmp	r3, #15
 800cc3a:	d916      	bls.n	800cc6a <UART_SetConfig+0x452>
 800cc3c:	69bb      	ldr	r3, [r7, #24]
 800cc3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc42:	d212      	bcs.n	800cc6a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	f023 030f 	bic.w	r3, r3, #15
 800cc4c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc4e:	69bb      	ldr	r3, [r7, #24]
 800cc50:	085b      	lsrs	r3, r3, #1
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	f003 0307 	and.w	r3, r3, #7
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	897b      	ldrh	r3, [r7, #10]
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	897a      	ldrh	r2, [r7, #10]
 800cc66:	60da      	str	r2, [r3, #12]
 800cc68:	e070      	b.n	800cd4c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	75fb      	strb	r3, [r7, #23]
 800cc6e:	e06d      	b.n	800cd4c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800cc70:	7ffb      	ldrb	r3, [r7, #31]
 800cc72:	2b08      	cmp	r3, #8
 800cc74:	d859      	bhi.n	800cd2a <UART_SetConfig+0x512>
 800cc76:	a201      	add	r2, pc, #4	; (adr r2, 800cc7c <UART_SetConfig+0x464>)
 800cc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc7c:	0800cca1 	.word	0x0800cca1
 800cc80:	0800ccbf 	.word	0x0800ccbf
 800cc84:	0800ccdd 	.word	0x0800ccdd
 800cc88:	0800cd2b 	.word	0x0800cd2b
 800cc8c:	0800ccf5 	.word	0x0800ccf5
 800cc90:	0800cd2b 	.word	0x0800cd2b
 800cc94:	0800cd2b 	.word	0x0800cd2b
 800cc98:	0800cd2b 	.word	0x0800cd2b
 800cc9c:	0800cd13 	.word	0x0800cd13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cca0:	f7fd fb96 	bl	800a3d0 <HAL_RCC_GetPCLK1Freq>
 800cca4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	085a      	lsrs	r2, r3, #1
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	441a      	add	r2, r3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	61bb      	str	r3, [r7, #24]
        break;
 800ccbc:	e038      	b.n	800cd30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccbe:	f7fd fb9b 	bl	800a3f8 <HAL_RCC_GetPCLK2Freq>
 800ccc2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	085a      	lsrs	r2, r3, #1
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	441a      	add	r2, r3
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	61bb      	str	r3, [r7, #24]
        break;
 800ccda:	e029      	b.n	800cd30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	085a      	lsrs	r2, r3, #1
 800cce2:	4b21      	ldr	r3, [pc, #132]	; (800cd68 <UART_SetConfig+0x550>)
 800cce4:	4413      	add	r3, r2
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	6852      	ldr	r2, [r2, #4]
 800ccea:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	61bb      	str	r3, [r7, #24]
        break;
 800ccf2:	e01d      	b.n	800cd30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ccf4:	f7fd faae 	bl	800a254 <HAL_RCC_GetSysClockFreq>
 800ccf8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	085a      	lsrs	r2, r3, #1
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	441a      	add	r2, r3
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd0c:	b29b      	uxth	r3, r3
 800cd0e:	61bb      	str	r3, [r7, #24]
        break;
 800cd10:	e00e      	b.n	800cd30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	085b      	lsrs	r3, r3, #1
 800cd18:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	61bb      	str	r3, [r7, #24]
        break;
 800cd28:	e002      	b.n	800cd30 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	75fb      	strb	r3, [r7, #23]
        break;
 800cd2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	2b0f      	cmp	r3, #15
 800cd34:	d908      	bls.n	800cd48 <UART_SetConfig+0x530>
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd3c:	d204      	bcs.n	800cd48 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	69ba      	ldr	r2, [r7, #24]
 800cd44:	60da      	str	r2, [r3, #12]
 800cd46:	e001      	b.n	800cd4c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2200      	movs	r2, #0
 800cd56:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800cd58:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3720      	adds	r7, #32
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	01e84800 	.word	0x01e84800
 800cd68:	00f42400 	.word	0x00f42400

0800cd6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd78:	f003 0301 	and.w	r3, r3, #1
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d00a      	beq.n	800cd96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	430a      	orrs	r2, r1
 800cd94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd9a:	f003 0302 	and.w	r3, r3, #2
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d00a      	beq.n	800cdb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	430a      	orrs	r2, r1
 800cdb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdbc:	f003 0304 	and.w	r3, r3, #4
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00a      	beq.n	800cdda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	430a      	orrs	r2, r1
 800cdd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdde:	f003 0308 	and.w	r3, r3, #8
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d00a      	beq.n	800cdfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	430a      	orrs	r2, r1
 800cdfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce00:	f003 0310 	and.w	r3, r3, #16
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00a      	beq.n	800ce1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	689b      	ldr	r3, [r3, #8]
 800ce0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	430a      	orrs	r2, r1
 800ce1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce22:	f003 0320 	and.w	r3, r3, #32
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d00a      	beq.n	800ce40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	689b      	ldr	r3, [r3, #8]
 800ce30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	430a      	orrs	r2, r1
 800ce3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d01a      	beq.n	800ce82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	430a      	orrs	r2, r1
 800ce60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce6a:	d10a      	bne.n	800ce82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	430a      	orrs	r2, r1
 800ce80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00a      	beq.n	800cea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	430a      	orrs	r2, r1
 800cea2:	605a      	str	r2, [r3, #4]
  }
}
 800cea4:	bf00      	nop
 800cea6:	370c      	adds	r7, #12
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af02      	add	r7, sp, #8
 800ceb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2200      	movs	r2, #0
 800cebc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800cebe:	f7fa fae7 	bl	8007490 <HAL_GetTick>
 800cec2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f003 0308 	and.w	r3, r3, #8
 800cece:	2b08      	cmp	r3, #8
 800ced0:	d10e      	bne.n	800cef0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ced2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2200      	movs	r2, #0
 800cedc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f000 f82a 	bl	800cf3a <UART_WaitOnFlagUntilTimeout>
 800cee6:	4603      	mov	r3, r0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d001      	beq.n	800cef0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ceec:	2303      	movs	r3, #3
 800ceee:	e020      	b.n	800cf32 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f003 0304 	and.w	r3, r3, #4
 800cefa:	2b04      	cmp	r3, #4
 800cefc:	d10e      	bne.n	800cf1c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cefe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf02:	9300      	str	r3, [sp, #0]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2200      	movs	r2, #0
 800cf08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f000 f814 	bl	800cf3a <UART_WaitOnFlagUntilTimeout>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d001      	beq.n	800cf1c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf18:	2303      	movs	r3, #3
 800cf1a:	e00a      	b.n	800cf32 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2220      	movs	r2, #32
 800cf20:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2220      	movs	r2, #32
 800cf26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800cf30:	2300      	movs	r3, #0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3710      	adds	r7, #16
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b084      	sub	sp, #16
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	60f8      	str	r0, [r7, #12]
 800cf42:	60b9      	str	r1, [r7, #8]
 800cf44:	603b      	str	r3, [r7, #0]
 800cf46:	4613      	mov	r3, r2
 800cf48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf4a:	e05d      	b.n	800d008 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf52:	d059      	beq.n	800d008 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf54:	f7fa fa9c 	bl	8007490 <HAL_GetTick>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	1ad3      	subs	r3, r2, r3
 800cf5e:	69ba      	ldr	r2, [r7, #24]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d302      	bcc.n	800cf6a <UART_WaitOnFlagUntilTimeout+0x30>
 800cf64:	69bb      	ldr	r3, [r7, #24]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d11b      	bne.n	800cfa2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cf78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	689a      	ldr	r2, [r3, #8]
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f022 0201 	bic.w	r2, r2, #1
 800cf88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2220      	movs	r2, #32
 800cf8e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2220      	movs	r2, #32
 800cf94:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800cf9e:	2303      	movs	r3, #3
 800cfa0:	e042      	b.n	800d028 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f003 0304 	and.w	r3, r3, #4
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d02b      	beq.n	800d008 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	69db      	ldr	r3, [r3, #28]
 800cfb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cfbe:	d123      	bne.n	800d008 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfc8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cfd8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	689a      	ldr	r2, [r3, #8]
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f022 0201 	bic.w	r2, r2, #1
 800cfe8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2220      	movs	r2, #32
 800cfee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2220      	movs	r2, #32
 800cff4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2220      	movs	r2, #32
 800cffa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2200      	movs	r2, #0
 800d000:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800d004:	2303      	movs	r3, #3
 800d006:	e00f      	b.n	800d028 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	69da      	ldr	r2, [r3, #28]
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	4013      	ands	r3, r2
 800d012:	68ba      	ldr	r2, [r7, #8]
 800d014:	429a      	cmp	r2, r3
 800d016:	bf0c      	ite	eq
 800d018:	2301      	moveq	r3, #1
 800d01a:	2300      	movne	r3, #0
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	461a      	mov	r2, r3
 800d020:	79fb      	ldrb	r3, [r7, #7]
 800d022:	429a      	cmp	r2, r3
 800d024:	d092      	beq.n	800cf4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d026:	2300      	movs	r3, #0
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3710      	adds	r7, #16
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d030:	b084      	sub	sp, #16
 800d032:	b580      	push	{r7, lr}
 800d034:	b084      	sub	sp, #16
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
 800d03a:	f107 001c 	add.w	r0, r7, #28
 800d03e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d044:	2b01      	cmp	r3, #1
 800d046:	d120      	bne.n	800d08a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d04c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	68da      	ldr	r2, [r3, #12]
 800d058:	4b20      	ldr	r3, [pc, #128]	; (800d0dc <USB_CoreInit+0xac>)
 800d05a:	4013      	ands	r3, r2
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d06c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d105      	bne.n	800d07e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f000 fa52 	bl	800d528 <USB_CoreReset>
 800d084:	4603      	mov	r3, r0
 800d086:	73fb      	strb	r3, [r7, #15]
 800d088:	e010      	b.n	800d0ac <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f000 fa46 	bl	800d528 <USB_CoreReset>
 800d09c:	4603      	mov	r3, r0
 800d09e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800d0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d10b      	bne.n	800d0ca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	f043 0206 	orr.w	r2, r3, #6
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	689b      	ldr	r3, [r3, #8]
 800d0c2:	f043 0220 	orr.w	r2, r3, #32
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3710      	adds	r7, #16
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d0d6:	b004      	add	sp, #16
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop
 800d0dc:	ffbdffbf 	.word	0xffbdffbf

0800d0e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b083      	sub	sp, #12
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	689b      	ldr	r3, [r3, #8]
 800d0ec:	f023 0201 	bic.w	r2, r3, #1
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d0f4:	2300      	movs	r3, #0
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	370c      	adds	r7, #12
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr

0800d102 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b082      	sub	sp, #8
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
 800d10a:	460b      	mov	r3, r1
 800d10c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	68db      	ldr	r3, [r3, #12]
 800d112:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d11a:	78fb      	ldrb	r3, [r7, #3]
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d106      	bne.n	800d12e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	60da      	str	r2, [r3, #12]
 800d12c:	e00b      	b.n	800d146 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d12e:	78fb      	ldrb	r3, [r7, #3]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d106      	bne.n	800d142 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	60da      	str	r2, [r3, #12]
 800d140:	e001      	b.n	800d146 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d142:	2301      	movs	r3, #1
 800d144:	e003      	b.n	800d14e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d146:	2032      	movs	r0, #50	; 0x32
 800d148:	f7fa f9ae 	bl	80074a8 <HAL_Delay>

  return HAL_OK;
 800d14c:	2300      	movs	r3, #0
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
	...

0800d158 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d158:	b084      	sub	sp, #16
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b086      	sub	sp, #24
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
 800d162:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d166:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d172:	2300      	movs	r3, #0
 800d174:	613b      	str	r3, [r7, #16]
 800d176:	e009      	b.n	800d18c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	3340      	adds	r3, #64	; 0x40
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	4413      	add	r3, r2
 800d182:	2200      	movs	r2, #0
 800d184:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	3301      	adds	r3, #1
 800d18a:	613b      	str	r3, [r7, #16]
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	2b0e      	cmp	r3, #14
 800d190:	d9f2      	bls.n	800d178 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d194:	2b00      	cmp	r3, #0
 800d196:	d11c      	bne.n	800d1d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	68fa      	ldr	r2, [r7, #12]
 800d1a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1a6:	f043 0302 	orr.w	r3, r3, #2
 800d1aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	601a      	str	r2, [r3, #0]
 800d1d0:	e005      	b.n	800d1de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	680b      	ldr	r3, [r1, #0]
 800d1fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d200:	2b01      	cmp	r3, #1
 800d202:	d10c      	bne.n	800d21e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d206:	2b00      	cmp	r3, #0
 800d208:	d104      	bne.n	800d214 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d20a:	2100      	movs	r1, #0
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 f959 	bl	800d4c4 <USB_SetDevSpeed>
 800d212:	e018      	b.n	800d246 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d214:	2101      	movs	r1, #1
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 f954 	bl	800d4c4 <USB_SetDevSpeed>
 800d21c:	e013      	b.n	800d246 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800d21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d220:	2b03      	cmp	r3, #3
 800d222:	d10c      	bne.n	800d23e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d226:	2b00      	cmp	r3, #0
 800d228:	d104      	bne.n	800d234 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d22a:	2100      	movs	r1, #0
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 f949 	bl	800d4c4 <USB_SetDevSpeed>
 800d232:	e008      	b.n	800d246 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d234:	2101      	movs	r1, #1
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 f944 	bl	800d4c4 <USB_SetDevSpeed>
 800d23c:	e003      	b.n	800d246 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d23e:	2103      	movs	r1, #3
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 f93f 	bl	800d4c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d246:	2110      	movs	r1, #16
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 f8f3 	bl	800d434 <USB_FlushTxFifo>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	d001      	beq.n	800d258 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800d254:	2301      	movs	r3, #1
 800d256:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f911 	bl	800d480 <USB_FlushRxFifo>
 800d25e:	4603      	mov	r3, r0
 800d260:	2b00      	cmp	r3, #0
 800d262:	d001      	beq.n	800d268 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800d264:	2301      	movs	r3, #1
 800d266:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d26e:	461a      	mov	r2, r3
 800d270:	2300      	movs	r3, #0
 800d272:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d27a:	461a      	mov	r2, r3
 800d27c:	2300      	movs	r3, #0
 800d27e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d286:	461a      	mov	r2, r3
 800d288:	2300      	movs	r3, #0
 800d28a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d28c:	2300      	movs	r3, #0
 800d28e:	613b      	str	r3, [r7, #16]
 800d290:	e043      	b.n	800d31a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	015a      	lsls	r2, r3, #5
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	4413      	add	r3, r2
 800d29a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d2a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d2a8:	d118      	bne.n	800d2dc <USB_DevInit+0x184>
    {
      if (i == 0U)
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d10a      	bne.n	800d2c6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	015a      	lsls	r2, r3, #5
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2bc:	461a      	mov	r2, r3
 800d2be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d2c2:	6013      	str	r3, [r2, #0]
 800d2c4:	e013      	b.n	800d2ee <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	015a      	lsls	r2, r3, #5
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d2d8:	6013      	str	r3, [r2, #0]
 800d2da:	e008      	b.n	800d2ee <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	015a      	lsls	r2, r3, #5
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	015a      	lsls	r2, r3, #5
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	4413      	add	r3, r2
 800d2f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	015a      	lsls	r2, r3, #5
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	4413      	add	r3, r2
 800d308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d30c:	461a      	mov	r2, r3
 800d30e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d312:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	3301      	adds	r3, #1
 800d318:	613b      	str	r3, [r7, #16]
 800d31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31c:	693a      	ldr	r2, [r7, #16]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d3b7      	bcc.n	800d292 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d322:	2300      	movs	r3, #0
 800d324:	613b      	str	r3, [r7, #16]
 800d326:	e043      	b.n	800d3b0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	015a      	lsls	r2, r3, #5
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	4413      	add	r3, r2
 800d330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d33a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d33e:	d118      	bne.n	800d372 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d10a      	bne.n	800d35c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	015a      	lsls	r2, r3, #5
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	4413      	add	r3, r2
 800d34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d352:	461a      	mov	r2, r3
 800d354:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d358:	6013      	str	r3, [r2, #0]
 800d35a:	e013      	b.n	800d384 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	015a      	lsls	r2, r3, #5
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	4413      	add	r3, r2
 800d364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d368:	461a      	mov	r2, r3
 800d36a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d36e:	6013      	str	r3, [r2, #0]
 800d370:	e008      	b.n	800d384 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	015a      	lsls	r2, r3, #5
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	4413      	add	r3, r2
 800d37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d37e:	461a      	mov	r2, r3
 800d380:	2300      	movs	r3, #0
 800d382:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	015a      	lsls	r2, r3, #5
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	4413      	add	r3, r2
 800d38c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d390:	461a      	mov	r2, r3
 800d392:	2300      	movs	r3, #0
 800d394:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	015a      	lsls	r2, r3, #5
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	4413      	add	r3, r2
 800d39e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d3a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	613b      	str	r3, [r7, #16]
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b2:	693a      	ldr	r2, [r7, #16]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d3b7      	bcc.n	800d328 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3be:	691b      	ldr	r3, [r3, #16]
 800d3c0:	68fa      	ldr	r2, [r7, #12]
 800d3c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d3c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d3d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d105      	bne.n	800d3ec <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	699b      	ldr	r3, [r3, #24]
 800d3e4:	f043 0210 	orr.w	r2, r3, #16
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	699a      	ldr	r2, [r3, #24]
 800d3f0:	4b0e      	ldr	r3, [pc, #56]	; (800d42c <USB_DevInit+0x2d4>)
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d005      	beq.n	800d40a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	699b      	ldr	r3, [r3, #24]
 800d402:	f043 0208 	orr.w	r2, r3, #8
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d40a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d105      	bne.n	800d41c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	699a      	ldr	r2, [r3, #24]
 800d414:	4b06      	ldr	r3, [pc, #24]	; (800d430 <USB_DevInit+0x2d8>)
 800d416:	4313      	orrs	r3, r2
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d41c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3718      	adds	r7, #24
 800d422:	46bd      	mov	sp, r7
 800d424:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d428:	b004      	add	sp, #16
 800d42a:	4770      	bx	lr
 800d42c:	803c3800 	.word	0x803c3800
 800d430:	40000004 	.word	0x40000004

0800d434 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d434:	b480      	push	{r7}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d43e:	2300      	movs	r3, #0
 800d440:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	019b      	lsls	r3, r3, #6
 800d446:	f043 0220 	orr.w	r2, r3, #32
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	3301      	adds	r3, #1
 800d452:	60fb      	str	r3, [r7, #12]
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	4a09      	ldr	r2, [pc, #36]	; (800d47c <USB_FlushTxFifo+0x48>)
 800d458:	4293      	cmp	r3, r2
 800d45a:	d901      	bls.n	800d460 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d45c:	2303      	movs	r3, #3
 800d45e:	e006      	b.n	800d46e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	f003 0320 	and.w	r3, r3, #32
 800d468:	2b20      	cmp	r3, #32
 800d46a:	d0f0      	beq.n	800d44e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d46c:	2300      	movs	r3, #0
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3714      	adds	r7, #20
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr
 800d47a:	bf00      	nop
 800d47c:	00030d40 	.word	0x00030d40

0800d480 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d480:	b480      	push	{r7}
 800d482:	b085      	sub	sp, #20
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d488:	2300      	movs	r3, #0
 800d48a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2210      	movs	r2, #16
 800d490:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	3301      	adds	r3, #1
 800d496:	60fb      	str	r3, [r7, #12]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	4a09      	ldr	r2, [pc, #36]	; (800d4c0 <USB_FlushRxFifo+0x40>)
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d901      	bls.n	800d4a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d4a0:	2303      	movs	r3, #3
 800d4a2:	e006      	b.n	800d4b2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	691b      	ldr	r3, [r3, #16]
 800d4a8:	f003 0310 	and.w	r3, r3, #16
 800d4ac:	2b10      	cmp	r3, #16
 800d4ae:	d0f0      	beq.n	800d492 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d4b0:	2300      	movs	r3, #0
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3714      	adds	r7, #20
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr
 800d4be:	bf00      	nop
 800d4c0:	00030d40 	.word	0x00030d40

0800d4c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	78fb      	ldrb	r3, [r7, #3]
 800d4de:	68f9      	ldr	r1, [r7, #12]
 800d4e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d4e8:	2300      	movs	r3, #0
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3714      	adds	r7, #20
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr

0800d4f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b084      	sub	sp, #16
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	68fa      	ldr	r2, [r7, #12]
 800d50c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d510:	f043 0302 	orr.w	r3, r3, #2
 800d514:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d516:	2003      	movs	r0, #3
 800d518:	f7f9 ffc6 	bl	80074a8 <HAL_Delay>

  return HAL_OK;
 800d51c:	2300      	movs	r3, #0
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
	...

0800d528 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d530:	2300      	movs	r3, #0
 800d532:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	3301      	adds	r3, #1
 800d538:	60fb      	str	r3, [r7, #12]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	4a13      	ldr	r2, [pc, #76]	; (800d58c <USB_CoreReset+0x64>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d901      	bls.n	800d546 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d542:	2303      	movs	r3, #3
 800d544:	e01b      	b.n	800d57e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	691b      	ldr	r3, [r3, #16]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	daf2      	bge.n	800d534 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d54e:	2300      	movs	r3, #0
 800d550:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	691b      	ldr	r3, [r3, #16]
 800d556:	f043 0201 	orr.w	r2, r3, #1
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	3301      	adds	r3, #1
 800d562:	60fb      	str	r3, [r7, #12]
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	4a09      	ldr	r2, [pc, #36]	; (800d58c <USB_CoreReset+0x64>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	d901      	bls.n	800d570 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d56c:	2303      	movs	r3, #3
 800d56e:	e006      	b.n	800d57e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	691b      	ldr	r3, [r3, #16]
 800d574:	f003 0301 	and.w	r3, r3, #1
 800d578:	2b01      	cmp	r3, #1
 800d57a:	d0f0      	beq.n	800d55e <USB_CoreReset+0x36>

  return HAL_OK;
 800d57c:	2300      	movs	r3, #0
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3714      	adds	r7, #20
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop
 800d58c:	00030d40 	.word	0x00030d40

0800d590 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d590:	b480      	push	{r7}
 800d592:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d594:	bf00      	nop
 800d596:	46bd      	mov	sp, r7
 800d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59c:	4770      	bx	lr
	...

0800d5a0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5a6:	f3ef 8305 	mrs	r3, IPSR
 800d5aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800d5ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d10f      	bne.n	800d5d2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5b2:	f3ef 8310 	mrs	r3, PRIMASK
 800d5b6:	607b      	str	r3, [r7, #4]
  return(result);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d105      	bne.n	800d5ca <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d5be:	f3ef 8311 	mrs	r3, BASEPRI
 800d5c2:	603b      	str	r3, [r7, #0]
  return(result);
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d007      	beq.n	800d5da <osKernelInitialize+0x3a>
 800d5ca:	4b0e      	ldr	r3, [pc, #56]	; (800d604 <osKernelInitialize+0x64>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b02      	cmp	r3, #2
 800d5d0:	d103      	bne.n	800d5da <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d5d2:	f06f 0305 	mvn.w	r3, #5
 800d5d6:	60fb      	str	r3, [r7, #12]
 800d5d8:	e00c      	b.n	800d5f4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d5da:	4b0a      	ldr	r3, [pc, #40]	; (800d604 <osKernelInitialize+0x64>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d105      	bne.n	800d5ee <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d5e2:	4b08      	ldr	r3, [pc, #32]	; (800d604 <osKernelInitialize+0x64>)
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	60fb      	str	r3, [r7, #12]
 800d5ec:	e002      	b.n	800d5f4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d5f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3714      	adds	r7, #20
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d600:	4770      	bx	lr
 800d602:	bf00      	nop
 800d604:	200032d8 	.word	0x200032d8

0800d608 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d60e:	f3ef 8305 	mrs	r3, IPSR
 800d612:	60bb      	str	r3, [r7, #8]
  return(result);
 800d614:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d616:	2b00      	cmp	r3, #0
 800d618:	d10f      	bne.n	800d63a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d61a:	f3ef 8310 	mrs	r3, PRIMASK
 800d61e:	607b      	str	r3, [r7, #4]
  return(result);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d105      	bne.n	800d632 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d626:	f3ef 8311 	mrs	r3, BASEPRI
 800d62a:	603b      	str	r3, [r7, #0]
  return(result);
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d007      	beq.n	800d642 <osKernelStart+0x3a>
 800d632:	4b0f      	ldr	r3, [pc, #60]	; (800d670 <osKernelStart+0x68>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	2b02      	cmp	r3, #2
 800d638:	d103      	bne.n	800d642 <osKernelStart+0x3a>
    stat = osErrorISR;
 800d63a:	f06f 0305 	mvn.w	r3, #5
 800d63e:	60fb      	str	r3, [r7, #12]
 800d640:	e010      	b.n	800d664 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d642:	4b0b      	ldr	r3, [pc, #44]	; (800d670 <osKernelStart+0x68>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b01      	cmp	r3, #1
 800d648:	d109      	bne.n	800d65e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d64a:	f7ff ffa1 	bl	800d590 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d64e:	4b08      	ldr	r3, [pc, #32]	; (800d670 <osKernelStart+0x68>)
 800d650:	2202      	movs	r2, #2
 800d652:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d654:	f001 f89c 	bl	800e790 <vTaskStartScheduler>
      stat = osOK;
 800d658:	2300      	movs	r3, #0
 800d65a:	60fb      	str	r3, [r7, #12]
 800d65c:	e002      	b.n	800d664 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d65e:	f04f 33ff 	mov.w	r3, #4294967295
 800d662:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d664:	68fb      	ldr	r3, [r7, #12]
}
 800d666:	4618      	mov	r0, r3
 800d668:	3710      	adds	r7, #16
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	200032d8 	.word	0x200032d8

0800d674 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d674:	b580      	push	{r7, lr}
 800d676:	b090      	sub	sp, #64	; 0x40
 800d678:	af04      	add	r7, sp, #16
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	60b9      	str	r1, [r7, #8]
 800d67e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d680:	2300      	movs	r3, #0
 800d682:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d684:	f3ef 8305 	mrs	r3, IPSR
 800d688:	61fb      	str	r3, [r7, #28]
  return(result);
 800d68a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	f040 808f 	bne.w	800d7b0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d692:	f3ef 8310 	mrs	r3, PRIMASK
 800d696:	61bb      	str	r3, [r7, #24]
  return(result);
 800d698:	69bb      	ldr	r3, [r7, #24]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d105      	bne.n	800d6aa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d69e:	f3ef 8311 	mrs	r3, BASEPRI
 800d6a2:	617b      	str	r3, [r7, #20]
  return(result);
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d003      	beq.n	800d6b2 <osThreadNew+0x3e>
 800d6aa:	4b44      	ldr	r3, [pc, #272]	; (800d7bc <osThreadNew+0x148>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2b02      	cmp	r3, #2
 800d6b0:	d07e      	beq.n	800d7b0 <osThreadNew+0x13c>
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d07b      	beq.n	800d7b0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800d6b8:	2380      	movs	r3, #128	; 0x80
 800d6ba:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d6bc:	2318      	movs	r3, #24
 800d6be:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800d6c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d045      	beq.n	800d75c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d002      	beq.n	800d6de <osThreadNew+0x6a>
        name = attr->name;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	699b      	ldr	r3, [r3, #24]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d002      	beq.n	800d6ec <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	699b      	ldr	r3, [r3, #24]
 800d6ea:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d008      	beq.n	800d704 <osThreadNew+0x90>
 800d6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f4:	2b38      	cmp	r3, #56	; 0x38
 800d6f6:	d805      	bhi.n	800d704 <osThreadNew+0x90>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	f003 0301 	and.w	r3, r3, #1
 800d700:	2b00      	cmp	r3, #0
 800d702:	d001      	beq.n	800d708 <osThreadNew+0x94>
        return (NULL);
 800d704:	2300      	movs	r3, #0
 800d706:	e054      	b.n	800d7b2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	695b      	ldr	r3, [r3, #20]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d003      	beq.n	800d718 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	695b      	ldr	r3, [r3, #20]
 800d714:	089b      	lsrs	r3, r3, #2
 800d716:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00e      	beq.n	800d73e <osThreadNew+0xca>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	2b5b      	cmp	r3, #91	; 0x5b
 800d726:	d90a      	bls.n	800d73e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d006      	beq.n	800d73e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	695b      	ldr	r3, [r3, #20]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <osThreadNew+0xca>
        mem = 1;
 800d738:	2301      	movs	r3, #1
 800d73a:	623b      	str	r3, [r7, #32]
 800d73c:	e010      	b.n	800d760 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	689b      	ldr	r3, [r3, #8]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d10c      	bne.n	800d760 <osThreadNew+0xec>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d108      	bne.n	800d760 <osThreadNew+0xec>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	691b      	ldr	r3, [r3, #16]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d104      	bne.n	800d760 <osThreadNew+0xec>
          mem = 0;
 800d756:	2300      	movs	r3, #0
 800d758:	623b      	str	r3, [r7, #32]
 800d75a:	e001      	b.n	800d760 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800d75c:	2300      	movs	r3, #0
 800d75e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d760:	6a3b      	ldr	r3, [r7, #32]
 800d762:	2b01      	cmp	r3, #1
 800d764:	d110      	bne.n	800d788 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d76e:	9202      	str	r2, [sp, #8]
 800d770:	9301      	str	r3, [sp, #4]
 800d772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d774:	9300      	str	r3, [sp, #0]
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d77a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d77c:	68f8      	ldr	r0, [r7, #12]
 800d77e:	f000 fe2b 	bl	800e3d8 <xTaskCreateStatic>
 800d782:	4603      	mov	r3, r0
 800d784:	613b      	str	r3, [r7, #16]
 800d786:	e013      	b.n	800d7b0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800d788:	6a3b      	ldr	r3, [r7, #32]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d110      	bne.n	800d7b0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d790:	b29a      	uxth	r2, r3
 800d792:	f107 0310 	add.w	r3, r7, #16
 800d796:	9301      	str	r3, [sp, #4]
 800d798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79a:	9300      	str	r3, [sp, #0]
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7a0:	68f8      	ldr	r0, [r7, #12]
 800d7a2:	f000 fe79 	bl	800e498 <xTaskCreate>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d001      	beq.n	800d7b0 <osThreadNew+0x13c>
          hTask = NULL;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d7b0:	693b      	ldr	r3, [r7, #16]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3730      	adds	r7, #48	; 0x30
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	200032d8 	.word	0x200032d8

0800d7c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b086      	sub	sp, #24
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7c8:	f3ef 8305 	mrs	r3, IPSR
 800d7cc:	613b      	str	r3, [r7, #16]
  return(result);
 800d7ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d10f      	bne.n	800d7f4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7d4:	f3ef 8310 	mrs	r3, PRIMASK
 800d7d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d105      	bne.n	800d7ec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d7e0:	f3ef 8311 	mrs	r3, BASEPRI
 800d7e4:	60bb      	str	r3, [r7, #8]
  return(result);
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d007      	beq.n	800d7fc <osDelay+0x3c>
 800d7ec:	4b0a      	ldr	r3, [pc, #40]	; (800d818 <osDelay+0x58>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2b02      	cmp	r3, #2
 800d7f2:	d103      	bne.n	800d7fc <osDelay+0x3c>
    stat = osErrorISR;
 800d7f4:	f06f 0305 	mvn.w	r3, #5
 800d7f8:	617b      	str	r3, [r7, #20]
 800d7fa:	e007      	b.n	800d80c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d002      	beq.n	800d80c <osDelay+0x4c>
      vTaskDelay(ticks);
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 ff8c 	bl	800e724 <vTaskDelay>
    }
  }

  return (stat);
 800d80c:	697b      	ldr	r3, [r7, #20]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3718      	adds	r7, #24
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	200032d8 	.word	0x200032d8

0800d81c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d81c:	b480      	push	{r7}
 800d81e:	b085      	sub	sp, #20
 800d820:	af00      	add	r7, sp, #0
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	60b9      	str	r1, [r7, #8]
 800d826:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	4a07      	ldr	r2, [pc, #28]	; (800d848 <vApplicationGetIdleTaskMemory+0x2c>)
 800d82c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	4a06      	ldr	r2, [pc, #24]	; (800d84c <vApplicationGetIdleTaskMemory+0x30>)
 800d832:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2280      	movs	r2, #128	; 0x80
 800d838:	601a      	str	r2, [r3, #0]
}
 800d83a:	bf00      	nop
 800d83c:	3714      	adds	r7, #20
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr
 800d846:	bf00      	nop
 800d848:	200032dc 	.word	0x200032dc
 800d84c:	20003338 	.word	0x20003338

0800d850 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d850:	b480      	push	{r7}
 800d852:	b085      	sub	sp, #20
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	4a07      	ldr	r2, [pc, #28]	; (800d87c <vApplicationGetTimerTaskMemory+0x2c>)
 800d860:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	4a06      	ldr	r2, [pc, #24]	; (800d880 <vApplicationGetTimerTaskMemory+0x30>)
 800d866:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d86e:	601a      	str	r2, [r3, #0]
}
 800d870:	bf00      	nop
 800d872:	3714      	adds	r7, #20
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr
 800d87c:	20003538 	.word	0x20003538
 800d880:	20003594 	.word	0x20003594

0800d884 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f103 0208 	add.w	r2, r3, #8
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f04f 32ff 	mov.w	r2, #4294967295
 800d89c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f103 0208 	add.w	r2, r3, #8
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f103 0208 	add.w	r2, r3, #8
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d8b8:	bf00      	nop
 800d8ba:	370c      	adds	r7, #12
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr

0800d8c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b083      	sub	sp, #12
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d8d2:	bf00      	nop
 800d8d4:	370c      	adds	r7, #12
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8dc:	4770      	bx	lr

0800d8de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d8de:	b480      	push	{r7}
 800d8e0:	b085      	sub	sp, #20
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
 800d8e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	689a      	ldr	r2, [r3, #8]
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	683a      	ldr	r2, [r7, #0]
 800d902:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	683a      	ldr	r2, [r7, #0]
 800d908:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	1c5a      	adds	r2, r3, #1
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	601a      	str	r2, [r3, #0]
}
 800d91a:	bf00      	nop
 800d91c:	3714      	adds	r7, #20
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr

0800d926 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d926:	b480      	push	{r7}
 800d928:	b085      	sub	sp, #20
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
 800d92e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d93c:	d103      	bne.n	800d946 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	691b      	ldr	r3, [r3, #16]
 800d942:	60fb      	str	r3, [r7, #12]
 800d944:	e00c      	b.n	800d960 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	3308      	adds	r3, #8
 800d94a:	60fb      	str	r3, [r7, #12]
 800d94c:	e002      	b.n	800d954 <vListInsert+0x2e>
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	685b      	ldr	r3, [r3, #4]
 800d952:	60fb      	str	r3, [r7, #12]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	68ba      	ldr	r2, [r7, #8]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d2f6      	bcs.n	800d94e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	685a      	ldr	r2, [r3, #4]
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	683a      	ldr	r2, [r7, #0]
 800d96e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	68fa      	ldr	r2, [r7, #12]
 800d974:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	683a      	ldr	r2, [r7, #0]
 800d97a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	1c5a      	adds	r2, r3, #1
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	601a      	str	r2, [r3, #0]
}
 800d98c:	bf00      	nop
 800d98e:	3714      	adds	r7, #20
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d998:	b480      	push	{r7}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	691b      	ldr	r3, [r3, #16]
 800d9a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	6892      	ldr	r2, [r2, #8]
 800d9ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	6852      	ldr	r2, [r2, #4]
 800d9b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d103      	bne.n	800d9cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	689a      	ldr	r2, [r3, #8]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	1e5a      	subs	r2, r3, #1
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3714      	adds	r7, #20
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d10b      	bne.n	800da18 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800da00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da04:	b672      	cpsid	i
 800da06:	f383 8811 	msr	BASEPRI, r3
 800da0a:	f3bf 8f6f 	isb	sy
 800da0e:	f3bf 8f4f 	dsb	sy
 800da12:	b662      	cpsie	i
 800da14:	60bb      	str	r3, [r7, #8]
 800da16:	e7fe      	b.n	800da16 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800da18:	f002 f956 	bl	800fcc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da24:	68f9      	ldr	r1, [r7, #12]
 800da26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800da28:	fb01 f303 	mul.w	r3, r1, r3
 800da2c:	441a      	add	r2, r3
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2200      	movs	r2, #0
 800da36:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da48:	3b01      	subs	r3, #1
 800da4a:	68f9      	ldr	r1, [r7, #12]
 800da4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800da4e:	fb01 f303 	mul.w	r3, r1, r3
 800da52:	441a      	add	r2, r3
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	22ff      	movs	r2, #255	; 0xff
 800da5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	22ff      	movs	r2, #255	; 0xff
 800da64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d114      	bne.n	800da98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	691b      	ldr	r3, [r3, #16]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d01a      	beq.n	800daac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	3310      	adds	r3, #16
 800da7a:	4618      	mov	r0, r3
 800da7c:	f001 f916 	bl	800ecac <xTaskRemoveFromEventList>
 800da80:	4603      	mov	r3, r0
 800da82:	2b00      	cmp	r3, #0
 800da84:	d012      	beq.n	800daac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800da86:	4b0d      	ldr	r3, [pc, #52]	; (800dabc <xQueueGenericReset+0xd0>)
 800da88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da8c:	601a      	str	r2, [r3, #0]
 800da8e:	f3bf 8f4f 	dsb	sy
 800da92:	f3bf 8f6f 	isb	sy
 800da96:	e009      	b.n	800daac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	3310      	adds	r3, #16
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7ff fef1 	bl	800d884 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	3324      	adds	r3, #36	; 0x24
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7ff feec 	bl	800d884 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800daac:	f002 f93e 	bl	800fd2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dab0:	2301      	movs	r3, #1
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3710      	adds	r7, #16
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	bf00      	nop
 800dabc:	e000ed04 	.word	0xe000ed04

0800dac0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b08e      	sub	sp, #56	; 0x38
 800dac4:	af02      	add	r7, sp, #8
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	60b9      	str	r1, [r7, #8]
 800daca:	607a      	str	r2, [r7, #4]
 800dacc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d10b      	bne.n	800daec <xQueueGenericCreateStatic+0x2c>
 800dad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad8:	b672      	cpsid	i
 800dada:	f383 8811 	msr	BASEPRI, r3
 800dade:	f3bf 8f6f 	isb	sy
 800dae2:	f3bf 8f4f 	dsb	sy
 800dae6:	b662      	cpsie	i
 800dae8:	62bb      	str	r3, [r7, #40]	; 0x28
 800daea:	e7fe      	b.n	800daea <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d10b      	bne.n	800db0a <xQueueGenericCreateStatic+0x4a>
 800daf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf6:	b672      	cpsid	i
 800daf8:	f383 8811 	msr	BASEPRI, r3
 800dafc:	f3bf 8f6f 	isb	sy
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	b662      	cpsie	i
 800db06:	627b      	str	r3, [r7, #36]	; 0x24
 800db08:	e7fe      	b.n	800db08 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d002      	beq.n	800db16 <xQueueGenericCreateStatic+0x56>
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d001      	beq.n	800db1a <xQueueGenericCreateStatic+0x5a>
 800db16:	2301      	movs	r3, #1
 800db18:	e000      	b.n	800db1c <xQueueGenericCreateStatic+0x5c>
 800db1a:	2300      	movs	r3, #0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d10b      	bne.n	800db38 <xQueueGenericCreateStatic+0x78>
 800db20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db24:	b672      	cpsid	i
 800db26:	f383 8811 	msr	BASEPRI, r3
 800db2a:	f3bf 8f6f 	isb	sy
 800db2e:	f3bf 8f4f 	dsb	sy
 800db32:	b662      	cpsie	i
 800db34:	623b      	str	r3, [r7, #32]
 800db36:	e7fe      	b.n	800db36 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d102      	bne.n	800db44 <xQueueGenericCreateStatic+0x84>
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d101      	bne.n	800db48 <xQueueGenericCreateStatic+0x88>
 800db44:	2301      	movs	r3, #1
 800db46:	e000      	b.n	800db4a <xQueueGenericCreateStatic+0x8a>
 800db48:	2300      	movs	r3, #0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d10b      	bne.n	800db66 <xQueueGenericCreateStatic+0xa6>
 800db4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db52:	b672      	cpsid	i
 800db54:	f383 8811 	msr	BASEPRI, r3
 800db58:	f3bf 8f6f 	isb	sy
 800db5c:	f3bf 8f4f 	dsb	sy
 800db60:	b662      	cpsie	i
 800db62:	61fb      	str	r3, [r7, #28]
 800db64:	e7fe      	b.n	800db64 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800db66:	2350      	movs	r3, #80	; 0x50
 800db68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	2b50      	cmp	r3, #80	; 0x50
 800db6e:	d00b      	beq.n	800db88 <xQueueGenericCreateStatic+0xc8>
 800db70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db74:	b672      	cpsid	i
 800db76:	f383 8811 	msr	BASEPRI, r3
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	b662      	cpsie	i
 800db84:	61bb      	str	r3, [r7, #24]
 800db86:	e7fe      	b.n	800db86 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800db88:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800db8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db90:	2b00      	cmp	r3, #0
 800db92:	d00d      	beq.n	800dbb0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800db94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db96:	2201      	movs	r2, #1
 800db98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800db9c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba2:	9300      	str	r3, [sp, #0]
 800dba4:	4613      	mov	r3, r2
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	68b9      	ldr	r1, [r7, #8]
 800dbaa:	68f8      	ldr	r0, [r7, #12]
 800dbac:	f000 f805 	bl	800dbba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3730      	adds	r7, #48	; 0x30
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b084      	sub	sp, #16
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	60f8      	str	r0, [r7, #12]
 800dbc2:	60b9      	str	r1, [r7, #8]
 800dbc4:	607a      	str	r2, [r7, #4]
 800dbc6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d103      	bne.n	800dbd6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dbce:	69bb      	ldr	r3, [r7, #24]
 800dbd0:	69ba      	ldr	r2, [r7, #24]
 800dbd2:	601a      	str	r2, [r3, #0]
 800dbd4:	e002      	b.n	800dbdc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dbdc:	69bb      	ldr	r3, [r7, #24]
 800dbde:	68fa      	ldr	r2, [r7, #12]
 800dbe0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	68ba      	ldr	r2, [r7, #8]
 800dbe6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dbe8:	2101      	movs	r1, #1
 800dbea:	69b8      	ldr	r0, [r7, #24]
 800dbec:	f7ff fefe 	bl	800d9ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dbf0:	69bb      	ldr	r3, [r7, #24]
 800dbf2:	78fa      	ldrb	r2, [r7, #3]
 800dbf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dbf8:	bf00      	nop
 800dbfa:	3710      	adds	r7, #16
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b08e      	sub	sp, #56	; 0x38
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	607a      	str	r2, [r7, #4]
 800dc0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d10b      	bne.n	800dc34 <xQueueGenericSend+0x34>
 800dc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc20:	b672      	cpsid	i
 800dc22:	f383 8811 	msr	BASEPRI, r3
 800dc26:	f3bf 8f6f 	isb	sy
 800dc2a:	f3bf 8f4f 	dsb	sy
 800dc2e:	b662      	cpsie	i
 800dc30:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc32:	e7fe      	b.n	800dc32 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d103      	bne.n	800dc42 <xQueueGenericSend+0x42>
 800dc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d101      	bne.n	800dc46 <xQueueGenericSend+0x46>
 800dc42:	2301      	movs	r3, #1
 800dc44:	e000      	b.n	800dc48 <xQueueGenericSend+0x48>
 800dc46:	2300      	movs	r3, #0
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d10b      	bne.n	800dc64 <xQueueGenericSend+0x64>
 800dc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc50:	b672      	cpsid	i
 800dc52:	f383 8811 	msr	BASEPRI, r3
 800dc56:	f3bf 8f6f 	isb	sy
 800dc5a:	f3bf 8f4f 	dsb	sy
 800dc5e:	b662      	cpsie	i
 800dc60:	627b      	str	r3, [r7, #36]	; 0x24
 800dc62:	e7fe      	b.n	800dc62 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	2b02      	cmp	r3, #2
 800dc68:	d103      	bne.n	800dc72 <xQueueGenericSend+0x72>
 800dc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d101      	bne.n	800dc76 <xQueueGenericSend+0x76>
 800dc72:	2301      	movs	r3, #1
 800dc74:	e000      	b.n	800dc78 <xQueueGenericSend+0x78>
 800dc76:	2300      	movs	r3, #0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d10b      	bne.n	800dc94 <xQueueGenericSend+0x94>
 800dc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc80:	b672      	cpsid	i
 800dc82:	f383 8811 	msr	BASEPRI, r3
 800dc86:	f3bf 8f6f 	isb	sy
 800dc8a:	f3bf 8f4f 	dsb	sy
 800dc8e:	b662      	cpsie	i
 800dc90:	623b      	str	r3, [r7, #32]
 800dc92:	e7fe      	b.n	800dc92 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc94:	f001 f9c8 	bl	800f028 <xTaskGetSchedulerState>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d102      	bne.n	800dca4 <xQueueGenericSend+0xa4>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d101      	bne.n	800dca8 <xQueueGenericSend+0xa8>
 800dca4:	2301      	movs	r3, #1
 800dca6:	e000      	b.n	800dcaa <xQueueGenericSend+0xaa>
 800dca8:	2300      	movs	r3, #0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d10b      	bne.n	800dcc6 <xQueueGenericSend+0xc6>
 800dcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb2:	b672      	cpsid	i
 800dcb4:	f383 8811 	msr	BASEPRI, r3
 800dcb8:	f3bf 8f6f 	isb	sy
 800dcbc:	f3bf 8f4f 	dsb	sy
 800dcc0:	b662      	cpsie	i
 800dcc2:	61fb      	str	r3, [r7, #28]
 800dcc4:	e7fe      	b.n	800dcc4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dcc6:	f001 ffff 	bl	800fcc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d302      	bcc.n	800dcdc <xQueueGenericSend+0xdc>
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	2b02      	cmp	r3, #2
 800dcda:	d129      	bne.n	800dd30 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dcdc:	683a      	ldr	r2, [r7, #0]
 800dcde:	68b9      	ldr	r1, [r7, #8]
 800dce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dce2:	f000 fa0d 	bl	800e100 <prvCopyDataToQueue>
 800dce6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d010      	beq.n	800dd12 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf2:	3324      	adds	r3, #36	; 0x24
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f000 ffd9 	bl	800ecac <xTaskRemoveFromEventList>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d013      	beq.n	800dd28 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dd00:	4b3f      	ldr	r3, [pc, #252]	; (800de00 <xQueueGenericSend+0x200>)
 800dd02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd06:	601a      	str	r2, [r3, #0]
 800dd08:	f3bf 8f4f 	dsb	sy
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	e00a      	b.n	800dd28 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d007      	beq.n	800dd28 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dd18:	4b39      	ldr	r3, [pc, #228]	; (800de00 <xQueueGenericSend+0x200>)
 800dd1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd1e:	601a      	str	r2, [r3, #0]
 800dd20:	f3bf 8f4f 	dsb	sy
 800dd24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dd28:	f002 f800 	bl	800fd2c <vPortExitCritical>
				return pdPASS;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e063      	b.n	800ddf8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d103      	bne.n	800dd3e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dd36:	f001 fff9 	bl	800fd2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	e05c      	b.n	800ddf8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d106      	bne.n	800dd52 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd44:	f107 0314 	add.w	r3, r7, #20
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f001 f813 	bl	800ed74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd4e:	2301      	movs	r3, #1
 800dd50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dd52:	f001 ffeb 	bl	800fd2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dd56:	f000 fd83 	bl	800e860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd5a:	f001 ffb5 	bl	800fcc8 <vPortEnterCritical>
 800dd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd64:	b25b      	sxtb	r3, r3
 800dd66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd6a:	d103      	bne.n	800dd74 <xQueueGenericSend+0x174>
 800dd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd6e:	2200      	movs	r2, #0
 800dd70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd7a:	b25b      	sxtb	r3, r3
 800dd7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd80:	d103      	bne.n	800dd8a <xQueueGenericSend+0x18a>
 800dd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd84:	2200      	movs	r2, #0
 800dd86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd8a:	f001 ffcf 	bl	800fd2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd8e:	1d3a      	adds	r2, r7, #4
 800dd90:	f107 0314 	add.w	r3, r7, #20
 800dd94:	4611      	mov	r1, r2
 800dd96:	4618      	mov	r0, r3
 800dd98:	f001 f802 	bl	800eda0 <xTaskCheckForTimeOut>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d124      	bne.n	800ddec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dda2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dda4:	f000 faa4 	bl	800e2f0 <prvIsQueueFull>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d018      	beq.n	800dde0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ddae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb0:	3310      	adds	r3, #16
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	4611      	mov	r1, r2
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f000 ff26 	bl	800ec08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ddbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ddbe:	f000 fa2f 	bl	800e220 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ddc2:	f000 fd5b 	bl	800e87c <xTaskResumeAll>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f47f af7c 	bne.w	800dcc6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ddce:	4b0c      	ldr	r3, [pc, #48]	; (800de00 <xQueueGenericSend+0x200>)
 800ddd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddd4:	601a      	str	r2, [r3, #0]
 800ddd6:	f3bf 8f4f 	dsb	sy
 800ddda:	f3bf 8f6f 	isb	sy
 800ddde:	e772      	b.n	800dcc6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dde0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dde2:	f000 fa1d 	bl	800e220 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dde6:	f000 fd49 	bl	800e87c <xTaskResumeAll>
 800ddea:	e76c      	b.n	800dcc6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ddec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ddee:	f000 fa17 	bl	800e220 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ddf2:	f000 fd43 	bl	800e87c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ddf6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3738      	adds	r7, #56	; 0x38
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	e000ed04 	.word	0xe000ed04

0800de04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b08e      	sub	sp, #56	; 0x38
 800de08:	af00      	add	r7, sp, #0
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	607a      	str	r2, [r7, #4]
 800de10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800de16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d10b      	bne.n	800de34 <xQueueGenericSendFromISR+0x30>
 800de1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de20:	b672      	cpsid	i
 800de22:	f383 8811 	msr	BASEPRI, r3
 800de26:	f3bf 8f6f 	isb	sy
 800de2a:	f3bf 8f4f 	dsb	sy
 800de2e:	b662      	cpsie	i
 800de30:	627b      	str	r3, [r7, #36]	; 0x24
 800de32:	e7fe      	b.n	800de32 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d103      	bne.n	800de42 <xQueueGenericSendFromISR+0x3e>
 800de3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d101      	bne.n	800de46 <xQueueGenericSendFromISR+0x42>
 800de42:	2301      	movs	r3, #1
 800de44:	e000      	b.n	800de48 <xQueueGenericSendFromISR+0x44>
 800de46:	2300      	movs	r3, #0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d10b      	bne.n	800de64 <xQueueGenericSendFromISR+0x60>
 800de4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de50:	b672      	cpsid	i
 800de52:	f383 8811 	msr	BASEPRI, r3
 800de56:	f3bf 8f6f 	isb	sy
 800de5a:	f3bf 8f4f 	dsb	sy
 800de5e:	b662      	cpsie	i
 800de60:	623b      	str	r3, [r7, #32]
 800de62:	e7fe      	b.n	800de62 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	2b02      	cmp	r3, #2
 800de68:	d103      	bne.n	800de72 <xQueueGenericSendFromISR+0x6e>
 800de6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d101      	bne.n	800de76 <xQueueGenericSendFromISR+0x72>
 800de72:	2301      	movs	r3, #1
 800de74:	e000      	b.n	800de78 <xQueueGenericSendFromISR+0x74>
 800de76:	2300      	movs	r3, #0
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d10b      	bne.n	800de94 <xQueueGenericSendFromISR+0x90>
 800de7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de80:	b672      	cpsid	i
 800de82:	f383 8811 	msr	BASEPRI, r3
 800de86:	f3bf 8f6f 	isb	sy
 800de8a:	f3bf 8f4f 	dsb	sy
 800de8e:	b662      	cpsie	i
 800de90:	61fb      	str	r3, [r7, #28]
 800de92:	e7fe      	b.n	800de92 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800de94:	f001 fff8 	bl	800fe88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800de98:	f3ef 8211 	mrs	r2, BASEPRI
 800de9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea0:	b672      	cpsid	i
 800dea2:	f383 8811 	msr	BASEPRI, r3
 800dea6:	f3bf 8f6f 	isb	sy
 800deaa:	f3bf 8f4f 	dsb	sy
 800deae:	b662      	cpsie	i
 800deb0:	61ba      	str	r2, [r7, #24]
 800deb2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800deb4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800deb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800deb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800debc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800debe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d302      	bcc.n	800deca <xQueueGenericSendFromISR+0xc6>
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	2b02      	cmp	r3, #2
 800dec8:	d12c      	bne.n	800df24 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800deca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800decc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ded0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ded4:	683a      	ldr	r2, [r7, #0]
 800ded6:	68b9      	ldr	r1, [r7, #8]
 800ded8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800deda:	f000 f911 	bl	800e100 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dede:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800dee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dee6:	d112      	bne.n	800df0e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deec:	2b00      	cmp	r3, #0
 800deee:	d016      	beq.n	800df1e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800def0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def2:	3324      	adds	r3, #36	; 0x24
 800def4:	4618      	mov	r0, r3
 800def6:	f000 fed9 	bl	800ecac <xTaskRemoveFromEventList>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	d00e      	beq.n	800df1e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d00b      	beq.n	800df1e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2201      	movs	r2, #1
 800df0a:	601a      	str	r2, [r3, #0]
 800df0c:	e007      	b.n	800df1e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800df0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800df12:	3301      	adds	r3, #1
 800df14:	b2db      	uxtb	r3, r3
 800df16:	b25a      	sxtb	r2, r3
 800df18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800df1e:	2301      	movs	r3, #1
 800df20:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800df22:	e001      	b.n	800df28 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800df24:	2300      	movs	r3, #0
 800df26:	637b      	str	r3, [r7, #52]	; 0x34
 800df28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800df32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800df34:	4618      	mov	r0, r3
 800df36:	3738      	adds	r7, #56	; 0x38
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b08c      	sub	sp, #48	; 0x30
 800df40:	af00      	add	r7, sp, #0
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800df48:	2300      	movs	r3, #0
 800df4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800df50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df52:	2b00      	cmp	r3, #0
 800df54:	d10b      	bne.n	800df6e <xQueueReceive+0x32>
	__asm volatile
 800df56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df5a:	b672      	cpsid	i
 800df5c:	f383 8811 	msr	BASEPRI, r3
 800df60:	f3bf 8f6f 	isb	sy
 800df64:	f3bf 8f4f 	dsb	sy
 800df68:	b662      	cpsie	i
 800df6a:	623b      	str	r3, [r7, #32]
 800df6c:	e7fe      	b.n	800df6c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d103      	bne.n	800df7c <xQueueReceive+0x40>
 800df74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d101      	bne.n	800df80 <xQueueReceive+0x44>
 800df7c:	2301      	movs	r3, #1
 800df7e:	e000      	b.n	800df82 <xQueueReceive+0x46>
 800df80:	2300      	movs	r3, #0
 800df82:	2b00      	cmp	r3, #0
 800df84:	d10b      	bne.n	800df9e <xQueueReceive+0x62>
 800df86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df8a:	b672      	cpsid	i
 800df8c:	f383 8811 	msr	BASEPRI, r3
 800df90:	f3bf 8f6f 	isb	sy
 800df94:	f3bf 8f4f 	dsb	sy
 800df98:	b662      	cpsie	i
 800df9a:	61fb      	str	r3, [r7, #28]
 800df9c:	e7fe      	b.n	800df9c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df9e:	f001 f843 	bl	800f028 <xTaskGetSchedulerState>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d102      	bne.n	800dfae <xQueueReceive+0x72>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d101      	bne.n	800dfb2 <xQueueReceive+0x76>
 800dfae:	2301      	movs	r3, #1
 800dfb0:	e000      	b.n	800dfb4 <xQueueReceive+0x78>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d10b      	bne.n	800dfd0 <xQueueReceive+0x94>
 800dfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfbc:	b672      	cpsid	i
 800dfbe:	f383 8811 	msr	BASEPRI, r3
 800dfc2:	f3bf 8f6f 	isb	sy
 800dfc6:	f3bf 8f4f 	dsb	sy
 800dfca:	b662      	cpsie	i
 800dfcc:	61bb      	str	r3, [r7, #24]
 800dfce:	e7fe      	b.n	800dfce <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dfd0:	f001 fe7a 	bl	800fcc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d01f      	beq.n	800e020 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dfe0:	68b9      	ldr	r1, [r7, #8]
 800dfe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfe4:	f000 f8f6 	bl	800e1d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfea:	1e5a      	subs	r2, r3, #1
 800dfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff2:	691b      	ldr	r3, [r3, #16]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d00f      	beq.n	800e018 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffa:	3310      	adds	r3, #16
 800dffc:	4618      	mov	r0, r3
 800dffe:	f000 fe55 	bl	800ecac <xTaskRemoveFromEventList>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d007      	beq.n	800e018 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e008:	4b3c      	ldr	r3, [pc, #240]	; (800e0fc <xQueueReceive+0x1c0>)
 800e00a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e00e:	601a      	str	r2, [r3, #0]
 800e010:	f3bf 8f4f 	dsb	sy
 800e014:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e018:	f001 fe88 	bl	800fd2c <vPortExitCritical>
				return pdPASS;
 800e01c:	2301      	movs	r3, #1
 800e01e:	e069      	b.n	800e0f4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d103      	bne.n	800e02e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e026:	f001 fe81 	bl	800fd2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e02a:	2300      	movs	r3, #0
 800e02c:	e062      	b.n	800e0f4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e030:	2b00      	cmp	r3, #0
 800e032:	d106      	bne.n	800e042 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e034:	f107 0310 	add.w	r3, r7, #16
 800e038:	4618      	mov	r0, r3
 800e03a:	f000 fe9b 	bl	800ed74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e03e:	2301      	movs	r3, #1
 800e040:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e042:	f001 fe73 	bl	800fd2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e046:	f000 fc0b 	bl	800e860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e04a:	f001 fe3d 	bl	800fcc8 <vPortEnterCritical>
 800e04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e050:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e054:	b25b      	sxtb	r3, r3
 800e056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e05a:	d103      	bne.n	800e064 <xQueueReceive+0x128>
 800e05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05e:	2200      	movs	r2, #0
 800e060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e066:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e06a:	b25b      	sxtb	r3, r3
 800e06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e070:	d103      	bne.n	800e07a <xQueueReceive+0x13e>
 800e072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e074:	2200      	movs	r2, #0
 800e076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e07a:	f001 fe57 	bl	800fd2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e07e:	1d3a      	adds	r2, r7, #4
 800e080:	f107 0310 	add.w	r3, r7, #16
 800e084:	4611      	mov	r1, r2
 800e086:	4618      	mov	r0, r3
 800e088:	f000 fe8a 	bl	800eda0 <xTaskCheckForTimeOut>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d123      	bne.n	800e0da <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e094:	f000 f916 	bl	800e2c4 <prvIsQueueEmpty>
 800e098:	4603      	mov	r3, r0
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d017      	beq.n	800e0ce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a0:	3324      	adds	r3, #36	; 0x24
 800e0a2:	687a      	ldr	r2, [r7, #4]
 800e0a4:	4611      	mov	r1, r2
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f000 fdae 	bl	800ec08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e0ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0ae:	f000 f8b7 	bl	800e220 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e0b2:	f000 fbe3 	bl	800e87c <xTaskResumeAll>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d189      	bne.n	800dfd0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e0bc:	4b0f      	ldr	r3, [pc, #60]	; (800e0fc <xQueueReceive+0x1c0>)
 800e0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0c2:	601a      	str	r2, [r3, #0]
 800e0c4:	f3bf 8f4f 	dsb	sy
 800e0c8:	f3bf 8f6f 	isb	sy
 800e0cc:	e780      	b.n	800dfd0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e0ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0d0:	f000 f8a6 	bl	800e220 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e0d4:	f000 fbd2 	bl	800e87c <xTaskResumeAll>
 800e0d8:	e77a      	b.n	800dfd0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e0da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0dc:	f000 f8a0 	bl	800e220 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e0e0:	f000 fbcc 	bl	800e87c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e0e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0e6:	f000 f8ed 	bl	800e2c4 <prvIsQueueEmpty>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	f43f af6f 	beq.w	800dfd0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e0f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3730      	adds	r7, #48	; 0x30
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	e000ed04 	.word	0xe000ed04

0800e100 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b086      	sub	sp, #24
 800e104:	af00      	add	r7, sp, #0
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e10c:	2300      	movs	r3, #0
 800e10e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e114:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d10d      	bne.n	800e13a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d14d      	bne.n	800e1c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	689b      	ldr	r3, [r3, #8]
 800e12a:	4618      	mov	r0, r3
 800e12c:	f000 ff9a 	bl	800f064 <xTaskPriorityDisinherit>
 800e130:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2200      	movs	r2, #0
 800e136:	609a      	str	r2, [r3, #8]
 800e138:	e043      	b.n	800e1c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d119      	bne.n	800e174 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	6858      	ldr	r0, [r3, #4]
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e148:	461a      	mov	r2, r3
 800e14a:	68b9      	ldr	r1, [r7, #8]
 800e14c:	f002 f8e8 	bl	8010320 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	685a      	ldr	r2, [r3, #4]
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e158:	441a      	add	r2, r3
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	685a      	ldr	r2, [r3, #4]
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	689b      	ldr	r3, [r3, #8]
 800e166:	429a      	cmp	r2, r3
 800e168:	d32b      	bcc.n	800e1c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681a      	ldr	r2, [r3, #0]
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	605a      	str	r2, [r3, #4]
 800e172:	e026      	b.n	800e1c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	68d8      	ldr	r0, [r3, #12]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e17c:	461a      	mov	r2, r3
 800e17e:	68b9      	ldr	r1, [r7, #8]
 800e180:	f002 f8ce 	bl	8010320 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	68da      	ldr	r2, [r3, #12]
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e18c:	425b      	negs	r3, r3
 800e18e:	441a      	add	r2, r3
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	68da      	ldr	r2, [r3, #12]
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d207      	bcs.n	800e1b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	689a      	ldr	r2, [r3, #8]
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1a8:	425b      	negs	r3, r3
 800e1aa:	441a      	add	r2, r3
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2b02      	cmp	r3, #2
 800e1b4:	d105      	bne.n	800e1c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d002      	beq.n	800e1c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	3b01      	subs	r3, #1
 800e1c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	1c5a      	adds	r2, r3, #1
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e1ca:	697b      	ldr	r3, [r7, #20]
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3718      	adds	r7, #24
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d018      	beq.n	800e218 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	68da      	ldr	r2, [r3, #12]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ee:	441a      	add	r2, r3
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	68da      	ldr	r2, [r3, #12]
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d303      	bcc.n	800e208 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	68d9      	ldr	r1, [r3, #12]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e210:	461a      	mov	r2, r3
 800e212:	6838      	ldr	r0, [r7, #0]
 800e214:	f002 f884 	bl	8010320 <memcpy>
	}
}
 800e218:	bf00      	nop
 800e21a:	3708      	adds	r7, #8
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e228:	f001 fd4e 	bl	800fcc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e232:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e234:	e011      	b.n	800e25a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d012      	beq.n	800e264 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	3324      	adds	r3, #36	; 0x24
 800e242:	4618      	mov	r0, r3
 800e244:	f000 fd32 	bl	800ecac <xTaskRemoveFromEventList>
 800e248:	4603      	mov	r3, r0
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d001      	beq.n	800e252 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e24e:	f000 fe0b 	bl	800ee68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e252:	7bfb      	ldrb	r3, [r7, #15]
 800e254:	3b01      	subs	r3, #1
 800e256:	b2db      	uxtb	r3, r3
 800e258:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e25a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	dce9      	bgt.n	800e236 <prvUnlockQueue+0x16>
 800e262:	e000      	b.n	800e266 <prvUnlockQueue+0x46>
					break;
 800e264:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	22ff      	movs	r2, #255	; 0xff
 800e26a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e26e:	f001 fd5d 	bl	800fd2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e272:	f001 fd29 	bl	800fcc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e27c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e27e:	e011      	b.n	800e2a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	691b      	ldr	r3, [r3, #16]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d012      	beq.n	800e2ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	3310      	adds	r3, #16
 800e28c:	4618      	mov	r0, r3
 800e28e:	f000 fd0d 	bl	800ecac <xTaskRemoveFromEventList>
 800e292:	4603      	mov	r3, r0
 800e294:	2b00      	cmp	r3, #0
 800e296:	d001      	beq.n	800e29c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e298:	f000 fde6 	bl	800ee68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e29c:	7bbb      	ldrb	r3, [r7, #14]
 800e29e:	3b01      	subs	r3, #1
 800e2a0:	b2db      	uxtb	r3, r3
 800e2a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e2a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	dce9      	bgt.n	800e280 <prvUnlockQueue+0x60>
 800e2ac:	e000      	b.n	800e2b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e2ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	22ff      	movs	r2, #255	; 0xff
 800e2b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e2b8:	f001 fd38 	bl	800fd2c <vPortExitCritical>
}
 800e2bc:	bf00      	nop
 800e2be:	3710      	adds	r7, #16
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e2cc:	f001 fcfc 	bl	800fcc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d102      	bne.n	800e2de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	60fb      	str	r3, [r7, #12]
 800e2dc:	e001      	b.n	800e2e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e2e2:	f001 fd23 	bl	800fd2c <vPortExitCritical>

	return xReturn;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3710      	adds	r7, #16
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b084      	sub	sp, #16
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e2f8:	f001 fce6 	bl	800fcc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e304:	429a      	cmp	r2, r3
 800e306:	d102      	bne.n	800e30e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e308:	2301      	movs	r3, #1
 800e30a:	60fb      	str	r3, [r7, #12]
 800e30c:	e001      	b.n	800e312 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e30e:	2300      	movs	r3, #0
 800e310:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e312:	f001 fd0b 	bl	800fd2c <vPortExitCritical>

	return xReturn;
 800e316:	68fb      	ldr	r3, [r7, #12]
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3710      	adds	r7, #16
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e320:	b480      	push	{r7}
 800e322:	b085      	sub	sp, #20
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e32a:	2300      	movs	r3, #0
 800e32c:	60fb      	str	r3, [r7, #12]
 800e32e:	e014      	b.n	800e35a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e330:	4a0e      	ldr	r2, [pc, #56]	; (800e36c <vQueueAddToRegistry+0x4c>)
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d10b      	bne.n	800e354 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e33c:	490b      	ldr	r1, [pc, #44]	; (800e36c <vQueueAddToRegistry+0x4c>)
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	683a      	ldr	r2, [r7, #0]
 800e342:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e346:	4a09      	ldr	r2, [pc, #36]	; (800e36c <vQueueAddToRegistry+0x4c>)
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	00db      	lsls	r3, r3, #3
 800e34c:	4413      	add	r3, r2
 800e34e:	687a      	ldr	r2, [r7, #4]
 800e350:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e352:	e005      	b.n	800e360 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	3301      	adds	r3, #1
 800e358:	60fb      	str	r3, [r7, #12]
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2b07      	cmp	r3, #7
 800e35e:	d9e7      	bls.n	800e330 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e360:	bf00      	nop
 800e362:	3714      	adds	r7, #20
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr
 800e36c:	20024114 	.word	0x20024114

0800e370 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e370:	b580      	push	{r7, lr}
 800e372:	b086      	sub	sp, #24
 800e374:	af00      	add	r7, sp, #0
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	60b9      	str	r1, [r7, #8]
 800e37a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e380:	f001 fca2 	bl	800fcc8 <vPortEnterCritical>
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e38a:	b25b      	sxtb	r3, r3
 800e38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e390:	d103      	bne.n	800e39a <vQueueWaitForMessageRestricted+0x2a>
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	2200      	movs	r2, #0
 800e396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3a0:	b25b      	sxtb	r3, r3
 800e3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a6:	d103      	bne.n	800e3b0 <vQueueWaitForMessageRestricted+0x40>
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3b0:	f001 fcbc 	bl	800fd2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d106      	bne.n	800e3ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	3324      	adds	r3, #36	; 0x24
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	68b9      	ldr	r1, [r7, #8]
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f000 fc45 	bl	800ec54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e3ca:	6978      	ldr	r0, [r7, #20]
 800e3cc:	f7ff ff28 	bl	800e220 <prvUnlockQueue>
	}
 800e3d0:	bf00      	nop
 800e3d2:	3718      	adds	r7, #24
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b08e      	sub	sp, #56	; 0x38
 800e3dc:	af04      	add	r7, sp, #16
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	607a      	str	r2, [r7, #4]
 800e3e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d10b      	bne.n	800e404 <xTaskCreateStatic+0x2c>
 800e3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f0:	b672      	cpsid	i
 800e3f2:	f383 8811 	msr	BASEPRI, r3
 800e3f6:	f3bf 8f6f 	isb	sy
 800e3fa:	f3bf 8f4f 	dsb	sy
 800e3fe:	b662      	cpsie	i
 800e400:	623b      	str	r3, [r7, #32]
 800e402:	e7fe      	b.n	800e402 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800e404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e406:	2b00      	cmp	r3, #0
 800e408:	d10b      	bne.n	800e422 <xTaskCreateStatic+0x4a>
 800e40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40e:	b672      	cpsid	i
 800e410:	f383 8811 	msr	BASEPRI, r3
 800e414:	f3bf 8f6f 	isb	sy
 800e418:	f3bf 8f4f 	dsb	sy
 800e41c:	b662      	cpsie	i
 800e41e:	61fb      	str	r3, [r7, #28]
 800e420:	e7fe      	b.n	800e420 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e422:	235c      	movs	r3, #92	; 0x5c
 800e424:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e426:	693b      	ldr	r3, [r7, #16]
 800e428:	2b5c      	cmp	r3, #92	; 0x5c
 800e42a:	d00b      	beq.n	800e444 <xTaskCreateStatic+0x6c>
 800e42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e430:	b672      	cpsid	i
 800e432:	f383 8811 	msr	BASEPRI, r3
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	b662      	cpsie	i
 800e440:	61bb      	str	r3, [r7, #24]
 800e442:	e7fe      	b.n	800e442 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e444:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d01e      	beq.n	800e48a <xTaskCreateStatic+0xb2>
 800e44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d01b      	beq.n	800e48a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e454:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e45a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45e:	2202      	movs	r2, #2
 800e460:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e464:	2300      	movs	r3, #0
 800e466:	9303      	str	r3, [sp, #12]
 800e468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46a:	9302      	str	r3, [sp, #8]
 800e46c:	f107 0314 	add.w	r3, r7, #20
 800e470:	9301      	str	r3, [sp, #4]
 800e472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e474:	9300      	str	r3, [sp, #0]
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	68b9      	ldr	r1, [r7, #8]
 800e47c:	68f8      	ldr	r0, [r7, #12]
 800e47e:	f000 f850 	bl	800e522 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e484:	f000 f8de 	bl	800e644 <prvAddNewTaskToReadyList>
 800e488:	e001      	b.n	800e48e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e48a:	2300      	movs	r3, #0
 800e48c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e48e:	697b      	ldr	r3, [r7, #20]
	}
 800e490:	4618      	mov	r0, r3
 800e492:	3728      	adds	r7, #40	; 0x28
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b08c      	sub	sp, #48	; 0x30
 800e49c:	af04      	add	r7, sp, #16
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	603b      	str	r3, [r7, #0]
 800e4a4:	4613      	mov	r3, r2
 800e4a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e4a8:	88fb      	ldrh	r3, [r7, #6]
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f001 fd2d 	bl	800ff0c <pvPortMalloc>
 800e4b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00e      	beq.n	800e4d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e4ba:	205c      	movs	r0, #92	; 0x5c
 800e4bc:	f001 fd26 	bl	800ff0c <pvPortMalloc>
 800e4c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d003      	beq.n	800e4d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e4c8:	69fb      	ldr	r3, [r7, #28]
 800e4ca:	697a      	ldr	r2, [r7, #20]
 800e4cc:	631a      	str	r2, [r3, #48]	; 0x30
 800e4ce:	e005      	b.n	800e4dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e4d0:	6978      	ldr	r0, [r7, #20]
 800e4d2:	f001 fde3 	bl	801009c <vPortFree>
 800e4d6:	e001      	b.n	800e4dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d017      	beq.n	800e512 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e4ea:	88fa      	ldrh	r2, [r7, #6]
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	9303      	str	r3, [sp, #12]
 800e4f0:	69fb      	ldr	r3, [r7, #28]
 800e4f2:	9302      	str	r3, [sp, #8]
 800e4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f6:	9301      	str	r3, [sp, #4]
 800e4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fa:	9300      	str	r3, [sp, #0]
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	68b9      	ldr	r1, [r7, #8]
 800e500:	68f8      	ldr	r0, [r7, #12]
 800e502:	f000 f80e 	bl	800e522 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e506:	69f8      	ldr	r0, [r7, #28]
 800e508:	f000 f89c 	bl	800e644 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e50c:	2301      	movs	r3, #1
 800e50e:	61bb      	str	r3, [r7, #24]
 800e510:	e002      	b.n	800e518 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e512:	f04f 33ff 	mov.w	r3, #4294967295
 800e516:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e518:	69bb      	ldr	r3, [r7, #24]
	}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3720      	adds	r7, #32
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e522:	b580      	push	{r7, lr}
 800e524:	b088      	sub	sp, #32
 800e526:	af00      	add	r7, sp, #0
 800e528:	60f8      	str	r0, [r7, #12]
 800e52a:	60b9      	str	r1, [r7, #8]
 800e52c:	607a      	str	r2, [r7, #4]
 800e52e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e532:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	009b      	lsls	r3, r3, #2
 800e538:	461a      	mov	r2, r3
 800e53a:	21a5      	movs	r1, #165	; 0xa5
 800e53c:	f001 fefb 	bl	8010336 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e544:	6879      	ldr	r1, [r7, #4]
 800e546:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e54a:	440b      	add	r3, r1
 800e54c:	009b      	lsls	r3, r3, #2
 800e54e:	4413      	add	r3, r2
 800e550:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e552:	69bb      	ldr	r3, [r7, #24]
 800e554:	f023 0307 	bic.w	r3, r3, #7
 800e558:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	f003 0307 	and.w	r3, r3, #7
 800e560:	2b00      	cmp	r3, #0
 800e562:	d00b      	beq.n	800e57c <prvInitialiseNewTask+0x5a>
 800e564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e568:	b672      	cpsid	i
 800e56a:	f383 8811 	msr	BASEPRI, r3
 800e56e:	f3bf 8f6f 	isb	sy
 800e572:	f3bf 8f4f 	dsb	sy
 800e576:	b662      	cpsie	i
 800e578:	617b      	str	r3, [r7, #20]
 800e57a:	e7fe      	b.n	800e57a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d01f      	beq.n	800e5c2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e582:	2300      	movs	r3, #0
 800e584:	61fb      	str	r3, [r7, #28]
 800e586:	e012      	b.n	800e5ae <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e588:	68ba      	ldr	r2, [r7, #8]
 800e58a:	69fb      	ldr	r3, [r7, #28]
 800e58c:	4413      	add	r3, r2
 800e58e:	7819      	ldrb	r1, [r3, #0]
 800e590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	4413      	add	r3, r2
 800e596:	3334      	adds	r3, #52	; 0x34
 800e598:	460a      	mov	r2, r1
 800e59a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e59c:	68ba      	ldr	r2, [r7, #8]
 800e59e:	69fb      	ldr	r3, [r7, #28]
 800e5a0:	4413      	add	r3, r2
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d006      	beq.n	800e5b6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5a8:	69fb      	ldr	r3, [r7, #28]
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	61fb      	str	r3, [r7, #28]
 800e5ae:	69fb      	ldr	r3, [r7, #28]
 800e5b0:	2b0f      	cmp	r3, #15
 800e5b2:	d9e9      	bls.n	800e588 <prvInitialiseNewTask+0x66>
 800e5b4:	e000      	b.n	800e5b8 <prvInitialiseNewTask+0x96>
			{
				break;
 800e5b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e5c0:	e003      	b.n	800e5ca <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5cc:	2b37      	cmp	r3, #55	; 0x37
 800e5ce:	d901      	bls.n	800e5d4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e5d0:	2337      	movs	r3, #55	; 0x37
 800e5d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e8:	3304      	adds	r3, #4
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7ff f96a 	bl	800d8c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f2:	3318      	adds	r3, #24
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f7ff f965 	bl	800d8c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e602:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e608:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e60e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e612:	2200      	movs	r2, #0
 800e614:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e618:	2200      	movs	r2, #0
 800e61a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e61e:	683a      	ldr	r2, [r7, #0]
 800e620:	68f9      	ldr	r1, [r7, #12]
 800e622:	69b8      	ldr	r0, [r7, #24]
 800e624:	f001 fa4a 	bl	800fabc <pxPortInitialiseStack>
 800e628:	4602      	mov	r2, r0
 800e62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e630:	2b00      	cmp	r3, #0
 800e632:	d002      	beq.n	800e63a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e638:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e63a:	bf00      	nop
 800e63c:	3720      	adds	r7, #32
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
	...

0800e644 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e64c:	f001 fb3c 	bl	800fcc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e650:	4b2d      	ldr	r3, [pc, #180]	; (800e708 <prvAddNewTaskToReadyList+0xc4>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	3301      	adds	r3, #1
 800e656:	4a2c      	ldr	r2, [pc, #176]	; (800e708 <prvAddNewTaskToReadyList+0xc4>)
 800e658:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e65a:	4b2c      	ldr	r3, [pc, #176]	; (800e70c <prvAddNewTaskToReadyList+0xc8>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d109      	bne.n	800e676 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e662:	4a2a      	ldr	r2, [pc, #168]	; (800e70c <prvAddNewTaskToReadyList+0xc8>)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e668:	4b27      	ldr	r3, [pc, #156]	; (800e708 <prvAddNewTaskToReadyList+0xc4>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d110      	bne.n	800e692 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e670:	f000 fc1e 	bl	800eeb0 <prvInitialiseTaskLists>
 800e674:	e00d      	b.n	800e692 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e676:	4b26      	ldr	r3, [pc, #152]	; (800e710 <prvAddNewTaskToReadyList+0xcc>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d109      	bne.n	800e692 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e67e:	4b23      	ldr	r3, [pc, #140]	; (800e70c <prvAddNewTaskToReadyList+0xc8>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e688:	429a      	cmp	r2, r3
 800e68a:	d802      	bhi.n	800e692 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e68c:	4a1f      	ldr	r2, [pc, #124]	; (800e70c <prvAddNewTaskToReadyList+0xc8>)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e692:	4b20      	ldr	r3, [pc, #128]	; (800e714 <prvAddNewTaskToReadyList+0xd0>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	3301      	adds	r3, #1
 800e698:	4a1e      	ldr	r2, [pc, #120]	; (800e714 <prvAddNewTaskToReadyList+0xd0>)
 800e69a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e69c:	4b1d      	ldr	r3, [pc, #116]	; (800e714 <prvAddNewTaskToReadyList+0xd0>)
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6a8:	4b1b      	ldr	r3, [pc, #108]	; (800e718 <prvAddNewTaskToReadyList+0xd4>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d903      	bls.n	800e6b8 <prvAddNewTaskToReadyList+0x74>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b4:	4a18      	ldr	r2, [pc, #96]	; (800e718 <prvAddNewTaskToReadyList+0xd4>)
 800e6b6:	6013      	str	r3, [r2, #0]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6bc:	4613      	mov	r3, r2
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	4413      	add	r3, r2
 800e6c2:	009b      	lsls	r3, r3, #2
 800e6c4:	4a15      	ldr	r2, [pc, #84]	; (800e71c <prvAddNewTaskToReadyList+0xd8>)
 800e6c6:	441a      	add	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	3304      	adds	r3, #4
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	4610      	mov	r0, r2
 800e6d0:	f7ff f905 	bl	800d8de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e6d4:	f001 fb2a 	bl	800fd2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e6d8:	4b0d      	ldr	r3, [pc, #52]	; (800e710 <prvAddNewTaskToReadyList+0xcc>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00e      	beq.n	800e6fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e6e0:	4b0a      	ldr	r3, [pc, #40]	; (800e70c <prvAddNewTaskToReadyList+0xc8>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d207      	bcs.n	800e6fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e6ee:	4b0c      	ldr	r3, [pc, #48]	; (800e720 <prvAddNewTaskToReadyList+0xdc>)
 800e6f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6f4:	601a      	str	r2, [r3, #0]
 800e6f6:	f3bf 8f4f 	dsb	sy
 800e6fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e6fe:	bf00      	nop
 800e700:	3708      	adds	r7, #8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	20003e68 	.word	0x20003e68
 800e70c:	20003994 	.word	0x20003994
 800e710:	20003e74 	.word	0x20003e74
 800e714:	20003e84 	.word	0x20003e84
 800e718:	20003e70 	.word	0x20003e70
 800e71c:	20003998 	.word	0x20003998
 800e720:	e000ed04 	.word	0xe000ed04

0800e724 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e724:	b580      	push	{r7, lr}
 800e726:	b084      	sub	sp, #16
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e72c:	2300      	movs	r3, #0
 800e72e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d018      	beq.n	800e768 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e736:	4b14      	ldr	r3, [pc, #80]	; (800e788 <vTaskDelay+0x64>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d00b      	beq.n	800e756 <vTaskDelay+0x32>
 800e73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e742:	b672      	cpsid	i
 800e744:	f383 8811 	msr	BASEPRI, r3
 800e748:	f3bf 8f6f 	isb	sy
 800e74c:	f3bf 8f4f 	dsb	sy
 800e750:	b662      	cpsie	i
 800e752:	60bb      	str	r3, [r7, #8]
 800e754:	e7fe      	b.n	800e754 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800e756:	f000 f883 	bl	800e860 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e75a:	2100      	movs	r1, #0
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f000 fe05 	bl	800f36c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e762:	f000 f88b 	bl	800e87c <xTaskResumeAll>
 800e766:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d107      	bne.n	800e77e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e76e:	4b07      	ldr	r3, [pc, #28]	; (800e78c <vTaskDelay+0x68>)
 800e770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e774:	601a      	str	r2, [r3, #0]
 800e776:	f3bf 8f4f 	dsb	sy
 800e77a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e77e:	bf00      	nop
 800e780:	3710      	adds	r7, #16
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
 800e786:	bf00      	nop
 800e788:	20003e90 	.word	0x20003e90
 800e78c:	e000ed04 	.word	0xe000ed04

0800e790 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b08a      	sub	sp, #40	; 0x28
 800e794:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e796:	2300      	movs	r3, #0
 800e798:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e79a:	2300      	movs	r3, #0
 800e79c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e79e:	463a      	mov	r2, r7
 800e7a0:	1d39      	adds	r1, r7, #4
 800e7a2:	f107 0308 	add.w	r3, r7, #8
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7ff f838 	bl	800d81c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e7ac:	6839      	ldr	r1, [r7, #0]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	68ba      	ldr	r2, [r7, #8]
 800e7b2:	9202      	str	r2, [sp, #8]
 800e7b4:	9301      	str	r3, [sp, #4]
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	9300      	str	r3, [sp, #0]
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	460a      	mov	r2, r1
 800e7be:	4922      	ldr	r1, [pc, #136]	; (800e848 <vTaskStartScheduler+0xb8>)
 800e7c0:	4822      	ldr	r0, [pc, #136]	; (800e84c <vTaskStartScheduler+0xbc>)
 800e7c2:	f7ff fe09 	bl	800e3d8 <xTaskCreateStatic>
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	4b21      	ldr	r3, [pc, #132]	; (800e850 <vTaskStartScheduler+0xc0>)
 800e7ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e7cc:	4b20      	ldr	r3, [pc, #128]	; (800e850 <vTaskStartScheduler+0xc0>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d002      	beq.n	800e7da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	617b      	str	r3, [r7, #20]
 800e7d8:	e001      	b.n	800e7de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d102      	bne.n	800e7ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e7e4:	f000 fe16 	bl	800f414 <xTimerCreateTimerTask>
 800e7e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	d117      	bne.n	800e820 <vTaskStartScheduler+0x90>
 800e7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f4:	b672      	cpsid	i
 800e7f6:	f383 8811 	msr	BASEPRI, r3
 800e7fa:	f3bf 8f6f 	isb	sy
 800e7fe:	f3bf 8f4f 	dsb	sy
 800e802:	b662      	cpsie	i
 800e804:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e806:	4b13      	ldr	r3, [pc, #76]	; (800e854 <vTaskStartScheduler+0xc4>)
 800e808:	f04f 32ff 	mov.w	r2, #4294967295
 800e80c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e80e:	4b12      	ldr	r3, [pc, #72]	; (800e858 <vTaskStartScheduler+0xc8>)
 800e810:	2201      	movs	r2, #1
 800e812:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e814:	4b11      	ldr	r3, [pc, #68]	; (800e85c <vTaskStartScheduler+0xcc>)
 800e816:	2200      	movs	r2, #0
 800e818:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e81a:	f001 f9d9 	bl	800fbd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e81e:	e00f      	b.n	800e840 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e826:	d10b      	bne.n	800e840 <vTaskStartScheduler+0xb0>
 800e828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e82c:	b672      	cpsid	i
 800e82e:	f383 8811 	msr	BASEPRI, r3
 800e832:	f3bf 8f6f 	isb	sy
 800e836:	f3bf 8f4f 	dsb	sy
 800e83a:	b662      	cpsie	i
 800e83c:	60fb      	str	r3, [r7, #12]
 800e83e:	e7fe      	b.n	800e83e <vTaskStartScheduler+0xae>
}
 800e840:	bf00      	nop
 800e842:	3718      	adds	r7, #24
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}
 800e848:	080148c4 	.word	0x080148c4
 800e84c:	0800ee81 	.word	0x0800ee81
 800e850:	20003e8c 	.word	0x20003e8c
 800e854:	20003e88 	.word	0x20003e88
 800e858:	20003e74 	.word	0x20003e74
 800e85c:	20003e6c 	.word	0x20003e6c

0800e860 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e860:	b480      	push	{r7}
 800e862:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e864:	4b04      	ldr	r3, [pc, #16]	; (800e878 <vTaskSuspendAll+0x18>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	3301      	adds	r3, #1
 800e86a:	4a03      	ldr	r2, [pc, #12]	; (800e878 <vTaskSuspendAll+0x18>)
 800e86c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e86e:	bf00      	nop
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr
 800e878:	20003e90 	.word	0x20003e90

0800e87c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b084      	sub	sp, #16
 800e880:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e882:	2300      	movs	r3, #0
 800e884:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e886:	2300      	movs	r3, #0
 800e888:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e88a:	4b42      	ldr	r3, [pc, #264]	; (800e994 <xTaskResumeAll+0x118>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d10b      	bne.n	800e8aa <xTaskResumeAll+0x2e>
 800e892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e896:	b672      	cpsid	i
 800e898:	f383 8811 	msr	BASEPRI, r3
 800e89c:	f3bf 8f6f 	isb	sy
 800e8a0:	f3bf 8f4f 	dsb	sy
 800e8a4:	b662      	cpsie	i
 800e8a6:	603b      	str	r3, [r7, #0]
 800e8a8:	e7fe      	b.n	800e8a8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e8aa:	f001 fa0d 	bl	800fcc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e8ae:	4b39      	ldr	r3, [pc, #228]	; (800e994 <xTaskResumeAll+0x118>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	3b01      	subs	r3, #1
 800e8b4:	4a37      	ldr	r2, [pc, #220]	; (800e994 <xTaskResumeAll+0x118>)
 800e8b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8b8:	4b36      	ldr	r3, [pc, #216]	; (800e994 <xTaskResumeAll+0x118>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d162      	bne.n	800e986 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e8c0:	4b35      	ldr	r3, [pc, #212]	; (800e998 <xTaskResumeAll+0x11c>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d05e      	beq.n	800e986 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e8c8:	e02f      	b.n	800e92a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8ca:	4b34      	ldr	r3, [pc, #208]	; (800e99c <xTaskResumeAll+0x120>)
 800e8cc:	68db      	ldr	r3, [r3, #12]
 800e8ce:	68db      	ldr	r3, [r3, #12]
 800e8d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	3318      	adds	r3, #24
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7ff f85e 	bl	800d998 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	3304      	adds	r3, #4
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7ff f859 	bl	800d998 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ea:	4b2d      	ldr	r3, [pc, #180]	; (800e9a0 <xTaskResumeAll+0x124>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d903      	bls.n	800e8fa <xTaskResumeAll+0x7e>
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8f6:	4a2a      	ldr	r2, [pc, #168]	; (800e9a0 <xTaskResumeAll+0x124>)
 800e8f8:	6013      	str	r3, [r2, #0]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8fe:	4613      	mov	r3, r2
 800e900:	009b      	lsls	r3, r3, #2
 800e902:	4413      	add	r3, r2
 800e904:	009b      	lsls	r3, r3, #2
 800e906:	4a27      	ldr	r2, [pc, #156]	; (800e9a4 <xTaskResumeAll+0x128>)
 800e908:	441a      	add	r2, r3
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	3304      	adds	r3, #4
 800e90e:	4619      	mov	r1, r3
 800e910:	4610      	mov	r0, r2
 800e912:	f7fe ffe4 	bl	800d8de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e91a:	4b23      	ldr	r3, [pc, #140]	; (800e9a8 <xTaskResumeAll+0x12c>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e920:	429a      	cmp	r2, r3
 800e922:	d302      	bcc.n	800e92a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e924:	4b21      	ldr	r3, [pc, #132]	; (800e9ac <xTaskResumeAll+0x130>)
 800e926:	2201      	movs	r2, #1
 800e928:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e92a:	4b1c      	ldr	r3, [pc, #112]	; (800e99c <xTaskResumeAll+0x120>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d1cb      	bne.n	800e8ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d001      	beq.n	800e93c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e938:	f000 fb56 	bl	800efe8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e93c:	4b1c      	ldr	r3, [pc, #112]	; (800e9b0 <xTaskResumeAll+0x134>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d010      	beq.n	800e96a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e948:	f000 f846 	bl	800e9d8 <xTaskIncrementTick>
 800e94c:	4603      	mov	r3, r0
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d002      	beq.n	800e958 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e952:	4b16      	ldr	r3, [pc, #88]	; (800e9ac <xTaskResumeAll+0x130>)
 800e954:	2201      	movs	r2, #1
 800e956:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	3b01      	subs	r3, #1
 800e95c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d1f1      	bne.n	800e948 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800e964:	4b12      	ldr	r3, [pc, #72]	; (800e9b0 <xTaskResumeAll+0x134>)
 800e966:	2200      	movs	r2, #0
 800e968:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e96a:	4b10      	ldr	r3, [pc, #64]	; (800e9ac <xTaskResumeAll+0x130>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d009      	beq.n	800e986 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e972:	2301      	movs	r3, #1
 800e974:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e976:	4b0f      	ldr	r3, [pc, #60]	; (800e9b4 <xTaskResumeAll+0x138>)
 800e978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e97c:	601a      	str	r2, [r3, #0]
 800e97e:	f3bf 8f4f 	dsb	sy
 800e982:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e986:	f001 f9d1 	bl	800fd2c <vPortExitCritical>

	return xAlreadyYielded;
 800e98a:	68bb      	ldr	r3, [r7, #8]
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3710      	adds	r7, #16
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	20003e90 	.word	0x20003e90
 800e998:	20003e68 	.word	0x20003e68
 800e99c:	20003e28 	.word	0x20003e28
 800e9a0:	20003e70 	.word	0x20003e70
 800e9a4:	20003998 	.word	0x20003998
 800e9a8:	20003994 	.word	0x20003994
 800e9ac:	20003e7c 	.word	0x20003e7c
 800e9b0:	20003e78 	.word	0x20003e78
 800e9b4:	e000ed04 	.word	0xe000ed04

0800e9b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b083      	sub	sp, #12
 800e9bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e9be:	4b05      	ldr	r3, [pc, #20]	; (800e9d4 <xTaskGetTickCount+0x1c>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e9c4:	687b      	ldr	r3, [r7, #4]
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	370c      	adds	r7, #12
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop
 800e9d4:	20003e6c 	.word	0x20003e6c

0800e9d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b086      	sub	sp, #24
 800e9dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9e2:	4b4f      	ldr	r3, [pc, #316]	; (800eb20 <xTaskIncrementTick+0x148>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	f040 808a 	bne.w	800eb00 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e9ec:	4b4d      	ldr	r3, [pc, #308]	; (800eb24 <xTaskIncrementTick+0x14c>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e9f4:	4a4b      	ldr	r2, [pc, #300]	; (800eb24 <xTaskIncrementTick+0x14c>)
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d121      	bne.n	800ea44 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ea00:	4b49      	ldr	r3, [pc, #292]	; (800eb28 <xTaskIncrementTick+0x150>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d00b      	beq.n	800ea22 <xTaskIncrementTick+0x4a>
 800ea0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea0e:	b672      	cpsid	i
 800ea10:	f383 8811 	msr	BASEPRI, r3
 800ea14:	f3bf 8f6f 	isb	sy
 800ea18:	f3bf 8f4f 	dsb	sy
 800ea1c:	b662      	cpsie	i
 800ea1e:	603b      	str	r3, [r7, #0]
 800ea20:	e7fe      	b.n	800ea20 <xTaskIncrementTick+0x48>
 800ea22:	4b41      	ldr	r3, [pc, #260]	; (800eb28 <xTaskIncrementTick+0x150>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	60fb      	str	r3, [r7, #12]
 800ea28:	4b40      	ldr	r3, [pc, #256]	; (800eb2c <xTaskIncrementTick+0x154>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4a3e      	ldr	r2, [pc, #248]	; (800eb28 <xTaskIncrementTick+0x150>)
 800ea2e:	6013      	str	r3, [r2, #0]
 800ea30:	4a3e      	ldr	r2, [pc, #248]	; (800eb2c <xTaskIncrementTick+0x154>)
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	6013      	str	r3, [r2, #0]
 800ea36:	4b3e      	ldr	r3, [pc, #248]	; (800eb30 <xTaskIncrementTick+0x158>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	4a3c      	ldr	r2, [pc, #240]	; (800eb30 <xTaskIncrementTick+0x158>)
 800ea3e:	6013      	str	r3, [r2, #0]
 800ea40:	f000 fad2 	bl	800efe8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ea44:	4b3b      	ldr	r3, [pc, #236]	; (800eb34 <xTaskIncrementTick+0x15c>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	693a      	ldr	r2, [r7, #16]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d349      	bcc.n	800eae2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea4e:	4b36      	ldr	r3, [pc, #216]	; (800eb28 <xTaskIncrementTick+0x150>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d104      	bne.n	800ea62 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea58:	4b36      	ldr	r3, [pc, #216]	; (800eb34 <xTaskIncrementTick+0x15c>)
 800ea5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea5e:	601a      	str	r2, [r3, #0]
					break;
 800ea60:	e03f      	b.n	800eae2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea62:	4b31      	ldr	r3, [pc, #196]	; (800eb28 <xTaskIncrementTick+0x150>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	68db      	ldr	r3, [r3, #12]
 800ea68:	68db      	ldr	r3, [r3, #12]
 800ea6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ea72:	693a      	ldr	r2, [r7, #16]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d203      	bcs.n	800ea82 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ea7a:	4a2e      	ldr	r2, [pc, #184]	; (800eb34 <xTaskIncrementTick+0x15c>)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ea80:	e02f      	b.n	800eae2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	3304      	adds	r3, #4
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7fe ff86 	bl	800d998 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d004      	beq.n	800ea9e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	3318      	adds	r3, #24
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7fe ff7d 	bl	800d998 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaa2:	4b25      	ldr	r3, [pc, #148]	; (800eb38 <xTaskIncrementTick+0x160>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	d903      	bls.n	800eab2 <xTaskIncrementTick+0xda>
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaae:	4a22      	ldr	r2, [pc, #136]	; (800eb38 <xTaskIncrementTick+0x160>)
 800eab0:	6013      	str	r3, [r2, #0]
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab6:	4613      	mov	r3, r2
 800eab8:	009b      	lsls	r3, r3, #2
 800eaba:	4413      	add	r3, r2
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	4a1f      	ldr	r2, [pc, #124]	; (800eb3c <xTaskIncrementTick+0x164>)
 800eac0:	441a      	add	r2, r3
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	3304      	adds	r3, #4
 800eac6:	4619      	mov	r1, r3
 800eac8:	4610      	mov	r0, r2
 800eaca:	f7fe ff08 	bl	800d8de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ead2:	4b1b      	ldr	r3, [pc, #108]	; (800eb40 <xTaskIncrementTick+0x168>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead8:	429a      	cmp	r2, r3
 800eada:	d3b8      	bcc.n	800ea4e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800eadc:	2301      	movs	r3, #1
 800eade:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eae0:	e7b5      	b.n	800ea4e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eae2:	4b17      	ldr	r3, [pc, #92]	; (800eb40 <xTaskIncrementTick+0x168>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eae8:	4914      	ldr	r1, [pc, #80]	; (800eb3c <xTaskIncrementTick+0x164>)
 800eaea:	4613      	mov	r3, r2
 800eaec:	009b      	lsls	r3, r3, #2
 800eaee:	4413      	add	r3, r2
 800eaf0:	009b      	lsls	r3, r3, #2
 800eaf2:	440b      	add	r3, r1
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2b01      	cmp	r3, #1
 800eaf8:	d907      	bls.n	800eb0a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800eafa:	2301      	movs	r3, #1
 800eafc:	617b      	str	r3, [r7, #20]
 800eafe:	e004      	b.n	800eb0a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800eb00:	4b10      	ldr	r3, [pc, #64]	; (800eb44 <xTaskIncrementTick+0x16c>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	3301      	adds	r3, #1
 800eb06:	4a0f      	ldr	r2, [pc, #60]	; (800eb44 <xTaskIncrementTick+0x16c>)
 800eb08:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800eb0a:	4b0f      	ldr	r3, [pc, #60]	; (800eb48 <xTaskIncrementTick+0x170>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d001      	beq.n	800eb16 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800eb12:	2301      	movs	r3, #1
 800eb14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800eb16:	697b      	ldr	r3, [r7, #20]
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3718      	adds	r7, #24
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}
 800eb20:	20003e90 	.word	0x20003e90
 800eb24:	20003e6c 	.word	0x20003e6c
 800eb28:	20003e20 	.word	0x20003e20
 800eb2c:	20003e24 	.word	0x20003e24
 800eb30:	20003e80 	.word	0x20003e80
 800eb34:	20003e88 	.word	0x20003e88
 800eb38:	20003e70 	.word	0x20003e70
 800eb3c:	20003998 	.word	0x20003998
 800eb40:	20003994 	.word	0x20003994
 800eb44:	20003e78 	.word	0x20003e78
 800eb48:	20003e7c 	.word	0x20003e7c

0800eb4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b085      	sub	sp, #20
 800eb50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eb52:	4b28      	ldr	r3, [pc, #160]	; (800ebf4 <vTaskSwitchContext+0xa8>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d003      	beq.n	800eb62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eb5a:	4b27      	ldr	r3, [pc, #156]	; (800ebf8 <vTaskSwitchContext+0xac>)
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eb60:	e042      	b.n	800ebe8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800eb62:	4b25      	ldr	r3, [pc, #148]	; (800ebf8 <vTaskSwitchContext+0xac>)
 800eb64:	2200      	movs	r2, #0
 800eb66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb68:	4b24      	ldr	r3, [pc, #144]	; (800ebfc <vTaskSwitchContext+0xb0>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	60fb      	str	r3, [r7, #12]
 800eb6e:	e011      	b.n	800eb94 <vTaskSwitchContext+0x48>
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d10b      	bne.n	800eb8e <vTaskSwitchContext+0x42>
 800eb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7a:	b672      	cpsid	i
 800eb7c:	f383 8811 	msr	BASEPRI, r3
 800eb80:	f3bf 8f6f 	isb	sy
 800eb84:	f3bf 8f4f 	dsb	sy
 800eb88:	b662      	cpsie	i
 800eb8a:	607b      	str	r3, [r7, #4]
 800eb8c:	e7fe      	b.n	800eb8c <vTaskSwitchContext+0x40>
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	3b01      	subs	r3, #1
 800eb92:	60fb      	str	r3, [r7, #12]
 800eb94:	491a      	ldr	r1, [pc, #104]	; (800ec00 <vTaskSwitchContext+0xb4>)
 800eb96:	68fa      	ldr	r2, [r7, #12]
 800eb98:	4613      	mov	r3, r2
 800eb9a:	009b      	lsls	r3, r3, #2
 800eb9c:	4413      	add	r3, r2
 800eb9e:	009b      	lsls	r3, r3, #2
 800eba0:	440b      	add	r3, r1
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d0e3      	beq.n	800eb70 <vTaskSwitchContext+0x24>
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	4613      	mov	r3, r2
 800ebac:	009b      	lsls	r3, r3, #2
 800ebae:	4413      	add	r3, r2
 800ebb0:	009b      	lsls	r3, r3, #2
 800ebb2:	4a13      	ldr	r2, [pc, #76]	; (800ec00 <vTaskSwitchContext+0xb4>)
 800ebb4:	4413      	add	r3, r2
 800ebb6:	60bb      	str	r3, [r7, #8]
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	685b      	ldr	r3, [r3, #4]
 800ebbc:	685a      	ldr	r2, [r3, #4]
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	605a      	str	r2, [r3, #4]
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	685a      	ldr	r2, [r3, #4]
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	3308      	adds	r3, #8
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d104      	bne.n	800ebd8 <vTaskSwitchContext+0x8c>
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	685b      	ldr	r3, [r3, #4]
 800ebd2:	685a      	ldr	r2, [r3, #4]
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	605a      	str	r2, [r3, #4]
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	685b      	ldr	r3, [r3, #4]
 800ebdc:	68db      	ldr	r3, [r3, #12]
 800ebde:	4a09      	ldr	r2, [pc, #36]	; (800ec04 <vTaskSwitchContext+0xb8>)
 800ebe0:	6013      	str	r3, [r2, #0]
 800ebe2:	4a06      	ldr	r2, [pc, #24]	; (800ebfc <vTaskSwitchContext+0xb0>)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	6013      	str	r3, [r2, #0]
}
 800ebe8:	bf00      	nop
 800ebea:	3714      	adds	r7, #20
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr
 800ebf4:	20003e90 	.word	0x20003e90
 800ebf8:	20003e7c 	.word	0x20003e7c
 800ebfc:	20003e70 	.word	0x20003e70
 800ec00:	20003998 	.word	0x20003998
 800ec04:	20003994 	.word	0x20003994

0800ec08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d10b      	bne.n	800ec30 <vTaskPlaceOnEventList+0x28>
 800ec18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec1c:	b672      	cpsid	i
 800ec1e:	f383 8811 	msr	BASEPRI, r3
 800ec22:	f3bf 8f6f 	isb	sy
 800ec26:	f3bf 8f4f 	dsb	sy
 800ec2a:	b662      	cpsie	i
 800ec2c:	60fb      	str	r3, [r7, #12]
 800ec2e:	e7fe      	b.n	800ec2e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec30:	4b07      	ldr	r3, [pc, #28]	; (800ec50 <vTaskPlaceOnEventList+0x48>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	3318      	adds	r3, #24
 800ec36:	4619      	mov	r1, r3
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f7fe fe74 	bl	800d926 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ec3e:	2101      	movs	r1, #1
 800ec40:	6838      	ldr	r0, [r7, #0]
 800ec42:	f000 fb93 	bl	800f36c <prvAddCurrentTaskToDelayedList>
}
 800ec46:	bf00      	nop
 800ec48:	3710      	adds	r7, #16
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	20003994 	.word	0x20003994

0800ec54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b086      	sub	sp, #24
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d10b      	bne.n	800ec7e <vTaskPlaceOnEventListRestricted+0x2a>
 800ec66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6a:	b672      	cpsid	i
 800ec6c:	f383 8811 	msr	BASEPRI, r3
 800ec70:	f3bf 8f6f 	isb	sy
 800ec74:	f3bf 8f4f 	dsb	sy
 800ec78:	b662      	cpsie	i
 800ec7a:	617b      	str	r3, [r7, #20]
 800ec7c:	e7fe      	b.n	800ec7c <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec7e:	4b0a      	ldr	r3, [pc, #40]	; (800eca8 <vTaskPlaceOnEventListRestricted+0x54>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	3318      	adds	r3, #24
 800ec84:	4619      	mov	r1, r3
 800ec86:	68f8      	ldr	r0, [r7, #12]
 800ec88:	f7fe fe29 	bl	800d8de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d002      	beq.n	800ec98 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ec92:	f04f 33ff 	mov.w	r3, #4294967295
 800ec96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ec98:	6879      	ldr	r1, [r7, #4]
 800ec9a:	68b8      	ldr	r0, [r7, #8]
 800ec9c:	f000 fb66 	bl	800f36c <prvAddCurrentTaskToDelayedList>
	}
 800eca0:	bf00      	nop
 800eca2:	3718      	adds	r7, #24
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	20003994 	.word	0x20003994

0800ecac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b086      	sub	sp, #24
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	68db      	ldr	r3, [r3, #12]
 800ecb8:	68db      	ldr	r3, [r3, #12]
 800ecba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d10b      	bne.n	800ecda <xTaskRemoveFromEventList+0x2e>
 800ecc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc6:	b672      	cpsid	i
 800ecc8:	f383 8811 	msr	BASEPRI, r3
 800eccc:	f3bf 8f6f 	isb	sy
 800ecd0:	f3bf 8f4f 	dsb	sy
 800ecd4:	b662      	cpsie	i
 800ecd6:	60fb      	str	r3, [r7, #12]
 800ecd8:	e7fe      	b.n	800ecd8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	3318      	adds	r3, #24
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fe fe5a 	bl	800d998 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ece4:	4b1d      	ldr	r3, [pc, #116]	; (800ed5c <xTaskRemoveFromEventList+0xb0>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d11d      	bne.n	800ed28 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	3304      	adds	r3, #4
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fe fe51 	bl	800d998 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecfa:	4b19      	ldr	r3, [pc, #100]	; (800ed60 <xTaskRemoveFromEventList+0xb4>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d903      	bls.n	800ed0a <xTaskRemoveFromEventList+0x5e>
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed06:	4a16      	ldr	r2, [pc, #88]	; (800ed60 <xTaskRemoveFromEventList+0xb4>)
 800ed08:	6013      	str	r3, [r2, #0]
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed0e:	4613      	mov	r3, r2
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	4413      	add	r3, r2
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	4a13      	ldr	r2, [pc, #76]	; (800ed64 <xTaskRemoveFromEventList+0xb8>)
 800ed18:	441a      	add	r2, r3
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	3304      	adds	r3, #4
 800ed1e:	4619      	mov	r1, r3
 800ed20:	4610      	mov	r0, r2
 800ed22:	f7fe fddc 	bl	800d8de <vListInsertEnd>
 800ed26:	e005      	b.n	800ed34 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	3318      	adds	r3, #24
 800ed2c:	4619      	mov	r1, r3
 800ed2e:	480e      	ldr	r0, [pc, #56]	; (800ed68 <xTaskRemoveFromEventList+0xbc>)
 800ed30:	f7fe fdd5 	bl	800d8de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed38:	4b0c      	ldr	r3, [pc, #48]	; (800ed6c <xTaskRemoveFromEventList+0xc0>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d905      	bls.n	800ed4e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ed42:	2301      	movs	r3, #1
 800ed44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ed46:	4b0a      	ldr	r3, [pc, #40]	; (800ed70 <xTaskRemoveFromEventList+0xc4>)
 800ed48:	2201      	movs	r2, #1
 800ed4a:	601a      	str	r2, [r3, #0]
 800ed4c:	e001      	b.n	800ed52 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ed52:	697b      	ldr	r3, [r7, #20]
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3718      	adds	r7, #24
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}
 800ed5c:	20003e90 	.word	0x20003e90
 800ed60:	20003e70 	.word	0x20003e70
 800ed64:	20003998 	.word	0x20003998
 800ed68:	20003e28 	.word	0x20003e28
 800ed6c:	20003994 	.word	0x20003994
 800ed70:	20003e7c 	.word	0x20003e7c

0800ed74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ed74:	b480      	push	{r7}
 800ed76:	b083      	sub	sp, #12
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ed7c:	4b06      	ldr	r3, [pc, #24]	; (800ed98 <vTaskInternalSetTimeOutState+0x24>)
 800ed7e:	681a      	ldr	r2, [r3, #0]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ed84:	4b05      	ldr	r3, [pc, #20]	; (800ed9c <vTaskInternalSetTimeOutState+0x28>)
 800ed86:	681a      	ldr	r2, [r3, #0]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	605a      	str	r2, [r3, #4]
}
 800ed8c:	bf00      	nop
 800ed8e:	370c      	adds	r7, #12
 800ed90:	46bd      	mov	sp, r7
 800ed92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed96:	4770      	bx	lr
 800ed98:	20003e80 	.word	0x20003e80
 800ed9c:	20003e6c 	.word	0x20003e6c

0800eda0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b088      	sub	sp, #32
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d10b      	bne.n	800edc8 <xTaskCheckForTimeOut+0x28>
 800edb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb4:	b672      	cpsid	i
 800edb6:	f383 8811 	msr	BASEPRI, r3
 800edba:	f3bf 8f6f 	isb	sy
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	b662      	cpsie	i
 800edc4:	613b      	str	r3, [r7, #16]
 800edc6:	e7fe      	b.n	800edc6 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d10b      	bne.n	800ede6 <xTaskCheckForTimeOut+0x46>
 800edce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd2:	b672      	cpsid	i
 800edd4:	f383 8811 	msr	BASEPRI, r3
 800edd8:	f3bf 8f6f 	isb	sy
 800eddc:	f3bf 8f4f 	dsb	sy
 800ede0:	b662      	cpsie	i
 800ede2:	60fb      	str	r3, [r7, #12]
 800ede4:	e7fe      	b.n	800ede4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800ede6:	f000 ff6f 	bl	800fcc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800edea:	4b1d      	ldr	r3, [pc, #116]	; (800ee60 <xTaskCheckForTimeOut+0xc0>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	69ba      	ldr	r2, [r7, #24]
 800edf6:	1ad3      	subs	r3, r2, r3
 800edf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee02:	d102      	bne.n	800ee0a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ee04:	2300      	movs	r3, #0
 800ee06:	61fb      	str	r3, [r7, #28]
 800ee08:	e023      	b.n	800ee52 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681a      	ldr	r2, [r3, #0]
 800ee0e:	4b15      	ldr	r3, [pc, #84]	; (800ee64 <xTaskCheckForTimeOut+0xc4>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d007      	beq.n	800ee26 <xTaskCheckForTimeOut+0x86>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	69ba      	ldr	r2, [r7, #24]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d302      	bcc.n	800ee26 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ee20:	2301      	movs	r3, #1
 800ee22:	61fb      	str	r3, [r7, #28]
 800ee24:	e015      	b.n	800ee52 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	697a      	ldr	r2, [r7, #20]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d20b      	bcs.n	800ee48 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	1ad2      	subs	r2, r2, r3
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f7ff ff99 	bl	800ed74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ee42:	2300      	movs	r3, #0
 800ee44:	61fb      	str	r3, [r7, #28]
 800ee46:	e004      	b.n	800ee52 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ee4e:	2301      	movs	r3, #1
 800ee50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ee52:	f000 ff6b 	bl	800fd2c <vPortExitCritical>

	return xReturn;
 800ee56:	69fb      	ldr	r3, [r7, #28]
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3720      	adds	r7, #32
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}
 800ee60:	20003e6c 	.word	0x20003e6c
 800ee64:	20003e80 	.word	0x20003e80

0800ee68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ee68:	b480      	push	{r7}
 800ee6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ee6c:	4b03      	ldr	r3, [pc, #12]	; (800ee7c <vTaskMissedYield+0x14>)
 800ee6e:	2201      	movs	r2, #1
 800ee70:	601a      	str	r2, [r3, #0]
}
 800ee72:	bf00      	nop
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr
 800ee7c:	20003e7c 	.word	0x20003e7c

0800ee80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ee88:	f000 f852 	bl	800ef30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ee8c:	4b06      	ldr	r3, [pc, #24]	; (800eea8 <prvIdleTask+0x28>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	d9f9      	bls.n	800ee88 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ee94:	4b05      	ldr	r3, [pc, #20]	; (800eeac <prvIdleTask+0x2c>)
 800ee96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee9a:	601a      	str	r2, [r3, #0]
 800ee9c:	f3bf 8f4f 	dsb	sy
 800eea0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eea4:	e7f0      	b.n	800ee88 <prvIdleTask+0x8>
 800eea6:	bf00      	nop
 800eea8:	20003998 	.word	0x20003998
 800eeac:	e000ed04 	.word	0xe000ed04

0800eeb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	607b      	str	r3, [r7, #4]
 800eeba:	e00c      	b.n	800eed6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eebc:	687a      	ldr	r2, [r7, #4]
 800eebe:	4613      	mov	r3, r2
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	4413      	add	r3, r2
 800eec4:	009b      	lsls	r3, r3, #2
 800eec6:	4a12      	ldr	r2, [pc, #72]	; (800ef10 <prvInitialiseTaskLists+0x60>)
 800eec8:	4413      	add	r3, r2
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fe fcda 	bl	800d884 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	3301      	adds	r3, #1
 800eed4:	607b      	str	r3, [r7, #4]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2b37      	cmp	r3, #55	; 0x37
 800eeda:	d9ef      	bls.n	800eebc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eedc:	480d      	ldr	r0, [pc, #52]	; (800ef14 <prvInitialiseTaskLists+0x64>)
 800eede:	f7fe fcd1 	bl	800d884 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eee2:	480d      	ldr	r0, [pc, #52]	; (800ef18 <prvInitialiseTaskLists+0x68>)
 800eee4:	f7fe fcce 	bl	800d884 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eee8:	480c      	ldr	r0, [pc, #48]	; (800ef1c <prvInitialiseTaskLists+0x6c>)
 800eeea:	f7fe fccb 	bl	800d884 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eeee:	480c      	ldr	r0, [pc, #48]	; (800ef20 <prvInitialiseTaskLists+0x70>)
 800eef0:	f7fe fcc8 	bl	800d884 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eef4:	480b      	ldr	r0, [pc, #44]	; (800ef24 <prvInitialiseTaskLists+0x74>)
 800eef6:	f7fe fcc5 	bl	800d884 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eefa:	4b0b      	ldr	r3, [pc, #44]	; (800ef28 <prvInitialiseTaskLists+0x78>)
 800eefc:	4a05      	ldr	r2, [pc, #20]	; (800ef14 <prvInitialiseTaskLists+0x64>)
 800eefe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ef00:	4b0a      	ldr	r3, [pc, #40]	; (800ef2c <prvInitialiseTaskLists+0x7c>)
 800ef02:	4a05      	ldr	r2, [pc, #20]	; (800ef18 <prvInitialiseTaskLists+0x68>)
 800ef04:	601a      	str	r2, [r3, #0]
}
 800ef06:	bf00      	nop
 800ef08:	3708      	adds	r7, #8
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	20003998 	.word	0x20003998
 800ef14:	20003df8 	.word	0x20003df8
 800ef18:	20003e0c 	.word	0x20003e0c
 800ef1c:	20003e28 	.word	0x20003e28
 800ef20:	20003e3c 	.word	0x20003e3c
 800ef24:	20003e54 	.word	0x20003e54
 800ef28:	20003e20 	.word	0x20003e20
 800ef2c:	20003e24 	.word	0x20003e24

0800ef30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ef36:	e019      	b.n	800ef6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ef38:	f000 fec6 	bl	800fcc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef3c:	4b0f      	ldr	r3, [pc, #60]	; (800ef7c <prvCheckTasksWaitingTermination+0x4c>)
 800ef3e:	68db      	ldr	r3, [r3, #12]
 800ef40:	68db      	ldr	r3, [r3, #12]
 800ef42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	3304      	adds	r3, #4
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7fe fd25 	bl	800d998 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ef4e:	4b0c      	ldr	r3, [pc, #48]	; (800ef80 <prvCheckTasksWaitingTermination+0x50>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	3b01      	subs	r3, #1
 800ef54:	4a0a      	ldr	r2, [pc, #40]	; (800ef80 <prvCheckTasksWaitingTermination+0x50>)
 800ef56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ef58:	4b0a      	ldr	r3, [pc, #40]	; (800ef84 <prvCheckTasksWaitingTermination+0x54>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	3b01      	subs	r3, #1
 800ef5e:	4a09      	ldr	r2, [pc, #36]	; (800ef84 <prvCheckTasksWaitingTermination+0x54>)
 800ef60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ef62:	f000 fee3 	bl	800fd2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 f80e 	bl	800ef88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ef6c:	4b05      	ldr	r3, [pc, #20]	; (800ef84 <prvCheckTasksWaitingTermination+0x54>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d1e1      	bne.n	800ef38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ef74:	bf00      	nop
 800ef76:	3708      	adds	r7, #8
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}
 800ef7c:	20003e3c 	.word	0x20003e3c
 800ef80:	20003e68 	.word	0x20003e68
 800ef84:	20003e50 	.word	0x20003e50

0800ef88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d108      	bne.n	800efac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f001 f87c 	bl	801009c <vPortFree>
				vPortFree( pxTCB );
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f001 f879 	bl	801009c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800efaa:	e019      	b.n	800efe0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d103      	bne.n	800efbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f001 f870 	bl	801009c <vPortFree>
	}
 800efbc:	e010      	b.n	800efe0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800efc4:	2b02      	cmp	r3, #2
 800efc6:	d00b      	beq.n	800efe0 <prvDeleteTCB+0x58>
 800efc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efcc:	b672      	cpsid	i
 800efce:	f383 8811 	msr	BASEPRI, r3
 800efd2:	f3bf 8f6f 	isb	sy
 800efd6:	f3bf 8f4f 	dsb	sy
 800efda:	b662      	cpsie	i
 800efdc:	60fb      	str	r3, [r7, #12]
 800efde:	e7fe      	b.n	800efde <prvDeleteTCB+0x56>
	}
 800efe0:	bf00      	nop
 800efe2:	3710      	adds	r7, #16
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800efe8:	b480      	push	{r7}
 800efea:	b083      	sub	sp, #12
 800efec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800efee:	4b0c      	ldr	r3, [pc, #48]	; (800f020 <prvResetNextTaskUnblockTime+0x38>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d104      	bne.n	800f002 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eff8:	4b0a      	ldr	r3, [pc, #40]	; (800f024 <prvResetNextTaskUnblockTime+0x3c>)
 800effa:	f04f 32ff 	mov.w	r2, #4294967295
 800effe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f000:	e008      	b.n	800f014 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f002:	4b07      	ldr	r3, [pc, #28]	; (800f020 <prvResetNextTaskUnblockTime+0x38>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	68db      	ldr	r3, [r3, #12]
 800f008:	68db      	ldr	r3, [r3, #12]
 800f00a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	4a04      	ldr	r2, [pc, #16]	; (800f024 <prvResetNextTaskUnblockTime+0x3c>)
 800f012:	6013      	str	r3, [r2, #0]
}
 800f014:	bf00      	nop
 800f016:	370c      	adds	r7, #12
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr
 800f020:	20003e20 	.word	0x20003e20
 800f024:	20003e88 	.word	0x20003e88

0800f028 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f028:	b480      	push	{r7}
 800f02a:	b083      	sub	sp, #12
 800f02c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f02e:	4b0b      	ldr	r3, [pc, #44]	; (800f05c <xTaskGetSchedulerState+0x34>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d102      	bne.n	800f03c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f036:	2301      	movs	r3, #1
 800f038:	607b      	str	r3, [r7, #4]
 800f03a:	e008      	b.n	800f04e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f03c:	4b08      	ldr	r3, [pc, #32]	; (800f060 <xTaskGetSchedulerState+0x38>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d102      	bne.n	800f04a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f044:	2302      	movs	r3, #2
 800f046:	607b      	str	r3, [r7, #4]
 800f048:	e001      	b.n	800f04e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f04a:	2300      	movs	r3, #0
 800f04c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f04e:	687b      	ldr	r3, [r7, #4]
	}
 800f050:	4618      	mov	r0, r3
 800f052:	370c      	adds	r7, #12
 800f054:	46bd      	mov	sp, r7
 800f056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05a:	4770      	bx	lr
 800f05c:	20003e74 	.word	0x20003e74
 800f060:	20003e90 	.word	0x20003e90

0800f064 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f064:	b580      	push	{r7, lr}
 800f066:	b086      	sub	sp, #24
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f070:	2300      	movs	r3, #0
 800f072:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d058      	beq.n	800f12c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f07a:	4b2f      	ldr	r3, [pc, #188]	; (800f138 <xTaskPriorityDisinherit+0xd4>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	693a      	ldr	r2, [r7, #16]
 800f080:	429a      	cmp	r2, r3
 800f082:	d00b      	beq.n	800f09c <xTaskPriorityDisinherit+0x38>
 800f084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f088:	b672      	cpsid	i
 800f08a:	f383 8811 	msr	BASEPRI, r3
 800f08e:	f3bf 8f6f 	isb	sy
 800f092:	f3bf 8f4f 	dsb	sy
 800f096:	b662      	cpsie	i
 800f098:	60fb      	str	r3, [r7, #12]
 800f09a:	e7fe      	b.n	800f09a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d10b      	bne.n	800f0bc <xTaskPriorityDisinherit+0x58>
 800f0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a8:	b672      	cpsid	i
 800f0aa:	f383 8811 	msr	BASEPRI, r3
 800f0ae:	f3bf 8f6f 	isb	sy
 800f0b2:	f3bf 8f4f 	dsb	sy
 800f0b6:	b662      	cpsie	i
 800f0b8:	60bb      	str	r3, [r7, #8]
 800f0ba:	e7fe      	b.n	800f0ba <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0c0:	1e5a      	subs	r2, r3, #1
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d02c      	beq.n	800f12c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d128      	bne.n	800f12c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	3304      	adds	r3, #4
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7fe fc5a 	bl	800d998 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0fc:	4b0f      	ldr	r3, [pc, #60]	; (800f13c <xTaskPriorityDisinherit+0xd8>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	429a      	cmp	r2, r3
 800f102:	d903      	bls.n	800f10c <xTaskPriorityDisinherit+0xa8>
 800f104:	693b      	ldr	r3, [r7, #16]
 800f106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f108:	4a0c      	ldr	r2, [pc, #48]	; (800f13c <xTaskPriorityDisinherit+0xd8>)
 800f10a:	6013      	str	r3, [r2, #0]
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f110:	4613      	mov	r3, r2
 800f112:	009b      	lsls	r3, r3, #2
 800f114:	4413      	add	r3, r2
 800f116:	009b      	lsls	r3, r3, #2
 800f118:	4a09      	ldr	r2, [pc, #36]	; (800f140 <xTaskPriorityDisinherit+0xdc>)
 800f11a:	441a      	add	r2, r3
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	3304      	adds	r3, #4
 800f120:	4619      	mov	r1, r3
 800f122:	4610      	mov	r0, r2
 800f124:	f7fe fbdb 	bl	800d8de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f128:	2301      	movs	r3, #1
 800f12a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f12c:	697b      	ldr	r3, [r7, #20]
	}
 800f12e:	4618      	mov	r0, r3
 800f130:	3718      	adds	r7, #24
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	20003994 	.word	0x20003994
 800f13c:	20003e70 	.word	0x20003e70
 800f140:	20003998 	.word	0x20003998

0800f144 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f144:	b580      	push	{r7, lr}
 800f146:	b086      	sub	sp, #24
 800f148:	af00      	add	r7, sp, #0
 800f14a:	60f8      	str	r0, [r7, #12]
 800f14c:	60b9      	str	r1, [r7, #8]
 800f14e:	607a      	str	r2, [r7, #4]
 800f150:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f152:	f000 fdb9 	bl	800fcc8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f156:	4b26      	ldr	r3, [pc, #152]	; (800f1f0 <xTaskNotifyWait+0xac>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	2b02      	cmp	r3, #2
 800f162:	d01a      	beq.n	800f19a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f164:	4b22      	ldr	r3, [pc, #136]	; (800f1f0 <xTaskNotifyWait+0xac>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f16a:	68fa      	ldr	r2, [r7, #12]
 800f16c:	43d2      	mvns	r2, r2
 800f16e:	400a      	ands	r2, r1
 800f170:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f172:	4b1f      	ldr	r3, [pc, #124]	; (800f1f0 <xTaskNotifyWait+0xac>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2201      	movs	r2, #1
 800f178:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d00b      	beq.n	800f19a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f182:	2101      	movs	r1, #1
 800f184:	6838      	ldr	r0, [r7, #0]
 800f186:	f000 f8f1 	bl	800f36c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f18a:	4b1a      	ldr	r3, [pc, #104]	; (800f1f4 <xTaskNotifyWait+0xb0>)
 800f18c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f190:	601a      	str	r2, [r3, #0]
 800f192:	f3bf 8f4f 	dsb	sy
 800f196:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f19a:	f000 fdc7 	bl	800fd2c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f19e:	f000 fd93 	bl	800fcc8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d004      	beq.n	800f1b2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f1a8:	4b11      	ldr	r3, [pc, #68]	; (800f1f0 <xTaskNotifyWait+0xac>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f1b2:	4b0f      	ldr	r3, [pc, #60]	; (800f1f0 <xTaskNotifyWait+0xac>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	2b02      	cmp	r3, #2
 800f1be:	d002      	beq.n	800f1c6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	617b      	str	r3, [r7, #20]
 800f1c4:	e008      	b.n	800f1d8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f1c6:	4b0a      	ldr	r3, [pc, #40]	; (800f1f0 <xTaskNotifyWait+0xac>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f1cc:	68ba      	ldr	r2, [r7, #8]
 800f1ce:	43d2      	mvns	r2, r2
 800f1d0:	400a      	ands	r2, r1
 800f1d2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f1d8:	4b05      	ldr	r3, [pc, #20]	; (800f1f0 <xTaskNotifyWait+0xac>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800f1e2:	f000 fda3 	bl	800fd2c <vPortExitCritical>

		return xReturn;
 800f1e6:	697b      	ldr	r3, [r7, #20]
	}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3718      	adds	r7, #24
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	20003994 	.word	0x20003994
 800f1f4:	e000ed04 	.word	0xe000ed04

0800f1f8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b08a      	sub	sp, #40	; 0x28
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	60b9      	str	r1, [r7, #8]
 800f202:	603b      	str	r3, [r7, #0]
 800f204:	4613      	mov	r3, r2
 800f206:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f208:	2301      	movs	r3, #1
 800f20a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d10b      	bne.n	800f22a <xTaskGenericNotify+0x32>
 800f212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f216:	b672      	cpsid	i
 800f218:	f383 8811 	msr	BASEPRI, r3
 800f21c:	f3bf 8f6f 	isb	sy
 800f220:	f3bf 8f4f 	dsb	sy
 800f224:	b662      	cpsie	i
 800f226:	61bb      	str	r3, [r7, #24]
 800f228:	e7fe      	b.n	800f228 <xTaskGenericNotify+0x30>
		pxTCB = xTaskToNotify;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f22e:	f000 fd4b 	bl	800fcc8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d003      	beq.n	800f240 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f238:	6a3b      	ldr	r3, [r7, #32]
 800f23a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f240:	6a3b      	ldr	r3, [r7, #32]
 800f242:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f246:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f248:	6a3b      	ldr	r3, [r7, #32]
 800f24a:	2202      	movs	r2, #2
 800f24c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800f250:	79fb      	ldrb	r3, [r7, #7]
 800f252:	2b04      	cmp	r3, #4
 800f254:	d827      	bhi.n	800f2a6 <xTaskGenericNotify+0xae>
 800f256:	a201      	add	r2, pc, #4	; (adr r2, 800f25c <xTaskGenericNotify+0x64>)
 800f258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f25c:	0800f2c9 	.word	0x0800f2c9
 800f260:	0800f271 	.word	0x0800f271
 800f264:	0800f27f 	.word	0x0800f27f
 800f268:	0800f28b 	.word	0x0800f28b
 800f26c:	0800f293 	.word	0x0800f293
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f270:	6a3b      	ldr	r3, [r7, #32]
 800f272:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	431a      	orrs	r2, r3
 800f278:	6a3b      	ldr	r3, [r7, #32]
 800f27a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f27c:	e027      	b.n	800f2ce <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f27e:	6a3b      	ldr	r3, [r7, #32]
 800f280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f282:	1c5a      	adds	r2, r3, #1
 800f284:	6a3b      	ldr	r3, [r7, #32]
 800f286:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f288:	e021      	b.n	800f2ce <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f28a:	6a3b      	ldr	r3, [r7, #32]
 800f28c:	68ba      	ldr	r2, [r7, #8]
 800f28e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f290:	e01d      	b.n	800f2ce <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f292:	7ffb      	ldrb	r3, [r7, #31]
 800f294:	2b02      	cmp	r3, #2
 800f296:	d003      	beq.n	800f2a0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f298:	6a3b      	ldr	r3, [r7, #32]
 800f29a:	68ba      	ldr	r2, [r7, #8]
 800f29c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f29e:	e016      	b.n	800f2ce <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800f2a4:	e013      	b.n	800f2ce <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f2a6:	6a3b      	ldr	r3, [r7, #32]
 800f2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ae:	d00d      	beq.n	800f2cc <xTaskGenericNotify+0xd4>
 800f2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b4:	b672      	cpsid	i
 800f2b6:	f383 8811 	msr	BASEPRI, r3
 800f2ba:	f3bf 8f6f 	isb	sy
 800f2be:	f3bf 8f4f 	dsb	sy
 800f2c2:	b662      	cpsie	i
 800f2c4:	617b      	str	r3, [r7, #20]
 800f2c6:	e7fe      	b.n	800f2c6 <xTaskGenericNotify+0xce>
					break;
 800f2c8:	bf00      	nop
 800f2ca:	e000      	b.n	800f2ce <xTaskGenericNotify+0xd6>

					break;
 800f2cc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f2ce:	7ffb      	ldrb	r3, [r7, #31]
 800f2d0:	2b01      	cmp	r3, #1
 800f2d2:	d13b      	bne.n	800f34c <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f2d4:	6a3b      	ldr	r3, [r7, #32]
 800f2d6:	3304      	adds	r3, #4
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7fe fb5d 	bl	800d998 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f2de:	6a3b      	ldr	r3, [r7, #32]
 800f2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2e2:	4b1e      	ldr	r3, [pc, #120]	; (800f35c <xTaskGenericNotify+0x164>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d903      	bls.n	800f2f2 <xTaskGenericNotify+0xfa>
 800f2ea:	6a3b      	ldr	r3, [r7, #32]
 800f2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2ee:	4a1b      	ldr	r2, [pc, #108]	; (800f35c <xTaskGenericNotify+0x164>)
 800f2f0:	6013      	str	r3, [r2, #0]
 800f2f2:	6a3b      	ldr	r3, [r7, #32]
 800f2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2f6:	4613      	mov	r3, r2
 800f2f8:	009b      	lsls	r3, r3, #2
 800f2fa:	4413      	add	r3, r2
 800f2fc:	009b      	lsls	r3, r3, #2
 800f2fe:	4a18      	ldr	r2, [pc, #96]	; (800f360 <xTaskGenericNotify+0x168>)
 800f300:	441a      	add	r2, r3
 800f302:	6a3b      	ldr	r3, [r7, #32]
 800f304:	3304      	adds	r3, #4
 800f306:	4619      	mov	r1, r3
 800f308:	4610      	mov	r0, r2
 800f30a:	f7fe fae8 	bl	800d8de <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f30e:	6a3b      	ldr	r3, [r7, #32]
 800f310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f312:	2b00      	cmp	r3, #0
 800f314:	d00b      	beq.n	800f32e <xTaskGenericNotify+0x136>
 800f316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f31a:	b672      	cpsid	i
 800f31c:	f383 8811 	msr	BASEPRI, r3
 800f320:	f3bf 8f6f 	isb	sy
 800f324:	f3bf 8f4f 	dsb	sy
 800f328:	b662      	cpsie	i
 800f32a:	613b      	str	r3, [r7, #16]
 800f32c:	e7fe      	b.n	800f32c <xTaskGenericNotify+0x134>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f32e:	6a3b      	ldr	r3, [r7, #32]
 800f330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f332:	4b0c      	ldr	r3, [pc, #48]	; (800f364 <xTaskGenericNotify+0x16c>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f338:	429a      	cmp	r2, r3
 800f33a:	d907      	bls.n	800f34c <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f33c:	4b0a      	ldr	r3, [pc, #40]	; (800f368 <xTaskGenericNotify+0x170>)
 800f33e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f342:	601a      	str	r2, [r3, #0]
 800f344:	f3bf 8f4f 	dsb	sy
 800f348:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f34c:	f000 fcee 	bl	800fd2c <vPortExitCritical>

		return xReturn;
 800f350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f352:	4618      	mov	r0, r3
 800f354:	3728      	adds	r7, #40	; 0x28
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	20003e70 	.word	0x20003e70
 800f360:	20003998 	.word	0x20003998
 800f364:	20003994 	.word	0x20003994
 800f368:	e000ed04 	.word	0xe000ed04

0800f36c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b084      	sub	sp, #16
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f376:	4b21      	ldr	r3, [pc, #132]	; (800f3fc <prvAddCurrentTaskToDelayedList+0x90>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f37c:	4b20      	ldr	r3, [pc, #128]	; (800f400 <prvAddCurrentTaskToDelayedList+0x94>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	3304      	adds	r3, #4
 800f382:	4618      	mov	r0, r3
 800f384:	f7fe fb08 	bl	800d998 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f38e:	d10a      	bne.n	800f3a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d007      	beq.n	800f3a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f396:	4b1a      	ldr	r3, [pc, #104]	; (800f400 <prvAddCurrentTaskToDelayedList+0x94>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	3304      	adds	r3, #4
 800f39c:	4619      	mov	r1, r3
 800f39e:	4819      	ldr	r0, [pc, #100]	; (800f404 <prvAddCurrentTaskToDelayedList+0x98>)
 800f3a0:	f7fe fa9d 	bl	800d8de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f3a4:	e026      	b.n	800f3f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f3a6:	68fa      	ldr	r2, [r7, #12]
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	4413      	add	r3, r2
 800f3ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f3ae:	4b14      	ldr	r3, [pc, #80]	; (800f400 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	68ba      	ldr	r2, [r7, #8]
 800f3b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f3b6:	68ba      	ldr	r2, [r7, #8]
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d209      	bcs.n	800f3d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3be:	4b12      	ldr	r3, [pc, #72]	; (800f408 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	4b0f      	ldr	r3, [pc, #60]	; (800f400 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	4610      	mov	r0, r2
 800f3cc:	f7fe faab 	bl	800d926 <vListInsert>
}
 800f3d0:	e010      	b.n	800f3f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3d2:	4b0e      	ldr	r3, [pc, #56]	; (800f40c <prvAddCurrentTaskToDelayedList+0xa0>)
 800f3d4:	681a      	ldr	r2, [r3, #0]
 800f3d6:	4b0a      	ldr	r3, [pc, #40]	; (800f400 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	3304      	adds	r3, #4
 800f3dc:	4619      	mov	r1, r3
 800f3de:	4610      	mov	r0, r2
 800f3e0:	f7fe faa1 	bl	800d926 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f3e4:	4b0a      	ldr	r3, [pc, #40]	; (800f410 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	68ba      	ldr	r2, [r7, #8]
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d202      	bcs.n	800f3f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f3ee:	4a08      	ldr	r2, [pc, #32]	; (800f410 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	6013      	str	r3, [r2, #0]
}
 800f3f4:	bf00      	nop
 800f3f6:	3710      	adds	r7, #16
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	20003e6c 	.word	0x20003e6c
 800f400:	20003994 	.word	0x20003994
 800f404:	20003e54 	.word	0x20003e54
 800f408:	20003e24 	.word	0x20003e24
 800f40c:	20003e20 	.word	0x20003e20
 800f410:	20003e88 	.word	0x20003e88

0800f414 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b08a      	sub	sp, #40	; 0x28
 800f418:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f41a:	2300      	movs	r3, #0
 800f41c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f41e:	f000 fb0d 	bl	800fa3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f422:	4b1d      	ldr	r3, [pc, #116]	; (800f498 <xTimerCreateTimerTask+0x84>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d021      	beq.n	800f46e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f42a:	2300      	movs	r3, #0
 800f42c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f42e:	2300      	movs	r3, #0
 800f430:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f432:	1d3a      	adds	r2, r7, #4
 800f434:	f107 0108 	add.w	r1, r7, #8
 800f438:	f107 030c 	add.w	r3, r7, #12
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7fe fa07 	bl	800d850 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f442:	6879      	ldr	r1, [r7, #4]
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	68fa      	ldr	r2, [r7, #12]
 800f448:	9202      	str	r2, [sp, #8]
 800f44a:	9301      	str	r3, [sp, #4]
 800f44c:	2302      	movs	r3, #2
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	2300      	movs	r3, #0
 800f452:	460a      	mov	r2, r1
 800f454:	4911      	ldr	r1, [pc, #68]	; (800f49c <xTimerCreateTimerTask+0x88>)
 800f456:	4812      	ldr	r0, [pc, #72]	; (800f4a0 <xTimerCreateTimerTask+0x8c>)
 800f458:	f7fe ffbe 	bl	800e3d8 <xTaskCreateStatic>
 800f45c:	4602      	mov	r2, r0
 800f45e:	4b11      	ldr	r3, [pc, #68]	; (800f4a4 <xTimerCreateTimerTask+0x90>)
 800f460:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f462:	4b10      	ldr	r3, [pc, #64]	; (800f4a4 <xTimerCreateTimerTask+0x90>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d001      	beq.n	800f46e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f46a:	2301      	movs	r3, #1
 800f46c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d10b      	bne.n	800f48c <xTimerCreateTimerTask+0x78>
 800f474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f478:	b672      	cpsid	i
 800f47a:	f383 8811 	msr	BASEPRI, r3
 800f47e:	f3bf 8f6f 	isb	sy
 800f482:	f3bf 8f4f 	dsb	sy
 800f486:	b662      	cpsie	i
 800f488:	613b      	str	r3, [r7, #16]
 800f48a:	e7fe      	b.n	800f48a <xTimerCreateTimerTask+0x76>
	return xReturn;
 800f48c:	697b      	ldr	r3, [r7, #20]
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3718      	adds	r7, #24
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	20003ec4 	.word	0x20003ec4
 800f49c:	080148cc 	.word	0x080148cc
 800f4a0:	0800f5e1 	.word	0x0800f5e1
 800f4a4:	20003ec8 	.word	0x20003ec8

0800f4a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b08a      	sub	sp, #40	; 0x28
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	60f8      	str	r0, [r7, #12]
 800f4b0:	60b9      	str	r1, [r7, #8]
 800f4b2:	607a      	str	r2, [r7, #4]
 800f4b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d10b      	bne.n	800f4d8 <xTimerGenericCommand+0x30>
 800f4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c4:	b672      	cpsid	i
 800f4c6:	f383 8811 	msr	BASEPRI, r3
 800f4ca:	f3bf 8f6f 	isb	sy
 800f4ce:	f3bf 8f4f 	dsb	sy
 800f4d2:	b662      	cpsie	i
 800f4d4:	623b      	str	r3, [r7, #32]
 800f4d6:	e7fe      	b.n	800f4d6 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f4d8:	4b19      	ldr	r3, [pc, #100]	; (800f540 <xTimerGenericCommand+0x98>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d02a      	beq.n	800f536 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	2b05      	cmp	r3, #5
 800f4f0:	dc18      	bgt.n	800f524 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f4f2:	f7ff fd99 	bl	800f028 <xTaskGetSchedulerState>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	2b02      	cmp	r3, #2
 800f4fa:	d109      	bne.n	800f510 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f4fc:	4b10      	ldr	r3, [pc, #64]	; (800f540 <xTimerGenericCommand+0x98>)
 800f4fe:	6818      	ldr	r0, [r3, #0]
 800f500:	f107 0110 	add.w	r1, r7, #16
 800f504:	2300      	movs	r3, #0
 800f506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f508:	f7fe fb7a 	bl	800dc00 <xQueueGenericSend>
 800f50c:	6278      	str	r0, [r7, #36]	; 0x24
 800f50e:	e012      	b.n	800f536 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f510:	4b0b      	ldr	r3, [pc, #44]	; (800f540 <xTimerGenericCommand+0x98>)
 800f512:	6818      	ldr	r0, [r3, #0]
 800f514:	f107 0110 	add.w	r1, r7, #16
 800f518:	2300      	movs	r3, #0
 800f51a:	2200      	movs	r2, #0
 800f51c:	f7fe fb70 	bl	800dc00 <xQueueGenericSend>
 800f520:	6278      	str	r0, [r7, #36]	; 0x24
 800f522:	e008      	b.n	800f536 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f524:	4b06      	ldr	r3, [pc, #24]	; (800f540 <xTimerGenericCommand+0x98>)
 800f526:	6818      	ldr	r0, [r3, #0]
 800f528:	f107 0110 	add.w	r1, r7, #16
 800f52c:	2300      	movs	r3, #0
 800f52e:	683a      	ldr	r2, [r7, #0]
 800f530:	f7fe fc68 	bl	800de04 <xQueueGenericSendFromISR>
 800f534:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f538:	4618      	mov	r0, r3
 800f53a:	3728      	adds	r7, #40	; 0x28
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}
 800f540:	20003ec4 	.word	0x20003ec4

0800f544 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b088      	sub	sp, #32
 800f548:	af02      	add	r7, sp, #8
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f54e:	4b23      	ldr	r3, [pc, #140]	; (800f5dc <prvProcessExpiredTimer+0x98>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	68db      	ldr	r3, [r3, #12]
 800f554:	68db      	ldr	r3, [r3, #12]
 800f556:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	3304      	adds	r3, #4
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7fe fa1b 	bl	800d998 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f568:	f003 0304 	and.w	r3, r3, #4
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d023      	beq.n	800f5b8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	699a      	ldr	r2, [r3, #24]
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	18d1      	adds	r1, r2, r3
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	683a      	ldr	r2, [r7, #0]
 800f57c:	6978      	ldr	r0, [r7, #20]
 800f57e:	f000 f8d3 	bl	800f728 <prvInsertTimerInActiveList>
 800f582:	4603      	mov	r3, r0
 800f584:	2b00      	cmp	r3, #0
 800f586:	d020      	beq.n	800f5ca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f588:	2300      	movs	r3, #0
 800f58a:	9300      	str	r3, [sp, #0]
 800f58c:	2300      	movs	r3, #0
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	2100      	movs	r1, #0
 800f592:	6978      	ldr	r0, [r7, #20]
 800f594:	f7ff ff88 	bl	800f4a8 <xTimerGenericCommand>
 800f598:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d114      	bne.n	800f5ca <prvProcessExpiredTimer+0x86>
 800f5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a4:	b672      	cpsid	i
 800f5a6:	f383 8811 	msr	BASEPRI, r3
 800f5aa:	f3bf 8f6f 	isb	sy
 800f5ae:	f3bf 8f4f 	dsb	sy
 800f5b2:	b662      	cpsie	i
 800f5b4:	60fb      	str	r3, [r7, #12]
 800f5b6:	e7fe      	b.n	800f5b6 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5be:	f023 0301 	bic.w	r3, r3, #1
 800f5c2:	b2da      	uxtb	r2, r3
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	6a1b      	ldr	r3, [r3, #32]
 800f5ce:	6978      	ldr	r0, [r7, #20]
 800f5d0:	4798      	blx	r3
}
 800f5d2:	bf00      	nop
 800f5d4:	3718      	adds	r7, #24
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	20003ebc 	.word	0x20003ebc

0800f5e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b084      	sub	sp, #16
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f5e8:	f107 0308 	add.w	r3, r7, #8
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f000 f857 	bl	800f6a0 <prvGetNextExpireTime>
 800f5f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	68f8      	ldr	r0, [r7, #12]
 800f5fa:	f000 f803 	bl	800f604 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f5fe:	f000 f8d5 	bl	800f7ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f602:	e7f1      	b.n	800f5e8 <prvTimerTask+0x8>

0800f604 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b084      	sub	sp, #16
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
 800f60c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f60e:	f7ff f927 	bl	800e860 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f612:	f107 0308 	add.w	r3, r7, #8
 800f616:	4618      	mov	r0, r3
 800f618:	f000 f866 	bl	800f6e8 <prvSampleTimeNow>
 800f61c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d130      	bne.n	800f686 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d10a      	bne.n	800f640 <prvProcessTimerOrBlockTask+0x3c>
 800f62a:	687a      	ldr	r2, [r7, #4]
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	429a      	cmp	r2, r3
 800f630:	d806      	bhi.n	800f640 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f632:	f7ff f923 	bl	800e87c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f636:	68f9      	ldr	r1, [r7, #12]
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f7ff ff83 	bl	800f544 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f63e:	e024      	b.n	800f68a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d008      	beq.n	800f658 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f646:	4b13      	ldr	r3, [pc, #76]	; (800f694 <prvProcessTimerOrBlockTask+0x90>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d101      	bne.n	800f654 <prvProcessTimerOrBlockTask+0x50>
 800f650:	2301      	movs	r3, #1
 800f652:	e000      	b.n	800f656 <prvProcessTimerOrBlockTask+0x52>
 800f654:	2300      	movs	r3, #0
 800f656:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f658:	4b0f      	ldr	r3, [pc, #60]	; (800f698 <prvProcessTimerOrBlockTask+0x94>)
 800f65a:	6818      	ldr	r0, [r3, #0]
 800f65c:	687a      	ldr	r2, [r7, #4]
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	1ad3      	subs	r3, r2, r3
 800f662:	683a      	ldr	r2, [r7, #0]
 800f664:	4619      	mov	r1, r3
 800f666:	f7fe fe83 	bl	800e370 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f66a:	f7ff f907 	bl	800e87c <xTaskResumeAll>
 800f66e:	4603      	mov	r3, r0
 800f670:	2b00      	cmp	r3, #0
 800f672:	d10a      	bne.n	800f68a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f674:	4b09      	ldr	r3, [pc, #36]	; (800f69c <prvProcessTimerOrBlockTask+0x98>)
 800f676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f67a:	601a      	str	r2, [r3, #0]
 800f67c:	f3bf 8f4f 	dsb	sy
 800f680:	f3bf 8f6f 	isb	sy
}
 800f684:	e001      	b.n	800f68a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f686:	f7ff f8f9 	bl	800e87c <xTaskResumeAll>
}
 800f68a:	bf00      	nop
 800f68c:	3710      	adds	r7, #16
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}
 800f692:	bf00      	nop
 800f694:	20003ec0 	.word	0x20003ec0
 800f698:	20003ec4 	.word	0x20003ec4
 800f69c:	e000ed04 	.word	0xe000ed04

0800f6a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	b085      	sub	sp, #20
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f6a8:	4b0e      	ldr	r3, [pc, #56]	; (800f6e4 <prvGetNextExpireTime+0x44>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d101      	bne.n	800f6b6 <prvGetNextExpireTime+0x16>
 800f6b2:	2201      	movs	r2, #1
 800f6b4:	e000      	b.n	800f6b8 <prvGetNextExpireTime+0x18>
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d105      	bne.n	800f6d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6c4:	4b07      	ldr	r3, [pc, #28]	; (800f6e4 <prvGetNextExpireTime+0x44>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	60fb      	str	r3, [r7, #12]
 800f6ce:	e001      	b.n	800f6d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3714      	adds	r7, #20
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e0:	4770      	bx	lr
 800f6e2:	bf00      	nop
 800f6e4:	20003ebc 	.word	0x20003ebc

0800f6e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b084      	sub	sp, #16
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f6f0:	f7ff f962 	bl	800e9b8 <xTaskGetTickCount>
 800f6f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f6f6:	4b0b      	ldr	r3, [pc, #44]	; (800f724 <prvSampleTimeNow+0x3c>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	68fa      	ldr	r2, [r7, #12]
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d205      	bcs.n	800f70c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f700:	f000 f936 	bl	800f970 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2201      	movs	r2, #1
 800f708:	601a      	str	r2, [r3, #0]
 800f70a:	e002      	b.n	800f712 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2200      	movs	r2, #0
 800f710:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f712:	4a04      	ldr	r2, [pc, #16]	; (800f724 <prvSampleTimeNow+0x3c>)
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f718:	68fb      	ldr	r3, [r7, #12]
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	3710      	adds	r7, #16
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}
 800f722:	bf00      	nop
 800f724:	20003ecc 	.word	0x20003ecc

0800f728 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b086      	sub	sp, #24
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	60f8      	str	r0, [r7, #12]
 800f730:	60b9      	str	r1, [r7, #8]
 800f732:	607a      	str	r2, [r7, #4]
 800f734:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f736:	2300      	movs	r3, #0
 800f738:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	68ba      	ldr	r2, [r7, #8]
 800f73e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	68fa      	ldr	r2, [r7, #12]
 800f744:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f746:	68ba      	ldr	r2, [r7, #8]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d812      	bhi.n	800f774 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f74e:	687a      	ldr	r2, [r7, #4]
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	1ad2      	subs	r2, r2, r3
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	699b      	ldr	r3, [r3, #24]
 800f758:	429a      	cmp	r2, r3
 800f75a:	d302      	bcc.n	800f762 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f75c:	2301      	movs	r3, #1
 800f75e:	617b      	str	r3, [r7, #20]
 800f760:	e01b      	b.n	800f79a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f762:	4b10      	ldr	r3, [pc, #64]	; (800f7a4 <prvInsertTimerInActiveList+0x7c>)
 800f764:	681a      	ldr	r2, [r3, #0]
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	3304      	adds	r3, #4
 800f76a:	4619      	mov	r1, r3
 800f76c:	4610      	mov	r0, r2
 800f76e:	f7fe f8da 	bl	800d926 <vListInsert>
 800f772:	e012      	b.n	800f79a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d206      	bcs.n	800f78a <prvInsertTimerInActiveList+0x62>
 800f77c:	68ba      	ldr	r2, [r7, #8]
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	429a      	cmp	r2, r3
 800f782:	d302      	bcc.n	800f78a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f784:	2301      	movs	r3, #1
 800f786:	617b      	str	r3, [r7, #20]
 800f788:	e007      	b.n	800f79a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f78a:	4b07      	ldr	r3, [pc, #28]	; (800f7a8 <prvInsertTimerInActiveList+0x80>)
 800f78c:	681a      	ldr	r2, [r3, #0]
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	3304      	adds	r3, #4
 800f792:	4619      	mov	r1, r3
 800f794:	4610      	mov	r0, r2
 800f796:	f7fe f8c6 	bl	800d926 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f79a:	697b      	ldr	r3, [r7, #20]
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3718      	adds	r7, #24
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	20003ec0 	.word	0x20003ec0
 800f7a8:	20003ebc 	.word	0x20003ebc

0800f7ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b08e      	sub	sp, #56	; 0x38
 800f7b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f7b2:	e0cc      	b.n	800f94e <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	da19      	bge.n	800f7ee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f7ba:	1d3b      	adds	r3, r7, #4
 800f7bc:	3304      	adds	r3, #4
 800f7be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d10b      	bne.n	800f7de <prvProcessReceivedCommands+0x32>
 800f7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ca:	b672      	cpsid	i
 800f7cc:	f383 8811 	msr	BASEPRI, r3
 800f7d0:	f3bf 8f6f 	isb	sy
 800f7d4:	f3bf 8f4f 	dsb	sy
 800f7d8:	b662      	cpsie	i
 800f7da:	61fb      	str	r3, [r7, #28]
 800f7dc:	e7fe      	b.n	800f7dc <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7e4:	6850      	ldr	r0, [r2, #4]
 800f7e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7e8:	6892      	ldr	r2, [r2, #8]
 800f7ea:	4611      	mov	r1, r2
 800f7ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	f2c0 80ab 	blt.w	800f94c <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7fc:	695b      	ldr	r3, [r3, #20]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d004      	beq.n	800f80c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f804:	3304      	adds	r3, #4
 800f806:	4618      	mov	r0, r3
 800f808:	f7fe f8c6 	bl	800d998 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f80c:	463b      	mov	r3, r7
 800f80e:	4618      	mov	r0, r3
 800f810:	f7ff ff6a 	bl	800f6e8 <prvSampleTimeNow>
 800f814:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2b09      	cmp	r3, #9
 800f81a:	f200 8098 	bhi.w	800f94e <prvProcessReceivedCommands+0x1a2>
 800f81e:	a201      	add	r2, pc, #4	; (adr r2, 800f824 <prvProcessReceivedCommands+0x78>)
 800f820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f824:	0800f84d 	.word	0x0800f84d
 800f828:	0800f84d 	.word	0x0800f84d
 800f82c:	0800f84d 	.word	0x0800f84d
 800f830:	0800f8c3 	.word	0x0800f8c3
 800f834:	0800f8d7 	.word	0x0800f8d7
 800f838:	0800f923 	.word	0x0800f923
 800f83c:	0800f84d 	.word	0x0800f84d
 800f840:	0800f84d 	.word	0x0800f84d
 800f844:	0800f8c3 	.word	0x0800f8c3
 800f848:	0800f8d7 	.word	0x0800f8d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f84e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f852:	f043 0301 	orr.w	r3, r3, #1
 800f856:	b2da      	uxtb	r2, r3
 800f858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f85e:	68ba      	ldr	r2, [r7, #8]
 800f860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f862:	699b      	ldr	r3, [r3, #24]
 800f864:	18d1      	adds	r1, r2, r3
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f86a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f86c:	f7ff ff5c 	bl	800f728 <prvInsertTimerInActiveList>
 800f870:	4603      	mov	r3, r0
 800f872:	2b00      	cmp	r3, #0
 800f874:	d06b      	beq.n	800f94e <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f878:	6a1b      	ldr	r3, [r3, #32]
 800f87a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f87c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f884:	f003 0304 	and.w	r3, r3, #4
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d060      	beq.n	800f94e <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f88c:	68ba      	ldr	r2, [r7, #8]
 800f88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f890:	699b      	ldr	r3, [r3, #24]
 800f892:	441a      	add	r2, r3
 800f894:	2300      	movs	r3, #0
 800f896:	9300      	str	r3, [sp, #0]
 800f898:	2300      	movs	r3, #0
 800f89a:	2100      	movs	r1, #0
 800f89c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f89e:	f7ff fe03 	bl	800f4a8 <xTimerGenericCommand>
 800f8a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f8a4:	6a3b      	ldr	r3, [r7, #32]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d151      	bne.n	800f94e <prvProcessReceivedCommands+0x1a2>
 800f8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ae:	b672      	cpsid	i
 800f8b0:	f383 8811 	msr	BASEPRI, r3
 800f8b4:	f3bf 8f6f 	isb	sy
 800f8b8:	f3bf 8f4f 	dsb	sy
 800f8bc:	b662      	cpsie	i
 800f8be:	61bb      	str	r3, [r7, #24]
 800f8c0:	e7fe      	b.n	800f8c0 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8c8:	f023 0301 	bic.w	r3, r3, #1
 800f8cc:	b2da      	uxtb	r2, r3
 800f8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f8d4:	e03b      	b.n	800f94e <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8dc:	f043 0301 	orr.w	r3, r3, #1
 800f8e0:	b2da      	uxtb	r2, r3
 800f8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f8e8:	68ba      	ldr	r2, [r7, #8]
 800f8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f0:	699b      	ldr	r3, [r3, #24]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d10b      	bne.n	800f90e <prvProcessReceivedCommands+0x162>
 800f8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8fa:	b672      	cpsid	i
 800f8fc:	f383 8811 	msr	BASEPRI, r3
 800f900:	f3bf 8f6f 	isb	sy
 800f904:	f3bf 8f4f 	dsb	sy
 800f908:	b662      	cpsie	i
 800f90a:	617b      	str	r3, [r7, #20]
 800f90c:	e7fe      	b.n	800f90c <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f910:	699a      	ldr	r2, [r3, #24]
 800f912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f914:	18d1      	adds	r1, r2, r3
 800f916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f91a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f91c:	f7ff ff04 	bl	800f728 <prvInsertTimerInActiveList>
					break;
 800f920:	e015      	b.n	800f94e <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f928:	f003 0302 	and.w	r3, r3, #2
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d103      	bne.n	800f938 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f932:	f000 fbb3 	bl	801009c <vPortFree>
 800f936:	e00a      	b.n	800f94e <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f93a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f93e:	f023 0301 	bic.w	r3, r3, #1
 800f942:	b2da      	uxtb	r2, r3
 800f944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f94a:	e000      	b.n	800f94e <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f94c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f94e:	4b07      	ldr	r3, [pc, #28]	; (800f96c <prvProcessReceivedCommands+0x1c0>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	1d39      	adds	r1, r7, #4
 800f954:	2200      	movs	r2, #0
 800f956:	4618      	mov	r0, r3
 800f958:	f7fe faf0 	bl	800df3c <xQueueReceive>
 800f95c:	4603      	mov	r3, r0
 800f95e:	2b00      	cmp	r3, #0
 800f960:	f47f af28 	bne.w	800f7b4 <prvProcessReceivedCommands+0x8>
	}
}
 800f964:	bf00      	nop
 800f966:	3730      	adds	r7, #48	; 0x30
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}
 800f96c:	20003ec4 	.word	0x20003ec4

0800f970 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b088      	sub	sp, #32
 800f974:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f976:	e049      	b.n	800fa0c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f978:	4b2e      	ldr	r3, [pc, #184]	; (800fa34 <prvSwitchTimerLists+0xc4>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	68db      	ldr	r3, [r3, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f982:	4b2c      	ldr	r3, [pc, #176]	; (800fa34 <prvSwitchTimerLists+0xc4>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	68db      	ldr	r3, [r3, #12]
 800f988:	68db      	ldr	r3, [r3, #12]
 800f98a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	3304      	adds	r3, #4
 800f990:	4618      	mov	r0, r3
 800f992:	f7fe f801 	bl	800d998 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	6a1b      	ldr	r3, [r3, #32]
 800f99a:	68f8      	ldr	r0, [r7, #12]
 800f99c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9a4:	f003 0304 	and.w	r3, r3, #4
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d02f      	beq.n	800fa0c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	699b      	ldr	r3, [r3, #24]
 800f9b0:	693a      	ldr	r2, [r7, #16]
 800f9b2:	4413      	add	r3, r2
 800f9b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f9b6:	68ba      	ldr	r2, [r7, #8]
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	d90e      	bls.n	800f9dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	68ba      	ldr	r2, [r7, #8]
 800f9c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	68fa      	ldr	r2, [r7, #12]
 800f9c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f9ca:	4b1a      	ldr	r3, [pc, #104]	; (800fa34 <prvSwitchTimerLists+0xc4>)
 800f9cc:	681a      	ldr	r2, [r3, #0]
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	3304      	adds	r3, #4
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	4610      	mov	r0, r2
 800f9d6:	f7fd ffa6 	bl	800d926 <vListInsert>
 800f9da:	e017      	b.n	800fa0c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f9dc:	2300      	movs	r3, #0
 800f9de:	9300      	str	r3, [sp, #0]
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	693a      	ldr	r2, [r7, #16]
 800f9e4:	2100      	movs	r1, #0
 800f9e6:	68f8      	ldr	r0, [r7, #12]
 800f9e8:	f7ff fd5e 	bl	800f4a8 <xTimerGenericCommand>
 800f9ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d10b      	bne.n	800fa0c <prvSwitchTimerLists+0x9c>
 800f9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f8:	b672      	cpsid	i
 800f9fa:	f383 8811 	msr	BASEPRI, r3
 800f9fe:	f3bf 8f6f 	isb	sy
 800fa02:	f3bf 8f4f 	dsb	sy
 800fa06:	b662      	cpsie	i
 800fa08:	603b      	str	r3, [r7, #0]
 800fa0a:	e7fe      	b.n	800fa0a <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa0c:	4b09      	ldr	r3, [pc, #36]	; (800fa34 <prvSwitchTimerLists+0xc4>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d1b0      	bne.n	800f978 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fa16:	4b07      	ldr	r3, [pc, #28]	; (800fa34 <prvSwitchTimerLists+0xc4>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fa1c:	4b06      	ldr	r3, [pc, #24]	; (800fa38 <prvSwitchTimerLists+0xc8>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a04      	ldr	r2, [pc, #16]	; (800fa34 <prvSwitchTimerLists+0xc4>)
 800fa22:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fa24:	4a04      	ldr	r2, [pc, #16]	; (800fa38 <prvSwitchTimerLists+0xc8>)
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	6013      	str	r3, [r2, #0]
}
 800fa2a:	bf00      	nop
 800fa2c:	3718      	adds	r7, #24
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}
 800fa32:	bf00      	nop
 800fa34:	20003ebc 	.word	0x20003ebc
 800fa38:	20003ec0 	.word	0x20003ec0

0800fa3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b082      	sub	sp, #8
 800fa40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fa42:	f000 f941 	bl	800fcc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fa46:	4b15      	ldr	r3, [pc, #84]	; (800fa9c <prvCheckForValidListAndQueue+0x60>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d120      	bne.n	800fa90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fa4e:	4814      	ldr	r0, [pc, #80]	; (800faa0 <prvCheckForValidListAndQueue+0x64>)
 800fa50:	f7fd ff18 	bl	800d884 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fa54:	4813      	ldr	r0, [pc, #76]	; (800faa4 <prvCheckForValidListAndQueue+0x68>)
 800fa56:	f7fd ff15 	bl	800d884 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fa5a:	4b13      	ldr	r3, [pc, #76]	; (800faa8 <prvCheckForValidListAndQueue+0x6c>)
 800fa5c:	4a10      	ldr	r2, [pc, #64]	; (800faa0 <prvCheckForValidListAndQueue+0x64>)
 800fa5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fa60:	4b12      	ldr	r3, [pc, #72]	; (800faac <prvCheckForValidListAndQueue+0x70>)
 800fa62:	4a10      	ldr	r2, [pc, #64]	; (800faa4 <prvCheckForValidListAndQueue+0x68>)
 800fa64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fa66:	2300      	movs	r3, #0
 800fa68:	9300      	str	r3, [sp, #0]
 800fa6a:	4b11      	ldr	r3, [pc, #68]	; (800fab0 <prvCheckForValidListAndQueue+0x74>)
 800fa6c:	4a11      	ldr	r2, [pc, #68]	; (800fab4 <prvCheckForValidListAndQueue+0x78>)
 800fa6e:	2110      	movs	r1, #16
 800fa70:	200a      	movs	r0, #10
 800fa72:	f7fe f825 	bl	800dac0 <xQueueGenericCreateStatic>
 800fa76:	4602      	mov	r2, r0
 800fa78:	4b08      	ldr	r3, [pc, #32]	; (800fa9c <prvCheckForValidListAndQueue+0x60>)
 800fa7a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fa7c:	4b07      	ldr	r3, [pc, #28]	; (800fa9c <prvCheckForValidListAndQueue+0x60>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d005      	beq.n	800fa90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fa84:	4b05      	ldr	r3, [pc, #20]	; (800fa9c <prvCheckForValidListAndQueue+0x60>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	490b      	ldr	r1, [pc, #44]	; (800fab8 <prvCheckForValidListAndQueue+0x7c>)
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7fe fc48 	bl	800e320 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa90:	f000 f94c 	bl	800fd2c <vPortExitCritical>
}
 800fa94:	bf00      	nop
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
 800fa9a:	bf00      	nop
 800fa9c:	20003ec4 	.word	0x20003ec4
 800faa0:	20003e94 	.word	0x20003e94
 800faa4:	20003ea8 	.word	0x20003ea8
 800faa8:	20003ebc 	.word	0x20003ebc
 800faac:	20003ec0 	.word	0x20003ec0
 800fab0:	20003f70 	.word	0x20003f70
 800fab4:	20003ed0 	.word	0x20003ed0
 800fab8:	080148d4 	.word	0x080148d4

0800fabc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fabc:	b480      	push	{r7}
 800fabe:	b085      	sub	sp, #20
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	3b04      	subs	r3, #4
 800facc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	3b04      	subs	r3, #4
 800fada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	f023 0201 	bic.w	r2, r3, #1
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	3b04      	subs	r3, #4
 800faea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800faec:	4a0c      	ldr	r2, [pc, #48]	; (800fb20 <pxPortInitialiseStack+0x64>)
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	3b14      	subs	r3, #20
 800faf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800faf8:	687a      	ldr	r2, [r7, #4]
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	3b04      	subs	r3, #4
 800fb02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f06f 0202 	mvn.w	r2, #2
 800fb0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	3b20      	subs	r3, #32
 800fb10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fb12:	68fb      	ldr	r3, [r7, #12]
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3714      	adds	r7, #20
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr
 800fb20:	0800fb25 	.word	0x0800fb25

0800fb24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fb24:	b480      	push	{r7}
 800fb26:	b085      	sub	sp, #20
 800fb28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb2e:	4b13      	ldr	r3, [pc, #76]	; (800fb7c <prvTaskExitError+0x58>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb36:	d00b      	beq.n	800fb50 <prvTaskExitError+0x2c>
 800fb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb3c:	b672      	cpsid	i
 800fb3e:	f383 8811 	msr	BASEPRI, r3
 800fb42:	f3bf 8f6f 	isb	sy
 800fb46:	f3bf 8f4f 	dsb	sy
 800fb4a:	b662      	cpsie	i
 800fb4c:	60fb      	str	r3, [r7, #12]
 800fb4e:	e7fe      	b.n	800fb4e <prvTaskExitError+0x2a>
 800fb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb54:	b672      	cpsid	i
 800fb56:	f383 8811 	msr	BASEPRI, r3
 800fb5a:	f3bf 8f6f 	isb	sy
 800fb5e:	f3bf 8f4f 	dsb	sy
 800fb62:	b662      	cpsie	i
 800fb64:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb66:	bf00      	nop
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d0fc      	beq.n	800fb68 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fb6e:	bf00      	nop
 800fb70:	3714      	adds	r7, #20
 800fb72:	46bd      	mov	sp, r7
 800fb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb78:	4770      	bx	lr
 800fb7a:	bf00      	nop
 800fb7c:	20000194 	.word	0x20000194

0800fb80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fb80:	4b07      	ldr	r3, [pc, #28]	; (800fba0 <pxCurrentTCBConst2>)
 800fb82:	6819      	ldr	r1, [r3, #0]
 800fb84:	6808      	ldr	r0, [r1, #0]
 800fb86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb8a:	f380 8809 	msr	PSP, r0
 800fb8e:	f3bf 8f6f 	isb	sy
 800fb92:	f04f 0000 	mov.w	r0, #0
 800fb96:	f380 8811 	msr	BASEPRI, r0
 800fb9a:	4770      	bx	lr
 800fb9c:	f3af 8000 	nop.w

0800fba0 <pxCurrentTCBConst2>:
 800fba0:	20003994 	.word	0x20003994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fba4:	bf00      	nop
 800fba6:	bf00      	nop

0800fba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fba8:	4808      	ldr	r0, [pc, #32]	; (800fbcc <prvPortStartFirstTask+0x24>)
 800fbaa:	6800      	ldr	r0, [r0, #0]
 800fbac:	6800      	ldr	r0, [r0, #0]
 800fbae:	f380 8808 	msr	MSP, r0
 800fbb2:	f04f 0000 	mov.w	r0, #0
 800fbb6:	f380 8814 	msr	CONTROL, r0
 800fbba:	b662      	cpsie	i
 800fbbc:	b661      	cpsie	f
 800fbbe:	f3bf 8f4f 	dsb	sy
 800fbc2:	f3bf 8f6f 	isb	sy
 800fbc6:	df00      	svc	0
 800fbc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fbca:	bf00      	nop
 800fbcc:	e000ed08 	.word	0xe000ed08

0800fbd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fbd6:	4b36      	ldr	r3, [pc, #216]	; (800fcb0 <xPortStartScheduler+0xe0>)
 800fbd8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	b2db      	uxtb	r3, r3
 800fbe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	22ff      	movs	r2, #255	; 0xff
 800fbe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	b2db      	uxtb	r3, r3
 800fbee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fbf0:	78fb      	ldrb	r3, [r7, #3]
 800fbf2:	b2db      	uxtb	r3, r3
 800fbf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fbf8:	b2da      	uxtb	r2, r3
 800fbfa:	4b2e      	ldr	r3, [pc, #184]	; (800fcb4 <xPortStartScheduler+0xe4>)
 800fbfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fbfe:	4b2e      	ldr	r3, [pc, #184]	; (800fcb8 <xPortStartScheduler+0xe8>)
 800fc00:	2207      	movs	r2, #7
 800fc02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc04:	e009      	b.n	800fc1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800fc06:	4b2c      	ldr	r3, [pc, #176]	; (800fcb8 <xPortStartScheduler+0xe8>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	3b01      	subs	r3, #1
 800fc0c:	4a2a      	ldr	r2, [pc, #168]	; (800fcb8 <xPortStartScheduler+0xe8>)
 800fc0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fc10:	78fb      	ldrb	r3, [r7, #3]
 800fc12:	b2db      	uxtb	r3, r3
 800fc14:	005b      	lsls	r3, r3, #1
 800fc16:	b2db      	uxtb	r3, r3
 800fc18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc1a:	78fb      	ldrb	r3, [r7, #3]
 800fc1c:	b2db      	uxtb	r3, r3
 800fc1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc22:	2b80      	cmp	r3, #128	; 0x80
 800fc24:	d0ef      	beq.n	800fc06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fc26:	4b24      	ldr	r3, [pc, #144]	; (800fcb8 <xPortStartScheduler+0xe8>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	f1c3 0307 	rsb	r3, r3, #7
 800fc2e:	2b04      	cmp	r3, #4
 800fc30:	d00b      	beq.n	800fc4a <xPortStartScheduler+0x7a>
 800fc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc36:	b672      	cpsid	i
 800fc38:	f383 8811 	msr	BASEPRI, r3
 800fc3c:	f3bf 8f6f 	isb	sy
 800fc40:	f3bf 8f4f 	dsb	sy
 800fc44:	b662      	cpsie	i
 800fc46:	60bb      	str	r3, [r7, #8]
 800fc48:	e7fe      	b.n	800fc48 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc4a:	4b1b      	ldr	r3, [pc, #108]	; (800fcb8 <xPortStartScheduler+0xe8>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	021b      	lsls	r3, r3, #8
 800fc50:	4a19      	ldr	r2, [pc, #100]	; (800fcb8 <xPortStartScheduler+0xe8>)
 800fc52:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fc54:	4b18      	ldr	r3, [pc, #96]	; (800fcb8 <xPortStartScheduler+0xe8>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fc5c:	4a16      	ldr	r2, [pc, #88]	; (800fcb8 <xPortStartScheduler+0xe8>)
 800fc5e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	b2da      	uxtb	r2, r3
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fc68:	4b14      	ldr	r3, [pc, #80]	; (800fcbc <xPortStartScheduler+0xec>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a13      	ldr	r2, [pc, #76]	; (800fcbc <xPortStartScheduler+0xec>)
 800fc6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fc72:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fc74:	4b11      	ldr	r3, [pc, #68]	; (800fcbc <xPortStartScheduler+0xec>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4a10      	ldr	r2, [pc, #64]	; (800fcbc <xPortStartScheduler+0xec>)
 800fc7a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fc7e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fc80:	f000 f8d4 	bl	800fe2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fc84:	4b0e      	ldr	r3, [pc, #56]	; (800fcc0 <xPortStartScheduler+0xf0>)
 800fc86:	2200      	movs	r2, #0
 800fc88:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fc8a:	f000 f8f3 	bl	800fe74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fc8e:	4b0d      	ldr	r3, [pc, #52]	; (800fcc4 <xPortStartScheduler+0xf4>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	4a0c      	ldr	r2, [pc, #48]	; (800fcc4 <xPortStartScheduler+0xf4>)
 800fc94:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fc98:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fc9a:	f7ff ff85 	bl	800fba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fc9e:	f7fe ff55 	bl	800eb4c <vTaskSwitchContext>
	prvTaskExitError();
 800fca2:	f7ff ff3f 	bl	800fb24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fca6:	2300      	movs	r3, #0
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3710      	adds	r7, #16
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	e000e400 	.word	0xe000e400
 800fcb4:	20003fc0 	.word	0x20003fc0
 800fcb8:	20003fc4 	.word	0x20003fc4
 800fcbc:	e000ed20 	.word	0xe000ed20
 800fcc0:	20000194 	.word	0x20000194
 800fcc4:	e000ef34 	.word	0xe000ef34

0800fcc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fcc8:	b480      	push	{r7}
 800fcca:	b083      	sub	sp, #12
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd2:	b672      	cpsid	i
 800fcd4:	f383 8811 	msr	BASEPRI, r3
 800fcd8:	f3bf 8f6f 	isb	sy
 800fcdc:	f3bf 8f4f 	dsb	sy
 800fce0:	b662      	cpsie	i
 800fce2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fce4:	4b0f      	ldr	r3, [pc, #60]	; (800fd24 <vPortEnterCritical+0x5c>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	3301      	adds	r3, #1
 800fcea:	4a0e      	ldr	r2, [pc, #56]	; (800fd24 <vPortEnterCritical+0x5c>)
 800fcec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fcee:	4b0d      	ldr	r3, [pc, #52]	; (800fd24 <vPortEnterCritical+0x5c>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	2b01      	cmp	r3, #1
 800fcf4:	d110      	bne.n	800fd18 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fcf6:	4b0c      	ldr	r3, [pc, #48]	; (800fd28 <vPortEnterCritical+0x60>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d00b      	beq.n	800fd18 <vPortEnterCritical+0x50>
 800fd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd04:	b672      	cpsid	i
 800fd06:	f383 8811 	msr	BASEPRI, r3
 800fd0a:	f3bf 8f6f 	isb	sy
 800fd0e:	f3bf 8f4f 	dsb	sy
 800fd12:	b662      	cpsie	i
 800fd14:	603b      	str	r3, [r7, #0]
 800fd16:	e7fe      	b.n	800fd16 <vPortEnterCritical+0x4e>
	}
}
 800fd18:	bf00      	nop
 800fd1a:	370c      	adds	r7, #12
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr
 800fd24:	20000194 	.word	0x20000194
 800fd28:	e000ed04 	.word	0xe000ed04

0800fd2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b083      	sub	sp, #12
 800fd30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd32:	4b12      	ldr	r3, [pc, #72]	; (800fd7c <vPortExitCritical+0x50>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d10b      	bne.n	800fd52 <vPortExitCritical+0x26>
 800fd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd3e:	b672      	cpsid	i
 800fd40:	f383 8811 	msr	BASEPRI, r3
 800fd44:	f3bf 8f6f 	isb	sy
 800fd48:	f3bf 8f4f 	dsb	sy
 800fd4c:	b662      	cpsie	i
 800fd4e:	607b      	str	r3, [r7, #4]
 800fd50:	e7fe      	b.n	800fd50 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800fd52:	4b0a      	ldr	r3, [pc, #40]	; (800fd7c <vPortExitCritical+0x50>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	3b01      	subs	r3, #1
 800fd58:	4a08      	ldr	r2, [pc, #32]	; (800fd7c <vPortExitCritical+0x50>)
 800fd5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fd5c:	4b07      	ldr	r3, [pc, #28]	; (800fd7c <vPortExitCritical+0x50>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d104      	bne.n	800fd6e <vPortExitCritical+0x42>
 800fd64:	2300      	movs	r3, #0
 800fd66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800fd6e:	bf00      	nop
 800fd70:	370c      	adds	r7, #12
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr
 800fd7a:	bf00      	nop
 800fd7c:	20000194 	.word	0x20000194

0800fd80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fd80:	f3ef 8009 	mrs	r0, PSP
 800fd84:	f3bf 8f6f 	isb	sy
 800fd88:	4b15      	ldr	r3, [pc, #84]	; (800fde0 <pxCurrentTCBConst>)
 800fd8a:	681a      	ldr	r2, [r3, #0]
 800fd8c:	f01e 0f10 	tst.w	lr, #16
 800fd90:	bf08      	it	eq
 800fd92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fd96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd9a:	6010      	str	r0, [r2, #0]
 800fd9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fda0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fda4:	b672      	cpsid	i
 800fda6:	f380 8811 	msr	BASEPRI, r0
 800fdaa:	f3bf 8f4f 	dsb	sy
 800fdae:	f3bf 8f6f 	isb	sy
 800fdb2:	b662      	cpsie	i
 800fdb4:	f7fe feca 	bl	800eb4c <vTaskSwitchContext>
 800fdb8:	f04f 0000 	mov.w	r0, #0
 800fdbc:	f380 8811 	msr	BASEPRI, r0
 800fdc0:	bc09      	pop	{r0, r3}
 800fdc2:	6819      	ldr	r1, [r3, #0]
 800fdc4:	6808      	ldr	r0, [r1, #0]
 800fdc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdca:	f01e 0f10 	tst.w	lr, #16
 800fdce:	bf08      	it	eq
 800fdd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fdd4:	f380 8809 	msr	PSP, r0
 800fdd8:	f3bf 8f6f 	isb	sy
 800fddc:	4770      	bx	lr
 800fdde:	bf00      	nop

0800fde0 <pxCurrentTCBConst>:
 800fde0:	20003994 	.word	0x20003994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fde4:	bf00      	nop
 800fde6:	bf00      	nop

0800fde8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b082      	sub	sp, #8
 800fdec:	af00      	add	r7, sp, #0
	__asm volatile
 800fdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf2:	b672      	cpsid	i
 800fdf4:	f383 8811 	msr	BASEPRI, r3
 800fdf8:	f3bf 8f6f 	isb	sy
 800fdfc:	f3bf 8f4f 	dsb	sy
 800fe00:	b662      	cpsie	i
 800fe02:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fe04:	f7fe fde8 	bl	800e9d8 <xTaskIncrementTick>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d003      	beq.n	800fe16 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe0e:	4b06      	ldr	r3, [pc, #24]	; (800fe28 <SysTick_Handler+0x40>)
 800fe10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe14:	601a      	str	r2, [r3, #0]
 800fe16:	2300      	movs	r3, #0
 800fe18:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe20:	bf00      	nop
 800fe22:	3708      	adds	r7, #8
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	e000ed04 	.word	0xe000ed04

0800fe2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe30:	4b0b      	ldr	r3, [pc, #44]	; (800fe60 <vPortSetupTimerInterrupt+0x34>)
 800fe32:	2200      	movs	r2, #0
 800fe34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe36:	4b0b      	ldr	r3, [pc, #44]	; (800fe64 <vPortSetupTimerInterrupt+0x38>)
 800fe38:	2200      	movs	r2, #0
 800fe3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe3c:	4b0a      	ldr	r3, [pc, #40]	; (800fe68 <vPortSetupTimerInterrupt+0x3c>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	4a0a      	ldr	r2, [pc, #40]	; (800fe6c <vPortSetupTimerInterrupt+0x40>)
 800fe42:	fba2 2303 	umull	r2, r3, r2, r3
 800fe46:	099b      	lsrs	r3, r3, #6
 800fe48:	4a09      	ldr	r2, [pc, #36]	; (800fe70 <vPortSetupTimerInterrupt+0x44>)
 800fe4a:	3b01      	subs	r3, #1
 800fe4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fe4e:	4b04      	ldr	r3, [pc, #16]	; (800fe60 <vPortSetupTimerInterrupt+0x34>)
 800fe50:	2207      	movs	r2, #7
 800fe52:	601a      	str	r2, [r3, #0]
}
 800fe54:	bf00      	nop
 800fe56:	46bd      	mov	sp, r7
 800fe58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5c:	4770      	bx	lr
 800fe5e:	bf00      	nop
 800fe60:	e000e010 	.word	0xe000e010
 800fe64:	e000e018 	.word	0xe000e018
 800fe68:	20000188 	.word	0x20000188
 800fe6c:	10624dd3 	.word	0x10624dd3
 800fe70:	e000e014 	.word	0xe000e014

0800fe74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fe74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fe84 <vPortEnableVFP+0x10>
 800fe78:	6801      	ldr	r1, [r0, #0]
 800fe7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fe7e:	6001      	str	r1, [r0, #0]
 800fe80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fe82:	bf00      	nop
 800fe84:	e000ed88 	.word	0xe000ed88

0800fe88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fe88:	b480      	push	{r7}
 800fe8a:	b085      	sub	sp, #20
 800fe8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fe8e:	f3ef 8305 	mrs	r3, IPSR
 800fe92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2b0f      	cmp	r3, #15
 800fe98:	d915      	bls.n	800fec6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fe9a:	4a18      	ldr	r2, [pc, #96]	; (800fefc <vPortValidateInterruptPriority+0x74>)
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	4413      	add	r3, r2
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fea4:	4b16      	ldr	r3, [pc, #88]	; (800ff00 <vPortValidateInterruptPriority+0x78>)
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	7afa      	ldrb	r2, [r7, #11]
 800feaa:	429a      	cmp	r2, r3
 800feac:	d20b      	bcs.n	800fec6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800feae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb2:	b672      	cpsid	i
 800feb4:	f383 8811 	msr	BASEPRI, r3
 800feb8:	f3bf 8f6f 	isb	sy
 800febc:	f3bf 8f4f 	dsb	sy
 800fec0:	b662      	cpsie	i
 800fec2:	607b      	str	r3, [r7, #4]
 800fec4:	e7fe      	b.n	800fec4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fec6:	4b0f      	ldr	r3, [pc, #60]	; (800ff04 <vPortValidateInterruptPriority+0x7c>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fece:	4b0e      	ldr	r3, [pc, #56]	; (800ff08 <vPortValidateInterruptPriority+0x80>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	429a      	cmp	r2, r3
 800fed4:	d90b      	bls.n	800feee <vPortValidateInterruptPriority+0x66>
 800fed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feda:	b672      	cpsid	i
 800fedc:	f383 8811 	msr	BASEPRI, r3
 800fee0:	f3bf 8f6f 	isb	sy
 800fee4:	f3bf 8f4f 	dsb	sy
 800fee8:	b662      	cpsie	i
 800feea:	603b      	str	r3, [r7, #0]
 800feec:	e7fe      	b.n	800feec <vPortValidateInterruptPriority+0x64>
	}
 800feee:	bf00      	nop
 800fef0:	3714      	adds	r7, #20
 800fef2:	46bd      	mov	sp, r7
 800fef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef8:	4770      	bx	lr
 800fefa:	bf00      	nop
 800fefc:	e000e3f0 	.word	0xe000e3f0
 800ff00:	20003fc0 	.word	0x20003fc0
 800ff04:	e000ed0c 	.word	0xe000ed0c
 800ff08:	20003fc4 	.word	0x20003fc4

0800ff0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b08a      	sub	sp, #40	; 0x28
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ff14:	2300      	movs	r3, #0
 800ff16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ff18:	f7fe fca2 	bl	800e860 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ff1c:	4b5a      	ldr	r3, [pc, #360]	; (8010088 <pvPortMalloc+0x17c>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d101      	bne.n	800ff28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ff24:	f000 f916 	bl	8010154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ff28:	4b58      	ldr	r3, [pc, #352]	; (801008c <pvPortMalloc+0x180>)
 800ff2a:	681a      	ldr	r2, [r3, #0]
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	4013      	ands	r3, r2
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	f040 8090 	bne.w	8010056 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d01e      	beq.n	800ff7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ff3c:	2208      	movs	r2, #8
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	4413      	add	r3, r2
 800ff42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f003 0307 	and.w	r3, r3, #7
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d015      	beq.n	800ff7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f023 0307 	bic.w	r3, r3, #7
 800ff54:	3308      	adds	r3, #8
 800ff56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f003 0307 	and.w	r3, r3, #7
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d00b      	beq.n	800ff7a <pvPortMalloc+0x6e>
 800ff62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff66:	b672      	cpsid	i
 800ff68:	f383 8811 	msr	BASEPRI, r3
 800ff6c:	f3bf 8f6f 	isb	sy
 800ff70:	f3bf 8f4f 	dsb	sy
 800ff74:	b662      	cpsie	i
 800ff76:	617b      	str	r3, [r7, #20]
 800ff78:	e7fe      	b.n	800ff78 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d06a      	beq.n	8010056 <pvPortMalloc+0x14a>
 800ff80:	4b43      	ldr	r3, [pc, #268]	; (8010090 <pvPortMalloc+0x184>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	687a      	ldr	r2, [r7, #4]
 800ff86:	429a      	cmp	r2, r3
 800ff88:	d865      	bhi.n	8010056 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ff8a:	4b42      	ldr	r3, [pc, #264]	; (8010094 <pvPortMalloc+0x188>)
 800ff8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ff8e:	4b41      	ldr	r3, [pc, #260]	; (8010094 <pvPortMalloc+0x188>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff94:	e004      	b.n	800ffa0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ff96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ff9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d903      	bls.n	800ffb2 <pvPortMalloc+0xa6>
 800ffaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d1f1      	bne.n	800ff96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ffb2:	4b35      	ldr	r3, [pc, #212]	; (8010088 <pvPortMalloc+0x17c>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d04c      	beq.n	8010056 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ffbc:	6a3b      	ldr	r3, [r7, #32]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	2208      	movs	r2, #8
 800ffc2:	4413      	add	r3, r2
 800ffc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc8:	681a      	ldr	r2, [r3, #0]
 800ffca:	6a3b      	ldr	r3, [r7, #32]
 800ffcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ffce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd0:	685a      	ldr	r2, [r3, #4]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	1ad2      	subs	r2, r2, r3
 800ffd6:	2308      	movs	r3, #8
 800ffd8:	005b      	lsls	r3, r3, #1
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d920      	bls.n	8010020 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ffde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	4413      	add	r3, r2
 800ffe4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ffe6:	69bb      	ldr	r3, [r7, #24]
 800ffe8:	f003 0307 	and.w	r3, r3, #7
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d00b      	beq.n	8010008 <pvPortMalloc+0xfc>
 800fff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff4:	b672      	cpsid	i
 800fff6:	f383 8811 	msr	BASEPRI, r3
 800fffa:	f3bf 8f6f 	isb	sy
 800fffe:	f3bf 8f4f 	dsb	sy
 8010002:	b662      	cpsie	i
 8010004:	613b      	str	r3, [r7, #16]
 8010006:	e7fe      	b.n	8010006 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000a:	685a      	ldr	r2, [r3, #4]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	1ad2      	subs	r2, r2, r3
 8010010:	69bb      	ldr	r3, [r7, #24]
 8010012:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010016:	687a      	ldr	r2, [r7, #4]
 8010018:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801001a:	69b8      	ldr	r0, [r7, #24]
 801001c:	f000 f8fc 	bl	8010218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010020:	4b1b      	ldr	r3, [pc, #108]	; (8010090 <pvPortMalloc+0x184>)
 8010022:	681a      	ldr	r2, [r3, #0]
 8010024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	1ad3      	subs	r3, r2, r3
 801002a:	4a19      	ldr	r2, [pc, #100]	; (8010090 <pvPortMalloc+0x184>)
 801002c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801002e:	4b18      	ldr	r3, [pc, #96]	; (8010090 <pvPortMalloc+0x184>)
 8010030:	681a      	ldr	r2, [r3, #0]
 8010032:	4b19      	ldr	r3, [pc, #100]	; (8010098 <pvPortMalloc+0x18c>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	429a      	cmp	r2, r3
 8010038:	d203      	bcs.n	8010042 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801003a:	4b15      	ldr	r3, [pc, #84]	; (8010090 <pvPortMalloc+0x184>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4a16      	ldr	r2, [pc, #88]	; (8010098 <pvPortMalloc+0x18c>)
 8010040:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010044:	685a      	ldr	r2, [r3, #4]
 8010046:	4b11      	ldr	r3, [pc, #68]	; (801008c <pvPortMalloc+0x180>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	431a      	orrs	r2, r3
 801004c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010052:	2200      	movs	r2, #0
 8010054:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010056:	f7fe fc11 	bl	800e87c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801005a:	69fb      	ldr	r3, [r7, #28]
 801005c:	f003 0307 	and.w	r3, r3, #7
 8010060:	2b00      	cmp	r3, #0
 8010062:	d00b      	beq.n	801007c <pvPortMalloc+0x170>
 8010064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010068:	b672      	cpsid	i
 801006a:	f383 8811 	msr	BASEPRI, r3
 801006e:	f3bf 8f6f 	isb	sy
 8010072:	f3bf 8f4f 	dsb	sy
 8010076:	b662      	cpsie	i
 8010078:	60fb      	str	r3, [r7, #12]
 801007a:	e7fe      	b.n	801007a <pvPortMalloc+0x16e>
	return pvReturn;
 801007c:	69fb      	ldr	r3, [r7, #28]
}
 801007e:	4618      	mov	r0, r3
 8010080:	3728      	adds	r7, #40	; 0x28
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
 8010086:	bf00      	nop
 8010088:	20010320 	.word	0x20010320
 801008c:	2001032c 	.word	0x2001032c
 8010090:	20010324 	.word	0x20010324
 8010094:	20010318 	.word	0x20010318
 8010098:	20010328 	.word	0x20010328

0801009c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b086      	sub	sp, #24
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d04a      	beq.n	8010144 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80100ae:	2308      	movs	r3, #8
 80100b0:	425b      	negs	r3, r3
 80100b2:	697a      	ldr	r2, [r7, #20]
 80100b4:	4413      	add	r3, r2
 80100b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	685a      	ldr	r2, [r3, #4]
 80100c0:	4b22      	ldr	r3, [pc, #136]	; (801014c <vPortFree+0xb0>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	4013      	ands	r3, r2
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d10b      	bne.n	80100e2 <vPortFree+0x46>
 80100ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ce:	b672      	cpsid	i
 80100d0:	f383 8811 	msr	BASEPRI, r3
 80100d4:	f3bf 8f6f 	isb	sy
 80100d8:	f3bf 8f4f 	dsb	sy
 80100dc:	b662      	cpsie	i
 80100de:	60fb      	str	r3, [r7, #12]
 80100e0:	e7fe      	b.n	80100e0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80100e2:	693b      	ldr	r3, [r7, #16]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d00b      	beq.n	8010102 <vPortFree+0x66>
 80100ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ee:	b672      	cpsid	i
 80100f0:	f383 8811 	msr	BASEPRI, r3
 80100f4:	f3bf 8f6f 	isb	sy
 80100f8:	f3bf 8f4f 	dsb	sy
 80100fc:	b662      	cpsie	i
 80100fe:	60bb      	str	r3, [r7, #8]
 8010100:	e7fe      	b.n	8010100 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	685a      	ldr	r2, [r3, #4]
 8010106:	4b11      	ldr	r3, [pc, #68]	; (801014c <vPortFree+0xb0>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	4013      	ands	r3, r2
 801010c:	2b00      	cmp	r3, #0
 801010e:	d019      	beq.n	8010144 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d115      	bne.n	8010144 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	685a      	ldr	r2, [r3, #4]
 801011c:	4b0b      	ldr	r3, [pc, #44]	; (801014c <vPortFree+0xb0>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	43db      	mvns	r3, r3
 8010122:	401a      	ands	r2, r3
 8010124:	693b      	ldr	r3, [r7, #16]
 8010126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010128:	f7fe fb9a 	bl	800e860 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801012c:	693b      	ldr	r3, [r7, #16]
 801012e:	685a      	ldr	r2, [r3, #4]
 8010130:	4b07      	ldr	r3, [pc, #28]	; (8010150 <vPortFree+0xb4>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	4413      	add	r3, r2
 8010136:	4a06      	ldr	r2, [pc, #24]	; (8010150 <vPortFree+0xb4>)
 8010138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801013a:	6938      	ldr	r0, [r7, #16]
 801013c:	f000 f86c 	bl	8010218 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010140:	f7fe fb9c 	bl	800e87c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010144:	bf00      	nop
 8010146:	3718      	adds	r7, #24
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}
 801014c:	2001032c 	.word	0x2001032c
 8010150:	20010324 	.word	0x20010324

08010154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010154:	b480      	push	{r7}
 8010156:	b085      	sub	sp, #20
 8010158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801015a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801015e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010160:	4b27      	ldr	r3, [pc, #156]	; (8010200 <prvHeapInit+0xac>)
 8010162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	f003 0307 	and.w	r3, r3, #7
 801016a:	2b00      	cmp	r3, #0
 801016c:	d00c      	beq.n	8010188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	3307      	adds	r3, #7
 8010172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f023 0307 	bic.w	r3, r3, #7
 801017a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801017c:	68ba      	ldr	r2, [r7, #8]
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	1ad3      	subs	r3, r2, r3
 8010182:	4a1f      	ldr	r2, [pc, #124]	; (8010200 <prvHeapInit+0xac>)
 8010184:	4413      	add	r3, r2
 8010186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801018c:	4a1d      	ldr	r2, [pc, #116]	; (8010204 <prvHeapInit+0xb0>)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010192:	4b1c      	ldr	r3, [pc, #112]	; (8010204 <prvHeapInit+0xb0>)
 8010194:	2200      	movs	r2, #0
 8010196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	68ba      	ldr	r2, [r7, #8]
 801019c:	4413      	add	r3, r2
 801019e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80101a0:	2208      	movs	r2, #8
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	1a9b      	subs	r3, r3, r2
 80101a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f023 0307 	bic.w	r3, r3, #7
 80101ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	4a15      	ldr	r2, [pc, #84]	; (8010208 <prvHeapInit+0xb4>)
 80101b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80101b6:	4b14      	ldr	r3, [pc, #80]	; (8010208 <prvHeapInit+0xb4>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	2200      	movs	r2, #0
 80101bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80101be:	4b12      	ldr	r3, [pc, #72]	; (8010208 <prvHeapInit+0xb4>)
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	2200      	movs	r2, #0
 80101c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	68fa      	ldr	r2, [r7, #12]
 80101ce:	1ad2      	subs	r2, r2, r3
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80101d4:	4b0c      	ldr	r3, [pc, #48]	; (8010208 <prvHeapInit+0xb4>)
 80101d6:	681a      	ldr	r2, [r3, #0]
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	685b      	ldr	r3, [r3, #4]
 80101e0:	4a0a      	ldr	r2, [pc, #40]	; (801020c <prvHeapInit+0xb8>)
 80101e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	685b      	ldr	r3, [r3, #4]
 80101e8:	4a09      	ldr	r2, [pc, #36]	; (8010210 <prvHeapInit+0xbc>)
 80101ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80101ec:	4b09      	ldr	r3, [pc, #36]	; (8010214 <prvHeapInit+0xc0>)
 80101ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80101f2:	601a      	str	r2, [r3, #0]
}
 80101f4:	bf00      	nop
 80101f6:	3714      	adds	r7, #20
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr
 8010200:	20003fc8 	.word	0x20003fc8
 8010204:	20010318 	.word	0x20010318
 8010208:	20010320 	.word	0x20010320
 801020c:	20010328 	.word	0x20010328
 8010210:	20010324 	.word	0x20010324
 8010214:	2001032c 	.word	0x2001032c

08010218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010218:	b480      	push	{r7}
 801021a:	b085      	sub	sp, #20
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010220:	4b28      	ldr	r3, [pc, #160]	; (80102c4 <prvInsertBlockIntoFreeList+0xac>)
 8010222:	60fb      	str	r3, [r7, #12]
 8010224:	e002      	b.n	801022c <prvInsertBlockIntoFreeList+0x14>
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	60fb      	str	r3, [r7, #12]
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	687a      	ldr	r2, [r7, #4]
 8010232:	429a      	cmp	r2, r3
 8010234:	d8f7      	bhi.n	8010226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	68ba      	ldr	r2, [r7, #8]
 8010240:	4413      	add	r3, r2
 8010242:	687a      	ldr	r2, [r7, #4]
 8010244:	429a      	cmp	r2, r3
 8010246:	d108      	bne.n	801025a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	685a      	ldr	r2, [r3, #4]
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	685b      	ldr	r3, [r3, #4]
 8010250:	441a      	add	r2, r3
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	68ba      	ldr	r2, [r7, #8]
 8010264:	441a      	add	r2, r3
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	429a      	cmp	r2, r3
 801026c:	d118      	bne.n	80102a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	681a      	ldr	r2, [r3, #0]
 8010272:	4b15      	ldr	r3, [pc, #84]	; (80102c8 <prvInsertBlockIntoFreeList+0xb0>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	429a      	cmp	r2, r3
 8010278:	d00d      	beq.n	8010296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	685a      	ldr	r2, [r3, #4]
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	685b      	ldr	r3, [r3, #4]
 8010284:	441a      	add	r2, r3
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	681a      	ldr	r2, [r3, #0]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	601a      	str	r2, [r3, #0]
 8010294:	e008      	b.n	80102a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010296:	4b0c      	ldr	r3, [pc, #48]	; (80102c8 <prvInsertBlockIntoFreeList+0xb0>)
 8010298:	681a      	ldr	r2, [r3, #0]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	601a      	str	r2, [r3, #0]
 801029e:	e003      	b.n	80102a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	681a      	ldr	r2, [r3, #0]
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80102a8:	68fa      	ldr	r2, [r7, #12]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	429a      	cmp	r2, r3
 80102ae:	d002      	beq.n	80102b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	687a      	ldr	r2, [r7, #4]
 80102b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80102b6:	bf00      	nop
 80102b8:	3714      	adds	r7, #20
 80102ba:	46bd      	mov	sp, r7
 80102bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c0:	4770      	bx	lr
 80102c2:	bf00      	nop
 80102c4:	20010318 	.word	0x20010318
 80102c8:	20010320 	.word	0x20010320

080102cc <__errno>:
 80102cc:	4b01      	ldr	r3, [pc, #4]	; (80102d4 <__errno+0x8>)
 80102ce:	6818      	ldr	r0, [r3, #0]
 80102d0:	4770      	bx	lr
 80102d2:	bf00      	nop
 80102d4:	20000198 	.word	0x20000198

080102d8 <__libc_init_array>:
 80102d8:	b570      	push	{r4, r5, r6, lr}
 80102da:	4e0d      	ldr	r6, [pc, #52]	; (8010310 <__libc_init_array+0x38>)
 80102dc:	4c0d      	ldr	r4, [pc, #52]	; (8010314 <__libc_init_array+0x3c>)
 80102de:	1ba4      	subs	r4, r4, r6
 80102e0:	10a4      	asrs	r4, r4, #2
 80102e2:	2500      	movs	r5, #0
 80102e4:	42a5      	cmp	r5, r4
 80102e6:	d109      	bne.n	80102fc <__libc_init_array+0x24>
 80102e8:	4e0b      	ldr	r6, [pc, #44]	; (8010318 <__libc_init_array+0x40>)
 80102ea:	4c0c      	ldr	r4, [pc, #48]	; (801031c <__libc_init_array+0x44>)
 80102ec:	f004 f83e 	bl	801436c <_init>
 80102f0:	1ba4      	subs	r4, r4, r6
 80102f2:	10a4      	asrs	r4, r4, #2
 80102f4:	2500      	movs	r5, #0
 80102f6:	42a5      	cmp	r5, r4
 80102f8:	d105      	bne.n	8010306 <__libc_init_array+0x2e>
 80102fa:	bd70      	pop	{r4, r5, r6, pc}
 80102fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010300:	4798      	blx	r3
 8010302:	3501      	adds	r5, #1
 8010304:	e7ee      	b.n	80102e4 <__libc_init_array+0xc>
 8010306:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801030a:	4798      	blx	r3
 801030c:	3501      	adds	r5, #1
 801030e:	e7f2      	b.n	80102f6 <__libc_init_array+0x1e>
 8010310:	08015378 	.word	0x08015378
 8010314:	08015378 	.word	0x08015378
 8010318:	08015378 	.word	0x08015378
 801031c:	0801537c 	.word	0x0801537c

08010320 <memcpy>:
 8010320:	b510      	push	{r4, lr}
 8010322:	1e43      	subs	r3, r0, #1
 8010324:	440a      	add	r2, r1
 8010326:	4291      	cmp	r1, r2
 8010328:	d100      	bne.n	801032c <memcpy+0xc>
 801032a:	bd10      	pop	{r4, pc}
 801032c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010330:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010334:	e7f7      	b.n	8010326 <memcpy+0x6>

08010336 <memset>:
 8010336:	4402      	add	r2, r0
 8010338:	4603      	mov	r3, r0
 801033a:	4293      	cmp	r3, r2
 801033c:	d100      	bne.n	8010340 <memset+0xa>
 801033e:	4770      	bx	lr
 8010340:	f803 1b01 	strb.w	r1, [r3], #1
 8010344:	e7f9      	b.n	801033a <memset+0x4>

08010346 <__cvt>:
 8010346:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010348:	ed2d 8b02 	vpush	{d8}
 801034c:	eeb0 8b40 	vmov.f64	d8, d0
 8010350:	b085      	sub	sp, #20
 8010352:	4617      	mov	r7, r2
 8010354:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010356:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010358:	ee18 2a90 	vmov	r2, s17
 801035c:	f025 0520 	bic.w	r5, r5, #32
 8010360:	2a00      	cmp	r2, #0
 8010362:	bfb6      	itet	lt
 8010364:	222d      	movlt	r2, #45	; 0x2d
 8010366:	2200      	movge	r2, #0
 8010368:	eeb1 8b40 	vneglt.f64	d8, d0
 801036c:	2d46      	cmp	r5, #70	; 0x46
 801036e:	460c      	mov	r4, r1
 8010370:	701a      	strb	r2, [r3, #0]
 8010372:	d004      	beq.n	801037e <__cvt+0x38>
 8010374:	2d45      	cmp	r5, #69	; 0x45
 8010376:	d100      	bne.n	801037a <__cvt+0x34>
 8010378:	3401      	adds	r4, #1
 801037a:	2102      	movs	r1, #2
 801037c:	e000      	b.n	8010380 <__cvt+0x3a>
 801037e:	2103      	movs	r1, #3
 8010380:	ab03      	add	r3, sp, #12
 8010382:	9301      	str	r3, [sp, #4]
 8010384:	ab02      	add	r3, sp, #8
 8010386:	9300      	str	r3, [sp, #0]
 8010388:	4622      	mov	r2, r4
 801038a:	4633      	mov	r3, r6
 801038c:	eeb0 0b48 	vmov.f64	d0, d8
 8010390:	f001 fe42 	bl	8012018 <_dtoa_r>
 8010394:	2d47      	cmp	r5, #71	; 0x47
 8010396:	d101      	bne.n	801039c <__cvt+0x56>
 8010398:	07fb      	lsls	r3, r7, #31
 801039a:	d51e      	bpl.n	80103da <__cvt+0x94>
 801039c:	2d46      	cmp	r5, #70	; 0x46
 801039e:	eb00 0304 	add.w	r3, r0, r4
 80103a2:	d10c      	bne.n	80103be <__cvt+0x78>
 80103a4:	7802      	ldrb	r2, [r0, #0]
 80103a6:	2a30      	cmp	r2, #48	; 0x30
 80103a8:	d107      	bne.n	80103ba <__cvt+0x74>
 80103aa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80103ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b2:	bf1c      	itt	ne
 80103b4:	f1c4 0401 	rsbne	r4, r4, #1
 80103b8:	6034      	strne	r4, [r6, #0]
 80103ba:	6832      	ldr	r2, [r6, #0]
 80103bc:	4413      	add	r3, r2
 80103be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80103c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103c6:	d007      	beq.n	80103d8 <__cvt+0x92>
 80103c8:	2130      	movs	r1, #48	; 0x30
 80103ca:	9a03      	ldr	r2, [sp, #12]
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d204      	bcs.n	80103da <__cvt+0x94>
 80103d0:	1c54      	adds	r4, r2, #1
 80103d2:	9403      	str	r4, [sp, #12]
 80103d4:	7011      	strb	r1, [r2, #0]
 80103d6:	e7f8      	b.n	80103ca <__cvt+0x84>
 80103d8:	9303      	str	r3, [sp, #12]
 80103da:	9b03      	ldr	r3, [sp, #12]
 80103dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80103de:	1a1b      	subs	r3, r3, r0
 80103e0:	6013      	str	r3, [r2, #0]
 80103e2:	b005      	add	sp, #20
 80103e4:	ecbd 8b02 	vpop	{d8}
 80103e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080103ea <__exponent>:
 80103ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103ec:	2900      	cmp	r1, #0
 80103ee:	4604      	mov	r4, r0
 80103f0:	bfba      	itte	lt
 80103f2:	4249      	neglt	r1, r1
 80103f4:	232d      	movlt	r3, #45	; 0x2d
 80103f6:	232b      	movge	r3, #43	; 0x2b
 80103f8:	2909      	cmp	r1, #9
 80103fa:	f804 2b02 	strb.w	r2, [r4], #2
 80103fe:	7043      	strb	r3, [r0, #1]
 8010400:	dd20      	ble.n	8010444 <__exponent+0x5a>
 8010402:	f10d 0307 	add.w	r3, sp, #7
 8010406:	461f      	mov	r7, r3
 8010408:	260a      	movs	r6, #10
 801040a:	fb91 f5f6 	sdiv	r5, r1, r6
 801040e:	fb06 1115 	mls	r1, r6, r5, r1
 8010412:	3130      	adds	r1, #48	; 0x30
 8010414:	2d09      	cmp	r5, #9
 8010416:	f803 1c01 	strb.w	r1, [r3, #-1]
 801041a:	f103 32ff 	add.w	r2, r3, #4294967295
 801041e:	4629      	mov	r1, r5
 8010420:	dc09      	bgt.n	8010436 <__exponent+0x4c>
 8010422:	3130      	adds	r1, #48	; 0x30
 8010424:	3b02      	subs	r3, #2
 8010426:	f802 1c01 	strb.w	r1, [r2, #-1]
 801042a:	42bb      	cmp	r3, r7
 801042c:	4622      	mov	r2, r4
 801042e:	d304      	bcc.n	801043a <__exponent+0x50>
 8010430:	1a10      	subs	r0, r2, r0
 8010432:	b003      	add	sp, #12
 8010434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010436:	4613      	mov	r3, r2
 8010438:	e7e7      	b.n	801040a <__exponent+0x20>
 801043a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801043e:	f804 2b01 	strb.w	r2, [r4], #1
 8010442:	e7f2      	b.n	801042a <__exponent+0x40>
 8010444:	2330      	movs	r3, #48	; 0x30
 8010446:	4419      	add	r1, r3
 8010448:	7083      	strb	r3, [r0, #2]
 801044a:	1d02      	adds	r2, r0, #4
 801044c:	70c1      	strb	r1, [r0, #3]
 801044e:	e7ef      	b.n	8010430 <__exponent+0x46>

08010450 <_printf_float>:
 8010450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010454:	b08d      	sub	sp, #52	; 0x34
 8010456:	460c      	mov	r4, r1
 8010458:	4616      	mov	r6, r2
 801045a:	461f      	mov	r7, r3
 801045c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010460:	4605      	mov	r5, r0
 8010462:	f002 ffcb 	bl	80133fc <_localeconv_r>
 8010466:	f8d0 b000 	ldr.w	fp, [r0]
 801046a:	4658      	mov	r0, fp
 801046c:	f7ef fee8 	bl	8000240 <strlen>
 8010470:	2300      	movs	r3, #0
 8010472:	930a      	str	r3, [sp, #40]	; 0x28
 8010474:	f8d8 3000 	ldr.w	r3, [r8]
 8010478:	9005      	str	r0, [sp, #20]
 801047a:	3307      	adds	r3, #7
 801047c:	f023 0307 	bic.w	r3, r3, #7
 8010480:	f103 0108 	add.w	r1, r3, #8
 8010484:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010488:	6822      	ldr	r2, [r4, #0]
 801048a:	f8c8 1000 	str.w	r1, [r8]
 801048e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010492:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010496:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8010720 <_printf_float+0x2d0>
 801049a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801049e:	eeb0 6bc0 	vabs.f64	d6, d0
 80104a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80104a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104aa:	dd24      	ble.n	80104f6 <_printf_float+0xa6>
 80104ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80104b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b4:	d502      	bpl.n	80104bc <_printf_float+0x6c>
 80104b6:	232d      	movs	r3, #45	; 0x2d
 80104b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104bc:	499a      	ldr	r1, [pc, #616]	; (8010728 <_printf_float+0x2d8>)
 80104be:	4b9b      	ldr	r3, [pc, #620]	; (801072c <_printf_float+0x2dc>)
 80104c0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80104c4:	bf8c      	ite	hi
 80104c6:	4688      	movhi	r8, r1
 80104c8:	4698      	movls	r8, r3
 80104ca:	f022 0204 	bic.w	r2, r2, #4
 80104ce:	2303      	movs	r3, #3
 80104d0:	6123      	str	r3, [r4, #16]
 80104d2:	6022      	str	r2, [r4, #0]
 80104d4:	f04f 0a00 	mov.w	sl, #0
 80104d8:	9700      	str	r7, [sp, #0]
 80104da:	4633      	mov	r3, r6
 80104dc:	aa0b      	add	r2, sp, #44	; 0x2c
 80104de:	4621      	mov	r1, r4
 80104e0:	4628      	mov	r0, r5
 80104e2:	f000 f9e1 	bl	80108a8 <_printf_common>
 80104e6:	3001      	adds	r0, #1
 80104e8:	f040 8089 	bne.w	80105fe <_printf_float+0x1ae>
 80104ec:	f04f 30ff 	mov.w	r0, #4294967295
 80104f0:	b00d      	add	sp, #52	; 0x34
 80104f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104f6:	eeb4 0b40 	vcmp.f64	d0, d0
 80104fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104fe:	d702      	bvc.n	8010506 <_printf_float+0xb6>
 8010500:	498b      	ldr	r1, [pc, #556]	; (8010730 <_printf_float+0x2e0>)
 8010502:	4b8c      	ldr	r3, [pc, #560]	; (8010734 <_printf_float+0x2e4>)
 8010504:	e7dc      	b.n	80104c0 <_printf_float+0x70>
 8010506:	6861      	ldr	r1, [r4, #4]
 8010508:	1c4b      	adds	r3, r1, #1
 801050a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801050e:	ab0a      	add	r3, sp, #40	; 0x28
 8010510:	a809      	add	r0, sp, #36	; 0x24
 8010512:	d13b      	bne.n	801058c <_printf_float+0x13c>
 8010514:	2106      	movs	r1, #6
 8010516:	6061      	str	r1, [r4, #4]
 8010518:	f04f 0c00 	mov.w	ip, #0
 801051c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8010520:	e9cd 0900 	strd	r0, r9, [sp]
 8010524:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010528:	6022      	str	r2, [r4, #0]
 801052a:	6861      	ldr	r1, [r4, #4]
 801052c:	4628      	mov	r0, r5
 801052e:	f7ff ff0a 	bl	8010346 <__cvt>
 8010532:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8010536:	2b47      	cmp	r3, #71	; 0x47
 8010538:	4680      	mov	r8, r0
 801053a:	d109      	bne.n	8010550 <_printf_float+0x100>
 801053c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801053e:	1cd8      	adds	r0, r3, #3
 8010540:	db02      	blt.n	8010548 <_printf_float+0xf8>
 8010542:	6862      	ldr	r2, [r4, #4]
 8010544:	4293      	cmp	r3, r2
 8010546:	dd47      	ble.n	80105d8 <_printf_float+0x188>
 8010548:	f1a9 0902 	sub.w	r9, r9, #2
 801054c:	fa5f f989 	uxtb.w	r9, r9
 8010550:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010554:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010556:	d824      	bhi.n	80105a2 <_printf_float+0x152>
 8010558:	3901      	subs	r1, #1
 801055a:	464a      	mov	r2, r9
 801055c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010560:	9109      	str	r1, [sp, #36]	; 0x24
 8010562:	f7ff ff42 	bl	80103ea <__exponent>
 8010566:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010568:	1813      	adds	r3, r2, r0
 801056a:	2a01      	cmp	r2, #1
 801056c:	4682      	mov	sl, r0
 801056e:	6123      	str	r3, [r4, #16]
 8010570:	dc02      	bgt.n	8010578 <_printf_float+0x128>
 8010572:	6822      	ldr	r2, [r4, #0]
 8010574:	07d1      	lsls	r1, r2, #31
 8010576:	d501      	bpl.n	801057c <_printf_float+0x12c>
 8010578:	3301      	adds	r3, #1
 801057a:	6123      	str	r3, [r4, #16]
 801057c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010580:	2b00      	cmp	r3, #0
 8010582:	d0a9      	beq.n	80104d8 <_printf_float+0x88>
 8010584:	232d      	movs	r3, #45	; 0x2d
 8010586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801058a:	e7a5      	b.n	80104d8 <_printf_float+0x88>
 801058c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8010590:	f000 8178 	beq.w	8010884 <_printf_float+0x434>
 8010594:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010598:	d1be      	bne.n	8010518 <_printf_float+0xc8>
 801059a:	2900      	cmp	r1, #0
 801059c:	d1bc      	bne.n	8010518 <_printf_float+0xc8>
 801059e:	2101      	movs	r1, #1
 80105a0:	e7b9      	b.n	8010516 <_printf_float+0xc6>
 80105a2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80105a6:	d119      	bne.n	80105dc <_printf_float+0x18c>
 80105a8:	2900      	cmp	r1, #0
 80105aa:	6863      	ldr	r3, [r4, #4]
 80105ac:	dd0c      	ble.n	80105c8 <_printf_float+0x178>
 80105ae:	6121      	str	r1, [r4, #16]
 80105b0:	b913      	cbnz	r3, 80105b8 <_printf_float+0x168>
 80105b2:	6822      	ldr	r2, [r4, #0]
 80105b4:	07d2      	lsls	r2, r2, #31
 80105b6:	d502      	bpl.n	80105be <_printf_float+0x16e>
 80105b8:	3301      	adds	r3, #1
 80105ba:	440b      	add	r3, r1
 80105bc:	6123      	str	r3, [r4, #16]
 80105be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105c0:	65a3      	str	r3, [r4, #88]	; 0x58
 80105c2:	f04f 0a00 	mov.w	sl, #0
 80105c6:	e7d9      	b.n	801057c <_printf_float+0x12c>
 80105c8:	b913      	cbnz	r3, 80105d0 <_printf_float+0x180>
 80105ca:	6822      	ldr	r2, [r4, #0]
 80105cc:	07d0      	lsls	r0, r2, #31
 80105ce:	d501      	bpl.n	80105d4 <_printf_float+0x184>
 80105d0:	3302      	adds	r3, #2
 80105d2:	e7f3      	b.n	80105bc <_printf_float+0x16c>
 80105d4:	2301      	movs	r3, #1
 80105d6:	e7f1      	b.n	80105bc <_printf_float+0x16c>
 80105d8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80105dc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80105e0:	4293      	cmp	r3, r2
 80105e2:	db05      	blt.n	80105f0 <_printf_float+0x1a0>
 80105e4:	6822      	ldr	r2, [r4, #0]
 80105e6:	6123      	str	r3, [r4, #16]
 80105e8:	07d1      	lsls	r1, r2, #31
 80105ea:	d5e8      	bpl.n	80105be <_printf_float+0x16e>
 80105ec:	3301      	adds	r3, #1
 80105ee:	e7e5      	b.n	80105bc <_printf_float+0x16c>
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	bfd4      	ite	le
 80105f4:	f1c3 0302 	rsble	r3, r3, #2
 80105f8:	2301      	movgt	r3, #1
 80105fa:	4413      	add	r3, r2
 80105fc:	e7de      	b.n	80105bc <_printf_float+0x16c>
 80105fe:	6823      	ldr	r3, [r4, #0]
 8010600:	055a      	lsls	r2, r3, #21
 8010602:	d407      	bmi.n	8010614 <_printf_float+0x1c4>
 8010604:	6923      	ldr	r3, [r4, #16]
 8010606:	4642      	mov	r2, r8
 8010608:	4631      	mov	r1, r6
 801060a:	4628      	mov	r0, r5
 801060c:	47b8      	blx	r7
 801060e:	3001      	adds	r0, #1
 8010610:	d12a      	bne.n	8010668 <_printf_float+0x218>
 8010612:	e76b      	b.n	80104ec <_printf_float+0x9c>
 8010614:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010618:	f240 80de 	bls.w	80107d8 <_printf_float+0x388>
 801061c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010620:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010628:	d133      	bne.n	8010692 <_printf_float+0x242>
 801062a:	2301      	movs	r3, #1
 801062c:	4a42      	ldr	r2, [pc, #264]	; (8010738 <_printf_float+0x2e8>)
 801062e:	4631      	mov	r1, r6
 8010630:	4628      	mov	r0, r5
 8010632:	47b8      	blx	r7
 8010634:	3001      	adds	r0, #1
 8010636:	f43f af59 	beq.w	80104ec <_printf_float+0x9c>
 801063a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801063e:	429a      	cmp	r2, r3
 8010640:	db02      	blt.n	8010648 <_printf_float+0x1f8>
 8010642:	6823      	ldr	r3, [r4, #0]
 8010644:	07d8      	lsls	r0, r3, #31
 8010646:	d50f      	bpl.n	8010668 <_printf_float+0x218>
 8010648:	9b05      	ldr	r3, [sp, #20]
 801064a:	465a      	mov	r2, fp
 801064c:	4631      	mov	r1, r6
 801064e:	4628      	mov	r0, r5
 8010650:	47b8      	blx	r7
 8010652:	3001      	adds	r0, #1
 8010654:	f43f af4a 	beq.w	80104ec <_printf_float+0x9c>
 8010658:	f04f 0800 	mov.w	r8, #0
 801065c:	f104 091a 	add.w	r9, r4, #26
 8010660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010662:	3b01      	subs	r3, #1
 8010664:	4543      	cmp	r3, r8
 8010666:	dc09      	bgt.n	801067c <_printf_float+0x22c>
 8010668:	6823      	ldr	r3, [r4, #0]
 801066a:	079b      	lsls	r3, r3, #30
 801066c:	f100 8105 	bmi.w	801087a <_printf_float+0x42a>
 8010670:	68e0      	ldr	r0, [r4, #12]
 8010672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010674:	4298      	cmp	r0, r3
 8010676:	bfb8      	it	lt
 8010678:	4618      	movlt	r0, r3
 801067a:	e739      	b.n	80104f0 <_printf_float+0xa0>
 801067c:	2301      	movs	r3, #1
 801067e:	464a      	mov	r2, r9
 8010680:	4631      	mov	r1, r6
 8010682:	4628      	mov	r0, r5
 8010684:	47b8      	blx	r7
 8010686:	3001      	adds	r0, #1
 8010688:	f43f af30 	beq.w	80104ec <_printf_float+0x9c>
 801068c:	f108 0801 	add.w	r8, r8, #1
 8010690:	e7e6      	b.n	8010660 <_printf_float+0x210>
 8010692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010694:	2b00      	cmp	r3, #0
 8010696:	dc2b      	bgt.n	80106f0 <_printf_float+0x2a0>
 8010698:	2301      	movs	r3, #1
 801069a:	4a27      	ldr	r2, [pc, #156]	; (8010738 <_printf_float+0x2e8>)
 801069c:	4631      	mov	r1, r6
 801069e:	4628      	mov	r0, r5
 80106a0:	47b8      	blx	r7
 80106a2:	3001      	adds	r0, #1
 80106a4:	f43f af22 	beq.w	80104ec <_printf_float+0x9c>
 80106a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106aa:	b923      	cbnz	r3, 80106b6 <_printf_float+0x266>
 80106ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106ae:	b913      	cbnz	r3, 80106b6 <_printf_float+0x266>
 80106b0:	6823      	ldr	r3, [r4, #0]
 80106b2:	07d9      	lsls	r1, r3, #31
 80106b4:	d5d8      	bpl.n	8010668 <_printf_float+0x218>
 80106b6:	9b05      	ldr	r3, [sp, #20]
 80106b8:	465a      	mov	r2, fp
 80106ba:	4631      	mov	r1, r6
 80106bc:	4628      	mov	r0, r5
 80106be:	47b8      	blx	r7
 80106c0:	3001      	adds	r0, #1
 80106c2:	f43f af13 	beq.w	80104ec <_printf_float+0x9c>
 80106c6:	f04f 0900 	mov.w	r9, #0
 80106ca:	f104 0a1a 	add.w	sl, r4, #26
 80106ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106d0:	425b      	negs	r3, r3
 80106d2:	454b      	cmp	r3, r9
 80106d4:	dc01      	bgt.n	80106da <_printf_float+0x28a>
 80106d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106d8:	e795      	b.n	8010606 <_printf_float+0x1b6>
 80106da:	2301      	movs	r3, #1
 80106dc:	4652      	mov	r2, sl
 80106de:	4631      	mov	r1, r6
 80106e0:	4628      	mov	r0, r5
 80106e2:	47b8      	blx	r7
 80106e4:	3001      	adds	r0, #1
 80106e6:	f43f af01 	beq.w	80104ec <_printf_float+0x9c>
 80106ea:	f109 0901 	add.w	r9, r9, #1
 80106ee:	e7ee      	b.n	80106ce <_printf_float+0x27e>
 80106f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80106f4:	429a      	cmp	r2, r3
 80106f6:	bfa8      	it	ge
 80106f8:	461a      	movge	r2, r3
 80106fa:	2a00      	cmp	r2, #0
 80106fc:	4691      	mov	r9, r2
 80106fe:	dd07      	ble.n	8010710 <_printf_float+0x2c0>
 8010700:	4613      	mov	r3, r2
 8010702:	4631      	mov	r1, r6
 8010704:	4642      	mov	r2, r8
 8010706:	4628      	mov	r0, r5
 8010708:	47b8      	blx	r7
 801070a:	3001      	adds	r0, #1
 801070c:	f43f aeee 	beq.w	80104ec <_printf_float+0x9c>
 8010710:	f104 031a 	add.w	r3, r4, #26
 8010714:	f04f 0a00 	mov.w	sl, #0
 8010718:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801071c:	9307      	str	r3, [sp, #28]
 801071e:	e017      	b.n	8010750 <_printf_float+0x300>
 8010720:	ffffffff 	.word	0xffffffff
 8010724:	7fefffff 	.word	0x7fefffff
 8010728:	08015058 	.word	0x08015058
 801072c:	08015054 	.word	0x08015054
 8010730:	08015060 	.word	0x08015060
 8010734:	0801505c 	.word	0x0801505c
 8010738:	08015064 	.word	0x08015064
 801073c:	2301      	movs	r3, #1
 801073e:	9a07      	ldr	r2, [sp, #28]
 8010740:	4631      	mov	r1, r6
 8010742:	4628      	mov	r0, r5
 8010744:	47b8      	blx	r7
 8010746:	3001      	adds	r0, #1
 8010748:	f43f aed0 	beq.w	80104ec <_printf_float+0x9c>
 801074c:	f10a 0a01 	add.w	sl, sl, #1
 8010750:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010752:	9306      	str	r3, [sp, #24]
 8010754:	eba3 0309 	sub.w	r3, r3, r9
 8010758:	4553      	cmp	r3, sl
 801075a:	dcef      	bgt.n	801073c <_printf_float+0x2ec>
 801075c:	9b06      	ldr	r3, [sp, #24]
 801075e:	4498      	add	r8, r3
 8010760:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010764:	429a      	cmp	r2, r3
 8010766:	db15      	blt.n	8010794 <_printf_float+0x344>
 8010768:	6823      	ldr	r3, [r4, #0]
 801076a:	07da      	lsls	r2, r3, #31
 801076c:	d412      	bmi.n	8010794 <_printf_float+0x344>
 801076e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010770:	9a06      	ldr	r2, [sp, #24]
 8010772:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010774:	1a9a      	subs	r2, r3, r2
 8010776:	eba3 0a01 	sub.w	sl, r3, r1
 801077a:	4592      	cmp	sl, r2
 801077c:	bfa8      	it	ge
 801077e:	4692      	movge	sl, r2
 8010780:	f1ba 0f00 	cmp.w	sl, #0
 8010784:	dc0e      	bgt.n	80107a4 <_printf_float+0x354>
 8010786:	f04f 0800 	mov.w	r8, #0
 801078a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801078e:	f104 091a 	add.w	r9, r4, #26
 8010792:	e019      	b.n	80107c8 <_printf_float+0x378>
 8010794:	9b05      	ldr	r3, [sp, #20]
 8010796:	465a      	mov	r2, fp
 8010798:	4631      	mov	r1, r6
 801079a:	4628      	mov	r0, r5
 801079c:	47b8      	blx	r7
 801079e:	3001      	adds	r0, #1
 80107a0:	d1e5      	bne.n	801076e <_printf_float+0x31e>
 80107a2:	e6a3      	b.n	80104ec <_printf_float+0x9c>
 80107a4:	4653      	mov	r3, sl
 80107a6:	4642      	mov	r2, r8
 80107a8:	4631      	mov	r1, r6
 80107aa:	4628      	mov	r0, r5
 80107ac:	47b8      	blx	r7
 80107ae:	3001      	adds	r0, #1
 80107b0:	d1e9      	bne.n	8010786 <_printf_float+0x336>
 80107b2:	e69b      	b.n	80104ec <_printf_float+0x9c>
 80107b4:	2301      	movs	r3, #1
 80107b6:	464a      	mov	r2, r9
 80107b8:	4631      	mov	r1, r6
 80107ba:	4628      	mov	r0, r5
 80107bc:	47b8      	blx	r7
 80107be:	3001      	adds	r0, #1
 80107c0:	f43f ae94 	beq.w	80104ec <_printf_float+0x9c>
 80107c4:	f108 0801 	add.w	r8, r8, #1
 80107c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80107cc:	1a9b      	subs	r3, r3, r2
 80107ce:	eba3 030a 	sub.w	r3, r3, sl
 80107d2:	4543      	cmp	r3, r8
 80107d4:	dcee      	bgt.n	80107b4 <_printf_float+0x364>
 80107d6:	e747      	b.n	8010668 <_printf_float+0x218>
 80107d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107da:	2a01      	cmp	r2, #1
 80107dc:	dc01      	bgt.n	80107e2 <_printf_float+0x392>
 80107de:	07db      	lsls	r3, r3, #31
 80107e0:	d539      	bpl.n	8010856 <_printf_float+0x406>
 80107e2:	2301      	movs	r3, #1
 80107e4:	4642      	mov	r2, r8
 80107e6:	4631      	mov	r1, r6
 80107e8:	4628      	mov	r0, r5
 80107ea:	47b8      	blx	r7
 80107ec:	3001      	adds	r0, #1
 80107ee:	f43f ae7d 	beq.w	80104ec <_printf_float+0x9c>
 80107f2:	9b05      	ldr	r3, [sp, #20]
 80107f4:	465a      	mov	r2, fp
 80107f6:	4631      	mov	r1, r6
 80107f8:	4628      	mov	r0, r5
 80107fa:	47b8      	blx	r7
 80107fc:	3001      	adds	r0, #1
 80107fe:	f108 0801 	add.w	r8, r8, #1
 8010802:	f43f ae73 	beq.w	80104ec <_printf_float+0x9c>
 8010806:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801080a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801080c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010814:	f103 33ff 	add.w	r3, r3, #4294967295
 8010818:	d018      	beq.n	801084c <_printf_float+0x3fc>
 801081a:	4642      	mov	r2, r8
 801081c:	4631      	mov	r1, r6
 801081e:	4628      	mov	r0, r5
 8010820:	47b8      	blx	r7
 8010822:	3001      	adds	r0, #1
 8010824:	d10e      	bne.n	8010844 <_printf_float+0x3f4>
 8010826:	e661      	b.n	80104ec <_printf_float+0x9c>
 8010828:	2301      	movs	r3, #1
 801082a:	464a      	mov	r2, r9
 801082c:	4631      	mov	r1, r6
 801082e:	4628      	mov	r0, r5
 8010830:	47b8      	blx	r7
 8010832:	3001      	adds	r0, #1
 8010834:	f43f ae5a 	beq.w	80104ec <_printf_float+0x9c>
 8010838:	f108 0801 	add.w	r8, r8, #1
 801083c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801083e:	3b01      	subs	r3, #1
 8010840:	4543      	cmp	r3, r8
 8010842:	dcf1      	bgt.n	8010828 <_printf_float+0x3d8>
 8010844:	4653      	mov	r3, sl
 8010846:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801084a:	e6dd      	b.n	8010608 <_printf_float+0x1b8>
 801084c:	f04f 0800 	mov.w	r8, #0
 8010850:	f104 091a 	add.w	r9, r4, #26
 8010854:	e7f2      	b.n	801083c <_printf_float+0x3ec>
 8010856:	2301      	movs	r3, #1
 8010858:	e7df      	b.n	801081a <_printf_float+0x3ca>
 801085a:	2301      	movs	r3, #1
 801085c:	464a      	mov	r2, r9
 801085e:	4631      	mov	r1, r6
 8010860:	4628      	mov	r0, r5
 8010862:	47b8      	blx	r7
 8010864:	3001      	adds	r0, #1
 8010866:	f43f ae41 	beq.w	80104ec <_printf_float+0x9c>
 801086a:	f108 0801 	add.w	r8, r8, #1
 801086e:	68e3      	ldr	r3, [r4, #12]
 8010870:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010872:	1a9b      	subs	r3, r3, r2
 8010874:	4543      	cmp	r3, r8
 8010876:	dcf0      	bgt.n	801085a <_printf_float+0x40a>
 8010878:	e6fa      	b.n	8010670 <_printf_float+0x220>
 801087a:	f04f 0800 	mov.w	r8, #0
 801087e:	f104 0919 	add.w	r9, r4, #25
 8010882:	e7f4      	b.n	801086e <_printf_float+0x41e>
 8010884:	2900      	cmp	r1, #0
 8010886:	f43f ae8a 	beq.w	801059e <_printf_float+0x14e>
 801088a:	f04f 0c00 	mov.w	ip, #0
 801088e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8010892:	e9cd 0900 	strd	r0, r9, [sp]
 8010896:	6022      	str	r2, [r4, #0]
 8010898:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801089c:	4628      	mov	r0, r5
 801089e:	f7ff fd52 	bl	8010346 <__cvt>
 80108a2:	4680      	mov	r8, r0
 80108a4:	e64a      	b.n	801053c <_printf_float+0xec>
 80108a6:	bf00      	nop

080108a8 <_printf_common>:
 80108a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108ac:	4691      	mov	r9, r2
 80108ae:	461f      	mov	r7, r3
 80108b0:	688a      	ldr	r2, [r1, #8]
 80108b2:	690b      	ldr	r3, [r1, #16]
 80108b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80108b8:	4293      	cmp	r3, r2
 80108ba:	bfb8      	it	lt
 80108bc:	4613      	movlt	r3, r2
 80108be:	f8c9 3000 	str.w	r3, [r9]
 80108c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80108c6:	4606      	mov	r6, r0
 80108c8:	460c      	mov	r4, r1
 80108ca:	b112      	cbz	r2, 80108d2 <_printf_common+0x2a>
 80108cc:	3301      	adds	r3, #1
 80108ce:	f8c9 3000 	str.w	r3, [r9]
 80108d2:	6823      	ldr	r3, [r4, #0]
 80108d4:	0699      	lsls	r1, r3, #26
 80108d6:	bf42      	ittt	mi
 80108d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80108dc:	3302      	addmi	r3, #2
 80108de:	f8c9 3000 	strmi.w	r3, [r9]
 80108e2:	6825      	ldr	r5, [r4, #0]
 80108e4:	f015 0506 	ands.w	r5, r5, #6
 80108e8:	d107      	bne.n	80108fa <_printf_common+0x52>
 80108ea:	f104 0a19 	add.w	sl, r4, #25
 80108ee:	68e3      	ldr	r3, [r4, #12]
 80108f0:	f8d9 2000 	ldr.w	r2, [r9]
 80108f4:	1a9b      	subs	r3, r3, r2
 80108f6:	42ab      	cmp	r3, r5
 80108f8:	dc28      	bgt.n	801094c <_printf_common+0xa4>
 80108fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80108fe:	6822      	ldr	r2, [r4, #0]
 8010900:	3300      	adds	r3, #0
 8010902:	bf18      	it	ne
 8010904:	2301      	movne	r3, #1
 8010906:	0692      	lsls	r2, r2, #26
 8010908:	d42d      	bmi.n	8010966 <_printf_common+0xbe>
 801090a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801090e:	4639      	mov	r1, r7
 8010910:	4630      	mov	r0, r6
 8010912:	47c0      	blx	r8
 8010914:	3001      	adds	r0, #1
 8010916:	d020      	beq.n	801095a <_printf_common+0xb2>
 8010918:	6823      	ldr	r3, [r4, #0]
 801091a:	68e5      	ldr	r5, [r4, #12]
 801091c:	f8d9 2000 	ldr.w	r2, [r9]
 8010920:	f003 0306 	and.w	r3, r3, #6
 8010924:	2b04      	cmp	r3, #4
 8010926:	bf08      	it	eq
 8010928:	1aad      	subeq	r5, r5, r2
 801092a:	68a3      	ldr	r3, [r4, #8]
 801092c:	6922      	ldr	r2, [r4, #16]
 801092e:	bf0c      	ite	eq
 8010930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010934:	2500      	movne	r5, #0
 8010936:	4293      	cmp	r3, r2
 8010938:	bfc4      	itt	gt
 801093a:	1a9b      	subgt	r3, r3, r2
 801093c:	18ed      	addgt	r5, r5, r3
 801093e:	f04f 0900 	mov.w	r9, #0
 8010942:	341a      	adds	r4, #26
 8010944:	454d      	cmp	r5, r9
 8010946:	d11a      	bne.n	801097e <_printf_common+0xd6>
 8010948:	2000      	movs	r0, #0
 801094a:	e008      	b.n	801095e <_printf_common+0xb6>
 801094c:	2301      	movs	r3, #1
 801094e:	4652      	mov	r2, sl
 8010950:	4639      	mov	r1, r7
 8010952:	4630      	mov	r0, r6
 8010954:	47c0      	blx	r8
 8010956:	3001      	adds	r0, #1
 8010958:	d103      	bne.n	8010962 <_printf_common+0xba>
 801095a:	f04f 30ff 	mov.w	r0, #4294967295
 801095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010962:	3501      	adds	r5, #1
 8010964:	e7c3      	b.n	80108ee <_printf_common+0x46>
 8010966:	18e1      	adds	r1, r4, r3
 8010968:	1c5a      	adds	r2, r3, #1
 801096a:	2030      	movs	r0, #48	; 0x30
 801096c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010970:	4422      	add	r2, r4
 8010972:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010976:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801097a:	3302      	adds	r3, #2
 801097c:	e7c5      	b.n	801090a <_printf_common+0x62>
 801097e:	2301      	movs	r3, #1
 8010980:	4622      	mov	r2, r4
 8010982:	4639      	mov	r1, r7
 8010984:	4630      	mov	r0, r6
 8010986:	47c0      	blx	r8
 8010988:	3001      	adds	r0, #1
 801098a:	d0e6      	beq.n	801095a <_printf_common+0xb2>
 801098c:	f109 0901 	add.w	r9, r9, #1
 8010990:	e7d8      	b.n	8010944 <_printf_common+0x9c>
	...

08010994 <_printf_i>:
 8010994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010998:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801099c:	460c      	mov	r4, r1
 801099e:	7e09      	ldrb	r1, [r1, #24]
 80109a0:	b085      	sub	sp, #20
 80109a2:	296e      	cmp	r1, #110	; 0x6e
 80109a4:	4617      	mov	r7, r2
 80109a6:	4606      	mov	r6, r0
 80109a8:	4698      	mov	r8, r3
 80109aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109ac:	f000 80b3 	beq.w	8010b16 <_printf_i+0x182>
 80109b0:	d822      	bhi.n	80109f8 <_printf_i+0x64>
 80109b2:	2963      	cmp	r1, #99	; 0x63
 80109b4:	d036      	beq.n	8010a24 <_printf_i+0x90>
 80109b6:	d80a      	bhi.n	80109ce <_printf_i+0x3a>
 80109b8:	2900      	cmp	r1, #0
 80109ba:	f000 80b9 	beq.w	8010b30 <_printf_i+0x19c>
 80109be:	2958      	cmp	r1, #88	; 0x58
 80109c0:	f000 8083 	beq.w	8010aca <_printf_i+0x136>
 80109c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80109c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80109cc:	e032      	b.n	8010a34 <_printf_i+0xa0>
 80109ce:	2964      	cmp	r1, #100	; 0x64
 80109d0:	d001      	beq.n	80109d6 <_printf_i+0x42>
 80109d2:	2969      	cmp	r1, #105	; 0x69
 80109d4:	d1f6      	bne.n	80109c4 <_printf_i+0x30>
 80109d6:	6820      	ldr	r0, [r4, #0]
 80109d8:	6813      	ldr	r3, [r2, #0]
 80109da:	0605      	lsls	r5, r0, #24
 80109dc:	f103 0104 	add.w	r1, r3, #4
 80109e0:	d52a      	bpl.n	8010a38 <_printf_i+0xa4>
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	6011      	str	r1, [r2, #0]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	da03      	bge.n	80109f2 <_printf_i+0x5e>
 80109ea:	222d      	movs	r2, #45	; 0x2d
 80109ec:	425b      	negs	r3, r3
 80109ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80109f2:	486f      	ldr	r0, [pc, #444]	; (8010bb0 <_printf_i+0x21c>)
 80109f4:	220a      	movs	r2, #10
 80109f6:	e039      	b.n	8010a6c <_printf_i+0xd8>
 80109f8:	2973      	cmp	r1, #115	; 0x73
 80109fa:	f000 809d 	beq.w	8010b38 <_printf_i+0x1a4>
 80109fe:	d808      	bhi.n	8010a12 <_printf_i+0x7e>
 8010a00:	296f      	cmp	r1, #111	; 0x6f
 8010a02:	d020      	beq.n	8010a46 <_printf_i+0xb2>
 8010a04:	2970      	cmp	r1, #112	; 0x70
 8010a06:	d1dd      	bne.n	80109c4 <_printf_i+0x30>
 8010a08:	6823      	ldr	r3, [r4, #0]
 8010a0a:	f043 0320 	orr.w	r3, r3, #32
 8010a0e:	6023      	str	r3, [r4, #0]
 8010a10:	e003      	b.n	8010a1a <_printf_i+0x86>
 8010a12:	2975      	cmp	r1, #117	; 0x75
 8010a14:	d017      	beq.n	8010a46 <_printf_i+0xb2>
 8010a16:	2978      	cmp	r1, #120	; 0x78
 8010a18:	d1d4      	bne.n	80109c4 <_printf_i+0x30>
 8010a1a:	2378      	movs	r3, #120	; 0x78
 8010a1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010a20:	4864      	ldr	r0, [pc, #400]	; (8010bb4 <_printf_i+0x220>)
 8010a22:	e055      	b.n	8010ad0 <_printf_i+0x13c>
 8010a24:	6813      	ldr	r3, [r2, #0]
 8010a26:	1d19      	adds	r1, r3, #4
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	6011      	str	r1, [r2, #0]
 8010a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a34:	2301      	movs	r3, #1
 8010a36:	e08c      	b.n	8010b52 <_printf_i+0x1be>
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	6011      	str	r1, [r2, #0]
 8010a3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010a40:	bf18      	it	ne
 8010a42:	b21b      	sxthne	r3, r3
 8010a44:	e7cf      	b.n	80109e6 <_printf_i+0x52>
 8010a46:	6813      	ldr	r3, [r2, #0]
 8010a48:	6825      	ldr	r5, [r4, #0]
 8010a4a:	1d18      	adds	r0, r3, #4
 8010a4c:	6010      	str	r0, [r2, #0]
 8010a4e:	0628      	lsls	r0, r5, #24
 8010a50:	d501      	bpl.n	8010a56 <_printf_i+0xc2>
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	e002      	b.n	8010a5c <_printf_i+0xc8>
 8010a56:	0668      	lsls	r0, r5, #25
 8010a58:	d5fb      	bpl.n	8010a52 <_printf_i+0xbe>
 8010a5a:	881b      	ldrh	r3, [r3, #0]
 8010a5c:	4854      	ldr	r0, [pc, #336]	; (8010bb0 <_printf_i+0x21c>)
 8010a5e:	296f      	cmp	r1, #111	; 0x6f
 8010a60:	bf14      	ite	ne
 8010a62:	220a      	movne	r2, #10
 8010a64:	2208      	moveq	r2, #8
 8010a66:	2100      	movs	r1, #0
 8010a68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010a6c:	6865      	ldr	r5, [r4, #4]
 8010a6e:	60a5      	str	r5, [r4, #8]
 8010a70:	2d00      	cmp	r5, #0
 8010a72:	f2c0 8095 	blt.w	8010ba0 <_printf_i+0x20c>
 8010a76:	6821      	ldr	r1, [r4, #0]
 8010a78:	f021 0104 	bic.w	r1, r1, #4
 8010a7c:	6021      	str	r1, [r4, #0]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d13d      	bne.n	8010afe <_printf_i+0x16a>
 8010a82:	2d00      	cmp	r5, #0
 8010a84:	f040 808e 	bne.w	8010ba4 <_printf_i+0x210>
 8010a88:	4665      	mov	r5, ip
 8010a8a:	2a08      	cmp	r2, #8
 8010a8c:	d10b      	bne.n	8010aa6 <_printf_i+0x112>
 8010a8e:	6823      	ldr	r3, [r4, #0]
 8010a90:	07db      	lsls	r3, r3, #31
 8010a92:	d508      	bpl.n	8010aa6 <_printf_i+0x112>
 8010a94:	6923      	ldr	r3, [r4, #16]
 8010a96:	6862      	ldr	r2, [r4, #4]
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	bfde      	ittt	le
 8010a9c:	2330      	movle	r3, #48	; 0x30
 8010a9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010aa2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010aa6:	ebac 0305 	sub.w	r3, ip, r5
 8010aaa:	6123      	str	r3, [r4, #16]
 8010aac:	f8cd 8000 	str.w	r8, [sp]
 8010ab0:	463b      	mov	r3, r7
 8010ab2:	aa03      	add	r2, sp, #12
 8010ab4:	4621      	mov	r1, r4
 8010ab6:	4630      	mov	r0, r6
 8010ab8:	f7ff fef6 	bl	80108a8 <_printf_common>
 8010abc:	3001      	adds	r0, #1
 8010abe:	d14d      	bne.n	8010b5c <_printf_i+0x1c8>
 8010ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ac4:	b005      	add	sp, #20
 8010ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010aca:	4839      	ldr	r0, [pc, #228]	; (8010bb0 <_printf_i+0x21c>)
 8010acc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010ad0:	6813      	ldr	r3, [r2, #0]
 8010ad2:	6821      	ldr	r1, [r4, #0]
 8010ad4:	1d1d      	adds	r5, r3, #4
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	6015      	str	r5, [r2, #0]
 8010ada:	060a      	lsls	r2, r1, #24
 8010adc:	d50b      	bpl.n	8010af6 <_printf_i+0x162>
 8010ade:	07ca      	lsls	r2, r1, #31
 8010ae0:	bf44      	itt	mi
 8010ae2:	f041 0120 	orrmi.w	r1, r1, #32
 8010ae6:	6021      	strmi	r1, [r4, #0]
 8010ae8:	b91b      	cbnz	r3, 8010af2 <_printf_i+0x15e>
 8010aea:	6822      	ldr	r2, [r4, #0]
 8010aec:	f022 0220 	bic.w	r2, r2, #32
 8010af0:	6022      	str	r2, [r4, #0]
 8010af2:	2210      	movs	r2, #16
 8010af4:	e7b7      	b.n	8010a66 <_printf_i+0xd2>
 8010af6:	064d      	lsls	r5, r1, #25
 8010af8:	bf48      	it	mi
 8010afa:	b29b      	uxthmi	r3, r3
 8010afc:	e7ef      	b.n	8010ade <_printf_i+0x14a>
 8010afe:	4665      	mov	r5, ip
 8010b00:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b04:	fb02 3311 	mls	r3, r2, r1, r3
 8010b08:	5cc3      	ldrb	r3, [r0, r3]
 8010b0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010b0e:	460b      	mov	r3, r1
 8010b10:	2900      	cmp	r1, #0
 8010b12:	d1f5      	bne.n	8010b00 <_printf_i+0x16c>
 8010b14:	e7b9      	b.n	8010a8a <_printf_i+0xf6>
 8010b16:	6813      	ldr	r3, [r2, #0]
 8010b18:	6825      	ldr	r5, [r4, #0]
 8010b1a:	6961      	ldr	r1, [r4, #20]
 8010b1c:	1d18      	adds	r0, r3, #4
 8010b1e:	6010      	str	r0, [r2, #0]
 8010b20:	0628      	lsls	r0, r5, #24
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	d501      	bpl.n	8010b2a <_printf_i+0x196>
 8010b26:	6019      	str	r1, [r3, #0]
 8010b28:	e002      	b.n	8010b30 <_printf_i+0x19c>
 8010b2a:	066a      	lsls	r2, r5, #25
 8010b2c:	d5fb      	bpl.n	8010b26 <_printf_i+0x192>
 8010b2e:	8019      	strh	r1, [r3, #0]
 8010b30:	2300      	movs	r3, #0
 8010b32:	6123      	str	r3, [r4, #16]
 8010b34:	4665      	mov	r5, ip
 8010b36:	e7b9      	b.n	8010aac <_printf_i+0x118>
 8010b38:	6813      	ldr	r3, [r2, #0]
 8010b3a:	1d19      	adds	r1, r3, #4
 8010b3c:	6011      	str	r1, [r2, #0]
 8010b3e:	681d      	ldr	r5, [r3, #0]
 8010b40:	6862      	ldr	r2, [r4, #4]
 8010b42:	2100      	movs	r1, #0
 8010b44:	4628      	mov	r0, r5
 8010b46:	f7ef fb83 	bl	8000250 <memchr>
 8010b4a:	b108      	cbz	r0, 8010b50 <_printf_i+0x1bc>
 8010b4c:	1b40      	subs	r0, r0, r5
 8010b4e:	6060      	str	r0, [r4, #4]
 8010b50:	6863      	ldr	r3, [r4, #4]
 8010b52:	6123      	str	r3, [r4, #16]
 8010b54:	2300      	movs	r3, #0
 8010b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b5a:	e7a7      	b.n	8010aac <_printf_i+0x118>
 8010b5c:	6923      	ldr	r3, [r4, #16]
 8010b5e:	462a      	mov	r2, r5
 8010b60:	4639      	mov	r1, r7
 8010b62:	4630      	mov	r0, r6
 8010b64:	47c0      	blx	r8
 8010b66:	3001      	adds	r0, #1
 8010b68:	d0aa      	beq.n	8010ac0 <_printf_i+0x12c>
 8010b6a:	6823      	ldr	r3, [r4, #0]
 8010b6c:	079b      	lsls	r3, r3, #30
 8010b6e:	d413      	bmi.n	8010b98 <_printf_i+0x204>
 8010b70:	68e0      	ldr	r0, [r4, #12]
 8010b72:	9b03      	ldr	r3, [sp, #12]
 8010b74:	4298      	cmp	r0, r3
 8010b76:	bfb8      	it	lt
 8010b78:	4618      	movlt	r0, r3
 8010b7a:	e7a3      	b.n	8010ac4 <_printf_i+0x130>
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	464a      	mov	r2, r9
 8010b80:	4639      	mov	r1, r7
 8010b82:	4630      	mov	r0, r6
 8010b84:	47c0      	blx	r8
 8010b86:	3001      	adds	r0, #1
 8010b88:	d09a      	beq.n	8010ac0 <_printf_i+0x12c>
 8010b8a:	3501      	adds	r5, #1
 8010b8c:	68e3      	ldr	r3, [r4, #12]
 8010b8e:	9a03      	ldr	r2, [sp, #12]
 8010b90:	1a9b      	subs	r3, r3, r2
 8010b92:	42ab      	cmp	r3, r5
 8010b94:	dcf2      	bgt.n	8010b7c <_printf_i+0x1e8>
 8010b96:	e7eb      	b.n	8010b70 <_printf_i+0x1dc>
 8010b98:	2500      	movs	r5, #0
 8010b9a:	f104 0919 	add.w	r9, r4, #25
 8010b9e:	e7f5      	b.n	8010b8c <_printf_i+0x1f8>
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d1ac      	bne.n	8010afe <_printf_i+0x16a>
 8010ba4:	7803      	ldrb	r3, [r0, #0]
 8010ba6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010baa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010bae:	e76c      	b.n	8010a8a <_printf_i+0xf6>
 8010bb0:	08015066 	.word	0x08015066
 8010bb4:	08015077 	.word	0x08015077

08010bb8 <_scanf_float>:
 8010bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bbc:	469a      	mov	sl, r3
 8010bbe:	688b      	ldr	r3, [r1, #8]
 8010bc0:	4616      	mov	r6, r2
 8010bc2:	1e5a      	subs	r2, r3, #1
 8010bc4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010bc8:	b087      	sub	sp, #28
 8010bca:	bf83      	ittte	hi
 8010bcc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8010bd0:	189b      	addhi	r3, r3, r2
 8010bd2:	9301      	strhi	r3, [sp, #4]
 8010bd4:	2300      	movls	r3, #0
 8010bd6:	bf86      	itte	hi
 8010bd8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010bdc:	608b      	strhi	r3, [r1, #8]
 8010bde:	9301      	strls	r3, [sp, #4]
 8010be0:	680b      	ldr	r3, [r1, #0]
 8010be2:	4688      	mov	r8, r1
 8010be4:	f04f 0b00 	mov.w	fp, #0
 8010be8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010bec:	f848 3b1c 	str.w	r3, [r8], #28
 8010bf0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8010bf4:	4607      	mov	r7, r0
 8010bf6:	460c      	mov	r4, r1
 8010bf8:	4645      	mov	r5, r8
 8010bfa:	465a      	mov	r2, fp
 8010bfc:	46d9      	mov	r9, fp
 8010bfe:	f8cd b008 	str.w	fp, [sp, #8]
 8010c02:	68a1      	ldr	r1, [r4, #8]
 8010c04:	b181      	cbz	r1, 8010c28 <_scanf_float+0x70>
 8010c06:	6833      	ldr	r3, [r6, #0]
 8010c08:	781b      	ldrb	r3, [r3, #0]
 8010c0a:	2b49      	cmp	r3, #73	; 0x49
 8010c0c:	d071      	beq.n	8010cf2 <_scanf_float+0x13a>
 8010c0e:	d84d      	bhi.n	8010cac <_scanf_float+0xf4>
 8010c10:	2b39      	cmp	r3, #57	; 0x39
 8010c12:	d840      	bhi.n	8010c96 <_scanf_float+0xde>
 8010c14:	2b31      	cmp	r3, #49	; 0x31
 8010c16:	f080 8088 	bcs.w	8010d2a <_scanf_float+0x172>
 8010c1a:	2b2d      	cmp	r3, #45	; 0x2d
 8010c1c:	f000 8090 	beq.w	8010d40 <_scanf_float+0x188>
 8010c20:	d815      	bhi.n	8010c4e <_scanf_float+0x96>
 8010c22:	2b2b      	cmp	r3, #43	; 0x2b
 8010c24:	f000 808c 	beq.w	8010d40 <_scanf_float+0x188>
 8010c28:	f1b9 0f00 	cmp.w	r9, #0
 8010c2c:	d003      	beq.n	8010c36 <_scanf_float+0x7e>
 8010c2e:	6823      	ldr	r3, [r4, #0]
 8010c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c34:	6023      	str	r3, [r4, #0]
 8010c36:	3a01      	subs	r2, #1
 8010c38:	2a01      	cmp	r2, #1
 8010c3a:	f200 80ea 	bhi.w	8010e12 <_scanf_float+0x25a>
 8010c3e:	4545      	cmp	r5, r8
 8010c40:	f200 80dc 	bhi.w	8010dfc <_scanf_float+0x244>
 8010c44:	2601      	movs	r6, #1
 8010c46:	4630      	mov	r0, r6
 8010c48:	b007      	add	sp, #28
 8010c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c4e:	2b2e      	cmp	r3, #46	; 0x2e
 8010c50:	f000 809f 	beq.w	8010d92 <_scanf_float+0x1da>
 8010c54:	2b30      	cmp	r3, #48	; 0x30
 8010c56:	d1e7      	bne.n	8010c28 <_scanf_float+0x70>
 8010c58:	6820      	ldr	r0, [r4, #0]
 8010c5a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8010c5e:	d064      	beq.n	8010d2a <_scanf_float+0x172>
 8010c60:	9b01      	ldr	r3, [sp, #4]
 8010c62:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8010c66:	6020      	str	r0, [r4, #0]
 8010c68:	f109 0901 	add.w	r9, r9, #1
 8010c6c:	b11b      	cbz	r3, 8010c76 <_scanf_float+0xbe>
 8010c6e:	3b01      	subs	r3, #1
 8010c70:	3101      	adds	r1, #1
 8010c72:	9301      	str	r3, [sp, #4]
 8010c74:	60a1      	str	r1, [r4, #8]
 8010c76:	68a3      	ldr	r3, [r4, #8]
 8010c78:	3b01      	subs	r3, #1
 8010c7a:	60a3      	str	r3, [r4, #8]
 8010c7c:	6923      	ldr	r3, [r4, #16]
 8010c7e:	3301      	adds	r3, #1
 8010c80:	6123      	str	r3, [r4, #16]
 8010c82:	6873      	ldr	r3, [r6, #4]
 8010c84:	3b01      	subs	r3, #1
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	6073      	str	r3, [r6, #4]
 8010c8a:	f340 80ac 	ble.w	8010de6 <_scanf_float+0x22e>
 8010c8e:	6833      	ldr	r3, [r6, #0]
 8010c90:	3301      	adds	r3, #1
 8010c92:	6033      	str	r3, [r6, #0]
 8010c94:	e7b5      	b.n	8010c02 <_scanf_float+0x4a>
 8010c96:	2b45      	cmp	r3, #69	; 0x45
 8010c98:	f000 8085 	beq.w	8010da6 <_scanf_float+0x1ee>
 8010c9c:	2b46      	cmp	r3, #70	; 0x46
 8010c9e:	d06a      	beq.n	8010d76 <_scanf_float+0x1be>
 8010ca0:	2b41      	cmp	r3, #65	; 0x41
 8010ca2:	d1c1      	bne.n	8010c28 <_scanf_float+0x70>
 8010ca4:	2a01      	cmp	r2, #1
 8010ca6:	d1bf      	bne.n	8010c28 <_scanf_float+0x70>
 8010ca8:	2202      	movs	r2, #2
 8010caa:	e046      	b.n	8010d3a <_scanf_float+0x182>
 8010cac:	2b65      	cmp	r3, #101	; 0x65
 8010cae:	d07a      	beq.n	8010da6 <_scanf_float+0x1ee>
 8010cb0:	d818      	bhi.n	8010ce4 <_scanf_float+0x12c>
 8010cb2:	2b54      	cmp	r3, #84	; 0x54
 8010cb4:	d066      	beq.n	8010d84 <_scanf_float+0x1cc>
 8010cb6:	d811      	bhi.n	8010cdc <_scanf_float+0x124>
 8010cb8:	2b4e      	cmp	r3, #78	; 0x4e
 8010cba:	d1b5      	bne.n	8010c28 <_scanf_float+0x70>
 8010cbc:	2a00      	cmp	r2, #0
 8010cbe:	d146      	bne.n	8010d4e <_scanf_float+0x196>
 8010cc0:	f1b9 0f00 	cmp.w	r9, #0
 8010cc4:	d145      	bne.n	8010d52 <_scanf_float+0x19a>
 8010cc6:	6821      	ldr	r1, [r4, #0]
 8010cc8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010ccc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010cd0:	d13f      	bne.n	8010d52 <_scanf_float+0x19a>
 8010cd2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010cd6:	6021      	str	r1, [r4, #0]
 8010cd8:	2201      	movs	r2, #1
 8010cda:	e02e      	b.n	8010d3a <_scanf_float+0x182>
 8010cdc:	2b59      	cmp	r3, #89	; 0x59
 8010cde:	d01e      	beq.n	8010d1e <_scanf_float+0x166>
 8010ce0:	2b61      	cmp	r3, #97	; 0x61
 8010ce2:	e7de      	b.n	8010ca2 <_scanf_float+0xea>
 8010ce4:	2b6e      	cmp	r3, #110	; 0x6e
 8010ce6:	d0e9      	beq.n	8010cbc <_scanf_float+0x104>
 8010ce8:	d815      	bhi.n	8010d16 <_scanf_float+0x15e>
 8010cea:	2b66      	cmp	r3, #102	; 0x66
 8010cec:	d043      	beq.n	8010d76 <_scanf_float+0x1be>
 8010cee:	2b69      	cmp	r3, #105	; 0x69
 8010cf0:	d19a      	bne.n	8010c28 <_scanf_float+0x70>
 8010cf2:	f1bb 0f00 	cmp.w	fp, #0
 8010cf6:	d138      	bne.n	8010d6a <_scanf_float+0x1b2>
 8010cf8:	f1b9 0f00 	cmp.w	r9, #0
 8010cfc:	d197      	bne.n	8010c2e <_scanf_float+0x76>
 8010cfe:	6821      	ldr	r1, [r4, #0]
 8010d00:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010d04:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010d08:	d195      	bne.n	8010c36 <_scanf_float+0x7e>
 8010d0a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010d0e:	6021      	str	r1, [r4, #0]
 8010d10:	f04f 0b01 	mov.w	fp, #1
 8010d14:	e011      	b.n	8010d3a <_scanf_float+0x182>
 8010d16:	2b74      	cmp	r3, #116	; 0x74
 8010d18:	d034      	beq.n	8010d84 <_scanf_float+0x1cc>
 8010d1a:	2b79      	cmp	r3, #121	; 0x79
 8010d1c:	d184      	bne.n	8010c28 <_scanf_float+0x70>
 8010d1e:	f1bb 0f07 	cmp.w	fp, #7
 8010d22:	d181      	bne.n	8010c28 <_scanf_float+0x70>
 8010d24:	f04f 0b08 	mov.w	fp, #8
 8010d28:	e007      	b.n	8010d3a <_scanf_float+0x182>
 8010d2a:	eb12 0f0b 	cmn.w	r2, fp
 8010d2e:	f47f af7b 	bne.w	8010c28 <_scanf_float+0x70>
 8010d32:	6821      	ldr	r1, [r4, #0]
 8010d34:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8010d38:	6021      	str	r1, [r4, #0]
 8010d3a:	702b      	strb	r3, [r5, #0]
 8010d3c:	3501      	adds	r5, #1
 8010d3e:	e79a      	b.n	8010c76 <_scanf_float+0xbe>
 8010d40:	6821      	ldr	r1, [r4, #0]
 8010d42:	0608      	lsls	r0, r1, #24
 8010d44:	f57f af70 	bpl.w	8010c28 <_scanf_float+0x70>
 8010d48:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010d4c:	e7f4      	b.n	8010d38 <_scanf_float+0x180>
 8010d4e:	2a02      	cmp	r2, #2
 8010d50:	d047      	beq.n	8010de2 <_scanf_float+0x22a>
 8010d52:	f1bb 0f01 	cmp.w	fp, #1
 8010d56:	d003      	beq.n	8010d60 <_scanf_float+0x1a8>
 8010d58:	f1bb 0f04 	cmp.w	fp, #4
 8010d5c:	f47f af64 	bne.w	8010c28 <_scanf_float+0x70>
 8010d60:	f10b 0b01 	add.w	fp, fp, #1
 8010d64:	fa5f fb8b 	uxtb.w	fp, fp
 8010d68:	e7e7      	b.n	8010d3a <_scanf_float+0x182>
 8010d6a:	f1bb 0f03 	cmp.w	fp, #3
 8010d6e:	d0f7      	beq.n	8010d60 <_scanf_float+0x1a8>
 8010d70:	f1bb 0f05 	cmp.w	fp, #5
 8010d74:	e7f2      	b.n	8010d5c <_scanf_float+0x1a4>
 8010d76:	f1bb 0f02 	cmp.w	fp, #2
 8010d7a:	f47f af55 	bne.w	8010c28 <_scanf_float+0x70>
 8010d7e:	f04f 0b03 	mov.w	fp, #3
 8010d82:	e7da      	b.n	8010d3a <_scanf_float+0x182>
 8010d84:	f1bb 0f06 	cmp.w	fp, #6
 8010d88:	f47f af4e 	bne.w	8010c28 <_scanf_float+0x70>
 8010d8c:	f04f 0b07 	mov.w	fp, #7
 8010d90:	e7d3      	b.n	8010d3a <_scanf_float+0x182>
 8010d92:	6821      	ldr	r1, [r4, #0]
 8010d94:	0588      	lsls	r0, r1, #22
 8010d96:	f57f af47 	bpl.w	8010c28 <_scanf_float+0x70>
 8010d9a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8010d9e:	6021      	str	r1, [r4, #0]
 8010da0:	f8cd 9008 	str.w	r9, [sp, #8]
 8010da4:	e7c9      	b.n	8010d3a <_scanf_float+0x182>
 8010da6:	6821      	ldr	r1, [r4, #0]
 8010da8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8010dac:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010db0:	d006      	beq.n	8010dc0 <_scanf_float+0x208>
 8010db2:	0548      	lsls	r0, r1, #21
 8010db4:	f57f af38 	bpl.w	8010c28 <_scanf_float+0x70>
 8010db8:	f1b9 0f00 	cmp.w	r9, #0
 8010dbc:	f43f af3b 	beq.w	8010c36 <_scanf_float+0x7e>
 8010dc0:	0588      	lsls	r0, r1, #22
 8010dc2:	bf58      	it	pl
 8010dc4:	9802      	ldrpl	r0, [sp, #8]
 8010dc6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010dca:	bf58      	it	pl
 8010dcc:	eba9 0000 	subpl.w	r0, r9, r0
 8010dd0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8010dd4:	bf58      	it	pl
 8010dd6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8010dda:	6021      	str	r1, [r4, #0]
 8010ddc:	f04f 0900 	mov.w	r9, #0
 8010de0:	e7ab      	b.n	8010d3a <_scanf_float+0x182>
 8010de2:	2203      	movs	r2, #3
 8010de4:	e7a9      	b.n	8010d3a <_scanf_float+0x182>
 8010de6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010dea:	9205      	str	r2, [sp, #20]
 8010dec:	4631      	mov	r1, r6
 8010dee:	4638      	mov	r0, r7
 8010df0:	4798      	blx	r3
 8010df2:	9a05      	ldr	r2, [sp, #20]
 8010df4:	2800      	cmp	r0, #0
 8010df6:	f43f af04 	beq.w	8010c02 <_scanf_float+0x4a>
 8010dfa:	e715      	b.n	8010c28 <_scanf_float+0x70>
 8010dfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010e04:	4632      	mov	r2, r6
 8010e06:	4638      	mov	r0, r7
 8010e08:	4798      	blx	r3
 8010e0a:	6923      	ldr	r3, [r4, #16]
 8010e0c:	3b01      	subs	r3, #1
 8010e0e:	6123      	str	r3, [r4, #16]
 8010e10:	e715      	b.n	8010c3e <_scanf_float+0x86>
 8010e12:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010e16:	2b06      	cmp	r3, #6
 8010e18:	d80a      	bhi.n	8010e30 <_scanf_float+0x278>
 8010e1a:	f1bb 0f02 	cmp.w	fp, #2
 8010e1e:	d966      	bls.n	8010eee <_scanf_float+0x336>
 8010e20:	f1ab 0b03 	sub.w	fp, fp, #3
 8010e24:	fa5f fb8b 	uxtb.w	fp, fp
 8010e28:	eba5 0b0b 	sub.w	fp, r5, fp
 8010e2c:	455d      	cmp	r5, fp
 8010e2e:	d149      	bne.n	8010ec4 <_scanf_float+0x30c>
 8010e30:	6823      	ldr	r3, [r4, #0]
 8010e32:	05da      	lsls	r2, r3, #23
 8010e34:	d51f      	bpl.n	8010e76 <_scanf_float+0x2be>
 8010e36:	055b      	lsls	r3, r3, #21
 8010e38:	d466      	bmi.n	8010f08 <_scanf_float+0x350>
 8010e3a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010e3e:	6923      	ldr	r3, [r4, #16]
 8010e40:	2965      	cmp	r1, #101	; 0x65
 8010e42:	f103 33ff 	add.w	r3, r3, #4294967295
 8010e46:	f105 3bff 	add.w	fp, r5, #4294967295
 8010e4a:	6123      	str	r3, [r4, #16]
 8010e4c:	d00d      	beq.n	8010e6a <_scanf_float+0x2b2>
 8010e4e:	2945      	cmp	r1, #69	; 0x45
 8010e50:	d00b      	beq.n	8010e6a <_scanf_float+0x2b2>
 8010e52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e56:	4632      	mov	r2, r6
 8010e58:	4638      	mov	r0, r7
 8010e5a:	4798      	blx	r3
 8010e5c:	6923      	ldr	r3, [r4, #16]
 8010e5e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8010e62:	3b01      	subs	r3, #1
 8010e64:	f1a5 0b02 	sub.w	fp, r5, #2
 8010e68:	6123      	str	r3, [r4, #16]
 8010e6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e6e:	4632      	mov	r2, r6
 8010e70:	4638      	mov	r0, r7
 8010e72:	4798      	blx	r3
 8010e74:	465d      	mov	r5, fp
 8010e76:	6826      	ldr	r6, [r4, #0]
 8010e78:	f016 0610 	ands.w	r6, r6, #16
 8010e7c:	d170      	bne.n	8010f60 <_scanf_float+0x3a8>
 8010e7e:	702e      	strb	r6, [r5, #0]
 8010e80:	6823      	ldr	r3, [r4, #0]
 8010e82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e8a:	d140      	bne.n	8010f0e <_scanf_float+0x356>
 8010e8c:	9b02      	ldr	r3, [sp, #8]
 8010e8e:	eba9 0303 	sub.w	r3, r9, r3
 8010e92:	425a      	negs	r2, r3
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d147      	bne.n	8010f28 <_scanf_float+0x370>
 8010e98:	2200      	movs	r2, #0
 8010e9a:	4638      	mov	r0, r7
 8010e9c:	4641      	mov	r1, r8
 8010e9e:	f000 fecf 	bl	8011c40 <_strtod_r>
 8010ea2:	6820      	ldr	r0, [r4, #0]
 8010ea4:	f8da 3000 	ldr.w	r3, [sl]
 8010ea8:	f010 0f02 	tst.w	r0, #2
 8010eac:	f103 0204 	add.w	r2, r3, #4
 8010eb0:	f8ca 2000 	str.w	r2, [sl]
 8010eb4:	d043      	beq.n	8010f3e <_scanf_float+0x386>
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	ed83 0b00 	vstr	d0, [r3]
 8010ebc:	68e3      	ldr	r3, [r4, #12]
 8010ebe:	3301      	adds	r3, #1
 8010ec0:	60e3      	str	r3, [r4, #12]
 8010ec2:	e6c0      	b.n	8010c46 <_scanf_float+0x8e>
 8010ec4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ec8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010ecc:	4632      	mov	r2, r6
 8010ece:	4638      	mov	r0, r7
 8010ed0:	4798      	blx	r3
 8010ed2:	6923      	ldr	r3, [r4, #16]
 8010ed4:	3b01      	subs	r3, #1
 8010ed6:	6123      	str	r3, [r4, #16]
 8010ed8:	e7a8      	b.n	8010e2c <_scanf_float+0x274>
 8010eda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ede:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010ee2:	4632      	mov	r2, r6
 8010ee4:	4638      	mov	r0, r7
 8010ee6:	4798      	blx	r3
 8010ee8:	6923      	ldr	r3, [r4, #16]
 8010eea:	3b01      	subs	r3, #1
 8010eec:	6123      	str	r3, [r4, #16]
 8010eee:	4545      	cmp	r5, r8
 8010ef0:	d8f3      	bhi.n	8010eda <_scanf_float+0x322>
 8010ef2:	e6a7      	b.n	8010c44 <_scanf_float+0x8c>
 8010ef4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ef8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010efc:	4632      	mov	r2, r6
 8010efe:	4638      	mov	r0, r7
 8010f00:	4798      	blx	r3
 8010f02:	6923      	ldr	r3, [r4, #16]
 8010f04:	3b01      	subs	r3, #1
 8010f06:	6123      	str	r3, [r4, #16]
 8010f08:	4545      	cmp	r5, r8
 8010f0a:	d8f3      	bhi.n	8010ef4 <_scanf_float+0x33c>
 8010f0c:	e69a      	b.n	8010c44 <_scanf_float+0x8c>
 8010f0e:	9b03      	ldr	r3, [sp, #12]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d0c1      	beq.n	8010e98 <_scanf_float+0x2e0>
 8010f14:	9904      	ldr	r1, [sp, #16]
 8010f16:	230a      	movs	r3, #10
 8010f18:	4632      	mov	r2, r6
 8010f1a:	3101      	adds	r1, #1
 8010f1c:	4638      	mov	r0, r7
 8010f1e:	f000 ff1b 	bl	8011d58 <_strtol_r>
 8010f22:	9b03      	ldr	r3, [sp, #12]
 8010f24:	9d04      	ldr	r5, [sp, #16]
 8010f26:	1ac2      	subs	r2, r0, r3
 8010f28:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010f2c:	429d      	cmp	r5, r3
 8010f2e:	bf28      	it	cs
 8010f30:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8010f34:	490b      	ldr	r1, [pc, #44]	; (8010f64 <_scanf_float+0x3ac>)
 8010f36:	4628      	mov	r0, r5
 8010f38:	f000 f880 	bl	801103c <siprintf>
 8010f3c:	e7ac      	b.n	8010e98 <_scanf_float+0x2e0>
 8010f3e:	f010 0004 	ands.w	r0, r0, #4
 8010f42:	d1b8      	bne.n	8010eb6 <_scanf_float+0x2fe>
 8010f44:	eeb4 0b40 	vcmp.f64	d0, d0
 8010f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f4c:	681d      	ldr	r5, [r3, #0]
 8010f4e:	d704      	bvc.n	8010f5a <_scanf_float+0x3a2>
 8010f50:	f000 f86e 	bl	8011030 <nanf>
 8010f54:	ed85 0a00 	vstr	s0, [r5]
 8010f58:	e7b0      	b.n	8010ebc <_scanf_float+0x304>
 8010f5a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010f5e:	e7f9      	b.n	8010f54 <_scanf_float+0x39c>
 8010f60:	2600      	movs	r6, #0
 8010f62:	e670      	b.n	8010c46 <_scanf_float+0x8e>
 8010f64:	08015088 	.word	0x08015088

08010f68 <_puts_r>:
 8010f68:	b570      	push	{r4, r5, r6, lr}
 8010f6a:	460e      	mov	r6, r1
 8010f6c:	4605      	mov	r5, r0
 8010f6e:	b118      	cbz	r0, 8010f78 <_puts_r+0x10>
 8010f70:	6983      	ldr	r3, [r0, #24]
 8010f72:	b90b      	cbnz	r3, 8010f78 <_puts_r+0x10>
 8010f74:	f001 fe8c 	bl	8012c90 <__sinit>
 8010f78:	69ab      	ldr	r3, [r5, #24]
 8010f7a:	68ac      	ldr	r4, [r5, #8]
 8010f7c:	b913      	cbnz	r3, 8010f84 <_puts_r+0x1c>
 8010f7e:	4628      	mov	r0, r5
 8010f80:	f001 fe86 	bl	8012c90 <__sinit>
 8010f84:	4b23      	ldr	r3, [pc, #140]	; (8011014 <_puts_r+0xac>)
 8010f86:	429c      	cmp	r4, r3
 8010f88:	d117      	bne.n	8010fba <_puts_r+0x52>
 8010f8a:	686c      	ldr	r4, [r5, #4]
 8010f8c:	89a3      	ldrh	r3, [r4, #12]
 8010f8e:	071b      	lsls	r3, r3, #28
 8010f90:	d51d      	bpl.n	8010fce <_puts_r+0x66>
 8010f92:	6923      	ldr	r3, [r4, #16]
 8010f94:	b1db      	cbz	r3, 8010fce <_puts_r+0x66>
 8010f96:	3e01      	subs	r6, #1
 8010f98:	68a3      	ldr	r3, [r4, #8]
 8010f9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010f9e:	3b01      	subs	r3, #1
 8010fa0:	60a3      	str	r3, [r4, #8]
 8010fa2:	b9e9      	cbnz	r1, 8010fe0 <_puts_r+0x78>
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	da2e      	bge.n	8011006 <_puts_r+0x9e>
 8010fa8:	4622      	mov	r2, r4
 8010faa:	210a      	movs	r1, #10
 8010fac:	4628      	mov	r0, r5
 8010fae:	f000 fee5 	bl	8011d7c <__swbuf_r>
 8010fb2:	3001      	adds	r0, #1
 8010fb4:	d011      	beq.n	8010fda <_puts_r+0x72>
 8010fb6:	200a      	movs	r0, #10
 8010fb8:	e011      	b.n	8010fde <_puts_r+0x76>
 8010fba:	4b17      	ldr	r3, [pc, #92]	; (8011018 <_puts_r+0xb0>)
 8010fbc:	429c      	cmp	r4, r3
 8010fbe:	d101      	bne.n	8010fc4 <_puts_r+0x5c>
 8010fc0:	68ac      	ldr	r4, [r5, #8]
 8010fc2:	e7e3      	b.n	8010f8c <_puts_r+0x24>
 8010fc4:	4b15      	ldr	r3, [pc, #84]	; (801101c <_puts_r+0xb4>)
 8010fc6:	429c      	cmp	r4, r3
 8010fc8:	bf08      	it	eq
 8010fca:	68ec      	ldreq	r4, [r5, #12]
 8010fcc:	e7de      	b.n	8010f8c <_puts_r+0x24>
 8010fce:	4621      	mov	r1, r4
 8010fd0:	4628      	mov	r0, r5
 8010fd2:	f000 ff25 	bl	8011e20 <__swsetup_r>
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	d0dd      	beq.n	8010f96 <_puts_r+0x2e>
 8010fda:	f04f 30ff 	mov.w	r0, #4294967295
 8010fde:	bd70      	pop	{r4, r5, r6, pc}
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	da04      	bge.n	8010fee <_puts_r+0x86>
 8010fe4:	69a2      	ldr	r2, [r4, #24]
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	dc06      	bgt.n	8010ff8 <_puts_r+0x90>
 8010fea:	290a      	cmp	r1, #10
 8010fec:	d004      	beq.n	8010ff8 <_puts_r+0x90>
 8010fee:	6823      	ldr	r3, [r4, #0]
 8010ff0:	1c5a      	adds	r2, r3, #1
 8010ff2:	6022      	str	r2, [r4, #0]
 8010ff4:	7019      	strb	r1, [r3, #0]
 8010ff6:	e7cf      	b.n	8010f98 <_puts_r+0x30>
 8010ff8:	4622      	mov	r2, r4
 8010ffa:	4628      	mov	r0, r5
 8010ffc:	f000 febe 	bl	8011d7c <__swbuf_r>
 8011000:	3001      	adds	r0, #1
 8011002:	d1c9      	bne.n	8010f98 <_puts_r+0x30>
 8011004:	e7e9      	b.n	8010fda <_puts_r+0x72>
 8011006:	6823      	ldr	r3, [r4, #0]
 8011008:	200a      	movs	r0, #10
 801100a:	1c5a      	adds	r2, r3, #1
 801100c:	6022      	str	r2, [r4, #0]
 801100e:	7018      	strb	r0, [r3, #0]
 8011010:	e7e5      	b.n	8010fde <_puts_r+0x76>
 8011012:	bf00      	nop
 8011014:	08015110 	.word	0x08015110
 8011018:	08015130 	.word	0x08015130
 801101c:	080150f0 	.word	0x080150f0

08011020 <puts>:
 8011020:	4b02      	ldr	r3, [pc, #8]	; (801102c <puts+0xc>)
 8011022:	4601      	mov	r1, r0
 8011024:	6818      	ldr	r0, [r3, #0]
 8011026:	f7ff bf9f 	b.w	8010f68 <_puts_r>
 801102a:	bf00      	nop
 801102c:	20000198 	.word	0x20000198

08011030 <nanf>:
 8011030:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011038 <nanf+0x8>
 8011034:	4770      	bx	lr
 8011036:	bf00      	nop
 8011038:	7fc00000 	.word	0x7fc00000

0801103c <siprintf>:
 801103c:	b40e      	push	{r1, r2, r3}
 801103e:	b500      	push	{lr}
 8011040:	b09c      	sub	sp, #112	; 0x70
 8011042:	ab1d      	add	r3, sp, #116	; 0x74
 8011044:	9002      	str	r0, [sp, #8]
 8011046:	9006      	str	r0, [sp, #24]
 8011048:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801104c:	4809      	ldr	r0, [pc, #36]	; (8011074 <siprintf+0x38>)
 801104e:	9107      	str	r1, [sp, #28]
 8011050:	9104      	str	r1, [sp, #16]
 8011052:	4909      	ldr	r1, [pc, #36]	; (8011078 <siprintf+0x3c>)
 8011054:	f853 2b04 	ldr.w	r2, [r3], #4
 8011058:	9105      	str	r1, [sp, #20]
 801105a:	6800      	ldr	r0, [r0, #0]
 801105c:	9301      	str	r3, [sp, #4]
 801105e:	a902      	add	r1, sp, #8
 8011060:	f002 ff68 	bl	8013f34 <_svfiprintf_r>
 8011064:	9b02      	ldr	r3, [sp, #8]
 8011066:	2200      	movs	r2, #0
 8011068:	701a      	strb	r2, [r3, #0]
 801106a:	b01c      	add	sp, #112	; 0x70
 801106c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011070:	b003      	add	sp, #12
 8011072:	4770      	bx	lr
 8011074:	20000198 	.word	0x20000198
 8011078:	ffff0208 	.word	0xffff0208

0801107c <sulp>:
 801107c:	b570      	push	{r4, r5, r6, lr}
 801107e:	4604      	mov	r4, r0
 8011080:	460d      	mov	r5, r1
 8011082:	4616      	mov	r6, r2
 8011084:	ec45 4b10 	vmov	d0, r4, r5
 8011088:	f002 fd10 	bl	8013aac <__ulp>
 801108c:	b17e      	cbz	r6, 80110ae <sulp+0x32>
 801108e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011092:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011096:	2b00      	cmp	r3, #0
 8011098:	dd09      	ble.n	80110ae <sulp+0x32>
 801109a:	051b      	lsls	r3, r3, #20
 801109c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80110a0:	2000      	movs	r0, #0
 80110a2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80110a6:	ec41 0b17 	vmov	d7, r0, r1
 80110aa:	ee20 0b07 	vmul.f64	d0, d0, d7
 80110ae:	bd70      	pop	{r4, r5, r6, pc}

080110b0 <_strtod_l>:
 80110b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110b4:	ed2d 8b0c 	vpush	{d8-d13}
 80110b8:	4698      	mov	r8, r3
 80110ba:	b09d      	sub	sp, #116	; 0x74
 80110bc:	2300      	movs	r3, #0
 80110be:	4604      	mov	r4, r0
 80110c0:	4640      	mov	r0, r8
 80110c2:	460e      	mov	r6, r1
 80110c4:	9214      	str	r2, [sp, #80]	; 0x50
 80110c6:	9318      	str	r3, [sp, #96]	; 0x60
 80110c8:	f002 f995 	bl	80133f6 <__localeconv_l>
 80110cc:	4681      	mov	r9, r0
 80110ce:	6800      	ldr	r0, [r0, #0]
 80110d0:	f7ef f8b6 	bl	8000240 <strlen>
 80110d4:	f04f 0a00 	mov.w	sl, #0
 80110d8:	4607      	mov	r7, r0
 80110da:	f04f 0b00 	mov.w	fp, #0
 80110de:	9617      	str	r6, [sp, #92]	; 0x5c
 80110e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80110e2:	781a      	ldrb	r2, [r3, #0]
 80110e4:	2a0d      	cmp	r2, #13
 80110e6:	d834      	bhi.n	8011152 <_strtod_l+0xa2>
 80110e8:	2a09      	cmp	r2, #9
 80110ea:	d238      	bcs.n	801115e <_strtod_l+0xae>
 80110ec:	2a00      	cmp	r2, #0
 80110ee:	d040      	beq.n	8011172 <_strtod_l+0xc2>
 80110f0:	2300      	movs	r3, #0
 80110f2:	930d      	str	r3, [sp, #52]	; 0x34
 80110f4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80110f6:	782b      	ldrb	r3, [r5, #0]
 80110f8:	2b30      	cmp	r3, #48	; 0x30
 80110fa:	f040 80b3 	bne.w	8011264 <_strtod_l+0x1b4>
 80110fe:	786b      	ldrb	r3, [r5, #1]
 8011100:	2b58      	cmp	r3, #88	; 0x58
 8011102:	d001      	beq.n	8011108 <_strtod_l+0x58>
 8011104:	2b78      	cmp	r3, #120	; 0x78
 8011106:	d169      	bne.n	80111dc <_strtod_l+0x12c>
 8011108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801110a:	9301      	str	r3, [sp, #4]
 801110c:	ab18      	add	r3, sp, #96	; 0x60
 801110e:	9300      	str	r3, [sp, #0]
 8011110:	f8cd 8008 	str.w	r8, [sp, #8]
 8011114:	ab19      	add	r3, sp, #100	; 0x64
 8011116:	4a8f      	ldr	r2, [pc, #572]	; (8011354 <_strtod_l+0x2a4>)
 8011118:	a917      	add	r1, sp, #92	; 0x5c
 801111a:	4620      	mov	r0, r4
 801111c:	f001 fe91 	bl	8012e42 <__gethex>
 8011120:	f010 0607 	ands.w	r6, r0, #7
 8011124:	4607      	mov	r7, r0
 8011126:	d005      	beq.n	8011134 <_strtod_l+0x84>
 8011128:	2e06      	cmp	r6, #6
 801112a:	d12c      	bne.n	8011186 <_strtod_l+0xd6>
 801112c:	3501      	adds	r5, #1
 801112e:	2300      	movs	r3, #0
 8011130:	9517      	str	r5, [sp, #92]	; 0x5c
 8011132:	930d      	str	r3, [sp, #52]	; 0x34
 8011134:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011136:	2b00      	cmp	r3, #0
 8011138:	f040 855e 	bne.w	8011bf8 <_strtod_l+0xb48>
 801113c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801113e:	b1eb      	cbz	r3, 801117c <_strtod_l+0xcc>
 8011140:	ec4b ab17 	vmov	d7, sl, fp
 8011144:	eeb1 0b47 	vneg.f64	d0, d7
 8011148:	b01d      	add	sp, #116	; 0x74
 801114a:	ecbd 8b0c 	vpop	{d8-d13}
 801114e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011152:	2a2b      	cmp	r2, #43	; 0x2b
 8011154:	d015      	beq.n	8011182 <_strtod_l+0xd2>
 8011156:	2a2d      	cmp	r2, #45	; 0x2d
 8011158:	d004      	beq.n	8011164 <_strtod_l+0xb4>
 801115a:	2a20      	cmp	r2, #32
 801115c:	d1c8      	bne.n	80110f0 <_strtod_l+0x40>
 801115e:	3301      	adds	r3, #1
 8011160:	9317      	str	r3, [sp, #92]	; 0x5c
 8011162:	e7bd      	b.n	80110e0 <_strtod_l+0x30>
 8011164:	2201      	movs	r2, #1
 8011166:	920d      	str	r2, [sp, #52]	; 0x34
 8011168:	1c5a      	adds	r2, r3, #1
 801116a:	9217      	str	r2, [sp, #92]	; 0x5c
 801116c:	785b      	ldrb	r3, [r3, #1]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d1c0      	bne.n	80110f4 <_strtod_l+0x44>
 8011172:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011174:	9617      	str	r6, [sp, #92]	; 0x5c
 8011176:	2b00      	cmp	r3, #0
 8011178:	f040 853c 	bne.w	8011bf4 <_strtod_l+0xb44>
 801117c:	ec4b ab10 	vmov	d0, sl, fp
 8011180:	e7e2      	b.n	8011148 <_strtod_l+0x98>
 8011182:	2200      	movs	r2, #0
 8011184:	e7ef      	b.n	8011166 <_strtod_l+0xb6>
 8011186:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011188:	b13a      	cbz	r2, 801119a <_strtod_l+0xea>
 801118a:	2135      	movs	r1, #53	; 0x35
 801118c:	a81a      	add	r0, sp, #104	; 0x68
 801118e:	f002 fd86 	bl	8013c9e <__copybits>
 8011192:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011194:	4620      	mov	r0, r4
 8011196:	f002 f9f1 	bl	801357c <_Bfree>
 801119a:	3e01      	subs	r6, #1
 801119c:	2e04      	cmp	r6, #4
 801119e:	d806      	bhi.n	80111ae <_strtod_l+0xfe>
 80111a0:	e8df f006 	tbb	[pc, r6]
 80111a4:	1714030a 	.word	0x1714030a
 80111a8:	0a          	.byte	0x0a
 80111a9:	00          	.byte	0x00
 80111aa:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80111ae:	073b      	lsls	r3, r7, #28
 80111b0:	d5c0      	bpl.n	8011134 <_strtod_l+0x84>
 80111b2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80111b6:	e7bd      	b.n	8011134 <_strtod_l+0x84>
 80111b8:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80111bc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80111be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80111c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80111c6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80111ca:	e7f0      	b.n	80111ae <_strtod_l+0xfe>
 80111cc:	f8df b188 	ldr.w	fp, [pc, #392]	; 8011358 <_strtod_l+0x2a8>
 80111d0:	e7ed      	b.n	80111ae <_strtod_l+0xfe>
 80111d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80111d6:	f04f 3aff 	mov.w	sl, #4294967295
 80111da:	e7e8      	b.n	80111ae <_strtod_l+0xfe>
 80111dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80111de:	1c5a      	adds	r2, r3, #1
 80111e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80111e2:	785b      	ldrb	r3, [r3, #1]
 80111e4:	2b30      	cmp	r3, #48	; 0x30
 80111e6:	d0f9      	beq.n	80111dc <_strtod_l+0x12c>
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d0a3      	beq.n	8011134 <_strtod_l+0x84>
 80111ec:	2301      	movs	r3, #1
 80111ee:	930a      	str	r3, [sp, #40]	; 0x28
 80111f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80111f2:	930c      	str	r3, [sp, #48]	; 0x30
 80111f4:	2300      	movs	r3, #0
 80111f6:	9306      	str	r3, [sp, #24]
 80111f8:	9308      	str	r3, [sp, #32]
 80111fa:	461d      	mov	r5, r3
 80111fc:	220a      	movs	r2, #10
 80111fe:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011200:	f890 8000 	ldrb.w	r8, [r0]
 8011204:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8011208:	b2d9      	uxtb	r1, r3
 801120a:	2909      	cmp	r1, #9
 801120c:	d92c      	bls.n	8011268 <_strtod_l+0x1b8>
 801120e:	463a      	mov	r2, r7
 8011210:	f8d9 1000 	ldr.w	r1, [r9]
 8011214:	f002 ffd9 	bl	80141ca <strncmp>
 8011218:	2800      	cmp	r0, #0
 801121a:	d035      	beq.n	8011288 <_strtod_l+0x1d8>
 801121c:	2000      	movs	r0, #0
 801121e:	4642      	mov	r2, r8
 8011220:	462b      	mov	r3, r5
 8011222:	4601      	mov	r1, r0
 8011224:	9004      	str	r0, [sp, #16]
 8011226:	2a65      	cmp	r2, #101	; 0x65
 8011228:	d001      	beq.n	801122e <_strtod_l+0x17e>
 801122a:	2a45      	cmp	r2, #69	; 0x45
 801122c:	d117      	bne.n	801125e <_strtod_l+0x1ae>
 801122e:	b923      	cbnz	r3, 801123a <_strtod_l+0x18a>
 8011230:	b910      	cbnz	r0, 8011238 <_strtod_l+0x188>
 8011232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011234:	2b00      	cmp	r3, #0
 8011236:	d09c      	beq.n	8011172 <_strtod_l+0xc2>
 8011238:	2300      	movs	r3, #0
 801123a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801123c:	1c72      	adds	r2, r6, #1
 801123e:	9217      	str	r2, [sp, #92]	; 0x5c
 8011240:	7872      	ldrb	r2, [r6, #1]
 8011242:	2a2b      	cmp	r2, #43	; 0x2b
 8011244:	f000 8082 	beq.w	801134c <_strtod_l+0x29c>
 8011248:	2a2d      	cmp	r2, #45	; 0x2d
 801124a:	d079      	beq.n	8011340 <_strtod_l+0x290>
 801124c:	f04f 0e00 	mov.w	lr, #0
 8011250:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8011254:	f1bc 0f09 	cmp.w	ip, #9
 8011258:	f240 8086 	bls.w	8011368 <_strtod_l+0x2b8>
 801125c:	9617      	str	r6, [sp, #92]	; 0x5c
 801125e:	f04f 0800 	mov.w	r8, #0
 8011262:	e0a8      	b.n	80113b6 <_strtod_l+0x306>
 8011264:	2300      	movs	r3, #0
 8011266:	e7c2      	b.n	80111ee <_strtod_l+0x13e>
 8011268:	2d08      	cmp	r5, #8
 801126a:	bfd5      	itete	le
 801126c:	9908      	ldrle	r1, [sp, #32]
 801126e:	9906      	ldrgt	r1, [sp, #24]
 8011270:	fb02 3301 	mlale	r3, r2, r1, r3
 8011274:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011278:	f100 0001 	add.w	r0, r0, #1
 801127c:	bfd4      	ite	le
 801127e:	9308      	strle	r3, [sp, #32]
 8011280:	9306      	strgt	r3, [sp, #24]
 8011282:	3501      	adds	r5, #1
 8011284:	9017      	str	r0, [sp, #92]	; 0x5c
 8011286:	e7ba      	b.n	80111fe <_strtod_l+0x14e>
 8011288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801128a:	19da      	adds	r2, r3, r7
 801128c:	9217      	str	r2, [sp, #92]	; 0x5c
 801128e:	5dda      	ldrb	r2, [r3, r7]
 8011290:	2d00      	cmp	r5, #0
 8011292:	d038      	beq.n	8011306 <_strtod_l+0x256>
 8011294:	4601      	mov	r1, r0
 8011296:	462b      	mov	r3, r5
 8011298:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801129c:	2f09      	cmp	r7, #9
 801129e:	d913      	bls.n	80112c8 <_strtod_l+0x218>
 80112a0:	2701      	movs	r7, #1
 80112a2:	9704      	str	r7, [sp, #16]
 80112a4:	e7bf      	b.n	8011226 <_strtod_l+0x176>
 80112a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112a8:	1c5a      	adds	r2, r3, #1
 80112aa:	9217      	str	r2, [sp, #92]	; 0x5c
 80112ac:	785a      	ldrb	r2, [r3, #1]
 80112ae:	3001      	adds	r0, #1
 80112b0:	2a30      	cmp	r2, #48	; 0x30
 80112b2:	d0f8      	beq.n	80112a6 <_strtod_l+0x1f6>
 80112b4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80112b8:	2b08      	cmp	r3, #8
 80112ba:	f200 84a2 	bhi.w	8011c02 <_strtod_l+0xb52>
 80112be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112c0:	930c      	str	r3, [sp, #48]	; 0x30
 80112c2:	4601      	mov	r1, r0
 80112c4:	2000      	movs	r0, #0
 80112c6:	4603      	mov	r3, r0
 80112c8:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 80112cc:	f100 0701 	add.w	r7, r0, #1
 80112d0:	d013      	beq.n	80112fa <_strtod_l+0x24a>
 80112d2:	4439      	add	r1, r7
 80112d4:	eb00 0e03 	add.w	lr, r0, r3
 80112d8:	461f      	mov	r7, r3
 80112da:	f04f 0c0a 	mov.w	ip, #10
 80112de:	45be      	cmp	lr, r7
 80112e0:	d113      	bne.n	801130a <_strtod_l+0x25a>
 80112e2:	181f      	adds	r7, r3, r0
 80112e4:	2f08      	cmp	r7, #8
 80112e6:	f103 0301 	add.w	r3, r3, #1
 80112ea:	4403      	add	r3, r0
 80112ec:	dc1d      	bgt.n	801132a <_strtod_l+0x27a>
 80112ee:	9a08      	ldr	r2, [sp, #32]
 80112f0:	200a      	movs	r0, #10
 80112f2:	fb00 8202 	mla	r2, r0, r2, r8
 80112f6:	9208      	str	r2, [sp, #32]
 80112f8:	2700      	movs	r7, #0
 80112fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80112fc:	1c50      	adds	r0, r2, #1
 80112fe:	9017      	str	r0, [sp, #92]	; 0x5c
 8011300:	7852      	ldrb	r2, [r2, #1]
 8011302:	4638      	mov	r0, r7
 8011304:	e7c8      	b.n	8011298 <_strtod_l+0x1e8>
 8011306:	4628      	mov	r0, r5
 8011308:	e7d2      	b.n	80112b0 <_strtod_l+0x200>
 801130a:	2f08      	cmp	r7, #8
 801130c:	f107 0701 	add.w	r7, r7, #1
 8011310:	dc04      	bgt.n	801131c <_strtod_l+0x26c>
 8011312:	9a08      	ldr	r2, [sp, #32]
 8011314:	fb0c f202 	mul.w	r2, ip, r2
 8011318:	9208      	str	r2, [sp, #32]
 801131a:	e7e0      	b.n	80112de <_strtod_l+0x22e>
 801131c:	2f10      	cmp	r7, #16
 801131e:	bfde      	ittt	le
 8011320:	9a06      	ldrle	r2, [sp, #24]
 8011322:	fb0c f202 	mulle.w	r2, ip, r2
 8011326:	9206      	strle	r2, [sp, #24]
 8011328:	e7d9      	b.n	80112de <_strtod_l+0x22e>
 801132a:	2b10      	cmp	r3, #16
 801132c:	bfdf      	itttt	le
 801132e:	9a06      	ldrle	r2, [sp, #24]
 8011330:	200a      	movle	r0, #10
 8011332:	fb00 8202 	mlale	r2, r0, r2, r8
 8011336:	9206      	strle	r2, [sp, #24]
 8011338:	e7de      	b.n	80112f8 <_strtod_l+0x248>
 801133a:	2301      	movs	r3, #1
 801133c:	9304      	str	r3, [sp, #16]
 801133e:	e777      	b.n	8011230 <_strtod_l+0x180>
 8011340:	f04f 0e01 	mov.w	lr, #1
 8011344:	1cb2      	adds	r2, r6, #2
 8011346:	9217      	str	r2, [sp, #92]	; 0x5c
 8011348:	78b2      	ldrb	r2, [r6, #2]
 801134a:	e781      	b.n	8011250 <_strtod_l+0x1a0>
 801134c:	f04f 0e00 	mov.w	lr, #0
 8011350:	e7f8      	b.n	8011344 <_strtod_l+0x294>
 8011352:	bf00      	nop
 8011354:	08015090 	.word	0x08015090
 8011358:	7ff00000 	.word	0x7ff00000
 801135c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801135e:	f102 0c01 	add.w	ip, r2, #1
 8011362:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8011366:	7852      	ldrb	r2, [r2, #1]
 8011368:	2a30      	cmp	r2, #48	; 0x30
 801136a:	d0f7      	beq.n	801135c <_strtod_l+0x2ac>
 801136c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8011370:	f1bc 0f08 	cmp.w	ip, #8
 8011374:	f63f af73 	bhi.w	801125e <_strtod_l+0x1ae>
 8011378:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 801137c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801137e:	920e      	str	r2, [sp, #56]	; 0x38
 8011380:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011382:	f102 0c01 	add.w	ip, r2, #1
 8011386:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 801138a:	7852      	ldrb	r2, [r2, #1]
 801138c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8011390:	f1b9 0f09 	cmp.w	r9, #9
 8011394:	d939      	bls.n	801140a <_strtod_l+0x35a>
 8011396:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8011398:	ebac 0c07 	sub.w	ip, ip, r7
 801139c:	f1bc 0f08 	cmp.w	ip, #8
 80113a0:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 80113a4:	dc37      	bgt.n	8011416 <_strtod_l+0x366>
 80113a6:	45e0      	cmp	r8, ip
 80113a8:	bfa8      	it	ge
 80113aa:	46e0      	movge	r8, ip
 80113ac:	f1be 0f00 	cmp.w	lr, #0
 80113b0:	d001      	beq.n	80113b6 <_strtod_l+0x306>
 80113b2:	f1c8 0800 	rsb	r8, r8, #0
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d151      	bne.n	801145e <_strtod_l+0x3ae>
 80113ba:	2800      	cmp	r0, #0
 80113bc:	f47f aeba 	bne.w	8011134 <_strtod_l+0x84>
 80113c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	f47f aeb6 	bne.w	8011134 <_strtod_l+0x84>
 80113c8:	9b04      	ldr	r3, [sp, #16]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	f47f aed1 	bne.w	8011172 <_strtod_l+0xc2>
 80113d0:	2a4e      	cmp	r2, #78	; 0x4e
 80113d2:	d027      	beq.n	8011424 <_strtod_l+0x374>
 80113d4:	dc21      	bgt.n	801141a <_strtod_l+0x36a>
 80113d6:	2a49      	cmp	r2, #73	; 0x49
 80113d8:	f47f aecb 	bne.w	8011172 <_strtod_l+0xc2>
 80113dc:	499a      	ldr	r1, [pc, #616]	; (8011648 <_strtod_l+0x598>)
 80113de:	a817      	add	r0, sp, #92	; 0x5c
 80113e0:	f001 ff62 	bl	80132a8 <__match>
 80113e4:	2800      	cmp	r0, #0
 80113e6:	f43f aec4 	beq.w	8011172 <_strtod_l+0xc2>
 80113ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80113ec:	4997      	ldr	r1, [pc, #604]	; (801164c <_strtod_l+0x59c>)
 80113ee:	3b01      	subs	r3, #1
 80113f0:	a817      	add	r0, sp, #92	; 0x5c
 80113f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80113f4:	f001 ff58 	bl	80132a8 <__match>
 80113f8:	b910      	cbnz	r0, 8011400 <_strtod_l+0x350>
 80113fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80113fc:	3301      	adds	r3, #1
 80113fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8011400:	f8df b260 	ldr.w	fp, [pc, #608]	; 8011664 <_strtod_l+0x5b4>
 8011404:	f04f 0a00 	mov.w	sl, #0
 8011408:	e694      	b.n	8011134 <_strtod_l+0x84>
 801140a:	270a      	movs	r7, #10
 801140c:	fb07 2808 	mla	r8, r7, r8, r2
 8011410:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8011414:	e7b4      	b.n	8011380 <_strtod_l+0x2d0>
 8011416:	46e0      	mov	r8, ip
 8011418:	e7c8      	b.n	80113ac <_strtod_l+0x2fc>
 801141a:	2a69      	cmp	r2, #105	; 0x69
 801141c:	d0de      	beq.n	80113dc <_strtod_l+0x32c>
 801141e:	2a6e      	cmp	r2, #110	; 0x6e
 8011420:	f47f aea7 	bne.w	8011172 <_strtod_l+0xc2>
 8011424:	498a      	ldr	r1, [pc, #552]	; (8011650 <_strtod_l+0x5a0>)
 8011426:	a817      	add	r0, sp, #92	; 0x5c
 8011428:	f001 ff3e 	bl	80132a8 <__match>
 801142c:	2800      	cmp	r0, #0
 801142e:	f43f aea0 	beq.w	8011172 <_strtod_l+0xc2>
 8011432:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011434:	781b      	ldrb	r3, [r3, #0]
 8011436:	2b28      	cmp	r3, #40	; 0x28
 8011438:	d10e      	bne.n	8011458 <_strtod_l+0x3a8>
 801143a:	aa1a      	add	r2, sp, #104	; 0x68
 801143c:	4985      	ldr	r1, [pc, #532]	; (8011654 <_strtod_l+0x5a4>)
 801143e:	a817      	add	r0, sp, #92	; 0x5c
 8011440:	f001 ff46 	bl	80132d0 <__hexnan>
 8011444:	2805      	cmp	r0, #5
 8011446:	d107      	bne.n	8011458 <_strtod_l+0x3a8>
 8011448:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801144a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801144e:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011452:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011456:	e66d      	b.n	8011134 <_strtod_l+0x84>
 8011458:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8011668 <_strtod_l+0x5b8>
 801145c:	e7d2      	b.n	8011404 <_strtod_l+0x354>
 801145e:	eddd 7a08 	vldr	s15, [sp, #32]
 8011462:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011466:	eba8 0201 	sub.w	r2, r8, r1
 801146a:	2d00      	cmp	r5, #0
 801146c:	bf08      	it	eq
 801146e:	461d      	moveq	r5, r3
 8011470:	2b10      	cmp	r3, #16
 8011472:	9204      	str	r2, [sp, #16]
 8011474:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011478:	461a      	mov	r2, r3
 801147a:	bfa8      	it	ge
 801147c:	2210      	movge	r2, #16
 801147e:	2b09      	cmp	r3, #9
 8011480:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8011484:	dc14      	bgt.n	80114b0 <_strtod_l+0x400>
 8011486:	9904      	ldr	r1, [sp, #16]
 8011488:	2900      	cmp	r1, #0
 801148a:	f43f ae53 	beq.w	8011134 <_strtod_l+0x84>
 801148e:	9904      	ldr	r1, [sp, #16]
 8011490:	dd72      	ble.n	8011578 <_strtod_l+0x4c8>
 8011492:	2916      	cmp	r1, #22
 8011494:	dc5a      	bgt.n	801154c <_strtod_l+0x49c>
 8011496:	4970      	ldr	r1, [pc, #448]	; (8011658 <_strtod_l+0x5a8>)
 8011498:	9b04      	ldr	r3, [sp, #16]
 801149a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801149e:	ed91 7b00 	vldr	d7, [r1]
 80114a2:	ec4b ab16 	vmov	d6, sl, fp
 80114a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80114aa:	ec5b ab17 	vmov	sl, fp, d7
 80114ae:	e641      	b.n	8011134 <_strtod_l+0x84>
 80114b0:	4969      	ldr	r1, [pc, #420]	; (8011658 <_strtod_l+0x5a8>)
 80114b2:	eddd 7a06 	vldr	s15, [sp, #24]
 80114b6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80114ba:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80114be:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80114c2:	2b0f      	cmp	r3, #15
 80114c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80114c8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80114cc:	ec5b ab17 	vmov	sl, fp, d7
 80114d0:	ddd9      	ble.n	8011486 <_strtod_l+0x3d6>
 80114d2:	9904      	ldr	r1, [sp, #16]
 80114d4:	1a9a      	subs	r2, r3, r2
 80114d6:	440a      	add	r2, r1
 80114d8:	2a00      	cmp	r2, #0
 80114da:	f340 8096 	ble.w	801160a <_strtod_l+0x55a>
 80114de:	f012 000f 	ands.w	r0, r2, #15
 80114e2:	d00a      	beq.n	80114fa <_strtod_l+0x44a>
 80114e4:	495c      	ldr	r1, [pc, #368]	; (8011658 <_strtod_l+0x5a8>)
 80114e6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80114ea:	ed91 7b00 	vldr	d7, [r1]
 80114ee:	ec4b ab16 	vmov	d6, sl, fp
 80114f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80114f6:	ec5b ab17 	vmov	sl, fp, d7
 80114fa:	f032 020f 	bics.w	r2, r2, #15
 80114fe:	d072      	beq.n	80115e6 <_strtod_l+0x536>
 8011500:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8011504:	dd45      	ble.n	8011592 <_strtod_l+0x4e2>
 8011506:	2500      	movs	r5, #0
 8011508:	46a8      	mov	r8, r5
 801150a:	9506      	str	r5, [sp, #24]
 801150c:	46a9      	mov	r9, r5
 801150e:	2322      	movs	r3, #34	; 0x22
 8011510:	f8df b150 	ldr.w	fp, [pc, #336]	; 8011664 <_strtod_l+0x5b4>
 8011514:	6023      	str	r3, [r4, #0]
 8011516:	f04f 0a00 	mov.w	sl, #0
 801151a:	9b06      	ldr	r3, [sp, #24]
 801151c:	2b00      	cmp	r3, #0
 801151e:	f43f ae09 	beq.w	8011134 <_strtod_l+0x84>
 8011522:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011524:	4620      	mov	r0, r4
 8011526:	f002 f829 	bl	801357c <_Bfree>
 801152a:	4649      	mov	r1, r9
 801152c:	4620      	mov	r0, r4
 801152e:	f002 f825 	bl	801357c <_Bfree>
 8011532:	4641      	mov	r1, r8
 8011534:	4620      	mov	r0, r4
 8011536:	f002 f821 	bl	801357c <_Bfree>
 801153a:	9906      	ldr	r1, [sp, #24]
 801153c:	4620      	mov	r0, r4
 801153e:	f002 f81d 	bl	801357c <_Bfree>
 8011542:	4629      	mov	r1, r5
 8011544:	4620      	mov	r0, r4
 8011546:	f002 f819 	bl	801357c <_Bfree>
 801154a:	e5f3      	b.n	8011134 <_strtod_l+0x84>
 801154c:	9804      	ldr	r0, [sp, #16]
 801154e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8011552:	4281      	cmp	r1, r0
 8011554:	dbbd      	blt.n	80114d2 <_strtod_l+0x422>
 8011556:	4a40      	ldr	r2, [pc, #256]	; (8011658 <_strtod_l+0x5a8>)
 8011558:	f1c3 030f 	rsb	r3, r3, #15
 801155c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011560:	ed91 7b00 	vldr	d7, [r1]
 8011564:	ec4b ab16 	vmov	d6, sl, fp
 8011568:	1ac3      	subs	r3, r0, r3
 801156a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801156e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011572:	ed92 6b00 	vldr	d6, [r2]
 8011576:	e796      	b.n	80114a6 <_strtod_l+0x3f6>
 8011578:	3116      	adds	r1, #22
 801157a:	dbaa      	blt.n	80114d2 <_strtod_l+0x422>
 801157c:	4936      	ldr	r1, [pc, #216]	; (8011658 <_strtod_l+0x5a8>)
 801157e:	9b04      	ldr	r3, [sp, #16]
 8011580:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8011584:	ed91 7b00 	vldr	d7, [r1]
 8011588:	ec4b ab16 	vmov	d6, sl, fp
 801158c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011590:	e78b      	b.n	80114aa <_strtod_l+0x3fa>
 8011592:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8011596:	2000      	movs	r0, #0
 8011598:	4e30      	ldr	r6, [pc, #192]	; (801165c <_strtod_l+0x5ac>)
 801159a:	1112      	asrs	r2, r2, #4
 801159c:	4601      	mov	r1, r0
 801159e:	2a01      	cmp	r2, #1
 80115a0:	dc23      	bgt.n	80115ea <_strtod_l+0x53a>
 80115a2:	b108      	cbz	r0, 80115a8 <_strtod_l+0x4f8>
 80115a4:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80115a8:	4a2c      	ldr	r2, [pc, #176]	; (801165c <_strtod_l+0x5ac>)
 80115aa:	482d      	ldr	r0, [pc, #180]	; (8011660 <_strtod_l+0x5b0>)
 80115ac:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80115b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80115b4:	ed91 7b00 	vldr	d7, [r1]
 80115b8:	ec4b ab16 	vmov	d6, sl, fp
 80115bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80115c0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80115c4:	9907      	ldr	r1, [sp, #28]
 80115c6:	4a27      	ldr	r2, [pc, #156]	; (8011664 <_strtod_l+0x5b4>)
 80115c8:	400a      	ands	r2, r1
 80115ca:	4282      	cmp	r2, r0
 80115cc:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80115d0:	d899      	bhi.n	8011506 <_strtod_l+0x456>
 80115d2:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80115d6:	4282      	cmp	r2, r0
 80115d8:	bf86      	itte	hi
 80115da:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 801166c <_strtod_l+0x5bc>
 80115de:	f04f 3aff 	movhi.w	sl, #4294967295
 80115e2:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 80115e6:	2700      	movs	r7, #0
 80115e8:	e070      	b.n	80116cc <_strtod_l+0x61c>
 80115ea:	07d7      	lsls	r7, r2, #31
 80115ec:	d50a      	bpl.n	8011604 <_strtod_l+0x554>
 80115ee:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 80115f2:	ed90 7b00 	vldr	d7, [r0]
 80115f6:	ed9d 6b06 	vldr	d6, [sp, #24]
 80115fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80115fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011602:	2001      	movs	r0, #1
 8011604:	3101      	adds	r1, #1
 8011606:	1052      	asrs	r2, r2, #1
 8011608:	e7c9      	b.n	801159e <_strtod_l+0x4ee>
 801160a:	d0ec      	beq.n	80115e6 <_strtod_l+0x536>
 801160c:	4252      	negs	r2, r2
 801160e:	f012 000f 	ands.w	r0, r2, #15
 8011612:	d00a      	beq.n	801162a <_strtod_l+0x57a>
 8011614:	4910      	ldr	r1, [pc, #64]	; (8011658 <_strtod_l+0x5a8>)
 8011616:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801161a:	ed91 7b00 	vldr	d7, [r1]
 801161e:	ec4b ab16 	vmov	d6, sl, fp
 8011622:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011626:	ec5b ab17 	vmov	sl, fp, d7
 801162a:	1112      	asrs	r2, r2, #4
 801162c:	d0db      	beq.n	80115e6 <_strtod_l+0x536>
 801162e:	2a1f      	cmp	r2, #31
 8011630:	dd1e      	ble.n	8011670 <_strtod_l+0x5c0>
 8011632:	2500      	movs	r5, #0
 8011634:	46a8      	mov	r8, r5
 8011636:	9506      	str	r5, [sp, #24]
 8011638:	46a9      	mov	r9, r5
 801163a:	2322      	movs	r3, #34	; 0x22
 801163c:	f04f 0a00 	mov.w	sl, #0
 8011640:	f04f 0b00 	mov.w	fp, #0
 8011644:	6023      	str	r3, [r4, #0]
 8011646:	e768      	b.n	801151a <_strtod_l+0x46a>
 8011648:	08015059 	.word	0x08015059
 801164c:	080150e3 	.word	0x080150e3
 8011650:	08015061 	.word	0x08015061
 8011654:	080150a4 	.word	0x080150a4
 8011658:	08015188 	.word	0x08015188
 801165c:	08015160 	.word	0x08015160
 8011660:	7ca00000 	.word	0x7ca00000
 8011664:	7ff00000 	.word	0x7ff00000
 8011668:	fff80000 	.word	0xfff80000
 801166c:	7fefffff 	.word	0x7fefffff
 8011670:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8011674:	f012 0710 	ands.w	r7, r2, #16
 8011678:	49ab      	ldr	r1, [pc, #684]	; (8011928 <_strtod_l+0x878>)
 801167a:	bf18      	it	ne
 801167c:	276a      	movne	r7, #106	; 0x6a
 801167e:	2000      	movs	r0, #0
 8011680:	2a00      	cmp	r2, #0
 8011682:	f300 8113 	bgt.w	80118ac <_strtod_l+0x7fc>
 8011686:	b108      	cbz	r0, 801168c <_strtod_l+0x5dc>
 8011688:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 801168c:	b1bf      	cbz	r7, 80116be <_strtod_l+0x60e>
 801168e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011692:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8011696:	2a00      	cmp	r2, #0
 8011698:	4659      	mov	r1, fp
 801169a:	dd10      	ble.n	80116be <_strtod_l+0x60e>
 801169c:	2a1f      	cmp	r2, #31
 801169e:	f340 8113 	ble.w	80118c8 <_strtod_l+0x818>
 80116a2:	2a34      	cmp	r2, #52	; 0x34
 80116a4:	bfde      	ittt	le
 80116a6:	3a20      	suble	r2, #32
 80116a8:	f04f 30ff 	movle.w	r0, #4294967295
 80116ac:	fa00 f202 	lslle.w	r2, r0, r2
 80116b0:	f04f 0a00 	mov.w	sl, #0
 80116b4:	bfcc      	ite	gt
 80116b6:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80116ba:	ea02 0b01 	andle.w	fp, r2, r1
 80116be:	ec4b ab17 	vmov	d7, sl, fp
 80116c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80116c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ca:	d0b2      	beq.n	8011632 <_strtod_l+0x582>
 80116cc:	9a08      	ldr	r2, [sp, #32]
 80116ce:	9200      	str	r2, [sp, #0]
 80116d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80116d2:	462a      	mov	r2, r5
 80116d4:	4620      	mov	r0, r4
 80116d6:	f001 ffa3 	bl	8013620 <__s2b>
 80116da:	9006      	str	r0, [sp, #24]
 80116dc:	2800      	cmp	r0, #0
 80116de:	f43f af12 	beq.w	8011506 <_strtod_l+0x456>
 80116e2:	9a04      	ldr	r2, [sp, #16]
 80116e4:	9b04      	ldr	r3, [sp, #16]
 80116e6:	2a00      	cmp	r2, #0
 80116e8:	f1c3 0300 	rsb	r3, r3, #0
 80116ec:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8011910 <_strtod_l+0x860>
 80116f0:	bfa8      	it	ge
 80116f2:	2300      	movge	r3, #0
 80116f4:	ed9f ab88 	vldr	d10, [pc, #544]	; 8011918 <_strtod_l+0x868>
 80116f8:	ed9f bb89 	vldr	d11, [pc, #548]	; 8011920 <_strtod_l+0x870>
 80116fc:	930e      	str	r3, [sp, #56]	; 0x38
 80116fe:	2500      	movs	r5, #0
 8011700:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011704:	9310      	str	r3, [sp, #64]	; 0x40
 8011706:	46a8      	mov	r8, r5
 8011708:	9b06      	ldr	r3, [sp, #24]
 801170a:	4620      	mov	r0, r4
 801170c:	6859      	ldr	r1, [r3, #4]
 801170e:	f001 ff01 	bl	8013514 <_Balloc>
 8011712:	4681      	mov	r9, r0
 8011714:	2800      	cmp	r0, #0
 8011716:	f43f aefa 	beq.w	801150e <_strtod_l+0x45e>
 801171a:	9b06      	ldr	r3, [sp, #24]
 801171c:	691a      	ldr	r2, [r3, #16]
 801171e:	3202      	adds	r2, #2
 8011720:	f103 010c 	add.w	r1, r3, #12
 8011724:	0092      	lsls	r2, r2, #2
 8011726:	300c      	adds	r0, #12
 8011728:	f7fe fdfa 	bl	8010320 <memcpy>
 801172c:	aa1a      	add	r2, sp, #104	; 0x68
 801172e:	a919      	add	r1, sp, #100	; 0x64
 8011730:	ec4b ab10 	vmov	d0, sl, fp
 8011734:	4620      	mov	r0, r4
 8011736:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801173a:	f002 fa2d 	bl	8013b98 <__d2b>
 801173e:	9018      	str	r0, [sp, #96]	; 0x60
 8011740:	2800      	cmp	r0, #0
 8011742:	f43f aee4 	beq.w	801150e <_strtod_l+0x45e>
 8011746:	2101      	movs	r1, #1
 8011748:	4620      	mov	r0, r4
 801174a:	f001 fff5 	bl	8013738 <__i2b>
 801174e:	4680      	mov	r8, r0
 8011750:	2800      	cmp	r0, #0
 8011752:	f43f aedc 	beq.w	801150e <_strtod_l+0x45e>
 8011756:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8011758:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801175a:	2e00      	cmp	r6, #0
 801175c:	bfb1      	iteee	lt
 801175e:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8011760:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011762:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8011764:	18f3      	addge	r3, r6, r3
 8011766:	bfba      	itte	lt
 8011768:	1b98      	sublt	r0, r3, r6
 801176a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801176c:	9308      	strge	r3, [sp, #32]
 801176e:	eba6 0607 	sub.w	r6, r6, r7
 8011772:	bfb8      	it	lt
 8011774:	9308      	strlt	r3, [sp, #32]
 8011776:	4416      	add	r6, r2
 8011778:	4b6c      	ldr	r3, [pc, #432]	; (801192c <_strtod_l+0x87c>)
 801177a:	3e01      	subs	r6, #1
 801177c:	429e      	cmp	r6, r3
 801177e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011782:	f280 80b4 	bge.w	80118ee <_strtod_l+0x83e>
 8011786:	1b9b      	subs	r3, r3, r6
 8011788:	2b1f      	cmp	r3, #31
 801178a:	eba2 0203 	sub.w	r2, r2, r3
 801178e:	f04f 0101 	mov.w	r1, #1
 8011792:	f300 80a0 	bgt.w	80118d6 <_strtod_l+0x826>
 8011796:	fa01 f303 	lsl.w	r3, r1, r3
 801179a:	9311      	str	r3, [sp, #68]	; 0x44
 801179c:	2300      	movs	r3, #0
 801179e:	930f      	str	r3, [sp, #60]	; 0x3c
 80117a0:	9b08      	ldr	r3, [sp, #32]
 80117a2:	4413      	add	r3, r2
 80117a4:	4402      	add	r2, r0
 80117a6:	18be      	adds	r6, r7, r2
 80117a8:	9a08      	ldr	r2, [sp, #32]
 80117aa:	429a      	cmp	r2, r3
 80117ac:	bfa8      	it	ge
 80117ae:	461a      	movge	r2, r3
 80117b0:	42b2      	cmp	r2, r6
 80117b2:	bfa8      	it	ge
 80117b4:	4632      	movge	r2, r6
 80117b6:	2a00      	cmp	r2, #0
 80117b8:	dd04      	ble.n	80117c4 <_strtod_l+0x714>
 80117ba:	9908      	ldr	r1, [sp, #32]
 80117bc:	1a9b      	subs	r3, r3, r2
 80117be:	1ab6      	subs	r6, r6, r2
 80117c0:	1a8a      	subs	r2, r1, r2
 80117c2:	9208      	str	r2, [sp, #32]
 80117c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80117c6:	b1c2      	cbz	r2, 80117fa <_strtod_l+0x74a>
 80117c8:	4641      	mov	r1, r8
 80117ca:	4620      	mov	r0, r4
 80117cc:	9315      	str	r3, [sp, #84]	; 0x54
 80117ce:	f002 f853 	bl	8013878 <__pow5mult>
 80117d2:	4680      	mov	r8, r0
 80117d4:	2800      	cmp	r0, #0
 80117d6:	f43f ae9a 	beq.w	801150e <_strtod_l+0x45e>
 80117da:	4601      	mov	r1, r0
 80117dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80117de:	4620      	mov	r0, r4
 80117e0:	f001 ffb3 	bl	801374a <__multiply>
 80117e4:	900c      	str	r0, [sp, #48]	; 0x30
 80117e6:	2800      	cmp	r0, #0
 80117e8:	f43f ae91 	beq.w	801150e <_strtod_l+0x45e>
 80117ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80117ee:	4620      	mov	r0, r4
 80117f0:	f001 fec4 	bl	801357c <_Bfree>
 80117f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80117f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80117f8:	9218      	str	r2, [sp, #96]	; 0x60
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	dc7c      	bgt.n	80118f8 <_strtod_l+0x848>
 80117fe:	9b04      	ldr	r3, [sp, #16]
 8011800:	2b00      	cmp	r3, #0
 8011802:	dd08      	ble.n	8011816 <_strtod_l+0x766>
 8011804:	4649      	mov	r1, r9
 8011806:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011808:	4620      	mov	r0, r4
 801180a:	f002 f835 	bl	8013878 <__pow5mult>
 801180e:	4681      	mov	r9, r0
 8011810:	2800      	cmp	r0, #0
 8011812:	f43f ae7c 	beq.w	801150e <_strtod_l+0x45e>
 8011816:	2e00      	cmp	r6, #0
 8011818:	dd08      	ble.n	801182c <_strtod_l+0x77c>
 801181a:	4649      	mov	r1, r9
 801181c:	4632      	mov	r2, r6
 801181e:	4620      	mov	r0, r4
 8011820:	f002 f878 	bl	8013914 <__lshift>
 8011824:	4681      	mov	r9, r0
 8011826:	2800      	cmp	r0, #0
 8011828:	f43f ae71 	beq.w	801150e <_strtod_l+0x45e>
 801182c:	9b08      	ldr	r3, [sp, #32]
 801182e:	2b00      	cmp	r3, #0
 8011830:	dd08      	ble.n	8011844 <_strtod_l+0x794>
 8011832:	4641      	mov	r1, r8
 8011834:	461a      	mov	r2, r3
 8011836:	4620      	mov	r0, r4
 8011838:	f002 f86c 	bl	8013914 <__lshift>
 801183c:	4680      	mov	r8, r0
 801183e:	2800      	cmp	r0, #0
 8011840:	f43f ae65 	beq.w	801150e <_strtod_l+0x45e>
 8011844:	464a      	mov	r2, r9
 8011846:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011848:	4620      	mov	r0, r4
 801184a:	f002 f8d1 	bl	80139f0 <__mdiff>
 801184e:	4605      	mov	r5, r0
 8011850:	2800      	cmp	r0, #0
 8011852:	f43f ae5c 	beq.w	801150e <_strtod_l+0x45e>
 8011856:	68c3      	ldr	r3, [r0, #12]
 8011858:	930c      	str	r3, [sp, #48]	; 0x30
 801185a:	2300      	movs	r3, #0
 801185c:	60c3      	str	r3, [r0, #12]
 801185e:	4641      	mov	r1, r8
 8011860:	f002 f8ac 	bl	80139bc <__mcmp>
 8011864:	2800      	cmp	r0, #0
 8011866:	da63      	bge.n	8011930 <_strtod_l+0x880>
 8011868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801186a:	b9e3      	cbnz	r3, 80118a6 <_strtod_l+0x7f6>
 801186c:	f1ba 0f00 	cmp.w	sl, #0
 8011870:	d119      	bne.n	80118a6 <_strtod_l+0x7f6>
 8011872:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011876:	b9b3      	cbnz	r3, 80118a6 <_strtod_l+0x7f6>
 8011878:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801187c:	0d1b      	lsrs	r3, r3, #20
 801187e:	051b      	lsls	r3, r3, #20
 8011880:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011884:	d90f      	bls.n	80118a6 <_strtod_l+0x7f6>
 8011886:	696b      	ldr	r3, [r5, #20]
 8011888:	b913      	cbnz	r3, 8011890 <_strtod_l+0x7e0>
 801188a:	692b      	ldr	r3, [r5, #16]
 801188c:	2b01      	cmp	r3, #1
 801188e:	dd0a      	ble.n	80118a6 <_strtod_l+0x7f6>
 8011890:	4629      	mov	r1, r5
 8011892:	2201      	movs	r2, #1
 8011894:	4620      	mov	r0, r4
 8011896:	f002 f83d 	bl	8013914 <__lshift>
 801189a:	4641      	mov	r1, r8
 801189c:	4605      	mov	r5, r0
 801189e:	f002 f88d 	bl	80139bc <__mcmp>
 80118a2:	2800      	cmp	r0, #0
 80118a4:	dc75      	bgt.n	8011992 <_strtod_l+0x8e2>
 80118a6:	2f00      	cmp	r7, #0
 80118a8:	d17f      	bne.n	80119aa <_strtod_l+0x8fa>
 80118aa:	e63a      	b.n	8011522 <_strtod_l+0x472>
 80118ac:	07d6      	lsls	r6, r2, #31
 80118ae:	d508      	bpl.n	80118c2 <_strtod_l+0x812>
 80118b0:	ed9d 6b06 	vldr	d6, [sp, #24]
 80118b4:	ed91 7b00 	vldr	d7, [r1]
 80118b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80118bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80118c0:	2001      	movs	r0, #1
 80118c2:	1052      	asrs	r2, r2, #1
 80118c4:	3108      	adds	r1, #8
 80118c6:	e6db      	b.n	8011680 <_strtod_l+0x5d0>
 80118c8:	f04f 31ff 	mov.w	r1, #4294967295
 80118cc:	fa01 f202 	lsl.w	r2, r1, r2
 80118d0:	ea02 0a0a 	and.w	sl, r2, sl
 80118d4:	e6f3      	b.n	80116be <_strtod_l+0x60e>
 80118d6:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80118da:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80118de:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80118e2:	36e2      	adds	r6, #226	; 0xe2
 80118e4:	fa01 f306 	lsl.w	r3, r1, r6
 80118e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80118ea:	9111      	str	r1, [sp, #68]	; 0x44
 80118ec:	e758      	b.n	80117a0 <_strtod_l+0x6f0>
 80118ee:	2300      	movs	r3, #0
 80118f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80118f2:	2301      	movs	r3, #1
 80118f4:	9311      	str	r3, [sp, #68]	; 0x44
 80118f6:	e753      	b.n	80117a0 <_strtod_l+0x6f0>
 80118f8:	461a      	mov	r2, r3
 80118fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80118fc:	4620      	mov	r0, r4
 80118fe:	f002 f809 	bl	8013914 <__lshift>
 8011902:	9018      	str	r0, [sp, #96]	; 0x60
 8011904:	2800      	cmp	r0, #0
 8011906:	f47f af7a 	bne.w	80117fe <_strtod_l+0x74e>
 801190a:	e600      	b.n	801150e <_strtod_l+0x45e>
 801190c:	f3af 8000 	nop.w
 8011910:	94a03595 	.word	0x94a03595
 8011914:	3fdfffff 	.word	0x3fdfffff
 8011918:	35afe535 	.word	0x35afe535
 801191c:	3fe00000 	.word	0x3fe00000
 8011920:	94a03595 	.word	0x94a03595
 8011924:	3fcfffff 	.word	0x3fcfffff
 8011928:	080150b8 	.word	0x080150b8
 801192c:	fffffc02 	.word	0xfffffc02
 8011930:	f8cd b020 	str.w	fp, [sp, #32]
 8011934:	f040 8085 	bne.w	8011a42 <_strtod_l+0x992>
 8011938:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801193a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801193e:	b322      	cbz	r2, 801198a <_strtod_l+0x8da>
 8011940:	4ab7      	ldr	r2, [pc, #732]	; (8011c20 <_strtod_l+0xb70>)
 8011942:	4293      	cmp	r3, r2
 8011944:	d154      	bne.n	80119f0 <_strtod_l+0x940>
 8011946:	4651      	mov	r1, sl
 8011948:	b1e7      	cbz	r7, 8011984 <_strtod_l+0x8d4>
 801194a:	4bb6      	ldr	r3, [pc, #728]	; (8011c24 <_strtod_l+0xb74>)
 801194c:	465a      	mov	r2, fp
 801194e:	4013      	ands	r3, r2
 8011950:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011954:	f04f 32ff 	mov.w	r2, #4294967295
 8011958:	d803      	bhi.n	8011962 <_strtod_l+0x8b2>
 801195a:	0d1b      	lsrs	r3, r3, #20
 801195c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011960:	409a      	lsls	r2, r3
 8011962:	4291      	cmp	r1, r2
 8011964:	d144      	bne.n	80119f0 <_strtod_l+0x940>
 8011966:	4bb0      	ldr	r3, [pc, #704]	; (8011c28 <_strtod_l+0xb78>)
 8011968:	9a08      	ldr	r2, [sp, #32]
 801196a:	429a      	cmp	r2, r3
 801196c:	d102      	bne.n	8011974 <_strtod_l+0x8c4>
 801196e:	3101      	adds	r1, #1
 8011970:	f43f adcd 	beq.w	801150e <_strtod_l+0x45e>
 8011974:	4bab      	ldr	r3, [pc, #684]	; (8011c24 <_strtod_l+0xb74>)
 8011976:	9a08      	ldr	r2, [sp, #32]
 8011978:	401a      	ands	r2, r3
 801197a:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 801197e:	f04f 0a00 	mov.w	sl, #0
 8011982:	e790      	b.n	80118a6 <_strtod_l+0x7f6>
 8011984:	f04f 32ff 	mov.w	r2, #4294967295
 8011988:	e7eb      	b.n	8011962 <_strtod_l+0x8b2>
 801198a:	bb8b      	cbnz	r3, 80119f0 <_strtod_l+0x940>
 801198c:	f1ba 0f00 	cmp.w	sl, #0
 8011990:	d12e      	bne.n	80119f0 <_strtod_l+0x940>
 8011992:	465b      	mov	r3, fp
 8011994:	4aa3      	ldr	r2, [pc, #652]	; (8011c24 <_strtod_l+0xb74>)
 8011996:	b30f      	cbz	r7, 80119dc <_strtod_l+0x92c>
 8011998:	ea02 010b 	and.w	r1, r2, fp
 801199c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80119a0:	dc1c      	bgt.n	80119dc <_strtod_l+0x92c>
 80119a2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80119a6:	f77f ae48 	ble.w	801163a <_strtod_l+0x58a>
 80119aa:	4aa0      	ldr	r2, [pc, #640]	; (8011c2c <_strtod_l+0xb7c>)
 80119ac:	2300      	movs	r3, #0
 80119ae:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 80119b2:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 80119b6:	ec4b ab17 	vmov	d7, sl, fp
 80119ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80119be:	ed8d 7b04 	vstr	d7, [sp, #16]
 80119c2:	9b05      	ldr	r3, [sp, #20]
 80119c4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	f47f adaa 	bne.w	8011522 <_strtod_l+0x472>
 80119ce:	9b04      	ldr	r3, [sp, #16]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	f47f ada6 	bne.w	8011522 <_strtod_l+0x472>
 80119d6:	2322      	movs	r3, #34	; 0x22
 80119d8:	6023      	str	r3, [r4, #0]
 80119da:	e5a2      	b.n	8011522 <_strtod_l+0x472>
 80119dc:	4013      	ands	r3, r2
 80119de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80119e2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80119e6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80119ea:	f04f 3aff 	mov.w	sl, #4294967295
 80119ee:	e75a      	b.n	80118a6 <_strtod_l+0x7f6>
 80119f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80119f2:	b18b      	cbz	r3, 8011a18 <_strtod_l+0x968>
 80119f4:	9a08      	ldr	r2, [sp, #32]
 80119f6:	4213      	tst	r3, r2
 80119f8:	f43f af55 	beq.w	80118a6 <_strtod_l+0x7f6>
 80119fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80119fe:	463a      	mov	r2, r7
 8011a00:	4650      	mov	r0, sl
 8011a02:	4659      	mov	r1, fp
 8011a04:	b163      	cbz	r3, 8011a20 <_strtod_l+0x970>
 8011a06:	f7ff fb39 	bl	801107c <sulp>
 8011a0a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011a0e:	ee37 7b00 	vadd.f64	d7, d7, d0
 8011a12:	ec5b ab17 	vmov	sl, fp, d7
 8011a16:	e746      	b.n	80118a6 <_strtod_l+0x7f6>
 8011a18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a1a:	ea13 0f0a 	tst.w	r3, sl
 8011a1e:	e7eb      	b.n	80119f8 <_strtod_l+0x948>
 8011a20:	f7ff fb2c 	bl	801107c <sulp>
 8011a24:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011a28:	ee37 7b40 	vsub.f64	d7, d7, d0
 8011a2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011a30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a38:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011a3c:	f43f adfd 	beq.w	801163a <_strtod_l+0x58a>
 8011a40:	e731      	b.n	80118a6 <_strtod_l+0x7f6>
 8011a42:	4641      	mov	r1, r8
 8011a44:	4628      	mov	r0, r5
 8011a46:	f002 f8f6 	bl	8013c36 <__ratio>
 8011a4a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011a4e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a56:	d869      	bhi.n	8011b2c <_strtod_l+0xa7c>
 8011a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d045      	beq.n	8011aea <_strtod_l+0xa3a>
 8011a5e:	4b74      	ldr	r3, [pc, #464]	; (8011c30 <_strtod_l+0xb80>)
 8011a60:	2200      	movs	r2, #0
 8011a62:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8011a66:	9808      	ldr	r0, [sp, #32]
 8011a68:	496e      	ldr	r1, [pc, #440]	; (8011c24 <_strtod_l+0xb74>)
 8011a6a:	ea00 0601 	and.w	r6, r0, r1
 8011a6e:	4871      	ldr	r0, [pc, #452]	; (8011c34 <_strtod_l+0xb84>)
 8011a70:	4286      	cmp	r6, r0
 8011a72:	f040 8089 	bne.w	8011b88 <_strtod_l+0xad8>
 8011a76:	910f      	str	r1, [sp, #60]	; 0x3c
 8011a78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011a7c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8011a80:	9908      	ldr	r1, [sp, #32]
 8011a82:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8011a86:	ec4b ab10 	vmov	d0, sl, fp
 8011a8a:	ec43 2b1c 	vmov	d12, r2, r3
 8011a8e:	f002 f80d 	bl	8013aac <__ulp>
 8011a92:	ec4b ab1d 	vmov	d13, sl, fp
 8011a96:	eeac db00 	vfma.f64	d13, d12, d0
 8011a9a:	ed8d db08 	vstr	d13, [sp, #32]
 8011a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011aa0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011aa2:	4a65      	ldr	r2, [pc, #404]	; (8011c38 <_strtod_l+0xb88>)
 8011aa4:	4019      	ands	r1, r3
 8011aa6:	4291      	cmp	r1, r2
 8011aa8:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8011aac:	d948      	bls.n	8011b40 <_strtod_l+0xa90>
 8011aae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ab0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	d103      	bne.n	8011ac0 <_strtod_l+0xa10>
 8011ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011aba:	3301      	adds	r3, #1
 8011abc:	f43f ad27 	beq.w	801150e <_strtod_l+0x45e>
 8011ac0:	f8df b164 	ldr.w	fp, [pc, #356]	; 8011c28 <_strtod_l+0xb78>
 8011ac4:	f04f 3aff 	mov.w	sl, #4294967295
 8011ac8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011aca:	4620      	mov	r0, r4
 8011acc:	f001 fd56 	bl	801357c <_Bfree>
 8011ad0:	4649      	mov	r1, r9
 8011ad2:	4620      	mov	r0, r4
 8011ad4:	f001 fd52 	bl	801357c <_Bfree>
 8011ad8:	4641      	mov	r1, r8
 8011ada:	4620      	mov	r0, r4
 8011adc:	f001 fd4e 	bl	801357c <_Bfree>
 8011ae0:	4629      	mov	r1, r5
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	f001 fd4a 	bl	801357c <_Bfree>
 8011ae8:	e60e      	b.n	8011708 <_strtod_l+0x658>
 8011aea:	f1ba 0f00 	cmp.w	sl, #0
 8011aee:	d113      	bne.n	8011b18 <_strtod_l+0xa68>
 8011af0:	9b08      	ldr	r3, [sp, #32]
 8011af2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011af6:	b9b3      	cbnz	r3, 8011b26 <_strtod_l+0xa76>
 8011af8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011afc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b04:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011b08:	d401      	bmi.n	8011b0e <_strtod_l+0xa5e>
 8011b0a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011b0e:	eeb1 7b48 	vneg.f64	d7, d8
 8011b12:	ec53 2b17 	vmov	r2, r3, d7
 8011b16:	e7a6      	b.n	8011a66 <_strtod_l+0x9b6>
 8011b18:	f1ba 0f01 	cmp.w	sl, #1
 8011b1c:	d103      	bne.n	8011b26 <_strtod_l+0xa76>
 8011b1e:	9b08      	ldr	r3, [sp, #32]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	f43f ad8a 	beq.w	801163a <_strtod_l+0x58a>
 8011b26:	2200      	movs	r2, #0
 8011b28:	4b44      	ldr	r3, [pc, #272]	; (8011c3c <_strtod_l+0xb8c>)
 8011b2a:	e79a      	b.n	8011a62 <_strtod_l+0x9b2>
 8011b2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b2e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011b32:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d0e9      	beq.n	8011b0e <_strtod_l+0xa5e>
 8011b3a:	ec53 2b18 	vmov	r2, r3, d8
 8011b3e:	e792      	b.n	8011a66 <_strtod_l+0x9b6>
 8011b40:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011b44:	2f00      	cmp	r7, #0
 8011b46:	d1bf      	bne.n	8011ac8 <_strtod_l+0xa18>
 8011b48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011b4c:	0d1b      	lsrs	r3, r3, #20
 8011b4e:	051b      	lsls	r3, r3, #20
 8011b50:	429e      	cmp	r6, r3
 8011b52:	d1b9      	bne.n	8011ac8 <_strtod_l+0xa18>
 8011b54:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8011b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b5a:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8011b5e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011b62:	b92b      	cbnz	r3, 8011b70 <_strtod_l+0xac0>
 8011b64:	f1ba 0f00 	cmp.w	sl, #0
 8011b68:	d102      	bne.n	8011b70 <_strtod_l+0xac0>
 8011b6a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8011b6e:	b3d2      	cbz	r2, 8011be6 <_strtod_l+0xb36>
 8011b70:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b78:	f53f acd3 	bmi.w	8011522 <_strtod_l+0x472>
 8011b7c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8011b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b84:	dda0      	ble.n	8011ac8 <_strtod_l+0xa18>
 8011b86:	e4cc      	b.n	8011522 <_strtod_l+0x472>
 8011b88:	b1ef      	cbz	r7, 8011bc6 <_strtod_l+0xb16>
 8011b8a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8011b8e:	d81a      	bhi.n	8011bc6 <_strtod_l+0xb16>
 8011b90:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8011c18 <_strtod_l+0xb68>
 8011b94:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b9c:	d810      	bhi.n	8011bc0 <_strtod_l+0xb10>
 8011b9e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8011ba2:	ee17 3a90 	vmov	r3, s15
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	bf08      	it	eq
 8011baa:	2301      	moveq	r3, #1
 8011bac:	ee07 3a90 	vmov	s15, r3
 8011bb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011bb2:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8011bb6:	b99b      	cbnz	r3, 8011be0 <_strtod_l+0xb30>
 8011bb8:	eeb1 7b48 	vneg.f64	d7, d8
 8011bbc:	ec53 2b17 	vmov	r2, r3, d7
 8011bc0:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8011bc4:	1b8b      	subs	r3, r1, r6
 8011bc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011bca:	ec43 2b1c 	vmov	d12, r2, r3
 8011bce:	f001 ff6d 	bl	8013aac <__ulp>
 8011bd2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011bd6:	eeac 7b00 	vfma.f64	d7, d12, d0
 8011bda:	ec5b ab17 	vmov	sl, fp, d7
 8011bde:	e7b1      	b.n	8011b44 <_strtod_l+0xa94>
 8011be0:	ec53 2b18 	vmov	r2, r3, d8
 8011be4:	e7ec      	b.n	8011bc0 <_strtod_l+0xb10>
 8011be6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8011bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bee:	f57f af6b 	bpl.w	8011ac8 <_strtod_l+0xa18>
 8011bf2:	e496      	b.n	8011522 <_strtod_l+0x472>
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	930d      	str	r3, [sp, #52]	; 0x34
 8011bf8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011bfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011bfc:	6013      	str	r3, [r2, #0]
 8011bfe:	f7ff ba9d 	b.w	801113c <_strtod_l+0x8c>
 8011c02:	2a65      	cmp	r2, #101	; 0x65
 8011c04:	f04f 0100 	mov.w	r1, #0
 8011c08:	f43f ab97 	beq.w	801133a <_strtod_l+0x28a>
 8011c0c:	2701      	movs	r7, #1
 8011c0e:	460b      	mov	r3, r1
 8011c10:	9704      	str	r7, [sp, #16]
 8011c12:	f7ff bb0a 	b.w	801122a <_strtod_l+0x17a>
 8011c16:	bf00      	nop
 8011c18:	ffc00000 	.word	0xffc00000
 8011c1c:	41dfffff 	.word	0x41dfffff
 8011c20:	000fffff 	.word	0x000fffff
 8011c24:	7ff00000 	.word	0x7ff00000
 8011c28:	7fefffff 	.word	0x7fefffff
 8011c2c:	39500000 	.word	0x39500000
 8011c30:	3ff00000 	.word	0x3ff00000
 8011c34:	7fe00000 	.word	0x7fe00000
 8011c38:	7c9fffff 	.word	0x7c9fffff
 8011c3c:	bff00000 	.word	0xbff00000

08011c40 <_strtod_r>:
 8011c40:	4b05      	ldr	r3, [pc, #20]	; (8011c58 <_strtod_r+0x18>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	b410      	push	{r4}
 8011c46:	6a1b      	ldr	r3, [r3, #32]
 8011c48:	4c04      	ldr	r4, [pc, #16]	; (8011c5c <_strtod_r+0x1c>)
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	bf08      	it	eq
 8011c4e:	4623      	moveq	r3, r4
 8011c50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c54:	f7ff ba2c 	b.w	80110b0 <_strtod_l>
 8011c58:	20000198 	.word	0x20000198
 8011c5c:	200001fc 	.word	0x200001fc

08011c60 <_strtol_l.isra.0>:
 8011c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c64:	4680      	mov	r8, r0
 8011c66:	4689      	mov	r9, r1
 8011c68:	4692      	mov	sl, r2
 8011c6a:	461e      	mov	r6, r3
 8011c6c:	460f      	mov	r7, r1
 8011c6e:	463d      	mov	r5, r7
 8011c70:	9808      	ldr	r0, [sp, #32]
 8011c72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011c76:	f001 fbbb 	bl	80133f0 <__locale_ctype_ptr_l>
 8011c7a:	4420      	add	r0, r4
 8011c7c:	7843      	ldrb	r3, [r0, #1]
 8011c7e:	f013 0308 	ands.w	r3, r3, #8
 8011c82:	d132      	bne.n	8011cea <_strtol_l.isra.0+0x8a>
 8011c84:	2c2d      	cmp	r4, #45	; 0x2d
 8011c86:	d132      	bne.n	8011cee <_strtol_l.isra.0+0x8e>
 8011c88:	787c      	ldrb	r4, [r7, #1]
 8011c8a:	1cbd      	adds	r5, r7, #2
 8011c8c:	2201      	movs	r2, #1
 8011c8e:	2e00      	cmp	r6, #0
 8011c90:	d05d      	beq.n	8011d4e <_strtol_l.isra.0+0xee>
 8011c92:	2e10      	cmp	r6, #16
 8011c94:	d109      	bne.n	8011caa <_strtol_l.isra.0+0x4a>
 8011c96:	2c30      	cmp	r4, #48	; 0x30
 8011c98:	d107      	bne.n	8011caa <_strtol_l.isra.0+0x4a>
 8011c9a:	782b      	ldrb	r3, [r5, #0]
 8011c9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011ca0:	2b58      	cmp	r3, #88	; 0x58
 8011ca2:	d14f      	bne.n	8011d44 <_strtol_l.isra.0+0xe4>
 8011ca4:	786c      	ldrb	r4, [r5, #1]
 8011ca6:	2610      	movs	r6, #16
 8011ca8:	3502      	adds	r5, #2
 8011caa:	2a00      	cmp	r2, #0
 8011cac:	bf14      	ite	ne
 8011cae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8011cb2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8011cb6:	2700      	movs	r7, #0
 8011cb8:	fbb1 fcf6 	udiv	ip, r1, r6
 8011cbc:	4638      	mov	r0, r7
 8011cbe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8011cc2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011cc6:	2b09      	cmp	r3, #9
 8011cc8:	d817      	bhi.n	8011cfa <_strtol_l.isra.0+0x9a>
 8011cca:	461c      	mov	r4, r3
 8011ccc:	42a6      	cmp	r6, r4
 8011cce:	dd23      	ble.n	8011d18 <_strtol_l.isra.0+0xb8>
 8011cd0:	1c7b      	adds	r3, r7, #1
 8011cd2:	d007      	beq.n	8011ce4 <_strtol_l.isra.0+0x84>
 8011cd4:	4584      	cmp	ip, r0
 8011cd6:	d31c      	bcc.n	8011d12 <_strtol_l.isra.0+0xb2>
 8011cd8:	d101      	bne.n	8011cde <_strtol_l.isra.0+0x7e>
 8011cda:	45a6      	cmp	lr, r4
 8011cdc:	db19      	blt.n	8011d12 <_strtol_l.isra.0+0xb2>
 8011cde:	fb00 4006 	mla	r0, r0, r6, r4
 8011ce2:	2701      	movs	r7, #1
 8011ce4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ce8:	e7eb      	b.n	8011cc2 <_strtol_l.isra.0+0x62>
 8011cea:	462f      	mov	r7, r5
 8011cec:	e7bf      	b.n	8011c6e <_strtol_l.isra.0+0xe>
 8011cee:	2c2b      	cmp	r4, #43	; 0x2b
 8011cf0:	bf04      	itt	eq
 8011cf2:	1cbd      	addeq	r5, r7, #2
 8011cf4:	787c      	ldrbeq	r4, [r7, #1]
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	e7c9      	b.n	8011c8e <_strtol_l.isra.0+0x2e>
 8011cfa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8011cfe:	2b19      	cmp	r3, #25
 8011d00:	d801      	bhi.n	8011d06 <_strtol_l.isra.0+0xa6>
 8011d02:	3c37      	subs	r4, #55	; 0x37
 8011d04:	e7e2      	b.n	8011ccc <_strtol_l.isra.0+0x6c>
 8011d06:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8011d0a:	2b19      	cmp	r3, #25
 8011d0c:	d804      	bhi.n	8011d18 <_strtol_l.isra.0+0xb8>
 8011d0e:	3c57      	subs	r4, #87	; 0x57
 8011d10:	e7dc      	b.n	8011ccc <_strtol_l.isra.0+0x6c>
 8011d12:	f04f 37ff 	mov.w	r7, #4294967295
 8011d16:	e7e5      	b.n	8011ce4 <_strtol_l.isra.0+0x84>
 8011d18:	1c7b      	adds	r3, r7, #1
 8011d1a:	d108      	bne.n	8011d2e <_strtol_l.isra.0+0xce>
 8011d1c:	2322      	movs	r3, #34	; 0x22
 8011d1e:	f8c8 3000 	str.w	r3, [r8]
 8011d22:	4608      	mov	r0, r1
 8011d24:	f1ba 0f00 	cmp.w	sl, #0
 8011d28:	d107      	bne.n	8011d3a <_strtol_l.isra.0+0xda>
 8011d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d2e:	b102      	cbz	r2, 8011d32 <_strtol_l.isra.0+0xd2>
 8011d30:	4240      	negs	r0, r0
 8011d32:	f1ba 0f00 	cmp.w	sl, #0
 8011d36:	d0f8      	beq.n	8011d2a <_strtol_l.isra.0+0xca>
 8011d38:	b10f      	cbz	r7, 8011d3e <_strtol_l.isra.0+0xde>
 8011d3a:	f105 39ff 	add.w	r9, r5, #4294967295
 8011d3e:	f8ca 9000 	str.w	r9, [sl]
 8011d42:	e7f2      	b.n	8011d2a <_strtol_l.isra.0+0xca>
 8011d44:	2430      	movs	r4, #48	; 0x30
 8011d46:	2e00      	cmp	r6, #0
 8011d48:	d1af      	bne.n	8011caa <_strtol_l.isra.0+0x4a>
 8011d4a:	2608      	movs	r6, #8
 8011d4c:	e7ad      	b.n	8011caa <_strtol_l.isra.0+0x4a>
 8011d4e:	2c30      	cmp	r4, #48	; 0x30
 8011d50:	d0a3      	beq.n	8011c9a <_strtol_l.isra.0+0x3a>
 8011d52:	260a      	movs	r6, #10
 8011d54:	e7a9      	b.n	8011caa <_strtol_l.isra.0+0x4a>
	...

08011d58 <_strtol_r>:
 8011d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d5a:	4c06      	ldr	r4, [pc, #24]	; (8011d74 <_strtol_r+0x1c>)
 8011d5c:	4d06      	ldr	r5, [pc, #24]	; (8011d78 <_strtol_r+0x20>)
 8011d5e:	6824      	ldr	r4, [r4, #0]
 8011d60:	6a24      	ldr	r4, [r4, #32]
 8011d62:	2c00      	cmp	r4, #0
 8011d64:	bf08      	it	eq
 8011d66:	462c      	moveq	r4, r5
 8011d68:	9400      	str	r4, [sp, #0]
 8011d6a:	f7ff ff79 	bl	8011c60 <_strtol_l.isra.0>
 8011d6e:	b003      	add	sp, #12
 8011d70:	bd30      	pop	{r4, r5, pc}
 8011d72:	bf00      	nop
 8011d74:	20000198 	.word	0x20000198
 8011d78:	200001fc 	.word	0x200001fc

08011d7c <__swbuf_r>:
 8011d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d7e:	460e      	mov	r6, r1
 8011d80:	4614      	mov	r4, r2
 8011d82:	4605      	mov	r5, r0
 8011d84:	b118      	cbz	r0, 8011d8e <__swbuf_r+0x12>
 8011d86:	6983      	ldr	r3, [r0, #24]
 8011d88:	b90b      	cbnz	r3, 8011d8e <__swbuf_r+0x12>
 8011d8a:	f000 ff81 	bl	8012c90 <__sinit>
 8011d8e:	4b21      	ldr	r3, [pc, #132]	; (8011e14 <__swbuf_r+0x98>)
 8011d90:	429c      	cmp	r4, r3
 8011d92:	d12a      	bne.n	8011dea <__swbuf_r+0x6e>
 8011d94:	686c      	ldr	r4, [r5, #4]
 8011d96:	69a3      	ldr	r3, [r4, #24]
 8011d98:	60a3      	str	r3, [r4, #8]
 8011d9a:	89a3      	ldrh	r3, [r4, #12]
 8011d9c:	071a      	lsls	r2, r3, #28
 8011d9e:	d52e      	bpl.n	8011dfe <__swbuf_r+0x82>
 8011da0:	6923      	ldr	r3, [r4, #16]
 8011da2:	b363      	cbz	r3, 8011dfe <__swbuf_r+0x82>
 8011da4:	6923      	ldr	r3, [r4, #16]
 8011da6:	6820      	ldr	r0, [r4, #0]
 8011da8:	1ac0      	subs	r0, r0, r3
 8011daa:	6963      	ldr	r3, [r4, #20]
 8011dac:	b2f6      	uxtb	r6, r6
 8011dae:	4283      	cmp	r3, r0
 8011db0:	4637      	mov	r7, r6
 8011db2:	dc04      	bgt.n	8011dbe <__swbuf_r+0x42>
 8011db4:	4621      	mov	r1, r4
 8011db6:	4628      	mov	r0, r5
 8011db8:	f000 ff00 	bl	8012bbc <_fflush_r>
 8011dbc:	bb28      	cbnz	r0, 8011e0a <__swbuf_r+0x8e>
 8011dbe:	68a3      	ldr	r3, [r4, #8]
 8011dc0:	3b01      	subs	r3, #1
 8011dc2:	60a3      	str	r3, [r4, #8]
 8011dc4:	6823      	ldr	r3, [r4, #0]
 8011dc6:	1c5a      	adds	r2, r3, #1
 8011dc8:	6022      	str	r2, [r4, #0]
 8011dca:	701e      	strb	r6, [r3, #0]
 8011dcc:	6963      	ldr	r3, [r4, #20]
 8011dce:	3001      	adds	r0, #1
 8011dd0:	4283      	cmp	r3, r0
 8011dd2:	d004      	beq.n	8011dde <__swbuf_r+0x62>
 8011dd4:	89a3      	ldrh	r3, [r4, #12]
 8011dd6:	07db      	lsls	r3, r3, #31
 8011dd8:	d519      	bpl.n	8011e0e <__swbuf_r+0x92>
 8011dda:	2e0a      	cmp	r6, #10
 8011ddc:	d117      	bne.n	8011e0e <__swbuf_r+0x92>
 8011dde:	4621      	mov	r1, r4
 8011de0:	4628      	mov	r0, r5
 8011de2:	f000 feeb 	bl	8012bbc <_fflush_r>
 8011de6:	b190      	cbz	r0, 8011e0e <__swbuf_r+0x92>
 8011de8:	e00f      	b.n	8011e0a <__swbuf_r+0x8e>
 8011dea:	4b0b      	ldr	r3, [pc, #44]	; (8011e18 <__swbuf_r+0x9c>)
 8011dec:	429c      	cmp	r4, r3
 8011dee:	d101      	bne.n	8011df4 <__swbuf_r+0x78>
 8011df0:	68ac      	ldr	r4, [r5, #8]
 8011df2:	e7d0      	b.n	8011d96 <__swbuf_r+0x1a>
 8011df4:	4b09      	ldr	r3, [pc, #36]	; (8011e1c <__swbuf_r+0xa0>)
 8011df6:	429c      	cmp	r4, r3
 8011df8:	bf08      	it	eq
 8011dfa:	68ec      	ldreq	r4, [r5, #12]
 8011dfc:	e7cb      	b.n	8011d96 <__swbuf_r+0x1a>
 8011dfe:	4621      	mov	r1, r4
 8011e00:	4628      	mov	r0, r5
 8011e02:	f000 f80d 	bl	8011e20 <__swsetup_r>
 8011e06:	2800      	cmp	r0, #0
 8011e08:	d0cc      	beq.n	8011da4 <__swbuf_r+0x28>
 8011e0a:	f04f 37ff 	mov.w	r7, #4294967295
 8011e0e:	4638      	mov	r0, r7
 8011e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e12:	bf00      	nop
 8011e14:	08015110 	.word	0x08015110
 8011e18:	08015130 	.word	0x08015130
 8011e1c:	080150f0 	.word	0x080150f0

08011e20 <__swsetup_r>:
 8011e20:	4b32      	ldr	r3, [pc, #200]	; (8011eec <__swsetup_r+0xcc>)
 8011e22:	b570      	push	{r4, r5, r6, lr}
 8011e24:	681d      	ldr	r5, [r3, #0]
 8011e26:	4606      	mov	r6, r0
 8011e28:	460c      	mov	r4, r1
 8011e2a:	b125      	cbz	r5, 8011e36 <__swsetup_r+0x16>
 8011e2c:	69ab      	ldr	r3, [r5, #24]
 8011e2e:	b913      	cbnz	r3, 8011e36 <__swsetup_r+0x16>
 8011e30:	4628      	mov	r0, r5
 8011e32:	f000 ff2d 	bl	8012c90 <__sinit>
 8011e36:	4b2e      	ldr	r3, [pc, #184]	; (8011ef0 <__swsetup_r+0xd0>)
 8011e38:	429c      	cmp	r4, r3
 8011e3a:	d10f      	bne.n	8011e5c <__swsetup_r+0x3c>
 8011e3c:	686c      	ldr	r4, [r5, #4]
 8011e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e42:	b29a      	uxth	r2, r3
 8011e44:	0715      	lsls	r5, r2, #28
 8011e46:	d42c      	bmi.n	8011ea2 <__swsetup_r+0x82>
 8011e48:	06d0      	lsls	r0, r2, #27
 8011e4a:	d411      	bmi.n	8011e70 <__swsetup_r+0x50>
 8011e4c:	2209      	movs	r2, #9
 8011e4e:	6032      	str	r2, [r6, #0]
 8011e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e54:	81a3      	strh	r3, [r4, #12]
 8011e56:	f04f 30ff 	mov.w	r0, #4294967295
 8011e5a:	e03e      	b.n	8011eda <__swsetup_r+0xba>
 8011e5c:	4b25      	ldr	r3, [pc, #148]	; (8011ef4 <__swsetup_r+0xd4>)
 8011e5e:	429c      	cmp	r4, r3
 8011e60:	d101      	bne.n	8011e66 <__swsetup_r+0x46>
 8011e62:	68ac      	ldr	r4, [r5, #8]
 8011e64:	e7eb      	b.n	8011e3e <__swsetup_r+0x1e>
 8011e66:	4b24      	ldr	r3, [pc, #144]	; (8011ef8 <__swsetup_r+0xd8>)
 8011e68:	429c      	cmp	r4, r3
 8011e6a:	bf08      	it	eq
 8011e6c:	68ec      	ldreq	r4, [r5, #12]
 8011e6e:	e7e6      	b.n	8011e3e <__swsetup_r+0x1e>
 8011e70:	0751      	lsls	r1, r2, #29
 8011e72:	d512      	bpl.n	8011e9a <__swsetup_r+0x7a>
 8011e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e76:	b141      	cbz	r1, 8011e8a <__swsetup_r+0x6a>
 8011e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e7c:	4299      	cmp	r1, r3
 8011e7e:	d002      	beq.n	8011e86 <__swsetup_r+0x66>
 8011e80:	4630      	mov	r0, r6
 8011e82:	f001 ff55 	bl	8013d30 <_free_r>
 8011e86:	2300      	movs	r3, #0
 8011e88:	6363      	str	r3, [r4, #52]	; 0x34
 8011e8a:	89a3      	ldrh	r3, [r4, #12]
 8011e8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011e90:	81a3      	strh	r3, [r4, #12]
 8011e92:	2300      	movs	r3, #0
 8011e94:	6063      	str	r3, [r4, #4]
 8011e96:	6923      	ldr	r3, [r4, #16]
 8011e98:	6023      	str	r3, [r4, #0]
 8011e9a:	89a3      	ldrh	r3, [r4, #12]
 8011e9c:	f043 0308 	orr.w	r3, r3, #8
 8011ea0:	81a3      	strh	r3, [r4, #12]
 8011ea2:	6923      	ldr	r3, [r4, #16]
 8011ea4:	b94b      	cbnz	r3, 8011eba <__swsetup_r+0x9a>
 8011ea6:	89a3      	ldrh	r3, [r4, #12]
 8011ea8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011eb0:	d003      	beq.n	8011eba <__swsetup_r+0x9a>
 8011eb2:	4621      	mov	r1, r4
 8011eb4:	4630      	mov	r0, r6
 8011eb6:	f001 fad3 	bl	8013460 <__smakebuf_r>
 8011eba:	89a2      	ldrh	r2, [r4, #12]
 8011ebc:	f012 0301 	ands.w	r3, r2, #1
 8011ec0:	d00c      	beq.n	8011edc <__swsetup_r+0xbc>
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	60a3      	str	r3, [r4, #8]
 8011ec6:	6963      	ldr	r3, [r4, #20]
 8011ec8:	425b      	negs	r3, r3
 8011eca:	61a3      	str	r3, [r4, #24]
 8011ecc:	6923      	ldr	r3, [r4, #16]
 8011ece:	b953      	cbnz	r3, 8011ee6 <__swsetup_r+0xc6>
 8011ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ed4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011ed8:	d1ba      	bne.n	8011e50 <__swsetup_r+0x30>
 8011eda:	bd70      	pop	{r4, r5, r6, pc}
 8011edc:	0792      	lsls	r2, r2, #30
 8011ede:	bf58      	it	pl
 8011ee0:	6963      	ldrpl	r3, [r4, #20]
 8011ee2:	60a3      	str	r3, [r4, #8]
 8011ee4:	e7f2      	b.n	8011ecc <__swsetup_r+0xac>
 8011ee6:	2000      	movs	r0, #0
 8011ee8:	e7f7      	b.n	8011eda <__swsetup_r+0xba>
 8011eea:	bf00      	nop
 8011eec:	20000198 	.word	0x20000198
 8011ef0:	08015110 	.word	0x08015110
 8011ef4:	08015130 	.word	0x08015130
 8011ef8:	080150f0 	.word	0x080150f0

08011efc <quorem>:
 8011efc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f00:	6903      	ldr	r3, [r0, #16]
 8011f02:	690c      	ldr	r4, [r1, #16]
 8011f04:	42a3      	cmp	r3, r4
 8011f06:	4680      	mov	r8, r0
 8011f08:	f2c0 8082 	blt.w	8012010 <quorem+0x114>
 8011f0c:	3c01      	subs	r4, #1
 8011f0e:	f101 0714 	add.w	r7, r1, #20
 8011f12:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011f16:	f100 0614 	add.w	r6, r0, #20
 8011f1a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8011f1e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8011f22:	eb06 030c 	add.w	r3, r6, ip
 8011f26:	3501      	adds	r5, #1
 8011f28:	eb07 090c 	add.w	r9, r7, ip
 8011f2c:	9301      	str	r3, [sp, #4]
 8011f2e:	fbb0 f5f5 	udiv	r5, r0, r5
 8011f32:	b395      	cbz	r5, 8011f9a <quorem+0x9e>
 8011f34:	f04f 0a00 	mov.w	sl, #0
 8011f38:	4638      	mov	r0, r7
 8011f3a:	46b6      	mov	lr, r6
 8011f3c:	46d3      	mov	fp, sl
 8011f3e:	f850 2b04 	ldr.w	r2, [r0], #4
 8011f42:	b293      	uxth	r3, r2
 8011f44:	fb05 a303 	mla	r3, r5, r3, sl
 8011f48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011f4c:	b29b      	uxth	r3, r3
 8011f4e:	ebab 0303 	sub.w	r3, fp, r3
 8011f52:	0c12      	lsrs	r2, r2, #16
 8011f54:	f8de b000 	ldr.w	fp, [lr]
 8011f58:	fb05 a202 	mla	r2, r5, r2, sl
 8011f5c:	fa13 f38b 	uxtah	r3, r3, fp
 8011f60:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8011f64:	fa1f fb82 	uxth.w	fp, r2
 8011f68:	f8de 2000 	ldr.w	r2, [lr]
 8011f6c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011f70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f74:	b29b      	uxth	r3, r3
 8011f76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f7a:	4581      	cmp	r9, r0
 8011f7c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011f80:	f84e 3b04 	str.w	r3, [lr], #4
 8011f84:	d2db      	bcs.n	8011f3e <quorem+0x42>
 8011f86:	f856 300c 	ldr.w	r3, [r6, ip]
 8011f8a:	b933      	cbnz	r3, 8011f9a <quorem+0x9e>
 8011f8c:	9b01      	ldr	r3, [sp, #4]
 8011f8e:	3b04      	subs	r3, #4
 8011f90:	429e      	cmp	r6, r3
 8011f92:	461a      	mov	r2, r3
 8011f94:	d330      	bcc.n	8011ff8 <quorem+0xfc>
 8011f96:	f8c8 4010 	str.w	r4, [r8, #16]
 8011f9a:	4640      	mov	r0, r8
 8011f9c:	f001 fd0e 	bl	80139bc <__mcmp>
 8011fa0:	2800      	cmp	r0, #0
 8011fa2:	db25      	blt.n	8011ff0 <quorem+0xf4>
 8011fa4:	3501      	adds	r5, #1
 8011fa6:	4630      	mov	r0, r6
 8011fa8:	f04f 0c00 	mov.w	ip, #0
 8011fac:	f857 2b04 	ldr.w	r2, [r7], #4
 8011fb0:	f8d0 e000 	ldr.w	lr, [r0]
 8011fb4:	b293      	uxth	r3, r2
 8011fb6:	ebac 0303 	sub.w	r3, ip, r3
 8011fba:	0c12      	lsrs	r2, r2, #16
 8011fbc:	fa13 f38e 	uxtah	r3, r3, lr
 8011fc0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011fc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011fc8:	b29b      	uxth	r3, r3
 8011fca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011fce:	45b9      	cmp	r9, r7
 8011fd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011fd4:	f840 3b04 	str.w	r3, [r0], #4
 8011fd8:	d2e8      	bcs.n	8011fac <quorem+0xb0>
 8011fda:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8011fde:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011fe2:	b92a      	cbnz	r2, 8011ff0 <quorem+0xf4>
 8011fe4:	3b04      	subs	r3, #4
 8011fe6:	429e      	cmp	r6, r3
 8011fe8:	461a      	mov	r2, r3
 8011fea:	d30b      	bcc.n	8012004 <quorem+0x108>
 8011fec:	f8c8 4010 	str.w	r4, [r8, #16]
 8011ff0:	4628      	mov	r0, r5
 8011ff2:	b003      	add	sp, #12
 8011ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ff8:	6812      	ldr	r2, [r2, #0]
 8011ffa:	3b04      	subs	r3, #4
 8011ffc:	2a00      	cmp	r2, #0
 8011ffe:	d1ca      	bne.n	8011f96 <quorem+0x9a>
 8012000:	3c01      	subs	r4, #1
 8012002:	e7c5      	b.n	8011f90 <quorem+0x94>
 8012004:	6812      	ldr	r2, [r2, #0]
 8012006:	3b04      	subs	r3, #4
 8012008:	2a00      	cmp	r2, #0
 801200a:	d1ef      	bne.n	8011fec <quorem+0xf0>
 801200c:	3c01      	subs	r4, #1
 801200e:	e7ea      	b.n	8011fe6 <quorem+0xea>
 8012010:	2000      	movs	r0, #0
 8012012:	e7ee      	b.n	8011ff2 <quorem+0xf6>
 8012014:	0000      	movs	r0, r0
	...

08012018 <_dtoa_r>:
 8012018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801201c:	ec57 6b10 	vmov	r6, r7, d0
 8012020:	b095      	sub	sp, #84	; 0x54
 8012022:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012024:	9108      	str	r1, [sp, #32]
 8012026:	4604      	mov	r4, r0
 8012028:	920a      	str	r2, [sp, #40]	; 0x28
 801202a:	9311      	str	r3, [sp, #68]	; 0x44
 801202c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8012030:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012034:	b93d      	cbnz	r5, 8012046 <_dtoa_r+0x2e>
 8012036:	2010      	movs	r0, #16
 8012038:	f001 fa52 	bl	80134e0 <malloc>
 801203c:	6260      	str	r0, [r4, #36]	; 0x24
 801203e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012042:	6005      	str	r5, [r0, #0]
 8012044:	60c5      	str	r5, [r0, #12]
 8012046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012048:	6819      	ldr	r1, [r3, #0]
 801204a:	b151      	cbz	r1, 8012062 <_dtoa_r+0x4a>
 801204c:	685a      	ldr	r2, [r3, #4]
 801204e:	604a      	str	r2, [r1, #4]
 8012050:	2301      	movs	r3, #1
 8012052:	4093      	lsls	r3, r2
 8012054:	608b      	str	r3, [r1, #8]
 8012056:	4620      	mov	r0, r4
 8012058:	f001 fa90 	bl	801357c <_Bfree>
 801205c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801205e:	2200      	movs	r2, #0
 8012060:	601a      	str	r2, [r3, #0]
 8012062:	1e3b      	subs	r3, r7, #0
 8012064:	bfb9      	ittee	lt
 8012066:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801206a:	9303      	strlt	r3, [sp, #12]
 801206c:	2300      	movge	r3, #0
 801206e:	f8c8 3000 	strge.w	r3, [r8]
 8012072:	9d03      	ldr	r5, [sp, #12]
 8012074:	4bac      	ldr	r3, [pc, #688]	; (8012328 <_dtoa_r+0x310>)
 8012076:	bfbc      	itt	lt
 8012078:	2201      	movlt	r2, #1
 801207a:	f8c8 2000 	strlt.w	r2, [r8]
 801207e:	43ab      	bics	r3, r5
 8012080:	d11b      	bne.n	80120ba <_dtoa_r+0xa2>
 8012082:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012084:	f242 730f 	movw	r3, #9999	; 0x270f
 8012088:	6013      	str	r3, [r2, #0]
 801208a:	9b02      	ldr	r3, [sp, #8]
 801208c:	b923      	cbnz	r3, 8012098 <_dtoa_r+0x80>
 801208e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012092:	2d00      	cmp	r5, #0
 8012094:	f000 84dd 	beq.w	8012a52 <_dtoa_r+0xa3a>
 8012098:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801209a:	b953      	cbnz	r3, 80120b2 <_dtoa_r+0x9a>
 801209c:	4ba3      	ldr	r3, [pc, #652]	; (801232c <_dtoa_r+0x314>)
 801209e:	e020      	b.n	80120e2 <_dtoa_r+0xca>
 80120a0:	4ba3      	ldr	r3, [pc, #652]	; (8012330 <_dtoa_r+0x318>)
 80120a2:	9304      	str	r3, [sp, #16]
 80120a4:	3308      	adds	r3, #8
 80120a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80120a8:	6013      	str	r3, [r2, #0]
 80120aa:	9804      	ldr	r0, [sp, #16]
 80120ac:	b015      	add	sp, #84	; 0x54
 80120ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120b2:	4b9e      	ldr	r3, [pc, #632]	; (801232c <_dtoa_r+0x314>)
 80120b4:	9304      	str	r3, [sp, #16]
 80120b6:	3303      	adds	r3, #3
 80120b8:	e7f5      	b.n	80120a6 <_dtoa_r+0x8e>
 80120ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80120be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80120c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120c6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80120ca:	d10c      	bne.n	80120e6 <_dtoa_r+0xce>
 80120cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80120ce:	2301      	movs	r3, #1
 80120d0:	6013      	str	r3, [r2, #0]
 80120d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	f000 84b9 	beq.w	8012a4c <_dtoa_r+0xa34>
 80120da:	4b96      	ldr	r3, [pc, #600]	; (8012334 <_dtoa_r+0x31c>)
 80120dc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80120de:	6013      	str	r3, [r2, #0]
 80120e0:	3b01      	subs	r3, #1
 80120e2:	9304      	str	r3, [sp, #16]
 80120e4:	e7e1      	b.n	80120aa <_dtoa_r+0x92>
 80120e6:	a913      	add	r1, sp, #76	; 0x4c
 80120e8:	aa12      	add	r2, sp, #72	; 0x48
 80120ea:	ed9d 0b04 	vldr	d0, [sp, #16]
 80120ee:	4620      	mov	r0, r4
 80120f0:	f001 fd52 	bl	8013b98 <__d2b>
 80120f4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 80120f8:	9001      	str	r0, [sp, #4]
 80120fa:	9912      	ldr	r1, [sp, #72]	; 0x48
 80120fc:	2e00      	cmp	r6, #0
 80120fe:	d046      	beq.n	801218e <_dtoa_r+0x176>
 8012100:	9805      	ldr	r0, [sp, #20]
 8012102:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801210a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801210e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012112:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8012116:	2700      	movs	r7, #0
 8012118:	ee07 aa90 	vmov	s15, sl
 801211c:	ec43 2b16 	vmov	d6, r2, r3
 8012120:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8012124:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8012310 <_dtoa_r+0x2f8>
 8012128:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801212c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012130:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8012318 <_dtoa_r+0x300>
 8012134:	eea7 6b04 	vfma.f64	d6, d7, d4
 8012138:	eeb0 7b46 	vmov.f64	d7, d6
 801213c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8012320 <_dtoa_r+0x308>
 8012140:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012144:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012148:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801214c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012150:	ee16 ba90 	vmov	fp, s13
 8012154:	d508      	bpl.n	8012168 <_dtoa_r+0x150>
 8012156:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801215a:	eeb4 6b47 	vcmp.f64	d6, d7
 801215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012162:	bf18      	it	ne
 8012164:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012168:	f1bb 0f16 	cmp.w	fp, #22
 801216c:	d834      	bhi.n	80121d8 <_dtoa_r+0x1c0>
 801216e:	4b72      	ldr	r3, [pc, #456]	; (8012338 <_dtoa_r+0x320>)
 8012170:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012174:	ed93 7b00 	vldr	d7, [r3]
 8012178:	ed9d 6b02 	vldr	d6, [sp, #8]
 801217c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012184:	dd01      	ble.n	801218a <_dtoa_r+0x172>
 8012186:	f10b 3bff 	add.w	fp, fp, #4294967295
 801218a:	2300      	movs	r3, #0
 801218c:	e025      	b.n	80121da <_dtoa_r+0x1c2>
 801218e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012190:	eb01 0a03 	add.w	sl, r1, r3
 8012194:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8012198:	2b20      	cmp	r3, #32
 801219a:	dd17      	ble.n	80121cc <_dtoa_r+0x1b4>
 801219c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80121a0:	9a02      	ldr	r2, [sp, #8]
 80121a2:	409d      	lsls	r5, r3
 80121a4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80121a8:	fa22 f303 	lsr.w	r3, r2, r3
 80121ac:	432b      	orrs	r3, r5
 80121ae:	ee07 3a90 	vmov	s15, r3
 80121b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80121b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80121ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 80121be:	9805      	ldr	r0, [sp, #20]
 80121c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80121c4:	2701      	movs	r7, #1
 80121c6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 80121ca:	e7a5      	b.n	8012118 <_dtoa_r+0x100>
 80121cc:	9a02      	ldr	r2, [sp, #8]
 80121ce:	f1c3 0320 	rsb	r3, r3, #32
 80121d2:	fa02 f303 	lsl.w	r3, r2, r3
 80121d6:	e7ea      	b.n	80121ae <_dtoa_r+0x196>
 80121d8:	2301      	movs	r3, #1
 80121da:	eba1 0a0a 	sub.w	sl, r1, sl
 80121de:	9310      	str	r3, [sp, #64]	; 0x40
 80121e0:	f1ba 0301 	subs.w	r3, sl, #1
 80121e4:	9307      	str	r3, [sp, #28]
 80121e6:	bf43      	ittte	mi
 80121e8:	2300      	movmi	r3, #0
 80121ea:	f1ca 0a01 	rsbmi	sl, sl, #1
 80121ee:	9307      	strmi	r3, [sp, #28]
 80121f0:	f04f 0a00 	movpl.w	sl, #0
 80121f4:	f1bb 0f00 	cmp.w	fp, #0
 80121f8:	db19      	blt.n	801222e <_dtoa_r+0x216>
 80121fa:	9b07      	ldr	r3, [sp, #28]
 80121fc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012200:	445b      	add	r3, fp
 8012202:	9307      	str	r3, [sp, #28]
 8012204:	f04f 0800 	mov.w	r8, #0
 8012208:	9b08      	ldr	r3, [sp, #32]
 801220a:	2b09      	cmp	r3, #9
 801220c:	d866      	bhi.n	80122dc <_dtoa_r+0x2c4>
 801220e:	2b05      	cmp	r3, #5
 8012210:	bfc4      	itt	gt
 8012212:	3b04      	subgt	r3, #4
 8012214:	9308      	strgt	r3, [sp, #32]
 8012216:	9b08      	ldr	r3, [sp, #32]
 8012218:	f1a3 0302 	sub.w	r3, r3, #2
 801221c:	bfcc      	ite	gt
 801221e:	2500      	movgt	r5, #0
 8012220:	2501      	movle	r5, #1
 8012222:	2b03      	cmp	r3, #3
 8012224:	d866      	bhi.n	80122f4 <_dtoa_r+0x2dc>
 8012226:	e8df f003 	tbb	[pc, r3]
 801222a:	5755      	.short	0x5755
 801222c:	4909      	.short	0x4909
 801222e:	2300      	movs	r3, #0
 8012230:	ebaa 0a0b 	sub.w	sl, sl, fp
 8012234:	f1cb 0800 	rsb	r8, fp, #0
 8012238:	930b      	str	r3, [sp, #44]	; 0x2c
 801223a:	e7e5      	b.n	8012208 <_dtoa_r+0x1f0>
 801223c:	2301      	movs	r3, #1
 801223e:	9309      	str	r3, [sp, #36]	; 0x24
 8012240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012242:	2b00      	cmp	r3, #0
 8012244:	dd59      	ble.n	80122fa <_dtoa_r+0x2e2>
 8012246:	9306      	str	r3, [sp, #24]
 8012248:	4699      	mov	r9, r3
 801224a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801224c:	2200      	movs	r2, #0
 801224e:	6072      	str	r2, [r6, #4]
 8012250:	2204      	movs	r2, #4
 8012252:	f102 0014 	add.w	r0, r2, #20
 8012256:	4298      	cmp	r0, r3
 8012258:	6871      	ldr	r1, [r6, #4]
 801225a:	d953      	bls.n	8012304 <_dtoa_r+0x2ec>
 801225c:	4620      	mov	r0, r4
 801225e:	f001 f959 	bl	8013514 <_Balloc>
 8012262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012264:	6030      	str	r0, [r6, #0]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	9304      	str	r3, [sp, #16]
 801226a:	f1b9 0f0e 	cmp.w	r9, #14
 801226e:	f200 80c2 	bhi.w	80123f6 <_dtoa_r+0x3de>
 8012272:	2d00      	cmp	r5, #0
 8012274:	f000 80bf 	beq.w	80123f6 <_dtoa_r+0x3de>
 8012278:	ed9d 7b02 	vldr	d7, [sp, #8]
 801227c:	f1bb 0f00 	cmp.w	fp, #0
 8012280:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8012284:	f340 80e6 	ble.w	8012454 <_dtoa_r+0x43c>
 8012288:	4a2b      	ldr	r2, [pc, #172]	; (8012338 <_dtoa_r+0x320>)
 801228a:	f00b 030f 	and.w	r3, fp, #15
 801228e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012292:	ed93 7b00 	vldr	d7, [r3]
 8012296:	ea4f 132b 	mov.w	r3, fp, asr #4
 801229a:	06da      	lsls	r2, r3, #27
 801229c:	f140 80d8 	bpl.w	8012450 <_dtoa_r+0x438>
 80122a0:	4a26      	ldr	r2, [pc, #152]	; (801233c <_dtoa_r+0x324>)
 80122a2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80122a6:	ed92 6b08 	vldr	d6, [r2, #32]
 80122aa:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80122ae:	ed8d 6b02 	vstr	d6, [sp, #8]
 80122b2:	f003 030f 	and.w	r3, r3, #15
 80122b6:	2203      	movs	r2, #3
 80122b8:	4920      	ldr	r1, [pc, #128]	; (801233c <_dtoa_r+0x324>)
 80122ba:	e04a      	b.n	8012352 <_dtoa_r+0x33a>
 80122bc:	2301      	movs	r3, #1
 80122be:	9309      	str	r3, [sp, #36]	; 0x24
 80122c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122c2:	445b      	add	r3, fp
 80122c4:	f103 0901 	add.w	r9, r3, #1
 80122c8:	9306      	str	r3, [sp, #24]
 80122ca:	464b      	mov	r3, r9
 80122cc:	2b01      	cmp	r3, #1
 80122ce:	bfb8      	it	lt
 80122d0:	2301      	movlt	r3, #1
 80122d2:	e7ba      	b.n	801224a <_dtoa_r+0x232>
 80122d4:	2300      	movs	r3, #0
 80122d6:	e7b2      	b.n	801223e <_dtoa_r+0x226>
 80122d8:	2300      	movs	r3, #0
 80122da:	e7f0      	b.n	80122be <_dtoa_r+0x2a6>
 80122dc:	2501      	movs	r5, #1
 80122de:	2300      	movs	r3, #0
 80122e0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80122e4:	f04f 33ff 	mov.w	r3, #4294967295
 80122e8:	9306      	str	r3, [sp, #24]
 80122ea:	4699      	mov	r9, r3
 80122ec:	2200      	movs	r2, #0
 80122ee:	2312      	movs	r3, #18
 80122f0:	920a      	str	r2, [sp, #40]	; 0x28
 80122f2:	e7aa      	b.n	801224a <_dtoa_r+0x232>
 80122f4:	2301      	movs	r3, #1
 80122f6:	9309      	str	r3, [sp, #36]	; 0x24
 80122f8:	e7f4      	b.n	80122e4 <_dtoa_r+0x2cc>
 80122fa:	2301      	movs	r3, #1
 80122fc:	9306      	str	r3, [sp, #24]
 80122fe:	4699      	mov	r9, r3
 8012300:	461a      	mov	r2, r3
 8012302:	e7f5      	b.n	80122f0 <_dtoa_r+0x2d8>
 8012304:	3101      	adds	r1, #1
 8012306:	6071      	str	r1, [r6, #4]
 8012308:	0052      	lsls	r2, r2, #1
 801230a:	e7a2      	b.n	8012252 <_dtoa_r+0x23a>
 801230c:	f3af 8000 	nop.w
 8012310:	636f4361 	.word	0x636f4361
 8012314:	3fd287a7 	.word	0x3fd287a7
 8012318:	8b60c8b3 	.word	0x8b60c8b3
 801231c:	3fc68a28 	.word	0x3fc68a28
 8012320:	509f79fb 	.word	0x509f79fb
 8012324:	3fd34413 	.word	0x3fd34413
 8012328:	7ff00000 	.word	0x7ff00000
 801232c:	080150e9 	.word	0x080150e9
 8012330:	080150e0 	.word	0x080150e0
 8012334:	08015065 	.word	0x08015065
 8012338:	08015188 	.word	0x08015188
 801233c:	08015160 	.word	0x08015160
 8012340:	07de      	lsls	r6, r3, #31
 8012342:	d504      	bpl.n	801234e <_dtoa_r+0x336>
 8012344:	ed91 6b00 	vldr	d6, [r1]
 8012348:	3201      	adds	r2, #1
 801234a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801234e:	105b      	asrs	r3, r3, #1
 8012350:	3108      	adds	r1, #8
 8012352:	2b00      	cmp	r3, #0
 8012354:	d1f4      	bne.n	8012340 <_dtoa_r+0x328>
 8012356:	ed9d 6b02 	vldr	d6, [sp, #8]
 801235a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801235e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012362:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012364:	2b00      	cmp	r3, #0
 8012366:	f000 80a7 	beq.w	80124b8 <_dtoa_r+0x4a0>
 801236a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801236e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012372:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801237a:	f140 809d 	bpl.w	80124b8 <_dtoa_r+0x4a0>
 801237e:	f1b9 0f00 	cmp.w	r9, #0
 8012382:	f000 8099 	beq.w	80124b8 <_dtoa_r+0x4a0>
 8012386:	9b06      	ldr	r3, [sp, #24]
 8012388:	2b00      	cmp	r3, #0
 801238a:	dd30      	ble.n	80123ee <_dtoa_r+0x3d6>
 801238c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012390:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012394:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012398:	9d06      	ldr	r5, [sp, #24]
 801239a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801239e:	3201      	adds	r2, #1
 80123a0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80123a4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80123a8:	ee07 2a90 	vmov	s15, r2
 80123ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80123b0:	eea7 5b06 	vfma.f64	d5, d7, d6
 80123b4:	ed8d 5b02 	vstr	d5, [sp, #8]
 80123b8:	9a03      	ldr	r2, [sp, #12]
 80123ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123be:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 80123c2:	2d00      	cmp	r5, #0
 80123c4:	d17b      	bne.n	80124be <_dtoa_r+0x4a6>
 80123c6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80123ca:	ee36 6b47 	vsub.f64	d6, d6, d7
 80123ce:	ec41 0b17 	vmov	d7, r0, r1
 80123d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80123d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123da:	f300 8253 	bgt.w	8012884 <_dtoa_r+0x86c>
 80123de:	eeb1 7b47 	vneg.f64	d7, d7
 80123e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80123e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ea:	f100 8249 	bmi.w	8012880 <_dtoa_r+0x868>
 80123ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80123f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80123f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	f2c0 8119 	blt.w	8012630 <_dtoa_r+0x618>
 80123fe:	f1bb 0f0e 	cmp.w	fp, #14
 8012402:	f300 8115 	bgt.w	8012630 <_dtoa_r+0x618>
 8012406:	4bc3      	ldr	r3, [pc, #780]	; (8012714 <_dtoa_r+0x6fc>)
 8012408:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801240c:	ed93 6b00 	vldr	d6, [r3]
 8012410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012412:	2b00      	cmp	r3, #0
 8012414:	f280 80ba 	bge.w	801258c <_dtoa_r+0x574>
 8012418:	f1b9 0f00 	cmp.w	r9, #0
 801241c:	f300 80b6 	bgt.w	801258c <_dtoa_r+0x574>
 8012420:	f040 822d 	bne.w	801287e <_dtoa_r+0x866>
 8012424:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012428:	ee26 6b07 	vmul.f64	d6, d6, d7
 801242c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012430:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012438:	464d      	mov	r5, r9
 801243a:	464f      	mov	r7, r9
 801243c:	f280 8204 	bge.w	8012848 <_dtoa_r+0x830>
 8012440:	9b04      	ldr	r3, [sp, #16]
 8012442:	9a04      	ldr	r2, [sp, #16]
 8012444:	1c5e      	adds	r6, r3, #1
 8012446:	2331      	movs	r3, #49	; 0x31
 8012448:	7013      	strb	r3, [r2, #0]
 801244a:	f10b 0b01 	add.w	fp, fp, #1
 801244e:	e1ff      	b.n	8012850 <_dtoa_r+0x838>
 8012450:	2202      	movs	r2, #2
 8012452:	e731      	b.n	80122b8 <_dtoa_r+0x2a0>
 8012454:	d02e      	beq.n	80124b4 <_dtoa_r+0x49c>
 8012456:	f1cb 0300 	rsb	r3, fp, #0
 801245a:	4aae      	ldr	r2, [pc, #696]	; (8012714 <_dtoa_r+0x6fc>)
 801245c:	f003 010f 	and.w	r1, r3, #15
 8012460:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012464:	ed92 7b00 	vldr	d7, [r2]
 8012468:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801246c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012470:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012474:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8012478:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801247c:	49a6      	ldr	r1, [pc, #664]	; (8012718 <_dtoa_r+0x700>)
 801247e:	111b      	asrs	r3, r3, #4
 8012480:	2000      	movs	r0, #0
 8012482:	2202      	movs	r2, #2
 8012484:	b93b      	cbnz	r3, 8012496 <_dtoa_r+0x47e>
 8012486:	2800      	cmp	r0, #0
 8012488:	f43f af6b 	beq.w	8012362 <_dtoa_r+0x34a>
 801248c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012490:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012494:	e765      	b.n	8012362 <_dtoa_r+0x34a>
 8012496:	07dd      	lsls	r5, r3, #31
 8012498:	d509      	bpl.n	80124ae <_dtoa_r+0x496>
 801249a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801249e:	ed91 7b00 	vldr	d7, [r1]
 80124a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80124a6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80124aa:	3201      	adds	r2, #1
 80124ac:	2001      	movs	r0, #1
 80124ae:	105b      	asrs	r3, r3, #1
 80124b0:	3108      	adds	r1, #8
 80124b2:	e7e7      	b.n	8012484 <_dtoa_r+0x46c>
 80124b4:	2202      	movs	r2, #2
 80124b6:	e754      	b.n	8012362 <_dtoa_r+0x34a>
 80124b8:	465b      	mov	r3, fp
 80124ba:	464d      	mov	r5, r9
 80124bc:	e770      	b.n	80123a0 <_dtoa_r+0x388>
 80124be:	4a95      	ldr	r2, [pc, #596]	; (8012714 <_dtoa_r+0x6fc>)
 80124c0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80124c4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80124c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124ca:	ec41 0b17 	vmov	d7, r0, r1
 80124ce:	b35a      	cbz	r2, 8012528 <_dtoa_r+0x510>
 80124d0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80124d4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80124d8:	9e04      	ldr	r6, [sp, #16]
 80124da:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80124de:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80124e2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80124e6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80124ea:	ee14 2a90 	vmov	r2, s9
 80124ee:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80124f2:	3230      	adds	r2, #48	; 0x30
 80124f4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80124f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80124fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012500:	f806 2b01 	strb.w	r2, [r6], #1
 8012504:	d43b      	bmi.n	801257e <_dtoa_r+0x566>
 8012506:	ee32 5b46 	vsub.f64	d5, d2, d6
 801250a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012512:	d472      	bmi.n	80125fa <_dtoa_r+0x5e2>
 8012514:	9a04      	ldr	r2, [sp, #16]
 8012516:	1ab2      	subs	r2, r6, r2
 8012518:	4295      	cmp	r5, r2
 801251a:	f77f af68 	ble.w	80123ee <_dtoa_r+0x3d6>
 801251e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012522:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012526:	e7de      	b.n	80124e6 <_dtoa_r+0x4ce>
 8012528:	9a04      	ldr	r2, [sp, #16]
 801252a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801252e:	1956      	adds	r6, r2, r5
 8012530:	4611      	mov	r1, r2
 8012532:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012536:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801253a:	ee14 2a90 	vmov	r2, s9
 801253e:	3230      	adds	r2, #48	; 0x30
 8012540:	f801 2b01 	strb.w	r2, [r1], #1
 8012544:	42b1      	cmp	r1, r6
 8012546:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801254a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801254e:	d11a      	bne.n	8012586 <_dtoa_r+0x56e>
 8012550:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012554:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012558:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801255c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012560:	dc4b      	bgt.n	80125fa <_dtoa_r+0x5e2>
 8012562:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012566:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801256e:	f57f af3e 	bpl.w	80123ee <_dtoa_r+0x3d6>
 8012572:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012576:	2a30      	cmp	r2, #48	; 0x30
 8012578:	f106 31ff 	add.w	r1, r6, #4294967295
 801257c:	d001      	beq.n	8012582 <_dtoa_r+0x56a>
 801257e:	469b      	mov	fp, r3
 8012580:	e02a      	b.n	80125d8 <_dtoa_r+0x5c0>
 8012582:	460e      	mov	r6, r1
 8012584:	e7f5      	b.n	8012572 <_dtoa_r+0x55a>
 8012586:	ee26 6b03 	vmul.f64	d6, d6, d3
 801258a:	e7d4      	b.n	8012536 <_dtoa_r+0x51e>
 801258c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012590:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012594:	9e04      	ldr	r6, [sp, #16]
 8012596:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801259a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801259e:	ee15 3a10 	vmov	r3, s10
 80125a2:	3330      	adds	r3, #48	; 0x30
 80125a4:	f806 3b01 	strb.w	r3, [r6], #1
 80125a8:	9b04      	ldr	r3, [sp, #16]
 80125aa:	1af3      	subs	r3, r6, r3
 80125ac:	4599      	cmp	r9, r3
 80125ae:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80125b2:	eea3 7b46 	vfms.f64	d7, d3, d6
 80125b6:	d133      	bne.n	8012620 <_dtoa_r+0x608>
 80125b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80125bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80125c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125c4:	dc18      	bgt.n	80125f8 <_dtoa_r+0x5e0>
 80125c6:	eeb4 7b46 	vcmp.f64	d7, d6
 80125ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ce:	d103      	bne.n	80125d8 <_dtoa_r+0x5c0>
 80125d0:	ee15 3a10 	vmov	r3, s10
 80125d4:	07db      	lsls	r3, r3, #31
 80125d6:	d40f      	bmi.n	80125f8 <_dtoa_r+0x5e0>
 80125d8:	9901      	ldr	r1, [sp, #4]
 80125da:	4620      	mov	r0, r4
 80125dc:	f000 ffce 	bl	801357c <_Bfree>
 80125e0:	2300      	movs	r3, #0
 80125e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80125e4:	7033      	strb	r3, [r6, #0]
 80125e6:	f10b 0301 	add.w	r3, fp, #1
 80125ea:	6013      	str	r3, [r2, #0]
 80125ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	f43f ad5b 	beq.w	80120aa <_dtoa_r+0x92>
 80125f4:	601e      	str	r6, [r3, #0]
 80125f6:	e558      	b.n	80120aa <_dtoa_r+0x92>
 80125f8:	465b      	mov	r3, fp
 80125fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80125fe:	2939      	cmp	r1, #57	; 0x39
 8012600:	f106 32ff 	add.w	r2, r6, #4294967295
 8012604:	d106      	bne.n	8012614 <_dtoa_r+0x5fc>
 8012606:	9904      	ldr	r1, [sp, #16]
 8012608:	4291      	cmp	r1, r2
 801260a:	d107      	bne.n	801261c <_dtoa_r+0x604>
 801260c:	2230      	movs	r2, #48	; 0x30
 801260e:	700a      	strb	r2, [r1, #0]
 8012610:	3301      	adds	r3, #1
 8012612:	460a      	mov	r2, r1
 8012614:	7811      	ldrb	r1, [r2, #0]
 8012616:	3101      	adds	r1, #1
 8012618:	7011      	strb	r1, [r2, #0]
 801261a:	e7b0      	b.n	801257e <_dtoa_r+0x566>
 801261c:	4616      	mov	r6, r2
 801261e:	e7ec      	b.n	80125fa <_dtoa_r+0x5e2>
 8012620:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012624:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801262c:	d1b3      	bne.n	8012596 <_dtoa_r+0x57e>
 801262e:	e7d3      	b.n	80125d8 <_dtoa_r+0x5c0>
 8012630:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012632:	2a00      	cmp	r2, #0
 8012634:	f000 808d 	beq.w	8012752 <_dtoa_r+0x73a>
 8012638:	9a08      	ldr	r2, [sp, #32]
 801263a:	2a01      	cmp	r2, #1
 801263c:	dc72      	bgt.n	8012724 <_dtoa_r+0x70c>
 801263e:	2f00      	cmp	r7, #0
 8012640:	d06c      	beq.n	801271c <_dtoa_r+0x704>
 8012642:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012646:	4645      	mov	r5, r8
 8012648:	4656      	mov	r6, sl
 801264a:	9a07      	ldr	r2, [sp, #28]
 801264c:	2101      	movs	r1, #1
 801264e:	441a      	add	r2, r3
 8012650:	4620      	mov	r0, r4
 8012652:	449a      	add	sl, r3
 8012654:	9207      	str	r2, [sp, #28]
 8012656:	f001 f86f 	bl	8013738 <__i2b>
 801265a:	4607      	mov	r7, r0
 801265c:	2e00      	cmp	r6, #0
 801265e:	dd0b      	ble.n	8012678 <_dtoa_r+0x660>
 8012660:	9b07      	ldr	r3, [sp, #28]
 8012662:	2b00      	cmp	r3, #0
 8012664:	dd08      	ble.n	8012678 <_dtoa_r+0x660>
 8012666:	42b3      	cmp	r3, r6
 8012668:	9a07      	ldr	r2, [sp, #28]
 801266a:	bfa8      	it	ge
 801266c:	4633      	movge	r3, r6
 801266e:	ebaa 0a03 	sub.w	sl, sl, r3
 8012672:	1af6      	subs	r6, r6, r3
 8012674:	1ad3      	subs	r3, r2, r3
 8012676:	9307      	str	r3, [sp, #28]
 8012678:	f1b8 0f00 	cmp.w	r8, #0
 801267c:	d01d      	beq.n	80126ba <_dtoa_r+0x6a2>
 801267e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012680:	2b00      	cmp	r3, #0
 8012682:	d06a      	beq.n	801275a <_dtoa_r+0x742>
 8012684:	b18d      	cbz	r5, 80126aa <_dtoa_r+0x692>
 8012686:	4639      	mov	r1, r7
 8012688:	462a      	mov	r2, r5
 801268a:	4620      	mov	r0, r4
 801268c:	f001 f8f4 	bl	8013878 <__pow5mult>
 8012690:	9a01      	ldr	r2, [sp, #4]
 8012692:	4601      	mov	r1, r0
 8012694:	4607      	mov	r7, r0
 8012696:	4620      	mov	r0, r4
 8012698:	f001 f857 	bl	801374a <__multiply>
 801269c:	9901      	ldr	r1, [sp, #4]
 801269e:	900c      	str	r0, [sp, #48]	; 0x30
 80126a0:	4620      	mov	r0, r4
 80126a2:	f000 ff6b 	bl	801357c <_Bfree>
 80126a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126a8:	9301      	str	r3, [sp, #4]
 80126aa:	ebb8 0205 	subs.w	r2, r8, r5
 80126ae:	d004      	beq.n	80126ba <_dtoa_r+0x6a2>
 80126b0:	9901      	ldr	r1, [sp, #4]
 80126b2:	4620      	mov	r0, r4
 80126b4:	f001 f8e0 	bl	8013878 <__pow5mult>
 80126b8:	9001      	str	r0, [sp, #4]
 80126ba:	2101      	movs	r1, #1
 80126bc:	4620      	mov	r0, r4
 80126be:	f001 f83b 	bl	8013738 <__i2b>
 80126c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126c4:	4605      	mov	r5, r0
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	f000 81ca 	beq.w	8012a60 <_dtoa_r+0xa48>
 80126cc:	461a      	mov	r2, r3
 80126ce:	4601      	mov	r1, r0
 80126d0:	4620      	mov	r0, r4
 80126d2:	f001 f8d1 	bl	8013878 <__pow5mult>
 80126d6:	9b08      	ldr	r3, [sp, #32]
 80126d8:	2b01      	cmp	r3, #1
 80126da:	4605      	mov	r5, r0
 80126dc:	dc44      	bgt.n	8012768 <_dtoa_r+0x750>
 80126de:	9b02      	ldr	r3, [sp, #8]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d13c      	bne.n	801275e <_dtoa_r+0x746>
 80126e4:	9b03      	ldr	r3, [sp, #12]
 80126e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d137      	bne.n	801275e <_dtoa_r+0x746>
 80126ee:	9b03      	ldr	r3, [sp, #12]
 80126f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80126f4:	0d1b      	lsrs	r3, r3, #20
 80126f6:	051b      	lsls	r3, r3, #20
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d033      	beq.n	8012764 <_dtoa_r+0x74c>
 80126fc:	9b07      	ldr	r3, [sp, #28]
 80126fe:	3301      	adds	r3, #1
 8012700:	f10a 0a01 	add.w	sl, sl, #1
 8012704:	9307      	str	r3, [sp, #28]
 8012706:	f04f 0801 	mov.w	r8, #1
 801270a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801270c:	bb73      	cbnz	r3, 801276c <_dtoa_r+0x754>
 801270e:	2001      	movs	r0, #1
 8012710:	e034      	b.n	801277c <_dtoa_r+0x764>
 8012712:	bf00      	nop
 8012714:	08015188 	.word	0x08015188
 8012718:	08015160 	.word	0x08015160
 801271c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801271e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012722:	e790      	b.n	8012646 <_dtoa_r+0x62e>
 8012724:	f109 35ff 	add.w	r5, r9, #4294967295
 8012728:	45a8      	cmp	r8, r5
 801272a:	bfbf      	itttt	lt
 801272c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801272e:	eba5 0808 	sublt.w	r8, r5, r8
 8012732:	4443      	addlt	r3, r8
 8012734:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8012736:	bfb6      	itet	lt
 8012738:	46a8      	movlt	r8, r5
 801273a:	eba8 0505 	subge.w	r5, r8, r5
 801273e:	2500      	movlt	r5, #0
 8012740:	f1b9 0f00 	cmp.w	r9, #0
 8012744:	bfb9      	ittee	lt
 8012746:	ebaa 0609 	sublt.w	r6, sl, r9
 801274a:	2300      	movlt	r3, #0
 801274c:	4656      	movge	r6, sl
 801274e:	464b      	movge	r3, r9
 8012750:	e77b      	b.n	801264a <_dtoa_r+0x632>
 8012752:	4645      	mov	r5, r8
 8012754:	4656      	mov	r6, sl
 8012756:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012758:	e780      	b.n	801265c <_dtoa_r+0x644>
 801275a:	4642      	mov	r2, r8
 801275c:	e7a8      	b.n	80126b0 <_dtoa_r+0x698>
 801275e:	f04f 0800 	mov.w	r8, #0
 8012762:	e7d2      	b.n	801270a <_dtoa_r+0x6f2>
 8012764:	4698      	mov	r8, r3
 8012766:	e7d0      	b.n	801270a <_dtoa_r+0x6f2>
 8012768:	f04f 0800 	mov.w	r8, #0
 801276c:	692b      	ldr	r3, [r5, #16]
 801276e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012772:	6918      	ldr	r0, [r3, #16]
 8012774:	f000 ff92 	bl	801369c <__hi0bits>
 8012778:	f1c0 0020 	rsb	r0, r0, #32
 801277c:	9b07      	ldr	r3, [sp, #28]
 801277e:	4418      	add	r0, r3
 8012780:	f010 001f 	ands.w	r0, r0, #31
 8012784:	d047      	beq.n	8012816 <_dtoa_r+0x7fe>
 8012786:	f1c0 0320 	rsb	r3, r0, #32
 801278a:	2b04      	cmp	r3, #4
 801278c:	dd3b      	ble.n	8012806 <_dtoa_r+0x7ee>
 801278e:	9b07      	ldr	r3, [sp, #28]
 8012790:	f1c0 001c 	rsb	r0, r0, #28
 8012794:	4482      	add	sl, r0
 8012796:	4406      	add	r6, r0
 8012798:	4403      	add	r3, r0
 801279a:	9307      	str	r3, [sp, #28]
 801279c:	f1ba 0f00 	cmp.w	sl, #0
 80127a0:	dd05      	ble.n	80127ae <_dtoa_r+0x796>
 80127a2:	4652      	mov	r2, sl
 80127a4:	9901      	ldr	r1, [sp, #4]
 80127a6:	4620      	mov	r0, r4
 80127a8:	f001 f8b4 	bl	8013914 <__lshift>
 80127ac:	9001      	str	r0, [sp, #4]
 80127ae:	9b07      	ldr	r3, [sp, #28]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	dd05      	ble.n	80127c0 <_dtoa_r+0x7a8>
 80127b4:	4629      	mov	r1, r5
 80127b6:	461a      	mov	r2, r3
 80127b8:	4620      	mov	r0, r4
 80127ba:	f001 f8ab 	bl	8013914 <__lshift>
 80127be:	4605      	mov	r5, r0
 80127c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80127c2:	b353      	cbz	r3, 801281a <_dtoa_r+0x802>
 80127c4:	4629      	mov	r1, r5
 80127c6:	9801      	ldr	r0, [sp, #4]
 80127c8:	f001 f8f8 	bl	80139bc <__mcmp>
 80127cc:	2800      	cmp	r0, #0
 80127ce:	da24      	bge.n	801281a <_dtoa_r+0x802>
 80127d0:	2300      	movs	r3, #0
 80127d2:	220a      	movs	r2, #10
 80127d4:	9901      	ldr	r1, [sp, #4]
 80127d6:	4620      	mov	r0, r4
 80127d8:	f000 fee7 	bl	80135aa <__multadd>
 80127dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127de:	9001      	str	r0, [sp, #4]
 80127e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	f000 8142 	beq.w	8012a6e <_dtoa_r+0xa56>
 80127ea:	2300      	movs	r3, #0
 80127ec:	4639      	mov	r1, r7
 80127ee:	220a      	movs	r2, #10
 80127f0:	4620      	mov	r0, r4
 80127f2:	f000 feda 	bl	80135aa <__multadd>
 80127f6:	9b06      	ldr	r3, [sp, #24]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	4607      	mov	r7, r0
 80127fc:	dc4b      	bgt.n	8012896 <_dtoa_r+0x87e>
 80127fe:	9b08      	ldr	r3, [sp, #32]
 8012800:	2b02      	cmp	r3, #2
 8012802:	dd48      	ble.n	8012896 <_dtoa_r+0x87e>
 8012804:	e011      	b.n	801282a <_dtoa_r+0x812>
 8012806:	d0c9      	beq.n	801279c <_dtoa_r+0x784>
 8012808:	9a07      	ldr	r2, [sp, #28]
 801280a:	331c      	adds	r3, #28
 801280c:	441a      	add	r2, r3
 801280e:	449a      	add	sl, r3
 8012810:	441e      	add	r6, r3
 8012812:	4613      	mov	r3, r2
 8012814:	e7c1      	b.n	801279a <_dtoa_r+0x782>
 8012816:	4603      	mov	r3, r0
 8012818:	e7f6      	b.n	8012808 <_dtoa_r+0x7f0>
 801281a:	f1b9 0f00 	cmp.w	r9, #0
 801281e:	dc34      	bgt.n	801288a <_dtoa_r+0x872>
 8012820:	9b08      	ldr	r3, [sp, #32]
 8012822:	2b02      	cmp	r3, #2
 8012824:	dd31      	ble.n	801288a <_dtoa_r+0x872>
 8012826:	f8cd 9018 	str.w	r9, [sp, #24]
 801282a:	9b06      	ldr	r3, [sp, #24]
 801282c:	b963      	cbnz	r3, 8012848 <_dtoa_r+0x830>
 801282e:	4629      	mov	r1, r5
 8012830:	2205      	movs	r2, #5
 8012832:	4620      	mov	r0, r4
 8012834:	f000 feb9 	bl	80135aa <__multadd>
 8012838:	4601      	mov	r1, r0
 801283a:	4605      	mov	r5, r0
 801283c:	9801      	ldr	r0, [sp, #4]
 801283e:	f001 f8bd 	bl	80139bc <__mcmp>
 8012842:	2800      	cmp	r0, #0
 8012844:	f73f adfc 	bgt.w	8012440 <_dtoa_r+0x428>
 8012848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801284a:	9e04      	ldr	r6, [sp, #16]
 801284c:	ea6f 0b03 	mvn.w	fp, r3
 8012850:	f04f 0900 	mov.w	r9, #0
 8012854:	4629      	mov	r1, r5
 8012856:	4620      	mov	r0, r4
 8012858:	f000 fe90 	bl	801357c <_Bfree>
 801285c:	2f00      	cmp	r7, #0
 801285e:	f43f aebb 	beq.w	80125d8 <_dtoa_r+0x5c0>
 8012862:	f1b9 0f00 	cmp.w	r9, #0
 8012866:	d005      	beq.n	8012874 <_dtoa_r+0x85c>
 8012868:	45b9      	cmp	r9, r7
 801286a:	d003      	beq.n	8012874 <_dtoa_r+0x85c>
 801286c:	4649      	mov	r1, r9
 801286e:	4620      	mov	r0, r4
 8012870:	f000 fe84 	bl	801357c <_Bfree>
 8012874:	4639      	mov	r1, r7
 8012876:	4620      	mov	r0, r4
 8012878:	f000 fe80 	bl	801357c <_Bfree>
 801287c:	e6ac      	b.n	80125d8 <_dtoa_r+0x5c0>
 801287e:	2500      	movs	r5, #0
 8012880:	462f      	mov	r7, r5
 8012882:	e7e1      	b.n	8012848 <_dtoa_r+0x830>
 8012884:	469b      	mov	fp, r3
 8012886:	462f      	mov	r7, r5
 8012888:	e5da      	b.n	8012440 <_dtoa_r+0x428>
 801288a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801288c:	f8cd 9018 	str.w	r9, [sp, #24]
 8012890:	2b00      	cmp	r3, #0
 8012892:	f000 80f3 	beq.w	8012a7c <_dtoa_r+0xa64>
 8012896:	2e00      	cmp	r6, #0
 8012898:	dd05      	ble.n	80128a6 <_dtoa_r+0x88e>
 801289a:	4639      	mov	r1, r7
 801289c:	4632      	mov	r2, r6
 801289e:	4620      	mov	r0, r4
 80128a0:	f001 f838 	bl	8013914 <__lshift>
 80128a4:	4607      	mov	r7, r0
 80128a6:	f1b8 0f00 	cmp.w	r8, #0
 80128aa:	d04c      	beq.n	8012946 <_dtoa_r+0x92e>
 80128ac:	6879      	ldr	r1, [r7, #4]
 80128ae:	4620      	mov	r0, r4
 80128b0:	f000 fe30 	bl	8013514 <_Balloc>
 80128b4:	693a      	ldr	r2, [r7, #16]
 80128b6:	3202      	adds	r2, #2
 80128b8:	4606      	mov	r6, r0
 80128ba:	0092      	lsls	r2, r2, #2
 80128bc:	f107 010c 	add.w	r1, r7, #12
 80128c0:	300c      	adds	r0, #12
 80128c2:	f7fd fd2d 	bl	8010320 <memcpy>
 80128c6:	2201      	movs	r2, #1
 80128c8:	4631      	mov	r1, r6
 80128ca:	4620      	mov	r0, r4
 80128cc:	f001 f822 	bl	8013914 <__lshift>
 80128d0:	9b02      	ldr	r3, [sp, #8]
 80128d2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80128d6:	f003 0301 	and.w	r3, r3, #1
 80128da:	46b9      	mov	r9, r7
 80128dc:	9307      	str	r3, [sp, #28]
 80128de:	4607      	mov	r7, r0
 80128e0:	4629      	mov	r1, r5
 80128e2:	9801      	ldr	r0, [sp, #4]
 80128e4:	f7ff fb0a 	bl	8011efc <quorem>
 80128e8:	4649      	mov	r1, r9
 80128ea:	4606      	mov	r6, r0
 80128ec:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80128f0:	9801      	ldr	r0, [sp, #4]
 80128f2:	f001 f863 	bl	80139bc <__mcmp>
 80128f6:	463a      	mov	r2, r7
 80128f8:	9002      	str	r0, [sp, #8]
 80128fa:	4629      	mov	r1, r5
 80128fc:	4620      	mov	r0, r4
 80128fe:	f001 f877 	bl	80139f0 <__mdiff>
 8012902:	68c3      	ldr	r3, [r0, #12]
 8012904:	4602      	mov	r2, r0
 8012906:	bb03      	cbnz	r3, 801294a <_dtoa_r+0x932>
 8012908:	4601      	mov	r1, r0
 801290a:	9009      	str	r0, [sp, #36]	; 0x24
 801290c:	9801      	ldr	r0, [sp, #4]
 801290e:	f001 f855 	bl	80139bc <__mcmp>
 8012912:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012914:	4603      	mov	r3, r0
 8012916:	4611      	mov	r1, r2
 8012918:	4620      	mov	r0, r4
 801291a:	9309      	str	r3, [sp, #36]	; 0x24
 801291c:	f000 fe2e 	bl	801357c <_Bfree>
 8012920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012922:	b9a3      	cbnz	r3, 801294e <_dtoa_r+0x936>
 8012924:	9a08      	ldr	r2, [sp, #32]
 8012926:	b992      	cbnz	r2, 801294e <_dtoa_r+0x936>
 8012928:	9a07      	ldr	r2, [sp, #28]
 801292a:	b982      	cbnz	r2, 801294e <_dtoa_r+0x936>
 801292c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012930:	d029      	beq.n	8012986 <_dtoa_r+0x96e>
 8012932:	9b02      	ldr	r3, [sp, #8]
 8012934:	2b00      	cmp	r3, #0
 8012936:	dd01      	ble.n	801293c <_dtoa_r+0x924>
 8012938:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801293c:	f10a 0601 	add.w	r6, sl, #1
 8012940:	f88a 8000 	strb.w	r8, [sl]
 8012944:	e786      	b.n	8012854 <_dtoa_r+0x83c>
 8012946:	4638      	mov	r0, r7
 8012948:	e7c2      	b.n	80128d0 <_dtoa_r+0x8b8>
 801294a:	2301      	movs	r3, #1
 801294c:	e7e3      	b.n	8012916 <_dtoa_r+0x8fe>
 801294e:	9a02      	ldr	r2, [sp, #8]
 8012950:	2a00      	cmp	r2, #0
 8012952:	db04      	blt.n	801295e <_dtoa_r+0x946>
 8012954:	d124      	bne.n	80129a0 <_dtoa_r+0x988>
 8012956:	9a08      	ldr	r2, [sp, #32]
 8012958:	bb12      	cbnz	r2, 80129a0 <_dtoa_r+0x988>
 801295a:	9a07      	ldr	r2, [sp, #28]
 801295c:	bb02      	cbnz	r2, 80129a0 <_dtoa_r+0x988>
 801295e:	2b00      	cmp	r3, #0
 8012960:	ddec      	ble.n	801293c <_dtoa_r+0x924>
 8012962:	2201      	movs	r2, #1
 8012964:	9901      	ldr	r1, [sp, #4]
 8012966:	4620      	mov	r0, r4
 8012968:	f000 ffd4 	bl	8013914 <__lshift>
 801296c:	4629      	mov	r1, r5
 801296e:	9001      	str	r0, [sp, #4]
 8012970:	f001 f824 	bl	80139bc <__mcmp>
 8012974:	2800      	cmp	r0, #0
 8012976:	dc03      	bgt.n	8012980 <_dtoa_r+0x968>
 8012978:	d1e0      	bne.n	801293c <_dtoa_r+0x924>
 801297a:	f018 0f01 	tst.w	r8, #1
 801297e:	d0dd      	beq.n	801293c <_dtoa_r+0x924>
 8012980:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012984:	d1d8      	bne.n	8012938 <_dtoa_r+0x920>
 8012986:	2339      	movs	r3, #57	; 0x39
 8012988:	f10a 0601 	add.w	r6, sl, #1
 801298c:	f88a 3000 	strb.w	r3, [sl]
 8012990:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012994:	2b39      	cmp	r3, #57	; 0x39
 8012996:	f106 32ff 	add.w	r2, r6, #4294967295
 801299a:	d04c      	beq.n	8012a36 <_dtoa_r+0xa1e>
 801299c:	3301      	adds	r3, #1
 801299e:	e051      	b.n	8012a44 <_dtoa_r+0xa2c>
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	f10a 0601 	add.w	r6, sl, #1
 80129a6:	dd05      	ble.n	80129b4 <_dtoa_r+0x99c>
 80129a8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80129ac:	d0eb      	beq.n	8012986 <_dtoa_r+0x96e>
 80129ae:	f108 0801 	add.w	r8, r8, #1
 80129b2:	e7c5      	b.n	8012940 <_dtoa_r+0x928>
 80129b4:	9b04      	ldr	r3, [sp, #16]
 80129b6:	9a06      	ldr	r2, [sp, #24]
 80129b8:	f806 8c01 	strb.w	r8, [r6, #-1]
 80129bc:	1af3      	subs	r3, r6, r3
 80129be:	4293      	cmp	r3, r2
 80129c0:	d021      	beq.n	8012a06 <_dtoa_r+0x9ee>
 80129c2:	2300      	movs	r3, #0
 80129c4:	220a      	movs	r2, #10
 80129c6:	9901      	ldr	r1, [sp, #4]
 80129c8:	4620      	mov	r0, r4
 80129ca:	f000 fdee 	bl	80135aa <__multadd>
 80129ce:	45b9      	cmp	r9, r7
 80129d0:	9001      	str	r0, [sp, #4]
 80129d2:	f04f 0300 	mov.w	r3, #0
 80129d6:	f04f 020a 	mov.w	r2, #10
 80129da:	4649      	mov	r1, r9
 80129dc:	4620      	mov	r0, r4
 80129de:	d105      	bne.n	80129ec <_dtoa_r+0x9d4>
 80129e0:	f000 fde3 	bl	80135aa <__multadd>
 80129e4:	4681      	mov	r9, r0
 80129e6:	4607      	mov	r7, r0
 80129e8:	46b2      	mov	sl, r6
 80129ea:	e779      	b.n	80128e0 <_dtoa_r+0x8c8>
 80129ec:	f000 fddd 	bl	80135aa <__multadd>
 80129f0:	4639      	mov	r1, r7
 80129f2:	4681      	mov	r9, r0
 80129f4:	2300      	movs	r3, #0
 80129f6:	220a      	movs	r2, #10
 80129f8:	4620      	mov	r0, r4
 80129fa:	f000 fdd6 	bl	80135aa <__multadd>
 80129fe:	4607      	mov	r7, r0
 8012a00:	e7f2      	b.n	80129e8 <_dtoa_r+0x9d0>
 8012a02:	f04f 0900 	mov.w	r9, #0
 8012a06:	2201      	movs	r2, #1
 8012a08:	9901      	ldr	r1, [sp, #4]
 8012a0a:	4620      	mov	r0, r4
 8012a0c:	f000 ff82 	bl	8013914 <__lshift>
 8012a10:	4629      	mov	r1, r5
 8012a12:	9001      	str	r0, [sp, #4]
 8012a14:	f000 ffd2 	bl	80139bc <__mcmp>
 8012a18:	2800      	cmp	r0, #0
 8012a1a:	dcb9      	bgt.n	8012990 <_dtoa_r+0x978>
 8012a1c:	d102      	bne.n	8012a24 <_dtoa_r+0xa0c>
 8012a1e:	f018 0f01 	tst.w	r8, #1
 8012a22:	d1b5      	bne.n	8012990 <_dtoa_r+0x978>
 8012a24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012a28:	2b30      	cmp	r3, #48	; 0x30
 8012a2a:	f106 32ff 	add.w	r2, r6, #4294967295
 8012a2e:	f47f af11 	bne.w	8012854 <_dtoa_r+0x83c>
 8012a32:	4616      	mov	r6, r2
 8012a34:	e7f6      	b.n	8012a24 <_dtoa_r+0xa0c>
 8012a36:	9b04      	ldr	r3, [sp, #16]
 8012a38:	4293      	cmp	r3, r2
 8012a3a:	d105      	bne.n	8012a48 <_dtoa_r+0xa30>
 8012a3c:	9a04      	ldr	r2, [sp, #16]
 8012a3e:	f10b 0b01 	add.w	fp, fp, #1
 8012a42:	2331      	movs	r3, #49	; 0x31
 8012a44:	7013      	strb	r3, [r2, #0]
 8012a46:	e705      	b.n	8012854 <_dtoa_r+0x83c>
 8012a48:	4616      	mov	r6, r2
 8012a4a:	e7a1      	b.n	8012990 <_dtoa_r+0x978>
 8012a4c:	4b16      	ldr	r3, [pc, #88]	; (8012aa8 <_dtoa_r+0xa90>)
 8012a4e:	f7ff bb48 	b.w	80120e2 <_dtoa_r+0xca>
 8012a52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	f47f ab23 	bne.w	80120a0 <_dtoa_r+0x88>
 8012a5a:	4b14      	ldr	r3, [pc, #80]	; (8012aac <_dtoa_r+0xa94>)
 8012a5c:	f7ff bb41 	b.w	80120e2 <_dtoa_r+0xca>
 8012a60:	9b08      	ldr	r3, [sp, #32]
 8012a62:	2b01      	cmp	r3, #1
 8012a64:	f77f ae3b 	ble.w	80126de <_dtoa_r+0x6c6>
 8012a68:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8012a6c:	e64f      	b.n	801270e <_dtoa_r+0x6f6>
 8012a6e:	9b06      	ldr	r3, [sp, #24]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	dc03      	bgt.n	8012a7c <_dtoa_r+0xa64>
 8012a74:	9b08      	ldr	r3, [sp, #32]
 8012a76:	2b02      	cmp	r3, #2
 8012a78:	f73f aed7 	bgt.w	801282a <_dtoa_r+0x812>
 8012a7c:	9e04      	ldr	r6, [sp, #16]
 8012a7e:	9801      	ldr	r0, [sp, #4]
 8012a80:	4629      	mov	r1, r5
 8012a82:	f7ff fa3b 	bl	8011efc <quorem>
 8012a86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012a8a:	f806 8b01 	strb.w	r8, [r6], #1
 8012a8e:	9b04      	ldr	r3, [sp, #16]
 8012a90:	9a06      	ldr	r2, [sp, #24]
 8012a92:	1af3      	subs	r3, r6, r3
 8012a94:	429a      	cmp	r2, r3
 8012a96:	ddb4      	ble.n	8012a02 <_dtoa_r+0x9ea>
 8012a98:	2300      	movs	r3, #0
 8012a9a:	220a      	movs	r2, #10
 8012a9c:	9901      	ldr	r1, [sp, #4]
 8012a9e:	4620      	mov	r0, r4
 8012aa0:	f000 fd83 	bl	80135aa <__multadd>
 8012aa4:	9001      	str	r0, [sp, #4]
 8012aa6:	e7ea      	b.n	8012a7e <_dtoa_r+0xa66>
 8012aa8:	08015064 	.word	0x08015064
 8012aac:	080150e0 	.word	0x080150e0

08012ab0 <__sflush_r>:
 8012ab0:	898a      	ldrh	r2, [r1, #12]
 8012ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ab6:	4605      	mov	r5, r0
 8012ab8:	0710      	lsls	r0, r2, #28
 8012aba:	460c      	mov	r4, r1
 8012abc:	d458      	bmi.n	8012b70 <__sflush_r+0xc0>
 8012abe:	684b      	ldr	r3, [r1, #4]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	dc05      	bgt.n	8012ad0 <__sflush_r+0x20>
 8012ac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	dc02      	bgt.n	8012ad0 <__sflush_r+0x20>
 8012aca:	2000      	movs	r0, #0
 8012acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012ad2:	2e00      	cmp	r6, #0
 8012ad4:	d0f9      	beq.n	8012aca <__sflush_r+0x1a>
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012adc:	682f      	ldr	r7, [r5, #0]
 8012ade:	6a21      	ldr	r1, [r4, #32]
 8012ae0:	602b      	str	r3, [r5, #0]
 8012ae2:	d032      	beq.n	8012b4a <__sflush_r+0x9a>
 8012ae4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012ae6:	89a3      	ldrh	r3, [r4, #12]
 8012ae8:	075a      	lsls	r2, r3, #29
 8012aea:	d505      	bpl.n	8012af8 <__sflush_r+0x48>
 8012aec:	6863      	ldr	r3, [r4, #4]
 8012aee:	1ac0      	subs	r0, r0, r3
 8012af0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012af2:	b10b      	cbz	r3, 8012af8 <__sflush_r+0x48>
 8012af4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012af6:	1ac0      	subs	r0, r0, r3
 8012af8:	2300      	movs	r3, #0
 8012afa:	4602      	mov	r2, r0
 8012afc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012afe:	6a21      	ldr	r1, [r4, #32]
 8012b00:	4628      	mov	r0, r5
 8012b02:	47b0      	blx	r6
 8012b04:	1c43      	adds	r3, r0, #1
 8012b06:	89a3      	ldrh	r3, [r4, #12]
 8012b08:	d106      	bne.n	8012b18 <__sflush_r+0x68>
 8012b0a:	6829      	ldr	r1, [r5, #0]
 8012b0c:	291d      	cmp	r1, #29
 8012b0e:	d848      	bhi.n	8012ba2 <__sflush_r+0xf2>
 8012b10:	4a29      	ldr	r2, [pc, #164]	; (8012bb8 <__sflush_r+0x108>)
 8012b12:	40ca      	lsrs	r2, r1
 8012b14:	07d6      	lsls	r6, r2, #31
 8012b16:	d544      	bpl.n	8012ba2 <__sflush_r+0xf2>
 8012b18:	2200      	movs	r2, #0
 8012b1a:	6062      	str	r2, [r4, #4]
 8012b1c:	04d9      	lsls	r1, r3, #19
 8012b1e:	6922      	ldr	r2, [r4, #16]
 8012b20:	6022      	str	r2, [r4, #0]
 8012b22:	d504      	bpl.n	8012b2e <__sflush_r+0x7e>
 8012b24:	1c42      	adds	r2, r0, #1
 8012b26:	d101      	bne.n	8012b2c <__sflush_r+0x7c>
 8012b28:	682b      	ldr	r3, [r5, #0]
 8012b2a:	b903      	cbnz	r3, 8012b2e <__sflush_r+0x7e>
 8012b2c:	6560      	str	r0, [r4, #84]	; 0x54
 8012b2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b30:	602f      	str	r7, [r5, #0]
 8012b32:	2900      	cmp	r1, #0
 8012b34:	d0c9      	beq.n	8012aca <__sflush_r+0x1a>
 8012b36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b3a:	4299      	cmp	r1, r3
 8012b3c:	d002      	beq.n	8012b44 <__sflush_r+0x94>
 8012b3e:	4628      	mov	r0, r5
 8012b40:	f001 f8f6 	bl	8013d30 <_free_r>
 8012b44:	2000      	movs	r0, #0
 8012b46:	6360      	str	r0, [r4, #52]	; 0x34
 8012b48:	e7c0      	b.n	8012acc <__sflush_r+0x1c>
 8012b4a:	2301      	movs	r3, #1
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	47b0      	blx	r6
 8012b50:	1c41      	adds	r1, r0, #1
 8012b52:	d1c8      	bne.n	8012ae6 <__sflush_r+0x36>
 8012b54:	682b      	ldr	r3, [r5, #0]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d0c5      	beq.n	8012ae6 <__sflush_r+0x36>
 8012b5a:	2b1d      	cmp	r3, #29
 8012b5c:	d001      	beq.n	8012b62 <__sflush_r+0xb2>
 8012b5e:	2b16      	cmp	r3, #22
 8012b60:	d101      	bne.n	8012b66 <__sflush_r+0xb6>
 8012b62:	602f      	str	r7, [r5, #0]
 8012b64:	e7b1      	b.n	8012aca <__sflush_r+0x1a>
 8012b66:	89a3      	ldrh	r3, [r4, #12]
 8012b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b6c:	81a3      	strh	r3, [r4, #12]
 8012b6e:	e7ad      	b.n	8012acc <__sflush_r+0x1c>
 8012b70:	690f      	ldr	r7, [r1, #16]
 8012b72:	2f00      	cmp	r7, #0
 8012b74:	d0a9      	beq.n	8012aca <__sflush_r+0x1a>
 8012b76:	0793      	lsls	r3, r2, #30
 8012b78:	680e      	ldr	r6, [r1, #0]
 8012b7a:	bf08      	it	eq
 8012b7c:	694b      	ldreq	r3, [r1, #20]
 8012b7e:	600f      	str	r7, [r1, #0]
 8012b80:	bf18      	it	ne
 8012b82:	2300      	movne	r3, #0
 8012b84:	eba6 0807 	sub.w	r8, r6, r7
 8012b88:	608b      	str	r3, [r1, #8]
 8012b8a:	f1b8 0f00 	cmp.w	r8, #0
 8012b8e:	dd9c      	ble.n	8012aca <__sflush_r+0x1a>
 8012b90:	4643      	mov	r3, r8
 8012b92:	463a      	mov	r2, r7
 8012b94:	6a21      	ldr	r1, [r4, #32]
 8012b96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012b98:	4628      	mov	r0, r5
 8012b9a:	47b0      	blx	r6
 8012b9c:	2800      	cmp	r0, #0
 8012b9e:	dc06      	bgt.n	8012bae <__sflush_r+0xfe>
 8012ba0:	89a3      	ldrh	r3, [r4, #12]
 8012ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ba6:	81a3      	strh	r3, [r4, #12]
 8012ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8012bac:	e78e      	b.n	8012acc <__sflush_r+0x1c>
 8012bae:	4407      	add	r7, r0
 8012bb0:	eba8 0800 	sub.w	r8, r8, r0
 8012bb4:	e7e9      	b.n	8012b8a <__sflush_r+0xda>
 8012bb6:	bf00      	nop
 8012bb8:	20400001 	.word	0x20400001

08012bbc <_fflush_r>:
 8012bbc:	b538      	push	{r3, r4, r5, lr}
 8012bbe:	690b      	ldr	r3, [r1, #16]
 8012bc0:	4605      	mov	r5, r0
 8012bc2:	460c      	mov	r4, r1
 8012bc4:	b1db      	cbz	r3, 8012bfe <_fflush_r+0x42>
 8012bc6:	b118      	cbz	r0, 8012bd0 <_fflush_r+0x14>
 8012bc8:	6983      	ldr	r3, [r0, #24]
 8012bca:	b90b      	cbnz	r3, 8012bd0 <_fflush_r+0x14>
 8012bcc:	f000 f860 	bl	8012c90 <__sinit>
 8012bd0:	4b0c      	ldr	r3, [pc, #48]	; (8012c04 <_fflush_r+0x48>)
 8012bd2:	429c      	cmp	r4, r3
 8012bd4:	d109      	bne.n	8012bea <_fflush_r+0x2e>
 8012bd6:	686c      	ldr	r4, [r5, #4]
 8012bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bdc:	b17b      	cbz	r3, 8012bfe <_fflush_r+0x42>
 8012bde:	4621      	mov	r1, r4
 8012be0:	4628      	mov	r0, r5
 8012be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012be6:	f7ff bf63 	b.w	8012ab0 <__sflush_r>
 8012bea:	4b07      	ldr	r3, [pc, #28]	; (8012c08 <_fflush_r+0x4c>)
 8012bec:	429c      	cmp	r4, r3
 8012bee:	d101      	bne.n	8012bf4 <_fflush_r+0x38>
 8012bf0:	68ac      	ldr	r4, [r5, #8]
 8012bf2:	e7f1      	b.n	8012bd8 <_fflush_r+0x1c>
 8012bf4:	4b05      	ldr	r3, [pc, #20]	; (8012c0c <_fflush_r+0x50>)
 8012bf6:	429c      	cmp	r4, r3
 8012bf8:	bf08      	it	eq
 8012bfa:	68ec      	ldreq	r4, [r5, #12]
 8012bfc:	e7ec      	b.n	8012bd8 <_fflush_r+0x1c>
 8012bfe:	2000      	movs	r0, #0
 8012c00:	bd38      	pop	{r3, r4, r5, pc}
 8012c02:	bf00      	nop
 8012c04:	08015110 	.word	0x08015110
 8012c08:	08015130 	.word	0x08015130
 8012c0c:	080150f0 	.word	0x080150f0

08012c10 <std>:
 8012c10:	2300      	movs	r3, #0
 8012c12:	b510      	push	{r4, lr}
 8012c14:	4604      	mov	r4, r0
 8012c16:	e9c0 3300 	strd	r3, r3, [r0]
 8012c1a:	6083      	str	r3, [r0, #8]
 8012c1c:	8181      	strh	r1, [r0, #12]
 8012c1e:	6643      	str	r3, [r0, #100]	; 0x64
 8012c20:	81c2      	strh	r2, [r0, #14]
 8012c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012c26:	6183      	str	r3, [r0, #24]
 8012c28:	4619      	mov	r1, r3
 8012c2a:	2208      	movs	r2, #8
 8012c2c:	305c      	adds	r0, #92	; 0x5c
 8012c2e:	f7fd fb82 	bl	8010336 <memset>
 8012c32:	4b05      	ldr	r3, [pc, #20]	; (8012c48 <std+0x38>)
 8012c34:	6263      	str	r3, [r4, #36]	; 0x24
 8012c36:	4b05      	ldr	r3, [pc, #20]	; (8012c4c <std+0x3c>)
 8012c38:	62a3      	str	r3, [r4, #40]	; 0x28
 8012c3a:	4b05      	ldr	r3, [pc, #20]	; (8012c50 <std+0x40>)
 8012c3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012c3e:	4b05      	ldr	r3, [pc, #20]	; (8012c54 <std+0x44>)
 8012c40:	6224      	str	r4, [r4, #32]
 8012c42:	6323      	str	r3, [r4, #48]	; 0x30
 8012c44:	bd10      	pop	{r4, pc}
 8012c46:	bf00      	nop
 8012c48:	08014145 	.word	0x08014145
 8012c4c:	08014167 	.word	0x08014167
 8012c50:	0801419f 	.word	0x0801419f
 8012c54:	080141c3 	.word	0x080141c3

08012c58 <_cleanup_r>:
 8012c58:	4901      	ldr	r1, [pc, #4]	; (8012c60 <_cleanup_r+0x8>)
 8012c5a:	f000 b885 	b.w	8012d68 <_fwalk_reent>
 8012c5e:	bf00      	nop
 8012c60:	08012bbd 	.word	0x08012bbd

08012c64 <__sfmoreglue>:
 8012c64:	b570      	push	{r4, r5, r6, lr}
 8012c66:	1e4a      	subs	r2, r1, #1
 8012c68:	2568      	movs	r5, #104	; 0x68
 8012c6a:	4355      	muls	r5, r2
 8012c6c:	460e      	mov	r6, r1
 8012c6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012c72:	f001 f8ab 	bl	8013dcc <_malloc_r>
 8012c76:	4604      	mov	r4, r0
 8012c78:	b140      	cbz	r0, 8012c8c <__sfmoreglue+0x28>
 8012c7a:	2100      	movs	r1, #0
 8012c7c:	e9c0 1600 	strd	r1, r6, [r0]
 8012c80:	300c      	adds	r0, #12
 8012c82:	60a0      	str	r0, [r4, #8]
 8012c84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012c88:	f7fd fb55 	bl	8010336 <memset>
 8012c8c:	4620      	mov	r0, r4
 8012c8e:	bd70      	pop	{r4, r5, r6, pc}

08012c90 <__sinit>:
 8012c90:	6983      	ldr	r3, [r0, #24]
 8012c92:	b510      	push	{r4, lr}
 8012c94:	4604      	mov	r4, r0
 8012c96:	bb33      	cbnz	r3, 8012ce6 <__sinit+0x56>
 8012c98:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012c9c:	6503      	str	r3, [r0, #80]	; 0x50
 8012c9e:	4b12      	ldr	r3, [pc, #72]	; (8012ce8 <__sinit+0x58>)
 8012ca0:	4a12      	ldr	r2, [pc, #72]	; (8012cec <__sinit+0x5c>)
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	6282      	str	r2, [r0, #40]	; 0x28
 8012ca6:	4298      	cmp	r0, r3
 8012ca8:	bf04      	itt	eq
 8012caa:	2301      	moveq	r3, #1
 8012cac:	6183      	streq	r3, [r0, #24]
 8012cae:	f000 f81f 	bl	8012cf0 <__sfp>
 8012cb2:	6060      	str	r0, [r4, #4]
 8012cb4:	4620      	mov	r0, r4
 8012cb6:	f000 f81b 	bl	8012cf0 <__sfp>
 8012cba:	60a0      	str	r0, [r4, #8]
 8012cbc:	4620      	mov	r0, r4
 8012cbe:	f000 f817 	bl	8012cf0 <__sfp>
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	60e0      	str	r0, [r4, #12]
 8012cc6:	2104      	movs	r1, #4
 8012cc8:	6860      	ldr	r0, [r4, #4]
 8012cca:	f7ff ffa1 	bl	8012c10 <std>
 8012cce:	2201      	movs	r2, #1
 8012cd0:	2109      	movs	r1, #9
 8012cd2:	68a0      	ldr	r0, [r4, #8]
 8012cd4:	f7ff ff9c 	bl	8012c10 <std>
 8012cd8:	2202      	movs	r2, #2
 8012cda:	2112      	movs	r1, #18
 8012cdc:	68e0      	ldr	r0, [r4, #12]
 8012cde:	f7ff ff97 	bl	8012c10 <std>
 8012ce2:	2301      	movs	r3, #1
 8012ce4:	61a3      	str	r3, [r4, #24]
 8012ce6:	bd10      	pop	{r4, pc}
 8012ce8:	08015050 	.word	0x08015050
 8012cec:	08012c59 	.word	0x08012c59

08012cf0 <__sfp>:
 8012cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cf2:	4b1b      	ldr	r3, [pc, #108]	; (8012d60 <__sfp+0x70>)
 8012cf4:	681e      	ldr	r6, [r3, #0]
 8012cf6:	69b3      	ldr	r3, [r6, #24]
 8012cf8:	4607      	mov	r7, r0
 8012cfa:	b913      	cbnz	r3, 8012d02 <__sfp+0x12>
 8012cfc:	4630      	mov	r0, r6
 8012cfe:	f7ff ffc7 	bl	8012c90 <__sinit>
 8012d02:	3648      	adds	r6, #72	; 0x48
 8012d04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012d08:	3b01      	subs	r3, #1
 8012d0a:	d503      	bpl.n	8012d14 <__sfp+0x24>
 8012d0c:	6833      	ldr	r3, [r6, #0]
 8012d0e:	b133      	cbz	r3, 8012d1e <__sfp+0x2e>
 8012d10:	6836      	ldr	r6, [r6, #0]
 8012d12:	e7f7      	b.n	8012d04 <__sfp+0x14>
 8012d14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012d18:	b16d      	cbz	r5, 8012d36 <__sfp+0x46>
 8012d1a:	3468      	adds	r4, #104	; 0x68
 8012d1c:	e7f4      	b.n	8012d08 <__sfp+0x18>
 8012d1e:	2104      	movs	r1, #4
 8012d20:	4638      	mov	r0, r7
 8012d22:	f7ff ff9f 	bl	8012c64 <__sfmoreglue>
 8012d26:	6030      	str	r0, [r6, #0]
 8012d28:	2800      	cmp	r0, #0
 8012d2a:	d1f1      	bne.n	8012d10 <__sfp+0x20>
 8012d2c:	230c      	movs	r3, #12
 8012d2e:	603b      	str	r3, [r7, #0]
 8012d30:	4604      	mov	r4, r0
 8012d32:	4620      	mov	r0, r4
 8012d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d36:	4b0b      	ldr	r3, [pc, #44]	; (8012d64 <__sfp+0x74>)
 8012d38:	6665      	str	r5, [r4, #100]	; 0x64
 8012d3a:	e9c4 5500 	strd	r5, r5, [r4]
 8012d3e:	60a5      	str	r5, [r4, #8]
 8012d40:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012d44:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012d48:	2208      	movs	r2, #8
 8012d4a:	4629      	mov	r1, r5
 8012d4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012d50:	f7fd faf1 	bl	8010336 <memset>
 8012d54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012d58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012d5c:	e7e9      	b.n	8012d32 <__sfp+0x42>
 8012d5e:	bf00      	nop
 8012d60:	08015050 	.word	0x08015050
 8012d64:	ffff0001 	.word	0xffff0001

08012d68 <_fwalk_reent>:
 8012d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d6c:	4680      	mov	r8, r0
 8012d6e:	4689      	mov	r9, r1
 8012d70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012d74:	2600      	movs	r6, #0
 8012d76:	b914      	cbnz	r4, 8012d7e <_fwalk_reent+0x16>
 8012d78:	4630      	mov	r0, r6
 8012d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d7e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012d82:	3f01      	subs	r7, #1
 8012d84:	d501      	bpl.n	8012d8a <_fwalk_reent+0x22>
 8012d86:	6824      	ldr	r4, [r4, #0]
 8012d88:	e7f5      	b.n	8012d76 <_fwalk_reent+0xe>
 8012d8a:	89ab      	ldrh	r3, [r5, #12]
 8012d8c:	2b01      	cmp	r3, #1
 8012d8e:	d907      	bls.n	8012da0 <_fwalk_reent+0x38>
 8012d90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d94:	3301      	adds	r3, #1
 8012d96:	d003      	beq.n	8012da0 <_fwalk_reent+0x38>
 8012d98:	4629      	mov	r1, r5
 8012d9a:	4640      	mov	r0, r8
 8012d9c:	47c8      	blx	r9
 8012d9e:	4306      	orrs	r6, r0
 8012da0:	3568      	adds	r5, #104	; 0x68
 8012da2:	e7ee      	b.n	8012d82 <_fwalk_reent+0x1a>

08012da4 <rshift>:
 8012da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012da6:	6906      	ldr	r6, [r0, #16]
 8012da8:	114b      	asrs	r3, r1, #5
 8012daa:	429e      	cmp	r6, r3
 8012dac:	f100 0414 	add.w	r4, r0, #20
 8012db0:	dd30      	ble.n	8012e14 <rshift+0x70>
 8012db2:	f011 011f 	ands.w	r1, r1, #31
 8012db6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012dba:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8012dbe:	d108      	bne.n	8012dd2 <rshift+0x2e>
 8012dc0:	4621      	mov	r1, r4
 8012dc2:	42b2      	cmp	r2, r6
 8012dc4:	460b      	mov	r3, r1
 8012dc6:	d211      	bcs.n	8012dec <rshift+0x48>
 8012dc8:	f852 3b04 	ldr.w	r3, [r2], #4
 8012dcc:	f841 3b04 	str.w	r3, [r1], #4
 8012dd0:	e7f7      	b.n	8012dc2 <rshift+0x1e>
 8012dd2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8012dd6:	f1c1 0c20 	rsb	ip, r1, #32
 8012dda:	40cd      	lsrs	r5, r1
 8012ddc:	3204      	adds	r2, #4
 8012dde:	4623      	mov	r3, r4
 8012de0:	42b2      	cmp	r2, r6
 8012de2:	4617      	mov	r7, r2
 8012de4:	d30c      	bcc.n	8012e00 <rshift+0x5c>
 8012de6:	601d      	str	r5, [r3, #0]
 8012de8:	b105      	cbz	r5, 8012dec <rshift+0x48>
 8012dea:	3304      	adds	r3, #4
 8012dec:	1b1a      	subs	r2, r3, r4
 8012dee:	42a3      	cmp	r3, r4
 8012df0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012df4:	bf08      	it	eq
 8012df6:	2300      	moveq	r3, #0
 8012df8:	6102      	str	r2, [r0, #16]
 8012dfa:	bf08      	it	eq
 8012dfc:	6143      	streq	r3, [r0, #20]
 8012dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e00:	683f      	ldr	r7, [r7, #0]
 8012e02:	fa07 f70c 	lsl.w	r7, r7, ip
 8012e06:	433d      	orrs	r5, r7
 8012e08:	f843 5b04 	str.w	r5, [r3], #4
 8012e0c:	f852 5b04 	ldr.w	r5, [r2], #4
 8012e10:	40cd      	lsrs	r5, r1
 8012e12:	e7e5      	b.n	8012de0 <rshift+0x3c>
 8012e14:	4623      	mov	r3, r4
 8012e16:	e7e9      	b.n	8012dec <rshift+0x48>

08012e18 <__hexdig_fun>:
 8012e18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012e1c:	2b09      	cmp	r3, #9
 8012e1e:	d802      	bhi.n	8012e26 <__hexdig_fun+0xe>
 8012e20:	3820      	subs	r0, #32
 8012e22:	b2c0      	uxtb	r0, r0
 8012e24:	4770      	bx	lr
 8012e26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012e2a:	2b05      	cmp	r3, #5
 8012e2c:	d801      	bhi.n	8012e32 <__hexdig_fun+0x1a>
 8012e2e:	3847      	subs	r0, #71	; 0x47
 8012e30:	e7f7      	b.n	8012e22 <__hexdig_fun+0xa>
 8012e32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012e36:	2b05      	cmp	r3, #5
 8012e38:	d801      	bhi.n	8012e3e <__hexdig_fun+0x26>
 8012e3a:	3827      	subs	r0, #39	; 0x27
 8012e3c:	e7f1      	b.n	8012e22 <__hexdig_fun+0xa>
 8012e3e:	2000      	movs	r0, #0
 8012e40:	4770      	bx	lr

08012e42 <__gethex>:
 8012e42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e46:	b08b      	sub	sp, #44	; 0x2c
 8012e48:	468a      	mov	sl, r1
 8012e4a:	9002      	str	r0, [sp, #8]
 8012e4c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012e4e:	9306      	str	r3, [sp, #24]
 8012e50:	4690      	mov	r8, r2
 8012e52:	f000 fad0 	bl	80133f6 <__localeconv_l>
 8012e56:	6803      	ldr	r3, [r0, #0]
 8012e58:	9303      	str	r3, [sp, #12]
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7ed f9f0 	bl	8000240 <strlen>
 8012e60:	9b03      	ldr	r3, [sp, #12]
 8012e62:	9001      	str	r0, [sp, #4]
 8012e64:	4403      	add	r3, r0
 8012e66:	f04f 0b00 	mov.w	fp, #0
 8012e6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012e6e:	9307      	str	r3, [sp, #28]
 8012e70:	f8da 3000 	ldr.w	r3, [sl]
 8012e74:	3302      	adds	r3, #2
 8012e76:	461f      	mov	r7, r3
 8012e78:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012e7c:	2830      	cmp	r0, #48	; 0x30
 8012e7e:	d06c      	beq.n	8012f5a <__gethex+0x118>
 8012e80:	f7ff ffca 	bl	8012e18 <__hexdig_fun>
 8012e84:	4604      	mov	r4, r0
 8012e86:	2800      	cmp	r0, #0
 8012e88:	d16a      	bne.n	8012f60 <__gethex+0x11e>
 8012e8a:	9a01      	ldr	r2, [sp, #4]
 8012e8c:	9903      	ldr	r1, [sp, #12]
 8012e8e:	4638      	mov	r0, r7
 8012e90:	f001 f99b 	bl	80141ca <strncmp>
 8012e94:	2800      	cmp	r0, #0
 8012e96:	d166      	bne.n	8012f66 <__gethex+0x124>
 8012e98:	9b01      	ldr	r3, [sp, #4]
 8012e9a:	5cf8      	ldrb	r0, [r7, r3]
 8012e9c:	18fe      	adds	r6, r7, r3
 8012e9e:	f7ff ffbb 	bl	8012e18 <__hexdig_fun>
 8012ea2:	2800      	cmp	r0, #0
 8012ea4:	d062      	beq.n	8012f6c <__gethex+0x12a>
 8012ea6:	4633      	mov	r3, r6
 8012ea8:	7818      	ldrb	r0, [r3, #0]
 8012eaa:	2830      	cmp	r0, #48	; 0x30
 8012eac:	461f      	mov	r7, r3
 8012eae:	f103 0301 	add.w	r3, r3, #1
 8012eb2:	d0f9      	beq.n	8012ea8 <__gethex+0x66>
 8012eb4:	f7ff ffb0 	bl	8012e18 <__hexdig_fun>
 8012eb8:	fab0 f580 	clz	r5, r0
 8012ebc:	096d      	lsrs	r5, r5, #5
 8012ebe:	4634      	mov	r4, r6
 8012ec0:	f04f 0b01 	mov.w	fp, #1
 8012ec4:	463a      	mov	r2, r7
 8012ec6:	4616      	mov	r6, r2
 8012ec8:	3201      	adds	r2, #1
 8012eca:	7830      	ldrb	r0, [r6, #0]
 8012ecc:	f7ff ffa4 	bl	8012e18 <__hexdig_fun>
 8012ed0:	2800      	cmp	r0, #0
 8012ed2:	d1f8      	bne.n	8012ec6 <__gethex+0x84>
 8012ed4:	9a01      	ldr	r2, [sp, #4]
 8012ed6:	9903      	ldr	r1, [sp, #12]
 8012ed8:	4630      	mov	r0, r6
 8012eda:	f001 f976 	bl	80141ca <strncmp>
 8012ede:	b950      	cbnz	r0, 8012ef6 <__gethex+0xb4>
 8012ee0:	b954      	cbnz	r4, 8012ef8 <__gethex+0xb6>
 8012ee2:	9b01      	ldr	r3, [sp, #4]
 8012ee4:	18f4      	adds	r4, r6, r3
 8012ee6:	4622      	mov	r2, r4
 8012ee8:	4616      	mov	r6, r2
 8012eea:	3201      	adds	r2, #1
 8012eec:	7830      	ldrb	r0, [r6, #0]
 8012eee:	f7ff ff93 	bl	8012e18 <__hexdig_fun>
 8012ef2:	2800      	cmp	r0, #0
 8012ef4:	d1f8      	bne.n	8012ee8 <__gethex+0xa6>
 8012ef6:	b10c      	cbz	r4, 8012efc <__gethex+0xba>
 8012ef8:	1ba4      	subs	r4, r4, r6
 8012efa:	00a4      	lsls	r4, r4, #2
 8012efc:	7833      	ldrb	r3, [r6, #0]
 8012efe:	2b50      	cmp	r3, #80	; 0x50
 8012f00:	d001      	beq.n	8012f06 <__gethex+0xc4>
 8012f02:	2b70      	cmp	r3, #112	; 0x70
 8012f04:	d140      	bne.n	8012f88 <__gethex+0x146>
 8012f06:	7873      	ldrb	r3, [r6, #1]
 8012f08:	2b2b      	cmp	r3, #43	; 0x2b
 8012f0a:	d031      	beq.n	8012f70 <__gethex+0x12e>
 8012f0c:	2b2d      	cmp	r3, #45	; 0x2d
 8012f0e:	d033      	beq.n	8012f78 <__gethex+0x136>
 8012f10:	1c71      	adds	r1, r6, #1
 8012f12:	f04f 0900 	mov.w	r9, #0
 8012f16:	7808      	ldrb	r0, [r1, #0]
 8012f18:	f7ff ff7e 	bl	8012e18 <__hexdig_fun>
 8012f1c:	1e43      	subs	r3, r0, #1
 8012f1e:	b2db      	uxtb	r3, r3
 8012f20:	2b18      	cmp	r3, #24
 8012f22:	d831      	bhi.n	8012f88 <__gethex+0x146>
 8012f24:	f1a0 0210 	sub.w	r2, r0, #16
 8012f28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012f2c:	f7ff ff74 	bl	8012e18 <__hexdig_fun>
 8012f30:	1e43      	subs	r3, r0, #1
 8012f32:	b2db      	uxtb	r3, r3
 8012f34:	2b18      	cmp	r3, #24
 8012f36:	d922      	bls.n	8012f7e <__gethex+0x13c>
 8012f38:	f1b9 0f00 	cmp.w	r9, #0
 8012f3c:	d000      	beq.n	8012f40 <__gethex+0xfe>
 8012f3e:	4252      	negs	r2, r2
 8012f40:	4414      	add	r4, r2
 8012f42:	f8ca 1000 	str.w	r1, [sl]
 8012f46:	b30d      	cbz	r5, 8012f8c <__gethex+0x14a>
 8012f48:	f1bb 0f00 	cmp.w	fp, #0
 8012f4c:	bf0c      	ite	eq
 8012f4e:	2706      	moveq	r7, #6
 8012f50:	2700      	movne	r7, #0
 8012f52:	4638      	mov	r0, r7
 8012f54:	b00b      	add	sp, #44	; 0x2c
 8012f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f5a:	f10b 0b01 	add.w	fp, fp, #1
 8012f5e:	e78a      	b.n	8012e76 <__gethex+0x34>
 8012f60:	2500      	movs	r5, #0
 8012f62:	462c      	mov	r4, r5
 8012f64:	e7ae      	b.n	8012ec4 <__gethex+0x82>
 8012f66:	463e      	mov	r6, r7
 8012f68:	2501      	movs	r5, #1
 8012f6a:	e7c7      	b.n	8012efc <__gethex+0xba>
 8012f6c:	4604      	mov	r4, r0
 8012f6e:	e7fb      	b.n	8012f68 <__gethex+0x126>
 8012f70:	f04f 0900 	mov.w	r9, #0
 8012f74:	1cb1      	adds	r1, r6, #2
 8012f76:	e7ce      	b.n	8012f16 <__gethex+0xd4>
 8012f78:	f04f 0901 	mov.w	r9, #1
 8012f7c:	e7fa      	b.n	8012f74 <__gethex+0x132>
 8012f7e:	230a      	movs	r3, #10
 8012f80:	fb03 0202 	mla	r2, r3, r2, r0
 8012f84:	3a10      	subs	r2, #16
 8012f86:	e7cf      	b.n	8012f28 <__gethex+0xe6>
 8012f88:	4631      	mov	r1, r6
 8012f8a:	e7da      	b.n	8012f42 <__gethex+0x100>
 8012f8c:	1bf3      	subs	r3, r6, r7
 8012f8e:	3b01      	subs	r3, #1
 8012f90:	4629      	mov	r1, r5
 8012f92:	2b07      	cmp	r3, #7
 8012f94:	dc49      	bgt.n	801302a <__gethex+0x1e8>
 8012f96:	9802      	ldr	r0, [sp, #8]
 8012f98:	f000 fabc 	bl	8013514 <_Balloc>
 8012f9c:	9b01      	ldr	r3, [sp, #4]
 8012f9e:	f100 0914 	add.w	r9, r0, #20
 8012fa2:	f04f 0b00 	mov.w	fp, #0
 8012fa6:	f1c3 0301 	rsb	r3, r3, #1
 8012faa:	4605      	mov	r5, r0
 8012fac:	f8cd 9010 	str.w	r9, [sp, #16]
 8012fb0:	46da      	mov	sl, fp
 8012fb2:	9308      	str	r3, [sp, #32]
 8012fb4:	42b7      	cmp	r7, r6
 8012fb6:	d33b      	bcc.n	8013030 <__gethex+0x1ee>
 8012fb8:	9804      	ldr	r0, [sp, #16]
 8012fba:	f840 ab04 	str.w	sl, [r0], #4
 8012fbe:	eba0 0009 	sub.w	r0, r0, r9
 8012fc2:	1080      	asrs	r0, r0, #2
 8012fc4:	6128      	str	r0, [r5, #16]
 8012fc6:	0147      	lsls	r7, r0, #5
 8012fc8:	4650      	mov	r0, sl
 8012fca:	f000 fb67 	bl	801369c <__hi0bits>
 8012fce:	f8d8 6000 	ldr.w	r6, [r8]
 8012fd2:	1a3f      	subs	r7, r7, r0
 8012fd4:	42b7      	cmp	r7, r6
 8012fd6:	dd64      	ble.n	80130a2 <__gethex+0x260>
 8012fd8:	1bbf      	subs	r7, r7, r6
 8012fda:	4639      	mov	r1, r7
 8012fdc:	4628      	mov	r0, r5
 8012fde:	f000 fe78 	bl	8013cd2 <__any_on>
 8012fe2:	4682      	mov	sl, r0
 8012fe4:	b178      	cbz	r0, 8013006 <__gethex+0x1c4>
 8012fe6:	1e7b      	subs	r3, r7, #1
 8012fe8:	1159      	asrs	r1, r3, #5
 8012fea:	f003 021f 	and.w	r2, r3, #31
 8012fee:	f04f 0a01 	mov.w	sl, #1
 8012ff2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012ff6:	fa0a f202 	lsl.w	r2, sl, r2
 8012ffa:	420a      	tst	r2, r1
 8012ffc:	d003      	beq.n	8013006 <__gethex+0x1c4>
 8012ffe:	4553      	cmp	r3, sl
 8013000:	dc46      	bgt.n	8013090 <__gethex+0x24e>
 8013002:	f04f 0a02 	mov.w	sl, #2
 8013006:	4639      	mov	r1, r7
 8013008:	4628      	mov	r0, r5
 801300a:	f7ff fecb 	bl	8012da4 <rshift>
 801300e:	443c      	add	r4, r7
 8013010:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013014:	42a3      	cmp	r3, r4
 8013016:	da52      	bge.n	80130be <__gethex+0x27c>
 8013018:	4629      	mov	r1, r5
 801301a:	9802      	ldr	r0, [sp, #8]
 801301c:	f000 faae 	bl	801357c <_Bfree>
 8013020:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013022:	2300      	movs	r3, #0
 8013024:	6013      	str	r3, [r2, #0]
 8013026:	27a3      	movs	r7, #163	; 0xa3
 8013028:	e793      	b.n	8012f52 <__gethex+0x110>
 801302a:	3101      	adds	r1, #1
 801302c:	105b      	asrs	r3, r3, #1
 801302e:	e7b0      	b.n	8012f92 <__gethex+0x150>
 8013030:	1e73      	subs	r3, r6, #1
 8013032:	9305      	str	r3, [sp, #20]
 8013034:	9a07      	ldr	r2, [sp, #28]
 8013036:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801303a:	4293      	cmp	r3, r2
 801303c:	d018      	beq.n	8013070 <__gethex+0x22e>
 801303e:	f1bb 0f20 	cmp.w	fp, #32
 8013042:	d107      	bne.n	8013054 <__gethex+0x212>
 8013044:	9b04      	ldr	r3, [sp, #16]
 8013046:	f8c3 a000 	str.w	sl, [r3]
 801304a:	3304      	adds	r3, #4
 801304c:	f04f 0a00 	mov.w	sl, #0
 8013050:	9304      	str	r3, [sp, #16]
 8013052:	46d3      	mov	fp, sl
 8013054:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013058:	f7ff fede 	bl	8012e18 <__hexdig_fun>
 801305c:	f000 000f 	and.w	r0, r0, #15
 8013060:	fa00 f00b 	lsl.w	r0, r0, fp
 8013064:	ea4a 0a00 	orr.w	sl, sl, r0
 8013068:	f10b 0b04 	add.w	fp, fp, #4
 801306c:	9b05      	ldr	r3, [sp, #20]
 801306e:	e00d      	b.n	801308c <__gethex+0x24a>
 8013070:	9b05      	ldr	r3, [sp, #20]
 8013072:	9a08      	ldr	r2, [sp, #32]
 8013074:	4413      	add	r3, r2
 8013076:	42bb      	cmp	r3, r7
 8013078:	d3e1      	bcc.n	801303e <__gethex+0x1fc>
 801307a:	4618      	mov	r0, r3
 801307c:	9a01      	ldr	r2, [sp, #4]
 801307e:	9903      	ldr	r1, [sp, #12]
 8013080:	9309      	str	r3, [sp, #36]	; 0x24
 8013082:	f001 f8a2 	bl	80141ca <strncmp>
 8013086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013088:	2800      	cmp	r0, #0
 801308a:	d1d8      	bne.n	801303e <__gethex+0x1fc>
 801308c:	461e      	mov	r6, r3
 801308e:	e791      	b.n	8012fb4 <__gethex+0x172>
 8013090:	1eb9      	subs	r1, r7, #2
 8013092:	4628      	mov	r0, r5
 8013094:	f000 fe1d 	bl	8013cd2 <__any_on>
 8013098:	2800      	cmp	r0, #0
 801309a:	d0b2      	beq.n	8013002 <__gethex+0x1c0>
 801309c:	f04f 0a03 	mov.w	sl, #3
 80130a0:	e7b1      	b.n	8013006 <__gethex+0x1c4>
 80130a2:	da09      	bge.n	80130b8 <__gethex+0x276>
 80130a4:	1bf7      	subs	r7, r6, r7
 80130a6:	4629      	mov	r1, r5
 80130a8:	463a      	mov	r2, r7
 80130aa:	9802      	ldr	r0, [sp, #8]
 80130ac:	f000 fc32 	bl	8013914 <__lshift>
 80130b0:	1be4      	subs	r4, r4, r7
 80130b2:	4605      	mov	r5, r0
 80130b4:	f100 0914 	add.w	r9, r0, #20
 80130b8:	f04f 0a00 	mov.w	sl, #0
 80130bc:	e7a8      	b.n	8013010 <__gethex+0x1ce>
 80130be:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80130c2:	42a0      	cmp	r0, r4
 80130c4:	dd6a      	ble.n	801319c <__gethex+0x35a>
 80130c6:	1b04      	subs	r4, r0, r4
 80130c8:	42a6      	cmp	r6, r4
 80130ca:	dc2e      	bgt.n	801312a <__gethex+0x2e8>
 80130cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80130d0:	2b02      	cmp	r3, #2
 80130d2:	d022      	beq.n	801311a <__gethex+0x2d8>
 80130d4:	2b03      	cmp	r3, #3
 80130d6:	d024      	beq.n	8013122 <__gethex+0x2e0>
 80130d8:	2b01      	cmp	r3, #1
 80130da:	d115      	bne.n	8013108 <__gethex+0x2c6>
 80130dc:	42a6      	cmp	r6, r4
 80130de:	d113      	bne.n	8013108 <__gethex+0x2c6>
 80130e0:	2e01      	cmp	r6, #1
 80130e2:	dc0b      	bgt.n	80130fc <__gethex+0x2ba>
 80130e4:	9a06      	ldr	r2, [sp, #24]
 80130e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80130ea:	6013      	str	r3, [r2, #0]
 80130ec:	2301      	movs	r3, #1
 80130ee:	612b      	str	r3, [r5, #16]
 80130f0:	f8c9 3000 	str.w	r3, [r9]
 80130f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80130f6:	2762      	movs	r7, #98	; 0x62
 80130f8:	601d      	str	r5, [r3, #0]
 80130fa:	e72a      	b.n	8012f52 <__gethex+0x110>
 80130fc:	1e71      	subs	r1, r6, #1
 80130fe:	4628      	mov	r0, r5
 8013100:	f000 fde7 	bl	8013cd2 <__any_on>
 8013104:	2800      	cmp	r0, #0
 8013106:	d1ed      	bne.n	80130e4 <__gethex+0x2a2>
 8013108:	4629      	mov	r1, r5
 801310a:	9802      	ldr	r0, [sp, #8]
 801310c:	f000 fa36 	bl	801357c <_Bfree>
 8013110:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013112:	2300      	movs	r3, #0
 8013114:	6013      	str	r3, [r2, #0]
 8013116:	2750      	movs	r7, #80	; 0x50
 8013118:	e71b      	b.n	8012f52 <__gethex+0x110>
 801311a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801311c:	2b00      	cmp	r3, #0
 801311e:	d0e1      	beq.n	80130e4 <__gethex+0x2a2>
 8013120:	e7f2      	b.n	8013108 <__gethex+0x2c6>
 8013122:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013124:	2b00      	cmp	r3, #0
 8013126:	d1dd      	bne.n	80130e4 <__gethex+0x2a2>
 8013128:	e7ee      	b.n	8013108 <__gethex+0x2c6>
 801312a:	1e67      	subs	r7, r4, #1
 801312c:	f1ba 0f00 	cmp.w	sl, #0
 8013130:	d131      	bne.n	8013196 <__gethex+0x354>
 8013132:	b127      	cbz	r7, 801313e <__gethex+0x2fc>
 8013134:	4639      	mov	r1, r7
 8013136:	4628      	mov	r0, r5
 8013138:	f000 fdcb 	bl	8013cd2 <__any_on>
 801313c:	4682      	mov	sl, r0
 801313e:	117a      	asrs	r2, r7, #5
 8013140:	2301      	movs	r3, #1
 8013142:	f007 071f 	and.w	r7, r7, #31
 8013146:	fa03 f707 	lsl.w	r7, r3, r7
 801314a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801314e:	4621      	mov	r1, r4
 8013150:	421f      	tst	r7, r3
 8013152:	4628      	mov	r0, r5
 8013154:	bf18      	it	ne
 8013156:	f04a 0a02 	orrne.w	sl, sl, #2
 801315a:	1b36      	subs	r6, r6, r4
 801315c:	f7ff fe22 	bl	8012da4 <rshift>
 8013160:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013164:	2702      	movs	r7, #2
 8013166:	f1ba 0f00 	cmp.w	sl, #0
 801316a:	d048      	beq.n	80131fe <__gethex+0x3bc>
 801316c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013170:	2b02      	cmp	r3, #2
 8013172:	d015      	beq.n	80131a0 <__gethex+0x35e>
 8013174:	2b03      	cmp	r3, #3
 8013176:	d017      	beq.n	80131a8 <__gethex+0x366>
 8013178:	2b01      	cmp	r3, #1
 801317a:	d109      	bne.n	8013190 <__gethex+0x34e>
 801317c:	f01a 0f02 	tst.w	sl, #2
 8013180:	d006      	beq.n	8013190 <__gethex+0x34e>
 8013182:	f8d9 3000 	ldr.w	r3, [r9]
 8013186:	ea4a 0a03 	orr.w	sl, sl, r3
 801318a:	f01a 0f01 	tst.w	sl, #1
 801318e:	d10e      	bne.n	80131ae <__gethex+0x36c>
 8013190:	f047 0710 	orr.w	r7, r7, #16
 8013194:	e033      	b.n	80131fe <__gethex+0x3bc>
 8013196:	f04f 0a01 	mov.w	sl, #1
 801319a:	e7d0      	b.n	801313e <__gethex+0x2fc>
 801319c:	2701      	movs	r7, #1
 801319e:	e7e2      	b.n	8013166 <__gethex+0x324>
 80131a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131a2:	f1c3 0301 	rsb	r3, r3, #1
 80131a6:	9315      	str	r3, [sp, #84]	; 0x54
 80131a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d0f0      	beq.n	8013190 <__gethex+0x34e>
 80131ae:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80131b2:	f105 0314 	add.w	r3, r5, #20
 80131b6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80131ba:	eb03 010a 	add.w	r1, r3, sl
 80131be:	f04f 0c00 	mov.w	ip, #0
 80131c2:	4618      	mov	r0, r3
 80131c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80131c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80131cc:	d01c      	beq.n	8013208 <__gethex+0x3c6>
 80131ce:	3201      	adds	r2, #1
 80131d0:	6002      	str	r2, [r0, #0]
 80131d2:	2f02      	cmp	r7, #2
 80131d4:	f105 0314 	add.w	r3, r5, #20
 80131d8:	d138      	bne.n	801324c <__gethex+0x40a>
 80131da:	f8d8 2000 	ldr.w	r2, [r8]
 80131de:	3a01      	subs	r2, #1
 80131e0:	42b2      	cmp	r2, r6
 80131e2:	d10a      	bne.n	80131fa <__gethex+0x3b8>
 80131e4:	1171      	asrs	r1, r6, #5
 80131e6:	2201      	movs	r2, #1
 80131e8:	f006 061f 	and.w	r6, r6, #31
 80131ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80131f0:	fa02 f606 	lsl.w	r6, r2, r6
 80131f4:	421e      	tst	r6, r3
 80131f6:	bf18      	it	ne
 80131f8:	4617      	movne	r7, r2
 80131fa:	f047 0720 	orr.w	r7, r7, #32
 80131fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013200:	601d      	str	r5, [r3, #0]
 8013202:	9b06      	ldr	r3, [sp, #24]
 8013204:	601c      	str	r4, [r3, #0]
 8013206:	e6a4      	b.n	8012f52 <__gethex+0x110>
 8013208:	4299      	cmp	r1, r3
 801320a:	f843 cc04 	str.w	ip, [r3, #-4]
 801320e:	d8d8      	bhi.n	80131c2 <__gethex+0x380>
 8013210:	68ab      	ldr	r3, [r5, #8]
 8013212:	4599      	cmp	r9, r3
 8013214:	db12      	blt.n	801323c <__gethex+0x3fa>
 8013216:	6869      	ldr	r1, [r5, #4]
 8013218:	9802      	ldr	r0, [sp, #8]
 801321a:	3101      	adds	r1, #1
 801321c:	f000 f97a 	bl	8013514 <_Balloc>
 8013220:	692a      	ldr	r2, [r5, #16]
 8013222:	3202      	adds	r2, #2
 8013224:	f105 010c 	add.w	r1, r5, #12
 8013228:	4683      	mov	fp, r0
 801322a:	0092      	lsls	r2, r2, #2
 801322c:	300c      	adds	r0, #12
 801322e:	f7fd f877 	bl	8010320 <memcpy>
 8013232:	4629      	mov	r1, r5
 8013234:	9802      	ldr	r0, [sp, #8]
 8013236:	f000 f9a1 	bl	801357c <_Bfree>
 801323a:	465d      	mov	r5, fp
 801323c:	692b      	ldr	r3, [r5, #16]
 801323e:	1c5a      	adds	r2, r3, #1
 8013240:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013244:	612a      	str	r2, [r5, #16]
 8013246:	2201      	movs	r2, #1
 8013248:	615a      	str	r2, [r3, #20]
 801324a:	e7c2      	b.n	80131d2 <__gethex+0x390>
 801324c:	692a      	ldr	r2, [r5, #16]
 801324e:	454a      	cmp	r2, r9
 8013250:	dd0b      	ble.n	801326a <__gethex+0x428>
 8013252:	2101      	movs	r1, #1
 8013254:	4628      	mov	r0, r5
 8013256:	f7ff fda5 	bl	8012da4 <rshift>
 801325a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801325e:	3401      	adds	r4, #1
 8013260:	42a3      	cmp	r3, r4
 8013262:	f6ff aed9 	blt.w	8013018 <__gethex+0x1d6>
 8013266:	2701      	movs	r7, #1
 8013268:	e7c7      	b.n	80131fa <__gethex+0x3b8>
 801326a:	f016 061f 	ands.w	r6, r6, #31
 801326e:	d0fa      	beq.n	8013266 <__gethex+0x424>
 8013270:	449a      	add	sl, r3
 8013272:	f1c6 0620 	rsb	r6, r6, #32
 8013276:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801327a:	f000 fa0f 	bl	801369c <__hi0bits>
 801327e:	42b0      	cmp	r0, r6
 8013280:	dbe7      	blt.n	8013252 <__gethex+0x410>
 8013282:	e7f0      	b.n	8013266 <__gethex+0x424>

08013284 <L_shift>:
 8013284:	f1c2 0208 	rsb	r2, r2, #8
 8013288:	0092      	lsls	r2, r2, #2
 801328a:	b570      	push	{r4, r5, r6, lr}
 801328c:	f1c2 0620 	rsb	r6, r2, #32
 8013290:	6843      	ldr	r3, [r0, #4]
 8013292:	6804      	ldr	r4, [r0, #0]
 8013294:	fa03 f506 	lsl.w	r5, r3, r6
 8013298:	432c      	orrs	r4, r5
 801329a:	40d3      	lsrs	r3, r2
 801329c:	6004      	str	r4, [r0, #0]
 801329e:	f840 3f04 	str.w	r3, [r0, #4]!
 80132a2:	4288      	cmp	r0, r1
 80132a4:	d3f4      	bcc.n	8013290 <L_shift+0xc>
 80132a6:	bd70      	pop	{r4, r5, r6, pc}

080132a8 <__match>:
 80132a8:	b530      	push	{r4, r5, lr}
 80132aa:	6803      	ldr	r3, [r0, #0]
 80132ac:	3301      	adds	r3, #1
 80132ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80132b2:	b914      	cbnz	r4, 80132ba <__match+0x12>
 80132b4:	6003      	str	r3, [r0, #0]
 80132b6:	2001      	movs	r0, #1
 80132b8:	bd30      	pop	{r4, r5, pc}
 80132ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80132c2:	2d19      	cmp	r5, #25
 80132c4:	bf98      	it	ls
 80132c6:	3220      	addls	r2, #32
 80132c8:	42a2      	cmp	r2, r4
 80132ca:	d0f0      	beq.n	80132ae <__match+0x6>
 80132cc:	2000      	movs	r0, #0
 80132ce:	e7f3      	b.n	80132b8 <__match+0x10>

080132d0 <__hexnan>:
 80132d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d4:	680b      	ldr	r3, [r1, #0]
 80132d6:	6801      	ldr	r1, [r0, #0]
 80132d8:	115f      	asrs	r7, r3, #5
 80132da:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80132de:	f013 031f 	ands.w	r3, r3, #31
 80132e2:	b087      	sub	sp, #28
 80132e4:	bf18      	it	ne
 80132e6:	3704      	addne	r7, #4
 80132e8:	2500      	movs	r5, #0
 80132ea:	1f3e      	subs	r6, r7, #4
 80132ec:	4682      	mov	sl, r0
 80132ee:	4690      	mov	r8, r2
 80132f0:	9301      	str	r3, [sp, #4]
 80132f2:	f847 5c04 	str.w	r5, [r7, #-4]
 80132f6:	46b1      	mov	r9, r6
 80132f8:	4634      	mov	r4, r6
 80132fa:	9502      	str	r5, [sp, #8]
 80132fc:	46ab      	mov	fp, r5
 80132fe:	784a      	ldrb	r2, [r1, #1]
 8013300:	1c4b      	adds	r3, r1, #1
 8013302:	9303      	str	r3, [sp, #12]
 8013304:	b342      	cbz	r2, 8013358 <__hexnan+0x88>
 8013306:	4610      	mov	r0, r2
 8013308:	9105      	str	r1, [sp, #20]
 801330a:	9204      	str	r2, [sp, #16]
 801330c:	f7ff fd84 	bl	8012e18 <__hexdig_fun>
 8013310:	2800      	cmp	r0, #0
 8013312:	d143      	bne.n	801339c <__hexnan+0xcc>
 8013314:	9a04      	ldr	r2, [sp, #16]
 8013316:	9905      	ldr	r1, [sp, #20]
 8013318:	2a20      	cmp	r2, #32
 801331a:	d818      	bhi.n	801334e <__hexnan+0x7e>
 801331c:	9b02      	ldr	r3, [sp, #8]
 801331e:	459b      	cmp	fp, r3
 8013320:	dd13      	ble.n	801334a <__hexnan+0x7a>
 8013322:	454c      	cmp	r4, r9
 8013324:	d206      	bcs.n	8013334 <__hexnan+0x64>
 8013326:	2d07      	cmp	r5, #7
 8013328:	dc04      	bgt.n	8013334 <__hexnan+0x64>
 801332a:	462a      	mov	r2, r5
 801332c:	4649      	mov	r1, r9
 801332e:	4620      	mov	r0, r4
 8013330:	f7ff ffa8 	bl	8013284 <L_shift>
 8013334:	4544      	cmp	r4, r8
 8013336:	d944      	bls.n	80133c2 <__hexnan+0xf2>
 8013338:	2300      	movs	r3, #0
 801333a:	f1a4 0904 	sub.w	r9, r4, #4
 801333e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013342:	f8cd b008 	str.w	fp, [sp, #8]
 8013346:	464c      	mov	r4, r9
 8013348:	461d      	mov	r5, r3
 801334a:	9903      	ldr	r1, [sp, #12]
 801334c:	e7d7      	b.n	80132fe <__hexnan+0x2e>
 801334e:	2a29      	cmp	r2, #41	; 0x29
 8013350:	d14a      	bne.n	80133e8 <__hexnan+0x118>
 8013352:	3102      	adds	r1, #2
 8013354:	f8ca 1000 	str.w	r1, [sl]
 8013358:	f1bb 0f00 	cmp.w	fp, #0
 801335c:	d044      	beq.n	80133e8 <__hexnan+0x118>
 801335e:	454c      	cmp	r4, r9
 8013360:	d206      	bcs.n	8013370 <__hexnan+0xa0>
 8013362:	2d07      	cmp	r5, #7
 8013364:	dc04      	bgt.n	8013370 <__hexnan+0xa0>
 8013366:	462a      	mov	r2, r5
 8013368:	4649      	mov	r1, r9
 801336a:	4620      	mov	r0, r4
 801336c:	f7ff ff8a 	bl	8013284 <L_shift>
 8013370:	4544      	cmp	r4, r8
 8013372:	d928      	bls.n	80133c6 <__hexnan+0xf6>
 8013374:	4643      	mov	r3, r8
 8013376:	f854 2b04 	ldr.w	r2, [r4], #4
 801337a:	f843 2b04 	str.w	r2, [r3], #4
 801337e:	42a6      	cmp	r6, r4
 8013380:	d2f9      	bcs.n	8013376 <__hexnan+0xa6>
 8013382:	2200      	movs	r2, #0
 8013384:	f843 2b04 	str.w	r2, [r3], #4
 8013388:	429e      	cmp	r6, r3
 801338a:	d2fb      	bcs.n	8013384 <__hexnan+0xb4>
 801338c:	6833      	ldr	r3, [r6, #0]
 801338e:	b91b      	cbnz	r3, 8013398 <__hexnan+0xc8>
 8013390:	4546      	cmp	r6, r8
 8013392:	d127      	bne.n	80133e4 <__hexnan+0x114>
 8013394:	2301      	movs	r3, #1
 8013396:	6033      	str	r3, [r6, #0]
 8013398:	2005      	movs	r0, #5
 801339a:	e026      	b.n	80133ea <__hexnan+0x11a>
 801339c:	3501      	adds	r5, #1
 801339e:	2d08      	cmp	r5, #8
 80133a0:	f10b 0b01 	add.w	fp, fp, #1
 80133a4:	dd06      	ble.n	80133b4 <__hexnan+0xe4>
 80133a6:	4544      	cmp	r4, r8
 80133a8:	d9cf      	bls.n	801334a <__hexnan+0x7a>
 80133aa:	2300      	movs	r3, #0
 80133ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80133b0:	2501      	movs	r5, #1
 80133b2:	3c04      	subs	r4, #4
 80133b4:	6822      	ldr	r2, [r4, #0]
 80133b6:	f000 000f 	and.w	r0, r0, #15
 80133ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80133be:	6020      	str	r0, [r4, #0]
 80133c0:	e7c3      	b.n	801334a <__hexnan+0x7a>
 80133c2:	2508      	movs	r5, #8
 80133c4:	e7c1      	b.n	801334a <__hexnan+0x7a>
 80133c6:	9b01      	ldr	r3, [sp, #4]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d0df      	beq.n	801338c <__hexnan+0xbc>
 80133cc:	f04f 32ff 	mov.w	r2, #4294967295
 80133d0:	f1c3 0320 	rsb	r3, r3, #32
 80133d4:	fa22 f303 	lsr.w	r3, r2, r3
 80133d8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80133dc:	401a      	ands	r2, r3
 80133de:	f847 2c04 	str.w	r2, [r7, #-4]
 80133e2:	e7d3      	b.n	801338c <__hexnan+0xbc>
 80133e4:	3e04      	subs	r6, #4
 80133e6:	e7d1      	b.n	801338c <__hexnan+0xbc>
 80133e8:	2004      	movs	r0, #4
 80133ea:	b007      	add	sp, #28
 80133ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080133f0 <__locale_ctype_ptr_l>:
 80133f0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80133f4:	4770      	bx	lr

080133f6 <__localeconv_l>:
 80133f6:	30f0      	adds	r0, #240	; 0xf0
 80133f8:	4770      	bx	lr
	...

080133fc <_localeconv_r>:
 80133fc:	4b04      	ldr	r3, [pc, #16]	; (8013410 <_localeconv_r+0x14>)
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	6a18      	ldr	r0, [r3, #32]
 8013402:	4b04      	ldr	r3, [pc, #16]	; (8013414 <_localeconv_r+0x18>)
 8013404:	2800      	cmp	r0, #0
 8013406:	bf08      	it	eq
 8013408:	4618      	moveq	r0, r3
 801340a:	30f0      	adds	r0, #240	; 0xf0
 801340c:	4770      	bx	lr
 801340e:	bf00      	nop
 8013410:	20000198 	.word	0x20000198
 8013414:	200001fc 	.word	0x200001fc

08013418 <__swhatbuf_r>:
 8013418:	b570      	push	{r4, r5, r6, lr}
 801341a:	460e      	mov	r6, r1
 801341c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013420:	2900      	cmp	r1, #0
 8013422:	b096      	sub	sp, #88	; 0x58
 8013424:	4614      	mov	r4, r2
 8013426:	461d      	mov	r5, r3
 8013428:	da07      	bge.n	801343a <__swhatbuf_r+0x22>
 801342a:	2300      	movs	r3, #0
 801342c:	602b      	str	r3, [r5, #0]
 801342e:	89b3      	ldrh	r3, [r6, #12]
 8013430:	061a      	lsls	r2, r3, #24
 8013432:	d410      	bmi.n	8013456 <__swhatbuf_r+0x3e>
 8013434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013438:	e00e      	b.n	8013458 <__swhatbuf_r+0x40>
 801343a:	466a      	mov	r2, sp
 801343c:	f000 ff06 	bl	801424c <_fstat_r>
 8013440:	2800      	cmp	r0, #0
 8013442:	dbf2      	blt.n	801342a <__swhatbuf_r+0x12>
 8013444:	9a01      	ldr	r2, [sp, #4]
 8013446:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801344a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801344e:	425a      	negs	r2, r3
 8013450:	415a      	adcs	r2, r3
 8013452:	602a      	str	r2, [r5, #0]
 8013454:	e7ee      	b.n	8013434 <__swhatbuf_r+0x1c>
 8013456:	2340      	movs	r3, #64	; 0x40
 8013458:	2000      	movs	r0, #0
 801345a:	6023      	str	r3, [r4, #0]
 801345c:	b016      	add	sp, #88	; 0x58
 801345e:	bd70      	pop	{r4, r5, r6, pc}

08013460 <__smakebuf_r>:
 8013460:	898b      	ldrh	r3, [r1, #12]
 8013462:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013464:	079d      	lsls	r5, r3, #30
 8013466:	4606      	mov	r6, r0
 8013468:	460c      	mov	r4, r1
 801346a:	d507      	bpl.n	801347c <__smakebuf_r+0x1c>
 801346c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013470:	6023      	str	r3, [r4, #0]
 8013472:	6123      	str	r3, [r4, #16]
 8013474:	2301      	movs	r3, #1
 8013476:	6163      	str	r3, [r4, #20]
 8013478:	b002      	add	sp, #8
 801347a:	bd70      	pop	{r4, r5, r6, pc}
 801347c:	ab01      	add	r3, sp, #4
 801347e:	466a      	mov	r2, sp
 8013480:	f7ff ffca 	bl	8013418 <__swhatbuf_r>
 8013484:	9900      	ldr	r1, [sp, #0]
 8013486:	4605      	mov	r5, r0
 8013488:	4630      	mov	r0, r6
 801348a:	f000 fc9f 	bl	8013dcc <_malloc_r>
 801348e:	b948      	cbnz	r0, 80134a4 <__smakebuf_r+0x44>
 8013490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013494:	059a      	lsls	r2, r3, #22
 8013496:	d4ef      	bmi.n	8013478 <__smakebuf_r+0x18>
 8013498:	f023 0303 	bic.w	r3, r3, #3
 801349c:	f043 0302 	orr.w	r3, r3, #2
 80134a0:	81a3      	strh	r3, [r4, #12]
 80134a2:	e7e3      	b.n	801346c <__smakebuf_r+0xc>
 80134a4:	4b0d      	ldr	r3, [pc, #52]	; (80134dc <__smakebuf_r+0x7c>)
 80134a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80134a8:	89a3      	ldrh	r3, [r4, #12]
 80134aa:	6020      	str	r0, [r4, #0]
 80134ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134b0:	81a3      	strh	r3, [r4, #12]
 80134b2:	9b00      	ldr	r3, [sp, #0]
 80134b4:	6163      	str	r3, [r4, #20]
 80134b6:	9b01      	ldr	r3, [sp, #4]
 80134b8:	6120      	str	r0, [r4, #16]
 80134ba:	b15b      	cbz	r3, 80134d4 <__smakebuf_r+0x74>
 80134bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134c0:	4630      	mov	r0, r6
 80134c2:	f000 fed5 	bl	8014270 <_isatty_r>
 80134c6:	b128      	cbz	r0, 80134d4 <__smakebuf_r+0x74>
 80134c8:	89a3      	ldrh	r3, [r4, #12]
 80134ca:	f023 0303 	bic.w	r3, r3, #3
 80134ce:	f043 0301 	orr.w	r3, r3, #1
 80134d2:	81a3      	strh	r3, [r4, #12]
 80134d4:	89a3      	ldrh	r3, [r4, #12]
 80134d6:	431d      	orrs	r5, r3
 80134d8:	81a5      	strh	r5, [r4, #12]
 80134da:	e7cd      	b.n	8013478 <__smakebuf_r+0x18>
 80134dc:	08012c59 	.word	0x08012c59

080134e0 <malloc>:
 80134e0:	4b02      	ldr	r3, [pc, #8]	; (80134ec <malloc+0xc>)
 80134e2:	4601      	mov	r1, r0
 80134e4:	6818      	ldr	r0, [r3, #0]
 80134e6:	f000 bc71 	b.w	8013dcc <_malloc_r>
 80134ea:	bf00      	nop
 80134ec:	20000198 	.word	0x20000198

080134f0 <__ascii_mbtowc>:
 80134f0:	b082      	sub	sp, #8
 80134f2:	b901      	cbnz	r1, 80134f6 <__ascii_mbtowc+0x6>
 80134f4:	a901      	add	r1, sp, #4
 80134f6:	b142      	cbz	r2, 801350a <__ascii_mbtowc+0x1a>
 80134f8:	b14b      	cbz	r3, 801350e <__ascii_mbtowc+0x1e>
 80134fa:	7813      	ldrb	r3, [r2, #0]
 80134fc:	600b      	str	r3, [r1, #0]
 80134fe:	7812      	ldrb	r2, [r2, #0]
 8013500:	1c10      	adds	r0, r2, #0
 8013502:	bf18      	it	ne
 8013504:	2001      	movne	r0, #1
 8013506:	b002      	add	sp, #8
 8013508:	4770      	bx	lr
 801350a:	4610      	mov	r0, r2
 801350c:	e7fb      	b.n	8013506 <__ascii_mbtowc+0x16>
 801350e:	f06f 0001 	mvn.w	r0, #1
 8013512:	e7f8      	b.n	8013506 <__ascii_mbtowc+0x16>

08013514 <_Balloc>:
 8013514:	b570      	push	{r4, r5, r6, lr}
 8013516:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013518:	4604      	mov	r4, r0
 801351a:	460e      	mov	r6, r1
 801351c:	b93d      	cbnz	r5, 801352e <_Balloc+0x1a>
 801351e:	2010      	movs	r0, #16
 8013520:	f7ff ffde 	bl	80134e0 <malloc>
 8013524:	6260      	str	r0, [r4, #36]	; 0x24
 8013526:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801352a:	6005      	str	r5, [r0, #0]
 801352c:	60c5      	str	r5, [r0, #12]
 801352e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013530:	68eb      	ldr	r3, [r5, #12]
 8013532:	b183      	cbz	r3, 8013556 <_Balloc+0x42>
 8013534:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013536:	68db      	ldr	r3, [r3, #12]
 8013538:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801353c:	b9b8      	cbnz	r0, 801356e <_Balloc+0x5a>
 801353e:	2101      	movs	r1, #1
 8013540:	fa01 f506 	lsl.w	r5, r1, r6
 8013544:	1d6a      	adds	r2, r5, #5
 8013546:	0092      	lsls	r2, r2, #2
 8013548:	4620      	mov	r0, r4
 801354a:	f000 fbe3 	bl	8013d14 <_calloc_r>
 801354e:	b160      	cbz	r0, 801356a <_Balloc+0x56>
 8013550:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013554:	e00e      	b.n	8013574 <_Balloc+0x60>
 8013556:	2221      	movs	r2, #33	; 0x21
 8013558:	2104      	movs	r1, #4
 801355a:	4620      	mov	r0, r4
 801355c:	f000 fbda 	bl	8013d14 <_calloc_r>
 8013560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013562:	60e8      	str	r0, [r5, #12]
 8013564:	68db      	ldr	r3, [r3, #12]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d1e4      	bne.n	8013534 <_Balloc+0x20>
 801356a:	2000      	movs	r0, #0
 801356c:	bd70      	pop	{r4, r5, r6, pc}
 801356e:	6802      	ldr	r2, [r0, #0]
 8013570:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013574:	2300      	movs	r3, #0
 8013576:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801357a:	e7f7      	b.n	801356c <_Balloc+0x58>

0801357c <_Bfree>:
 801357c:	b570      	push	{r4, r5, r6, lr}
 801357e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013580:	4606      	mov	r6, r0
 8013582:	460d      	mov	r5, r1
 8013584:	b93c      	cbnz	r4, 8013596 <_Bfree+0x1a>
 8013586:	2010      	movs	r0, #16
 8013588:	f7ff ffaa 	bl	80134e0 <malloc>
 801358c:	6270      	str	r0, [r6, #36]	; 0x24
 801358e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013592:	6004      	str	r4, [r0, #0]
 8013594:	60c4      	str	r4, [r0, #12]
 8013596:	b13d      	cbz	r5, 80135a8 <_Bfree+0x2c>
 8013598:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801359a:	686a      	ldr	r2, [r5, #4]
 801359c:	68db      	ldr	r3, [r3, #12]
 801359e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80135a2:	6029      	str	r1, [r5, #0]
 80135a4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80135a8:	bd70      	pop	{r4, r5, r6, pc}

080135aa <__multadd>:
 80135aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135ae:	690d      	ldr	r5, [r1, #16]
 80135b0:	461f      	mov	r7, r3
 80135b2:	4606      	mov	r6, r0
 80135b4:	460c      	mov	r4, r1
 80135b6:	f101 0c14 	add.w	ip, r1, #20
 80135ba:	2300      	movs	r3, #0
 80135bc:	f8dc 0000 	ldr.w	r0, [ip]
 80135c0:	b281      	uxth	r1, r0
 80135c2:	fb02 7101 	mla	r1, r2, r1, r7
 80135c6:	0c0f      	lsrs	r7, r1, #16
 80135c8:	0c00      	lsrs	r0, r0, #16
 80135ca:	fb02 7000 	mla	r0, r2, r0, r7
 80135ce:	b289      	uxth	r1, r1
 80135d0:	3301      	adds	r3, #1
 80135d2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80135d6:	429d      	cmp	r5, r3
 80135d8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80135dc:	f84c 1b04 	str.w	r1, [ip], #4
 80135e0:	dcec      	bgt.n	80135bc <__multadd+0x12>
 80135e2:	b1d7      	cbz	r7, 801361a <__multadd+0x70>
 80135e4:	68a3      	ldr	r3, [r4, #8]
 80135e6:	42ab      	cmp	r3, r5
 80135e8:	dc12      	bgt.n	8013610 <__multadd+0x66>
 80135ea:	6861      	ldr	r1, [r4, #4]
 80135ec:	4630      	mov	r0, r6
 80135ee:	3101      	adds	r1, #1
 80135f0:	f7ff ff90 	bl	8013514 <_Balloc>
 80135f4:	6922      	ldr	r2, [r4, #16]
 80135f6:	3202      	adds	r2, #2
 80135f8:	f104 010c 	add.w	r1, r4, #12
 80135fc:	4680      	mov	r8, r0
 80135fe:	0092      	lsls	r2, r2, #2
 8013600:	300c      	adds	r0, #12
 8013602:	f7fc fe8d 	bl	8010320 <memcpy>
 8013606:	4621      	mov	r1, r4
 8013608:	4630      	mov	r0, r6
 801360a:	f7ff ffb7 	bl	801357c <_Bfree>
 801360e:	4644      	mov	r4, r8
 8013610:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013614:	3501      	adds	r5, #1
 8013616:	615f      	str	r7, [r3, #20]
 8013618:	6125      	str	r5, [r4, #16]
 801361a:	4620      	mov	r0, r4
 801361c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013620 <__s2b>:
 8013620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013624:	460c      	mov	r4, r1
 8013626:	4615      	mov	r5, r2
 8013628:	461f      	mov	r7, r3
 801362a:	2209      	movs	r2, #9
 801362c:	3308      	adds	r3, #8
 801362e:	4606      	mov	r6, r0
 8013630:	fb93 f3f2 	sdiv	r3, r3, r2
 8013634:	2100      	movs	r1, #0
 8013636:	2201      	movs	r2, #1
 8013638:	429a      	cmp	r2, r3
 801363a:	db20      	blt.n	801367e <__s2b+0x5e>
 801363c:	4630      	mov	r0, r6
 801363e:	f7ff ff69 	bl	8013514 <_Balloc>
 8013642:	9b08      	ldr	r3, [sp, #32]
 8013644:	6143      	str	r3, [r0, #20]
 8013646:	2d09      	cmp	r5, #9
 8013648:	f04f 0301 	mov.w	r3, #1
 801364c:	6103      	str	r3, [r0, #16]
 801364e:	dd19      	ble.n	8013684 <__s2b+0x64>
 8013650:	f104 0809 	add.w	r8, r4, #9
 8013654:	46c1      	mov	r9, r8
 8013656:	442c      	add	r4, r5
 8013658:	f819 3b01 	ldrb.w	r3, [r9], #1
 801365c:	4601      	mov	r1, r0
 801365e:	3b30      	subs	r3, #48	; 0x30
 8013660:	220a      	movs	r2, #10
 8013662:	4630      	mov	r0, r6
 8013664:	f7ff ffa1 	bl	80135aa <__multadd>
 8013668:	45a1      	cmp	r9, r4
 801366a:	d1f5      	bne.n	8013658 <__s2b+0x38>
 801366c:	eb08 0405 	add.w	r4, r8, r5
 8013670:	3c08      	subs	r4, #8
 8013672:	1b2d      	subs	r5, r5, r4
 8013674:	1963      	adds	r3, r4, r5
 8013676:	42bb      	cmp	r3, r7
 8013678:	db07      	blt.n	801368a <__s2b+0x6a>
 801367a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801367e:	0052      	lsls	r2, r2, #1
 8013680:	3101      	adds	r1, #1
 8013682:	e7d9      	b.n	8013638 <__s2b+0x18>
 8013684:	340a      	adds	r4, #10
 8013686:	2509      	movs	r5, #9
 8013688:	e7f3      	b.n	8013672 <__s2b+0x52>
 801368a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801368e:	4601      	mov	r1, r0
 8013690:	3b30      	subs	r3, #48	; 0x30
 8013692:	220a      	movs	r2, #10
 8013694:	4630      	mov	r0, r6
 8013696:	f7ff ff88 	bl	80135aa <__multadd>
 801369a:	e7eb      	b.n	8013674 <__s2b+0x54>

0801369c <__hi0bits>:
 801369c:	0c02      	lsrs	r2, r0, #16
 801369e:	0412      	lsls	r2, r2, #16
 80136a0:	4603      	mov	r3, r0
 80136a2:	b9b2      	cbnz	r2, 80136d2 <__hi0bits+0x36>
 80136a4:	0403      	lsls	r3, r0, #16
 80136a6:	2010      	movs	r0, #16
 80136a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80136ac:	bf04      	itt	eq
 80136ae:	021b      	lsleq	r3, r3, #8
 80136b0:	3008      	addeq	r0, #8
 80136b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80136b6:	bf04      	itt	eq
 80136b8:	011b      	lsleq	r3, r3, #4
 80136ba:	3004      	addeq	r0, #4
 80136bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80136c0:	bf04      	itt	eq
 80136c2:	009b      	lsleq	r3, r3, #2
 80136c4:	3002      	addeq	r0, #2
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	db06      	blt.n	80136d8 <__hi0bits+0x3c>
 80136ca:	005b      	lsls	r3, r3, #1
 80136cc:	d503      	bpl.n	80136d6 <__hi0bits+0x3a>
 80136ce:	3001      	adds	r0, #1
 80136d0:	4770      	bx	lr
 80136d2:	2000      	movs	r0, #0
 80136d4:	e7e8      	b.n	80136a8 <__hi0bits+0xc>
 80136d6:	2020      	movs	r0, #32
 80136d8:	4770      	bx	lr

080136da <__lo0bits>:
 80136da:	6803      	ldr	r3, [r0, #0]
 80136dc:	f013 0207 	ands.w	r2, r3, #7
 80136e0:	4601      	mov	r1, r0
 80136e2:	d00b      	beq.n	80136fc <__lo0bits+0x22>
 80136e4:	07da      	lsls	r2, r3, #31
 80136e6:	d423      	bmi.n	8013730 <__lo0bits+0x56>
 80136e8:	0798      	lsls	r0, r3, #30
 80136ea:	bf49      	itett	mi
 80136ec:	085b      	lsrmi	r3, r3, #1
 80136ee:	089b      	lsrpl	r3, r3, #2
 80136f0:	2001      	movmi	r0, #1
 80136f2:	600b      	strmi	r3, [r1, #0]
 80136f4:	bf5c      	itt	pl
 80136f6:	600b      	strpl	r3, [r1, #0]
 80136f8:	2002      	movpl	r0, #2
 80136fa:	4770      	bx	lr
 80136fc:	b298      	uxth	r0, r3
 80136fe:	b9a8      	cbnz	r0, 801372c <__lo0bits+0x52>
 8013700:	0c1b      	lsrs	r3, r3, #16
 8013702:	2010      	movs	r0, #16
 8013704:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013708:	bf04      	itt	eq
 801370a:	0a1b      	lsreq	r3, r3, #8
 801370c:	3008      	addeq	r0, #8
 801370e:	071a      	lsls	r2, r3, #28
 8013710:	bf04      	itt	eq
 8013712:	091b      	lsreq	r3, r3, #4
 8013714:	3004      	addeq	r0, #4
 8013716:	079a      	lsls	r2, r3, #30
 8013718:	bf04      	itt	eq
 801371a:	089b      	lsreq	r3, r3, #2
 801371c:	3002      	addeq	r0, #2
 801371e:	07da      	lsls	r2, r3, #31
 8013720:	d402      	bmi.n	8013728 <__lo0bits+0x4e>
 8013722:	085b      	lsrs	r3, r3, #1
 8013724:	d006      	beq.n	8013734 <__lo0bits+0x5a>
 8013726:	3001      	adds	r0, #1
 8013728:	600b      	str	r3, [r1, #0]
 801372a:	4770      	bx	lr
 801372c:	4610      	mov	r0, r2
 801372e:	e7e9      	b.n	8013704 <__lo0bits+0x2a>
 8013730:	2000      	movs	r0, #0
 8013732:	4770      	bx	lr
 8013734:	2020      	movs	r0, #32
 8013736:	4770      	bx	lr

08013738 <__i2b>:
 8013738:	b510      	push	{r4, lr}
 801373a:	460c      	mov	r4, r1
 801373c:	2101      	movs	r1, #1
 801373e:	f7ff fee9 	bl	8013514 <_Balloc>
 8013742:	2201      	movs	r2, #1
 8013744:	6144      	str	r4, [r0, #20]
 8013746:	6102      	str	r2, [r0, #16]
 8013748:	bd10      	pop	{r4, pc}

0801374a <__multiply>:
 801374a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801374e:	4614      	mov	r4, r2
 8013750:	690a      	ldr	r2, [r1, #16]
 8013752:	6923      	ldr	r3, [r4, #16]
 8013754:	429a      	cmp	r2, r3
 8013756:	bfb8      	it	lt
 8013758:	460b      	movlt	r3, r1
 801375a:	4688      	mov	r8, r1
 801375c:	bfbc      	itt	lt
 801375e:	46a0      	movlt	r8, r4
 8013760:	461c      	movlt	r4, r3
 8013762:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013766:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801376a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801376e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013772:	eb07 0609 	add.w	r6, r7, r9
 8013776:	42b3      	cmp	r3, r6
 8013778:	bfb8      	it	lt
 801377a:	3101      	addlt	r1, #1
 801377c:	f7ff feca 	bl	8013514 <_Balloc>
 8013780:	f100 0514 	add.w	r5, r0, #20
 8013784:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013788:	462b      	mov	r3, r5
 801378a:	2200      	movs	r2, #0
 801378c:	4573      	cmp	r3, lr
 801378e:	d316      	bcc.n	80137be <__multiply+0x74>
 8013790:	f104 0214 	add.w	r2, r4, #20
 8013794:	f108 0114 	add.w	r1, r8, #20
 8013798:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801379c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80137a0:	9300      	str	r3, [sp, #0]
 80137a2:	9b00      	ldr	r3, [sp, #0]
 80137a4:	9201      	str	r2, [sp, #4]
 80137a6:	4293      	cmp	r3, r2
 80137a8:	d80c      	bhi.n	80137c4 <__multiply+0x7a>
 80137aa:	2e00      	cmp	r6, #0
 80137ac:	dd03      	ble.n	80137b6 <__multiply+0x6c>
 80137ae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d05d      	beq.n	8013872 <__multiply+0x128>
 80137b6:	6106      	str	r6, [r0, #16]
 80137b8:	b003      	add	sp, #12
 80137ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137be:	f843 2b04 	str.w	r2, [r3], #4
 80137c2:	e7e3      	b.n	801378c <__multiply+0x42>
 80137c4:	f8b2 b000 	ldrh.w	fp, [r2]
 80137c8:	f1bb 0f00 	cmp.w	fp, #0
 80137cc:	d023      	beq.n	8013816 <__multiply+0xcc>
 80137ce:	4689      	mov	r9, r1
 80137d0:	46ac      	mov	ip, r5
 80137d2:	f04f 0800 	mov.w	r8, #0
 80137d6:	f859 4b04 	ldr.w	r4, [r9], #4
 80137da:	f8dc a000 	ldr.w	sl, [ip]
 80137de:	b2a3      	uxth	r3, r4
 80137e0:	fa1f fa8a 	uxth.w	sl, sl
 80137e4:	fb0b a303 	mla	r3, fp, r3, sl
 80137e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80137ec:	f8dc 4000 	ldr.w	r4, [ip]
 80137f0:	4443      	add	r3, r8
 80137f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80137f6:	fb0b 840a 	mla	r4, fp, sl, r8
 80137fa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80137fe:	46e2      	mov	sl, ip
 8013800:	b29b      	uxth	r3, r3
 8013802:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013806:	454f      	cmp	r7, r9
 8013808:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801380c:	f84a 3b04 	str.w	r3, [sl], #4
 8013810:	d82b      	bhi.n	801386a <__multiply+0x120>
 8013812:	f8cc 8004 	str.w	r8, [ip, #4]
 8013816:	9b01      	ldr	r3, [sp, #4]
 8013818:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801381c:	3204      	adds	r2, #4
 801381e:	f1ba 0f00 	cmp.w	sl, #0
 8013822:	d020      	beq.n	8013866 <__multiply+0x11c>
 8013824:	682b      	ldr	r3, [r5, #0]
 8013826:	4689      	mov	r9, r1
 8013828:	46a8      	mov	r8, r5
 801382a:	f04f 0b00 	mov.w	fp, #0
 801382e:	f8b9 c000 	ldrh.w	ip, [r9]
 8013832:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013836:	fb0a 440c 	mla	r4, sl, ip, r4
 801383a:	445c      	add	r4, fp
 801383c:	46c4      	mov	ip, r8
 801383e:	b29b      	uxth	r3, r3
 8013840:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013844:	f84c 3b04 	str.w	r3, [ip], #4
 8013848:	f859 3b04 	ldr.w	r3, [r9], #4
 801384c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013850:	0c1b      	lsrs	r3, r3, #16
 8013852:	fb0a b303 	mla	r3, sl, r3, fp
 8013856:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801385a:	454f      	cmp	r7, r9
 801385c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013860:	d805      	bhi.n	801386e <__multiply+0x124>
 8013862:	f8c8 3004 	str.w	r3, [r8, #4]
 8013866:	3504      	adds	r5, #4
 8013868:	e79b      	b.n	80137a2 <__multiply+0x58>
 801386a:	46d4      	mov	ip, sl
 801386c:	e7b3      	b.n	80137d6 <__multiply+0x8c>
 801386e:	46e0      	mov	r8, ip
 8013870:	e7dd      	b.n	801382e <__multiply+0xe4>
 8013872:	3e01      	subs	r6, #1
 8013874:	e799      	b.n	80137aa <__multiply+0x60>
	...

08013878 <__pow5mult>:
 8013878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801387c:	4615      	mov	r5, r2
 801387e:	f012 0203 	ands.w	r2, r2, #3
 8013882:	4606      	mov	r6, r0
 8013884:	460f      	mov	r7, r1
 8013886:	d007      	beq.n	8013898 <__pow5mult+0x20>
 8013888:	3a01      	subs	r2, #1
 801388a:	4c21      	ldr	r4, [pc, #132]	; (8013910 <__pow5mult+0x98>)
 801388c:	2300      	movs	r3, #0
 801388e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013892:	f7ff fe8a 	bl	80135aa <__multadd>
 8013896:	4607      	mov	r7, r0
 8013898:	10ad      	asrs	r5, r5, #2
 801389a:	d035      	beq.n	8013908 <__pow5mult+0x90>
 801389c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801389e:	b93c      	cbnz	r4, 80138b0 <__pow5mult+0x38>
 80138a0:	2010      	movs	r0, #16
 80138a2:	f7ff fe1d 	bl	80134e0 <malloc>
 80138a6:	6270      	str	r0, [r6, #36]	; 0x24
 80138a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80138ac:	6004      	str	r4, [r0, #0]
 80138ae:	60c4      	str	r4, [r0, #12]
 80138b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80138b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80138b8:	b94c      	cbnz	r4, 80138ce <__pow5mult+0x56>
 80138ba:	f240 2171 	movw	r1, #625	; 0x271
 80138be:	4630      	mov	r0, r6
 80138c0:	f7ff ff3a 	bl	8013738 <__i2b>
 80138c4:	2300      	movs	r3, #0
 80138c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80138ca:	4604      	mov	r4, r0
 80138cc:	6003      	str	r3, [r0, #0]
 80138ce:	f04f 0800 	mov.w	r8, #0
 80138d2:	07eb      	lsls	r3, r5, #31
 80138d4:	d50a      	bpl.n	80138ec <__pow5mult+0x74>
 80138d6:	4639      	mov	r1, r7
 80138d8:	4622      	mov	r2, r4
 80138da:	4630      	mov	r0, r6
 80138dc:	f7ff ff35 	bl	801374a <__multiply>
 80138e0:	4639      	mov	r1, r7
 80138e2:	4681      	mov	r9, r0
 80138e4:	4630      	mov	r0, r6
 80138e6:	f7ff fe49 	bl	801357c <_Bfree>
 80138ea:	464f      	mov	r7, r9
 80138ec:	106d      	asrs	r5, r5, #1
 80138ee:	d00b      	beq.n	8013908 <__pow5mult+0x90>
 80138f0:	6820      	ldr	r0, [r4, #0]
 80138f2:	b938      	cbnz	r0, 8013904 <__pow5mult+0x8c>
 80138f4:	4622      	mov	r2, r4
 80138f6:	4621      	mov	r1, r4
 80138f8:	4630      	mov	r0, r6
 80138fa:	f7ff ff26 	bl	801374a <__multiply>
 80138fe:	6020      	str	r0, [r4, #0]
 8013900:	f8c0 8000 	str.w	r8, [r0]
 8013904:	4604      	mov	r4, r0
 8013906:	e7e4      	b.n	80138d2 <__pow5mult+0x5a>
 8013908:	4638      	mov	r0, r7
 801390a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801390e:	bf00      	nop
 8013910:	08015250 	.word	0x08015250

08013914 <__lshift>:
 8013914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013918:	460c      	mov	r4, r1
 801391a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801391e:	6923      	ldr	r3, [r4, #16]
 8013920:	6849      	ldr	r1, [r1, #4]
 8013922:	eb0a 0903 	add.w	r9, sl, r3
 8013926:	68a3      	ldr	r3, [r4, #8]
 8013928:	4607      	mov	r7, r0
 801392a:	4616      	mov	r6, r2
 801392c:	f109 0501 	add.w	r5, r9, #1
 8013930:	42ab      	cmp	r3, r5
 8013932:	db32      	blt.n	801399a <__lshift+0x86>
 8013934:	4638      	mov	r0, r7
 8013936:	f7ff fded 	bl	8013514 <_Balloc>
 801393a:	2300      	movs	r3, #0
 801393c:	4680      	mov	r8, r0
 801393e:	f100 0114 	add.w	r1, r0, #20
 8013942:	461a      	mov	r2, r3
 8013944:	4553      	cmp	r3, sl
 8013946:	db2b      	blt.n	80139a0 <__lshift+0x8c>
 8013948:	6920      	ldr	r0, [r4, #16]
 801394a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801394e:	f104 0314 	add.w	r3, r4, #20
 8013952:	f016 021f 	ands.w	r2, r6, #31
 8013956:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801395a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801395e:	d025      	beq.n	80139ac <__lshift+0x98>
 8013960:	f1c2 0e20 	rsb	lr, r2, #32
 8013964:	2000      	movs	r0, #0
 8013966:	681e      	ldr	r6, [r3, #0]
 8013968:	468a      	mov	sl, r1
 801396a:	4096      	lsls	r6, r2
 801396c:	4330      	orrs	r0, r6
 801396e:	f84a 0b04 	str.w	r0, [sl], #4
 8013972:	f853 0b04 	ldr.w	r0, [r3], #4
 8013976:	459c      	cmp	ip, r3
 8013978:	fa20 f00e 	lsr.w	r0, r0, lr
 801397c:	d814      	bhi.n	80139a8 <__lshift+0x94>
 801397e:	6048      	str	r0, [r1, #4]
 8013980:	b108      	cbz	r0, 8013986 <__lshift+0x72>
 8013982:	f109 0502 	add.w	r5, r9, #2
 8013986:	3d01      	subs	r5, #1
 8013988:	4638      	mov	r0, r7
 801398a:	f8c8 5010 	str.w	r5, [r8, #16]
 801398e:	4621      	mov	r1, r4
 8013990:	f7ff fdf4 	bl	801357c <_Bfree>
 8013994:	4640      	mov	r0, r8
 8013996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801399a:	3101      	adds	r1, #1
 801399c:	005b      	lsls	r3, r3, #1
 801399e:	e7c7      	b.n	8013930 <__lshift+0x1c>
 80139a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80139a4:	3301      	adds	r3, #1
 80139a6:	e7cd      	b.n	8013944 <__lshift+0x30>
 80139a8:	4651      	mov	r1, sl
 80139aa:	e7dc      	b.n	8013966 <__lshift+0x52>
 80139ac:	3904      	subs	r1, #4
 80139ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80139b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80139b6:	459c      	cmp	ip, r3
 80139b8:	d8f9      	bhi.n	80139ae <__lshift+0x9a>
 80139ba:	e7e4      	b.n	8013986 <__lshift+0x72>

080139bc <__mcmp>:
 80139bc:	6903      	ldr	r3, [r0, #16]
 80139be:	690a      	ldr	r2, [r1, #16]
 80139c0:	1a9b      	subs	r3, r3, r2
 80139c2:	b530      	push	{r4, r5, lr}
 80139c4:	d10c      	bne.n	80139e0 <__mcmp+0x24>
 80139c6:	0092      	lsls	r2, r2, #2
 80139c8:	3014      	adds	r0, #20
 80139ca:	3114      	adds	r1, #20
 80139cc:	1884      	adds	r4, r0, r2
 80139ce:	4411      	add	r1, r2
 80139d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80139d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80139d8:	4295      	cmp	r5, r2
 80139da:	d003      	beq.n	80139e4 <__mcmp+0x28>
 80139dc:	d305      	bcc.n	80139ea <__mcmp+0x2e>
 80139de:	2301      	movs	r3, #1
 80139e0:	4618      	mov	r0, r3
 80139e2:	bd30      	pop	{r4, r5, pc}
 80139e4:	42a0      	cmp	r0, r4
 80139e6:	d3f3      	bcc.n	80139d0 <__mcmp+0x14>
 80139e8:	e7fa      	b.n	80139e0 <__mcmp+0x24>
 80139ea:	f04f 33ff 	mov.w	r3, #4294967295
 80139ee:	e7f7      	b.n	80139e0 <__mcmp+0x24>

080139f0 <__mdiff>:
 80139f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139f4:	460d      	mov	r5, r1
 80139f6:	4607      	mov	r7, r0
 80139f8:	4611      	mov	r1, r2
 80139fa:	4628      	mov	r0, r5
 80139fc:	4614      	mov	r4, r2
 80139fe:	f7ff ffdd 	bl	80139bc <__mcmp>
 8013a02:	1e06      	subs	r6, r0, #0
 8013a04:	d108      	bne.n	8013a18 <__mdiff+0x28>
 8013a06:	4631      	mov	r1, r6
 8013a08:	4638      	mov	r0, r7
 8013a0a:	f7ff fd83 	bl	8013514 <_Balloc>
 8013a0e:	2301      	movs	r3, #1
 8013a10:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a18:	bfa4      	itt	ge
 8013a1a:	4623      	movge	r3, r4
 8013a1c:	462c      	movge	r4, r5
 8013a1e:	4638      	mov	r0, r7
 8013a20:	6861      	ldr	r1, [r4, #4]
 8013a22:	bfa6      	itte	ge
 8013a24:	461d      	movge	r5, r3
 8013a26:	2600      	movge	r6, #0
 8013a28:	2601      	movlt	r6, #1
 8013a2a:	f7ff fd73 	bl	8013514 <_Balloc>
 8013a2e:	692b      	ldr	r3, [r5, #16]
 8013a30:	60c6      	str	r6, [r0, #12]
 8013a32:	6926      	ldr	r6, [r4, #16]
 8013a34:	f105 0914 	add.w	r9, r5, #20
 8013a38:	f104 0214 	add.w	r2, r4, #20
 8013a3c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013a40:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013a44:	f100 0514 	add.w	r5, r0, #20
 8013a48:	f04f 0e00 	mov.w	lr, #0
 8013a4c:	f852 ab04 	ldr.w	sl, [r2], #4
 8013a50:	f859 4b04 	ldr.w	r4, [r9], #4
 8013a54:	fa1e f18a 	uxtah	r1, lr, sl
 8013a58:	b2a3      	uxth	r3, r4
 8013a5a:	1ac9      	subs	r1, r1, r3
 8013a5c:	0c23      	lsrs	r3, r4, #16
 8013a5e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013a62:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013a66:	b289      	uxth	r1, r1
 8013a68:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013a6c:	45c8      	cmp	r8, r9
 8013a6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013a72:	4694      	mov	ip, r2
 8013a74:	f845 3b04 	str.w	r3, [r5], #4
 8013a78:	d8e8      	bhi.n	8013a4c <__mdiff+0x5c>
 8013a7a:	45bc      	cmp	ip, r7
 8013a7c:	d304      	bcc.n	8013a88 <__mdiff+0x98>
 8013a7e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013a82:	b183      	cbz	r3, 8013aa6 <__mdiff+0xb6>
 8013a84:	6106      	str	r6, [r0, #16]
 8013a86:	e7c5      	b.n	8013a14 <__mdiff+0x24>
 8013a88:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013a8c:	fa1e f381 	uxtah	r3, lr, r1
 8013a90:	141a      	asrs	r2, r3, #16
 8013a92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013a96:	b29b      	uxth	r3, r3
 8013a98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013a9c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013aa0:	f845 3b04 	str.w	r3, [r5], #4
 8013aa4:	e7e9      	b.n	8013a7a <__mdiff+0x8a>
 8013aa6:	3e01      	subs	r6, #1
 8013aa8:	e7e9      	b.n	8013a7e <__mdiff+0x8e>
	...

08013aac <__ulp>:
 8013aac:	4b12      	ldr	r3, [pc, #72]	; (8013af8 <__ulp+0x4c>)
 8013aae:	ee10 2a90 	vmov	r2, s1
 8013ab2:	401a      	ands	r2, r3
 8013ab4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	dd04      	ble.n	8013ac6 <__ulp+0x1a>
 8013abc:	2000      	movs	r0, #0
 8013abe:	4619      	mov	r1, r3
 8013ac0:	ec41 0b10 	vmov	d0, r0, r1
 8013ac4:	4770      	bx	lr
 8013ac6:	425b      	negs	r3, r3
 8013ac8:	151b      	asrs	r3, r3, #20
 8013aca:	2b13      	cmp	r3, #19
 8013acc:	f04f 0000 	mov.w	r0, #0
 8013ad0:	f04f 0100 	mov.w	r1, #0
 8013ad4:	dc04      	bgt.n	8013ae0 <__ulp+0x34>
 8013ad6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013ada:	fa42 f103 	asr.w	r1, r2, r3
 8013ade:	e7ef      	b.n	8013ac0 <__ulp+0x14>
 8013ae0:	3b14      	subs	r3, #20
 8013ae2:	2b1e      	cmp	r3, #30
 8013ae4:	f04f 0201 	mov.w	r2, #1
 8013ae8:	bfda      	itte	le
 8013aea:	f1c3 031f 	rsble	r3, r3, #31
 8013aee:	fa02 f303 	lslle.w	r3, r2, r3
 8013af2:	4613      	movgt	r3, r2
 8013af4:	4618      	mov	r0, r3
 8013af6:	e7e3      	b.n	8013ac0 <__ulp+0x14>
 8013af8:	7ff00000 	.word	0x7ff00000

08013afc <__b2d>:
 8013afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013afe:	6905      	ldr	r5, [r0, #16]
 8013b00:	f100 0714 	add.w	r7, r0, #20
 8013b04:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013b08:	1f2e      	subs	r6, r5, #4
 8013b0a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013b0e:	4620      	mov	r0, r4
 8013b10:	f7ff fdc4 	bl	801369c <__hi0bits>
 8013b14:	f1c0 0320 	rsb	r3, r0, #32
 8013b18:	280a      	cmp	r0, #10
 8013b1a:	600b      	str	r3, [r1, #0]
 8013b1c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013b94 <__b2d+0x98>
 8013b20:	dc14      	bgt.n	8013b4c <__b2d+0x50>
 8013b22:	f1c0 0e0b 	rsb	lr, r0, #11
 8013b26:	fa24 f10e 	lsr.w	r1, r4, lr
 8013b2a:	42b7      	cmp	r7, r6
 8013b2c:	ea41 030c 	orr.w	r3, r1, ip
 8013b30:	bf34      	ite	cc
 8013b32:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013b36:	2100      	movcs	r1, #0
 8013b38:	3015      	adds	r0, #21
 8013b3a:	fa04 f000 	lsl.w	r0, r4, r0
 8013b3e:	fa21 f10e 	lsr.w	r1, r1, lr
 8013b42:	ea40 0201 	orr.w	r2, r0, r1
 8013b46:	ec43 2b10 	vmov	d0, r2, r3
 8013b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b4c:	42b7      	cmp	r7, r6
 8013b4e:	bf3a      	itte	cc
 8013b50:	f1a5 0608 	subcc.w	r6, r5, #8
 8013b54:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013b58:	2100      	movcs	r1, #0
 8013b5a:	380b      	subs	r0, #11
 8013b5c:	d015      	beq.n	8013b8a <__b2d+0x8e>
 8013b5e:	4084      	lsls	r4, r0
 8013b60:	f1c0 0520 	rsb	r5, r0, #32
 8013b64:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8013b68:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8013b6c:	42be      	cmp	r6, r7
 8013b6e:	fa21 fc05 	lsr.w	ip, r1, r5
 8013b72:	ea44 030c 	orr.w	r3, r4, ip
 8013b76:	bf8c      	ite	hi
 8013b78:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013b7c:	2400      	movls	r4, #0
 8013b7e:	fa01 f000 	lsl.w	r0, r1, r0
 8013b82:	40ec      	lsrs	r4, r5
 8013b84:	ea40 0204 	orr.w	r2, r0, r4
 8013b88:	e7dd      	b.n	8013b46 <__b2d+0x4a>
 8013b8a:	ea44 030c 	orr.w	r3, r4, ip
 8013b8e:	460a      	mov	r2, r1
 8013b90:	e7d9      	b.n	8013b46 <__b2d+0x4a>
 8013b92:	bf00      	nop
 8013b94:	3ff00000 	.word	0x3ff00000

08013b98 <__d2b>:
 8013b98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013b9c:	460e      	mov	r6, r1
 8013b9e:	2101      	movs	r1, #1
 8013ba0:	ec59 8b10 	vmov	r8, r9, d0
 8013ba4:	4615      	mov	r5, r2
 8013ba6:	f7ff fcb5 	bl	8013514 <_Balloc>
 8013baa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013bae:	4607      	mov	r7, r0
 8013bb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013bb4:	bb34      	cbnz	r4, 8013c04 <__d2b+0x6c>
 8013bb6:	9301      	str	r3, [sp, #4]
 8013bb8:	f1b8 0300 	subs.w	r3, r8, #0
 8013bbc:	d027      	beq.n	8013c0e <__d2b+0x76>
 8013bbe:	a802      	add	r0, sp, #8
 8013bc0:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013bc4:	f7ff fd89 	bl	80136da <__lo0bits>
 8013bc8:	9900      	ldr	r1, [sp, #0]
 8013bca:	b1f0      	cbz	r0, 8013c0a <__d2b+0x72>
 8013bcc:	9a01      	ldr	r2, [sp, #4]
 8013bce:	f1c0 0320 	rsb	r3, r0, #32
 8013bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8013bd6:	430b      	orrs	r3, r1
 8013bd8:	40c2      	lsrs	r2, r0
 8013bda:	617b      	str	r3, [r7, #20]
 8013bdc:	9201      	str	r2, [sp, #4]
 8013bde:	9b01      	ldr	r3, [sp, #4]
 8013be0:	61bb      	str	r3, [r7, #24]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	bf14      	ite	ne
 8013be6:	2102      	movne	r1, #2
 8013be8:	2101      	moveq	r1, #1
 8013bea:	6139      	str	r1, [r7, #16]
 8013bec:	b1c4      	cbz	r4, 8013c20 <__d2b+0x88>
 8013bee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013bf2:	4404      	add	r4, r0
 8013bf4:	6034      	str	r4, [r6, #0]
 8013bf6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013bfa:	6028      	str	r0, [r5, #0]
 8013bfc:	4638      	mov	r0, r7
 8013bfe:	b003      	add	sp, #12
 8013c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013c08:	e7d5      	b.n	8013bb6 <__d2b+0x1e>
 8013c0a:	6179      	str	r1, [r7, #20]
 8013c0c:	e7e7      	b.n	8013bde <__d2b+0x46>
 8013c0e:	a801      	add	r0, sp, #4
 8013c10:	f7ff fd63 	bl	80136da <__lo0bits>
 8013c14:	9b01      	ldr	r3, [sp, #4]
 8013c16:	617b      	str	r3, [r7, #20]
 8013c18:	2101      	movs	r1, #1
 8013c1a:	6139      	str	r1, [r7, #16]
 8013c1c:	3020      	adds	r0, #32
 8013c1e:	e7e5      	b.n	8013bec <__d2b+0x54>
 8013c20:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013c24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013c28:	6030      	str	r0, [r6, #0]
 8013c2a:	6918      	ldr	r0, [r3, #16]
 8013c2c:	f7ff fd36 	bl	801369c <__hi0bits>
 8013c30:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013c34:	e7e1      	b.n	8013bfa <__d2b+0x62>

08013c36 <__ratio>:
 8013c36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c3a:	4688      	mov	r8, r1
 8013c3c:	4669      	mov	r1, sp
 8013c3e:	4681      	mov	r9, r0
 8013c40:	f7ff ff5c 	bl	8013afc <__b2d>
 8013c44:	a901      	add	r1, sp, #4
 8013c46:	4640      	mov	r0, r8
 8013c48:	ec57 6b10 	vmov	r6, r7, d0
 8013c4c:	ee10 4a10 	vmov	r4, s0
 8013c50:	f7ff ff54 	bl	8013afc <__b2d>
 8013c54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013c58:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013c5c:	eba3 0c02 	sub.w	ip, r3, r2
 8013c60:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013c64:	1a9b      	subs	r3, r3, r2
 8013c66:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013c6a:	ec51 0b10 	vmov	r0, r1, d0
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	ee10 aa10 	vmov	sl, s0
 8013c74:	bfce      	itee	gt
 8013c76:	463a      	movgt	r2, r7
 8013c78:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013c7c:	460a      	movle	r2, r1
 8013c7e:	463d      	mov	r5, r7
 8013c80:	468b      	mov	fp, r1
 8013c82:	bfcc      	ite	gt
 8013c84:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8013c88:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013c8c:	ec45 4b17 	vmov	d7, r4, r5
 8013c90:	ec4b ab16 	vmov	d6, sl, fp
 8013c94:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8013c98:	b003      	add	sp, #12
 8013c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013c9e <__copybits>:
 8013c9e:	3901      	subs	r1, #1
 8013ca0:	b510      	push	{r4, lr}
 8013ca2:	1149      	asrs	r1, r1, #5
 8013ca4:	6914      	ldr	r4, [r2, #16]
 8013ca6:	3101      	adds	r1, #1
 8013ca8:	f102 0314 	add.w	r3, r2, #20
 8013cac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013cb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013cb4:	42a3      	cmp	r3, r4
 8013cb6:	4602      	mov	r2, r0
 8013cb8:	d303      	bcc.n	8013cc2 <__copybits+0x24>
 8013cba:	2300      	movs	r3, #0
 8013cbc:	428a      	cmp	r2, r1
 8013cbe:	d305      	bcc.n	8013ccc <__copybits+0x2e>
 8013cc0:	bd10      	pop	{r4, pc}
 8013cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cc6:	f840 2b04 	str.w	r2, [r0], #4
 8013cca:	e7f3      	b.n	8013cb4 <__copybits+0x16>
 8013ccc:	f842 3b04 	str.w	r3, [r2], #4
 8013cd0:	e7f4      	b.n	8013cbc <__copybits+0x1e>

08013cd2 <__any_on>:
 8013cd2:	f100 0214 	add.w	r2, r0, #20
 8013cd6:	6900      	ldr	r0, [r0, #16]
 8013cd8:	114b      	asrs	r3, r1, #5
 8013cda:	4298      	cmp	r0, r3
 8013cdc:	b510      	push	{r4, lr}
 8013cde:	db11      	blt.n	8013d04 <__any_on+0x32>
 8013ce0:	dd0a      	ble.n	8013cf8 <__any_on+0x26>
 8013ce2:	f011 011f 	ands.w	r1, r1, #31
 8013ce6:	d007      	beq.n	8013cf8 <__any_on+0x26>
 8013ce8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013cec:	fa24 f001 	lsr.w	r0, r4, r1
 8013cf0:	fa00 f101 	lsl.w	r1, r0, r1
 8013cf4:	428c      	cmp	r4, r1
 8013cf6:	d10b      	bne.n	8013d10 <__any_on+0x3e>
 8013cf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013cfc:	4293      	cmp	r3, r2
 8013cfe:	d803      	bhi.n	8013d08 <__any_on+0x36>
 8013d00:	2000      	movs	r0, #0
 8013d02:	bd10      	pop	{r4, pc}
 8013d04:	4603      	mov	r3, r0
 8013d06:	e7f7      	b.n	8013cf8 <__any_on+0x26>
 8013d08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013d0c:	2900      	cmp	r1, #0
 8013d0e:	d0f5      	beq.n	8013cfc <__any_on+0x2a>
 8013d10:	2001      	movs	r0, #1
 8013d12:	e7f6      	b.n	8013d02 <__any_on+0x30>

08013d14 <_calloc_r>:
 8013d14:	b538      	push	{r3, r4, r5, lr}
 8013d16:	fb02 f401 	mul.w	r4, r2, r1
 8013d1a:	4621      	mov	r1, r4
 8013d1c:	f000 f856 	bl	8013dcc <_malloc_r>
 8013d20:	4605      	mov	r5, r0
 8013d22:	b118      	cbz	r0, 8013d2c <_calloc_r+0x18>
 8013d24:	4622      	mov	r2, r4
 8013d26:	2100      	movs	r1, #0
 8013d28:	f7fc fb05 	bl	8010336 <memset>
 8013d2c:	4628      	mov	r0, r5
 8013d2e:	bd38      	pop	{r3, r4, r5, pc}

08013d30 <_free_r>:
 8013d30:	b538      	push	{r3, r4, r5, lr}
 8013d32:	4605      	mov	r5, r0
 8013d34:	2900      	cmp	r1, #0
 8013d36:	d045      	beq.n	8013dc4 <_free_r+0x94>
 8013d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d3c:	1f0c      	subs	r4, r1, #4
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	bfb8      	it	lt
 8013d42:	18e4      	addlt	r4, r4, r3
 8013d44:	f000 facf 	bl	80142e6 <__malloc_lock>
 8013d48:	4a1f      	ldr	r2, [pc, #124]	; (8013dc8 <_free_r+0x98>)
 8013d4a:	6813      	ldr	r3, [r2, #0]
 8013d4c:	4610      	mov	r0, r2
 8013d4e:	b933      	cbnz	r3, 8013d5e <_free_r+0x2e>
 8013d50:	6063      	str	r3, [r4, #4]
 8013d52:	6014      	str	r4, [r2, #0]
 8013d54:	4628      	mov	r0, r5
 8013d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d5a:	f000 bac5 	b.w	80142e8 <__malloc_unlock>
 8013d5e:	42a3      	cmp	r3, r4
 8013d60:	d90c      	bls.n	8013d7c <_free_r+0x4c>
 8013d62:	6821      	ldr	r1, [r4, #0]
 8013d64:	1862      	adds	r2, r4, r1
 8013d66:	4293      	cmp	r3, r2
 8013d68:	bf04      	itt	eq
 8013d6a:	681a      	ldreq	r2, [r3, #0]
 8013d6c:	685b      	ldreq	r3, [r3, #4]
 8013d6e:	6063      	str	r3, [r4, #4]
 8013d70:	bf04      	itt	eq
 8013d72:	1852      	addeq	r2, r2, r1
 8013d74:	6022      	streq	r2, [r4, #0]
 8013d76:	6004      	str	r4, [r0, #0]
 8013d78:	e7ec      	b.n	8013d54 <_free_r+0x24>
 8013d7a:	4613      	mov	r3, r2
 8013d7c:	685a      	ldr	r2, [r3, #4]
 8013d7e:	b10a      	cbz	r2, 8013d84 <_free_r+0x54>
 8013d80:	42a2      	cmp	r2, r4
 8013d82:	d9fa      	bls.n	8013d7a <_free_r+0x4a>
 8013d84:	6819      	ldr	r1, [r3, #0]
 8013d86:	1858      	adds	r0, r3, r1
 8013d88:	42a0      	cmp	r0, r4
 8013d8a:	d10b      	bne.n	8013da4 <_free_r+0x74>
 8013d8c:	6820      	ldr	r0, [r4, #0]
 8013d8e:	4401      	add	r1, r0
 8013d90:	1858      	adds	r0, r3, r1
 8013d92:	4282      	cmp	r2, r0
 8013d94:	6019      	str	r1, [r3, #0]
 8013d96:	d1dd      	bne.n	8013d54 <_free_r+0x24>
 8013d98:	6810      	ldr	r0, [r2, #0]
 8013d9a:	6852      	ldr	r2, [r2, #4]
 8013d9c:	605a      	str	r2, [r3, #4]
 8013d9e:	4401      	add	r1, r0
 8013da0:	6019      	str	r1, [r3, #0]
 8013da2:	e7d7      	b.n	8013d54 <_free_r+0x24>
 8013da4:	d902      	bls.n	8013dac <_free_r+0x7c>
 8013da6:	230c      	movs	r3, #12
 8013da8:	602b      	str	r3, [r5, #0]
 8013daa:	e7d3      	b.n	8013d54 <_free_r+0x24>
 8013dac:	6820      	ldr	r0, [r4, #0]
 8013dae:	1821      	adds	r1, r4, r0
 8013db0:	428a      	cmp	r2, r1
 8013db2:	bf04      	itt	eq
 8013db4:	6811      	ldreq	r1, [r2, #0]
 8013db6:	6852      	ldreq	r2, [r2, #4]
 8013db8:	6062      	str	r2, [r4, #4]
 8013dba:	bf04      	itt	eq
 8013dbc:	1809      	addeq	r1, r1, r0
 8013dbe:	6021      	streq	r1, [r4, #0]
 8013dc0:	605c      	str	r4, [r3, #4]
 8013dc2:	e7c7      	b.n	8013d54 <_free_r+0x24>
 8013dc4:	bd38      	pop	{r3, r4, r5, pc}
 8013dc6:	bf00      	nop
 8013dc8:	20010330 	.word	0x20010330

08013dcc <_malloc_r>:
 8013dcc:	b570      	push	{r4, r5, r6, lr}
 8013dce:	1ccd      	adds	r5, r1, #3
 8013dd0:	f025 0503 	bic.w	r5, r5, #3
 8013dd4:	3508      	adds	r5, #8
 8013dd6:	2d0c      	cmp	r5, #12
 8013dd8:	bf38      	it	cc
 8013dda:	250c      	movcc	r5, #12
 8013ddc:	2d00      	cmp	r5, #0
 8013dde:	4606      	mov	r6, r0
 8013de0:	db01      	blt.n	8013de6 <_malloc_r+0x1a>
 8013de2:	42a9      	cmp	r1, r5
 8013de4:	d903      	bls.n	8013dee <_malloc_r+0x22>
 8013de6:	230c      	movs	r3, #12
 8013de8:	6033      	str	r3, [r6, #0]
 8013dea:	2000      	movs	r0, #0
 8013dec:	bd70      	pop	{r4, r5, r6, pc}
 8013dee:	f000 fa7a 	bl	80142e6 <__malloc_lock>
 8013df2:	4a21      	ldr	r2, [pc, #132]	; (8013e78 <_malloc_r+0xac>)
 8013df4:	6814      	ldr	r4, [r2, #0]
 8013df6:	4621      	mov	r1, r4
 8013df8:	b991      	cbnz	r1, 8013e20 <_malloc_r+0x54>
 8013dfa:	4c20      	ldr	r4, [pc, #128]	; (8013e7c <_malloc_r+0xb0>)
 8013dfc:	6823      	ldr	r3, [r4, #0]
 8013dfe:	b91b      	cbnz	r3, 8013e08 <_malloc_r+0x3c>
 8013e00:	4630      	mov	r0, r6
 8013e02:	f000 f98f 	bl	8014124 <_sbrk_r>
 8013e06:	6020      	str	r0, [r4, #0]
 8013e08:	4629      	mov	r1, r5
 8013e0a:	4630      	mov	r0, r6
 8013e0c:	f000 f98a 	bl	8014124 <_sbrk_r>
 8013e10:	1c43      	adds	r3, r0, #1
 8013e12:	d124      	bne.n	8013e5e <_malloc_r+0x92>
 8013e14:	230c      	movs	r3, #12
 8013e16:	6033      	str	r3, [r6, #0]
 8013e18:	4630      	mov	r0, r6
 8013e1a:	f000 fa65 	bl	80142e8 <__malloc_unlock>
 8013e1e:	e7e4      	b.n	8013dea <_malloc_r+0x1e>
 8013e20:	680b      	ldr	r3, [r1, #0]
 8013e22:	1b5b      	subs	r3, r3, r5
 8013e24:	d418      	bmi.n	8013e58 <_malloc_r+0x8c>
 8013e26:	2b0b      	cmp	r3, #11
 8013e28:	d90f      	bls.n	8013e4a <_malloc_r+0x7e>
 8013e2a:	600b      	str	r3, [r1, #0]
 8013e2c:	50cd      	str	r5, [r1, r3]
 8013e2e:	18cc      	adds	r4, r1, r3
 8013e30:	4630      	mov	r0, r6
 8013e32:	f000 fa59 	bl	80142e8 <__malloc_unlock>
 8013e36:	f104 000b 	add.w	r0, r4, #11
 8013e3a:	1d23      	adds	r3, r4, #4
 8013e3c:	f020 0007 	bic.w	r0, r0, #7
 8013e40:	1ac3      	subs	r3, r0, r3
 8013e42:	d0d3      	beq.n	8013dec <_malloc_r+0x20>
 8013e44:	425a      	negs	r2, r3
 8013e46:	50e2      	str	r2, [r4, r3]
 8013e48:	e7d0      	b.n	8013dec <_malloc_r+0x20>
 8013e4a:	428c      	cmp	r4, r1
 8013e4c:	684b      	ldr	r3, [r1, #4]
 8013e4e:	bf16      	itet	ne
 8013e50:	6063      	strne	r3, [r4, #4]
 8013e52:	6013      	streq	r3, [r2, #0]
 8013e54:	460c      	movne	r4, r1
 8013e56:	e7eb      	b.n	8013e30 <_malloc_r+0x64>
 8013e58:	460c      	mov	r4, r1
 8013e5a:	6849      	ldr	r1, [r1, #4]
 8013e5c:	e7cc      	b.n	8013df8 <_malloc_r+0x2c>
 8013e5e:	1cc4      	adds	r4, r0, #3
 8013e60:	f024 0403 	bic.w	r4, r4, #3
 8013e64:	42a0      	cmp	r0, r4
 8013e66:	d005      	beq.n	8013e74 <_malloc_r+0xa8>
 8013e68:	1a21      	subs	r1, r4, r0
 8013e6a:	4630      	mov	r0, r6
 8013e6c:	f000 f95a 	bl	8014124 <_sbrk_r>
 8013e70:	3001      	adds	r0, #1
 8013e72:	d0cf      	beq.n	8013e14 <_malloc_r+0x48>
 8013e74:	6025      	str	r5, [r4, #0]
 8013e76:	e7db      	b.n	8013e30 <_malloc_r+0x64>
 8013e78:	20010330 	.word	0x20010330
 8013e7c:	20010334 	.word	0x20010334

08013e80 <__ssputs_r>:
 8013e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e84:	688e      	ldr	r6, [r1, #8]
 8013e86:	429e      	cmp	r6, r3
 8013e88:	4682      	mov	sl, r0
 8013e8a:	460c      	mov	r4, r1
 8013e8c:	4690      	mov	r8, r2
 8013e8e:	4699      	mov	r9, r3
 8013e90:	d837      	bhi.n	8013f02 <__ssputs_r+0x82>
 8013e92:	898a      	ldrh	r2, [r1, #12]
 8013e94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013e98:	d031      	beq.n	8013efe <__ssputs_r+0x7e>
 8013e9a:	6825      	ldr	r5, [r4, #0]
 8013e9c:	6909      	ldr	r1, [r1, #16]
 8013e9e:	1a6f      	subs	r7, r5, r1
 8013ea0:	6965      	ldr	r5, [r4, #20]
 8013ea2:	2302      	movs	r3, #2
 8013ea4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ea8:	fb95 f5f3 	sdiv	r5, r5, r3
 8013eac:	f109 0301 	add.w	r3, r9, #1
 8013eb0:	443b      	add	r3, r7
 8013eb2:	429d      	cmp	r5, r3
 8013eb4:	bf38      	it	cc
 8013eb6:	461d      	movcc	r5, r3
 8013eb8:	0553      	lsls	r3, r2, #21
 8013eba:	d530      	bpl.n	8013f1e <__ssputs_r+0x9e>
 8013ebc:	4629      	mov	r1, r5
 8013ebe:	f7ff ff85 	bl	8013dcc <_malloc_r>
 8013ec2:	4606      	mov	r6, r0
 8013ec4:	b950      	cbnz	r0, 8013edc <__ssputs_r+0x5c>
 8013ec6:	230c      	movs	r3, #12
 8013ec8:	f8ca 3000 	str.w	r3, [sl]
 8013ecc:	89a3      	ldrh	r3, [r4, #12]
 8013ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ed2:	81a3      	strh	r3, [r4, #12]
 8013ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013edc:	463a      	mov	r2, r7
 8013ede:	6921      	ldr	r1, [r4, #16]
 8013ee0:	f7fc fa1e 	bl	8010320 <memcpy>
 8013ee4:	89a3      	ldrh	r3, [r4, #12]
 8013ee6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013eee:	81a3      	strh	r3, [r4, #12]
 8013ef0:	6126      	str	r6, [r4, #16]
 8013ef2:	6165      	str	r5, [r4, #20]
 8013ef4:	443e      	add	r6, r7
 8013ef6:	1bed      	subs	r5, r5, r7
 8013ef8:	6026      	str	r6, [r4, #0]
 8013efa:	60a5      	str	r5, [r4, #8]
 8013efc:	464e      	mov	r6, r9
 8013efe:	454e      	cmp	r6, r9
 8013f00:	d900      	bls.n	8013f04 <__ssputs_r+0x84>
 8013f02:	464e      	mov	r6, r9
 8013f04:	4632      	mov	r2, r6
 8013f06:	4641      	mov	r1, r8
 8013f08:	6820      	ldr	r0, [r4, #0]
 8013f0a:	f000 f9d3 	bl	80142b4 <memmove>
 8013f0e:	68a3      	ldr	r3, [r4, #8]
 8013f10:	1b9b      	subs	r3, r3, r6
 8013f12:	60a3      	str	r3, [r4, #8]
 8013f14:	6823      	ldr	r3, [r4, #0]
 8013f16:	441e      	add	r6, r3
 8013f18:	6026      	str	r6, [r4, #0]
 8013f1a:	2000      	movs	r0, #0
 8013f1c:	e7dc      	b.n	8013ed8 <__ssputs_r+0x58>
 8013f1e:	462a      	mov	r2, r5
 8013f20:	f000 f9e3 	bl	80142ea <_realloc_r>
 8013f24:	4606      	mov	r6, r0
 8013f26:	2800      	cmp	r0, #0
 8013f28:	d1e2      	bne.n	8013ef0 <__ssputs_r+0x70>
 8013f2a:	6921      	ldr	r1, [r4, #16]
 8013f2c:	4650      	mov	r0, sl
 8013f2e:	f7ff feff 	bl	8013d30 <_free_r>
 8013f32:	e7c8      	b.n	8013ec6 <__ssputs_r+0x46>

08013f34 <_svfiprintf_r>:
 8013f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f38:	461d      	mov	r5, r3
 8013f3a:	898b      	ldrh	r3, [r1, #12]
 8013f3c:	061f      	lsls	r7, r3, #24
 8013f3e:	b09d      	sub	sp, #116	; 0x74
 8013f40:	4680      	mov	r8, r0
 8013f42:	460c      	mov	r4, r1
 8013f44:	4616      	mov	r6, r2
 8013f46:	d50f      	bpl.n	8013f68 <_svfiprintf_r+0x34>
 8013f48:	690b      	ldr	r3, [r1, #16]
 8013f4a:	b96b      	cbnz	r3, 8013f68 <_svfiprintf_r+0x34>
 8013f4c:	2140      	movs	r1, #64	; 0x40
 8013f4e:	f7ff ff3d 	bl	8013dcc <_malloc_r>
 8013f52:	6020      	str	r0, [r4, #0]
 8013f54:	6120      	str	r0, [r4, #16]
 8013f56:	b928      	cbnz	r0, 8013f64 <_svfiprintf_r+0x30>
 8013f58:	230c      	movs	r3, #12
 8013f5a:	f8c8 3000 	str.w	r3, [r8]
 8013f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8013f62:	e0c8      	b.n	80140f6 <_svfiprintf_r+0x1c2>
 8013f64:	2340      	movs	r3, #64	; 0x40
 8013f66:	6163      	str	r3, [r4, #20]
 8013f68:	2300      	movs	r3, #0
 8013f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8013f6c:	2320      	movs	r3, #32
 8013f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013f72:	2330      	movs	r3, #48	; 0x30
 8013f74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013f78:	9503      	str	r5, [sp, #12]
 8013f7a:	f04f 0b01 	mov.w	fp, #1
 8013f7e:	4637      	mov	r7, r6
 8013f80:	463d      	mov	r5, r7
 8013f82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013f86:	b10b      	cbz	r3, 8013f8c <_svfiprintf_r+0x58>
 8013f88:	2b25      	cmp	r3, #37	; 0x25
 8013f8a:	d13e      	bne.n	801400a <_svfiprintf_r+0xd6>
 8013f8c:	ebb7 0a06 	subs.w	sl, r7, r6
 8013f90:	d00b      	beq.n	8013faa <_svfiprintf_r+0x76>
 8013f92:	4653      	mov	r3, sl
 8013f94:	4632      	mov	r2, r6
 8013f96:	4621      	mov	r1, r4
 8013f98:	4640      	mov	r0, r8
 8013f9a:	f7ff ff71 	bl	8013e80 <__ssputs_r>
 8013f9e:	3001      	adds	r0, #1
 8013fa0:	f000 80a4 	beq.w	80140ec <_svfiprintf_r+0x1b8>
 8013fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fa6:	4453      	add	r3, sl
 8013fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8013faa:	783b      	ldrb	r3, [r7, #0]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	f000 809d 	beq.w	80140ec <_svfiprintf_r+0x1b8>
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8013fb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013fbc:	9304      	str	r3, [sp, #16]
 8013fbe:	9307      	str	r3, [sp, #28]
 8013fc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013fc4:	931a      	str	r3, [sp, #104]	; 0x68
 8013fc6:	462f      	mov	r7, r5
 8013fc8:	2205      	movs	r2, #5
 8013fca:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013fce:	4850      	ldr	r0, [pc, #320]	; (8014110 <_svfiprintf_r+0x1dc>)
 8013fd0:	f7ec f93e 	bl	8000250 <memchr>
 8013fd4:	9b04      	ldr	r3, [sp, #16]
 8013fd6:	b9d0      	cbnz	r0, 801400e <_svfiprintf_r+0xda>
 8013fd8:	06d9      	lsls	r1, r3, #27
 8013fda:	bf44      	itt	mi
 8013fdc:	2220      	movmi	r2, #32
 8013fde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013fe2:	071a      	lsls	r2, r3, #28
 8013fe4:	bf44      	itt	mi
 8013fe6:	222b      	movmi	r2, #43	; 0x2b
 8013fe8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013fec:	782a      	ldrb	r2, [r5, #0]
 8013fee:	2a2a      	cmp	r2, #42	; 0x2a
 8013ff0:	d015      	beq.n	801401e <_svfiprintf_r+0xea>
 8013ff2:	9a07      	ldr	r2, [sp, #28]
 8013ff4:	462f      	mov	r7, r5
 8013ff6:	2000      	movs	r0, #0
 8013ff8:	250a      	movs	r5, #10
 8013ffa:	4639      	mov	r1, r7
 8013ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014000:	3b30      	subs	r3, #48	; 0x30
 8014002:	2b09      	cmp	r3, #9
 8014004:	d94d      	bls.n	80140a2 <_svfiprintf_r+0x16e>
 8014006:	b1b8      	cbz	r0, 8014038 <_svfiprintf_r+0x104>
 8014008:	e00f      	b.n	801402a <_svfiprintf_r+0xf6>
 801400a:	462f      	mov	r7, r5
 801400c:	e7b8      	b.n	8013f80 <_svfiprintf_r+0x4c>
 801400e:	4a40      	ldr	r2, [pc, #256]	; (8014110 <_svfiprintf_r+0x1dc>)
 8014010:	1a80      	subs	r0, r0, r2
 8014012:	fa0b f000 	lsl.w	r0, fp, r0
 8014016:	4318      	orrs	r0, r3
 8014018:	9004      	str	r0, [sp, #16]
 801401a:	463d      	mov	r5, r7
 801401c:	e7d3      	b.n	8013fc6 <_svfiprintf_r+0x92>
 801401e:	9a03      	ldr	r2, [sp, #12]
 8014020:	1d11      	adds	r1, r2, #4
 8014022:	6812      	ldr	r2, [r2, #0]
 8014024:	9103      	str	r1, [sp, #12]
 8014026:	2a00      	cmp	r2, #0
 8014028:	db01      	blt.n	801402e <_svfiprintf_r+0xfa>
 801402a:	9207      	str	r2, [sp, #28]
 801402c:	e004      	b.n	8014038 <_svfiprintf_r+0x104>
 801402e:	4252      	negs	r2, r2
 8014030:	f043 0302 	orr.w	r3, r3, #2
 8014034:	9207      	str	r2, [sp, #28]
 8014036:	9304      	str	r3, [sp, #16]
 8014038:	783b      	ldrb	r3, [r7, #0]
 801403a:	2b2e      	cmp	r3, #46	; 0x2e
 801403c:	d10c      	bne.n	8014058 <_svfiprintf_r+0x124>
 801403e:	787b      	ldrb	r3, [r7, #1]
 8014040:	2b2a      	cmp	r3, #42	; 0x2a
 8014042:	d133      	bne.n	80140ac <_svfiprintf_r+0x178>
 8014044:	9b03      	ldr	r3, [sp, #12]
 8014046:	1d1a      	adds	r2, r3, #4
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	9203      	str	r2, [sp, #12]
 801404c:	2b00      	cmp	r3, #0
 801404e:	bfb8      	it	lt
 8014050:	f04f 33ff 	movlt.w	r3, #4294967295
 8014054:	3702      	adds	r7, #2
 8014056:	9305      	str	r3, [sp, #20]
 8014058:	4d2e      	ldr	r5, [pc, #184]	; (8014114 <_svfiprintf_r+0x1e0>)
 801405a:	7839      	ldrb	r1, [r7, #0]
 801405c:	2203      	movs	r2, #3
 801405e:	4628      	mov	r0, r5
 8014060:	f7ec f8f6 	bl	8000250 <memchr>
 8014064:	b138      	cbz	r0, 8014076 <_svfiprintf_r+0x142>
 8014066:	2340      	movs	r3, #64	; 0x40
 8014068:	1b40      	subs	r0, r0, r5
 801406a:	fa03 f000 	lsl.w	r0, r3, r0
 801406e:	9b04      	ldr	r3, [sp, #16]
 8014070:	4303      	orrs	r3, r0
 8014072:	3701      	adds	r7, #1
 8014074:	9304      	str	r3, [sp, #16]
 8014076:	7839      	ldrb	r1, [r7, #0]
 8014078:	4827      	ldr	r0, [pc, #156]	; (8014118 <_svfiprintf_r+0x1e4>)
 801407a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801407e:	2206      	movs	r2, #6
 8014080:	1c7e      	adds	r6, r7, #1
 8014082:	f7ec f8e5 	bl	8000250 <memchr>
 8014086:	2800      	cmp	r0, #0
 8014088:	d038      	beq.n	80140fc <_svfiprintf_r+0x1c8>
 801408a:	4b24      	ldr	r3, [pc, #144]	; (801411c <_svfiprintf_r+0x1e8>)
 801408c:	bb13      	cbnz	r3, 80140d4 <_svfiprintf_r+0x1a0>
 801408e:	9b03      	ldr	r3, [sp, #12]
 8014090:	3307      	adds	r3, #7
 8014092:	f023 0307 	bic.w	r3, r3, #7
 8014096:	3308      	adds	r3, #8
 8014098:	9303      	str	r3, [sp, #12]
 801409a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801409c:	444b      	add	r3, r9
 801409e:	9309      	str	r3, [sp, #36]	; 0x24
 80140a0:	e76d      	b.n	8013f7e <_svfiprintf_r+0x4a>
 80140a2:	fb05 3202 	mla	r2, r5, r2, r3
 80140a6:	2001      	movs	r0, #1
 80140a8:	460f      	mov	r7, r1
 80140aa:	e7a6      	b.n	8013ffa <_svfiprintf_r+0xc6>
 80140ac:	2300      	movs	r3, #0
 80140ae:	3701      	adds	r7, #1
 80140b0:	9305      	str	r3, [sp, #20]
 80140b2:	4619      	mov	r1, r3
 80140b4:	250a      	movs	r5, #10
 80140b6:	4638      	mov	r0, r7
 80140b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80140bc:	3a30      	subs	r2, #48	; 0x30
 80140be:	2a09      	cmp	r2, #9
 80140c0:	d903      	bls.n	80140ca <_svfiprintf_r+0x196>
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d0c8      	beq.n	8014058 <_svfiprintf_r+0x124>
 80140c6:	9105      	str	r1, [sp, #20]
 80140c8:	e7c6      	b.n	8014058 <_svfiprintf_r+0x124>
 80140ca:	fb05 2101 	mla	r1, r5, r1, r2
 80140ce:	2301      	movs	r3, #1
 80140d0:	4607      	mov	r7, r0
 80140d2:	e7f0      	b.n	80140b6 <_svfiprintf_r+0x182>
 80140d4:	ab03      	add	r3, sp, #12
 80140d6:	9300      	str	r3, [sp, #0]
 80140d8:	4622      	mov	r2, r4
 80140da:	4b11      	ldr	r3, [pc, #68]	; (8014120 <_svfiprintf_r+0x1ec>)
 80140dc:	a904      	add	r1, sp, #16
 80140de:	4640      	mov	r0, r8
 80140e0:	f7fc f9b6 	bl	8010450 <_printf_float>
 80140e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80140e8:	4681      	mov	r9, r0
 80140ea:	d1d6      	bne.n	801409a <_svfiprintf_r+0x166>
 80140ec:	89a3      	ldrh	r3, [r4, #12]
 80140ee:	065b      	lsls	r3, r3, #25
 80140f0:	f53f af35 	bmi.w	8013f5e <_svfiprintf_r+0x2a>
 80140f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80140f6:	b01d      	add	sp, #116	; 0x74
 80140f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140fc:	ab03      	add	r3, sp, #12
 80140fe:	9300      	str	r3, [sp, #0]
 8014100:	4622      	mov	r2, r4
 8014102:	4b07      	ldr	r3, [pc, #28]	; (8014120 <_svfiprintf_r+0x1ec>)
 8014104:	a904      	add	r1, sp, #16
 8014106:	4640      	mov	r0, r8
 8014108:	f7fc fc44 	bl	8010994 <_printf_i>
 801410c:	e7ea      	b.n	80140e4 <_svfiprintf_r+0x1b0>
 801410e:	bf00      	nop
 8014110:	0801525c 	.word	0x0801525c
 8014114:	08015262 	.word	0x08015262
 8014118:	08015266 	.word	0x08015266
 801411c:	08010451 	.word	0x08010451
 8014120:	08013e81 	.word	0x08013e81

08014124 <_sbrk_r>:
 8014124:	b538      	push	{r3, r4, r5, lr}
 8014126:	4c06      	ldr	r4, [pc, #24]	; (8014140 <_sbrk_r+0x1c>)
 8014128:	2300      	movs	r3, #0
 801412a:	4605      	mov	r5, r0
 801412c:	4608      	mov	r0, r1
 801412e:	6023      	str	r3, [r4, #0]
 8014130:	f7f3 f918 	bl	8007364 <_sbrk>
 8014134:	1c43      	adds	r3, r0, #1
 8014136:	d102      	bne.n	801413e <_sbrk_r+0x1a>
 8014138:	6823      	ldr	r3, [r4, #0]
 801413a:	b103      	cbz	r3, 801413e <_sbrk_r+0x1a>
 801413c:	602b      	str	r3, [r5, #0]
 801413e:	bd38      	pop	{r3, r4, r5, pc}
 8014140:	20024154 	.word	0x20024154

08014144 <__sread>:
 8014144:	b510      	push	{r4, lr}
 8014146:	460c      	mov	r4, r1
 8014148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801414c:	f000 f8f4 	bl	8014338 <_read_r>
 8014150:	2800      	cmp	r0, #0
 8014152:	bfab      	itete	ge
 8014154:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014156:	89a3      	ldrhlt	r3, [r4, #12]
 8014158:	181b      	addge	r3, r3, r0
 801415a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801415e:	bfac      	ite	ge
 8014160:	6563      	strge	r3, [r4, #84]	; 0x54
 8014162:	81a3      	strhlt	r3, [r4, #12]
 8014164:	bd10      	pop	{r4, pc}

08014166 <__swrite>:
 8014166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801416a:	461f      	mov	r7, r3
 801416c:	898b      	ldrh	r3, [r1, #12]
 801416e:	05db      	lsls	r3, r3, #23
 8014170:	4605      	mov	r5, r0
 8014172:	460c      	mov	r4, r1
 8014174:	4616      	mov	r6, r2
 8014176:	d505      	bpl.n	8014184 <__swrite+0x1e>
 8014178:	2302      	movs	r3, #2
 801417a:	2200      	movs	r2, #0
 801417c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014180:	f000 f886 	bl	8014290 <_lseek_r>
 8014184:	89a3      	ldrh	r3, [r4, #12]
 8014186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801418a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801418e:	81a3      	strh	r3, [r4, #12]
 8014190:	4632      	mov	r2, r6
 8014192:	463b      	mov	r3, r7
 8014194:	4628      	mov	r0, r5
 8014196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801419a:	f000 b835 	b.w	8014208 <_write_r>

0801419e <__sseek>:
 801419e:	b510      	push	{r4, lr}
 80141a0:	460c      	mov	r4, r1
 80141a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141a6:	f000 f873 	bl	8014290 <_lseek_r>
 80141aa:	1c43      	adds	r3, r0, #1
 80141ac:	89a3      	ldrh	r3, [r4, #12]
 80141ae:	bf15      	itete	ne
 80141b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80141b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80141b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80141ba:	81a3      	strheq	r3, [r4, #12]
 80141bc:	bf18      	it	ne
 80141be:	81a3      	strhne	r3, [r4, #12]
 80141c0:	bd10      	pop	{r4, pc}

080141c2 <__sclose>:
 80141c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141c6:	f000 b831 	b.w	801422c <_close_r>

080141ca <strncmp>:
 80141ca:	b510      	push	{r4, lr}
 80141cc:	b16a      	cbz	r2, 80141ea <strncmp+0x20>
 80141ce:	3901      	subs	r1, #1
 80141d0:	1884      	adds	r4, r0, r2
 80141d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80141d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80141da:	4293      	cmp	r3, r2
 80141dc:	d103      	bne.n	80141e6 <strncmp+0x1c>
 80141de:	42a0      	cmp	r0, r4
 80141e0:	d001      	beq.n	80141e6 <strncmp+0x1c>
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d1f5      	bne.n	80141d2 <strncmp+0x8>
 80141e6:	1a98      	subs	r0, r3, r2
 80141e8:	bd10      	pop	{r4, pc}
 80141ea:	4610      	mov	r0, r2
 80141ec:	e7fc      	b.n	80141e8 <strncmp+0x1e>

080141ee <__ascii_wctomb>:
 80141ee:	b149      	cbz	r1, 8014204 <__ascii_wctomb+0x16>
 80141f0:	2aff      	cmp	r2, #255	; 0xff
 80141f2:	bf85      	ittet	hi
 80141f4:	238a      	movhi	r3, #138	; 0x8a
 80141f6:	6003      	strhi	r3, [r0, #0]
 80141f8:	700a      	strbls	r2, [r1, #0]
 80141fa:	f04f 30ff 	movhi.w	r0, #4294967295
 80141fe:	bf98      	it	ls
 8014200:	2001      	movls	r0, #1
 8014202:	4770      	bx	lr
 8014204:	4608      	mov	r0, r1
 8014206:	4770      	bx	lr

08014208 <_write_r>:
 8014208:	b538      	push	{r3, r4, r5, lr}
 801420a:	4c07      	ldr	r4, [pc, #28]	; (8014228 <_write_r+0x20>)
 801420c:	4605      	mov	r5, r0
 801420e:	4608      	mov	r0, r1
 8014210:	4611      	mov	r1, r2
 8014212:	2200      	movs	r2, #0
 8014214:	6022      	str	r2, [r4, #0]
 8014216:	461a      	mov	r2, r3
 8014218:	f7f3 f853 	bl	80072c2 <_write>
 801421c:	1c43      	adds	r3, r0, #1
 801421e:	d102      	bne.n	8014226 <_write_r+0x1e>
 8014220:	6823      	ldr	r3, [r4, #0]
 8014222:	b103      	cbz	r3, 8014226 <_write_r+0x1e>
 8014224:	602b      	str	r3, [r5, #0]
 8014226:	bd38      	pop	{r3, r4, r5, pc}
 8014228:	20024154 	.word	0x20024154

0801422c <_close_r>:
 801422c:	b538      	push	{r3, r4, r5, lr}
 801422e:	4c06      	ldr	r4, [pc, #24]	; (8014248 <_close_r+0x1c>)
 8014230:	2300      	movs	r3, #0
 8014232:	4605      	mov	r5, r0
 8014234:	4608      	mov	r0, r1
 8014236:	6023      	str	r3, [r4, #0]
 8014238:	f7f3 f85f 	bl	80072fa <_close>
 801423c:	1c43      	adds	r3, r0, #1
 801423e:	d102      	bne.n	8014246 <_close_r+0x1a>
 8014240:	6823      	ldr	r3, [r4, #0]
 8014242:	b103      	cbz	r3, 8014246 <_close_r+0x1a>
 8014244:	602b      	str	r3, [r5, #0]
 8014246:	bd38      	pop	{r3, r4, r5, pc}
 8014248:	20024154 	.word	0x20024154

0801424c <_fstat_r>:
 801424c:	b538      	push	{r3, r4, r5, lr}
 801424e:	4c07      	ldr	r4, [pc, #28]	; (801426c <_fstat_r+0x20>)
 8014250:	2300      	movs	r3, #0
 8014252:	4605      	mov	r5, r0
 8014254:	4608      	mov	r0, r1
 8014256:	4611      	mov	r1, r2
 8014258:	6023      	str	r3, [r4, #0]
 801425a:	f7f3 f85a 	bl	8007312 <_fstat>
 801425e:	1c43      	adds	r3, r0, #1
 8014260:	d102      	bne.n	8014268 <_fstat_r+0x1c>
 8014262:	6823      	ldr	r3, [r4, #0]
 8014264:	b103      	cbz	r3, 8014268 <_fstat_r+0x1c>
 8014266:	602b      	str	r3, [r5, #0]
 8014268:	bd38      	pop	{r3, r4, r5, pc}
 801426a:	bf00      	nop
 801426c:	20024154 	.word	0x20024154

08014270 <_isatty_r>:
 8014270:	b538      	push	{r3, r4, r5, lr}
 8014272:	4c06      	ldr	r4, [pc, #24]	; (801428c <_isatty_r+0x1c>)
 8014274:	2300      	movs	r3, #0
 8014276:	4605      	mov	r5, r0
 8014278:	4608      	mov	r0, r1
 801427a:	6023      	str	r3, [r4, #0]
 801427c:	f7f3 f859 	bl	8007332 <_isatty>
 8014280:	1c43      	adds	r3, r0, #1
 8014282:	d102      	bne.n	801428a <_isatty_r+0x1a>
 8014284:	6823      	ldr	r3, [r4, #0]
 8014286:	b103      	cbz	r3, 801428a <_isatty_r+0x1a>
 8014288:	602b      	str	r3, [r5, #0]
 801428a:	bd38      	pop	{r3, r4, r5, pc}
 801428c:	20024154 	.word	0x20024154

08014290 <_lseek_r>:
 8014290:	b538      	push	{r3, r4, r5, lr}
 8014292:	4c07      	ldr	r4, [pc, #28]	; (80142b0 <_lseek_r+0x20>)
 8014294:	4605      	mov	r5, r0
 8014296:	4608      	mov	r0, r1
 8014298:	4611      	mov	r1, r2
 801429a:	2200      	movs	r2, #0
 801429c:	6022      	str	r2, [r4, #0]
 801429e:	461a      	mov	r2, r3
 80142a0:	f7f3 f852 	bl	8007348 <_lseek>
 80142a4:	1c43      	adds	r3, r0, #1
 80142a6:	d102      	bne.n	80142ae <_lseek_r+0x1e>
 80142a8:	6823      	ldr	r3, [r4, #0]
 80142aa:	b103      	cbz	r3, 80142ae <_lseek_r+0x1e>
 80142ac:	602b      	str	r3, [r5, #0]
 80142ae:	bd38      	pop	{r3, r4, r5, pc}
 80142b0:	20024154 	.word	0x20024154

080142b4 <memmove>:
 80142b4:	4288      	cmp	r0, r1
 80142b6:	b510      	push	{r4, lr}
 80142b8:	eb01 0302 	add.w	r3, r1, r2
 80142bc:	d807      	bhi.n	80142ce <memmove+0x1a>
 80142be:	1e42      	subs	r2, r0, #1
 80142c0:	4299      	cmp	r1, r3
 80142c2:	d00a      	beq.n	80142da <memmove+0x26>
 80142c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80142c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80142cc:	e7f8      	b.n	80142c0 <memmove+0xc>
 80142ce:	4283      	cmp	r3, r0
 80142d0:	d9f5      	bls.n	80142be <memmove+0xa>
 80142d2:	1881      	adds	r1, r0, r2
 80142d4:	1ad2      	subs	r2, r2, r3
 80142d6:	42d3      	cmn	r3, r2
 80142d8:	d100      	bne.n	80142dc <memmove+0x28>
 80142da:	bd10      	pop	{r4, pc}
 80142dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80142e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80142e4:	e7f7      	b.n	80142d6 <memmove+0x22>

080142e6 <__malloc_lock>:
 80142e6:	4770      	bx	lr

080142e8 <__malloc_unlock>:
 80142e8:	4770      	bx	lr

080142ea <_realloc_r>:
 80142ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142ec:	4607      	mov	r7, r0
 80142ee:	4614      	mov	r4, r2
 80142f0:	460e      	mov	r6, r1
 80142f2:	b921      	cbnz	r1, 80142fe <_realloc_r+0x14>
 80142f4:	4611      	mov	r1, r2
 80142f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80142fa:	f7ff bd67 	b.w	8013dcc <_malloc_r>
 80142fe:	b922      	cbnz	r2, 801430a <_realloc_r+0x20>
 8014300:	f7ff fd16 	bl	8013d30 <_free_r>
 8014304:	4625      	mov	r5, r4
 8014306:	4628      	mov	r0, r5
 8014308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801430a:	f000 f827 	bl	801435c <_malloc_usable_size_r>
 801430e:	42a0      	cmp	r0, r4
 8014310:	d20f      	bcs.n	8014332 <_realloc_r+0x48>
 8014312:	4621      	mov	r1, r4
 8014314:	4638      	mov	r0, r7
 8014316:	f7ff fd59 	bl	8013dcc <_malloc_r>
 801431a:	4605      	mov	r5, r0
 801431c:	2800      	cmp	r0, #0
 801431e:	d0f2      	beq.n	8014306 <_realloc_r+0x1c>
 8014320:	4631      	mov	r1, r6
 8014322:	4622      	mov	r2, r4
 8014324:	f7fb fffc 	bl	8010320 <memcpy>
 8014328:	4631      	mov	r1, r6
 801432a:	4638      	mov	r0, r7
 801432c:	f7ff fd00 	bl	8013d30 <_free_r>
 8014330:	e7e9      	b.n	8014306 <_realloc_r+0x1c>
 8014332:	4635      	mov	r5, r6
 8014334:	e7e7      	b.n	8014306 <_realloc_r+0x1c>
	...

08014338 <_read_r>:
 8014338:	b538      	push	{r3, r4, r5, lr}
 801433a:	4c07      	ldr	r4, [pc, #28]	; (8014358 <_read_r+0x20>)
 801433c:	4605      	mov	r5, r0
 801433e:	4608      	mov	r0, r1
 8014340:	4611      	mov	r1, r2
 8014342:	2200      	movs	r2, #0
 8014344:	6022      	str	r2, [r4, #0]
 8014346:	461a      	mov	r2, r3
 8014348:	f7f2 ff9e 	bl	8007288 <_read>
 801434c:	1c43      	adds	r3, r0, #1
 801434e:	d102      	bne.n	8014356 <_read_r+0x1e>
 8014350:	6823      	ldr	r3, [r4, #0]
 8014352:	b103      	cbz	r3, 8014356 <_read_r+0x1e>
 8014354:	602b      	str	r3, [r5, #0]
 8014356:	bd38      	pop	{r3, r4, r5, pc}
 8014358:	20024154 	.word	0x20024154

0801435c <_malloc_usable_size_r>:
 801435c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014360:	1f18      	subs	r0, r3, #4
 8014362:	2b00      	cmp	r3, #0
 8014364:	bfbc      	itt	lt
 8014366:	580b      	ldrlt	r3, [r1, r0]
 8014368:	18c0      	addlt	r0, r0, r3
 801436a:	4770      	bx	lr

0801436c <_init>:
 801436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801436e:	bf00      	nop
 8014370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014372:	bc08      	pop	{r3}
 8014374:	469e      	mov	lr, r3
 8014376:	4770      	bx	lr

08014378 <_fini>:
 8014378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801437a:	bf00      	nop
 801437c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801437e:	bc08      	pop	{r3}
 8014380:	469e      	mov	lr, r3
 8014382:	4770      	bx	lr
