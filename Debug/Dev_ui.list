
Dev_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a74  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe8  08014c78  08014c78  00024c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015c60  08015c60  00030368  2**0
                  CONTENTS
  4 .ARM          00000008  08015c60  08015c60  00025c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015c68  08015c68  00030368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015c68  08015c68  00025c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015c6c  08015c6c  00025c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  08015c70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00023df0  20000368  08015fd8  00030368  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20024158  08015fd8  00034158  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cf62  00000000  00000000  00030396  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f9e  00000000  00000000  0005d2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002240  00000000  00000000  00062298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002008  00000000  00000000  000644d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006ff8  00000000  00000000  000664e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c29d  00000000  00000000  0006d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011ade2  00000000  00000000  00089775  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a4557  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2a8  00000000  00000000  001a45d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000368 	.word	0x20000368
 800021c:	00000000 	.word	0x00000000
 8000220:	08014c5c 	.word	0x08014c5c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000036c 	.word	0x2000036c
 800023c:	08014c5c 	.word	0x08014c5c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__reverse8bit>:
#define SWAP_VARS(A, B) do { (A) ^= (B); (B) ^= (A); (A) ^= (B); } while (0)


#if (!SMLCD_FLUSH_LUT)
// Reverse bits order in byte
__STATIC_INLINE uint8_t __reverse8bit(uint8_t byte) {
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
#if 1
	// Using ARM RBIT instruction
	// Since it operates with 32-bit values only, result must be shifted by 24 bits to the right
	return (uint8_t)(__RBIT(byte) >> 24);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	fa93 f3a3 	rbit	r3, r3
 8000604:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	0e1b      	lsrs	r3, r3, #24
 800060a:	b2db      	uxtb	r3, r3
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;

	return byte;
#endif
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <SMLCD_InitGPIO>:
#endif // SMLCD_FLUSH_LUT


// Initialize display control GPIO pins
void SMLCD_InitGPIO(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	//RCC->AHB2ENR |= SMLCD_GPIO_PERIPH;

	// Configure DISP pin
	//GPIO_set_mode(SMLCD_DISP_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_DISP_PIN);
	//GPIO_out_cfg(SMLCD_DISP_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_DISP_PIN);
	SMLCD_DISP_L;
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000622:	f008 fbff 	bl	8008e24 <HAL_GPIO_WritePin>

	// Configure SCS pin
	//GPIO_set_mode(SMLCD_SCS_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_SCS_PIN);
	//GPIO_out_cfg(SMLCD_SCS_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_SCS_PIN);
	SMLCD_SCS_L;
 8000626:	2200      	movs	r2, #0
 8000628:	2110      	movs	r1, #16
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <SMLCD_InitGPIO+0x38>)
 800062c:	f008 fbfa 	bl	8008e24 <HAL_GPIO_WritePin>
	LCD_EXCOMM_L;
 8000630:	2200      	movs	r2, #0
 8000632:	2101      	movs	r1, #1
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000636:	f008 fbf5 	bl	8008e24 <HAL_GPIO_WritePin>
	LCD_FRONTLIGHT_H;
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <SMLCD_InitGPIO+0x3c>)
 8000642:	f008 fbef 	bl	8008e24 <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022400 	.word	0x40022400
 8000650:	40021000 	.word	0x40021000
 8000654:	40021c00 	.word	0x40021c00

08000658 <SMLCD_Init>:

// Initialize display
// note: SPI and GPIO must be initialized before calling this function
void SMLCD_Init(SPI_HandleTypeDef hspi) {
 8000658:	b084      	sub	sp, #16
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
 800065e:	f107 0c08 	add.w	ip, r7, #8
 8000662:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Set default drawing mode
	LCD_PixelMode = LCD_PSET;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <SMLCD_Init+0x38>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	SMLCD_SPI_PORT = hspi;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <SMLCD_Init+0x3c>)
 800066e:	4618      	mov	r0, r3
 8000670:	f107 0108 	add.w	r1, r7, #8
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	461a      	mov	r2, r3
 8000678:	f010 f972 	bl	8010960 <memcpy>

	// Set initial image orientation
	SMLCD_Orientation(LCD_ORIENT_NORMAL);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 f94d 	bl	800091c <SMLCD_Orientation>
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800068a:	b004      	add	sp, #16
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20010338 	.word	0x20010338
 8000694:	20010340 	.word	0x20010340

08000698 <SMLCD_Clear>:

// Clear display memory (clear screen)
void SMLCD_Clear(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	// Send "Clear Screen" command
	uint8_t sendBytes[2];
	SMLCD_SCS_H;
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <SMLCD_Clear+0x38>)
 80006a4:	f008 fbbe 	bl	8008e24 <HAL_GPIO_WritePin>
	sendBytes[0]=SMLCD_CMD_CLS;
 80006a8:	2320      	movs	r3, #32
 80006aa:	713b      	strb	r3, [r7, #4]
	sendBytes[1]=SMLCD_CMD_NOP;
 80006ac:	2300      	movs	r3, #0
 80006ae:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, sendBytes, sizeof(sendBytes), 100);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	2202      	movs	r2, #2
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <SMLCD_Clear+0x3c>)
 80006b8:	f00a ff5e 	bl	800b578 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_CLS, 1, 100);
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_CLS);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <SMLCD_Clear+0x38>)
 80006c2:	f008 fbaf 	bl	8008e24 <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	20010340 	.word	0x20010340

080006d8 <SMLCD_Flush>:
	SMLCD_SCS_L;
}
#endif // SMLCD_VCOM_SOFT

// Send vRAM buffer into display
void SMLCD_Flush(void) {
 80006d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006dc:	b08a      	sub	sp, #40	; 0x28
 80006de:	af00      	add	r7, sp, #0
 80006e0:	466b      	mov	r3, sp
 80006e2:	4698      	mov	r8, r3
	int commandByte=1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
	int lineByte=1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61fb      	str	r3, [r7, #28]
	int lineAmount=SCR_H;
 80006ec:	23f0      	movs	r3, #240	; 0xf0
 80006ee:	61bb      	str	r3, [r7, #24]
	int nopBytesPerLine= 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
	int dataBytesPerLine=SCR_W/8;
 80006f4:	2332      	movs	r3, #50	; 0x32
 80006f6:	613b      	str	r3, [r7, #16]
	int finalNOPByte=1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
	uint8_t transmitBuffer[commandByte + lineByte+nopBytesPerLine+dataBytesPerLine + finalNOPByte];
 80006fc:	6a3a      	ldr	r2, [r7, #32]
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	441a      	add	r2, r3
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	441a      	add	r2, r3
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	441a      	add	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	18d6      	adds	r6, r2, r3
 800070e:	1e73      	subs	r3, r6, #1
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4633      	mov	r3, r6
 8000714:	4619      	mov	r1, r3
 8000716:	f04f 0200 	mov.w	r2, #0
 800071a:	f04f 0300 	mov.w	r3, #0
 800071e:	f04f 0400 	mov.w	r4, #0
 8000722:	00d4      	lsls	r4, r2, #3
 8000724:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000728:	00cb      	lsls	r3, r1, #3
 800072a:	4633      	mov	r3, r6
 800072c:	4619      	mov	r1, r3
 800072e:	f04f 0200 	mov.w	r2, #0
 8000732:	f04f 0300 	mov.w	r3, #0
 8000736:	f04f 0400 	mov.w	r4, #0
 800073a:	00d4      	lsls	r4, r2, #3
 800073c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000740:	00cb      	lsls	r3, r1, #3
 8000742:	4633      	mov	r3, r6
 8000744:	3307      	adds	r3, #7
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	ebad 0d03 	sub.w	sp, sp, r3
 800074e:	466b      	mov	r3, sp
 8000750:	3300      	adds	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
	memset(transmitBuffer,0x0,sizeof(transmitBuffer));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4632      	mov	r2, r6
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f010 f90b 	bl	8010976 <memset>
	#if 1

	register uint8_t *ptr = vRAM;
 8000760:	4d69      	ldr	r5, [pc, #420]	; (8000908 <SMLCD_Flush+0x230>)
	register uint8_t line = 0;
 8000762:	2400      	movs	r4, #0
	register uint32_t idx;
	int bufferCounter=1;
 8000764:	2301      	movs	r3, #1
 8000766:	603b      	str	r3, [r7, #0]
	int x=0;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24

	// Send "Write Line" command
	transmitBuffer[0]=SMLCD_CMD_WRITE;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2288      	movs	r2, #136	; 0x88
 8000770:	701a      	strb	r2, [r3, #0]
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE);
	switch (lcd_orientation) {
 8000772:	4b66      	ldr	r3, [pc, #408]	; (800090c <SMLCD_Flush+0x234>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b04      	cmp	r3, #4
 8000778:	d03b      	beq.n	80007f2 <SMLCD_Flush+0x11a>
 800077a:	2b08      	cmp	r3, #8
 800077c:	d05f      	beq.n	800083e <SMLCD_Flush+0x166>
 800077e:	2b02      	cmp	r3, #2
 8000780:	f040 8084 	bne.w	800088c <SMLCD_Flush+0x1b4>
		case LCD_ORIENT_CW:
			line = SCR_H + 1;
 8000784:	24f1      	movs	r4, #241	; 0xf1
			while (--line > 0) {
 8000786:	e02f      	b.n	80007e8 <SMLCD_Flush+0x110>
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2288      	movs	r2, #136	; 0x88
 800078c:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4622      	mov	r2, r4
 8000796:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000798:	2302      	movs	r3, #2
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
 800079c:	e009      	b.n	80007b2 <SMLCD_Flush+0xda>
					transmitBuffer[x]=*ptr;
 800079e:	7829      	ldrb	r1, [r5, #0]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a4:	4413      	add	r3, r2
 80007a6:	460a      	mov	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
					ptr++;
 80007aa:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	3301      	adds	r3, #1
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	2b33      	cmp	r3, #51	; 0x33
 80007b6:	ddf2      	ble.n	800079e <SMLCD_Flush+0xc6>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80007c8:	2201      	movs	r2, #1
 80007ca:	2110      	movs	r1, #16
 80007cc:	4850      	ldr	r0, [pc, #320]	; (8000910 <SMLCD_Flush+0x238>)
 80007ce:	f008 fb29 	bl	8008e24 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	b2b2      	uxth	r2, r6
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	484e      	ldr	r0, [pc, #312]	; (8000914 <SMLCD_Flush+0x23c>)
 80007da:	f00a fecd 	bl	800b578 <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80007de:	2200      	movs	r2, #0
 80007e0:	2110      	movs	r1, #16
 80007e2:	484b      	ldr	r0, [pc, #300]	; (8000910 <SMLCD_Flush+0x238>)
 80007e4:	f008 fb1e 	bl	8008e24 <HAL_GPIO_WritePin>
			while (--line > 0) {
 80007e8:	1e63      	subs	r3, r4, #1
 80007ea:	b2dc      	uxtb	r4, r3
 80007ec:	2c00      	cmp	r4, #0
 80007ee:	d1cb      	bne.n	8000788 <SMLCD_Flush+0xb0>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80007f0:	e084      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_CCW:
			line = SCR_H + 1;
 80007f2:	24f1      	movs	r4, #241	; 0xf1
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 80007f4:	4d48      	ldr	r5, [pc, #288]	; (8000918 <SMLCD_Flush+0x240>)
			while (--line > 0) {
 80007f6:	e01d      	b.n	8000834 <SMLCD_Flush+0x15c>

				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 80007f8:	4620      	mov	r0, r4
 80007fa:	f7ff fef9 	bl	80005f0 <__reverse8bit>
 80007fe:	4603      	mov	r3, r0
 8000800:	4619      	mov	r1, r3
 8000802:	2364      	movs	r3, #100	; 0x64
 8000804:	2201      	movs	r2, #1
 8000806:	4843      	ldr	r0, [pc, #268]	; (8000914 <SMLCD_Flush+0x23c>)
 8000808:	f00a feb6 	bl	800b578 <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800080c:	2600      	movs	r6, #0
 800080e:	e009      	b.n	8000824 <SMLCD_Flush+0x14c>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 8000810:	462b      	mov	r3, r5
 8000812:	1e5d      	subs	r5, r3, #1
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	4619      	mov	r1, r3
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	2201      	movs	r2, #1
 800081c:	483d      	ldr	r0, [pc, #244]	; (8000914 <SMLCD_Flush+0x23c>)
 800081e:	f00a feab 	bl	800b578 <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000822:	3601      	adds	r6, #1
 8000824:	2e31      	cmp	r6, #49	; 0x31
 8000826:	d9f3      	bls.n	8000810 <SMLCD_Flush+0x138>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	2201      	movs	r2, #1
 800082c:	2100      	movs	r1, #0
 800082e:	4839      	ldr	r0, [pc, #228]	; (8000914 <SMLCD_Flush+0x23c>)
 8000830:	f00a fea2 	bl	800b578 <HAL_SPI_Transmit>
			while (--line > 0) {
 8000834:	1e63      	subs	r3, r4, #1
 8000836:	b2dc      	uxtb	r4, r3
 8000838:	2c00      	cmp	r4, #0
 800083a:	d1dd      	bne.n	80007f8 <SMLCD_Flush+0x120>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800083c:	e05e      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_180:
			line = 0;
 800083e:	2400      	movs	r4, #0
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 8000840:	4d35      	ldr	r5, [pc, #212]	; (8000918 <SMLCD_Flush+0x240>)
			while (line++ < SCR_H + 1) {
 8000842:	e01d      	b.n	8000880 <SMLCD_Flush+0x1a8>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 8000844:	4620      	mov	r0, r4
 8000846:	f7ff fed3 	bl	80005f0 <__reverse8bit>
 800084a:	4603      	mov	r3, r0
 800084c:	4619      	mov	r1, r3
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	2201      	movs	r2, #1
 8000852:	4830      	ldr	r0, [pc, #192]	; (8000914 <SMLCD_Flush+0x23c>)
 8000854:	f00a fe90 	bl	800b578 <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000858:	2600      	movs	r6, #0
 800085a:	e009      	b.n	8000870 <SMLCD_Flush+0x198>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 800085c:	462b      	mov	r3, r5
 800085e:	1e5d      	subs	r5, r3, #1
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	2201      	movs	r2, #1
 8000868:	482a      	ldr	r0, [pc, #168]	; (8000914 <SMLCD_Flush+0x23c>)
 800086a:	f00a fe85 	bl	800b578 <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800086e:	3601      	adds	r6, #1
 8000870:	2e31      	cmp	r6, #49	; 0x31
 8000872:	d9f3      	bls.n	800085c <SMLCD_Flush+0x184>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000874:	2364      	movs	r3, #100	; 0x64
 8000876:	2201      	movs	r2, #1
 8000878:	2100      	movs	r1, #0
 800087a:	4826      	ldr	r0, [pc, #152]	; (8000914 <SMLCD_Flush+0x23c>)
 800087c:	f00a fe7c 	bl	800b578 <HAL_SPI_Transmit>
			while (line++ < SCR_H + 1) {
 8000880:	4623      	mov	r3, r4
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	b2d4      	uxtb	r4, r2
 8000886:	2bf0      	cmp	r3, #240	; 0xf0
 8000888:	d9dc      	bls.n	8000844 <SMLCD_Flush+0x16c>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800088a:	e037      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_NORMAL:
		default:
			line = 0;
 800088c:	2400      	movs	r4, #0
			while (line++ < SCR_H + 1) {
 800088e:	e02f      	b.n	80008f0 <SMLCD_Flush+0x218>
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, ptr, SCR_W >> 3, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2288      	movs	r2, #136	; 0x88
 8000894:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4622      	mov	r2, r4
 800089e:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008a0:	2302      	movs	r3, #2
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
 80008a4:	e009      	b.n	80008ba <SMLCD_Flush+0x1e2>
					transmitBuffer[x]=*ptr;
 80008a6:	7829      	ldrb	r1, [r5, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	4413      	add	r3, r2
 80008ae:	460a      	mov	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
					ptr++;
 80008b2:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b6:	3301      	adds	r3, #1
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	2b33      	cmp	r3, #51	; 0x33
 80008be:	ddf2      	ble.n	80008a6 <SMLCD_Flush+0x1ce>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	480e      	ldr	r0, [pc, #56]	; (8000910 <SMLCD_Flush+0x238>)
 80008d6:	f008 faa5 	bl	8008e24 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	b2b2      	uxth	r2, r6
 80008de:	2364      	movs	r3, #100	; 0x64
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <SMLCD_Flush+0x23c>)
 80008e2:	f00a fe49 	bl	800b578 <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80008e6:	2200      	movs	r2, #0
 80008e8:	2110      	movs	r1, #16
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <SMLCD_Flush+0x238>)
 80008ec:	f008 fa9a 	bl	8008e24 <HAL_GPIO_WritePin>
			while (line++ < SCR_H + 1) {
 80008f0:	4623      	mov	r3, r4
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	b2d4      	uxtb	r4, r2
 80008f6:	2bf0      	cmp	r3, #240	; 0xf0
 80008f8:	d9ca      	bls.n	8000890 <SMLCD_Flush+0x1b8>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80008fa:	bf00      	nop
 80008fc:	46c5      	mov	sp, r8
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;

#endif
}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000908:	20000384 	.word	0x20000384
 800090c:	20000000 	.word	0x20000000
 8000910:	40021000 	.word	0x40021000
 8000914:	20010340 	.word	0x20010340
 8000918:	20003263 	.word	0x20003263

0800091c <SMLCD_Orientation>:

// Set screen orientation
// input:
//   orientation - one of LCD_ORIENT_xx values
void SMLCD_Orientation(uint8_t orientation) {
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	if (orientation & (LCD_ORIENT_CW | LCD_ORIENT_CCW)) {
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 0306 	and.w	r3, r3, #6
 800092c:	2b00      	cmp	r3, #0
 800092e:	d007      	beq.n	8000940 <SMLCD_Orientation+0x24>
		scr_width  = SCR_H;
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <SMLCD_Orientation+0x44>)
 8000932:	22f0      	movs	r2, #240	; 0xf0
 8000934:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_W;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <SMLCD_Orientation+0x48>)
 8000938:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800093c:	801a      	strh	r2, [r3, #0]
 800093e:	e006      	b.n	800094e <SMLCD_Orientation+0x32>
	} else {
		scr_width  = SCR_W;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <SMLCD_Orientation+0x44>)
 8000942:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000946:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_H;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SMLCD_Orientation+0x48>)
 800094a:	22f0      	movs	r2, #240	; 0xf0
 800094c:	801a      	strh	r2, [r3, #0]
	}
	lcd_orientation = orientation;
 800094e:	4a06      	ldr	r2, [pc, #24]	; (8000968 <SMLCD_Orientation+0x4c>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	7013      	strb	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	2001033a 	.word	0x2001033a
 8000964:	2001033c 	.word	0x2001033c
 8000968:	20000000 	.word	0x20000000

0800096c <LCD_Clear>:

// Clear the vRAM memory
// note: size of video buffer must be a multiple of 4
void LCD_Clear(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
#if 1
	// This variant can be faster, speed depends on libraries used
	// But also needs include of "string.h"
	//memset(vRAM, 0x0, (sizeof(vRAM) >> 2));
	memset(vRAM, 0xFFFFFFFF, sizeof(vRAM));
 8000970:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <LCD_Clear+0x18>)
 800097a:	f00f fffc 	bl	8010976 <memset>

	while (i--) {
		*ptr++ = 0xFFFFFFFF;
	}
#endif
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000384 	.word	0x20000384

08000988 <LCD_Pixel>:
// input:
//   X, Y - coordinates of pixel
// note: value of LCD_PixelMode will be used as a drawing mode of a pixel
// note: X and Y coordinates are declared as "register uint32_t" for performance
//       for other compilers/CPUs this can/or should be changed to other type (16-bit)
void LCD_Pixel(register uint32_t X, register uint32_t Y) {
 8000988:	b4b0      	push	{r4, r5, r7}
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	460a      	mov	r2, r1
	register uint32_t offset;
	register uint8_t bpos;

#if (SMLCD_PIXEL_METHOD)
	switch (lcd_orientation) {
 8000990:	4928      	ldr	r1, [pc, #160]	; (8000a34 <LCD_Pixel+0xac>)
 8000992:	7809      	ldrb	r1, [r1, #0]
 8000994:	2904      	cmp	r1, #4
 8000996:	d009      	beq.n	80009ac <LCD_Pixel+0x24>
 8000998:	2908      	cmp	r1, #8
 800099a:	d002      	beq.n	80009a2 <LCD_Pixel+0x1a>
 800099c:	2902      	cmp	r1, #2
 800099e:	d00d      	beq.n	80009bc <LCD_Pixel+0x34>
		case LCD_ORIENT_CW:
			SWAP_VARS(X, Y);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 80009a0:	e010      	b.n	80009c4 <LCD_Pixel+0x3c>
			X = SCR_W - 1 - X;
 80009a2:	f240 118f 	movw	r1, #399	; 0x18f
 80009a6:	1ac9      	subs	r1, r1, r3
 80009a8:	460b      	mov	r3, r1
			break;
 80009aa:	e00b      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009ac:	4053      	eors	r3, r2
 80009ae:	405a      	eors	r2, r3
 80009b0:	4053      	eors	r3, r2
			X = SCR_W - 1 - X;
 80009b2:	f240 118f 	movw	r1, #399	; 0x18f
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	460b      	mov	r3, r1
			break;
 80009ba:	e003      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009bc:	4053      	eors	r3, r2
 80009be:	405a      	eors	r2, r3
 80009c0:	4053      	eors	r3, r2
			break;
 80009c2:	bf00      	nop
		X = SCR_W - 1 - X;
	}
#endif

	// Offset in video buffer
	offset = ((Y * SCR_W) + X) >> 3;
 80009c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80009c8:	fb01 f202 	mul.w	r2, r1, r2
 80009cc:	441a      	add	r2, r3
 80009ce:	08d4      	lsrs	r4, r2, #3

#if (SMLCD_PIXEL_SAFE)
	// Ensure offset is inside of video buffer
	if (offset > ((SCR_W * SCR_H) >> 3) - 1) {
 80009d0:	f642 62df 	movw	r2, #11999	; 0x2edf
 80009d4:	4294      	cmp	r4, r2
 80009d6:	d829      	bhi.n	8000a2c <LCD_Pixel+0xa4>
		return;
	}
#endif // SMLCD_PIXEL_SAFE

	// Bit position in byte
	bpos = X & 0x07;
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	b2dd      	uxtb	r5, r3
			break;
	}
#else // SMLCD_USE_BITBAND
	// Using access via array

	switch (LCD_PixelMode) {
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <LCD_Pixel+0xb0>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d002      	beq.n	80009ee <LCD_Pixel+0x66>
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d00a      	beq.n	8000a02 <LCD_Pixel+0x7a>
 80009ec:	e013      	b.n	8000a16 <LCD_Pixel+0x8e>
		case LCD_PRES:
			vRAM[offset] |= LUT_PRST[bpos];
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <LCD_Pixel+0xb4>)
 80009f0:	5d1a      	ldrb	r2, [r3, r4]
 80009f2:	4629      	mov	r1, r5
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <LCD_Pixel+0xb8>)
 80009f6:	5c5b      	ldrb	r3, [r3, r1]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <LCD_Pixel+0xb4>)
 80009fe:	551a      	strb	r2, [r3, r4]
			break;
 8000a00:	e015      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PINV:
			vRAM[offset] ^= LUT_PRST[bpos];
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a04:	5d1a      	ldrb	r2, [r3, r4]
 8000a06:	4629      	mov	r1, r5
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <LCD_Pixel+0xb8>)
 8000a0a:	5c5b      	ldrb	r3, [r3, r1]
 8000a0c:	4053      	eors	r3, r2
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a12:	551a      	strb	r2, [r3, r4]
			break;
 8000a14:	e00b      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PSET:
		default:
			vRAM[offset] &= LUT_PSET[bpos];
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a18:	5d1a      	ldrb	r2, [r3, r4]
 8000a1a:	4629      	mov	r1, r5
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <LCD_Pixel+0xbc>)
 8000a1e:	5c5b      	ldrb	r3, [r3, r1]
 8000a20:	4013      	ands	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a26:	551a      	strb	r2, [r3, r4]
			break;
 8000a28:	bf00      	nop
 8000a2a:	e000      	b.n	8000a2e <LCD_Pixel+0xa6>
		return;
 8000a2c:	bf00      	nop
	}
#endif // SMLCD_USE_BITBAND
}
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bcb0      	pop	{r4, r5, r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20010338 	.word	0x20010338
 8000a3c:	20000384 	.word	0x20000384
 8000a40:	080151d4 	.word	0x080151d4
 8000a44:	080151cc 	.word	0x080151cc

08000a48 <LCD_VLineInt>:
// Optimized vertical line drawing (without regard of screen rotation)
// input:
//   X - horizontal coordinate
//   Y - vertical coordinate
//   H - line height
static void LCD_VLineInt(uint16_t X, uint16_t Y, uint16_t H) {
 8000a48:	b4b0      	push	{r4, r5, r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
 8000a52:	460b      	mov	r3, r1
 8000a54:	80bb      	strh	r3, [r7, #4]
 8000a56:	4613      	mov	r3, r2
 8000a58:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a60:	fb02 f203 	mul.w	r2, r2, r3
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	4413      	add	r3, r2
 8000a68:	10db      	asrs	r3, r3, #3
 8000a6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <LCD_VLineInt+0xa0>)
 8000a6c:	189c      	adds	r4, r3, r2
	register uint8_t mask;

	// Draw line
	X &= 0x07;
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	80fb      	strh	r3, [r7, #6]
	switch (LCD_PixelMode) {
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <LCD_VLineInt+0xa4>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d002      	beq.n	8000a84 <LCD_VLineInt+0x3c>
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d00f      	beq.n	8000aa2 <LCD_VLineInt+0x5a>
 8000a82:	e01d      	b.n	8000ac0 <LCD_VLineInt+0x78>
		case LCD_PRES:
			mask = LUT_PRST[X];
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000a88:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000a8a:	e004      	b.n	8000a96 <LCD_VLineInt+0x4e>
				*ptr |= mask;
 8000a8c:	7823      	ldrb	r3, [r4, #0]
 8000a8e:	432b      	orrs	r3, r5
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000a94:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000a96:	887b      	ldrh	r3, [r7, #2]
 8000a98:	1e5a      	subs	r2, r3, #1
 8000a9a:	807a      	strh	r2, [r7, #2]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f5      	bne.n	8000a8c <LCD_VLineInt+0x44>
			}
			break;
 8000aa0:	e01d      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PINV:
			mask = LUT_PRST[X];
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000aa6:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000aa8:	e004      	b.n	8000ab4 <LCD_VLineInt+0x6c>
				*ptr ^= mask;
 8000aaa:	7823      	ldrb	r3, [r4, #0]
 8000aac:	406b      	eors	r3, r5
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ab2:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	807a      	strh	r2, [r7, #2]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f5      	bne.n	8000aaa <LCD_VLineInt+0x62>
			}
			break;
 8000abe:	e00e      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PSET:
		default:
			mask = LUT_PSET[X];
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <LCD_VLineInt+0xac>)
 8000ac4:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000ac6:	e004      	b.n	8000ad2 <LCD_VLineInt+0x8a>
				*ptr &= mask;
 8000ac8:	7823      	ldrb	r3, [r4, #0]
 8000aca:	402b      	ands	r3, r5
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ad0:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	807a      	strh	r2, [r7, #2]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1f5      	bne.n	8000ac8 <LCD_VLineInt+0x80>
			}
			break;
 8000adc:	bf00      	nop
	}
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bcb0      	pop	{r4, r5, r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	20000384 	.word	0x20000384
 8000aec:	20010338 	.word	0x20010338
 8000af0:	080151d4 	.word	0x080151d4
 8000af4:	080151cc 	.word	0x080151cc

08000af8 <LCD_HLineInt>:
// Optimized draw horizontal line (without regard of screen rotation)
// input:
//   X - horizontal coordinate of line start
//   Y - vertical coordinate
//   W - line width
static void LCD_HLineInt(uint16_t X, uint16_t Y, uint16_t W) {
 8000af8:	b4f0      	push	{r4, r5, r6, r7}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
 8000b02:	460b      	mov	r3, r1
 8000b04:	80bb      	strh	r3, [r7, #4]
 8000b06:	4613      	mov	r3, r2
 8000b08:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000b0a:	88bb      	ldrh	r3, [r7, #4]
 8000b0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b10:	fb02 f203 	mul.w	r2, r2, r3
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	4413      	add	r3, r2
 8000b18:	10db      	asrs	r3, r3, #3
 8000b1a:	4a69      	ldr	r2, [pc, #420]	; (8000cc0 <LCD_HLineInt+0x1c8>)
 8000b1c:	189c      	adds	r4, r3, r2
	register uint8_t modulo = X & 0x07;
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	b2de      	uxtb	r6, r3
	// Look-up tables
	static const uint8_t LUT_B1[] = { 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80 };
	static const uint8_t LUT_B2[] = { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

	// First partial byte
	if (modulo) {
 8000b28:	2e00      	cmp	r6, #0
 8000b2a:	d03a      	beq.n	8000ba2 <LCD_HLineInt+0xaa>
		// Get bit mask for first partial byte
		modulo = 8 - modulo;
 8000b2c:	f1c6 0308 	rsb	r3, r6, #8
 8000b30:	b2de      	uxtb	r6, r3
		mask = LUT_B1[modulo];
 8000b32:	4632      	mov	r2, r6
 8000b34:	4b63      	ldr	r3, [pc, #396]	; (8000cc4 <LCD_HLineInt+0x1cc>)
 8000b36:	5c9d      	ldrb	r5, [r3, r2]

		if (modulo > W) {
 8000b38:	b2b3      	uxth	r3, r6
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d206      	bcs.n	8000b4e <LCD_HLineInt+0x56>
			// Trim bit mask if line will not go out from a current byte
			mask |= LUT_B2[modulo - W];
 8000b40:	4632      	mov	r2, r6
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	4a60      	ldr	r2, [pc, #384]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000b48:	5cd3      	ldrb	r3, [r2, r3]
 8000b4a:	432b      	orrs	r3, r5
 8000b4c:	b2dd      	uxtb	r5, r3
		}

		// Update first partial byte
		switch (LCD_PixelMode) {
 8000b4e:	4b5f      	ldr	r3, [pc, #380]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d002      	beq.n	8000b5c <LCD_HLineInt+0x64>
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d00a      	beq.n	8000b70 <LCD_HLineInt+0x78>
 8000b5a:	e013      	b.n	8000b84 <LCD_HLineInt+0x8c>
			case LCD_PRES:
				*ptr |= ~mask;
 8000b5c:	7823      	ldrb	r3, [r4, #0]
 8000b5e:	b25a      	sxtb	r2, r3
 8000b60:	b26b      	sxtb	r3, r5
 8000b62:	43db      	mvns	r3, r3
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	7023      	strb	r3, [r4, #0]
				break;
 8000b6e:	e00e      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000b70:	7823      	ldrb	r3, [r4, #0]
 8000b72:	b25a      	sxtb	r2, r3
 8000b74:	b26b      	sxtb	r3, r5
 8000b76:	43db      	mvns	r3, r3
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	4053      	eors	r3, r2
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	7023      	strb	r3, [r4, #0]
				break;
 8000b82:	e004      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PSET:
			default:
				*ptr &=  mask;
 8000b84:	7823      	ldrb	r3, [r4, #0]
 8000b86:	402b      	ands	r3, r5
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	7023      	strb	r3, [r4, #0]
				break;
 8000b8c:	bf00      	nop
		}

		// Line is over?
		if (modulo > W) {
 8000b8e:	b2b3      	uxth	r3, r6
 8000b90:	887a      	ldrh	r2, [r7, #2]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f0c0 808f 	bcc.w	8000cb6 <LCD_HLineInt+0x1be>
			return;
		}

		// Shift pointer to the next byte in line and decrease line height counter
		ptr++;
 8000b98:	3401      	adds	r4, #1
		W -= modulo;
 8000b9a:	b2b3      	uxth	r3, r6
 8000b9c:	887a      	ldrh	r2, [r7, #2]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	807b      	strh	r3, [r7, #2]
	}

	// Fill solid bytes
	if (W > 32) {
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	2b20      	cmp	r3, #32
 8000ba6:	d92c      	bls.n	8000c02 <LCD_HLineInt+0x10a>
		// Modify 32 pixels at once
		register uint32_t *ptr32 = (uint32_t *)ptr;
		switch (LCD_PixelMode) {
 8000ba8:	4b48      	ldr	r3, [pc, #288]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d003      	beq.n	8000bb8 <LCD_HLineInt+0xc0>
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d00e      	beq.n	8000bd2 <LCD_HLineInt+0xda>
 8000bb4:	e01a      	b.n	8000bec <LCD_HLineInt+0xf4>
			case LCD_PRES:
 8000bb6:	bf00      	nop
				do {
					*ptr32++ = 0xFFFFFFFF;
 8000bb8:	4623      	mov	r3, r4
 8000bba:	1d1c      	adds	r4, r3, #4
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	3b20      	subs	r3, #32
 8000bc6:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	2b1f      	cmp	r3, #31
 8000bcc:	d8f3      	bhi.n	8000bb6 <LCD_HLineInt+0xbe>
				break;
 8000bce:	e018      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PINV:
 8000bd0:	bf00      	nop
				do {
					*ptr32++ ^= 0xFFFFFFFF;
 8000bd2:	4623      	mov	r3, r4
 8000bd4:	1d1c      	adds	r4, r3, #4
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	43d2      	mvns	r2, r2
 8000bda:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bdc:	887b      	ldrh	r3, [r7, #2]
 8000bde:	3b20      	subs	r3, #32
 8000be0:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	2b1f      	cmp	r3, #31
 8000be6:	d8f3      	bhi.n	8000bd0 <LCD_HLineInt+0xd8>
				break;
 8000be8:	e00b      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PSET:
 8000bea:	bf00      	nop
			default:
				do {
					*ptr32++ = 0x00000000;
 8000bec:	4623      	mov	r3, r4
 8000bee:	1d1c      	adds	r4, r3, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	3b20      	subs	r3, #32
 8000bf8:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	2b1f      	cmp	r3, #31
 8000bfe:	d8f4      	bhi.n	8000bea <LCD_HLineInt+0xf2>
				break;
 8000c00:	bf00      	nop
		}
		ptr = (uint8_t *)ptr32;
	}
	if (W > 7) {
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	2b07      	cmp	r3, #7
 8000c06:	d92c      	bls.n	8000c62 <LCD_HLineInt+0x16a>
		// Modify full bytes (8 pixels at once)
		switch (LCD_PixelMode) {
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d003      	beq.n	8000c18 <LCD_HLineInt+0x120>
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d00d      	beq.n	8000c30 <LCD_HLineInt+0x138>
 8000c14:	e01a      	b.n	8000c4c <LCD_HLineInt+0x154>
			case LCD_PRES:
 8000c16:	bf00      	nop
				do {
					*ptr++ = 0xFF;
 8000c18:	4623      	mov	r3, r4
 8000c1a:	1c5c      	adds	r4, r3, #1
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	3b08      	subs	r3, #8
 8000c24:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d8f4      	bhi.n	8000c16 <LCD_HLineInt+0x11e>
				break;
 8000c2c:	e01a      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PINV:
 8000c2e:	bf00      	nop
				do {
					*ptr++ ^= 0xFF;
 8000c30:	4623      	mov	r3, r4
 8000c32:	1c5c      	adds	r4, r3, #1
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	43d2      	mvns	r2, r2
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	3b08      	subs	r3, #8
 8000c40:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d8f2      	bhi.n	8000c2e <LCD_HLineInt+0x136>
				break;
 8000c48:	e00c      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PSET:
 8000c4a:	bf00      	nop
			default:
				do {
					*ptr++ = 0x00;
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	1c5c      	adds	r4, r3, #1
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	3b08      	subs	r3, #8
 8000c58:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	d8f4      	bhi.n	8000c4a <LCD_HLineInt+0x152>
				break;
 8000c60:	e000      	b.n	8000c64 <LCD_HLineInt+0x16c>
		}
	}
 8000c62:	bf00      	nop

	// Last partial byte?
	if (W) {
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d026      	beq.n	8000cb8 <LCD_HLineInt+0x1c0>
		mask = LUT_B2[8 - W];
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	f1c3 0308 	rsb	r3, r3, #8
 8000c70:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000c72:	5cd5      	ldrb	r5, [r2, r3]
		switch (LCD_PixelMode) {
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d002      	beq.n	8000c82 <LCD_HLineInt+0x18a>
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d00a      	beq.n	8000c96 <LCD_HLineInt+0x19e>
 8000c80:	e013      	b.n	8000caa <LCD_HLineInt+0x1b2>
			case LCD_PRES:
				*ptr |= ~mask;
 8000c82:	7823      	ldrb	r3, [r4, #0]
 8000c84:	b25a      	sxtb	r2, r3
 8000c86:	b26b      	sxtb	r3, r5
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	7023      	strb	r3, [r4, #0]
				break;
 8000c94:	e010      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000c96:	7823      	ldrb	r3, [r4, #0]
 8000c98:	b25a      	sxtb	r2, r3
 8000c9a:	b26b      	sxtb	r3, r5
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	4053      	eors	r3, r2
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	7023      	strb	r3, [r4, #0]
				break;
 8000ca8:	e006      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PSET:
			default:
				*ptr &= mask;
 8000caa:	7823      	ldrb	r3, [r4, #0]
 8000cac:	402b      	ands	r3, r5
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	7023      	strb	r3, [r4, #0]
				break;
 8000cb2:	bf00      	nop
 8000cb4:	e000      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			return;
 8000cb6:	bf00      	nop
		}
	}
}
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	20000384 	.word	0x20000384
 8000cc4:	080151dc 	.word	0x080151dc
 8000cc8:	080151e4 	.word	0x080151e4
 8000ccc:	20010338 	.word	0x20010338

08000cd0 <LCD_HLine>:

// Draw horizontal line
// input:
//   X1, X2 - left and right horizontal coordinates
//   Y - vertical coordinate
void LCD_HLine(uint16_t X1, uint16_t X2, uint16_t Y) {
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	80bb      	strh	r3, [r7, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	807b      	strh	r3, [r7, #2]
	register uint16_t X;
	register uint16_t L;

	if (X1 > X2) {
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d905      	bls.n	8000cf6 <LCD_HLine+0x26>
		X = X2; L = X1 - X2;
 8000cea:	88bd      	ldrh	r5, [r7, #4]
 8000cec:	88fa      	ldrh	r2, [r7, #6]
 8000cee:	88bb      	ldrh	r3, [r7, #4]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b29c      	uxth	r4, r3
 8000cf4:	e004      	b.n	8000d00 <LCD_HLine+0x30>
	} else {
		X = X1; L = X2 - X1;
 8000cf6:	88fd      	ldrh	r5, [r7, #6]
 8000cf8:	88ba      	ldrh	r2, [r7, #4]
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	b29c      	uxth	r4, r3
	}
	L++;
 8000d00:	4623      	mov	r3, r4
 8000d02:	3301      	adds	r3, #1
 8000d04:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <LCD_HLine+0x9c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d00a      	beq.n	8000d24 <LCD_HLine+0x54>
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d013      	beq.n	8000d3a <LCD_HLine+0x6a>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d11f      	bne.n	8000d56 <LCD_HLine+0x86>
		case LCD_ORIENT_CW:
			LCD_VLineInt(Y, X, L);
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	4622      	mov	r2, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe93 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d22:	e01f      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_VLineInt(SCR_W - 1 - Y, X, L);
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4622      	mov	r2, r4
 8000d30:	4629      	mov	r1, r5
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fe88 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d38:	e014      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_180:
			LCD_HLineInt(SCR_W - X - L, Y, L);
 8000d3a:	462b      	mov	r3, r5
 8000d3c:	425b      	negs	r3, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	1b1b      	subs	r3, r3, r4
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	8879      	ldrh	r1, [r7, #2]
 8000d4c:	4622      	mov	r2, r4
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fed2 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d54:	e006      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_HLineInt(X, Y, L);
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	4622      	mov	r2, r4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f7ff fecb 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d62:	bf00      	nop
	}
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d6c:	20000000 	.word	0x20000000

08000d70 <LCD_VLine>:

// Draw vertical line
// input:
//   X - horizontal coordinate
//   Y1,Y2 - top and bottom vertical coordinates
void LCD_VLine(uint16_t X, uint16_t Y1, uint16_t Y2) {
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	80bb      	strh	r3, [r7, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	807b      	strh	r3, [r7, #2]
	register uint16_t Y;
	register uint16_t L;

	if (Y1 > Y2) {
 8000d82:	88ba      	ldrh	r2, [r7, #4]
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d905      	bls.n	8000d96 <LCD_VLine+0x26>
		Y = Y2; L = Y1 - Y2;
 8000d8a:	887d      	ldrh	r5, [r7, #2]
 8000d8c:	88ba      	ldrh	r2, [r7, #4]
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	b29c      	uxth	r4, r3
 8000d94:	e004      	b.n	8000da0 <LCD_VLine+0x30>
	} else {
		Y = Y1; L = Y2 - Y1;
 8000d96:	88bd      	ldrh	r5, [r7, #4]
 8000d98:	887a      	ldrh	r2, [r7, #2]
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	b29c      	uxth	r4, r3
	}
	L++;
 8000da0:	4623      	mov	r3, r4
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <LCD_VLine+0x9c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d00a      	beq.n	8000dc4 <LCD_VLine+0x54>
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d016      	beq.n	8000de0 <LCD_VLine+0x70>
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d11f      	bne.n	8000df6 <LCD_VLine+0x86>
		case LCD_ORIENT_CW:
			LCD_HLineInt(Y, X, L);
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	4622      	mov	r2, r4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	f7ff fe9b 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dc2:	e01f      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_HLineInt(SCR_W - Y - L, X, L);
 8000dc4:	462b      	mov	r3, r5
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	1b1b      	subs	r3, r3, r4
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	88f9      	ldrh	r1, [r7, #6]
 8000dd6:	4622      	mov	r2, r4
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fe8d 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dde:	e011      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_180:
			LCD_VLineInt(SCR_W - 1 - X, Y, L);
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000de6:	3301      	adds	r3, #1
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4622      	mov	r2, r4
 8000dec:	4629      	mov	r1, r5
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fe2a 	bl	8000a48 <LCD_VLineInt>
			break;
 8000df4:	e006      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_VLineInt(X, Y, L);
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	4622      	mov	r2, r4
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe23 	bl	8000a48 <LCD_VLineInt>
			break;
 8000e02:	bf00      	nop
	}
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0c:	20000000 	.word	0x20000000

08000e10 <LCD_Rect>:

// Draw rectangle
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Rect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4604      	mov	r4, r0
 8000e18:	4608      	mov	r0, r1
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4623      	mov	r3, r4
 8000e20:	80fb      	strh	r3, [r7, #6]
 8000e22:	4603      	mov	r3, r0
 8000e24:	80bb      	strh	r3, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	807b      	strh	r3, [r7, #2]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	803b      	strh	r3, [r7, #0]
	LCD_HLine(X1, X2, Y1);
 8000e2e:	88ba      	ldrh	r2, [r7, #4]
 8000e30:	8879      	ldrh	r1, [r7, #2]
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff4b 	bl	8000cd0 <LCD_HLine>
	LCD_HLine(X1, X2, Y2);
 8000e3a:	883a      	ldrh	r2, [r7, #0]
 8000e3c:	8879      	ldrh	r1, [r7, #2]
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff45 	bl	8000cd0 <LCD_HLine>
	if (Y1 > Y2) {
 8000e46:	88ba      	ldrh	r2, [r7, #4]
 8000e48:	883b      	ldrh	r3, [r7, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d90b      	bls.n	8000e66 <LCD_Rect+0x56>
		SWAP_VARS(Y1, Y2);
 8000e4e:	88ba      	ldrh	r2, [r7, #4]
 8000e50:	883b      	ldrh	r3, [r7, #0]
 8000e52:	4053      	eors	r3, r2
 8000e54:	80bb      	strh	r3, [r7, #4]
 8000e56:	883a      	ldrh	r2, [r7, #0]
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	4053      	eors	r3, r2
 8000e5c:	803b      	strh	r3, [r7, #0]
 8000e5e:	88ba      	ldrh	r2, [r7, #4]
 8000e60:	883b      	ldrh	r3, [r7, #0]
 8000e62:	4053      	eors	r3, r2
 8000e64:	80bb      	strh	r3, [r7, #4]
	}
	Y1++;
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	80bb      	strh	r3, [r7, #4]
	Y2--;
 8000e6c:	883b      	ldrh	r3, [r7, #0]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	803b      	strh	r3, [r7, #0]
	LCD_VLine(X1, Y1, Y2);
 8000e72:	883a      	ldrh	r2, [r7, #0]
 8000e74:	88b9      	ldrh	r1, [r7, #4]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff79 	bl	8000d70 <LCD_VLine>
	LCD_VLine(X2, Y1, Y2);
 8000e7e:	883a      	ldrh	r2, [r7, #0]
 8000e80:	88b9      	ldrh	r1, [r7, #4]
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff73 	bl	8000d70 <LCD_VLine>
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd90      	pop	{r4, r7, pc}
	...

08000e94 <LCD_FillRect>:
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
// note: doesn't check vRAM boundaries, so caller must respect
//       screen width and height while specifying X and Y coordinates
void LCD_FillRect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e94:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	80fb      	strh	r3, [r7, #6]
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	80bb      	strh	r3, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	803b      	strh	r3, [r7, #0]
	static const uint8_t LUT_B1[] = { 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01 };
	static const uint8_t LUT_B2[] = { 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF };

	if (X1 > X2) {
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d90b      	bls.n	8000ed4 <LCD_FillRect+0x40>
		SWAP_VARS(X1, X2);
 8000ebc:	88fa      	ldrh	r2, [r7, #6]
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	4053      	eors	r3, r2
 8000ec2:	80fb      	strh	r3, [r7, #6]
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4053      	eors	r3, r2
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	4053      	eors	r3, r2
 8000ed2:	80fb      	strh	r3, [r7, #6]
	}

	if (Y1 > Y2) {
 8000ed4:	88ba      	ldrh	r2, [r7, #4]
 8000ed6:	883b      	ldrh	r3, [r7, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d90b      	bls.n	8000ef4 <LCD_FillRect+0x60>
		SWAP_VARS(Y1, Y2);
 8000edc:	88ba      	ldrh	r2, [r7, #4]
 8000ede:	883b      	ldrh	r3, [r7, #0]
 8000ee0:	4053      	eors	r3, r2
 8000ee2:	80bb      	strh	r3, [r7, #4]
 8000ee4:	883a      	ldrh	r2, [r7, #0]
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	4053      	eors	r3, r2
 8000eea:	803b      	strh	r3, [r7, #0]
 8000eec:	88ba      	ldrh	r2, [r7, #4]
 8000eee:	883b      	ldrh	r3, [r7, #0]
 8000ef0:	4053      	eors	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
	}

	uint16_t dW;

	switch (lcd_orientation) {
 8000ef4:	4b95      	ldr	r3, [pc, #596]	; (800114c <LCD_FillRect+0x2b8>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d011      	beq.n	8000f20 <LCD_FillRect+0x8c>
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d002      	beq.n	8000f06 <LCD_FillRect+0x72>
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d032      	beq.n	8000f6a <LCD_FillRect+0xd6>
			SWAP_VARS(X1, Y1);
			SWAP_VARS(X2, Y2);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 8000f04:	e04a      	b.n	8000f9c <LCD_FillRect+0x108>
			dW = SCR_W - 1 - X2;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f16:	3301      	adds	r3, #1
 8000f18:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f1a:	897b      	ldrh	r3, [r7, #10]
 8000f1c:	80fb      	strh	r3, [r7, #6]
			break;
 8000f1e:	e03d      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f20:	88fa      	ldrh	r2, [r7, #6]
 8000f22:	88bb      	ldrh	r3, [r7, #4]
 8000f24:	4053      	eors	r3, r2
 8000f26:	80fb      	strh	r3, [r7, #6]
 8000f28:	88ba      	ldrh	r2, [r7, #4]
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	4053      	eors	r3, r2
 8000f2e:	80bb      	strh	r3, [r7, #4]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	4053      	eors	r3, r2
 8000f36:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	883b      	ldrh	r3, [r7, #0]
 8000f3c:	4053      	eors	r3, r2
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	883a      	ldrh	r2, [r7, #0]
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	4053      	eors	r3, r2
 8000f46:	803b      	strh	r3, [r7, #0]
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	883b      	ldrh	r3, [r7, #0]
 8000f4c:	4053      	eors	r3, r2
 8000f4e:	807b      	strh	r3, [r7, #2]
			dW = SCR_W - 1 - X2;
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f56:	3301      	adds	r3, #1
 8000f58:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f60:	3301      	adds	r3, #1
 8000f62:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f64:	897b      	ldrh	r3, [r7, #10]
 8000f66:	80fb      	strh	r3, [r7, #6]
			break;
 8000f68:	e018      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f6a:	88fa      	ldrh	r2, [r7, #6]
 8000f6c:	88bb      	ldrh	r3, [r7, #4]
 8000f6e:	4053      	eors	r3, r2
 8000f70:	80fb      	strh	r3, [r7, #6]
 8000f72:	88ba      	ldrh	r2, [r7, #4]
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	4053      	eors	r3, r2
 8000f78:	80bb      	strh	r3, [r7, #4]
 8000f7a:	88fa      	ldrh	r2, [r7, #6]
 8000f7c:	88bb      	ldrh	r3, [r7, #4]
 8000f7e:	4053      	eors	r3, r2
 8000f80:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	883b      	ldrh	r3, [r7, #0]
 8000f86:	4053      	eors	r3, r2
 8000f88:	807b      	strh	r3, [r7, #2]
 8000f8a:	883a      	ldrh	r2, [r7, #0]
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	4053      	eors	r3, r2
 8000f90:	803b      	strh	r3, [r7, #0]
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	883b      	ldrh	r3, [r7, #0]
 8000f96:	4053      	eors	r3, r2
 8000f98:	807b      	strh	r3, [r7, #2]
			break;
 8000f9a:	bf00      	nop
	}

	// Mask for first and last byte
	register uint8_t mask_fb = LUT_B1[X1 & 0x07];
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	4a6b      	ldr	r2, [pc, #428]	; (8001150 <LCD_FillRect+0x2bc>)
 8000fa4:	5cd5      	ldrb	r5, [r2, r3]
	register uint8_t mask_lb = LUT_B2[X2 & 0x07];
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	4a69      	ldr	r2, [pc, #420]	; (8001154 <LCD_FillRect+0x2c0>)
 8000fae:	f812 8003 	ldrb.w	r8, [r2, r3]

	// Offset in vRAM
	uint8_t *ptr_base = &vRAM[(((Y1 * SCR_W) + X1) >> 3)];
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000fb8:	fb02 f203 	mul.w	r2, r2, r3
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	10db      	asrs	r3, r3, #3
 8000fc2:	4a65      	ldr	r2, [pc, #404]	; (8001158 <LCD_FillRect+0x2c4>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

	// Line width in bytes
	dW = (X2 >> 3) - (X1 >> 3);
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	08db      	lsrs	r3, r3, #3
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	817b      	strh	r3, [r7, #10]

	if (dW) {
 8000fd8:	897b      	ldrh	r3, [r7, #10]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d071      	beq.n	80010c2 <LCD_FillRect+0x22e>
		// Multiple bytes
		register uint16_t cntr;
		register uint8_t *ptr;

		switch (LCD_PixelMode) {
 8000fde:	4b5f      	ldr	r3, [pc, #380]	; (800115c <LCD_FillRect+0x2c8>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d003      	beq.n	8000fee <LCD_FillRect+0x15a>
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d022      	beq.n	8001030 <LCD_FillRect+0x19c>
 8000fea:	e043      	b.n	8001074 <LCD_FillRect+0x1e0>
			case LCD_PRES:
 8000fec:	bf00      	nop
				do {
					cntr = dW;
 8000fee:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8000ff0:	68fc      	ldr	r4, [r7, #12]
					*ptr++ |= mask_fb;
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	1c5c      	adds	r4, r3, #1
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	432a      	orrs	r2, r5
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8000ffe:	e003      	b.n	8001008 <LCD_FillRect+0x174>
						*ptr++ = 0xFF;
 8001000:	4623      	mov	r3, r4
 8001002:	1c5c      	adds	r4, r3, #1
 8001004:	22ff      	movs	r2, #255	; 0xff
 8001006:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001008:	1e73      	subs	r3, r6, #1
 800100a:	b29e      	uxth	r6, r3
 800100c:	2e00      	cmp	r6, #0
 800100e:	d1f7      	bne.n	8001000 <LCD_FillRect+0x16c>
					};
					*ptr |= mask_lb;
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	ea48 0303 	orr.w	r3, r8, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3332      	adds	r3, #50	; 0x32
 800101e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001020:	88bb      	ldrh	r3, [r7, #4]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	80ba      	strh	r2, [r7, #4]
 8001026:	883a      	ldrh	r2, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8df      	bhi.n	8000fec <LCD_FillRect+0x158>
				break;
 800102c:	e087      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 800102e:	bf00      	nop
				do {
					cntr = dW;
 8001030:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001032:	68fc      	ldr	r4, [r7, #12]
					*ptr++ ^= mask_fb;
 8001034:	4623      	mov	r3, r4
 8001036:	1c5c      	adds	r4, r3, #1
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	406a      	eors	r2, r5
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001040:	e005      	b.n	800104e <LCD_FillRect+0x1ba>
						*ptr++ ^= 0xFF;
 8001042:	4623      	mov	r3, r4
 8001044:	1c5c      	adds	r4, r3, #1
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	43d2      	mvns	r2, r2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800104e:	1e73      	subs	r3, r6, #1
 8001050:	b29e      	uxth	r6, r3
 8001052:	2e00      	cmp	r6, #0
 8001054:	d1f5      	bne.n	8001042 <LCD_FillRect+0x1ae>
					};
					*ptr ^= mask_lb;
 8001056:	7823      	ldrb	r3, [r4, #0]
 8001058:	ea88 0303 	eor.w	r3, r8, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3332      	adds	r3, #50	; 0x32
 8001064:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	80ba      	strh	r2, [r7, #4]
 800106c:	883a      	ldrh	r2, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d8dd      	bhi.n	800102e <LCD_FillRect+0x19a>
				break;
 8001072:	e064      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 8001074:	43eb      	mvns	r3, r5
 8001076:	b2dd      	uxtb	r5, r3
				mask_lb = ~mask_lb;
 8001078:	ea6f 0308 	mvn.w	r3, r8
 800107c:	fa5f f883 	uxtb.w	r8, r3
				do {
					cntr = dW;
 8001080:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001082:	68fc      	ldr	r4, [r7, #12]
					*ptr++ &= mask_fb;
 8001084:	4623      	mov	r3, r4
 8001086:	1c5c      	adds	r4, r3, #1
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	402a      	ands	r2, r5
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001090:	e003      	b.n	800109a <LCD_FillRect+0x206>
						*ptr++ = 0x00;
 8001092:	4623      	mov	r3, r4
 8001094:	1c5c      	adds	r4, r3, #1
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800109a:	1e73      	subs	r3, r6, #1
 800109c:	b29e      	uxth	r6, r3
 800109e:	2e00      	cmp	r6, #0
 80010a0:	d1f7      	bne.n	8001092 <LCD_FillRect+0x1fe>
					};
					*ptr &= mask_lb;
 80010a2:	7823      	ldrb	r3, [r4, #0]
 80010a4:	ea08 0303 	and.w	r3, r8, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3332      	adds	r3, #50	; 0x32
 80010b0:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	80ba      	strh	r2, [r7, #4]
 80010b8:	883a      	ldrh	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d8e0      	bhi.n	8001080 <LCD_FillRect+0x1ec>
				break;
 80010be:	bf00      	nop
 80010c0:	e03d      	b.n	800113e <LCD_FillRect+0x2aa>
		}
	} else {
		// Single byte
		mask_fb &= mask_lb;
 80010c2:	ea05 0308 	and.w	r3, r5, r8
 80010c6:	b2dd      	uxtb	r5, r3

		switch (LCD_PixelMode) {
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <LCD_FillRect+0x2c8>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d003      	beq.n	80010d8 <LCD_FillRect+0x244>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d012      	beq.n	80010fa <LCD_FillRect+0x266>
 80010d4:	e021      	b.n	800111a <LCD_FillRect+0x286>
			case LCD_PRES:
 80010d6:	bf00      	nop
				do {
					*ptr_base |= mask_fb;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	432b      	orrs	r3, r5
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3332      	adds	r3, #50	; 0x32
 80010e8:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	80ba      	strh	r2, [r7, #4]
 80010f0:	883a      	ldrh	r2, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d8ef      	bhi.n	80010d6 <LCD_FillRect+0x242>
				break;
 80010f6:	e022      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 80010f8:	bf00      	nop
				do {
					*ptr_base ^= mask_fb;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	406b      	eors	r3, r5
 8001100:	b2da      	uxtb	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3332      	adds	r3, #50	; 0x32
 800110a:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	80ba      	strh	r2, [r7, #4]
 8001112:	883a      	ldrh	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8ef      	bhi.n	80010f8 <LCD_FillRect+0x264>
				break;
 8001118:	e011      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 800111a:	43eb      	mvns	r3, r5
 800111c:	b2dd      	uxtb	r5, r3
				do {
					*ptr_base &= mask_fb;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	402b      	ands	r3, r5
 8001124:	b2da      	uxtb	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3332      	adds	r3, #50	; 0x32
 800112e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	80ba      	strh	r2, [r7, #4]
 8001136:	883a      	ldrh	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f0      	bhi.n	800111e <LCD_FillRect+0x28a>
				break;
 800113c:	bf00      	nop
		}
	}
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000000 	.word	0x20000000
 8001150:	080151ec 	.word	0x080151ec
 8001154:	080151f4 	.word	0x080151f4
 8001158:	20000384 	.word	0x20000384
 800115c:	20010338 	.word	0x20010338

08001160 <LCD_Line>:

// Draw line
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Line(int16_t X1, int16_t Y1, int16_t X2, int16_t Y2) {
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	4603      	mov	r3, r0
 8001174:	80bb      	strh	r3, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	807b      	strh	r3, [r7, #2]
 800117a:	4613      	mov	r3, r2
 800117c:	803b      	strh	r3, [r7, #0]
	int16_t dX = X2 - X1;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	82bb      	strh	r3, [r7, #20]
	int16_t dY = Y2 - Y1;
 8001188:	883a      	ldrh	r2, [r7, #0]
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	827b      	strh	r3, [r7, #18]
	int16_t dXsym = (dX > 0) ? 1 : -1;
 8001192:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	dd01      	ble.n	800119e <LCD_Line+0x3e>
 800119a:	2301      	movs	r3, #1
 800119c:	e001      	b.n	80011a2 <LCD_Line+0x42>
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	823b      	strh	r3, [r7, #16]
	int16_t dYsym = (dY > 0) ? 1 : -1;
 80011a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dd01      	ble.n	80011b0 <LCD_Line+0x50>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e001      	b.n	80011b4 <LCD_Line+0x54>
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	81fb      	strh	r3, [r7, #14]

	if (dX == 0) {
 80011b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d106      	bne.n	80011cc <LCD_Line+0x6c>
		LCD_VLine(X1, Y1, Y2);
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	88b9      	ldrh	r1, [r7, #4]
 80011c2:	883a      	ldrh	r2, [r7, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fdd3 	bl	8000d70 <LCD_VLine>
		return;
 80011ca:	e08d      	b.n	80012e8 <LCD_Line+0x188>
	}
	if (dY == 0) {
 80011cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d106      	bne.n	80011e2 <LCD_Line+0x82>
		LCD_HLine(X1, X2, Y1);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	8879      	ldrh	r1, [r7, #2]
 80011d8:	88ba      	ldrh	r2, [r7, #4]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd78 	bl	8000cd0 <LCD_HLine>
		return;
 80011e0:	e082      	b.n	80012e8 <LCD_Line+0x188>
	}

	dX *= dXsym;
 80011e2:	8aba      	ldrh	r2, [r7, #20]
 80011e4:	8a3b      	ldrh	r3, [r7, #16]
 80011e6:	fb12 f303 	smulbb	r3, r2, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	82bb      	strh	r3, [r7, #20]
	dY *= dYsym;
 80011ee:	8a7a      	ldrh	r2, [r7, #18]
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	fb12 f303 	smulbb	r3, r2, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	827b      	strh	r3, [r7, #18]
	int16_t dX2 = dX << 1;
 80011fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	81bb      	strh	r3, [r7, #12]
	int16_t dY2 = dY << 1;
 8001202:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	817b      	strh	r3, [r7, #10]
	int16_t di;

	if (dX >= dY) {
 800120a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800120e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001212:	429a      	cmp	r2, r3
 8001214:	db30      	blt.n	8001278 <LCD_Line+0x118>
		di = dY2 - dX;
 8001216:	897a      	ldrh	r2, [r7, #10]
 8001218:	8abb      	ldrh	r3, [r7, #20]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	b29b      	uxth	r3, r3
 800121e:	82fb      	strh	r3, [r7, #22]
		while (X1 != X2) {
 8001220:	e023      	b.n	800126a <LCD_Line+0x10a>
			LCD_Pixel(X1, Y1);
 8001222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001226:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fbab 	bl	8000988 <LCD_Pixel>
			X1 += dXsym;
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	8a3b      	ldrh	r3, [r7, #16]
 8001236:	4413      	add	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	80fb      	strh	r3, [r7, #6]
			if (di < 0) {
 800123c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001240:	2b00      	cmp	r3, #0
 8001242:	da05      	bge.n	8001250 <LCD_Line+0xf0>
				di += dY2;
 8001244:	8afa      	ldrh	r2, [r7, #22]
 8001246:	897b      	ldrh	r3, [r7, #10]
 8001248:	4413      	add	r3, r2
 800124a:	b29b      	uxth	r3, r3
 800124c:	82fb      	strh	r3, [r7, #22]
 800124e:	e00c      	b.n	800126a <LCD_Line+0x10a>
			} else {
				di += dY2 - dX2;
 8001250:	897a      	ldrh	r2, [r7, #10]
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	b29a      	uxth	r2, r3
 8001258:	8afb      	ldrh	r3, [r7, #22]
 800125a:	4413      	add	r3, r2
 800125c:	b29b      	uxth	r3, r3
 800125e:	82fb      	strh	r3, [r7, #22]
				Y1 += dYsym;
 8001260:	88ba      	ldrh	r2, [r7, #4]
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	4413      	add	r3, r2
 8001266:	b29b      	uxth	r3, r3
 8001268:	80bb      	strh	r3, [r7, #4]
		while (X1 != X2) {
 800126a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800126e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001272:	429a      	cmp	r2, r3
 8001274:	d1d5      	bne.n	8001222 <LCD_Line+0xc2>
 8001276:	e02f      	b.n	80012d8 <LCD_Line+0x178>
			}
		}
	} else {
		di = dX2 - dY;
 8001278:	89ba      	ldrh	r2, [r7, #12]
 800127a:	8a7b      	ldrh	r3, [r7, #18]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	b29b      	uxth	r3, r3
 8001280:	82fb      	strh	r3, [r7, #22]
		while (Y1 != Y2) {
 8001282:	e023      	b.n	80012cc <LCD_Line+0x16c>
			LCD_Pixel(X1, Y1);
 8001284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001288:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fb7a 	bl	8000988 <LCD_Pixel>
			Y1 += dYsym;
 8001294:	88ba      	ldrh	r2, [r7, #4]
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	4413      	add	r3, r2
 800129a:	b29b      	uxth	r3, r3
 800129c:	80bb      	strh	r3, [r7, #4]
			if (di < 0) {
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	da05      	bge.n	80012b2 <LCD_Line+0x152>
				di += dX2;
 80012a6:	8afa      	ldrh	r2, [r7, #22]
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	82fb      	strh	r3, [r7, #22]
 80012b0:	e00c      	b.n	80012cc <LCD_Line+0x16c>
			} else {
				di += dX2 - dY2;
 80012b2:	89ba      	ldrh	r2, [r7, #12]
 80012b4:	897b      	ldrh	r3, [r7, #10]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	8afb      	ldrh	r3, [r7, #22]
 80012bc:	4413      	add	r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	82fb      	strh	r3, [r7, #22]
				X1 += dXsym;
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	8a3b      	ldrh	r3, [r7, #16]
 80012c6:	4413      	add	r3, r2
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	80fb      	strh	r3, [r7, #6]
		while (Y1 != Y2) {
 80012cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d1d5      	bne.n	8001284 <LCD_Line+0x124>
			}
		}
	}
	LCD_Pixel(X1, Y1);
 80012d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012dc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fb50 	bl	8000988 <LCD_Pixel>
}
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <LCD_PutChar>:
// input:
//   X,Y - character top left corner coordinates
//   chr - character to be drawn
//   font - pointer to font
// return: character width in pixels
uint8_t LCD_PutChar(uint16_t X, uint16_t Y, uint8_t chr, const Font_TypeDef *font) {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b088      	sub	sp, #32
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4603      	mov	r3, r0
 80012f8:	81fb      	strh	r3, [r7, #14]
 80012fa:	460b      	mov	r3, r1
 80012fc:	81bb      	strh	r3, [r7, #12]
 80012fe:	4613      	mov	r3, r2
 8001300:	72fb      	strb	r3, [r7, #11]
	uint8_t tmpCh;
	uint8_t bL;
	const uint8_t *pCh;

	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	7afa      	ldrb	r2, [r7, #11]
 8001308:	429a      	cmp	r2, r3
 800130a:	d304      	bcc.n	8001316 <LCD_PutChar+0x28>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	795b      	ldrb	r3, [r3, #5]
 8001310:	7afa      	ldrb	r2, [r7, #11]
 8001312:	429a      	cmp	r2, r3
 8001314:	d902      	bls.n	800131c <LCD_PutChar+0x2e>
		chr = font->font_UnknownChar;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	799b      	ldrb	r3, [r3, #6]
 800131a:	72fb      	strb	r3, [r7, #11]
	}

	// Pointer to the first byte of character in font data array
	pCh = &font->font_Data[(chr - font->font_MinChar) * font->font_BPC];
 800131c:	7afb      	ldrb	r3, [r7, #11]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	7912      	ldrb	r2, [r2, #4]
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	7892      	ldrb	r2, [r2, #2]
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	3307      	adds	r3, #7
 8001332:	617b      	str	r3, [r7, #20]

	// Draw character
	if (font->font_Scan == FONT_V) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	78db      	ldrb	r3, [r3, #3]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d177      	bne.n	800142c <LCD_PutChar+0x13e>
		// Vertical pixels order
		if (font->font_Height < 9) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	785b      	ldrb	r3, [r3, #1]
 8001340:	2b08      	cmp	r3, #8
 8001342:	d829      	bhi.n	8001398 <LCD_PutChar+0xaa>
			// Height is 8 pixels or less (one byte per column)
			pX = X;
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001348:	e01e      	b.n	8001388 <LCD_PutChar+0x9a>
				pY = Y;
 800134a:	89bb      	ldrh	r3, [r7, #12]
 800134c:	83bb      	strh	r3, [r7, #28]
				tmpCh = *pCh++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	617a      	str	r2, [r7, #20]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001358:	e010      	b.n	800137c <LCD_PutChar+0x8e>
					if (tmpCh & 0x01) {
 800135a:	7efb      	ldrb	r3, [r7, #27]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <LCD_PutChar+0x82>
						LCD_Pixel(pX, pY);
 8001364:	8bfb      	ldrh	r3, [r7, #30]
 8001366:	8bba      	ldrh	r2, [r7, #28]
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fb0c 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001370:	7efb      	ldrb	r3, [r7, #27]
 8001372:	085b      	lsrs	r3, r3, #1
 8001374:	76fb      	strb	r3, [r7, #27]
					pY++;
 8001376:	8bbb      	ldrh	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	83bb      	strh	r3, [r7, #28]
				while (tmpCh) {
 800137c:	7efb      	ldrb	r3, [r7, #27]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1eb      	bne.n	800135a <LCD_PutChar+0x6c>
				}
				pX++;
 8001382:	8bfb      	ldrh	r3, [r7, #30]
 8001384:	3301      	adds	r3, #1
 8001386:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001388:	8bfa      	ldrh	r2, [r7, #30]
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	7809      	ldrb	r1, [r1, #0]
 8001390:	440b      	add	r3, r1
 8001392:	429a      	cmp	r2, r3
 8001394:	dbd9      	blt.n	800134a <LCD_PutChar+0x5c>
 8001396:	e0c0      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Height is more than 8 pixels (several bytes per column)
			pX = X;
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800139c:	e03e      	b.n	800141c <LCD_PutChar+0x12e>
				pY = Y;
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 80013a2:	e031      	b.n	8001408 <LCD_PutChar+0x11a>
					bL = 8;
 80013a4:	2308      	movs	r3, #8
 80013a6:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	617a      	str	r2, [r7, #20]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80013b2:	7efb      	ldrb	r3, [r7, #27]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d022      	beq.n	80013fe <LCD_PutChar+0x110>
						while (bL) {
 80013b8:	e01d      	b.n	80013f6 <LCD_PutChar+0x108>
							if (tmpCh & 0x01) {
 80013ba:	7efb      	ldrb	r3, [r7, #27]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <LCD_PutChar+0xe2>
								LCD_Pixel(pX, pY);
 80013c4:	8bfb      	ldrh	r3, [r7, #30]
 80013c6:	8bba      	ldrh	r2, [r7, #28]
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fadc 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80013d0:	7efb      	ldrb	r3, [r7, #27]
 80013d2:	085b      	lsrs	r3, r3, #1
 80013d4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80013d6:	7efb      	ldrb	r3, [r7, #27]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <LCD_PutChar+0xfc>
								pY++;
 80013dc:	8bbb      	ldrh	r3, [r7, #28]
 80013de:	3301      	adds	r3, #1
 80013e0:	83bb      	strh	r3, [r7, #28]
								bL--;
 80013e2:	7ebb      	ldrb	r3, [r7, #26]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	76bb      	strb	r3, [r7, #26]
 80013e8:	e005      	b.n	80013f6 <LCD_PutChar+0x108>
							} else {
								pY += bL;
 80013ea:	7ebb      	ldrb	r3, [r7, #26]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	8bbb      	ldrh	r3, [r7, #28]
 80013f0:	4413      	add	r3, r2
 80013f2:	83bb      	strh	r3, [r7, #28]
								break;
 80013f4:	e008      	b.n	8001408 <LCD_PutChar+0x11a>
						while (bL) {
 80013f6:	7ebb      	ldrb	r3, [r7, #26]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1de      	bne.n	80013ba <LCD_PutChar+0xcc>
 80013fc:	e004      	b.n	8001408 <LCD_PutChar+0x11a>
							}
						}
					} else {
						pY += bL;
 80013fe:	7ebb      	ldrb	r3, [r7, #26]
 8001400:	b29a      	uxth	r2, r3
 8001402:	8bbb      	ldrh	r3, [r7, #28]
 8001404:	4413      	add	r3, r2
 8001406:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 8001408:	8bba      	ldrh	r2, [r7, #28]
 800140a:	89bb      	ldrh	r3, [r7, #12]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	7849      	ldrb	r1, [r1, #1]
 8001410:	440b      	add	r3, r1
 8001412:	429a      	cmp	r2, r3
 8001414:	dbc6      	blt.n	80013a4 <LCD_PutChar+0xb6>
					}
				}
				pX++;
 8001416:	8bfb      	ldrh	r3, [r7, #30]
 8001418:	3301      	adds	r3, #1
 800141a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800141c:	8bfa      	ldrh	r2, [r7, #30]
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	7809      	ldrb	r1, [r1, #0]
 8001424:	440b      	add	r3, r1
 8001426:	429a      	cmp	r2, r3
 8001428:	dbb9      	blt.n	800139e <LCD_PutChar+0xb0>
 800142a:	e076      	b.n	800151a <LCD_PutChar+0x22c>
			}
		}
	} else {
		// Horizontal pixels order
		if (font->font_Width < 9) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d829      	bhi.n	8001488 <LCD_PutChar+0x19a>
			// Width is 8 pixels or less (one byte per row)
			pY = Y;
 8001434:	89bb      	ldrh	r3, [r7, #12]
 8001436:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001438:	e01e      	b.n	8001478 <LCD_PutChar+0x18a>
				pX = X;
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	83fb      	strh	r3, [r7, #30]
				tmpCh = *pCh++;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	617a      	str	r2, [r7, #20]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001448:	e010      	b.n	800146c <LCD_PutChar+0x17e>
					if (tmpCh & 0x01) {
 800144a:	7efb      	ldrb	r3, [r7, #27]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <LCD_PutChar+0x172>
						LCD_Pixel(pX, pY);
 8001454:	8bfb      	ldrh	r3, [r7, #30]
 8001456:	8bba      	ldrh	r2, [r7, #28]
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fa94 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001460:	7efb      	ldrb	r3, [r7, #27]
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	76fb      	strb	r3, [r7, #27]
					pX++;
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	3301      	adds	r3, #1
 800146a:	83fb      	strh	r3, [r7, #30]
				while (tmpCh) {
 800146c:	7efb      	ldrb	r3, [r7, #27]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1eb      	bne.n	800144a <LCD_PutChar+0x15c>
				}
				pY++;
 8001472:	8bbb      	ldrh	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001478:	8bba      	ldrh	r2, [r7, #28]
 800147a:	89bb      	ldrh	r3, [r7, #12]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	7849      	ldrb	r1, [r1, #1]
 8001480:	440b      	add	r3, r1
 8001482:	429a      	cmp	r2, r3
 8001484:	dbd9      	blt.n	800143a <LCD_PutChar+0x14c>
 8001486:	e048      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Width is more than 8 pixels (several bytes per row)
			pY = Y;
 8001488:	89bb      	ldrh	r3, [r7, #12]
 800148a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800148c:	e03e      	b.n	800150c <LCD_PutChar+0x21e>
				pX = X;
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 8001492:	e031      	b.n	80014f8 <LCD_PutChar+0x20a>
					bL = 8;
 8001494:	2308      	movs	r3, #8
 8001496:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	617a      	str	r2, [r7, #20]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80014a2:	7efb      	ldrb	r3, [r7, #27]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <LCD_PutChar+0x200>
						while (bL) {
 80014a8:	e01d      	b.n	80014e6 <LCD_PutChar+0x1f8>
							if (tmpCh & 0x01) {
 80014aa:	7efb      	ldrb	r3, [r7, #27]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <LCD_PutChar+0x1d2>
								LCD_Pixel(pX, pY);
 80014b4:	8bfb      	ldrh	r3, [r7, #30]
 80014b6:	8bba      	ldrh	r2, [r7, #28]
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fa64 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80014c0:	7efb      	ldrb	r3, [r7, #27]
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80014c6:	7efb      	ldrb	r3, [r7, #27]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <LCD_PutChar+0x1ec>
								pX++;
 80014cc:	8bfb      	ldrh	r3, [r7, #30]
 80014ce:	3301      	adds	r3, #1
 80014d0:	83fb      	strh	r3, [r7, #30]
								bL--;
 80014d2:	7ebb      	ldrb	r3, [r7, #26]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	76bb      	strb	r3, [r7, #26]
 80014d8:	e005      	b.n	80014e6 <LCD_PutChar+0x1f8>
							} else {
								pX += bL;
 80014da:	7ebb      	ldrb	r3, [r7, #26]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	8bfb      	ldrh	r3, [r7, #30]
 80014e0:	4413      	add	r3, r2
 80014e2:	83fb      	strh	r3, [r7, #30]
								break;
 80014e4:	e008      	b.n	80014f8 <LCD_PutChar+0x20a>
						while (bL) {
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1de      	bne.n	80014aa <LCD_PutChar+0x1bc>
 80014ec:	e004      	b.n	80014f8 <LCD_PutChar+0x20a>
							}
						}
					} else {
						pX += bL;
 80014ee:	7ebb      	ldrb	r3, [r7, #26]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	8bfb      	ldrh	r3, [r7, #30]
 80014f4:	4413      	add	r3, r2
 80014f6:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 80014f8:	8bfa      	ldrh	r2, [r7, #30]
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	7809      	ldrb	r1, [r1, #0]
 8001500:	440b      	add	r3, r1
 8001502:	429a      	cmp	r2, r3
 8001504:	dbc6      	blt.n	8001494 <LCD_PutChar+0x1a6>
					}
				}
				pY++;
 8001506:	8bbb      	ldrh	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800150c:	8bba      	ldrh	r2, [r7, #28]
 800150e:	89bb      	ldrh	r3, [r7, #12]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	7849      	ldrb	r1, [r1, #1]
 8001514:	440b      	add	r3, r1
 8001516:	429a      	cmp	r2, r3
 8001518:	dbb9      	blt.n	800148e <LCD_PutChar+0x1a0>
			}
		}
	}

	return font->font_Width + 1;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	b2db      	uxtb	r3, r3
}
 8001522:	4618      	mov	r0, r3
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <LCD_PutStr>:
// input:
//   X,Y - top left coordinates of first character
//   str - pointer to zero-terminated string
//   font - pointer to font
// return: string width in pixels
uint16_t LCD_PutStr(uint16_t X, uint16_t Y, const char *str, const Font_TypeDef *font) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60ba      	str	r2, [r7, #8]
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4603      	mov	r3, r0
 8001538:	81fb      	strh	r3, [r7, #14]
 800153a:	460b      	mov	r3, r1
 800153c:	81bb      	strh	r3, [r7, #12]
	uint16_t pX = X;
 800153e:	89fb      	ldrh	r3, [r7, #14]
 8001540:	82fb      	strh	r3, [r7, #22]
	uint16_t eX = scr_width - font->font_Width - 1;
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <LCD_PutStr+0x6c>)
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	82bb      	strh	r3, [r7, #20]

	while (*str) {
 8001554:	e011      	b.n	800157a <LCD_PutStr+0x4e>
		pX += LCD_PutChar(pX, Y, *str++, font);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	60ba      	str	r2, [r7, #8]
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	89b9      	ldrh	r1, [r7, #12]
 8001560:	8af8      	ldrh	r0, [r7, #22]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f7ff fec3 	bl	80012ee <LCD_PutChar>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	8afb      	ldrh	r3, [r7, #22]
 800156e:	4413      	add	r3, r2
 8001570:	82fb      	strh	r3, [r7, #22]
		if (pX > eX) break;
 8001572:	8afa      	ldrh	r2, [r7, #22]
 8001574:	8abb      	ldrh	r3, [r7, #20]
 8001576:	429a      	cmp	r2, r3
 8001578:	d804      	bhi.n	8001584 <LCD_PutStr+0x58>
	while (*str) {
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1e9      	bne.n	8001556 <LCD_PutStr+0x2a>
 8001582:	e000      	b.n	8001586 <LCD_PutStr+0x5a>
		if (pX > eX) break;
 8001584:	bf00      	nop
	}

	return (pX - X);
 8001586:	8afa      	ldrh	r2, [r7, #22]
 8001588:	89fb      	ldrh	r3, [r7, #14]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	b29b      	uxth	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2001033a 	.word	0x2001033a

0800159c <LCD_PutInt>:
// input:
//   X,Y - top left coordinates of first symbol
//   num - signed integer value
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutInt(uint16_t X, uint16_t Y, int32_t num, const Font_TypeDef *font) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4603      	mov	r3, r0
 80015a8:	81fb      	strh	r3, [r7, #14]
 80015aa:	460b      	mov	r3, r1
 80015ac:	81bb      	strh	r3, [r7, #12]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t pX = X;
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	843b      	strh	r3, [r7, #32]

	// String termination character
	*pStr++ = '\0';
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	627a      	str	r2, [r7, #36]	; 0x24
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]

	// Convert number to characters
	if (num < 0) {
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da05      	bge.n	80015da <LCD_PutInt+0x3e>
		neg = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	425b      	negs	r3, r3
 80015d8:	60bb      	str	r3, [r7, #8]
	}
	do { *pStr++ = (num % 10) + '0'; } while (num /= 10);
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <LCD_PutInt+0xc8>)
 80015de:	fb83 1302 	smull	r1, r3, r3, r2
 80015e2:	1099      	asrs	r1, r3, #2
 80015e4:	17d3      	asrs	r3, r2, #31
 80015e6:	1ac9      	subs	r1, r1, r3
 80015e8:	460b      	mov	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	1ad1      	subs	r1, r2, r3
 80015f2:	b2ca      	uxtb	r2, r1
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	1c59      	adds	r1, r3, #1
 80015f8:	6279      	str	r1, [r7, #36]	; 0x24
 80015fa:	3230      	adds	r2, #48	; 0x30
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <LCD_PutInt+0xc8>)
 8001604:	fb82 1203 	smull	r1, r2, r2, r3
 8001608:	1092      	asrs	r2, r2, #2
 800160a:	17db      	asrs	r3, r3, #31
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1e1      	bne.n	80015da <LCD_PutInt+0x3e>
	if (neg) {
 8001616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800161a:	2b00      	cmp	r3, #0
 800161c:	d011      	beq.n	8001642 <LCD_PutInt+0xa6>
		*pStr++ = '-';
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	627a      	str	r2, [r7, #36]	; 0x24
 8001624:	222d      	movs	r2, #45	; 0x2d
 8001626:	701a      	strb	r2, [r3, #0]
	}

	// Draw a number
	while (*--pStr) {
 8001628:	e00b      	b.n	8001642 <LCD_PutInt+0xa6>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	89b9      	ldrh	r1, [r7, #12]
 8001630:	8c38      	ldrh	r0, [r7, #32]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f7ff fe5b 	bl	80012ee <LCD_PutChar>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	8c3b      	ldrh	r3, [r7, #32]
 800163e:	4413      	add	r3, r2
 8001640:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	3b01      	subs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ec      	bne.n	800162a <LCD_PutInt+0x8e>
	}

	return (pX - X);
 8001650:	8c3b      	ldrh	r3, [r7, #32]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b2db      	uxtb	r3, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	66666667 	.word	0x66666667

08001668 <LCD_PutIntF>:
//   X,Y - top left coordinates of first symbol
//   num - unsigned integer value
//   decimals - number of digits after decimal point
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutIntF(uint16_t X, uint16_t Y, int32_t num, uint8_t decimals, const Font_TypeDef *font) {
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b08b      	sub	sp, #44	; 0x2c
 800166c:	af00      	add	r7, sp, #0
 800166e:	60ba      	str	r2, [r7, #8]
 8001670:	461a      	mov	r2, r3
 8001672:	4603      	mov	r3, r0
 8001674:	81fb      	strh	r3, [r7, #14]
 8001676:	460b      	mov	r3, r1
 8001678:	81bb      	strh	r3, [r7, #12]
 800167a:	4613      	mov	r3, r2
 800167c:	71fb      	strb	r3, [r7, #7]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t strLen = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint16_t pX = X;
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	843b      	strh	r3, [r7, #32]

	// Convert number to characters
	*pStr++ = '\0'; // String termination character
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	627a      	str	r2, [r7, #36]	; 0x24
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
	if (num < 0) {
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da05      	bge.n	80016b0 <LCD_PutIntF+0x48>
		neg = 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	425b      	negs	r3, r3
 80016ae:	60bb      	str	r3, [r7, #8]
	}
	do {
		*pStr++ = (num % 10) + '0';
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <LCD_PutIntF+0x160>)
 80016b4:	fb83 1302 	smull	r1, r3, r3, r2
 80016b8:	1099      	asrs	r1, r3, #2
 80016ba:	17d3      	asrs	r3, r2, #31
 80016bc:	1ac9      	subs	r1, r1, r3
 80016be:	460b      	mov	r3, r1
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	1ad1      	subs	r1, r2, r3
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	1c59      	adds	r1, r3, #1
 80016ce:	6279      	str	r1, [r7, #36]	; 0x24
 80016d0:	3230      	adds	r2, #48	; 0x30
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]
		strLen++;
 80016d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80016da:	3301      	adds	r3, #1
 80016dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	} while (num /= 10);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4a39      	ldr	r2, [pc, #228]	; (80017c8 <LCD_PutIntF+0x160>)
 80016e4:	fb82 1203 	smull	r1, r2, r2, r3
 80016e8:	1092      	asrs	r2, r2, #2
 80016ea:	17db      	asrs	r3, r3, #31
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1dc      	bne.n	80016b0 <LCD_PutIntF+0x48>

	// Add leading zeroes
	if (strLen <= decimals) {
 80016f6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d80f      	bhi.n	8001720 <LCD_PutIntF+0xb8>
		while (strLen <= decimals) {
 8001700:	e009      	b.n	8001716 <LCD_PutIntF+0xae>
			*pStr++ = '0';
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	627a      	str	r2, [r7, #36]	; 0x24
 8001708:	2230      	movs	r2, #48	; 0x30
 800170a:	701a      	strb	r2, [r3, #0]
			strLen++;
 800170c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001710:	3301      	adds	r3, #1
 8001712:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		while (strLen <= decimals) {
 8001716:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	429a      	cmp	r2, r3
 800171e:	d9f0      	bls.n	8001702 <LCD_PutIntF+0x9a>
		}
	}

	// Minus sign?
	if (neg) {
 8001720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03d      	beq.n	80017a4 <LCD_PutIntF+0x13c>
		*pStr++ = '-';
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	627a      	str	r2, [r7, #36]	; 0x24
 800172e:	222d      	movs	r2, #45	; 0x2d
 8001730:	701a      	strb	r2, [r3, #0]
		strLen++;
 8001732:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001736:	3301      	adds	r3, #1
 8001738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	}

	// Draw a number
	while (*--pStr) {
 800173c:	e032      	b.n	80017a4 <LCD_PutIntF+0x13c>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	781a      	ldrb	r2, [r3, #0]
 8001742:	89b9      	ldrh	r1, [r7, #12]
 8001744:	8c38      	ldrh	r0, [r7, #32]
 8001746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001748:	f7ff fdd1 	bl	80012ee <LCD_PutChar>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	8c3b      	ldrh	r3, [r7, #32]
 8001752:	4413      	add	r3, r2
 8001754:	843b      	strh	r3, [r7, #32]
		if (decimals && (--strLen == decimals)) {
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <LCD_PutIntF+0x13c>
 800175c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001760:	3b01      	subs	r3, #1
 8001762:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001766:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	429a      	cmp	r2, r3
 800176e:	d119      	bne.n	80017a4 <LCD_PutIntF+0x13c>
			// Draw decimal point
			LCD_Rect(pX, Y + font->font_Height - 2, pX + 1, Y + font->font_Height - 1);
 8001770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	b29a      	uxth	r2, r3
 8001776:	89bb      	ldrh	r3, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b02      	subs	r3, #2
 800177e:	b299      	uxth	r1, r3
 8001780:	8c3b      	ldrh	r3, [r7, #32]
 8001782:	3301      	adds	r3, #1
 8001784:	b29c      	uxth	r4, r3
 8001786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001788:	785b      	ldrb	r3, [r3, #1]
 800178a:	b29a      	uxth	r2, r3
 800178c:	89bb      	ldrh	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29b      	uxth	r3, r3
 8001796:	8c38      	ldrh	r0, [r7, #32]
 8001798:	4622      	mov	r2, r4
 800179a:	f7ff fb39 	bl	8000e10 <LCD_Rect>
			pX += 3;
 800179e:	8c3b      	ldrh	r3, [r7, #32]
 80017a0:	3303      	adds	r3, #3
 80017a2:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	3b01      	subs	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1c5      	bne.n	800173e <LCD_PutIntF+0xd6>
		}
	}

	return (pX - X);
 80017b2:	8c3b      	ldrh	r3, [r7, #32]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	89fb      	ldrh	r3, [r7, #14]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	b2db      	uxtb	r3, r3
}
 80017be:	4618      	mov	r0, r3
 80017c0:	372c      	adds	r7, #44	; 0x2c
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	66666667 	.word	0x66666667

080017cc <drawUpDownArrow>:
		   HAL_SPI_Transmit(&hspi4, (uint8_t *)test, sizeof(test), 100);
	   	   SMLCD_SCS_L;
		   HAL_Delay(5);
	   }
}
void drawUpDownArrow(uint16_t X, uint16_t Y, uint16_t S, uint16_t dir){
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4623      	mov	r3, r4
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	4603      	mov	r3, r0
 80017e0:	80bb      	strh	r3, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	803b      	strh	r3, [r7, #0]
	int i=X;
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	61bb      	str	r3, [r7, #24]
	int j=Y;
 80017ee:	88bb      	ldrh	r3, [r7, #4]
 80017f0:	617b      	str	r3, [r7, #20]
	int size=S;
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	613b      	str	r3, [r7, #16]
	int direction = dir;
 80017f6:	883b      	ldrh	r3, [r7, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
	int lineCounter;
	if((direction==0)||(direction==1)){
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <drawUpDownArrow+0x3a>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d11f      	bne.n	8001846 <drawUpDownArrow+0x7a>
		LCD_FillRect(i-size, j-(size*2), i+size, j+(size*2));
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	b29a      	uxth	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	b29b      	uxth	r3, r3
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	b298      	uxth	r0, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	b29a      	uxth	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	b29b      	uxth	r3, r3
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	b29b      	uxth	r3, r3
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	b299      	uxth	r1, r3
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	b29a      	uxth	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	b29b      	uxth	r3, r3
 800182a:	4413      	add	r3, r2
 800182c:	b29c      	uxth	r4, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	b29b      	uxth	r3, r3
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4413      	add	r3, r2
 800183c:	b29b      	uxth	r3, r3
 800183e:	4622      	mov	r2, r4
 8001840:	f7ff fb28 	bl	8000e94 <LCD_FillRect>
 8001844:	e01e      	b.n	8001884 <drawUpDownArrow+0xb8>
	}
	else{
		LCD_FillRect(i-(size*2), j-size, i+(size*2), j+size);
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	b29a      	uxth	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	b29b      	uxth	r3, r3
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	b298      	uxth	r0, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	b29a      	uxth	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	b29b      	uxth	r3, r3
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b299      	uxth	r1, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	b29b      	uxth	r3, r3
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	b29b      	uxth	r3, r3
 800186e:	4413      	add	r3, r2
 8001870:	b29c      	uxth	r4, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	b29a      	uxth	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4413      	add	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	4622      	mov	r2, r4
 8001880:	f7ff fb08 	bl	8000e94 <LCD_FillRect>
	}
	switch(direction)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b03      	cmp	r3, #3
 8001888:	f200 8234 	bhi.w	8001cf4 <drawUpDownArrow+0x528>
 800188c:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <drawUpDownArrow+0xc8>)
 800188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001892:	bf00      	nop
 8001894:	080018a5 	.word	0x080018a5
 8001898:	080019bb 	.word	0x080019bb
 800189c:	08001ad1 	.word	0x08001ad1
 80018a0:	08001be3 	.word	0x08001be3
	{
	case 0: //upwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e03d      	b.n	8001926 <drawUpDownArrow+0x15a>
			LCD_Line(i-(size*2)+lineCounter,j-(size*2 +1)-lineCounter, i+(size*2)-lineCounter, j-(size*2 +1)-lineCounter);
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b218      	sxth	r0, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29b      	uxth	r3, r3
 80018e0:	b219      	sxth	r1, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b21c      	sxth	r4, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	b29b      	uxth	r3, r3
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	b29b      	uxth	r3, r3
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	b29a      	uxth	r2, r3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	b29b      	uxth	r3, r3
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	b21b      	sxth	r3, r3
 800191a:	4622      	mov	r2, r4
 800191c:	f7ff fc20 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3301      	adds	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbbc      	blt.n	80018aa <drawUpDownArrow+0xde>
		}
		LCD_Line(i-(size*2),j-(size*2 +1),i,j-(size*4));
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	b29a      	uxth	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	b29b      	uxth	r3, r3
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	b29b      	uxth	r3, r3
 8001940:	b218      	sxth	r0, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	b29a      	uxth	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	b29b      	uxth	r3, r3
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	b29b      	uxth	r3, r3
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b01      	subs	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	b219      	sxth	r1, r3
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	b21c      	sxth	r4, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	b29a      	uxth	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	b29b      	uxth	r3, r3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	b29b      	uxth	r3, r3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	b29b      	uxth	r3, r3
 800196c:	b21b      	sxth	r3, r3
 800196e:	4622      	mov	r2, r4
 8001970:	f7ff fbf6 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j-(size*2 +1),i,j-(size*4));
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	b29b      	uxth	r3, r3
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b29b      	uxth	r3, r3
 8001984:	b218      	sxth	r0, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	b29a      	uxth	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	b29b      	uxth	r3, r3
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	b29b      	uxth	r3, r3
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b29b      	uxth	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	b29b      	uxth	r3, r3
 800199a:	b219      	sxth	r1, r3
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	b21c      	sxth	r4, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	4622      	mov	r2, r4
 80019b4:	f7ff fbd4 	bl	8001160 <LCD_Line>
		break;
 80019b8:	e19c      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 1:  //downwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e03d      	b.n	8001a3c <drawUpDownArrow+0x270>
			LCD_Line(i-(size*2)+lineCounter,j+(size*2 +1)+lineCounter, i+(size*2)-lineCounter, j+(size*2 +1)+lineCounter);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	b218      	sxth	r0, r3
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3301      	adds	r3, #1
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b219      	sxth	r1, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	b21c      	sxth	r4, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	4622      	mov	r2, r4
 8001a32:	f7ff fb95 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbbc      	blt.n	80019c0 <drawUpDownArrow+0x1f4>
		}
		LCD_Line(i-(size*2),j+(size*2 +1),i,j+(size*4));
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b218      	sxth	r0, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b219      	sxth	r1, r3
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	b21c      	sxth	r4, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4622      	mov	r2, r4
 8001a86:	f7ff fb6b 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j+(size*2 +1),i,j+(size*4));
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b218      	sxth	r0, r3
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b219      	sxth	r1, r3
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	b21c      	sxth	r4, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	4622      	mov	r2, r4
 8001aca:	f7ff fb49 	bl	8001160 <LCD_Line>
		break;
 8001ace:	e111      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 2:{   //rightwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	e03d      	b.n	8001b52 <drawUpDownArrow+0x386>
			LCD_Line(i+(size*2+1)+lineCounter,j+(size*2)-lineCounter, i+(size*2+1)+lineCounter, j-(size*2)+lineCounter);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	b218      	sxth	r0, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	b219      	sxth	r1, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21c      	sxth	r4, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4622      	mov	r2, r4
 8001b48:	f7ff fb0a 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbbc      	blt.n	8001ad6 <drawUpDownArrow+0x30a>
		}
		LCD_Line(i+(size*2+1),j+(size*2),i+(size*4),j);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b218      	sxth	r0, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b219      	sxth	r1, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	f7ff fae1 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2+1),j-(size*2),i+(size*4),j);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	b218      	sxth	r0, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b219      	sxth	r1, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	f7ff fac0 	bl	8001160 <LCD_Line>
		break;
 8001be0:	e088      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 3:{   //leftwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e03d      	b.n	8001c64 <drawUpDownArrow+0x498>
			LCD_Line(i-(size*2+1)-lineCounter,j+(size*2)-lineCounter, i-(size*2+1)-lineCounter, j-(size*2)+lineCounter);
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b218      	sxth	r0, r3
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b219      	sxth	r1, r3
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	b21c      	sxth	r4, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4622      	mov	r2, r4
 8001c5a:	f7ff fa81 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	dbbc      	blt.n	8001be8 <drawUpDownArrow+0x41c>
		}
		LCD_Line(i-(size*2+1),j+(size*2),i-(size*4),j);
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b218      	sxth	r0, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	b219      	sxth	r1, r3
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	f7ff fa58 	bl	8001160 <LCD_Line>
		LCD_Line(i-(size*2+1),j-(size*2),i-(size*4),j);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b218      	sxth	r0, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b219      	sxth	r1, r3
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	f7ff fa37 	bl	8001160 <LCD_Line>
		break;
 8001cf2:	bf00      	nop
	}
	}

}
 8001cf4:	bf00      	nop
 8001cf6:	3724      	adds	r7, #36	; 0x24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d02:	f005 fbe8 	bl	80074d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d06:	f000 f8f3 	bl	8001ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0a:	f000 ff29 	bl	8002b60 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d0e:	f000 fee5 	bl	8002adc <MX_DMA_Init>
  MX_ADC1_Init();
 8001d12:	f000 f995 	bl	8002040 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001d16:	f000 fa71 	bl	80021fc <MX_ADC2_Init>
  MX_ADC3_Init();
 8001d1a:	f000 faeb 	bl	80022f4 <MX_ADC3_Init>
  MX_I2C1_Init();
 8001d1e:	f000 fb81 	bl	8002424 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d22:	f000 fbbf 	bl	80024a4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001d26:	f000 fbfd 	bl	8002524 <MX_I2C3_Init>
  MX_I2C4_Init();
 8001d2a:	f000 fc3d 	bl	80025a8 <MX_I2C4_Init>
  MX_RTC_Init();
 8001d2e:	f000 fc7b 	bl	8002628 <MX_RTC_Init>
  MX_SPI4_Init();
 8001d32:	f000 fc9f 	bl	8002674 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001d36:	f000 fcdb 	bl	80026f0 <MX_SPI5_Init>
  MX_TIM4_Init();
 8001d3a:	f000 fd17 	bl	800276c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001d3e:	f000 fd8d 	bl	800285c <MX_TIM5_Init>
  MX_UART4_Init();
 8001d42:	f000 fe0d 	bl	8002960 <MX_UART4_Init>
  MX_UART5_Init();
 8001d46:	f000 fe3b 	bl	80029c0 <MX_UART5_Init>
  MX_UART7_Init();
 8001d4a:	f000 fe69 	bl	8002a20 <MX_UART7_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d4e:	f000 fe97 	bl	8002a80 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_ConfigChannel();
  outputGPIOBufInitialization();
 8001d52:	f001 f8b5 	bl	8002ec0 <outputGPIOBufInitialization>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8001d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5a:	494e      	ldr	r1, [pc, #312]	; (8001e94 <main+0x198>)
 8001d5c:	484e      	ldr	r0, [pc, #312]	; (8001e98 <main+0x19c>)
 8001d5e:	f005 fd8f 	bl	8007880 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8001d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d66:	494d      	ldr	r1, [pc, #308]	; (8001e9c <main+0x1a0>)
 8001d68:	484d      	ldr	r0, [pc, #308]	; (8001ea0 <main+0x1a4>)
 8001d6a:	f005 fd89 	bl	8007880 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	494c      	ldr	r1, [pc, #304]	; (8001ea4 <main+0x1a8>)
 8001d74:	484c      	ldr	r0, [pc, #304]	; (8001ea8 <main+0x1ac>)
 8001d76:	f005 fd83 	bl	8007880 <HAL_ADC_Start_DMA>
   int x=1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	607b      	str	r3, [r7, #4]



  configureLEDDriver();
 8001d7e:	f001 fa09 	bl	8003194 <configureLEDDriver>
    setErrorLED(4,OFF);
 8001d82:	2100      	movs	r1, #0
 8001d84:	2004      	movs	r0, #4
 8001d86:	f001 fa91 	bl	80032ac <setErrorLED>
    HAL_Delay(1000);
 8001d8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d8e:	f005 fbcf 	bl	8007530 <HAL_Delay>
    setErrorLED(7,OFF);
 8001d92:	2100      	movs	r1, #0
 8001d94:	2007      	movs	r0, #7
 8001d96:	f001 fa89 	bl	80032ac <setErrorLED>
    setErrorLED(8,ON);
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	2008      	movs	r0, #8
 8001d9e:	f001 fa85 	bl	80032ac <setErrorLED>
    HAL_Delay(1000);
 8001da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001da6:	f005 fbc3 	bl	8007530 <HAL_Delay>
    setErrorLED(8,OFF);
 8001daa:	2100      	movs	r1, #0
 8001dac:	2008      	movs	r0, #8
 8001dae:	f001 fa7d 	bl	80032ac <setErrorLED>
    setErrorLED(9,ON);
 8001db2:	2101      	movs	r1, #1
 8001db4:	2009      	movs	r0, #9
 8001db6:	f001 fa79 	bl	80032ac <setErrorLED>
    HAL_Delay(1000);
 8001dba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dbe:	f005 fbb7 	bl	8007530 <HAL_Delay>
    setErrorLED(8,ON);
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	2008      	movs	r0, #8
 8001dc6:	f001 fa71 	bl	80032ac <setErrorLED>
    setErrorLED(9,ON);
 8001dca:	2101      	movs	r1, #1
 8001dcc:	2009      	movs	r0, #9
 8001dce:	f001 fa6d 	bl	80032ac <setErrorLED>
    HAL_Delay(1000);
 8001dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd6:	f005 fbab 	bl	8007530 <HAL_Delay>
    setErrorLED(9,OFF);
 8001dda:	2100      	movs	r1, #0
 8001ddc:	2009      	movs	r0, #9
 8001dde:	f001 fa65 	bl	80032ac <setErrorLED>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001de2:	f00b fef7 	bl	800dbd4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(startHeartbeat, NULL, &Heartbeat_attributes);
 8001de6:	4a31      	ldr	r2, [pc, #196]	; (8001eac <main+0x1b0>)
 8001de8:	2100      	movs	r1, #0
 8001dea:	4831      	ldr	r0, [pc, #196]	; (8001eb0 <main+0x1b4>)
 8001dec:	f00b ff5c 	bl	800dca8 <osThreadNew>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <main+0x1b8>)
 8001df4:	601a      	str	r2, [r3, #0]

  /* creation of adcRead */
  adcReadHandle = osThreadNew(startADCRead, NULL, &adcRead_attributes);
 8001df6:	4a30      	ldr	r2, [pc, #192]	; (8001eb8 <main+0x1bc>)
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4830      	ldr	r0, [pc, #192]	; (8001ebc <main+0x1c0>)
 8001dfc:	f00b ff54 	bl	800dca8 <osThreadNew>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <main+0x1c4>)
 8001e04:	601a      	str	r2, [r3, #0]

  /* creation of DatScreenBlink */
  DatScreenBlinkHandle = osThreadNew(GetDaScreenBlink, NULL, &DatScreenBlink_attributes);
 8001e06:	4a2f      	ldr	r2, [pc, #188]	; (8001ec4 <main+0x1c8>)
 8001e08:	2100      	movs	r1, #0
 8001e0a:	482f      	ldr	r0, [pc, #188]	; (8001ec8 <main+0x1cc>)
 8001e0c:	f00b ff4c 	bl	800dca8 <osThreadNew>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <main+0x1d0>)
 8001e14:	601a      	str	r2, [r3, #0]

  /* creation of gpioInputRead */
  gpioInputReadHandle = osThreadNew(startGpioInputRead, NULL, &gpioInputRead_attributes);
 8001e16:	4a2e      	ldr	r2, [pc, #184]	; (8001ed0 <main+0x1d4>)
 8001e18:	2100      	movs	r1, #0
 8001e1a:	482e      	ldr	r0, [pc, #184]	; (8001ed4 <main+0x1d8>)
 8001e1c:	f00b ff44 	bl	800dca8 <osThreadNew>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <main+0x1dc>)
 8001e24:	601a      	str	r2, [r3, #0]

  /* creation of navigationTask */
  navigationTaskHandle = osThreadNew(startNavigationTask, NULL, &navigationTask_attributes);
 8001e26:	4a2d      	ldr	r2, [pc, #180]	; (8001edc <main+0x1e0>)
 8001e28:	2100      	movs	r1, #0
 8001e2a:	482d      	ldr	r0, [pc, #180]	; (8001ee0 <main+0x1e4>)
 8001e2c:	f00b ff3c 	bl	800dca8 <osThreadNew>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <main+0x1e8>)
 8001e34:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001e36:	f00b ff01 	bl	800dc3c <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_Delay(1000);
 8001e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e3e:	f005 fb77 	bl	8007530 <HAL_Delay>
	  if (!x) {
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d112      	bne.n	8001e6e <main+0x172>
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e4e:	4826      	ldr	r0, [pc, #152]	; (8001ee8 <main+0x1ec>)
 8001e50:	f006 ffe8 	bl	8008e24 <HAL_GPIO_WritePin>
		  x=1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	607b      	str	r3, [r7, #4]

		  //uartTransmitChar("hello\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	4823      	ldr	r0, [pc, #140]	; (8001eec <main+0x1f0>)
 8001e5e:	f006 ffe1 	bl	8008e24 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2110      	movs	r1, #16
 8001e66:	4821      	ldr	r0, [pc, #132]	; (8001eec <main+0x1f0>)
 8001e68:	f006 ffdc 	bl	8008e24 <HAL_GPIO_WritePin>
 8001e6c:	e7e5      	b.n	8001e3a <main+0x13e>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e74:	481c      	ldr	r0, [pc, #112]	; (8001ee8 <main+0x1ec>)
 8001e76:	f006 ffd5 	bl	8008e24 <HAL_GPIO_WritePin>
		  x=0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
		  //uartTransmitChar("here\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2110      	movs	r1, #16
 8001e82:	481a      	ldr	r0, [pc, #104]	; (8001eec <main+0x1f0>)
 8001e84:	f006 ffce 	bl	8008e24 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2110      	movs	r1, #16
 8001e8c:	4817      	ldr	r0, [pc, #92]	; (8001eec <main+0x1f0>)
 8001e8e:	f006 ffc9 	bl	8008e24 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001e92:	e7d2      	b.n	8001e3a <main+0x13e>
 8001e94:	20010af4 	.word	0x20010af4
 8001e98:	20013284 	.word	0x20013284
 8001e9c:	200218a4 	.word	0x200218a4
 8001ea0:	2001056c 	.word	0x2001056c
 8001ea4:	200133ac 	.word	0x200133ac
 8001ea8:	200132d0 	.word	0x200132d0
 8001eac:	080151fc 	.word	0x080151fc
 8001eb0:	08003e01 	.word	0x08003e01
 8001eb4:	200218a0 	.word	0x200218a0
 8001eb8:	08015220 	.word	0x08015220
 8001ebc:	08003e21 	.word	0x08003e21
 8001ec0:	20024078 	.word	0x20024078
 8001ec4:	08015244 	.word	0x08015244
 8001ec8:	08003ea1 	.word	0x08003ea1
 8001ecc:	20024074 	.word	0x20024074
 8001ed0:	08015268 	.word	0x08015268
 8001ed4:	08004009 	.word	0x08004009
 8001ed8:	200132cc 	.word	0x200132cc
 8001edc:	0801528c 	.word	0x0801528c
 8001ee0:	08004135 	.word	0x08004135
 8001ee4:	200133a8 	.word	0x200133a8
 8001ee8:	40022000 	.word	0x40022000
 8001eec:	40021000 	.word	0x40021000

08001ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b0b8      	sub	sp, #224	; 0xe0
 8001ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001efa:	2234      	movs	r2, #52	; 0x34
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f00e fd39 	bl	8010976 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f04:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f14:	f107 0308 	add.w	r3, r7, #8
 8001f18:	2290      	movs	r2, #144	; 0x90
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f00e fd2a 	bl	8010976 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f22:	f008 f907 	bl	800a134 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f26:	4b43      	ldr	r3, [pc, #268]	; (8002034 <SystemClock_Config+0x144>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	4a42      	ldr	r2, [pc, #264]	; (8002034 <SystemClock_Config+0x144>)
 8001f2c:	f023 0318 	bic.w	r3, r3, #24
 8001f30:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4b40      	ldr	r3, [pc, #256]	; (8002034 <SystemClock_Config+0x144>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a3f      	ldr	r2, [pc, #252]	; (8002034 <SystemClock_Config+0x144>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <SystemClock_Config+0x144>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f4a:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <SystemClock_Config+0x148>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f52:	4a39      	ldr	r2, [pc, #228]	; (8002038 <SystemClock_Config+0x148>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b37      	ldr	r3, [pc, #220]	; (8002038 <SystemClock_Config+0x148>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001f66:	2305      	movs	r3, #5
 8001f68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f74:	2301      	movs	r3, #1
 8001f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001f88:	230f      	movs	r3, #15
 8001f8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001f8e:	2390      	movs	r3, #144	; 0x90
 8001f90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f94:	2302      	movs	r3, #2
 8001f96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f008 f8d5 	bl	800a154 <HAL_RCC_OscConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001fb0:	f002 f984 	bl	80042bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb4:	230f      	movs	r3, #15
 8001fb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fd6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001fda:	2103      	movs	r1, #3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f008 fb67 	bl	800a6b0 <HAL_RCC_ClockConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001fe8:	f002 f968 	bl	80042bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <SystemClock_Config+0x14c>)
 8001fee:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001ffe:	2300      	movs	r3, #0
 8002000:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002002:	2300      	movs	r3, #0
 8002004:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002006:	2300      	movs	r3, #0
 8002008:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800200a:	2300      	movs	r3, #0
 800200c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800200e:	2300      	movs	r3, #0
 8002010:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002018:	f107 0308 	add.w	r3, r7, #8
 800201c:	4618      	mov	r0, r3
 800201e:	f008 fd4b 	bl	800aab8 <HAL_RCCEx_PeriphCLKConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8002028:	f002 f948 	bl	80042bc <Error_Handler>
  }
}
 800202c:	bf00      	nop
 800202e:	37e0      	adds	r7, #224	; 0xe0
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40023800 	.word	0x40023800
 8002038:	40007000 	.word	0x40007000
 800203c:	0023d620 	.word	0x0023d620

08002040 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002046:	463b      	mov	r3, r7
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002052:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002054:	4a67      	ldr	r2, [pc, #412]	; (80021f4 <MX_ADC1_Init+0x1b4>)
 8002056:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002058:	4b65      	ldr	r3, [pc, #404]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800205a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800205e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002060:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002066:	4b62      	ldr	r3, [pc, #392]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002068:	2201      	movs	r2, #1
 800206a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800206c:	4b60      	ldr	r3, [pc, #384]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800206e:	2201      	movs	r2, #1
 8002070:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002072:	4b5f      	ldr	r3, [pc, #380]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800207a:	4b5d      	ldr	r3, [pc, #372]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800207c:	2200      	movs	r2, #0
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002080:	4b5b      	ldr	r3, [pc, #364]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002082:	4a5d      	ldr	r2, [pc, #372]	; (80021f8 <MX_ADC1_Init+0x1b8>)
 8002084:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002086:	4b5a      	ldr	r3, [pc, #360]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002088:	2200      	movs	r2, #0
 800208a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 800208c:	4b58      	ldr	r3, [pc, #352]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800208e:	220b      	movs	r2, #11
 8002090:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002092:	4b57      	ldr	r3, [pc, #348]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800209a:	4b55      	ldr	r3, [pc, #340]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800209c:	2201      	movs	r2, #1
 800209e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020a0:	4853      	ldr	r0, [pc, #332]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80020a2:	f005 fa67 	bl	8007574 <HAL_ADC_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80020ac:	f002 f906 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80020b0:	2303      	movs	r3, #3
 80020b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020b4:	2301      	movs	r3, #1
 80020b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80020b8:	2307      	movs	r3, #7
 80020ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020bc:	463b      	mov	r3, r7
 80020be:	4619      	mov	r1, r3
 80020c0:	484b      	ldr	r0, [pc, #300]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80020c2:	f005 fd33 	bl	8007b2c <HAL_ADC_ConfigChannel>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020cc:	f002 f8f6 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80020d0:	2304      	movs	r3, #4
 80020d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020d4:	2302      	movs	r3, #2
 80020d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d8:	463b      	mov	r3, r7
 80020da:	4619      	mov	r1, r3
 80020dc:	4844      	ldr	r0, [pc, #272]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80020de:	f005 fd25 	bl	8007b2c <HAL_ADC_ConfigChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80020e8:	f002 f8e8 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80020ec:	2305      	movs	r3, #5
 80020ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80020f0:	2303      	movs	r3, #3
 80020f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f4:	463b      	mov	r3, r7
 80020f6:	4619      	mov	r1, r3
 80020f8:	483d      	ldr	r0, [pc, #244]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80020fa:	f005 fd17 	bl	8007b2c <HAL_ADC_ConfigChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002104:	f002 f8da 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002108:	2306      	movs	r3, #6
 800210a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800210c:	2304      	movs	r3, #4
 800210e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002110:	463b      	mov	r3, r7
 8002112:	4619      	mov	r1, r3
 8002114:	4836      	ldr	r0, [pc, #216]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002116:	f005 fd09 	bl	8007b2c <HAL_ADC_ConfigChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002120:	f002 f8cc 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002124:	2307      	movs	r3, #7
 8002126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002128:	2305      	movs	r3, #5
 800212a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800212c:	463b      	mov	r3, r7
 800212e:	4619      	mov	r1, r3
 8002130:	482f      	ldr	r0, [pc, #188]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002132:	f005 fcfb 	bl	8007b2c <HAL_ADC_ConfigChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800213c:	f002 f8be 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002140:	2308      	movs	r3, #8
 8002142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002144:	2306      	movs	r3, #6
 8002146:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002148:	463b      	mov	r3, r7
 800214a:	4619      	mov	r1, r3
 800214c:	4828      	ldr	r0, [pc, #160]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800214e:	f005 fced 	bl	8007b2c <HAL_ADC_ConfigChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002158:	f002 f8b0 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800215c:	2309      	movs	r3, #9
 800215e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002160:	2307      	movs	r3, #7
 8002162:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002164:	463b      	mov	r3, r7
 8002166:	4619      	mov	r1, r3
 8002168:	4821      	ldr	r0, [pc, #132]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800216a:	f005 fcdf 	bl	8007b2c <HAL_ADC_ConfigChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002174:	f002 f8a2 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002178:	230a      	movs	r3, #10
 800217a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800217c:	2308      	movs	r3, #8
 800217e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002180:	463b      	mov	r3, r7
 8002182:	4619      	mov	r1, r3
 8002184:	481a      	ldr	r0, [pc, #104]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002186:	f005 fcd1 	bl	8007b2c <HAL_ADC_ConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002190:	f002 f894 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002194:	230b      	movs	r3, #11
 8002196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002198:	2309      	movs	r3, #9
 800219a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800219c:	463b      	mov	r3, r7
 800219e:	4619      	mov	r1, r3
 80021a0:	4813      	ldr	r0, [pc, #76]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80021a2:	f005 fcc3 	bl	8007b2c <HAL_ADC_ConfigChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80021ac:	f002 f886 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80021b0:	230c      	movs	r3, #12
 80021b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80021b4:	230a      	movs	r3, #10
 80021b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021b8:	463b      	mov	r3, r7
 80021ba:	4619      	mov	r1, r3
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80021be:	f005 fcb5 	bl	8007b2c <HAL_ADC_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80021c8:	f002 f878 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80021cc:	230d      	movs	r3, #13
 80021ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80021d0:	230b      	movs	r3, #11
 80021d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021d4:	463b      	mov	r3, r7
 80021d6:	4619      	mov	r1, r3
 80021d8:	4805      	ldr	r0, [pc, #20]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80021da:	f005 fca7 	bl	8007b2c <HAL_ADC_ConfigChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80021e4:	f002 f86a 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20013284 	.word	0x20013284
 80021f4:	40012000 	.word	0x40012000
 80021f8:	0f000001 	.word	0x0f000001

080021fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002202:	463b      	mov	r3, r7
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002210:	4a36      	ldr	r2, [pc, #216]	; (80022ec <MX_ADC2_Init+0xf0>)
 8002212:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002214:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002216:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800221a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800221c:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <MX_ADC2_Init+0xec>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002222:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002224:	2201      	movs	r2, #1
 8002226:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002228:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <MX_ADC2_Init+0xec>)
 800222a:	2201      	movs	r2, #1
 800222c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800222e:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002236:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002238:	2200      	movs	r2, #0
 800223a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <MX_ADC2_Init+0xec>)
 800223e:	4a2c      	ldr	r2, [pc, #176]	; (80022f0 <MX_ADC2_Init+0xf4>)
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002242:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002244:	2200      	movs	r2, #0
 8002246:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <MX_ADC2_Init+0xec>)
 800224a:	2204      	movs	r2, #4
 800224c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800224e:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002256:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002258:	2201      	movs	r2, #1
 800225a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800225c:	4822      	ldr	r0, [pc, #136]	; (80022e8 <MX_ADC2_Init+0xec>)
 800225e:	f005 f989 	bl	8007574 <HAL_ADC_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002268:	f002 f828 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800226c:	2300      	movs	r3, #0
 800226e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002270:	2301      	movs	r3, #1
 8002272:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002274:	2307      	movs	r3, #7
 8002276:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002278:	463b      	mov	r3, r7
 800227a:	4619      	mov	r1, r3
 800227c:	481a      	ldr	r0, [pc, #104]	; (80022e8 <MX_ADC2_Init+0xec>)
 800227e:	f005 fc55 	bl	8007b2c <HAL_ADC_ConfigChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002288:	f002 f818 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800228c:	2301      	movs	r3, #1
 800228e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002290:	2302      	movs	r3, #2
 8002292:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002294:	463b      	mov	r3, r7
 8002296:	4619      	mov	r1, r3
 8002298:	4813      	ldr	r0, [pc, #76]	; (80022e8 <MX_ADC2_Init+0xec>)
 800229a:	f005 fc47 	bl	8007b2c <HAL_ADC_ConfigChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80022a4:	f002 f80a 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80022a8:	230e      	movs	r3, #14
 80022aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80022ac:	2303      	movs	r3, #3
 80022ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022b0:	463b      	mov	r3, r7
 80022b2:	4619      	mov	r1, r3
 80022b4:	480c      	ldr	r0, [pc, #48]	; (80022e8 <MX_ADC2_Init+0xec>)
 80022b6:	f005 fc39 	bl	8007b2c <HAL_ADC_ConfigChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80022c0:	f001 fffc 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80022c4:	230f      	movs	r3, #15
 80022c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80022c8:	2304      	movs	r3, #4
 80022ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022cc:	463b      	mov	r3, r7
 80022ce:	4619      	mov	r1, r3
 80022d0:	4805      	ldr	r0, [pc, #20]	; (80022e8 <MX_ADC2_Init+0xec>)
 80022d2:	f005 fc2b 	bl	8007b2c <HAL_ADC_ConfigChannel>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80022dc:	f001 ffee 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	2001056c 	.word	0x2001056c
 80022ec:	40012100 	.word	0x40012100
 80022f0:	0f000001 	.word	0x0f000001

080022f4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022fa:	463b      	mov	r3, r7
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002306:	4b44      	ldr	r3, [pc, #272]	; (8002418 <MX_ADC3_Init+0x124>)
 8002308:	4a44      	ldr	r2, [pc, #272]	; (800241c <MX_ADC3_Init+0x128>)
 800230a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800230c:	4b42      	ldr	r3, [pc, #264]	; (8002418 <MX_ADC3_Init+0x124>)
 800230e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002312:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002314:	4b40      	ldr	r3, [pc, #256]	; (8002418 <MX_ADC3_Init+0x124>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800231a:	4b3f      	ldr	r3, [pc, #252]	; (8002418 <MX_ADC3_Init+0x124>)
 800231c:	2201      	movs	r2, #1
 800231e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002320:	4b3d      	ldr	r3, [pc, #244]	; (8002418 <MX_ADC3_Init+0x124>)
 8002322:	2201      	movs	r2, #1
 8002324:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002326:	4b3c      	ldr	r3, [pc, #240]	; (8002418 <MX_ADC3_Init+0x124>)
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800232e:	4b3a      	ldr	r3, [pc, #232]	; (8002418 <MX_ADC3_Init+0x124>)
 8002330:	2200      	movs	r2, #0
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002334:	4b38      	ldr	r3, [pc, #224]	; (8002418 <MX_ADC3_Init+0x124>)
 8002336:	4a3a      	ldr	r2, [pc, #232]	; (8002420 <MX_ADC3_Init+0x12c>)
 8002338:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800233a:	4b37      	ldr	r3, [pc, #220]	; (8002418 <MX_ADC3_Init+0x124>)
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8002340:	4b35      	ldr	r3, [pc, #212]	; (8002418 <MX_ADC3_Init+0x124>)
 8002342:	2206      	movs	r2, #6
 8002344:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002346:	4b34      	ldr	r3, [pc, #208]	; (8002418 <MX_ADC3_Init+0x124>)
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800234e:	4b32      	ldr	r3, [pc, #200]	; (8002418 <MX_ADC3_Init+0x124>)
 8002350:	2201      	movs	r2, #1
 8002352:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002354:	4830      	ldr	r0, [pc, #192]	; (8002418 <MX_ADC3_Init+0x124>)
 8002356:	f005 f90d 	bl	8007574 <HAL_ADC_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002360:	f001 ffac 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002364:	2302      	movs	r3, #2
 8002366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002368:	2301      	movs	r3, #1
 800236a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800236c:	2307      	movs	r3, #7
 800236e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002370:	463b      	mov	r3, r7
 8002372:	4619      	mov	r1, r3
 8002374:	4828      	ldr	r0, [pc, #160]	; (8002418 <MX_ADC3_Init+0x124>)
 8002376:	f005 fbd9 	bl	8007b2c <HAL_ADC_ConfigChannel>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002380:	f001 ff9c 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002384:	2304      	movs	r3, #4
 8002386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002388:	2302      	movs	r3, #2
 800238a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800238c:	463b      	mov	r3, r7
 800238e:	4619      	mov	r1, r3
 8002390:	4821      	ldr	r0, [pc, #132]	; (8002418 <MX_ADC3_Init+0x124>)
 8002392:	f005 fbcb 	bl	8007b2c <HAL_ADC_ConfigChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 800239c:	f001 ff8e 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80023a0:	2305      	movs	r3, #5
 80023a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80023a4:	2303      	movs	r3, #3
 80023a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023a8:	463b      	mov	r3, r7
 80023aa:	4619      	mov	r1, r3
 80023ac:	481a      	ldr	r0, [pc, #104]	; (8002418 <MX_ADC3_Init+0x124>)
 80023ae:	f005 fbbd 	bl	8007b2c <HAL_ADC_ConfigChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80023b8:	f001 ff80 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80023bc:	2306      	movs	r3, #6
 80023be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80023c0:	2304      	movs	r3, #4
 80023c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023c4:	463b      	mov	r3, r7
 80023c6:	4619      	mov	r1, r3
 80023c8:	4813      	ldr	r0, [pc, #76]	; (8002418 <MX_ADC3_Init+0x124>)
 80023ca:	f005 fbaf 	bl	8007b2c <HAL_ADC_ConfigChannel>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 80023d4:	f001 ff72 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80023d8:	2307      	movs	r3, #7
 80023da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80023dc:	2305      	movs	r3, #5
 80023de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023e0:	463b      	mov	r3, r7
 80023e2:	4619      	mov	r1, r3
 80023e4:	480c      	ldr	r0, [pc, #48]	; (8002418 <MX_ADC3_Init+0x124>)
 80023e6:	f005 fba1 	bl	8007b2c <HAL_ADC_ConfigChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 80023f0:	f001 ff64 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80023f4:	2308      	movs	r3, #8
 80023f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80023f8:	2306      	movs	r3, #6
 80023fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023fc:	463b      	mov	r3, r7
 80023fe:	4619      	mov	r1, r3
 8002400:	4805      	ldr	r0, [pc, #20]	; (8002418 <MX_ADC3_Init+0x124>)
 8002402:	f005 fb93 	bl	8007b2c <HAL_ADC_ConfigChannel>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 800240c:	f001 ff56 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  /* USER CODE END ADC3_Init 2 */

}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	200132d0 	.word	0x200132d0
 800241c:	40012200 	.word	0x40012200
 8002420:	0f000001 	.word	0x0f000001

08002424 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <MX_I2C1_Init+0x74>)
 800242a:	4a1c      	ldr	r2, [pc, #112]	; (800249c <MX_I2C1_Init+0x78>)
 800242c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007074AF;
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <MX_I2C1_Init+0x74>)
 8002430:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <MX_I2C1_Init+0x7c>)
 8002432:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002434:	4b18      	ldr	r3, [pc, #96]	; (8002498 <MX_I2C1_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <MX_I2C1_Init+0x74>)
 800243c:	2201      	movs	r2, #1
 800243e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002440:	4b15      	ldr	r3, [pc, #84]	; (8002498 <MX_I2C1_Init+0x74>)
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <MX_I2C1_Init+0x74>)
 8002448:	2200      	movs	r2, #0
 800244a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <MX_I2C1_Init+0x74>)
 800244e:	2200      	movs	r2, #0
 8002450:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <MX_I2C1_Init+0x74>)
 8002454:	2200      	movs	r2, #0
 8002456:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002458:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <MX_I2C1_Init+0x74>)
 800245a:	2200      	movs	r2, #0
 800245c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800245e:	480e      	ldr	r0, [pc, #56]	; (8002498 <MX_I2C1_Init+0x74>)
 8002460:	f006 fd38 	bl	8008ed4 <HAL_I2C_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800246a:	f001 ff27 	bl	80042bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800246e:	2100      	movs	r1, #0
 8002470:	4809      	ldr	r0, [pc, #36]	; (8002498 <MX_I2C1_Init+0x74>)
 8002472:	f007 fc5f 	bl	8009d34 <HAL_I2CEx_ConfigAnalogFilter>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800247c:	f001 ff1e 	bl	80042bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002480:	2100      	movs	r1, #0
 8002482:	4805      	ldr	r0, [pc, #20]	; (8002498 <MX_I2C1_Init+0x74>)
 8002484:	f007 fca1 	bl	8009dca <HAL_I2CEx_ConfigDigitalFilter>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800248e:	f001 ff15 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200105b4 	.word	0x200105b4
 800249c:	40005400 	.word	0x40005400
 80024a0:	007074af 	.word	0x007074af

080024a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <MX_I2C2_Init+0x74>)
 80024aa:	4a1c      	ldr	r2, [pc, #112]	; (800251c <MX_I2C2_Init+0x78>)
 80024ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x007074AF;
 80024ae:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <MX_I2C2_Init+0x74>)
 80024b0:	4a1b      	ldr	r2, [pc, #108]	; (8002520 <MX_I2C2_Init+0x7c>)
 80024b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80024b4:	4b18      	ldr	r3, [pc, #96]	; (8002518 <MX_I2C2_Init+0x74>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ba:	4b17      	ldr	r3, [pc, #92]	; (8002518 <MX_I2C2_Init+0x74>)
 80024bc:	2201      	movs	r2, #1
 80024be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024c0:	4b15      	ldr	r3, [pc, #84]	; (8002518 <MX_I2C2_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80024c6:	4b14      	ldr	r3, [pc, #80]	; (8002518 <MX_I2C2_Init+0x74>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <MX_I2C2_Init+0x74>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <MX_I2C2_Init+0x74>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <MX_I2C2_Init+0x74>)
 80024da:	2200      	movs	r2, #0
 80024dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024de:	480e      	ldr	r0, [pc, #56]	; (8002518 <MX_I2C2_Init+0x74>)
 80024e0:	f006 fcf8 	bl	8008ed4 <HAL_I2C_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80024ea:	f001 fee7 	bl	80042bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024ee:	2100      	movs	r1, #0
 80024f0:	4809      	ldr	r0, [pc, #36]	; (8002518 <MX_I2C2_Init+0x74>)
 80024f2:	f007 fc1f 	bl	8009d34 <HAL_I2CEx_ConfigAnalogFilter>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80024fc:	f001 fede 	bl	80042bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002500:	2100      	movs	r1, #0
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <MX_I2C2_Init+0x74>)
 8002504:	f007 fc61 	bl	8009dca <HAL_I2CEx_ConfigDigitalFilter>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800250e:	f001 fed5 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20010a04 	.word	0x20010a04
 800251c:	40005800 	.word	0x40005800
 8002520:	007074af 	.word	0x007074af

08002524 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002528:	4b1c      	ldr	r3, [pc, #112]	; (800259c <MX_I2C3_Init+0x78>)
 800252a:	4a1d      	ldr	r2, [pc, #116]	; (80025a0 <MX_I2C3_Init+0x7c>)
 800252c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x100029FE;
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <MX_I2C3_Init+0x78>)
 8002530:	4a1c      	ldr	r2, [pc, #112]	; (80025a4 <MX_I2C3_Init+0x80>)
 8002532:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 152;
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <MX_I2C3_Init+0x78>)
 8002536:	2298      	movs	r2, #152	; 0x98
 8002538:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <MX_I2C3_Init+0x78>)
 800253c:	2201      	movs	r2, #1
 800253e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <MX_I2C3_Init+0x78>)
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <MX_I2C3_Init+0x78>)
 8002548:	2200      	movs	r2, #0
 800254a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <MX_I2C3_Init+0x78>)
 800254e:	2200      	movs	r2, #0
 8002550:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <MX_I2C3_Init+0x78>)
 8002554:	2200      	movs	r2, #0
 8002556:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002558:	4b10      	ldr	r3, [pc, #64]	; (800259c <MX_I2C3_Init+0x78>)
 800255a:	2200      	movs	r2, #0
 800255c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800255e:	480f      	ldr	r0, [pc, #60]	; (800259c <MX_I2C3_Init+0x78>)
 8002560:	f006 fcb8 	bl	8008ed4 <HAL_I2C_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800256a:	f001 fea7 	bl	80042bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800256e:	2100      	movs	r1, #0
 8002570:	480a      	ldr	r0, [pc, #40]	; (800259c <MX_I2C3_Init+0x78>)
 8002572:	f007 fbdf 	bl	8009d34 <HAL_I2CEx_ConfigAnalogFilter>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800257c:	f001 fe9e 	bl	80042bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002580:	2100      	movs	r1, #0
 8002582:	4806      	ldr	r0, [pc, #24]	; (800259c <MX_I2C3_Init+0x78>)
 8002584:	f007 fc21 	bl	8009dca <HAL_I2CEx_ConfigDigitalFilter>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800258e:	f001 fe95 	bl	80042bc <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8002592:	2004      	movs	r0, #4
 8002594:	f007 fc66 	bl	8009e64 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	200103a4 	.word	0x200103a4
 80025a0:	40005c00 	.word	0x40005c00
 80025a4:	100029fe 	.word	0x100029fe

080025a8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <MX_I2C4_Init+0x74>)
 80025ae:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <MX_I2C4_Init+0x78>)
 80025b0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x007074AF;
 80025b2:	4b1a      	ldr	r3, [pc, #104]	; (800261c <MX_I2C4_Init+0x74>)
 80025b4:	4a1b      	ldr	r2, [pc, #108]	; (8002624 <MX_I2C4_Init+0x7c>)
 80025b6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80025b8:	4b18      	ldr	r3, [pc, #96]	; (800261c <MX_I2C4_Init+0x74>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025be:	4b17      	ldr	r3, [pc, #92]	; (800261c <MX_I2C4_Init+0x74>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025c4:	4b15      	ldr	r3, [pc, #84]	; (800261c <MX_I2C4_Init+0x74>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80025ca:	4b14      	ldr	r3, [pc, #80]	; (800261c <MX_I2C4_Init+0x74>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <MX_I2C4_Init+0x74>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <MX_I2C4_Init+0x74>)
 80025d8:	2200      	movs	r2, #0
 80025da:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <MX_I2C4_Init+0x74>)
 80025de:	2200      	movs	r2, #0
 80025e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80025e2:	480e      	ldr	r0, [pc, #56]	; (800261c <MX_I2C4_Init+0x74>)
 80025e4:	f006 fc76 	bl	8008ed4 <HAL_I2C_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80025ee:	f001 fe65 	bl	80042bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025f2:	2100      	movs	r1, #0
 80025f4:	4809      	ldr	r0, [pc, #36]	; (800261c <MX_I2C4_Init+0x74>)
 80025f6:	f007 fb9d 	bl	8009d34 <HAL_I2CEx_ConfigAnalogFilter>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002600:	f001 fe5c 	bl	80042bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002604:	2100      	movs	r1, #0
 8002606:	4805      	ldr	r0, [pc, #20]	; (800261c <MX_I2C4_Init+0x74>)
 8002608:	f007 fbdf 	bl	8009dca <HAL_I2CEx_ConfigDigitalFilter>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002612:	f001 fe53 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200103f0 	.word	0x200103f0
 8002620:	40006000 	.word	0x40006000
 8002624:	007074af 	.word	0x007074af

08002628 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <MX_RTC_Init+0x44>)
 800262e:	4a10      	ldr	r2, [pc, #64]	; (8002670 <MX_RTC_Init+0x48>)
 8002630:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <MX_RTC_Init+0x44>)
 8002634:	2200      	movs	r2, #0
 8002636:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <MX_RTC_Init+0x44>)
 800263a:	227f      	movs	r2, #127	; 0x7f
 800263c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <MX_RTC_Init+0x44>)
 8002640:	22ff      	movs	r2, #255	; 0xff
 8002642:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <MX_RTC_Init+0x44>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <MX_RTC_Init+0x44>)
 800264c:	2200      	movs	r2, #0
 800264e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <MX_RTC_Init+0x44>)
 8002652:	2200      	movs	r2, #0
 8002654:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002656:	4805      	ldr	r0, [pc, #20]	; (800266c <MX_RTC_Init+0x44>)
 8002658:	f008 fe54 	bl	800b304 <HAL_RTC_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002662:	f001 fe2b 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20013388 	.word	0x20013388
 8002670:	40002800 	.word	0x40002800

08002674 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <MX_SPI4_Init+0x74>)
 800267a:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <MX_SPI4_Init+0x78>)
 800267c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800267e:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <MX_SPI4_Init+0x74>)
 8002680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002684:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <MX_SPI4_Init+0x74>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800268c:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <MX_SPI4_Init+0x74>)
 800268e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002692:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <MX_SPI4_Init+0x74>)
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <MX_SPI4_Init+0x74>)
 800269c:	2200      	movs	r2, #0
 800269e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026a6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026aa:	2210      	movs	r2, #16
 80026ac:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026bc:	2200      	movs	r2, #0
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026c2:	2207      	movs	r2, #7
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026d4:	f008 febe 	bl	800b454 <HAL_SPI_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80026de:	f001 fded 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20010340 	.word	0x20010340
 80026ec:	40013400 	.word	0x40013400

080026f0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <MX_SPI5_Init+0x74>)
 80026f6:	4a1c      	ldr	r2, [pc, #112]	; (8002768 <MX_SPI5_Init+0x78>)
 80026f8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <MX_SPI5_Init+0x74>)
 80026fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002700:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <MX_SPI5_Init+0x74>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <MX_SPI5_Init+0x74>)
 800270a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800270e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <MX_SPI5_Init+0x74>)
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <MX_SPI5_Init+0x74>)
 8002718:	2200      	movs	r2, #0
 800271a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <MX_SPI5_Init+0x74>)
 800271e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002722:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <MX_SPI5_Init+0x74>)
 8002726:	2218      	movs	r2, #24
 8002728:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <MX_SPI5_Init+0x74>)
 800272c:	2200      	movs	r2, #0
 800272e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <MX_SPI5_Init+0x74>)
 8002732:	2200      	movs	r2, #0
 8002734:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <MX_SPI5_Init+0x74>)
 8002738:	2200      	movs	r2, #0
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <MX_SPI5_Init+0x74>)
 800273e:	2207      	movs	r2, #7
 8002740:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <MX_SPI5_Init+0x74>)
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <MX_SPI5_Init+0x74>)
 800274a:	2200      	movs	r2, #0
 800274c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800274e:	4805      	ldr	r0, [pc, #20]	; (8002764 <MX_SPI5_Init+0x74>)
 8002750:	f008 fe80 	bl	800b454 <HAL_SPI_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800275a:	f001 fdaf 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200104bc 	.word	0x200104bc
 8002768:	40015000 	.word	0x40015000

0800276c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08e      	sub	sp, #56	; 0x38
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	609a      	str	r2, [r3, #8]
 800277e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002780:	f107 031c 	add.w	r3, r7, #28
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800278c:	463b      	mov	r3, r7
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	60da      	str	r2, [r3, #12]
 8002798:	611a      	str	r2, [r3, #16]
 800279a:	615a      	str	r2, [r3, #20]
 800279c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027a0:	4a2d      	ldr	r2, [pc, #180]	; (8002858 <MX_TIM4_Init+0xec>)
 80027a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80027a4:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027aa:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80027b0:	4b28      	ldr	r3, [pc, #160]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b8:	4b26      	ldr	r3, [pc, #152]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027be:	4b25      	ldr	r3, [pc, #148]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027c4:	4823      	ldr	r0, [pc, #140]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027c6:	f009 fa79 	bl	800bcbc <HAL_TIM_Base_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80027d0:	f001 fd74 	bl	80042bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80027da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027de:	4619      	mov	r1, r3
 80027e0:	481c      	ldr	r0, [pc, #112]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027e2:	f009 fd2d 	bl	800c240 <HAL_TIM_ConfigClockSource>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80027ec:	f001 fd66 	bl	80042bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80027f0:	4818      	ldr	r0, [pc, #96]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027f2:	f009 fab9 	bl	800bd68 <HAL_TIM_PWM_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80027fc:	f001 fd5e 	bl	80042bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002808:	f107 031c 	add.w	r3, r7, #28
 800280c:	4619      	mov	r1, r3
 800280e:	4811      	ldr	r0, [pc, #68]	; (8002854 <MX_TIM4_Init+0xe8>)
 8002810:	f00a f990 	bl	800cb34 <HAL_TIMEx_MasterConfigSynchronization>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800281a:	f001 fd4f 	bl	80042bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800281e:	2360      	movs	r3, #96	; 0x60
 8002820:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002826:	2300      	movs	r3, #0
 8002828:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800282e:	463b      	mov	r3, r7
 8002830:	2200      	movs	r2, #0
 8002832:	4619      	mov	r1, r3
 8002834:	4807      	ldr	r0, [pc, #28]	; (8002854 <MX_TIM4_Init+0xe8>)
 8002836:	f009 fbeb 	bl	800c010 <HAL_TIM_PWM_ConfigChannel>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002840:	f001 fd3c 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002844:	4803      	ldr	r0, [pc, #12]	; (8002854 <MX_TIM4_Init+0xe8>)
 8002846:	f004 fa67 	bl	8006d18 <HAL_TIM_MspPostInit>

}
 800284a:	bf00      	nop
 800284c:	3738      	adds	r7, #56	; 0x38
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20010520 	.word	0x20010520
 8002858:	40000800 	.word	0x40000800

0800285c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08e      	sub	sp, #56	; 0x38
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002870:	f107 031c 	add.w	r3, r7, #28
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800287c:	463b      	mov	r3, r7
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	60da      	str	r2, [r3, #12]
 8002888:	611a      	str	r2, [r3, #16]
 800288a:	615a      	str	r2, [r3, #20]
 800288c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800288e:	4b32      	ldr	r3, [pc, #200]	; (8002958 <MX_TIM5_Init+0xfc>)
 8002890:	4a32      	ldr	r2, [pc, #200]	; (800295c <MX_TIM5_Init+0x100>)
 8002892:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002894:	4b30      	ldr	r3, [pc, #192]	; (8002958 <MX_TIM5_Init+0xfc>)
 8002896:	2200      	movs	r2, #0
 8002898:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800289a:	4b2f      	ldr	r3, [pc, #188]	; (8002958 <MX_TIM5_Init+0xfc>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80028a0:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028a2:	f04f 32ff 	mov.w	r2, #4294967295
 80028a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a8:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ae:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80028b4:	4828      	ldr	r0, [pc, #160]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028b6:	f009 fa01 	bl	800bcbc <HAL_TIM_Base_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80028c0:	f001 fcfc 	bl	80042bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80028ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028ce:	4619      	mov	r1, r3
 80028d0:	4821      	ldr	r0, [pc, #132]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028d2:	f009 fcb5 	bl	800c240 <HAL_TIM_ConfigClockSource>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80028dc:	f001 fcee 	bl	80042bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80028e0:	481d      	ldr	r0, [pc, #116]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028e2:	f009 fa41 	bl	800bd68 <HAL_TIM_PWM_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80028ec:	f001 fce6 	bl	80042bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	4619      	mov	r1, r3
 80028fe:	4816      	ldr	r0, [pc, #88]	; (8002958 <MX_TIM5_Init+0xfc>)
 8002900:	f00a f918 	bl	800cb34 <HAL_TIMEx_MasterConfigSynchronization>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800290a:	f001 fcd7 	bl	80042bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800290e:	2360      	movs	r3, #96	; 0x60
 8002910:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800291e:	463b      	mov	r3, r7
 8002920:	2200      	movs	r2, #0
 8002922:	4619      	mov	r1, r3
 8002924:	480c      	ldr	r0, [pc, #48]	; (8002958 <MX_TIM5_Init+0xfc>)
 8002926:	f009 fb73 	bl	800c010 <HAL_TIM_PWM_ConfigChannel>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002930:	f001 fcc4 	bl	80042bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002934:	463b      	mov	r3, r7
 8002936:	2204      	movs	r2, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4807      	ldr	r0, [pc, #28]	; (8002958 <MX_TIM5_Init+0xfc>)
 800293c:	f009 fb68 	bl	800c010 <HAL_TIM_PWM_ConfigChannel>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8002946:	f001 fcb9 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800294a:	4803      	ldr	r0, [pc, #12]	; (8002958 <MX_TIM5_Init+0xfc>)
 800294c:	f004 f9e4 	bl	8006d18 <HAL_TIM_MspPostInit>

}
 8002950:	bf00      	nop
 8002952:	3738      	adds	r7, #56	; 0x38
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20010ab4 	.word	0x20010ab4
 800295c:	40000c00 	.word	0x40000c00

08002960 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <MX_UART4_Init+0x58>)
 8002966:	4a15      	ldr	r2, [pc, #84]	; (80029bc <MX_UART4_Init+0x5c>)
 8002968:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800296a:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <MX_UART4_Init+0x58>)
 800296c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002970:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <MX_UART4_Init+0x58>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <MX_UART4_Init+0x58>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <MX_UART4_Init+0x58>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <MX_UART4_Init+0x58>)
 8002986:	220c      	movs	r2, #12
 8002988:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <MX_UART4_Init+0x58>)
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <MX_UART4_Init+0x58>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <MX_UART4_Init+0x58>)
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <MX_UART4_Init+0x58>)
 800299e:	2200      	movs	r2, #0
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_UART4_Init+0x58>)
 80029a4:	f00a f972 	bl	800cc8c <HAL_UART_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80029ae:	f001 fc85 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20015abc 	.word	0x20015abc
 80029bc:	40004c00 	.word	0x40004c00

080029c0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80029c4:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <MX_UART5_Init+0x58>)
 80029c6:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <MX_UART5_Init+0x5c>)
 80029c8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80029ca:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <MX_UART5_Init+0x58>)
 80029cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029d0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80029d2:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <MX_UART5_Init+0x58>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <MX_UART5_Init+0x58>)
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80029de:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <MX_UART5_Init+0x58>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <MX_UART5_Init+0x58>)
 80029e6:	220c      	movs	r2, #12
 80029e8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <MX_UART5_Init+0x58>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <MX_UART5_Init+0x58>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <MX_UART5_Init+0x58>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <MX_UART5_Init+0x58>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002a02:	4805      	ldr	r0, [pc, #20]	; (8002a18 <MX_UART5_Init+0x58>)
 8002a04:	f00a f942 	bl	800cc8c <HAL_UART_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002a0e:	f001 fc55 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20013204 	.word	0x20013204
 8002a1c:	40005000 	.word	0x40005000

08002a20 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002a24:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a26:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <MX_UART7_Init+0x5c>)
 8002a28:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002a2a:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a30:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002a38:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a46:	220c      	movs	r2, #12
 8002a48:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a4c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002a50:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002a64:	4804      	ldr	r0, [pc, #16]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a66:	f00a f911 	bl	800cc8c <HAL_UART_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_UART7_Init+0x54>
  {
    Error_Handler();
 8002a70:	f001 fc24 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	2001043c 	.word	0x2001043c
 8002a7c:	40007800 	.word	0x40007800

08002a80 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002a8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a8e:	2206      	movs	r2, #6
 8002a90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a94:	2202      	movs	r2, #2
 8002a96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002ac2:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ac4:	f007 f9ee 	bl	8009ea4 <HAL_PCD_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002ace:	f001 fbf5 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20010600 	.word	0x20010600

08002adc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ae2:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <MX_DMA_Init+0x80>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <MX_DMA_Init+0x80>)
 8002ae8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <MX_DMA_Init+0x80>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002afa:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <MX_DMA_Init+0x80>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <MX_DMA_Init+0x80>)
 8002b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <MX_DMA_Init+0x80>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2105      	movs	r1, #5
 8002b16:	200b      	movs	r0, #11
 8002b18:	f005 fb90 	bl	800823c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002b1c:	200b      	movs	r0, #11
 8002b1e:	f005 fba9 	bl	8008274 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2105      	movs	r1, #5
 8002b26:	2038      	movs	r0, #56	; 0x38
 8002b28:	f005 fb88 	bl	800823c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b2c:	2038      	movs	r0, #56	; 0x38
 8002b2e:	f005 fba1 	bl	8008274 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2105      	movs	r1, #5
 8002b36:	2039      	movs	r0, #57	; 0x39
 8002b38:	f005 fb80 	bl	800823c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002b3c:	2039      	movs	r0, #57	; 0x39
 8002b3e:	f005 fb99 	bl	8008274 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2105      	movs	r1, #5
 8002b46:	203a      	movs	r0, #58	; 0x3a
 8002b48:	f005 fb78 	bl	800823c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002b4c:	203a      	movs	r0, #58	; 0x3a
 8002b4e:	f005 fb91 	bl	8008274 <HAL_NVIC_EnableIRQ>

}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800

08002b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b090      	sub	sp, #64	; 0x40
 8002b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	609a      	str	r2, [r3, #8]
 8002b72:	60da      	str	r2, [r3, #12]
 8002b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b76:	4bb0      	ldr	r3, [pc, #704]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4aaf      	ldr	r2, [pc, #700]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b7c:	f043 0310 	orr.w	r3, r3, #16
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4bad      	ldr	r3, [pc, #692]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b8e:	4baa      	ldr	r3, [pc, #680]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4aa9      	ldr	r2, [pc, #676]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4ba7      	ldr	r3, [pc, #668]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba6:	4ba4      	ldr	r3, [pc, #656]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4aa3      	ldr	r2, [pc, #652]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4ba1      	ldr	r3, [pc, #644]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	623b      	str	r3, [r7, #32]
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bbe:	4b9e      	ldr	r3, [pc, #632]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	4a9d      	ldr	r2, [pc, #628]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bca:	4b9b      	ldr	r3, [pc, #620]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd6:	4b98      	ldr	r3, [pc, #608]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a97      	ldr	r2, [pc, #604]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b95      	ldr	r3, [pc, #596]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	61bb      	str	r3, [r7, #24]
 8002bec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002bee:	4b92      	ldr	r3, [pc, #584]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a91      	ldr	r2, [pc, #580]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b8f      	ldr	r3, [pc, #572]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002c06:	4b8c      	ldr	r3, [pc, #560]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	4a8b      	ldr	r2, [pc, #556]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c10:	6313      	str	r3, [r2, #48]	; 0x30
 8002c12:	4b89      	ldr	r3, [pc, #548]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c1e:	4b86      	ldr	r3, [pc, #536]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a85      	ldr	r2, [pc, #532]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c24:	f043 0320 	orr.w	r3, r3, #32
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b83      	ldr	r3, [pc, #524]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c36:	4b80      	ldr	r3, [pc, #512]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a7f      	ldr	r2, [pc, #508]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c3c:	f043 0308 	orr.w	r3, r3, #8
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b7d      	ldr	r3, [pc, #500]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c4e:	4b7a      	ldr	r3, [pc, #488]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a79      	ldr	r2, [pc, #484]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b77      	ldr	r3, [pc, #476]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002c66:	4b74      	ldr	r3, [pc, #464]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a73      	ldr	r2, [pc, #460]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b71      	ldr	r3, [pc, #452]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2110      	movs	r1, #16
 8002c82:	486e      	ldr	r0, [pc, #440]	; (8002e3c <MX_GPIO_Init+0x2dc>)
 8002c84:	f006 f8ce 	bl	8008e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f244 012f 	movw	r1, #16431	; 0x402f
 8002c8e:	486c      	ldr	r0, [pc, #432]	; (8002e40 <MX_GPIO_Init+0x2e0>)
 8002c90:	f006 f8c8 	bl	8008e24 <HAL_GPIO_WritePin>
                          |OUT0_1V8_Pin|OUT2_1V8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8002c94:	2200      	movs	r2, #0
 8002c96:	f241 1150 	movw	r1, #4432	; 0x1150
 8002c9a:	486a      	ldr	r0, [pc, #424]	; (8002e44 <MX_GPIO_Init+0x2e4>)
 8002c9c:	f006 f8c2 	bl	8008e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MCU_CTRL2_Pin|MCU_CTRL1_Pin, GPIO_PIN_RESET);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2103      	movs	r1, #3
 8002ca4:	4868      	ldr	r0, [pc, #416]	; (8002e48 <MX_GPIO_Init+0x2e8>)
 8002ca6:	f006 f8bd 	bl	8008e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002caa:	2200      	movs	r2, #0
 8002cac:	f243 013c 	movw	r1, #12348	; 0x303c
 8002cb0:	4866      	ldr	r0, [pc, #408]	; (8002e4c <MX_GPIO_Init+0x2ec>)
 8002cb2:	f006 f8b7 	bl	8008e24 <HAL_GPIO_WritePin>
                          |BTN4_Pin|BTN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin, GPIO_PIN_RESET);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f241 0104 	movw	r1, #4100	; 0x1004
 8002cbc:	4864      	ldr	r0, [pc, #400]	; (8002e50 <MX_GPIO_Init+0x2f0>)
 8002cbe:	f006 f8b1 	bl	8008e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin, GPIO_PIN_RESET);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002cc8:	4862      	ldr	r0, [pc, #392]	; (8002e54 <MX_GPIO_Init+0x2f4>)
 8002cca:	f006 f8ab 	bl	8008e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	211b      	movs	r1, #27
 8002cd2:	4861      	ldr	r0, [pc, #388]	; (8002e58 <MX_GPIO_Init+0x2f8>)
 8002cd4:	f006 f8a6 	bl	8008e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_SS_Pin;
 8002cd8:	2310      	movs	r3, #16
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_SS_GPIO_Port, &GPIO_InitStruct);
 8002ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cec:	4619      	mov	r1, r3
 8002cee:	4853      	ldr	r0, [pc, #332]	; (8002e3c <MX_GPIO_Init+0x2dc>)
 8002cf0:	f005 fed6 	bl	8008aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT11_Pin */
  GPIO_InitStruct.Pin = UI_INPUT11_Pin;
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT11_GPIO_Port, &GPIO_InitStruct);
 8002d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d04:	4619      	mov	r1, r3
 8002d06:	484d      	ldr	r0, [pc, #308]	; (8002e3c <MX_GPIO_Init+0x2dc>)
 8002d08:	f005 feca 	bl	8008aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_1V8_Pin OUT1_1V8_Pin OUT1_OD_Pin OUT0_OD_Pin
                           OUT0_1V8_Pin OUT2_1V8_Pin */
  GPIO_InitStruct.Pin = OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002d0c:	f244 032f 	movw	r3, #16431	; 0x402f
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |OUT0_1V8_Pin|OUT2_1V8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d12:	2301      	movs	r3, #1
 8002d14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d22:	4619      	mov	r1, r3
 8002d24:	4846      	ldr	r0, [pc, #280]	; (8002e40 <MX_GPIO_Init+0x2e0>)
 8002d26:	f005 febb 	bl	8008aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT0_Pin */
  GPIO_InitStruct.Pin = UI_INPUT0_Pin;
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT0_GPIO_Port, &GPIO_InitStruct);
 8002d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4845      	ldr	r0, [pc, #276]	; (8002e54 <MX_GPIO_Init+0x2f4>)
 8002d3e:	f005 feaf 	bl	8008aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_CONFIG_Pin OUT1_CONFIG_Pin OUT2_CONFIG_Pin MCU_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin;
 8002d42:	f241 1350 	movw	r3, #4432	; 0x1150
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d50:	2300      	movs	r3, #0
 8002d52:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d58:	4619      	mov	r1, r3
 8002d5a:	483a      	ldr	r0, [pc, #232]	; (8002e44 <MX_GPIO_Init+0x2e4>)
 8002d5c:	f005 fea0 	bl	8008aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin BACK_BTN_Pin */
  GPIO_InitStruct.Pin = DWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin|BACK_BTN_Pin;
 8002d60:	23f0      	movs	r3, #240	; 0xf0
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d64:	4b3d      	ldr	r3, [pc, #244]	; (8002e5c <MX_GPIO_Init+0x2fc>)
 8002d66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d70:	4619      	mov	r1, r3
 8002d72:	4835      	ldr	r0, [pc, #212]	; (8002e48 <MX_GPIO_Init+0x2e8>)
 8002d74:	f005 fe94 	bl	8008aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT1_Pin */
  GPIO_InitStruct.Pin = UI_INPUT1_Pin;
 8002d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT1_GPIO_Port, &GPIO_InitStruct);
 8002d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4834      	ldr	r0, [pc, #208]	; (8002e60 <MX_GPIO_Init+0x300>)
 8002d8e:	f005 fe87 	bl	8008aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_INPUT2_Pin UI_INPUT10_Pin UI_INPUT5_Pin UI_INPUT9_Pin
                           UI_INPUT4_Pin UI_INPUT3_Pin UI_INPUT7_Pin UI_INPUT8_Pin
                           UI_INPUT6_Pin */
  GPIO_InitStruct.Pin = UI_INPUT2_Pin|UI_INPUT10_Pin|UI_INPUT5_Pin|UI_INPUT9_Pin
 8002d92:	f64f 7310 	movw	r3, #65296	; 0xff10
 8002d96:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |UI_INPUT4_Pin|UI_INPUT3_Pin|UI_INPUT7_Pin|UI_INPUT8_Pin
                          |UI_INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002da4:	4619      	mov	r1, r3
 8002da6:	482f      	ldr	r0, [pc, #188]	; (8002e64 <MX_GPIO_Init+0x304>)
 8002da8:	f005 fe7a 	bl	8008aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL2_Pin MCU_CTRL1_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL2_Pin|MCU_CTRL1_Pin;
 8002dac:	2303      	movs	r3, #3
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db0:	2301      	movs	r3, #1
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db8:	2300      	movs	r3, #0
 8002dba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002dbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4821      	ldr	r0, [pc, #132]	; (8002e48 <MX_GPIO_Init+0x2e8>)
 8002dc4:	f005 fe6c 	bl	8008aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002dc8:	f243 033c 	movw	r3, #12348	; 0x303c
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BTN4_Pin|BTN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dde:	4619      	mov	r1, r3
 8002de0:	481a      	ldr	r0, [pc, #104]	; (8002e4c <MX_GPIO_Init+0x2ec>)
 8002de2:	f005 fe5d 	bl	8008aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_CONFIG_Pin FRONT_LED_CTRL_Pin */
  GPIO_InitStruct.Pin = OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin;
 8002de6:	f241 0304 	movw	r3, #4100	; 0x1004
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dec:	2301      	movs	r3, #1
 8002dee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df4:	2300      	movs	r3, #0
 8002df6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4814      	ldr	r0, [pc, #80]	; (8002e50 <MX_GPIO_Init+0x2f0>)
 8002e00:	f005 fe4e 	bl	8008aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ZION_PWR_EN_Pin EDL_EN_Pin SPARE_SW_EN_Pin */
  GPIO_InitStruct.Pin = ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin;
 8002e04:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e12:	2300      	movs	r3, #0
 8002e14:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	480d      	ldr	r0, [pc, #52]	; (8002e54 <MX_GPIO_Init+0x2f4>)
 8002e1e:	f005 fe3f 	bl	8008aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL0_Pin UART_MUX_CTRL_Pin LCD_EXTMODE_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin;
 8002e22:	231b      	movs	r3, #27
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e26:	2301      	movs	r3, #1
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e36:	e017      	b.n	8002e68 <MX_GPIO_Init+0x308>
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40021800 	.word	0x40021800
 8002e44:	40022000 	.word	0x40022000
 8002e48:	40022800 	.word	0x40022800
 8002e4c:	40021400 	.word	0x40021400
 8002e50:	40021c00 	.word	0x40021c00
 8002e54:	40020400 	.word	0x40020400
 8002e58:	40022400 	.word	0x40022400
 8002e5c:	10210000 	.word	0x10210000
 8002e60:	40020800 	.word	0x40020800
 8002e64:	40020c00 	.word	0x40020c00
 8002e68:	4619      	mov	r1, r3
 8002e6a:	480b      	ldr	r0, [pc, #44]	; (8002e98 <MX_GPIO_Init+0x338>)
 8002e6c:	f005 fe18 	bl	8008aa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002e70:	2200      	movs	r2, #0
 8002e72:	2105      	movs	r1, #5
 8002e74:	200a      	movs	r0, #10
 8002e76:	f005 f9e1 	bl	800823c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002e7a:	200a      	movs	r0, #10
 8002e7c:	f005 f9fa 	bl	8008274 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002e80:	2200      	movs	r2, #0
 8002e82:	2105      	movs	r1, #5
 8002e84:	2017      	movs	r0, #23
 8002e86:	f005 f9d9 	bl	800823c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e8a:	2017      	movs	r0, #23
 8002e8c:	f005 f9f2 	bl	8008274 <HAL_NVIC_EnableIRQ>

}
 8002e90:	bf00      	nop
 8002e92:	3740      	adds	r7, #64	; 0x40
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40022400 	.word	0x40022400

08002e9c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 8002ea4:	1d39      	adds	r1, r7, #4
 8002ea6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eaa:	2201      	movs	r2, #1
 8002eac:	4803      	ldr	r0, [pc, #12]	; (8002ebc <__io_putchar+0x20>)
 8002eae:	f009 ff3b 	bl	800cd28 <HAL_UART_Transmit>

	return ch;
 8002eb2:	687b      	ldr	r3, [r7, #4]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	2001043c 	.word	0x2001043c

08002ec0 <outputGPIOBufInitialization>:

void outputGPIOBufInitialization(){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
	memset(gpioOutputState,0,sizeof(gpioOutputState));
 8002ec4:	220e      	movs	r2, #14
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <outputGPIOBufInitialization+0x14>)
 8002eca:	f00d fd54 	bl	8010976 <memset>
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20013378 	.word	0x20013378

08002ed8 <uartTransmitInt>:
	uart_buf_len = sprintf(uart_buf, message);
	if (uart == 7){
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}
}
void uartTransmitInt(uint16_t *number, int uart){
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b098      	sub	sp, #96	; 0x60
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
	char uart_buf[80];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, "0x%x\r\n", number);
 8002ee2:	f107 030c 	add.w	r3, r7, #12
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4909      	ldr	r1, [pc, #36]	; (8002f10 <uartTransmitInt+0x38>)
 8002eea:	4618      	mov	r0, r3
 8002eec:	f00e fbde 	bl	80116ac <siprintf>
 8002ef0:	65f8      	str	r0, [r7, #92]	; 0x5c
	if (uart == 7){
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b07      	cmp	r3, #7
 8002ef6:	d107      	bne.n	8002f08 <uartTransmitInt+0x30>
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
 8002ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	f107 010c 	add.w	r1, r7, #12
 8002f00:	2364      	movs	r3, #100	; 0x64
 8002f02:	4804      	ldr	r0, [pc, #16]	; (8002f14 <uartTransmitInt+0x3c>)
 8002f04:	f009 ff10 	bl	800cd28 <HAL_UART_Transmit>
	}

}
 8002f08:	bf00      	nop
 8002f0a:	3760      	adds	r7, #96	; 0x60
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	08014cbc 	.word	0x08014cbc
 8002f14:	2001043c 	.word	0x2001043c

08002f18 <readI2CRegister>:
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}

}

uint8_t * readI2CRegister(uint8_t address, uint8_t reg, int bytes, int i2CBank){
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60ba      	str	r2, [r7, #8]
 8002f20:	607b      	str	r3, [r7, #4]
 8002f22:	4603      	mov	r3, r0
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	460b      	mov	r3, r1
 8002f28:	73bb      	strb	r3, [r7, #14]
	static uint8_t buf[20];
	HAL_StatusTypeDef ret;
	buf[0]=reg;
 8002f2a:	4a4f      	ldr	r2, [pc, #316]	; (8003068 <readI2CRegister+0x150>)
 8002f2c:	7bbb      	ldrb	r3, [r7, #14]
 8002f2e:	7013      	strb	r3, [r2, #0]
  	if(i2CBank == 1){
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10c      	bne.n	8002f50 <readI2CRegister+0x38>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	b299      	uxth	r1, r3
 8002f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2301      	movs	r3, #1
 8002f42:	4a49      	ldr	r2, [pc, #292]	; (8003068 <readI2CRegister+0x150>)
 8002f44:	4849      	ldr	r0, [pc, #292]	; (800306c <readI2CRegister+0x154>)
 8002f46:	f006 f855 	bl	8008ff4 <HAL_I2C_Master_Transmit>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	75fb      	strb	r3, [r7, #23]
 8002f4e:	e02e      	b.n	8002fae <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 2){
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d10c      	bne.n	8002f70 <readI2CRegister+0x58>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	b299      	uxth	r1, r3
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2301      	movs	r3, #1
 8002f62:	4a41      	ldr	r2, [pc, #260]	; (8003068 <readI2CRegister+0x150>)
 8002f64:	4842      	ldr	r0, [pc, #264]	; (8003070 <readI2CRegister+0x158>)
 8002f66:	f006 f845 	bl	8008ff4 <HAL_I2C_Master_Transmit>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	75fb      	strb	r3, [r7, #23]
 8002f6e:	e01e      	b.n	8002fae <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 3){
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d10c      	bne.n	8002f90 <readI2CRegister+0x78>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, 1, HAL_MAX_DELAY);
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	b299      	uxth	r1, r3
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2301      	movs	r3, #1
 8002f82:	4a39      	ldr	r2, [pc, #228]	; (8003068 <readI2CRegister+0x150>)
 8002f84:	483b      	ldr	r0, [pc, #236]	; (8003074 <readI2CRegister+0x15c>)
 8002f86:	f006 f835 	bl	8008ff4 <HAL_I2C_Master_Transmit>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	75fb      	strb	r3, [r7, #23]
 8002f8e:	e00e      	b.n	8002fae <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 4){
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d10b      	bne.n	8002fae <readI2CRegister+0x96>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, 1, HAL_MAX_DELAY);
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	b299      	uxth	r1, r3
 8002f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	4a31      	ldr	r2, [pc, #196]	; (8003068 <readI2CRegister+0x150>)
 8002fa4:	4834      	ldr	r0, [pc, #208]	; (8003078 <readI2CRegister+0x160>)
 8002fa6:	f006 f825 	bl	8008ff4 <HAL_I2C_Master_Transmit>
 8002faa:	4603      	mov	r3, r0
 8002fac:	75fb      	strb	r3, [r7, #23]
  	}
	  if ( ret != HAL_OK ) {
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <readI2CRegister+0xa0>
	          return 0xfe;
 8002fb4:	23fe      	movs	r3, #254	; 0xfe
 8002fb6:	e052      	b.n	800305e <readI2CRegister+0x146>
	        }
	  else {
		  if(i2CBank == 1){
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d10e      	bne.n	8002fdc <readI2CRegister+0xc4>
				ret = HAL_I2C_Master_Receive(&hi2c1, address, buf, bytes, HAL_MAX_DELAY);
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	b299      	uxth	r1, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	4a26      	ldr	r2, [pc, #152]	; (8003068 <readI2CRegister+0x150>)
 8002fd0:	4826      	ldr	r0, [pc, #152]	; (800306c <readI2CRegister+0x154>)
 8002fd2:	f006 f903 	bl	80091dc <HAL_I2C_Master_Receive>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	75fb      	strb	r3, [r7, #23]
 8002fda:	e034      	b.n	8003046 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 2){
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d10e      	bne.n	8003000 <readI2CRegister+0xe8>
				ret = HAL_I2C_Master_Receive(&hi2c2, address, buf, bytes, HAL_MAX_DELAY);
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	b299      	uxth	r1, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <readI2CRegister+0x150>)
 8002ff4:	481e      	ldr	r0, [pc, #120]	; (8003070 <readI2CRegister+0x158>)
 8002ff6:	f006 f8f1 	bl	80091dc <HAL_I2C_Master_Receive>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	75fb      	strb	r3, [r7, #23]
 8002ffe:	e022      	b.n	8003046 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 3){
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d10e      	bne.n	8003024 <readI2CRegister+0x10c>
				ret = HAL_I2C_Master_Receive(&hi2c3, address, buf, bytes, HAL_MAX_DELAY);
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	b299      	uxth	r1, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	b29a      	uxth	r2, r3
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	4a14      	ldr	r2, [pc, #80]	; (8003068 <readI2CRegister+0x150>)
 8003018:	4816      	ldr	r0, [pc, #88]	; (8003074 <readI2CRegister+0x15c>)
 800301a:	f006 f8df 	bl	80091dc <HAL_I2C_Master_Receive>
 800301e:	4603      	mov	r3, r0
 8003020:	75fb      	strb	r3, [r7, #23]
 8003022:	e010      	b.n	8003046 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 4){
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b04      	cmp	r3, #4
 8003028:	d10d      	bne.n	8003046 <readI2CRegister+0x12e>
				ret = HAL_I2C_Master_Receive(&hi2c4, address, buf, bytes, HAL_MAX_DELAY);
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	b299      	uxth	r1, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	b29a      	uxth	r2, r3
 8003032:	f04f 33ff 	mov.w	r3, #4294967295
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	4a0b      	ldr	r2, [pc, #44]	; (8003068 <readI2CRegister+0x150>)
 800303c:	480e      	ldr	r0, [pc, #56]	; (8003078 <readI2CRegister+0x160>)
 800303e:	f006 f8cd 	bl	80091dc <HAL_I2C_Master_Receive>
 8003042:	4603      	mov	r3, r0
 8003044:	75fb      	strb	r3, [r7, #23]
			}
		  if ( ret != HAL_OK ) {
 8003046:	7dfb      	ldrb	r3, [r7, #23]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <readI2CRegister+0x138>
		          return 0xfe;
 800304c:	23fe      	movs	r3, #254	; 0xfe
 800304e:	e006      	b.n	800305e <readI2CRegister+0x146>
		        }
		  else{
			  uartTransmitInt(buf[0],7);
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <readI2CRegister+0x150>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2107      	movs	r1, #7
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff ff3e 	bl	8002ed8 <uartTransmitInt>
			  return buf;
 800305c:	4b02      	ldr	r3, [pc, #8]	; (8003068 <readI2CRegister+0x150>)
		  }
}
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20003264 	.word	0x20003264
 800306c:	200105b4 	.word	0x200105b4
 8003070:	20010a04 	.word	0x20010a04
 8003074:	200103a4 	.word	0x200103a4
 8003078:	200103f0 	.word	0x200103f0

0800307c <writeI2CRegister>:
int writeI2CRegister(uint8_t address, uint8_t reg, uint8_t * bytes, int numBytes, int i2CBank){
 800307c:	b580      	push	{r7, lr}
 800307e:	b08e      	sub	sp, #56	; 0x38
 8003080:	af02      	add	r7, sp, #8
 8003082:	60ba      	str	r2, [r7, #8]
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	4603      	mov	r3, r0
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	460b      	mov	r3, r1
 800308c:	73bb      	strb	r3, [r7, #14]
	  	uint8_t buf[20];
	  	HAL_StatusTypeDef ret;
	  	buf[0]=reg;
 800308e:	7bbb      	ldrb	r3, [r7, #14]
 8003090:	753b      	strb	r3, [r7, #20]
	  	int x = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 8003096:	2300      	movs	r3, #0
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
 800309a:	e00d      	b.n	80030b8 <writeI2CRegister+0x3c>
	  		buf[1+x] = bytes[x];
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	441a      	add	r2, r3
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a4:	3301      	adds	r3, #1
 80030a6:	7812      	ldrb	r2, [r2, #0]
 80030a8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80030ac:	440b      	add	r3, r1
 80030ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	3301      	adds	r3, #1
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d9ee      	bls.n	800309c <writeI2CRegister+0x20>
	  	}
	  	if(i2CBank == 1){
 80030be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d112      	bne.n	80030ea <writeI2CRegister+0x6e>
	  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, numBytes+1, HAL_MAX_DELAY);
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	b299      	uxth	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3301      	adds	r3, #1
 80030ce:	b298      	uxth	r0, r3
 80030d0:	f107 0214 	add.w	r2, r7, #20
 80030d4:	f04f 33ff 	mov.w	r3, #4294967295
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	4603      	mov	r3, r0
 80030dc:	4829      	ldr	r0, [pc, #164]	; (8003184 <writeI2CRegister+0x108>)
 80030de:	f005 ff89 	bl	8008ff4 <HAL_I2C_Master_Transmit>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80030e8:	e040      	b.n	800316c <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 2){
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d112      	bne.n	8003116 <writeI2CRegister+0x9a>
	  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, numBytes+1, HAL_MAX_DELAY);
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	b299      	uxth	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3301      	adds	r3, #1
 80030fa:	b298      	uxth	r0, r3
 80030fc:	f107 0214 	add.w	r2, r7, #20
 8003100:	f04f 33ff 	mov.w	r3, #4294967295
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	4603      	mov	r3, r0
 8003108:	481f      	ldr	r0, [pc, #124]	; (8003188 <writeI2CRegister+0x10c>)
 800310a:	f005 ff73 	bl	8008ff4 <HAL_I2C_Master_Transmit>
 800310e:	4603      	mov	r3, r0
 8003110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003114:	e02a      	b.n	800316c <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 3){
 8003116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003118:	2b03      	cmp	r3, #3
 800311a:	d112      	bne.n	8003142 <writeI2CRegister+0xc6>
	  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, numBytes+1, HAL_MAX_DELAY);
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	b299      	uxth	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	b29b      	uxth	r3, r3
 8003124:	3301      	adds	r3, #1
 8003126:	b298      	uxth	r0, r3
 8003128:	f107 0214 	add.w	r2, r7, #20
 800312c:	f04f 33ff 	mov.w	r3, #4294967295
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	4603      	mov	r3, r0
 8003134:	4815      	ldr	r0, [pc, #84]	; (800318c <writeI2CRegister+0x110>)
 8003136:	f005 ff5d 	bl	8008ff4 <HAL_I2C_Master_Transmit>
 800313a:	4603      	mov	r3, r0
 800313c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003140:	e014      	b.n	800316c <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 4){
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	2b04      	cmp	r3, #4
 8003146:	d111      	bne.n	800316c <writeI2CRegister+0xf0>
	  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	b299      	uxth	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	b29b      	uxth	r3, r3
 8003150:	3301      	adds	r3, #1
 8003152:	b298      	uxth	r0, r3
 8003154:	f107 0214 	add.w	r2, r7, #20
 8003158:	f04f 33ff 	mov.w	r3, #4294967295
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	4603      	mov	r3, r0
 8003160:	480b      	ldr	r0, [pc, #44]	; (8003190 <writeI2CRegister+0x114>)
 8003162:	f005 ff47 	bl	8008ff4 <HAL_I2C_Master_Transmit>
 8003166:	4603      	mov	r3, r0
 8003168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  	}
	  	if ( ret != HAL_OK ) {
 800316c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <writeI2CRegister+0xfc>
	  	          return 0;
 8003174:	2300      	movs	r3, #0
 8003176:	e000      	b.n	800317a <writeI2CRegister+0xfe>
	  	        }
	  	else {
	  		  return 1;
 8003178:	2301      	movs	r3, #1
	  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	3730      	adds	r7, #48	; 0x30
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200105b4 	.word	0x200105b4
 8003188:	20010a04 	.word	0x20010a04
 800318c:	200103a4 	.word	0x200103a4
 8003190:	200103f0 	.word	0x200103f0

08003194 <configureLEDDriver>:
void configureLEDDriver(){
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af02      	add	r7, sp, #8
	uint8_t currentMultiplier = 0b00000001;
 800319a:	2301      	movs	r3, #1
 800319c:	71fb      	strb	r3, [r7, #7]
	static uint8_t* clear[1];
	clear[0]=0x0;
 800319e:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <configureLEDDriver+0x110>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
	uint8_t * buf;
	//reduce the current multiplier to set brightness lower. See if this works. If not, we can work with PWM.
	writeI2CRegister(LED.address, LED.iref_reg, currentMultiplier,1,LED.i2cBank);
 80031a4:	4b40      	ldr	r3, [pc, #256]	; (80032a8 <configureLEDDriver+0x114>)
 80031a6:	7818      	ldrb	r0, [r3, #0]
 80031a8:	4b3f      	ldr	r3, [pc, #252]	; (80032a8 <configureLEDDriver+0x114>)
 80031aa:	7999      	ldrb	r1, [r3, #6]
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <configureLEDDriver+0x114>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	2301      	movs	r3, #1
 80031b8:	f7ff ff60 	bl	800307c <writeI2CRegister>
	buf = readI2CRegister(LED.address,LED.iref_reg,1,LED.i2cBank);
 80031bc:	4b3a      	ldr	r3, [pc, #232]	; (80032a8 <configureLEDDriver+0x114>)
 80031be:	7818      	ldrb	r0, [r3, #0]
 80031c0:	4b39      	ldr	r3, [pc, #228]	; (80032a8 <configureLEDDriver+0x114>)
 80031c2:	7999      	ldrb	r1, [r3, #6]
 80031c4:	4b38      	ldr	r3, [pc, #224]	; (80032a8 <configureLEDDriver+0x114>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f7ff fea5 	bl	8002f18 <readI2CRegister>
 80031ce:	6038      	str	r0, [r7, #0]
	uartTransmitInt(buf[0],7);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2107      	movs	r1, #7
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fe7e 	bl	8002ed8 <uartTransmitInt>
	//Turn on oscillator. Must be turned on before LED driver functions
	writeI2CRegister(LED.address,LED.mode0_reg,LED.mode0_oscon_value,1,LED.i2cBank);
 80031dc:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <configureLEDDriver+0x114>)
 80031de:	7818      	ldrb	r0, [r3, #0]
 80031e0:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <configureLEDDriver+0x114>)
 80031e2:	7859      	ldrb	r1, [r3, #1]
 80031e4:	4b30      	ldr	r3, [pc, #192]	; (80032a8 <configureLEDDriver+0x114>)
 80031e6:	79db      	ldrb	r3, [r3, #7]
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b2f      	ldr	r3, [pc, #188]	; (80032a8 <configureLEDDriver+0x114>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2301      	movs	r3, #1
 80031f2:	f7ff ff43 	bl	800307c <writeI2CRegister>
	//clear the default state of the led register.
	writeI2CRegister(LED.address,LED.led0_reg,clear,1,LED.i2cBank);
 80031f6:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <configureLEDDriver+0x114>)
 80031f8:	7818      	ldrb	r0, [r3, #0]
 80031fa:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <configureLEDDriver+0x114>)
 80031fc:	7899      	ldrb	r1, [r3, #2]
 80031fe:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <configureLEDDriver+0x114>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	2301      	movs	r3, #1
 8003206:	4a27      	ldr	r2, [pc, #156]	; (80032a4 <configureLEDDriver+0x110>)
 8003208:	f7ff ff38 	bl	800307c <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led1_reg,clear,1,LED.i2cBank);
 800320c:	4b26      	ldr	r3, [pc, #152]	; (80032a8 <configureLEDDriver+0x114>)
 800320e:	7818      	ldrb	r0, [r3, #0]
 8003210:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <configureLEDDriver+0x114>)
 8003212:	78d9      	ldrb	r1, [r3, #3]
 8003214:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <configureLEDDriver+0x114>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2301      	movs	r3, #1
 800321c:	4a21      	ldr	r2, [pc, #132]	; (80032a4 <configureLEDDriver+0x110>)
 800321e:	f7ff ff2d 	bl	800307c <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led2_reg,clear,1,LED.i2cBank);
 8003222:	4b21      	ldr	r3, [pc, #132]	; (80032a8 <configureLEDDriver+0x114>)
 8003224:	7818      	ldrb	r0, [r3, #0]
 8003226:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <configureLEDDriver+0x114>)
 8003228:	7919      	ldrb	r1, [r3, #4]
 800322a:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <configureLEDDriver+0x114>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2301      	movs	r3, #1
 8003232:	4a1c      	ldr	r2, [pc, #112]	; (80032a4 <configureLEDDriver+0x110>)
 8003234:	f7ff ff22 	bl	800307c <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led3_reg,clear,1,LED.i2cBank);
 8003238:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <configureLEDDriver+0x114>)
 800323a:	7818      	ldrb	r0, [r3, #0]
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <configureLEDDriver+0x114>)
 800323e:	7959      	ldrb	r1, [r3, #5]
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <configureLEDDriver+0x114>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	2301      	movs	r3, #1
 8003248:	4a16      	ldr	r2, [pc, #88]	; (80032a4 <configureLEDDriver+0x110>)
 800324a:	f7ff ff17 	bl	800307c <writeI2CRegister>
	//set the PWM for the tri-color led. Thing is bright so PWM is very low.
	writeI2CRegister(LED.address,LED.led7_pwm,LED.pwm,1,LED.i2cBank);
 800324e:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <configureLEDDriver+0x114>)
 8003250:	7818      	ldrb	r0, [r3, #0]
 8003252:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <configureLEDDriver+0x114>)
 8003254:	7a19      	ldrb	r1, [r3, #8]
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <configureLEDDriver+0x114>)
 8003258:	7adb      	ldrb	r3, [r3, #11]
 800325a:	461a      	mov	r2, r3
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <configureLEDDriver+0x114>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2301      	movs	r3, #1
 8003264:	f7ff ff0a 	bl	800307c <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led8_pwm,LED.pwm,1,LED.i2cBank);
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <configureLEDDriver+0x114>)
 800326a:	7818      	ldrb	r0, [r3, #0]
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <configureLEDDriver+0x114>)
 800326e:	7a59      	ldrb	r1, [r3, #9]
 8003270:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <configureLEDDriver+0x114>)
 8003272:	7adb      	ldrb	r3, [r3, #11]
 8003274:	461a      	mov	r2, r3
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <configureLEDDriver+0x114>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	2301      	movs	r3, #1
 800327e:	f7ff fefd 	bl	800307c <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led9_pwm,LED.pwm,1,LED.i2cBank);
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <configureLEDDriver+0x114>)
 8003284:	7818      	ldrb	r0, [r3, #0]
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <configureLEDDriver+0x114>)
 8003288:	7a99      	ldrb	r1, [r3, #10]
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <configureLEDDriver+0x114>)
 800328c:	7adb      	ldrb	r3, [r3, #11]
 800328e:	461a      	mov	r2, r3
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <configureLEDDriver+0x114>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	2301      	movs	r3, #1
 8003298:	f7ff fef0 	bl	800307c <writeI2CRegister>
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20003278 	.word	0x20003278
 80032a8:	20000004 	.word	0x20000004

080032ac <setErrorLED>:

//Configures specified LED to either fully on or off.
void setErrorLED(int led,_Bool change){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	; 0x28
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	70fb      	strb	r3, [r7, #3]
	const uint8_t led0 = 0b00000001;
 80032b8:	2301      	movs	r3, #1
 80032ba:	76bb      	strb	r3, [r7, #26]
	const uint8_t led1 = 0b00000100;
 80032bc:	2304      	movs	r3, #4
 80032be:	767b      	strb	r3, [r7, #25]
	const uint8_t led2 = 0b00010000;
 80032c0:	2310      	movs	r3, #16
 80032c2:	763b      	strb	r3, [r7, #24]
	const uint8_t led3 = 0b01000000;
 80032c4:	2340      	movs	r3, #64	; 0x40
 80032c6:	75fb      	strb	r3, [r7, #23]
	const uint8_t led0_pwm = 0b00000010;
 80032c8:	2302      	movs	r3, #2
 80032ca:	75bb      	strb	r3, [r7, #22]
	const uint8_t led1_pwm = 0b00001000;
 80032cc:	2308      	movs	r3, #8
 80032ce:	757b      	strb	r3, [r7, #21]
	const uint8_t led2_pwm = 0b00100000;
 80032d0:	2320      	movs	r3, #32
 80032d2:	753b      	strb	r3, [r7, #20]
	const uint8_t led3_pwm = 0b10000000;
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	74fb      	strb	r3, [r7, #19]
  	uint8_t* ledRegisterContents;
  	int ledBitNumber;
  	uint8_t ledRegister;
	if(led <4){
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	dc05      	bgt.n	80032ea <setErrorLED+0x3e>
		ledRegister = LED.led0_reg;
 80032de:	4b80      	ldr	r3, [pc, #512]	; (80034e0 <setErrorLED+0x234>)
 80032e0:	789b      	ldrb	r3, [r3, #2]
 80032e2:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	61fb      	str	r3, [r7, #28]
 80032e8:	e019      	b.n	800331e <setErrorLED+0x72>
	}
	else if(led <8){
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b07      	cmp	r3, #7
 80032ee:	dc06      	bgt.n	80032fe <setErrorLED+0x52>
		ledRegister = LED.led1_reg;
 80032f0:	4b7b      	ldr	r3, [pc, #492]	; (80034e0 <setErrorLED+0x234>)
 80032f2:	78db      	ldrb	r3, [r3, #3]
 80032f4:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-4;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3b04      	subs	r3, #4
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	e00f      	b.n	800331e <setErrorLED+0x72>
	}
	else if(led <12){
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b0b      	cmp	r3, #11
 8003302:	dc06      	bgt.n	8003312 <setErrorLED+0x66>
		ledRegister = LED.led2_reg;
 8003304:	4b76      	ldr	r3, [pc, #472]	; (80034e0 <setErrorLED+0x234>)
 8003306:	791b      	ldrb	r3, [r3, #4]
 8003308:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-8;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3b08      	subs	r3, #8
 800330e:	61fb      	str	r3, [r7, #28]
 8003310:	e005      	b.n	800331e <setErrorLED+0x72>
	}
	else{ //put this in to humor those who want to try using unconnected LEDs
		ledRegister = LED.led3_reg;
 8003312:	4b73      	ldr	r3, [pc, #460]	; (80034e0 <setErrorLED+0x234>)
 8003314:	795b      	ldrb	r3, [r3, #5]
 8003316:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-12;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3b0c      	subs	r3, #12
 800331c:	61fb      	str	r3, [r7, #28]
	}
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 800331e:	4b70      	ldr	r3, [pc, #448]	; (80034e0 <setErrorLED+0x234>)
 8003320:	7818      	ldrb	r0, [r3, #0]
 8003322:	4b6f      	ldr	r3, [pc, #444]	; (80034e0 <setErrorLED+0x234>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	7ef9      	ldrb	r1, [r7, #27]
 8003328:	2201      	movs	r2, #1
 800332a:	f7ff fdf5 	bl	8002f18 <readI2CRegister>
 800332e:	60f8      	str	r0, [r7, #12]
	switch(ledBitNumber){
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b03      	cmp	r3, #3
 8003334:	f200 80bd 	bhi.w	80034b2 <setErrorLED+0x206>
 8003338:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <setErrorLED+0x94>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003351 	.word	0x08003351
 8003344:	080033b7 	.word	0x080033b7
 8003348:	0800341d 	.word	0x0800341d
 800334c:	0800344d 	.word	0x0800344d

	case 0:
		if(change){
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d012      	beq.n	800337c <setErrorLED+0xd0>
			if(led == 8){
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b08      	cmp	r3, #8
 800335a:	d107      	bne.n	800336c <setErrorLED+0xc0>
				ledRegisterContents[0] |= led0_pwm;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	7dbb      	ldrb	r3, [r7, #22]
 8003362:	4313      	orrs	r3, r2
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led0;
			}
		}
		break;
 800336a:	e0a2      	b.n	80034b2 <setErrorLED+0x206>
				ledRegisterContents[0] |= led0;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	781a      	ldrb	r2, [r3, #0]
 8003370:	7ebb      	ldrb	r3, [r7, #26]
 8003372:	4313      	orrs	r3, r2
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	701a      	strb	r2, [r3, #0]
		break;
 800337a:	e09a      	b.n	80034b2 <setErrorLED+0x206>
			if(led == 8){
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b08      	cmp	r3, #8
 8003380:	d10c      	bne.n	800339c <setErrorLED+0xf0>
				ledRegisterContents[0] &= ~led0_pwm;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	b25a      	sxtb	r2, r3
 8003388:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800338c:	43db      	mvns	r3, r3
 800338e:	b25b      	sxtb	r3, r3
 8003390:	4013      	ands	r3, r2
 8003392:	b25b      	sxtb	r3, r3
 8003394:	b2da      	uxtb	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	701a      	strb	r2, [r3, #0]
		break;
 800339a:	e08a      	b.n	80034b2 <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led0;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	b25a      	sxtb	r2, r3
 80033a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	b25b      	sxtb	r3, r3
 80033aa:	4013      	ands	r3, r2
 80033ac:	b25b      	sxtb	r3, r3
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	701a      	strb	r2, [r3, #0]
		break;
 80033b4:	e07d      	b.n	80034b2 <setErrorLED+0x206>

	case 1:
		if(change){
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d012      	beq.n	80033e2 <setErrorLED+0x136>
			if(led == 9){
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b09      	cmp	r3, #9
 80033c0:	d107      	bne.n	80033d2 <setErrorLED+0x126>
				ledRegisterContents[0] |= led1_pwm;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	781a      	ldrb	r2, [r3, #0]
 80033c6:	7d7b      	ldrb	r3, [r7, #21]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led1;
			}
		}
		break;
 80033d0:	e06f      	b.n	80034b2 <setErrorLED+0x206>
				ledRegisterContents[0] |= led1;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	7e7b      	ldrb	r3, [r7, #25]
 80033d8:	4313      	orrs	r3, r2
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	701a      	strb	r2, [r3, #0]
		break;
 80033e0:	e067      	b.n	80034b2 <setErrorLED+0x206>
			if(led == 9){
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b09      	cmp	r3, #9
 80033e6:	d10c      	bne.n	8003402 <setErrorLED+0x156>
				ledRegisterContents[0] &= ~led1_pwm;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	b25a      	sxtb	r2, r3
 80033ee:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	b25b      	sxtb	r3, r3
 80033f6:	4013      	ands	r3, r2
 80033f8:	b25b      	sxtb	r3, r3
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	701a      	strb	r2, [r3, #0]
		break;
 8003400:	e057      	b.n	80034b2 <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led1;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	b25a      	sxtb	r2, r3
 8003408:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800340c:	43db      	mvns	r3, r3
 800340e:	b25b      	sxtb	r3, r3
 8003410:	4013      	ands	r3, r2
 8003412:	b25b      	sxtb	r3, r3
 8003414:	b2da      	uxtb	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	701a      	strb	r2, [r3, #0]
		break;
 800341a:	e04a      	b.n	80034b2 <setErrorLED+0x206>

	case 2:
		if(change){
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <setErrorLED+0x186>
				ledRegisterContents[0] |= led2;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	7e3b      	ldrb	r3, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	b2da      	uxtb	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	701a      	strb	r2, [r3, #0]
		}
		else{

			ledRegisterContents[0] &= ~led2;
		}
		break;
 8003430:	e03f      	b.n	80034b2 <setErrorLED+0x206>
			ledRegisterContents[0] &= ~led2;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	b25a      	sxtb	r2, r3
 8003438:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800343c:	43db      	mvns	r3, r3
 800343e:	b25b      	sxtb	r3, r3
 8003440:	4013      	ands	r3, r2
 8003442:	b25b      	sxtb	r3, r3
 8003444:	b2da      	uxtb	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	701a      	strb	r2, [r3, #0]
		break;
 800344a:	e032      	b.n	80034b2 <setErrorLED+0x206>

	case 3:
		if(change){
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d012      	beq.n	8003478 <setErrorLED+0x1cc>
			if(led == 7){
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b07      	cmp	r3, #7
 8003456:	d107      	bne.n	8003468 <setErrorLED+0x1bc>
				ledRegisterContents[0] |= led3_pwm;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	781a      	ldrb	r2, [r3, #0]
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	4313      	orrs	r3, r2
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led3;
			}
		}
		break;
 8003466:	e023      	b.n	80034b0 <setErrorLED+0x204>
				ledRegisterContents[0] |= led3;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	7dfb      	ldrb	r3, [r7, #23]
 800346e:	4313      	orrs	r3, r2
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	701a      	strb	r2, [r3, #0]
		break;
 8003476:	e01b      	b.n	80034b0 <setErrorLED+0x204>
			if(led == 7){
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b07      	cmp	r3, #7
 800347c:	d10c      	bne.n	8003498 <setErrorLED+0x1ec>
				ledRegisterContents[0] &= ~led3_pwm;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	b25a      	sxtb	r2, r3
 8003484:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003488:	43db      	mvns	r3, r3
 800348a:	b25b      	sxtb	r3, r3
 800348c:	4013      	ands	r3, r2
 800348e:	b25b      	sxtb	r3, r3
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	701a      	strb	r2, [r3, #0]
		break;
 8003496:	e00b      	b.n	80034b0 <setErrorLED+0x204>
				ledRegisterContents[0] &= ~led3;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	b25a      	sxtb	r2, r3
 800349e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	4013      	ands	r3, r2
 80034a8:	b25b      	sxtb	r3, r3
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	701a      	strb	r2, [r3, #0]
		break;
 80034b0:	bf00      	nop
	}
	writeI2CRegister(LED.address,ledRegister,ledRegisterContents,1,LED.i2cBank);
 80034b2:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <setErrorLED+0x234>)
 80034b4:	7818      	ldrb	r0, [r3, #0]
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <setErrorLED+0x234>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	7ef9      	ldrb	r1, [r7, #27]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	2301      	movs	r3, #1
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	f7ff fddb 	bl	800307c <writeI2CRegister>
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <setErrorLED+0x234>)
 80034c8:	7818      	ldrb	r0, [r3, #0]
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <setErrorLED+0x234>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	7ef9      	ldrb	r1, [r7, #27]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f7ff fd21 	bl	8002f18 <readI2CRegister>
 80034d6:	60f8      	str	r0, [r7, #12]
}
 80034d8:	bf00      	nop
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000004 	.word	0x20000004

080034e4 <getADCValues>:


float* getADCValues(){
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b09e      	sub	sp, #120	; 0x78
 80034e8:	af00      	add	r7, sp, #0
	//intialize a static float array to return from the method. Make static to avoid the data changing on return
	static float adcValues[21];
	//make an integer array to store the adc counts. ADC counts are out of 4096
	int avgADCCounterValues[21];
	//empty the integer array
	memset(avgADCCounterValues, 0, sizeof(avgADCCounterValues));
 80034ea:	463b      	mov	r3, r7
 80034ec:	2254      	movs	r2, #84	; 0x54
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f00d fa40 	bl	8010976 <memset>
	int adcChannelCounter,avgCounter,adcIndex;
	//variables to denote what interval the data in the adc buffers repeats. ADC format is [data0, 0x00, data1, 0x00...]
	//the interval is (#ofchannels activated on bank) * 2
	int adc1DataRepeat=22;
 80034f6:	2316      	movs	r3, #22
 80034f8:	66bb      	str	r3, [r7, #104]	; 0x68
	int adc2DataRepeat=8;
 80034fa:	2308      	movs	r3, #8
 80034fc:	667b      	str	r3, [r7, #100]	; 0x64
	int adc3DataRepeat=12;
 80034fe:	230c      	movs	r3, #12
 8003500:	663b      	str	r3, [r7, #96]	; 0x60
	//iterate through all 21 adc channels...
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 8003502:	2300      	movs	r3, #0
 8003504:	677b      	str	r3, [r7, #116]	; 0x74
 8003506:	e171      	b.n	80037ec <getADCValues+0x308>
		//for the first channels of the adc banks (ADC Bank 1's first channel is ADC3, ADC bank 2's first channel is ADC0, ADC bank 3's first channel is adc2
		if((adcChannelCounter==Adc.adc0) || (adcChannelCounter==Adc.adc2) || (adcChannelCounter==Adc.adc3)){
 8003508:	4b97      	ldr	r3, [pc, #604]	; (8003768 <getADCValues+0x284>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800350e:	429a      	cmp	r2, r3
 8003510:	d009      	beq.n	8003526 <getADCValues+0x42>
 8003512:	4b95      	ldr	r3, [pc, #596]	; (8003768 <getADCValues+0x284>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003518:	429a      	cmp	r2, r3
 800351a:	d004      	beq.n	8003526 <getADCValues+0x42>
 800351c:	4b92      	ldr	r3, [pc, #584]	; (8003768 <getADCValues+0x284>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003522:	429a      	cmp	r2, r3
 8003524:	d102      	bne.n	800352c <getADCValues+0x48>
			//first data entry for each buffer will be the data for these adcs
			adcIndex=0;
 8003526:	2300      	movs	r3, #0
 8003528:	66fb      	str	r3, [r7, #108]	; 0x6c
 800352a:	e071      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the second channels of the adc banks (ADC Bank 1's second channel is ADC4, ADC bank 2's second channel is ADC1, ADC bank 3's second channel is adc14
		else if((adcChannelCounter==Adc.adc1) || (adcChannelCounter==Adc.adc14) || (adcChannelCounter==Adc.adc4)){
 800352c:	4b8e      	ldr	r3, [pc, #568]	; (8003768 <getADCValues+0x284>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003532:	429a      	cmp	r2, r3
 8003534:	d009      	beq.n	800354a <getADCValues+0x66>
 8003536:	4b8c      	ldr	r3, [pc, #560]	; (8003768 <getADCValues+0x284>)
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800353c:	429a      	cmp	r2, r3
 800353e:	d004      	beq.n	800354a <getADCValues+0x66>
 8003540:	4b89      	ldr	r3, [pc, #548]	; (8003768 <getADCValues+0x284>)
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003546:	429a      	cmp	r2, r3
 8003548:	d102      	bne.n	8003550 <getADCValues+0x6c>
			adcIndex=2;
 800354a:	2302      	movs	r3, #2
 800354c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800354e:	e05f      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the third channels of the adc banks (ADC Bank 1's third channel is ADC5, ADC bank 2's third channel is spareSpiADC, ADC bank 3's third channel is adc15
		else if((adcChannelCounter==Adc.spareSpiADC) || (adcChannelCounter==Adc.adc15) || (adcChannelCounter==Adc.adc5)){
 8003550:	4b85      	ldr	r3, [pc, #532]	; (8003768 <getADCValues+0x284>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003556:	429a      	cmp	r2, r3
 8003558:	d009      	beq.n	800356e <getADCValues+0x8a>
 800355a:	4b83      	ldr	r3, [pc, #524]	; (8003768 <getADCValues+0x284>)
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003560:	429a      	cmp	r2, r3
 8003562:	d004      	beq.n	800356e <getADCValues+0x8a>
 8003564:	4b80      	ldr	r3, [pc, #512]	; (8003768 <getADCValues+0x284>)
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800356a:	429a      	cmp	r2, r3
 800356c:	d102      	bne.n	8003574 <getADCValues+0x90>
			adcIndex=4;
 800356e:	2304      	movs	r3, #4
 8003570:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003572:	e04d      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the fourth channels of the adc banks (ADC Bank 1's fourth channel is adc6, ADC bank 2's fourth channel is spareUARTADC, ADC bank 3's fourth channel is configADC
		else if((adcChannelCounter == Adc.spareUartADC) || (adcChannelCounter==Adc.configADC) || (adcChannelCounter==Adc.adc6)){
 8003574:	4b7c      	ldr	r3, [pc, #496]	; (8003768 <getADCValues+0x284>)
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800357a:	429a      	cmp	r2, r3
 800357c:	d009      	beq.n	8003592 <getADCValues+0xae>
 800357e:	4b7a      	ldr	r3, [pc, #488]	; (8003768 <getADCValues+0x284>)
 8003580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003582:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003584:	429a      	cmp	r2, r3
 8003586:	d004      	beq.n	8003592 <getADCValues+0xae>
 8003588:	4b77      	ldr	r3, [pc, #476]	; (8003768 <getADCValues+0x284>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800358e:	429a      	cmp	r2, r3
 8003590:	d102      	bne.n	8003598 <getADCValues+0xb4>
			adcIndex=6;
 8003592:	2306      	movs	r3, #6
 8003594:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003596:	e03b      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the fifth channels of the adc banks (ADC Bank 1's fifth channel is ADC7, ADC bank 3's fifth channel is zionADC
		else if((adcChannelCounter==Adc.zionADC) || (adcChannelCounter==Adc.adc7)){
 8003598:	4b73      	ldr	r3, [pc, #460]	; (8003768 <getADCValues+0x284>)
 800359a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800359c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800359e:	429a      	cmp	r2, r3
 80035a0:	d004      	beq.n	80035ac <getADCValues+0xc8>
 80035a2:	4b71      	ldr	r3, [pc, #452]	; (8003768 <getADCValues+0x284>)
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d102      	bne.n	80035b2 <getADCValues+0xce>
			adcIndex=8;
 80035ac:	2308      	movs	r3, #8
 80035ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035b0:	e02e      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the sixth channels of the adc banks (ADC Bank 1's sixth channel is ADC8, ADC bank 3's sixth channel is spareI2cADC
		else if((adcChannelCounter == Adc.spareI2cADC) || (adcChannelCounter==Adc.adc8)){
 80035b2:	4b6d      	ldr	r3, [pc, #436]	; (8003768 <getADCValues+0x284>)
 80035b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d004      	beq.n	80035c6 <getADCValues+0xe2>
 80035bc:	4b6a      	ldr	r3, [pc, #424]	; (8003768 <getADCValues+0x284>)
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d102      	bne.n	80035cc <getADCValues+0xe8>
			adcIndex=10;
 80035c6:	230a      	movs	r3, #10
 80035c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ca:	e021      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the seventh channels of the adc banks (ADC Bank 1's seventh channel is ADC9)
		else if(adcChannelCounter==Adc.adc9){
 80035cc:	4b66      	ldr	r3, [pc, #408]	; (8003768 <getADCValues+0x284>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d102      	bne.n	80035dc <getADCValues+0xf8>
			adcIndex=12;
 80035d6:	230c      	movs	r3, #12
 80035d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035da:	e019      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the eighth channels of the adc banks (ADC Bank 1's eighth channel is ADC10)
		else if(adcChannelCounter==Adc.adc10){
 80035dc:	4b62      	ldr	r3, [pc, #392]	; (8003768 <getADCValues+0x284>)
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d102      	bne.n	80035ec <getADCValues+0x108>
			adcIndex=14;
 80035e6:	230e      	movs	r3, #14
 80035e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ea:	e011      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the nineth channels of the adc banks (ADC Bank 1's nineth channel is ADC11)
		else if(adcChannelCounter==Adc.adc11){
 80035ec:	4b5e      	ldr	r3, [pc, #376]	; (8003768 <getADCValues+0x284>)
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d102      	bne.n	80035fc <getADCValues+0x118>
			adcIndex=16;
 80035f6:	2310      	movs	r3, #16
 80035f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035fa:	e009      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the tenth channels of the adc banks (ADC Bank 1's tenth channel is ADC12)
		else if(adcChannelCounter==Adc.adc12){
 80035fc:	4b5a      	ldr	r3, [pc, #360]	; (8003768 <getADCValues+0x284>)
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003602:	429a      	cmp	r2, r3
 8003604:	d102      	bne.n	800360c <getADCValues+0x128>
			adcIndex=18;
 8003606:	2312      	movs	r3, #18
 8003608:	66fb      	str	r3, [r7, #108]	; 0x6c
 800360a:	e001      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the eleventh channels of the adc banks (ADC Bank 1's eleventh channel is ADC13)
		else{
			adcIndex=20;
 800360c:	2314      	movs	r3, #20
 800360e:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		//for the channels that belong to the second ADC bank
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8003610:	4b55      	ldr	r3, [pc, #340]	; (8003768 <getADCValues+0x284>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003616:	429a      	cmp	r2, r3
 8003618:	d00e      	beq.n	8003638 <getADCValues+0x154>
 800361a:	4b53      	ldr	r3, [pc, #332]	; (8003768 <getADCValues+0x284>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003620:	429a      	cmp	r2, r3
 8003622:	d009      	beq.n	8003638 <getADCValues+0x154>
 8003624:	4b50      	ldr	r3, [pc, #320]	; (8003768 <getADCValues+0x284>)
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800362a:	429a      	cmp	r2, r3
 800362c:	d004      	beq.n	8003638 <getADCValues+0x154>
 800362e:	4b4e      	ldr	r3, [pc, #312]	; (8003768 <getADCValues+0x284>)
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003634:	429a      	cmp	r2, r3
 8003636:	d13a      	bne.n	80036ae <getADCValues+0x1ca>
			//parse through the buffers to grab enough values to make the asked for average amount
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003638:	2300      	movs	r3, #0
 800363a:	673b      	str	r3, [r7, #112]	; 0x70
 800363c:	e033      	b.n	80036a6 <getADCValues+0x1c2>
				//adjust the index to match the next data point in the buffer
				int shiftedIndex = adcIndex + (adc2DataRepeat*avgCounter);
 800363e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003640:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003648:	4413      	add	r3, r2
 800364a:	657b      	str	r3, [r7, #84]	; 0x54
				//add it to the rolling average count
				avgADCCounterValues[adcChannelCounter]+=adc2_buf[shiftedIndex];
 800364c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003654:	4413      	add	r3, r2
 8003656:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800365a:	4944      	ldr	r1, [pc, #272]	; (800376c <getADCValues+0x288>)
 800365c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800365e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003662:	441a      	add	r2, r3
 8003664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800366c:	440b      	add	r3, r1
 800366e:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003674:	2b13      	cmp	r3, #19
 8003676:	d113      	bne.n	80036a0 <getADCValues+0x1bc>
					//at the end, divide the total amount to get our averaged Value
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003680:	4413      	add	r3, r2
 8003682:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003686:	4a3a      	ldr	r2, [pc, #232]	; (8003770 <getADCValues+0x28c>)
 8003688:	fb82 1203 	smull	r1, r2, r2, r3
 800368c:	10d2      	asrs	r2, r2, #3
 800368e:	17db      	asrs	r3, r3, #31
 8003690:	1ad2      	subs	r2, r2, r3
 8003692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800369a:	440b      	add	r3, r1
 800369c:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80036a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a2:	3301      	adds	r3, #1
 80036a4:	673b      	str	r3, [r7, #112]	; 0x70
 80036a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a8:	2b13      	cmp	r3, #19
 80036aa:	ddc8      	ble.n	800363e <getADCValues+0x15a>
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 80036ac:	e09b      	b.n	80037e6 <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the third ADC bank
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 80036ae:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <getADCValues+0x284>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d018      	beq.n	80036ea <getADCValues+0x206>
 80036b8:	4b2b      	ldr	r3, [pc, #172]	; (8003768 <getADCValues+0x284>)
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036be:	429a      	cmp	r2, r3
 80036c0:	d013      	beq.n	80036ea <getADCValues+0x206>
 80036c2:	4b29      	ldr	r3, [pc, #164]	; (8003768 <getADCValues+0x284>)
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d00e      	beq.n	80036ea <getADCValues+0x206>
 80036cc:	4b26      	ldr	r3, [pc, #152]	; (8003768 <getADCValues+0x284>)
 80036ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d009      	beq.n	80036ea <getADCValues+0x206>
 80036d6:	4b24      	ldr	r3, [pc, #144]	; (8003768 <getADCValues+0x284>)
 80036d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036dc:	429a      	cmp	r2, r3
 80036de:	d004      	beq.n	80036ea <getADCValues+0x206>
 80036e0:	4b21      	ldr	r3, [pc, #132]	; (8003768 <getADCValues+0x284>)
 80036e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d13a      	bne.n	8003760 <getADCValues+0x27c>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80036ea:	2300      	movs	r3, #0
 80036ec:	673b      	str	r3, [r7, #112]	; 0x70
 80036ee:	e033      	b.n	8003758 <getADCValues+0x274>
				int shiftedIndex = adcIndex + (adc3DataRepeat*avgCounter);
 80036f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80036f4:	fb02 f303 	mul.w	r3, r2, r3
 80036f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036fa:	4413      	add	r3, r2
 80036fc:	65bb      	str	r3, [r7, #88]	; 0x58
				avgADCCounterValues[adcChannelCounter]+=adc3_buf[shiftedIndex];
 80036fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003706:	4413      	add	r3, r2
 8003708:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800370c:	4919      	ldr	r1, [pc, #100]	; (8003774 <getADCValues+0x290>)
 800370e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003710:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003714:	441a      	add	r2, r3
 8003716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800371e:	440b      	add	r3, r1
 8003720:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003724:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003726:	2b13      	cmp	r3, #19
 8003728:	d113      	bne.n	8003752 <getADCValues+0x26e>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 800372a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003732:	4413      	add	r3, r2
 8003734:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003738:	4a0d      	ldr	r2, [pc, #52]	; (8003770 <getADCValues+0x28c>)
 800373a:	fb82 1203 	smull	r1, r2, r2, r3
 800373e:	10d2      	asrs	r2, r2, #3
 8003740:	17db      	asrs	r3, r3, #31
 8003742:	1ad2      	subs	r2, r2, r3
 8003744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800374c:	440b      	add	r3, r1
 800374e:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003754:	3301      	adds	r3, #1
 8003756:	673b      	str	r3, [r7, #112]	; 0x70
 8003758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800375a:	2b13      	cmp	r3, #19
 800375c:	ddc8      	ble.n	80036f0 <getADCValues+0x20c>
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 800375e:	e042      	b.n	80037e6 <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the first ADC bank
		else{
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003760:	2300      	movs	r3, #0
 8003762:	673b      	str	r3, [r7, #112]	; 0x70
 8003764:	e03c      	b.n	80037e0 <getADCValues+0x2fc>
 8003766:	bf00      	nop
 8003768:	2000005c 	.word	0x2000005c
 800376c:	200218a4 	.word	0x200218a4
 8003770:	66666667 	.word	0x66666667
 8003774:	200133ac 	.word	0x200133ac
				int shiftedIndex = adcIndex + (adc1DataRepeat*avgCounter);
 8003778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800377a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800377c:	fb02 f303 	mul.w	r3, r2, r3
 8003780:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003782:	4413      	add	r3, r2
 8003784:	65fb      	str	r3, [r7, #92]	; 0x5c
				avgADCCounterValues[adcChannelCounter]+=adc1_buf[shiftedIndex];
 8003786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800378e:	4413      	add	r3, r2
 8003790:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003794:	49c9      	ldr	r1, [pc, #804]	; (8003abc <getADCValues+0x5d8>)
 8003796:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003798:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800379c:	441a      	add	r2, r3
 800379e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80037a6:	440b      	add	r3, r1
 80037a8:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 80037ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037ae:	2b13      	cmp	r3, #19
 80037b0:	d113      	bne.n	80037da <getADCValues+0x2f6>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 80037b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80037ba:	4413      	add	r3, r2
 80037bc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80037c0:	4abf      	ldr	r2, [pc, #764]	; (8003ac0 <getADCValues+0x5dc>)
 80037c2:	fb82 1203 	smull	r1, r2, r2, r3
 80037c6:	10d2      	asrs	r2, r2, #3
 80037c8:	17db      	asrs	r3, r3, #31
 80037ca:	1ad2      	subs	r2, r2, r3
 80037cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80037d4:	440b      	add	r3, r1
 80037d6:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80037da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037dc:	3301      	adds	r3, #1
 80037de:	673b      	str	r3, [r7, #112]	; 0x70
 80037e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037e2:	2b13      	cmp	r3, #19
 80037e4:	ddc8      	ble.n	8003778 <getADCValues+0x294>
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 80037e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e8:	3301      	adds	r3, #1
 80037ea:	677b      	str	r3, [r7, #116]	; 0x74
 80037ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ee:	2b14      	cmp	r3, #20
 80037f0:	f77f ae8a 	ble.w	8003508 <getADCValues+0x24>
				}
			}
		}
	}
	//for adc inputs with names ADC#, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (3)
	adcValues[Adc.adc0] = (avgADCCounterValues[Adc.adc0] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80037f4:	4bb3      	ldr	r3, [pc, #716]	; (8003ac4 <getADCValues+0x5e0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80037fe:	4413      	add	r3, r2
 8003800:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003804:	ee07 3a90 	vmov	s15, r3
 8003808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800380c:	4bad      	ldr	r3, [pc, #692]	; (8003ac4 <getADCValues+0x5e0>)
 800380e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003812:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003816:	4bab      	ldr	r3, [pc, #684]	; (8003ac4 <getADCValues+0x5e0>)
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003822:	4ba8      	ldr	r3, [pc, #672]	; (8003ac4 <getADCValues+0x5e0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	4aa7      	ldr	r2, [pc, #668]	; (8003ac8 <getADCValues+0x5e4>)
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc1] = (avgADCCounterValues[Adc.adc1] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003834:	4ba3      	ldr	r3, [pc, #652]	; (8003ac4 <getADCValues+0x5e0>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800383e:	4413      	add	r3, r2
 8003840:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003844:	ee07 3a90 	vmov	s15, r3
 8003848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800384c:	4b9d      	ldr	r3, [pc, #628]	; (8003ac4 <getADCValues+0x5e0>)
 800384e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003852:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003856:	4b9b      	ldr	r3, [pc, #620]	; (8003ac4 <getADCValues+0x5e0>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003862:	4b98      	ldr	r3, [pc, #608]	; (8003ac4 <getADCValues+0x5e0>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386a:	4a97      	ldr	r2, [pc, #604]	; (8003ac8 <getADCValues+0x5e4>)
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc2] = (avgADCCounterValues[Adc.adc2] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003874:	4b93      	ldr	r3, [pc, #588]	; (8003ac4 <getADCValues+0x5e0>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800387e:	4413      	add	r3, r2
 8003880:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003884:	ee07 3a90 	vmov	s15, r3
 8003888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800388c:	4b8d      	ldr	r3, [pc, #564]	; (8003ac4 <getADCValues+0x5e0>)
 800388e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003892:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003896:	4b8b      	ldr	r3, [pc, #556]	; (8003ac4 <getADCValues+0x5e0>)
 8003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038a2:	4b88      	ldr	r3, [pc, #544]	; (8003ac4 <getADCValues+0x5e0>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038aa:	4a87      	ldr	r2, [pc, #540]	; (8003ac8 <getADCValues+0x5e4>)
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc3] = (avgADCCounterValues[Adc.adc3] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80038b4:	4b83      	ldr	r3, [pc, #524]	; (8003ac4 <getADCValues+0x5e0>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80038be:	4413      	add	r3, r2
 80038c0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80038c4:	ee07 3a90 	vmov	s15, r3
 80038c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038cc:	4b7d      	ldr	r3, [pc, #500]	; (8003ac4 <getADCValues+0x5e0>)
 80038ce:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80038d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038d6:	4b7b      	ldr	r3, [pc, #492]	; (8003ac4 <getADCValues+0x5e0>)
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038e2:	4b78      	ldr	r3, [pc, #480]	; (8003ac4 <getADCValues+0x5e0>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ea:	4a77      	ldr	r2, [pc, #476]	; (8003ac8 <getADCValues+0x5e4>)
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc4] = (avgADCCounterValues[Adc.adc4] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80038f4:	4b73      	ldr	r3, [pc, #460]	; (8003ac4 <getADCValues+0x5e0>)
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80038fe:	4413      	add	r3, r2
 8003900:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003904:	ee07 3a90 	vmov	s15, r3
 8003908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800390c:	4b6d      	ldr	r3, [pc, #436]	; (8003ac4 <getADCValues+0x5e0>)
 800390e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003912:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003916:	4b6b      	ldr	r3, [pc, #428]	; (8003ac4 <getADCValues+0x5e0>)
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003922:	4b68      	ldr	r3, [pc, #416]	; (8003ac4 <getADCValues+0x5e0>)
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392a:	4a67      	ldr	r2, [pc, #412]	; (8003ac8 <getADCValues+0x5e4>)
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc5] = (avgADCCounterValues[Adc.adc5] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003934:	4b63      	ldr	r3, [pc, #396]	; (8003ac4 <getADCValues+0x5e0>)
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800393e:	4413      	add	r3, r2
 8003940:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003944:	ee07 3a90 	vmov	s15, r3
 8003948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800394c:	4b5d      	ldr	r3, [pc, #372]	; (8003ac4 <getADCValues+0x5e0>)
 800394e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003956:	4b5b      	ldr	r3, [pc, #364]	; (8003ac4 <getADCValues+0x5e0>)
 8003958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003962:	4b58      	ldr	r3, [pc, #352]	; (8003ac4 <getADCValues+0x5e0>)
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396a:	4a57      	ldr	r2, [pc, #348]	; (8003ac8 <getADCValues+0x5e4>)
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc6] = (avgADCCounterValues[Adc.adc6] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003974:	4b53      	ldr	r3, [pc, #332]	; (8003ac4 <getADCValues+0x5e0>)
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800397e:	4413      	add	r3, r2
 8003980:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003984:	ee07 3a90 	vmov	s15, r3
 8003988:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800398c:	4b4d      	ldr	r3, [pc, #308]	; (8003ac4 <getADCValues+0x5e0>)
 800398e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003996:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <getADCValues+0x5e0>)
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039a2:	4b48      	ldr	r3, [pc, #288]	; (8003ac4 <getADCValues+0x5e0>)
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039aa:	4a47      	ldr	r2, [pc, #284]	; (8003ac8 <getADCValues+0x5e4>)
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc7] = (avgADCCounterValues[Adc.adc7] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80039b4:	4b43      	ldr	r3, [pc, #268]	; (8003ac4 <getADCValues+0x5e0>)
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80039be:	4413      	add	r3, r2
 80039c0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80039c4:	ee07 3a90 	vmov	s15, r3
 80039c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039cc:	4b3d      	ldr	r3, [pc, #244]	; (8003ac4 <getADCValues+0x5e0>)
 80039ce:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80039d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039d6:	4b3b      	ldr	r3, [pc, #236]	; (8003ac4 <getADCValues+0x5e0>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039e2:	4b38      	ldr	r3, [pc, #224]	; (8003ac4 <getADCValues+0x5e0>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ea:	4a37      	ldr	r2, [pc, #220]	; (8003ac8 <getADCValues+0x5e4>)
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc8] = (avgADCCounterValues[Adc.adc8] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80039f4:	4b33      	ldr	r3, [pc, #204]	; (8003ac4 <getADCValues+0x5e0>)
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80039fe:	4413      	add	r3, r2
 8003a00:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a04:	ee07 3a90 	vmov	s15, r3
 8003a08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <getADCValues+0x5e0>)
 8003a0e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a16:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <getADCValues+0x5e0>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a22:	4b28      	ldr	r3, [pc, #160]	; (8003ac4 <getADCValues+0x5e0>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2a:	4a27      	ldr	r2, [pc, #156]	; (8003ac8 <getADCValues+0x5e4>)
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc9] = (avgADCCounterValues[Adc.adc9] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003a34:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <getADCValues+0x5e0>)
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003a3e:	4413      	add	r3, r2
 8003a40:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a44:	ee07 3a90 	vmov	s15, r3
 8003a48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <getADCValues+0x5e0>)
 8003a4e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a56:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <getADCValues+0x5e0>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a62:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <getADCValues+0x5e0>)
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6a:	4a17      	ldr	r2, [pc, #92]	; (8003ac8 <getADCValues+0x5e4>)
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc10] = (avgADCCounterValues[Adc.adc10] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <getADCValues+0x5e0>)
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003a7e:	4413      	add	r3, r2
 8003a80:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a84:	ee07 3a90 	vmov	s15, r3
 8003a88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <getADCValues+0x5e0>)
 8003a8e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003a92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <getADCValues+0x5e0>)
 8003a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <getADCValues+0x5e0>)
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aaa:	4a07      	ldr	r2, [pc, #28]	; (8003ac8 <getADCValues+0x5e4>)
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc11] = (avgADCCounterValues[Adc.adc11] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003ab4:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <getADCValues+0x5e0>)
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	e007      	b.n	8003acc <getADCValues+0x5e8>
 8003abc:	20010af4 	.word	0x20010af4
 8003ac0:	66666667 	.word	0x66666667
 8003ac4:	2000005c 	.word	0x2000005c
 8003ac8:	2000327c 	.word	0x2000327c
 8003acc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ade:	4b9c      	ldr	r3, [pc, #624]	; (8003d50 <getADCValues+0x86c>)
 8003ae0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ae8:	4b99      	ldr	r3, [pc, #612]	; (8003d50 <getADCValues+0x86c>)
 8003aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aec:	ee07 3a90 	vmov	s15, r3
 8003af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003af4:	4b96      	ldr	r3, [pc, #600]	; (8003d50 <getADCValues+0x86c>)
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afc:	4a95      	ldr	r2, [pc, #596]	; (8003d54 <getADCValues+0x870>)
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc12] = (avgADCCounterValues[Adc.adc12] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003b06:	4b92      	ldr	r3, [pc, #584]	; (8003d50 <getADCValues+0x86c>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b10:	4413      	add	r3, r2
 8003b12:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b1e:	4b8c      	ldr	r3, [pc, #560]	; (8003d50 <getADCValues+0x86c>)
 8003b20:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003b24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b28:	4b89      	ldr	r3, [pc, #548]	; (8003d50 <getADCValues+0x86c>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2c:	ee07 3a90 	vmov	s15, r3
 8003b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b34:	4b86      	ldr	r3, [pc, #536]	; (8003d50 <getADCValues+0x86c>)
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3c:	4a85      	ldr	r2, [pc, #532]	; (8003d54 <getADCValues+0x870>)
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc13] = (avgADCCounterValues[Adc.adc13] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003b46:	4b82      	ldr	r3, [pc, #520]	; (8003d50 <getADCValues+0x86c>)
 8003b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b50:	4413      	add	r3, r2
 8003b52:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b5e:	4b7c      	ldr	r3, [pc, #496]	; (8003d50 <getADCValues+0x86c>)
 8003b60:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003b64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b68:	4b79      	ldr	r3, [pc, #484]	; (8003d50 <getADCValues+0x86c>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	ee07 3a90 	vmov	s15, r3
 8003b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b74:	4b76      	ldr	r3, [pc, #472]	; (8003d50 <getADCValues+0x86c>)
 8003b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7c:	4a75      	ldr	r2, [pc, #468]	; (8003d54 <getADCValues+0x870>)
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc14] = (avgADCCounterValues[Adc.adc14] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003b86:	4b72      	ldr	r3, [pc, #456]	; (8003d50 <getADCValues+0x86c>)
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b90:	4413      	add	r3, r2
 8003b92:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b9e:	4b6c      	ldr	r3, [pc, #432]	; (8003d50 <getADCValues+0x86c>)
 8003ba0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ba8:	4b69      	ldr	r3, [pc, #420]	; (8003d50 <getADCValues+0x86c>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	ee07 3a90 	vmov	s15, r3
 8003bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bb4:	4b66      	ldr	r3, [pc, #408]	; (8003d50 <getADCValues+0x86c>)
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbc:	4a65      	ldr	r2, [pc, #404]	; (8003d54 <getADCValues+0x870>)
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc15] = (avgADCCounterValues[Adc.adc15] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003bc6:	4b62      	ldr	r3, [pc, #392]	; (8003d50 <getADCValues+0x86c>)
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bde:	4b5c      	ldr	r3, [pc, #368]	; (8003d50 <getADCValues+0x86c>)
 8003be0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003be8:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <getADCValues+0x86c>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	ee07 3a90 	vmov	s15, r3
 8003bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bf4:	4b56      	ldr	r3, [pc, #344]	; (8003d50 <getADCValues+0x86c>)
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfc:	4a55      	ldr	r2, [pc, #340]	; (8003d54 <getADCValues+0x870>)
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	edc3 7a00 	vstr	s15, [r3]
	//for other adc inputs, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (2)
	adcValues[Adc.spareSpiADC] = (avgADCCounterValues[Adc.spareSpiADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003c06:	4b52      	ldr	r3, [pc, #328]	; (8003d50 <getADCValues+0x86c>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c10:	4413      	add	r3, r2
 8003c12:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c1e:	4b4c      	ldr	r3, [pc, #304]	; (8003d50 <getADCValues+0x86c>)
 8003c20:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c28:	4b49      	ldr	r3, [pc, #292]	; (8003d50 <getADCValues+0x86c>)
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2c:	ee07 3a90 	vmov	s15, r3
 8003c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c34:	4b46      	ldr	r3, [pc, #280]	; (8003d50 <getADCValues+0x86c>)
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3c:	4a45      	ldr	r2, [pc, #276]	; (8003d54 <getADCValues+0x870>)
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareUartADC] = (avgADCCounterValues[Adc.spareUartADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003c46:	4b42      	ldr	r3, [pc, #264]	; (8003d50 <getADCValues+0x86c>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c50:	4413      	add	r3, r2
 8003c52:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c56:	ee07 3a90 	vmov	s15, r3
 8003c5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c5e:	4b3c      	ldr	r3, [pc, #240]	; (8003d50 <getADCValues+0x86c>)
 8003c60:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c68:	4b39      	ldr	r3, [pc, #228]	; (8003d50 <getADCValues+0x86c>)
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6c:	ee07 3a90 	vmov	s15, r3
 8003c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c74:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <getADCValues+0x86c>)
 8003c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7c:	4a35      	ldr	r2, [pc, #212]	; (8003d54 <getADCValues+0x870>)
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.configADC] = (avgADCCounterValues[Adc.configADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003c86:	4b32      	ldr	r3, [pc, #200]	; (8003d50 <getADCValues+0x86c>)
 8003c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c90:	4413      	add	r3, r2
 8003c92:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c9e:	4b2c      	ldr	r3, [pc, #176]	; (8003d50 <getADCValues+0x86c>)
 8003ca0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ca8:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <getADCValues+0x86c>)
 8003caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cac:	ee07 3a90 	vmov	s15, r3
 8003cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cb4:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <getADCValues+0x86c>)
 8003cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cbc:	4a25      	ldr	r2, [pc, #148]	; (8003d54 <getADCValues+0x870>)
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.zionADC] = (avgADCCounterValues[Adc.zionADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003cc6:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <getADCValues+0x86c>)
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003cd6:	ee07 3a90 	vmov	s15, r3
 8003cda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cde:	4b1c      	ldr	r3, [pc, #112]	; (8003d50 <getADCValues+0x86c>)
 8003ce0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ce8:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <getADCValues+0x86c>)
 8003cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cf4:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <getADCValues+0x86c>)
 8003cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfc:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <getADCValues+0x870>)
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareI2cADC] = (avgADCCounterValues[Adc.spareI2cADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <getADCValues+0x86c>)
 8003d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d10:	4413      	add	r3, r2
 8003d12:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <getADCValues+0x86c>)
 8003d20:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <getADCValues+0x86c>)
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2c:	ee07 3a90 	vmov	s15, r3
 8003d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <getADCValues+0x86c>)
 8003d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3c:	4a05      	ldr	r2, [pc, #20]	; (8003d54 <getADCValues+0x870>)
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	edc3 7a00 	vstr	s15, [r3]
	return adcValues;
 8003d46:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <getADCValues+0x870>)
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3778      	adds	r7, #120	; 0x78
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	2000005c 	.word	0x2000005c
 8003d54:	2000327c 	.word	0x2000327c

08003d58 <setVoltageMux>:

void setVoltageMux(int comChannel, int voltageChannel, int clear){
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
	uint8_t dataWriteCOMA[1];
	uint8_t dataWriteCOMB[1];
	int x;
	if((comChannel) & (!clear)){
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	bf0c      	ite	eq
 8003d6a:	2301      	moveq	r3, #1
 8003d6c:	2300      	movne	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d006      	beq.n	8003d88 <setVoltageMux+0x30>
		dataWriteCOMA[0] = socI2cVoltageMux.clearSwitches;
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <setVoltageMux+0x90>)
 8003d7c:	7cdb      	ldrb	r3, [r3, #19]
 8003d7e:	763b      	strb	r3, [r7, #24]
		dataWriteCOMB[0]= voltageChannel;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	753b      	strb	r3, [r7, #20]
 8003d86:	e011      	b.n	8003dac <setVoltageMux+0x54>
	}
	else if((!comChannel) & (!clear)){
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <setVoltageMux+0x48>
		dataWriteCOMA[0] = voltageChannel;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	763b      	strb	r3, [r7, #24]
		dataWriteCOMB[0]= socI2cVoltageMux.clearSwitches;
 8003d98:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <setVoltageMux+0x90>)
 8003d9a:	7cdb      	ldrb	r3, [r3, #19]
 8003d9c:	753b      	strb	r3, [r7, #20]
 8003d9e:	e005      	b.n	8003dac <setVoltageMux+0x54>
	}
	else{
		dataWriteCOMA[0] = socI2cVoltageMux.clearSwitches;
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <setVoltageMux+0x90>)
 8003da2:	7cdb      	ldrb	r3, [r3, #19]
 8003da4:	763b      	strb	r3, [r7, #24]
		dataWriteCOMB[0]= socI2cVoltageMux.clearSwitches;
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <setVoltageMux+0x90>)
 8003da8:	7cdb      	ldrb	r3, [r3, #19]
 8003daa:	753b      	strb	r3, [r7, #20]
	}
	x = writeI2CRegister(socI2cVoltageMux.address, socI2cVoltageMux.CMD_A_reg, dataWriteCOMA,sizeof(dataWriteCOMA), socI2cVoltageMux.i2cBank);
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <setVoltageMux+0x90>)
 8003dae:	7818      	ldrb	r0, [r3, #0]
 8003db0:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <setVoltageMux+0x90>)
 8003db2:	7859      	ldrb	r1, [r3, #1]
 8003db4:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <setVoltageMux+0x90>)
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f107 0218 	add.w	r2, r7, #24
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f7ff f95c 	bl	800307c <writeI2CRegister>
 8003dc4:	61f8      	str	r0, [r7, #28]
	x = writeI2CRegister(socI2cVoltageMux.address, socI2cVoltageMux.CMD_B_reg, dataWriteCOMB,sizeof(dataWriteCOMB), socI2cVoltageMux.i2cBank);
 8003dc6:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <setVoltageMux+0x90>)
 8003dc8:	7818      	ldrb	r0, [r3, #0]
 8003dca:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <setVoltageMux+0x90>)
 8003dcc:	7899      	ldrb	r1, [r3, #2]
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <setVoltageMux+0x90>)
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f107 0214 	add.w	r2, r7, #20
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f7ff f94f 	bl	800307c <writeI2CRegister>
 8003dde:	61f8      	str	r0, [r7, #28]
}
 8003de0:	bf00      	nop
 8003de2:	3720      	adds	r7, #32
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20000014 	.word	0x20000014

08003dec <HAL_ADC_ConvCpltCallback>:
//// Called when first half of buffer is filled
//void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
//}
//
//// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <startHeartbeat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startHeartbeat */
void startHeartbeat(void *argument)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8003e08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e0c:	4803      	ldr	r0, [pc, #12]	; (8003e1c <startHeartbeat+0x1c>)
 8003e0e:	f005 f822 	bl	8008e56 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8003e12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e16:	f009 ffed 	bl	800ddf4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8003e1a:	e7f5      	b.n	8003e08 <startHeartbeat+0x8>
 8003e1c:	40022000 	.word	0x40022000

08003e20 <startADCRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCRead */
void startADCRead(void *argument)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCRead */
  /* Infinite loop */
  for(;;)
  {
	  //empty out the data ready variables and the adc3_bufs
	memset(adcRestart,0,sizeof(adcRestart));
 8003e28:	2203      	movs	r2, #3
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4815      	ldr	r0, [pc, #84]	; (8003e84 <startADCRead+0x64>)
 8003e2e:	f00c fda2 	bl	8010976 <memset>
	memset(adc1_buf, 0, sizeof(adc1_buf));
 8003e32:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e36:	2100      	movs	r1, #0
 8003e38:	4813      	ldr	r0, [pc, #76]	; (8003e88 <startADCRead+0x68>)
 8003e3a:	f00c fd9c 	bl	8010976 <memset>
	memset(adc2_buf, 0, sizeof(adc2_buf));
 8003e3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e42:	2100      	movs	r1, #0
 8003e44:	4811      	ldr	r0, [pc, #68]	; (8003e8c <startADCRead+0x6c>)
 8003e46:	f00c fd96 	bl	8010976 <memset>
	memset(adc3_buf, 0, sizeof(adc3_buf));
 8003e4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e4e:	2100      	movs	r1, #0
 8003e50:	480f      	ldr	r0, [pc, #60]	; (8003e90 <startADCRead+0x70>)
 8003e52:	f00c fd90 	bl	8010976 <memset>
	//restart the DMAs.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	490b      	ldr	r1, [pc, #44]	; (8003e88 <startADCRead+0x68>)
 8003e5c:	480d      	ldr	r0, [pc, #52]	; (8003e94 <startADCRead+0x74>)
 8003e5e:	f003 fd0f 	bl	8007880 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4909      	ldr	r1, [pc, #36]	; (8003e8c <startADCRead+0x6c>)
 8003e68:	480b      	ldr	r0, [pc, #44]	; (8003e98 <startADCRead+0x78>)
 8003e6a:	f003 fd09 	bl	8007880 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8003e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e72:	4907      	ldr	r1, [pc, #28]	; (8003e90 <startADCRead+0x70>)
 8003e74:	4809      	ldr	r0, [pc, #36]	; (8003e9c <startADCRead+0x7c>)
 8003e76:	f003 fd03 	bl	8007880 <HAL_ADC_Start_DMA>
    osDelay(600);
 8003e7a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003e7e:	f009 ffb9 	bl	800ddf4 <osDelay>
  {
 8003e82:	e7d1      	b.n	8003e28 <startADCRead+0x8>
 8003e84:	20010ab0 	.word	0x20010ab0
 8003e88:	20010af4 	.word	0x20010af4
 8003e8c:	200218a4 	.word	0x200218a4
 8003e90:	200133ac 	.word	0x200133ac
 8003e94:	20013284 	.word	0x20013284
 8003e98:	2001056c 	.word	0x2001056c
 8003e9c:	200132d0 	.word	0x200132d0

08003ea0 <GetDaScreenBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetDaScreenBlink */
void GetDaScreenBlink(void *argument)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08c      	sub	sp, #48	; 0x30
 8003ea4:	af04      	add	r7, sp, #16
 8003ea6:	6078      	str	r0, [r7, #4]
	 static uint8_t LCD_Blink_White2 = 0b00000000;
	 static uint8_t LCD_Blink_Black1 = 0b00010000;
	 static uint8_t LCD_Blink_Black2 = 0b00000000;
	 //static uint16_t LCD_Blink_White = 0b0001100000000000;
	 //static uint16_t LCD_Blink_Black = 0b0001000000000000;
	 int x = 0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61fb      	str	r3, [r7, #28]
	 float *adcValues;
	 HAL_StatusTypeDef ret;
	 initializeDisplay();
 8003eac:	f000 fa16 	bl	80042dc <initializeDisplay>
	 uint32_t ulNotifiedValue;
	 uint8_t button_val = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	76fb      	strb	r3, [r7, #27]
	 uint8_t menu_val = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	76bb      	strb	r3, [r7, #26]
	 uint8_t running_menu = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	767b      	strb	r3, [r7, #25]
	 uint8_t readI2c[3];
	 uint8_t eepromTest[3];
	 eepromTest[0]=0x01;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	733b      	strb	r3, [r7, #12]
	 eepromTest[1]=0xfa;
 8003ec0:	23fa      	movs	r3, #250	; 0xfa
 8003ec2:	737b      	strb	r3, [r7, #13]
	 eepromTest[2]=0xfa;
 8003ec4:	23fa      	movs	r3, #250	; 0xfa
 8003ec6:	73bb      	strb	r3, [r7, #14]

	   for(;;)
	   {
	 	  ulNotifiedValue = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
	 	  xTaskNotifyWait(NOTIFY_NOCLEAR, NOTIFY_CLEARALL, &ulNotifiedValue, portMAX_DELAY);
 8003ecc:	f107 0214 	add.w	r2, r7, #20
 8003ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed4:	21ff      	movs	r1, #255	; 0xff
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	f00b fc4e 	bl	800f778 <xTaskNotifyWait>
	 	  // button press decode
	 	  button_val = (ulNotifiedValue & NOTIFY_BTN_MASK);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	76fb      	strb	r3, [r7, #27]
	 	  menu_val = ((ulNotifiedValue & NOTIFY_MENU_MASK) >> NOTIFY_MENU_BIT);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	76bb      	strb	r3, [r7, #26]
	 	  running_menu = ((ulNotifiedValue & NOTIFY_RUN_MENU_MASK) >> NOTIFY_MENU_RUN_BIT);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	767b      	strb	r3, [r7, #25]
	 	  setVoltageMux(COMA,socI2cVoltageMux.enableSW2,0);
 8003efe:	4b3c      	ldr	r3, [pc, #240]	; (8003ff0 <GetDaScreenBlink+0x150>)
 8003f00:	791b      	ldrb	r3, [r3, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	4619      	mov	r1, r3
 8003f06:	2000      	movs	r0, #0
 8003f08:	f7ff ff26 	bl	8003d58 <setVoltageMux>
	 	  HAL_I2C_Mem_Write(&hi2c4,(0x53 << 1),0x0001, I2C_MEMADD_SIZE_16BIT,eepromTest,3,100);
 8003f0c:	2364      	movs	r3, #100	; 0x64
 8003f0e:	9302      	str	r3, [sp, #8]
 8003f10:	2303      	movs	r3, #3
 8003f12:	9301      	str	r3, [sp, #4]
 8003f14:	f107 030c 	add.w	r3, r7, #12
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	21a6      	movs	r1, #166	; 0xa6
 8003f20:	4834      	ldr	r0, [pc, #208]	; (8003ff4 <GetDaScreenBlink+0x154>)
 8003f22:	f005 fa51 	bl	80093c8 <HAL_I2C_Mem_Write>
	 	  HAL_Delay(10);
 8003f26:	200a      	movs	r0, #10
 8003f28:	f003 fb02 	bl	8007530 <HAL_Delay>
	 	  HAL_I2C_Mem_Read(&hi2c4,(0x53 << 1),0x0001, I2C_MEMADD_SIZE_16BIT,readI2c,3,100);
 8003f2c:	2364      	movs	r3, #100	; 0x64
 8003f2e:	9302      	str	r3, [sp, #8]
 8003f30:	2303      	movs	r3, #3
 8003f32:	9301      	str	r3, [sp, #4]
 8003f34:	f107 0310 	add.w	r3, r7, #16
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	21a6      	movs	r1, #166	; 0xa6
 8003f40:	482c      	ldr	r0, [pc, #176]	; (8003ff4 <GetDaScreenBlink+0x154>)
 8003f42:	f005 fb55 	bl	80095f0 <HAL_I2C_Mem_Read>
	 	  printf(readI2c[0]);
 8003f46:	7c3b      	ldrb	r3, [r7, #16]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f00d fb2d 	bl	80115a8 <iprintf>
	 	  x =writeI2CRegister((0x53 << 1), 0x00, eepromTest, 3, 4);
 8003f4e:	f107 020c 	add.w	r2, r7, #12
 8003f52:	2304      	movs	r3, #4
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	2303      	movs	r3, #3
 8003f58:	2100      	movs	r1, #0
 8003f5a:	20a6      	movs	r0, #166	; 0xa6
 8003f5c:	f7ff f88e 	bl	800307c <writeI2CRegister>
 8003f60:	61f8      	str	r0, [r7, #28]
	 	  HAL_I2C_Mem_Read(&hi2c4,0x53 << 1,0x0001, I2C_MEMADD_SIZE_16BIT,(uint8_t*)readI2c,1,100);
 8003f62:	2364      	movs	r3, #100	; 0x64
 8003f64:	9302      	str	r3, [sp, #8]
 8003f66:	2301      	movs	r3, #1
 8003f68:	9301      	str	r3, [sp, #4]
 8003f6a:	f107 0310 	add.w	r3, r7, #16
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	2302      	movs	r3, #2
 8003f72:	2201      	movs	r2, #1
 8003f74:	21a6      	movs	r1, #166	; 0xa6
 8003f76:	481f      	ldr	r0, [pc, #124]	; (8003ff4 <GetDaScreenBlink+0x154>)
 8003f78:	f005 fb3a 	bl	80095f0 <HAL_I2C_Mem_Read>
	 	  printf(readI2c[0]);
 8003f7c:	7c3b      	ldrb	r3, [r7, #16]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f00d fb12 	bl	80115a8 <iprintf>
	 //	  printf("highlighed menu: %d\n\r", menu_val);
	 //	  printf("button_press: %d\r\n", button_val);

	 	  // If the BACK button was pressed, just run the SEL button case with the previous menu

		  switch(running_menu)
 8003f84:	7e7b      	ldrb	r3, [r7, #25]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d82d      	bhi.n	8003fe8 <GetDaScreenBlink+0x148>
 8003f8c:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <GetDaScreenBlink+0xf4>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08003fb9 	.word	0x08003fb9
 8003f98:	08003fa5 	.word	0x08003fa5
 8003f9c:	08003fc9 	.word	0x08003fc9
 8003fa0:	08003fd9 	.word	0x08003fd9
		  {
		  case BOOT_MENU:
		  {
			  printf("BOOT_MENU\r\n");
 8003fa4:	4814      	ldr	r0, [pc, #80]	; (8003ff8 <GetDaScreenBlink+0x158>)
 8003fa6:	f00d fb73 	bl	8011690 <puts>
			  drawBootMenu(menu_val, button_val, running_menu);
 8003faa:	7ebb      	ldrb	r3, [r7, #26]
 8003fac:	7ef9      	ldrb	r1, [r7, #27]
 8003fae:	7e7a      	ldrb	r2, [r7, #25]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f002 f8fb 	bl	80061ac <drawBootMenu>
			  //uartTransmitChar("switch BOOT_MENU\r\n",7);
			  break;
 8003fb6:	e017      	b.n	8003fe8 <GetDaScreenBlink+0x148>
		  }
		  case MAIN_MENU:
		  {
			  printf("MAIN_MENU\r\n");
 8003fb8:	4810      	ldr	r0, [pc, #64]	; (8003ffc <GetDaScreenBlink+0x15c>)
 8003fba:	f00d fb69 	bl	8011690 <puts>
			  drawMainMenu(menu_val);
 8003fbe:	7ebb      	ldrb	r3, [r7, #26]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 f9b5 	bl	8004330 <drawMainMenu>
			  //uartTransmitChar("switch MAIN_MENU\r\n",7);
			  break;
 8003fc6:	e00f      	b.n	8003fe8 <GetDaScreenBlink+0x148>
		  }
		  case STATUS_MENU:
		  {
			  printf("STATUS_MENU\r\n");
 8003fc8:	480d      	ldr	r0, [pc, #52]	; (8004000 <GetDaScreenBlink+0x160>)
 8003fca:	f00d fb61 	bl	8011690 <puts>
			  drawStatusMenu(menu_val);
 8003fce:	7ebb      	ldrb	r3, [r7, #26]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fc59 	bl	8004888 <drawStatusMenu>
			  //uartTransmitChar("switch STATUS_MENU\r\n",7);
			  break;
 8003fd6:	e007      	b.n	8003fe8 <GetDaScreenBlink+0x148>
		  }
		  case SYSTEM_INFO_MENU:
		  {
			  printf("SYSTEM INFO MENU\r\n");
 8003fd8:	480a      	ldr	r0, [pc, #40]	; (8004004 <GetDaScreenBlink+0x164>)
 8003fda:	f00d fb59 	bl	8011690 <puts>
			  //uartTransmitChar("switch SYSTEM INFO_MENU\r\n",7);
			  drawSystemInfoMenu(menu_val);
 8003fde:	7ebb      	ldrb	r3, [r7, #26]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f001 fdbd 	bl	8005b60 <drawSystemInfoMenu>
			  break;
 8003fe6:	bf00      	nop
		  }
		  }
	 	  osDelay(100);
 8003fe8:	2064      	movs	r0, #100	; 0x64
 8003fea:	f009 ff03 	bl	800ddf4 <osDelay>
	   {
 8003fee:	e76b      	b.n	8003ec8 <GetDaScreenBlink+0x28>
 8003ff0:	20000014 	.word	0x20000014
 8003ff4:	200103f0 	.word	0x200103f0
 8003ff8:	08014ccc 	.word	0x08014ccc
 8003ffc:	08014cd8 	.word	0x08014cd8
 8004000:	08014ce4 	.word	0x08014ce4
 8004004:	08014cf4 	.word	0x08014cf4

08004008 <startGpioInputRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGpioInputRead */
void startGpioInputRead(void *argument)
{
 8004008:	b590      	push	{r4, r7, lr}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGpioInputRead */
  /* Infinite loop */
  for(;;)
  {
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8004010:	4b42      	ldr	r3, [pc, #264]	; (800411c <startGpioInputRead+0x114>)
 8004012:	681c      	ldr	r4, [r3, #0]
 8004014:	2180      	movs	r1, #128	; 0x80
 8004016:	4842      	ldr	r0, [pc, #264]	; (8004120 <startGpioInputRead+0x118>)
 8004018:	f004 feec 	bl	8008df4 <HAL_GPIO_ReadPin>
 800401c:	4603      	mov	r3, r0
 800401e:	461a      	mov	r2, r3
 8004020:	4b40      	ldr	r3, [pc, #256]	; (8004124 <startGpioInputRead+0x11c>)
 8004022:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input1] = HAL_GPIO_ReadPin(UI_INPUT1_GPIO_Port,UI_INPUT1_Pin);
 8004024:	4b3d      	ldr	r3, [pc, #244]	; (800411c <startGpioInputRead+0x114>)
 8004026:	685c      	ldr	r4, [r3, #4]
 8004028:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800402c:	483e      	ldr	r0, [pc, #248]	; (8004128 <startGpioInputRead+0x120>)
 800402e:	f004 fee1 	bl	8008df4 <HAL_GPIO_ReadPin>
 8004032:	4603      	mov	r3, r0
 8004034:	461a      	mov	r2, r3
 8004036:	4b3b      	ldr	r3, [pc, #236]	; (8004124 <startGpioInputRead+0x11c>)
 8004038:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input2] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT2_Pin);
 800403a:	4b38      	ldr	r3, [pc, #224]	; (800411c <startGpioInputRead+0x114>)
 800403c:	689c      	ldr	r4, [r3, #8]
 800403e:	2110      	movs	r1, #16
 8004040:	483a      	ldr	r0, [pc, #232]	; (800412c <startGpioInputRead+0x124>)
 8004042:	f004 fed7 	bl	8008df4 <HAL_GPIO_ReadPin>
 8004046:	4603      	mov	r3, r0
 8004048:	461a      	mov	r2, r3
 800404a:	4b36      	ldr	r3, [pc, #216]	; (8004124 <startGpioInputRead+0x11c>)
 800404c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input3] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT3_Pin);
 800404e:	4b33      	ldr	r3, [pc, #204]	; (800411c <startGpioInputRead+0x114>)
 8004050:	68dc      	ldr	r4, [r3, #12]
 8004052:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004056:	4835      	ldr	r0, [pc, #212]	; (800412c <startGpioInputRead+0x124>)
 8004058:	f004 fecc 	bl	8008df4 <HAL_GPIO_ReadPin>
 800405c:	4603      	mov	r3, r0
 800405e:	461a      	mov	r2, r3
 8004060:	4b30      	ldr	r3, [pc, #192]	; (8004124 <startGpioInputRead+0x11c>)
 8004062:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input4] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT4_Pin);
 8004064:	4b2d      	ldr	r3, [pc, #180]	; (800411c <startGpioInputRead+0x114>)
 8004066:	691c      	ldr	r4, [r3, #16]
 8004068:	f44f 7100 	mov.w	r1, #512	; 0x200
 800406c:	482f      	ldr	r0, [pc, #188]	; (800412c <startGpioInputRead+0x124>)
 800406e:	f004 fec1 	bl	8008df4 <HAL_GPIO_ReadPin>
 8004072:	4603      	mov	r3, r0
 8004074:	461a      	mov	r2, r3
 8004076:	4b2b      	ldr	r3, [pc, #172]	; (8004124 <startGpioInputRead+0x11c>)
 8004078:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input5] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT5_Pin);
 800407a:	4b28      	ldr	r3, [pc, #160]	; (800411c <startGpioInputRead+0x114>)
 800407c:	695c      	ldr	r4, [r3, #20]
 800407e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004082:	482a      	ldr	r0, [pc, #168]	; (800412c <startGpioInputRead+0x124>)
 8004084:	f004 feb6 	bl	8008df4 <HAL_GPIO_ReadPin>
 8004088:	4603      	mov	r3, r0
 800408a:	461a      	mov	r2, r3
 800408c:	4b25      	ldr	r3, [pc, #148]	; (8004124 <startGpioInputRead+0x11c>)
 800408e:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input6] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT6_Pin);
 8004090:	4b22      	ldr	r3, [pc, #136]	; (800411c <startGpioInputRead+0x114>)
 8004092:	699c      	ldr	r4, [r3, #24]
 8004094:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004098:	4824      	ldr	r0, [pc, #144]	; (800412c <startGpioInputRead+0x124>)
 800409a:	f004 feab 	bl	8008df4 <HAL_GPIO_ReadPin>
 800409e:	4603      	mov	r3, r0
 80040a0:	461a      	mov	r2, r3
 80040a2:	4b20      	ldr	r3, [pc, #128]	; (8004124 <startGpioInputRead+0x11c>)
 80040a4:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input7] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT7_Pin);
 80040a6:	4b1d      	ldr	r3, [pc, #116]	; (800411c <startGpioInputRead+0x114>)
 80040a8:	69dc      	ldr	r4, [r3, #28]
 80040aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040ae:	481f      	ldr	r0, [pc, #124]	; (800412c <startGpioInputRead+0x124>)
 80040b0:	f004 fea0 	bl	8008df4 <HAL_GPIO_ReadPin>
 80040b4:	4603      	mov	r3, r0
 80040b6:	461a      	mov	r2, r3
 80040b8:	4b1a      	ldr	r3, [pc, #104]	; (8004124 <startGpioInputRead+0x11c>)
 80040ba:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input8] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT8_Pin);
 80040bc:	4b17      	ldr	r3, [pc, #92]	; (800411c <startGpioInputRead+0x114>)
 80040be:	6a1c      	ldr	r4, [r3, #32]
 80040c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040c4:	4819      	ldr	r0, [pc, #100]	; (800412c <startGpioInputRead+0x124>)
 80040c6:	f004 fe95 	bl	8008df4 <HAL_GPIO_ReadPin>
 80040ca:	4603      	mov	r3, r0
 80040cc:	461a      	mov	r2, r3
 80040ce:	4b15      	ldr	r3, [pc, #84]	; (8004124 <startGpioInputRead+0x11c>)
 80040d0:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input9] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT9_Pin);
 80040d2:	4b12      	ldr	r3, [pc, #72]	; (800411c <startGpioInputRead+0x114>)
 80040d4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80040d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040da:	4814      	ldr	r0, [pc, #80]	; (800412c <startGpioInputRead+0x124>)
 80040dc:	f004 fe8a 	bl	8008df4 <HAL_GPIO_ReadPin>
 80040e0:	4603      	mov	r3, r0
 80040e2:	461a      	mov	r2, r3
 80040e4:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <startGpioInputRead+0x11c>)
 80040e6:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input10] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT10_Pin);
 80040e8:	4b0c      	ldr	r3, [pc, #48]	; (800411c <startGpioInputRead+0x114>)
 80040ea:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80040ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040f0:	480e      	ldr	r0, [pc, #56]	; (800412c <startGpioInputRead+0x124>)
 80040f2:	f004 fe7f 	bl	8008df4 <HAL_GPIO_ReadPin>
 80040f6:	4603      	mov	r3, r0
 80040f8:	461a      	mov	r2, r3
 80040fa:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <startGpioInputRead+0x11c>)
 80040fc:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input11] = HAL_GPIO_ReadPin(UI_INPUT11_GPIO_Port,UI_INPUT11_Pin);
 80040fe:	4b07      	ldr	r3, [pc, #28]	; (800411c <startGpioInputRead+0x114>)
 8004100:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004102:	2108      	movs	r1, #8
 8004104:	480a      	ldr	r0, [pc, #40]	; (8004130 <startGpioInputRead+0x128>)
 8004106:	f004 fe75 	bl	8008df4 <HAL_GPIO_ReadPin>
 800410a:	4603      	mov	r3, r0
 800410c:	461a      	mov	r2, r3
 800410e:	4b05      	ldr	r3, [pc, #20]	; (8004124 <startGpioInputRead+0x11c>)
 8004110:	551a      	strb	r2, [r3, r4]
	  osDelay(950);
 8004112:	f240 30b6 	movw	r0, #950	; 0x3b6
 8004116:	f009 fe6d 	bl	800ddf4 <osDelay>
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 800411a:	e779      	b.n	8004010 <startGpioInputRead+0x8>
 800411c:	2000002c 	.word	0x2000002c
 8004120:	40020400 	.word	0x40020400
 8004124:	20010560 	.word	0x20010560
 8004128:	40020800 	.word	0x40020800
 800412c:	40020c00 	.word	0x40020c00
 8004130:	40021000 	.word	0x40021000

08004134 <startNavigationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startNavigationTask */
void startNavigationTask(void *argument)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startNavigationTask */
	uint8_t menu_highlight = MENU_TOP;	// variable indicates what menu item is currently being highlighted
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
	uint8_t	menu_run = MAIN_MENU;		// variable to track what menu is currently running
 8004140:	2301      	movs	r3, #1
 8004142:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_menu = menu_run;		// variable to track what the previous menu running was, this is used for the BACK button
 8004144:	7bbb      	ldrb	r3, [r7, #14]
 8004146:	737b      	strb	r3, [r7, #13]
	uint8_t menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 8004148:	2303      	movs	r3, #3
 800414a:	733b      	strb	r3, [r7, #12]
	uint8_t prev_menu_highlight = menu_highlight; //variable to track previous menu highlight
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	72fb      	strb	r3, [r7, #11]
	// Clear button flags here

  /* Infinite loop */
  for(;;)
  {
	switch(inputButtonSet)
 8004150:	4b4f      	ldr	r3, [pc, #316]	; (8004290 <startNavigationTask+0x15c>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	3b01      	subs	r3, #1
 8004156:	2b03      	cmp	r3, #3
 8004158:	d863      	bhi.n	8004222 <startNavigationTask+0xee>
 800415a:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <startNavigationTask+0x2c>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004171 	.word	0x08004171
 8004164:	0800419b 	.word	0x0800419b
 8004168:	080041c7 	.word	0x080041c7
 800416c:	080041ed 	.word	0x080041ed
	{
	case UP:
	{
		if (menu_highlight == MENU_TOP)
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d064      	beq.n	8004240 <startNavigationTask+0x10c>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight - 1;
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	3b01      	subs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
			// task notify the display task with UP and current highlighted item
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu indicator highlight flags
			// [8:11]: currently running menu flags
			xTaskNotify(DatScreenBlinkHandle, (UP | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 800417c:	4b45      	ldr	r3, [pc, #276]	; (8004294 <startNavigationTask+0x160>)
 800417e:	6818      	ldr	r0, [r3, #0]
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	f043 0201 	orr.w	r2, r3, #1
 8004188:	7bbb      	ldrb	r3, [r7, #14]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	4313      	orrs	r3, r2
 800418e:	4619      	mov	r1, r3
 8004190:	2300      	movs	r3, #0
 8004192:	2204      	movs	r2, #4
 8004194:	f00b fb4a 	bl	800f82c <xTaskGenericNotify>
		}
		break;
 8004198:	e052      	b.n	8004240 <startNavigationTask+0x10c>
	}
	case DWN:
	{
		if (menu_highlight >= menu_Max_Items)
 800419a:	7bfa      	ldrb	r2, [r7, #15]
 800419c:	7b3b      	ldrb	r3, [r7, #12]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d250      	bcs.n	8004244 <startNavigationTask+0x110>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight + 1;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	3301      	adds	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu selection flags
			// [8:11]: currently running menu flags
			// [12:15]: previously running menu flags
			xTaskNotify(DatScreenBlinkHandle, (DWN | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80041a8:	4b3a      	ldr	r3, [pc, #232]	; (8004294 <startNavigationTask+0x160>)
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	f043 0202 	orr.w	r2, r3, #2
 80041b4:	7bbb      	ldrb	r3, [r7, #14]
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	4313      	orrs	r3, r2
 80041ba:	4619      	mov	r1, r3
 80041bc:	2300      	movs	r3, #0
 80041be:	2204      	movs	r2, #4
 80041c0:	f00b fb34 	bl	800f82c <xTaskGenericNotify>
		}
		break;
 80041c4:	e03e      	b.n	8004244 <startNavigationTask+0x110>
	}
	case BACK:
	{
		menu_run = prev_menu;
 80041c6:	7b7b      	ldrb	r3, [r7, #13]
 80041c8:	73bb      	strb	r3, [r7, #14]
		menu_highlight = prev_menu_highlight; //set the highlight back to where it was for the previous menu.
 80041ca:	7afb      	ldrb	r3, [r7, #11]
 80041cc:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (BACK | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80041ce:	4b31      	ldr	r3, [pc, #196]	; (8004294 <startNavigationTask+0x160>)
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	f043 0203 	orr.w	r2, r3, #3
 80041da:	7bbb      	ldrb	r3, [r7, #14]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	4313      	orrs	r3, r2
 80041e0:	4619      	mov	r1, r3
 80041e2:	2300      	movs	r3, #0
 80041e4:	2204      	movs	r2, #4
 80041e6:	f00b fb21 	bl	800f82c <xTaskGenericNotify>
		break;
 80041ea:	e02c      	b.n	8004246 <startNavigationTask+0x112>
	}
	case SEL:
	{
		if(menu_run==MAIN_MENU){
 80041ec:	7bbb      	ldrb	r3, [r7, #14]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d108      	bne.n	8004204 <startNavigationTask+0xd0>
			prev_menu = menu_run;		// save currently running menu for BACK button
 80041f2:	7bbb      	ldrb	r3, [r7, #14]
 80041f4:	737b      	strb	r3, [r7, #13]
			menu_run = menu_highlight+1;	// update the currently running menu to what the user SELECTED. Requires +1 to match with menu values
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	3301      	adds	r3, #1
 80041fa:	73bb      	strb	r3, [r7, #14]
			prev_menu_highlight = menu_highlight; //keep track of the previous menu's highlight for when back is pressed
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	72fb      	strb	r3, [r7, #11]
			menu_highlight=MENU_TOP; //reset the menu highlight for the next menu
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (SEL | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004204:	4b23      	ldr	r3, [pc, #140]	; (8004294 <startNavigationTask+0x160>)
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	f043 0204 	orr.w	r2, r3, #4
 8004210:	7bbb      	ldrb	r3, [r7, #14]
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	4313      	orrs	r3, r2
 8004216:	4619      	mov	r1, r3
 8004218:	2300      	movs	r3, #0
 800421a:	2204      	movs	r2, #4
 800421c:	f00b fb06 	bl	800f82c <xTaskGenericNotify>
		break;
 8004220:	e011      	b.n	8004246 <startNavigationTask+0x112>
	}
	default:
		// task notify the display task with no button press.  Just refresh the current running menu.
		xTaskNotify(DatScreenBlinkHandle, (NO_BTN_PRESS | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004222:	4b1c      	ldr	r3, [pc, #112]	; (8004294 <startNavigationTask+0x160>)
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	f043 0205 	orr.w	r2, r3, #5
 800422e:	7bbb      	ldrb	r3, [r7, #14]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	4313      	orrs	r3, r2
 8004234:	4619      	mov	r1, r3
 8004236:	2300      	movs	r3, #0
 8004238:	2204      	movs	r2, #4
 800423a:	f00b faf7 	bl	800f82c <xTaskGenericNotify>
		break;
 800423e:	e002      	b.n	8004246 <startNavigationTask+0x112>
		break;
 8004240:	bf00      	nop
 8004242:	e000      	b.n	8004246 <startNavigationTask+0x112>
		break;
 8004244:	bf00      	nop
	}
	//initialize the max indicator for each menu
	switch(menu_run){
 8004246:	7bbb      	ldrb	r3, [r7, #14]
 8004248:	3b01      	subs	r3, #1
 800424a:	2b03      	cmp	r3, #3
 800424c:	d816      	bhi.n	800427c <startNavigationTask+0x148>
 800424e:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <startNavigationTask+0x120>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	0800426b 	.word	0x0800426b
 8004258:	08004265 	.word	0x08004265
 800425c:	08004271 	.word	0x08004271
 8004260:	08004277 	.word	0x08004277

	case BOOT_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 8004264:	2305      	movs	r3, #5
 8004266:	733b      	strb	r3, [r7, #12]
		break;
 8004268:	e00b      	b.n	8004282 <startNavigationTask+0x14e>
	}
	case MAIN_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 800426a:	2303      	movs	r3, #3
 800426c:	733b      	strb	r3, [r7, #12]
		break;
 800426e:	e008      	b.n	8004282 <startNavigationTask+0x14e>
	}
	case STATUS_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_STATUS_MENU;
 8004270:	2303      	movs	r3, #3
 8004272:	733b      	strb	r3, [r7, #12]
		break;
 8004274:	e005      	b.n	8004282 <startNavigationTask+0x14e>
	}
	case SYSTEM_INFO_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_SYSTEM_INFO_MENU;
 8004276:	2302      	movs	r3, #2
 8004278:	733b      	strb	r3, [r7, #12]
		break;
 800427a:	e002      	b.n	8004282 <startNavigationTask+0x14e>
	}
	default:
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 800427c:	2305      	movs	r3, #5
 800427e:	733b      	strb	r3, [r7, #12]
		break;
 8004280:	bf00      	nop
	}
	inputButtonSet = NO_BTN_PRESS;
 8004282:	4b03      	ldr	r3, [pc, #12]	; (8004290 <startNavigationTask+0x15c>)
 8004284:	2205      	movs	r2, #5
 8004286:	701a      	strb	r2, [r3, #0]
    osDelay(200);
 8004288:	20c8      	movs	r0, #200	; 0xc8
 800428a:	f009 fdb3 	bl	800ddf4 <osDelay>
	switch(inputButtonSet)
 800428e:	e75f      	b.n	8004150 <startNavigationTask+0x1c>
 8004290:	200000bc 	.word	0x200000bc
 8004294:	20024074 	.word	0x20024074

08004298 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d101      	bne.n	80042ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80042aa:	f003 f921 	bl	80074f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40001000 	.word	0x40001000

080042bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80042c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042c2:	e7fe      	b.n	80042c2 <Error_Handler+0x6>

080042c4 <SMLCD_Enable>:

#define SMLCD_SPI_PORT             hspi4
// Public macros and functions

// Enable the display (using DISP pin)
__STATIC_INLINE void SMLCD_Enable(void) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
	SMLCD_DISP_H;
 80042c8:	2201      	movs	r2, #1
 80042ca:	2102      	movs	r1, #2
 80042cc:	4802      	ldr	r0, [pc, #8]	; (80042d8 <SMLCD_Enable+0x14>)
 80042ce:	f004 fda9 	bl	8008e24 <HAL_GPIO_WritePin>
}
 80042d2:	bf00      	nop
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40022400 	.word	0x40022400

080042dc <initializeDisplay>:
#include "menu.h"


float displayAdcValues[21];

void initializeDisplay(){
 80042dc:	b590      	push	{r4, r7, lr}
 80042de:	b099      	sub	sp, #100	; 0x64
 80042e0:	af16      	add	r7, sp, #88	; 0x58
	SMLCD_InitGPIO();
 80042e2:	f7fc f999 	bl	8000618 <SMLCD_InitGPIO>
	SMLCD_Init(hspi4);
 80042e6:	4c10      	ldr	r4, [pc, #64]	; (8004328 <initializeDisplay+0x4c>)
 80042e8:	4668      	mov	r0, sp
 80042ea:	f104 0310 	add.w	r3, r4, #16
 80042ee:	2254      	movs	r2, #84	; 0x54
 80042f0:	4619      	mov	r1, r3
 80042f2:	f00c fb35 	bl	8010960 <memcpy>
 80042f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80042fa:	f7fc f9ad 	bl	8000658 <SMLCD_Init>
	SMLCD_Enable();
 80042fe:	f7ff ffe1 	bl	80042c4 <SMLCD_Enable>
	SMLCD_Clear();
 8004302:	f7fc f9c9 	bl	8000698 <SMLCD_Clear>
#define ORI 0
	uint8_t ori;
	if (ORI == 0){
		ori = LCD_ORIENT_NORMAL;
 8004306:	2301      	movs	r3, #1
 8004308:	71fb      	strb	r3, [r7, #7]
	}
	SMLCD_Orientation(ori);
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	4618      	mov	r0, r3
 800430e:	f7fc fb05 	bl	800091c <SMLCD_Orientation>
	LCD_Clear();
 8004312:	f7fc fb2b 	bl	800096c <LCD_Clear>
	memset(displayAdcValues,0,sizeof(displayAdcValues));
 8004316:	2254      	movs	r2, #84	; 0x54
 8004318:	2100      	movs	r1, #0
 800431a:	4804      	ldr	r0, [pc, #16]	; (800432c <initializeDisplay+0x50>)
 800431c:	f00c fb2b 	bl	8010976 <memset>
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	bd90      	pop	{r4, r7, pc}
 8004328:	20010340 	.word	0x20010340
 800432c:	2002407c 	.word	0x2002407c

08004330 <drawMainMenu>:

void drawMainMenu(int indicator){
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	int i,j;
	previousMenu=0;
 8004338:	4b9a      	ldr	r3, [pc, #616]	; (80045a4 <drawMainMenu+0x274>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 800433e:	f7fc fb15 	bl	800096c <LCD_Clear>
	LCD_PixelMode = LCD_PSET;
 8004342:	4b99      	ldr	r3, [pc, #612]	; (80045a8 <drawMainMenu+0x278>)
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8004348:	4b98      	ldr	r3, [pc, #608]	; (80045ac <drawMainMenu+0x27c>)
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	4b97      	ldr	r3, [pc, #604]	; (80045b0 <drawMainMenu+0x280>)
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	3b01      	subs	r3, #1
 8004356:	b29b      	uxth	r3, r3
 8004358:	2100      	movs	r1, #0
 800435a:	2000      	movs	r0, #0
 800435c:	f7fc fd58 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8004360:	4b92      	ldr	r3, [pc, #584]	; (80045ac <drawMainMenu+0x27c>)
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	3b03      	subs	r3, #3
 8004366:	b29a      	uxth	r2, r3
 8004368:	4b91      	ldr	r3, [pc, #580]	; (80045b0 <drawMainMenu+0x280>)
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	3b03      	subs	r3, #3
 800436e:	b29b      	uxth	r3, r3
 8004370:	2102      	movs	r1, #2
 8004372:	2002      	movs	r0, #2
 8004374:	f7fc fd4c 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8004378:	230a      	movs	r3, #10
 800437a:	60bb      	str	r3, [r7, #8]
	j  = 10;
 800437c:	230a      	movs	r3, #10
 800437e:	60fb      	str	r3, [r7, #12]
	i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	b298      	uxth	r0, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	b299      	uxth	r1, r3
 8004388:	4b8a      	ldr	r3, [pc, #552]	; (80045b4 <drawMainMenu+0x284>)
 800438a:	4a8b      	ldr	r2, [pc, #556]	; (80045b8 <drawMainMenu+0x288>)
 800438c:	f7fd f8ce 	bl	800152c <LCD_PutStr>
 8004390:	4603      	mov	r3, r0
 8004392:	461a      	mov	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4413      	add	r3, r2
 8004398:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "So many!", fnt7x10);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	b298      	uxth	r0, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	b299      	uxth	r1, r3
 80043a2:	4b84      	ldr	r3, [pc, #528]	; (80045b4 <drawMainMenu+0x284>)
 80043a4:	4a85      	ldr	r2, [pc, #532]	; (80045bc <drawMainMenu+0x28c>)
 80043a6:	f7fd f8c1 	bl	800152c <LCD_PutStr>
 80043aa:	4603      	mov	r3, r0
 80043ac:	461a      	mov	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4413      	add	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]
	i+=20;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	3314      	adds	r3, #20
 80043b8:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	b298      	uxth	r0, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	b299      	uxth	r1, r3
 80043c2:	4b7c      	ldr	r3, [pc, #496]	; (80045b4 <drawMainMenu+0x284>)
 80043c4:	4a7e      	ldr	r2, [pc, #504]	; (80045c0 <drawMainMenu+0x290>)
 80043c6:	f7fd f8b1 	bl	800152c <LCD_PutStr>
 80043ca:	4603      	mov	r3, r0
 80043cc:	461a      	mov	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4413      	add	r3, r2
 80043d2:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "QED", fnt7x10);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	b298      	uxth	r0, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	b299      	uxth	r1, r3
 80043dc:	4b75      	ldr	r3, [pc, #468]	; (80045b4 <drawMainMenu+0x284>)
 80043de:	4a79      	ldr	r2, [pc, #484]	; (80045c4 <drawMainMenu+0x294>)
 80043e0:	f7fd f8a4 	bl	800152c <LCD_PutStr>
 80043e4:	4603      	mov	r3, r0
 80043e6:	461a      	mov	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4413      	add	r3, r2
 80043ec:	60bb      	str	r3, [r7, #8]
	i  = 135;
 80043ee:	2387      	movs	r3, #135	; 0x87
 80043f0:	60bb      	str	r3, [r7, #8]
	j += 14;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	330e      	adds	r3, #14
 80043f6:	60fb      	str	r3, [r7, #12]

	// Horizontal divider
	LCD_FillRect(2, j, scr_width - 94, j + 3);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	b299      	uxth	r1, r3
 80043fc:	4b6b      	ldr	r3, [pc, #428]	; (80045ac <drawMainMenu+0x27c>)
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	3b5e      	subs	r3, #94	; 0x5e
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	b29b      	uxth	r3, r3
 8004408:	3303      	adds	r3, #3
 800440a:	b29b      	uxth	r3, r3
 800440c:	2002      	movs	r0, #2
 800440e:	f7fc fd41 	bl	8000e94 <LCD_FillRect>

	// Vertical divider
	LCD_FillRect(i + 5, 2, i + 8, j);
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	b29b      	uxth	r3, r3
 8004416:	3305      	adds	r3, #5
 8004418:	b298      	uxth	r0, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	b29b      	uxth	r3, r3
 800441e:	3308      	adds	r3, #8
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	b29b      	uxth	r3, r3
 8004426:	2102      	movs	r1, #2
 8004428:	f7fc fd34 	bl	8000e94 <LCD_FillRect>
	LCD_FillRect(scr_width-97, 2, scr_width-94,scr_height-1);
 800442c:	4b5f      	ldr	r3, [pc, #380]	; (80045ac <drawMainMenu+0x27c>)
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	3b61      	subs	r3, #97	; 0x61
 8004432:	b298      	uxth	r0, r3
 8004434:	4b5d      	ldr	r3, [pc, #372]	; (80045ac <drawMainMenu+0x27c>)
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	3b5e      	subs	r3, #94	; 0x5e
 800443a:	b29a      	uxth	r2, r3
 800443c:	4b5c      	ldr	r3, [pc, #368]	; (80045b0 <drawMainMenu+0x280>)
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	3b01      	subs	r3, #1
 8004442:	b29b      	uxth	r3, r3
 8004444:	2102      	movs	r1, #2
 8004446:	f7fc fd25 	bl	8000e94 <LCD_FillRect>
	i  = scr_width-80;
 800444a:	4b58      	ldr	r3, [pc, #352]	; (80045ac <drawMainMenu+0x27c>)
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	3b50      	subs	r3, #80	; 0x50
 8004450:	60bb      	str	r3, [r7, #8]
	j  = 3;
 8004452:	2303      	movs	r3, #3
 8004454:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	b298      	uxth	r0, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b02      	subs	r3, #2
 8004460:	b299      	uxth	r1, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	b29b      	uxth	r3, r3
 8004466:	330c      	adds	r3, #12
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	b29b      	uxth	r3, r3
 800446e:	3308      	adds	r3, #8
 8004470:	b29b      	uxth	r3, r3
 8004472:	f7fc fd0f 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	3314      	adds	r3, #20
 800447a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT1 LED", fnt7x10);
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	b298      	uxth	r0, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	b299      	uxth	r1, r3
 8004484:	4b4b      	ldr	r3, [pc, #300]	; (80045b4 <drawMainMenu+0x284>)
 8004486:	4a50      	ldr	r2, [pc, #320]	; (80045c8 <drawMainMenu+0x298>)
 8004488:	f7fd f850 	bl	800152c <LCD_PutStr>
	j+=22;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3316      	adds	r3, #22
 8004490:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 8004492:	4b46      	ldr	r3, [pc, #280]	; (80045ac <drawMainMenu+0x27c>)
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	3b50      	subs	r3, #80	; 0x50
 8004498:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	b298      	uxth	r0, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b02      	subs	r3, #2
 80044a4:	b299      	uxth	r1, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	330c      	adds	r3, #12
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3308      	adds	r3, #8
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f7fc fced 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	3314      	adds	r3, #20
 80044be:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT2 LED", fnt7x10);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	b298      	uxth	r0, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	b299      	uxth	r1, r3
 80044c8:	4b3a      	ldr	r3, [pc, #232]	; (80045b4 <drawMainMenu+0x284>)
 80044ca:	4a40      	ldr	r2, [pc, #256]	; (80045cc <drawMainMenu+0x29c>)
 80044cc:	f7fd f82e 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 80044d0:	4b36      	ldr	r3, [pc, #216]	; (80045ac <drawMainMenu+0x27c>)
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	3b50      	subs	r3, #80	; 0x50
 80044d6:	60bb      	str	r3, [r7, #8]
	j  += 22;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3316      	adds	r3, #22
 80044dc:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	b298      	uxth	r0, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b02      	subs	r3, #2
 80044e8:	b299      	uxth	r1, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	330c      	adds	r3, #12
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3308      	adds	r3, #8
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f7fc fccb 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	3314      	adds	r3, #20
 8004502:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT3 LED", fnt7x10);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	b298      	uxth	r0, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	b299      	uxth	r1, r3
 800450c:	4b29      	ldr	r3, [pc, #164]	; (80045b4 <drawMainMenu+0x284>)
 800450e:	4a30      	ldr	r2, [pc, #192]	; (80045d0 <drawMainMenu+0x2a0>)
 8004510:	f7fd f80c 	bl	800152c <LCD_PutStr>
	j+=22;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3316      	adds	r3, #22
 8004518:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 800451a:	4b24      	ldr	r3, [pc, #144]	; (80045ac <drawMainMenu+0x27c>)
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	3b50      	subs	r3, #80	; 0x50
 8004520:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	b298      	uxth	r0, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b02      	subs	r3, #2
 800452c:	b299      	uxth	r1, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	b29b      	uxth	r3, r3
 8004532:	330c      	adds	r3, #12
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	b29b      	uxth	r3, r3
 800453a:	3308      	adds	r3, #8
 800453c:	b29b      	uxth	r3, r3
 800453e:	f7fc fca9 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	3314      	adds	r3, #20
 8004546:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT4 LED", fnt7x10);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	b298      	uxth	r0, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	b299      	uxth	r1, r3
 8004550:	4b18      	ldr	r3, [pc, #96]	; (80045b4 <drawMainMenu+0x284>)
 8004552:	4a20      	ldr	r2, [pc, #128]	; (80045d4 <drawMainMenu+0x2a4>)
 8004554:	f7fc ffea 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 8004558:	4b14      	ldr	r3, [pc, #80]	; (80045ac <drawMainMenu+0x27c>)
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	3b50      	subs	r3, #80	; 0x50
 800455e:	60bb      	str	r3, [r7, #8]
	j  += 22;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3316      	adds	r3, #22
 8004564:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	b298      	uxth	r0, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b02      	subs	r3, #2
 8004570:	b299      	uxth	r1, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	b29b      	uxth	r3, r3
 8004576:	330c      	adds	r3, #12
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	b29b      	uxth	r3, r3
 800457e:	3308      	adds	r3, #8
 8004580:	b29b      	uxth	r3, r3
 8004582:	f7fc fc87 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	3314      	adds	r3, #20
 800458a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT5 LED", fnt7x10);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	b298      	uxth	r0, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	b299      	uxth	r1, r3
 8004594:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <drawMainMenu+0x284>)
 8004596:	4a10      	ldr	r2, [pc, #64]	; (80045d8 <drawMainMenu+0x2a8>)
 8004598:	f7fc ffc8 	bl	800152c <LCD_PutStr>
	j+=22;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3316      	adds	r3, #22
 80045a0:	e01c      	b.n	80045dc <drawMainMenu+0x2ac>
 80045a2:	bf00      	nop
 80045a4:	200032d0 	.word	0x200032d0
 80045a8:	20010338 	.word	0x20010338
 80045ac:	2001033a 	.word	0x2001033a
 80045b0:	2001033c 	.word	0x2001033c
 80045b4:	080152b0 	.word	0x080152b0
 80045b8:	08014d08 	.word	0x08014d08
 80045bc:	08014d10 	.word	0x08014d10
 80045c0:	08014d1c 	.word	0x08014d1c
 80045c4:	08014d24 	.word	0x08014d24
 80045c8:	08014d28 	.word	0x08014d28
 80045cc:	08014d34 	.word	0x08014d34
 80045d0:	08014d40 	.word	0x08014d40
 80045d4:	08014d4c 	.word	0x08014d4c
 80045d8:	08014d58 	.word	0x08014d58
 80045dc:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 80045de:	4b93      	ldr	r3, [pc, #588]	; (800482c <drawMainMenu+0x4fc>)
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	3b50      	subs	r3, #80	; 0x50
 80045e4:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	b298      	uxth	r0, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b02      	subs	r3, #2
 80045f0:	b299      	uxth	r1, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	330c      	adds	r3, #12
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3308      	adds	r3, #8
 8004600:	b29b      	uxth	r3, r3
 8004602:	f7fc fc47 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	3314      	adds	r3, #20
 800460a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT6 LED", fnt7x10);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	b298      	uxth	r0, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	b299      	uxth	r1, r3
 8004614:	4b86      	ldr	r3, [pc, #536]	; (8004830 <drawMainMenu+0x500>)
 8004616:	4a87      	ldr	r2, [pc, #540]	; (8004834 <drawMainMenu+0x504>)
 8004618:	f7fc ff88 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 800461c:	4b83      	ldr	r3, [pc, #524]	; (800482c <drawMainMenu+0x4fc>)
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	3b50      	subs	r3, #80	; 0x50
 8004622:	60bb      	str	r3, [r7, #8]
	j  +=22;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3316      	adds	r3, #22
 8004628:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	b298      	uxth	r0, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b02      	subs	r3, #2
 8004634:	b299      	uxth	r1, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	b29b      	uxth	r3, r3
 800463a:	330c      	adds	r3, #12
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	b29b      	uxth	r3, r3
 8004642:	3308      	adds	r3, #8
 8004644:	b29b      	uxth	r3, r3
 8004646:	f7fc fc25 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	3314      	adds	r3, #20
 800464e:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT7 LED", fnt7x10);
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	b298      	uxth	r0, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	b299      	uxth	r1, r3
 8004658:	4b75      	ldr	r3, [pc, #468]	; (8004830 <drawMainMenu+0x500>)
 800465a:	4a77      	ldr	r2, [pc, #476]	; (8004838 <drawMainMenu+0x508>)
 800465c:	f7fc ff66 	bl	800152c <LCD_PutStr>
	j+=22;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3316      	adds	r3, #22
 8004664:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 8004666:	4b71      	ldr	r3, [pc, #452]	; (800482c <drawMainMenu+0x4fc>)
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	3b50      	subs	r3, #80	; 0x50
 800466c:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	b298      	uxth	r0, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b02      	subs	r3, #2
 8004678:	b299      	uxth	r1, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	b29b      	uxth	r3, r3
 800467e:	330c      	adds	r3, #12
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	b29b      	uxth	r3, r3
 8004686:	3308      	adds	r3, #8
 8004688:	b29b      	uxth	r3, r3
 800468a:	f7fc fc03 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	3314      	adds	r3, #20
 8004692:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT8 LED", fnt7x10);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	b298      	uxth	r0, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	b299      	uxth	r1, r3
 800469c:	4b64      	ldr	r3, [pc, #400]	; (8004830 <drawMainMenu+0x500>)
 800469e:	4a67      	ldr	r2, [pc, #412]	; (800483c <drawMainMenu+0x50c>)
 80046a0:	f7fc ff44 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 80046a4:	4b61      	ldr	r3, [pc, #388]	; (800482c <drawMainMenu+0x4fc>)
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	3b50      	subs	r3, #80	; 0x50
 80046aa:	60bb      	str	r3, [r7, #8]
	j  +=22;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	3316      	adds	r3, #22
 80046b0:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	b298      	uxth	r0, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b02      	subs	r3, #2
 80046bc:	b299      	uxth	r1, r3
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	330c      	adds	r3, #12
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3308      	adds	r3, #8
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	f7fc fbe1 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	3314      	adds	r3, #20
 80046d6:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT9 LED", fnt7x10);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	b298      	uxth	r0, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	b299      	uxth	r1, r3
 80046e0:	4b53      	ldr	r3, [pc, #332]	; (8004830 <drawMainMenu+0x500>)
 80046e2:	4a57      	ldr	r2, [pc, #348]	; (8004840 <drawMainMenu+0x510>)
 80046e4:	f7fc ff22 	bl	800152c <LCD_PutStr>
	j = scr_height-20;
 80046e8:	4b56      	ldr	r3, [pc, #344]	; (8004844 <drawMainMenu+0x514>)
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	3b14      	subs	r3, #20
 80046ee:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 80046f0:	4b4e      	ldr	r3, [pc, #312]	; (800482c <drawMainMenu+0x4fc>)
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	3b50      	subs	r3, #80	; 0x50
 80046f6:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	b298      	uxth	r0, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b02      	subs	r3, #2
 8004702:	b299      	uxth	r1, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	b29b      	uxth	r3, r3
 8004708:	330c      	adds	r3, #12
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	b29b      	uxth	r3, r3
 8004710:	3308      	adds	r3, #8
 8004712:	b29b      	uxth	r3, r3
 8004714:	f7fc fbbe 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	3314      	adds	r3, #20
 800471c:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "MODE", fnt7x10);
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	b298      	uxth	r0, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	b299      	uxth	r1, r3
 8004726:	4b42      	ldr	r3, [pc, #264]	; (8004830 <drawMainMenu+0x500>)
 8004728:	4a47      	ldr	r2, [pc, #284]	; (8004848 <drawMainMenu+0x518>)
 800472a:	f7fc feff 	bl	800152c <LCD_PutStr>

	i=100;
 800472e:	2364      	movs	r3, #100	; 0x64
 8004730:	60bb      	str	r3, [r7, #8]
	j=75;
 8004732:	234b      	movs	r3, #75	; 0x4b
 8004734:	60fb      	str	r3, [r7, #12]
	i+=20;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	3314      	adds	r3, #20
 800473a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "BOOT MODE", fnt7x10);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	b298      	uxth	r0, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	b299      	uxth	r1, r3
 8004744:	4b3a      	ldr	r3, [pc, #232]	; (8004830 <drawMainMenu+0x500>)
 8004746:	4a41      	ldr	r2, [pc, #260]	; (800484c <drawMainMenu+0x51c>)
 8004748:	f7fc fef0 	bl	800152c <LCD_PutStr>
	j+=15;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	330f      	adds	r3, #15
 8004750:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 71, j + 2);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b03      	subs	r3, #3
 8004758:	b298      	uxth	r0, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	b29b      	uxth	r3, r3
 800475e:	3b02      	subs	r3, #2
 8004760:	b299      	uxth	r1, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	b29b      	uxth	r3, r3
 8004766:	3347      	adds	r3, #71	; 0x47
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	b29b      	uxth	r3, r3
 800476e:	3302      	adds	r3, #2
 8004770:	b29b      	uxth	r3, r3
 8004772:	f7fc fb8f 	bl	8000e94 <LCD_FillRect>

	i=100;
 8004776:	2364      	movs	r3, #100	; 0x64
 8004778:	60bb      	str	r3, [r7, #8]
	j=110;
 800477a:	236e      	movs	r3, #110	; 0x6e
 800477c:	60fb      	str	r3, [r7, #12]
	i+=20;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	3314      	adds	r3, #20
 8004782:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "STATUS", fnt7x10);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	b298      	uxth	r0, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	b299      	uxth	r1, r3
 800478c:	4b28      	ldr	r3, [pc, #160]	; (8004830 <drawMainMenu+0x500>)
 800478e:	4a30      	ldr	r2, [pc, #192]	; (8004850 <drawMainMenu+0x520>)
 8004790:	f7fc fecc 	bl	800152c <LCD_PutStr>
	j+=15;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	330f      	adds	r3, #15
 8004798:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 50, j + 2);
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b03      	subs	r3, #3
 80047a0:	b298      	uxth	r0, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	3b02      	subs	r3, #2
 80047a8:	b299      	uxth	r1, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3332      	adds	r3, #50	; 0x32
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3302      	adds	r3, #2
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	f7fc fb6b 	bl	8000e94 <LCD_FillRect>

	i=100;
 80047be:	2364      	movs	r3, #100	; 0x64
 80047c0:	60bb      	str	r3, [r7, #8]
	j=145;
 80047c2:	2391      	movs	r3, #145	; 0x91
 80047c4:	60fb      	str	r3, [r7, #12]
	i+=20;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	3314      	adds	r3, #20
 80047ca:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "SYSTEM INFO", fnt7x10);
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	b298      	uxth	r0, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	b299      	uxth	r1, r3
 80047d4:	4b16      	ldr	r3, [pc, #88]	; (8004830 <drawMainMenu+0x500>)
 80047d6:	4a1f      	ldr	r2, [pc, #124]	; (8004854 <drawMainMenu+0x524>)
 80047d8:	f7fc fea8 	bl	800152c <LCD_PutStr>
	j+=15;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	330f      	adds	r3, #15
 80047e0:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 85, j + 2);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b03      	subs	r3, #3
 80047e8:	b298      	uxth	r0, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b02      	subs	r3, #2
 80047f0:	b299      	uxth	r1, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3355      	adds	r3, #85	; 0x55
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3302      	adds	r3, #2
 8004800:	b29b      	uxth	r3, r3
 8004802:	f7fc fb47 	bl	8000e94 <LCD_FillRect>
	i=100;
 8004806:	2364      	movs	r3, #100	; 0x64
 8004808:	60bb      	str	r3, [r7, #8]
	switch(indicator){
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b02      	cmp	r3, #2
 800480e:	d006      	beq.n	800481e <drawMainMenu+0x4ee>
 8004810:	2b03      	cmp	r3, #3
 8004812:	d007      	beq.n	8004824 <drawMainMenu+0x4f4>
 8004814:	2b01      	cmp	r3, #1
 8004816:	d11f      	bne.n	8004858 <drawMainMenu+0x528>
	case FIRST:
	{
		j=75;
 8004818:	234b      	movs	r3, #75	; 0x4b
 800481a:	60fb      	str	r3, [r7, #12]
		break;
 800481c:	e01f      	b.n	800485e <drawMainMenu+0x52e>
	}
	case SECOND:
	{
		j=110;
 800481e:	236e      	movs	r3, #110	; 0x6e
 8004820:	60fb      	str	r3, [r7, #12]
		break;
 8004822:	e01c      	b.n	800485e <drawMainMenu+0x52e>
	}
	case THIRD:
	{
		j=145;
 8004824:	2391      	movs	r3, #145	; 0x91
 8004826:	60fb      	str	r3, [r7, #12]
		break;
 8004828:	e019      	b.n	800485e <drawMainMenu+0x52e>
 800482a:	bf00      	nop
 800482c:	2001033a 	.word	0x2001033a
 8004830:	080152b0 	.word	0x080152b0
 8004834:	08014d64 	.word	0x08014d64
 8004838:	08014d70 	.word	0x08014d70
 800483c:	08014d7c 	.word	0x08014d7c
 8004840:	08014d88 	.word	0x08014d88
 8004844:	2001033c 	.word	0x2001033c
 8004848:	08014d94 	.word	0x08014d94
 800484c:	08014d9c 	.word	0x08014d9c
 8004850:	08014da8 	.word	0x08014da8
 8004854:	08014db0 	.word	0x08014db0
	}
	default:
	{
		j=75;
 8004858:	234b      	movs	r3, #75	; 0x4b
 800485a:	60fb      	str	r3, [r7, #12]
		break;
 800485c:	bf00      	nop
	}
	}
	LCD_FillRect(i, j, i + 12, j + 10);
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	b298      	uxth	r0, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	b299      	uxth	r1, r3
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	b29b      	uxth	r3, r3
 800486a:	330c      	adds	r3, #12
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	b29b      	uxth	r3, r3
 8004872:	330a      	adds	r3, #10
 8004874:	b29b      	uxth	r3, r3
 8004876:	f7fc fb0d 	bl	8000e94 <LCD_FillRect>
	SMLCD_Flush();
 800487a:	f7fb ff2d 	bl	80006d8 <SMLCD_Flush>
}
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop

08004888 <drawStatusMenu>:

void drawStatusMenu(int indicator){
 8004888:	b580      	push	{r7, lr}
 800488a:	b090      	sub	sp, #64	; 0x40
 800488c:	af02      	add	r7, sp, #8
 800488e:	6078      	str	r0, [r7, #4]
	int i,j;
	float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8004890:	2314      	movs	r3, #20
 8004892:	62fb      	str	r3, [r7, #44]	; 0x2c
	int inputGpioAlignment=245;
 8004894:	23f5      	movs	r3, #245	; 0xf5
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28
	int daughterCardAlignment=240;
 8004898:	23f0      	movs	r3, #240	; 0xf0
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
	int i2cCheck;
	int arrowUp = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	623b      	str	r3, [r7, #32]
	int arrowDown=1;
 80048a0:	2301      	movs	r3, #1
 80048a2:	61fb      	str	r3, [r7, #28]
	int arrowSize=3;
 80048a4:	2303      	movs	r3, #3
 80048a6:	61bb      	str	r3, [r7, #24]
	previousMenu=0;
 80048a8:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <drawStatusMenu+0x50>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 80048ae:	f7fc f85d 	bl	800096c <LCD_Clear>
	 if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 80048b2:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <drawStatusMenu+0x54>)
 80048b4:	781a      	ldrb	r2, [r3, #0]
 80048b6:	4b09      	ldr	r3, [pc, #36]	; (80048dc <drawStatusMenu+0x54>)
 80048b8:	785b      	ldrb	r3, [r3, #1]
 80048ba:	4013      	ands	r3, r2
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	4b07      	ldr	r3, [pc, #28]	; (80048dc <drawStatusMenu+0x54>)
 80048c0:	789b      	ldrb	r3, [r3, #2]
 80048c2:	4013      	ands	r3, r2
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01a      	beq.n	8004900 <drawStatusMenu+0x78>
 		  adcValuePointer = getADCValues();
 80048ca:	f7fe fe0b 	bl	80034e4 <getADCValues>
 80048ce:	4603      	mov	r3, r0
 80048d0:	633b      	str	r3, [r7, #48]	; 0x30
 		  for(i=0;i<20;i++){
 80048d2:	2300      	movs	r3, #0
 80048d4:	637b      	str	r3, [r7, #52]	; 0x34
 80048d6:	e010      	b.n	80048fa <drawStatusMenu+0x72>
 80048d8:	200032d0 	.word	0x200032d0
 80048dc:	20010ab0 	.word	0x20010ab0
	  		  displayAdcValues[i]=*adcValuePointer;
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	499d      	ldr	r1, [pc, #628]	; (8004b5c <drawStatusMenu+0x2d4>)
 80048e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	601a      	str	r2, [r3, #0]
	  		  adcValuePointer++;
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	3304      	adds	r3, #4
 80048f2:	633b      	str	r3, [r7, #48]	; 0x30
 		  for(i=0;i<20;i++){
 80048f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f6:	3301      	adds	r3, #1
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
 80048fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fc:	2b13      	cmp	r3, #19
 80048fe:	ddef      	ble.n	80048e0 <drawStatusMenu+0x58>
 		  }
	 }
	LCD_PixelMode = LCD_PSET;
 8004900:	4b97      	ldr	r3, [pc, #604]	; (8004b60 <drawStatusMenu+0x2d8>)
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8004906:	4b97      	ldr	r3, [pc, #604]	; (8004b64 <drawStatusMenu+0x2dc>)
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	3b01      	subs	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	4b96      	ldr	r3, [pc, #600]	; (8004b68 <drawStatusMenu+0x2e0>)
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	3b01      	subs	r3, #1
 8004914:	b29b      	uxth	r3, r3
 8004916:	2100      	movs	r1, #0
 8004918:	2000      	movs	r0, #0
 800491a:	f7fc fa79 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 800491e:	4b91      	ldr	r3, [pc, #580]	; (8004b64 <drawStatusMenu+0x2dc>)
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	3b03      	subs	r3, #3
 8004924:	b29a      	uxth	r2, r3
 8004926:	4b90      	ldr	r3, [pc, #576]	; (8004b68 <drawStatusMenu+0x2e0>)
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	3b03      	subs	r3, #3
 800492c:	b29b      	uxth	r3, r3
 800492e:	2102      	movs	r1, #2
 8004930:	2002      	movs	r0, #2
 8004932:	f7fc fa6d 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8004936:	230a      	movs	r3, #10
 8004938:	637b      	str	r3, [r7, #52]	; 0x34
	j  = 10;
 800493a:	230a      	movs	r3, #10
 800493c:	617b      	str	r3, [r7, #20]
	i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 800493e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004940:	b298      	uxth	r0, r3
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	b299      	uxth	r1, r3
 8004946:	4b89      	ldr	r3, [pc, #548]	; (8004b6c <drawStatusMenu+0x2e4>)
 8004948:	4a89      	ldr	r2, [pc, #548]	; (8004b70 <drawStatusMenu+0x2e8>)
 800494a:	f7fc fdef 	bl	800152c <LCD_PutStr>
 800494e:	4603      	mov	r3, r0
 8004950:	461a      	mov	r2, r3
 8004952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004954:	4413      	add	r3, r2
 8004956:	637b      	str	r3, [r7, #52]	; 0x34
	i += LCD_PutStr(i, j, "So many!", fnt7x10);
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	b298      	uxth	r0, r3
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	b299      	uxth	r1, r3
 8004960:	4b82      	ldr	r3, [pc, #520]	; (8004b6c <drawStatusMenu+0x2e4>)
 8004962:	4a84      	ldr	r2, [pc, #528]	; (8004b74 <drawStatusMenu+0x2ec>)
 8004964:	f7fc fde2 	bl	800152c <LCD_PutStr>
 8004968:	4603      	mov	r3, r0
 800496a:	461a      	mov	r2, r3
 800496c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496e:	4413      	add	r3, r2
 8004970:	637b      	str	r3, [r7, #52]	; 0x34
	i+=170;
 8004972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004974:	33aa      	adds	r3, #170	; 0xaa
 8004976:	637b      	str	r3, [r7, #52]	; 0x34
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8004978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497a:	b298      	uxth	r0, r3
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	b299      	uxth	r1, r3
 8004980:	4b7a      	ldr	r3, [pc, #488]	; (8004b6c <drawStatusMenu+0x2e4>)
 8004982:	4a7d      	ldr	r2, [pc, #500]	; (8004b78 <drawStatusMenu+0x2f0>)
 8004984:	f7fc fdd2 	bl	800152c <LCD_PutStr>
 8004988:	4603      	mov	r3, r0
 800498a:	461a      	mov	r2, r3
 800498c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498e:	4413      	add	r3, r2
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
	i += LCD_PutStr(i, j, "QED", fnt7x10);
 8004992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004994:	b298      	uxth	r0, r3
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	b299      	uxth	r1, r3
 800499a:	4b74      	ldr	r3, [pc, #464]	; (8004b6c <drawStatusMenu+0x2e4>)
 800499c:	4a77      	ldr	r2, [pc, #476]	; (8004b7c <drawStatusMenu+0x2f4>)
 800499e:	f7fc fdc5 	bl	800152c <LCD_PutStr>
 80049a2:	4603      	mov	r3, r0
 80049a4:	461a      	mov	r2, r3
 80049a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a8:	4413      	add	r3, r2
 80049aa:	637b      	str	r3, [r7, #52]	; 0x34
	i  = 135;
 80049ac:	2387      	movs	r3, #135	; 0x87
 80049ae:	637b      	str	r3, [r7, #52]	; 0x34
	j += 12;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	330c      	adds	r3, #12
 80049b4:	617b      	str	r3, [r7, #20]

	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	b299      	uxth	r1, r3
 80049ba:	4b6a      	ldr	r3, [pc, #424]	; (8004b64 <drawStatusMenu+0x2dc>)
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	3b02      	subs	r3, #2
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3303      	adds	r3, #3
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2002      	movs	r0, #2
 80049cc:	f7fc fa62 	bl	8000e94 <LCD_FillRect>
	switch(indicator){
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	f000 81e6 	beq.w	8004da4 <drawStatusMenu+0x51c>
 80049d8:	2b03      	cmp	r3, #3
 80049da:	f000 8783 	beq.w	80058e4 <drawStatusMenu+0x105c>
 80049de:	2b01      	cmp	r3, #1
 80049e0:	f041 8096 	bne.w	8005b10 <drawStatusMenu+0x1288>
	case 1:{
		i=35;
 80049e4:	2323      	movs	r3, #35	; 0x23
 80049e6:	637b      	str	r3, [r7, #52]	; 0x34
		j=90;
 80049e8:	235a      	movs	r3, #90	; 0x5a
 80049ea:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b02      	subs	r3, #2
 80049f2:	b299      	uxth	r1, r3
 80049f4:	4b5b      	ldr	r3, [pc, #364]	; (8004b64 <drawStatusMenu+0x2dc>)
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	3b02      	subs	r3, #2
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3302      	adds	r3, #2
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2002      	movs	r0, #2
 8004a06:	f7fc fa45 	bl	8000e94 <LCD_FillRect>
		j=75;
 8004a0a:	234b      	movs	r3, #75	; 0x4b
 8004a0c:	617b      	str	r3, [r7, #20]
		i=62;
 8004a0e:	233e      	movs	r3, #62	; 0x3e
 8004a10:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8004a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a14:	b298      	uxth	r0, r3
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	b299      	uxth	r1, r3
 8004a1a:	4b54      	ldr	r3, [pc, #336]	; (8004b6c <drawStatusMenu+0x2e4>)
 8004a1c:	4a54      	ldr	r2, [pc, #336]	; (8004b70 <drawStatusMenu+0x2e8>)
 8004a1e:	f7fc fd85 	bl	800152c <LCD_PutStr>
 8004a22:	4603      	mov	r3, r0
 8004a24:	461a      	mov	r2, r3
 8004a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a28:	4413      	add	r3, r2
 8004a2a:	637b      	str	r3, [r7, #52]	; 0x34
		i+=145;
 8004a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2e:	3391      	adds	r3, #145	; 0x91
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "DAUGHTER CARDS:", fnt7x10);
 8004a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a34:	b298      	uxth	r0, r3
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	b299      	uxth	r1, r3
 8004a3a:	4b4c      	ldr	r3, [pc, #304]	; (8004b6c <drawStatusMenu+0x2e4>)
 8004a3c:	4a50      	ldr	r2, [pc, #320]	; (8004b80 <drawStatusMenu+0x2f8>)
 8004a3e:	f7fc fd75 	bl	800152c <LCD_PutStr>

		i=10;
 8004a42:	230a      	movs	r3, #10
 8004a44:	637b      	str	r3, [r7, #52]	; 0x34
		j=95;
 8004a46:	235f      	movs	r3, #95	; 0x5f
 8004a48:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault0: ", fnt7x10);
 8004a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4c:	b298      	uxth	r0, r3
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	b299      	uxth	r1, r3
 8004a52:	4b46      	ldr	r3, [pc, #280]	; (8004b6c <drawStatusMenu+0x2e4>)
 8004a54:	4a4b      	ldr	r2, [pc, #300]	; (8004b84 <drawStatusMenu+0x2fc>)
 8004a56:	f7fc fd69 	bl	800152c <LCD_PutStr>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a60:	4413      	add	r3, r2
 8004a62:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a66:	b298      	uxth	r0, r3
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	b299      	uxth	r1, r3
 8004a6c:	4b3f      	ldr	r3, [pc, #252]	; (8004b6c <drawStatusMenu+0x2e4>)
 8004a6e:	4a46      	ldr	r2, [pc, #280]	; (8004b88 <drawStatusMenu+0x300>)
 8004a70:	f7fc fd5c 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8004a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7a:	b298      	uxth	r0, r3
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	b299      	uxth	r1, r3
 8004a80:	4b3a      	ldr	r3, [pc, #232]	; (8004b6c <drawStatusMenu+0x2e4>)
 8004a82:	4a42      	ldr	r2, [pc, #264]	; (8004b8c <drawStatusMenu+0x304>)
 8004a84:	f7fc fd52 	bl	800152c <LCD_PutStr>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8e:	4413      	add	r3, r2
 8004a90:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i,j,"placeholder", fnt7x10);
 8004a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a94:	b298      	uxth	r0, r3
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	b299      	uxth	r1, r3
 8004a9a:	4b34      	ldr	r3, [pc, #208]	; (8004b6c <drawStatusMenu+0x2e4>)
 8004a9c:	4a3a      	ldr	r2, [pc, #232]	; (8004b88 <drawStatusMenu+0x300>)
 8004a9e:	f7fc fd45 	bl	800152c <LCD_PutStr>

		i=10;
 8004aa2:	230a      	movs	r3, #10
 8004aa4:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	330f      	adds	r3, #15
 8004aaa:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault1: ", fnt7x10);
 8004aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aae:	b298      	uxth	r0, r3
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	b299      	uxth	r1, r3
 8004ab4:	4b2d      	ldr	r3, [pc, #180]	; (8004b6c <drawStatusMenu+0x2e4>)
 8004ab6:	4a36      	ldr	r2, [pc, #216]	; (8004b90 <drawStatusMenu+0x308>)
 8004ab8:	f7fc fd38 	bl	800152c <LCD_PutStr>
 8004abc:	4603      	mov	r3, r0
 8004abe:	461a      	mov	r2, r3
 8004ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac2:	4413      	add	r3, r2
 8004ac4:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac8:	b298      	uxth	r0, r3
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	b299      	uxth	r1, r3
 8004ace:	4b27      	ldr	r3, [pc, #156]	; (8004b6c <drawStatusMenu+0x2e4>)
 8004ad0:	4a2d      	ldr	r2, [pc, #180]	; (8004b88 <drawStatusMenu+0x300>)
 8004ad2:	f7fc fd2b 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 8004ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004adc:	b298      	uxth	r0, r3
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	b299      	uxth	r1, r3
 8004ae2:	4b22      	ldr	r3, [pc, #136]	; (8004b6c <drawStatusMenu+0x2e4>)
 8004ae4:	4a2b      	ldr	r2, [pc, #172]	; (8004b94 <drawStatusMenu+0x30c>)
 8004ae6:	f7fc fd21 	bl	800152c <LCD_PutStr>
 8004aea:	4603      	mov	r3, r0
 8004aec:	461a      	mov	r2, r3
 8004aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af0:	4413      	add	r3, r2
 8004af2:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i,j,"placeholder", fnt7x10);
 8004af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af6:	b298      	uxth	r0, r3
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	b299      	uxth	r1, r3
 8004afc:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <drawStatusMenu+0x2e4>)
 8004afe:	4a22      	ldr	r2, [pc, #136]	; (8004b88 <drawStatusMenu+0x300>)
 8004b00:	f7fc fd14 	bl	800152c <LCD_PutStr>

		i=10;
 8004b04:	230a      	movs	r3, #10
 8004b06:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	330f      	adds	r3, #15
 8004b0c:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault2: ", fnt7x10);
 8004b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b10:	b298      	uxth	r0, r3
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	b299      	uxth	r1, r3
 8004b16:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <drawStatusMenu+0x2e4>)
 8004b18:	4a1f      	ldr	r2, [pc, #124]	; (8004b98 <drawStatusMenu+0x310>)
 8004b1a:	f7fc fd07 	bl	800152c <LCD_PutStr>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	461a      	mov	r2, r3
 8004b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b24:	4413      	add	r3, r2
 8004b26:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2a:	b298      	uxth	r0, r3
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	b299      	uxth	r1, r3
 8004b30:	4b0e      	ldr	r3, [pc, #56]	; (8004b6c <drawStatusMenu+0x2e4>)
 8004b32:	4a15      	ldr	r2, [pc, #84]	; (8004b88 <drawStatusMenu+0x300>)
 8004b34:	f7fc fcfa 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "Display: ", fnt7x10);
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3e:	b298      	uxth	r0, r3
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	b299      	uxth	r1, r3
 8004b44:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <drawStatusMenu+0x2e4>)
 8004b46:	4a15      	ldr	r2, [pc, #84]	; (8004b9c <drawStatusMenu+0x314>)
 8004b48:	f7fc fcf0 	bl	800152c <LCD_PutStr>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	461a      	mov	r2, r3
 8004b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b52:	4413      	add	r3, r2
 8004b54:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i,j,"placeholder", fnt7x10);
 8004b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b58:	b298      	uxth	r0, r3
 8004b5a:	e021      	b.n	8004ba0 <drawStatusMenu+0x318>
 8004b5c:	2002407c 	.word	0x2002407c
 8004b60:	20010338 	.word	0x20010338
 8004b64:	2001033a 	.word	0x2001033a
 8004b68:	2001033c 	.word	0x2001033c
 8004b6c:	080152b0 	.word	0x080152b0
 8004b70:	08014d08 	.word	0x08014d08
 8004b74:	08014d10 	.word	0x08014d10
 8004b78:	08014d1c 	.word	0x08014d1c
 8004b7c:	08014d24 	.word	0x08014d24
 8004b80:	08014dbc 	.word	0x08014dbc
 8004b84:	08014dcc 	.word	0x08014dcc
 8004b88:	08014dd8 	.word	0x08014dd8
 8004b8c:	08014de4 	.word	0x08014de4
 8004b90:	08014dec 	.word	0x08014dec
 8004b94:	08014df8 	.word	0x08014df8
 8004b98:	08014e00 	.word	0x08014e00
 8004b9c:	08014e0c 	.word	0x08014e0c
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	b299      	uxth	r1, r3
 8004ba4:	4b75      	ldr	r3, [pc, #468]	; (8004d7c <drawStatusMenu+0x4f4>)
 8004ba6:	4a76      	ldr	r2, [pc, #472]	; (8004d80 <drawStatusMenu+0x4f8>)
 8004ba8:	f7fc fcc0 	bl	800152c <LCD_PutStr>

		i=10;
 8004bac:	230a      	movs	r3, #10
 8004bae:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	330f      	adds	r3, #15
 8004bb4:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault3: ", fnt7x10);
 8004bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb8:	b298      	uxth	r0, r3
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	b299      	uxth	r1, r3
 8004bbe:	4b6f      	ldr	r3, [pc, #444]	; (8004d7c <drawStatusMenu+0x4f4>)
 8004bc0:	4a70      	ldr	r2, [pc, #448]	; (8004d84 <drawStatusMenu+0x4fc>)
 8004bc2:	f7fc fcb3 	bl	800152c <LCD_PutStr>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	461a      	mov	r2, r3
 8004bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bcc:	4413      	add	r3, r2
 8004bce:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd2:	b298      	uxth	r0, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	b299      	uxth	r1, r3
 8004bd8:	4b68      	ldr	r3, [pc, #416]	; (8004d7c <drawStatusMenu+0x4f4>)
 8004bda:	4a69      	ldr	r2, [pc, #420]	; (8004d80 <drawStatusMenu+0x4f8>)
 8004bdc:	f7fc fca6 	bl	800152c <LCD_PutStr>

		i=10;
 8004be0:	230a      	movs	r3, #10
 8004be2:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	330f      	adds	r3, #15
 8004be8:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault4: ", fnt7x10);
 8004bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bec:	b298      	uxth	r0, r3
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	b299      	uxth	r1, r3
 8004bf2:	4b62      	ldr	r3, [pc, #392]	; (8004d7c <drawStatusMenu+0x4f4>)
 8004bf4:	4a64      	ldr	r2, [pc, #400]	; (8004d88 <drawStatusMenu+0x500>)
 8004bf6:	f7fc fc99 	bl	800152c <LCD_PutStr>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c00:	4413      	add	r3, r2
 8004c02:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c06:	b298      	uxth	r0, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	b299      	uxth	r1, r3
 8004c0c:	4b5b      	ldr	r3, [pc, #364]	; (8004d7c <drawStatusMenu+0x4f4>)
 8004c0e:	4a5c      	ldr	r2, [pc, #368]	; (8004d80 <drawStatusMenu+0x4f8>)
 8004c10:	f7fc fc8c 	bl	800152c <LCD_PutStr>

		i=10;
 8004c14:	230a      	movs	r3, #10
 8004c16:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	330f      	adds	r3, #15
 8004c1c:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault5: ", fnt7x10);
 8004c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c20:	b298      	uxth	r0, r3
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	b299      	uxth	r1, r3
 8004c26:	4b55      	ldr	r3, [pc, #340]	; (8004d7c <drawStatusMenu+0x4f4>)
 8004c28:	4a58      	ldr	r2, [pc, #352]	; (8004d8c <drawStatusMenu+0x504>)
 8004c2a:	f7fc fc7f 	bl	800152c <LCD_PutStr>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	461a      	mov	r2, r3
 8004c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c34:	4413      	add	r3, r2
 8004c36:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3a:	b298      	uxth	r0, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	b299      	uxth	r1, r3
 8004c40:	4b4e      	ldr	r3, [pc, #312]	; (8004d7c <drawStatusMenu+0x4f4>)
 8004c42:	4a4f      	ldr	r2, [pc, #316]	; (8004d80 <drawStatusMenu+0x4f8>)
 8004c44:	f7fc fc72 	bl	800152c <LCD_PutStr>

		i=10;
 8004c48:	230a      	movs	r3, #10
 8004c4a:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	330f      	adds	r3, #15
 8004c50:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault6: ", fnt7x10);
 8004c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c54:	b298      	uxth	r0, r3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	b299      	uxth	r1, r3
 8004c5a:	4b48      	ldr	r3, [pc, #288]	; (8004d7c <drawStatusMenu+0x4f4>)
 8004c5c:	4a4c      	ldr	r2, [pc, #304]	; (8004d90 <drawStatusMenu+0x508>)
 8004c5e:	f7fc fc65 	bl	800152c <LCD_PutStr>
 8004c62:	4603      	mov	r3, r0
 8004c64:	461a      	mov	r2, r3
 8004c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c68:	4413      	add	r3, r2
 8004c6a:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6e:	b298      	uxth	r0, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	b299      	uxth	r1, r3
 8004c74:	4b41      	ldr	r3, [pc, #260]	; (8004d7c <drawStatusMenu+0x4f4>)
 8004c76:	4a42      	ldr	r2, [pc, #264]	; (8004d80 <drawStatusMenu+0x4f8>)
 8004c78:	f7fc fc58 	bl	800152c <LCD_PutStr>

		i=10;
 8004c7c:	230a      	movs	r3, #10
 8004c7e:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	330f      	adds	r3, #15
 8004c84:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault7: ", fnt7x10);
 8004c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c88:	b298      	uxth	r0, r3
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	b299      	uxth	r1, r3
 8004c8e:	4b3b      	ldr	r3, [pc, #236]	; (8004d7c <drawStatusMenu+0x4f4>)
 8004c90:	4a40      	ldr	r2, [pc, #256]	; (8004d94 <drawStatusMenu+0x50c>)
 8004c92:	f7fc fc4b 	bl	800152c <LCD_PutStr>
 8004c96:	4603      	mov	r3, r0
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c9c:	4413      	add	r3, r2
 8004c9e:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca2:	b298      	uxth	r0, r3
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	b299      	uxth	r1, r3
 8004ca8:	4b34      	ldr	r3, [pc, #208]	; (8004d7c <drawStatusMenu+0x4f4>)
 8004caa:	4a35      	ldr	r2, [pc, #212]	; (8004d80 <drawStatusMenu+0x4f8>)
 8004cac:	f7fc fc3e 	bl	800152c <LCD_PutStr>

		i=10;
 8004cb0:	230a      	movs	r3, #10
 8004cb2:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	330f      	adds	r3, #15
 8004cb8:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault8: ", fnt7x10);
 8004cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbc:	b298      	uxth	r0, r3
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	b299      	uxth	r1, r3
 8004cc2:	4b2e      	ldr	r3, [pc, #184]	; (8004d7c <drawStatusMenu+0x4f4>)
 8004cc4:	4a34      	ldr	r2, [pc, #208]	; (8004d98 <drawStatusMenu+0x510>)
 8004cc6:	f7fc fc31 	bl	800152c <LCD_PutStr>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	461a      	mov	r2, r3
 8004cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd0:	4413      	add	r3, r2
 8004cd2:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd6:	b298      	uxth	r0, r3
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	b299      	uxth	r1, r3
 8004cdc:	4b27      	ldr	r3, [pc, #156]	; (8004d7c <drawStatusMenu+0x4f4>)
 8004cde:	4a28      	ldr	r2, [pc, #160]	; (8004d80 <drawStatusMenu+0x4f8>)
 8004ce0:	f7fc fc24 	bl	800152c <LCD_PutStr>


		//horizontal divider
		j=65;
 8004ce4:	2341      	movs	r3, #65	; 0x41
 8004ce6:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b299      	uxth	r1, r3
 8004cf0:	4b2a      	ldr	r3, [pc, #168]	; (8004d9c <drawStatusMenu+0x514>)
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	3b02      	subs	r3, #2
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2002      	movs	r0, #2
 8004d02:	f7fc f8c7 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 8004d06:	23e6      	movs	r3, #230	; 0xe6
 8004d08:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 8004d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b03      	subs	r3, #3
 8004d10:	b298      	uxth	r0, r3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	b299      	uxth	r1, r3
 8004d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3303      	adds	r3, #3
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	4b20      	ldr	r3, [pc, #128]	; (8004da0 <drawStatusMenu+0x518>)
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	3b02      	subs	r3, #2
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	f7fc f8b5 	bl	8000e94 <LCD_FillRect>

		i=200;
 8004d2a:	23c8      	movs	r3, #200	; 0xc8
 8004d2c:	637b      	str	r3, [r7, #52]	; 0x34
		j=220;
 8004d2e:	23dc      	movs	r3, #220	; 0xdc
 8004d30:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8004d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d34:	b298      	uxth	r0, r3
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	b299      	uxth	r1, r3
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	f7fc fd43 	bl	80017cc <drawUpDownArrow>
		i=180;
 8004d46:	23b4      	movs	r3, #180	; 0xb4
 8004d48:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8004d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4c:	b298      	uxth	r0, r3
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	b299      	uxth	r1, r3
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f7fc fd37 	bl	80017cc <drawUpDownArrow>
		i=220;
 8004d5e:	23dc      	movs	r3, #220	; 0xdc
 8004d60:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8004d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d64:	b298      	uxth	r0, r3
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	b299      	uxth	r1, r3
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f7fc fd2b 	bl	80017cc <drawUpDownArrow>
		break;
 8004d76:	f000 becb 	b.w	8005b10 <drawStatusMenu+0x1288>
 8004d7a:	bf00      	nop
 8004d7c:	080152b0 	.word	0x080152b0
 8004d80:	08014dd8 	.word	0x08014dd8
 8004d84:	08014e18 	.word	0x08014e18
 8004d88:	08014e24 	.word	0x08014e24
 8004d8c:	08014e30 	.word	0x08014e30
 8004d90:	08014e3c 	.word	0x08014e3c
 8004d94:	08014e48 	.word	0x08014e48
 8004d98:	08014e54 	.word	0x08014e54
 8004d9c:	2001033a 	.word	0x2001033a
 8004da0:	2001033c 	.word	0x2001033c
	}
	case 2:{
		i=35;
 8004da4:	2323      	movs	r3, #35	; 0x23
 8004da6:	637b      	str	r3, [r7, #52]	; 0x34
		j=90;
 8004da8:	235a      	movs	r3, #90	; 0x5a
 8004daa:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b02      	subs	r3, #2
 8004db2:	b299      	uxth	r1, r3
 8004db4:	4ba4      	ldr	r3, [pc, #656]	; (8005048 <drawStatusMenu+0x7c0>)
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	3b02      	subs	r3, #2
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2002      	movs	r0, #2
 8004dc6:	f7fc f865 	bl	8000e94 <LCD_FillRect>
		j=75;
 8004dca:	234b      	movs	r3, #75	; 0x4b
 8004dcc:	617b      	str	r3, [r7, #20]
		i=42;
 8004dce:	232a      	movs	r3, #42	; 0x2a
 8004dd0:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutStr(i, j, "AI VOLTAGES:", fnt7x10);
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd4:	b298      	uxth	r0, r3
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	b299      	uxth	r1, r3
 8004dda:	4b9c      	ldr	r3, [pc, #624]	; (800504c <drawStatusMenu+0x7c4>)
 8004ddc:	4a9c      	ldr	r2, [pc, #624]	; (8005050 <drawStatusMenu+0x7c8>)
 8004dde:	f7fc fba5 	bl	800152c <LCD_PutStr>
 8004de2:	4603      	mov	r3, r0
 8004de4:	461a      	mov	r2, r3
 8004de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de8:	4413      	add	r3, r2
 8004dea:	637b      	str	r3, [r7, #52]	; 0x34
		i+=125;
 8004dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dee:	337d      	adds	r3, #125	; 0x7d
 8004df0:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "GPIO INPUTS:", fnt7x10);
 8004df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df4:	b298      	uxth	r0, r3
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	b299      	uxth	r1, r3
 8004dfa:	4b94      	ldr	r3, [pc, #592]	; (800504c <drawStatusMenu+0x7c4>)
 8004dfc:	4a95      	ldr	r2, [pc, #596]	; (8005054 <drawStatusMenu+0x7cc>)
 8004dfe:	f7fc fb95 	bl	800152c <LCD_PutStr>

		i=10;
 8004e02:	230a      	movs	r3, #10
 8004e04:	637b      	str	r3, [r7, #52]	; 0x34
		j=95;
 8004e06:	235f      	movs	r3, #95	; 0x5f
 8004e08:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI0: ", fnt7x10);
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0c:	b298      	uxth	r0, r3
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	b299      	uxth	r1, r3
 8004e12:	4b8e      	ldr	r3, [pc, #568]	; (800504c <drawStatusMenu+0x7c4>)
 8004e14:	4a90      	ldr	r2, [pc, #576]	; (8005058 <drawStatusMenu+0x7d0>)
 8004e16:	f7fc fb89 	bl	800152c <LCD_PutStr>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e20:	4413      	add	r3, r2
 8004e22:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc0];
 8004e24:	4b8d      	ldr	r3, [pc, #564]	; (800505c <drawStatusMenu+0x7d4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a8d      	ldr	r2, [pc, #564]	; (8005060 <drawStatusMenu+0x7d8>)
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	edd3 7a00 	vldr	s15, [r3]
 8004e32:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8005064 <drawStatusMenu+0x7dc>
 8004e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e3e:	ee17 3a90 	vmov	r3, s15
 8004e42:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8004e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e46:	b298      	uxth	r0, r3
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	b299      	uxth	r1, r3
 8004e4c:	4b7f      	ldr	r3, [pc, #508]	; (800504c <drawStatusMenu+0x7c4>)
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	2303      	movs	r3, #3
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	f7fc fc08 	bl	8001668 <LCD_PutIntF>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5e:	4413      	add	r3, r2
 8004e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e62:	4413      	add	r3, r2
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI9: ", fnt7x10);
 8004e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e68:	b298      	uxth	r0, r3
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	b299      	uxth	r1, r3
 8004e6e:	4b77      	ldr	r3, [pc, #476]	; (800504c <drawStatusMenu+0x7c4>)
 8004e70:	4a7d      	ldr	r2, [pc, #500]	; (8005068 <drawStatusMenu+0x7e0>)
 8004e72:	f7fc fb5b 	bl	800152c <LCD_PutStr>
 8004e76:	4603      	mov	r3, r0
 8004e78:	461a      	mov	r2, r3
 8004e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7c:	4413      	add	r3, r2
 8004e7e:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc9];
 8004e80:	4b76      	ldr	r3, [pc, #472]	; (800505c <drawStatusMenu+0x7d4>)
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	4a76      	ldr	r2, [pc, #472]	; (8005060 <drawStatusMenu+0x7d8>)
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	edd3 7a00 	vldr	s15, [r3]
 8004e8e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8005064 <drawStatusMenu+0x7dc>
 8004e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e9a:	ee17 3a90 	vmov	r3, s15
 8004e9e:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8004ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea2:	b298      	uxth	r0, r3
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	b299      	uxth	r1, r3
 8004ea8:	4b68      	ldr	r3, [pc, #416]	; (800504c <drawStatusMenu+0x7c4>)
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	2303      	movs	r3, #3
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	f7fc fbda 	bl	8001668 <LCD_PutIntF>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eba:	4413      	add	r3, r2
 8004ebc:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In0: ", fnt7x10);
 8004ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec4:	b298      	uxth	r0, r3
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	b299      	uxth	r1, r3
 8004eca:	4b60      	ldr	r3, [pc, #384]	; (800504c <drawStatusMenu+0x7c4>)
 8004ecc:	4a67      	ldr	r2, [pc, #412]	; (800506c <drawStatusMenu+0x7e4>)
 8004ece:	f7fc fb2d 	bl	800152c <LCD_PutStr>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed8:	4413      	add	r3, r2
 8004eda:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input0], fnt7x10)+adjacentSpacing;
 8004edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ede:	b298      	uxth	r0, r3
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	b299      	uxth	r1, r3
 8004ee4:	4b62      	ldr	r3, [pc, #392]	; (8005070 <drawStatusMenu+0x7e8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a62      	ldr	r2, [pc, #392]	; (8005074 <drawStatusMenu+0x7ec>)
 8004eea:	5cd3      	ldrb	r3, [r2, r3]
 8004eec:	461a      	mov	r2, r3
 8004eee:	4b57      	ldr	r3, [pc, #348]	; (800504c <drawStatusMenu+0x7c4>)
 8004ef0:	f7fc fb54 	bl	800159c <LCD_PutInt>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	4413      	add	r3, r2
 8004efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004efe:	4413      	add	r3, r2
 8004f00:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In9: ", fnt7x10);
 8004f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f04:	b298      	uxth	r0, r3
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	b299      	uxth	r1, r3
 8004f0a:	4b50      	ldr	r3, [pc, #320]	; (800504c <drawStatusMenu+0x7c4>)
 8004f0c:	4a5a      	ldr	r2, [pc, #360]	; (8005078 <drawStatusMenu+0x7f0>)
 8004f0e:	f7fc fb0d 	bl	800152c <LCD_PutStr>
 8004f12:	4603      	mov	r3, r0
 8004f14:	461a      	mov	r2, r3
 8004f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f18:	4413      	add	r3, r2
 8004f1a:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input9], fnt7x10);
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1e:	b298      	uxth	r0, r3
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	b299      	uxth	r1, r3
 8004f24:	4b52      	ldr	r3, [pc, #328]	; (8005070 <drawStatusMenu+0x7e8>)
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	4a52      	ldr	r2, [pc, #328]	; (8005074 <drawStatusMenu+0x7ec>)
 8004f2a:	5cd3      	ldrb	r3, [r2, r3]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	4b47      	ldr	r3, [pc, #284]	; (800504c <drawStatusMenu+0x7c4>)
 8004f30:	f7fc fb34 	bl	800159c <LCD_PutInt>
 8004f34:	4603      	mov	r3, r0
 8004f36:	461a      	mov	r2, r3
 8004f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3a:	4413      	add	r3, r2
 8004f3c:	637b      	str	r3, [r7, #52]	; 0x34


		i=10;
 8004f3e:	230a      	movs	r3, #10
 8004f40:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	330f      	adds	r3, #15
 8004f46:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI1: ", fnt7x10);
 8004f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4a:	b298      	uxth	r0, r3
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	b299      	uxth	r1, r3
 8004f50:	4b3e      	ldr	r3, [pc, #248]	; (800504c <drawStatusMenu+0x7c4>)
 8004f52:	4a4a      	ldr	r2, [pc, #296]	; (800507c <drawStatusMenu+0x7f4>)
 8004f54:	f7fc faea 	bl	800152c <LCD_PutStr>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5e:	4413      	add	r3, r2
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc1];
 8004f62:	4b3e      	ldr	r3, [pc, #248]	; (800505c <drawStatusMenu+0x7d4>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	4a3e      	ldr	r2, [pc, #248]	; (8005060 <drawStatusMenu+0x7d8>)
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	edd3 7a00 	vldr	s15, [r3]
 8004f70:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8005064 <drawStatusMenu+0x7dc>
 8004f74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f7c:	ee17 3a90 	vmov	r3, s15
 8004f80:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8004f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f84:	b298      	uxth	r0, r3
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	b299      	uxth	r1, r3
 8004f8a:	4b30      	ldr	r3, [pc, #192]	; (800504c <drawStatusMenu+0x7c4>)
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	2303      	movs	r3, #3
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	f7fc fb69 	bl	8001668 <LCD_PutIntF>
 8004f96:	4603      	mov	r3, r0
 8004f98:	461a      	mov	r2, r3
 8004f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9c:	4413      	add	r3, r2
 8004f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fa0:	4413      	add	r3, r2
 8004fa2:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI10: ", fnt7x10);
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa6:	b298      	uxth	r0, r3
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	b299      	uxth	r1, r3
 8004fac:	4b27      	ldr	r3, [pc, #156]	; (800504c <drawStatusMenu+0x7c4>)
 8004fae:	4a34      	ldr	r2, [pc, #208]	; (8005080 <drawStatusMenu+0x7f8>)
 8004fb0:	f7fc fabc 	bl	800152c <LCD_PutStr>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fba:	4413      	add	r3, r2
 8004fbc:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc10];
 8004fbe:	4b27      	ldr	r3, [pc, #156]	; (800505c <drawStatusMenu+0x7d4>)
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	4a27      	ldr	r2, [pc, #156]	; (8005060 <drawStatusMenu+0x7d8>)
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	edd3 7a00 	vldr	s15, [r3]
 8004fcc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8005064 <drawStatusMenu+0x7dc>
 8004fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fd8:	ee17 3a90 	vmov	r3, s15
 8004fdc:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8004fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe0:	b298      	uxth	r0, r3
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	b299      	uxth	r1, r3
 8004fe6:	4b19      	ldr	r3, [pc, #100]	; (800504c <drawStatusMenu+0x7c4>)
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	2303      	movs	r3, #3
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	f7fc fb3b 	bl	8001668 <LCD_PutIntF>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff8:	4413      	add	r3, r2
 8004ffa:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In1: ", fnt7x10);
 8005000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005002:	b298      	uxth	r0, r3
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	b299      	uxth	r1, r3
 8005008:	4b10      	ldr	r3, [pc, #64]	; (800504c <drawStatusMenu+0x7c4>)
 800500a:	4a1e      	ldr	r2, [pc, #120]	; (8005084 <drawStatusMenu+0x7fc>)
 800500c:	f7fc fa8e 	bl	800152c <LCD_PutStr>
 8005010:	4603      	mov	r3, r0
 8005012:	461a      	mov	r2, r3
 8005014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005016:	4413      	add	r3, r2
 8005018:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input1], fnt7x10)+adjacentSpacing;
 800501a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501c:	b298      	uxth	r0, r3
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	b299      	uxth	r1, r3
 8005022:	4b13      	ldr	r3, [pc, #76]	; (8005070 <drawStatusMenu+0x7e8>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	4a13      	ldr	r2, [pc, #76]	; (8005074 <drawStatusMenu+0x7ec>)
 8005028:	5cd3      	ldrb	r3, [r2, r3]
 800502a:	461a      	mov	r2, r3
 800502c:	4b07      	ldr	r3, [pc, #28]	; (800504c <drawStatusMenu+0x7c4>)
 800502e:	f7fc fab5 	bl	800159c <LCD_PutInt>
 8005032:	4603      	mov	r3, r0
 8005034:	461a      	mov	r2, r3
 8005036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005038:	4413      	add	r3, r2
 800503a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800503c:	4413      	add	r3, r2
 800503e:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In10: ", fnt7x10);
 8005040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005042:	b298      	uxth	r0, r3
 8005044:	e020      	b.n	8005088 <drawStatusMenu+0x800>
 8005046:	bf00      	nop
 8005048:	2001033a 	.word	0x2001033a
 800504c:	080152b0 	.word	0x080152b0
 8005050:	08014e60 	.word	0x08014e60
 8005054:	08014e70 	.word	0x08014e70
 8005058:	08014e80 	.word	0x08014e80
 800505c:	20000118 	.word	0x20000118
 8005060:	2002407c 	.word	0x2002407c
 8005064:	447a0000 	.word	0x447a0000
 8005068:	08014e88 	.word	0x08014e88
 800506c:	08014e90 	.word	0x08014e90
 8005070:	200000e8 	.word	0x200000e8
 8005074:	20010560 	.word	0x20010560
 8005078:	08014e98 	.word	0x08014e98
 800507c:	08014ea0 	.word	0x08014ea0
 8005080:	08014ea8 	.word	0x08014ea8
 8005084:	08014eb0 	.word	0x08014eb0
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	b299      	uxth	r1, r3
 800508c:	4ba3      	ldr	r3, [pc, #652]	; (800531c <drawStatusMenu+0xa94>)
 800508e:	4aa4      	ldr	r2, [pc, #656]	; (8005320 <drawStatusMenu+0xa98>)
 8005090:	f7fc fa4c 	bl	800152c <LCD_PutStr>
 8005094:	4603      	mov	r3, r0
 8005096:	461a      	mov	r2, r3
 8005098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509a:	4413      	add	r3, r2
 800509c:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input10], fnt7x10);
 800509e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a0:	b298      	uxth	r0, r3
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	b299      	uxth	r1, r3
 80050a6:	4b9f      	ldr	r3, [pc, #636]	; (8005324 <drawStatusMenu+0xa9c>)
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	4a9f      	ldr	r2, [pc, #636]	; (8005328 <drawStatusMenu+0xaa0>)
 80050ac:	5cd3      	ldrb	r3, [r2, r3]
 80050ae:	461a      	mov	r2, r3
 80050b0:	4b9a      	ldr	r3, [pc, #616]	; (800531c <drawStatusMenu+0xa94>)
 80050b2:	f7fc fa73 	bl	800159c <LCD_PutInt>
 80050b6:	4603      	mov	r3, r0
 80050b8:	461a      	mov	r2, r3
 80050ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050bc:	4413      	add	r3, r2
 80050be:	637b      	str	r3, [r7, #52]	; 0x34

		i=10;
 80050c0:	230a      	movs	r3, #10
 80050c2:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	330f      	adds	r3, #15
 80050c8:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI2: ", fnt7x10);
 80050ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050cc:	b298      	uxth	r0, r3
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	b299      	uxth	r1, r3
 80050d2:	4b92      	ldr	r3, [pc, #584]	; (800531c <drawStatusMenu+0xa94>)
 80050d4:	4a95      	ldr	r2, [pc, #596]	; (800532c <drawStatusMenu+0xaa4>)
 80050d6:	f7fc fa29 	bl	800152c <LCD_PutStr>
 80050da:	4603      	mov	r3, r0
 80050dc:	461a      	mov	r2, r3
 80050de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e0:	4413      	add	r3, r2
 80050e2:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc2];
 80050e4:	4b92      	ldr	r3, [pc, #584]	; (8005330 <drawStatusMenu+0xaa8>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4a92      	ldr	r2, [pc, #584]	; (8005334 <drawStatusMenu+0xaac>)
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	edd3 7a00 	vldr	s15, [r3]
 80050f2:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8005338 <drawStatusMenu+0xab0>
 80050f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050fe:	ee17 3a90 	vmov	r3, s15
 8005102:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005106:	b298      	uxth	r0, r3
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	b299      	uxth	r1, r3
 800510c:	4b83      	ldr	r3, [pc, #524]	; (800531c <drawStatusMenu+0xa94>)
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2303      	movs	r3, #3
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	f7fc faa8 	bl	8001668 <LCD_PutIntF>
 8005118:	4603      	mov	r3, r0
 800511a:	461a      	mov	r2, r3
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	4413      	add	r3, r2
 8005120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005122:	4413      	add	r3, r2
 8005124:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI11: ", fnt7x10);
 8005126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005128:	b298      	uxth	r0, r3
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	b299      	uxth	r1, r3
 800512e:	4b7b      	ldr	r3, [pc, #492]	; (800531c <drawStatusMenu+0xa94>)
 8005130:	4a82      	ldr	r2, [pc, #520]	; (800533c <drawStatusMenu+0xab4>)
 8005132:	f7fc f9fb 	bl	800152c <LCD_PutStr>
 8005136:	4603      	mov	r3, r0
 8005138:	461a      	mov	r2, r3
 800513a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513c:	4413      	add	r3, r2
 800513e:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc11];
 8005140:	4b7b      	ldr	r3, [pc, #492]	; (8005330 <drawStatusMenu+0xaa8>)
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	4a7b      	ldr	r2, [pc, #492]	; (8005334 <drawStatusMenu+0xaac>)
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	edd3 7a00 	vldr	s15, [r3]
 800514e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8005338 <drawStatusMenu+0xab0>
 8005152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800515a:	ee17 3a90 	vmov	r3, s15
 800515e:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005162:	b298      	uxth	r0, r3
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	b299      	uxth	r1, r3
 8005168:	4b6c      	ldr	r3, [pc, #432]	; (800531c <drawStatusMenu+0xa94>)
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	2303      	movs	r3, #3
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	f7fc fa7a 	bl	8001668 <LCD_PutIntF>
 8005174:	4603      	mov	r3, r0
 8005176:	461a      	mov	r2, r3
 8005178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517a:	4413      	add	r3, r2
 800517c:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In2: ", fnt7x10);
 8005182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005184:	b298      	uxth	r0, r3
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	b299      	uxth	r1, r3
 800518a:	4b64      	ldr	r3, [pc, #400]	; (800531c <drawStatusMenu+0xa94>)
 800518c:	4a6c      	ldr	r2, [pc, #432]	; (8005340 <drawStatusMenu+0xab8>)
 800518e:	f7fc f9cd 	bl	800152c <LCD_PutStr>
 8005192:	4603      	mov	r3, r0
 8005194:	461a      	mov	r2, r3
 8005196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005198:	4413      	add	r3, r2
 800519a:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input2], fnt7x10)+adjacentSpacing;
 800519c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519e:	b298      	uxth	r0, r3
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	b299      	uxth	r1, r3
 80051a4:	4b5f      	ldr	r3, [pc, #380]	; (8005324 <drawStatusMenu+0xa9c>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	4a5f      	ldr	r2, [pc, #380]	; (8005328 <drawStatusMenu+0xaa0>)
 80051aa:	5cd3      	ldrb	r3, [r2, r3]
 80051ac:	461a      	mov	r2, r3
 80051ae:	4b5b      	ldr	r3, [pc, #364]	; (800531c <drawStatusMenu+0xa94>)
 80051b0:	f7fc f9f4 	bl	800159c <LCD_PutInt>
 80051b4:	4603      	mov	r3, r0
 80051b6:	461a      	mov	r2, r3
 80051b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ba:	4413      	add	r3, r2
 80051bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051be:	4413      	add	r3, r2
 80051c0:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In11: ", fnt7x10);
 80051c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c4:	b298      	uxth	r0, r3
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	b299      	uxth	r1, r3
 80051ca:	4b54      	ldr	r3, [pc, #336]	; (800531c <drawStatusMenu+0xa94>)
 80051cc:	4a5d      	ldr	r2, [pc, #372]	; (8005344 <drawStatusMenu+0xabc>)
 80051ce:	f7fc f9ad 	bl	800152c <LCD_PutStr>
 80051d2:	4603      	mov	r3, r0
 80051d4:	461a      	mov	r2, r3
 80051d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d8:	4413      	add	r3, r2
 80051da:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input11], fnt7x10);
 80051dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051de:	b298      	uxth	r0, r3
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	b299      	uxth	r1, r3
 80051e4:	4b4f      	ldr	r3, [pc, #316]	; (8005324 <drawStatusMenu+0xa9c>)
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	4a4f      	ldr	r2, [pc, #316]	; (8005328 <drawStatusMenu+0xaa0>)
 80051ea:	5cd3      	ldrb	r3, [r2, r3]
 80051ec:	461a      	mov	r2, r3
 80051ee:	4b4b      	ldr	r3, [pc, #300]	; (800531c <drawStatusMenu+0xa94>)
 80051f0:	f7fc f9d4 	bl	800159c <LCD_PutInt>
 80051f4:	4603      	mov	r3, r0
 80051f6:	461a      	mov	r2, r3
 80051f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fa:	4413      	add	r3, r2
 80051fc:	637b      	str	r3, [r7, #52]	; 0x34

		i=10;
 80051fe:	230a      	movs	r3, #10
 8005200:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	330f      	adds	r3, #15
 8005206:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI3: ", fnt7x10);
 8005208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520a:	b298      	uxth	r0, r3
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	b299      	uxth	r1, r3
 8005210:	4b42      	ldr	r3, [pc, #264]	; (800531c <drawStatusMenu+0xa94>)
 8005212:	4a4d      	ldr	r2, [pc, #308]	; (8005348 <drawStatusMenu+0xac0>)
 8005214:	f7fc f98a 	bl	800152c <LCD_PutStr>
 8005218:	4603      	mov	r3, r0
 800521a:	461a      	mov	r2, r3
 800521c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521e:	4413      	add	r3, r2
 8005220:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc3];
 8005222:	4b43      	ldr	r3, [pc, #268]	; (8005330 <drawStatusMenu+0xaa8>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	4a43      	ldr	r2, [pc, #268]	; (8005334 <drawStatusMenu+0xaac>)
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	edd3 7a00 	vldr	s15, [r3]
 8005230:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005338 <drawStatusMenu+0xab0>
 8005234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800523c:	ee17 3a90 	vmov	r3, s15
 8005240:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005244:	b298      	uxth	r0, r3
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	b299      	uxth	r1, r3
 800524a:	4b34      	ldr	r3, [pc, #208]	; (800531c <drawStatusMenu+0xa94>)
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	2303      	movs	r3, #3
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	f7fc fa09 	bl	8001668 <LCD_PutIntF>
 8005256:	4603      	mov	r3, r0
 8005258:	461a      	mov	r2, r3
 800525a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525c:	4413      	add	r3, r2
 800525e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005260:	4413      	add	r3, r2
 8005262:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI12: ", fnt7x10);
 8005264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005266:	b298      	uxth	r0, r3
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	b299      	uxth	r1, r3
 800526c:	4b2b      	ldr	r3, [pc, #172]	; (800531c <drawStatusMenu+0xa94>)
 800526e:	4a37      	ldr	r2, [pc, #220]	; (800534c <drawStatusMenu+0xac4>)
 8005270:	f7fc f95c 	bl	800152c <LCD_PutStr>
 8005274:	4603      	mov	r3, r0
 8005276:	461a      	mov	r2, r3
 8005278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527a:	4413      	add	r3, r2
 800527c:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc12];
 800527e:	4b2c      	ldr	r3, [pc, #176]	; (8005330 <drawStatusMenu+0xaa8>)
 8005280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005282:	4a2c      	ldr	r2, [pc, #176]	; (8005334 <drawStatusMenu+0xaac>)
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	edd3 7a00 	vldr	s15, [r3]
 800528c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005338 <drawStatusMenu+0xab0>
 8005290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005298:	ee17 3a90 	vmov	r3, s15
 800529c:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 800529e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a0:	b298      	uxth	r0, r3
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	b299      	uxth	r1, r3
 80052a6:	4b1d      	ldr	r3, [pc, #116]	; (800531c <drawStatusMenu+0xa94>)
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	2303      	movs	r3, #3
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	f7fc f9db 	bl	8001668 <LCD_PutIntF>
 80052b2:	4603      	mov	r3, r0
 80052b4:	461a      	mov	r2, r3
 80052b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b8:	4413      	add	r3, r2
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In3: ", fnt7x10);
 80052c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c2:	b298      	uxth	r0, r3
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	b299      	uxth	r1, r3
 80052c8:	4b14      	ldr	r3, [pc, #80]	; (800531c <drawStatusMenu+0xa94>)
 80052ca:	4a21      	ldr	r2, [pc, #132]	; (8005350 <drawStatusMenu+0xac8>)
 80052cc:	f7fc f92e 	bl	800152c <LCD_PutStr>
 80052d0:	4603      	mov	r3, r0
 80052d2:	461a      	mov	r2, r3
 80052d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d6:	4413      	add	r3, r2
 80052d8:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input3], fnt7x10);
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052dc:	b298      	uxth	r0, r3
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	b299      	uxth	r1, r3
 80052e2:	4b10      	ldr	r3, [pc, #64]	; (8005324 <drawStatusMenu+0xa9c>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	4a10      	ldr	r2, [pc, #64]	; (8005328 <drawStatusMenu+0xaa0>)
 80052e8:	5cd3      	ldrb	r3, [r2, r3]
 80052ea:	461a      	mov	r2, r3
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <drawStatusMenu+0xa94>)
 80052ee:	f7fc f955 	bl	800159c <LCD_PutInt>


		i=10;
 80052f2:	230a      	movs	r3, #10
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	330f      	adds	r3, #15
 80052fa:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI4: ", fnt7x10);
 80052fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fe:	b298      	uxth	r0, r3
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	b299      	uxth	r1, r3
 8005304:	4b05      	ldr	r3, [pc, #20]	; (800531c <drawStatusMenu+0xa94>)
 8005306:	4a13      	ldr	r2, [pc, #76]	; (8005354 <drawStatusMenu+0xacc>)
 8005308:	f7fc f910 	bl	800152c <LCD_PutStr>
 800530c:	4603      	mov	r3, r0
 800530e:	461a      	mov	r2, r3
 8005310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005312:	4413      	add	r3, r2
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc4];
 8005316:	4b06      	ldr	r3, [pc, #24]	; (8005330 <drawStatusMenu+0xaa8>)
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	e01d      	b.n	8005358 <drawStatusMenu+0xad0>
 800531c:	080152b0 	.word	0x080152b0
 8005320:	08014eb8 	.word	0x08014eb8
 8005324:	200000e8 	.word	0x200000e8
 8005328:	20010560 	.word	0x20010560
 800532c:	08014ec0 	.word	0x08014ec0
 8005330:	20000118 	.word	0x20000118
 8005334:	2002407c 	.word	0x2002407c
 8005338:	447a0000 	.word	0x447a0000
 800533c:	08014ec8 	.word	0x08014ec8
 8005340:	08014ed0 	.word	0x08014ed0
 8005344:	08014ed8 	.word	0x08014ed8
 8005348:	08014ee0 	.word	0x08014ee0
 800534c:	08014ee8 	.word	0x08014ee8
 8005350:	08014ef0 	.word	0x08014ef0
 8005354:	08014ef8 	.word	0x08014ef8
 8005358:	4aa7      	ldr	r2, [pc, #668]	; (80055f8 <drawStatusMenu+0xd70>)
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	edd3 7a00 	vldr	s15, [r3]
 8005362:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80055fc <drawStatusMenu+0xd74>
 8005366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800536a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800536e:	ee17 3a90 	vmov	r3, s15
 8005372:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005376:	b298      	uxth	r0, r3
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	b299      	uxth	r1, r3
 800537c:	4ba0      	ldr	r3, [pc, #640]	; (8005600 <drawStatusMenu+0xd78>)
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	2303      	movs	r3, #3
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	f7fc f970 	bl	8001668 <LCD_PutIntF>
 8005388:	4603      	mov	r3, r0
 800538a:	461a      	mov	r2, r3
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	4413      	add	r3, r2
 8005390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005392:	4413      	add	r3, r2
 8005394:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI13: ", fnt7x10);
 8005396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005398:	b298      	uxth	r0, r3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	b299      	uxth	r1, r3
 800539e:	4b98      	ldr	r3, [pc, #608]	; (8005600 <drawStatusMenu+0xd78>)
 80053a0:	4a98      	ldr	r2, [pc, #608]	; (8005604 <drawStatusMenu+0xd7c>)
 80053a2:	f7fc f8c3 	bl	800152c <LCD_PutStr>
 80053a6:	4603      	mov	r3, r0
 80053a8:	461a      	mov	r2, r3
 80053aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ac:	4413      	add	r3, r2
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc13];
 80053b0:	4b95      	ldr	r3, [pc, #596]	; (8005608 <drawStatusMenu+0xd80>)
 80053b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b4:	4a90      	ldr	r2, [pc, #576]	; (80055f8 <drawStatusMenu+0xd70>)
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	edd3 7a00 	vldr	s15, [r3]
 80053be:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80055fc <drawStatusMenu+0xd74>
 80053c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053ca:	ee17 3a90 	vmov	r3, s15
 80053ce:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80053d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d2:	b298      	uxth	r0, r3
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	b299      	uxth	r1, r3
 80053d8:	4b89      	ldr	r3, [pc, #548]	; (8005600 <drawStatusMenu+0xd78>)
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	2303      	movs	r3, #3
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	f7fc f942 	bl	8001668 <LCD_PutIntF>
 80053e4:	4603      	mov	r3, r0
 80053e6:	461a      	mov	r2, r3
 80053e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ea:	4413      	add	r3, r2
 80053ec:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In4: ", fnt7x10);
 80053f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f4:	b298      	uxth	r0, r3
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	b299      	uxth	r1, r3
 80053fa:	4b81      	ldr	r3, [pc, #516]	; (8005600 <drawStatusMenu+0xd78>)
 80053fc:	4a83      	ldr	r2, [pc, #524]	; (800560c <drawStatusMenu+0xd84>)
 80053fe:	f7fc f895 	bl	800152c <LCD_PutStr>
 8005402:	4603      	mov	r3, r0
 8005404:	461a      	mov	r2, r3
 8005406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005408:	4413      	add	r3, r2
 800540a:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input4], fnt7x10);
 800540c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540e:	b298      	uxth	r0, r3
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	b299      	uxth	r1, r3
 8005414:	4b7e      	ldr	r3, [pc, #504]	; (8005610 <drawStatusMenu+0xd88>)
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	4a7e      	ldr	r2, [pc, #504]	; (8005614 <drawStatusMenu+0xd8c>)
 800541a:	5cd3      	ldrb	r3, [r2, r3]
 800541c:	461a      	mov	r2, r3
 800541e:	4b78      	ldr	r3, [pc, #480]	; (8005600 <drawStatusMenu+0xd78>)
 8005420:	f7fc f8bc 	bl	800159c <LCD_PutInt>

		i=10;
 8005424:	230a      	movs	r3, #10
 8005426:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	330f      	adds	r3, #15
 800542c:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI5: ", fnt7x10);
 800542e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005430:	b298      	uxth	r0, r3
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	b299      	uxth	r1, r3
 8005436:	4b72      	ldr	r3, [pc, #456]	; (8005600 <drawStatusMenu+0xd78>)
 8005438:	4a77      	ldr	r2, [pc, #476]	; (8005618 <drawStatusMenu+0xd90>)
 800543a:	f7fc f877 	bl	800152c <LCD_PutStr>
 800543e:	4603      	mov	r3, r0
 8005440:	461a      	mov	r2, r3
 8005442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005444:	4413      	add	r3, r2
 8005446:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc5];
 8005448:	4b6f      	ldr	r3, [pc, #444]	; (8005608 <drawStatusMenu+0xd80>)
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	4a6a      	ldr	r2, [pc, #424]	; (80055f8 <drawStatusMenu+0xd70>)
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	edd3 7a00 	vldr	s15, [r3]
 8005456:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80055fc <drawStatusMenu+0xd74>
 800545a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800545e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005462:	ee17 3a90 	vmov	r3, s15
 8005466:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546a:	b298      	uxth	r0, r3
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	b299      	uxth	r1, r3
 8005470:	4b63      	ldr	r3, [pc, #396]	; (8005600 <drawStatusMenu+0xd78>)
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	2303      	movs	r3, #3
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	f7fc f8f6 	bl	8001668 <LCD_PutIntF>
 800547c:	4603      	mov	r3, r0
 800547e:	461a      	mov	r2, r3
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	4413      	add	r3, r2
 8005484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005486:	4413      	add	r3, r2
 8005488:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI14: ", fnt7x10);
 800548a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548c:	b298      	uxth	r0, r3
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	b299      	uxth	r1, r3
 8005492:	4b5b      	ldr	r3, [pc, #364]	; (8005600 <drawStatusMenu+0xd78>)
 8005494:	4a61      	ldr	r2, [pc, #388]	; (800561c <drawStatusMenu+0xd94>)
 8005496:	f7fc f849 	bl	800152c <LCD_PutStr>
 800549a:	4603      	mov	r3, r0
 800549c:	461a      	mov	r2, r3
 800549e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a0:	4413      	add	r3, r2
 80054a2:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc14];
 80054a4:	4b58      	ldr	r3, [pc, #352]	; (8005608 <drawStatusMenu+0xd80>)
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	4a53      	ldr	r2, [pc, #332]	; (80055f8 <drawStatusMenu+0xd70>)
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	edd3 7a00 	vldr	s15, [r3]
 80054b2:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80055fc <drawStatusMenu+0xd74>
 80054b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054be:	ee17 3a90 	vmov	r3, s15
 80054c2:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80054c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c6:	b298      	uxth	r0, r3
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	b299      	uxth	r1, r3
 80054cc:	4b4c      	ldr	r3, [pc, #304]	; (8005600 <drawStatusMenu+0xd78>)
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	2303      	movs	r3, #3
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	f7fc f8c8 	bl	8001668 <LCD_PutIntF>
 80054d8:	4603      	mov	r3, r0
 80054da:	461a      	mov	r2, r3
 80054dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054de:	4413      	add	r3, r2
 80054e0:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In5: ", fnt7x10);
 80054e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e8:	b298      	uxth	r0, r3
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	b299      	uxth	r1, r3
 80054ee:	4b44      	ldr	r3, [pc, #272]	; (8005600 <drawStatusMenu+0xd78>)
 80054f0:	4a4b      	ldr	r2, [pc, #300]	; (8005620 <drawStatusMenu+0xd98>)
 80054f2:	f7fc f81b 	bl	800152c <LCD_PutStr>
 80054f6:	4603      	mov	r3, r0
 80054f8:	461a      	mov	r2, r3
 80054fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fc:	4413      	add	r3, r2
 80054fe:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input5], fnt7x10);
 8005500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005502:	b298      	uxth	r0, r3
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	b299      	uxth	r1, r3
 8005508:	4b41      	ldr	r3, [pc, #260]	; (8005610 <drawStatusMenu+0xd88>)
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	4a41      	ldr	r2, [pc, #260]	; (8005614 <drawStatusMenu+0xd8c>)
 800550e:	5cd3      	ldrb	r3, [r2, r3]
 8005510:	461a      	mov	r2, r3
 8005512:	4b3b      	ldr	r3, [pc, #236]	; (8005600 <drawStatusMenu+0xd78>)
 8005514:	f7fc f842 	bl	800159c <LCD_PutInt>

		i=10;
 8005518:	230a      	movs	r3, #10
 800551a:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	330f      	adds	r3, #15
 8005520:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI6: ", fnt7x10);
 8005522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005524:	b298      	uxth	r0, r3
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	b299      	uxth	r1, r3
 800552a:	4b35      	ldr	r3, [pc, #212]	; (8005600 <drawStatusMenu+0xd78>)
 800552c:	4a3d      	ldr	r2, [pc, #244]	; (8005624 <drawStatusMenu+0xd9c>)
 800552e:	f7fb fffd 	bl	800152c <LCD_PutStr>
 8005532:	4603      	mov	r3, r0
 8005534:	461a      	mov	r2, r3
 8005536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005538:	4413      	add	r3, r2
 800553a:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc6];
 800553c:	4b32      	ldr	r3, [pc, #200]	; (8005608 <drawStatusMenu+0xd80>)
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	4a2d      	ldr	r2, [pc, #180]	; (80055f8 <drawStatusMenu+0xd70>)
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	edd3 7a00 	vldr	s15, [r3]
 800554a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80055fc <drawStatusMenu+0xd74>
 800554e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005552:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005556:	ee17 3a90 	vmov	r3, s15
 800555a:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 800555c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555e:	b298      	uxth	r0, r3
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	b299      	uxth	r1, r3
 8005564:	4b26      	ldr	r3, [pc, #152]	; (8005600 <drawStatusMenu+0xd78>)
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	2303      	movs	r3, #3
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	f7fc f87c 	bl	8001668 <LCD_PutIntF>
 8005570:	4603      	mov	r3, r0
 8005572:	461a      	mov	r2, r3
 8005574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005576:	4413      	add	r3, r2
 8005578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800557a:	4413      	add	r3, r2
 800557c:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI15: ", fnt7x10);
 800557e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005580:	b298      	uxth	r0, r3
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	b299      	uxth	r1, r3
 8005586:	4b1e      	ldr	r3, [pc, #120]	; (8005600 <drawStatusMenu+0xd78>)
 8005588:	4a27      	ldr	r2, [pc, #156]	; (8005628 <drawStatusMenu+0xda0>)
 800558a:	f7fb ffcf 	bl	800152c <LCD_PutStr>
 800558e:	4603      	mov	r3, r0
 8005590:	461a      	mov	r2, r3
 8005592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005594:	4413      	add	r3, r2
 8005596:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc15];
 8005598:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <drawStatusMenu+0xd80>)
 800559a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559c:	4a16      	ldr	r2, [pc, #88]	; (80055f8 <drawStatusMenu+0xd70>)
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	edd3 7a00 	vldr	s15, [r3]
 80055a6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80055fc <drawStatusMenu+0xd74>
 80055aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055b2:	ee17 3a90 	vmov	r3, s15
 80055b6:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80055b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ba:	b298      	uxth	r0, r3
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	b299      	uxth	r1, r3
 80055c0:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <drawStatusMenu+0xd78>)
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	2303      	movs	r3, #3
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	f7fc f84e 	bl	8001668 <LCD_PutIntF>
 80055cc:	4603      	mov	r3, r0
 80055ce:	461a      	mov	r2, r3
 80055d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d2:	4413      	add	r3, r2
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In6: ", fnt7x10);
 80055da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055dc:	b298      	uxth	r0, r3
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	b299      	uxth	r1, r3
 80055e2:	4b07      	ldr	r3, [pc, #28]	; (8005600 <drawStatusMenu+0xd78>)
 80055e4:	4a11      	ldr	r2, [pc, #68]	; (800562c <drawStatusMenu+0xda4>)
 80055e6:	f7fb ffa1 	bl	800152c <LCD_PutStr>
 80055ea:	4603      	mov	r3, r0
 80055ec:	461a      	mov	r2, r3
 80055ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f0:	4413      	add	r3, r2
 80055f2:	637b      	str	r3, [r7, #52]	; 0x34
 80055f4:	e01c      	b.n	8005630 <drawStatusMenu+0xda8>
 80055f6:	bf00      	nop
 80055f8:	2002407c 	.word	0x2002407c
 80055fc:	447a0000 	.word	0x447a0000
 8005600:	080152b0 	.word	0x080152b0
 8005604:	08014f00 	.word	0x08014f00
 8005608:	20000118 	.word	0x20000118
 800560c:	08014f08 	.word	0x08014f08
 8005610:	200000e8 	.word	0x200000e8
 8005614:	20010560 	.word	0x20010560
 8005618:	08014f10 	.word	0x08014f10
 800561c:	08014f18 	.word	0x08014f18
 8005620:	08014f20 	.word	0x08014f20
 8005624:	08014f28 	.word	0x08014f28
 8005628:	08014f30 	.word	0x08014f30
 800562c:	08014f38 	.word	0x08014f38
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input6], fnt7x10);
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	b298      	uxth	r0, r3
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	b299      	uxth	r1, r3
 8005638:	4b9b      	ldr	r3, [pc, #620]	; (80058a8 <drawStatusMenu+0x1020>)
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	4a9b      	ldr	r2, [pc, #620]	; (80058ac <drawStatusMenu+0x1024>)
 800563e:	5cd3      	ldrb	r3, [r2, r3]
 8005640:	461a      	mov	r2, r3
 8005642:	4b9b      	ldr	r3, [pc, #620]	; (80058b0 <drawStatusMenu+0x1028>)
 8005644:	f7fb ffaa 	bl	800159c <LCD_PutInt>

		i=10;
 8005648:	230a      	movs	r3, #10
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	330f      	adds	r3, #15
 8005650:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI7: ", fnt7x10);
 8005652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005654:	b298      	uxth	r0, r3
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	b299      	uxth	r1, r3
 800565a:	4b95      	ldr	r3, [pc, #596]	; (80058b0 <drawStatusMenu+0x1028>)
 800565c:	4a95      	ldr	r2, [pc, #596]	; (80058b4 <drawStatusMenu+0x102c>)
 800565e:	f7fb ff65 	bl	800152c <LCD_PutStr>
 8005662:	4603      	mov	r3, r0
 8005664:	461a      	mov	r2, r3
 8005666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005668:	4413      	add	r3, r2
 800566a:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc7];
 800566c:	4b92      	ldr	r3, [pc, #584]	; (80058b8 <drawStatusMenu+0x1030>)
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	4a92      	ldr	r2, [pc, #584]	; (80058bc <drawStatusMenu+0x1034>)
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	edd3 7a00 	vldr	s15, [r3]
 800567a:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80058c0 <drawStatusMenu+0x1038>
 800567e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005686:	ee17 3a90 	vmov	r3, s15
 800568a:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 800568c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568e:	b298      	uxth	r0, r3
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	b299      	uxth	r1, r3
 8005694:	4b86      	ldr	r3, [pc, #536]	; (80058b0 <drawStatusMenu+0x1028>)
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	2303      	movs	r3, #3
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	f7fb ffe4 	bl	8001668 <LCD_PutIntF>
 80056a0:	4603      	mov	r3, r0
 80056a2:	461a      	mov	r2, r3
 80056a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a6:	4413      	add	r3, r2
 80056a8:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In7: ", fnt7x10);
 80056ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b0:	b298      	uxth	r0, r3
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	b299      	uxth	r1, r3
 80056b6:	4b7e      	ldr	r3, [pc, #504]	; (80058b0 <drawStatusMenu+0x1028>)
 80056b8:	4a82      	ldr	r2, [pc, #520]	; (80058c4 <drawStatusMenu+0x103c>)
 80056ba:	f7fb ff37 	bl	800152c <LCD_PutStr>
 80056be:	4603      	mov	r3, r0
 80056c0:	461a      	mov	r2, r3
 80056c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c4:	4413      	add	r3, r2
 80056c6:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input7], fnt7x10);
 80056c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ca:	b298      	uxth	r0, r3
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	b299      	uxth	r1, r3
 80056d0:	4b75      	ldr	r3, [pc, #468]	; (80058a8 <drawStatusMenu+0x1020>)
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	4a75      	ldr	r2, [pc, #468]	; (80058ac <drawStatusMenu+0x1024>)
 80056d6:	5cd3      	ldrb	r3, [r2, r3]
 80056d8:	461a      	mov	r2, r3
 80056da:	4b75      	ldr	r3, [pc, #468]	; (80058b0 <drawStatusMenu+0x1028>)
 80056dc:	f7fb ff5e 	bl	800159c <LCD_PutInt>

		i=10;
 80056e0:	230a      	movs	r3, #10
 80056e2:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	330f      	adds	r3, #15
 80056e8:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI8: ", fnt7x10);
 80056ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ec:	b298      	uxth	r0, r3
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	b299      	uxth	r1, r3
 80056f2:	4b6f      	ldr	r3, [pc, #444]	; (80058b0 <drawStatusMenu+0x1028>)
 80056f4:	4a74      	ldr	r2, [pc, #464]	; (80058c8 <drawStatusMenu+0x1040>)
 80056f6:	f7fb ff19 	bl	800152c <LCD_PutStr>
 80056fa:	4603      	mov	r3, r0
 80056fc:	461a      	mov	r2, r3
 80056fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005700:	4413      	add	r3, r2
 8005702:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc8];
 8005704:	4b6c      	ldr	r3, [pc, #432]	; (80058b8 <drawStatusMenu+0x1030>)
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	4a6c      	ldr	r2, [pc, #432]	; (80058bc <drawStatusMenu+0x1034>)
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	edd3 7a00 	vldr	s15, [r3]
 8005712:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80058c0 <drawStatusMenu+0x1038>
 8005716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800571a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800571e:	ee17 3a90 	vmov	r3, s15
 8005722:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005726:	b298      	uxth	r0, r3
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	b299      	uxth	r1, r3
 800572c:	4b60      	ldr	r3, [pc, #384]	; (80058b0 <drawStatusMenu+0x1028>)
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	2303      	movs	r3, #3
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	f7fb ff98 	bl	8001668 <LCD_PutIntF>
 8005738:	4603      	mov	r3, r0
 800573a:	461a      	mov	r2, r3
 800573c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573e:	4413      	add	r3, r2
 8005740:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In8: ", fnt7x10);
 8005746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005748:	b298      	uxth	r0, r3
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	b299      	uxth	r1, r3
 800574e:	4b58      	ldr	r3, [pc, #352]	; (80058b0 <drawStatusMenu+0x1028>)
 8005750:	4a5e      	ldr	r2, [pc, #376]	; (80058cc <drawStatusMenu+0x1044>)
 8005752:	f7fb feeb 	bl	800152c <LCD_PutStr>
 8005756:	4603      	mov	r3, r0
 8005758:	461a      	mov	r2, r3
 800575a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575c:	4413      	add	r3, r2
 800575e:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input8], fnt7x10);
 8005760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005762:	b298      	uxth	r0, r3
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	b299      	uxth	r1, r3
 8005768:	4b4f      	ldr	r3, [pc, #316]	; (80058a8 <drawStatusMenu+0x1020>)
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	4a4f      	ldr	r2, [pc, #316]	; (80058ac <drawStatusMenu+0x1024>)
 800576e:	5cd3      	ldrb	r3, [r2, r3]
 8005770:	461a      	mov	r2, r3
 8005772:	4b4f      	ldr	r3, [pc, #316]	; (80058b0 <drawStatusMenu+0x1028>)
 8005774:	f7fb ff12 	bl	800159c <LCD_PutInt>
		//horizontal divider
		j=65;
 8005778:	2341      	movs	r3, #65	; 0x41
 800577a:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b299      	uxth	r1, r3
 8005784:	4b52      	ldr	r3, [pc, #328]	; (80058d0 <drawStatusMenu+0x1048>)
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	3b02      	subs	r3, #2
 800578a:	b29a      	uxth	r2, r3
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	b29b      	uxth	r3, r3
 8005790:	3301      	adds	r3, #1
 8005792:	b29b      	uxth	r3, r3
 8005794:	2002      	movs	r0, #2
 8005796:	f7fb fb7d 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 800579a:	23e6      	movs	r3, #230	; 0xe6
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3b03      	subs	r3, #3
 80057a4:	b298      	uxth	r0, r3
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	b299      	uxth	r1, r3
 80057aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3303      	adds	r3, #3
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	4b48      	ldr	r3, [pc, #288]	; (80058d4 <drawStatusMenu+0x104c>)
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	3b02      	subs	r3, #2
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f7fb fb6b 	bl	8000e94 <LCD_FillRect>

		i=155;
 80057be:	239b      	movs	r3, #155	; 0x9b
 80057c0:	637b      	str	r3, [r7, #52]	; 0x34
		j=35;
 80057c2:	2323      	movs	r3, #35	; 0x23
 80057c4:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i,j,"YOUR AD HERE!",fnt7x10);
 80057c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c8:	b298      	uxth	r0, r3
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	b299      	uxth	r1, r3
 80057ce:	4b38      	ldr	r3, [pc, #224]	; (80058b0 <drawStatusMenu+0x1028>)
 80057d0:	4a41      	ldr	r2, [pc, #260]	; (80058d8 <drawStatusMenu+0x1050>)
 80057d2:	f7fb feab 	bl	800152c <LCD_PutStr>
		i=155;
 80057d6:	239b      	movs	r3, #155	; 0x9b
 80057d8:	637b      	str	r3, [r7, #52]	; 0x34
		j=50;
 80057da:	2332      	movs	r3, #50	; 0x32
 80057dc:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i,j,"Monthly fee: $",fnt7x10)+8;
 80057de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e0:	b298      	uxth	r0, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	b299      	uxth	r1, r3
 80057e6:	4b32      	ldr	r3, [pc, #200]	; (80058b0 <drawStatusMenu+0x1028>)
 80057e8:	4a3c      	ldr	r2, [pc, #240]	; (80058dc <drawStatusMenu+0x1054>)
 80057ea:	f7fb fe9f 	bl	800152c <LCD_PutStr>
 80057ee:	4603      	mov	r3, r0
 80057f0:	3308      	adds	r3, #8
 80057f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057f4:	4413      	add	r3, r2
 80057f6:	637b      	str	r3, [r7, #52]	; 0x34
		j=28;
 80057f8:	231c      	movs	r3, #28
 80057fa:	617b      	str	r3, [r7, #20]
		LCD_PutIntF(i,j,3999, 2,fnt_dig_big);
 80057fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fe:	b298      	uxth	r0, r3
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	b299      	uxth	r1, r3
 8005804:	4b36      	ldr	r3, [pc, #216]	; (80058e0 <drawStatusMenu+0x1058>)
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	2302      	movs	r3, #2
 800580a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800580e:	f7fb ff2b 	bl	8001668 <LCD_PutIntF>

		//draw the additional pages available indicators
		i=200;
 8005812:	23c8      	movs	r3, #200	; 0xc8
 8005814:	637b      	str	r3, [r7, #52]	; 0x34
		j=220;
 8005816:	23dc      	movs	r3, #220	; 0xdc
 8005818:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 800581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581c:	b298      	uxth	r0, r3
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	b299      	uxth	r1, r3
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	b29a      	uxth	r2, r3
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	b29b      	uxth	r3, r3
 800582a:	f7fb ffcf 	bl	80017cc <drawUpDownArrow>
		j=15;
 800582e:	230f      	movs	r3, #15
 8005830:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005834:	b298      	uxth	r0, r3
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	b299      	uxth	r1, r3
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	b29a      	uxth	r2, r3
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	b29b      	uxth	r3, r3
 8005842:	f7fb ffc3 	bl	80017cc <drawUpDownArrow>
		i=180;
 8005846:	23b4      	movs	r3, #180	; 0xb4
 8005848:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800584a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584c:	b298      	uxth	r0, r3
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	b299      	uxth	r1, r3
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	b29a      	uxth	r2, r3
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	b29b      	uxth	r3, r3
 800585a:	f7fb ffb7 	bl	80017cc <drawUpDownArrow>
		j=220;
 800585e:	23dc      	movs	r3, #220	; 0xdc
 8005860:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005864:	b298      	uxth	r0, r3
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	b299      	uxth	r1, r3
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	b29a      	uxth	r2, r3
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f7fb ffab 	bl	80017cc <drawUpDownArrow>
		i=220;
 8005876:	23dc      	movs	r3, #220	; 0xdc
 8005878:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 800587a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587c:	b298      	uxth	r0, r3
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	b299      	uxth	r1, r3
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	b29a      	uxth	r2, r3
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	b29b      	uxth	r3, r3
 800588a:	f7fb ff9f 	bl	80017cc <drawUpDownArrow>
		j=15;
 800588e:	230f      	movs	r3, #15
 8005890:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005894:	b298      	uxth	r0, r3
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	b299      	uxth	r1, r3
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	b29a      	uxth	r2, r3
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	f7fb ff93 	bl	80017cc <drawUpDownArrow>
		break;
 80058a6:	e133      	b.n	8005b10 <drawStatusMenu+0x1288>
 80058a8:	200000e8 	.word	0x200000e8
 80058ac:	20010560 	.word	0x20010560
 80058b0:	080152b0 	.word	0x080152b0
 80058b4:	08014f40 	.word	0x08014f40
 80058b8:	20000118 	.word	0x20000118
 80058bc:	2002407c 	.word	0x2002407c
 80058c0:	447a0000 	.word	0x447a0000
 80058c4:	08014f48 	.word	0x08014f48
 80058c8:	08014f50 	.word	0x08014f50
 80058cc:	08014f58 	.word	0x08014f58
 80058d0:	2001033a 	.word	0x2001033a
 80058d4:	2001033c 	.word	0x2001033c
 80058d8:	08014f60 	.word	0x08014f60
 80058dc:	08014f70 	.word	0x08014f70
 80058e0:	08015670 	.word	0x08015670
	}
	case 3:{
		i=35;
 80058e4:	2323      	movs	r3, #35	; 0x23
 80058e6:	637b      	str	r3, [r7, #52]	; 0x34
		j=75;
 80058e8:	234b      	movs	r3, #75	; 0x4b
 80058ea:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b02      	subs	r3, #2
 80058f2:	b299      	uxth	r1, r3
 80058f4:	4b89      	ldr	r3, [pc, #548]	; (8005b1c <drawStatusMenu+0x1294>)
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	3b02      	subs	r3, #2
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3302      	adds	r3, #2
 8005902:	b29b      	uxth	r3, r3
 8005904:	2002      	movs	r0, #2
 8005906:	f7fb fac5 	bl	8000e94 <LCD_FillRect>
		j=55;
 800590a:	2337      	movs	r3, #55	; 0x37
 800590c:	617b      	str	r3, [r7, #20]
		i=150;
 800590e:	2396      	movs	r3, #150	; 0x96
 8005910:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutStr(i, j, "DEV UI HEALTH:", fnt7x10);
 8005912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005914:	b298      	uxth	r0, r3
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	b299      	uxth	r1, r3
 800591a:	4b81      	ldr	r3, [pc, #516]	; (8005b20 <drawStatusMenu+0x1298>)
 800591c:	4a81      	ldr	r2, [pc, #516]	; (8005b24 <drawStatusMenu+0x129c>)
 800591e:	f7fb fe05 	bl	800152c <LCD_PutStr>
 8005922:	4603      	mov	r3, r0
 8005924:	461a      	mov	r2, r3
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005928:	4413      	add	r3, r2
 800592a:	637b      	str	r3, [r7, #52]	; 0x34

		i=40;
 800592c:	2328      	movs	r3, #40	; 0x28
 800592e:	637b      	str	r3, [r7, #52]	; 0x34
		j=85;
 8005930:	2355      	movs	r3, #85	; 0x55
 8005932:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "LCD: ", fnt7x10);
 8005934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005936:	b298      	uxth	r0, r3
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	b299      	uxth	r1, r3
 800593c:	4b78      	ldr	r3, [pc, #480]	; (8005b20 <drawStatusMenu+0x1298>)
 800593e:	4a7a      	ldr	r2, [pc, #488]	; (8005b28 <drawStatusMenu+0x12a0>)
 8005940:	f7fb fdf4 	bl	800152c <LCD_PutStr>
 8005944:	4603      	mov	r3, r0
 8005946:	461a      	mov	r2, r3
 8005948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594a:	4413      	add	r3, r2
 800594c:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "Do you see me? Must be working!", fnt7x10);
 800594e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005950:	b298      	uxth	r0, r3
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	b299      	uxth	r1, r3
 8005956:	4b72      	ldr	r3, [pc, #456]	; (8005b20 <drawStatusMenu+0x1298>)
 8005958:	4a74      	ldr	r2, [pc, #464]	; (8005b2c <drawStatusMenu+0x12a4>)
 800595a:	f7fb fde7 	bl	800152c <LCD_PutStr>

		i=40;
 800595e:	2328      	movs	r3, #40	; 0x28
 8005960:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	3319      	adds	r3, #25
 8005966:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "LED Driver: ", fnt7x10);
 8005968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596a:	b298      	uxth	r0, r3
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	b299      	uxth	r1, r3
 8005970:	4b6b      	ldr	r3, [pc, #428]	; (8005b20 <drawStatusMenu+0x1298>)
 8005972:	4a6f      	ldr	r2, [pc, #444]	; (8005b30 <drawStatusMenu+0x12a8>)
 8005974:	f7fb fdda 	bl	800152c <LCD_PutStr>
 8005978:	4603      	mov	r3, r0
 800597a:	461a      	mov	r2, r3
 800597c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597e:	4413      	add	r3, r2
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
		//ping the LED Driver
		i2cCheck=writeI2CRegister(LED.address, 0xf0, 0x00,1,LED.i2cBank);
 8005982:	4b6c      	ldr	r3, [pc, #432]	; (8005b34 <drawStatusMenu+0x12ac>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	4b6a      	ldr	r3, [pc, #424]	; (8005b34 <drawStatusMenu+0x12ac>)
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	2301      	movs	r3, #1
 8005990:	2200      	movs	r2, #0
 8005992:	21f0      	movs	r1, #240	; 0xf0
 8005994:	f7fd fb72 	bl	800307c <writeI2CRegister>
 8005998:	6138      	str	r0, [r7, #16]

		if(i2cCheck){
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d008      	beq.n	80059b2 <drawStatusMenu+0x112a>
			LCD_PutStr(i, j, "Present", fnt7x10);
 80059a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a2:	b298      	uxth	r0, r3
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	b299      	uxth	r1, r3
 80059a8:	4b5d      	ldr	r3, [pc, #372]	; (8005b20 <drawStatusMenu+0x1298>)
 80059aa:	4a63      	ldr	r2, [pc, #396]	; (8005b38 <drawStatusMenu+0x12b0>)
 80059ac:	f7fb fdbe 	bl	800152c <LCD_PutStr>
 80059b0:	e007      	b.n	80059c2 <drawStatusMenu+0x113a>
		}
		else{
			LCD_PutStr(i, j, "Unresponsive", fnt7x10);
 80059b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b4:	b298      	uxth	r0, r3
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	b299      	uxth	r1, r3
 80059ba:	4b59      	ldr	r3, [pc, #356]	; (8005b20 <drawStatusMenu+0x1298>)
 80059bc:	4a5f      	ldr	r2, [pc, #380]	; (8005b3c <drawStatusMenu+0x12b4>)
 80059be:	f7fb fdb5 	bl	800152c <LCD_PutStr>
		}

		i=40;
 80059c2:	2328      	movs	r3, #40	; 0x28
 80059c4:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	3319      	adds	r3, #25
 80059ca:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "SOC UART: ", fnt7x10);
 80059cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ce:	b298      	uxth	r0, r3
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	b299      	uxth	r1, r3
 80059d4:	4b52      	ldr	r3, [pc, #328]	; (8005b20 <drawStatusMenu+0x1298>)
 80059d6:	4a5a      	ldr	r2, [pc, #360]	; (8005b40 <drawStatusMenu+0x12b8>)
 80059d8:	f7fb fda8 	bl	800152c <LCD_PutStr>
 80059dc:	4603      	mov	r3, r0
 80059de:	461a      	mov	r2, r3
 80059e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e2:	4413      	add	r3, r2
 80059e4:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "Am I reading this now?", fnt7x10);
 80059e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e8:	b298      	uxth	r0, r3
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	b299      	uxth	r1, r3
 80059ee:	4b4c      	ldr	r3, [pc, #304]	; (8005b20 <drawStatusMenu+0x1298>)
 80059f0:	4a54      	ldr	r2, [pc, #336]	; (8005b44 <drawStatusMenu+0x12bc>)
 80059f2:	f7fb fd9b 	bl	800152c <LCD_PutStr>

		i=40;
 80059f6:	2328      	movs	r3, #40	; 0x28
 80059f8:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	3319      	adds	r3, #25
 80059fe:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "SOC I2C: ", fnt7x10);
 8005a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a02:	b298      	uxth	r0, r3
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	b299      	uxth	r1, r3
 8005a08:	4b45      	ldr	r3, [pc, #276]	; (8005b20 <drawStatusMenu+0x1298>)
 8005a0a:	4a4f      	ldr	r2, [pc, #316]	; (8005b48 <drawStatusMenu+0x12c0>)
 8005a0c:	f7fb fd8e 	bl	800152c <LCD_PutStr>
 8005a10:	4603      	mov	r3, r0
 8005a12:	461a      	mov	r2, r3
 8005a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a16:	4413      	add	r3, r2
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
		i2cCheck=writeI2CRegister(socI2cVoltageMux.address, 0xf0, 0x00,1,socI2cVoltageMux.i2cBank);
 8005a1a:	4b4c      	ldr	r3, [pc, #304]	; (8005b4c <drawStatusMenu+0x12c4>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	4b4a      	ldr	r3, [pc, #296]	; (8005b4c <drawStatusMenu+0x12c4>)
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	2301      	movs	r3, #1
 8005a28:	2200      	movs	r2, #0
 8005a2a:	21f0      	movs	r1, #240	; 0xf0
 8005a2c:	f7fd fb26 	bl	800307c <writeI2CRegister>
 8005a30:	6138      	str	r0, [r7, #16]
		if(i2cCheck){
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d008      	beq.n	8005a4a <drawStatusMenu+0x11c2>
			LCD_PutStr(i, j, "Present", fnt7x10);
 8005a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3a:	b298      	uxth	r0, r3
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	b299      	uxth	r1, r3
 8005a40:	4b37      	ldr	r3, [pc, #220]	; (8005b20 <drawStatusMenu+0x1298>)
 8005a42:	4a3d      	ldr	r2, [pc, #244]	; (8005b38 <drawStatusMenu+0x12b0>)
 8005a44:	f7fb fd72 	bl	800152c <LCD_PutStr>
 8005a48:	e007      	b.n	8005a5a <drawStatusMenu+0x11d2>
		}
		else{
			LCD_PutStr(i, j, "Undetected", fnt7x10);
 8005a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4c:	b298      	uxth	r0, r3
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	b299      	uxth	r1, r3
 8005a52:	4b33      	ldr	r3, [pc, #204]	; (8005b20 <drawStatusMenu+0x1298>)
 8005a54:	4a3e      	ldr	r2, [pc, #248]	; (8005b50 <drawStatusMenu+0x12c8>)
 8005a56:	f7fb fd69 	bl	800152c <LCD_PutStr>
		}


		i=40;
 8005a5a:	2328      	movs	r3, #40	; 0x28
 8005a5c:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	3319      	adds	r3, #25
 8005a62:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Dev UI Runtime: ", fnt7x10);
 8005a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a66:	b298      	uxth	r0, r3
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	b299      	uxth	r1, r3
 8005a6c:	4b2c      	ldr	r3, [pc, #176]	; (8005b20 <drawStatusMenu+0x1298>)
 8005a6e:	4a39      	ldr	r2, [pc, #228]	; (8005b54 <drawStatusMenu+0x12cc>)
 8005a70:	f7fb fd5c 	bl	800152c <LCD_PutStr>
 8005a74:	4603      	mov	r3, r0
 8005a76:	461a      	mov	r2, r3
 8005a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7a:	4413      	add	r3, r2
 8005a7c:	637b      	str	r3, [r7, #52]	; 0x34
		//GetTick provides runtime in milliseconds
		int runtime = (HAL_GetTick()/1000);
 8005a7e:	f001 fd4b 	bl	8007518 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	4b34      	ldr	r3, [pc, #208]	; (8005b58 <drawStatusMenu+0x12d0>)
 8005a86:	fba3 2302 	umull	r2, r3, r3, r2
 8005a8a:	099b      	lsrs	r3, r3, #6
 8005a8c:	60fb      	str	r3, [r7, #12]
		i+= LCD_PutInt(i, j, runtime, fnt7x10);
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a90:	b298      	uxth	r0, r3
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	b299      	uxth	r1, r3
 8005a96:	4b22      	ldr	r3, [pc, #136]	; (8005b20 <drawStatusMenu+0x1298>)
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	f7fb fd7f 	bl	800159c <LCD_PutInt>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa4:	4413      	add	r3, r2
 8005aa6:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, " seconds", fnt7x10);
 8005aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aaa:	b298      	uxth	r0, r3
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	b299      	uxth	r1, r3
 8005ab0:	4b1b      	ldr	r3, [pc, #108]	; (8005b20 <drawStatusMenu+0x1298>)
 8005ab2:	4a2a      	ldr	r2, [pc, #168]	; (8005b5c <drawStatusMenu+0x12d4>)
 8005ab4:	f7fb fd3a 	bl	800152c <LCD_PutStr>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	461a      	mov	r2, r3
 8005abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005abe:	4413      	add	r3, r2
 8005ac0:	637b      	str	r3, [r7, #52]	; 0x34

		i=200;
 8005ac2:	23c8      	movs	r3, #200	; 0xc8
 8005ac4:	637b      	str	r3, [r7, #52]	; 0x34
		j=15;
 8005ac6:	230f      	movs	r3, #15
 8005ac8:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005acc:	b298      	uxth	r0, r3
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	b299      	uxth	r1, r3
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f7fb fe77 	bl	80017cc <drawUpDownArrow>
		i=180;
 8005ade:	23b4      	movs	r3, #180	; 0xb4
 8005ae0:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae4:	b298      	uxth	r0, r3
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	b299      	uxth	r1, r3
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	f7fb fe6b 	bl	80017cc <drawUpDownArrow>
		i=220;
 8005af6:	23dc      	movs	r3, #220	; 0xdc
 8005af8:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afc:	b298      	uxth	r0, r3
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	b299      	uxth	r1, r3
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f7fb fe5f 	bl	80017cc <drawUpDownArrow>

		break;
 8005b0e:	bf00      	nop
	}
	}

	SMLCD_Flush();
 8005b10:	f7fa fde2 	bl	80006d8 <SMLCD_Flush>



}
 8005b14:	bf00      	nop
 8005b16:	3738      	adds	r7, #56	; 0x38
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	2001033a 	.word	0x2001033a
 8005b20:	080152b0 	.word	0x080152b0
 8005b24:	08014f80 	.word	0x08014f80
 8005b28:	08014f90 	.word	0x08014f90
 8005b2c:	08014f98 	.word	0x08014f98
 8005b30:	08014fb8 	.word	0x08014fb8
 8005b34:	200000c0 	.word	0x200000c0
 8005b38:	08014fc8 	.word	0x08014fc8
 8005b3c:	08014fd0 	.word	0x08014fd0
 8005b40:	08014fe0 	.word	0x08014fe0
 8005b44:	08014fec 	.word	0x08014fec
 8005b48:	08015004 	.word	0x08015004
 8005b4c:	200000d0 	.word	0x200000d0
 8005b50:	08015010 	.word	0x08015010
 8005b54:	0801501c 	.word	0x0801501c
 8005b58:	10624dd3 	.word	0x10624dd3
 8005b5c:	08015030 	.word	0x08015030

08005b60 <drawSystemInfoMenu>:

void drawSystemInfoMenu(int indicator){
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08e      	sub	sp, #56	; 0x38
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	6078      	str	r0, [r7, #4]
	int i,j;
	float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8005b68:	2314      	movs	r3, #20
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
	int indentAlignment=50;
 8005b6c:	2332      	movs	r3, #50	; 0x32
 8005b6e:	623b      	str	r3, [r7, #32]
	int arrowUp = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	61fb      	str	r3, [r7, #28]
	int arrowDown=1;
 8005b74:	2301      	movs	r3, #1
 8005b76:	61bb      	str	r3, [r7, #24]
	int arrowSize=3;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	617b      	str	r3, [r7, #20]
	int otherBoardAlignment = 220;
 8005b7c:	23dc      	movs	r3, #220	; 0xdc
 8005b7e:	613b      	str	r3, [r7, #16]
	previousMenu=0;
 8005b80:	4b4b      	ldr	r3, [pc, #300]	; (8005cb0 <drawSystemInfoMenu+0x150>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8005b86:	f7fa fef1 	bl	800096c <LCD_Clear>
	 if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8005b8a:	4b4a      	ldr	r3, [pc, #296]	; (8005cb4 <drawSystemInfoMenu+0x154>)
 8005b8c:	781a      	ldrb	r2, [r3, #0]
 8005b8e:	4b49      	ldr	r3, [pc, #292]	; (8005cb4 <drawSystemInfoMenu+0x154>)
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	4013      	ands	r3, r2
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	4b47      	ldr	r3, [pc, #284]	; (8005cb4 <drawSystemInfoMenu+0x154>)
 8005b98:	789b      	ldrb	r3, [r3, #2]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d016      	beq.n	8005bd0 <drawSystemInfoMenu+0x70>
 		  adcValuePointer = getADCValues();
 8005ba2:	f7fd fc9f 	bl	80034e4 <getADCValues>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 		  for(i=0;i<20;i++){
 8005baa:	2300      	movs	r3, #0
 8005bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bae:	e00c      	b.n	8005bca <drawSystemInfoMenu+0x6a>
	  		  displayAdcValues[i]=*adcValuePointer;
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	4940      	ldr	r1, [pc, #256]	; (8005cb8 <drawSystemInfoMenu+0x158>)
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	440b      	add	r3, r1
 8005bbc:	601a      	str	r2, [r3, #0]
	  		  adcValuePointer++;
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 		  for(i=0;i<20;i++){
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bcc:	2b13      	cmp	r3, #19
 8005bce:	ddef      	ble.n	8005bb0 <drawSystemInfoMenu+0x50>
 		  }
	 }
	LCD_PixelMode = LCD_PSET;
 8005bd0:	4b3a      	ldr	r3, [pc, #232]	; (8005cbc <drawSystemInfoMenu+0x15c>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8005bd6:	4b3a      	ldr	r3, [pc, #232]	; (8005cc0 <drawSystemInfoMenu+0x160>)
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	4b39      	ldr	r3, [pc, #228]	; (8005cc4 <drawSystemInfoMenu+0x164>)
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2100      	movs	r1, #0
 8005be8:	2000      	movs	r0, #0
 8005bea:	f7fb f911 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8005bee:	4b34      	ldr	r3, [pc, #208]	; (8005cc0 <drawSystemInfoMenu+0x160>)
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	3b03      	subs	r3, #3
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	4b33      	ldr	r3, [pc, #204]	; (8005cc4 <drawSystemInfoMenu+0x164>)
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	3b03      	subs	r3, #3
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2102      	movs	r1, #2
 8005c00:	2002      	movs	r0, #2
 8005c02:	f7fb f905 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8005c06:	230a      	movs	r3, #10
 8005c08:	62fb      	str	r3, [r7, #44]	; 0x2c
	j  = 10;
 8005c0a:	230a      	movs	r3, #10
 8005c0c:	60fb      	str	r3, [r7, #12]
	i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	b298      	uxth	r0, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	b299      	uxth	r1, r3
 8005c16:	4b2c      	ldr	r3, [pc, #176]	; (8005cc8 <drawSystemInfoMenu+0x168>)
 8005c18:	4a2c      	ldr	r2, [pc, #176]	; (8005ccc <drawSystemInfoMenu+0x16c>)
 8005c1a:	f7fb fc87 	bl	800152c <LCD_PutStr>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	461a      	mov	r2, r3
 8005c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c24:	4413      	add	r3, r2
 8005c26:	62fb      	str	r3, [r7, #44]	; 0x2c
	i += LCD_PutStr(i, j, "So many!", fnt7x10);
 8005c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2a:	b298      	uxth	r0, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	b299      	uxth	r1, r3
 8005c30:	4b25      	ldr	r3, [pc, #148]	; (8005cc8 <drawSystemInfoMenu+0x168>)
 8005c32:	4a27      	ldr	r2, [pc, #156]	; (8005cd0 <drawSystemInfoMenu+0x170>)
 8005c34:	f7fb fc7a 	bl	800152c <LCD_PutStr>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3e:	4413      	add	r3, r2
 8005c40:	62fb      	str	r3, [r7, #44]	; 0x2c
	i+=170;
 8005c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c44:	33aa      	adds	r3, #170	; 0xaa
 8005c46:	62fb      	str	r3, [r7, #44]	; 0x2c
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	b298      	uxth	r0, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	b299      	uxth	r1, r3
 8005c50:	4b1d      	ldr	r3, [pc, #116]	; (8005cc8 <drawSystemInfoMenu+0x168>)
 8005c52:	4a20      	ldr	r2, [pc, #128]	; (8005cd4 <drawSystemInfoMenu+0x174>)
 8005c54:	f7fb fc6a 	bl	800152c <LCD_PutStr>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5e:	4413      	add	r3, r2
 8005c60:	62fb      	str	r3, [r7, #44]	; 0x2c
	i += LCD_PutStr(i, j, "QED", fnt7x10);
 8005c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c64:	b298      	uxth	r0, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	b299      	uxth	r1, r3
 8005c6a:	4b17      	ldr	r3, [pc, #92]	; (8005cc8 <drawSystemInfoMenu+0x168>)
 8005c6c:	4a1a      	ldr	r2, [pc, #104]	; (8005cd8 <drawSystemInfoMenu+0x178>)
 8005c6e:	f7fb fc5d 	bl	800152c <LCD_PutStr>
 8005c72:	4603      	mov	r3, r0
 8005c74:	461a      	mov	r2, r3
 8005c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c78:	4413      	add	r3, r2
 8005c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	i  = 135;
 8005c7c:	2387      	movs	r3, #135	; 0x87
 8005c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	j += 12;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	330c      	adds	r3, #12
 8005c84:	60fb      	str	r3, [r7, #12]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	b299      	uxth	r1, r3
 8005c8a:	4b0d      	ldr	r3, [pc, #52]	; (8005cc0 <drawSystemInfoMenu+0x160>)
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	3b02      	subs	r3, #2
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	3303      	adds	r3, #3
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2002      	movs	r0, #2
 8005c9c:	f7fb f8fa 	bl	8000e94 <LCD_FillRect>
	switch(indicator){
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d01a      	beq.n	8005cdc <drawSystemInfoMenu+0x17c>
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	f000 812e 	beq.w	8005f08 <drawSystemInfoMenu+0x3a8>
 8005cac:	e261      	b.n	8006172 <drawSystemInfoMenu+0x612>
 8005cae:	bf00      	nop
 8005cb0:	200032d0 	.word	0x200032d0
 8005cb4:	20010ab0 	.word	0x20010ab0
 8005cb8:	2002407c 	.word	0x2002407c
 8005cbc:	20010338 	.word	0x20010338
 8005cc0:	2001033a 	.word	0x2001033a
 8005cc4:	2001033c 	.word	0x2001033c
 8005cc8:	080152b0 	.word	0x080152b0
 8005ccc:	08014d08 	.word	0x08014d08
 8005cd0:	08014d10 	.word	0x08014d10
 8005cd4:	08014d1c 	.word	0x08014d1c
 8005cd8:	08014d24 	.word	0x08014d24
	case 1:{
		//i=35;
		//j=90;
		//LCD_FillRect(2, j - 2, scr_width-2, j + 2);

		j=45;
 8005cdc:	232d      	movs	r3, #45	; 0x2d
 8005cde:	60fb      	str	r3, [r7, #12]
		i=42;
 8005ce0:	232a      	movs	r3, #42	; 0x2a
 8005ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "FFU Version:", fnt7x10);
 8005ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce6:	b298      	uxth	r0, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	b299      	uxth	r1, r3
 8005cec:	4b77      	ldr	r3, [pc, #476]	; (8005ecc <drawSystemInfoMenu+0x36c>)
 8005cee:	4a78      	ldr	r2, [pc, #480]	; (8005ed0 <drawSystemInfoMenu+0x370>)
 8005cf0:	f7fb fc1c 	bl	800152c <LCD_PutStr>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	4413      	add	r3, r2
 8005cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Unknown", fnt7x10);
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	b298      	uxth	r0, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	b299      	uxth	r1, r3
 8005d06:	4b71      	ldr	r3, [pc, #452]	; (8005ecc <drawSystemInfoMenu+0x36c>)
 8005d08:	4a72      	ldr	r2, [pc, #456]	; (8005ed4 <drawSystemInfoMenu+0x374>)
 8005d0a:	f7fb fc0f 	bl	800152c <LCD_PutStr>

		j+=15;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	330f      	adds	r3, #15
 8005d12:	60fb      	str	r3, [r7, #12]
		i=42;
 8005d14:	232a      	movs	r3, #42	; 0x2a
 8005d16:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "UI Firmware Version: ", fnt7x10);
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1a:	b298      	uxth	r0, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	b299      	uxth	r1, r3
 8005d20:	4b6a      	ldr	r3, [pc, #424]	; (8005ecc <drawSystemInfoMenu+0x36c>)
 8005d22:	4a6d      	ldr	r2, [pc, #436]	; (8005ed8 <drawSystemInfoMenu+0x378>)
 8005d24:	f7fb fc02 	bl	800152c <LCD_PutStr>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	4413      	add	r3, r2
 8005d30:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "V0.0.1", fnt7x10);
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	b298      	uxth	r0, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	b299      	uxth	r1, r3
 8005d3a:	4b64      	ldr	r3, [pc, #400]	; (8005ecc <drawSystemInfoMenu+0x36c>)
 8005d3c:	4a67      	ldr	r2, [pc, #412]	; (8005edc <drawSystemInfoMenu+0x37c>)
 8005d3e:	f7fb fbf5 	bl	800152c <LCD_PutStr>

		j+=30;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	331e      	adds	r3, #30
 8005d46:	60fb      	str	r3, [r7, #12]
		i=10;
 8005d48:	230a      	movs	r3, #10
 8005d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Project:", fnt7x10);
 8005d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4e:	b298      	uxth	r0, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	b299      	uxth	r1, r3
 8005d54:	4b5d      	ldr	r3, [pc, #372]	; (8005ecc <drawSystemInfoMenu+0x36c>)
 8005d56:	4a62      	ldr	r2, [pc, #392]	; (8005ee0 <drawSystemInfoMenu+0x380>)
 8005d58:	f7fb fbe8 	bl	800152c <LCD_PutStr>

		j+=15;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	330f      	adds	r3, #15
 8005d60:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Unknown", fnt7x10);
 8005d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d68:	b298      	uxth	r0, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	b299      	uxth	r1, r3
 8005d6e:	4b57      	ldr	r3, [pc, #348]	; (8005ecc <drawSystemInfoMenu+0x36c>)
 8005d70:	4a58      	ldr	r2, [pc, #352]	; (8005ed4 <drawSystemInfoMenu+0x374>)
 8005d72:	f7fb fbdb 	bl	800152c <LCD_PutStr>

		j+=15;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	330f      	adds	r3, #15
 8005d7a:	60fb      	str	r3, [r7, #12]
		i=10;
 8005d7c:	230a      	movs	r3, #10
 8005d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "Board Versions: ", fnt7x10);
 8005d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d82:	b298      	uxth	r0, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	b299      	uxth	r1, r3
 8005d88:	4b50      	ldr	r3, [pc, #320]	; (8005ecc <drawSystemInfoMenu+0x36c>)
 8005d8a:	4a56      	ldr	r2, [pc, #344]	; (8005ee4 <drawSystemInfoMenu+0x384>)
 8005d8c:	f7fb fbce 	bl	800152c <LCD_PutStr>
 8005d90:	4603      	mov	r3, r0
 8005d92:	461a      	mov	r2, r3
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	4413      	add	r3, r2
 8005d98:	62fb      	str	r3, [r7, #44]	; 0x2c
		i=otherBoardAlignment;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Other Boards: ", fnt7x10);
 8005d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da0:	b298      	uxth	r0, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	b299      	uxth	r1, r3
 8005da6:	4b49      	ldr	r3, [pc, #292]	; (8005ecc <drawSystemInfoMenu+0x36c>)
 8005da8:	4a4f      	ldr	r2, [pc, #316]	; (8005ee8 <drawSystemInfoMenu+0x388>)
 8005daa:	f7fb fbbf 	bl	800152c <LCD_PutStr>

		j+=15;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	330f      	adds	r3, #15
 8005db2:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	b298      	uxth	r0, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	b299      	uxth	r1, r3
 8005dc0:	4b42      	ldr	r3, [pc, #264]	; (8005ecc <drawSystemInfoMenu+0x36c>)
 8005dc2:	4a4a      	ldr	r2, [pc, #296]	; (8005eec <drawSystemInfoMenu+0x38c>)
 8005dc4:	f7fb fbb2 	bl	800152c <LCD_PutStr>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dce:	4413      	add	r3, r2
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Trident Fab A", fnt7x10);
 8005dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd4:	b298      	uxth	r0, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	b299      	uxth	r1, r3
 8005dda:	4b3c      	ldr	r3, [pc, #240]	; (8005ecc <drawSystemInfoMenu+0x36c>)
 8005ddc:	4a44      	ldr	r2, [pc, #272]	; (8005ef0 <drawSystemInfoMenu+0x390>)
 8005dde:	f7fb fba5 	bl	800152c <LCD_PutStr>
		i=otherBoardAlignment+indentAlignment;
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	4413      	add	r3, r2
 8005de8:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8005dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dec:	b298      	uxth	r0, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	b299      	uxth	r1, r3
 8005df2:	4b36      	ldr	r3, [pc, #216]	; (8005ecc <drawSystemInfoMenu+0x36c>)
 8005df4:	4a3f      	ldr	r2, [pc, #252]	; (8005ef4 <drawSystemInfoMenu+0x394>)
 8005df6:	f7fb fb99 	bl	800152c <LCD_PutStr>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	4413      	add	r3, r2
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Not Here", fnt7x10);
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e06:	b298      	uxth	r0, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	b299      	uxth	r1, r3
 8005e0c:	4b2f      	ldr	r3, [pc, #188]	; (8005ecc <drawSystemInfoMenu+0x36c>)
 8005e0e:	4a3a      	ldr	r2, [pc, #232]	; (8005ef8 <drawSystemInfoMenu+0x398>)
 8005e10:	f7fb fb8c 	bl	800152c <LCD_PutStr>

		j+=15;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	330f      	adds	r3, #15
 8005e18:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 8005e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e20:	b298      	uxth	r0, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	b299      	uxth	r1, r3
 8005e26:	4b29      	ldr	r3, [pc, #164]	; (8005ecc <drawSystemInfoMenu+0x36c>)
 8005e28:	4a34      	ldr	r2, [pc, #208]	; (8005efc <drawSystemInfoMenu+0x39c>)
 8005e2a:	f7fb fb7f 	bl	800152c <LCD_PutStr>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	461a      	mov	r2, r3
 8005e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e34:	4413      	add	r3, r2
 8005e36:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Let's say it was Atlas", fnt7x10);
 8005e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3a:	b298      	uxth	r0, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	b299      	uxth	r1, r3
 8005e40:	4b22      	ldr	r3, [pc, #136]	; (8005ecc <drawSystemInfoMenu+0x36c>)
 8005e42:	4a2f      	ldr	r2, [pc, #188]	; (8005f00 <drawSystemInfoMenu+0x3a0>)
 8005e44:	f7fb fb72 	bl	800152c <LCD_PutStr>

		j+=15;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	330f      	adds	r3, #15
 8005e4c:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "DISPLAY: ", fnt7x10);
 8005e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e54:	b298      	uxth	r0, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	b299      	uxth	r1, r3
 8005e5a:	4b1c      	ldr	r3, [pc, #112]	; (8005ecc <drawSystemInfoMenu+0x36c>)
 8005e5c:	4a29      	ldr	r2, [pc, #164]	; (8005f04 <drawSystemInfoMenu+0x3a4>)
 8005e5e:	f7fb fb65 	bl	800152c <LCD_PutStr>
 8005e62:	4603      	mov	r3, r0
 8005e64:	461a      	mov	r2, r3
 8005e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e68:	4413      	add	r3, r2
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Let's say it was Atlas", fnt7x10);
 8005e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6e:	b298      	uxth	r0, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	b299      	uxth	r1, r3
 8005e74:	4b15      	ldr	r3, [pc, #84]	; (8005ecc <drawSystemInfoMenu+0x36c>)
 8005e76:	4a22      	ldr	r2, [pc, #136]	; (8005f00 <drawSystemInfoMenu+0x3a0>)
 8005e78:	f7fb fb58 	bl	800152c <LCD_PutStr>

		i=200;
 8005e7c:	23c8      	movs	r3, #200	; 0xc8
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
		j=220;
 8005e80:	23dc      	movs	r3, #220	; 0xdc
 8005e82:	60fb      	str	r3, [r7, #12]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	b298      	uxth	r0, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	b299      	uxth	r1, r3
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f7fb fc9a 	bl	80017cc <drawUpDownArrow>
		i=180;
 8005e98:	23b4      	movs	r3, #180	; 0xb4
 8005e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9e:	b298      	uxth	r0, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	b299      	uxth	r1, r3
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	f7fb fc8e 	bl	80017cc <drawUpDownArrow>
		i=220;
 8005eb0:	23dc      	movs	r3, #220	; 0xdc
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	b298      	uxth	r0, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	b299      	uxth	r1, r3
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	f7fb fc82 	bl	80017cc <drawUpDownArrow>
		break;
 8005ec8:	e153      	b.n	8006172 <drawSystemInfoMenu+0x612>
 8005eca:	bf00      	nop
 8005ecc:	080152b0 	.word	0x080152b0
 8005ed0:	0801503c 	.word	0x0801503c
 8005ed4:	0801504c 	.word	0x0801504c
 8005ed8:	08015054 	.word	0x08015054
 8005edc:	0801506c 	.word	0x0801506c
 8005ee0:	08015074 	.word	0x08015074
 8005ee4:	08015080 	.word	0x08015080
 8005ee8:	08015094 	.word	0x08015094
 8005eec:	08014de4 	.word	0x08014de4
 8005ef0:	080150a4 	.word	0x080150a4
 8005ef4:	080150b4 	.word	0x080150b4
 8005ef8:	080150bc 	.word	0x080150bc
 8005efc:	08014df8 	.word	0x08014df8
 8005f00:	080150c8 	.word	0x080150c8
 8005f04:	080150e0 	.word	0x080150e0
	}
	case 2:{
		j=45;
 8005f08:	232d      	movs	r3, #45	; 0x2d
 8005f0a:	60fb      	str	r3, [r7, #12]
		i=10;
 8005f0c:	230a      	movs	r3, #10
 8005f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "DEV UI BANK VOLTAGES:", fnt7x10);
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	b298      	uxth	r0, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	b299      	uxth	r1, r3
 8005f18:	4b99      	ldr	r3, [pc, #612]	; (8006180 <drawSystemInfoMenu+0x620>)
 8005f1a:	4a9a      	ldr	r2, [pc, #616]	; (8006184 <drawSystemInfoMenu+0x624>)
 8005f1c:	f7fb fb06 	bl	800152c <LCD_PutStr>

		j+=25;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3319      	adds	r3, #25
 8005f24:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SPARE UART: ", fnt7x10);
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	b298      	uxth	r0, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	b299      	uxth	r1, r3
 8005f32:	4b93      	ldr	r3, [pc, #588]	; (8006180 <drawSystemInfoMenu+0x620>)
 8005f34:	4a94      	ldr	r2, [pc, #592]	; (8006188 <drawSystemInfoMenu+0x628>)
 8005f36:	f7fb faf9 	bl	800152c <LCD_PutStr>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f40:	4413      	add	r3, r2
 8005f42:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.spareUartADC];
 8005f44:	4b91      	ldr	r3, [pc, #580]	; (800618c <drawSystemInfoMenu+0x62c>)
 8005f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f48:	4a91      	ldr	r2, [pc, #580]	; (8006190 <drawSystemInfoMenu+0x630>)
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	edd3 7a00 	vldr	s15, [r3]
 8005f52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005f56:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005f5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005f5e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005f62:	ee17 3a90 	vmov	r3, s15
 8005f66:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8005f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6a:	b298      	uxth	r0, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	b299      	uxth	r1, r3
 8005f70:	4b83      	ldr	r3, [pc, #524]	; (8006180 <drawSystemInfoMenu+0x620>)
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	2301      	movs	r3, #1
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	f7fb fb76 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3319      	adds	r3, #25
 8005f80:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SPARE I2C: ", fnt7x10);
 8005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f88:	b298      	uxth	r0, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	b299      	uxth	r1, r3
 8005f8e:	4b7c      	ldr	r3, [pc, #496]	; (8006180 <drawSystemInfoMenu+0x620>)
 8005f90:	4a80      	ldr	r2, [pc, #512]	; (8006194 <drawSystemInfoMenu+0x634>)
 8005f92:	f7fb facb 	bl	800152c <LCD_PutStr>
 8005f96:	4603      	mov	r3, r0
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	4413      	add	r3, r2
 8005f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.spareI2cADC];
 8005fa0:	4b7a      	ldr	r3, [pc, #488]	; (800618c <drawSystemInfoMenu+0x62c>)
 8005fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa4:	4a7a      	ldr	r2, [pc, #488]	; (8006190 <drawSystemInfoMenu+0x630>)
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	edd3 7a00 	vldr	s15, [r3]
 8005fae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005fb2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005fb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005fba:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005fbe:	ee17 3a90 	vmov	r3, s15
 8005fc2:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	b298      	uxth	r0, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	b299      	uxth	r1, r3
 8005fcc:	4b6c      	ldr	r3, [pc, #432]	; (8006180 <drawSystemInfoMenu+0x620>)
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	f7fb fb48 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	3319      	adds	r3, #25
 8005fdc:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SPARE SPI: ", fnt7x10);
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe4:	b298      	uxth	r0, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	b299      	uxth	r1, r3
 8005fea:	4b65      	ldr	r3, [pc, #404]	; (8006180 <drawSystemInfoMenu+0x620>)
 8005fec:	4a6a      	ldr	r2, [pc, #424]	; (8006198 <drawSystemInfoMenu+0x638>)
 8005fee:	f7fb fa9d 	bl	800152c <LCD_PutStr>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	4413      	add	r3, r2
 8005ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.spareSpiADC];
 8005ffc:	4b63      	ldr	r3, [pc, #396]	; (800618c <drawSystemInfoMenu+0x62c>)
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	4a63      	ldr	r2, [pc, #396]	; (8006190 <drawSystemInfoMenu+0x630>)
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	edd3 7a00 	vldr	s15, [r3]
 800600a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800600e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006012:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006016:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800601a:	ee17 3a90 	vmov	r3, s15
 800601e:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8006020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006022:	b298      	uxth	r0, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	b299      	uxth	r1, r3
 8006028:	4b55      	ldr	r3, [pc, #340]	; (8006180 <drawSystemInfoMenu+0x620>)
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	2301      	movs	r3, #1
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	f7fb fb1a 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3319      	adds	r3, #25
 8006038:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "CONFIG: ", fnt7x10);
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	b298      	uxth	r0, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	b299      	uxth	r1, r3
 8006046:	4b4e      	ldr	r3, [pc, #312]	; (8006180 <drawSystemInfoMenu+0x620>)
 8006048:	4a54      	ldr	r2, [pc, #336]	; (800619c <drawSystemInfoMenu+0x63c>)
 800604a:	f7fb fa6f 	bl	800152c <LCD_PutStr>
 800604e:	4603      	mov	r3, r0
 8006050:	461a      	mov	r2, r3
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	4413      	add	r3, r2
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.configADC];
 8006058:	4b4c      	ldr	r3, [pc, #304]	; (800618c <drawSystemInfoMenu+0x62c>)
 800605a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800605c:	4a4c      	ldr	r2, [pc, #304]	; (8006190 <drawSystemInfoMenu+0x630>)
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	edd3 7a00 	vldr	s15, [r3]
 8006066:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800606a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800606e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006072:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006076:	ee17 3a90 	vmov	r3, s15
 800607a:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 800607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607e:	b298      	uxth	r0, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	b299      	uxth	r1, r3
 8006084:	4b3e      	ldr	r3, [pc, #248]	; (8006180 <drawSystemInfoMenu+0x620>)
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	2301      	movs	r3, #1
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	f7fb faec 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3319      	adds	r3, #25
 8006094:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 800609a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609c:	b298      	uxth	r0, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	b299      	uxth	r1, r3
 80060a2:	4b37      	ldr	r3, [pc, #220]	; (8006180 <drawSystemInfoMenu+0x620>)
 80060a4:	4a3e      	ldr	r2, [pc, #248]	; (80061a0 <drawSystemInfoMenu+0x640>)
 80060a6:	f7fb fa41 	bl	800152c <LCD_PutStr>
 80060aa:	4603      	mov	r3, r0
 80060ac:	461a      	mov	r2, r3
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	4413      	add	r3, r2
 80060b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.zionADC];
 80060b4:	4b35      	ldr	r3, [pc, #212]	; (800618c <drawSystemInfoMenu+0x62c>)
 80060b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b8:	4a35      	ldr	r2, [pc, #212]	; (8006190 <drawSystemInfoMenu+0x630>)
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	edd3 7a00 	vldr	s15, [r3]
 80060c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80060c6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80060ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80060ce:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80060d2:	ee17 3a90 	vmov	r3, s15
 80060d6:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10) + adjacentSpacing;
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	b298      	uxth	r0, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	b299      	uxth	r1, r3
 80060e0:	4b27      	ldr	r3, [pc, #156]	; (8006180 <drawSystemInfoMenu+0x620>)
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	2301      	movs	r3, #1
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	f7fb fabe 	bl	8001668 <LCD_PutIntF>
 80060ec:	4603      	mov	r3, r0
 80060ee:	461a      	mov	r2, r3
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	4413      	add	r3, r2
 80060f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f6:	4413      	add	r3, r2
 80060f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "Zion Switch: ", fnt7x10);
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	b298      	uxth	r0, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	b299      	uxth	r1, r3
 8006102:	4b1f      	ldr	r3, [pc, #124]	; (8006180 <drawSystemInfoMenu+0x620>)
 8006104:	4a27      	ldr	r2, [pc, #156]	; (80061a4 <drawSystemInfoMenu+0x644>)
 8006106:	f7fb fa11 	bl	800152c <LCD_PutStr>
 800610a:	4603      	mov	r3, r0
 800610c:	461a      	mov	r2, r3
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	4413      	add	r3, r2
 8006112:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "INACTIVE", fnt7x10);
 8006114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006116:	b298      	uxth	r0, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	b299      	uxth	r1, r3
 800611c:	4b18      	ldr	r3, [pc, #96]	; (8006180 <drawSystemInfoMenu+0x620>)
 800611e:	4a22      	ldr	r2, [pc, #136]	; (80061a8 <drawSystemInfoMenu+0x648>)
 8006120:	f7fb fa04 	bl	800152c <LCD_PutStr>



		i=200;
 8006124:	23c8      	movs	r3, #200	; 0xc8
 8006126:	62fb      	str	r3, [r7, #44]	; 0x2c
		j=15;
 8006128:	230f      	movs	r3, #15
 800612a:	60fb      	str	r3, [r7, #12]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612e:	b298      	uxth	r0, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	b299      	uxth	r1, r3
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	b29a      	uxth	r2, r3
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f7fb fb46 	bl	80017cc <drawUpDownArrow>
		i=180;
 8006140:	23b4      	movs	r3, #180	; 0xb4
 8006142:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006146:	b298      	uxth	r0, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	b299      	uxth	r1, r3
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	b29a      	uxth	r2, r3
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	b29b      	uxth	r3, r3
 8006154:	f7fb fb3a 	bl	80017cc <drawUpDownArrow>
		i=220;
 8006158:	23dc      	movs	r3, #220	; 0xdc
 800615a:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615e:	b298      	uxth	r0, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	b299      	uxth	r1, r3
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	b29a      	uxth	r2, r3
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f7fb fb2e 	bl	80017cc <drawUpDownArrow>

		break;
 8006170:	bf00      	nop
	}
	}
	SMLCD_Flush();
 8006172:	f7fa fab1 	bl	80006d8 <SMLCD_Flush>
}
 8006176:	bf00      	nop
 8006178:	3730      	adds	r7, #48	; 0x30
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	080152b0 	.word	0x080152b0
 8006184:	080150ec 	.word	0x080150ec
 8006188:	08015104 	.word	0x08015104
 800618c:	20000118 	.word	0x20000118
 8006190:	2002407c 	.word	0x2002407c
 8006194:	08015114 	.word	0x08015114
 8006198:	08015120 	.word	0x08015120
 800619c:	0801512c 	.word	0x0801512c
 80061a0:	080150b4 	.word	0x080150b4
 80061a4:	08015138 	.word	0x08015138
 80061a8:	08015148 	.word	0x08015148

080061ac <drawBootMenu>:

void drawBootMenu(int indicator, uint8_t button, int menu){
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	460b      	mov	r3, r1
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	72fb      	strb	r3, [r7, #11]
	int i,j;
		int adjacentSpacing = 20;
 80061ba:	2314      	movs	r3, #20
 80061bc:	61bb      	str	r3, [r7, #24]
		int indentAlignment=50;
 80061be:	2332      	movs	r3, #50	; 0x32
 80061c0:	617b      	str	r3, [r7, #20]


		LCD_Clear();
 80061c2:	f7fa fbd3 	bl	800096c <LCD_Clear>
		LCD_PixelMode = LCD_PSET;
 80061c6:	4b94      	ldr	r3, [pc, #592]	; (8006418 <drawBootMenu+0x26c>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	701a      	strb	r2, [r3, #0]

		LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 80061cc:	4b93      	ldr	r3, [pc, #588]	; (800641c <drawBootMenu+0x270>)
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	4b92      	ldr	r3, [pc, #584]	; (8006420 <drawBootMenu+0x274>)
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29b      	uxth	r3, r3
 80061dc:	2100      	movs	r1, #0
 80061de:	2000      	movs	r0, #0
 80061e0:	f7fa fe16 	bl	8000e10 <LCD_Rect>
		LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 80061e4:	4b8d      	ldr	r3, [pc, #564]	; (800641c <drawBootMenu+0x270>)
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	3b03      	subs	r3, #3
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	4b8c      	ldr	r3, [pc, #560]	; (8006420 <drawBootMenu+0x274>)
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	3b03      	subs	r3, #3
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2102      	movs	r1, #2
 80061f6:	2002      	movs	r0, #2
 80061f8:	f7fa fe0a 	bl	8000e10 <LCD_Rect>

		// RTC :)
		i  = 10;
 80061fc:	230a      	movs	r3, #10
 80061fe:	613b      	str	r3, [r7, #16]
		j  = 10;
 8006200:	230a      	movs	r3, #10
 8006202:	61fb      	str	r3, [r7, #28]
		i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	b298      	uxth	r0, r3
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	b299      	uxth	r1, r3
 800620c:	4b85      	ldr	r3, [pc, #532]	; (8006424 <drawBootMenu+0x278>)
 800620e:	4a86      	ldr	r2, [pc, #536]	; (8006428 <drawBootMenu+0x27c>)
 8006210:	f7fb f98c 	bl	800152c <LCD_PutStr>
 8006214:	4603      	mov	r3, r0
 8006216:	461a      	mov	r2, r3
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4413      	add	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
		i += LCD_PutStr(i, j, "So many!", fnt7x10);
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	b298      	uxth	r0, r3
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	b299      	uxth	r1, r3
 8006226:	4b7f      	ldr	r3, [pc, #508]	; (8006424 <drawBootMenu+0x278>)
 8006228:	4a80      	ldr	r2, [pc, #512]	; (800642c <drawBootMenu+0x280>)
 800622a:	f7fb f97f 	bl	800152c <LCD_PutStr>
 800622e:	4603      	mov	r3, r0
 8006230:	461a      	mov	r2, r3
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	4413      	add	r3, r2
 8006236:	613b      	str	r3, [r7, #16]
		i+=170;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	33aa      	adds	r3, #170	; 0xaa
 800623c:	613b      	str	r3, [r7, #16]
		i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	b298      	uxth	r0, r3
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	b299      	uxth	r1, r3
 8006246:	4b77      	ldr	r3, [pc, #476]	; (8006424 <drawBootMenu+0x278>)
 8006248:	4a79      	ldr	r2, [pc, #484]	; (8006430 <drawBootMenu+0x284>)
 800624a:	f7fb f96f 	bl	800152c <LCD_PutStr>
 800624e:	4603      	mov	r3, r0
 8006250:	461a      	mov	r2, r3
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	4413      	add	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
		i += LCD_PutStr(i, j, "QED", fnt7x10);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	b298      	uxth	r0, r3
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	b299      	uxth	r1, r3
 8006260:	4b70      	ldr	r3, [pc, #448]	; (8006424 <drawBootMenu+0x278>)
 8006262:	4a74      	ldr	r2, [pc, #464]	; (8006434 <drawBootMenu+0x288>)
 8006264:	f7fb f962 	bl	800152c <LCD_PutStr>
 8006268:	4603      	mov	r3, r0
 800626a:	461a      	mov	r2, r3
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	4413      	add	r3, r2
 8006270:	613b      	str	r3, [r7, #16]
		i  = 135;
 8006272:	2387      	movs	r3, #135	; 0x87
 8006274:	613b      	str	r3, [r7, #16]
		j += 12;
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	330c      	adds	r3, #12
 800627a:	61fb      	str	r3, [r7, #28]

		//horizontal divider
		LCD_FillRect(2, j, scr_width - 2, j + 3);
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	b299      	uxth	r1, r3
 8006280:	4b66      	ldr	r3, [pc, #408]	; (800641c <drawBootMenu+0x270>)
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	3b02      	subs	r3, #2
 8006286:	b29a      	uxth	r2, r3
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	b29b      	uxth	r3, r3
 800628c:	3303      	adds	r3, #3
 800628e:	b29b      	uxth	r3, r3
 8006290:	2002      	movs	r0, #2
 8006292:	f7fa fdff 	bl	8000e94 <LCD_FillRect>

		j=45;
 8006296:	232d      	movs	r3, #45	; 0x2d
 8006298:	61fb      	str	r3, [r7, #28]
		i=42;
 800629a:	232a      	movs	r3, #42	; 0x2a
 800629c:	613b      	str	r3, [r7, #16]
		LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	b298      	uxth	r0, r3
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	b299      	uxth	r1, r3
 80062a6:	4b5f      	ldr	r3, [pc, #380]	; (8006424 <drawBootMenu+0x278>)
 80062a8:	4a63      	ldr	r2, [pc, #396]	; (8006438 <drawBootMenu+0x28c>)
 80062aa:	f7fb f93f 	bl	800152c <LCD_PutStr>
		j+=20;
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	3314      	adds	r3, #20
 80062b2:	61fb      	str	r3, [r7, #28]
		i=indentAlignment;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	613b      	str	r3, [r7, #16]
		LCD_PutStr(i, j, "STANDARD", fnt7x10);
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	b298      	uxth	r0, r3
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	b299      	uxth	r1, r3
 80062c0:	4b58      	ldr	r3, [pc, #352]	; (8006424 <drawBootMenu+0x278>)
 80062c2:	4a5e      	ldr	r2, [pc, #376]	; (800643c <drawBootMenu+0x290>)
 80062c4:	f7fb f932 	bl	800152c <LCD_PutStr>
		j+=20;
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	3314      	adds	r3, #20
 80062cc:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "EMERGENCY DOWNLOAD", fnt7x10);
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	b298      	uxth	r0, r3
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	b299      	uxth	r1, r3
 80062d6:	4b53      	ldr	r3, [pc, #332]	; (8006424 <drawBootMenu+0x278>)
 80062d8:	4a59      	ldr	r2, [pc, #356]	; (8006440 <drawBootMenu+0x294>)
 80062da:	f7fb f927 	bl	800152c <LCD_PutStr>
		j+=20;
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	3314      	adds	r3, #20
 80062e2:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "RECOVERY", fnt7x10);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	b298      	uxth	r0, r3
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	b299      	uxth	r1, r3
 80062ec:	4b4d      	ldr	r3, [pc, #308]	; (8006424 <drawBootMenu+0x278>)
 80062ee:	4a55      	ldr	r2, [pc, #340]	; (8006444 <drawBootMenu+0x298>)
 80062f0:	f7fb f91c 	bl	800152c <LCD_PutStr>
		j+=20;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	3314      	adds	r3, #20
 80062f8:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "MASS STORAGE", fnt7x10);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	b298      	uxth	r0, r3
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	b299      	uxth	r1, r3
 8006302:	4b48      	ldr	r3, [pc, #288]	; (8006424 <drawBootMenu+0x278>)
 8006304:	4a50      	ldr	r2, [pc, #320]	; (8006448 <drawBootMenu+0x29c>)
 8006306:	f7fb f911 	bl	800152c <LCD_PutStr>
		j+=20;
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	3314      	adds	r3, #20
 800630e:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "UEFI", fnt7x10);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	b298      	uxth	r0, r3
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	b299      	uxth	r1, r3
 8006318:	4b42      	ldr	r3, [pc, #264]	; (8006424 <drawBootMenu+0x278>)
 800631a:	4a4c      	ldr	r2, [pc, #304]	; (800644c <drawBootMenu+0x2a0>)
 800631c:	f7fb f906 	bl	800152c <LCD_PutStr>
		i-= 17;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	3b11      	subs	r3, #17
 8006324:	613b      	str	r3, [r7, #16]
		switch(indicator){
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	3b01      	subs	r3, #1
 800632a:	2b04      	cmp	r3, #4
 800632c:	f200 80d4 	bhi.w	80064d8 <drawBootMenu+0x32c>
 8006330:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <drawBootMenu+0x18c>)
 8006332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006336:	bf00      	nop
 8006338:	0800634d 	.word	0x0800634d
 800633c:	08006391 	.word	0x08006391
 8006340:	080063d5 	.word	0x080063d5
 8006344:	08006455 	.word	0x08006455
 8006348:	08006497 	.word	0x08006497
		case FIRST:
		{
			j=65;
 800634c:	2341      	movs	r3, #65	; 0x41
 800634e:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 8006350:	7afb      	ldrb	r3, [r7, #11]
 8006352:	2b04      	cmp	r3, #4
 8006354:	bf0c      	ite	eq
 8006356:	2301      	moveq	r3, #1
 8006358:	2300      	movne	r3, #0
 800635a:	b2da      	uxtb	r2, r3
 800635c:	4b3c      	ldr	r3, [pc, #240]	; (8006450 <drawBootMenu+0x2a4>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	4299      	cmp	r1, r3
 8006364:	bf0c      	ite	eq
 8006366:	2301      	moveq	r3, #1
 8006368:	2300      	movne	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	4013      	ands	r3, r2
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 80b4 	beq.w	80064de <drawBootMenu+0x332>
				i=140;
 8006376:	238c      	movs	r3, #140	; 0x8c
 8006378:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	b298      	uxth	r0, r3
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	b29b      	uxth	r3, r3
 8006382:	3305      	adds	r3, #5
 8006384:	b299      	uxth	r1, r3
 8006386:	2303      	movs	r3, #3
 8006388:	2203      	movs	r2, #3
 800638a:	f7fb fa1f 	bl	80017cc <drawUpDownArrow>
			}
			break;
 800638e:	e0a6      	b.n	80064de <drawBootMenu+0x332>
		}
		case SECOND:
		{
			j=85;
 8006390:	2355      	movs	r3, #85	; 0x55
 8006392:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 8006394:	7afb      	ldrb	r3, [r7, #11]
 8006396:	2b04      	cmp	r3, #4
 8006398:	bf0c      	ite	eq
 800639a:	2301      	moveq	r3, #1
 800639c:	2300      	movne	r3, #0
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	4b2b      	ldr	r3, [pc, #172]	; (8006450 <drawBootMenu+0x2a4>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	4299      	cmp	r1, r3
 80063a8:	bf0c      	ite	eq
 80063aa:	2301      	moveq	r3, #1
 80063ac:	2300      	movne	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	4013      	ands	r3, r2
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8094 	beq.w	80064e2 <drawBootMenu+0x336>
				i=220;
 80063ba:	23dc      	movs	r3, #220	; 0xdc
 80063bc:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	b298      	uxth	r0, r3
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	3305      	adds	r3, #5
 80063c8:	b299      	uxth	r1, r3
 80063ca:	2303      	movs	r3, #3
 80063cc:	2203      	movs	r2, #3
 80063ce:	f7fb f9fd 	bl	80017cc <drawUpDownArrow>
			}
			break;
 80063d2:	e086      	b.n	80064e2 <drawBootMenu+0x336>
		}
		case THIRD:
		{
			j=105;
 80063d4:	2369      	movs	r3, #105	; 0x69
 80063d6:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 80063d8:	7afb      	ldrb	r3, [r7, #11]
 80063da:	2b04      	cmp	r3, #4
 80063dc:	bf0c      	ite	eq
 80063de:	2301      	moveq	r3, #1
 80063e0:	2300      	movne	r3, #0
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	4b1a      	ldr	r3, [pc, #104]	; (8006450 <drawBootMenu+0x2a4>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	4299      	cmp	r1, r3
 80063ec:	bf0c      	ite	eq
 80063ee:	2301      	moveq	r3, #1
 80063f0:	2300      	movne	r3, #0
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	4013      	ands	r3, r2
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d074      	beq.n	80064e6 <drawBootMenu+0x33a>
				i=130;
 80063fc:	2382      	movs	r3, #130	; 0x82
 80063fe:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	b298      	uxth	r0, r3
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	b29b      	uxth	r3, r3
 8006408:	3305      	adds	r3, #5
 800640a:	b299      	uxth	r1, r3
 800640c:	2303      	movs	r3, #3
 800640e:	2203      	movs	r2, #3
 8006410:	f7fb f9dc 	bl	80017cc <drawUpDownArrow>
			}
			break;
 8006414:	e067      	b.n	80064e6 <drawBootMenu+0x33a>
 8006416:	bf00      	nop
 8006418:	20010338 	.word	0x20010338
 800641c:	2001033a 	.word	0x2001033a
 8006420:	2001033c 	.word	0x2001033c
 8006424:	080152b0 	.word	0x080152b0
 8006428:	08014d08 	.word	0x08014d08
 800642c:	08014d10 	.word	0x08014d10
 8006430:	08014d1c 	.word	0x08014d1c
 8006434:	08014d24 	.word	0x08014d24
 8006438:	08015154 	.word	0x08015154
 800643c:	08015170 	.word	0x08015170
 8006440:	0801517c 	.word	0x0801517c
 8006444:	08015190 	.word	0x08015190
 8006448:	0801519c 	.word	0x0801519c
 800644c:	080151ac 	.word	0x080151ac
 8006450:	200032d0 	.word	0x200032d0
		}
		case FOURTH:
		{
			j=125;
 8006454:	237d      	movs	r3, #125	; 0x7d
 8006456:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 8006458:	7afb      	ldrb	r3, [r7, #11]
 800645a:	2b04      	cmp	r3, #4
 800645c:	bf0c      	ite	eq
 800645e:	2301      	moveq	r3, #1
 8006460:	2300      	movne	r3, #0
 8006462:	b2da      	uxtb	r2, r3
 8006464:	4b2f      	ldr	r3, [pc, #188]	; (8006524 <drawBootMenu+0x378>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6879      	ldr	r1, [r7, #4]
 800646a:	4299      	cmp	r1, r3
 800646c:	bf0c      	ite	eq
 800646e:	2301      	moveq	r3, #1
 8006470:	2300      	movne	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	4013      	ands	r3, r2
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d036      	beq.n	80064ea <drawBootMenu+0x33e>
				i=160;
 800647c:	23a0      	movs	r3, #160	; 0xa0
 800647e:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	b298      	uxth	r0, r3
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	b29b      	uxth	r3, r3
 8006488:	3305      	adds	r3, #5
 800648a:	b299      	uxth	r1, r3
 800648c:	2303      	movs	r3, #3
 800648e:	2203      	movs	r2, #3
 8006490:	f7fb f99c 	bl	80017cc <drawUpDownArrow>
			}
			break;
 8006494:	e029      	b.n	80064ea <drawBootMenu+0x33e>
		}
		case FIFTH:
		{
			j=145;
 8006496:	2391      	movs	r3, #145	; 0x91
 8006498:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 800649a:	7afb      	ldrb	r3, [r7, #11]
 800649c:	2b04      	cmp	r3, #4
 800649e:	bf0c      	ite	eq
 80064a0:	2301      	moveq	r3, #1
 80064a2:	2300      	movne	r3, #0
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	4b1f      	ldr	r3, [pc, #124]	; (8006524 <drawBootMenu+0x378>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6879      	ldr	r1, [r7, #4]
 80064ac:	4299      	cmp	r1, r3
 80064ae:	bf0c      	ite	eq
 80064b0:	2301      	moveq	r3, #1
 80064b2:	2300      	movne	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	4013      	ands	r3, r2
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d017      	beq.n	80064ee <drawBootMenu+0x342>
				i=100;
 80064be:	2364      	movs	r3, #100	; 0x64
 80064c0:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	b298      	uxth	r0, r3
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	3305      	adds	r3, #5
 80064cc:	b299      	uxth	r1, r3
 80064ce:	2303      	movs	r3, #3
 80064d0:	2203      	movs	r2, #3
 80064d2:	f7fb f97b 	bl	80017cc <drawUpDownArrow>
			}
			break;
 80064d6:	e00a      	b.n	80064ee <drawBootMenu+0x342>
		}
		default:
		{
			j=75;
 80064d8:	234b      	movs	r3, #75	; 0x4b
 80064da:	61fb      	str	r3, [r7, #28]
			break;
 80064dc:	e008      	b.n	80064f0 <drawBootMenu+0x344>
			break;
 80064de:	bf00      	nop
 80064e0:	e006      	b.n	80064f0 <drawBootMenu+0x344>
			break;
 80064e2:	bf00      	nop
 80064e4:	e004      	b.n	80064f0 <drawBootMenu+0x344>
			break;
 80064e6:	bf00      	nop
 80064e8:	e002      	b.n	80064f0 <drawBootMenu+0x344>
			break;
 80064ea:	bf00      	nop
 80064ec:	e000      	b.n	80064f0 <drawBootMenu+0x344>
			break;
 80064ee:	bf00      	nop
		}
		}
		previousMenu=menu;
 80064f0:	4a0c      	ldr	r2, [pc, #48]	; (8006524 <drawBootMenu+0x378>)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6013      	str	r3, [r2, #0]
		i=25;
 80064f6:	2319      	movs	r3, #25
 80064f8:	613b      	str	r3, [r7, #16]
		LCD_FillRect(i, j, i + 12, j + 10);
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	b298      	uxth	r0, r3
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	b299      	uxth	r1, r3
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	b29b      	uxth	r3, r3
 8006506:	330c      	adds	r3, #12
 8006508:	b29a      	uxth	r2, r3
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	b29b      	uxth	r3, r3
 800650e:	330a      	adds	r3, #10
 8006510:	b29b      	uxth	r3, r3
 8006512:	f7fa fcbf 	bl	8000e94 <LCD_FillRect>
		SMLCD_Flush();
 8006516:	f7fa f8df 	bl	80006d8 <SMLCD_Flush>
}
 800651a:	bf00      	nop
 800651c:	3720      	adds	r7, #32
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	200032d0 	.word	0x200032d0

08006528 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800652e:	4b11      	ldr	r3, [pc, #68]	; (8006574 <HAL_MspInit+0x4c>)
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	4a10      	ldr	r2, [pc, #64]	; (8006574 <HAL_MspInit+0x4c>)
 8006534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006538:	6413      	str	r3, [r2, #64]	; 0x40
 800653a:	4b0e      	ldr	r3, [pc, #56]	; (8006574 <HAL_MspInit+0x4c>)
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006542:	607b      	str	r3, [r7, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006546:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <HAL_MspInit+0x4c>)
 8006548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654a:	4a0a      	ldr	r2, [pc, #40]	; (8006574 <HAL_MspInit+0x4c>)
 800654c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006550:	6453      	str	r3, [r2, #68]	; 0x44
 8006552:	4b08      	ldr	r3, [pc, #32]	; (8006574 <HAL_MspInit+0x4c>)
 8006554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800655a:	603b      	str	r3, [r7, #0]
 800655c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800655e:	2200      	movs	r2, #0
 8006560:	210f      	movs	r1, #15
 8006562:	f06f 0001 	mvn.w	r0, #1
 8006566:	f001 fe69 	bl	800823c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800656a:	bf00      	nop
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	40023800 	.word	0x40023800

08006578 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b094      	sub	sp, #80	; 0x50
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006580:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	605a      	str	r2, [r3, #4]
 800658a:	609a      	str	r2, [r3, #8]
 800658c:	60da      	str	r2, [r3, #12]
 800658e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a91      	ldr	r2, [pc, #580]	; (80067dc <HAL_ADC_MspInit+0x264>)
 8006596:	4293      	cmp	r3, r2
 8006598:	f040 808c 	bne.w	80066b4 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800659c:	4b90      	ldr	r3, [pc, #576]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 800659e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a0:	4a8f      	ldr	r2, [pc, #572]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80065a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065a6:	6453      	str	r3, [r2, #68]	; 0x44
 80065a8:	4b8d      	ldr	r3, [pc, #564]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80065aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065b4:	4b8a      	ldr	r3, [pc, #552]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80065b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b8:	4a89      	ldr	r2, [pc, #548]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80065ba:	f043 0304 	orr.w	r3, r3, #4
 80065be:	6313      	str	r3, [r2, #48]	; 0x30
 80065c0:	4b87      	ldr	r3, [pc, #540]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80065c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	637b      	str	r3, [r7, #52]	; 0x34
 80065ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065cc:	4b84      	ldr	r3, [pc, #528]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80065ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d0:	4a83      	ldr	r2, [pc, #524]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80065d2:	f043 0301 	orr.w	r3, r3, #1
 80065d6:	6313      	str	r3, [r2, #48]	; 0x30
 80065d8:	4b81      	ldr	r3, [pc, #516]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	633b      	str	r3, [r7, #48]	; 0x30
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065e4:	4b7e      	ldr	r3, [pc, #504]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	4a7d      	ldr	r2, [pc, #500]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80065ea:	f043 0302 	orr.w	r3, r3, #2
 80065ee:	6313      	str	r3, [r2, #48]	; 0x30
 80065f0:	4b7b      	ldr	r3, [pc, #492]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 80065fc:	230f      	movs	r3, #15
 80065fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006600:	2303      	movs	r3, #3
 8006602:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006604:	2300      	movs	r3, #0
 8006606:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006608:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800660c:	4619      	mov	r1, r3
 800660e:	4875      	ldr	r0, [pc, #468]	; (80067e4 <HAL_ADC_MspInit+0x26c>)
 8006610:	f002 fa46 	bl	8008aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC6_Pin|ADC5_Pin|ADC3_Pin
 8006614:	23f8      	movs	r3, #248	; 0xf8
 8006616:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006618:	2303      	movs	r3, #3
 800661a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800661c:	2300      	movs	r3, #0
 800661e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006620:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006624:	4619      	mov	r1, r3
 8006626:	4870      	ldr	r0, [pc, #448]	; (80067e8 <HAL_ADC_MspInit+0x270>)
 8006628:	f002 fa3a 	bl	8008aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC9_Pin|ADC8_Pin;
 800662c:	2303      	movs	r3, #3
 800662e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006630:	2303      	movs	r3, #3
 8006632:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006634:	2300      	movs	r3, #0
 8006636:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006638:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800663c:	4619      	mov	r1, r3
 800663e:	486b      	ldr	r0, [pc, #428]	; (80067ec <HAL_ADC_MspInit+0x274>)
 8006640:	f002 fa2e 	bl	8008aa0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8006644:	4b6a      	ldr	r3, [pc, #424]	; (80067f0 <HAL_ADC_MspInit+0x278>)
 8006646:	4a6b      	ldr	r2, [pc, #428]	; (80067f4 <HAL_ADC_MspInit+0x27c>)
 8006648:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800664a:	4b69      	ldr	r3, [pc, #420]	; (80067f0 <HAL_ADC_MspInit+0x278>)
 800664c:	2200      	movs	r2, #0
 800664e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006650:	4b67      	ldr	r3, [pc, #412]	; (80067f0 <HAL_ADC_MspInit+0x278>)
 8006652:	2200      	movs	r2, #0
 8006654:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006656:	4b66      	ldr	r3, [pc, #408]	; (80067f0 <HAL_ADC_MspInit+0x278>)
 8006658:	2200      	movs	r2, #0
 800665a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800665c:	4b64      	ldr	r3, [pc, #400]	; (80067f0 <HAL_ADC_MspInit+0x278>)
 800665e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006662:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006664:	4b62      	ldr	r3, [pc, #392]	; (80067f0 <HAL_ADC_MspInit+0x278>)
 8006666:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800666a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800666c:	4b60      	ldr	r3, [pc, #384]	; (80067f0 <HAL_ADC_MspInit+0x278>)
 800666e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006672:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8006674:	4b5e      	ldr	r3, [pc, #376]	; (80067f0 <HAL_ADC_MspInit+0x278>)
 8006676:	2200      	movs	r2, #0
 8006678:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800667a:	4b5d      	ldr	r3, [pc, #372]	; (80067f0 <HAL_ADC_MspInit+0x278>)
 800667c:	2200      	movs	r2, #0
 800667e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006680:	4b5b      	ldr	r3, [pc, #364]	; (80067f0 <HAL_ADC_MspInit+0x278>)
 8006682:	2200      	movs	r2, #0
 8006684:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006686:	485a      	ldr	r0, [pc, #360]	; (80067f0 <HAL_ADC_MspInit+0x278>)
 8006688:	f001 fe02 	bl	8008290 <HAL_DMA_Init>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 8006692:	f7fd fe13 	bl	80042bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a55      	ldr	r2, [pc, #340]	; (80067f0 <HAL_ADC_MspInit+0x278>)
 800669a:	639a      	str	r2, [r3, #56]	; 0x38
 800669c:	4a54      	ldr	r2, [pc, #336]	; (80067f0 <HAL_ADC_MspInit+0x278>)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80066a2:	2200      	movs	r2, #0
 80066a4:	2105      	movs	r1, #5
 80066a6:	2012      	movs	r0, #18
 80066a8:	f001 fdc8 	bl	800823c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80066ac:	2012      	movs	r0, #18
 80066ae:	f001 fde1 	bl	8008274 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80066b2:	e13a      	b.n	800692a <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a4f      	ldr	r2, [pc, #316]	; (80067f8 <HAL_ADC_MspInit+0x280>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	f040 80a2 	bne.w	8006804 <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80066c0:	4b47      	ldr	r3, [pc, #284]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80066c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c4:	4a46      	ldr	r2, [pc, #280]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80066c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066ca:	6453      	str	r3, [r2, #68]	; 0x44
 80066cc:	4b44      	ldr	r3, [pc, #272]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80066ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066d8:	4b41      	ldr	r3, [pc, #260]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80066da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066dc:	4a40      	ldr	r2, [pc, #256]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80066de:	f043 0304 	orr.w	r3, r3, #4
 80066e2:	6313      	str	r3, [r2, #48]	; 0x30
 80066e4:	4b3e      	ldr	r3, [pc, #248]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80066e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	627b      	str	r3, [r7, #36]	; 0x24
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066f0:	4b3b      	ldr	r3, [pc, #236]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80066f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f4:	4a3a      	ldr	r2, [pc, #232]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80066f6:	f043 0301 	orr.w	r3, r3, #1
 80066fa:	6313      	str	r3, [r2, #48]	; 0x30
 80066fc:	4b38      	ldr	r3, [pc, #224]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 80066fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	623b      	str	r3, [r7, #32]
 8006706:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006708:	4b35      	ldr	r3, [pc, #212]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 800670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670c:	4a34      	ldr	r2, [pc, #208]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 800670e:	f043 0302 	orr.w	r3, r3, #2
 8006712:	6313      	str	r3, [r2, #48]	; 0x30
 8006714:	4b32      	ldr	r3, [pc, #200]	; (80067e0 <HAL_ADC_MspInit+0x268>)
 8006716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	61fb      	str	r3, [r7, #28]
 800671e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin
 8006720:	233f      	movs	r3, #63	; 0x3f
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006724:	2303      	movs	r3, #3
 8006726:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006728:	2300      	movs	r3, #0
 800672a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800672c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006730:	4619      	mov	r1, r3
 8006732:	482c      	ldr	r0, [pc, #176]	; (80067e4 <HAL_ADC_MspInit+0x26c>)
 8006734:	f002 f9b4 	bl	8008aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin|ADC4_Pin|ADC6_Pin
 8006738:	237b      	movs	r3, #123	; 0x7b
 800673a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800673c:	2303      	movs	r3, #3
 800673e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006740:	2300      	movs	r3, #0
 8006742:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006744:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006748:	4619      	mov	r1, r3
 800674a:	4827      	ldr	r0, [pc, #156]	; (80067e8 <HAL_ADC_MspInit+0x270>)
 800674c:	f002 f9a8 	bl	8008aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC9_Pin;
 8006750:	2302      	movs	r3, #2
 8006752:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006754:	2303      	movs	r3, #3
 8006756:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006758:	2300      	movs	r3, #0
 800675a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ADC9_GPIO_Port, &GPIO_InitStruct);
 800675c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006760:	4619      	mov	r1, r3
 8006762:	4822      	ldr	r0, [pc, #136]	; (80067ec <HAL_ADC_MspInit+0x274>)
 8006764:	f002 f99c 	bl	8008aa0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006768:	4b24      	ldr	r3, [pc, #144]	; (80067fc <HAL_ADC_MspInit+0x284>)
 800676a:	4a25      	ldr	r2, [pc, #148]	; (8006800 <HAL_ADC_MspInit+0x288>)
 800676c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800676e:	4b23      	ldr	r3, [pc, #140]	; (80067fc <HAL_ADC_MspInit+0x284>)
 8006770:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006774:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006776:	4b21      	ldr	r3, [pc, #132]	; (80067fc <HAL_ADC_MspInit+0x284>)
 8006778:	2200      	movs	r2, #0
 800677a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800677c:	4b1f      	ldr	r3, [pc, #124]	; (80067fc <HAL_ADC_MspInit+0x284>)
 800677e:	2200      	movs	r2, #0
 8006780:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006782:	4b1e      	ldr	r3, [pc, #120]	; (80067fc <HAL_ADC_MspInit+0x284>)
 8006784:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006788:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800678a:	4b1c      	ldr	r3, [pc, #112]	; (80067fc <HAL_ADC_MspInit+0x284>)
 800678c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006790:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006792:	4b1a      	ldr	r3, [pc, #104]	; (80067fc <HAL_ADC_MspInit+0x284>)
 8006794:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006798:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800679a:	4b18      	ldr	r3, [pc, #96]	; (80067fc <HAL_ADC_MspInit+0x284>)
 800679c:	2200      	movs	r2, #0
 800679e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80067a0:	4b16      	ldr	r3, [pc, #88]	; (80067fc <HAL_ADC_MspInit+0x284>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067a6:	4b15      	ldr	r3, [pc, #84]	; (80067fc <HAL_ADC_MspInit+0x284>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80067ac:	4813      	ldr	r0, [pc, #76]	; (80067fc <HAL_ADC_MspInit+0x284>)
 80067ae:	f001 fd6f 	bl	8008290 <HAL_DMA_Init>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <HAL_ADC_MspInit+0x244>
      Error_Handler();
 80067b8:	f7fd fd80 	bl	80042bc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a0f      	ldr	r2, [pc, #60]	; (80067fc <HAL_ADC_MspInit+0x284>)
 80067c0:	639a      	str	r2, [r3, #56]	; 0x38
 80067c2:	4a0e      	ldr	r2, [pc, #56]	; (80067fc <HAL_ADC_MspInit+0x284>)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80067c8:	2200      	movs	r2, #0
 80067ca:	2105      	movs	r1, #5
 80067cc:	2012      	movs	r0, #18
 80067ce:	f001 fd35 	bl	800823c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80067d2:	2012      	movs	r0, #18
 80067d4:	f001 fd4e 	bl	8008274 <HAL_NVIC_EnableIRQ>
}
 80067d8:	e0a7      	b.n	800692a <HAL_ADC_MspInit+0x3b2>
 80067da:	bf00      	nop
 80067dc:	40012000 	.word	0x40012000
 80067e0:	40023800 	.word	0x40023800
 80067e4:	40020800 	.word	0x40020800
 80067e8:	40020000 	.word	0x40020000
 80067ec:	40020400 	.word	0x40020400
 80067f0:	20013318 	.word	0x20013318
 80067f4:	40026410 	.word	0x40026410
 80067f8:	40012100 	.word	0x40012100
 80067fc:	20023fb4 	.word	0x20023fb4
 8006800:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a4a      	ldr	r2, [pc, #296]	; (8006934 <HAL_ADC_MspInit+0x3bc>)
 800680a:	4293      	cmp	r3, r2
 800680c:	f040 808d 	bne.w	800692a <HAL_ADC_MspInit+0x3b2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8006810:	4b49      	ldr	r3, [pc, #292]	; (8006938 <HAL_ADC_MspInit+0x3c0>)
 8006812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006814:	4a48      	ldr	r2, [pc, #288]	; (8006938 <HAL_ADC_MspInit+0x3c0>)
 8006816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800681a:	6453      	str	r3, [r2, #68]	; 0x44
 800681c:	4b46      	ldr	r3, [pc, #280]	; (8006938 <HAL_ADC_MspInit+0x3c0>)
 800681e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006824:	61bb      	str	r3, [r7, #24]
 8006826:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006828:	4b43      	ldr	r3, [pc, #268]	; (8006938 <HAL_ADC_MspInit+0x3c0>)
 800682a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682c:	4a42      	ldr	r2, [pc, #264]	; (8006938 <HAL_ADC_MspInit+0x3c0>)
 800682e:	f043 0320 	orr.w	r3, r3, #32
 8006832:	6313      	str	r3, [r2, #48]	; 0x30
 8006834:	4b40      	ldr	r3, [pc, #256]	; (8006938 <HAL_ADC_MspInit+0x3c0>)
 8006836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006838:	f003 0320 	and.w	r3, r3, #32
 800683c:	617b      	str	r3, [r7, #20]
 800683e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006840:	4b3d      	ldr	r3, [pc, #244]	; (8006938 <HAL_ADC_MspInit+0x3c0>)
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006844:	4a3c      	ldr	r2, [pc, #240]	; (8006938 <HAL_ADC_MspInit+0x3c0>)
 8006846:	f043 0304 	orr.w	r3, r3, #4
 800684a:	6313      	str	r3, [r2, #48]	; 0x30
 800684c:	4b3a      	ldr	r3, [pc, #232]	; (8006938 <HAL_ADC_MspInit+0x3c0>)
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	613b      	str	r3, [r7, #16]
 8006856:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006858:	4b37      	ldr	r3, [pc, #220]	; (8006938 <HAL_ADC_MspInit+0x3c0>)
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	4a36      	ldr	r2, [pc, #216]	; (8006938 <HAL_ADC_MspInit+0x3c0>)
 800685e:	f043 0301 	orr.w	r3, r3, #1
 8006862:	6313      	str	r3, [r2, #48]	; 0x30
 8006864:	4b34      	ldr	r3, [pc, #208]	; (8006938 <HAL_ADC_MspInit+0x3c0>)
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC15_Pin|ADC14_Pin|PP_SPARE_I2C_ADC_Pin|ZION_SENSE_Pin
 8006870:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8006874:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006876:	2303      	movs	r3, #3
 8006878:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800687a:	2300      	movs	r3, #0
 800687c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800687e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006882:	4619      	mov	r1, r3
 8006884:	482d      	ldr	r0, [pc, #180]	; (800693c <HAL_ADC_MspInit+0x3c4>)
 8006886:	f002 f90b 	bl	8008aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 800688a:	230f      	movs	r3, #15
 800688c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800688e:	2303      	movs	r3, #3
 8006890:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006892:	2300      	movs	r3, #0
 8006894:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006896:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800689a:	4619      	mov	r1, r3
 800689c:	4828      	ldr	r0, [pc, #160]	; (8006940 <HAL_ADC_MspInit+0x3c8>)
 800689e:	f002 f8ff 	bl	8008aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 80068a2:	230c      	movs	r3, #12
 80068a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068a6:	2303      	movs	r3, #3
 80068a8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80068b2:	4619      	mov	r1, r3
 80068b4:	4823      	ldr	r0, [pc, #140]	; (8006944 <HAL_ADC_MspInit+0x3cc>)
 80068b6:	f002 f8f3 	bl	8008aa0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80068ba:	4b23      	ldr	r3, [pc, #140]	; (8006948 <HAL_ADC_MspInit+0x3d0>)
 80068bc:	4a23      	ldr	r2, [pc, #140]	; (800694c <HAL_ADC_MspInit+0x3d4>)
 80068be:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80068c0:	4b21      	ldr	r3, [pc, #132]	; (8006948 <HAL_ADC_MspInit+0x3d0>)
 80068c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80068c6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068c8:	4b1f      	ldr	r3, [pc, #124]	; (8006948 <HAL_ADC_MspInit+0x3d0>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80068ce:	4b1e      	ldr	r3, [pc, #120]	; (8006948 <HAL_ADC_MspInit+0x3d0>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80068d4:	4b1c      	ldr	r3, [pc, #112]	; (8006948 <HAL_ADC_MspInit+0x3d0>)
 80068d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068da:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80068dc:	4b1a      	ldr	r3, [pc, #104]	; (8006948 <HAL_ADC_MspInit+0x3d0>)
 80068de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068e2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80068e4:	4b18      	ldr	r3, [pc, #96]	; (8006948 <HAL_ADC_MspInit+0x3d0>)
 80068e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80068ea:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80068ec:	4b16      	ldr	r3, [pc, #88]	; (8006948 <HAL_ADC_MspInit+0x3d0>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80068f2:	4b15      	ldr	r3, [pc, #84]	; (8006948 <HAL_ADC_MspInit+0x3d0>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068f8:	4b13      	ldr	r3, [pc, #76]	; (8006948 <HAL_ADC_MspInit+0x3d0>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80068fe:	4812      	ldr	r0, [pc, #72]	; (8006948 <HAL_ADC_MspInit+0x3d0>)
 8006900:	f001 fcc6 	bl	8008290 <HAL_DMA_Init>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <HAL_ADC_MspInit+0x396>
      Error_Handler();
 800690a:	f7fd fcd7 	bl	80042bc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a0d      	ldr	r2, [pc, #52]	; (8006948 <HAL_ADC_MspInit+0x3d0>)
 8006912:	639a      	str	r2, [r3, #56]	; 0x38
 8006914:	4a0c      	ldr	r2, [pc, #48]	; (8006948 <HAL_ADC_MspInit+0x3d0>)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800691a:	2200      	movs	r2, #0
 800691c:	2105      	movs	r1, #5
 800691e:	2012      	movs	r0, #18
 8006920:	f001 fc8c 	bl	800823c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006924:	2012      	movs	r0, #18
 8006926:	f001 fca5 	bl	8008274 <HAL_NVIC_EnableIRQ>
}
 800692a:	bf00      	nop
 800692c:	3750      	adds	r7, #80	; 0x50
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	40012200 	.word	0x40012200
 8006938:	40023800 	.word	0x40023800
 800693c:	40021400 	.word	0x40021400
 8006940:	40020800 	.word	0x40020800
 8006944:	40020000 	.word	0x40020000
 8006948:	20010a50 	.word	0x20010a50
 800694c:	40026428 	.word	0x40026428

08006950 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b090      	sub	sp, #64	; 0x40
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	605a      	str	r2, [r3, #4]
 8006962:	609a      	str	r2, [r3, #8]
 8006964:	60da      	str	r2, [r3, #12]
 8006966:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a6c      	ldr	r2, [pc, #432]	; (8006b20 <HAL_I2C_MspInit+0x1d0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d129      	bne.n	80069c6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006972:	4b6c      	ldr	r3, [pc, #432]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006976:	4a6b      	ldr	r2, [pc, #428]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006978:	f043 0302 	orr.w	r3, r3, #2
 800697c:	6313      	str	r3, [r2, #48]	; 0x30
 800697e:	4b69      	ldr	r3, [pc, #420]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LED_I2C_SCL_Pin|LED_I2C_SDA_Pin;
 800698a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800698e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006990:	2312      	movs	r3, #18
 8006992:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006994:	2301      	movs	r3, #1
 8006996:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006998:	2303      	movs	r3, #3
 800699a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800699c:	2304      	movs	r3, #4
 800699e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80069a4:	4619      	mov	r1, r3
 80069a6:	4860      	ldr	r0, [pc, #384]	; (8006b28 <HAL_I2C_MspInit+0x1d8>)
 80069a8:	f002 f87a 	bl	8008aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80069ac:	4b5d      	ldr	r3, [pc, #372]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 80069ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b0:	4a5c      	ldr	r2, [pc, #368]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 80069b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069b6:	6413      	str	r3, [r2, #64]	; 0x40
 80069b8:	4b5a      	ldr	r3, [pc, #360]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 80069ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069c0:	627b      	str	r3, [r7, #36]	; 0x24
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80069c4:	e0a7      	b.n	8006b16 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a58      	ldr	r2, [pc, #352]	; (8006b2c <HAL_I2C_MspInit+0x1dc>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d128      	bne.n	8006a22 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80069d0:	4b54      	ldr	r3, [pc, #336]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 80069d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d4:	4a53      	ldr	r2, [pc, #332]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 80069d6:	f043 0320 	orr.w	r3, r3, #32
 80069da:	6313      	str	r3, [r2, #48]	; 0x30
 80069dc:	4b51      	ldr	r3, [pc, #324]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 80069de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	623b      	str	r3, [r7, #32]
 80069e6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SPARE_I2C_SDA_3V3_Pin|SPARE_I2C_SCL_3V3_Pin;
 80069e8:	2303      	movs	r3, #3
 80069ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069ec:	2312      	movs	r3, #18
 80069ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069f0:	2301      	movs	r3, #1
 80069f2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069f4:	2303      	movs	r3, #3
 80069f6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80069f8:	2304      	movs	r3, #4
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80069fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a00:	4619      	mov	r1, r3
 8006a02:	484b      	ldr	r0, [pc, #300]	; (8006b30 <HAL_I2C_MspInit+0x1e0>)
 8006a04:	f002 f84c 	bl	8008aa0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006a08:	4b46      	ldr	r3, [pc, #280]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0c:	4a45      	ldr	r2, [pc, #276]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006a0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a12:	6413      	str	r3, [r2, #64]	; 0x40
 8006a14:	4b43      	ldr	r3, [pc, #268]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a1c:	61fb      	str	r3, [r7, #28]
 8006a1e:	69fb      	ldr	r3, [r7, #28]
}
 8006a20:	e079      	b.n	8006b16 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a43      	ldr	r2, [pc, #268]	; (8006b34 <HAL_I2C_MspInit+0x1e4>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d146      	bne.n	8006aba <HAL_I2C_MspInit+0x16a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a2c:	4b3d      	ldr	r3, [pc, #244]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a30:	4a3c      	ldr	r2, [pc, #240]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006a32:	f043 0304 	orr.w	r3, r3, #4
 8006a36:	6313      	str	r3, [r2, #48]	; 0x30
 8006a38:	4b3a      	ldr	r3, [pc, #232]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a44:	4b37      	ldr	r3, [pc, #220]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a48:	4a36      	ldr	r2, [pc, #216]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006a4a:	f043 0301 	orr.w	r3, r3, #1
 8006a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8006a50:	4b34      	ldr	r3, [pc, #208]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SOC_I2C_SDA_3V3_Pin;
 8006a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a62:	2312      	movs	r3, #18
 8006a64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a66:	2301      	movs	r3, #1
 8006a68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006a6e:	2304      	movs	r3, #4
 8006a70:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SDA_3V3_GPIO_Port, &GPIO_InitStruct);
 8006a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a76:	4619      	mov	r1, r3
 8006a78:	482f      	ldr	r0, [pc, #188]	; (8006b38 <HAL_I2C_MspInit+0x1e8>)
 8006a7a:	f002 f811 	bl	8008aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_I2C_SCL_3V3_Pin;
 8006a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a84:	2312      	movs	r3, #18
 8006a86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006a90:	2304      	movs	r3, #4
 8006a92:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SCL_3V3_GPIO_Port, &GPIO_InitStruct);
 8006a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4828      	ldr	r0, [pc, #160]	; (8006b3c <HAL_I2C_MspInit+0x1ec>)
 8006a9c:	f002 f800 	bl	8008aa0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006aa0:	4b20      	ldr	r3, [pc, #128]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	4a1f      	ldr	r2, [pc, #124]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006aa6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8006aac:	4b1d      	ldr	r3, [pc, #116]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ab4:	613b      	str	r3, [r7, #16]
 8006ab6:	693b      	ldr	r3, [r7, #16]
}
 8006ab8:	e02d      	b.n	8006b16 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C4)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a20      	ldr	r2, [pc, #128]	; (8006b40 <HAL_I2C_MspInit+0x1f0>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d128      	bne.n	8006b16 <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006ac4:	4b17      	ldr	r3, [pc, #92]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac8:	4a16      	ldr	r2, [pc, #88]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006aca:	f043 0320 	orr.w	r3, r3, #32
 8006ace:	6313      	str	r3, [r2, #48]	; 0x30
 8006ad0:	4b14      	ldr	r3, [pc, #80]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad4:	f003 0320 	and.w	r3, r3, #32
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_ZION_I2C_SDA_Pin|STM_ZION_I2C_SCL_Pin;
 8006adc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ae2:	2312      	movs	r3, #18
 8006ae4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006aea:	2303      	movs	r3, #3
 8006aec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8006aee:	2304      	movs	r3, #4
 8006af0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006af6:	4619      	mov	r1, r3
 8006af8:	480d      	ldr	r0, [pc, #52]	; (8006b30 <HAL_I2C_MspInit+0x1e0>)
 8006afa:	f001 ffd1 	bl	8008aa0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8006afe:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	4a08      	ldr	r2, [pc, #32]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006b04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b08:	6413      	str	r3, [r2, #64]	; 0x40
 8006b0a:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <HAL_I2C_MspInit+0x1d4>)
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b12:	60bb      	str	r3, [r7, #8]
 8006b14:	68bb      	ldr	r3, [r7, #8]
}
 8006b16:	bf00      	nop
 8006b18:	3740      	adds	r7, #64	; 0x40
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	40005400 	.word	0x40005400
 8006b24:	40023800 	.word	0x40023800
 8006b28:	40020400 	.word	0x40020400
 8006b2c:	40005800 	.word	0x40005800
 8006b30:	40021400 	.word	0x40021400
 8006b34:	40005c00 	.word	0x40005c00
 8006b38:	40020800 	.word	0x40020800
 8006b3c:	40020000 	.word	0x40020000
 8006b40:	40006000 	.word	0x40006000

08006b44 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a07      	ldr	r2, [pc, #28]	; (8006b70 <HAL_RTC_MspInit+0x2c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d105      	bne.n	8006b62 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006b56:	4b07      	ldr	r3, [pc, #28]	; (8006b74 <HAL_RTC_MspInit+0x30>)
 8006b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5a:	4a06      	ldr	r2, [pc, #24]	; (8006b74 <HAL_RTC_MspInit+0x30>)
 8006b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b60:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40002800 	.word	0x40002800
 8006b74:	40023800 	.word	0x40023800

08006b78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08c      	sub	sp, #48	; 0x30
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b80:	f107 031c 	add.w	r3, r7, #28
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	605a      	str	r2, [r3, #4]
 8006b8a:	609a      	str	r2, [r3, #8]
 8006b8c:	60da      	str	r2, [r3, #12]
 8006b8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a40      	ldr	r2, [pc, #256]	; (8006c98 <HAL_SPI_MspInit+0x120>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d130      	bne.n	8006bfc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006b9a:	4b40      	ldr	r3, [pc, #256]	; (8006c9c <HAL_SPI_MspInit+0x124>)
 8006b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9e:	4a3f      	ldr	r2, [pc, #252]	; (8006c9c <HAL_SPI_MspInit+0x124>)
 8006ba0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ba6:	4b3d      	ldr	r3, [pc, #244]	; (8006c9c <HAL_SPI_MspInit+0x124>)
 8006ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006baa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bae:	61bb      	str	r3, [r7, #24]
 8006bb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006bb2:	4b3a      	ldr	r3, [pc, #232]	; (8006c9c <HAL_SPI_MspInit+0x124>)
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb6:	4a39      	ldr	r2, [pc, #228]	; (8006c9c <HAL_SPI_MspInit+0x124>)
 8006bb8:	f043 0310 	orr.w	r3, r3, #16
 8006bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8006bbe:	4b37      	ldr	r3, [pc, #220]	; (8006c9c <HAL_SPI_MspInit+0x124>)
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	617b      	str	r3, [r7, #20]
 8006bc8:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8006bca:	2364      	movs	r3, #100	; 0x64
 8006bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bce:	2302      	movs	r3, #2
 8006bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8006bda:	2305      	movs	r3, #5
 8006bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006bde:	f107 031c 	add.w	r3, r7, #28
 8006be2:	4619      	mov	r1, r3
 8006be4:	482e      	ldr	r0, [pc, #184]	; (8006ca0 <HAL_SPI_MspInit+0x128>)
 8006be6:	f001 ff5b 	bl	8008aa0 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8006bea:	2200      	movs	r2, #0
 8006bec:	2105      	movs	r1, #5
 8006bee:	2054      	movs	r0, #84	; 0x54
 8006bf0:	f001 fb24 	bl	800823c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8006bf4:	2054      	movs	r0, #84	; 0x54
 8006bf6:	f001 fb3d 	bl	8008274 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8006bfa:	e049      	b.n	8006c90 <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI5)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a28      	ldr	r2, [pc, #160]	; (8006ca4 <HAL_SPI_MspInit+0x12c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d144      	bne.n	8006c90 <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006c06:	4b25      	ldr	r3, [pc, #148]	; (8006c9c <HAL_SPI_MspInit+0x124>)
 8006c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0a:	4a24      	ldr	r2, [pc, #144]	; (8006c9c <HAL_SPI_MspInit+0x124>)
 8006c0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c10:	6453      	str	r3, [r2, #68]	; 0x44
 8006c12:	4b22      	ldr	r3, [pc, #136]	; (8006c9c <HAL_SPI_MspInit+0x124>)
 8006c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006c1e:	4b1f      	ldr	r3, [pc, #124]	; (8006c9c <HAL_SPI_MspInit+0x124>)
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c22:	4a1e      	ldr	r2, [pc, #120]	; (8006c9c <HAL_SPI_MspInit+0x124>)
 8006c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c28:	6313      	str	r3, [r2, #48]	; 0x30
 8006c2a:	4b1c      	ldr	r3, [pc, #112]	; (8006c9c <HAL_SPI_MspInit+0x124>)
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006c36:	4b19      	ldr	r3, [pc, #100]	; (8006c9c <HAL_SPI_MspInit+0x124>)
 8006c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3a:	4a18      	ldr	r2, [pc, #96]	; (8006c9c <HAL_SPI_MspInit+0x124>)
 8006c3c:	f043 0320 	orr.w	r3, r3, #32
 8006c40:	6313      	str	r3, [r2, #48]	; 0x30
 8006c42:	4b16      	ldr	r3, [pc, #88]	; (8006c9c <HAL_SPI_MspInit+0x124>)
 8006c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	60bb      	str	r3, [r7, #8]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPARE_SS_L_3V3_Pin|SPARE_MISO_3V3_Pin|SPARE_SCLK_3V3_Pin;
 8006c4e:	23e0      	movs	r3, #224	; 0xe0
 8006c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c52:	2302      	movs	r3, #2
 8006c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006c5e:	2305      	movs	r3, #5
 8006c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006c62:	f107 031c 	add.w	r3, r7, #28
 8006c66:	4619      	mov	r1, r3
 8006c68:	480f      	ldr	r0, [pc, #60]	; (8006ca8 <HAL_SPI_MspInit+0x130>)
 8006c6a:	f001 ff19 	bl	8008aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPARE_MOSI_3V3_Pin;
 8006c6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c74:	2302      	movs	r3, #2
 8006c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006c80:	2305      	movs	r3, #5
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPARE_MOSI_3V3_GPIO_Port, &GPIO_InitStruct);
 8006c84:	f107 031c 	add.w	r3, r7, #28
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4808      	ldr	r0, [pc, #32]	; (8006cac <HAL_SPI_MspInit+0x134>)
 8006c8c:	f001 ff08 	bl	8008aa0 <HAL_GPIO_Init>
}
 8006c90:	bf00      	nop
 8006c92:	3730      	adds	r7, #48	; 0x30
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	40013400 	.word	0x40013400
 8006c9c:	40023800 	.word	0x40023800
 8006ca0:	40021000 	.word	0x40021000
 8006ca4:	40015000 	.word	0x40015000
 8006ca8:	40021c00 	.word	0x40021c00
 8006cac:	40021400 	.word	0x40021400

08006cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a13      	ldr	r2, [pc, #76]	; (8006d0c <HAL_TIM_Base_MspInit+0x5c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d10c      	bne.n	8006cdc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006cc2:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <HAL_TIM_Base_MspInit+0x60>)
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	4a12      	ldr	r2, [pc, #72]	; (8006d10 <HAL_TIM_Base_MspInit+0x60>)
 8006cc8:	f043 0304 	orr.w	r3, r3, #4
 8006ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8006cce:	4b10      	ldr	r3, [pc, #64]	; (8006d10 <HAL_TIM_Base_MspInit+0x60>)
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006cda:	e010      	b.n	8006cfe <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a0c      	ldr	r2, [pc, #48]	; (8006d14 <HAL_TIM_Base_MspInit+0x64>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d10b      	bne.n	8006cfe <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006ce6:	4b0a      	ldr	r3, [pc, #40]	; (8006d10 <HAL_TIM_Base_MspInit+0x60>)
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	4a09      	ldr	r2, [pc, #36]	; (8006d10 <HAL_TIM_Base_MspInit+0x60>)
 8006cec:	f043 0308 	orr.w	r3, r3, #8
 8006cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8006cf2:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <HAL_TIM_Base_MspInit+0x60>)
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	f003 0308 	and.w	r3, r3, #8
 8006cfa:	60bb      	str	r3, [r7, #8]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
}
 8006cfe:	bf00      	nop
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40000800 	.word	0x40000800
 8006d10:	40023800 	.word	0x40023800
 8006d14:	40000c00 	.word	0x40000c00

08006d18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08a      	sub	sp, #40	; 0x28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d20:	f107 0314 	add.w	r3, r7, #20
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	605a      	str	r2, [r3, #4]
 8006d2a:	609a      	str	r2, [r3, #8]
 8006d2c:	60da      	str	r2, [r3, #12]
 8006d2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a22      	ldr	r2, [pc, #136]	; (8006dc0 <HAL_TIM_MspPostInit+0xa8>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d11c      	bne.n	8006d74 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d3a:	4b22      	ldr	r3, [pc, #136]	; (8006dc4 <HAL_TIM_MspPostInit+0xac>)
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3e:	4a21      	ldr	r2, [pc, #132]	; (8006dc4 <HAL_TIM_MspPostInit+0xac>)
 8006d40:	f043 0302 	orr.w	r3, r3, #2
 8006d44:	6313      	str	r3, [r2, #48]	; 0x30
 8006d46:	4b1f      	ldr	r3, [pc, #124]	; (8006dc4 <HAL_TIM_MspPostInit+0xac>)
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	613b      	str	r3, [r7, #16]
 8006d50:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SPARE_TIM_Pin;
 8006d52:	2340      	movs	r3, #64	; 0x40
 8006d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d56:	2302      	movs	r3, #2
 8006d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006d62:	2302      	movs	r3, #2
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPARE_TIM_GPIO_Port, &GPIO_InitStruct);
 8006d66:	f107 0314 	add.w	r3, r7, #20
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4816      	ldr	r0, [pc, #88]	; (8006dc8 <HAL_TIM_MspPostInit+0xb0>)
 8006d6e:	f001 fe97 	bl	8008aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8006d72:	e021      	b.n	8006db8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a14      	ldr	r2, [pc, #80]	; (8006dcc <HAL_TIM_MspPostInit+0xb4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d11c      	bne.n	8006db8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d7e:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <HAL_TIM_MspPostInit+0xac>)
 8006d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d82:	4a10      	ldr	r2, [pc, #64]	; (8006dc4 <HAL_TIM_MspPostInit+0xac>)
 8006d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d88:	6313      	str	r3, [r2, #48]	; 0x30
 8006d8a:	4b0e      	ldr	r3, [pc, #56]	; (8006dc4 <HAL_TIM_MspPostInit+0xac>)
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|LCD_EXTCOMM_Pin;
 8006d96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006da4:	2300      	movs	r3, #0
 8006da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006da8:	2302      	movs	r3, #2
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006dac:	f107 0314 	add.w	r3, r7, #20
 8006db0:	4619      	mov	r1, r3
 8006db2:	4807      	ldr	r0, [pc, #28]	; (8006dd0 <HAL_TIM_MspPostInit+0xb8>)
 8006db4:	f001 fe74 	bl	8008aa0 <HAL_GPIO_Init>
}
 8006db8:	bf00      	nop
 8006dba:	3728      	adds	r7, #40	; 0x28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40000800 	.word	0x40000800
 8006dc4:	40023800 	.word	0x40023800
 8006dc8:	40020400 	.word	0x40020400
 8006dcc:	40000c00 	.word	0x40000c00
 8006dd0:	40021c00 	.word	0x40021c00

08006dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08e      	sub	sp, #56	; 0x38
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	605a      	str	r2, [r3, #4]
 8006de6:	609a      	str	r2, [r3, #8]
 8006de8:	60da      	str	r2, [r3, #12]
 8006dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a6c      	ldr	r2, [pc, #432]	; (8006fa4 <HAL_UART_MspInit+0x1d0>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d129      	bne.n	8006e4a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006df6:	4b6c      	ldr	r3, [pc, #432]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	4a6b      	ldr	r2, [pc, #428]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e00:	6413      	str	r3, [r2, #64]	; 0x40
 8006e02:	4b69      	ldr	r3, [pc, #420]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e0a:	623b      	str	r3, [r7, #32]
 8006e0c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e0e:	4b66      	ldr	r3, [pc, #408]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e12:	4a65      	ldr	r2, [pc, #404]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006e14:	f043 0304 	orr.w	r3, r3, #4
 8006e18:	6313      	str	r3, [r2, #48]	; 0x30
 8006e1a:	4b63      	ldr	r3, [pc, #396]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1e:	f003 0304 	and.w	r3, r3, #4
 8006e22:	61fb      	str	r3, [r7, #28]
 8006e24:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = SPARE_UART_RX_3V3_Pin|SPARE_UART_TX_3V3_Pin;
 8006e26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e30:	2300      	movs	r3, #0
 8006e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e34:	2303      	movs	r3, #3
 8006e36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006e38:	2308      	movs	r3, #8
 8006e3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e40:	4619      	mov	r1, r3
 8006e42:	485a      	ldr	r0, [pc, #360]	; (8006fac <HAL_UART_MspInit+0x1d8>)
 8006e44:	f001 fe2c 	bl	8008aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8006e48:	e0a7      	b.n	8006f9a <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART5)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a58      	ldr	r2, [pc, #352]	; (8006fb0 <HAL_UART_MspInit+0x1dc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d174      	bne.n	8006f3e <HAL_UART_MspInit+0x16a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006e54:	4b54      	ldr	r3, [pc, #336]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e58:	4a53      	ldr	r2, [pc, #332]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006e5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8006e60:	4b51      	ldr	r3, [pc, #324]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e68:	61bb      	str	r3, [r7, #24]
 8006e6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e6c:	4b4e      	ldr	r3, [pc, #312]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e70:	4a4d      	ldr	r2, [pc, #308]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006e72:	f043 0304 	orr.w	r3, r3, #4
 8006e76:	6313      	str	r3, [r2, #48]	; 0x30
 8006e78:	4b4b      	ldr	r3, [pc, #300]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e84:	4b48      	ldr	r3, [pc, #288]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	4a47      	ldr	r2, [pc, #284]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006e8a:	f043 0308 	orr.w	r3, r3, #8
 8006e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8006e90:	4b45      	ldr	r3, [pc, #276]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	613b      	str	r3, [r7, #16]
 8006e9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SOC_UART_TX_3V3_Pin;
 8006e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006eae:	2308      	movs	r3, #8
 8006eb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_TX_3V3_GPIO_Port, &GPIO_InitStruct);
 8006eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	483c      	ldr	r0, [pc, #240]	; (8006fac <HAL_UART_MspInit+0x1d8>)
 8006eba:	f001 fdf1 	bl	8008aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_UART_RX_3V3_Pin;
 8006ebe:	2304      	movs	r3, #4
 8006ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006ece:	2308      	movs	r3, #8
 8006ed0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_RX_3V3_GPIO_Port, &GPIO_InitStruct);
 8006ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4836      	ldr	r0, [pc, #216]	; (8006fb4 <HAL_UART_MspInit+0x1e0>)
 8006eda:	f001 fde1 	bl	8008aa0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006ede:	4b36      	ldr	r3, [pc, #216]	; (8006fb8 <HAL_UART_MspInit+0x1e4>)
 8006ee0:	4a36      	ldr	r2, [pc, #216]	; (8006fbc <HAL_UART_MspInit+0x1e8>)
 8006ee2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8006ee4:	4b34      	ldr	r3, [pc, #208]	; (8006fb8 <HAL_UART_MspInit+0x1e4>)
 8006ee6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006eea:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006eec:	4b32      	ldr	r3, [pc, #200]	; (8006fb8 <HAL_UART_MspInit+0x1e4>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ef2:	4b31      	ldr	r3, [pc, #196]	; (8006fb8 <HAL_UART_MspInit+0x1e4>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006ef8:	4b2f      	ldr	r3, [pc, #188]	; (8006fb8 <HAL_UART_MspInit+0x1e4>)
 8006efa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006efe:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f00:	4b2d      	ldr	r3, [pc, #180]	; (8006fb8 <HAL_UART_MspInit+0x1e4>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f06:	4b2c      	ldr	r3, [pc, #176]	; (8006fb8 <HAL_UART_MspInit+0x1e4>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8006f0c:	4b2a      	ldr	r3, [pc, #168]	; (8006fb8 <HAL_UART_MspInit+0x1e4>)
 8006f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f12:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006f14:	4b28      	ldr	r3, [pc, #160]	; (8006fb8 <HAL_UART_MspInit+0x1e4>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f1a:	4b27      	ldr	r3, [pc, #156]	; (8006fb8 <HAL_UART_MspInit+0x1e4>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8006f20:	4825      	ldr	r0, [pc, #148]	; (8006fb8 <HAL_UART_MspInit+0x1e4>)
 8006f22:	f001 f9b5 	bl	8008290 <HAL_DMA_Init>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8006f2c:	f7fd f9c6 	bl	80042bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a21      	ldr	r2, [pc, #132]	; (8006fb8 <HAL_UART_MspInit+0x1e4>)
 8006f34:	66da      	str	r2, [r3, #108]	; 0x6c
 8006f36:	4a20      	ldr	r2, [pc, #128]	; (8006fb8 <HAL_UART_MspInit+0x1e4>)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006f3c:	e02d      	b.n	8006f9a <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART7)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a1f      	ldr	r2, [pc, #124]	; (8006fc0 <HAL_UART_MspInit+0x1ec>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d128      	bne.n	8006f9a <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_UART7_CLK_ENABLE();
 8006f48:	4b17      	ldr	r3, [pc, #92]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	4a16      	ldr	r2, [pc, #88]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006f4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f52:	6413      	str	r3, [r2, #64]	; 0x40
 8006f54:	4b14      	ldr	r3, [pc, #80]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f5c:	60fb      	str	r3, [r7, #12]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006f60:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f64:	4a10      	ldr	r2, [pc, #64]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006f66:	f043 0310 	orr.w	r3, r3, #16
 8006f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8006f6c:	4b0e      	ldr	r3, [pc, #56]	; (8006fa8 <HAL_UART_MspInit+0x1d4>)
 8006f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f70:	f003 0310 	and.w	r3, r3, #16
 8006f74:	60bb      	str	r3, [r7, #8]
 8006f76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FTDI_UART_RX_Pin|FTDI_UART_CTS_L_Pin|FTDI_UART_TX_Pin|FTDI_UART_RTS_L_Pin;
 8006f78:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f7e:	2302      	movs	r3, #2
 8006f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f86:	2303      	movs	r3, #3
 8006f88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006f8a:	2308      	movs	r3, #8
 8006f8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f92:	4619      	mov	r1, r3
 8006f94:	480b      	ldr	r0, [pc, #44]	; (8006fc4 <HAL_UART_MspInit+0x1f0>)
 8006f96:	f001 fd83 	bl	8008aa0 <HAL_GPIO_Init>
}
 8006f9a:	bf00      	nop
 8006f9c:	3738      	adds	r7, #56	; 0x38
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	40004c00 	.word	0x40004c00
 8006fa8:	40023800 	.word	0x40023800
 8006fac:	40020800 	.word	0x40020800
 8006fb0:	40005000 	.word	0x40005000
 8006fb4:	40020c00 	.word	0x40020c00
 8006fb8:	20024014 	.word	0x20024014
 8006fbc:	40026010 	.word	0x40026010
 8006fc0:	40007800 	.word	0x40007800
 8006fc4:	40021000 	.word	0x40021000

08006fc8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08a      	sub	sp, #40	; 0x28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fd0:	f107 0314 	add.w	r3, r7, #20
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	605a      	str	r2, [r3, #4]
 8006fda:	609a      	str	r2, [r3, #8]
 8006fdc:	60da      	str	r2, [r3, #12]
 8006fde:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fe8:	d134      	bne.n	8007054 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fea:	4b1c      	ldr	r3, [pc, #112]	; (800705c <HAL_PCD_MspInit+0x94>)
 8006fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fee:	4a1b      	ldr	r2, [pc, #108]	; (800705c <HAL_PCD_MspInit+0x94>)
 8006ff0:	f043 0301 	orr.w	r3, r3, #1
 8006ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ff6:	4b19      	ldr	r3, [pc, #100]	; (800705c <HAL_PCD_MspInit+0x94>)
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	613b      	str	r3, [r7, #16]
 8007000:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8007002:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007008:	2302      	movs	r3, #2
 800700a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800700c:	2300      	movs	r3, #0
 800700e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007010:	2303      	movs	r3, #3
 8007012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007014:	230a      	movs	r3, #10
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007018:	f107 0314 	add.w	r3, r7, #20
 800701c:	4619      	mov	r1, r3
 800701e:	4810      	ldr	r0, [pc, #64]	; (8007060 <HAL_PCD_MspInit+0x98>)
 8007020:	f001 fd3e 	bl	8008aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007024:	4b0d      	ldr	r3, [pc, #52]	; (800705c <HAL_PCD_MspInit+0x94>)
 8007026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007028:	4a0c      	ldr	r2, [pc, #48]	; (800705c <HAL_PCD_MspInit+0x94>)
 800702a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800702e:	6353      	str	r3, [r2, #52]	; 0x34
 8007030:	4b0a      	ldr	r3, [pc, #40]	; (800705c <HAL_PCD_MspInit+0x94>)
 8007032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4b07      	ldr	r3, [pc, #28]	; (800705c <HAL_PCD_MspInit+0x94>)
 800703e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007040:	4a06      	ldr	r2, [pc, #24]	; (800705c <HAL_PCD_MspInit+0x94>)
 8007042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007046:	6453      	str	r3, [r2, #68]	; 0x44
 8007048:	4b04      	ldr	r3, [pc, #16]	; (800705c <HAL_PCD_MspInit+0x94>)
 800704a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007050:	60bb      	str	r3, [r7, #8]
 8007052:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8007054:	bf00      	nop
 8007056:	3728      	adds	r7, #40	; 0x28
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	40023800 	.word	0x40023800
 8007060:	40020000 	.word	0x40020000

08007064 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08c      	sub	sp, #48	; 0x30
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800706c:	2300      	movs	r3, #0
 800706e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007070:	2300      	movs	r3, #0
 8007072:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8007074:	2200      	movs	r2, #0
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	2036      	movs	r0, #54	; 0x36
 800707a:	f001 f8df 	bl	800823c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800707e:	2036      	movs	r0, #54	; 0x36
 8007080:	f001 f8f8 	bl	8008274 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007084:	4b1f      	ldr	r3, [pc, #124]	; (8007104 <HAL_InitTick+0xa0>)
 8007086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007088:	4a1e      	ldr	r2, [pc, #120]	; (8007104 <HAL_InitTick+0xa0>)
 800708a:	f043 0310 	orr.w	r3, r3, #16
 800708e:	6413      	str	r3, [r2, #64]	; 0x40
 8007090:	4b1c      	ldr	r3, [pc, #112]	; (8007104 <HAL_InitTick+0xa0>)
 8007092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007094:	f003 0310 	and.w	r3, r3, #16
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800709c:	f107 0210 	add.w	r2, r7, #16
 80070a0:	f107 0314 	add.w	r3, r7, #20
 80070a4:	4611      	mov	r1, r2
 80070a6:	4618      	mov	r0, r3
 80070a8:	f003 fcd4 	bl	800aa54 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80070ac:	f003 fcaa 	bl	800aa04 <HAL_RCC_GetPCLK1Freq>
 80070b0:	4603      	mov	r3, r0
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80070b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b8:	4a13      	ldr	r2, [pc, #76]	; (8007108 <HAL_InitTick+0xa4>)
 80070ba:	fba2 2303 	umull	r2, r3, r2, r3
 80070be:	0c9b      	lsrs	r3, r3, #18
 80070c0:	3b01      	subs	r3, #1
 80070c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80070c4:	4b11      	ldr	r3, [pc, #68]	; (800710c <HAL_InitTick+0xa8>)
 80070c6:	4a12      	ldr	r2, [pc, #72]	; (8007110 <HAL_InitTick+0xac>)
 80070c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80070ca:	4b10      	ldr	r3, [pc, #64]	; (800710c <HAL_InitTick+0xa8>)
 80070cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80070d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80070d2:	4a0e      	ldr	r2, [pc, #56]	; (800710c <HAL_InitTick+0xa8>)
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80070d8:	4b0c      	ldr	r3, [pc, #48]	; (800710c <HAL_InitTick+0xa8>)
 80070da:	2200      	movs	r2, #0
 80070dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070de:	4b0b      	ldr	r3, [pc, #44]	; (800710c <HAL_InitTick+0xa8>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80070e4:	4809      	ldr	r0, [pc, #36]	; (800710c <HAL_InitTick+0xa8>)
 80070e6:	f004 fde9 	bl	800bcbc <HAL_TIM_Base_Init>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d104      	bne.n	80070fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80070f0:	4806      	ldr	r0, [pc, #24]	; (800710c <HAL_InitTick+0xa8>)
 80070f2:	f004 fe0f 	bl	800bd14 <HAL_TIM_Base_Start_IT>
 80070f6:	4603      	mov	r3, r0
 80070f8:	e000      	b.n	80070fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3730      	adds	r7, #48	; 0x30
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	40023800 	.word	0x40023800
 8007108:	431bde83 	.word	0x431bde83
 800710c:	200240d0 	.word	0x200240d0
 8007110:	40001000 	.word	0x40001000

08007114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007118:	e7fe      	b.n	8007118 <NMI_Handler+0x4>

0800711a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800711a:	b480      	push	{r7}
 800711c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800711e:	e7fe      	b.n	800711e <HardFault_Handler+0x4>

08007120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007120:	b480      	push	{r7}
 8007122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007124:	e7fe      	b.n	8007124 <MemManage_Handler+0x4>

08007126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007126:	b480      	push	{r7}
 8007128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800712a:	e7fe      	b.n	800712a <BusFault_Handler+0x4>

0800712c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007130:	e7fe      	b.n	8007130 <UsageFault_Handler+0x4>

08007132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007132:	b480      	push	{r7}
 8007134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007136:	bf00      	nop
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8007144:	2010      	movs	r0, #16
 8007146:	f001 fea1 	bl	8008e8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if(inputButtonSet>buttonPriority.back){
 800714a:	4b07      	ldr	r3, [pc, #28]	; (8007168 <EXTI4_IRQHandler+0x28>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	4b06      	ldr	r3, [pc, #24]	; (800716c <EXTI4_IRQHandler+0x2c>)
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	429a      	cmp	r2, r3
 8007156:	dd04      	ble.n	8007162 <EXTI4_IRQHandler+0x22>
	  inputButtonSet = buttonPriority.back;
 8007158:	4b04      	ldr	r3, [pc, #16]	; (800716c <EXTI4_IRQHandler+0x2c>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	b2da      	uxtb	r2, r3
 800715e:	4b02      	ldr	r3, [pc, #8]	; (8007168 <EXTI4_IRQHandler+0x28>)
 8007160:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI4_IRQn 1 */
}
 8007162:	bf00      	nop
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	200000bc 	.word	0x200000bc
 800716c:	20000178 	.word	0x20000178

08007170 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8007174:	4802      	ldr	r0, [pc, #8]	; (8007180 <DMA1_Stream0_IRQHandler+0x10>)
 8007176:	f001 fa2b 	bl	80085d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800717a:	bf00      	nop
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	20024014 	.word	0x20024014

08007184 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8007188:	4805      	ldr	r0, [pc, #20]	; (80071a0 <ADC_IRQHandler+0x1c>)
 800718a:	f000 fa37 	bl	80075fc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800718e:	4805      	ldr	r0, [pc, #20]	; (80071a4 <ADC_IRQHandler+0x20>)
 8007190:	f000 fa34 	bl	80075fc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8007194:	4804      	ldr	r0, [pc, #16]	; (80071a8 <ADC_IRQHandler+0x24>)
 8007196:	f000 fa31 	bl	80075fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800719a:	bf00      	nop
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20013284 	.word	0x20013284
 80071a4:	2001056c 	.word	0x2001056c
 80071a8:	200132d0 	.word	0x200132d0

080071ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint8_t buttonStates[3];
	buttonStates[0] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_5);
 80071b2:	2120      	movs	r1, #32
 80071b4:	482a      	ldr	r0, [pc, #168]	; (8007260 <EXTI9_5_IRQHandler+0xb4>)
 80071b6:	f001 fe1d 	bl	8008df4 <HAL_GPIO_ReadPin>
 80071ba:	4603      	mov	r3, r0
 80071bc:	713b      	strb	r3, [r7, #4]
	buttonStates[1] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_6);
 80071be:	2140      	movs	r1, #64	; 0x40
 80071c0:	4827      	ldr	r0, [pc, #156]	; (8007260 <EXTI9_5_IRQHandler+0xb4>)
 80071c2:	f001 fe17 	bl	8008df4 <HAL_GPIO_ReadPin>
 80071c6:	4603      	mov	r3, r0
 80071c8:	717b      	strb	r3, [r7, #5]
	buttonStates[2] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_7);
 80071ca:	2180      	movs	r1, #128	; 0x80
 80071cc:	4824      	ldr	r0, [pc, #144]	; (8007260 <EXTI9_5_IRQHandler+0xb4>)
 80071ce:	f001 fe11 	bl	8008df4 <HAL_GPIO_ReadPin>
 80071d2:	4603      	mov	r3, r0
 80071d4:	71bb      	strb	r3, [r7, #6]
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5)){ //up button
 80071d6:	4b23      	ldr	r3, [pc, #140]	; (8007264 <EXTI9_5_IRQHandler+0xb8>)
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00c      	beq.n	80071fc <EXTI9_5_IRQHandler+0x50>
		if(inputButtonSet > buttonPriority.up){
 80071e2:	4b21      	ldr	r3, [pc, #132]	; (8007268 <EXTI9_5_IRQHandler+0xbc>)
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	4b20      	ldr	r3, [pc, #128]	; (800726c <EXTI9_5_IRQHandler+0xc0>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	dd2a      	ble.n	8007246 <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.up;
 80071f0:	4b1e      	ldr	r3, [pc, #120]	; (800726c <EXTI9_5_IRQHandler+0xc0>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	4b1c      	ldr	r3, [pc, #112]	; (8007268 <EXTI9_5_IRQHandler+0xbc>)
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	e024      	b.n	8007246 <EXTI9_5_IRQHandler+0x9a>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6)){ //sel button
 80071fc:	4b19      	ldr	r3, [pc, #100]	; (8007264 <EXTI9_5_IRQHandler+0xb8>)
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00c      	beq.n	8007222 <EXTI9_5_IRQHandler+0x76>
		if(inputButtonSet > buttonPriority.sel){
 8007208:	4b17      	ldr	r3, [pc, #92]	; (8007268 <EXTI9_5_IRQHandler+0xbc>)
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	461a      	mov	r2, r3
 800720e:	4b17      	ldr	r3, [pc, #92]	; (800726c <EXTI9_5_IRQHandler+0xc0>)
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	429a      	cmp	r2, r3
 8007214:	dd17      	ble.n	8007246 <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.sel;
 8007216:	4b15      	ldr	r3, [pc, #84]	; (800726c <EXTI9_5_IRQHandler+0xc0>)
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	b2da      	uxtb	r2, r3
 800721c:	4b12      	ldr	r3, [pc, #72]	; (8007268 <EXTI9_5_IRQHandler+0xbc>)
 800721e:	701a      	strb	r2, [r3, #0]
 8007220:	e011      	b.n	8007246 <EXTI9_5_IRQHandler+0x9a>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7)){ //down button
 8007222:	4b10      	ldr	r3, [pc, #64]	; (8007264 <EXTI9_5_IRQHandler+0xb8>)
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00b      	beq.n	8007246 <EXTI9_5_IRQHandler+0x9a>
		if(inputButtonSet > buttonPriority.down){
 800722e:	4b0e      	ldr	r3, [pc, #56]	; (8007268 <EXTI9_5_IRQHandler+0xbc>)
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	461a      	mov	r2, r3
 8007234:	4b0d      	ldr	r3, [pc, #52]	; (800726c <EXTI9_5_IRQHandler+0xc0>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	429a      	cmp	r2, r3
 800723a:	dd04      	ble.n	8007246 <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.down;
 800723c:	4b0b      	ldr	r3, [pc, #44]	; (800726c <EXTI9_5_IRQHandler+0xc0>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	b2da      	uxtb	r2, r3
 8007242:	4b09      	ldr	r3, [pc, #36]	; (8007268 <EXTI9_5_IRQHandler+0xbc>)
 8007244:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8007246:	2020      	movs	r0, #32
 8007248:	f001 fe20 	bl	8008e8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800724c:	2040      	movs	r0, #64	; 0x40
 800724e:	f001 fe1d 	bl	8008e8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8007252:	2080      	movs	r0, #128	; 0x80
 8007254:	f001 fe1a 	bl	8008e8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007258:	bf00      	nop
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	40022800 	.word	0x40022800
 8007264:	40013c00 	.word	0x40013c00
 8007268:	200000bc 	.word	0x200000bc
 800726c:	20000178 	.word	0x20000178

08007270 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007274:	4802      	ldr	r0, [pc, #8]	; (8007280 <TIM6_DAC_IRQHandler+0x10>)
 8007276:	f004 fdac 	bl	800bdd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800727a:	bf00      	nop
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	200240d0 	.word	0x200240d0

08007284 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007288:	4805      	ldr	r0, [pc, #20]	; (80072a0 <DMA2_Stream0_IRQHandler+0x1c>)
 800728a:	f001 f9a1 	bl	80085d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc1);
 800728e:	4805      	ldr	r0, [pc, #20]	; (80072a4 <DMA2_Stream0_IRQHandler+0x20>)
 8007290:	f000 fbe4 	bl	8007a5c <HAL_ADC_Stop_DMA>
  adcRestart[0]=1;
 8007294:	4b04      	ldr	r3, [pc, #16]	; (80072a8 <DMA2_Stream0_IRQHandler+0x24>)
 8007296:	2201      	movs	r2, #1
 8007298:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800729a:	bf00      	nop
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20013318 	.word	0x20013318
 80072a4:	20013284 	.word	0x20013284
 80072a8:	20010ab0 	.word	0x20010ab0

080072ac <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80072b0:	4805      	ldr	r0, [pc, #20]	; (80072c8 <DMA2_Stream1_IRQHandler+0x1c>)
 80072b2:	f001 f98d 	bl	80085d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 80072b6:	4805      	ldr	r0, [pc, #20]	; (80072cc <DMA2_Stream1_IRQHandler+0x20>)
 80072b8:	f000 fbd0 	bl	8007a5c <HAL_ADC_Stop_DMA>
  adcRestart[2]=1;
 80072bc:	4b04      	ldr	r3, [pc, #16]	; (80072d0 <DMA2_Stream1_IRQHandler+0x24>)
 80072be:	2201      	movs	r2, #1
 80072c0:	709a      	strb	r2, [r3, #2]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80072c2:	bf00      	nop
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20010a50 	.word	0x20010a50
 80072cc:	200132d0 	.word	0x200132d0
 80072d0:	20010ab0 	.word	0x20010ab0

080072d4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80072d8:	4805      	ldr	r0, [pc, #20]	; (80072f0 <DMA2_Stream2_IRQHandler+0x1c>)
 80072da:	f001 f979 	bl	80085d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc2);
 80072de:	4805      	ldr	r0, [pc, #20]	; (80072f4 <DMA2_Stream2_IRQHandler+0x20>)
 80072e0:	f000 fbbc 	bl	8007a5c <HAL_ADC_Stop_DMA>
  adcRestart[1]=1;
 80072e4:	4b04      	ldr	r3, [pc, #16]	; (80072f8 <DMA2_Stream2_IRQHandler+0x24>)
 80072e6:	2201      	movs	r2, #1
 80072e8:	705a      	strb	r2, [r3, #1]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80072ea:	bf00      	nop
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20023fb4 	.word	0x20023fb4
 80072f4:	2001056c 	.word	0x2001056c
 80072f8:	20010ab0 	.word	0x20010ab0

080072fc <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8007300:	4802      	ldr	r0, [pc, #8]	; (800730c <SPI4_IRQHandler+0x10>)
 8007302:	f004 fa9f 	bl	800b844 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8007306:	bf00      	nop
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20010340 	.word	0x20010340

08007310 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800731c:	2300      	movs	r3, #0
 800731e:	617b      	str	r3, [r7, #20]
 8007320:	e00a      	b.n	8007338 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007322:	f3af 8000 	nop.w
 8007326:	4601      	mov	r1, r0
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	60ba      	str	r2, [r7, #8]
 800732e:	b2ca      	uxtb	r2, r1
 8007330:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	3301      	adds	r3, #1
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	429a      	cmp	r2, r3
 800733e:	dbf0      	blt.n	8007322 <_read+0x12>
	}

return len;
 8007340:	687b      	ldr	r3, [r7, #4]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b086      	sub	sp, #24
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007356:	2300      	movs	r3, #0
 8007358:	617b      	str	r3, [r7, #20]
 800735a:	e009      	b.n	8007370 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	60ba      	str	r2, [r7, #8]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	4618      	mov	r0, r3
 8007366:	f7fb fd99 	bl	8002e9c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	3301      	adds	r3, #1
 800736e:	617b      	str	r3, [r7, #20]
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	429a      	cmp	r2, r3
 8007376:	dbf1      	blt.n	800735c <_write+0x12>
	}
	return len;
 8007378:	687b      	ldr	r3, [r7, #4]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <_close>:

int _close(int file)
{
 8007382:	b480      	push	{r7}
 8007384:	b083      	sub	sp, #12
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
	return -1;
 800738a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800738e:	4618      	mov	r0, r3
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80073aa:	605a      	str	r2, [r3, #4]
	return 0;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <_isatty>:

int _isatty(int file)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
	return 1;
 80073c2:	2301      	movs	r3, #1
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
	return 0;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
	...

080073ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80073f4:	4a14      	ldr	r2, [pc, #80]	; (8007448 <_sbrk+0x5c>)
 80073f6:	4b15      	ldr	r3, [pc, #84]	; (800744c <_sbrk+0x60>)
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007400:	4b13      	ldr	r3, [pc, #76]	; (8007450 <_sbrk+0x64>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d102      	bne.n	800740e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007408:	4b11      	ldr	r3, [pc, #68]	; (8007450 <_sbrk+0x64>)
 800740a:	4a12      	ldr	r2, [pc, #72]	; (8007454 <_sbrk+0x68>)
 800740c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800740e:	4b10      	ldr	r3, [pc, #64]	; (8007450 <_sbrk+0x64>)
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4413      	add	r3, r2
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	429a      	cmp	r2, r3
 800741a:	d207      	bcs.n	800742c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800741c:	f009 fa76 	bl	801090c <__errno>
 8007420:	4602      	mov	r2, r0
 8007422:	230c      	movs	r3, #12
 8007424:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007426:	f04f 33ff 	mov.w	r3, #4294967295
 800742a:	e009      	b.n	8007440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800742c:	4b08      	ldr	r3, [pc, #32]	; (8007450 <_sbrk+0x64>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007432:	4b07      	ldr	r3, [pc, #28]	; (8007450 <_sbrk+0x64>)
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4413      	add	r3, r2
 800743a:	4a05      	ldr	r2, [pc, #20]	; (8007450 <_sbrk+0x64>)
 800743c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800743e:	68fb      	ldr	r3, [r7, #12]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	20080000 	.word	0x20080000
 800744c:	00000400 	.word	0x00000400
 8007450:	200032d4 	.word	0x200032d4
 8007454:	20024158 	.word	0x20024158

08007458 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007458:	b480      	push	{r7}
 800745a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800745c:	4b08      	ldr	r3, [pc, #32]	; (8007480 <SystemInit+0x28>)
 800745e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007462:	4a07      	ldr	r2, [pc, #28]	; (8007480 <SystemInit+0x28>)
 8007464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800746c:	4b04      	ldr	r3, [pc, #16]	; (8007480 <SystemInit+0x28>)
 800746e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007472:	609a      	str	r2, [r3, #8]
#endif
}
 8007474:	bf00      	nop
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	e000ed00 	.word	0xe000ed00

08007484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80074bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007488:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800748a:	e003      	b.n	8007494 <LoopCopyDataInit>

0800748c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800748c:	4b0c      	ldr	r3, [pc, #48]	; (80074c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800748e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007490:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007492:	3104      	adds	r1, #4

08007494 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007494:	480b      	ldr	r0, [pc, #44]	; (80074c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007496:	4b0c      	ldr	r3, [pc, #48]	; (80074c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007498:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800749a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800749c:	d3f6      	bcc.n	800748c <CopyDataInit>
  ldr  r2, =_sbss
 800749e:	4a0b      	ldr	r2, [pc, #44]	; (80074cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80074a0:	e002      	b.n	80074a8 <LoopFillZerobss>

080074a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80074a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80074a4:	f842 3b04 	str.w	r3, [r2], #4

080074a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80074a8:	4b09      	ldr	r3, [pc, #36]	; (80074d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80074aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80074ac:	d3f9      	bcc.n	80074a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80074ae:	f7ff ffd3 	bl	8007458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80074b2:	f009 fa31 	bl	8010918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80074b6:	f7fa fc21 	bl	8001cfc <main>
  bx  lr    
 80074ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80074bc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80074c0:	08015c70 	.word	0x08015c70
  ldr  r0, =_sdata
 80074c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80074c8:	20000368 	.word	0x20000368
  ldr  r2, =_sbss
 80074cc:	20000368 	.word	0x20000368
  ldr  r3, = _ebss
 80074d0:	20024158 	.word	0x20024158

080074d4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80074d4:	e7fe      	b.n	80074d4 <CAN1_RX0_IRQHandler>

080074d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80074da:	2003      	movs	r0, #3
 80074dc:	f000 fea3 	bl	8008226 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80074e0:	2000      	movs	r0, #0
 80074e2:	f7ff fdbf 	bl	8007064 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80074e6:	f7ff f81f 	bl	8006528 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80074f0:	b480      	push	{r7}
 80074f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80074f4:	4b06      	ldr	r3, [pc, #24]	; (8007510 <HAL_IncTick+0x20>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	461a      	mov	r2, r3
 80074fa:	4b06      	ldr	r3, [pc, #24]	; (8007514 <HAL_IncTick+0x24>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4413      	add	r3, r2
 8007500:	4a04      	ldr	r2, [pc, #16]	; (8007514 <HAL_IncTick+0x24>)
 8007502:	6013      	str	r3, [r2, #0]
}
 8007504:	bf00      	nop
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	20000190 	.word	0x20000190
 8007514:	20024110 	.word	0x20024110

08007518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007518:	b480      	push	{r7}
 800751a:	af00      	add	r7, sp, #0
  return uwTick;
 800751c:	4b03      	ldr	r3, [pc, #12]	; (800752c <HAL_GetTick+0x14>)
 800751e:	681b      	ldr	r3, [r3, #0]
}
 8007520:	4618      	mov	r0, r3
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	20024110 	.word	0x20024110

08007530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007538:	f7ff ffee 	bl	8007518 <HAL_GetTick>
 800753c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007548:	d005      	beq.n	8007556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800754a:	4b09      	ldr	r3, [pc, #36]	; (8007570 <HAL_Delay+0x40>)
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4413      	add	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007556:	bf00      	nop
 8007558:	f7ff ffde 	bl	8007518 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	429a      	cmp	r2, r3
 8007566:	d8f7      	bhi.n	8007558 <HAL_Delay+0x28>
  {
  }
}
 8007568:	bf00      	nop
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	20000190 	.word	0x20000190

08007574 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e031      	b.n	80075ee <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d109      	bne.n	80075a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7fe fff0 	bl	8006578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	f003 0310 	and.w	r3, r3, #16
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d116      	bne.n	80075e0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075b6:	4b10      	ldr	r3, [pc, #64]	; (80075f8 <HAL_ADC_Init+0x84>)
 80075b8:	4013      	ands	r3, r2
 80075ba:	f043 0202 	orr.w	r2, r3, #2
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fbfc 	bl	8007dc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	f023 0303 	bic.w	r3, r3, #3
 80075d6:	f043 0201 	orr.w	r2, r3, #1
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	641a      	str	r2, [r3, #64]	; 0x40
 80075de:	e001      	b.n	80075e4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	ffffeefd 	.word	0xffffeefd

080075fc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	2300      	movs	r3, #0
 800760a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0302 	and.w	r3, r3, #2
 8007616:	2b02      	cmp	r3, #2
 8007618:	bf0c      	ite	eq
 800761a:	2301      	moveq	r3, #1
 800761c:	2300      	movne	r3, #0
 800761e:	b2db      	uxtb	r3, r3
 8007620:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f003 0320 	and.w	r3, r3, #32
 800762c:	2b20      	cmp	r3, #32
 800762e:	bf0c      	ite	eq
 8007630:	2301      	moveq	r3, #1
 8007632:	2300      	movne	r3, #0
 8007634:	b2db      	uxtb	r3, r3
 8007636:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d049      	beq.n	80076d2 <HAL_ADC_IRQHandler+0xd6>
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d046      	beq.n	80076d2 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	f003 0310 	and.w	r3, r3, #16
 800764c:	2b00      	cmp	r3, #0
 800764e:	d105      	bne.n	800765c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007654:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d12b      	bne.n	80076c2 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800766e:	2b00      	cmp	r3, #0
 8007670:	d127      	bne.n	80076c2 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800767c:	2b00      	cmp	r3, #0
 800767e:	d006      	beq.n	800768e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800768a:	2b00      	cmp	r3, #0
 800768c:	d119      	bne.n	80076c2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 0220 	bic.w	r2, r2, #32
 800769c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d105      	bne.n	80076c2 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	f043 0201 	orr.w	r2, r3, #1
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7fc fb92 	bl	8003dec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f06f 0212 	mvn.w	r2, #18
 80076d0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b04      	cmp	r3, #4
 80076de:	bf0c      	ite	eq
 80076e0:	2301      	moveq	r3, #1
 80076e2:	2300      	movne	r3, #0
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f2:	2b80      	cmp	r3, #128	; 0x80
 80076f4:	bf0c      	ite	eq
 80076f6:	2301      	moveq	r3, #1
 80076f8:	2300      	movne	r3, #0
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d057      	beq.n	80077b4 <HAL_ADC_IRQHandler+0x1b8>
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d054      	beq.n	80077b4 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	f003 0310 	and.w	r3, r3, #16
 8007712:	2b00      	cmp	r3, #0
 8007714:	d105      	bne.n	8007722 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d139      	bne.n	80077a4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800773a:	2b00      	cmp	r3, #0
 800773c:	d006      	beq.n	800774c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8007748:	2b00      	cmp	r3, #0
 800774a:	d12b      	bne.n	80077a4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8007756:	2b00      	cmp	r3, #0
 8007758:	d124      	bne.n	80077a4 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007764:	2b00      	cmp	r3, #0
 8007766:	d11d      	bne.n	80077a4 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800776c:	2b00      	cmp	r3, #0
 800776e:	d119      	bne.n	80077a4 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800777e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007784:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007794:	2b00      	cmp	r3, #0
 8007796:	d105      	bne.n	80077a4 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779c:	f043 0201 	orr.w	r2, r3, #1
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fc87 	bl	80080b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f06f 020c 	mvn.w	r2, #12
 80077b2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b01      	cmp	r3, #1
 80077c0:	bf0c      	ite	eq
 80077c2:	2301      	moveq	r3, #1
 80077c4:	2300      	movne	r3, #0
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d4:	2b40      	cmp	r3, #64	; 0x40
 80077d6:	bf0c      	ite	eq
 80077d8:	2301      	moveq	r3, #1
 80077da:	2300      	movne	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d017      	beq.n	8007816 <HAL_ADC_IRQHandler+0x21a>
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d014      	beq.n	8007816 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d10d      	bne.n	8007816 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f97c 	bl	8007b04 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f06f 0201 	mvn.w	r2, #1
 8007814:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0320 	and.w	r3, r3, #32
 8007820:	2b20      	cmp	r3, #32
 8007822:	bf0c      	ite	eq
 8007824:	2301      	moveq	r3, #1
 8007826:	2300      	movne	r3, #0
 8007828:	b2db      	uxtb	r3, r3
 800782a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007836:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800783a:	bf0c      	ite	eq
 800783c:	2301      	moveq	r3, #1
 800783e:	2300      	movne	r3, #0
 8007840:	b2db      	uxtb	r3, r3
 8007842:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d015      	beq.n	8007876 <HAL_ADC_IRQHandler+0x27a>
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d012      	beq.n	8007876 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007854:	f043 0202 	orr.w	r2, r3, #2
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f06f 0220 	mvn.w	r2, #32
 8007864:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f956 	bl	8007b18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0220 	mvn.w	r2, #32
 8007874:	601a      	str	r2, [r3, #0]
  }
}
 8007876:	bf00      	nop
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800788c:	2300      	movs	r3, #0
 800788e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <HAL_ADC_Start_DMA+0x1e>
 800789a:	2302      	movs	r3, #2
 800789c:	e0c7      	b.n	8007a2e <HAL_ADC_Start_DMA+0x1ae>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d018      	beq.n	80078e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689a      	ldr	r2, [r3, #8]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 0201 	orr.w	r2, r2, #1
 80078c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80078c4:	4b5c      	ldr	r3, [pc, #368]	; (8007a38 <HAL_ADC_Start_DMA+0x1b8>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a5c      	ldr	r2, [pc, #368]	; (8007a3c <HAL_ADC_Start_DMA+0x1bc>)
 80078ca:	fba2 2303 	umull	r2, r3, r2, r3
 80078ce:	0c9a      	lsrs	r2, r3, #18
 80078d0:	4613      	mov	r3, r2
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	4413      	add	r3, r2
 80078d6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80078d8:	e002      	b.n	80078e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	3b01      	subs	r3, #1
 80078de:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1f9      	bne.n	80078da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	f040 809b 	bne.w	8007a2c <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078fa:	4b51      	ldr	r3, [pc, #324]	; (8007a40 <HAL_ADC_Start_DMA+0x1c0>)
 80078fc:	4013      	ands	r3, r2
 80078fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007910:	2b00      	cmp	r3, #0
 8007912:	d007      	beq.n	8007924 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007918:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800791c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800792c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007930:	d106      	bne.n	8007940 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007936:	f023 0206 	bic.w	r2, r3, #6
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	645a      	str	r2, [r3, #68]	; 0x44
 800793e:	e002      	b.n	8007946 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007952:	4a3c      	ldr	r2, [pc, #240]	; (8007a44 <HAL_ADC_Start_DMA+0x1c4>)
 8007954:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795a:	4a3b      	ldr	r2, [pc, #236]	; (8007a48 <HAL_ADC_Start_DMA+0x1c8>)
 800795c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007962:	4a3a      	ldr	r2, [pc, #232]	; (8007a4c <HAL_ADC_Start_DMA+0x1cc>)
 8007964:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800796e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800797e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800798e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	334c      	adds	r3, #76	; 0x4c
 800799a:	4619      	mov	r1, r3
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f000 fd24 	bl	80083ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80079a4:	4b2a      	ldr	r3, [pc, #168]	; (8007a50 <HAL_ADC_Start_DMA+0x1d0>)
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f003 031f 	and.w	r3, r3, #31
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10f      	bne.n	80079d0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d136      	bne.n	8007a2c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80079cc:	609a      	str	r2, [r3, #8]
 80079ce:	e02d      	b.n	8007a2c <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a1f      	ldr	r2, [pc, #124]	; (8007a54 <HAL_ADC_Start_DMA+0x1d4>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d10e      	bne.n	80079f8 <HAL_ADC_Start_DMA+0x178>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d107      	bne.n	80079f8 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689a      	ldr	r2, [r3, #8]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80079f6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80079f8:	4b15      	ldr	r3, [pc, #84]	; (8007a50 <HAL_ADC_Start_DMA+0x1d0>)
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f003 0310 	and.w	r3, r3, #16
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d113      	bne.n	8007a2c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a13      	ldr	r2, [pc, #76]	; (8007a58 <HAL_ADC_Start_DMA+0x1d8>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d10e      	bne.n	8007a2c <HAL_ADC_Start_DMA+0x1ac>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d107      	bne.n	8007a2c <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689a      	ldr	r2, [r3, #8]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007a2a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20000188 	.word	0x20000188
 8007a3c:	431bde83 	.word	0x431bde83
 8007a40:	fffff8fe 	.word	0xfffff8fe
 8007a44:	08007fb5 	.word	0x08007fb5
 8007a48:	0800806f 	.word	0x0800806f
 8007a4c:	0800808b 	.word	0x0800808b
 8007a50:	40012300 	.word	0x40012300
 8007a54:	40012000 	.word	0x40012000
 8007a58:	40012200 	.word	0x40012200

08007a5c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d101      	bne.n	8007a76 <HAL_ADC_Stop_DMA+0x1a>
 8007a72:	2302      	movs	r3, #2
 8007a74:	e036      	b.n	8007ae4 <HAL_ADC_Stop_DMA+0x88>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	689a      	ldr	r2, [r3, #8]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0201 	bic.w	r2, r2, #1
 8007a8c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d11e      	bne.n	8007ada <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	689a      	ldr	r2, [r3, #8]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007aaa:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 fcfb 	bl	80084ac <HAL_DMA_Abort>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007ac8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ace:	4b07      	ldr	r3, [pc, #28]	; (8007aec <HAL_ADC_Stop_DMA+0x90>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	f043 0201 	orr.w	r2, r3, #1
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	ffffeefe 	.word	0xffffeefe

08007af0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d101      	bne.n	8007b48 <HAL_ADC_ConfigChannel+0x1c>
 8007b44:	2302      	movs	r3, #2
 8007b46:	e12a      	b.n	8007d9e <HAL_ADC_ConfigChannel+0x272>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b09      	cmp	r3, #9
 8007b56:	d93a      	bls.n	8007bce <HAL_ADC_ConfigChannel+0xa2>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b60:	d035      	beq.n	8007bce <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68d9      	ldr	r1, [r3, #12]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	461a      	mov	r2, r3
 8007b70:	4613      	mov	r3, r2
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	4413      	add	r3, r2
 8007b76:	3b1e      	subs	r3, #30
 8007b78:	2207      	movs	r2, #7
 8007b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7e:	43da      	mvns	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	400a      	ands	r2, r1
 8007b86:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a87      	ldr	r2, [pc, #540]	; (8007dac <HAL_ADC_ConfigChannel+0x280>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d10a      	bne.n	8007ba8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68d9      	ldr	r1, [r3, #12]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	061a      	lsls	r2, r3, #24
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007ba6:	e035      	b.n	8007c14 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68d9      	ldr	r1, [r3, #12]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	689a      	ldr	r2, [r3, #8]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	4618      	mov	r0, r3
 8007bba:	4603      	mov	r3, r0
 8007bbc:	005b      	lsls	r3, r3, #1
 8007bbe:	4403      	add	r3, r0
 8007bc0:	3b1e      	subs	r3, #30
 8007bc2:	409a      	lsls	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007bcc:	e022      	b.n	8007c14 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6919      	ldr	r1, [r3, #16]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	461a      	mov	r2, r3
 8007bdc:	4613      	mov	r3, r2
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	4413      	add	r3, r2
 8007be2:	2207      	movs	r2, #7
 8007be4:	fa02 f303 	lsl.w	r3, r2, r3
 8007be8:	43da      	mvns	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	400a      	ands	r2, r1
 8007bf0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6919      	ldr	r1, [r3, #16]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	4618      	mov	r0, r3
 8007c04:	4603      	mov	r3, r0
 8007c06:	005b      	lsls	r3, r3, #1
 8007c08:	4403      	add	r3, r0
 8007c0a:	409a      	lsls	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	430a      	orrs	r2, r1
 8007c12:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	2b06      	cmp	r3, #6
 8007c1a:	d824      	bhi.n	8007c66 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	4613      	mov	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	3b05      	subs	r3, #5
 8007c2e:	221f      	movs	r2, #31
 8007c30:	fa02 f303 	lsl.w	r3, r2, r3
 8007c34:	43da      	mvns	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	400a      	ands	r2, r1
 8007c3c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	4613      	mov	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	3b05      	subs	r3, #5
 8007c58:	fa00 f203 	lsl.w	r2, r0, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	430a      	orrs	r2, r1
 8007c62:	635a      	str	r2, [r3, #52]	; 0x34
 8007c64:	e04c      	b.n	8007d00 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	2b0c      	cmp	r3, #12
 8007c6c:	d824      	bhi.n	8007cb8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	3b23      	subs	r3, #35	; 0x23
 8007c80:	221f      	movs	r2, #31
 8007c82:	fa02 f303 	lsl.w	r3, r2, r3
 8007c86:	43da      	mvns	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	400a      	ands	r2, r1
 8007c8e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	3b23      	subs	r3, #35	; 0x23
 8007caa:	fa00 f203 	lsl.w	r2, r0, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8007cb6:	e023      	b.n	8007d00 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685a      	ldr	r2, [r3, #4]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	3b41      	subs	r3, #65	; 0x41
 8007cca:	221f      	movs	r2, #31
 8007ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd0:	43da      	mvns	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	400a      	ands	r2, r1
 8007cd8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	4613      	mov	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	3b41      	subs	r3, #65	; 0x41
 8007cf4:	fa00 f203 	lsl.w	r2, r0, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a2a      	ldr	r2, [pc, #168]	; (8007db0 <HAL_ADC_ConfigChannel+0x284>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d10a      	bne.n	8007d20 <HAL_ADC_ConfigChannel+0x1f4>
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d12:	d105      	bne.n	8007d20 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007d14:	4b27      	ldr	r3, [pc, #156]	; (8007db4 <HAL_ADC_ConfigChannel+0x288>)
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	4a26      	ldr	r2, [pc, #152]	; (8007db4 <HAL_ADC_ConfigChannel+0x288>)
 8007d1a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007d1e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a22      	ldr	r2, [pc, #136]	; (8007db0 <HAL_ADC_ConfigChannel+0x284>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d109      	bne.n	8007d3e <HAL_ADC_ConfigChannel+0x212>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b12      	cmp	r3, #18
 8007d30:	d105      	bne.n	8007d3e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8007d32:	4b20      	ldr	r3, [pc, #128]	; (8007db4 <HAL_ADC_ConfigChannel+0x288>)
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	4a1f      	ldr	r2, [pc, #124]	; (8007db4 <HAL_ADC_ConfigChannel+0x288>)
 8007d38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d3c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a1b      	ldr	r2, [pc, #108]	; (8007db0 <HAL_ADC_ConfigChannel+0x284>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d125      	bne.n	8007d94 <HAL_ADC_ConfigChannel+0x268>
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a17      	ldr	r2, [pc, #92]	; (8007dac <HAL_ADC_ConfigChannel+0x280>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d003      	beq.n	8007d5a <HAL_ADC_ConfigChannel+0x22e>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b11      	cmp	r3, #17
 8007d58:	d11c      	bne.n	8007d94 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007d5a:	4b16      	ldr	r3, [pc, #88]	; (8007db4 <HAL_ADC_ConfigChannel+0x288>)
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	4a15      	ldr	r2, [pc, #84]	; (8007db4 <HAL_ADC_ConfigChannel+0x288>)
 8007d60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d64:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a10      	ldr	r2, [pc, #64]	; (8007dac <HAL_ADC_ConfigChannel+0x280>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d111      	bne.n	8007d94 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007d70:	4b11      	ldr	r3, [pc, #68]	; (8007db8 <HAL_ADC_ConfigChannel+0x28c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a11      	ldr	r2, [pc, #68]	; (8007dbc <HAL_ADC_ConfigChannel+0x290>)
 8007d76:	fba2 2303 	umull	r2, r3, r2, r3
 8007d7a:	0c9a      	lsrs	r2, r3, #18
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007d86:	e002      	b.n	8007d8e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1f9      	bne.n	8007d88 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	10000012 	.word	0x10000012
 8007db0:	40012000 	.word	0x40012000
 8007db4:	40012300 	.word	0x40012300
 8007db8:	20000188 	.word	0x20000188
 8007dbc:	431bde83 	.word	0x431bde83

08007dc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007dc8:	4b78      	ldr	r3, [pc, #480]	; (8007fac <ADC_Init+0x1ec>)
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	4a77      	ldr	r2, [pc, #476]	; (8007fac <ADC_Init+0x1ec>)
 8007dce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007dd2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007dd4:	4b75      	ldr	r3, [pc, #468]	; (8007fac <ADC_Init+0x1ec>)
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	4973      	ldr	r1, [pc, #460]	; (8007fac <ADC_Init+0x1ec>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007df0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6859      	ldr	r1, [r3, #4]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	021a      	lsls	r2, r3, #8
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007e14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6859      	ldr	r1, [r3, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	689a      	ldr	r2, [r3, #8]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	6899      	ldr	r1, [r3, #8]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4e:	4a58      	ldr	r2, [pc, #352]	; (8007fb0 <ADC_Init+0x1f0>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d022      	beq.n	8007e9a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	689a      	ldr	r2, [r3, #8]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6899      	ldr	r1, [r3, #8]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007e84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6899      	ldr	r1, [r3, #8]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	609a      	str	r2, [r3, #8]
 8007e98:	e00f      	b.n	8007eba <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007eb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689a      	ldr	r2, [r3, #8]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f022 0202 	bic.w	r2, r2, #2
 8007ec8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6899      	ldr	r1, [r3, #8]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	005a      	lsls	r2, r3, #1
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d01b      	beq.n	8007f20 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685a      	ldr	r2, [r3, #4]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ef6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007f06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6859      	ldr	r1, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	3b01      	subs	r3, #1
 8007f14:	035a      	lsls	r2, r3, #13
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	605a      	str	r2, [r3, #4]
 8007f1e:	e007      	b.n	8007f30 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	051a      	lsls	r2, r3, #20
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007f64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6899      	ldr	r1, [r3, #8]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f72:	025a      	lsls	r2, r3, #9
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	430a      	orrs	r2, r1
 8007f7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689a      	ldr	r2, [r3, #8]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6899      	ldr	r1, [r3, #8]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	029a      	lsls	r2, r3, #10
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	430a      	orrs	r2, r1
 8007f9e:	609a      	str	r2, [r3, #8]
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	40012300 	.word	0x40012300
 8007fb0:	0f000001 	.word	0x0f000001

08007fb4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d13c      	bne.n	8008048 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d12b      	bne.n	8008040 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d127      	bne.n	8008040 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d006      	beq.n	800800c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008008:	2b00      	cmp	r3, #0
 800800a:	d119      	bne.n	8008040 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	685a      	ldr	r2, [r3, #4]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0220 	bic.w	r2, r2, #32
 800801a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008020:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d105      	bne.n	8008040 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008038:	f043 0201 	orr.w	r2, r3, #1
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f7fb fed3 	bl	8003dec <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008046:	e00e      	b.n	8008066 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804c:	f003 0310 	and.w	r3, r3, #16
 8008050:	2b00      	cmp	r3, #0
 8008052:	d003      	beq.n	800805c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f7ff fd5f 	bl	8007b18 <HAL_ADC_ErrorCallback>
}
 800805a:	e004      	b.n	8008066 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	4798      	blx	r3
}
 8008066:	bf00      	nop
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f7ff fd37 	bl	8007af0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b084      	sub	sp, #16
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008096:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2240      	movs	r2, #64	; 0x40
 800809c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a2:	f043 0204 	orr.w	r2, r3, #4
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f7ff fd34 	bl	8007b18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80080b0:	bf00      	nop
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f003 0307 	and.w	r3, r3, #7
 80080da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80080dc:	4b0b      	ldr	r3, [pc, #44]	; (800810c <__NVIC_SetPriorityGrouping+0x40>)
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80080e8:	4013      	ands	r3, r2
 80080ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80080f4:	4b06      	ldr	r3, [pc, #24]	; (8008110 <__NVIC_SetPriorityGrouping+0x44>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80080fa:	4a04      	ldr	r2, [pc, #16]	; (800810c <__NVIC_SetPriorityGrouping+0x40>)
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	60d3      	str	r3, [r2, #12]
}
 8008100:	bf00      	nop
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	e000ed00 	.word	0xe000ed00
 8008110:	05fa0000 	.word	0x05fa0000

08008114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008114:	b480      	push	{r7}
 8008116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008118:	4b04      	ldr	r3, [pc, #16]	; (800812c <__NVIC_GetPriorityGrouping+0x18>)
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	0a1b      	lsrs	r3, r3, #8
 800811e:	f003 0307 	and.w	r3, r3, #7
}
 8008122:	4618      	mov	r0, r3
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	e000ed00 	.word	0xe000ed00

08008130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800813a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800813e:	2b00      	cmp	r3, #0
 8008140:	db0b      	blt.n	800815a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008142:	79fb      	ldrb	r3, [r7, #7]
 8008144:	f003 021f 	and.w	r2, r3, #31
 8008148:	4907      	ldr	r1, [pc, #28]	; (8008168 <__NVIC_EnableIRQ+0x38>)
 800814a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800814e:	095b      	lsrs	r3, r3, #5
 8008150:	2001      	movs	r0, #1
 8008152:	fa00 f202 	lsl.w	r2, r0, r2
 8008156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800815a:	bf00      	nop
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	e000e100 	.word	0xe000e100

0800816c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	4603      	mov	r3, r0
 8008174:	6039      	str	r1, [r7, #0]
 8008176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800817c:	2b00      	cmp	r3, #0
 800817e:	db0a      	blt.n	8008196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	b2da      	uxtb	r2, r3
 8008184:	490c      	ldr	r1, [pc, #48]	; (80081b8 <__NVIC_SetPriority+0x4c>)
 8008186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800818a:	0112      	lsls	r2, r2, #4
 800818c:	b2d2      	uxtb	r2, r2
 800818e:	440b      	add	r3, r1
 8008190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008194:	e00a      	b.n	80081ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	b2da      	uxtb	r2, r3
 800819a:	4908      	ldr	r1, [pc, #32]	; (80081bc <__NVIC_SetPriority+0x50>)
 800819c:	79fb      	ldrb	r3, [r7, #7]
 800819e:	f003 030f 	and.w	r3, r3, #15
 80081a2:	3b04      	subs	r3, #4
 80081a4:	0112      	lsls	r2, r2, #4
 80081a6:	b2d2      	uxtb	r2, r2
 80081a8:	440b      	add	r3, r1
 80081aa:	761a      	strb	r2, [r3, #24]
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	e000e100 	.word	0xe000e100
 80081bc:	e000ed00 	.word	0xe000ed00

080081c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b089      	sub	sp, #36	; 0x24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f003 0307 	and.w	r3, r3, #7
 80081d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	f1c3 0307 	rsb	r3, r3, #7
 80081da:	2b04      	cmp	r3, #4
 80081dc:	bf28      	it	cs
 80081de:	2304      	movcs	r3, #4
 80081e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	3304      	adds	r3, #4
 80081e6:	2b06      	cmp	r3, #6
 80081e8:	d902      	bls.n	80081f0 <NVIC_EncodePriority+0x30>
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	3b03      	subs	r3, #3
 80081ee:	e000      	b.n	80081f2 <NVIC_EncodePriority+0x32>
 80081f0:	2300      	movs	r3, #0
 80081f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081f4:	f04f 32ff 	mov.w	r2, #4294967295
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	fa02 f303 	lsl.w	r3, r2, r3
 80081fe:	43da      	mvns	r2, r3
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	401a      	ands	r2, r3
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008208:	f04f 31ff 	mov.w	r1, #4294967295
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	fa01 f303 	lsl.w	r3, r1, r3
 8008212:	43d9      	mvns	r1, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008218:	4313      	orrs	r3, r2
         );
}
 800821a:	4618      	mov	r0, r3
 800821c:	3724      	adds	r7, #36	; 0x24
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff ff4c 	bl	80080cc <__NVIC_SetPriorityGrouping>
}
 8008234:	bf00      	nop
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	4603      	mov	r3, r0
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
 8008248:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800824a:	2300      	movs	r3, #0
 800824c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800824e:	f7ff ff61 	bl	8008114 <__NVIC_GetPriorityGrouping>
 8008252:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	68b9      	ldr	r1, [r7, #8]
 8008258:	6978      	ldr	r0, [r7, #20]
 800825a:	f7ff ffb1 	bl	80081c0 <NVIC_EncodePriority>
 800825e:	4602      	mov	r2, r0
 8008260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008264:	4611      	mov	r1, r2
 8008266:	4618      	mov	r0, r3
 8008268:	f7ff ff80 	bl	800816c <__NVIC_SetPriority>
}
 800826c:	bf00      	nop
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	4603      	mov	r3, r0
 800827c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800827e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008282:	4618      	mov	r0, r3
 8008284:	f7ff ff54 	bl	8008130 <__NVIC_EnableIRQ>
}
 8008288:	bf00      	nop
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800829c:	f7ff f93c 	bl	8007518 <HAL_GetTick>
 80082a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e099      	b.n	80083e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f022 0201 	bic.w	r2, r2, #1
 80082ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082cc:	e00f      	b.n	80082ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80082ce:	f7ff f923 	bl	8007518 <HAL_GetTick>
 80082d2:	4602      	mov	r2, r0
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	2b05      	cmp	r3, #5
 80082da:	d908      	bls.n	80082ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2220      	movs	r2, #32
 80082e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2203      	movs	r2, #3
 80082e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e078      	b.n	80083e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0301 	and.w	r3, r3, #1
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e8      	bne.n	80082ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	4b38      	ldr	r3, [pc, #224]	; (80083e8 <HAL_DMA_Init+0x158>)
 8008308:	4013      	ands	r3, r2
 800830a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800831a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	4313      	orrs	r3, r2
 800833e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008344:	2b04      	cmp	r3, #4
 8008346:	d107      	bne.n	8008358 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008350:	4313      	orrs	r3, r2
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	4313      	orrs	r3, r2
 8008356:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	f023 0307 	bic.w	r3, r3, #7
 800836e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	697a      	ldr	r2, [r7, #20]
 8008376:	4313      	orrs	r3, r2
 8008378:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837e:	2b04      	cmp	r3, #4
 8008380:	d117      	bne.n	80083b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	4313      	orrs	r3, r2
 800838a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00e      	beq.n	80083b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fb09 	bl	80089ac <DMA_CheckFifoParam>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d008      	beq.n	80083b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2240      	movs	r2, #64	; 0x40
 80083a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80083ae:	2301      	movs	r3, #1
 80083b0:	e016      	b.n	80083e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fac0 	bl	8008940 <DMA_CalcBaseAndBitshift>
 80083c0:	4603      	mov	r3, r0
 80083c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083c8:	223f      	movs	r2, #63	; 0x3f
 80083ca:	409a      	lsls	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3718      	adds	r7, #24
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	e010803f 	.word	0xe010803f

080083ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008402:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800840a:	2b01      	cmp	r3, #1
 800840c:	d101      	bne.n	8008412 <HAL_DMA_Start_IT+0x26>
 800840e:	2302      	movs	r3, #2
 8008410:	e048      	b.n	80084a4 <HAL_DMA_Start_IT+0xb8>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2b01      	cmp	r3, #1
 8008424:	d137      	bne.n	8008496 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2202      	movs	r2, #2
 800842a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	68b9      	ldr	r1, [r7, #8]
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f000 fa52 	bl	80088e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008444:	223f      	movs	r2, #63	; 0x3f
 8008446:	409a      	lsls	r2, r3
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f042 0216 	orr.w	r2, r2, #22
 800845a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	695a      	ldr	r2, [r3, #20]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800846a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008470:	2b00      	cmp	r3, #0
 8008472:	d007      	beq.n	8008484 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f042 0208 	orr.w	r2, r2, #8
 8008482:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f042 0201 	orr.w	r2, r2, #1
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	e005      	b.n	80084a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800849e:	2302      	movs	r3, #2
 80084a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80084ba:	f7ff f82d 	bl	8007518 <HAL_GetTick>
 80084be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d008      	beq.n	80084de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2280      	movs	r2, #128	; 0x80
 80084d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e052      	b.n	8008584 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 0216 	bic.w	r2, r2, #22
 80084ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	695a      	ldr	r2, [r3, #20]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008502:	2b00      	cmp	r3, #0
 8008504:	d103      	bne.n	800850e <HAL_DMA_Abort+0x62>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800850a:	2b00      	cmp	r3, #0
 800850c:	d007      	beq.n	800851e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f022 0208 	bic.w	r2, r2, #8
 800851c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f022 0201 	bic.w	r2, r2, #1
 800852c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800852e:	e013      	b.n	8008558 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008530:	f7fe fff2 	bl	8007518 <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	2b05      	cmp	r3, #5
 800853c:	d90c      	bls.n	8008558 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2220      	movs	r2, #32
 8008542:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2203      	movs	r2, #3
 8008550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	e015      	b.n	8008584 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e4      	bne.n	8008530 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800856a:	223f      	movs	r2, #63	; 0x3f
 800856c:	409a      	lsls	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b02      	cmp	r3, #2
 800859e:	d004      	beq.n	80085aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2280      	movs	r2, #128	; 0x80
 80085a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e00c      	b.n	80085c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2205      	movs	r2, #5
 80085ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 0201 	bic.w	r2, r2, #1
 80085c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80085d8:	2300      	movs	r3, #0
 80085da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80085dc:	4b92      	ldr	r3, [pc, #584]	; (8008828 <HAL_DMA_IRQHandler+0x258>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a92      	ldr	r2, [pc, #584]	; (800882c <HAL_DMA_IRQHandler+0x25c>)
 80085e2:	fba2 2303 	umull	r2, r3, r2, r3
 80085e6:	0a9b      	lsrs	r3, r3, #10
 80085e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085fa:	2208      	movs	r2, #8
 80085fc:	409a      	lsls	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	4013      	ands	r3, r2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d01a      	beq.n	800863c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b00      	cmp	r3, #0
 8008612:	d013      	beq.n	800863c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 0204 	bic.w	r2, r2, #4
 8008622:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008628:	2208      	movs	r2, #8
 800862a:	409a      	lsls	r2, r3
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008634:	f043 0201 	orr.w	r2, r3, #1
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008640:	2201      	movs	r2, #1
 8008642:	409a      	lsls	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	4013      	ands	r3, r2
 8008648:	2b00      	cmp	r3, #0
 800864a:	d012      	beq.n	8008672 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00b      	beq.n	8008672 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800865e:	2201      	movs	r2, #1
 8008660:	409a      	lsls	r2, r3
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866a:	f043 0202 	orr.w	r2, r3, #2
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008676:	2204      	movs	r2, #4
 8008678:	409a      	lsls	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4013      	ands	r3, r2
 800867e:	2b00      	cmp	r3, #0
 8008680:	d012      	beq.n	80086a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0302 	and.w	r3, r3, #2
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00b      	beq.n	80086a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008694:	2204      	movs	r2, #4
 8008696:	409a      	lsls	r2, r3
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a0:	f043 0204 	orr.w	r2, r3, #4
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ac:	2210      	movs	r2, #16
 80086ae:	409a      	lsls	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4013      	ands	r3, r2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d043      	beq.n	8008740 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0308 	and.w	r3, r3, #8
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d03c      	beq.n	8008740 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ca:	2210      	movs	r2, #16
 80086cc:	409a      	lsls	r2, r3
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d018      	beq.n	8008712 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d108      	bne.n	8008700 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d024      	beq.n	8008740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	4798      	blx	r3
 80086fe:	e01f      	b.n	8008740 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008704:	2b00      	cmp	r3, #0
 8008706:	d01b      	beq.n	8008740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	4798      	blx	r3
 8008710:	e016      	b.n	8008740 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800871c:	2b00      	cmp	r3, #0
 800871e:	d107      	bne.n	8008730 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f022 0208 	bic.w	r2, r2, #8
 800872e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008744:	2220      	movs	r2, #32
 8008746:	409a      	lsls	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4013      	ands	r3, r2
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 808e 	beq.w	800886e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0310 	and.w	r3, r3, #16
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 8086 	beq.w	800886e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008766:	2220      	movs	r2, #32
 8008768:	409a      	lsls	r2, r3
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b05      	cmp	r3, #5
 8008778:	d136      	bne.n	80087e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f022 0216 	bic.w	r2, r2, #22
 8008788:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	695a      	ldr	r2, [r3, #20]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008798:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d103      	bne.n	80087aa <HAL_DMA_IRQHandler+0x1da>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d007      	beq.n	80087ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f022 0208 	bic.w	r2, r2, #8
 80087b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087be:	223f      	movs	r2, #63	; 0x3f
 80087c0:	409a      	lsls	r2, r3
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d07d      	beq.n	80088da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	4798      	blx	r3
        }
        return;
 80087e6:	e078      	b.n	80088da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d01c      	beq.n	8008830 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d108      	bne.n	8008816 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008808:	2b00      	cmp	r3, #0
 800880a:	d030      	beq.n	800886e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	4798      	blx	r3
 8008814:	e02b      	b.n	800886e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881a:	2b00      	cmp	r3, #0
 800881c:	d027      	beq.n	800886e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	4798      	blx	r3
 8008826:	e022      	b.n	800886e <HAL_DMA_IRQHandler+0x29e>
 8008828:	20000188 	.word	0x20000188
 800882c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10f      	bne.n	800885e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f022 0210 	bic.w	r2, r2, #16
 800884c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2201      	movs	r2, #1
 800885a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008862:	2b00      	cmp	r3, #0
 8008864:	d003      	beq.n	800886e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008872:	2b00      	cmp	r3, #0
 8008874:	d032      	beq.n	80088dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887a:	f003 0301 	and.w	r3, r3, #1
 800887e:	2b00      	cmp	r3, #0
 8008880:	d022      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2205      	movs	r2, #5
 8008886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f022 0201 	bic.w	r2, r2, #1
 8008898:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	3301      	adds	r3, #1
 800889e:	60bb      	str	r3, [r7, #8]
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d307      	bcc.n	80088b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0301 	and.w	r3, r3, #1
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1f2      	bne.n	800889a <HAL_DMA_IRQHandler+0x2ca>
 80088b4:	e000      	b.n	80088b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80088b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d005      	beq.n	80088dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	4798      	blx	r3
 80088d8:	e000      	b.n	80088dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80088da:	bf00      	nop
    }
  }
}
 80088dc:	3718      	adds	r7, #24
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop

080088e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008900:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	2b40      	cmp	r3, #64	; 0x40
 8008910:	d108      	bne.n	8008924 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008922:	e007      	b.n	8008934 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	60da      	str	r2, [r3, #12]
}
 8008934:	bf00      	nop
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	3b10      	subs	r3, #16
 8008950:	4a13      	ldr	r2, [pc, #76]	; (80089a0 <DMA_CalcBaseAndBitshift+0x60>)
 8008952:	fba2 2303 	umull	r2, r3, r2, r3
 8008956:	091b      	lsrs	r3, r3, #4
 8008958:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800895a:	4a12      	ldr	r2, [pc, #72]	; (80089a4 <DMA_CalcBaseAndBitshift+0x64>)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	4413      	add	r3, r2
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2b03      	cmp	r3, #3
 800896c:	d908      	bls.n	8008980 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	461a      	mov	r2, r3
 8008974:	4b0c      	ldr	r3, [pc, #48]	; (80089a8 <DMA_CalcBaseAndBitshift+0x68>)
 8008976:	4013      	ands	r3, r2
 8008978:	1d1a      	adds	r2, r3, #4
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	659a      	str	r2, [r3, #88]	; 0x58
 800897e:	e006      	b.n	800898e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	461a      	mov	r2, r3
 8008986:	4b08      	ldr	r3, [pc, #32]	; (80089a8 <DMA_CalcBaseAndBitshift+0x68>)
 8008988:	4013      	ands	r3, r2
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008992:	4618      	mov	r0, r3
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	aaaaaaab 	.word	0xaaaaaaab
 80089a4:	08015938 	.word	0x08015938
 80089a8:	fffffc00 	.word	0xfffffc00

080089ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d11f      	bne.n	8008a06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2b03      	cmp	r3, #3
 80089ca:	d855      	bhi.n	8008a78 <DMA_CheckFifoParam+0xcc>
 80089cc:	a201      	add	r2, pc, #4	; (adr r2, 80089d4 <DMA_CheckFifoParam+0x28>)
 80089ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d2:	bf00      	nop
 80089d4:	080089e5 	.word	0x080089e5
 80089d8:	080089f7 	.word	0x080089f7
 80089dc:	080089e5 	.word	0x080089e5
 80089e0:	08008a79 	.word	0x08008a79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d045      	beq.n	8008a7c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089f4:	e042      	b.n	8008a7c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80089fe:	d13f      	bne.n	8008a80 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a04:	e03c      	b.n	8008a80 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a0e:	d121      	bne.n	8008a54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d836      	bhi.n	8008a84 <DMA_CheckFifoParam+0xd8>
 8008a16:	a201      	add	r2, pc, #4	; (adr r2, 8008a1c <DMA_CheckFifoParam+0x70>)
 8008a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1c:	08008a2d 	.word	0x08008a2d
 8008a20:	08008a33 	.word	0x08008a33
 8008a24:	08008a2d 	.word	0x08008a2d
 8008a28:	08008a45 	.word	0x08008a45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a30:	e02f      	b.n	8008a92 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d024      	beq.n	8008a88 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a42:	e021      	b.n	8008a88 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a4c:	d11e      	bne.n	8008a8c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008a52:	e01b      	b.n	8008a8c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d902      	bls.n	8008a60 <DMA_CheckFifoParam+0xb4>
 8008a5a:	2b03      	cmp	r3, #3
 8008a5c:	d003      	beq.n	8008a66 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008a5e:	e018      	b.n	8008a92 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	73fb      	strb	r3, [r7, #15]
      break;
 8008a64:	e015      	b.n	8008a92 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00e      	beq.n	8008a90 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	73fb      	strb	r3, [r7, #15]
      break;
 8008a76:	e00b      	b.n	8008a90 <DMA_CheckFifoParam+0xe4>
      break;
 8008a78:	bf00      	nop
 8008a7a:	e00a      	b.n	8008a92 <DMA_CheckFifoParam+0xe6>
      break;
 8008a7c:	bf00      	nop
 8008a7e:	e008      	b.n	8008a92 <DMA_CheckFifoParam+0xe6>
      break;
 8008a80:	bf00      	nop
 8008a82:	e006      	b.n	8008a92 <DMA_CheckFifoParam+0xe6>
      break;
 8008a84:	bf00      	nop
 8008a86:	e004      	b.n	8008a92 <DMA_CheckFifoParam+0xe6>
      break;
 8008a88:	bf00      	nop
 8008a8a:	e002      	b.n	8008a92 <DMA_CheckFifoParam+0xe6>
      break;   
 8008a8c:	bf00      	nop
 8008a8e:	e000      	b.n	8008a92 <DMA_CheckFifoParam+0xe6>
      break;
 8008a90:	bf00      	nop
    }
  } 
  
  return status; 
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b089      	sub	sp, #36	; 0x24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008aba:	2300      	movs	r3, #0
 8008abc:	61fb      	str	r3, [r7, #28]
 8008abe:	e175      	b.n	8008dac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	f040 8164 	bne.w	8008da6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d00b      	beq.n	8008afe <HAL_GPIO_Init+0x5e>
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d007      	beq.n	8008afe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008af2:	2b11      	cmp	r3, #17
 8008af4:	d003      	beq.n	8008afe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	2b12      	cmp	r3, #18
 8008afc:	d130      	bne.n	8008b60 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	2203      	movs	r2, #3
 8008b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0e:	43db      	mvns	r3, r3
 8008b10:	69ba      	ldr	r2, [r7, #24]
 8008b12:	4013      	ands	r3, r2
 8008b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	68da      	ldr	r2, [r3, #12]
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b22:	69ba      	ldr	r2, [r7, #24]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	69ba      	ldr	r2, [r7, #24]
 8008b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008b34:	2201      	movs	r2, #1
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3c:	43db      	mvns	r3, r3
 8008b3e:	69ba      	ldr	r2, [r7, #24]
 8008b40:	4013      	ands	r3, r2
 8008b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	091b      	lsrs	r3, r3, #4
 8008b4a:	f003 0201 	and.w	r2, r3, #1
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	fa02 f303 	lsl.w	r3, r2, r3
 8008b54:	69ba      	ldr	r2, [r7, #24]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	005b      	lsls	r3, r3, #1
 8008b6a:	2203      	movs	r2, #3
 8008b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b70:	43db      	mvns	r3, r3
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	4013      	ands	r3, r2
 8008b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	689a      	ldr	r2, [r3, #8]
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	fa02 f303 	lsl.w	r3, r2, r3
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	69ba      	ldr	r2, [r7, #24]
 8008b8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d003      	beq.n	8008ba0 <HAL_GPIO_Init+0x100>
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	2b12      	cmp	r3, #18
 8008b9e:	d123      	bne.n	8008be8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	08da      	lsrs	r2, r3, #3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3208      	adds	r2, #8
 8008ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	f003 0307 	and.w	r3, r3, #7
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	220f      	movs	r2, #15
 8008bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bbc:	43db      	mvns	r3, r3
 8008bbe:	69ba      	ldr	r2, [r7, #24]
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	691a      	ldr	r2, [r3, #16]
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	f003 0307 	and.w	r3, r3, #7
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd4:	69ba      	ldr	r2, [r7, #24]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	08da      	lsrs	r2, r3, #3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	3208      	adds	r2, #8
 8008be2:	69b9      	ldr	r1, [r7, #24]
 8008be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	005b      	lsls	r3, r3, #1
 8008bf2:	2203      	movs	r2, #3
 8008bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf8:	43db      	mvns	r3, r3
 8008bfa:	69ba      	ldr	r2, [r7, #24]
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f003 0203 	and.w	r2, r3, #3
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	005b      	lsls	r3, r3, #1
 8008c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	69ba      	ldr	r2, [r7, #24]
 8008c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 80be 	beq.w	8008da6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c2a:	4b65      	ldr	r3, [pc, #404]	; (8008dc0 <HAL_GPIO_Init+0x320>)
 8008c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2e:	4a64      	ldr	r2, [pc, #400]	; (8008dc0 <HAL_GPIO_Init+0x320>)
 8008c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c34:	6453      	str	r3, [r2, #68]	; 0x44
 8008c36:	4b62      	ldr	r3, [pc, #392]	; (8008dc0 <HAL_GPIO_Init+0x320>)
 8008c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008c42:	4a60      	ldr	r2, [pc, #384]	; (8008dc4 <HAL_GPIO_Init+0x324>)
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	089b      	lsrs	r3, r3, #2
 8008c48:	3302      	adds	r3, #2
 8008c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	f003 0303 	and.w	r3, r3, #3
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	220f      	movs	r2, #15
 8008c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5e:	43db      	mvns	r3, r3
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	4013      	ands	r3, r2
 8008c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a57      	ldr	r2, [pc, #348]	; (8008dc8 <HAL_GPIO_Init+0x328>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d037      	beq.n	8008cde <HAL_GPIO_Init+0x23e>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a56      	ldr	r2, [pc, #344]	; (8008dcc <HAL_GPIO_Init+0x32c>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d031      	beq.n	8008cda <HAL_GPIO_Init+0x23a>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a55      	ldr	r2, [pc, #340]	; (8008dd0 <HAL_GPIO_Init+0x330>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d02b      	beq.n	8008cd6 <HAL_GPIO_Init+0x236>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a54      	ldr	r2, [pc, #336]	; (8008dd4 <HAL_GPIO_Init+0x334>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d025      	beq.n	8008cd2 <HAL_GPIO_Init+0x232>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a53      	ldr	r2, [pc, #332]	; (8008dd8 <HAL_GPIO_Init+0x338>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d01f      	beq.n	8008cce <HAL_GPIO_Init+0x22e>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a52      	ldr	r2, [pc, #328]	; (8008ddc <HAL_GPIO_Init+0x33c>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d019      	beq.n	8008cca <HAL_GPIO_Init+0x22a>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a51      	ldr	r2, [pc, #324]	; (8008de0 <HAL_GPIO_Init+0x340>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d013      	beq.n	8008cc6 <HAL_GPIO_Init+0x226>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a50      	ldr	r2, [pc, #320]	; (8008de4 <HAL_GPIO_Init+0x344>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d00d      	beq.n	8008cc2 <HAL_GPIO_Init+0x222>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a4f      	ldr	r2, [pc, #316]	; (8008de8 <HAL_GPIO_Init+0x348>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d007      	beq.n	8008cbe <HAL_GPIO_Init+0x21e>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a4e      	ldr	r2, [pc, #312]	; (8008dec <HAL_GPIO_Init+0x34c>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d101      	bne.n	8008cba <HAL_GPIO_Init+0x21a>
 8008cb6:	2309      	movs	r3, #9
 8008cb8:	e012      	b.n	8008ce0 <HAL_GPIO_Init+0x240>
 8008cba:	230a      	movs	r3, #10
 8008cbc:	e010      	b.n	8008ce0 <HAL_GPIO_Init+0x240>
 8008cbe:	2308      	movs	r3, #8
 8008cc0:	e00e      	b.n	8008ce0 <HAL_GPIO_Init+0x240>
 8008cc2:	2307      	movs	r3, #7
 8008cc4:	e00c      	b.n	8008ce0 <HAL_GPIO_Init+0x240>
 8008cc6:	2306      	movs	r3, #6
 8008cc8:	e00a      	b.n	8008ce0 <HAL_GPIO_Init+0x240>
 8008cca:	2305      	movs	r3, #5
 8008ccc:	e008      	b.n	8008ce0 <HAL_GPIO_Init+0x240>
 8008cce:	2304      	movs	r3, #4
 8008cd0:	e006      	b.n	8008ce0 <HAL_GPIO_Init+0x240>
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e004      	b.n	8008ce0 <HAL_GPIO_Init+0x240>
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	e002      	b.n	8008ce0 <HAL_GPIO_Init+0x240>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e000      	b.n	8008ce0 <HAL_GPIO_Init+0x240>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	69fa      	ldr	r2, [r7, #28]
 8008ce2:	f002 0203 	and.w	r2, r2, #3
 8008ce6:	0092      	lsls	r2, r2, #2
 8008ce8:	4093      	lsls	r3, r2
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008cf0:	4934      	ldr	r1, [pc, #208]	; (8008dc4 <HAL_GPIO_Init+0x324>)
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	089b      	lsrs	r3, r3, #2
 8008cf6:	3302      	adds	r3, #2
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008cfe:	4b3c      	ldr	r3, [pc, #240]	; (8008df0 <HAL_GPIO_Init+0x350>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	43db      	mvns	r3, r3
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008d1a:	69ba      	ldr	r2, [r7, #24]
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008d22:	4a33      	ldr	r2, [pc, #204]	; (8008df0 <HAL_GPIO_Init+0x350>)
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008d28:	4b31      	ldr	r3, [pc, #196]	; (8008df0 <HAL_GPIO_Init+0x350>)
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	43db      	mvns	r3, r3
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	4013      	ands	r3, r2
 8008d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d003      	beq.n	8008d4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008d44:	69ba      	ldr	r2, [r7, #24]
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008d4c:	4a28      	ldr	r2, [pc, #160]	; (8008df0 <HAL_GPIO_Init+0x350>)
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008d52:	4b27      	ldr	r3, [pc, #156]	; (8008df0 <HAL_GPIO_Init+0x350>)
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	43db      	mvns	r3, r3
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008d6e:	69ba      	ldr	r2, [r7, #24]
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008d76:	4a1e      	ldr	r2, [pc, #120]	; (8008df0 <HAL_GPIO_Init+0x350>)
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008d7c:	4b1c      	ldr	r3, [pc, #112]	; (8008df0 <HAL_GPIO_Init+0x350>)
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	43db      	mvns	r3, r3
 8008d86:	69ba      	ldr	r2, [r7, #24]
 8008d88:	4013      	ands	r3, r2
 8008d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d003      	beq.n	8008da0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008d98:	69ba      	ldr	r2, [r7, #24]
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008da0:	4a13      	ldr	r2, [pc, #76]	; (8008df0 <HAL_GPIO_Init+0x350>)
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	3301      	adds	r3, #1
 8008daa:	61fb      	str	r3, [r7, #28]
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	2b0f      	cmp	r3, #15
 8008db0:	f67f ae86 	bls.w	8008ac0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008db4:	bf00      	nop
 8008db6:	3724      	adds	r7, #36	; 0x24
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	40023800 	.word	0x40023800
 8008dc4:	40013800 	.word	0x40013800
 8008dc8:	40020000 	.word	0x40020000
 8008dcc:	40020400 	.word	0x40020400
 8008dd0:	40020800 	.word	0x40020800
 8008dd4:	40020c00 	.word	0x40020c00
 8008dd8:	40021000 	.word	0x40021000
 8008ddc:	40021400 	.word	0x40021400
 8008de0:	40021800 	.word	0x40021800
 8008de4:	40021c00 	.word	0x40021c00
 8008de8:	40022000 	.word	0x40022000
 8008dec:	40022400 	.word	0x40022400
 8008df0:	40013c00 	.word	0x40013c00

08008df4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691a      	ldr	r2, [r3, #16]
 8008e04:	887b      	ldrh	r3, [r7, #2]
 8008e06:	4013      	ands	r3, r2
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d002      	beq.n	8008e12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	73fb      	strb	r3, [r7, #15]
 8008e10:	e001      	b.n	8008e16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e12:	2300      	movs	r3, #0
 8008e14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	807b      	strh	r3, [r7, #2]
 8008e30:	4613      	mov	r3, r2
 8008e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008e34:	787b      	ldrb	r3, [r7, #1]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d003      	beq.n	8008e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e3a:	887a      	ldrh	r2, [r7, #2]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008e40:	e003      	b.n	8008e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008e42:	887b      	ldrh	r3, [r7, #2]
 8008e44:	041a      	lsls	r2, r3, #16
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	619a      	str	r2, [r3, #24]
}
 8008e4a:	bf00      	nop
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b083      	sub	sp, #12
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	460b      	mov	r3, r1
 8008e60:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	695a      	ldr	r2, [r3, #20]
 8008e66:	887b      	ldrh	r3, [r7, #2]
 8008e68:	4013      	ands	r3, r2
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d004      	beq.n	8008e78 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008e6e:	887b      	ldrh	r3, [r7, #2]
 8008e70:	041a      	lsls	r2, r3, #16
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8008e76:	e002      	b.n	8008e7e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008e78:	887a      	ldrh	r2, [r7, #2]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	619a      	str	r2, [r3, #24]
}
 8008e7e:	bf00      	nop
 8008e80:	370c      	adds	r7, #12
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
	...

08008e8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	4603      	mov	r3, r0
 8008e94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008e96:	4b08      	ldr	r3, [pc, #32]	; (8008eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e98:	695a      	ldr	r2, [r3, #20]
 8008e9a:	88fb      	ldrh	r3, [r7, #6]
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d006      	beq.n	8008eb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008ea2:	4a05      	ldr	r2, [pc, #20]	; (8008eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008ea4:	88fb      	ldrh	r3, [r7, #6]
 8008ea6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008ea8:	88fb      	ldrh	r3, [r7, #6]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 f806 	bl	8008ebc <HAL_GPIO_EXTI_Callback>
  }
}
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	40013c00 	.word	0x40013c00

08008ebc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008ec6:	bf00      	nop
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
	...

08008ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e07f      	b.n	8008fe6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d106      	bne.n	8008f00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7fd fd28 	bl	8006950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2224      	movs	r2, #36	; 0x24
 8008f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f022 0201 	bic.w	r2, r2, #1
 8008f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008f24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	689a      	ldr	r2, [r3, #8]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d107      	bne.n	8008f4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	689a      	ldr	r2, [r3, #8]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f4a:	609a      	str	r2, [r3, #8]
 8008f4c:	e006      	b.n	8008f5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	689a      	ldr	r2, [r3, #8]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008f5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d104      	bne.n	8008f6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6859      	ldr	r1, [r3, #4]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	4b1d      	ldr	r3, [pc, #116]	; (8008ff0 <HAL_I2C_Init+0x11c>)
 8008f7a:	430b      	orrs	r3, r1
 8008f7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68da      	ldr	r2, [r3, #12]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	691a      	ldr	r2, [r3, #16]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	ea42 0103 	orr.w	r1, r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	021a      	lsls	r2, r3, #8
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	430a      	orrs	r2, r1
 8008fa6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	69d9      	ldr	r1, [r3, #28]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a1a      	ldr	r2, [r3, #32]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f042 0201 	orr.w	r2, r2, #1
 8008fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2220      	movs	r2, #32
 8008fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	02008000 	.word	0x02008000

08008ff4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af02      	add	r7, sp, #8
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	607a      	str	r2, [r7, #4]
 8008ffe:	461a      	mov	r2, r3
 8009000:	460b      	mov	r3, r1
 8009002:	817b      	strh	r3, [r7, #10]
 8009004:	4613      	mov	r3, r2
 8009006:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b20      	cmp	r3, #32
 8009012:	f040 80da 	bne.w	80091ca <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800901c:	2b01      	cmp	r3, #1
 800901e:	d101      	bne.n	8009024 <HAL_I2C_Master_Transmit+0x30>
 8009020:	2302      	movs	r3, #2
 8009022:	e0d3      	b.n	80091cc <HAL_I2C_Master_Transmit+0x1d8>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800902c:	f7fe fa74 	bl	8007518 <HAL_GetTick>
 8009030:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	2319      	movs	r3, #25
 8009038:	2201      	movs	r2, #1
 800903a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f000 fcbc 	bl	80099bc <I2C_WaitOnFlagUntilTimeout>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e0be      	b.n	80091cc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2221      	movs	r2, #33	; 0x21
 8009052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2210      	movs	r2, #16
 800905a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	893a      	ldrh	r2, [r7, #8]
 800906e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800907a:	b29b      	uxth	r3, r3
 800907c:	2bff      	cmp	r3, #255	; 0xff
 800907e:	d90e      	bls.n	800909e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	22ff      	movs	r2, #255	; 0xff
 8009084:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800908a:	b2da      	uxtb	r2, r3
 800908c:	8979      	ldrh	r1, [r7, #10]
 800908e:	4b51      	ldr	r3, [pc, #324]	; (80091d4 <HAL_I2C_Master_Transmit+0x1e0>)
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f000 fe1e 	bl	8009cd8 <I2C_TransferConfig>
 800909c:	e06c      	b.n	8009178 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	8979      	ldrh	r1, [r7, #10]
 80090b0:	4b48      	ldr	r3, [pc, #288]	; (80091d4 <HAL_I2C_Master_Transmit+0x1e0>)
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f000 fe0d 	bl	8009cd8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80090be:	e05b      	b.n	8009178 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	6a39      	ldr	r1, [r7, #32]
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f000 fcb9 	bl	8009a3c <I2C_WaitOnTXISFlagUntilTimeout>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	e07b      	b.n	80091cc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d8:	781a      	ldrb	r2, [r3, #0]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e4:	1c5a      	adds	r2, r3, #1
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	3b01      	subs	r3, #1
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090fc:	3b01      	subs	r3, #1
 80090fe:	b29a      	uxth	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009108:	b29b      	uxth	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d034      	beq.n	8009178 <HAL_I2C_Master_Transmit+0x184>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009112:	2b00      	cmp	r3, #0
 8009114:	d130      	bne.n	8009178 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	2200      	movs	r2, #0
 800911e:	2180      	movs	r1, #128	; 0x80
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 fc4b 	bl	80099bc <I2C_WaitOnFlagUntilTimeout>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e04d      	b.n	80091cc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009134:	b29b      	uxth	r3, r3
 8009136:	2bff      	cmp	r3, #255	; 0xff
 8009138:	d90e      	bls.n	8009158 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	22ff      	movs	r2, #255	; 0xff
 800913e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009144:	b2da      	uxtb	r2, r3
 8009146:	8979      	ldrh	r1, [r7, #10]
 8009148:	2300      	movs	r3, #0
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f000 fdc1 	bl	8009cd8 <I2C_TransferConfig>
 8009156:	e00f      	b.n	8009178 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800915c:	b29a      	uxth	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009166:	b2da      	uxtb	r2, r3
 8009168:	8979      	ldrh	r1, [r7, #10]
 800916a:	2300      	movs	r3, #0
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f000 fdb0 	bl	8009cd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800917c:	b29b      	uxth	r3, r3
 800917e:	2b00      	cmp	r3, #0
 8009180:	d19e      	bne.n	80090c0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	6a39      	ldr	r1, [r7, #32]
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f000 fc98 	bl	8009abc <I2C_WaitOnSTOPFlagUntilTimeout>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e01a      	b.n	80091cc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2220      	movs	r2, #32
 800919c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	6859      	ldr	r1, [r3, #4]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	4b0b      	ldr	r3, [pc, #44]	; (80091d8 <HAL_I2C_Master_Transmit+0x1e4>)
 80091aa:	400b      	ands	r3, r1
 80091ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2220      	movs	r2, #32
 80091b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	e000      	b.n	80091cc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80091ca:	2302      	movs	r3, #2
  }
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3718      	adds	r7, #24
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	80002000 	.word	0x80002000
 80091d8:	fe00e800 	.word	0xfe00e800

080091dc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af02      	add	r7, sp, #8
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	607a      	str	r2, [r7, #4]
 80091e6:	461a      	mov	r2, r3
 80091e8:	460b      	mov	r3, r1
 80091ea:	817b      	strh	r3, [r7, #10]
 80091ec:	4613      	mov	r3, r2
 80091ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b20      	cmp	r3, #32
 80091fa:	f040 80db 	bne.w	80093b4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009204:	2b01      	cmp	r3, #1
 8009206:	d101      	bne.n	800920c <HAL_I2C_Master_Receive+0x30>
 8009208:	2302      	movs	r3, #2
 800920a:	e0d4      	b.n	80093b6 <HAL_I2C_Master_Receive+0x1da>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009214:	f7fe f980 	bl	8007518 <HAL_GetTick>
 8009218:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	2319      	movs	r3, #25
 8009220:	2201      	movs	r2, #1
 8009222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f000 fbc8 	bl	80099bc <I2C_WaitOnFlagUntilTimeout>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e0bf      	b.n	80093b6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2222      	movs	r2, #34	; 0x22
 800923a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2210      	movs	r2, #16
 8009242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	893a      	ldrh	r2, [r7, #8]
 8009256:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009262:	b29b      	uxth	r3, r3
 8009264:	2bff      	cmp	r3, #255	; 0xff
 8009266:	d90e      	bls.n	8009286 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	22ff      	movs	r2, #255	; 0xff
 800926c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009272:	b2da      	uxtb	r2, r3
 8009274:	8979      	ldrh	r1, [r7, #10]
 8009276:	4b52      	ldr	r3, [pc, #328]	; (80093c0 <HAL_I2C_Master_Receive+0x1e4>)
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 fd2a 	bl	8009cd8 <I2C_TransferConfig>
 8009284:	e06d      	b.n	8009362 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800928a:	b29a      	uxth	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009294:	b2da      	uxtb	r2, r3
 8009296:	8979      	ldrh	r1, [r7, #10]
 8009298:	4b49      	ldr	r3, [pc, #292]	; (80093c0 <HAL_I2C_Master_Receive+0x1e4>)
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 fd19 	bl	8009cd8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80092a6:	e05c      	b.n	8009362 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	6a39      	ldr	r1, [r7, #32]
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f000 fc41 	bl	8009b34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d001      	beq.n	80092bc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e07c      	b.n	80093b6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c6:	b2d2      	uxtb	r2, r2
 80092c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ce:	1c5a      	adds	r2, r3, #1
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092d8:	3b01      	subs	r3, #1
 80092da:	b29a      	uxth	r2, r3
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	3b01      	subs	r3, #1
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d034      	beq.n	8009362 <HAL_I2C_Master_Receive+0x186>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d130      	bne.n	8009362 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	2200      	movs	r2, #0
 8009308:	2180      	movs	r1, #128	; 0x80
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 fb56 	bl	80099bc <I2C_WaitOnFlagUntilTimeout>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e04d      	b.n	80093b6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800931e:	b29b      	uxth	r3, r3
 8009320:	2bff      	cmp	r3, #255	; 0xff
 8009322:	d90e      	bls.n	8009342 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	22ff      	movs	r2, #255	; 0xff
 8009328:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800932e:	b2da      	uxtb	r2, r3
 8009330:	8979      	ldrh	r1, [r7, #10]
 8009332:	2300      	movs	r3, #0
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f000 fccc 	bl	8009cd8 <I2C_TransferConfig>
 8009340:	e00f      	b.n	8009362 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009346:	b29a      	uxth	r2, r3
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009350:	b2da      	uxtb	r2, r3
 8009352:	8979      	ldrh	r1, [r7, #10]
 8009354:	2300      	movs	r3, #0
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 fcbb 	bl	8009cd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009366:	b29b      	uxth	r3, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	d19d      	bne.n	80092a8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800936c:	697a      	ldr	r2, [r7, #20]
 800936e:	6a39      	ldr	r1, [r7, #32]
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 fba3 	bl	8009abc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e01a      	b.n	80093b6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2220      	movs	r2, #32
 8009386:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6859      	ldr	r1, [r3, #4]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	4b0c      	ldr	r3, [pc, #48]	; (80093c4 <HAL_I2C_Master_Receive+0x1e8>)
 8009394:	400b      	ands	r3, r1
 8009396:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2220      	movs	r2, #32
 800939c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80093b0:	2300      	movs	r3, #0
 80093b2:	e000      	b.n	80093b6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80093b4:	2302      	movs	r3, #2
  }
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	80002400 	.word	0x80002400
 80093c4:	fe00e800 	.word	0xfe00e800

080093c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b088      	sub	sp, #32
 80093cc:	af02      	add	r7, sp, #8
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	4608      	mov	r0, r1
 80093d2:	4611      	mov	r1, r2
 80093d4:	461a      	mov	r2, r3
 80093d6:	4603      	mov	r3, r0
 80093d8:	817b      	strh	r3, [r7, #10]
 80093da:	460b      	mov	r3, r1
 80093dc:	813b      	strh	r3, [r7, #8]
 80093de:	4613      	mov	r3, r2
 80093e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b20      	cmp	r3, #32
 80093ec:	f040 80f9 	bne.w	80095e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80093f0:	6a3b      	ldr	r3, [r7, #32]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d002      	beq.n	80093fc <HAL_I2C_Mem_Write+0x34>
 80093f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d105      	bne.n	8009408 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009402:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e0ed      	b.n	80095e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800940e:	2b01      	cmp	r3, #1
 8009410:	d101      	bne.n	8009416 <HAL_I2C_Mem_Write+0x4e>
 8009412:	2302      	movs	r3, #2
 8009414:	e0e6      	b.n	80095e4 <HAL_I2C_Mem_Write+0x21c>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2201      	movs	r2, #1
 800941a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800941e:	f7fe f87b 	bl	8007518 <HAL_GetTick>
 8009422:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	2319      	movs	r3, #25
 800942a:	2201      	movs	r2, #1
 800942c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 fac3 	bl	80099bc <I2C_WaitOnFlagUntilTimeout>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e0d1      	b.n	80095e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2221      	movs	r2, #33	; 0x21
 8009444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2240      	movs	r2, #64	; 0x40
 800944c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6a3a      	ldr	r2, [r7, #32]
 800945a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009460:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009468:	88f8      	ldrh	r0, [r7, #6]
 800946a:	893a      	ldrh	r2, [r7, #8]
 800946c:	8979      	ldrh	r1, [r7, #10]
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	9301      	str	r3, [sp, #4]
 8009472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	4603      	mov	r3, r0
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f000 f9d3 	bl	8009824 <I2C_RequestMemoryWrite>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d005      	beq.n	8009490 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e0a9      	b.n	80095e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009494:	b29b      	uxth	r3, r3
 8009496:	2bff      	cmp	r3, #255	; 0xff
 8009498:	d90e      	bls.n	80094b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	22ff      	movs	r2, #255	; 0xff
 800949e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094a4:	b2da      	uxtb	r2, r3
 80094a6:	8979      	ldrh	r1, [r7, #10]
 80094a8:	2300      	movs	r3, #0
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f000 fc11 	bl	8009cd8 <I2C_TransferConfig>
 80094b6:	e00f      	b.n	80094d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094bc:	b29a      	uxth	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	8979      	ldrh	r1, [r7, #10]
 80094ca:	2300      	movs	r3, #0
 80094cc:	9300      	str	r3, [sp, #0]
 80094ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f000 fc00 	bl	8009cd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f000 faad 	bl	8009a3c <I2C_WaitOnTXISFlagUntilTimeout>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d001      	beq.n	80094ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e07b      	b.n	80095e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f0:	781a      	ldrb	r2, [r3, #0]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009506:	b29b      	uxth	r3, r3
 8009508:	3b01      	subs	r3, #1
 800950a:	b29a      	uxth	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009514:	3b01      	subs	r3, #1
 8009516:	b29a      	uxth	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009520:	b29b      	uxth	r3, r3
 8009522:	2b00      	cmp	r3, #0
 8009524:	d034      	beq.n	8009590 <HAL_I2C_Mem_Write+0x1c8>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800952a:	2b00      	cmp	r3, #0
 800952c:	d130      	bne.n	8009590 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009534:	2200      	movs	r2, #0
 8009536:	2180      	movs	r1, #128	; 0x80
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f000 fa3f 	bl	80099bc <I2C_WaitOnFlagUntilTimeout>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e04d      	b.n	80095e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800954c:	b29b      	uxth	r3, r3
 800954e:	2bff      	cmp	r3, #255	; 0xff
 8009550:	d90e      	bls.n	8009570 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	22ff      	movs	r2, #255	; 0xff
 8009556:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800955c:	b2da      	uxtb	r2, r3
 800955e:	8979      	ldrh	r1, [r7, #10]
 8009560:	2300      	movs	r3, #0
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f000 fbb5 	bl	8009cd8 <I2C_TransferConfig>
 800956e:	e00f      	b.n	8009590 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009574:	b29a      	uxth	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800957e:	b2da      	uxtb	r2, r3
 8009580:	8979      	ldrh	r1, [r7, #10]
 8009582:	2300      	movs	r3, #0
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f000 fba4 	bl	8009cd8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009594:	b29b      	uxth	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d19e      	bne.n	80094d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f000 fa8c 	bl	8009abc <I2C_WaitOnSTOPFlagUntilTimeout>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e01a      	b.n	80095e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2220      	movs	r2, #32
 80095b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6859      	ldr	r1, [r3, #4]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	4b0a      	ldr	r3, [pc, #40]	; (80095ec <HAL_I2C_Mem_Write+0x224>)
 80095c2:	400b      	ands	r3, r1
 80095c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2220      	movs	r2, #32
 80095ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	e000      	b.n	80095e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80095e2:	2302      	movs	r3, #2
  }
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3718      	adds	r7, #24
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	fe00e800 	.word	0xfe00e800

080095f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b088      	sub	sp, #32
 80095f4:	af02      	add	r7, sp, #8
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	4608      	mov	r0, r1
 80095fa:	4611      	mov	r1, r2
 80095fc:	461a      	mov	r2, r3
 80095fe:	4603      	mov	r3, r0
 8009600:	817b      	strh	r3, [r7, #10]
 8009602:	460b      	mov	r3, r1
 8009604:	813b      	strh	r3, [r7, #8]
 8009606:	4613      	mov	r3, r2
 8009608:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009610:	b2db      	uxtb	r3, r3
 8009612:	2b20      	cmp	r3, #32
 8009614:	f040 80fd 	bne.w	8009812 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d002      	beq.n	8009624 <HAL_I2C_Mem_Read+0x34>
 800961e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009620:	2b00      	cmp	r3, #0
 8009622:	d105      	bne.n	8009630 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800962a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e0f1      	b.n	8009814 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009636:	2b01      	cmp	r3, #1
 8009638:	d101      	bne.n	800963e <HAL_I2C_Mem_Read+0x4e>
 800963a:	2302      	movs	r3, #2
 800963c:	e0ea      	b.n	8009814 <HAL_I2C_Mem_Read+0x224>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009646:	f7fd ff67 	bl	8007518 <HAL_GetTick>
 800964a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	2319      	movs	r3, #25
 8009652:	2201      	movs	r2, #1
 8009654:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f000 f9af 	bl	80099bc <I2C_WaitOnFlagUntilTimeout>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e0d5      	b.n	8009814 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2222      	movs	r2, #34	; 0x22
 800966c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2240      	movs	r2, #64	; 0x40
 8009674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6a3a      	ldr	r2, [r7, #32]
 8009682:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009688:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009690:	88f8      	ldrh	r0, [r7, #6]
 8009692:	893a      	ldrh	r2, [r7, #8]
 8009694:	8979      	ldrh	r1, [r7, #10]
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	9301      	str	r3, [sp, #4]
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	4603      	mov	r3, r0
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f000 f913 	bl	80098cc <I2C_RequestMemoryRead>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d005      	beq.n	80096b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e0ad      	b.n	8009814 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096bc:	b29b      	uxth	r3, r3
 80096be:	2bff      	cmp	r3, #255	; 0xff
 80096c0:	d90e      	bls.n	80096e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	22ff      	movs	r2, #255	; 0xff
 80096c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	8979      	ldrh	r1, [r7, #10]
 80096d0:	4b52      	ldr	r3, [pc, #328]	; (800981c <HAL_I2C_Mem_Read+0x22c>)
 80096d2:	9300      	str	r3, [sp, #0]
 80096d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 fafd 	bl	8009cd8 <I2C_TransferConfig>
 80096de:	e00f      	b.n	8009700 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ee:	b2da      	uxtb	r2, r3
 80096f0:	8979      	ldrh	r1, [r7, #10]
 80096f2:	4b4a      	ldr	r3, [pc, #296]	; (800981c <HAL_I2C_Mem_Read+0x22c>)
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f000 faec 	bl	8009cd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009706:	2200      	movs	r2, #0
 8009708:	2104      	movs	r1, #4
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f000 f956 	bl	80099bc <I2C_WaitOnFlagUntilTimeout>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e07c      	b.n	8009814 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009724:	b2d2      	uxtb	r2, r2
 8009726:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972c:	1c5a      	adds	r2, r3, #1
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009736:	3b01      	subs	r3, #1
 8009738:	b29a      	uxth	r2, r3
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009742:	b29b      	uxth	r3, r3
 8009744:	3b01      	subs	r3, #1
 8009746:	b29a      	uxth	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009750:	b29b      	uxth	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d034      	beq.n	80097c0 <HAL_I2C_Mem_Read+0x1d0>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800975a:	2b00      	cmp	r3, #0
 800975c:	d130      	bne.n	80097c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009764:	2200      	movs	r2, #0
 8009766:	2180      	movs	r1, #128	; 0x80
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f000 f927 	bl	80099bc <I2C_WaitOnFlagUntilTimeout>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e04d      	b.n	8009814 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800977c:	b29b      	uxth	r3, r3
 800977e:	2bff      	cmp	r3, #255	; 0xff
 8009780:	d90e      	bls.n	80097a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	22ff      	movs	r2, #255	; 0xff
 8009786:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800978c:	b2da      	uxtb	r2, r3
 800978e:	8979      	ldrh	r1, [r7, #10]
 8009790:	2300      	movs	r3, #0
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f000 fa9d 	bl	8009cd8 <I2C_TransferConfig>
 800979e:	e00f      	b.n	80097c0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	8979      	ldrh	r1, [r7, #10]
 80097b2:	2300      	movs	r3, #0
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f000 fa8c 	bl	8009cd8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d19a      	bne.n	8009700 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f000 f974 	bl	8009abc <I2C_WaitOnSTOPFlagUntilTimeout>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e01a      	b.n	8009814 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2220      	movs	r2, #32
 80097e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	6859      	ldr	r1, [r3, #4]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	4b0b      	ldr	r3, [pc, #44]	; (8009820 <HAL_I2C_Mem_Read+0x230>)
 80097f2:	400b      	ands	r3, r1
 80097f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2220      	movs	r2, #32
 80097fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800980e:	2300      	movs	r3, #0
 8009810:	e000      	b.n	8009814 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009812:	2302      	movs	r3, #2
  }
}
 8009814:	4618      	mov	r0, r3
 8009816:	3718      	adds	r7, #24
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	80002400 	.word	0x80002400
 8009820:	fe00e800 	.word	0xfe00e800

08009824 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af02      	add	r7, sp, #8
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	4608      	mov	r0, r1
 800982e:	4611      	mov	r1, r2
 8009830:	461a      	mov	r2, r3
 8009832:	4603      	mov	r3, r0
 8009834:	817b      	strh	r3, [r7, #10]
 8009836:	460b      	mov	r3, r1
 8009838:	813b      	strh	r3, [r7, #8]
 800983a:	4613      	mov	r3, r2
 800983c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800983e:	88fb      	ldrh	r3, [r7, #6]
 8009840:	b2da      	uxtb	r2, r3
 8009842:	8979      	ldrh	r1, [r7, #10]
 8009844:	4b20      	ldr	r3, [pc, #128]	; (80098c8 <I2C_RequestMemoryWrite+0xa4>)
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f000 fa43 	bl	8009cd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009852:	69fa      	ldr	r2, [r7, #28]
 8009854:	69b9      	ldr	r1, [r7, #24]
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 f8f0 	bl	8009a3c <I2C_WaitOnTXISFlagUntilTimeout>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e02c      	b.n	80098c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009866:	88fb      	ldrh	r3, [r7, #6]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d105      	bne.n	8009878 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800986c:	893b      	ldrh	r3, [r7, #8]
 800986e:	b2da      	uxtb	r2, r3
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	629a      	str	r2, [r3, #40]	; 0x28
 8009876:	e015      	b.n	80098a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009878:	893b      	ldrh	r3, [r7, #8]
 800987a:	0a1b      	lsrs	r3, r3, #8
 800987c:	b29b      	uxth	r3, r3
 800987e:	b2da      	uxtb	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009886:	69fa      	ldr	r2, [r7, #28]
 8009888:	69b9      	ldr	r1, [r7, #24]
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f000 f8d6 	bl	8009a3c <I2C_WaitOnTXISFlagUntilTimeout>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e012      	b.n	80098c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800989a:	893b      	ldrh	r3, [r7, #8]
 800989c:	b2da      	uxtb	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	2200      	movs	r2, #0
 80098ac:	2180      	movs	r1, #128	; 0x80
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f000 f884 	bl	80099bc <I2C_WaitOnFlagUntilTimeout>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d001      	beq.n	80098be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e000      	b.n	80098c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	80002000 	.word	0x80002000

080098cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af02      	add	r7, sp, #8
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	4608      	mov	r0, r1
 80098d6:	4611      	mov	r1, r2
 80098d8:	461a      	mov	r2, r3
 80098da:	4603      	mov	r3, r0
 80098dc:	817b      	strh	r3, [r7, #10]
 80098de:	460b      	mov	r3, r1
 80098e0:	813b      	strh	r3, [r7, #8]
 80098e2:	4613      	mov	r3, r2
 80098e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80098e6:	88fb      	ldrh	r3, [r7, #6]
 80098e8:	b2da      	uxtb	r2, r3
 80098ea:	8979      	ldrh	r1, [r7, #10]
 80098ec:	4b20      	ldr	r3, [pc, #128]	; (8009970 <I2C_RequestMemoryRead+0xa4>)
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	2300      	movs	r3, #0
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f000 f9f0 	bl	8009cd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098f8:	69fa      	ldr	r2, [r7, #28]
 80098fa:	69b9      	ldr	r1, [r7, #24]
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 f89d 	bl	8009a3c <I2C_WaitOnTXISFlagUntilTimeout>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e02c      	b.n	8009966 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800990c:	88fb      	ldrh	r3, [r7, #6]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d105      	bne.n	800991e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009912:	893b      	ldrh	r3, [r7, #8]
 8009914:	b2da      	uxtb	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	629a      	str	r2, [r3, #40]	; 0x28
 800991c:	e015      	b.n	800994a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800991e:	893b      	ldrh	r3, [r7, #8]
 8009920:	0a1b      	lsrs	r3, r3, #8
 8009922:	b29b      	uxth	r3, r3
 8009924:	b2da      	uxtb	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800992c:	69fa      	ldr	r2, [r7, #28]
 800992e:	69b9      	ldr	r1, [r7, #24]
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f000 f883 	bl	8009a3c <I2C_WaitOnTXISFlagUntilTimeout>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	e012      	b.n	8009966 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009940:	893b      	ldrh	r3, [r7, #8]
 8009942:	b2da      	uxtb	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	2200      	movs	r2, #0
 8009952:	2140      	movs	r1, #64	; 0x40
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f000 f831 	bl	80099bc <I2C_WaitOnFlagUntilTimeout>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d001      	beq.n	8009964 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	e000      	b.n	8009966 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	80002000 	.word	0x80002000

08009974 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	f003 0302 	and.w	r3, r3, #2
 8009986:	2b02      	cmp	r3, #2
 8009988:	d103      	bne.n	8009992 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2200      	movs	r2, #0
 8009990:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	f003 0301 	and.w	r3, r3, #1
 800999c:	2b01      	cmp	r3, #1
 800999e:	d007      	beq.n	80099b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	699a      	ldr	r2, [r3, #24]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f042 0201 	orr.w	r2, r2, #1
 80099ae:	619a      	str	r2, [r3, #24]
  }
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	603b      	str	r3, [r7, #0]
 80099c8:	4613      	mov	r3, r2
 80099ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099cc:	e022      	b.n	8009a14 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d4:	d01e      	beq.n	8009a14 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099d6:	f7fd fd9f 	bl	8007518 <HAL_GetTick>
 80099da:	4602      	mov	r2, r0
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	683a      	ldr	r2, [r7, #0]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d302      	bcc.n	80099ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d113      	bne.n	8009a14 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099f0:	f043 0220 	orr.w	r2, r3, #32
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2220      	movs	r2, #32
 80099fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e00f      	b.n	8009a34 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	699a      	ldr	r2, [r3, #24]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	bf0c      	ite	eq
 8009a24:	2301      	moveq	r3, #1
 8009a26:	2300      	movne	r3, #0
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	79fb      	ldrb	r3, [r7, #7]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d0cd      	beq.n	80099ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a48:	e02c      	b.n	8009aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	68b9      	ldr	r1, [r7, #8]
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f000 f8dc 	bl	8009c0c <I2C_IsAcknowledgeFailed>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d001      	beq.n	8009a5e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e02a      	b.n	8009ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a64:	d01e      	beq.n	8009aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a66:	f7fd fd57 	bl	8007518 <HAL_GetTick>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d302      	bcc.n	8009a7c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d113      	bne.n	8009aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a80:	f043 0220 	orr.w	r2, r3, #32
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2220      	movs	r2, #32
 8009a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e007      	b.n	8009ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	f003 0302 	and.w	r3, r3, #2
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d1cb      	bne.n	8009a4a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ac8:	e028      	b.n	8009b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	68b9      	ldr	r1, [r7, #8]
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 f89c 	bl	8009c0c <I2C_IsAcknowledgeFailed>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e026      	b.n	8009b2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ade:	f7fd fd1b 	bl	8007518 <HAL_GetTick>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	1ad3      	subs	r3, r2, r3
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d302      	bcc.n	8009af4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d113      	bne.n	8009b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009af8:	f043 0220 	orr.w	r2, r3, #32
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2220      	movs	r2, #32
 8009b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e007      	b.n	8009b2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	f003 0320 	and.w	r3, r3, #32
 8009b26:	2b20      	cmp	r3, #32
 8009b28:	d1cf      	bne.n	8009aca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009b40:	e055      	b.n	8009bee <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	68b9      	ldr	r1, [r7, #8]
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f000 f860 	bl	8009c0c <I2C_IsAcknowledgeFailed>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d001      	beq.n	8009b56 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e053      	b.n	8009bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	f003 0320 	and.w	r3, r3, #32
 8009b60:	2b20      	cmp	r3, #32
 8009b62:	d129      	bne.n	8009bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	f003 0304 	and.w	r3, r3, #4
 8009b6e:	2b04      	cmp	r3, #4
 8009b70:	d105      	bne.n	8009b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d001      	beq.n	8009b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	e03f      	b.n	8009bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2220      	movs	r2, #32
 8009b84:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	6859      	ldr	r1, [r3, #4]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	4b1d      	ldr	r3, [pc, #116]	; (8009c08 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8009b92:	400b      	ands	r3, r1
 8009b94:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2220      	movs	r2, #32
 8009ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e022      	b.n	8009bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bb8:	f7fd fcae 	bl	8007518 <HAL_GetTick>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	1ad3      	subs	r3, r2, r3
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d302      	bcc.n	8009bce <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10f      	bne.n	8009bee <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bd2:	f043 0220 	orr.w	r2, r3, #32
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2220      	movs	r2, #32
 8009bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	e007      	b.n	8009bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	f003 0304 	and.w	r3, r3, #4
 8009bf8:	2b04      	cmp	r3, #4
 8009bfa:	d1a2      	bne.n	8009b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	fe00e800 	.word	0xfe00e800

08009c0c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	f003 0310 	and.w	r3, r3, #16
 8009c22:	2b10      	cmp	r3, #16
 8009c24:	d151      	bne.n	8009cca <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c26:	e022      	b.n	8009c6e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2e:	d01e      	beq.n	8009c6e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c30:	f7fd fc72 	bl	8007518 <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d302      	bcc.n	8009c46 <I2C_IsAcknowledgeFailed+0x3a>
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d113      	bne.n	8009c6e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c4a:	f043 0220 	orr.w	r2, r3, #32
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2220      	movs	r2, #32
 8009c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e02e      	b.n	8009ccc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	699b      	ldr	r3, [r3, #24]
 8009c74:	f003 0320 	and.w	r3, r3, #32
 8009c78:	2b20      	cmp	r3, #32
 8009c7a:	d1d5      	bne.n	8009c28 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2210      	movs	r2, #16
 8009c82:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2220      	movs	r2, #32
 8009c8a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f7ff fe71 	bl	8009974 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	6859      	ldr	r1, [r3, #4]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	4b0d      	ldr	r3, [pc, #52]	; (8009cd4 <I2C_IsAcknowledgeFailed+0xc8>)
 8009c9e:	400b      	ands	r3, r1
 8009ca0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ca6:	f043 0204 	orr.w	r2, r3, #4
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2220      	movs	r2, #32
 8009cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e000      	b.n	8009ccc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	fe00e800 	.word	0xfe00e800

08009cd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	607b      	str	r3, [r7, #4]
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	817b      	strh	r3, [r7, #10]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	685a      	ldr	r2, [r3, #4]
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	0d5b      	lsrs	r3, r3, #21
 8009cf4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009cf8:	4b0d      	ldr	r3, [pc, #52]	; (8009d30 <I2C_TransferConfig+0x58>)
 8009cfa:	430b      	orrs	r3, r1
 8009cfc:	43db      	mvns	r3, r3
 8009cfe:	ea02 0103 	and.w	r1, r2, r3
 8009d02:	897b      	ldrh	r3, [r7, #10]
 8009d04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009d08:	7a7b      	ldrb	r3, [r7, #9]
 8009d0a:	041b      	lsls	r3, r3, #16
 8009d0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d10:	431a      	orrs	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	431a      	orrs	r2, r3
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	431a      	orrs	r2, r3
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009d22:	bf00      	nop
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	03ff63ff 	.word	0x03ff63ff

08009d34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	2b20      	cmp	r3, #32
 8009d48:	d138      	bne.n	8009dbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d101      	bne.n	8009d58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009d54:	2302      	movs	r3, #2
 8009d56:	e032      	b.n	8009dbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2224      	movs	r2, #36	; 0x24
 8009d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f022 0201 	bic.w	r2, r2, #1
 8009d76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	6819      	ldr	r1, [r3, #0]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	430a      	orrs	r2, r1
 8009d96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f042 0201 	orr.w	r2, r2, #1
 8009da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2220      	movs	r2, #32
 8009dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009db8:	2300      	movs	r3, #0
 8009dba:	e000      	b.n	8009dbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009dbc:	2302      	movs	r3, #2
  }
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b085      	sub	sp, #20
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b20      	cmp	r3, #32
 8009dde:	d139      	bne.n	8009e54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d101      	bne.n	8009dee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009dea:	2302      	movs	r3, #2
 8009dec:	e033      	b.n	8009e56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2224      	movs	r2, #36	; 0x24
 8009dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f022 0201 	bic.w	r2, r2, #1
 8009e0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009e1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	021b      	lsls	r3, r3, #8
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f042 0201 	orr.w	r2, r2, #1
 8009e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2220      	movs	r2, #32
 8009e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	e000      	b.n	8009e56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009e54:	2302      	movs	r3, #2
  }
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
	...

08009e64 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e6c:	4b0b      	ldr	r3, [pc, #44]	; (8009e9c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e70:	4a0a      	ldr	r2, [pc, #40]	; (8009e9c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009e72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e76:	6453      	str	r3, [r2, #68]	; 0x44
 8009e78:	4b08      	ldr	r3, [pc, #32]	; (8009e9c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e80:	60fb      	str	r3, [r7, #12]
 8009e82:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 8009e84:	4b06      	ldr	r3, [pc, #24]	; (8009ea0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009e86:	685a      	ldr	r2, [r3, #4]
 8009e88:	4905      	ldr	r1, [pc, #20]	; (8009ea0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	604b      	str	r3, [r1, #4]
}
 8009e90:	bf00      	nop
 8009e92:	3714      	adds	r7, #20
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	40023800 	.word	0x40023800
 8009ea0:	40013800 	.word	0x40013800

08009ea4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ea6:	b08f      	sub	sp, #60	; 0x3c
 8009ea8:	af0a      	add	r7, sp, #40	; 0x28
 8009eaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e116      	b.n	800a0e4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d106      	bne.n	8009ed6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7fd f879 	bl	8006fc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2203      	movs	r2, #3
 8009eda:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d102      	bne.n	8009ef0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f003 fc0d 	bl	800d714 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	603b      	str	r3, [r7, #0]
 8009f00:	687e      	ldr	r6, [r7, #4]
 8009f02:	466d      	mov	r5, sp
 8009f04:	f106 0410 	add.w	r4, r6, #16
 8009f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009f10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009f14:	e885 0003 	stmia.w	r5, {r0, r1}
 8009f18:	1d33      	adds	r3, r6, #4
 8009f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f1c:	6838      	ldr	r0, [r7, #0]
 8009f1e:	f003 fba1 	bl	800d664 <USB_CoreInit>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d005      	beq.n	8009f34 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	e0d7      	b.n	800a0e4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2100      	movs	r1, #0
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f003 fbfb 	bl	800d736 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f40:	2300      	movs	r3, #0
 8009f42:	73fb      	strb	r3, [r7, #15]
 8009f44:	e04a      	b.n	8009fdc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009f46:	7bfa      	ldrb	r2, [r7, #15]
 8009f48:	6879      	ldr	r1, [r7, #4]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	00db      	lsls	r3, r3, #3
 8009f4e:	1a9b      	subs	r3, r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	440b      	add	r3, r1
 8009f54:	333d      	adds	r3, #61	; 0x3d
 8009f56:	2201      	movs	r2, #1
 8009f58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009f5a:	7bfa      	ldrb	r2, [r7, #15]
 8009f5c:	6879      	ldr	r1, [r7, #4]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	00db      	lsls	r3, r3, #3
 8009f62:	1a9b      	subs	r3, r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	440b      	add	r3, r1
 8009f68:	333c      	adds	r3, #60	; 0x3c
 8009f6a:	7bfa      	ldrb	r2, [r7, #15]
 8009f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009f6e:	7bfa      	ldrb	r2, [r7, #15]
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
 8009f72:	b298      	uxth	r0, r3
 8009f74:	6879      	ldr	r1, [r7, #4]
 8009f76:	4613      	mov	r3, r2
 8009f78:	00db      	lsls	r3, r3, #3
 8009f7a:	1a9b      	subs	r3, r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	440b      	add	r3, r1
 8009f80:	3342      	adds	r3, #66	; 0x42
 8009f82:	4602      	mov	r2, r0
 8009f84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009f86:	7bfa      	ldrb	r2, [r7, #15]
 8009f88:	6879      	ldr	r1, [r7, #4]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	00db      	lsls	r3, r3, #3
 8009f8e:	1a9b      	subs	r3, r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	440b      	add	r3, r1
 8009f94:	333f      	adds	r3, #63	; 0x3f
 8009f96:	2200      	movs	r2, #0
 8009f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009f9a:	7bfa      	ldrb	r2, [r7, #15]
 8009f9c:	6879      	ldr	r1, [r7, #4]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	00db      	lsls	r3, r3, #3
 8009fa2:	1a9b      	subs	r3, r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	440b      	add	r3, r1
 8009fa8:	3344      	adds	r3, #68	; 0x44
 8009faa:	2200      	movs	r2, #0
 8009fac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009fae:	7bfa      	ldrb	r2, [r7, #15]
 8009fb0:	6879      	ldr	r1, [r7, #4]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	00db      	lsls	r3, r3, #3
 8009fb6:	1a9b      	subs	r3, r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	440b      	add	r3, r1
 8009fbc:	3348      	adds	r3, #72	; 0x48
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009fc2:	7bfa      	ldrb	r2, [r7, #15]
 8009fc4:	6879      	ldr	r1, [r7, #4]
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	00db      	lsls	r3, r3, #3
 8009fca:	1a9b      	subs	r3, r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	440b      	add	r3, r1
 8009fd0:	3350      	adds	r3, #80	; 0x50
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	73fb      	strb	r3, [r7, #15]
 8009fdc:	7bfa      	ldrb	r2, [r7, #15]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d3af      	bcc.n	8009f46 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	73fb      	strb	r3, [r7, #15]
 8009fea:	e044      	b.n	800a076 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009fec:	7bfa      	ldrb	r2, [r7, #15]
 8009fee:	6879      	ldr	r1, [r7, #4]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	00db      	lsls	r3, r3, #3
 8009ff4:	1a9b      	subs	r3, r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	440b      	add	r3, r1
 8009ffa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009ffe:	2200      	movs	r2, #0
 800a000:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a002:	7bfa      	ldrb	r2, [r7, #15]
 800a004:	6879      	ldr	r1, [r7, #4]
 800a006:	4613      	mov	r3, r2
 800a008:	00db      	lsls	r3, r3, #3
 800a00a:	1a9b      	subs	r3, r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	440b      	add	r3, r1
 800a010:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800a014:	7bfa      	ldrb	r2, [r7, #15]
 800a016:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a018:	7bfa      	ldrb	r2, [r7, #15]
 800a01a:	6879      	ldr	r1, [r7, #4]
 800a01c:	4613      	mov	r3, r2
 800a01e:	00db      	lsls	r3, r3, #3
 800a020:	1a9b      	subs	r3, r3, r2
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	440b      	add	r3, r1
 800a026:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a02a:	2200      	movs	r2, #0
 800a02c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a02e:	7bfa      	ldrb	r2, [r7, #15]
 800a030:	6879      	ldr	r1, [r7, #4]
 800a032:	4613      	mov	r3, r2
 800a034:	00db      	lsls	r3, r3, #3
 800a036:	1a9b      	subs	r3, r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	440b      	add	r3, r1
 800a03c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a040:	2200      	movs	r2, #0
 800a042:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a044:	7bfa      	ldrb	r2, [r7, #15]
 800a046:	6879      	ldr	r1, [r7, #4]
 800a048:	4613      	mov	r3, r2
 800a04a:	00db      	lsls	r3, r3, #3
 800a04c:	1a9b      	subs	r3, r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	440b      	add	r3, r1
 800a052:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a056:	2200      	movs	r2, #0
 800a058:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a05a:	7bfa      	ldrb	r2, [r7, #15]
 800a05c:	6879      	ldr	r1, [r7, #4]
 800a05e:	4613      	mov	r3, r2
 800a060:	00db      	lsls	r3, r3, #3
 800a062:	1a9b      	subs	r3, r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	440b      	add	r3, r1
 800a068:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a06c:	2200      	movs	r2, #0
 800a06e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a070:	7bfb      	ldrb	r3, [r7, #15]
 800a072:	3301      	adds	r3, #1
 800a074:	73fb      	strb	r3, [r7, #15]
 800a076:	7bfa      	ldrb	r2, [r7, #15]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d3b5      	bcc.n	8009fec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	603b      	str	r3, [r7, #0]
 800a086:	687e      	ldr	r6, [r7, #4]
 800a088:	466d      	mov	r5, sp
 800a08a:	f106 0410 	add.w	r4, r6, #16
 800a08e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a096:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a09a:	e885 0003 	stmia.w	r5, {r0, r1}
 800a09e:	1d33      	adds	r3, r6, #4
 800a0a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0a2:	6838      	ldr	r0, [r7, #0]
 800a0a4:	f003 fb72 	bl	800d78c <USB_DevInit>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d005      	beq.n	800a0ba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e014      	b.n	800a0e4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d102      	bne.n	800a0d8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f80a 	bl	800a0ec <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f003 fd24 	bl	800db2a <USB_DevDisconnect>

  return HAL_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3714      	adds	r7, #20
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a0ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a11a:	4b05      	ldr	r3, [pc, #20]	; (800a130 <HAL_PCDEx_ActivateLPM+0x44>)
 800a11c:	4313      	orrs	r3, r2
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	10000003 	.word	0x10000003

0800a134 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a134:	b480      	push	{r7}
 800a136:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a138:	4b05      	ldr	r3, [pc, #20]	; (800a150 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a04      	ldr	r2, [pc, #16]	; (800a150 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a13e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a142:	6013      	str	r3, [r2, #0]
}
 800a144:	bf00      	nop
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	40007000 	.word	0x40007000

0800a154 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b086      	sub	sp, #24
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a15c:	2300      	movs	r3, #0
 800a15e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d101      	bne.n	800a16a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	e29b      	b.n	800a6a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	2b00      	cmp	r3, #0
 800a174:	f000 8087 	beq.w	800a286 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a178:	4b96      	ldr	r3, [pc, #600]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	f003 030c 	and.w	r3, r3, #12
 800a180:	2b04      	cmp	r3, #4
 800a182:	d00c      	beq.n	800a19e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a184:	4b93      	ldr	r3, [pc, #588]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	f003 030c 	and.w	r3, r3, #12
 800a18c:	2b08      	cmp	r3, #8
 800a18e:	d112      	bne.n	800a1b6 <HAL_RCC_OscConfig+0x62>
 800a190:	4b90      	ldr	r3, [pc, #576]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a19c:	d10b      	bne.n	800a1b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a19e:	4b8d      	ldr	r3, [pc, #564]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d06c      	beq.n	800a284 <HAL_RCC_OscConfig+0x130>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d168      	bne.n	800a284 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e275      	b.n	800a6a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1be:	d106      	bne.n	800a1ce <HAL_RCC_OscConfig+0x7a>
 800a1c0:	4b84      	ldr	r3, [pc, #528]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a83      	ldr	r2, [pc, #524]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a1c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1ca:	6013      	str	r3, [r2, #0]
 800a1cc:	e02e      	b.n	800a22c <HAL_RCC_OscConfig+0xd8>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10c      	bne.n	800a1f0 <HAL_RCC_OscConfig+0x9c>
 800a1d6:	4b7f      	ldr	r3, [pc, #508]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a7e      	ldr	r2, [pc, #504]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a1dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1e0:	6013      	str	r3, [r2, #0]
 800a1e2:	4b7c      	ldr	r3, [pc, #496]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a7b      	ldr	r2, [pc, #492]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a1e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a1ec:	6013      	str	r3, [r2, #0]
 800a1ee:	e01d      	b.n	800a22c <HAL_RCC_OscConfig+0xd8>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a1f8:	d10c      	bne.n	800a214 <HAL_RCC_OscConfig+0xc0>
 800a1fa:	4b76      	ldr	r3, [pc, #472]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a75      	ldr	r2, [pc, #468]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	4b73      	ldr	r3, [pc, #460]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a72      	ldr	r2, [pc, #456]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a20c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a210:	6013      	str	r3, [r2, #0]
 800a212:	e00b      	b.n	800a22c <HAL_RCC_OscConfig+0xd8>
 800a214:	4b6f      	ldr	r3, [pc, #444]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a6e      	ldr	r2, [pc, #440]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a21a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a21e:	6013      	str	r3, [r2, #0]
 800a220:	4b6c      	ldr	r3, [pc, #432]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a6b      	ldr	r2, [pc, #428]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a22a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d013      	beq.n	800a25c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a234:	f7fd f970 	bl	8007518 <HAL_GetTick>
 800a238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a23a:	e008      	b.n	800a24e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a23c:	f7fd f96c 	bl	8007518 <HAL_GetTick>
 800a240:	4602      	mov	r2, r0
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	2b64      	cmp	r3, #100	; 0x64
 800a248:	d901      	bls.n	800a24e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a24a:	2303      	movs	r3, #3
 800a24c:	e229      	b.n	800a6a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a24e:	4b61      	ldr	r3, [pc, #388]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a256:	2b00      	cmp	r3, #0
 800a258:	d0f0      	beq.n	800a23c <HAL_RCC_OscConfig+0xe8>
 800a25a:	e014      	b.n	800a286 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a25c:	f7fd f95c 	bl	8007518 <HAL_GetTick>
 800a260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a262:	e008      	b.n	800a276 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a264:	f7fd f958 	bl	8007518 <HAL_GetTick>
 800a268:	4602      	mov	r2, r0
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	2b64      	cmp	r3, #100	; 0x64
 800a270:	d901      	bls.n	800a276 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	e215      	b.n	800a6a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a276:	4b57      	ldr	r3, [pc, #348]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1f0      	bne.n	800a264 <HAL_RCC_OscConfig+0x110>
 800a282:	e000      	b.n	800a286 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f003 0302 	and.w	r3, r3, #2
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d069      	beq.n	800a366 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a292:	4b50      	ldr	r3, [pc, #320]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f003 030c 	and.w	r3, r3, #12
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00b      	beq.n	800a2b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a29e:	4b4d      	ldr	r3, [pc, #308]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	f003 030c 	and.w	r3, r3, #12
 800a2a6:	2b08      	cmp	r3, #8
 800a2a8:	d11c      	bne.n	800a2e4 <HAL_RCC_OscConfig+0x190>
 800a2aa:	4b4a      	ldr	r3, [pc, #296]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d116      	bne.n	800a2e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2b6:	4b47      	ldr	r3, [pc, #284]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 0302 	and.w	r3, r3, #2
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d005      	beq.n	800a2ce <HAL_RCC_OscConfig+0x17a>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d001      	beq.n	800a2ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e1e9      	b.n	800a6a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2ce:	4b41      	ldr	r3, [pc, #260]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	00db      	lsls	r3, r3, #3
 800a2dc:	493d      	ldr	r1, [pc, #244]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2e2:	e040      	b.n	800a366 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d023      	beq.n	800a334 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a2ec:	4b39      	ldr	r3, [pc, #228]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a38      	ldr	r2, [pc, #224]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a2f2:	f043 0301 	orr.w	r3, r3, #1
 800a2f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2f8:	f7fd f90e 	bl	8007518 <HAL_GetTick>
 800a2fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2fe:	e008      	b.n	800a312 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a300:	f7fd f90a 	bl	8007518 <HAL_GetTick>
 800a304:	4602      	mov	r2, r0
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d901      	bls.n	800a312 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a30e:	2303      	movs	r3, #3
 800a310:	e1c7      	b.n	800a6a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a312:	4b30      	ldr	r3, [pc, #192]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f003 0302 	and.w	r3, r3, #2
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d0f0      	beq.n	800a300 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a31e:	4b2d      	ldr	r3, [pc, #180]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	00db      	lsls	r3, r3, #3
 800a32c:	4929      	ldr	r1, [pc, #164]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a32e:	4313      	orrs	r3, r2
 800a330:	600b      	str	r3, [r1, #0]
 800a332:	e018      	b.n	800a366 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a334:	4b27      	ldr	r3, [pc, #156]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a26      	ldr	r2, [pc, #152]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a33a:	f023 0301 	bic.w	r3, r3, #1
 800a33e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a340:	f7fd f8ea 	bl	8007518 <HAL_GetTick>
 800a344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a346:	e008      	b.n	800a35a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a348:	f7fd f8e6 	bl	8007518 <HAL_GetTick>
 800a34c:	4602      	mov	r2, r0
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	2b02      	cmp	r3, #2
 800a354:	d901      	bls.n	800a35a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a356:	2303      	movs	r3, #3
 800a358:	e1a3      	b.n	800a6a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a35a:	4b1e      	ldr	r3, [pc, #120]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f003 0302 	and.w	r3, r3, #2
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1f0      	bne.n	800a348 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 0308 	and.w	r3, r3, #8
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d038      	beq.n	800a3e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	695b      	ldr	r3, [r3, #20]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d019      	beq.n	800a3ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a37a:	4b16      	ldr	r3, [pc, #88]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a37c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a37e:	4a15      	ldr	r2, [pc, #84]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a380:	f043 0301 	orr.w	r3, r3, #1
 800a384:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a386:	f7fd f8c7 	bl	8007518 <HAL_GetTick>
 800a38a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a38c:	e008      	b.n	800a3a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a38e:	f7fd f8c3 	bl	8007518 <HAL_GetTick>
 800a392:	4602      	mov	r2, r0
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d901      	bls.n	800a3a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a39c:	2303      	movs	r3, #3
 800a39e:	e180      	b.n	800a6a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3a0:	4b0c      	ldr	r3, [pc, #48]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a3a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3a4:	f003 0302 	and.w	r3, r3, #2
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d0f0      	beq.n	800a38e <HAL_RCC_OscConfig+0x23a>
 800a3ac:	e01a      	b.n	800a3e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a3ae:	4b09      	ldr	r3, [pc, #36]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a3b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3b2:	4a08      	ldr	r2, [pc, #32]	; (800a3d4 <HAL_RCC_OscConfig+0x280>)
 800a3b4:	f023 0301 	bic.w	r3, r3, #1
 800a3b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3ba:	f7fd f8ad 	bl	8007518 <HAL_GetTick>
 800a3be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3c0:	e00a      	b.n	800a3d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3c2:	f7fd f8a9 	bl	8007518 <HAL_GetTick>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d903      	bls.n	800a3d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	e166      	b.n	800a6a2 <HAL_RCC_OscConfig+0x54e>
 800a3d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3d8:	4b92      	ldr	r3, [pc, #584]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a3da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3dc:	f003 0302 	and.w	r3, r3, #2
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1ee      	bne.n	800a3c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 0304 	and.w	r3, r3, #4
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f000 80a4 	beq.w	800a53a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3f2:	4b8c      	ldr	r3, [pc, #560]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10d      	bne.n	800a41a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3fe:	4b89      	ldr	r3, [pc, #548]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a402:	4a88      	ldr	r2, [pc, #544]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a408:	6413      	str	r3, [r2, #64]	; 0x40
 800a40a:	4b86      	ldr	r3, [pc, #536]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a412:	60bb      	str	r3, [r7, #8]
 800a414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a416:	2301      	movs	r3, #1
 800a418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a41a:	4b83      	ldr	r3, [pc, #524]	; (800a628 <HAL_RCC_OscConfig+0x4d4>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a422:	2b00      	cmp	r3, #0
 800a424:	d118      	bne.n	800a458 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a426:	4b80      	ldr	r3, [pc, #512]	; (800a628 <HAL_RCC_OscConfig+0x4d4>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a7f      	ldr	r2, [pc, #508]	; (800a628 <HAL_RCC_OscConfig+0x4d4>)
 800a42c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a432:	f7fd f871 	bl	8007518 <HAL_GetTick>
 800a436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a438:	e008      	b.n	800a44c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a43a:	f7fd f86d 	bl	8007518 <HAL_GetTick>
 800a43e:	4602      	mov	r2, r0
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	2b64      	cmp	r3, #100	; 0x64
 800a446:	d901      	bls.n	800a44c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a448:	2303      	movs	r3, #3
 800a44a:	e12a      	b.n	800a6a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a44c:	4b76      	ldr	r3, [pc, #472]	; (800a628 <HAL_RCC_OscConfig+0x4d4>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a454:	2b00      	cmp	r3, #0
 800a456:	d0f0      	beq.n	800a43a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d106      	bne.n	800a46e <HAL_RCC_OscConfig+0x31a>
 800a460:	4b70      	ldr	r3, [pc, #448]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a464:	4a6f      	ldr	r2, [pc, #444]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a466:	f043 0301 	orr.w	r3, r3, #1
 800a46a:	6713      	str	r3, [r2, #112]	; 0x70
 800a46c:	e02d      	b.n	800a4ca <HAL_RCC_OscConfig+0x376>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10c      	bne.n	800a490 <HAL_RCC_OscConfig+0x33c>
 800a476:	4b6b      	ldr	r3, [pc, #428]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a47a:	4a6a      	ldr	r2, [pc, #424]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a47c:	f023 0301 	bic.w	r3, r3, #1
 800a480:	6713      	str	r3, [r2, #112]	; 0x70
 800a482:	4b68      	ldr	r3, [pc, #416]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a486:	4a67      	ldr	r2, [pc, #412]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a488:	f023 0304 	bic.w	r3, r3, #4
 800a48c:	6713      	str	r3, [r2, #112]	; 0x70
 800a48e:	e01c      	b.n	800a4ca <HAL_RCC_OscConfig+0x376>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	2b05      	cmp	r3, #5
 800a496:	d10c      	bne.n	800a4b2 <HAL_RCC_OscConfig+0x35e>
 800a498:	4b62      	ldr	r3, [pc, #392]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a49a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a49c:	4a61      	ldr	r2, [pc, #388]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a49e:	f043 0304 	orr.w	r3, r3, #4
 800a4a2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4a4:	4b5f      	ldr	r3, [pc, #380]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a4a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a8:	4a5e      	ldr	r2, [pc, #376]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a4aa:	f043 0301 	orr.w	r3, r3, #1
 800a4ae:	6713      	str	r3, [r2, #112]	; 0x70
 800a4b0:	e00b      	b.n	800a4ca <HAL_RCC_OscConfig+0x376>
 800a4b2:	4b5c      	ldr	r3, [pc, #368]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a4b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b6:	4a5b      	ldr	r2, [pc, #364]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a4b8:	f023 0301 	bic.w	r3, r3, #1
 800a4bc:	6713      	str	r3, [r2, #112]	; 0x70
 800a4be:	4b59      	ldr	r3, [pc, #356]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a4c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4c2:	4a58      	ldr	r2, [pc, #352]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a4c4:	f023 0304 	bic.w	r3, r3, #4
 800a4c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d015      	beq.n	800a4fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4d2:	f7fd f821 	bl	8007518 <HAL_GetTick>
 800a4d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4d8:	e00a      	b.n	800a4f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4da:	f7fd f81d 	bl	8007518 <HAL_GetTick>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d901      	bls.n	800a4f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	e0d8      	b.n	800a6a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4f0:	4b4c      	ldr	r3, [pc, #304]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a4f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f4:	f003 0302 	and.w	r3, r3, #2
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d0ee      	beq.n	800a4da <HAL_RCC_OscConfig+0x386>
 800a4fc:	e014      	b.n	800a528 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4fe:	f7fd f80b 	bl	8007518 <HAL_GetTick>
 800a502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a504:	e00a      	b.n	800a51c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a506:	f7fd f807 	bl	8007518 <HAL_GetTick>
 800a50a:	4602      	mov	r2, r0
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	f241 3288 	movw	r2, #5000	; 0x1388
 800a514:	4293      	cmp	r3, r2
 800a516:	d901      	bls.n	800a51c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a518:	2303      	movs	r3, #3
 800a51a:	e0c2      	b.n	800a6a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a51c:	4b41      	ldr	r3, [pc, #260]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a51e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a520:	f003 0302 	and.w	r3, r3, #2
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1ee      	bne.n	800a506 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a528:	7dfb      	ldrb	r3, [r7, #23]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d105      	bne.n	800a53a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a52e:	4b3d      	ldr	r3, [pc, #244]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a532:	4a3c      	ldr	r2, [pc, #240]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a538:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	f000 80ae 	beq.w	800a6a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a544:	4b37      	ldr	r3, [pc, #220]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	f003 030c 	and.w	r3, r3, #12
 800a54c:	2b08      	cmp	r3, #8
 800a54e:	d06d      	beq.n	800a62c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	2b02      	cmp	r3, #2
 800a556:	d14b      	bne.n	800a5f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a558:	4b32      	ldr	r3, [pc, #200]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a31      	ldr	r2, [pc, #196]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a55e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a564:	f7fc ffd8 	bl	8007518 <HAL_GetTick>
 800a568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a56a:	e008      	b.n	800a57e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a56c:	f7fc ffd4 	bl	8007518 <HAL_GetTick>
 800a570:	4602      	mov	r2, r0
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	2b02      	cmp	r3, #2
 800a578:	d901      	bls.n	800a57e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a57a:	2303      	movs	r3, #3
 800a57c:	e091      	b.n	800a6a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a57e:	4b29      	ldr	r3, [pc, #164]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1f0      	bne.n	800a56c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	69da      	ldr	r2, [r3, #28]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	431a      	orrs	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a598:	019b      	lsls	r3, r3, #6
 800a59a:	431a      	orrs	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a0:	085b      	lsrs	r3, r3, #1
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	041b      	lsls	r3, r3, #16
 800a5a6:	431a      	orrs	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ac:	061b      	lsls	r3, r3, #24
 800a5ae:	431a      	orrs	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b4:	071b      	lsls	r3, r3, #28
 800a5b6:	491b      	ldr	r1, [pc, #108]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a5bc:	4b19      	ldr	r3, [pc, #100]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a18      	ldr	r2, [pc, #96]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a5c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a5c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5c8:	f7fc ffa6 	bl	8007518 <HAL_GetTick>
 800a5cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5ce:	e008      	b.n	800a5e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5d0:	f7fc ffa2 	bl	8007518 <HAL_GetTick>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d901      	bls.n	800a5e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e05f      	b.n	800a6a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5e2:	4b10      	ldr	r3, [pc, #64]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d0f0      	beq.n	800a5d0 <HAL_RCC_OscConfig+0x47c>
 800a5ee:	e057      	b.n	800a6a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5f0:	4b0c      	ldr	r3, [pc, #48]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a0b      	ldr	r2, [pc, #44]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a5f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a5fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5fc:	f7fc ff8c 	bl	8007518 <HAL_GetTick>
 800a600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a602:	e008      	b.n	800a616 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a604:	f7fc ff88 	bl	8007518 <HAL_GetTick>
 800a608:	4602      	mov	r2, r0
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	1ad3      	subs	r3, r2, r3
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d901      	bls.n	800a616 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800a612:	2303      	movs	r3, #3
 800a614:	e045      	b.n	800a6a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a616:	4b03      	ldr	r3, [pc, #12]	; (800a624 <HAL_RCC_OscConfig+0x4d0>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1f0      	bne.n	800a604 <HAL_RCC_OscConfig+0x4b0>
 800a622:	e03d      	b.n	800a6a0 <HAL_RCC_OscConfig+0x54c>
 800a624:	40023800 	.word	0x40023800
 800a628:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a62c:	4b1f      	ldr	r3, [pc, #124]	; (800a6ac <HAL_RCC_OscConfig+0x558>)
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d030      	beq.n	800a69c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a644:	429a      	cmp	r2, r3
 800a646:	d129      	bne.n	800a69c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a652:	429a      	cmp	r2, r3
 800a654:	d122      	bne.n	800a69c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a65c:	4013      	ands	r3, r2
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a662:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a664:	4293      	cmp	r3, r2
 800a666:	d119      	bne.n	800a69c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a672:	085b      	lsrs	r3, r3, #1
 800a674:	3b01      	subs	r3, #1
 800a676:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a678:	429a      	cmp	r2, r3
 800a67a:	d10f      	bne.n	800a69c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a686:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a688:	429a      	cmp	r2, r3
 800a68a:	d107      	bne.n	800a69c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a696:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a698:	429a      	cmp	r2, r3
 800a69a:	d001      	beq.n	800a6a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	e000      	b.n	800a6a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3718      	adds	r7, #24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	40023800 	.word	0x40023800

0800a6b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d101      	bne.n	800a6c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e0d0      	b.n	800a86a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a6c8:	4b6a      	ldr	r3, [pc, #424]	; (800a874 <HAL_RCC_ClockConfig+0x1c4>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f003 030f 	and.w	r3, r3, #15
 800a6d0:	683a      	ldr	r2, [r7, #0]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d910      	bls.n	800a6f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6d6:	4b67      	ldr	r3, [pc, #412]	; (800a874 <HAL_RCC_ClockConfig+0x1c4>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f023 020f 	bic.w	r2, r3, #15
 800a6de:	4965      	ldr	r1, [pc, #404]	; (800a874 <HAL_RCC_ClockConfig+0x1c4>)
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6e6:	4b63      	ldr	r3, [pc, #396]	; (800a874 <HAL_RCC_ClockConfig+0x1c4>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f003 030f 	and.w	r3, r3, #15
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d001      	beq.n	800a6f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e0b8      	b.n	800a86a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 0302 	and.w	r3, r3, #2
 800a700:	2b00      	cmp	r3, #0
 800a702:	d020      	beq.n	800a746 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 0304 	and.w	r3, r3, #4
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d005      	beq.n	800a71c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a710:	4b59      	ldr	r3, [pc, #356]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	4a58      	ldr	r2, [pc, #352]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a71a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0308 	and.w	r3, r3, #8
 800a724:	2b00      	cmp	r3, #0
 800a726:	d005      	beq.n	800a734 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a728:	4b53      	ldr	r3, [pc, #332]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	4a52      	ldr	r2, [pc, #328]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a72e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a732:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a734:	4b50      	ldr	r3, [pc, #320]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	494d      	ldr	r1, [pc, #308]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a742:	4313      	orrs	r3, r2
 800a744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d040      	beq.n	800a7d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d107      	bne.n	800a76a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a75a:	4b47      	ldr	r3, [pc, #284]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a762:	2b00      	cmp	r3, #0
 800a764:	d115      	bne.n	800a792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	e07f      	b.n	800a86a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d107      	bne.n	800a782 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a772:	4b41      	ldr	r3, [pc, #260]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d109      	bne.n	800a792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e073      	b.n	800a86a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a782:	4b3d      	ldr	r3, [pc, #244]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f003 0302 	and.w	r3, r3, #2
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d101      	bne.n	800a792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	e06b      	b.n	800a86a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a792:	4b39      	ldr	r3, [pc, #228]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	f023 0203 	bic.w	r2, r3, #3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	4936      	ldr	r1, [pc, #216]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7a4:	f7fc feb8 	bl	8007518 <HAL_GetTick>
 800a7a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7aa:	e00a      	b.n	800a7c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7ac:	f7fc feb4 	bl	8007518 <HAL_GetTick>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d901      	bls.n	800a7c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	e053      	b.n	800a86a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7c2:	4b2d      	ldr	r3, [pc, #180]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	f003 020c 	and.w	r2, r3, #12
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d1eb      	bne.n	800a7ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a7d4:	4b27      	ldr	r3, [pc, #156]	; (800a874 <HAL_RCC_ClockConfig+0x1c4>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f003 030f 	and.w	r3, r3, #15
 800a7dc:	683a      	ldr	r2, [r7, #0]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d210      	bcs.n	800a804 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7e2:	4b24      	ldr	r3, [pc, #144]	; (800a874 <HAL_RCC_ClockConfig+0x1c4>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f023 020f 	bic.w	r2, r3, #15
 800a7ea:	4922      	ldr	r1, [pc, #136]	; (800a874 <HAL_RCC_ClockConfig+0x1c4>)
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7f2:	4b20      	ldr	r3, [pc, #128]	; (800a874 <HAL_RCC_ClockConfig+0x1c4>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f003 030f 	and.w	r3, r3, #15
 800a7fa:	683a      	ldr	r2, [r7, #0]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d001      	beq.n	800a804 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	e032      	b.n	800a86a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 0304 	and.w	r3, r3, #4
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d008      	beq.n	800a822 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a810:	4b19      	ldr	r3, [pc, #100]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	4916      	ldr	r1, [pc, #88]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a81e:	4313      	orrs	r3, r2
 800a820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f003 0308 	and.w	r3, r3, #8
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d009      	beq.n	800a842 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a82e:	4b12      	ldr	r3, [pc, #72]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	00db      	lsls	r3, r3, #3
 800a83c:	490e      	ldr	r1, [pc, #56]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a83e:	4313      	orrs	r3, r2
 800a840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a842:	f000 f821 	bl	800a888 <HAL_RCC_GetSysClockFreq>
 800a846:	4601      	mov	r1, r0
 800a848:	4b0b      	ldr	r3, [pc, #44]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	091b      	lsrs	r3, r3, #4
 800a84e:	f003 030f 	and.w	r3, r3, #15
 800a852:	4a0a      	ldr	r2, [pc, #40]	; (800a87c <HAL_RCC_ClockConfig+0x1cc>)
 800a854:	5cd3      	ldrb	r3, [r2, r3]
 800a856:	fa21 f303 	lsr.w	r3, r1, r3
 800a85a:	4a09      	ldr	r2, [pc, #36]	; (800a880 <HAL_RCC_ClockConfig+0x1d0>)
 800a85c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a85e:	4b09      	ldr	r3, [pc, #36]	; (800a884 <HAL_RCC_ClockConfig+0x1d4>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4618      	mov	r0, r3
 800a864:	f7fc fbfe 	bl	8007064 <HAL_InitTick>

  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	40023c00 	.word	0x40023c00
 800a878:	40023800 	.word	0x40023800
 800a87c:	08015920 	.word	0x08015920
 800a880:	20000188 	.word	0x20000188
 800a884:	2000018c 	.word	0x2000018c

0800a888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	607b      	str	r3, [r7, #4]
 800a892:	2300      	movs	r3, #0
 800a894:	60fb      	str	r3, [r7, #12]
 800a896:	2300      	movs	r3, #0
 800a898:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a89e:	4b50      	ldr	r3, [pc, #320]	; (800a9e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	f003 030c 	and.w	r3, r3, #12
 800a8a6:	2b04      	cmp	r3, #4
 800a8a8:	d007      	beq.n	800a8ba <HAL_RCC_GetSysClockFreq+0x32>
 800a8aa:	2b08      	cmp	r3, #8
 800a8ac:	d008      	beq.n	800a8c0 <HAL_RCC_GetSysClockFreq+0x38>
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f040 808d 	bne.w	800a9ce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a8b4:	4b4b      	ldr	r3, [pc, #300]	; (800a9e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a8b6:	60bb      	str	r3, [r7, #8]
      break;
 800a8b8:	e08c      	b.n	800a9d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a8ba:	4b4b      	ldr	r3, [pc, #300]	; (800a9e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a8bc:	60bb      	str	r3, [r7, #8]
      break;
 800a8be:	e089      	b.n	800a9d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a8c0:	4b47      	ldr	r3, [pc, #284]	; (800a9e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8c8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a8ca:	4b45      	ldr	r3, [pc, #276]	; (800a9e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d023      	beq.n	800a91e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8d6:	4b42      	ldr	r3, [pc, #264]	; (800a9e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	099b      	lsrs	r3, r3, #6
 800a8dc:	f04f 0400 	mov.w	r4, #0
 800a8e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a8e4:	f04f 0200 	mov.w	r2, #0
 800a8e8:	ea03 0501 	and.w	r5, r3, r1
 800a8ec:	ea04 0602 	and.w	r6, r4, r2
 800a8f0:	4a3d      	ldr	r2, [pc, #244]	; (800a9e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a8f2:	fb02 f106 	mul.w	r1, r2, r6
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	fb02 f205 	mul.w	r2, r2, r5
 800a8fc:	440a      	add	r2, r1
 800a8fe:	493a      	ldr	r1, [pc, #232]	; (800a9e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a900:	fba5 0101 	umull	r0, r1, r5, r1
 800a904:	1853      	adds	r3, r2, r1
 800a906:	4619      	mov	r1, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f04f 0400 	mov.w	r4, #0
 800a90e:	461a      	mov	r2, r3
 800a910:	4623      	mov	r3, r4
 800a912:	f7f5 fced 	bl	80002f0 <__aeabi_uldivmod>
 800a916:	4603      	mov	r3, r0
 800a918:	460c      	mov	r4, r1
 800a91a:	60fb      	str	r3, [r7, #12]
 800a91c:	e049      	b.n	800a9b2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a91e:	4b30      	ldr	r3, [pc, #192]	; (800a9e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	099b      	lsrs	r3, r3, #6
 800a924:	f04f 0400 	mov.w	r4, #0
 800a928:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a92c:	f04f 0200 	mov.w	r2, #0
 800a930:	ea03 0501 	and.w	r5, r3, r1
 800a934:	ea04 0602 	and.w	r6, r4, r2
 800a938:	4629      	mov	r1, r5
 800a93a:	4632      	mov	r2, r6
 800a93c:	f04f 0300 	mov.w	r3, #0
 800a940:	f04f 0400 	mov.w	r4, #0
 800a944:	0154      	lsls	r4, r2, #5
 800a946:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a94a:	014b      	lsls	r3, r1, #5
 800a94c:	4619      	mov	r1, r3
 800a94e:	4622      	mov	r2, r4
 800a950:	1b49      	subs	r1, r1, r5
 800a952:	eb62 0206 	sbc.w	r2, r2, r6
 800a956:	f04f 0300 	mov.w	r3, #0
 800a95a:	f04f 0400 	mov.w	r4, #0
 800a95e:	0194      	lsls	r4, r2, #6
 800a960:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a964:	018b      	lsls	r3, r1, #6
 800a966:	1a5b      	subs	r3, r3, r1
 800a968:	eb64 0402 	sbc.w	r4, r4, r2
 800a96c:	f04f 0100 	mov.w	r1, #0
 800a970:	f04f 0200 	mov.w	r2, #0
 800a974:	00e2      	lsls	r2, r4, #3
 800a976:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a97a:	00d9      	lsls	r1, r3, #3
 800a97c:	460b      	mov	r3, r1
 800a97e:	4614      	mov	r4, r2
 800a980:	195b      	adds	r3, r3, r5
 800a982:	eb44 0406 	adc.w	r4, r4, r6
 800a986:	f04f 0100 	mov.w	r1, #0
 800a98a:	f04f 0200 	mov.w	r2, #0
 800a98e:	02a2      	lsls	r2, r4, #10
 800a990:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a994:	0299      	lsls	r1, r3, #10
 800a996:	460b      	mov	r3, r1
 800a998:	4614      	mov	r4, r2
 800a99a:	4618      	mov	r0, r3
 800a99c:	4621      	mov	r1, r4
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f04f 0400 	mov.w	r4, #0
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	4623      	mov	r3, r4
 800a9a8:	f7f5 fca2 	bl	80002f0 <__aeabi_uldivmod>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a9b2:	4b0b      	ldr	r3, [pc, #44]	; (800a9e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	0c1b      	lsrs	r3, r3, #16
 800a9b8:	f003 0303 	and.w	r3, r3, #3
 800a9bc:	3301      	adds	r3, #1
 800a9be:	005b      	lsls	r3, r3, #1
 800a9c0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ca:	60bb      	str	r3, [r7, #8]
      break;
 800a9cc:	e002      	b.n	800a9d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a9ce:	4b05      	ldr	r3, [pc, #20]	; (800a9e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a9d0:	60bb      	str	r3, [r7, #8]
      break;
 800a9d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a9d4:	68bb      	ldr	r3, [r7, #8]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	40023800 	.word	0x40023800
 800a9e4:	00f42400 	.word	0x00f42400
 800a9e8:	017d7840 	.word	0x017d7840

0800a9ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a9f0:	4b03      	ldr	r3, [pc, #12]	; (800aa00 <HAL_RCC_GetHCLKFreq+0x14>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	20000188 	.word	0x20000188

0800aa04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aa08:	f7ff fff0 	bl	800a9ec <HAL_RCC_GetHCLKFreq>
 800aa0c:	4601      	mov	r1, r0
 800aa0e:	4b05      	ldr	r3, [pc, #20]	; (800aa24 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	0a9b      	lsrs	r3, r3, #10
 800aa14:	f003 0307 	and.w	r3, r3, #7
 800aa18:	4a03      	ldr	r2, [pc, #12]	; (800aa28 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa1a:	5cd3      	ldrb	r3, [r2, r3]
 800aa1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	40023800 	.word	0x40023800
 800aa28:	08015930 	.word	0x08015930

0800aa2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aa30:	f7ff ffdc 	bl	800a9ec <HAL_RCC_GetHCLKFreq>
 800aa34:	4601      	mov	r1, r0
 800aa36:	4b05      	ldr	r3, [pc, #20]	; (800aa4c <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	0b5b      	lsrs	r3, r3, #13
 800aa3c:	f003 0307 	and.w	r3, r3, #7
 800aa40:	4a03      	ldr	r2, [pc, #12]	; (800aa50 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa42:	5cd3      	ldrb	r3, [r2, r3]
 800aa44:	fa21 f303 	lsr.w	r3, r1, r3
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	40023800 	.word	0x40023800
 800aa50:	08015930 	.word	0x08015930

0800aa54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	220f      	movs	r2, #15
 800aa62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800aa64:	4b12      	ldr	r3, [pc, #72]	; (800aab0 <HAL_RCC_GetClockConfig+0x5c>)
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	f003 0203 	and.w	r2, r3, #3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800aa70:	4b0f      	ldr	r3, [pc, #60]	; (800aab0 <HAL_RCC_GetClockConfig+0x5c>)
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800aa7c:	4b0c      	ldr	r3, [pc, #48]	; (800aab0 <HAL_RCC_GetClockConfig+0x5c>)
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800aa88:	4b09      	ldr	r3, [pc, #36]	; (800aab0 <HAL_RCC_GetClockConfig+0x5c>)
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	08db      	lsrs	r3, r3, #3
 800aa8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800aa96:	4b07      	ldr	r3, [pc, #28]	; (800aab4 <HAL_RCC_GetClockConfig+0x60>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f003 020f 	and.w	r2, r3, #15
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	601a      	str	r2, [r3, #0]
}
 800aaa2:	bf00      	nop
 800aaa4:	370c      	adds	r7, #12
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	40023800 	.word	0x40023800
 800aab4:	40023c00 	.word	0x40023c00

0800aab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b088      	sub	sp, #32
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800aac0:	2300      	movs	r3, #0
 800aac2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800aac4:	2300      	movs	r3, #0
 800aac6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800aac8:	2300      	movs	r3, #0
 800aaca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800aad0:	2300      	movs	r3, #0
 800aad2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 0301 	and.w	r3, r3, #1
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d012      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800aae0:	4b69      	ldr	r3, [pc, #420]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	4a68      	ldr	r2, [pc, #416]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aae6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aaea:	6093      	str	r3, [r2, #8]
 800aaec:	4b66      	ldr	r3, [pc, #408]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aaee:	689a      	ldr	r2, [r3, #8]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaf4:	4964      	ldr	r1, [pc, #400]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d101      	bne.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800ab02:	2301      	movs	r3, #1
 800ab04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d017      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab12:	4b5d      	ldr	r3, [pc, #372]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab20:	4959      	ldr	r1, [pc, #356]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab22:	4313      	orrs	r3, r2
 800ab24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab30:	d101      	bne.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800ab32:	2301      	movs	r3, #1
 800ab34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d101      	bne.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d017      	beq.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ab4e:	4b4e      	ldr	r3, [pc, #312]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5c:	494a      	ldr	r1, [pc, #296]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab6c:	d101      	bne.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d001      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 0320 	and.w	r3, r3, #32
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f000 808b 	beq.w	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ab9c:	4b3a      	ldr	r3, [pc, #232]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba0:	4a39      	ldr	r2, [pc, #228]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aba6:	6413      	str	r3, [r2, #64]	; 0x40
 800aba8:	4b37      	ldr	r3, [pc, #220]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abb0:	60bb      	str	r3, [r7, #8]
 800abb2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800abb4:	4b35      	ldr	r3, [pc, #212]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a34      	ldr	r2, [pc, #208]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800abba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abc0:	f7fc fcaa 	bl	8007518 <HAL_GetTick>
 800abc4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800abc6:	e008      	b.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800abc8:	f7fc fca6 	bl	8007518 <HAL_GetTick>
 800abcc:	4602      	mov	r2, r0
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	2b64      	cmp	r3, #100	; 0x64
 800abd4:	d901      	bls.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800abd6:	2303      	movs	r3, #3
 800abd8:	e38d      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800abda:	4b2c      	ldr	r3, [pc, #176]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d0f0      	beq.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800abe6:	4b28      	ldr	r3, [pc, #160]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d035      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abfe:	693a      	ldr	r2, [r7, #16]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d02e      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ac04:	4b20      	ldr	r3, [pc, #128]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ac0e:	4b1e      	ldr	r3, [pc, #120]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac12:	4a1d      	ldr	r2, [pc, #116]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac18:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ac1a:	4b1b      	ldr	r3, [pc, #108]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac1e:	4a1a      	ldr	r2, [pc, #104]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ac26:	4a18      	ldr	r2, [pc, #96]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ac2c:	4b16      	ldr	r3, [pc, #88]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac30:	f003 0301 	and.w	r3, r3, #1
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d114      	bne.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac38:	f7fc fc6e 	bl	8007518 <HAL_GetTick>
 800ac3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac3e:	e00a      	b.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac40:	f7fc fc6a 	bl	8007518 <HAL_GetTick>
 800ac44:	4602      	mov	r2, r0
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	1ad3      	subs	r3, r2, r3
 800ac4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d901      	bls.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ac52:	2303      	movs	r3, #3
 800ac54:	e34f      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac56:	4b0c      	ldr	r3, [pc, #48]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac5a:	f003 0302 	and.w	r3, r3, #2
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d0ee      	beq.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac6e:	d111      	bne.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800ac70:	4b05      	ldr	r3, [pc, #20]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ac7c:	4b04      	ldr	r3, [pc, #16]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800ac7e:	400b      	ands	r3, r1
 800ac80:	4901      	ldr	r1, [pc, #4]	; (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac82:	4313      	orrs	r3, r2
 800ac84:	608b      	str	r3, [r1, #8]
 800ac86:	e00b      	b.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ac88:	40023800 	.word	0x40023800
 800ac8c:	40007000 	.word	0x40007000
 800ac90:	0ffffcff 	.word	0x0ffffcff
 800ac94:	4bb3      	ldr	r3, [pc, #716]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	4ab2      	ldr	r2, [pc, #712]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ac9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ac9e:	6093      	str	r3, [r2, #8]
 800aca0:	4bb0      	ldr	r3, [pc, #704]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800aca2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acac:	49ad      	ldr	r1, [pc, #692]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acae:	4313      	orrs	r3, r2
 800acb0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 0310 	and.w	r3, r3, #16
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d010      	beq.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800acbe:	4ba9      	ldr	r3, [pc, #676]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acc4:	4aa7      	ldr	r2, [pc, #668]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800acca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800acce:	4ba5      	ldr	r3, [pc, #660]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acd0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd8:	49a2      	ldr	r1, [pc, #648]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acda:	4313      	orrs	r3, r2
 800acdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00a      	beq.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800acec:	4b9d      	ldr	r3, [pc, #628]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acf2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acfa:	499a      	ldr	r1, [pc, #616]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acfc:	4313      	orrs	r3, r2
 800acfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00a      	beq.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ad0e:	4b95      	ldr	r3, [pc, #596]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad1c:	4991      	ldr	r1, [pc, #580]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00a      	beq.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ad30:	4b8c      	ldr	r3, [pc, #560]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad3e:	4989      	ldr	r1, [pc, #548]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad40:	4313      	orrs	r3, r2
 800ad42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00a      	beq.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ad52:	4b84      	ldr	r3, [pc, #528]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad60:	4980      	ldr	r1, [pc, #512]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad62:	4313      	orrs	r3, r2
 800ad64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00a      	beq.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ad74:	4b7b      	ldr	r3, [pc, #492]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad7a:	f023 0203 	bic.w	r2, r3, #3
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad82:	4978      	ldr	r1, [pc, #480]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad84:	4313      	orrs	r3, r2
 800ad86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00a      	beq.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ad96:	4b73      	ldr	r3, [pc, #460]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad9c:	f023 020c 	bic.w	r2, r3, #12
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ada4:	496f      	ldr	r1, [pc, #444]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ada6:	4313      	orrs	r3, r2
 800ada8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00a      	beq.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800adb8:	4b6a      	ldr	r3, [pc, #424]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800adba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adc6:	4967      	ldr	r1, [pc, #412]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800adc8:	4313      	orrs	r3, r2
 800adca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00a      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800adda:	4b62      	ldr	r3, [pc, #392]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800addc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ade0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ade8:	495e      	ldr	r1, [pc, #376]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800adea:	4313      	orrs	r3, r2
 800adec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d00a      	beq.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800adfc:	4b59      	ldr	r3, [pc, #356]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800adfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae0a:	4956      	ldr	r1, [pc, #344]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00a      	beq.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ae1e:	4b51      	ldr	r3, [pc, #324]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae2c:	494d      	ldr	r1, [pc, #308]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d00a      	beq.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ae40:	4b48      	ldr	r3, [pc, #288]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae4e:	4945      	ldr	r1, [pc, #276]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae50:	4313      	orrs	r3, r2
 800ae52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00a      	beq.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800ae62:	4b40      	ldr	r3, [pc, #256]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae70:	493c      	ldr	r1, [pc, #240]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae72:	4313      	orrs	r3, r2
 800ae74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00a      	beq.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ae84:	4b37      	ldr	r3, [pc, #220]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae92:	4934      	ldr	r1, [pc, #208]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae94:	4313      	orrs	r3, r2
 800ae96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d011      	beq.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800aea6:	4b2f      	ldr	r3, [pc, #188]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800aea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aeb4:	492b      	ldr	r1, [pc, #172]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aec4:	d101      	bne.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800aec6:	2301      	movs	r3, #1
 800aec8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f003 0308 	and.w	r3, r3, #8
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d001      	beq.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800aed6:	2301      	movs	r3, #1
 800aed8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00a      	beq.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aee6:	4b1f      	ldr	r3, [pc, #124]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800aee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aef4:	491b      	ldr	r1, [pc, #108]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00b      	beq.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800af08:	4b16      	ldr	r3, [pc, #88]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800af0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af18:	4912      	ldr	r1, [pc, #72]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800af1a:	4313      	orrs	r3, r2
 800af1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00b      	beq.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800af2c:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800af2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af32:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af3c:	4909      	ldr	r1, [pc, #36]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800af3e:	4313      	orrs	r3, r2
 800af40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d00f      	beq.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800af50:	4b04      	ldr	r3, [pc, #16]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800af52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af60:	e002      	b.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800af62:	bf00      	nop
 800af64:	40023800 	.word	0x40023800
 800af68:	4985      	ldr	r1, [pc, #532]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800af6a:	4313      	orrs	r3, r2
 800af6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00b      	beq.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800af7c:	4b80      	ldr	r3, [pc, #512]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800af7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af8c:	497c      	ldr	r1, [pc, #496]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800af8e:	4313      	orrs	r3, r2
 800af90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d005      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afa2:	f040 80d6 	bne.w	800b152 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800afa6:	4b76      	ldr	r3, [pc, #472]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a75      	ldr	r2, [pc, #468]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800afac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800afb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afb2:	f7fc fab1 	bl	8007518 <HAL_GetTick>
 800afb6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800afb8:	e008      	b.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800afba:	f7fc faad 	bl	8007518 <HAL_GetTick>
 800afbe:	4602      	mov	r2, r0
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	1ad3      	subs	r3, r2, r3
 800afc4:	2b64      	cmp	r3, #100	; 0x64
 800afc6:	d901      	bls.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800afc8:	2303      	movs	r3, #3
 800afca:	e194      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800afcc:	4b6c      	ldr	r3, [pc, #432]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d1f0      	bne.n	800afba <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f003 0301 	and.w	r3, r3, #1
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d021      	beq.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d11d      	bne.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800afec:	4b64      	ldr	r3, [pc, #400]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800afee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aff2:	0c1b      	lsrs	r3, r3, #16
 800aff4:	f003 0303 	and.w	r3, r3, #3
 800aff8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800affa:	4b61      	ldr	r3, [pc, #388]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800affc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b000:	0e1b      	lsrs	r3, r3, #24
 800b002:	f003 030f 	and.w	r3, r3, #15
 800b006:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	019a      	lsls	r2, r3, #6
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	041b      	lsls	r3, r3, #16
 800b012:	431a      	orrs	r2, r3
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	061b      	lsls	r3, r3, #24
 800b018:	431a      	orrs	r2, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	071b      	lsls	r3, r3, #28
 800b020:	4957      	ldr	r1, [pc, #348]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b022:	4313      	orrs	r3, r2
 800b024:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b030:	2b00      	cmp	r3, #0
 800b032:	d004      	beq.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x586>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b03c:	d00a      	beq.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b046:	2b00      	cmp	r3, #0
 800b048:	d02e      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b052:	d129      	bne.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b054:	4b4a      	ldr	r3, [pc, #296]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b05a:	0c1b      	lsrs	r3, r3, #16
 800b05c:	f003 0303 	and.w	r3, r3, #3
 800b060:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b062:	4b47      	ldr	r3, [pc, #284]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b068:	0f1b      	lsrs	r3, r3, #28
 800b06a:	f003 0307 	and.w	r3, r3, #7
 800b06e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	019a      	lsls	r2, r3, #6
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	041b      	lsls	r3, r3, #16
 800b07a:	431a      	orrs	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	061b      	lsls	r3, r3, #24
 800b082:	431a      	orrs	r2, r3
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	071b      	lsls	r3, r3, #28
 800b088:	493d      	ldr	r1, [pc, #244]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b08a:	4313      	orrs	r3, r2
 800b08c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b090:	4b3b      	ldr	r3, [pc, #236]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b096:	f023 021f 	bic.w	r2, r3, #31
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	4937      	ldr	r1, [pc, #220]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d01d      	beq.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b0b4:	4b32      	ldr	r3, [pc, #200]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b0b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0ba:	0e1b      	lsrs	r3, r3, #24
 800b0bc:	f003 030f 	and.w	r3, r3, #15
 800b0c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b0c2:	4b2f      	ldr	r3, [pc, #188]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b0c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0c8:	0f1b      	lsrs	r3, r3, #28
 800b0ca:	f003 0307 	and.w	r3, r3, #7
 800b0ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	019a      	lsls	r2, r3, #6
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	041b      	lsls	r3, r3, #16
 800b0dc:	431a      	orrs	r2, r3
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	061b      	lsls	r3, r3, #24
 800b0e2:	431a      	orrs	r2, r3
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	071b      	lsls	r3, r3, #28
 800b0e8:	4925      	ldr	r1, [pc, #148]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d011      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	019a      	lsls	r2, r3, #6
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	041b      	lsls	r3, r3, #16
 800b108:	431a      	orrs	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	061b      	lsls	r3, r3, #24
 800b110:	431a      	orrs	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	071b      	lsls	r3, r3, #28
 800b118:	4919      	ldr	r1, [pc, #100]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b11a:	4313      	orrs	r3, r2
 800b11c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b120:	4b17      	ldr	r3, [pc, #92]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a16      	ldr	r2, [pc, #88]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b126:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b12a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b12c:	f7fc f9f4 	bl	8007518 <HAL_GetTick>
 800b130:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b132:	e008      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b134:	f7fc f9f0 	bl	8007518 <HAL_GetTick>
 800b138:	4602      	mov	r2, r0
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	1ad3      	subs	r3, r2, r3
 800b13e:	2b64      	cmp	r3, #100	; 0x64
 800b140:	d901      	bls.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b142:	2303      	movs	r3, #3
 800b144:	e0d7      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b146:	4b0e      	ldr	r3, [pc, #56]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d0f0      	beq.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	2b01      	cmp	r3, #1
 800b156:	f040 80cd 	bne.w	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b15a:	4b09      	ldr	r3, [pc, #36]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a08      	ldr	r2, [pc, #32]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b166:	f7fc f9d7 	bl	8007518 <HAL_GetTick>
 800b16a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b16c:	e00a      	b.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b16e:	f7fc f9d3 	bl	8007518 <HAL_GetTick>
 800b172:	4602      	mov	r2, r0
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	2b64      	cmp	r3, #100	; 0x64
 800b17a:	d903      	bls.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b17c:	2303      	movs	r3, #3
 800b17e:	e0ba      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800b180:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b184:	4b5e      	ldr	r3, [pc, #376]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b18c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b190:	d0ed      	beq.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d009      	beq.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d02e      	beq.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d12a      	bne.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b1ba:	4b51      	ldr	r3, [pc, #324]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1c0:	0c1b      	lsrs	r3, r3, #16
 800b1c2:	f003 0303 	and.w	r3, r3, #3
 800b1c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b1c8:	4b4d      	ldr	r3, [pc, #308]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b1ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1ce:	0f1b      	lsrs	r3, r3, #28
 800b1d0:	f003 0307 	and.w	r3, r3, #7
 800b1d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	695b      	ldr	r3, [r3, #20]
 800b1da:	019a      	lsls	r2, r3, #6
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	041b      	lsls	r3, r3, #16
 800b1e0:	431a      	orrs	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	699b      	ldr	r3, [r3, #24]
 800b1e6:	061b      	lsls	r3, r3, #24
 800b1e8:	431a      	orrs	r2, r3
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	071b      	lsls	r3, r3, #28
 800b1ee:	4944      	ldr	r1, [pc, #272]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b1f6:	4b42      	ldr	r3, [pc, #264]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b1f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b204:	3b01      	subs	r3, #1
 800b206:	021b      	lsls	r3, r3, #8
 800b208:	493d      	ldr	r1, [pc, #244]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b20a:	4313      	orrs	r3, r2
 800b20c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d022      	beq.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b224:	d11d      	bne.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b226:	4b36      	ldr	r3, [pc, #216]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b22c:	0e1b      	lsrs	r3, r3, #24
 800b22e:	f003 030f 	and.w	r3, r3, #15
 800b232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b234:	4b32      	ldr	r3, [pc, #200]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b23a:	0f1b      	lsrs	r3, r3, #28
 800b23c:	f003 0307 	and.w	r3, r3, #7
 800b240:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	019a      	lsls	r2, r3, #6
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6a1b      	ldr	r3, [r3, #32]
 800b24c:	041b      	lsls	r3, r3, #16
 800b24e:	431a      	orrs	r2, r3
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	061b      	lsls	r3, r3, #24
 800b254:	431a      	orrs	r2, r3
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	071b      	lsls	r3, r3, #28
 800b25a:	4929      	ldr	r1, [pc, #164]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b25c:	4313      	orrs	r3, r2
 800b25e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 0308 	and.w	r3, r3, #8
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d028      	beq.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b26e:	4b24      	ldr	r3, [pc, #144]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b274:	0e1b      	lsrs	r3, r3, #24
 800b276:	f003 030f 	and.w	r3, r3, #15
 800b27a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b27c:	4b20      	ldr	r3, [pc, #128]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b27e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b282:	0c1b      	lsrs	r3, r3, #16
 800b284:	f003 0303 	and.w	r3, r3, #3
 800b288:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	695b      	ldr	r3, [r3, #20]
 800b28e:	019a      	lsls	r2, r3, #6
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	041b      	lsls	r3, r3, #16
 800b294:	431a      	orrs	r2, r3
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	061b      	lsls	r3, r3, #24
 800b29a:	431a      	orrs	r2, r3
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	69db      	ldr	r3, [r3, #28]
 800b2a0:	071b      	lsls	r3, r3, #28
 800b2a2:	4917      	ldr	r1, [pc, #92]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b2aa:	4b15      	ldr	r3, [pc, #84]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b2ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b8:	4911      	ldr	r1, [pc, #68]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b2c0:	4b0f      	ldr	r3, [pc, #60]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a0e      	ldr	r2, [pc, #56]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b2c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2cc:	f7fc f924 	bl	8007518 <HAL_GetTick>
 800b2d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b2d2:	e008      	b.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b2d4:	f7fc f920 	bl	8007518 <HAL_GetTick>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	1ad3      	subs	r3, r2, r3
 800b2de:	2b64      	cmp	r3, #100	; 0x64
 800b2e0:	d901      	bls.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	e007      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b2e6:	4b06      	ldr	r3, [pc, #24]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2f2:	d1ef      	bne.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3720      	adds	r7, #32
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	40023800 	.word	0x40023800

0800b304 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d101      	bne.n	800b316 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	e06b      	b.n	800b3ee <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	7f5b      	ldrb	r3, [r3, #29]
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d105      	bne.n	800b32c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f7fb fc0c 	bl	8006b44 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2202      	movs	r2, #2
 800b330:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	22ca      	movs	r2, #202	; 0xca
 800b338:	625a      	str	r2, [r3, #36]	; 0x24
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2253      	movs	r2, #83	; 0x53
 800b340:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f85a 	bl	800b3fc <RTC_EnterInitMode>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d008      	beq.n	800b360 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	22ff      	movs	r2, #255	; 0xff
 800b354:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2204      	movs	r2, #4
 800b35a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800b35c:	2301      	movs	r3, #1
 800b35e:	e046      	b.n	800b3ee <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	6899      	ldr	r1, [r3, #8]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	4b23      	ldr	r3, [pc, #140]	; (800b3f8 <HAL_RTC_Init+0xf4>)
 800b36c:	400b      	ands	r3, r1
 800b36e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	6899      	ldr	r1, [r3, #8]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	685a      	ldr	r2, [r3, #4]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	431a      	orrs	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	695b      	ldr	r3, [r3, #20]
 800b384:	431a      	orrs	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	430a      	orrs	r2, r1
 800b38c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	68d2      	ldr	r2, [r2, #12]
 800b396:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	6919      	ldr	r1, [r3, #16]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	041a      	lsls	r2, r3, #16
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	430a      	orrs	r2, r1
 800b3aa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	68da      	ldr	r2, [r3, #12]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b3ba:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f022 0208 	bic.w	r2, r2, #8
 800b3ca:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	699a      	ldr	r2, [r3, #24]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	430a      	orrs	r2, r1
 800b3dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	22ff      	movs	r2, #255	; 0xff
 800b3e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800b3ec:	2300      	movs	r3, #0
  }
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	ff8fffbf 	.word	0xff8fffbf

0800b3fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b404:	2300      	movs	r3, #0
 800b406:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b412:	2b00      	cmp	r3, #0
 800b414:	d119      	bne.n	800b44a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f04f 32ff 	mov.w	r2, #4294967295
 800b41e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b420:	f7fc f87a 	bl	8007518 <HAL_GetTick>
 800b424:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b426:	e009      	b.n	800b43c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b428:	f7fc f876 	bl	8007518 <HAL_GetTick>
 800b42c:	4602      	mov	r2, r0
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	1ad3      	subs	r3, r2, r3
 800b432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b436:	d901      	bls.n	800b43c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800b438:	2303      	movs	r3, #3
 800b43a:	e007      	b.n	800b44c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b446:	2b00      	cmp	r3, #0
 800b448:	d0ee      	beq.n	800b428 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d101      	bne.n	800b466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	e084      	b.n	800b570 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b472:	b2db      	uxtb	r3, r3
 800b474:	2b00      	cmp	r3, #0
 800b476:	d106      	bne.n	800b486 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f7fb fb79 	bl	8006b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2202      	movs	r2, #2
 800b48a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b49c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b4a6:	d902      	bls.n	800b4ae <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	e002      	b.n	800b4b4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b4ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4b2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b4bc:	d007      	beq.n	800b4ce <HAL_SPI_Init+0x7a>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b4c6:	d002      	beq.n	800b4ce <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10b      	bne.n	800b4ee <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b4de:	d903      	bls.n	800b4e8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2202      	movs	r2, #2
 800b4e4:	631a      	str	r2, [r3, #48]	; 0x30
 800b4e6:	e002      	b.n	800b4ee <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	685a      	ldr	r2, [r3, #4]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	431a      	orrs	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	431a      	orrs	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	695b      	ldr	r3, [r3, #20]
 800b502:	431a      	orrs	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	699b      	ldr	r3, [r3, #24]
 800b508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b50c:	431a      	orrs	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	69db      	ldr	r3, [r3, #28]
 800b512:	431a      	orrs	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a1b      	ldr	r3, [r3, #32]
 800b518:	ea42 0103 	orr.w	r1, r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	430a      	orrs	r2, r1
 800b526:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	699b      	ldr	r3, [r3, #24]
 800b52c:	0c1b      	lsrs	r3, r3, #16
 800b52e:	f003 0204 	and.w	r2, r3, #4
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b536:	431a      	orrs	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b53c:	431a      	orrs	r2, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	ea42 0103 	orr.w	r1, r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	430a      	orrs	r2, r1
 800b54e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	69da      	ldr	r2, [r3, #28]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b55e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2201      	movs	r2, #1
 800b56a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b088      	sub	sp, #32
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	603b      	str	r3, [r7, #0]
 800b584:	4613      	mov	r3, r2
 800b586:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b588:	2300      	movs	r3, #0
 800b58a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b592:	2b01      	cmp	r3, #1
 800b594:	d101      	bne.n	800b59a <HAL_SPI_Transmit+0x22>
 800b596:	2302      	movs	r3, #2
 800b598:	e150      	b.n	800b83c <HAL_SPI_Transmit+0x2c4>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2201      	movs	r2, #1
 800b59e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b5a2:	f7fb ffb9 	bl	8007518 <HAL_GetTick>
 800b5a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b5a8:	88fb      	ldrh	r3, [r7, #6]
 800b5aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d002      	beq.n	800b5be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b5b8:	2302      	movs	r3, #2
 800b5ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b5bc:	e135      	b.n	800b82a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d002      	beq.n	800b5ca <HAL_SPI_Transmit+0x52>
 800b5c4:	88fb      	ldrh	r3, [r7, #6]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d102      	bne.n	800b5d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b5ce:	e12c      	b.n	800b82a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2203      	movs	r2, #3
 800b5d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	68ba      	ldr	r2, [r7, #8]
 800b5e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	88fa      	ldrh	r2, [r7, #6]
 800b5e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	88fa      	ldrh	r2, [r7, #6]
 800b5ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2200      	movs	r2, #0
 800b602:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2200      	movs	r2, #0
 800b610:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b61a:	d107      	bne.n	800b62c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b62a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b636:	2b40      	cmp	r3, #64	; 0x40
 800b638:	d007      	beq.n	800b64a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b648:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b652:	d94b      	bls.n	800b6ec <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d002      	beq.n	800b662 <HAL_SPI_Transmit+0xea>
 800b65c:	8afb      	ldrh	r3, [r7, #22]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d13e      	bne.n	800b6e0 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b666:	881a      	ldrh	r2, [r3, #0]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b672:	1c9a      	adds	r2, r3, #2
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	3b01      	subs	r3, #1
 800b680:	b29a      	uxth	r2, r3
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b686:	e02b      	b.n	800b6e0 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	f003 0302 	and.w	r3, r3, #2
 800b692:	2b02      	cmp	r3, #2
 800b694:	d112      	bne.n	800b6bc <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b69a:	881a      	ldrh	r2, [r3, #0]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a6:	1c9a      	adds	r2, r3, #2
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b6ba:	e011      	b.n	800b6e0 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6bc:	f7fb ff2c 	bl	8007518 <HAL_GetTick>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d803      	bhi.n	800b6d4 <HAL_SPI_Transmit+0x15c>
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d2:	d102      	bne.n	800b6da <HAL_SPI_Transmit+0x162>
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d102      	bne.n	800b6e0 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800b6da:	2303      	movs	r3, #3
 800b6dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b6de:	e0a4      	b.n	800b82a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d1ce      	bne.n	800b688 <HAL_SPI_Transmit+0x110>
 800b6ea:	e07c      	b.n	800b7e6 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d002      	beq.n	800b6fa <HAL_SPI_Transmit+0x182>
 800b6f4:	8afb      	ldrh	r3, [r7, #22]
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d170      	bne.n	800b7dc <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	2b01      	cmp	r3, #1
 800b702:	d912      	bls.n	800b72a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b708:	881a      	ldrh	r2, [r3, #0]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b714:	1c9a      	adds	r2, r3, #2
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b71e:	b29b      	uxth	r3, r3
 800b720:	3b02      	subs	r3, #2
 800b722:	b29a      	uxth	r2, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b728:	e058      	b.n	800b7dc <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	330c      	adds	r3, #12
 800b734:	7812      	ldrb	r2, [r2, #0]
 800b736:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b73c:	1c5a      	adds	r2, r3, #1
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b746:	b29b      	uxth	r3, r3
 800b748:	3b01      	subs	r3, #1
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b750:	e044      	b.n	800b7dc <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	f003 0302 	and.w	r3, r3, #2
 800b75c:	2b02      	cmp	r3, #2
 800b75e:	d12b      	bne.n	800b7b8 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b764:	b29b      	uxth	r3, r3
 800b766:	2b01      	cmp	r3, #1
 800b768:	d912      	bls.n	800b790 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76e:	881a      	ldrh	r2, [r3, #0]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77a:	1c9a      	adds	r2, r3, #2
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b784:	b29b      	uxth	r3, r3
 800b786:	3b02      	subs	r3, #2
 800b788:	b29a      	uxth	r2, r3
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b78e:	e025      	b.n	800b7dc <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	330c      	adds	r3, #12
 800b79a:	7812      	ldrb	r2, [r2, #0]
 800b79c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7a2:	1c5a      	adds	r2, r3, #1
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b7b6:	e011      	b.n	800b7dc <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7b8:	f7fb feae 	bl	8007518 <HAL_GetTick>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	683a      	ldr	r2, [r7, #0]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d803      	bhi.n	800b7d0 <HAL_SPI_Transmit+0x258>
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ce:	d102      	bne.n	800b7d6 <HAL_SPI_Transmit+0x25e>
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d102      	bne.n	800b7dc <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b7da:	e026      	b.n	800b82a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1b5      	bne.n	800b752 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b7e6:	69ba      	ldr	r2, [r7, #24]
 800b7e8:	6839      	ldr	r1, [r7, #0]
 800b7ea:	68f8      	ldr	r0, [r7, #12]
 800b7ec:	f000 fa20 	bl	800bc30 <SPI_EndRxTxTransaction>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d002      	beq.n	800b7fc <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2220      	movs	r2, #32
 800b7fa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10a      	bne.n	800b81a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b804:	2300      	movs	r3, #0
 800b806:	613b      	str	r3, [r7, #16]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	613b      	str	r3, [r7, #16]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	613b      	str	r3, [r7, #16]
 800b818:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d002      	beq.n	800b828 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	77fb      	strb	r3, [r7, #31]
 800b826:	e000      	b.n	800b82a <HAL_SPI_Transmit+0x2b2>
  }

error:
 800b828:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2200      	movs	r2, #0
 800b836:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b83a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3720      	adds	r7, #32
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b088      	sub	sp, #32
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	099b      	lsrs	r3, r3, #6
 800b860:	f003 0301 	and.w	r3, r3, #1
 800b864:	2b00      	cmp	r3, #0
 800b866:	d10f      	bne.n	800b888 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00a      	beq.n	800b888 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	099b      	lsrs	r3, r3, #6
 800b876:	f003 0301 	and.w	r3, r3, #1
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d004      	beq.n	800b888 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	4798      	blx	r3
    return;
 800b886:	e0d8      	b.n	800ba3a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	085b      	lsrs	r3, r3, #1
 800b88c:	f003 0301 	and.w	r3, r3, #1
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00a      	beq.n	800b8aa <HAL_SPI_IRQHandler+0x66>
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	09db      	lsrs	r3, r3, #7
 800b898:	f003 0301 	and.w	r3, r3, #1
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d004      	beq.n	800b8aa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	4798      	blx	r3
    return;
 800b8a8:	e0c7      	b.n	800ba3a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	095b      	lsrs	r3, r3, #5
 800b8ae:	f003 0301 	and.w	r3, r3, #1
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d10c      	bne.n	800b8d0 <HAL_SPI_IRQHandler+0x8c>
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	099b      	lsrs	r3, r3, #6
 800b8ba:	f003 0301 	and.w	r3, r3, #1
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d106      	bne.n	800b8d0 <HAL_SPI_IRQHandler+0x8c>
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	0a1b      	lsrs	r3, r3, #8
 800b8c6:	f003 0301 	and.w	r3, r3, #1
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	f000 80b5 	beq.w	800ba3a <HAL_SPI_IRQHandler+0x1f6>
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	095b      	lsrs	r3, r3, #5
 800b8d4:	f003 0301 	and.w	r3, r3, #1
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f000 80ae 	beq.w	800ba3a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	099b      	lsrs	r3, r3, #6
 800b8e2:	f003 0301 	and.w	r3, r3, #1
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d023      	beq.n	800b932 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	2b03      	cmp	r3, #3
 800b8f4:	d011      	beq.n	800b91a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8fa:	f043 0204 	orr.w	r2, r3, #4
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b902:	2300      	movs	r3, #0
 800b904:	617b      	str	r3, [r7, #20]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	617b      	str	r3, [r7, #20]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	617b      	str	r3, [r7, #20]
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	e00b      	b.n	800b932 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b91a:	2300      	movs	r3, #0
 800b91c:	613b      	str	r3, [r7, #16]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	613b      	str	r3, [r7, #16]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	613b      	str	r3, [r7, #16]
 800b92e:	693b      	ldr	r3, [r7, #16]
        return;
 800b930:	e083      	b.n	800ba3a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	095b      	lsrs	r3, r3, #5
 800b936:	f003 0301 	and.w	r3, r3, #1
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d014      	beq.n	800b968 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b942:	f043 0201 	orr.w	r2, r3, #1
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b94a:	2300      	movs	r3, #0
 800b94c:	60fb      	str	r3, [r7, #12]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	689b      	ldr	r3, [r3, #8]
 800b954:	60fb      	str	r3, [r7, #12]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b964:	601a      	str	r2, [r3, #0]
 800b966:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	0a1b      	lsrs	r3, r3, #8
 800b96c:	f003 0301 	and.w	r3, r3, #1
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00c      	beq.n	800b98e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b978:	f043 0208 	orr.w	r2, r3, #8
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b980:	2300      	movs	r3, #0
 800b982:	60bb      	str	r3, [r7, #8]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	60bb      	str	r3, [r7, #8]
 800b98c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b992:	2b00      	cmp	r3, #0
 800b994:	d050      	beq.n	800ba38 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	685a      	ldr	r2, [r3, #4]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b9a4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	f003 0302 	and.w	r3, r3, #2
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d104      	bne.n	800b9c2 <HAL_SPI_IRQHandler+0x17e>
 800b9b8:	69fb      	ldr	r3, [r7, #28]
 800b9ba:	f003 0301 	and.w	r3, r3, #1
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d034      	beq.n	800ba2c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	685a      	ldr	r2, [r3, #4]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f022 0203 	bic.w	r2, r2, #3
 800b9d0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d011      	beq.n	800b9fe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9de:	4a18      	ldr	r2, [pc, #96]	; (800ba40 <HAL_SPI_IRQHandler+0x1fc>)
 800b9e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fc fdd0 	bl	800858c <HAL_DMA_Abort_IT>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d005      	beq.n	800b9fe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d016      	beq.n	800ba34 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba0a:	4a0d      	ldr	r2, [pc, #52]	; (800ba40 <HAL_SPI_IRQHandler+0x1fc>)
 800ba0c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7fc fdba 	bl	800858c <HAL_DMA_Abort_IT>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00a      	beq.n	800ba34 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800ba2a:	e003      	b.n	800ba34 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 f809 	bl	800ba44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ba32:	e000      	b.n	800ba36 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ba34:	bf00      	nop
    return;
 800ba36:	bf00      	nop
 800ba38:	bf00      	nop
  }
}
 800ba3a:	3720      	adds	r7, #32
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	0800ba59 	.word	0x0800ba59

0800ba44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ba4c:	bf00      	nop
 800ba4e:	370c      	adds	r7, #12
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2200      	movs	r2, #0
 800ba72:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f7ff ffe5 	bl	800ba44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ba7a:	bf00      	nop
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b084      	sub	sp, #16
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	60f8      	str	r0, [r7, #12]
 800ba8a:	60b9      	str	r1, [r7, #8]
 800ba8c:	603b      	str	r3, [r7, #0]
 800ba8e:	4613      	mov	r3, r2
 800ba90:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba92:	e04c      	b.n	800bb2e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9a:	d048      	beq.n	800bb2e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ba9c:	f7fb fd3c 	bl	8007518 <HAL_GetTick>
 800baa0:	4602      	mov	r2, r0
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	683a      	ldr	r2, [r7, #0]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d902      	bls.n	800bab2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d13d      	bne.n	800bb2e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	685a      	ldr	r2, [r3, #4]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bac0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800baca:	d111      	bne.n	800baf0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bad4:	d004      	beq.n	800bae0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bade:	d107      	bne.n	800baf0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800baee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800baf8:	d10f      	bne.n	800bb1a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bb08:	601a      	str	r2, [r3, #0]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bb18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2200      	movs	r2, #0
 800bb26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	e00f      	b.n	800bb4e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	689a      	ldr	r2, [r3, #8]
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	4013      	ands	r3, r2
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	bf0c      	ite	eq
 800bb3e:	2301      	moveq	r3, #1
 800bb40:	2300      	movne	r3, #0
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	461a      	mov	r2, r3
 800bb46:	79fb      	ldrb	r3, [r7, #7]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d1a3      	bne.n	800ba94 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b084      	sub	sp, #16
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	60f8      	str	r0, [r7, #12]
 800bb5e:	60b9      	str	r1, [r7, #8]
 800bb60:	607a      	str	r2, [r7, #4]
 800bb62:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800bb64:	e057      	b.n	800bc16 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bb6c:	d106      	bne.n	800bb7c <SPI_WaitFifoStateUntilTimeout+0x26>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d103      	bne.n	800bb7c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	330c      	adds	r3, #12
 800bb7a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb82:	d048      	beq.n	800bc16 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800bb84:	f7fb fcc8 	bl	8007518 <HAL_GetTick>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	1ad3      	subs	r3, r2, r3
 800bb8e:	683a      	ldr	r2, [r7, #0]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d902      	bls.n	800bb9a <SPI_WaitFifoStateUntilTimeout+0x44>
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d13d      	bne.n	800bc16 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	685a      	ldr	r2, [r3, #4]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bbb2:	d111      	bne.n	800bbd8 <SPI_WaitFifoStateUntilTimeout+0x82>
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbbc:	d004      	beq.n	800bbc8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbc6:	d107      	bne.n	800bbd8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbe0:	d10f      	bne.n	800bc02 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bbf0:	601a      	str	r2, [r3, #0]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bc00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2201      	movs	r2, #1
 800bc06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bc12:	2303      	movs	r3, #3
 800bc14:	e008      	b.n	800bc28 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	689a      	ldr	r2, [r3, #8]
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	4013      	ands	r3, r2
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d19f      	bne.n	800bb66 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af02      	add	r7, sp, #8
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2200      	movs	r2, #0
 800bc44:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f7ff ff84 	bl	800bb56 <SPI_WaitFifoStateUntilTimeout>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d007      	beq.n	800bc64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc58:	f043 0220 	orr.w	r2, r3, #32
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bc60:	2303      	movs	r3, #3
 800bc62:	e027      	b.n	800bcb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	2180      	movs	r1, #128	; 0x80
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f7ff ff07 	bl	800ba82 <SPI_WaitFlagStateUntilTimeout>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d007      	beq.n	800bc8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc7e:	f043 0220 	orr.w	r2, r3, #32
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bc86:	2303      	movs	r3, #3
 800bc88:	e014      	b.n	800bcb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	9300      	str	r3, [sp, #0]
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2200      	movs	r2, #0
 800bc92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	f7ff ff5d 	bl	800bb56 <SPI_WaitFifoStateUntilTimeout>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d007      	beq.n	800bcb2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bca6:	f043 0220 	orr.w	r2, r3, #32
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bcae:	2303      	movs	r3, #3
 800bcb0:	e000      	b.n	800bcb4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d101      	bne.n	800bcce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bcca:	2301      	movs	r3, #1
 800bccc:	e01d      	b.n	800bd0a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d106      	bne.n	800bce8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7fa ffe4 	bl	8006cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2202      	movs	r2, #2
 800bcec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	3304      	adds	r3, #4
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	4610      	mov	r0, r2
 800bcfc:	f000 fb82 	bl	800c404 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2201      	movs	r2, #1
 800bd04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
	...

0800bd14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	68da      	ldr	r2, [r3, #12]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f042 0201 	orr.w	r2, r2, #1
 800bd2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	689a      	ldr	r2, [r3, #8]
 800bd32:	4b0c      	ldr	r3, [pc, #48]	; (800bd64 <HAL_TIM_Base_Start_IT+0x50>)
 800bd34:	4013      	ands	r3, r2
 800bd36:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2b06      	cmp	r3, #6
 800bd3c:	d00b      	beq.n	800bd56 <HAL_TIM_Base_Start_IT+0x42>
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd44:	d007      	beq.n	800bd56 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f042 0201 	orr.w	r2, r2, #1
 800bd54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bd56:	2300      	movs	r3, #0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3714      	adds	r7, #20
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr
 800bd64:	00010007 	.word	0x00010007

0800bd68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d101      	bne.n	800bd7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	e01d      	b.n	800bdb6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d106      	bne.n	800bd94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 f815 	bl	800bdbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2202      	movs	r2, #2
 800bd98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	3304      	adds	r3, #4
 800bda4:	4619      	mov	r1, r3
 800bda6:	4610      	mov	r0, r2
 800bda8:	f000 fb2c 	bl	800c404 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bdb4:	2300      	movs	r3, #0
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3708      	adds	r7, #8
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bdbe:	b480      	push	{r7}
 800bdc0:	b083      	sub	sp, #12
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bdc6:	bf00      	nop
 800bdc8:	370c      	adds	r7, #12
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr

0800bdd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b082      	sub	sp, #8
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	691b      	ldr	r3, [r3, #16]
 800bde0:	f003 0302 	and.w	r3, r3, #2
 800bde4:	2b02      	cmp	r3, #2
 800bde6:	d122      	bne.n	800be2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	f003 0302 	and.w	r3, r3, #2
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	d11b      	bne.n	800be2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f06f 0202 	mvn.w	r2, #2
 800bdfe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2201      	movs	r2, #1
 800be04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	699b      	ldr	r3, [r3, #24]
 800be0c:	f003 0303 	and.w	r3, r3, #3
 800be10:	2b00      	cmp	r3, #0
 800be12:	d003      	beq.n	800be1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 fad7 	bl	800c3c8 <HAL_TIM_IC_CaptureCallback>
 800be1a:	e005      	b.n	800be28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 fac9 	bl	800c3b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 fada 	bl	800c3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	691b      	ldr	r3, [r3, #16]
 800be34:	f003 0304 	and.w	r3, r3, #4
 800be38:	2b04      	cmp	r3, #4
 800be3a:	d122      	bne.n	800be82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	f003 0304 	and.w	r3, r3, #4
 800be46:	2b04      	cmp	r3, #4
 800be48:	d11b      	bne.n	800be82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f06f 0204 	mvn.w	r2, #4
 800be52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2202      	movs	r2, #2
 800be58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	699b      	ldr	r3, [r3, #24]
 800be60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be64:	2b00      	cmp	r3, #0
 800be66:	d003      	beq.n	800be70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 faad 	bl	800c3c8 <HAL_TIM_IC_CaptureCallback>
 800be6e:	e005      	b.n	800be7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 fa9f 	bl	800c3b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 fab0 	bl	800c3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	691b      	ldr	r3, [r3, #16]
 800be88:	f003 0308 	and.w	r3, r3, #8
 800be8c:	2b08      	cmp	r3, #8
 800be8e:	d122      	bne.n	800bed6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	f003 0308 	and.w	r3, r3, #8
 800be9a:	2b08      	cmp	r3, #8
 800be9c:	d11b      	bne.n	800bed6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f06f 0208 	mvn.w	r2, #8
 800bea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2204      	movs	r2, #4
 800beac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	69db      	ldr	r3, [r3, #28]
 800beb4:	f003 0303 	and.w	r3, r3, #3
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d003      	beq.n	800bec4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 fa83 	bl	800c3c8 <HAL_TIM_IC_CaptureCallback>
 800bec2:	e005      	b.n	800bed0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 fa75 	bl	800c3b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 fa86 	bl	800c3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	691b      	ldr	r3, [r3, #16]
 800bedc:	f003 0310 	and.w	r3, r3, #16
 800bee0:	2b10      	cmp	r3, #16
 800bee2:	d122      	bne.n	800bf2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	f003 0310 	and.w	r3, r3, #16
 800beee:	2b10      	cmp	r3, #16
 800bef0:	d11b      	bne.n	800bf2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f06f 0210 	mvn.w	r2, #16
 800befa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2208      	movs	r2, #8
 800bf00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	69db      	ldr	r3, [r3, #28]
 800bf08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d003      	beq.n	800bf18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 fa59 	bl	800c3c8 <HAL_TIM_IC_CaptureCallback>
 800bf16:	e005      	b.n	800bf24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 fa4b 	bl	800c3b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 fa5c 	bl	800c3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	691b      	ldr	r3, [r3, #16]
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d10e      	bne.n	800bf56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	68db      	ldr	r3, [r3, #12]
 800bf3e:	f003 0301 	and.w	r3, r3, #1
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d107      	bne.n	800bf56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f06f 0201 	mvn.w	r2, #1
 800bf4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f7f8 f9a1 	bl	8004298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	691b      	ldr	r3, [r3, #16]
 800bf5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf60:	2b80      	cmp	r3, #128	; 0x80
 800bf62:	d10e      	bne.n	800bf82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf6e:	2b80      	cmp	r3, #128	; 0x80
 800bf70:	d107      	bne.n	800bf82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bf7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 fe71 	bl	800cc64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	691b      	ldr	r3, [r3, #16]
 800bf88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf90:	d10e      	bne.n	800bfb0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf9c:	2b80      	cmp	r3, #128	; 0x80
 800bf9e:	d107      	bne.n	800bfb0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bfa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fe64 	bl	800cc78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfba:	2b40      	cmp	r3, #64	; 0x40
 800bfbc:	d10e      	bne.n	800bfdc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	68db      	ldr	r3, [r3, #12]
 800bfc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfc8:	2b40      	cmp	r3, #64	; 0x40
 800bfca:	d107      	bne.n	800bfdc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bfd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 fa0a 	bl	800c3f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	691b      	ldr	r3, [r3, #16]
 800bfe2:	f003 0320 	and.w	r3, r3, #32
 800bfe6:	2b20      	cmp	r3, #32
 800bfe8:	d10e      	bne.n	800c008 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	f003 0320 	and.w	r3, r3, #32
 800bff4:	2b20      	cmp	r3, #32
 800bff6:	d107      	bne.n	800c008 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f06f 0220 	mvn.w	r2, #32
 800c000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 fe24 	bl	800cc50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c008:	bf00      	nop
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c022:	2b01      	cmp	r3, #1
 800c024:	d101      	bne.n	800c02a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c026:	2302      	movs	r3, #2
 800c028:	e105      	b.n	800c236 <HAL_TIM_PWM_ConfigChannel+0x226>
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2201      	movs	r2, #1
 800c02e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2202      	movs	r2, #2
 800c036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2b14      	cmp	r3, #20
 800c03e:	f200 80f0 	bhi.w	800c222 <HAL_TIM_PWM_ConfigChannel+0x212>
 800c042:	a201      	add	r2, pc, #4	; (adr r2, 800c048 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c048:	0800c09d 	.word	0x0800c09d
 800c04c:	0800c223 	.word	0x0800c223
 800c050:	0800c223 	.word	0x0800c223
 800c054:	0800c223 	.word	0x0800c223
 800c058:	0800c0dd 	.word	0x0800c0dd
 800c05c:	0800c223 	.word	0x0800c223
 800c060:	0800c223 	.word	0x0800c223
 800c064:	0800c223 	.word	0x0800c223
 800c068:	0800c11f 	.word	0x0800c11f
 800c06c:	0800c223 	.word	0x0800c223
 800c070:	0800c223 	.word	0x0800c223
 800c074:	0800c223 	.word	0x0800c223
 800c078:	0800c15f 	.word	0x0800c15f
 800c07c:	0800c223 	.word	0x0800c223
 800c080:	0800c223 	.word	0x0800c223
 800c084:	0800c223 	.word	0x0800c223
 800c088:	0800c1a1 	.word	0x0800c1a1
 800c08c:	0800c223 	.word	0x0800c223
 800c090:	0800c223 	.word	0x0800c223
 800c094:	0800c223 	.word	0x0800c223
 800c098:	0800c1e1 	.word	0x0800c1e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68b9      	ldr	r1, [r7, #8]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f000 fa4e 	bl	800c544 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	699a      	ldr	r2, [r3, #24]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f042 0208 	orr.w	r2, r2, #8
 800c0b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	699a      	ldr	r2, [r3, #24]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f022 0204 	bic.w	r2, r2, #4
 800c0c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	6999      	ldr	r1, [r3, #24]
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	691a      	ldr	r2, [r3, #16]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	430a      	orrs	r2, r1
 800c0d8:	619a      	str	r2, [r3, #24]
      break;
 800c0da:	e0a3      	b.n	800c224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	68b9      	ldr	r1, [r7, #8]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f000 faa0 	bl	800c628 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	699a      	ldr	r2, [r3, #24]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	699a      	ldr	r2, [r3, #24]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	6999      	ldr	r1, [r3, #24]
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	021a      	lsls	r2, r3, #8
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	430a      	orrs	r2, r1
 800c11a:	619a      	str	r2, [r3, #24]
      break;
 800c11c:	e082      	b.n	800c224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68b9      	ldr	r1, [r7, #8]
 800c124:	4618      	mov	r0, r3
 800c126:	f000 faf7 	bl	800c718 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	69da      	ldr	r2, [r3, #28]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f042 0208 	orr.w	r2, r2, #8
 800c138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	69da      	ldr	r2, [r3, #28]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f022 0204 	bic.w	r2, r2, #4
 800c148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	69d9      	ldr	r1, [r3, #28]
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	691a      	ldr	r2, [r3, #16]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	430a      	orrs	r2, r1
 800c15a:	61da      	str	r2, [r3, #28]
      break;
 800c15c:	e062      	b.n	800c224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	68b9      	ldr	r1, [r7, #8]
 800c164:	4618      	mov	r0, r3
 800c166:	f000 fb4d 	bl	800c804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	69da      	ldr	r2, [r3, #28]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	69da      	ldr	r2, [r3, #28]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	69d9      	ldr	r1, [r3, #28]
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	021a      	lsls	r2, r3, #8
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	430a      	orrs	r2, r1
 800c19c:	61da      	str	r2, [r3, #28]
      break;
 800c19e:	e041      	b.n	800c224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68b9      	ldr	r1, [r7, #8]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f000 fb84 	bl	800c8b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f042 0208 	orr.w	r2, r2, #8
 800c1ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f022 0204 	bic.w	r2, r2, #4
 800c1ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	691a      	ldr	r2, [r3, #16]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	430a      	orrs	r2, r1
 800c1dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c1de:	e021      	b.n	800c224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	68b9      	ldr	r1, [r7, #8]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 fbb6 	bl	800c958 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c20a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	691b      	ldr	r3, [r3, #16]
 800c216:	021a      	lsls	r2, r3, #8
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	430a      	orrs	r2, r1
 800c21e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c220:	e000      	b.n	800c224 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800c222:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2201      	movs	r2, #1
 800c228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2200      	movs	r2, #0
 800c230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop

0800c240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c250:	2b01      	cmp	r3, #1
 800c252:	d101      	bne.n	800c258 <HAL_TIM_ConfigClockSource+0x18>
 800c254:	2302      	movs	r3, #2
 800c256:	e0a6      	b.n	800c3a6 <HAL_TIM_ConfigClockSource+0x166>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2202      	movs	r2, #2
 800c264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	689b      	ldr	r3, [r3, #8]
 800c26e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	4b4f      	ldr	r3, [pc, #316]	; (800c3b0 <HAL_TIM_ConfigClockSource+0x170>)
 800c274:	4013      	ands	r3, r2
 800c276:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c27e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2b40      	cmp	r3, #64	; 0x40
 800c28e:	d067      	beq.n	800c360 <HAL_TIM_ConfigClockSource+0x120>
 800c290:	2b40      	cmp	r3, #64	; 0x40
 800c292:	d80b      	bhi.n	800c2ac <HAL_TIM_ConfigClockSource+0x6c>
 800c294:	2b10      	cmp	r3, #16
 800c296:	d073      	beq.n	800c380 <HAL_TIM_ConfigClockSource+0x140>
 800c298:	2b10      	cmp	r3, #16
 800c29a:	d802      	bhi.n	800c2a2 <HAL_TIM_ConfigClockSource+0x62>
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d06f      	beq.n	800c380 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c2a0:	e078      	b.n	800c394 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c2a2:	2b20      	cmp	r3, #32
 800c2a4:	d06c      	beq.n	800c380 <HAL_TIM_ConfigClockSource+0x140>
 800c2a6:	2b30      	cmp	r3, #48	; 0x30
 800c2a8:	d06a      	beq.n	800c380 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c2aa:	e073      	b.n	800c394 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c2ac:	2b70      	cmp	r3, #112	; 0x70
 800c2ae:	d00d      	beq.n	800c2cc <HAL_TIM_ConfigClockSource+0x8c>
 800c2b0:	2b70      	cmp	r3, #112	; 0x70
 800c2b2:	d804      	bhi.n	800c2be <HAL_TIM_ConfigClockSource+0x7e>
 800c2b4:	2b50      	cmp	r3, #80	; 0x50
 800c2b6:	d033      	beq.n	800c320 <HAL_TIM_ConfigClockSource+0xe0>
 800c2b8:	2b60      	cmp	r3, #96	; 0x60
 800c2ba:	d041      	beq.n	800c340 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800c2bc:	e06a      	b.n	800c394 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c2be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2c2:	d066      	beq.n	800c392 <HAL_TIM_ConfigClockSource+0x152>
 800c2c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2c8:	d017      	beq.n	800c2fa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c2ca:	e063      	b.n	800c394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6818      	ldr	r0, [r3, #0]
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	6899      	ldr	r1, [r3, #8]
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	685a      	ldr	r2, [r3, #4]
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	f000 fc0a 	bl	800caf4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c2ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	609a      	str	r2, [r3, #8]
      break;
 800c2f8:	e04c      	b.n	800c394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6818      	ldr	r0, [r3, #0]
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	6899      	ldr	r1, [r3, #8]
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	685a      	ldr	r2, [r3, #4]
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	68db      	ldr	r3, [r3, #12]
 800c30a:	f000 fbf3 	bl	800caf4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	689a      	ldr	r2, [r3, #8]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c31c:	609a      	str	r2, [r3, #8]
      break;
 800c31e:	e039      	b.n	800c394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6818      	ldr	r0, [r3, #0]
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	6859      	ldr	r1, [r3, #4]
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	461a      	mov	r2, r3
 800c32e:	f000 fb67 	bl	800ca00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2150      	movs	r1, #80	; 0x50
 800c338:	4618      	mov	r0, r3
 800c33a:	f000 fbc0 	bl	800cabe <TIM_ITRx_SetConfig>
      break;
 800c33e:	e029      	b.n	800c394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6818      	ldr	r0, [r3, #0]
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	6859      	ldr	r1, [r3, #4]
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	461a      	mov	r2, r3
 800c34e:	f000 fb86 	bl	800ca5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2160      	movs	r1, #96	; 0x60
 800c358:	4618      	mov	r0, r3
 800c35a:	f000 fbb0 	bl	800cabe <TIM_ITRx_SetConfig>
      break;
 800c35e:	e019      	b.n	800c394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6818      	ldr	r0, [r3, #0]
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	6859      	ldr	r1, [r3, #4]
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	68db      	ldr	r3, [r3, #12]
 800c36c:	461a      	mov	r2, r3
 800c36e:	f000 fb47 	bl	800ca00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2140      	movs	r1, #64	; 0x40
 800c378:	4618      	mov	r0, r3
 800c37a:	f000 fba0 	bl	800cabe <TIM_ITRx_SetConfig>
      break;
 800c37e:	e009      	b.n	800c394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4619      	mov	r1, r3
 800c38a:	4610      	mov	r0, r2
 800c38c:	f000 fb97 	bl	800cabe <TIM_ITRx_SetConfig>
      break;
 800c390:	e000      	b.n	800c394 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800c392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2201      	movs	r2, #1
 800c398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	fffeff88 	.word	0xfffeff88

0800c3b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c3bc:	bf00      	nop
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c3d0:	bf00      	nop
 800c3d2:	370c      	adds	r7, #12
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c3e4:	bf00      	nop
 800c3e6:	370c      	adds	r7, #12
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr

0800c3f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c3f8:	bf00      	nop
 800c3fa:	370c      	adds	r7, #12
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c404:	b480      	push	{r7}
 800c406:	b085      	sub	sp, #20
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4a40      	ldr	r2, [pc, #256]	; (800c518 <TIM_Base_SetConfig+0x114>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d013      	beq.n	800c444 <TIM_Base_SetConfig+0x40>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c422:	d00f      	beq.n	800c444 <TIM_Base_SetConfig+0x40>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4a3d      	ldr	r2, [pc, #244]	; (800c51c <TIM_Base_SetConfig+0x118>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d00b      	beq.n	800c444 <TIM_Base_SetConfig+0x40>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4a3c      	ldr	r2, [pc, #240]	; (800c520 <TIM_Base_SetConfig+0x11c>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d007      	beq.n	800c444 <TIM_Base_SetConfig+0x40>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a3b      	ldr	r2, [pc, #236]	; (800c524 <TIM_Base_SetConfig+0x120>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d003      	beq.n	800c444 <TIM_Base_SetConfig+0x40>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4a3a      	ldr	r2, [pc, #232]	; (800c528 <TIM_Base_SetConfig+0x124>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d108      	bne.n	800c456 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c44a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	4313      	orrs	r3, r2
 800c454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4a2f      	ldr	r2, [pc, #188]	; (800c518 <TIM_Base_SetConfig+0x114>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d02b      	beq.n	800c4b6 <TIM_Base_SetConfig+0xb2>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c464:	d027      	beq.n	800c4b6 <TIM_Base_SetConfig+0xb2>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4a2c      	ldr	r2, [pc, #176]	; (800c51c <TIM_Base_SetConfig+0x118>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d023      	beq.n	800c4b6 <TIM_Base_SetConfig+0xb2>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4a2b      	ldr	r2, [pc, #172]	; (800c520 <TIM_Base_SetConfig+0x11c>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d01f      	beq.n	800c4b6 <TIM_Base_SetConfig+0xb2>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a2a      	ldr	r2, [pc, #168]	; (800c524 <TIM_Base_SetConfig+0x120>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d01b      	beq.n	800c4b6 <TIM_Base_SetConfig+0xb2>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a29      	ldr	r2, [pc, #164]	; (800c528 <TIM_Base_SetConfig+0x124>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d017      	beq.n	800c4b6 <TIM_Base_SetConfig+0xb2>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a28      	ldr	r2, [pc, #160]	; (800c52c <TIM_Base_SetConfig+0x128>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d013      	beq.n	800c4b6 <TIM_Base_SetConfig+0xb2>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a27      	ldr	r2, [pc, #156]	; (800c530 <TIM_Base_SetConfig+0x12c>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d00f      	beq.n	800c4b6 <TIM_Base_SetConfig+0xb2>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	4a26      	ldr	r2, [pc, #152]	; (800c534 <TIM_Base_SetConfig+0x130>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d00b      	beq.n	800c4b6 <TIM_Base_SetConfig+0xb2>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4a25      	ldr	r2, [pc, #148]	; (800c538 <TIM_Base_SetConfig+0x134>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d007      	beq.n	800c4b6 <TIM_Base_SetConfig+0xb2>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4a24      	ldr	r2, [pc, #144]	; (800c53c <TIM_Base_SetConfig+0x138>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d003      	beq.n	800c4b6 <TIM_Base_SetConfig+0xb2>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	4a23      	ldr	r2, [pc, #140]	; (800c540 <TIM_Base_SetConfig+0x13c>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d108      	bne.n	800c4c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	68fa      	ldr	r2, [r7, #12]
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	695b      	ldr	r3, [r3, #20]
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	68fa      	ldr	r2, [r7, #12]
 800c4da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	689a      	ldr	r2, [r3, #8]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	4a0a      	ldr	r2, [pc, #40]	; (800c518 <TIM_Base_SetConfig+0x114>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d003      	beq.n	800c4fc <TIM_Base_SetConfig+0xf8>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	4a0c      	ldr	r2, [pc, #48]	; (800c528 <TIM_Base_SetConfig+0x124>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d103      	bne.n	800c504 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	691a      	ldr	r2, [r3, #16]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2201      	movs	r2, #1
 800c508:	615a      	str	r2, [r3, #20]
}
 800c50a:	bf00      	nop
 800c50c:	3714      	adds	r7, #20
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr
 800c516:	bf00      	nop
 800c518:	40010000 	.word	0x40010000
 800c51c:	40000400 	.word	0x40000400
 800c520:	40000800 	.word	0x40000800
 800c524:	40000c00 	.word	0x40000c00
 800c528:	40010400 	.word	0x40010400
 800c52c:	40014000 	.word	0x40014000
 800c530:	40014400 	.word	0x40014400
 800c534:	40014800 	.word	0x40014800
 800c538:	40001800 	.word	0x40001800
 800c53c:	40001c00 	.word	0x40001c00
 800c540:	40002000 	.word	0x40002000

0800c544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c544:	b480      	push	{r7}
 800c546:	b087      	sub	sp, #28
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6a1b      	ldr	r3, [r3, #32]
 800c552:	f023 0201 	bic.w	r2, r3, #1
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6a1b      	ldr	r3, [r3, #32]
 800c55e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	699b      	ldr	r3, [r3, #24]
 800c56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	4b2b      	ldr	r3, [pc, #172]	; (800c61c <TIM_OC1_SetConfig+0xd8>)
 800c570:	4013      	ands	r3, r2
 800c572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f023 0303 	bic.w	r3, r3, #3
 800c57a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	4313      	orrs	r3, r2
 800c584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	f023 0302 	bic.w	r3, r3, #2
 800c58c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	689b      	ldr	r3, [r3, #8]
 800c592:	697a      	ldr	r2, [r7, #20]
 800c594:	4313      	orrs	r3, r2
 800c596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4a21      	ldr	r2, [pc, #132]	; (800c620 <TIM_OC1_SetConfig+0xdc>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d003      	beq.n	800c5a8 <TIM_OC1_SetConfig+0x64>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4a20      	ldr	r2, [pc, #128]	; (800c624 <TIM_OC1_SetConfig+0xe0>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d10c      	bne.n	800c5c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	f023 0308 	bic.w	r3, r3, #8
 800c5ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	68db      	ldr	r3, [r3, #12]
 800c5b4:	697a      	ldr	r2, [r7, #20]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	f023 0304 	bic.w	r3, r3, #4
 800c5c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4a16      	ldr	r2, [pc, #88]	; (800c620 <TIM_OC1_SetConfig+0xdc>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d003      	beq.n	800c5d2 <TIM_OC1_SetConfig+0x8e>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4a15      	ldr	r2, [pc, #84]	; (800c624 <TIM_OC1_SetConfig+0xe0>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d111      	bne.n	800c5f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c5e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	695b      	ldr	r3, [r3, #20]
 800c5e6:	693a      	ldr	r2, [r7, #16]
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	693a      	ldr	r2, [r7, #16]
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	693a      	ldr	r2, [r7, #16]
 800c5fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	685a      	ldr	r2, [r3, #4]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	697a      	ldr	r2, [r7, #20]
 800c60e:	621a      	str	r2, [r3, #32]
}
 800c610:	bf00      	nop
 800c612:	371c      	adds	r7, #28
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr
 800c61c:	fffeff8f 	.word	0xfffeff8f
 800c620:	40010000 	.word	0x40010000
 800c624:	40010400 	.word	0x40010400

0800c628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c628:	b480      	push	{r7}
 800c62a:	b087      	sub	sp, #28
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6a1b      	ldr	r3, [r3, #32]
 800c636:	f023 0210 	bic.w	r2, r3, #16
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6a1b      	ldr	r3, [r3, #32]
 800c642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	699b      	ldr	r3, [r3, #24]
 800c64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c650:	68fa      	ldr	r2, [r7, #12]
 800c652:	4b2e      	ldr	r3, [pc, #184]	; (800c70c <TIM_OC2_SetConfig+0xe4>)
 800c654:	4013      	ands	r3, r2
 800c656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c65e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	021b      	lsls	r3, r3, #8
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	4313      	orrs	r3, r2
 800c66a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	f023 0320 	bic.w	r3, r3, #32
 800c672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	011b      	lsls	r3, r3, #4
 800c67a:	697a      	ldr	r2, [r7, #20]
 800c67c:	4313      	orrs	r3, r2
 800c67e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	4a23      	ldr	r2, [pc, #140]	; (800c710 <TIM_OC2_SetConfig+0xe8>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d003      	beq.n	800c690 <TIM_OC2_SetConfig+0x68>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	4a22      	ldr	r2, [pc, #136]	; (800c714 <TIM_OC2_SetConfig+0xec>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d10d      	bne.n	800c6ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	011b      	lsls	r3, r3, #4
 800c69e:	697a      	ldr	r2, [r7, #20]
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4a18      	ldr	r2, [pc, #96]	; (800c710 <TIM_OC2_SetConfig+0xe8>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d003      	beq.n	800c6bc <TIM_OC2_SetConfig+0x94>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4a17      	ldr	r2, [pc, #92]	; (800c714 <TIM_OC2_SetConfig+0xec>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d113      	bne.n	800c6e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c6c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	695b      	ldr	r3, [r3, #20]
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	693a      	ldr	r2, [r7, #16]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	699b      	ldr	r3, [r3, #24]
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	693a      	ldr	r2, [r7, #16]
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	693a      	ldr	r2, [r7, #16]
 800c6e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	685a      	ldr	r2, [r3, #4]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	697a      	ldr	r2, [r7, #20]
 800c6fc:	621a      	str	r2, [r3, #32]
}
 800c6fe:	bf00      	nop
 800c700:	371c      	adds	r7, #28
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop
 800c70c:	feff8fff 	.word	0xfeff8fff
 800c710:	40010000 	.word	0x40010000
 800c714:	40010400 	.word	0x40010400

0800c718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c718:	b480      	push	{r7}
 800c71a:	b087      	sub	sp, #28
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6a1b      	ldr	r3, [r3, #32]
 800c726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6a1b      	ldr	r3, [r3, #32]
 800c732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	69db      	ldr	r3, [r3, #28]
 800c73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	4b2d      	ldr	r3, [pc, #180]	; (800c7f8 <TIM_OC3_SetConfig+0xe0>)
 800c744:	4013      	ands	r3, r2
 800c746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f023 0303 	bic.w	r3, r3, #3
 800c74e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	68fa      	ldr	r2, [r7, #12]
 800c756:	4313      	orrs	r3, r2
 800c758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	021b      	lsls	r3, r3, #8
 800c768:	697a      	ldr	r2, [r7, #20]
 800c76a:	4313      	orrs	r3, r2
 800c76c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	4a22      	ldr	r2, [pc, #136]	; (800c7fc <TIM_OC3_SetConfig+0xe4>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d003      	beq.n	800c77e <TIM_OC3_SetConfig+0x66>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	4a21      	ldr	r2, [pc, #132]	; (800c800 <TIM_OC3_SetConfig+0xe8>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d10d      	bne.n	800c79a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	021b      	lsls	r3, r3, #8
 800c78c:	697a      	ldr	r2, [r7, #20]
 800c78e:	4313      	orrs	r3, r2
 800c790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	4a17      	ldr	r2, [pc, #92]	; (800c7fc <TIM_OC3_SetConfig+0xe4>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d003      	beq.n	800c7aa <TIM_OC3_SetConfig+0x92>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4a16      	ldr	r2, [pc, #88]	; (800c800 <TIM_OC3_SetConfig+0xe8>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d113      	bne.n	800c7d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c7b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	695b      	ldr	r3, [r3, #20]
 800c7be:	011b      	lsls	r3, r3, #4
 800c7c0:	693a      	ldr	r2, [r7, #16]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	011b      	lsls	r3, r3, #4
 800c7cc:	693a      	ldr	r2, [r7, #16]
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	693a      	ldr	r2, [r7, #16]
 800c7d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	685a      	ldr	r2, [r3, #4]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	697a      	ldr	r2, [r7, #20]
 800c7ea:	621a      	str	r2, [r3, #32]
}
 800c7ec:	bf00      	nop
 800c7ee:	371c      	adds	r7, #28
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr
 800c7f8:	fffeff8f 	.word	0xfffeff8f
 800c7fc:	40010000 	.word	0x40010000
 800c800:	40010400 	.word	0x40010400

0800c804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c804:	b480      	push	{r7}
 800c806:	b087      	sub	sp, #28
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6a1b      	ldr	r3, [r3, #32]
 800c812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6a1b      	ldr	r3, [r3, #32]
 800c81e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	4b1e      	ldr	r3, [pc, #120]	; (800c8a8 <TIM_OC4_SetConfig+0xa4>)
 800c830:	4013      	ands	r3, r2
 800c832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c83a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	021b      	lsls	r3, r3, #8
 800c842:	68fa      	ldr	r2, [r7, #12]
 800c844:	4313      	orrs	r3, r2
 800c846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c84e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	031b      	lsls	r3, r3, #12
 800c856:	693a      	ldr	r2, [r7, #16]
 800c858:	4313      	orrs	r3, r2
 800c85a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4a13      	ldr	r2, [pc, #76]	; (800c8ac <TIM_OC4_SetConfig+0xa8>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d003      	beq.n	800c86c <TIM_OC4_SetConfig+0x68>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4a12      	ldr	r2, [pc, #72]	; (800c8b0 <TIM_OC4_SetConfig+0xac>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d109      	bne.n	800c880 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c872:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	695b      	ldr	r3, [r3, #20]
 800c878:	019b      	lsls	r3, r3, #6
 800c87a:	697a      	ldr	r2, [r7, #20]
 800c87c:	4313      	orrs	r3, r2
 800c87e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	697a      	ldr	r2, [r7, #20]
 800c884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	68fa      	ldr	r2, [r7, #12]
 800c88a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	685a      	ldr	r2, [r3, #4]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	693a      	ldr	r2, [r7, #16]
 800c898:	621a      	str	r2, [r3, #32]
}
 800c89a:	bf00      	nop
 800c89c:	371c      	adds	r7, #28
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	feff8fff 	.word	0xfeff8fff
 800c8ac:	40010000 	.word	0x40010000
 800c8b0:	40010400 	.word	0x40010400

0800c8b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b087      	sub	sp, #28
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6a1b      	ldr	r3, [r3, #32]
 800c8c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6a1b      	ldr	r3, [r3, #32]
 800c8ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	4b1b      	ldr	r3, [pc, #108]	; (800c94c <TIM_OC5_SetConfig+0x98>)
 800c8e0:	4013      	ands	r3, r2
 800c8e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c8f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	041b      	lsls	r3, r3, #16
 800c8fc:	693a      	ldr	r2, [r7, #16]
 800c8fe:	4313      	orrs	r3, r2
 800c900:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	4a12      	ldr	r2, [pc, #72]	; (800c950 <TIM_OC5_SetConfig+0x9c>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d003      	beq.n	800c912 <TIM_OC5_SetConfig+0x5e>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	4a11      	ldr	r2, [pc, #68]	; (800c954 <TIM_OC5_SetConfig+0xa0>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d109      	bne.n	800c926 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c918:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	695b      	ldr	r3, [r3, #20]
 800c91e:	021b      	lsls	r3, r3, #8
 800c920:	697a      	ldr	r2, [r7, #20]
 800c922:	4313      	orrs	r3, r2
 800c924:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	697a      	ldr	r2, [r7, #20]
 800c92a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	685a      	ldr	r2, [r3, #4]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	693a      	ldr	r2, [r7, #16]
 800c93e:	621a      	str	r2, [r3, #32]
}
 800c940:	bf00      	nop
 800c942:	371c      	adds	r7, #28
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr
 800c94c:	fffeff8f 	.word	0xfffeff8f
 800c950:	40010000 	.word	0x40010000
 800c954:	40010400 	.word	0x40010400

0800c958 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c958:	b480      	push	{r7}
 800c95a:	b087      	sub	sp, #28
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6a1b      	ldr	r3, [r3, #32]
 800c966:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6a1b      	ldr	r3, [r3, #32]
 800c972:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	4b1c      	ldr	r3, [pc, #112]	; (800c9f4 <TIM_OC6_SetConfig+0x9c>)
 800c984:	4013      	ands	r3, r2
 800c986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	021b      	lsls	r3, r3, #8
 800c98e:	68fa      	ldr	r2, [r7, #12]
 800c990:	4313      	orrs	r3, r2
 800c992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c99a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	051b      	lsls	r3, r3, #20
 800c9a2:	693a      	ldr	r2, [r7, #16]
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4a13      	ldr	r2, [pc, #76]	; (800c9f8 <TIM_OC6_SetConfig+0xa0>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d003      	beq.n	800c9b8 <TIM_OC6_SetConfig+0x60>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a12      	ldr	r2, [pc, #72]	; (800c9fc <TIM_OC6_SetConfig+0xa4>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d109      	bne.n	800c9cc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c9be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	695b      	ldr	r3, [r3, #20]
 800c9c4:	029b      	lsls	r3, r3, #10
 800c9c6:	697a      	ldr	r2, [r7, #20]
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	697a      	ldr	r2, [r7, #20]
 800c9d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	685a      	ldr	r2, [r3, #4]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	693a      	ldr	r2, [r7, #16]
 800c9e4:	621a      	str	r2, [r3, #32]
}
 800c9e6:	bf00      	nop
 800c9e8:	371c      	adds	r7, #28
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	feff8fff 	.word	0xfeff8fff
 800c9f8:	40010000 	.word	0x40010000
 800c9fc:	40010400 	.word	0x40010400

0800ca00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b087      	sub	sp, #28
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	60b9      	str	r1, [r7, #8]
 800ca0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6a1b      	ldr	r3, [r3, #32]
 800ca10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	6a1b      	ldr	r3, [r3, #32]
 800ca16:	f023 0201 	bic.w	r2, r3, #1
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	699b      	ldr	r3, [r3, #24]
 800ca22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	011b      	lsls	r3, r3, #4
 800ca30:	693a      	ldr	r2, [r7, #16]
 800ca32:	4313      	orrs	r3, r2
 800ca34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	f023 030a 	bic.w	r3, r3, #10
 800ca3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ca3e:	697a      	ldr	r2, [r7, #20]
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	4313      	orrs	r3, r2
 800ca44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	693a      	ldr	r2, [r7, #16]
 800ca4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	697a      	ldr	r2, [r7, #20]
 800ca50:	621a      	str	r2, [r3, #32]
}
 800ca52:	bf00      	nop
 800ca54:	371c      	adds	r7, #28
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr

0800ca5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca5e:	b480      	push	{r7}
 800ca60:	b087      	sub	sp, #28
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	60f8      	str	r0, [r7, #12]
 800ca66:	60b9      	str	r1, [r7, #8]
 800ca68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6a1b      	ldr	r3, [r3, #32]
 800ca6e:	f023 0210 	bic.w	r2, r3, #16
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	699b      	ldr	r3, [r3, #24]
 800ca7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6a1b      	ldr	r3, [r3, #32]
 800ca80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ca88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	031b      	lsls	r3, r3, #12
 800ca8e:	697a      	ldr	r2, [r7, #20]
 800ca90:	4313      	orrs	r3, r2
 800ca92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ca9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	011b      	lsls	r3, r3, #4
 800caa0:	693a      	ldr	r2, [r7, #16]
 800caa2:	4313      	orrs	r3, r2
 800caa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	697a      	ldr	r2, [r7, #20]
 800caaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	693a      	ldr	r2, [r7, #16]
 800cab0:	621a      	str	r2, [r3, #32]
}
 800cab2:	bf00      	nop
 800cab4:	371c      	adds	r7, #28
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr

0800cabe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cabe:	b480      	push	{r7}
 800cac0:	b085      	sub	sp, #20
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
 800cac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cad4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	4313      	orrs	r3, r2
 800cadc:	f043 0307 	orr.w	r3, r3, #7
 800cae0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	609a      	str	r2, [r3, #8]
}
 800cae8:	bf00      	nop
 800caea:	3714      	adds	r7, #20
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b087      	sub	sp, #28
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]
 800cb00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	689b      	ldr	r3, [r3, #8]
 800cb06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cb0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	021a      	lsls	r2, r3, #8
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	431a      	orrs	r2, r3
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	697a      	ldr	r2, [r7, #20]
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	697a      	ldr	r2, [r7, #20]
 800cb26:	609a      	str	r2, [r3, #8]
}
 800cb28:	bf00      	nop
 800cb2a:	371c      	adds	r7, #28
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b085      	sub	sp, #20
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d101      	bne.n	800cb4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cb48:	2302      	movs	r3, #2
 800cb4a:	e06d      	b.n	800cc28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2202      	movs	r2, #2
 800cb58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	689b      	ldr	r3, [r3, #8]
 800cb6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a30      	ldr	r2, [pc, #192]	; (800cc34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d004      	beq.n	800cb80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a2f      	ldr	r2, [pc, #188]	; (800cc38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d108      	bne.n	800cb92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cb86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	68fa      	ldr	r2, [r7, #12]
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	4313      	orrs	r3, r2
 800cba2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a20      	ldr	r2, [pc, #128]	; (800cc34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d022      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbbe:	d01d      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a1d      	ldr	r2, [pc, #116]	; (800cc3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d018      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a1c      	ldr	r2, [pc, #112]	; (800cc40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d013      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a1a      	ldr	r2, [pc, #104]	; (800cc44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d00e      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a15      	ldr	r2, [pc, #84]	; (800cc38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d009      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a16      	ldr	r2, [pc, #88]	; (800cc48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d004      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a15      	ldr	r2, [pc, #84]	; (800cc4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d10c      	bne.n	800cc16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	68ba      	ldr	r2, [r7, #8]
 800cc14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2201      	movs	r2, #1
 800cc1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc26:	2300      	movs	r3, #0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3714      	adds	r7, #20
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr
 800cc34:	40010000 	.word	0x40010000
 800cc38:	40010400 	.word	0x40010400
 800cc3c:	40000400 	.word	0x40000400
 800cc40:	40000800 	.word	0x40000800
 800cc44:	40000c00 	.word	0x40000c00
 800cc48:	40014000 	.word	0x40014000
 800cc4c:	40001800 	.word	0x40001800

0800cc50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc58:	bf00      	nop
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc6c:	bf00      	nop
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cc80:	bf00      	nop
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e040      	b.n	800cd20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d106      	bne.n	800ccb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f7fa f890 	bl	8006dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2224      	movs	r2, #36	; 0x24
 800ccb8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	681a      	ldr	r2, [r3, #0]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f022 0201 	bic.w	r2, r2, #1
 800ccc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 f8be 	bl	800ce4c <UART_SetConfig>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	d101      	bne.n	800ccda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e022      	b.n	800cd20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d002      	beq.n	800cce8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 fb5c 	bl	800d3a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	685a      	ldr	r2, [r3, #4]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ccf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	689a      	ldr	r2, [r3, #8]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cd06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f042 0201 	orr.w	r2, r2, #1
 800cd16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 fbe3 	bl	800d4e4 <UART_CheckIdleState>
 800cd1e:	4603      	mov	r3, r0
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3708      	adds	r7, #8
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b08a      	sub	sp, #40	; 0x28
 800cd2c:	af02      	add	r7, sp, #8
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	603b      	str	r3, [r7, #0]
 800cd34:	4613      	mov	r3, r2
 800cd36:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd3c:	2b20      	cmp	r3, #32
 800cd3e:	d17f      	bne.n	800ce40 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d002      	beq.n	800cd4c <HAL_UART_Transmit+0x24>
 800cd46:	88fb      	ldrh	r3, [r7, #6]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d101      	bne.n	800cd50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e078      	b.n	800ce42 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cd56:	2b01      	cmp	r3, #1
 800cd58:	d101      	bne.n	800cd5e <HAL_UART_Transmit+0x36>
 800cd5a:	2302      	movs	r3, #2
 800cd5c:	e071      	b.n	800ce42 <HAL_UART_Transmit+0x11a>
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2201      	movs	r2, #1
 800cd62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2221      	movs	r2, #33	; 0x21
 800cd70:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800cd72:	f7fa fbd1 	bl	8007518 <HAL_GetTick>
 800cd76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	88fa      	ldrh	r2, [r7, #6]
 800cd7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	88fa      	ldrh	r2, [r7, #6]
 800cd84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd90:	d108      	bne.n	800cda4 <HAL_UART_Transmit+0x7c>
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	691b      	ldr	r3, [r3, #16]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d104      	bne.n	800cda4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	61bb      	str	r3, [r7, #24]
 800cda2:	e003      	b.n	800cdac <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800cdb4:	e02c      	b.n	800ce10 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	2180      	movs	r1, #128	; 0x80
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f000 fbd4 	bl	800d56e <UART_WaitOnFlagUntilTimeout>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d001      	beq.n	800cdd0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800cdcc:	2303      	movs	r3, #3
 800cdce:	e038      	b.n	800ce42 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d10b      	bne.n	800cdee <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cdd6:	69bb      	ldr	r3, [r7, #24]
 800cdd8:	881b      	ldrh	r3, [r3, #0]
 800cdda:	461a      	mov	r2, r3
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cde4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	3302      	adds	r3, #2
 800cdea:	61bb      	str	r3, [r7, #24]
 800cdec:	e007      	b.n	800cdfe <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cdee:	69fb      	ldr	r3, [r7, #28]
 800cdf0:	781a      	ldrb	r2, [r3, #0]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	3b01      	subs	r3, #1
 800ce08:	b29a      	uxth	r2, r3
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1cc      	bne.n	800cdb6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	2200      	movs	r2, #0
 800ce24:	2140      	movs	r1, #64	; 0x40
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f000 fba1 	bl	800d56e <UART_WaitOnFlagUntilTimeout>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d001      	beq.n	800ce36 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ce32:	2303      	movs	r3, #3
 800ce34:	e005      	b.n	800ce42 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2220      	movs	r2, #32
 800ce3a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	e000      	b.n	800ce42 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800ce40:	2302      	movs	r3, #2
  }
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3720      	adds	r7, #32
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
	...

0800ce4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b088      	sub	sp, #32
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800ce54:	2300      	movs	r3, #0
 800ce56:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	689a      	ldr	r2, [r3, #8]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	691b      	ldr	r3, [r3, #16]
 800ce64:	431a      	orrs	r2, r3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	695b      	ldr	r3, [r3, #20]
 800ce6a:	431a      	orrs	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	69db      	ldr	r3, [r3, #28]
 800ce70:	4313      	orrs	r3, r2
 800ce72:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	4bb1      	ldr	r3, [pc, #708]	; (800d140 <UART_SetConfig+0x2f4>)
 800ce7c:	4013      	ands	r3, r2
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	6812      	ldr	r2, [r2, #0]
 800ce82:	6939      	ldr	r1, [r7, #16]
 800ce84:	430b      	orrs	r3, r1
 800ce86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	68da      	ldr	r2, [r3, #12]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	430a      	orrs	r2, r1
 800ce9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	699b      	ldr	r3, [r3, #24]
 800cea2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6a1b      	ldr	r3, [r3, #32]
 800cea8:	693a      	ldr	r2, [r7, #16]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	689b      	ldr	r3, [r3, #8]
 800ceb4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	693a      	ldr	r2, [r7, #16]
 800cebe:	430a      	orrs	r2, r1
 800cec0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a9f      	ldr	r2, [pc, #636]	; (800d144 <UART_SetConfig+0x2f8>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d121      	bne.n	800cf10 <UART_SetConfig+0xc4>
 800cecc:	4b9e      	ldr	r3, [pc, #632]	; (800d148 <UART_SetConfig+0x2fc>)
 800cece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ced2:	f003 0303 	and.w	r3, r3, #3
 800ced6:	2b03      	cmp	r3, #3
 800ced8:	d816      	bhi.n	800cf08 <UART_SetConfig+0xbc>
 800ceda:	a201      	add	r2, pc, #4	; (adr r2, 800cee0 <UART_SetConfig+0x94>)
 800cedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee0:	0800cef1 	.word	0x0800cef1
 800cee4:	0800cefd 	.word	0x0800cefd
 800cee8:	0800cef7 	.word	0x0800cef7
 800ceec:	0800cf03 	.word	0x0800cf03
 800cef0:	2301      	movs	r3, #1
 800cef2:	77fb      	strb	r3, [r7, #31]
 800cef4:	e151      	b.n	800d19a <UART_SetConfig+0x34e>
 800cef6:	2302      	movs	r3, #2
 800cef8:	77fb      	strb	r3, [r7, #31]
 800cefa:	e14e      	b.n	800d19a <UART_SetConfig+0x34e>
 800cefc:	2304      	movs	r3, #4
 800cefe:	77fb      	strb	r3, [r7, #31]
 800cf00:	e14b      	b.n	800d19a <UART_SetConfig+0x34e>
 800cf02:	2308      	movs	r3, #8
 800cf04:	77fb      	strb	r3, [r7, #31]
 800cf06:	e148      	b.n	800d19a <UART_SetConfig+0x34e>
 800cf08:	2310      	movs	r3, #16
 800cf0a:	77fb      	strb	r3, [r7, #31]
 800cf0c:	bf00      	nop
 800cf0e:	e144      	b.n	800d19a <UART_SetConfig+0x34e>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a8d      	ldr	r2, [pc, #564]	; (800d14c <UART_SetConfig+0x300>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d134      	bne.n	800cf84 <UART_SetConfig+0x138>
 800cf1a:	4b8b      	ldr	r3, [pc, #556]	; (800d148 <UART_SetConfig+0x2fc>)
 800cf1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf20:	f003 030c 	and.w	r3, r3, #12
 800cf24:	2b0c      	cmp	r3, #12
 800cf26:	d829      	bhi.n	800cf7c <UART_SetConfig+0x130>
 800cf28:	a201      	add	r2, pc, #4	; (adr r2, 800cf30 <UART_SetConfig+0xe4>)
 800cf2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf2e:	bf00      	nop
 800cf30:	0800cf65 	.word	0x0800cf65
 800cf34:	0800cf7d 	.word	0x0800cf7d
 800cf38:	0800cf7d 	.word	0x0800cf7d
 800cf3c:	0800cf7d 	.word	0x0800cf7d
 800cf40:	0800cf71 	.word	0x0800cf71
 800cf44:	0800cf7d 	.word	0x0800cf7d
 800cf48:	0800cf7d 	.word	0x0800cf7d
 800cf4c:	0800cf7d 	.word	0x0800cf7d
 800cf50:	0800cf6b 	.word	0x0800cf6b
 800cf54:	0800cf7d 	.word	0x0800cf7d
 800cf58:	0800cf7d 	.word	0x0800cf7d
 800cf5c:	0800cf7d 	.word	0x0800cf7d
 800cf60:	0800cf77 	.word	0x0800cf77
 800cf64:	2300      	movs	r3, #0
 800cf66:	77fb      	strb	r3, [r7, #31]
 800cf68:	e117      	b.n	800d19a <UART_SetConfig+0x34e>
 800cf6a:	2302      	movs	r3, #2
 800cf6c:	77fb      	strb	r3, [r7, #31]
 800cf6e:	e114      	b.n	800d19a <UART_SetConfig+0x34e>
 800cf70:	2304      	movs	r3, #4
 800cf72:	77fb      	strb	r3, [r7, #31]
 800cf74:	e111      	b.n	800d19a <UART_SetConfig+0x34e>
 800cf76:	2308      	movs	r3, #8
 800cf78:	77fb      	strb	r3, [r7, #31]
 800cf7a:	e10e      	b.n	800d19a <UART_SetConfig+0x34e>
 800cf7c:	2310      	movs	r3, #16
 800cf7e:	77fb      	strb	r3, [r7, #31]
 800cf80:	bf00      	nop
 800cf82:	e10a      	b.n	800d19a <UART_SetConfig+0x34e>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a71      	ldr	r2, [pc, #452]	; (800d150 <UART_SetConfig+0x304>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d120      	bne.n	800cfd0 <UART_SetConfig+0x184>
 800cf8e:	4b6e      	ldr	r3, [pc, #440]	; (800d148 <UART_SetConfig+0x2fc>)
 800cf90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cf98:	2b10      	cmp	r3, #16
 800cf9a:	d00f      	beq.n	800cfbc <UART_SetConfig+0x170>
 800cf9c:	2b10      	cmp	r3, #16
 800cf9e:	d802      	bhi.n	800cfa6 <UART_SetConfig+0x15a>
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d005      	beq.n	800cfb0 <UART_SetConfig+0x164>
 800cfa4:	e010      	b.n	800cfc8 <UART_SetConfig+0x17c>
 800cfa6:	2b20      	cmp	r3, #32
 800cfa8:	d005      	beq.n	800cfb6 <UART_SetConfig+0x16a>
 800cfaa:	2b30      	cmp	r3, #48	; 0x30
 800cfac:	d009      	beq.n	800cfc2 <UART_SetConfig+0x176>
 800cfae:	e00b      	b.n	800cfc8 <UART_SetConfig+0x17c>
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	77fb      	strb	r3, [r7, #31]
 800cfb4:	e0f1      	b.n	800d19a <UART_SetConfig+0x34e>
 800cfb6:	2302      	movs	r3, #2
 800cfb8:	77fb      	strb	r3, [r7, #31]
 800cfba:	e0ee      	b.n	800d19a <UART_SetConfig+0x34e>
 800cfbc:	2304      	movs	r3, #4
 800cfbe:	77fb      	strb	r3, [r7, #31]
 800cfc0:	e0eb      	b.n	800d19a <UART_SetConfig+0x34e>
 800cfc2:	2308      	movs	r3, #8
 800cfc4:	77fb      	strb	r3, [r7, #31]
 800cfc6:	e0e8      	b.n	800d19a <UART_SetConfig+0x34e>
 800cfc8:	2310      	movs	r3, #16
 800cfca:	77fb      	strb	r3, [r7, #31]
 800cfcc:	bf00      	nop
 800cfce:	e0e4      	b.n	800d19a <UART_SetConfig+0x34e>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a5f      	ldr	r2, [pc, #380]	; (800d154 <UART_SetConfig+0x308>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d120      	bne.n	800d01c <UART_SetConfig+0x1d0>
 800cfda:	4b5b      	ldr	r3, [pc, #364]	; (800d148 <UART_SetConfig+0x2fc>)
 800cfdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfe0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cfe4:	2b40      	cmp	r3, #64	; 0x40
 800cfe6:	d00f      	beq.n	800d008 <UART_SetConfig+0x1bc>
 800cfe8:	2b40      	cmp	r3, #64	; 0x40
 800cfea:	d802      	bhi.n	800cff2 <UART_SetConfig+0x1a6>
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d005      	beq.n	800cffc <UART_SetConfig+0x1b0>
 800cff0:	e010      	b.n	800d014 <UART_SetConfig+0x1c8>
 800cff2:	2b80      	cmp	r3, #128	; 0x80
 800cff4:	d005      	beq.n	800d002 <UART_SetConfig+0x1b6>
 800cff6:	2bc0      	cmp	r3, #192	; 0xc0
 800cff8:	d009      	beq.n	800d00e <UART_SetConfig+0x1c2>
 800cffa:	e00b      	b.n	800d014 <UART_SetConfig+0x1c8>
 800cffc:	2300      	movs	r3, #0
 800cffe:	77fb      	strb	r3, [r7, #31]
 800d000:	e0cb      	b.n	800d19a <UART_SetConfig+0x34e>
 800d002:	2302      	movs	r3, #2
 800d004:	77fb      	strb	r3, [r7, #31]
 800d006:	e0c8      	b.n	800d19a <UART_SetConfig+0x34e>
 800d008:	2304      	movs	r3, #4
 800d00a:	77fb      	strb	r3, [r7, #31]
 800d00c:	e0c5      	b.n	800d19a <UART_SetConfig+0x34e>
 800d00e:	2308      	movs	r3, #8
 800d010:	77fb      	strb	r3, [r7, #31]
 800d012:	e0c2      	b.n	800d19a <UART_SetConfig+0x34e>
 800d014:	2310      	movs	r3, #16
 800d016:	77fb      	strb	r3, [r7, #31]
 800d018:	bf00      	nop
 800d01a:	e0be      	b.n	800d19a <UART_SetConfig+0x34e>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a4d      	ldr	r2, [pc, #308]	; (800d158 <UART_SetConfig+0x30c>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d124      	bne.n	800d070 <UART_SetConfig+0x224>
 800d026:	4b48      	ldr	r3, [pc, #288]	; (800d148 <UART_SetConfig+0x2fc>)
 800d028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d02c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d034:	d012      	beq.n	800d05c <UART_SetConfig+0x210>
 800d036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d03a:	d802      	bhi.n	800d042 <UART_SetConfig+0x1f6>
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d007      	beq.n	800d050 <UART_SetConfig+0x204>
 800d040:	e012      	b.n	800d068 <UART_SetConfig+0x21c>
 800d042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d046:	d006      	beq.n	800d056 <UART_SetConfig+0x20a>
 800d048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d04c:	d009      	beq.n	800d062 <UART_SetConfig+0x216>
 800d04e:	e00b      	b.n	800d068 <UART_SetConfig+0x21c>
 800d050:	2300      	movs	r3, #0
 800d052:	77fb      	strb	r3, [r7, #31]
 800d054:	e0a1      	b.n	800d19a <UART_SetConfig+0x34e>
 800d056:	2302      	movs	r3, #2
 800d058:	77fb      	strb	r3, [r7, #31]
 800d05a:	e09e      	b.n	800d19a <UART_SetConfig+0x34e>
 800d05c:	2304      	movs	r3, #4
 800d05e:	77fb      	strb	r3, [r7, #31]
 800d060:	e09b      	b.n	800d19a <UART_SetConfig+0x34e>
 800d062:	2308      	movs	r3, #8
 800d064:	77fb      	strb	r3, [r7, #31]
 800d066:	e098      	b.n	800d19a <UART_SetConfig+0x34e>
 800d068:	2310      	movs	r3, #16
 800d06a:	77fb      	strb	r3, [r7, #31]
 800d06c:	bf00      	nop
 800d06e:	e094      	b.n	800d19a <UART_SetConfig+0x34e>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a39      	ldr	r2, [pc, #228]	; (800d15c <UART_SetConfig+0x310>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d124      	bne.n	800d0c4 <UART_SetConfig+0x278>
 800d07a:	4b33      	ldr	r3, [pc, #204]	; (800d148 <UART_SetConfig+0x2fc>)
 800d07c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d080:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d088:	d012      	beq.n	800d0b0 <UART_SetConfig+0x264>
 800d08a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d08e:	d802      	bhi.n	800d096 <UART_SetConfig+0x24a>
 800d090:	2b00      	cmp	r3, #0
 800d092:	d007      	beq.n	800d0a4 <UART_SetConfig+0x258>
 800d094:	e012      	b.n	800d0bc <UART_SetConfig+0x270>
 800d096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d09a:	d006      	beq.n	800d0aa <UART_SetConfig+0x25e>
 800d09c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d0a0:	d009      	beq.n	800d0b6 <UART_SetConfig+0x26a>
 800d0a2:	e00b      	b.n	800d0bc <UART_SetConfig+0x270>
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	77fb      	strb	r3, [r7, #31]
 800d0a8:	e077      	b.n	800d19a <UART_SetConfig+0x34e>
 800d0aa:	2302      	movs	r3, #2
 800d0ac:	77fb      	strb	r3, [r7, #31]
 800d0ae:	e074      	b.n	800d19a <UART_SetConfig+0x34e>
 800d0b0:	2304      	movs	r3, #4
 800d0b2:	77fb      	strb	r3, [r7, #31]
 800d0b4:	e071      	b.n	800d19a <UART_SetConfig+0x34e>
 800d0b6:	2308      	movs	r3, #8
 800d0b8:	77fb      	strb	r3, [r7, #31]
 800d0ba:	e06e      	b.n	800d19a <UART_SetConfig+0x34e>
 800d0bc:	2310      	movs	r3, #16
 800d0be:	77fb      	strb	r3, [r7, #31]
 800d0c0:	bf00      	nop
 800d0c2:	e06a      	b.n	800d19a <UART_SetConfig+0x34e>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a25      	ldr	r2, [pc, #148]	; (800d160 <UART_SetConfig+0x314>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d124      	bne.n	800d118 <UART_SetConfig+0x2cc>
 800d0ce:	4b1e      	ldr	r3, [pc, #120]	; (800d148 <UART_SetConfig+0x2fc>)
 800d0d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0d4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d0d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0dc:	d012      	beq.n	800d104 <UART_SetConfig+0x2b8>
 800d0de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0e2:	d802      	bhi.n	800d0ea <UART_SetConfig+0x29e>
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d007      	beq.n	800d0f8 <UART_SetConfig+0x2ac>
 800d0e8:	e012      	b.n	800d110 <UART_SetConfig+0x2c4>
 800d0ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0ee:	d006      	beq.n	800d0fe <UART_SetConfig+0x2b2>
 800d0f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d0f4:	d009      	beq.n	800d10a <UART_SetConfig+0x2be>
 800d0f6:	e00b      	b.n	800d110 <UART_SetConfig+0x2c4>
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	77fb      	strb	r3, [r7, #31]
 800d0fc:	e04d      	b.n	800d19a <UART_SetConfig+0x34e>
 800d0fe:	2302      	movs	r3, #2
 800d100:	77fb      	strb	r3, [r7, #31]
 800d102:	e04a      	b.n	800d19a <UART_SetConfig+0x34e>
 800d104:	2304      	movs	r3, #4
 800d106:	77fb      	strb	r3, [r7, #31]
 800d108:	e047      	b.n	800d19a <UART_SetConfig+0x34e>
 800d10a:	2308      	movs	r3, #8
 800d10c:	77fb      	strb	r3, [r7, #31]
 800d10e:	e044      	b.n	800d19a <UART_SetConfig+0x34e>
 800d110:	2310      	movs	r3, #16
 800d112:	77fb      	strb	r3, [r7, #31]
 800d114:	bf00      	nop
 800d116:	e040      	b.n	800d19a <UART_SetConfig+0x34e>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a11      	ldr	r2, [pc, #68]	; (800d164 <UART_SetConfig+0x318>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d139      	bne.n	800d196 <UART_SetConfig+0x34a>
 800d122:	4b09      	ldr	r3, [pc, #36]	; (800d148 <UART_SetConfig+0x2fc>)
 800d124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d128:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d12c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d130:	d027      	beq.n	800d182 <UART_SetConfig+0x336>
 800d132:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d136:	d817      	bhi.n	800d168 <UART_SetConfig+0x31c>
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d01c      	beq.n	800d176 <UART_SetConfig+0x32a>
 800d13c:	e027      	b.n	800d18e <UART_SetConfig+0x342>
 800d13e:	bf00      	nop
 800d140:	efff69f3 	.word	0xefff69f3
 800d144:	40011000 	.word	0x40011000
 800d148:	40023800 	.word	0x40023800
 800d14c:	40004400 	.word	0x40004400
 800d150:	40004800 	.word	0x40004800
 800d154:	40004c00 	.word	0x40004c00
 800d158:	40005000 	.word	0x40005000
 800d15c:	40011400 	.word	0x40011400
 800d160:	40007800 	.word	0x40007800
 800d164:	40007c00 	.word	0x40007c00
 800d168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d16c:	d006      	beq.n	800d17c <UART_SetConfig+0x330>
 800d16e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d172:	d009      	beq.n	800d188 <UART_SetConfig+0x33c>
 800d174:	e00b      	b.n	800d18e <UART_SetConfig+0x342>
 800d176:	2300      	movs	r3, #0
 800d178:	77fb      	strb	r3, [r7, #31]
 800d17a:	e00e      	b.n	800d19a <UART_SetConfig+0x34e>
 800d17c:	2302      	movs	r3, #2
 800d17e:	77fb      	strb	r3, [r7, #31]
 800d180:	e00b      	b.n	800d19a <UART_SetConfig+0x34e>
 800d182:	2304      	movs	r3, #4
 800d184:	77fb      	strb	r3, [r7, #31]
 800d186:	e008      	b.n	800d19a <UART_SetConfig+0x34e>
 800d188:	2308      	movs	r3, #8
 800d18a:	77fb      	strb	r3, [r7, #31]
 800d18c:	e005      	b.n	800d19a <UART_SetConfig+0x34e>
 800d18e:	2310      	movs	r3, #16
 800d190:	77fb      	strb	r3, [r7, #31]
 800d192:	bf00      	nop
 800d194:	e001      	b.n	800d19a <UART_SetConfig+0x34e>
 800d196:	2310      	movs	r3, #16
 800d198:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	69db      	ldr	r3, [r3, #28]
 800d19e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1a2:	d17f      	bne.n	800d2a4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800d1a4:	7ffb      	ldrb	r3, [r7, #31]
 800d1a6:	2b08      	cmp	r3, #8
 800d1a8:	d85c      	bhi.n	800d264 <UART_SetConfig+0x418>
 800d1aa:	a201      	add	r2, pc, #4	; (adr r2, 800d1b0 <UART_SetConfig+0x364>)
 800d1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b0:	0800d1d5 	.word	0x0800d1d5
 800d1b4:	0800d1f5 	.word	0x0800d1f5
 800d1b8:	0800d215 	.word	0x0800d215
 800d1bc:	0800d265 	.word	0x0800d265
 800d1c0:	0800d22d 	.word	0x0800d22d
 800d1c4:	0800d265 	.word	0x0800d265
 800d1c8:	0800d265 	.word	0x0800d265
 800d1cc:	0800d265 	.word	0x0800d265
 800d1d0:	0800d24d 	.word	0x0800d24d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1d4:	f7fd fc16 	bl	800aa04 <HAL_RCC_GetPCLK1Freq>
 800d1d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	005a      	lsls	r2, r3, #1
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	085b      	lsrs	r3, r3, #1
 800d1e4:	441a      	add	r2, r3
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	61bb      	str	r3, [r7, #24]
        break;
 800d1f2:	e03a      	b.n	800d26a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1f4:	f7fd fc1a 	bl	800aa2c <HAL_RCC_GetPCLK2Freq>
 800d1f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	005a      	lsls	r2, r3, #1
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	085b      	lsrs	r3, r3, #1
 800d204:	441a      	add	r2, r3
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d20e:	b29b      	uxth	r3, r3
 800d210:	61bb      	str	r3, [r7, #24]
        break;
 800d212:	e02a      	b.n	800d26a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	085a      	lsrs	r2, r3, #1
 800d21a:	4b5f      	ldr	r3, [pc, #380]	; (800d398 <UART_SetConfig+0x54c>)
 800d21c:	4413      	add	r3, r2
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	6852      	ldr	r2, [r2, #4]
 800d222:	fbb3 f3f2 	udiv	r3, r3, r2
 800d226:	b29b      	uxth	r3, r3
 800d228:	61bb      	str	r3, [r7, #24]
        break;
 800d22a:	e01e      	b.n	800d26a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d22c:	f7fd fb2c 	bl	800a888 <HAL_RCC_GetSysClockFreq>
 800d230:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	005a      	lsls	r2, r3, #1
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	085b      	lsrs	r3, r3, #1
 800d23c:	441a      	add	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	fbb2 f3f3 	udiv	r3, r2, r3
 800d246:	b29b      	uxth	r3, r3
 800d248:	61bb      	str	r3, [r7, #24]
        break;
 800d24a:	e00e      	b.n	800d26a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	085b      	lsrs	r3, r3, #1
 800d252:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d25e:	b29b      	uxth	r3, r3
 800d260:	61bb      	str	r3, [r7, #24]
        break;
 800d262:	e002      	b.n	800d26a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800d264:	2301      	movs	r3, #1
 800d266:	75fb      	strb	r3, [r7, #23]
        break;
 800d268:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d26a:	69bb      	ldr	r3, [r7, #24]
 800d26c:	2b0f      	cmp	r3, #15
 800d26e:	d916      	bls.n	800d29e <UART_SetConfig+0x452>
 800d270:	69bb      	ldr	r3, [r7, #24]
 800d272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d276:	d212      	bcs.n	800d29e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d278:	69bb      	ldr	r3, [r7, #24]
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	f023 030f 	bic.w	r3, r3, #15
 800d280:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	085b      	lsrs	r3, r3, #1
 800d286:	b29b      	uxth	r3, r3
 800d288:	f003 0307 	and.w	r3, r3, #7
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	897b      	ldrh	r3, [r7, #10]
 800d290:	4313      	orrs	r3, r2
 800d292:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	897a      	ldrh	r2, [r7, #10]
 800d29a:	60da      	str	r2, [r3, #12]
 800d29c:	e070      	b.n	800d380 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	75fb      	strb	r3, [r7, #23]
 800d2a2:	e06d      	b.n	800d380 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800d2a4:	7ffb      	ldrb	r3, [r7, #31]
 800d2a6:	2b08      	cmp	r3, #8
 800d2a8:	d859      	bhi.n	800d35e <UART_SetConfig+0x512>
 800d2aa:	a201      	add	r2, pc, #4	; (adr r2, 800d2b0 <UART_SetConfig+0x464>)
 800d2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b0:	0800d2d5 	.word	0x0800d2d5
 800d2b4:	0800d2f3 	.word	0x0800d2f3
 800d2b8:	0800d311 	.word	0x0800d311
 800d2bc:	0800d35f 	.word	0x0800d35f
 800d2c0:	0800d329 	.word	0x0800d329
 800d2c4:	0800d35f 	.word	0x0800d35f
 800d2c8:	0800d35f 	.word	0x0800d35f
 800d2cc:	0800d35f 	.word	0x0800d35f
 800d2d0:	0800d347 	.word	0x0800d347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d2d4:	f7fd fb96 	bl	800aa04 <HAL_RCC_GetPCLK1Freq>
 800d2d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	085a      	lsrs	r2, r3, #1
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	441a      	add	r2, r3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	61bb      	str	r3, [r7, #24]
        break;
 800d2f0:	e038      	b.n	800d364 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d2f2:	f7fd fb9b 	bl	800aa2c <HAL_RCC_GetPCLK2Freq>
 800d2f6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	085a      	lsrs	r2, r3, #1
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	441a      	add	r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	fbb2 f3f3 	udiv	r3, r2, r3
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	61bb      	str	r3, [r7, #24]
        break;
 800d30e:	e029      	b.n	800d364 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	085a      	lsrs	r2, r3, #1
 800d316:	4b21      	ldr	r3, [pc, #132]	; (800d39c <UART_SetConfig+0x550>)
 800d318:	4413      	add	r3, r2
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	6852      	ldr	r2, [r2, #4]
 800d31e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d322:	b29b      	uxth	r3, r3
 800d324:	61bb      	str	r3, [r7, #24]
        break;
 800d326:	e01d      	b.n	800d364 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d328:	f7fd faae 	bl	800a888 <HAL_RCC_GetSysClockFreq>
 800d32c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	085a      	lsrs	r2, r3, #1
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	441a      	add	r2, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d340:	b29b      	uxth	r3, r3
 800d342:	61bb      	str	r3, [r7, #24]
        break;
 800d344:	e00e      	b.n	800d364 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	685b      	ldr	r3, [r3, #4]
 800d34a:	085b      	lsrs	r3, r3, #1
 800d34c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	fbb2 f3f3 	udiv	r3, r2, r3
 800d358:	b29b      	uxth	r3, r3
 800d35a:	61bb      	str	r3, [r7, #24]
        break;
 800d35c:	e002      	b.n	800d364 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800d35e:	2301      	movs	r3, #1
 800d360:	75fb      	strb	r3, [r7, #23]
        break;
 800d362:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	2b0f      	cmp	r3, #15
 800d368:	d908      	bls.n	800d37c <UART_SetConfig+0x530>
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d370:	d204      	bcs.n	800d37c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	69ba      	ldr	r2, [r7, #24]
 800d378:	60da      	str	r2, [r3, #12]
 800d37a:	e001      	b.n	800d380 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800d37c:	2301      	movs	r3, #1
 800d37e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2200      	movs	r2, #0
 800d38a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800d38c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3720      	adds	r7, #32
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}
 800d396:	bf00      	nop
 800d398:	01e84800 	.word	0x01e84800
 800d39c:	00f42400 	.word	0x00f42400

0800d3a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b083      	sub	sp, #12
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ac:	f003 0301 	and.w	r3, r3, #1
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d00a      	beq.n	800d3ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	430a      	orrs	r2, r1
 800d3c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ce:	f003 0302 	and.w	r3, r3, #2
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d00a      	beq.n	800d3ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	430a      	orrs	r2, r1
 800d3ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f0:	f003 0304 	and.w	r3, r3, #4
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d00a      	beq.n	800d40e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	430a      	orrs	r2, r1
 800d40c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d412:	f003 0308 	and.w	r3, r3, #8
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00a      	beq.n	800d430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	430a      	orrs	r2, r1
 800d42e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d434:	f003 0310 	and.w	r3, r3, #16
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d00a      	beq.n	800d452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	430a      	orrs	r2, r1
 800d450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d456:	f003 0320 	and.w	r3, r3, #32
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d00a      	beq.n	800d474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	430a      	orrs	r2, r1
 800d472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d01a      	beq.n	800d4b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	430a      	orrs	r2, r1
 800d494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d49a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d49e:	d10a      	bne.n	800d4b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	430a      	orrs	r2, r1
 800d4b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d00a      	beq.n	800d4d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	430a      	orrs	r2, r1
 800d4d6:	605a      	str	r2, [r3, #4]
  }
}
 800d4d8:	bf00      	nop
 800d4da:	370c      	adds	r7, #12
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b086      	sub	sp, #24
 800d4e8:	af02      	add	r7, sp, #8
 800d4ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800d4f2:	f7fa f811 	bl	8007518 <HAL_GetTick>
 800d4f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f003 0308 	and.w	r3, r3, #8
 800d502:	2b08      	cmp	r3, #8
 800d504:	d10e      	bne.n	800d524 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d506:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d50a:	9300      	str	r3, [sp, #0]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2200      	movs	r2, #0
 800d510:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 f82a 	bl	800d56e <UART_WaitOnFlagUntilTimeout>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d001      	beq.n	800d524 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d520:	2303      	movs	r3, #3
 800d522:	e020      	b.n	800d566 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f003 0304 	and.w	r3, r3, #4
 800d52e:	2b04      	cmp	r3, #4
 800d530:	d10e      	bne.n	800d550 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d532:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d536:	9300      	str	r3, [sp, #0]
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2200      	movs	r2, #0
 800d53c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 f814 	bl	800d56e <UART_WaitOnFlagUntilTimeout>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d001      	beq.n	800d550 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d54c:	2303      	movs	r3, #3
 800d54e:	e00a      	b.n	800d566 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2220      	movs	r2, #32
 800d554:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2220      	movs	r2, #32
 800d55a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2200      	movs	r2, #0
 800d560:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800d564:	2300      	movs	r3, #0
}
 800d566:	4618      	mov	r0, r3
 800d568:	3710      	adds	r7, #16
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}

0800d56e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d56e:	b580      	push	{r7, lr}
 800d570:	b084      	sub	sp, #16
 800d572:	af00      	add	r7, sp, #0
 800d574:	60f8      	str	r0, [r7, #12]
 800d576:	60b9      	str	r1, [r7, #8]
 800d578:	603b      	str	r3, [r7, #0]
 800d57a:	4613      	mov	r3, r2
 800d57c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d57e:	e05d      	b.n	800d63c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d580:	69bb      	ldr	r3, [r7, #24]
 800d582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d586:	d059      	beq.n	800d63c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d588:	f7f9 ffc6 	bl	8007518 <HAL_GetTick>
 800d58c:	4602      	mov	r2, r0
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	1ad3      	subs	r3, r2, r3
 800d592:	69ba      	ldr	r2, [r7, #24]
 800d594:	429a      	cmp	r2, r3
 800d596:	d302      	bcc.n	800d59e <UART_WaitOnFlagUntilTimeout+0x30>
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d11b      	bne.n	800d5d6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d5ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	689a      	ldr	r2, [r3, #8]
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f022 0201 	bic.w	r2, r2, #1
 800d5bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2220      	movs	r2, #32
 800d5c2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2220      	movs	r2, #32
 800d5c8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800d5d2:	2303      	movs	r3, #3
 800d5d4:	e042      	b.n	800d65c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f003 0304 	and.w	r3, r3, #4
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d02b      	beq.n	800d63c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	69db      	ldr	r3, [r3, #28]
 800d5ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5f2:	d123      	bne.n	800d63c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5fc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	681a      	ldr	r2, [r3, #0]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d60c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	689a      	ldr	r2, [r3, #8]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f022 0201 	bic.w	r2, r2, #1
 800d61c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2220      	movs	r2, #32
 800d622:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	2220      	movs	r2, #32
 800d628:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2220      	movs	r2, #32
 800d62e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2200      	movs	r2, #0
 800d634:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800d638:	2303      	movs	r3, #3
 800d63a:	e00f      	b.n	800d65c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	69da      	ldr	r2, [r3, #28]
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	4013      	ands	r3, r2
 800d646:	68ba      	ldr	r2, [r7, #8]
 800d648:	429a      	cmp	r2, r3
 800d64a:	bf0c      	ite	eq
 800d64c:	2301      	moveq	r3, #1
 800d64e:	2300      	movne	r3, #0
 800d650:	b2db      	uxtb	r3, r3
 800d652:	461a      	mov	r2, r3
 800d654:	79fb      	ldrb	r3, [r7, #7]
 800d656:	429a      	cmp	r2, r3
 800d658:	d092      	beq.n	800d580 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d65a:	2300      	movs	r3, #0
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3710      	adds	r7, #16
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d664:	b084      	sub	sp, #16
 800d666:	b580      	push	{r7, lr}
 800d668:	b084      	sub	sp, #16
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
 800d66e:	f107 001c 	add.w	r0, r7, #28
 800d672:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d120      	bne.n	800d6be <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d680:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	68da      	ldr	r2, [r3, #12]
 800d68c:	4b20      	ldr	r3, [pc, #128]	; (800d710 <USB_CoreInit+0xac>)
 800d68e:	4013      	ands	r3, r2
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	68db      	ldr	r3, [r3, #12]
 800d698:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d6a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d105      	bne.n	800d6b2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 fa52 	bl	800db5c <USB_CoreReset>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	73fb      	strb	r3, [r7, #15]
 800d6bc:	e010      	b.n	800d6e0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 fa46 	bl	800db5c <USB_CoreReset>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800d6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d10b      	bne.n	800d6fe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	689b      	ldr	r3, [r3, #8]
 800d6ea:	f043 0206 	orr.w	r2, r3, #6
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	f043 0220 	orr.w	r2, r3, #32
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d700:	4618      	mov	r0, r3
 800d702:	3710      	adds	r7, #16
 800d704:	46bd      	mov	sp, r7
 800d706:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d70a:	b004      	add	sp, #16
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop
 800d710:	ffbdffbf 	.word	0xffbdffbf

0800d714 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	f023 0201 	bic.w	r2, r3, #1
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d728:	2300      	movs	r3, #0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	370c      	adds	r7, #12
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr

0800d736 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d736:	b580      	push	{r7, lr}
 800d738:	b082      	sub	sp, #8
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
 800d73e:	460b      	mov	r3, r1
 800d740:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	68db      	ldr	r3, [r3, #12]
 800d746:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d74e:	78fb      	ldrb	r3, [r7, #3]
 800d750:	2b01      	cmp	r3, #1
 800d752:	d106      	bne.n	800d762 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	68db      	ldr	r3, [r3, #12]
 800d758:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	60da      	str	r2, [r3, #12]
 800d760:	e00b      	b.n	800d77a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d762:	78fb      	ldrb	r3, [r7, #3]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d106      	bne.n	800d776 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	60da      	str	r2, [r3, #12]
 800d774:	e001      	b.n	800d77a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d776:	2301      	movs	r3, #1
 800d778:	e003      	b.n	800d782 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d77a:	2032      	movs	r0, #50	; 0x32
 800d77c:	f7f9 fed8 	bl	8007530 <HAL_Delay>

  return HAL_OK;
 800d780:	2300      	movs	r3, #0
}
 800d782:	4618      	mov	r0, r3
 800d784:	3708      	adds	r7, #8
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
	...

0800d78c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d78c:	b084      	sub	sp, #16
 800d78e:	b580      	push	{r7, lr}
 800d790:	b086      	sub	sp, #24
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
 800d796:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d79a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	613b      	str	r3, [r7, #16]
 800d7aa:	e009      	b.n	800d7c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	3340      	adds	r3, #64	; 0x40
 800d7b2:	009b      	lsls	r3, r3, #2
 800d7b4:	4413      	add	r3, r2
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	613b      	str	r3, [r7, #16]
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	2b0e      	cmp	r3, #14
 800d7c4:	d9f2      	bls.n	800d7ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d11c      	bne.n	800d806 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d7da:	f043 0302 	orr.w	r3, r3, #2
 800d7de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	601a      	str	r2, [r3, #0]
 800d804:	e005      	b.n	800d812 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d818:	461a      	mov	r2, r3
 800d81a:	2300      	movs	r3, #0
 800d81c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d824:	4619      	mov	r1, r3
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d82c:	461a      	mov	r2, r3
 800d82e:	680b      	ldr	r3, [r1, #0]
 800d830:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d834:	2b01      	cmp	r3, #1
 800d836:	d10c      	bne.n	800d852 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d104      	bne.n	800d848 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d83e:	2100      	movs	r1, #0
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f000 f959 	bl	800daf8 <USB_SetDevSpeed>
 800d846:	e018      	b.n	800d87a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d848:	2101      	movs	r1, #1
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 f954 	bl	800daf8 <USB_SetDevSpeed>
 800d850:	e013      	b.n	800d87a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800d852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d854:	2b03      	cmp	r3, #3
 800d856:	d10c      	bne.n	800d872 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d104      	bne.n	800d868 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d85e:	2100      	movs	r1, #0
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f000 f949 	bl	800daf8 <USB_SetDevSpeed>
 800d866:	e008      	b.n	800d87a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d868:	2101      	movs	r1, #1
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 f944 	bl	800daf8 <USB_SetDevSpeed>
 800d870:	e003      	b.n	800d87a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d872:	2103      	movs	r1, #3
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 f93f 	bl	800daf8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d87a:	2110      	movs	r1, #16
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 f8f3 	bl	800da68 <USB_FlushTxFifo>
 800d882:	4603      	mov	r3, r0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d001      	beq.n	800d88c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800d888:	2301      	movs	r3, #1
 800d88a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 f911 	bl	800dab4 <USB_FlushRxFifo>
 800d892:	4603      	mov	r3, r0
 800d894:	2b00      	cmp	r3, #0
 800d896:	d001      	beq.n	800d89c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800d898:	2301      	movs	r3, #1
 800d89a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	2300      	movs	r3, #0
 800d8be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	613b      	str	r3, [r7, #16]
 800d8c4:	e043      	b.n	800d94e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	015a      	lsls	r2, r3, #5
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d8d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d8dc:	d118      	bne.n	800d910 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d10a      	bne.n	800d8fa <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	015a      	lsls	r2, r3, #5
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	4413      	add	r3, r2
 800d8ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d8f6:	6013      	str	r3, [r2, #0]
 800d8f8:	e013      	b.n	800d922 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	015a      	lsls	r2, r3, #5
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	4413      	add	r3, r2
 800d902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d906:	461a      	mov	r2, r3
 800d908:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d90c:	6013      	str	r3, [r2, #0]
 800d90e:	e008      	b.n	800d922 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	015a      	lsls	r2, r3, #5
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	4413      	add	r3, r2
 800d918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d91c:	461a      	mov	r2, r3
 800d91e:	2300      	movs	r3, #0
 800d920:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	015a      	lsls	r2, r3, #5
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	4413      	add	r3, r2
 800d92a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d92e:	461a      	mov	r2, r3
 800d930:	2300      	movs	r3, #0
 800d932:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	015a      	lsls	r2, r3, #5
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	4413      	add	r3, r2
 800d93c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d940:	461a      	mov	r2, r3
 800d942:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d946:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	3301      	adds	r3, #1
 800d94c:	613b      	str	r3, [r7, #16]
 800d94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d950:	693a      	ldr	r2, [r7, #16]
 800d952:	429a      	cmp	r2, r3
 800d954:	d3b7      	bcc.n	800d8c6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d956:	2300      	movs	r3, #0
 800d958:	613b      	str	r3, [r7, #16]
 800d95a:	e043      	b.n	800d9e4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	015a      	lsls	r2, r3, #5
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	4413      	add	r3, r2
 800d964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d96e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d972:	d118      	bne.n	800d9a6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d10a      	bne.n	800d990 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	015a      	lsls	r2, r3, #5
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	4413      	add	r3, r2
 800d982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d986:	461a      	mov	r2, r3
 800d988:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d98c:	6013      	str	r3, [r2, #0]
 800d98e:	e013      	b.n	800d9b8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	015a      	lsls	r2, r3, #5
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	4413      	add	r3, r2
 800d998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d99c:	461a      	mov	r2, r3
 800d99e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d9a2:	6013      	str	r3, [r2, #0]
 800d9a4:	e008      	b.n	800d9b8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	015a      	lsls	r2, r3, #5
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	015a      	lsls	r2, r3, #5
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	4413      	add	r3, r2
 800d9c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	015a      	lsls	r2, r3, #5
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	4413      	add	r3, r2
 800d9d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d9dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	613b      	str	r3, [r7, #16]
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e6:	693a      	ldr	r2, [r7, #16]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d3b7      	bcc.n	800d95c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9f2:	691b      	ldr	r3, [r3, #16]
 800d9f4:	68fa      	ldr	r2, [r7, #12]
 800d9f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2200      	movs	r2, #0
 800da04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800da0c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800da0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da10:	2b00      	cmp	r3, #0
 800da12:	d105      	bne.n	800da20 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	699b      	ldr	r3, [r3, #24]
 800da18:	f043 0210 	orr.w	r2, r3, #16
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	699a      	ldr	r2, [r3, #24]
 800da24:	4b0e      	ldr	r3, [pc, #56]	; (800da60 <USB_DevInit+0x2d4>)
 800da26:	4313      	orrs	r3, r2
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800da2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d005      	beq.n	800da3e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	699b      	ldr	r3, [r3, #24]
 800da36:	f043 0208 	orr.w	r2, r3, #8
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800da3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da40:	2b01      	cmp	r3, #1
 800da42:	d105      	bne.n	800da50 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	699a      	ldr	r2, [r3, #24]
 800da48:	4b06      	ldr	r3, [pc, #24]	; (800da64 <USB_DevInit+0x2d8>)
 800da4a:	4313      	orrs	r3, r2
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800da50:	7dfb      	ldrb	r3, [r7, #23]
}
 800da52:	4618      	mov	r0, r3
 800da54:	3718      	adds	r7, #24
 800da56:	46bd      	mov	sp, r7
 800da58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800da5c:	b004      	add	sp, #16
 800da5e:	4770      	bx	lr
 800da60:	803c3800 	.word	0x803c3800
 800da64:	40000004 	.word	0x40000004

0800da68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800da68:	b480      	push	{r7}
 800da6a:	b085      	sub	sp, #20
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800da72:	2300      	movs	r3, #0
 800da74:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	019b      	lsls	r3, r3, #6
 800da7a:	f043 0220 	orr.w	r2, r3, #32
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	3301      	adds	r3, #1
 800da86:	60fb      	str	r3, [r7, #12]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	4a09      	ldr	r2, [pc, #36]	; (800dab0 <USB_FlushTxFifo+0x48>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d901      	bls.n	800da94 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800da90:	2303      	movs	r3, #3
 800da92:	e006      	b.n	800daa2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	691b      	ldr	r3, [r3, #16]
 800da98:	f003 0320 	and.w	r3, r3, #32
 800da9c:	2b20      	cmp	r3, #32
 800da9e:	d0f0      	beq.n	800da82 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800daa0:	2300      	movs	r3, #0
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3714      	adds	r7, #20
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop
 800dab0:	00030d40 	.word	0x00030d40

0800dab4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b085      	sub	sp, #20
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800dabc:	2300      	movs	r3, #0
 800dabe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2210      	movs	r2, #16
 800dac4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	3301      	adds	r3, #1
 800daca:	60fb      	str	r3, [r7, #12]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	4a09      	ldr	r2, [pc, #36]	; (800daf4 <USB_FlushRxFifo+0x40>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d901      	bls.n	800dad8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800dad4:	2303      	movs	r3, #3
 800dad6:	e006      	b.n	800dae6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	691b      	ldr	r3, [r3, #16]
 800dadc:	f003 0310 	and.w	r3, r3, #16
 800dae0:	2b10      	cmp	r3, #16
 800dae2:	d0f0      	beq.n	800dac6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800dae4:	2300      	movs	r3, #0
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3714      	adds	r7, #20
 800daea:	46bd      	mov	sp, r7
 800daec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf0:	4770      	bx	lr
 800daf2:	bf00      	nop
 800daf4:	00030d40 	.word	0x00030d40

0800daf8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b085      	sub	sp, #20
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	460b      	mov	r3, r1
 800db02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	78fb      	ldrb	r3, [r7, #3]
 800db12:	68f9      	ldr	r1, [r7, #12]
 800db14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db18:	4313      	orrs	r3, r2
 800db1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800db1c:	2300      	movs	r3, #0
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3714      	adds	r7, #20
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr

0800db2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b084      	sub	sp, #16
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	68fa      	ldr	r2, [r7, #12]
 800db40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db44:	f043 0302 	orr.w	r3, r3, #2
 800db48:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800db4a:	2003      	movs	r0, #3
 800db4c:	f7f9 fcf0 	bl	8007530 <HAL_Delay>

  return HAL_OK;
 800db50:	2300      	movs	r3, #0
}
 800db52:	4618      	mov	r0, r3
 800db54:	3710      	adds	r7, #16
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
	...

0800db5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b085      	sub	sp, #20
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800db64:	2300      	movs	r3, #0
 800db66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	3301      	adds	r3, #1
 800db6c:	60fb      	str	r3, [r7, #12]
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	4a13      	ldr	r2, [pc, #76]	; (800dbc0 <USB_CoreReset+0x64>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d901      	bls.n	800db7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800db76:	2303      	movs	r3, #3
 800db78:	e01b      	b.n	800dbb2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	daf2      	bge.n	800db68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800db82:	2300      	movs	r3, #0
 800db84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	691b      	ldr	r3, [r3, #16]
 800db8a:	f043 0201 	orr.w	r2, r3, #1
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	3301      	adds	r3, #1
 800db96:	60fb      	str	r3, [r7, #12]
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	4a09      	ldr	r2, [pc, #36]	; (800dbc0 <USB_CoreReset+0x64>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d901      	bls.n	800dba4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dba0:	2303      	movs	r3, #3
 800dba2:	e006      	b.n	800dbb2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	691b      	ldr	r3, [r3, #16]
 800dba8:	f003 0301 	and.w	r3, r3, #1
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d0f0      	beq.n	800db92 <USB_CoreReset+0x36>

  return HAL_OK;
 800dbb0:	2300      	movs	r3, #0
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3714      	adds	r7, #20
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr
 800dbbe:	bf00      	nop
 800dbc0:	00030d40 	.word	0x00030d40

0800dbc4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dbc4:	b480      	push	{r7}
 800dbc6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800dbc8:	bf00      	nop
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr
	...

0800dbd4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dbd4:	b480      	push	{r7}
 800dbd6:	b085      	sub	sp, #20
 800dbd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbda:	f3ef 8305 	mrs	r3, IPSR
 800dbde:	60bb      	str	r3, [r7, #8]
  return(result);
 800dbe0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d10f      	bne.n	800dc06 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbe6:	f3ef 8310 	mrs	r3, PRIMASK
 800dbea:	607b      	str	r3, [r7, #4]
  return(result);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d105      	bne.n	800dbfe <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dbf2:	f3ef 8311 	mrs	r3, BASEPRI
 800dbf6:	603b      	str	r3, [r7, #0]
  return(result);
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d007      	beq.n	800dc0e <osKernelInitialize+0x3a>
 800dbfe:	4b0e      	ldr	r3, [pc, #56]	; (800dc38 <osKernelInitialize+0x64>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2b02      	cmp	r3, #2
 800dc04:	d103      	bne.n	800dc0e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800dc06:	f06f 0305 	mvn.w	r3, #5
 800dc0a:	60fb      	str	r3, [r7, #12]
 800dc0c:	e00c      	b.n	800dc28 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dc0e:	4b0a      	ldr	r3, [pc, #40]	; (800dc38 <osKernelInitialize+0x64>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d105      	bne.n	800dc22 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dc16:	4b08      	ldr	r3, [pc, #32]	; (800dc38 <osKernelInitialize+0x64>)
 800dc18:	2201      	movs	r2, #1
 800dc1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	60fb      	str	r3, [r7, #12]
 800dc20:	e002      	b.n	800dc28 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800dc22:	f04f 33ff 	mov.w	r3, #4294967295
 800dc26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800dc28:	68fb      	ldr	r3, [r7, #12]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3714      	adds	r7, #20
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	200032d8 	.word	0x200032d8

0800dc3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc42:	f3ef 8305 	mrs	r3, IPSR
 800dc46:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d10f      	bne.n	800dc6e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc4e:	f3ef 8310 	mrs	r3, PRIMASK
 800dc52:	607b      	str	r3, [r7, #4]
  return(result);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d105      	bne.n	800dc66 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc5a:	f3ef 8311 	mrs	r3, BASEPRI
 800dc5e:	603b      	str	r3, [r7, #0]
  return(result);
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d007      	beq.n	800dc76 <osKernelStart+0x3a>
 800dc66:	4b0f      	ldr	r3, [pc, #60]	; (800dca4 <osKernelStart+0x68>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2b02      	cmp	r3, #2
 800dc6c:	d103      	bne.n	800dc76 <osKernelStart+0x3a>
    stat = osErrorISR;
 800dc6e:	f06f 0305 	mvn.w	r3, #5
 800dc72:	60fb      	str	r3, [r7, #12]
 800dc74:	e010      	b.n	800dc98 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dc76:	4b0b      	ldr	r3, [pc, #44]	; (800dca4 <osKernelStart+0x68>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d109      	bne.n	800dc92 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dc7e:	f7ff ffa1 	bl	800dbc4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dc82:	4b08      	ldr	r3, [pc, #32]	; (800dca4 <osKernelStart+0x68>)
 800dc84:	2202      	movs	r2, #2
 800dc86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dc88:	f001 f89c 	bl	800edc4 <vTaskStartScheduler>
      stat = osOK;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	60fb      	str	r3, [r7, #12]
 800dc90:	e002      	b.n	800dc98 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800dc92:	f04f 33ff 	mov.w	r3, #4294967295
 800dc96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800dc98:	68fb      	ldr	r3, [r7, #12]
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3710      	adds	r7, #16
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	200032d8 	.word	0x200032d8

0800dca8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b090      	sub	sp, #64	; 0x40
 800dcac:	af04      	add	r7, sp, #16
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcb8:	f3ef 8305 	mrs	r3, IPSR
 800dcbc:	61fb      	str	r3, [r7, #28]
  return(result);
 800dcbe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f040 808f 	bne.w	800dde4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcc6:	f3ef 8310 	mrs	r3, PRIMASK
 800dcca:	61bb      	str	r3, [r7, #24]
  return(result);
 800dccc:	69bb      	ldr	r3, [r7, #24]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d105      	bne.n	800dcde <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dcd2:	f3ef 8311 	mrs	r3, BASEPRI
 800dcd6:	617b      	str	r3, [r7, #20]
  return(result);
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d003      	beq.n	800dce6 <osThreadNew+0x3e>
 800dcde:	4b44      	ldr	r3, [pc, #272]	; (800ddf0 <osThreadNew+0x148>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2b02      	cmp	r3, #2
 800dce4:	d07e      	beq.n	800dde4 <osThreadNew+0x13c>
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d07b      	beq.n	800dde4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800dcec:	2380      	movs	r3, #128	; 0x80
 800dcee:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800dcf0:	2318      	movs	r3, #24
 800dcf2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800dcf8:	f04f 33ff 	mov.w	r3, #4294967295
 800dcfc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d045      	beq.n	800dd90 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d002      	beq.n	800dd12 <osThreadNew+0x6a>
        name = attr->name;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	699b      	ldr	r3, [r3, #24]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d002      	beq.n	800dd20 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	699b      	ldr	r3, [r3, #24]
 800dd1e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d008      	beq.n	800dd38 <osThreadNew+0x90>
 800dd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd28:	2b38      	cmp	r3, #56	; 0x38
 800dd2a:	d805      	bhi.n	800dd38 <osThreadNew+0x90>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	f003 0301 	and.w	r3, r3, #1
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d001      	beq.n	800dd3c <osThreadNew+0x94>
        return (NULL);
 800dd38:	2300      	movs	r3, #0
 800dd3a:	e054      	b.n	800dde6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	695b      	ldr	r3, [r3, #20]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d003      	beq.n	800dd4c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	695b      	ldr	r3, [r3, #20]
 800dd48:	089b      	lsrs	r3, r3, #2
 800dd4a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d00e      	beq.n	800dd72 <osThreadNew+0xca>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	68db      	ldr	r3, [r3, #12]
 800dd58:	2b5b      	cmp	r3, #91	; 0x5b
 800dd5a:	d90a      	bls.n	800dd72 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d006      	beq.n	800dd72 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	695b      	ldr	r3, [r3, #20]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d002      	beq.n	800dd72 <osThreadNew+0xca>
        mem = 1;
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	623b      	str	r3, [r7, #32]
 800dd70:	e010      	b.n	800dd94 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	689b      	ldr	r3, [r3, #8]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d10c      	bne.n	800dd94 <osThreadNew+0xec>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d108      	bne.n	800dd94 <osThreadNew+0xec>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	691b      	ldr	r3, [r3, #16]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d104      	bne.n	800dd94 <osThreadNew+0xec>
          mem = 0;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	623b      	str	r3, [r7, #32]
 800dd8e:	e001      	b.n	800dd94 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800dd90:	2300      	movs	r3, #0
 800dd92:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800dd94:	6a3b      	ldr	r3, [r7, #32]
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d110      	bne.n	800ddbc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800dd9e:	687a      	ldr	r2, [r7, #4]
 800dda0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dda2:	9202      	str	r2, [sp, #8]
 800dda4:	9301      	str	r3, [sp, #4]
 800dda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda8:	9300      	str	r3, [sp, #0]
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	f000 fe2b 	bl	800ea0c <xTaskCreateStatic>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	613b      	str	r3, [r7, #16]
 800ddba:	e013      	b.n	800dde4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800ddbc:	6a3b      	ldr	r3, [r7, #32]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d110      	bne.n	800dde4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ddc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc4:	b29a      	uxth	r2, r3
 800ddc6:	f107 0310 	add.w	r3, r7, #16
 800ddca:	9301      	str	r3, [sp, #4]
 800ddcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddce:	9300      	str	r3, [sp, #0]
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddd4:	68f8      	ldr	r0, [r7, #12]
 800ddd6:	f000 fe79 	bl	800eacc <xTaskCreate>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	d001      	beq.n	800dde4 <osThreadNew+0x13c>
          hTask = NULL;
 800dde0:	2300      	movs	r3, #0
 800dde2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dde4:	693b      	ldr	r3, [r7, #16]
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3730      	adds	r7, #48	; 0x30
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	200032d8 	.word	0x200032d8

0800ddf4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b086      	sub	sp, #24
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddfc:	f3ef 8305 	mrs	r3, IPSR
 800de00:	613b      	str	r3, [r7, #16]
  return(result);
 800de02:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800de04:	2b00      	cmp	r3, #0
 800de06:	d10f      	bne.n	800de28 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de08:	f3ef 8310 	mrs	r3, PRIMASK
 800de0c:	60fb      	str	r3, [r7, #12]
  return(result);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d105      	bne.n	800de20 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de14:	f3ef 8311 	mrs	r3, BASEPRI
 800de18:	60bb      	str	r3, [r7, #8]
  return(result);
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d007      	beq.n	800de30 <osDelay+0x3c>
 800de20:	4b0a      	ldr	r3, [pc, #40]	; (800de4c <osDelay+0x58>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b02      	cmp	r3, #2
 800de26:	d103      	bne.n	800de30 <osDelay+0x3c>
    stat = osErrorISR;
 800de28:	f06f 0305 	mvn.w	r3, #5
 800de2c:	617b      	str	r3, [r7, #20]
 800de2e:	e007      	b.n	800de40 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800de30:	2300      	movs	r3, #0
 800de32:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d002      	beq.n	800de40 <osDelay+0x4c>
      vTaskDelay(ticks);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 ff8c 	bl	800ed58 <vTaskDelay>
    }
  }

  return (stat);
 800de40:	697b      	ldr	r3, [r7, #20]
}
 800de42:	4618      	mov	r0, r3
 800de44:	3718      	adds	r7, #24
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	200032d8 	.word	0x200032d8

0800de50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800de50:	b480      	push	{r7}
 800de52:	b085      	sub	sp, #20
 800de54:	af00      	add	r7, sp, #0
 800de56:	60f8      	str	r0, [r7, #12]
 800de58:	60b9      	str	r1, [r7, #8]
 800de5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	4a07      	ldr	r2, [pc, #28]	; (800de7c <vApplicationGetIdleTaskMemory+0x2c>)
 800de60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	4a06      	ldr	r2, [pc, #24]	; (800de80 <vApplicationGetIdleTaskMemory+0x30>)
 800de66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2280      	movs	r2, #128	; 0x80
 800de6c:	601a      	str	r2, [r3, #0]
}
 800de6e:	bf00      	nop
 800de70:	3714      	adds	r7, #20
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr
 800de7a:	bf00      	nop
 800de7c:	200032dc 	.word	0x200032dc
 800de80:	20003338 	.word	0x20003338

0800de84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800de84:	b480      	push	{r7}
 800de86:	b085      	sub	sp, #20
 800de88:	af00      	add	r7, sp, #0
 800de8a:	60f8      	str	r0, [r7, #12]
 800de8c:	60b9      	str	r1, [r7, #8]
 800de8e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	4a07      	ldr	r2, [pc, #28]	; (800deb0 <vApplicationGetTimerTaskMemory+0x2c>)
 800de94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	4a06      	ldr	r2, [pc, #24]	; (800deb4 <vApplicationGetTimerTaskMemory+0x30>)
 800de9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dea2:	601a      	str	r2, [r3, #0]
}
 800dea4:	bf00      	nop
 800dea6:	3714      	adds	r7, #20
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr
 800deb0:	20003538 	.word	0x20003538
 800deb4:	20003594 	.word	0x20003594

0800deb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800deb8:	b480      	push	{r7}
 800deba:	b083      	sub	sp, #12
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f103 0208 	add.w	r2, r3, #8
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f04f 32ff 	mov.w	r2, #4294967295
 800ded0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f103 0208 	add.w	r2, r3, #8
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f103 0208 	add.w	r2, r3, #8
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2200      	movs	r2, #0
 800deea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800deec:	bf00      	nop
 800deee:	370c      	adds	r7, #12
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr

0800def8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2200      	movs	r2, #0
 800df04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800df06:	bf00      	nop
 800df08:	370c      	adds	r7, #12
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr

0800df12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df12:	b480      	push	{r7}
 800df14:	b085      	sub	sp, #20
 800df16:	af00      	add	r7, sp, #0
 800df18:	6078      	str	r0, [r7, #4]
 800df1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	68fa      	ldr	r2, [r7, #12]
 800df26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	689a      	ldr	r2, [r3, #8]
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	689b      	ldr	r3, [r3, #8]
 800df34:	683a      	ldr	r2, [r7, #0]
 800df36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	687a      	ldr	r2, [r7, #4]
 800df42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	1c5a      	adds	r2, r3, #1
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	601a      	str	r2, [r3, #0]
}
 800df4e:	bf00      	nop
 800df50:	3714      	adds	r7, #20
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr

0800df5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df5a:	b480      	push	{r7}
 800df5c:	b085      	sub	sp, #20
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
 800df62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df70:	d103      	bne.n	800df7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	691b      	ldr	r3, [r3, #16]
 800df76:	60fb      	str	r3, [r7, #12]
 800df78:	e00c      	b.n	800df94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	3308      	adds	r3, #8
 800df7e:	60fb      	str	r3, [r7, #12]
 800df80:	e002      	b.n	800df88 <vListInsert+0x2e>
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	60fb      	str	r3, [r7, #12]
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	685b      	ldr	r3, [r3, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	68ba      	ldr	r2, [r7, #8]
 800df90:	429a      	cmp	r2, r3
 800df92:	d2f6      	bcs.n	800df82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	685a      	ldr	r2, [r3, #4]
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	683a      	ldr	r2, [r7, #0]
 800dfa2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	68fa      	ldr	r2, [r7, #12]
 800dfa8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	683a      	ldr	r2, [r7, #0]
 800dfae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	1c5a      	adds	r2, r3, #1
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	601a      	str	r2, [r3, #0]
}
 800dfc0:	bf00      	nop
 800dfc2:	3714      	adds	r7, #20
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b085      	sub	sp, #20
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	691b      	ldr	r3, [r3, #16]
 800dfd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	6892      	ldr	r2, [r2, #8]
 800dfe2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	689b      	ldr	r3, [r3, #8]
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	6852      	ldr	r2, [r2, #4]
 800dfec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	687a      	ldr	r2, [r7, #4]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d103      	bne.n	800e000 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	689a      	ldr	r2, [r3, #8]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2200      	movs	r2, #0
 800e004:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	1e5a      	subs	r2, r3, #1
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
}
 800e014:	4618      	mov	r0, r3
 800e016:	3714      	adds	r7, #20
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d10b      	bne.n	800e04c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e038:	b672      	cpsid	i
 800e03a:	f383 8811 	msr	BASEPRI, r3
 800e03e:	f3bf 8f6f 	isb	sy
 800e042:	f3bf 8f4f 	dsb	sy
 800e046:	b662      	cpsie	i
 800e048:	60bb      	str	r3, [r7, #8]
 800e04a:	e7fe      	b.n	800e04a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800e04c:	f002 f95c 	bl	8010308 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e058:	68f9      	ldr	r1, [r7, #12]
 800e05a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e05c:	fb01 f303 	mul.w	r3, r1, r3
 800e060:	441a      	add	r2, r3
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2200      	movs	r2, #0
 800e06a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681a      	ldr	r2, [r3, #0]
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681a      	ldr	r2, [r3, #0]
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e07c:	3b01      	subs	r3, #1
 800e07e:	68f9      	ldr	r1, [r7, #12]
 800e080:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e082:	fb01 f303 	mul.w	r3, r1, r3
 800e086:	441a      	add	r2, r3
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	22ff      	movs	r2, #255	; 0xff
 800e090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	22ff      	movs	r2, #255	; 0xff
 800e098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d114      	bne.n	800e0cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	691b      	ldr	r3, [r3, #16]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d01a      	beq.n	800e0e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	3310      	adds	r3, #16
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f001 f916 	bl	800f2e0 <xTaskRemoveFromEventList>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d012      	beq.n	800e0e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e0ba:	4b0d      	ldr	r3, [pc, #52]	; (800e0f0 <xQueueGenericReset+0xd0>)
 800e0bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0c0:	601a      	str	r2, [r3, #0]
 800e0c2:	f3bf 8f4f 	dsb	sy
 800e0c6:	f3bf 8f6f 	isb	sy
 800e0ca:	e009      	b.n	800e0e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	3310      	adds	r3, #16
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7ff fef1 	bl	800deb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	3324      	adds	r3, #36	; 0x24
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7ff feec 	bl	800deb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e0e0:	f002 f944 	bl	801036c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e0e4:	2301      	movs	r3, #1
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	e000ed04 	.word	0xe000ed04

0800e0f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b08e      	sub	sp, #56	; 0x38
 800e0f8:	af02      	add	r7, sp, #8
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	60b9      	str	r1, [r7, #8]
 800e0fe:	607a      	str	r2, [r7, #4]
 800e100:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d10b      	bne.n	800e120 <xQueueGenericCreateStatic+0x2c>
 800e108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10c:	b672      	cpsid	i
 800e10e:	f383 8811 	msr	BASEPRI, r3
 800e112:	f3bf 8f6f 	isb	sy
 800e116:	f3bf 8f4f 	dsb	sy
 800e11a:	b662      	cpsie	i
 800e11c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e11e:	e7fe      	b.n	800e11e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d10b      	bne.n	800e13e <xQueueGenericCreateStatic+0x4a>
 800e126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e12a:	b672      	cpsid	i
 800e12c:	f383 8811 	msr	BASEPRI, r3
 800e130:	f3bf 8f6f 	isb	sy
 800e134:	f3bf 8f4f 	dsb	sy
 800e138:	b662      	cpsie	i
 800e13a:	627b      	str	r3, [r7, #36]	; 0x24
 800e13c:	e7fe      	b.n	800e13c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d002      	beq.n	800e14a <xQueueGenericCreateStatic+0x56>
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d001      	beq.n	800e14e <xQueueGenericCreateStatic+0x5a>
 800e14a:	2301      	movs	r3, #1
 800e14c:	e000      	b.n	800e150 <xQueueGenericCreateStatic+0x5c>
 800e14e:	2300      	movs	r3, #0
 800e150:	2b00      	cmp	r3, #0
 800e152:	d10b      	bne.n	800e16c <xQueueGenericCreateStatic+0x78>
 800e154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e158:	b672      	cpsid	i
 800e15a:	f383 8811 	msr	BASEPRI, r3
 800e15e:	f3bf 8f6f 	isb	sy
 800e162:	f3bf 8f4f 	dsb	sy
 800e166:	b662      	cpsie	i
 800e168:	623b      	str	r3, [r7, #32]
 800e16a:	e7fe      	b.n	800e16a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d102      	bne.n	800e178 <xQueueGenericCreateStatic+0x84>
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d101      	bne.n	800e17c <xQueueGenericCreateStatic+0x88>
 800e178:	2301      	movs	r3, #1
 800e17a:	e000      	b.n	800e17e <xQueueGenericCreateStatic+0x8a>
 800e17c:	2300      	movs	r3, #0
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d10b      	bne.n	800e19a <xQueueGenericCreateStatic+0xa6>
 800e182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e186:	b672      	cpsid	i
 800e188:	f383 8811 	msr	BASEPRI, r3
 800e18c:	f3bf 8f6f 	isb	sy
 800e190:	f3bf 8f4f 	dsb	sy
 800e194:	b662      	cpsie	i
 800e196:	61fb      	str	r3, [r7, #28]
 800e198:	e7fe      	b.n	800e198 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e19a:	2350      	movs	r3, #80	; 0x50
 800e19c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	2b50      	cmp	r3, #80	; 0x50
 800e1a2:	d00b      	beq.n	800e1bc <xQueueGenericCreateStatic+0xc8>
 800e1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a8:	b672      	cpsid	i
 800e1aa:	f383 8811 	msr	BASEPRI, r3
 800e1ae:	f3bf 8f6f 	isb	sy
 800e1b2:	f3bf 8f4f 	dsb	sy
 800e1b6:	b662      	cpsie	i
 800e1b8:	61bb      	str	r3, [r7, #24]
 800e1ba:	e7fe      	b.n	800e1ba <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e1bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d00d      	beq.n	800e1e4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e1d0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	4613      	mov	r3, r2
 800e1da:	687a      	ldr	r2, [r7, #4]
 800e1dc:	68b9      	ldr	r1, [r7, #8]
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	f000 f805 	bl	800e1ee <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3730      	adds	r7, #48	; 0x30
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}

0800e1ee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e1ee:	b580      	push	{r7, lr}
 800e1f0:	b084      	sub	sp, #16
 800e1f2:	af00      	add	r7, sp, #0
 800e1f4:	60f8      	str	r0, [r7, #12]
 800e1f6:	60b9      	str	r1, [r7, #8]
 800e1f8:	607a      	str	r2, [r7, #4]
 800e1fa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d103      	bne.n	800e20a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e202:	69bb      	ldr	r3, [r7, #24]
 800e204:	69ba      	ldr	r2, [r7, #24]
 800e206:	601a      	str	r2, [r3, #0]
 800e208:	e002      	b.n	800e210 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e20a:	69bb      	ldr	r3, [r7, #24]
 800e20c:	687a      	ldr	r2, [r7, #4]
 800e20e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e210:	69bb      	ldr	r3, [r7, #24]
 800e212:	68fa      	ldr	r2, [r7, #12]
 800e214:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e216:	69bb      	ldr	r3, [r7, #24]
 800e218:	68ba      	ldr	r2, [r7, #8]
 800e21a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e21c:	2101      	movs	r1, #1
 800e21e:	69b8      	ldr	r0, [r7, #24]
 800e220:	f7ff fefe 	bl	800e020 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	78fa      	ldrb	r2, [r7, #3]
 800e228:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e22c:	bf00      	nop
 800e22e:	3710      	adds	r7, #16
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b08e      	sub	sp, #56	; 0x38
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	607a      	str	r2, [r7, #4]
 800e240:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e242:	2300      	movs	r3, #0
 800e244:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d10b      	bne.n	800e268 <xQueueGenericSend+0x34>
 800e250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e254:	b672      	cpsid	i
 800e256:	f383 8811 	msr	BASEPRI, r3
 800e25a:	f3bf 8f6f 	isb	sy
 800e25e:	f3bf 8f4f 	dsb	sy
 800e262:	b662      	cpsie	i
 800e264:	62bb      	str	r3, [r7, #40]	; 0x28
 800e266:	e7fe      	b.n	800e266 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d103      	bne.n	800e276 <xQueueGenericSend+0x42>
 800e26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e272:	2b00      	cmp	r3, #0
 800e274:	d101      	bne.n	800e27a <xQueueGenericSend+0x46>
 800e276:	2301      	movs	r3, #1
 800e278:	e000      	b.n	800e27c <xQueueGenericSend+0x48>
 800e27a:	2300      	movs	r3, #0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d10b      	bne.n	800e298 <xQueueGenericSend+0x64>
 800e280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e284:	b672      	cpsid	i
 800e286:	f383 8811 	msr	BASEPRI, r3
 800e28a:	f3bf 8f6f 	isb	sy
 800e28e:	f3bf 8f4f 	dsb	sy
 800e292:	b662      	cpsie	i
 800e294:	627b      	str	r3, [r7, #36]	; 0x24
 800e296:	e7fe      	b.n	800e296 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	2b02      	cmp	r3, #2
 800e29c:	d103      	bne.n	800e2a6 <xQueueGenericSend+0x72>
 800e29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d101      	bne.n	800e2aa <xQueueGenericSend+0x76>
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	e000      	b.n	800e2ac <xQueueGenericSend+0x78>
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d10b      	bne.n	800e2c8 <xQueueGenericSend+0x94>
 800e2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b4:	b672      	cpsid	i
 800e2b6:	f383 8811 	msr	BASEPRI, r3
 800e2ba:	f3bf 8f6f 	isb	sy
 800e2be:	f3bf 8f4f 	dsb	sy
 800e2c2:	b662      	cpsie	i
 800e2c4:	623b      	str	r3, [r7, #32]
 800e2c6:	e7fe      	b.n	800e2c6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e2c8:	f001 f9c8 	bl	800f65c <xTaskGetSchedulerState>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d102      	bne.n	800e2d8 <xQueueGenericSend+0xa4>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d101      	bne.n	800e2dc <xQueueGenericSend+0xa8>
 800e2d8:	2301      	movs	r3, #1
 800e2da:	e000      	b.n	800e2de <xQueueGenericSend+0xaa>
 800e2dc:	2300      	movs	r3, #0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d10b      	bne.n	800e2fa <xQueueGenericSend+0xc6>
 800e2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e6:	b672      	cpsid	i
 800e2e8:	f383 8811 	msr	BASEPRI, r3
 800e2ec:	f3bf 8f6f 	isb	sy
 800e2f0:	f3bf 8f4f 	dsb	sy
 800e2f4:	b662      	cpsie	i
 800e2f6:	61fb      	str	r3, [r7, #28]
 800e2f8:	e7fe      	b.n	800e2f8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e2fa:	f002 f805 	bl	8010308 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e306:	429a      	cmp	r2, r3
 800e308:	d302      	bcc.n	800e310 <xQueueGenericSend+0xdc>
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	2b02      	cmp	r3, #2
 800e30e:	d129      	bne.n	800e364 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e310:	683a      	ldr	r2, [r7, #0]
 800e312:	68b9      	ldr	r1, [r7, #8]
 800e314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e316:	f000 fa0d 	bl	800e734 <prvCopyDataToQueue>
 800e31a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e320:	2b00      	cmp	r3, #0
 800e322:	d010      	beq.n	800e346 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e326:	3324      	adds	r3, #36	; 0x24
 800e328:	4618      	mov	r0, r3
 800e32a:	f000 ffd9 	bl	800f2e0 <xTaskRemoveFromEventList>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d013      	beq.n	800e35c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e334:	4b3f      	ldr	r3, [pc, #252]	; (800e434 <xQueueGenericSend+0x200>)
 800e336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e33a:	601a      	str	r2, [r3, #0]
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	f3bf 8f6f 	isb	sy
 800e344:	e00a      	b.n	800e35c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d007      	beq.n	800e35c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e34c:	4b39      	ldr	r3, [pc, #228]	; (800e434 <xQueueGenericSend+0x200>)
 800e34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e352:	601a      	str	r2, [r3, #0]
 800e354:	f3bf 8f4f 	dsb	sy
 800e358:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e35c:	f002 f806 	bl	801036c <vPortExitCritical>
				return pdPASS;
 800e360:	2301      	movs	r3, #1
 800e362:	e063      	b.n	800e42c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d103      	bne.n	800e372 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e36a:	f001 ffff 	bl	801036c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e36e:	2300      	movs	r3, #0
 800e370:	e05c      	b.n	800e42c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e374:	2b00      	cmp	r3, #0
 800e376:	d106      	bne.n	800e386 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e378:	f107 0314 	add.w	r3, r7, #20
 800e37c:	4618      	mov	r0, r3
 800e37e:	f001 f813 	bl	800f3a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e382:	2301      	movs	r3, #1
 800e384:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e386:	f001 fff1 	bl	801036c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e38a:	f000 fd83 	bl	800ee94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e38e:	f001 ffbb 	bl	8010308 <vPortEnterCritical>
 800e392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e394:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e398:	b25b      	sxtb	r3, r3
 800e39a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e39e:	d103      	bne.n	800e3a8 <xQueueGenericSend+0x174>
 800e3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3ae:	b25b      	sxtb	r3, r3
 800e3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b4:	d103      	bne.n	800e3be <xQueueGenericSend+0x18a>
 800e3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3be:	f001 ffd5 	bl	801036c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e3c2:	1d3a      	adds	r2, r7, #4
 800e3c4:	f107 0314 	add.w	r3, r7, #20
 800e3c8:	4611      	mov	r1, r2
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f001 f802 	bl	800f3d4 <xTaskCheckForTimeOut>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d124      	bne.n	800e420 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e3d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3d8:	f000 faa4 	bl	800e924 <prvIsQueueFull>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d018      	beq.n	800e414 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e4:	3310      	adds	r3, #16
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	4611      	mov	r1, r2
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f000 ff26 	bl	800f23c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e3f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3f2:	f000 fa2f 	bl	800e854 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e3f6:	f000 fd5b 	bl	800eeb0 <xTaskResumeAll>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	f47f af7c 	bne.w	800e2fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e402:	4b0c      	ldr	r3, [pc, #48]	; (800e434 <xQueueGenericSend+0x200>)
 800e404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e408:	601a      	str	r2, [r3, #0]
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	f3bf 8f6f 	isb	sy
 800e412:	e772      	b.n	800e2fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e416:	f000 fa1d 	bl	800e854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e41a:	f000 fd49 	bl	800eeb0 <xTaskResumeAll>
 800e41e:	e76c      	b.n	800e2fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e422:	f000 fa17 	bl	800e854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e426:	f000 fd43 	bl	800eeb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e42a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3738      	adds	r7, #56	; 0x38
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}
 800e434:	e000ed04 	.word	0xe000ed04

0800e438 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b08e      	sub	sp, #56	; 0x38
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	607a      	str	r2, [r7, #4]
 800e444:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d10b      	bne.n	800e468 <xQueueGenericSendFromISR+0x30>
 800e450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e454:	b672      	cpsid	i
 800e456:	f383 8811 	msr	BASEPRI, r3
 800e45a:	f3bf 8f6f 	isb	sy
 800e45e:	f3bf 8f4f 	dsb	sy
 800e462:	b662      	cpsie	i
 800e464:	627b      	str	r3, [r7, #36]	; 0x24
 800e466:	e7fe      	b.n	800e466 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d103      	bne.n	800e476 <xQueueGenericSendFromISR+0x3e>
 800e46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e472:	2b00      	cmp	r3, #0
 800e474:	d101      	bne.n	800e47a <xQueueGenericSendFromISR+0x42>
 800e476:	2301      	movs	r3, #1
 800e478:	e000      	b.n	800e47c <xQueueGenericSendFromISR+0x44>
 800e47a:	2300      	movs	r3, #0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d10b      	bne.n	800e498 <xQueueGenericSendFromISR+0x60>
 800e480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e484:	b672      	cpsid	i
 800e486:	f383 8811 	msr	BASEPRI, r3
 800e48a:	f3bf 8f6f 	isb	sy
 800e48e:	f3bf 8f4f 	dsb	sy
 800e492:	b662      	cpsie	i
 800e494:	623b      	str	r3, [r7, #32]
 800e496:	e7fe      	b.n	800e496 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	2b02      	cmp	r3, #2
 800e49c:	d103      	bne.n	800e4a6 <xQueueGenericSendFromISR+0x6e>
 800e49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d101      	bne.n	800e4aa <xQueueGenericSendFromISR+0x72>
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	e000      	b.n	800e4ac <xQueueGenericSendFromISR+0x74>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d10b      	bne.n	800e4c8 <xQueueGenericSendFromISR+0x90>
 800e4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b4:	b672      	cpsid	i
 800e4b6:	f383 8811 	msr	BASEPRI, r3
 800e4ba:	f3bf 8f6f 	isb	sy
 800e4be:	f3bf 8f4f 	dsb	sy
 800e4c2:	b662      	cpsie	i
 800e4c4:	61fb      	str	r3, [r7, #28]
 800e4c6:	e7fe      	b.n	800e4c6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e4c8:	f001 fffe 	bl	80104c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e4cc:	f3ef 8211 	mrs	r2, BASEPRI
 800e4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d4:	b672      	cpsid	i
 800e4d6:	f383 8811 	msr	BASEPRI, r3
 800e4da:	f3bf 8f6f 	isb	sy
 800e4de:	f3bf 8f4f 	dsb	sy
 800e4e2:	b662      	cpsie	i
 800e4e4:	61ba      	str	r2, [r7, #24]
 800e4e6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e4e8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d302      	bcc.n	800e4fe <xQueueGenericSendFromISR+0xc6>
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	2b02      	cmp	r3, #2
 800e4fc:	d12c      	bne.n	800e558 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e508:	683a      	ldr	r2, [r7, #0]
 800e50a:	68b9      	ldr	r1, [r7, #8]
 800e50c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e50e:	f000 f911 	bl	800e734 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e512:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e51a:	d112      	bne.n	800e542 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e520:	2b00      	cmp	r3, #0
 800e522:	d016      	beq.n	800e552 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e526:	3324      	adds	r3, #36	; 0x24
 800e528:	4618      	mov	r0, r3
 800e52a:	f000 fed9 	bl	800f2e0 <xTaskRemoveFromEventList>
 800e52e:	4603      	mov	r3, r0
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00e      	beq.n	800e552 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d00b      	beq.n	800e552 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2201      	movs	r2, #1
 800e53e:	601a      	str	r2, [r3, #0]
 800e540:	e007      	b.n	800e552 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e542:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e546:	3301      	adds	r3, #1
 800e548:	b2db      	uxtb	r3, r3
 800e54a:	b25a      	sxtb	r2, r3
 800e54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e54e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e552:	2301      	movs	r3, #1
 800e554:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e556:	e001      	b.n	800e55c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e558:	2300      	movs	r3, #0
 800e55a:	637b      	str	r3, [r7, #52]	; 0x34
 800e55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3738      	adds	r7, #56	; 0x38
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b08c      	sub	sp, #48	; 0x30
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e57c:	2300      	movs	r3, #0
 800e57e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e586:	2b00      	cmp	r3, #0
 800e588:	d10b      	bne.n	800e5a2 <xQueueReceive+0x32>
	__asm volatile
 800e58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e58e:	b672      	cpsid	i
 800e590:	f383 8811 	msr	BASEPRI, r3
 800e594:	f3bf 8f6f 	isb	sy
 800e598:	f3bf 8f4f 	dsb	sy
 800e59c:	b662      	cpsie	i
 800e59e:	623b      	str	r3, [r7, #32]
 800e5a0:	e7fe      	b.n	800e5a0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d103      	bne.n	800e5b0 <xQueueReceive+0x40>
 800e5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d101      	bne.n	800e5b4 <xQueueReceive+0x44>
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	e000      	b.n	800e5b6 <xQueueReceive+0x46>
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d10b      	bne.n	800e5d2 <xQueueReceive+0x62>
 800e5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5be:	b672      	cpsid	i
 800e5c0:	f383 8811 	msr	BASEPRI, r3
 800e5c4:	f3bf 8f6f 	isb	sy
 800e5c8:	f3bf 8f4f 	dsb	sy
 800e5cc:	b662      	cpsie	i
 800e5ce:	61fb      	str	r3, [r7, #28]
 800e5d0:	e7fe      	b.n	800e5d0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5d2:	f001 f843 	bl	800f65c <xTaskGetSchedulerState>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d102      	bne.n	800e5e2 <xQueueReceive+0x72>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d101      	bne.n	800e5e6 <xQueueReceive+0x76>
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e000      	b.n	800e5e8 <xQueueReceive+0x78>
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d10b      	bne.n	800e604 <xQueueReceive+0x94>
 800e5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f0:	b672      	cpsid	i
 800e5f2:	f383 8811 	msr	BASEPRI, r3
 800e5f6:	f3bf 8f6f 	isb	sy
 800e5fa:	f3bf 8f4f 	dsb	sy
 800e5fe:	b662      	cpsie	i
 800e600:	61bb      	str	r3, [r7, #24]
 800e602:	e7fe      	b.n	800e602 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e604:	f001 fe80 	bl	8010308 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e60c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e610:	2b00      	cmp	r3, #0
 800e612:	d01f      	beq.n	800e654 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e614:	68b9      	ldr	r1, [r7, #8]
 800e616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e618:	f000 f8f6 	bl	800e808 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61e:	1e5a      	subs	r2, r3, #1
 800e620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e622:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e626:	691b      	ldr	r3, [r3, #16]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d00f      	beq.n	800e64c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e62e:	3310      	adds	r3, #16
 800e630:	4618      	mov	r0, r3
 800e632:	f000 fe55 	bl	800f2e0 <xTaskRemoveFromEventList>
 800e636:	4603      	mov	r3, r0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d007      	beq.n	800e64c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e63c:	4b3c      	ldr	r3, [pc, #240]	; (800e730 <xQueueReceive+0x1c0>)
 800e63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e642:	601a      	str	r2, [r3, #0]
 800e644:	f3bf 8f4f 	dsb	sy
 800e648:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e64c:	f001 fe8e 	bl	801036c <vPortExitCritical>
				return pdPASS;
 800e650:	2301      	movs	r3, #1
 800e652:	e069      	b.n	800e728 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d103      	bne.n	800e662 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e65a:	f001 fe87 	bl	801036c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e65e:	2300      	movs	r3, #0
 800e660:	e062      	b.n	800e728 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e664:	2b00      	cmp	r3, #0
 800e666:	d106      	bne.n	800e676 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e668:	f107 0310 	add.w	r3, r7, #16
 800e66c:	4618      	mov	r0, r3
 800e66e:	f000 fe9b 	bl	800f3a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e672:	2301      	movs	r3, #1
 800e674:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e676:	f001 fe79 	bl	801036c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e67a:	f000 fc0b 	bl	800ee94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e67e:	f001 fe43 	bl	8010308 <vPortEnterCritical>
 800e682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e684:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e688:	b25b      	sxtb	r3, r3
 800e68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e68e:	d103      	bne.n	800e698 <xQueueReceive+0x128>
 800e690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e692:	2200      	movs	r2, #0
 800e694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e69e:	b25b      	sxtb	r3, r3
 800e6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6a4:	d103      	bne.n	800e6ae <xQueueReceive+0x13e>
 800e6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6ae:	f001 fe5d 	bl	801036c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e6b2:	1d3a      	adds	r2, r7, #4
 800e6b4:	f107 0310 	add.w	r3, r7, #16
 800e6b8:	4611      	mov	r1, r2
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f000 fe8a 	bl	800f3d4 <xTaskCheckForTimeOut>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d123      	bne.n	800e70e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e6c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6c8:	f000 f916 	bl	800e8f8 <prvIsQueueEmpty>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d017      	beq.n	800e702 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d4:	3324      	adds	r3, #36	; 0x24
 800e6d6:	687a      	ldr	r2, [r7, #4]
 800e6d8:	4611      	mov	r1, r2
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f000 fdae 	bl	800f23c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e6e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6e2:	f000 f8b7 	bl	800e854 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e6e6:	f000 fbe3 	bl	800eeb0 <xTaskResumeAll>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d189      	bne.n	800e604 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e6f0:	4b0f      	ldr	r3, [pc, #60]	; (800e730 <xQueueReceive+0x1c0>)
 800e6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6f6:	601a      	str	r2, [r3, #0]
 800e6f8:	f3bf 8f4f 	dsb	sy
 800e6fc:	f3bf 8f6f 	isb	sy
 800e700:	e780      	b.n	800e604 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e704:	f000 f8a6 	bl	800e854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e708:	f000 fbd2 	bl	800eeb0 <xTaskResumeAll>
 800e70c:	e77a      	b.n	800e604 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e70e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e710:	f000 f8a0 	bl	800e854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e714:	f000 fbcc 	bl	800eeb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e71a:	f000 f8ed 	bl	800e8f8 <prvIsQueueEmpty>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	f43f af6f 	beq.w	800e604 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e726:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3730      	adds	r7, #48	; 0x30
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	e000ed04 	.word	0xe000ed04

0800e734 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b086      	sub	sp, #24
 800e738:	af00      	add	r7, sp, #0
 800e73a:	60f8      	str	r0, [r7, #12]
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e740:	2300      	movs	r3, #0
 800e742:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e748:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d10d      	bne.n	800e76e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d14d      	bne.n	800e7f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	689b      	ldr	r3, [r3, #8]
 800e75e:	4618      	mov	r0, r3
 800e760:	f000 ff9a 	bl	800f698 <xTaskPriorityDisinherit>
 800e764:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2200      	movs	r2, #0
 800e76a:	609a      	str	r2, [r3, #8]
 800e76c:	e043      	b.n	800e7f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d119      	bne.n	800e7a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	6858      	ldr	r0, [r3, #4]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e77c:	461a      	mov	r2, r3
 800e77e:	68b9      	ldr	r1, [r7, #8]
 800e780:	f002 f8ee 	bl	8010960 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	685a      	ldr	r2, [r3, #4]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e78c:	441a      	add	r2, r3
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	685a      	ldr	r2, [r3, #4]
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	689b      	ldr	r3, [r3, #8]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d32b      	bcc.n	800e7f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681a      	ldr	r2, [r3, #0]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	605a      	str	r2, [r3, #4]
 800e7a6:	e026      	b.n	800e7f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	68d8      	ldr	r0, [r3, #12]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	68b9      	ldr	r1, [r7, #8]
 800e7b4:	f002 f8d4 	bl	8010960 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	68da      	ldr	r2, [r3, #12]
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7c0:	425b      	negs	r3, r3
 800e7c2:	441a      	add	r2, r3
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	68da      	ldr	r2, [r3, #12]
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d207      	bcs.n	800e7e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	689a      	ldr	r2, [r3, #8]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7dc:	425b      	negs	r3, r3
 800e7de:	441a      	add	r2, r3
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2b02      	cmp	r3, #2
 800e7e8:	d105      	bne.n	800e7f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d002      	beq.n	800e7f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	3b01      	subs	r3, #1
 800e7f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	1c5a      	adds	r2, r3, #1
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e7fe:	697b      	ldr	r3, [r7, #20]
}
 800e800:	4618      	mov	r0, r3
 800e802:	3718      	adds	r7, #24
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e816:	2b00      	cmp	r3, #0
 800e818:	d018      	beq.n	800e84c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	68da      	ldr	r2, [r3, #12]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e822:	441a      	add	r2, r3
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	68da      	ldr	r2, [r3, #12]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	689b      	ldr	r3, [r3, #8]
 800e830:	429a      	cmp	r2, r3
 800e832:	d303      	bcc.n	800e83c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681a      	ldr	r2, [r3, #0]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	68d9      	ldr	r1, [r3, #12]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e844:	461a      	mov	r2, r3
 800e846:	6838      	ldr	r0, [r7, #0]
 800e848:	f002 f88a 	bl	8010960 <memcpy>
	}
}
 800e84c:	bf00      	nop
 800e84e:	3708      	adds	r7, #8
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b084      	sub	sp, #16
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e85c:	f001 fd54 	bl	8010308 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e866:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e868:	e011      	b.n	800e88e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d012      	beq.n	800e898 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	3324      	adds	r3, #36	; 0x24
 800e876:	4618      	mov	r0, r3
 800e878:	f000 fd32 	bl	800f2e0 <xTaskRemoveFromEventList>
 800e87c:	4603      	mov	r3, r0
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d001      	beq.n	800e886 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e882:	f000 fe0b 	bl	800f49c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e886:	7bfb      	ldrb	r3, [r7, #15]
 800e888:	3b01      	subs	r3, #1
 800e88a:	b2db      	uxtb	r3, r3
 800e88c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e88e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e892:	2b00      	cmp	r3, #0
 800e894:	dce9      	bgt.n	800e86a <prvUnlockQueue+0x16>
 800e896:	e000      	b.n	800e89a <prvUnlockQueue+0x46>
					break;
 800e898:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	22ff      	movs	r2, #255	; 0xff
 800e89e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e8a2:	f001 fd63 	bl	801036c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e8a6:	f001 fd2f 	bl	8010308 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e8b2:	e011      	b.n	800e8d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	691b      	ldr	r3, [r3, #16]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d012      	beq.n	800e8e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	3310      	adds	r3, #16
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f000 fd0d 	bl	800f2e0 <xTaskRemoveFromEventList>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d001      	beq.n	800e8d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e8cc:	f000 fde6 	bl	800f49c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e8d0:	7bbb      	ldrb	r3, [r7, #14]
 800e8d2:	3b01      	subs	r3, #1
 800e8d4:	b2db      	uxtb	r3, r3
 800e8d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e8d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	dce9      	bgt.n	800e8b4 <prvUnlockQueue+0x60>
 800e8e0:	e000      	b.n	800e8e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e8e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	22ff      	movs	r2, #255	; 0xff
 800e8e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e8ec:	f001 fd3e 	bl	801036c <vPortExitCritical>
}
 800e8f0:	bf00      	nop
 800e8f2:	3710      	adds	r7, #16
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e900:	f001 fd02 	bl	8010308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d102      	bne.n	800e912 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e90c:	2301      	movs	r3, #1
 800e90e:	60fb      	str	r3, [r7, #12]
 800e910:	e001      	b.n	800e916 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e912:	2300      	movs	r3, #0
 800e914:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e916:	f001 fd29 	bl	801036c <vPortExitCritical>

	return xReturn;
 800e91a:	68fb      	ldr	r3, [r7, #12]
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3710      	adds	r7, #16
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e92c:	f001 fcec 	bl	8010308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e938:	429a      	cmp	r2, r3
 800e93a:	d102      	bne.n	800e942 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e93c:	2301      	movs	r3, #1
 800e93e:	60fb      	str	r3, [r7, #12]
 800e940:	e001      	b.n	800e946 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e942:	2300      	movs	r3, #0
 800e944:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e946:	f001 fd11 	bl	801036c <vPortExitCritical>

	return xReturn;
 800e94a:	68fb      	ldr	r3, [r7, #12]
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3710      	adds	r7, #16
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e954:	b480      	push	{r7}
 800e956:	b085      	sub	sp, #20
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e95e:	2300      	movs	r3, #0
 800e960:	60fb      	str	r3, [r7, #12]
 800e962:	e014      	b.n	800e98e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e964:	4a0e      	ldr	r2, [pc, #56]	; (800e9a0 <vQueueAddToRegistry+0x4c>)
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d10b      	bne.n	800e988 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e970:	490b      	ldr	r1, [pc, #44]	; (800e9a0 <vQueueAddToRegistry+0x4c>)
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	683a      	ldr	r2, [r7, #0]
 800e976:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e97a:	4a09      	ldr	r2, [pc, #36]	; (800e9a0 <vQueueAddToRegistry+0x4c>)
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	00db      	lsls	r3, r3, #3
 800e980:	4413      	add	r3, r2
 800e982:	687a      	ldr	r2, [r7, #4]
 800e984:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e986:	e005      	b.n	800e994 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	3301      	adds	r3, #1
 800e98c:	60fb      	str	r3, [r7, #12]
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2b07      	cmp	r3, #7
 800e992:	d9e7      	bls.n	800e964 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e994:	bf00      	nop
 800e996:	3714      	adds	r7, #20
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr
 800e9a0:	20024114 	.word	0x20024114

0800e9a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b086      	sub	sp, #24
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e9b4:	f001 fca8 	bl	8010308 <vPortEnterCritical>
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e9be:	b25b      	sxtb	r3, r3
 800e9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c4:	d103      	bne.n	800e9ce <vQueueWaitForMessageRestricted+0x2a>
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9d4:	b25b      	sxtb	r3, r3
 800e9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9da:	d103      	bne.n	800e9e4 <vQueueWaitForMessageRestricted+0x40>
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e9e4:	f001 fcc2 	bl	801036c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d106      	bne.n	800e9fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	3324      	adds	r3, #36	; 0x24
 800e9f4:	687a      	ldr	r2, [r7, #4]
 800e9f6:	68b9      	ldr	r1, [r7, #8]
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f000 fc45 	bl	800f288 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e9fe:	6978      	ldr	r0, [r7, #20]
 800ea00:	f7ff ff28 	bl	800e854 <prvUnlockQueue>
	}
 800ea04:	bf00      	nop
 800ea06:	3718      	adds	r7, #24
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}

0800ea0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b08e      	sub	sp, #56	; 0x38
 800ea10:	af04      	add	r7, sp, #16
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]
 800ea18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ea1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d10b      	bne.n	800ea38 <xTaskCreateStatic+0x2c>
 800ea20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea24:	b672      	cpsid	i
 800ea26:	f383 8811 	msr	BASEPRI, r3
 800ea2a:	f3bf 8f6f 	isb	sy
 800ea2e:	f3bf 8f4f 	dsb	sy
 800ea32:	b662      	cpsie	i
 800ea34:	623b      	str	r3, [r7, #32]
 800ea36:	e7fe      	b.n	800ea36 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800ea38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d10b      	bne.n	800ea56 <xTaskCreateStatic+0x4a>
 800ea3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea42:	b672      	cpsid	i
 800ea44:	f383 8811 	msr	BASEPRI, r3
 800ea48:	f3bf 8f6f 	isb	sy
 800ea4c:	f3bf 8f4f 	dsb	sy
 800ea50:	b662      	cpsie	i
 800ea52:	61fb      	str	r3, [r7, #28]
 800ea54:	e7fe      	b.n	800ea54 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ea56:	235c      	movs	r3, #92	; 0x5c
 800ea58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	2b5c      	cmp	r3, #92	; 0x5c
 800ea5e:	d00b      	beq.n	800ea78 <xTaskCreateStatic+0x6c>
 800ea60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea64:	b672      	cpsid	i
 800ea66:	f383 8811 	msr	BASEPRI, r3
 800ea6a:	f3bf 8f6f 	isb	sy
 800ea6e:	f3bf 8f4f 	dsb	sy
 800ea72:	b662      	cpsie	i
 800ea74:	61bb      	str	r3, [r7, #24]
 800ea76:	e7fe      	b.n	800ea76 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ea78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ea7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d01e      	beq.n	800eabe <xTaskCreateStatic+0xb2>
 800ea80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d01b      	beq.n	800eabe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ea86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea88:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ea8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea8e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ea90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea92:	2202      	movs	r2, #2
 800ea94:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ea98:	2300      	movs	r3, #0
 800ea9a:	9303      	str	r3, [sp, #12]
 800ea9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9e:	9302      	str	r3, [sp, #8]
 800eaa0:	f107 0314 	add.w	r3, r7, #20
 800eaa4:	9301      	str	r3, [sp, #4]
 800eaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	68b9      	ldr	r1, [r7, #8]
 800eab0:	68f8      	ldr	r0, [r7, #12]
 800eab2:	f000 f850 	bl	800eb56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eab6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eab8:	f000 f8de 	bl	800ec78 <prvAddNewTaskToReadyList>
 800eabc:	e001      	b.n	800eac2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800eabe:	2300      	movs	r3, #0
 800eac0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800eac2:	697b      	ldr	r3, [r7, #20]
	}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3728      	adds	r7, #40	; 0x28
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b08c      	sub	sp, #48	; 0x30
 800ead0:	af04      	add	r7, sp, #16
 800ead2:	60f8      	str	r0, [r7, #12]
 800ead4:	60b9      	str	r1, [r7, #8]
 800ead6:	603b      	str	r3, [r7, #0]
 800ead8:	4613      	mov	r3, r2
 800eada:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eadc:	88fb      	ldrh	r3, [r7, #6]
 800eade:	009b      	lsls	r3, r3, #2
 800eae0:	4618      	mov	r0, r3
 800eae2:	f001 fd33 	bl	801054c <pvPortMalloc>
 800eae6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00e      	beq.n	800eb0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eaee:	205c      	movs	r0, #92	; 0x5c
 800eaf0:	f001 fd2c 	bl	801054c <pvPortMalloc>
 800eaf4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eaf6:	69fb      	ldr	r3, [r7, #28]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d003      	beq.n	800eb04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eafc:	69fb      	ldr	r3, [r7, #28]
 800eafe:	697a      	ldr	r2, [r7, #20]
 800eb00:	631a      	str	r2, [r3, #48]	; 0x30
 800eb02:	e005      	b.n	800eb10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eb04:	6978      	ldr	r0, [r7, #20]
 800eb06:	f001 fde9 	bl	80106dc <vPortFree>
 800eb0a:	e001      	b.n	800eb10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eb10:	69fb      	ldr	r3, [r7, #28]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d017      	beq.n	800eb46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eb16:	69fb      	ldr	r3, [r7, #28]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eb1e:	88fa      	ldrh	r2, [r7, #6]
 800eb20:	2300      	movs	r3, #0
 800eb22:	9303      	str	r3, [sp, #12]
 800eb24:	69fb      	ldr	r3, [r7, #28]
 800eb26:	9302      	str	r3, [sp, #8]
 800eb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb2a:	9301      	str	r3, [sp, #4]
 800eb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2e:	9300      	str	r3, [sp, #0]
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	68b9      	ldr	r1, [r7, #8]
 800eb34:	68f8      	ldr	r0, [r7, #12]
 800eb36:	f000 f80e 	bl	800eb56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb3a:	69f8      	ldr	r0, [r7, #28]
 800eb3c:	f000 f89c 	bl	800ec78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eb40:	2301      	movs	r3, #1
 800eb42:	61bb      	str	r3, [r7, #24]
 800eb44:	e002      	b.n	800eb4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eb46:	f04f 33ff 	mov.w	r3, #4294967295
 800eb4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eb4c:	69bb      	ldr	r3, [r7, #24]
	}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3720      	adds	r7, #32
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}

0800eb56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eb56:	b580      	push	{r7, lr}
 800eb58:	b088      	sub	sp, #32
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	60f8      	str	r0, [r7, #12]
 800eb5e:	60b9      	str	r1, [r7, #8]
 800eb60:	607a      	str	r2, [r7, #4]
 800eb62:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800eb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	009b      	lsls	r3, r3, #2
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	21a5      	movs	r1, #165	; 0xa5
 800eb70:	f001 ff01 	bl	8010976 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb78:	6879      	ldr	r1, [r7, #4]
 800eb7a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800eb7e:	440b      	add	r3, r1
 800eb80:	009b      	lsls	r3, r3, #2
 800eb82:	4413      	add	r3, r2
 800eb84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eb86:	69bb      	ldr	r3, [r7, #24]
 800eb88:	f023 0307 	bic.w	r3, r3, #7
 800eb8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eb8e:	69bb      	ldr	r3, [r7, #24]
 800eb90:	f003 0307 	and.w	r3, r3, #7
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d00b      	beq.n	800ebb0 <prvInitialiseNewTask+0x5a>
 800eb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb9c:	b672      	cpsid	i
 800eb9e:	f383 8811 	msr	BASEPRI, r3
 800eba2:	f3bf 8f6f 	isb	sy
 800eba6:	f3bf 8f4f 	dsb	sy
 800ebaa:	b662      	cpsie	i
 800ebac:	617b      	str	r3, [r7, #20]
 800ebae:	e7fe      	b.n	800ebae <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d01f      	beq.n	800ebf6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	61fb      	str	r3, [r7, #28]
 800ebba:	e012      	b.n	800ebe2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ebbc:	68ba      	ldr	r2, [r7, #8]
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	4413      	add	r3, r2
 800ebc2:	7819      	ldrb	r1, [r3, #0]
 800ebc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebc6:	69fb      	ldr	r3, [r7, #28]
 800ebc8:	4413      	add	r3, r2
 800ebca:	3334      	adds	r3, #52	; 0x34
 800ebcc:	460a      	mov	r2, r1
 800ebce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ebd0:	68ba      	ldr	r2, [r7, #8]
 800ebd2:	69fb      	ldr	r3, [r7, #28]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d006      	beq.n	800ebea <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	3301      	adds	r3, #1
 800ebe0:	61fb      	str	r3, [r7, #28]
 800ebe2:	69fb      	ldr	r3, [r7, #28]
 800ebe4:	2b0f      	cmp	r3, #15
 800ebe6:	d9e9      	bls.n	800ebbc <prvInitialiseNewTask+0x66>
 800ebe8:	e000      	b.n	800ebec <prvInitialiseNewTask+0x96>
			{
				break;
 800ebea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ebec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebee:	2200      	movs	r2, #0
 800ebf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ebf4:	e003      	b.n	800ebfe <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ebf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ebfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec00:	2b37      	cmp	r3, #55	; 0x37
 800ec02:	d901      	bls.n	800ec08 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ec04:	2337      	movs	r3, #55	; 0x37
 800ec06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ec08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ec0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ec14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec16:	2200      	movs	r2, #0
 800ec18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ec1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1c:	3304      	adds	r3, #4
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7ff f96a 	bl	800def8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ec24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec26:	3318      	adds	r3, #24
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7ff f965 	bl	800def8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ec2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ec3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ec3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ec44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec46:	2200      	movs	r2, #0
 800ec48:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ec4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ec52:	683a      	ldr	r2, [r7, #0]
 800ec54:	68f9      	ldr	r1, [r7, #12]
 800ec56:	69b8      	ldr	r0, [r7, #24]
 800ec58:	f001 fa4a 	bl	80100f0 <pxPortInitialiseStack>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ec62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d002      	beq.n	800ec6e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ec68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec6e:	bf00      	nop
 800ec70:	3720      	adds	r7, #32
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
	...

0800ec78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ec80:	f001 fb42 	bl	8010308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ec84:	4b2d      	ldr	r3, [pc, #180]	; (800ed3c <prvAddNewTaskToReadyList+0xc4>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	3301      	adds	r3, #1
 800ec8a:	4a2c      	ldr	r2, [pc, #176]	; (800ed3c <prvAddNewTaskToReadyList+0xc4>)
 800ec8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ec8e:	4b2c      	ldr	r3, [pc, #176]	; (800ed40 <prvAddNewTaskToReadyList+0xc8>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d109      	bne.n	800ecaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ec96:	4a2a      	ldr	r2, [pc, #168]	; (800ed40 <prvAddNewTaskToReadyList+0xc8>)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ec9c:	4b27      	ldr	r3, [pc, #156]	; (800ed3c <prvAddNewTaskToReadyList+0xc4>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	2b01      	cmp	r3, #1
 800eca2:	d110      	bne.n	800ecc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eca4:	f000 fc1e 	bl	800f4e4 <prvInitialiseTaskLists>
 800eca8:	e00d      	b.n	800ecc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ecaa:	4b26      	ldr	r3, [pc, #152]	; (800ed44 <prvAddNewTaskToReadyList+0xcc>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d109      	bne.n	800ecc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ecb2:	4b23      	ldr	r3, [pc, #140]	; (800ed40 <prvAddNewTaskToReadyList+0xc8>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d802      	bhi.n	800ecc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ecc0:	4a1f      	ldr	r2, [pc, #124]	; (800ed40 <prvAddNewTaskToReadyList+0xc8>)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ecc6:	4b20      	ldr	r3, [pc, #128]	; (800ed48 <prvAddNewTaskToReadyList+0xd0>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	3301      	adds	r3, #1
 800eccc:	4a1e      	ldr	r2, [pc, #120]	; (800ed48 <prvAddNewTaskToReadyList+0xd0>)
 800ecce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ecd0:	4b1d      	ldr	r3, [pc, #116]	; (800ed48 <prvAddNewTaskToReadyList+0xd0>)
 800ecd2:	681a      	ldr	r2, [r3, #0]
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecdc:	4b1b      	ldr	r3, [pc, #108]	; (800ed4c <prvAddNewTaskToReadyList+0xd4>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d903      	bls.n	800ecec <prvAddNewTaskToReadyList+0x74>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ece8:	4a18      	ldr	r2, [pc, #96]	; (800ed4c <prvAddNewTaskToReadyList+0xd4>)
 800ecea:	6013      	str	r3, [r2, #0]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	009b      	lsls	r3, r3, #2
 800ecf4:	4413      	add	r3, r2
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	4a15      	ldr	r2, [pc, #84]	; (800ed50 <prvAddNewTaskToReadyList+0xd8>)
 800ecfa:	441a      	add	r2, r3
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	3304      	adds	r3, #4
 800ed00:	4619      	mov	r1, r3
 800ed02:	4610      	mov	r0, r2
 800ed04:	f7ff f905 	bl	800df12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ed08:	f001 fb30 	bl	801036c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ed0c:	4b0d      	ldr	r3, [pc, #52]	; (800ed44 <prvAddNewTaskToReadyList+0xcc>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d00e      	beq.n	800ed32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ed14:	4b0a      	ldr	r3, [pc, #40]	; (800ed40 <prvAddNewTaskToReadyList+0xc8>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d207      	bcs.n	800ed32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ed22:	4b0c      	ldr	r3, [pc, #48]	; (800ed54 <prvAddNewTaskToReadyList+0xdc>)
 800ed24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed28:	601a      	str	r2, [r3, #0]
 800ed2a:	f3bf 8f4f 	dsb	sy
 800ed2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed32:	bf00      	nop
 800ed34:	3708      	adds	r7, #8
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	20003e68 	.word	0x20003e68
 800ed40:	20003994 	.word	0x20003994
 800ed44:	20003e74 	.word	0x20003e74
 800ed48:	20003e84 	.word	0x20003e84
 800ed4c:	20003e70 	.word	0x20003e70
 800ed50:	20003998 	.word	0x20003998
 800ed54:	e000ed04 	.word	0xe000ed04

0800ed58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ed60:	2300      	movs	r3, #0
 800ed62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d018      	beq.n	800ed9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ed6a:	4b14      	ldr	r3, [pc, #80]	; (800edbc <vTaskDelay+0x64>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d00b      	beq.n	800ed8a <vTaskDelay+0x32>
 800ed72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed76:	b672      	cpsid	i
 800ed78:	f383 8811 	msr	BASEPRI, r3
 800ed7c:	f3bf 8f6f 	isb	sy
 800ed80:	f3bf 8f4f 	dsb	sy
 800ed84:	b662      	cpsie	i
 800ed86:	60bb      	str	r3, [r7, #8]
 800ed88:	e7fe      	b.n	800ed88 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800ed8a:	f000 f883 	bl	800ee94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ed8e:	2100      	movs	r1, #0
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f000 fe05 	bl	800f9a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ed96:	f000 f88b 	bl	800eeb0 <xTaskResumeAll>
 800ed9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d107      	bne.n	800edb2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800eda2:	4b07      	ldr	r3, [pc, #28]	; (800edc0 <vTaskDelay+0x68>)
 800eda4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eda8:	601a      	str	r2, [r3, #0]
 800edaa:	f3bf 8f4f 	dsb	sy
 800edae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800edb2:	bf00      	nop
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}
 800edba:	bf00      	nop
 800edbc:	20003e90 	.word	0x20003e90
 800edc0:	e000ed04 	.word	0xe000ed04

0800edc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b08a      	sub	sp, #40	; 0x28
 800edc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800edca:	2300      	movs	r3, #0
 800edcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800edce:	2300      	movs	r3, #0
 800edd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800edd2:	463a      	mov	r2, r7
 800edd4:	1d39      	adds	r1, r7, #4
 800edd6:	f107 0308 	add.w	r3, r7, #8
 800edda:	4618      	mov	r0, r3
 800eddc:	f7ff f838 	bl	800de50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ede0:	6839      	ldr	r1, [r7, #0]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	68ba      	ldr	r2, [r7, #8]
 800ede6:	9202      	str	r2, [sp, #8]
 800ede8:	9301      	str	r3, [sp, #4]
 800edea:	2300      	movs	r3, #0
 800edec:	9300      	str	r3, [sp, #0]
 800edee:	2300      	movs	r3, #0
 800edf0:	460a      	mov	r2, r1
 800edf2:	4922      	ldr	r1, [pc, #136]	; (800ee7c <vTaskStartScheduler+0xb8>)
 800edf4:	4822      	ldr	r0, [pc, #136]	; (800ee80 <vTaskStartScheduler+0xbc>)
 800edf6:	f7ff fe09 	bl	800ea0c <xTaskCreateStatic>
 800edfa:	4602      	mov	r2, r0
 800edfc:	4b21      	ldr	r3, [pc, #132]	; (800ee84 <vTaskStartScheduler+0xc0>)
 800edfe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ee00:	4b20      	ldr	r3, [pc, #128]	; (800ee84 <vTaskStartScheduler+0xc0>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d002      	beq.n	800ee0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ee08:	2301      	movs	r3, #1
 800ee0a:	617b      	str	r3, [r7, #20]
 800ee0c:	e001      	b.n	800ee12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d102      	bne.n	800ee1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ee18:	f000 fe16 	bl	800fa48 <xTimerCreateTimerTask>
 800ee1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d117      	bne.n	800ee54 <vTaskStartScheduler+0x90>
 800ee24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee28:	b672      	cpsid	i
 800ee2a:	f383 8811 	msr	BASEPRI, r3
 800ee2e:	f3bf 8f6f 	isb	sy
 800ee32:	f3bf 8f4f 	dsb	sy
 800ee36:	b662      	cpsie	i
 800ee38:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ee3a:	4b13      	ldr	r3, [pc, #76]	; (800ee88 <vTaskStartScheduler+0xc4>)
 800ee3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ee40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ee42:	4b12      	ldr	r3, [pc, #72]	; (800ee8c <vTaskStartScheduler+0xc8>)
 800ee44:	2201      	movs	r2, #1
 800ee46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ee48:	4b11      	ldr	r3, [pc, #68]	; (800ee90 <vTaskStartScheduler+0xcc>)
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ee4e:	f001 f9df 	bl	8010210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ee52:	e00f      	b.n	800ee74 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee5a:	d10b      	bne.n	800ee74 <vTaskStartScheduler+0xb0>
 800ee5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee60:	b672      	cpsid	i
 800ee62:	f383 8811 	msr	BASEPRI, r3
 800ee66:	f3bf 8f6f 	isb	sy
 800ee6a:	f3bf 8f4f 	dsb	sy
 800ee6e:	b662      	cpsie	i
 800ee70:	60fb      	str	r3, [r7, #12]
 800ee72:	e7fe      	b.n	800ee72 <vTaskStartScheduler+0xae>
}
 800ee74:	bf00      	nop
 800ee76:	3718      	adds	r7, #24
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	080151b4 	.word	0x080151b4
 800ee80:	0800f4b5 	.word	0x0800f4b5
 800ee84:	20003e8c 	.word	0x20003e8c
 800ee88:	20003e88 	.word	0x20003e88
 800ee8c:	20003e74 	.word	0x20003e74
 800ee90:	20003e6c 	.word	0x20003e6c

0800ee94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ee94:	b480      	push	{r7}
 800ee96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ee98:	4b04      	ldr	r3, [pc, #16]	; (800eeac <vTaskSuspendAll+0x18>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	4a03      	ldr	r2, [pc, #12]	; (800eeac <vTaskSuspendAll+0x18>)
 800eea0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800eea2:	bf00      	nop
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr
 800eeac:	20003e90 	.word	0x20003e90

0800eeb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b084      	sub	sp, #16
 800eeb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800eeba:	2300      	movs	r3, #0
 800eebc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800eebe:	4b42      	ldr	r3, [pc, #264]	; (800efc8 <xTaskResumeAll+0x118>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d10b      	bne.n	800eede <xTaskResumeAll+0x2e>
 800eec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeca:	b672      	cpsid	i
 800eecc:	f383 8811 	msr	BASEPRI, r3
 800eed0:	f3bf 8f6f 	isb	sy
 800eed4:	f3bf 8f4f 	dsb	sy
 800eed8:	b662      	cpsie	i
 800eeda:	603b      	str	r3, [r7, #0]
 800eedc:	e7fe      	b.n	800eedc <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800eede:	f001 fa13 	bl	8010308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800eee2:	4b39      	ldr	r3, [pc, #228]	; (800efc8 <xTaskResumeAll+0x118>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	3b01      	subs	r3, #1
 800eee8:	4a37      	ldr	r2, [pc, #220]	; (800efc8 <xTaskResumeAll+0x118>)
 800eeea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eeec:	4b36      	ldr	r3, [pc, #216]	; (800efc8 <xTaskResumeAll+0x118>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d162      	bne.n	800efba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eef4:	4b35      	ldr	r3, [pc, #212]	; (800efcc <xTaskResumeAll+0x11c>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d05e      	beq.n	800efba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eefc:	e02f      	b.n	800ef5e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eefe:	4b34      	ldr	r3, [pc, #208]	; (800efd0 <xTaskResumeAll+0x120>)
 800ef00:	68db      	ldr	r3, [r3, #12]
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	3318      	adds	r3, #24
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7ff f85e 	bl	800dfcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	3304      	adds	r3, #4
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7ff f859 	bl	800dfcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef1e:	4b2d      	ldr	r3, [pc, #180]	; (800efd4 <xTaskResumeAll+0x124>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d903      	bls.n	800ef2e <xTaskResumeAll+0x7e>
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef2a:	4a2a      	ldr	r2, [pc, #168]	; (800efd4 <xTaskResumeAll+0x124>)
 800ef2c:	6013      	str	r3, [r2, #0]
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef32:	4613      	mov	r3, r2
 800ef34:	009b      	lsls	r3, r3, #2
 800ef36:	4413      	add	r3, r2
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	4a27      	ldr	r2, [pc, #156]	; (800efd8 <xTaskResumeAll+0x128>)
 800ef3c:	441a      	add	r2, r3
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	3304      	adds	r3, #4
 800ef42:	4619      	mov	r1, r3
 800ef44:	4610      	mov	r0, r2
 800ef46:	f7fe ffe4 	bl	800df12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef4e:	4b23      	ldr	r3, [pc, #140]	; (800efdc <xTaskResumeAll+0x12c>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d302      	bcc.n	800ef5e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ef58:	4b21      	ldr	r3, [pc, #132]	; (800efe0 <xTaskResumeAll+0x130>)
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef5e:	4b1c      	ldr	r3, [pc, #112]	; (800efd0 <xTaskResumeAll+0x120>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d1cb      	bne.n	800eefe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d001      	beq.n	800ef70 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ef6c:	f000 fb56 	bl	800f61c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ef70:	4b1c      	ldr	r3, [pc, #112]	; (800efe4 <xTaskResumeAll+0x134>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d010      	beq.n	800ef9e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ef7c:	f000 f846 	bl	800f00c <xTaskIncrementTick>
 800ef80:	4603      	mov	r3, r0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d002      	beq.n	800ef8c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ef86:	4b16      	ldr	r3, [pc, #88]	; (800efe0 <xTaskResumeAll+0x130>)
 800ef88:	2201      	movs	r2, #1
 800ef8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	3b01      	subs	r3, #1
 800ef90:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d1f1      	bne.n	800ef7c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800ef98:	4b12      	ldr	r3, [pc, #72]	; (800efe4 <xTaskResumeAll+0x134>)
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ef9e:	4b10      	ldr	r3, [pc, #64]	; (800efe0 <xTaskResumeAll+0x130>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d009      	beq.n	800efba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800efa6:	2301      	movs	r3, #1
 800efa8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800efaa:	4b0f      	ldr	r3, [pc, #60]	; (800efe8 <xTaskResumeAll+0x138>)
 800efac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efb0:	601a      	str	r2, [r3, #0]
 800efb2:	f3bf 8f4f 	dsb	sy
 800efb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800efba:	f001 f9d7 	bl	801036c <vPortExitCritical>

	return xAlreadyYielded;
 800efbe:	68bb      	ldr	r3, [r7, #8]
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	3710      	adds	r7, #16
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}
 800efc8:	20003e90 	.word	0x20003e90
 800efcc:	20003e68 	.word	0x20003e68
 800efd0:	20003e28 	.word	0x20003e28
 800efd4:	20003e70 	.word	0x20003e70
 800efd8:	20003998 	.word	0x20003998
 800efdc:	20003994 	.word	0x20003994
 800efe0:	20003e7c 	.word	0x20003e7c
 800efe4:	20003e78 	.word	0x20003e78
 800efe8:	e000ed04 	.word	0xe000ed04

0800efec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800efec:	b480      	push	{r7}
 800efee:	b083      	sub	sp, #12
 800eff0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800eff2:	4b05      	ldr	r3, [pc, #20]	; (800f008 <xTaskGetTickCount+0x1c>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800eff8:	687b      	ldr	r3, [r7, #4]
}
 800effa:	4618      	mov	r0, r3
 800effc:	370c      	adds	r7, #12
 800effe:	46bd      	mov	sp, r7
 800f000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f004:	4770      	bx	lr
 800f006:	bf00      	nop
 800f008:	20003e6c 	.word	0x20003e6c

0800f00c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b086      	sub	sp, #24
 800f010:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f012:	2300      	movs	r3, #0
 800f014:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f016:	4b4f      	ldr	r3, [pc, #316]	; (800f154 <xTaskIncrementTick+0x148>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	f040 808a 	bne.w	800f134 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f020:	4b4d      	ldr	r3, [pc, #308]	; (800f158 <xTaskIncrementTick+0x14c>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	3301      	adds	r3, #1
 800f026:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f028:	4a4b      	ldr	r2, [pc, #300]	; (800f158 <xTaskIncrementTick+0x14c>)
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d121      	bne.n	800f078 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f034:	4b49      	ldr	r3, [pc, #292]	; (800f15c <xTaskIncrementTick+0x150>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d00b      	beq.n	800f056 <xTaskIncrementTick+0x4a>
 800f03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f042:	b672      	cpsid	i
 800f044:	f383 8811 	msr	BASEPRI, r3
 800f048:	f3bf 8f6f 	isb	sy
 800f04c:	f3bf 8f4f 	dsb	sy
 800f050:	b662      	cpsie	i
 800f052:	603b      	str	r3, [r7, #0]
 800f054:	e7fe      	b.n	800f054 <xTaskIncrementTick+0x48>
 800f056:	4b41      	ldr	r3, [pc, #260]	; (800f15c <xTaskIncrementTick+0x150>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	60fb      	str	r3, [r7, #12]
 800f05c:	4b40      	ldr	r3, [pc, #256]	; (800f160 <xTaskIncrementTick+0x154>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	4a3e      	ldr	r2, [pc, #248]	; (800f15c <xTaskIncrementTick+0x150>)
 800f062:	6013      	str	r3, [r2, #0]
 800f064:	4a3e      	ldr	r2, [pc, #248]	; (800f160 <xTaskIncrementTick+0x154>)
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	6013      	str	r3, [r2, #0]
 800f06a:	4b3e      	ldr	r3, [pc, #248]	; (800f164 <xTaskIncrementTick+0x158>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	3301      	adds	r3, #1
 800f070:	4a3c      	ldr	r2, [pc, #240]	; (800f164 <xTaskIncrementTick+0x158>)
 800f072:	6013      	str	r3, [r2, #0]
 800f074:	f000 fad2 	bl	800f61c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f078:	4b3b      	ldr	r3, [pc, #236]	; (800f168 <xTaskIncrementTick+0x15c>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	693a      	ldr	r2, [r7, #16]
 800f07e:	429a      	cmp	r2, r3
 800f080:	d349      	bcc.n	800f116 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f082:	4b36      	ldr	r3, [pc, #216]	; (800f15c <xTaskIncrementTick+0x150>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d104      	bne.n	800f096 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f08c:	4b36      	ldr	r3, [pc, #216]	; (800f168 <xTaskIncrementTick+0x15c>)
 800f08e:	f04f 32ff 	mov.w	r2, #4294967295
 800f092:	601a      	str	r2, [r3, #0]
					break;
 800f094:	e03f      	b.n	800f116 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f096:	4b31      	ldr	r3, [pc, #196]	; (800f15c <xTaskIncrementTick+0x150>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	68db      	ldr	r3, [r3, #12]
 800f09e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f0a6:	693a      	ldr	r2, [r7, #16]
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d203      	bcs.n	800f0b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f0ae:	4a2e      	ldr	r2, [pc, #184]	; (800f168 <xTaskIncrementTick+0x15c>)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f0b4:	e02f      	b.n	800f116 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	3304      	adds	r3, #4
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7fe ff86 	bl	800dfcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d004      	beq.n	800f0d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	3318      	adds	r3, #24
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7fe ff7d 	bl	800dfcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0d6:	4b25      	ldr	r3, [pc, #148]	; (800f16c <xTaskIncrementTick+0x160>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d903      	bls.n	800f0e6 <xTaskIncrementTick+0xda>
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0e2:	4a22      	ldr	r2, [pc, #136]	; (800f16c <xTaskIncrementTick+0x160>)
 800f0e4:	6013      	str	r3, [r2, #0]
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ea:	4613      	mov	r3, r2
 800f0ec:	009b      	lsls	r3, r3, #2
 800f0ee:	4413      	add	r3, r2
 800f0f0:	009b      	lsls	r3, r3, #2
 800f0f2:	4a1f      	ldr	r2, [pc, #124]	; (800f170 <xTaskIncrementTick+0x164>)
 800f0f4:	441a      	add	r2, r3
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	3304      	adds	r3, #4
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	4610      	mov	r0, r2
 800f0fe:	f7fe ff08 	bl	800df12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f106:	4b1b      	ldr	r3, [pc, #108]	; (800f174 <xTaskIncrementTick+0x168>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d3b8      	bcc.n	800f082 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f110:	2301      	movs	r3, #1
 800f112:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f114:	e7b5      	b.n	800f082 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f116:	4b17      	ldr	r3, [pc, #92]	; (800f174 <xTaskIncrementTick+0x168>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f11c:	4914      	ldr	r1, [pc, #80]	; (800f170 <xTaskIncrementTick+0x164>)
 800f11e:	4613      	mov	r3, r2
 800f120:	009b      	lsls	r3, r3, #2
 800f122:	4413      	add	r3, r2
 800f124:	009b      	lsls	r3, r3, #2
 800f126:	440b      	add	r3, r1
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d907      	bls.n	800f13e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800f12e:	2301      	movs	r3, #1
 800f130:	617b      	str	r3, [r7, #20]
 800f132:	e004      	b.n	800f13e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f134:	4b10      	ldr	r3, [pc, #64]	; (800f178 <xTaskIncrementTick+0x16c>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	3301      	adds	r3, #1
 800f13a:	4a0f      	ldr	r2, [pc, #60]	; (800f178 <xTaskIncrementTick+0x16c>)
 800f13c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f13e:	4b0f      	ldr	r3, [pc, #60]	; (800f17c <xTaskIncrementTick+0x170>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d001      	beq.n	800f14a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800f146:	2301      	movs	r3, #1
 800f148:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f14a:	697b      	ldr	r3, [r7, #20]
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3718      	adds	r7, #24
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}
 800f154:	20003e90 	.word	0x20003e90
 800f158:	20003e6c 	.word	0x20003e6c
 800f15c:	20003e20 	.word	0x20003e20
 800f160:	20003e24 	.word	0x20003e24
 800f164:	20003e80 	.word	0x20003e80
 800f168:	20003e88 	.word	0x20003e88
 800f16c:	20003e70 	.word	0x20003e70
 800f170:	20003998 	.word	0x20003998
 800f174:	20003994 	.word	0x20003994
 800f178:	20003e78 	.word	0x20003e78
 800f17c:	20003e7c 	.word	0x20003e7c

0800f180 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f180:	b480      	push	{r7}
 800f182:	b085      	sub	sp, #20
 800f184:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f186:	4b28      	ldr	r3, [pc, #160]	; (800f228 <vTaskSwitchContext+0xa8>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d003      	beq.n	800f196 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f18e:	4b27      	ldr	r3, [pc, #156]	; (800f22c <vTaskSwitchContext+0xac>)
 800f190:	2201      	movs	r2, #1
 800f192:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f194:	e042      	b.n	800f21c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800f196:	4b25      	ldr	r3, [pc, #148]	; (800f22c <vTaskSwitchContext+0xac>)
 800f198:	2200      	movs	r2, #0
 800f19a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f19c:	4b24      	ldr	r3, [pc, #144]	; (800f230 <vTaskSwitchContext+0xb0>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	60fb      	str	r3, [r7, #12]
 800f1a2:	e011      	b.n	800f1c8 <vTaskSwitchContext+0x48>
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d10b      	bne.n	800f1c2 <vTaskSwitchContext+0x42>
 800f1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ae:	b672      	cpsid	i
 800f1b0:	f383 8811 	msr	BASEPRI, r3
 800f1b4:	f3bf 8f6f 	isb	sy
 800f1b8:	f3bf 8f4f 	dsb	sy
 800f1bc:	b662      	cpsie	i
 800f1be:	607b      	str	r3, [r7, #4]
 800f1c0:	e7fe      	b.n	800f1c0 <vTaskSwitchContext+0x40>
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	3b01      	subs	r3, #1
 800f1c6:	60fb      	str	r3, [r7, #12]
 800f1c8:	491a      	ldr	r1, [pc, #104]	; (800f234 <vTaskSwitchContext+0xb4>)
 800f1ca:	68fa      	ldr	r2, [r7, #12]
 800f1cc:	4613      	mov	r3, r2
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	4413      	add	r3, r2
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	440b      	add	r3, r1
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d0e3      	beq.n	800f1a4 <vTaskSwitchContext+0x24>
 800f1dc:	68fa      	ldr	r2, [r7, #12]
 800f1de:	4613      	mov	r3, r2
 800f1e0:	009b      	lsls	r3, r3, #2
 800f1e2:	4413      	add	r3, r2
 800f1e4:	009b      	lsls	r3, r3, #2
 800f1e6:	4a13      	ldr	r2, [pc, #76]	; (800f234 <vTaskSwitchContext+0xb4>)
 800f1e8:	4413      	add	r3, r2
 800f1ea:	60bb      	str	r3, [r7, #8]
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	685b      	ldr	r3, [r3, #4]
 800f1f0:	685a      	ldr	r2, [r3, #4]
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	605a      	str	r2, [r3, #4]
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	685a      	ldr	r2, [r3, #4]
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	3308      	adds	r3, #8
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d104      	bne.n	800f20c <vTaskSwitchContext+0x8c>
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	685b      	ldr	r3, [r3, #4]
 800f206:	685a      	ldr	r2, [r3, #4]
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	605a      	str	r2, [r3, #4]
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	68db      	ldr	r3, [r3, #12]
 800f212:	4a09      	ldr	r2, [pc, #36]	; (800f238 <vTaskSwitchContext+0xb8>)
 800f214:	6013      	str	r3, [r2, #0]
 800f216:	4a06      	ldr	r2, [pc, #24]	; (800f230 <vTaskSwitchContext+0xb0>)
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6013      	str	r3, [r2, #0]
}
 800f21c:	bf00      	nop
 800f21e:	3714      	adds	r7, #20
 800f220:	46bd      	mov	sp, r7
 800f222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f226:	4770      	bx	lr
 800f228:	20003e90 	.word	0x20003e90
 800f22c:	20003e7c 	.word	0x20003e7c
 800f230:	20003e70 	.word	0x20003e70
 800f234:	20003998 	.word	0x20003998
 800f238:	20003994 	.word	0x20003994

0800f23c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d10b      	bne.n	800f264 <vTaskPlaceOnEventList+0x28>
 800f24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f250:	b672      	cpsid	i
 800f252:	f383 8811 	msr	BASEPRI, r3
 800f256:	f3bf 8f6f 	isb	sy
 800f25a:	f3bf 8f4f 	dsb	sy
 800f25e:	b662      	cpsie	i
 800f260:	60fb      	str	r3, [r7, #12]
 800f262:	e7fe      	b.n	800f262 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f264:	4b07      	ldr	r3, [pc, #28]	; (800f284 <vTaskPlaceOnEventList+0x48>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	3318      	adds	r3, #24
 800f26a:	4619      	mov	r1, r3
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f7fe fe74 	bl	800df5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f272:	2101      	movs	r1, #1
 800f274:	6838      	ldr	r0, [r7, #0]
 800f276:	f000 fb93 	bl	800f9a0 <prvAddCurrentTaskToDelayedList>
}
 800f27a:	bf00      	nop
 800f27c:	3710      	adds	r7, #16
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	20003994 	.word	0x20003994

0800f288 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b086      	sub	sp, #24
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	60b9      	str	r1, [r7, #8]
 800f292:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d10b      	bne.n	800f2b2 <vTaskPlaceOnEventListRestricted+0x2a>
 800f29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f29e:	b672      	cpsid	i
 800f2a0:	f383 8811 	msr	BASEPRI, r3
 800f2a4:	f3bf 8f6f 	isb	sy
 800f2a8:	f3bf 8f4f 	dsb	sy
 800f2ac:	b662      	cpsie	i
 800f2ae:	617b      	str	r3, [r7, #20]
 800f2b0:	e7fe      	b.n	800f2b0 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f2b2:	4b0a      	ldr	r3, [pc, #40]	; (800f2dc <vTaskPlaceOnEventListRestricted+0x54>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	3318      	adds	r3, #24
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	68f8      	ldr	r0, [r7, #12]
 800f2bc:	f7fe fe29 	bl	800df12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d002      	beq.n	800f2cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f2cc:	6879      	ldr	r1, [r7, #4]
 800f2ce:	68b8      	ldr	r0, [r7, #8]
 800f2d0:	f000 fb66 	bl	800f9a0 <prvAddCurrentTaskToDelayedList>
	}
 800f2d4:	bf00      	nop
 800f2d6:	3718      	adds	r7, #24
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}
 800f2dc:	20003994 	.word	0x20003994

0800f2e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b086      	sub	sp, #24
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	68db      	ldr	r3, [r3, #12]
 800f2ec:	68db      	ldr	r3, [r3, #12]
 800f2ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d10b      	bne.n	800f30e <xTaskRemoveFromEventList+0x2e>
 800f2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fa:	b672      	cpsid	i
 800f2fc:	f383 8811 	msr	BASEPRI, r3
 800f300:	f3bf 8f6f 	isb	sy
 800f304:	f3bf 8f4f 	dsb	sy
 800f308:	b662      	cpsie	i
 800f30a:	60fb      	str	r3, [r7, #12]
 800f30c:	e7fe      	b.n	800f30c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	3318      	adds	r3, #24
 800f312:	4618      	mov	r0, r3
 800f314:	f7fe fe5a 	bl	800dfcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f318:	4b1d      	ldr	r3, [pc, #116]	; (800f390 <xTaskRemoveFromEventList+0xb0>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d11d      	bne.n	800f35c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	3304      	adds	r3, #4
 800f324:	4618      	mov	r0, r3
 800f326:	f7fe fe51 	bl	800dfcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f32e:	4b19      	ldr	r3, [pc, #100]	; (800f394 <xTaskRemoveFromEventList+0xb4>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	429a      	cmp	r2, r3
 800f334:	d903      	bls.n	800f33e <xTaskRemoveFromEventList+0x5e>
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f33a:	4a16      	ldr	r2, [pc, #88]	; (800f394 <xTaskRemoveFromEventList+0xb4>)
 800f33c:	6013      	str	r3, [r2, #0]
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f342:	4613      	mov	r3, r2
 800f344:	009b      	lsls	r3, r3, #2
 800f346:	4413      	add	r3, r2
 800f348:	009b      	lsls	r3, r3, #2
 800f34a:	4a13      	ldr	r2, [pc, #76]	; (800f398 <xTaskRemoveFromEventList+0xb8>)
 800f34c:	441a      	add	r2, r3
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	3304      	adds	r3, #4
 800f352:	4619      	mov	r1, r3
 800f354:	4610      	mov	r0, r2
 800f356:	f7fe fddc 	bl	800df12 <vListInsertEnd>
 800f35a:	e005      	b.n	800f368 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	3318      	adds	r3, #24
 800f360:	4619      	mov	r1, r3
 800f362:	480e      	ldr	r0, [pc, #56]	; (800f39c <xTaskRemoveFromEventList+0xbc>)
 800f364:	f7fe fdd5 	bl	800df12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f36c:	4b0c      	ldr	r3, [pc, #48]	; (800f3a0 <xTaskRemoveFromEventList+0xc0>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f372:	429a      	cmp	r2, r3
 800f374:	d905      	bls.n	800f382 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f376:	2301      	movs	r3, #1
 800f378:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f37a:	4b0a      	ldr	r3, [pc, #40]	; (800f3a4 <xTaskRemoveFromEventList+0xc4>)
 800f37c:	2201      	movs	r2, #1
 800f37e:	601a      	str	r2, [r3, #0]
 800f380:	e001      	b.n	800f386 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f382:	2300      	movs	r3, #0
 800f384:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f386:	697b      	ldr	r3, [r7, #20]
}
 800f388:	4618      	mov	r0, r3
 800f38a:	3718      	adds	r7, #24
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	20003e90 	.word	0x20003e90
 800f394:	20003e70 	.word	0x20003e70
 800f398:	20003998 	.word	0x20003998
 800f39c:	20003e28 	.word	0x20003e28
 800f3a0:	20003994 	.word	0x20003994
 800f3a4:	20003e7c 	.word	0x20003e7c

0800f3a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f3b0:	4b06      	ldr	r3, [pc, #24]	; (800f3cc <vTaskInternalSetTimeOutState+0x24>)
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f3b8:	4b05      	ldr	r3, [pc, #20]	; (800f3d0 <vTaskInternalSetTimeOutState+0x28>)
 800f3ba:	681a      	ldr	r2, [r3, #0]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	605a      	str	r2, [r3, #4]
}
 800f3c0:	bf00      	nop
 800f3c2:	370c      	adds	r7, #12
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr
 800f3cc:	20003e80 	.word	0x20003e80
 800f3d0:	20003e6c 	.word	0x20003e6c

0800f3d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b088      	sub	sp, #32
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d10b      	bne.n	800f3fc <xTaskCheckForTimeOut+0x28>
 800f3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e8:	b672      	cpsid	i
 800f3ea:	f383 8811 	msr	BASEPRI, r3
 800f3ee:	f3bf 8f6f 	isb	sy
 800f3f2:	f3bf 8f4f 	dsb	sy
 800f3f6:	b662      	cpsie	i
 800f3f8:	613b      	str	r3, [r7, #16]
 800f3fa:	e7fe      	b.n	800f3fa <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d10b      	bne.n	800f41a <xTaskCheckForTimeOut+0x46>
 800f402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f406:	b672      	cpsid	i
 800f408:	f383 8811 	msr	BASEPRI, r3
 800f40c:	f3bf 8f6f 	isb	sy
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	b662      	cpsie	i
 800f416:	60fb      	str	r3, [r7, #12]
 800f418:	e7fe      	b.n	800f418 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800f41a:	f000 ff75 	bl	8010308 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f41e:	4b1d      	ldr	r3, [pc, #116]	; (800f494 <xTaskCheckForTimeOut+0xc0>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	69ba      	ldr	r2, [r7, #24]
 800f42a:	1ad3      	subs	r3, r2, r3
 800f42c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f436:	d102      	bne.n	800f43e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f438:	2300      	movs	r3, #0
 800f43a:	61fb      	str	r3, [r7, #28]
 800f43c:	e023      	b.n	800f486 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681a      	ldr	r2, [r3, #0]
 800f442:	4b15      	ldr	r3, [pc, #84]	; (800f498 <xTaskCheckForTimeOut+0xc4>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	429a      	cmp	r2, r3
 800f448:	d007      	beq.n	800f45a <xTaskCheckForTimeOut+0x86>
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	69ba      	ldr	r2, [r7, #24]
 800f450:	429a      	cmp	r2, r3
 800f452:	d302      	bcc.n	800f45a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f454:	2301      	movs	r3, #1
 800f456:	61fb      	str	r3, [r7, #28]
 800f458:	e015      	b.n	800f486 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	697a      	ldr	r2, [r7, #20]
 800f460:	429a      	cmp	r2, r3
 800f462:	d20b      	bcs.n	800f47c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	681a      	ldr	r2, [r3, #0]
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	1ad2      	subs	r2, r2, r3
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f7ff ff99 	bl	800f3a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f476:	2300      	movs	r3, #0
 800f478:	61fb      	str	r3, [r7, #28]
 800f47a:	e004      	b.n	800f486 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	2200      	movs	r2, #0
 800f480:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f482:	2301      	movs	r3, #1
 800f484:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f486:	f000 ff71 	bl	801036c <vPortExitCritical>

	return xReturn;
 800f48a:	69fb      	ldr	r3, [r7, #28]
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3720      	adds	r7, #32
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}
 800f494:	20003e6c 	.word	0x20003e6c
 800f498:	20003e80 	.word	0x20003e80

0800f49c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f49c:	b480      	push	{r7}
 800f49e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f4a0:	4b03      	ldr	r3, [pc, #12]	; (800f4b0 <vTaskMissedYield+0x14>)
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	601a      	str	r2, [r3, #0]
}
 800f4a6:	bf00      	nop
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr
 800f4b0:	20003e7c 	.word	0x20003e7c

0800f4b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f4bc:	f000 f852 	bl	800f564 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f4c0:	4b06      	ldr	r3, [pc, #24]	; (800f4dc <prvIdleTask+0x28>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d9f9      	bls.n	800f4bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800f4c8:	4b05      	ldr	r3, [pc, #20]	; (800f4e0 <prvIdleTask+0x2c>)
 800f4ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4ce:	601a      	str	r2, [r3, #0]
 800f4d0:	f3bf 8f4f 	dsb	sy
 800f4d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f4d8:	e7f0      	b.n	800f4bc <prvIdleTask+0x8>
 800f4da:	bf00      	nop
 800f4dc:	20003998 	.word	0x20003998
 800f4e0:	e000ed04 	.word	0xe000ed04

0800f4e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	607b      	str	r3, [r7, #4]
 800f4ee:	e00c      	b.n	800f50a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f4f0:	687a      	ldr	r2, [r7, #4]
 800f4f2:	4613      	mov	r3, r2
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	4413      	add	r3, r2
 800f4f8:	009b      	lsls	r3, r3, #2
 800f4fa:	4a12      	ldr	r2, [pc, #72]	; (800f544 <prvInitialiseTaskLists+0x60>)
 800f4fc:	4413      	add	r3, r2
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7fe fcda 	bl	800deb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	3301      	adds	r3, #1
 800f508:	607b      	str	r3, [r7, #4]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2b37      	cmp	r3, #55	; 0x37
 800f50e:	d9ef      	bls.n	800f4f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f510:	480d      	ldr	r0, [pc, #52]	; (800f548 <prvInitialiseTaskLists+0x64>)
 800f512:	f7fe fcd1 	bl	800deb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f516:	480d      	ldr	r0, [pc, #52]	; (800f54c <prvInitialiseTaskLists+0x68>)
 800f518:	f7fe fcce 	bl	800deb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f51c:	480c      	ldr	r0, [pc, #48]	; (800f550 <prvInitialiseTaskLists+0x6c>)
 800f51e:	f7fe fccb 	bl	800deb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f522:	480c      	ldr	r0, [pc, #48]	; (800f554 <prvInitialiseTaskLists+0x70>)
 800f524:	f7fe fcc8 	bl	800deb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f528:	480b      	ldr	r0, [pc, #44]	; (800f558 <prvInitialiseTaskLists+0x74>)
 800f52a:	f7fe fcc5 	bl	800deb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f52e:	4b0b      	ldr	r3, [pc, #44]	; (800f55c <prvInitialiseTaskLists+0x78>)
 800f530:	4a05      	ldr	r2, [pc, #20]	; (800f548 <prvInitialiseTaskLists+0x64>)
 800f532:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f534:	4b0a      	ldr	r3, [pc, #40]	; (800f560 <prvInitialiseTaskLists+0x7c>)
 800f536:	4a05      	ldr	r2, [pc, #20]	; (800f54c <prvInitialiseTaskLists+0x68>)
 800f538:	601a      	str	r2, [r3, #0]
}
 800f53a:	bf00      	nop
 800f53c:	3708      	adds	r7, #8
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
 800f542:	bf00      	nop
 800f544:	20003998 	.word	0x20003998
 800f548:	20003df8 	.word	0x20003df8
 800f54c:	20003e0c 	.word	0x20003e0c
 800f550:	20003e28 	.word	0x20003e28
 800f554:	20003e3c 	.word	0x20003e3c
 800f558:	20003e54 	.word	0x20003e54
 800f55c:	20003e20 	.word	0x20003e20
 800f560:	20003e24 	.word	0x20003e24

0800f564 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f56a:	e019      	b.n	800f5a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f56c:	f000 fecc 	bl	8010308 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f570:	4b0f      	ldr	r3, [pc, #60]	; (800f5b0 <prvCheckTasksWaitingTermination+0x4c>)
 800f572:	68db      	ldr	r3, [r3, #12]
 800f574:	68db      	ldr	r3, [r3, #12]
 800f576:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	3304      	adds	r3, #4
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7fe fd25 	bl	800dfcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f582:	4b0c      	ldr	r3, [pc, #48]	; (800f5b4 <prvCheckTasksWaitingTermination+0x50>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	3b01      	subs	r3, #1
 800f588:	4a0a      	ldr	r2, [pc, #40]	; (800f5b4 <prvCheckTasksWaitingTermination+0x50>)
 800f58a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f58c:	4b0a      	ldr	r3, [pc, #40]	; (800f5b8 <prvCheckTasksWaitingTermination+0x54>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	3b01      	subs	r3, #1
 800f592:	4a09      	ldr	r2, [pc, #36]	; (800f5b8 <prvCheckTasksWaitingTermination+0x54>)
 800f594:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f596:	f000 fee9 	bl	801036c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 f80e 	bl	800f5bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f5a0:	4b05      	ldr	r3, [pc, #20]	; (800f5b8 <prvCheckTasksWaitingTermination+0x54>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d1e1      	bne.n	800f56c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f5a8:	bf00      	nop
 800f5aa:	3708      	adds	r7, #8
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}
 800f5b0:	20003e3c 	.word	0x20003e3c
 800f5b4:	20003e68 	.word	0x20003e68
 800f5b8:	20003e50 	.word	0x20003e50

0800f5bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b084      	sub	sp, #16
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d108      	bne.n	800f5e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f001 f882 	bl	80106dc <vPortFree>
				vPortFree( pxTCB );
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f001 f87f 	bl	80106dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f5de:	e019      	b.n	800f614 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d103      	bne.n	800f5f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f001 f876 	bl	80106dc <vPortFree>
	}
 800f5f0:	e010      	b.n	800f614 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f5f8:	2b02      	cmp	r3, #2
 800f5fa:	d00b      	beq.n	800f614 <prvDeleteTCB+0x58>
 800f5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f600:	b672      	cpsid	i
 800f602:	f383 8811 	msr	BASEPRI, r3
 800f606:	f3bf 8f6f 	isb	sy
 800f60a:	f3bf 8f4f 	dsb	sy
 800f60e:	b662      	cpsie	i
 800f610:	60fb      	str	r3, [r7, #12]
 800f612:	e7fe      	b.n	800f612 <prvDeleteTCB+0x56>
	}
 800f614:	bf00      	nop
 800f616:	3710      	adds	r7, #16
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f61c:	b480      	push	{r7}
 800f61e:	b083      	sub	sp, #12
 800f620:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f622:	4b0c      	ldr	r3, [pc, #48]	; (800f654 <prvResetNextTaskUnblockTime+0x38>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d104      	bne.n	800f636 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f62c:	4b0a      	ldr	r3, [pc, #40]	; (800f658 <prvResetNextTaskUnblockTime+0x3c>)
 800f62e:	f04f 32ff 	mov.w	r2, #4294967295
 800f632:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f634:	e008      	b.n	800f648 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f636:	4b07      	ldr	r3, [pc, #28]	; (800f654 <prvResetNextTaskUnblockTime+0x38>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	68db      	ldr	r3, [r3, #12]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	4a04      	ldr	r2, [pc, #16]	; (800f658 <prvResetNextTaskUnblockTime+0x3c>)
 800f646:	6013      	str	r3, [r2, #0]
}
 800f648:	bf00      	nop
 800f64a:	370c      	adds	r7, #12
 800f64c:	46bd      	mov	sp, r7
 800f64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f652:	4770      	bx	lr
 800f654:	20003e20 	.word	0x20003e20
 800f658:	20003e88 	.word	0x20003e88

0800f65c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f65c:	b480      	push	{r7}
 800f65e:	b083      	sub	sp, #12
 800f660:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f662:	4b0b      	ldr	r3, [pc, #44]	; (800f690 <xTaskGetSchedulerState+0x34>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d102      	bne.n	800f670 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f66a:	2301      	movs	r3, #1
 800f66c:	607b      	str	r3, [r7, #4]
 800f66e:	e008      	b.n	800f682 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f670:	4b08      	ldr	r3, [pc, #32]	; (800f694 <xTaskGetSchedulerState+0x38>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d102      	bne.n	800f67e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f678:	2302      	movs	r3, #2
 800f67a:	607b      	str	r3, [r7, #4]
 800f67c:	e001      	b.n	800f682 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f67e:	2300      	movs	r3, #0
 800f680:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f682:	687b      	ldr	r3, [r7, #4]
	}
 800f684:	4618      	mov	r0, r3
 800f686:	370c      	adds	r7, #12
 800f688:	46bd      	mov	sp, r7
 800f68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68e:	4770      	bx	lr
 800f690:	20003e74 	.word	0x20003e74
 800f694:	20003e90 	.word	0x20003e90

0800f698 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b086      	sub	sp, #24
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d058      	beq.n	800f760 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f6ae:	4b2f      	ldr	r3, [pc, #188]	; (800f76c <xTaskPriorityDisinherit+0xd4>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	693a      	ldr	r2, [r7, #16]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d00b      	beq.n	800f6d0 <xTaskPriorityDisinherit+0x38>
 800f6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6bc:	b672      	cpsid	i
 800f6be:	f383 8811 	msr	BASEPRI, r3
 800f6c2:	f3bf 8f6f 	isb	sy
 800f6c6:	f3bf 8f4f 	dsb	sy
 800f6ca:	b662      	cpsie	i
 800f6cc:	60fb      	str	r3, [r7, #12]
 800f6ce:	e7fe      	b.n	800f6ce <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d10b      	bne.n	800f6f0 <xTaskPriorityDisinherit+0x58>
 800f6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6dc:	b672      	cpsid	i
 800f6de:	f383 8811 	msr	BASEPRI, r3
 800f6e2:	f3bf 8f6f 	isb	sy
 800f6e6:	f3bf 8f4f 	dsb	sy
 800f6ea:	b662      	cpsie	i
 800f6ec:	60bb      	str	r3, [r7, #8]
 800f6ee:	e7fe      	b.n	800f6ee <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6f4:	1e5a      	subs	r2, r3, #1
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f702:	429a      	cmp	r2, r3
 800f704:	d02c      	beq.n	800f760 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d128      	bne.n	800f760 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	3304      	adds	r3, #4
 800f712:	4618      	mov	r0, r3
 800f714:	f7fe fc5a 	bl	800dfcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f724:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f730:	4b0f      	ldr	r3, [pc, #60]	; (800f770 <xTaskPriorityDisinherit+0xd8>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	429a      	cmp	r2, r3
 800f736:	d903      	bls.n	800f740 <xTaskPriorityDisinherit+0xa8>
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f73c:	4a0c      	ldr	r2, [pc, #48]	; (800f770 <xTaskPriorityDisinherit+0xd8>)
 800f73e:	6013      	str	r3, [r2, #0]
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f744:	4613      	mov	r3, r2
 800f746:	009b      	lsls	r3, r3, #2
 800f748:	4413      	add	r3, r2
 800f74a:	009b      	lsls	r3, r3, #2
 800f74c:	4a09      	ldr	r2, [pc, #36]	; (800f774 <xTaskPriorityDisinherit+0xdc>)
 800f74e:	441a      	add	r2, r3
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	3304      	adds	r3, #4
 800f754:	4619      	mov	r1, r3
 800f756:	4610      	mov	r0, r2
 800f758:	f7fe fbdb 	bl	800df12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f75c:	2301      	movs	r3, #1
 800f75e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f760:	697b      	ldr	r3, [r7, #20]
	}
 800f762:	4618      	mov	r0, r3
 800f764:	3718      	adds	r7, #24
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}
 800f76a:	bf00      	nop
 800f76c:	20003994 	.word	0x20003994
 800f770:	20003e70 	.word	0x20003e70
 800f774:	20003998 	.word	0x20003998

0800f778 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b086      	sub	sp, #24
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	607a      	str	r2, [r7, #4]
 800f784:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f786:	f000 fdbf 	bl	8010308 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f78a:	4b26      	ldr	r3, [pc, #152]	; (800f824 <xTaskNotifyWait+0xac>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f792:	b2db      	uxtb	r3, r3
 800f794:	2b02      	cmp	r3, #2
 800f796:	d01a      	beq.n	800f7ce <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f798:	4b22      	ldr	r3, [pc, #136]	; (800f824 <xTaskNotifyWait+0xac>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f79e:	68fa      	ldr	r2, [r7, #12]
 800f7a0:	43d2      	mvns	r2, r2
 800f7a2:	400a      	ands	r2, r1
 800f7a4:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f7a6:	4b1f      	ldr	r3, [pc, #124]	; (800f824 <xTaskNotifyWait+0xac>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d00b      	beq.n	800f7ce <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f7b6:	2101      	movs	r1, #1
 800f7b8:	6838      	ldr	r0, [r7, #0]
 800f7ba:	f000 f8f1 	bl	800f9a0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f7be:	4b1a      	ldr	r3, [pc, #104]	; (800f828 <xTaskNotifyWait+0xb0>)
 800f7c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7c4:	601a      	str	r2, [r3, #0]
 800f7c6:	f3bf 8f4f 	dsb	sy
 800f7ca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f7ce:	f000 fdcd 	bl	801036c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f7d2:	f000 fd99 	bl	8010308 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d004      	beq.n	800f7e6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f7dc:	4b11      	ldr	r3, [pc, #68]	; (800f824 <xTaskNotifyWait+0xac>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f7e6:	4b0f      	ldr	r3, [pc, #60]	; (800f824 <xTaskNotifyWait+0xac>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f7ee:	b2db      	uxtb	r3, r3
 800f7f0:	2b02      	cmp	r3, #2
 800f7f2:	d002      	beq.n	800f7fa <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	617b      	str	r3, [r7, #20]
 800f7f8:	e008      	b.n	800f80c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f7fa:	4b0a      	ldr	r3, [pc, #40]	; (800f824 <xTaskNotifyWait+0xac>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f800:	68ba      	ldr	r2, [r7, #8]
 800f802:	43d2      	mvns	r2, r2
 800f804:	400a      	ands	r2, r1
 800f806:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800f808:	2301      	movs	r3, #1
 800f80a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f80c:	4b05      	ldr	r3, [pc, #20]	; (800f824 <xTaskNotifyWait+0xac>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	2200      	movs	r2, #0
 800f812:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800f816:	f000 fda9 	bl	801036c <vPortExitCritical>

		return xReturn;
 800f81a:	697b      	ldr	r3, [r7, #20]
	}
 800f81c:	4618      	mov	r0, r3
 800f81e:	3718      	adds	r7, #24
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}
 800f824:	20003994 	.word	0x20003994
 800f828:	e000ed04 	.word	0xe000ed04

0800f82c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b08a      	sub	sp, #40	; 0x28
 800f830:	af00      	add	r7, sp, #0
 800f832:	60f8      	str	r0, [r7, #12]
 800f834:	60b9      	str	r1, [r7, #8]
 800f836:	603b      	str	r3, [r7, #0]
 800f838:	4613      	mov	r3, r2
 800f83a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f83c:	2301      	movs	r3, #1
 800f83e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d10b      	bne.n	800f85e <xTaskGenericNotify+0x32>
 800f846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f84a:	b672      	cpsid	i
 800f84c:	f383 8811 	msr	BASEPRI, r3
 800f850:	f3bf 8f6f 	isb	sy
 800f854:	f3bf 8f4f 	dsb	sy
 800f858:	b662      	cpsie	i
 800f85a:	61bb      	str	r3, [r7, #24]
 800f85c:	e7fe      	b.n	800f85c <xTaskGenericNotify+0x30>
		pxTCB = xTaskToNotify;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f862:	f000 fd51 	bl	8010308 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d003      	beq.n	800f874 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f86c:	6a3b      	ldr	r3, [r7, #32]
 800f86e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f874:	6a3b      	ldr	r3, [r7, #32]
 800f876:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f87a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f87c:	6a3b      	ldr	r3, [r7, #32]
 800f87e:	2202      	movs	r2, #2
 800f880:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800f884:	79fb      	ldrb	r3, [r7, #7]
 800f886:	2b04      	cmp	r3, #4
 800f888:	d827      	bhi.n	800f8da <xTaskGenericNotify+0xae>
 800f88a:	a201      	add	r2, pc, #4	; (adr r2, 800f890 <xTaskGenericNotify+0x64>)
 800f88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f890:	0800f8fd 	.word	0x0800f8fd
 800f894:	0800f8a5 	.word	0x0800f8a5
 800f898:	0800f8b3 	.word	0x0800f8b3
 800f89c:	0800f8bf 	.word	0x0800f8bf
 800f8a0:	0800f8c7 	.word	0x0800f8c7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f8a4:	6a3b      	ldr	r3, [r7, #32]
 800f8a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	431a      	orrs	r2, r3
 800f8ac:	6a3b      	ldr	r3, [r7, #32]
 800f8ae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f8b0:	e027      	b.n	800f902 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f8b2:	6a3b      	ldr	r3, [r7, #32]
 800f8b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8b6:	1c5a      	adds	r2, r3, #1
 800f8b8:	6a3b      	ldr	r3, [r7, #32]
 800f8ba:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f8bc:	e021      	b.n	800f902 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f8be:	6a3b      	ldr	r3, [r7, #32]
 800f8c0:	68ba      	ldr	r2, [r7, #8]
 800f8c2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f8c4:	e01d      	b.n	800f902 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f8c6:	7ffb      	ldrb	r3, [r7, #31]
 800f8c8:	2b02      	cmp	r3, #2
 800f8ca:	d003      	beq.n	800f8d4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f8cc:	6a3b      	ldr	r3, [r7, #32]
 800f8ce:	68ba      	ldr	r2, [r7, #8]
 800f8d0:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f8d2:	e016      	b.n	800f902 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800f8d8:	e013      	b.n	800f902 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f8da:	6a3b      	ldr	r3, [r7, #32]
 800f8dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8e2:	d00d      	beq.n	800f900 <xTaskGenericNotify+0xd4>
 800f8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e8:	b672      	cpsid	i
 800f8ea:	f383 8811 	msr	BASEPRI, r3
 800f8ee:	f3bf 8f6f 	isb	sy
 800f8f2:	f3bf 8f4f 	dsb	sy
 800f8f6:	b662      	cpsie	i
 800f8f8:	617b      	str	r3, [r7, #20]
 800f8fa:	e7fe      	b.n	800f8fa <xTaskGenericNotify+0xce>
					break;
 800f8fc:	bf00      	nop
 800f8fe:	e000      	b.n	800f902 <xTaskGenericNotify+0xd6>

					break;
 800f900:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f902:	7ffb      	ldrb	r3, [r7, #31]
 800f904:	2b01      	cmp	r3, #1
 800f906:	d13b      	bne.n	800f980 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f908:	6a3b      	ldr	r3, [r7, #32]
 800f90a:	3304      	adds	r3, #4
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7fe fb5d 	bl	800dfcc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f912:	6a3b      	ldr	r3, [r7, #32]
 800f914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f916:	4b1e      	ldr	r3, [pc, #120]	; (800f990 <xTaskGenericNotify+0x164>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d903      	bls.n	800f926 <xTaskGenericNotify+0xfa>
 800f91e:	6a3b      	ldr	r3, [r7, #32]
 800f920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f922:	4a1b      	ldr	r2, [pc, #108]	; (800f990 <xTaskGenericNotify+0x164>)
 800f924:	6013      	str	r3, [r2, #0]
 800f926:	6a3b      	ldr	r3, [r7, #32]
 800f928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f92a:	4613      	mov	r3, r2
 800f92c:	009b      	lsls	r3, r3, #2
 800f92e:	4413      	add	r3, r2
 800f930:	009b      	lsls	r3, r3, #2
 800f932:	4a18      	ldr	r2, [pc, #96]	; (800f994 <xTaskGenericNotify+0x168>)
 800f934:	441a      	add	r2, r3
 800f936:	6a3b      	ldr	r3, [r7, #32]
 800f938:	3304      	adds	r3, #4
 800f93a:	4619      	mov	r1, r3
 800f93c:	4610      	mov	r0, r2
 800f93e:	f7fe fae8 	bl	800df12 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f942:	6a3b      	ldr	r3, [r7, #32]
 800f944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f946:	2b00      	cmp	r3, #0
 800f948:	d00b      	beq.n	800f962 <xTaskGenericNotify+0x136>
 800f94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f94e:	b672      	cpsid	i
 800f950:	f383 8811 	msr	BASEPRI, r3
 800f954:	f3bf 8f6f 	isb	sy
 800f958:	f3bf 8f4f 	dsb	sy
 800f95c:	b662      	cpsie	i
 800f95e:	613b      	str	r3, [r7, #16]
 800f960:	e7fe      	b.n	800f960 <xTaskGenericNotify+0x134>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f962:	6a3b      	ldr	r3, [r7, #32]
 800f964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f966:	4b0c      	ldr	r3, [pc, #48]	; (800f998 <xTaskGenericNotify+0x16c>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f96c:	429a      	cmp	r2, r3
 800f96e:	d907      	bls.n	800f980 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f970:	4b0a      	ldr	r3, [pc, #40]	; (800f99c <xTaskGenericNotify+0x170>)
 800f972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f976:	601a      	str	r2, [r3, #0]
 800f978:	f3bf 8f4f 	dsb	sy
 800f97c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f980:	f000 fcf4 	bl	801036c <vPortExitCritical>

		return xReturn;
 800f984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f986:	4618      	mov	r0, r3
 800f988:	3728      	adds	r7, #40	; 0x28
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	20003e70 	.word	0x20003e70
 800f994:	20003998 	.word	0x20003998
 800f998:	20003994 	.word	0x20003994
 800f99c:	e000ed04 	.word	0xe000ed04

0800f9a0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f9aa:	4b21      	ldr	r3, [pc, #132]	; (800fa30 <prvAddCurrentTaskToDelayedList+0x90>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f9b0:	4b20      	ldr	r3, [pc, #128]	; (800fa34 <prvAddCurrentTaskToDelayedList+0x94>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	3304      	adds	r3, #4
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7fe fb08 	bl	800dfcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9c2:	d10a      	bne.n	800f9da <prvAddCurrentTaskToDelayedList+0x3a>
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d007      	beq.n	800f9da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9ca:	4b1a      	ldr	r3, [pc, #104]	; (800fa34 <prvAddCurrentTaskToDelayedList+0x94>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	3304      	adds	r3, #4
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	4819      	ldr	r0, [pc, #100]	; (800fa38 <prvAddCurrentTaskToDelayedList+0x98>)
 800f9d4:	f7fe fa9d 	bl	800df12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f9d8:	e026      	b.n	800fa28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f9da:	68fa      	ldr	r2, [r7, #12]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	4413      	add	r3, r2
 800f9e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f9e2:	4b14      	ldr	r3, [pc, #80]	; (800fa34 <prvAddCurrentTaskToDelayedList+0x94>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	68ba      	ldr	r2, [r7, #8]
 800f9e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f9ea:	68ba      	ldr	r2, [r7, #8]
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	d209      	bcs.n	800fa06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9f2:	4b12      	ldr	r3, [pc, #72]	; (800fa3c <prvAddCurrentTaskToDelayedList+0x9c>)
 800f9f4:	681a      	ldr	r2, [r3, #0]
 800f9f6:	4b0f      	ldr	r3, [pc, #60]	; (800fa34 <prvAddCurrentTaskToDelayedList+0x94>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	3304      	adds	r3, #4
 800f9fc:	4619      	mov	r1, r3
 800f9fe:	4610      	mov	r0, r2
 800fa00:	f7fe faab 	bl	800df5a <vListInsert>
}
 800fa04:	e010      	b.n	800fa28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa06:	4b0e      	ldr	r3, [pc, #56]	; (800fa40 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fa08:	681a      	ldr	r2, [r3, #0]
 800fa0a:	4b0a      	ldr	r3, [pc, #40]	; (800fa34 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	3304      	adds	r3, #4
 800fa10:	4619      	mov	r1, r3
 800fa12:	4610      	mov	r0, r2
 800fa14:	f7fe faa1 	bl	800df5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fa18:	4b0a      	ldr	r3, [pc, #40]	; (800fa44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	68ba      	ldr	r2, [r7, #8]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d202      	bcs.n	800fa28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fa22:	4a08      	ldr	r2, [pc, #32]	; (800fa44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	6013      	str	r3, [r2, #0]
}
 800fa28:	bf00      	nop
 800fa2a:	3710      	adds	r7, #16
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}
 800fa30:	20003e6c 	.word	0x20003e6c
 800fa34:	20003994 	.word	0x20003994
 800fa38:	20003e54 	.word	0x20003e54
 800fa3c:	20003e24 	.word	0x20003e24
 800fa40:	20003e20 	.word	0x20003e20
 800fa44:	20003e88 	.word	0x20003e88

0800fa48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b08a      	sub	sp, #40	; 0x28
 800fa4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fa52:	f000 fb0d 	bl	8010070 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fa56:	4b1d      	ldr	r3, [pc, #116]	; (800facc <xTimerCreateTimerTask+0x84>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d021      	beq.n	800faa2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fa62:	2300      	movs	r3, #0
 800fa64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fa66:	1d3a      	adds	r2, r7, #4
 800fa68:	f107 0108 	add.w	r1, r7, #8
 800fa6c:	f107 030c 	add.w	r3, r7, #12
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7fe fa07 	bl	800de84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fa76:	6879      	ldr	r1, [r7, #4]
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	68fa      	ldr	r2, [r7, #12]
 800fa7c:	9202      	str	r2, [sp, #8]
 800fa7e:	9301      	str	r3, [sp, #4]
 800fa80:	2302      	movs	r3, #2
 800fa82:	9300      	str	r3, [sp, #0]
 800fa84:	2300      	movs	r3, #0
 800fa86:	460a      	mov	r2, r1
 800fa88:	4911      	ldr	r1, [pc, #68]	; (800fad0 <xTimerCreateTimerTask+0x88>)
 800fa8a:	4812      	ldr	r0, [pc, #72]	; (800fad4 <xTimerCreateTimerTask+0x8c>)
 800fa8c:	f7fe ffbe 	bl	800ea0c <xTaskCreateStatic>
 800fa90:	4602      	mov	r2, r0
 800fa92:	4b11      	ldr	r3, [pc, #68]	; (800fad8 <xTimerCreateTimerTask+0x90>)
 800fa94:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fa96:	4b10      	ldr	r3, [pc, #64]	; (800fad8 <xTimerCreateTimerTask+0x90>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d001      	beq.n	800faa2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fa9e:	2301      	movs	r3, #1
 800faa0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d10b      	bne.n	800fac0 <xTimerCreateTimerTask+0x78>
 800faa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faac:	b672      	cpsid	i
 800faae:	f383 8811 	msr	BASEPRI, r3
 800fab2:	f3bf 8f6f 	isb	sy
 800fab6:	f3bf 8f4f 	dsb	sy
 800faba:	b662      	cpsie	i
 800fabc:	613b      	str	r3, [r7, #16]
 800fabe:	e7fe      	b.n	800fabe <xTimerCreateTimerTask+0x76>
	return xReturn;
 800fac0:	697b      	ldr	r3, [r7, #20]
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3718      	adds	r7, #24
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	20003ec4 	.word	0x20003ec4
 800fad0:	080151bc 	.word	0x080151bc
 800fad4:	0800fc15 	.word	0x0800fc15
 800fad8:	20003ec8 	.word	0x20003ec8

0800fadc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b08a      	sub	sp, #40	; 0x28
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	607a      	str	r2, [r7, #4]
 800fae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800faea:	2300      	movs	r3, #0
 800faec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d10b      	bne.n	800fb0c <xTimerGenericCommand+0x30>
 800faf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf8:	b672      	cpsid	i
 800fafa:	f383 8811 	msr	BASEPRI, r3
 800fafe:	f3bf 8f6f 	isb	sy
 800fb02:	f3bf 8f4f 	dsb	sy
 800fb06:	b662      	cpsie	i
 800fb08:	623b      	str	r3, [r7, #32]
 800fb0a:	e7fe      	b.n	800fb0a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fb0c:	4b19      	ldr	r3, [pc, #100]	; (800fb74 <xTimerGenericCommand+0x98>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d02a      	beq.n	800fb6a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	2b05      	cmp	r3, #5
 800fb24:	dc18      	bgt.n	800fb58 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fb26:	f7ff fd99 	bl	800f65c <xTaskGetSchedulerState>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	2b02      	cmp	r3, #2
 800fb2e:	d109      	bne.n	800fb44 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fb30:	4b10      	ldr	r3, [pc, #64]	; (800fb74 <xTimerGenericCommand+0x98>)
 800fb32:	6818      	ldr	r0, [r3, #0]
 800fb34:	f107 0110 	add.w	r1, r7, #16
 800fb38:	2300      	movs	r3, #0
 800fb3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb3c:	f7fe fb7a 	bl	800e234 <xQueueGenericSend>
 800fb40:	6278      	str	r0, [r7, #36]	; 0x24
 800fb42:	e012      	b.n	800fb6a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fb44:	4b0b      	ldr	r3, [pc, #44]	; (800fb74 <xTimerGenericCommand+0x98>)
 800fb46:	6818      	ldr	r0, [r3, #0]
 800fb48:	f107 0110 	add.w	r1, r7, #16
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	2200      	movs	r2, #0
 800fb50:	f7fe fb70 	bl	800e234 <xQueueGenericSend>
 800fb54:	6278      	str	r0, [r7, #36]	; 0x24
 800fb56:	e008      	b.n	800fb6a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fb58:	4b06      	ldr	r3, [pc, #24]	; (800fb74 <xTimerGenericCommand+0x98>)
 800fb5a:	6818      	ldr	r0, [r3, #0]
 800fb5c:	f107 0110 	add.w	r1, r7, #16
 800fb60:	2300      	movs	r3, #0
 800fb62:	683a      	ldr	r2, [r7, #0]
 800fb64:	f7fe fc68 	bl	800e438 <xQueueGenericSendFromISR>
 800fb68:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3728      	adds	r7, #40	; 0x28
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	20003ec4 	.word	0x20003ec4

0800fb78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b088      	sub	sp, #32
 800fb7c:	af02      	add	r7, sp, #8
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb82:	4b23      	ldr	r3, [pc, #140]	; (800fc10 <prvProcessExpiredTimer+0x98>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	68db      	ldr	r3, [r3, #12]
 800fb88:	68db      	ldr	r3, [r3, #12]
 800fb8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	3304      	adds	r3, #4
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7fe fa1b 	bl	800dfcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb9c:	f003 0304 	and.w	r3, r3, #4
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d023      	beq.n	800fbec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	699a      	ldr	r2, [r3, #24]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	18d1      	adds	r1, r2, r3
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	683a      	ldr	r2, [r7, #0]
 800fbb0:	6978      	ldr	r0, [r7, #20]
 800fbb2:	f000 f8d3 	bl	800fd5c <prvInsertTimerInActiveList>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d020      	beq.n	800fbfe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	9300      	str	r3, [sp, #0]
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	2100      	movs	r1, #0
 800fbc6:	6978      	ldr	r0, [r7, #20]
 800fbc8:	f7ff ff88 	bl	800fadc <xTimerGenericCommand>
 800fbcc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fbce:	693b      	ldr	r3, [r7, #16]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d114      	bne.n	800fbfe <prvProcessExpiredTimer+0x86>
 800fbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd8:	b672      	cpsid	i
 800fbda:	f383 8811 	msr	BASEPRI, r3
 800fbde:	f3bf 8f6f 	isb	sy
 800fbe2:	f3bf 8f4f 	dsb	sy
 800fbe6:	b662      	cpsie	i
 800fbe8:	60fb      	str	r3, [r7, #12]
 800fbea:	e7fe      	b.n	800fbea <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbf2:	f023 0301 	bic.w	r3, r3, #1
 800fbf6:	b2da      	uxtb	r2, r3
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	6a1b      	ldr	r3, [r3, #32]
 800fc02:	6978      	ldr	r0, [r7, #20]
 800fc04:	4798      	blx	r3
}
 800fc06:	bf00      	nop
 800fc08:	3718      	adds	r7, #24
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	20003ebc 	.word	0x20003ebc

0800fc14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fc1c:	f107 0308 	add.w	r3, r7, #8
 800fc20:	4618      	mov	r0, r3
 800fc22:	f000 f857 	bl	800fcd4 <prvGetNextExpireTime>
 800fc26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f000 f803 	bl	800fc38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fc32:	f000 f8d5 	bl	800fde0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fc36:	e7f1      	b.n	800fc1c <prvTimerTask+0x8>

0800fc38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b084      	sub	sp, #16
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fc42:	f7ff f927 	bl	800ee94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fc46:	f107 0308 	add.w	r3, r7, #8
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f000 f866 	bl	800fd1c <prvSampleTimeNow>
 800fc50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d130      	bne.n	800fcba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d10a      	bne.n	800fc74 <prvProcessTimerOrBlockTask+0x3c>
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	429a      	cmp	r2, r3
 800fc64:	d806      	bhi.n	800fc74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fc66:	f7ff f923 	bl	800eeb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fc6a:	68f9      	ldr	r1, [r7, #12]
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f7ff ff83 	bl	800fb78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fc72:	e024      	b.n	800fcbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d008      	beq.n	800fc8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fc7a:	4b13      	ldr	r3, [pc, #76]	; (800fcc8 <prvProcessTimerOrBlockTask+0x90>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d101      	bne.n	800fc88 <prvProcessTimerOrBlockTask+0x50>
 800fc84:	2301      	movs	r3, #1
 800fc86:	e000      	b.n	800fc8a <prvProcessTimerOrBlockTask+0x52>
 800fc88:	2300      	movs	r3, #0
 800fc8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fc8c:	4b0f      	ldr	r3, [pc, #60]	; (800fccc <prvProcessTimerOrBlockTask+0x94>)
 800fc8e:	6818      	ldr	r0, [r3, #0]
 800fc90:	687a      	ldr	r2, [r7, #4]
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	1ad3      	subs	r3, r2, r3
 800fc96:	683a      	ldr	r2, [r7, #0]
 800fc98:	4619      	mov	r1, r3
 800fc9a:	f7fe fe83 	bl	800e9a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fc9e:	f7ff f907 	bl	800eeb0 <xTaskResumeAll>
 800fca2:	4603      	mov	r3, r0
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d10a      	bne.n	800fcbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fca8:	4b09      	ldr	r3, [pc, #36]	; (800fcd0 <prvProcessTimerOrBlockTask+0x98>)
 800fcaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcae:	601a      	str	r2, [r3, #0]
 800fcb0:	f3bf 8f4f 	dsb	sy
 800fcb4:	f3bf 8f6f 	isb	sy
}
 800fcb8:	e001      	b.n	800fcbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fcba:	f7ff f8f9 	bl	800eeb0 <xTaskResumeAll>
}
 800fcbe:	bf00      	nop
 800fcc0:	3710      	adds	r7, #16
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
 800fcc6:	bf00      	nop
 800fcc8:	20003ec0 	.word	0x20003ec0
 800fccc:	20003ec4 	.word	0x20003ec4
 800fcd0:	e000ed04 	.word	0xe000ed04

0800fcd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b085      	sub	sp, #20
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fcdc:	4b0e      	ldr	r3, [pc, #56]	; (800fd18 <prvGetNextExpireTime+0x44>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d101      	bne.n	800fcea <prvGetNextExpireTime+0x16>
 800fce6:	2201      	movs	r2, #1
 800fce8:	e000      	b.n	800fcec <prvGetNextExpireTime+0x18>
 800fcea:	2200      	movs	r2, #0
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d105      	bne.n	800fd04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fcf8:	4b07      	ldr	r3, [pc, #28]	; (800fd18 <prvGetNextExpireTime+0x44>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	68db      	ldr	r3, [r3, #12]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	60fb      	str	r3, [r7, #12]
 800fd02:	e001      	b.n	800fd08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fd04:	2300      	movs	r3, #0
 800fd06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fd08:	68fb      	ldr	r3, [r7, #12]
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3714      	adds	r7, #20
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr
 800fd16:	bf00      	nop
 800fd18:	20003ebc 	.word	0x20003ebc

0800fd1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b084      	sub	sp, #16
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fd24:	f7ff f962 	bl	800efec <xTaskGetTickCount>
 800fd28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fd2a:	4b0b      	ldr	r3, [pc, #44]	; (800fd58 <prvSampleTimeNow+0x3c>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	68fa      	ldr	r2, [r7, #12]
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d205      	bcs.n	800fd40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fd34:	f000 f936 	bl	800ffa4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	601a      	str	r2, [r3, #0]
 800fd3e:	e002      	b.n	800fd46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fd46:	4a04      	ldr	r2, [pc, #16]	; (800fd58 <prvSampleTimeNow+0x3c>)
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3710      	adds	r7, #16
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	20003ecc 	.word	0x20003ecc

0800fd5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b086      	sub	sp, #24
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	60f8      	str	r0, [r7, #12]
 800fd64:	60b9      	str	r1, [r7, #8]
 800fd66:	607a      	str	r2, [r7, #4]
 800fd68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	68ba      	ldr	r2, [r7, #8]
 800fd72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	68fa      	ldr	r2, [r7, #12]
 800fd78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fd7a:	68ba      	ldr	r2, [r7, #8]
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d812      	bhi.n	800fda8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd82:	687a      	ldr	r2, [r7, #4]
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	1ad2      	subs	r2, r2, r3
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	699b      	ldr	r3, [r3, #24]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d302      	bcc.n	800fd96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fd90:	2301      	movs	r3, #1
 800fd92:	617b      	str	r3, [r7, #20]
 800fd94:	e01b      	b.n	800fdce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fd96:	4b10      	ldr	r3, [pc, #64]	; (800fdd8 <prvInsertTimerInActiveList+0x7c>)
 800fd98:	681a      	ldr	r2, [r3, #0]
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	3304      	adds	r3, #4
 800fd9e:	4619      	mov	r1, r3
 800fda0:	4610      	mov	r0, r2
 800fda2:	f7fe f8da 	bl	800df5a <vListInsert>
 800fda6:	e012      	b.n	800fdce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d206      	bcs.n	800fdbe <prvInsertTimerInActiveList+0x62>
 800fdb0:	68ba      	ldr	r2, [r7, #8]
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	d302      	bcc.n	800fdbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fdb8:	2301      	movs	r3, #1
 800fdba:	617b      	str	r3, [r7, #20]
 800fdbc:	e007      	b.n	800fdce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fdbe:	4b07      	ldr	r3, [pc, #28]	; (800fddc <prvInsertTimerInActiveList+0x80>)
 800fdc0:	681a      	ldr	r2, [r3, #0]
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	3304      	adds	r3, #4
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	4610      	mov	r0, r2
 800fdca:	f7fe f8c6 	bl	800df5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fdce:	697b      	ldr	r3, [r7, #20]
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3718      	adds	r7, #24
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	20003ec0 	.word	0x20003ec0
 800fddc:	20003ebc 	.word	0x20003ebc

0800fde0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b08e      	sub	sp, #56	; 0x38
 800fde4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fde6:	e0cc      	b.n	800ff82 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	da19      	bge.n	800fe22 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fdee:	1d3b      	adds	r3, r7, #4
 800fdf0:	3304      	adds	r3, #4
 800fdf2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d10b      	bne.n	800fe12 <prvProcessReceivedCommands+0x32>
 800fdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdfe:	b672      	cpsid	i
 800fe00:	f383 8811 	msr	BASEPRI, r3
 800fe04:	f3bf 8f6f 	isb	sy
 800fe08:	f3bf 8f4f 	dsb	sy
 800fe0c:	b662      	cpsie	i
 800fe0e:	61fb      	str	r3, [r7, #28]
 800fe10:	e7fe      	b.n	800fe10 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fe12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe18:	6850      	ldr	r0, [r2, #4]
 800fe1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe1c:	6892      	ldr	r2, [r2, #8]
 800fe1e:	4611      	mov	r1, r2
 800fe20:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	f2c0 80ab 	blt.w	800ff80 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fe2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe30:	695b      	ldr	r3, [r3, #20]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d004      	beq.n	800fe40 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe38:	3304      	adds	r3, #4
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7fe f8c6 	bl	800dfcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fe40:	463b      	mov	r3, r7
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7ff ff6a 	bl	800fd1c <prvSampleTimeNow>
 800fe48:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2b09      	cmp	r3, #9
 800fe4e:	f200 8098 	bhi.w	800ff82 <prvProcessReceivedCommands+0x1a2>
 800fe52:	a201      	add	r2, pc, #4	; (adr r2, 800fe58 <prvProcessReceivedCommands+0x78>)
 800fe54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe58:	0800fe81 	.word	0x0800fe81
 800fe5c:	0800fe81 	.word	0x0800fe81
 800fe60:	0800fe81 	.word	0x0800fe81
 800fe64:	0800fef7 	.word	0x0800fef7
 800fe68:	0800ff0b 	.word	0x0800ff0b
 800fe6c:	0800ff57 	.word	0x0800ff57
 800fe70:	0800fe81 	.word	0x0800fe81
 800fe74:	0800fe81 	.word	0x0800fe81
 800fe78:	0800fef7 	.word	0x0800fef7
 800fe7c:	0800ff0b 	.word	0x0800ff0b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fe80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe86:	f043 0301 	orr.w	r3, r3, #1
 800fe8a:	b2da      	uxtb	r2, r3
 800fe8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fe92:	68ba      	ldr	r2, [r7, #8]
 800fe94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe96:	699b      	ldr	r3, [r3, #24]
 800fe98:	18d1      	adds	r1, r2, r3
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fea0:	f7ff ff5c 	bl	800fd5c <prvInsertTimerInActiveList>
 800fea4:	4603      	mov	r3, r0
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d06b      	beq.n	800ff82 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800feaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feac:	6a1b      	ldr	r3, [r3, #32]
 800feae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800feb0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800feb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800feb8:	f003 0304 	and.w	r3, r3, #4
 800febc:	2b00      	cmp	r3, #0
 800febe:	d060      	beq.n	800ff82 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fec0:	68ba      	ldr	r2, [r7, #8]
 800fec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec4:	699b      	ldr	r3, [r3, #24]
 800fec6:	441a      	add	r2, r3
 800fec8:	2300      	movs	r3, #0
 800feca:	9300      	str	r3, [sp, #0]
 800fecc:	2300      	movs	r3, #0
 800fece:	2100      	movs	r1, #0
 800fed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fed2:	f7ff fe03 	bl	800fadc <xTimerGenericCommand>
 800fed6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fed8:	6a3b      	ldr	r3, [r7, #32]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d151      	bne.n	800ff82 <prvProcessReceivedCommands+0x1a2>
 800fede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee2:	b672      	cpsid	i
 800fee4:	f383 8811 	msr	BASEPRI, r3
 800fee8:	f3bf 8f6f 	isb	sy
 800feec:	f3bf 8f4f 	dsb	sy
 800fef0:	b662      	cpsie	i
 800fef2:	61bb      	str	r3, [r7, #24]
 800fef4:	e7fe      	b.n	800fef4 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fefc:	f023 0301 	bic.w	r3, r3, #1
 800ff00:	b2da      	uxtb	r2, r3
 800ff02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ff08:	e03b      	b.n	800ff82 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ff0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff10:	f043 0301 	orr.w	r3, r3, #1
 800ff14:	b2da      	uxtb	r2, r3
 800ff16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ff1c:	68ba      	ldr	r2, [r7, #8]
 800ff1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff20:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ff22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff24:	699b      	ldr	r3, [r3, #24]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d10b      	bne.n	800ff42 <prvProcessReceivedCommands+0x162>
 800ff2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff2e:	b672      	cpsid	i
 800ff30:	f383 8811 	msr	BASEPRI, r3
 800ff34:	f3bf 8f6f 	isb	sy
 800ff38:	f3bf 8f4f 	dsb	sy
 800ff3c:	b662      	cpsie	i
 800ff3e:	617b      	str	r3, [r7, #20]
 800ff40:	e7fe      	b.n	800ff40 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ff42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff44:	699a      	ldr	r2, [r3, #24]
 800ff46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff48:	18d1      	adds	r1, r2, r3
 800ff4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff50:	f7ff ff04 	bl	800fd5c <prvInsertTimerInActiveList>
					break;
 800ff54:	e015      	b.n	800ff82 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ff56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff5c:	f003 0302 	and.w	r3, r3, #2
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d103      	bne.n	800ff6c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ff64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff66:	f000 fbb9 	bl	80106dc <vPortFree>
 800ff6a:	e00a      	b.n	800ff82 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ff6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff72:	f023 0301 	bic.w	r3, r3, #1
 800ff76:	b2da      	uxtb	r2, r3
 800ff78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ff7e:	e000      	b.n	800ff82 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ff80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ff82:	4b07      	ldr	r3, [pc, #28]	; (800ffa0 <prvProcessReceivedCommands+0x1c0>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	1d39      	adds	r1, r7, #4
 800ff88:	2200      	movs	r2, #0
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7fe faf0 	bl	800e570 <xQueueReceive>
 800ff90:	4603      	mov	r3, r0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	f47f af28 	bne.w	800fde8 <prvProcessReceivedCommands+0x8>
	}
}
 800ff98:	bf00      	nop
 800ff9a:	3730      	adds	r7, #48	; 0x30
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	20003ec4 	.word	0x20003ec4

0800ffa4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b088      	sub	sp, #32
 800ffa8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ffaa:	e049      	b.n	8010040 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ffac:	4b2e      	ldr	r3, [pc, #184]	; (8010068 <prvSwitchTimerLists+0xc4>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffb6:	4b2c      	ldr	r3, [pc, #176]	; (8010068 <prvSwitchTimerLists+0xc4>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	68db      	ldr	r3, [r3, #12]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	3304      	adds	r3, #4
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f7fe f801 	bl	800dfcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	6a1b      	ldr	r3, [r3, #32]
 800ffce:	68f8      	ldr	r0, [r7, #12]
 800ffd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffd8:	f003 0304 	and.w	r3, r3, #4
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d02f      	beq.n	8010040 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	699b      	ldr	r3, [r3, #24]
 800ffe4:	693a      	ldr	r2, [r7, #16]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ffea:	68ba      	ldr	r2, [r7, #8]
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d90e      	bls.n	8010010 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	68ba      	ldr	r2, [r7, #8]
 800fff6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	68fa      	ldr	r2, [r7, #12]
 800fffc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fffe:	4b1a      	ldr	r3, [pc, #104]	; (8010068 <prvSwitchTimerLists+0xc4>)
 8010000:	681a      	ldr	r2, [r3, #0]
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	3304      	adds	r3, #4
 8010006:	4619      	mov	r1, r3
 8010008:	4610      	mov	r0, r2
 801000a:	f7fd ffa6 	bl	800df5a <vListInsert>
 801000e:	e017      	b.n	8010040 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010010:	2300      	movs	r3, #0
 8010012:	9300      	str	r3, [sp, #0]
 8010014:	2300      	movs	r3, #0
 8010016:	693a      	ldr	r2, [r7, #16]
 8010018:	2100      	movs	r1, #0
 801001a:	68f8      	ldr	r0, [r7, #12]
 801001c:	f7ff fd5e 	bl	800fadc <xTimerGenericCommand>
 8010020:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d10b      	bne.n	8010040 <prvSwitchTimerLists+0x9c>
 8010028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801002c:	b672      	cpsid	i
 801002e:	f383 8811 	msr	BASEPRI, r3
 8010032:	f3bf 8f6f 	isb	sy
 8010036:	f3bf 8f4f 	dsb	sy
 801003a:	b662      	cpsie	i
 801003c:	603b      	str	r3, [r7, #0]
 801003e:	e7fe      	b.n	801003e <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010040:	4b09      	ldr	r3, [pc, #36]	; (8010068 <prvSwitchTimerLists+0xc4>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d1b0      	bne.n	800ffac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801004a:	4b07      	ldr	r3, [pc, #28]	; (8010068 <prvSwitchTimerLists+0xc4>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010050:	4b06      	ldr	r3, [pc, #24]	; (801006c <prvSwitchTimerLists+0xc8>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	4a04      	ldr	r2, [pc, #16]	; (8010068 <prvSwitchTimerLists+0xc4>)
 8010056:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010058:	4a04      	ldr	r2, [pc, #16]	; (801006c <prvSwitchTimerLists+0xc8>)
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	6013      	str	r3, [r2, #0]
}
 801005e:	bf00      	nop
 8010060:	3718      	adds	r7, #24
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	20003ebc 	.word	0x20003ebc
 801006c:	20003ec0 	.word	0x20003ec0

08010070 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010076:	f000 f947 	bl	8010308 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801007a:	4b15      	ldr	r3, [pc, #84]	; (80100d0 <prvCheckForValidListAndQueue+0x60>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d120      	bne.n	80100c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010082:	4814      	ldr	r0, [pc, #80]	; (80100d4 <prvCheckForValidListAndQueue+0x64>)
 8010084:	f7fd ff18 	bl	800deb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010088:	4813      	ldr	r0, [pc, #76]	; (80100d8 <prvCheckForValidListAndQueue+0x68>)
 801008a:	f7fd ff15 	bl	800deb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801008e:	4b13      	ldr	r3, [pc, #76]	; (80100dc <prvCheckForValidListAndQueue+0x6c>)
 8010090:	4a10      	ldr	r2, [pc, #64]	; (80100d4 <prvCheckForValidListAndQueue+0x64>)
 8010092:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010094:	4b12      	ldr	r3, [pc, #72]	; (80100e0 <prvCheckForValidListAndQueue+0x70>)
 8010096:	4a10      	ldr	r2, [pc, #64]	; (80100d8 <prvCheckForValidListAndQueue+0x68>)
 8010098:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801009a:	2300      	movs	r3, #0
 801009c:	9300      	str	r3, [sp, #0]
 801009e:	4b11      	ldr	r3, [pc, #68]	; (80100e4 <prvCheckForValidListAndQueue+0x74>)
 80100a0:	4a11      	ldr	r2, [pc, #68]	; (80100e8 <prvCheckForValidListAndQueue+0x78>)
 80100a2:	2110      	movs	r1, #16
 80100a4:	200a      	movs	r0, #10
 80100a6:	f7fe f825 	bl	800e0f4 <xQueueGenericCreateStatic>
 80100aa:	4602      	mov	r2, r0
 80100ac:	4b08      	ldr	r3, [pc, #32]	; (80100d0 <prvCheckForValidListAndQueue+0x60>)
 80100ae:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80100b0:	4b07      	ldr	r3, [pc, #28]	; (80100d0 <prvCheckForValidListAndQueue+0x60>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d005      	beq.n	80100c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80100b8:	4b05      	ldr	r3, [pc, #20]	; (80100d0 <prvCheckForValidListAndQueue+0x60>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	490b      	ldr	r1, [pc, #44]	; (80100ec <prvCheckForValidListAndQueue+0x7c>)
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fe fc48 	bl	800e954 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80100c4:	f000 f952 	bl	801036c <vPortExitCritical>
}
 80100c8:	bf00      	nop
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	20003ec4 	.word	0x20003ec4
 80100d4:	20003e94 	.word	0x20003e94
 80100d8:	20003ea8 	.word	0x20003ea8
 80100dc:	20003ebc 	.word	0x20003ebc
 80100e0:	20003ec0 	.word	0x20003ec0
 80100e4:	20003f70 	.word	0x20003f70
 80100e8:	20003ed0 	.word	0x20003ed0
 80100ec:	080151c4 	.word	0x080151c4

080100f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80100f0:	b480      	push	{r7}
 80100f2:	b085      	sub	sp, #20
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	60b9      	str	r1, [r7, #8]
 80100fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	3b04      	subs	r3, #4
 8010100:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010108:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	3b04      	subs	r3, #4
 801010e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	f023 0201 	bic.w	r2, r3, #1
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	3b04      	subs	r3, #4
 801011e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010120:	4a0c      	ldr	r2, [pc, #48]	; (8010154 <pxPortInitialiseStack+0x64>)
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	3b14      	subs	r3, #20
 801012a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801012c:	687a      	ldr	r2, [r7, #4]
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	3b04      	subs	r3, #4
 8010136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	f06f 0202 	mvn.w	r2, #2
 801013e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	3b20      	subs	r3, #32
 8010144:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010146:	68fb      	ldr	r3, [r7, #12]
}
 8010148:	4618      	mov	r0, r3
 801014a:	3714      	adds	r7, #20
 801014c:	46bd      	mov	sp, r7
 801014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010152:	4770      	bx	lr
 8010154:	08010159 	.word	0x08010159

08010158 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010158:	b480      	push	{r7}
 801015a:	b085      	sub	sp, #20
 801015c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801015e:	2300      	movs	r3, #0
 8010160:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010162:	4b13      	ldr	r3, [pc, #76]	; (80101b0 <prvTaskExitError+0x58>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f1b3 3fff 	cmp.w	r3, #4294967295
 801016a:	d00b      	beq.n	8010184 <prvTaskExitError+0x2c>
 801016c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010170:	b672      	cpsid	i
 8010172:	f383 8811 	msr	BASEPRI, r3
 8010176:	f3bf 8f6f 	isb	sy
 801017a:	f3bf 8f4f 	dsb	sy
 801017e:	b662      	cpsie	i
 8010180:	60fb      	str	r3, [r7, #12]
 8010182:	e7fe      	b.n	8010182 <prvTaskExitError+0x2a>
 8010184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010188:	b672      	cpsid	i
 801018a:	f383 8811 	msr	BASEPRI, r3
 801018e:	f3bf 8f6f 	isb	sy
 8010192:	f3bf 8f4f 	dsb	sy
 8010196:	b662      	cpsie	i
 8010198:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801019a:	bf00      	nop
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d0fc      	beq.n	801019c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80101a2:	bf00      	nop
 80101a4:	3714      	adds	r7, #20
 80101a6:	46bd      	mov	sp, r7
 80101a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ac:	4770      	bx	lr
 80101ae:	bf00      	nop
 80101b0:	20000194 	.word	0x20000194
	...

080101c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80101c0:	4b07      	ldr	r3, [pc, #28]	; (80101e0 <pxCurrentTCBConst2>)
 80101c2:	6819      	ldr	r1, [r3, #0]
 80101c4:	6808      	ldr	r0, [r1, #0]
 80101c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101ca:	f380 8809 	msr	PSP, r0
 80101ce:	f3bf 8f6f 	isb	sy
 80101d2:	f04f 0000 	mov.w	r0, #0
 80101d6:	f380 8811 	msr	BASEPRI, r0
 80101da:	4770      	bx	lr
 80101dc:	f3af 8000 	nop.w

080101e0 <pxCurrentTCBConst2>:
 80101e0:	20003994 	.word	0x20003994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80101e4:	bf00      	nop
 80101e6:	bf00      	nop

080101e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80101e8:	4808      	ldr	r0, [pc, #32]	; (801020c <prvPortStartFirstTask+0x24>)
 80101ea:	6800      	ldr	r0, [r0, #0]
 80101ec:	6800      	ldr	r0, [r0, #0]
 80101ee:	f380 8808 	msr	MSP, r0
 80101f2:	f04f 0000 	mov.w	r0, #0
 80101f6:	f380 8814 	msr	CONTROL, r0
 80101fa:	b662      	cpsie	i
 80101fc:	b661      	cpsie	f
 80101fe:	f3bf 8f4f 	dsb	sy
 8010202:	f3bf 8f6f 	isb	sy
 8010206:	df00      	svc	0
 8010208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801020a:	bf00      	nop
 801020c:	e000ed08 	.word	0xe000ed08

08010210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b084      	sub	sp, #16
 8010214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010216:	4b36      	ldr	r3, [pc, #216]	; (80102f0 <xPortStartScheduler+0xe0>)
 8010218:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	781b      	ldrb	r3, [r3, #0]
 801021e:	b2db      	uxtb	r3, r3
 8010220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	22ff      	movs	r2, #255	; 0xff
 8010226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	b2db      	uxtb	r3, r3
 801022e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010230:	78fb      	ldrb	r3, [r7, #3]
 8010232:	b2db      	uxtb	r3, r3
 8010234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010238:	b2da      	uxtb	r2, r3
 801023a:	4b2e      	ldr	r3, [pc, #184]	; (80102f4 <xPortStartScheduler+0xe4>)
 801023c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801023e:	4b2e      	ldr	r3, [pc, #184]	; (80102f8 <xPortStartScheduler+0xe8>)
 8010240:	2207      	movs	r2, #7
 8010242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010244:	e009      	b.n	801025a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010246:	4b2c      	ldr	r3, [pc, #176]	; (80102f8 <xPortStartScheduler+0xe8>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	3b01      	subs	r3, #1
 801024c:	4a2a      	ldr	r2, [pc, #168]	; (80102f8 <xPortStartScheduler+0xe8>)
 801024e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010250:	78fb      	ldrb	r3, [r7, #3]
 8010252:	b2db      	uxtb	r3, r3
 8010254:	005b      	lsls	r3, r3, #1
 8010256:	b2db      	uxtb	r3, r3
 8010258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801025a:	78fb      	ldrb	r3, [r7, #3]
 801025c:	b2db      	uxtb	r3, r3
 801025e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010262:	2b80      	cmp	r3, #128	; 0x80
 8010264:	d0ef      	beq.n	8010246 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010266:	4b24      	ldr	r3, [pc, #144]	; (80102f8 <xPortStartScheduler+0xe8>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	f1c3 0307 	rsb	r3, r3, #7
 801026e:	2b04      	cmp	r3, #4
 8010270:	d00b      	beq.n	801028a <xPortStartScheduler+0x7a>
 8010272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010276:	b672      	cpsid	i
 8010278:	f383 8811 	msr	BASEPRI, r3
 801027c:	f3bf 8f6f 	isb	sy
 8010280:	f3bf 8f4f 	dsb	sy
 8010284:	b662      	cpsie	i
 8010286:	60bb      	str	r3, [r7, #8]
 8010288:	e7fe      	b.n	8010288 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801028a:	4b1b      	ldr	r3, [pc, #108]	; (80102f8 <xPortStartScheduler+0xe8>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	021b      	lsls	r3, r3, #8
 8010290:	4a19      	ldr	r2, [pc, #100]	; (80102f8 <xPortStartScheduler+0xe8>)
 8010292:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010294:	4b18      	ldr	r3, [pc, #96]	; (80102f8 <xPortStartScheduler+0xe8>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801029c:	4a16      	ldr	r2, [pc, #88]	; (80102f8 <xPortStartScheduler+0xe8>)
 801029e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	b2da      	uxtb	r2, r3
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80102a8:	4b14      	ldr	r3, [pc, #80]	; (80102fc <xPortStartScheduler+0xec>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	4a13      	ldr	r2, [pc, #76]	; (80102fc <xPortStartScheduler+0xec>)
 80102ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80102b2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80102b4:	4b11      	ldr	r3, [pc, #68]	; (80102fc <xPortStartScheduler+0xec>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	4a10      	ldr	r2, [pc, #64]	; (80102fc <xPortStartScheduler+0xec>)
 80102ba:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80102be:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80102c0:	f000 f8d4 	bl	801046c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80102c4:	4b0e      	ldr	r3, [pc, #56]	; (8010300 <xPortStartScheduler+0xf0>)
 80102c6:	2200      	movs	r2, #0
 80102c8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80102ca:	f000 f8f3 	bl	80104b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80102ce:	4b0d      	ldr	r3, [pc, #52]	; (8010304 <xPortStartScheduler+0xf4>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	4a0c      	ldr	r2, [pc, #48]	; (8010304 <xPortStartScheduler+0xf4>)
 80102d4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80102d8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80102da:	f7ff ff85 	bl	80101e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80102de:	f7fe ff4f 	bl	800f180 <vTaskSwitchContext>
	prvTaskExitError();
 80102e2:	f7ff ff39 	bl	8010158 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80102e6:	2300      	movs	r3, #0
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	3710      	adds	r7, #16
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}
 80102f0:	e000e400 	.word	0xe000e400
 80102f4:	20003fc0 	.word	0x20003fc0
 80102f8:	20003fc4 	.word	0x20003fc4
 80102fc:	e000ed20 	.word	0xe000ed20
 8010300:	20000194 	.word	0x20000194
 8010304:	e000ef34 	.word	0xe000ef34

08010308 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010312:	b672      	cpsid	i
 8010314:	f383 8811 	msr	BASEPRI, r3
 8010318:	f3bf 8f6f 	isb	sy
 801031c:	f3bf 8f4f 	dsb	sy
 8010320:	b662      	cpsie	i
 8010322:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010324:	4b0f      	ldr	r3, [pc, #60]	; (8010364 <vPortEnterCritical+0x5c>)
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	3301      	adds	r3, #1
 801032a:	4a0e      	ldr	r2, [pc, #56]	; (8010364 <vPortEnterCritical+0x5c>)
 801032c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801032e:	4b0d      	ldr	r3, [pc, #52]	; (8010364 <vPortEnterCritical+0x5c>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	2b01      	cmp	r3, #1
 8010334:	d110      	bne.n	8010358 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010336:	4b0c      	ldr	r3, [pc, #48]	; (8010368 <vPortEnterCritical+0x60>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	b2db      	uxtb	r3, r3
 801033c:	2b00      	cmp	r3, #0
 801033e:	d00b      	beq.n	8010358 <vPortEnterCritical+0x50>
 8010340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010344:	b672      	cpsid	i
 8010346:	f383 8811 	msr	BASEPRI, r3
 801034a:	f3bf 8f6f 	isb	sy
 801034e:	f3bf 8f4f 	dsb	sy
 8010352:	b662      	cpsie	i
 8010354:	603b      	str	r3, [r7, #0]
 8010356:	e7fe      	b.n	8010356 <vPortEnterCritical+0x4e>
	}
}
 8010358:	bf00      	nop
 801035a:	370c      	adds	r7, #12
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr
 8010364:	20000194 	.word	0x20000194
 8010368:	e000ed04 	.word	0xe000ed04

0801036c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801036c:	b480      	push	{r7}
 801036e:	b083      	sub	sp, #12
 8010370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010372:	4b12      	ldr	r3, [pc, #72]	; (80103bc <vPortExitCritical+0x50>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d10b      	bne.n	8010392 <vPortExitCritical+0x26>
 801037a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801037e:	b672      	cpsid	i
 8010380:	f383 8811 	msr	BASEPRI, r3
 8010384:	f3bf 8f6f 	isb	sy
 8010388:	f3bf 8f4f 	dsb	sy
 801038c:	b662      	cpsie	i
 801038e:	607b      	str	r3, [r7, #4]
 8010390:	e7fe      	b.n	8010390 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8010392:	4b0a      	ldr	r3, [pc, #40]	; (80103bc <vPortExitCritical+0x50>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	3b01      	subs	r3, #1
 8010398:	4a08      	ldr	r2, [pc, #32]	; (80103bc <vPortExitCritical+0x50>)
 801039a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801039c:	4b07      	ldr	r3, [pc, #28]	; (80103bc <vPortExitCritical+0x50>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d104      	bne.n	80103ae <vPortExitCritical+0x42>
 80103a4:	2300      	movs	r3, #0
 80103a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80103ae:	bf00      	nop
 80103b0:	370c      	adds	r7, #12
 80103b2:	46bd      	mov	sp, r7
 80103b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b8:	4770      	bx	lr
 80103ba:	bf00      	nop
 80103bc:	20000194 	.word	0x20000194

080103c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80103c0:	f3ef 8009 	mrs	r0, PSP
 80103c4:	f3bf 8f6f 	isb	sy
 80103c8:	4b15      	ldr	r3, [pc, #84]	; (8010420 <pxCurrentTCBConst>)
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	f01e 0f10 	tst.w	lr, #16
 80103d0:	bf08      	it	eq
 80103d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80103d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103da:	6010      	str	r0, [r2, #0]
 80103dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80103e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80103e4:	b672      	cpsid	i
 80103e6:	f380 8811 	msr	BASEPRI, r0
 80103ea:	f3bf 8f4f 	dsb	sy
 80103ee:	f3bf 8f6f 	isb	sy
 80103f2:	b662      	cpsie	i
 80103f4:	f7fe fec4 	bl	800f180 <vTaskSwitchContext>
 80103f8:	f04f 0000 	mov.w	r0, #0
 80103fc:	f380 8811 	msr	BASEPRI, r0
 8010400:	bc09      	pop	{r0, r3}
 8010402:	6819      	ldr	r1, [r3, #0]
 8010404:	6808      	ldr	r0, [r1, #0]
 8010406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801040a:	f01e 0f10 	tst.w	lr, #16
 801040e:	bf08      	it	eq
 8010410:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010414:	f380 8809 	msr	PSP, r0
 8010418:	f3bf 8f6f 	isb	sy
 801041c:	4770      	bx	lr
 801041e:	bf00      	nop

08010420 <pxCurrentTCBConst>:
 8010420:	20003994 	.word	0x20003994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010424:	bf00      	nop
 8010426:	bf00      	nop

08010428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af00      	add	r7, sp, #0
	__asm volatile
 801042e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010432:	b672      	cpsid	i
 8010434:	f383 8811 	msr	BASEPRI, r3
 8010438:	f3bf 8f6f 	isb	sy
 801043c:	f3bf 8f4f 	dsb	sy
 8010440:	b662      	cpsie	i
 8010442:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010444:	f7fe fde2 	bl	800f00c <xTaskIncrementTick>
 8010448:	4603      	mov	r3, r0
 801044a:	2b00      	cmp	r3, #0
 801044c:	d003      	beq.n	8010456 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801044e:	4b06      	ldr	r3, [pc, #24]	; (8010468 <SysTick_Handler+0x40>)
 8010450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010454:	601a      	str	r2, [r3, #0]
 8010456:	2300      	movs	r3, #0
 8010458:	603b      	str	r3, [r7, #0]
	__asm volatile
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8010460:	bf00      	nop
 8010462:	3708      	adds	r7, #8
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}
 8010468:	e000ed04 	.word	0xe000ed04

0801046c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801046c:	b480      	push	{r7}
 801046e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010470:	4b0b      	ldr	r3, [pc, #44]	; (80104a0 <vPortSetupTimerInterrupt+0x34>)
 8010472:	2200      	movs	r2, #0
 8010474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010476:	4b0b      	ldr	r3, [pc, #44]	; (80104a4 <vPortSetupTimerInterrupt+0x38>)
 8010478:	2200      	movs	r2, #0
 801047a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801047c:	4b0a      	ldr	r3, [pc, #40]	; (80104a8 <vPortSetupTimerInterrupt+0x3c>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	4a0a      	ldr	r2, [pc, #40]	; (80104ac <vPortSetupTimerInterrupt+0x40>)
 8010482:	fba2 2303 	umull	r2, r3, r2, r3
 8010486:	099b      	lsrs	r3, r3, #6
 8010488:	4a09      	ldr	r2, [pc, #36]	; (80104b0 <vPortSetupTimerInterrupt+0x44>)
 801048a:	3b01      	subs	r3, #1
 801048c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801048e:	4b04      	ldr	r3, [pc, #16]	; (80104a0 <vPortSetupTimerInterrupt+0x34>)
 8010490:	2207      	movs	r2, #7
 8010492:	601a      	str	r2, [r3, #0]
}
 8010494:	bf00      	nop
 8010496:	46bd      	mov	sp, r7
 8010498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049c:	4770      	bx	lr
 801049e:	bf00      	nop
 80104a0:	e000e010 	.word	0xe000e010
 80104a4:	e000e018 	.word	0xe000e018
 80104a8:	20000188 	.word	0x20000188
 80104ac:	10624dd3 	.word	0x10624dd3
 80104b0:	e000e014 	.word	0xe000e014

080104b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80104b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80104c4 <vPortEnableVFP+0x10>
 80104b8:	6801      	ldr	r1, [r0, #0]
 80104ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80104be:	6001      	str	r1, [r0, #0]
 80104c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80104c2:	bf00      	nop
 80104c4:	e000ed88 	.word	0xe000ed88

080104c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80104c8:	b480      	push	{r7}
 80104ca:	b085      	sub	sp, #20
 80104cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80104ce:	f3ef 8305 	mrs	r3, IPSR
 80104d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	2b0f      	cmp	r3, #15
 80104d8:	d915      	bls.n	8010506 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80104da:	4a18      	ldr	r2, [pc, #96]	; (801053c <vPortValidateInterruptPriority+0x74>)
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	4413      	add	r3, r2
 80104e0:	781b      	ldrb	r3, [r3, #0]
 80104e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80104e4:	4b16      	ldr	r3, [pc, #88]	; (8010540 <vPortValidateInterruptPriority+0x78>)
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	7afa      	ldrb	r2, [r7, #11]
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d20b      	bcs.n	8010506 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80104ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f2:	b672      	cpsid	i
 80104f4:	f383 8811 	msr	BASEPRI, r3
 80104f8:	f3bf 8f6f 	isb	sy
 80104fc:	f3bf 8f4f 	dsb	sy
 8010500:	b662      	cpsie	i
 8010502:	607b      	str	r3, [r7, #4]
 8010504:	e7fe      	b.n	8010504 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010506:	4b0f      	ldr	r3, [pc, #60]	; (8010544 <vPortValidateInterruptPriority+0x7c>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801050e:	4b0e      	ldr	r3, [pc, #56]	; (8010548 <vPortValidateInterruptPriority+0x80>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	429a      	cmp	r2, r3
 8010514:	d90b      	bls.n	801052e <vPortValidateInterruptPriority+0x66>
 8010516:	f04f 0350 	mov.w	r3, #80	; 0x50
 801051a:	b672      	cpsid	i
 801051c:	f383 8811 	msr	BASEPRI, r3
 8010520:	f3bf 8f6f 	isb	sy
 8010524:	f3bf 8f4f 	dsb	sy
 8010528:	b662      	cpsie	i
 801052a:	603b      	str	r3, [r7, #0]
 801052c:	e7fe      	b.n	801052c <vPortValidateInterruptPriority+0x64>
	}
 801052e:	bf00      	nop
 8010530:	3714      	adds	r7, #20
 8010532:	46bd      	mov	sp, r7
 8010534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010538:	4770      	bx	lr
 801053a:	bf00      	nop
 801053c:	e000e3f0 	.word	0xe000e3f0
 8010540:	20003fc0 	.word	0x20003fc0
 8010544:	e000ed0c 	.word	0xe000ed0c
 8010548:	20003fc4 	.word	0x20003fc4

0801054c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b08a      	sub	sp, #40	; 0x28
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010554:	2300      	movs	r3, #0
 8010556:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010558:	f7fe fc9c 	bl	800ee94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801055c:	4b5a      	ldr	r3, [pc, #360]	; (80106c8 <pvPortMalloc+0x17c>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d101      	bne.n	8010568 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010564:	f000 f916 	bl	8010794 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010568:	4b58      	ldr	r3, [pc, #352]	; (80106cc <pvPortMalloc+0x180>)
 801056a:	681a      	ldr	r2, [r3, #0]
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	4013      	ands	r3, r2
 8010570:	2b00      	cmp	r3, #0
 8010572:	f040 8090 	bne.w	8010696 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d01e      	beq.n	80105ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801057c:	2208      	movs	r2, #8
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	4413      	add	r3, r2
 8010582:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f003 0307 	and.w	r3, r3, #7
 801058a:	2b00      	cmp	r3, #0
 801058c:	d015      	beq.n	80105ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f023 0307 	bic.w	r3, r3, #7
 8010594:	3308      	adds	r3, #8
 8010596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f003 0307 	and.w	r3, r3, #7
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d00b      	beq.n	80105ba <pvPortMalloc+0x6e>
 80105a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a6:	b672      	cpsid	i
 80105a8:	f383 8811 	msr	BASEPRI, r3
 80105ac:	f3bf 8f6f 	isb	sy
 80105b0:	f3bf 8f4f 	dsb	sy
 80105b4:	b662      	cpsie	i
 80105b6:	617b      	str	r3, [r7, #20]
 80105b8:	e7fe      	b.n	80105b8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d06a      	beq.n	8010696 <pvPortMalloc+0x14a>
 80105c0:	4b43      	ldr	r3, [pc, #268]	; (80106d0 <pvPortMalloc+0x184>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	687a      	ldr	r2, [r7, #4]
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d865      	bhi.n	8010696 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80105ca:	4b42      	ldr	r3, [pc, #264]	; (80106d4 <pvPortMalloc+0x188>)
 80105cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80105ce:	4b41      	ldr	r3, [pc, #260]	; (80106d4 <pvPortMalloc+0x188>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105d4:	e004      	b.n	80105e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80105d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80105da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	687a      	ldr	r2, [r7, #4]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d903      	bls.n	80105f2 <pvPortMalloc+0xa6>
 80105ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d1f1      	bne.n	80105d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80105f2:	4b35      	ldr	r3, [pc, #212]	; (80106c8 <pvPortMalloc+0x17c>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d04c      	beq.n	8010696 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80105fc:	6a3b      	ldr	r3, [r7, #32]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	2208      	movs	r2, #8
 8010602:	4413      	add	r3, r2
 8010604:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010608:	681a      	ldr	r2, [r3, #0]
 801060a:	6a3b      	ldr	r3, [r7, #32]
 801060c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010610:	685a      	ldr	r2, [r3, #4]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	1ad2      	subs	r2, r2, r3
 8010616:	2308      	movs	r3, #8
 8010618:	005b      	lsls	r3, r3, #1
 801061a:	429a      	cmp	r2, r3
 801061c:	d920      	bls.n	8010660 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801061e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	4413      	add	r3, r2
 8010624:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010626:	69bb      	ldr	r3, [r7, #24]
 8010628:	f003 0307 	and.w	r3, r3, #7
 801062c:	2b00      	cmp	r3, #0
 801062e:	d00b      	beq.n	8010648 <pvPortMalloc+0xfc>
 8010630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010634:	b672      	cpsid	i
 8010636:	f383 8811 	msr	BASEPRI, r3
 801063a:	f3bf 8f6f 	isb	sy
 801063e:	f3bf 8f4f 	dsb	sy
 8010642:	b662      	cpsie	i
 8010644:	613b      	str	r3, [r7, #16]
 8010646:	e7fe      	b.n	8010646 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064a:	685a      	ldr	r2, [r3, #4]
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	1ad2      	subs	r2, r2, r3
 8010650:	69bb      	ldr	r3, [r7, #24]
 8010652:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010656:	687a      	ldr	r2, [r7, #4]
 8010658:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801065a:	69b8      	ldr	r0, [r7, #24]
 801065c:	f000 f8fc 	bl	8010858 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010660:	4b1b      	ldr	r3, [pc, #108]	; (80106d0 <pvPortMalloc+0x184>)
 8010662:	681a      	ldr	r2, [r3, #0]
 8010664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	1ad3      	subs	r3, r2, r3
 801066a:	4a19      	ldr	r2, [pc, #100]	; (80106d0 <pvPortMalloc+0x184>)
 801066c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801066e:	4b18      	ldr	r3, [pc, #96]	; (80106d0 <pvPortMalloc+0x184>)
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	4b19      	ldr	r3, [pc, #100]	; (80106d8 <pvPortMalloc+0x18c>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	429a      	cmp	r2, r3
 8010678:	d203      	bcs.n	8010682 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801067a:	4b15      	ldr	r3, [pc, #84]	; (80106d0 <pvPortMalloc+0x184>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	4a16      	ldr	r2, [pc, #88]	; (80106d8 <pvPortMalloc+0x18c>)
 8010680:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010684:	685a      	ldr	r2, [r3, #4]
 8010686:	4b11      	ldr	r3, [pc, #68]	; (80106cc <pvPortMalloc+0x180>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	431a      	orrs	r2, r3
 801068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010692:	2200      	movs	r2, #0
 8010694:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010696:	f7fe fc0b 	bl	800eeb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801069a:	69fb      	ldr	r3, [r7, #28]
 801069c:	f003 0307 	and.w	r3, r3, #7
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d00b      	beq.n	80106bc <pvPortMalloc+0x170>
 80106a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a8:	b672      	cpsid	i
 80106aa:	f383 8811 	msr	BASEPRI, r3
 80106ae:	f3bf 8f6f 	isb	sy
 80106b2:	f3bf 8f4f 	dsb	sy
 80106b6:	b662      	cpsie	i
 80106b8:	60fb      	str	r3, [r7, #12]
 80106ba:	e7fe      	b.n	80106ba <pvPortMalloc+0x16e>
	return pvReturn;
 80106bc:	69fb      	ldr	r3, [r7, #28]
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3728      	adds	r7, #40	; 0x28
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	bf00      	nop
 80106c8:	20010320 	.word	0x20010320
 80106cc:	2001032c 	.word	0x2001032c
 80106d0:	20010324 	.word	0x20010324
 80106d4:	20010318 	.word	0x20010318
 80106d8:	20010328 	.word	0x20010328

080106dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b086      	sub	sp, #24
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d04a      	beq.n	8010784 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80106ee:	2308      	movs	r3, #8
 80106f0:	425b      	negs	r3, r3
 80106f2:	697a      	ldr	r2, [r7, #20]
 80106f4:	4413      	add	r3, r2
 80106f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	685a      	ldr	r2, [r3, #4]
 8010700:	4b22      	ldr	r3, [pc, #136]	; (801078c <vPortFree+0xb0>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	4013      	ands	r3, r2
 8010706:	2b00      	cmp	r3, #0
 8010708:	d10b      	bne.n	8010722 <vPortFree+0x46>
 801070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801070e:	b672      	cpsid	i
 8010710:	f383 8811 	msr	BASEPRI, r3
 8010714:	f3bf 8f6f 	isb	sy
 8010718:	f3bf 8f4f 	dsb	sy
 801071c:	b662      	cpsie	i
 801071e:	60fb      	str	r3, [r7, #12]
 8010720:	e7fe      	b.n	8010720 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d00b      	beq.n	8010742 <vPortFree+0x66>
 801072a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801072e:	b672      	cpsid	i
 8010730:	f383 8811 	msr	BASEPRI, r3
 8010734:	f3bf 8f6f 	isb	sy
 8010738:	f3bf 8f4f 	dsb	sy
 801073c:	b662      	cpsie	i
 801073e:	60bb      	str	r3, [r7, #8]
 8010740:	e7fe      	b.n	8010740 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	685a      	ldr	r2, [r3, #4]
 8010746:	4b11      	ldr	r3, [pc, #68]	; (801078c <vPortFree+0xb0>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	4013      	ands	r3, r2
 801074c:	2b00      	cmp	r3, #0
 801074e:	d019      	beq.n	8010784 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d115      	bne.n	8010784 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	685a      	ldr	r2, [r3, #4]
 801075c:	4b0b      	ldr	r3, [pc, #44]	; (801078c <vPortFree+0xb0>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	43db      	mvns	r3, r3
 8010762:	401a      	ands	r2, r3
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010768:	f7fe fb94 	bl	800ee94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	685a      	ldr	r2, [r3, #4]
 8010770:	4b07      	ldr	r3, [pc, #28]	; (8010790 <vPortFree+0xb4>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	4413      	add	r3, r2
 8010776:	4a06      	ldr	r2, [pc, #24]	; (8010790 <vPortFree+0xb4>)
 8010778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801077a:	6938      	ldr	r0, [r7, #16]
 801077c:	f000 f86c 	bl	8010858 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010780:	f7fe fb96 	bl	800eeb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010784:	bf00      	nop
 8010786:	3718      	adds	r7, #24
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	2001032c 	.word	0x2001032c
 8010790:	20010324 	.word	0x20010324

08010794 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010794:	b480      	push	{r7}
 8010796:	b085      	sub	sp, #20
 8010798:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801079a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801079e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80107a0:	4b27      	ldr	r3, [pc, #156]	; (8010840 <prvHeapInit+0xac>)
 80107a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	f003 0307 	and.w	r3, r3, #7
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d00c      	beq.n	80107c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	3307      	adds	r3, #7
 80107b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	f023 0307 	bic.w	r3, r3, #7
 80107ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80107bc:	68ba      	ldr	r2, [r7, #8]
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	1ad3      	subs	r3, r2, r3
 80107c2:	4a1f      	ldr	r2, [pc, #124]	; (8010840 <prvHeapInit+0xac>)
 80107c4:	4413      	add	r3, r2
 80107c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80107cc:	4a1d      	ldr	r2, [pc, #116]	; (8010844 <prvHeapInit+0xb0>)
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80107d2:	4b1c      	ldr	r3, [pc, #112]	; (8010844 <prvHeapInit+0xb0>)
 80107d4:	2200      	movs	r2, #0
 80107d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	68ba      	ldr	r2, [r7, #8]
 80107dc:	4413      	add	r3, r2
 80107de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80107e0:	2208      	movs	r2, #8
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	1a9b      	subs	r3, r3, r2
 80107e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	f023 0307 	bic.w	r3, r3, #7
 80107ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	4a15      	ldr	r2, [pc, #84]	; (8010848 <prvHeapInit+0xb4>)
 80107f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80107f6:	4b14      	ldr	r3, [pc, #80]	; (8010848 <prvHeapInit+0xb4>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	2200      	movs	r2, #0
 80107fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80107fe:	4b12      	ldr	r3, [pc, #72]	; (8010848 <prvHeapInit+0xb4>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	2200      	movs	r2, #0
 8010804:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	68fa      	ldr	r2, [r7, #12]
 801080e:	1ad2      	subs	r2, r2, r3
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010814:	4b0c      	ldr	r3, [pc, #48]	; (8010848 <prvHeapInit+0xb4>)
 8010816:	681a      	ldr	r2, [r3, #0]
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	685b      	ldr	r3, [r3, #4]
 8010820:	4a0a      	ldr	r2, [pc, #40]	; (801084c <prvHeapInit+0xb8>)
 8010822:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	685b      	ldr	r3, [r3, #4]
 8010828:	4a09      	ldr	r2, [pc, #36]	; (8010850 <prvHeapInit+0xbc>)
 801082a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801082c:	4b09      	ldr	r3, [pc, #36]	; (8010854 <prvHeapInit+0xc0>)
 801082e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010832:	601a      	str	r2, [r3, #0]
}
 8010834:	bf00      	nop
 8010836:	3714      	adds	r7, #20
 8010838:	46bd      	mov	sp, r7
 801083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083e:	4770      	bx	lr
 8010840:	20003fc8 	.word	0x20003fc8
 8010844:	20010318 	.word	0x20010318
 8010848:	20010320 	.word	0x20010320
 801084c:	20010328 	.word	0x20010328
 8010850:	20010324 	.word	0x20010324
 8010854:	2001032c 	.word	0x2001032c

08010858 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010858:	b480      	push	{r7}
 801085a:	b085      	sub	sp, #20
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010860:	4b28      	ldr	r3, [pc, #160]	; (8010904 <prvInsertBlockIntoFreeList+0xac>)
 8010862:	60fb      	str	r3, [r7, #12]
 8010864:	e002      	b.n	801086c <prvInsertBlockIntoFreeList+0x14>
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	60fb      	str	r3, [r7, #12]
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	687a      	ldr	r2, [r7, #4]
 8010872:	429a      	cmp	r2, r3
 8010874:	d8f7      	bhi.n	8010866 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	68ba      	ldr	r2, [r7, #8]
 8010880:	4413      	add	r3, r2
 8010882:	687a      	ldr	r2, [r7, #4]
 8010884:	429a      	cmp	r2, r3
 8010886:	d108      	bne.n	801089a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	685a      	ldr	r2, [r3, #4]
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	685b      	ldr	r3, [r3, #4]
 8010890:	441a      	add	r2, r3
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	685b      	ldr	r3, [r3, #4]
 80108a2:	68ba      	ldr	r2, [r7, #8]
 80108a4:	441a      	add	r2, r3
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d118      	bne.n	80108e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	681a      	ldr	r2, [r3, #0]
 80108b2:	4b15      	ldr	r3, [pc, #84]	; (8010908 <prvInsertBlockIntoFreeList+0xb0>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d00d      	beq.n	80108d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	685a      	ldr	r2, [r3, #4]
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	685b      	ldr	r3, [r3, #4]
 80108c4:	441a      	add	r2, r3
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	681a      	ldr	r2, [r3, #0]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	601a      	str	r2, [r3, #0]
 80108d4:	e008      	b.n	80108e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80108d6:	4b0c      	ldr	r3, [pc, #48]	; (8010908 <prvInsertBlockIntoFreeList+0xb0>)
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	601a      	str	r2, [r3, #0]
 80108de:	e003      	b.n	80108e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	681a      	ldr	r2, [r3, #0]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80108e8:	68fa      	ldr	r2, [r7, #12]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d002      	beq.n	80108f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	687a      	ldr	r2, [r7, #4]
 80108f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80108f6:	bf00      	nop
 80108f8:	3714      	adds	r7, #20
 80108fa:	46bd      	mov	sp, r7
 80108fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010900:	4770      	bx	lr
 8010902:	bf00      	nop
 8010904:	20010318 	.word	0x20010318
 8010908:	20010320 	.word	0x20010320

0801090c <__errno>:
 801090c:	4b01      	ldr	r3, [pc, #4]	; (8010914 <__errno+0x8>)
 801090e:	6818      	ldr	r0, [r3, #0]
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop
 8010914:	20000198 	.word	0x20000198

08010918 <__libc_init_array>:
 8010918:	b570      	push	{r4, r5, r6, lr}
 801091a:	4e0d      	ldr	r6, [pc, #52]	; (8010950 <__libc_init_array+0x38>)
 801091c:	4c0d      	ldr	r4, [pc, #52]	; (8010954 <__libc_init_array+0x3c>)
 801091e:	1ba4      	subs	r4, r4, r6
 8010920:	10a4      	asrs	r4, r4, #2
 8010922:	2500      	movs	r5, #0
 8010924:	42a5      	cmp	r5, r4
 8010926:	d109      	bne.n	801093c <__libc_init_array+0x24>
 8010928:	4e0b      	ldr	r6, [pc, #44]	; (8010958 <__libc_init_array+0x40>)
 801092a:	4c0c      	ldr	r4, [pc, #48]	; (801095c <__libc_init_array+0x44>)
 801092c:	f004 f996 	bl	8014c5c <_init>
 8010930:	1ba4      	subs	r4, r4, r6
 8010932:	10a4      	asrs	r4, r4, #2
 8010934:	2500      	movs	r5, #0
 8010936:	42a5      	cmp	r5, r4
 8010938:	d105      	bne.n	8010946 <__libc_init_array+0x2e>
 801093a:	bd70      	pop	{r4, r5, r6, pc}
 801093c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010940:	4798      	blx	r3
 8010942:	3501      	adds	r5, #1
 8010944:	e7ee      	b.n	8010924 <__libc_init_array+0xc>
 8010946:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801094a:	4798      	blx	r3
 801094c:	3501      	adds	r5, #1
 801094e:	e7f2      	b.n	8010936 <__libc_init_array+0x1e>
 8010950:	08015c68 	.word	0x08015c68
 8010954:	08015c68 	.word	0x08015c68
 8010958:	08015c68 	.word	0x08015c68
 801095c:	08015c6c 	.word	0x08015c6c

08010960 <memcpy>:
 8010960:	b510      	push	{r4, lr}
 8010962:	1e43      	subs	r3, r0, #1
 8010964:	440a      	add	r2, r1
 8010966:	4291      	cmp	r1, r2
 8010968:	d100      	bne.n	801096c <memcpy+0xc>
 801096a:	bd10      	pop	{r4, pc}
 801096c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010970:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010974:	e7f7      	b.n	8010966 <memcpy+0x6>

08010976 <memset>:
 8010976:	4402      	add	r2, r0
 8010978:	4603      	mov	r3, r0
 801097a:	4293      	cmp	r3, r2
 801097c:	d100      	bne.n	8010980 <memset+0xa>
 801097e:	4770      	bx	lr
 8010980:	f803 1b01 	strb.w	r1, [r3], #1
 8010984:	e7f9      	b.n	801097a <memset+0x4>

08010986 <__cvt>:
 8010986:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010988:	ed2d 8b02 	vpush	{d8}
 801098c:	eeb0 8b40 	vmov.f64	d8, d0
 8010990:	b085      	sub	sp, #20
 8010992:	4617      	mov	r7, r2
 8010994:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010996:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010998:	ee18 2a90 	vmov	r2, s17
 801099c:	f025 0520 	bic.w	r5, r5, #32
 80109a0:	2a00      	cmp	r2, #0
 80109a2:	bfb6      	itet	lt
 80109a4:	222d      	movlt	r2, #45	; 0x2d
 80109a6:	2200      	movge	r2, #0
 80109a8:	eeb1 8b40 	vneglt.f64	d8, d0
 80109ac:	2d46      	cmp	r5, #70	; 0x46
 80109ae:	460c      	mov	r4, r1
 80109b0:	701a      	strb	r2, [r3, #0]
 80109b2:	d004      	beq.n	80109be <__cvt+0x38>
 80109b4:	2d45      	cmp	r5, #69	; 0x45
 80109b6:	d100      	bne.n	80109ba <__cvt+0x34>
 80109b8:	3401      	adds	r4, #1
 80109ba:	2102      	movs	r1, #2
 80109bc:	e000      	b.n	80109c0 <__cvt+0x3a>
 80109be:	2103      	movs	r1, #3
 80109c0:	ab03      	add	r3, sp, #12
 80109c2:	9301      	str	r3, [sp, #4]
 80109c4:	ab02      	add	r3, sp, #8
 80109c6:	9300      	str	r3, [sp, #0]
 80109c8:	4622      	mov	r2, r4
 80109ca:	4633      	mov	r3, r6
 80109cc:	eeb0 0b48 	vmov.f64	d0, d8
 80109d0:	f001 fe5a 	bl	8012688 <_dtoa_r>
 80109d4:	2d47      	cmp	r5, #71	; 0x47
 80109d6:	d101      	bne.n	80109dc <__cvt+0x56>
 80109d8:	07fb      	lsls	r3, r7, #31
 80109da:	d51e      	bpl.n	8010a1a <__cvt+0x94>
 80109dc:	2d46      	cmp	r5, #70	; 0x46
 80109de:	eb00 0304 	add.w	r3, r0, r4
 80109e2:	d10c      	bne.n	80109fe <__cvt+0x78>
 80109e4:	7802      	ldrb	r2, [r0, #0]
 80109e6:	2a30      	cmp	r2, #48	; 0x30
 80109e8:	d107      	bne.n	80109fa <__cvt+0x74>
 80109ea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80109ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109f2:	bf1c      	itt	ne
 80109f4:	f1c4 0401 	rsbne	r4, r4, #1
 80109f8:	6034      	strne	r4, [r6, #0]
 80109fa:	6832      	ldr	r2, [r6, #0]
 80109fc:	4413      	add	r3, r2
 80109fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a06:	d007      	beq.n	8010a18 <__cvt+0x92>
 8010a08:	2130      	movs	r1, #48	; 0x30
 8010a0a:	9a03      	ldr	r2, [sp, #12]
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d204      	bcs.n	8010a1a <__cvt+0x94>
 8010a10:	1c54      	adds	r4, r2, #1
 8010a12:	9403      	str	r4, [sp, #12]
 8010a14:	7011      	strb	r1, [r2, #0]
 8010a16:	e7f8      	b.n	8010a0a <__cvt+0x84>
 8010a18:	9303      	str	r3, [sp, #12]
 8010a1a:	9b03      	ldr	r3, [sp, #12]
 8010a1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a1e:	1a1b      	subs	r3, r3, r0
 8010a20:	6013      	str	r3, [r2, #0]
 8010a22:	b005      	add	sp, #20
 8010a24:	ecbd 8b02 	vpop	{d8}
 8010a28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010a2a <__exponent>:
 8010a2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a2c:	2900      	cmp	r1, #0
 8010a2e:	4604      	mov	r4, r0
 8010a30:	bfba      	itte	lt
 8010a32:	4249      	neglt	r1, r1
 8010a34:	232d      	movlt	r3, #45	; 0x2d
 8010a36:	232b      	movge	r3, #43	; 0x2b
 8010a38:	2909      	cmp	r1, #9
 8010a3a:	f804 2b02 	strb.w	r2, [r4], #2
 8010a3e:	7043      	strb	r3, [r0, #1]
 8010a40:	dd20      	ble.n	8010a84 <__exponent+0x5a>
 8010a42:	f10d 0307 	add.w	r3, sp, #7
 8010a46:	461f      	mov	r7, r3
 8010a48:	260a      	movs	r6, #10
 8010a4a:	fb91 f5f6 	sdiv	r5, r1, r6
 8010a4e:	fb06 1115 	mls	r1, r6, r5, r1
 8010a52:	3130      	adds	r1, #48	; 0x30
 8010a54:	2d09      	cmp	r5, #9
 8010a56:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010a5a:	f103 32ff 	add.w	r2, r3, #4294967295
 8010a5e:	4629      	mov	r1, r5
 8010a60:	dc09      	bgt.n	8010a76 <__exponent+0x4c>
 8010a62:	3130      	adds	r1, #48	; 0x30
 8010a64:	3b02      	subs	r3, #2
 8010a66:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010a6a:	42bb      	cmp	r3, r7
 8010a6c:	4622      	mov	r2, r4
 8010a6e:	d304      	bcc.n	8010a7a <__exponent+0x50>
 8010a70:	1a10      	subs	r0, r2, r0
 8010a72:	b003      	add	sp, #12
 8010a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a76:	4613      	mov	r3, r2
 8010a78:	e7e7      	b.n	8010a4a <__exponent+0x20>
 8010a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a7e:	f804 2b01 	strb.w	r2, [r4], #1
 8010a82:	e7f2      	b.n	8010a6a <__exponent+0x40>
 8010a84:	2330      	movs	r3, #48	; 0x30
 8010a86:	4419      	add	r1, r3
 8010a88:	7083      	strb	r3, [r0, #2]
 8010a8a:	1d02      	adds	r2, r0, #4
 8010a8c:	70c1      	strb	r1, [r0, #3]
 8010a8e:	e7ef      	b.n	8010a70 <__exponent+0x46>

08010a90 <_printf_float>:
 8010a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a94:	b08d      	sub	sp, #52	; 0x34
 8010a96:	460c      	mov	r4, r1
 8010a98:	4616      	mov	r6, r2
 8010a9a:	461f      	mov	r7, r3
 8010a9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010aa0:	4605      	mov	r5, r0
 8010aa2:	f002 ffe3 	bl	8013a6c <_localeconv_r>
 8010aa6:	f8d0 b000 	ldr.w	fp, [r0]
 8010aaa:	4658      	mov	r0, fp
 8010aac:	f7ef fbc8 	bl	8000240 <strlen>
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8010ab4:	f8d8 3000 	ldr.w	r3, [r8]
 8010ab8:	9005      	str	r0, [sp, #20]
 8010aba:	3307      	adds	r3, #7
 8010abc:	f023 0307 	bic.w	r3, r3, #7
 8010ac0:	f103 0108 	add.w	r1, r3, #8
 8010ac4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010ac8:	6822      	ldr	r2, [r4, #0]
 8010aca:	f8c8 1000 	str.w	r1, [r8]
 8010ace:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010ad2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010ad6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8010d60 <_printf_float+0x2d0>
 8010ada:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010ade:	eeb0 6bc0 	vabs.f64	d6, d0
 8010ae2:	eeb4 6b47 	vcmp.f64	d6, d7
 8010ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aea:	dd24      	ble.n	8010b36 <_printf_float+0xa6>
 8010aec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af4:	d502      	bpl.n	8010afc <_printf_float+0x6c>
 8010af6:	232d      	movs	r3, #45	; 0x2d
 8010af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010afc:	499a      	ldr	r1, [pc, #616]	; (8010d68 <_printf_float+0x2d8>)
 8010afe:	4b9b      	ldr	r3, [pc, #620]	; (8010d6c <_printf_float+0x2dc>)
 8010b00:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010b04:	bf8c      	ite	hi
 8010b06:	4688      	movhi	r8, r1
 8010b08:	4698      	movls	r8, r3
 8010b0a:	f022 0204 	bic.w	r2, r2, #4
 8010b0e:	2303      	movs	r3, #3
 8010b10:	6123      	str	r3, [r4, #16]
 8010b12:	6022      	str	r2, [r4, #0]
 8010b14:	f04f 0a00 	mov.w	sl, #0
 8010b18:	9700      	str	r7, [sp, #0]
 8010b1a:	4633      	mov	r3, r6
 8010b1c:	aa0b      	add	r2, sp, #44	; 0x2c
 8010b1e:	4621      	mov	r1, r4
 8010b20:	4628      	mov	r0, r5
 8010b22:	f000 f9e1 	bl	8010ee8 <_printf_common>
 8010b26:	3001      	adds	r0, #1
 8010b28:	f040 8089 	bne.w	8010c3e <_printf_float+0x1ae>
 8010b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b30:	b00d      	add	sp, #52	; 0x34
 8010b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b36:	eeb4 0b40 	vcmp.f64	d0, d0
 8010b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b3e:	d702      	bvc.n	8010b46 <_printf_float+0xb6>
 8010b40:	498b      	ldr	r1, [pc, #556]	; (8010d70 <_printf_float+0x2e0>)
 8010b42:	4b8c      	ldr	r3, [pc, #560]	; (8010d74 <_printf_float+0x2e4>)
 8010b44:	e7dc      	b.n	8010b00 <_printf_float+0x70>
 8010b46:	6861      	ldr	r1, [r4, #4]
 8010b48:	1c4b      	adds	r3, r1, #1
 8010b4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010b4e:	ab0a      	add	r3, sp, #40	; 0x28
 8010b50:	a809      	add	r0, sp, #36	; 0x24
 8010b52:	d13b      	bne.n	8010bcc <_printf_float+0x13c>
 8010b54:	2106      	movs	r1, #6
 8010b56:	6061      	str	r1, [r4, #4]
 8010b58:	f04f 0c00 	mov.w	ip, #0
 8010b5c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8010b60:	e9cd 0900 	strd	r0, r9, [sp]
 8010b64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010b68:	6022      	str	r2, [r4, #0]
 8010b6a:	6861      	ldr	r1, [r4, #4]
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	f7ff ff0a 	bl	8010986 <__cvt>
 8010b72:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8010b76:	2b47      	cmp	r3, #71	; 0x47
 8010b78:	4680      	mov	r8, r0
 8010b7a:	d109      	bne.n	8010b90 <_printf_float+0x100>
 8010b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b7e:	1cd8      	adds	r0, r3, #3
 8010b80:	db02      	blt.n	8010b88 <_printf_float+0xf8>
 8010b82:	6862      	ldr	r2, [r4, #4]
 8010b84:	4293      	cmp	r3, r2
 8010b86:	dd47      	ble.n	8010c18 <_printf_float+0x188>
 8010b88:	f1a9 0902 	sub.w	r9, r9, #2
 8010b8c:	fa5f f989 	uxtb.w	r9, r9
 8010b90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010b94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010b96:	d824      	bhi.n	8010be2 <_printf_float+0x152>
 8010b98:	3901      	subs	r1, #1
 8010b9a:	464a      	mov	r2, r9
 8010b9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010ba0:	9109      	str	r1, [sp, #36]	; 0x24
 8010ba2:	f7ff ff42 	bl	8010a2a <__exponent>
 8010ba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ba8:	1813      	adds	r3, r2, r0
 8010baa:	2a01      	cmp	r2, #1
 8010bac:	4682      	mov	sl, r0
 8010bae:	6123      	str	r3, [r4, #16]
 8010bb0:	dc02      	bgt.n	8010bb8 <_printf_float+0x128>
 8010bb2:	6822      	ldr	r2, [r4, #0]
 8010bb4:	07d1      	lsls	r1, r2, #31
 8010bb6:	d501      	bpl.n	8010bbc <_printf_float+0x12c>
 8010bb8:	3301      	adds	r3, #1
 8010bba:	6123      	str	r3, [r4, #16]
 8010bbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d0a9      	beq.n	8010b18 <_printf_float+0x88>
 8010bc4:	232d      	movs	r3, #45	; 0x2d
 8010bc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bca:	e7a5      	b.n	8010b18 <_printf_float+0x88>
 8010bcc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8010bd0:	f000 8178 	beq.w	8010ec4 <_printf_float+0x434>
 8010bd4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010bd8:	d1be      	bne.n	8010b58 <_printf_float+0xc8>
 8010bda:	2900      	cmp	r1, #0
 8010bdc:	d1bc      	bne.n	8010b58 <_printf_float+0xc8>
 8010bde:	2101      	movs	r1, #1
 8010be0:	e7b9      	b.n	8010b56 <_printf_float+0xc6>
 8010be2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010be6:	d119      	bne.n	8010c1c <_printf_float+0x18c>
 8010be8:	2900      	cmp	r1, #0
 8010bea:	6863      	ldr	r3, [r4, #4]
 8010bec:	dd0c      	ble.n	8010c08 <_printf_float+0x178>
 8010bee:	6121      	str	r1, [r4, #16]
 8010bf0:	b913      	cbnz	r3, 8010bf8 <_printf_float+0x168>
 8010bf2:	6822      	ldr	r2, [r4, #0]
 8010bf4:	07d2      	lsls	r2, r2, #31
 8010bf6:	d502      	bpl.n	8010bfe <_printf_float+0x16e>
 8010bf8:	3301      	adds	r3, #1
 8010bfa:	440b      	add	r3, r1
 8010bfc:	6123      	str	r3, [r4, #16]
 8010bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c00:	65a3      	str	r3, [r4, #88]	; 0x58
 8010c02:	f04f 0a00 	mov.w	sl, #0
 8010c06:	e7d9      	b.n	8010bbc <_printf_float+0x12c>
 8010c08:	b913      	cbnz	r3, 8010c10 <_printf_float+0x180>
 8010c0a:	6822      	ldr	r2, [r4, #0]
 8010c0c:	07d0      	lsls	r0, r2, #31
 8010c0e:	d501      	bpl.n	8010c14 <_printf_float+0x184>
 8010c10:	3302      	adds	r3, #2
 8010c12:	e7f3      	b.n	8010bfc <_printf_float+0x16c>
 8010c14:	2301      	movs	r3, #1
 8010c16:	e7f1      	b.n	8010bfc <_printf_float+0x16c>
 8010c18:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010c1c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010c20:	4293      	cmp	r3, r2
 8010c22:	db05      	blt.n	8010c30 <_printf_float+0x1a0>
 8010c24:	6822      	ldr	r2, [r4, #0]
 8010c26:	6123      	str	r3, [r4, #16]
 8010c28:	07d1      	lsls	r1, r2, #31
 8010c2a:	d5e8      	bpl.n	8010bfe <_printf_float+0x16e>
 8010c2c:	3301      	adds	r3, #1
 8010c2e:	e7e5      	b.n	8010bfc <_printf_float+0x16c>
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	bfd4      	ite	le
 8010c34:	f1c3 0302 	rsble	r3, r3, #2
 8010c38:	2301      	movgt	r3, #1
 8010c3a:	4413      	add	r3, r2
 8010c3c:	e7de      	b.n	8010bfc <_printf_float+0x16c>
 8010c3e:	6823      	ldr	r3, [r4, #0]
 8010c40:	055a      	lsls	r2, r3, #21
 8010c42:	d407      	bmi.n	8010c54 <_printf_float+0x1c4>
 8010c44:	6923      	ldr	r3, [r4, #16]
 8010c46:	4642      	mov	r2, r8
 8010c48:	4631      	mov	r1, r6
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	47b8      	blx	r7
 8010c4e:	3001      	adds	r0, #1
 8010c50:	d12a      	bne.n	8010ca8 <_printf_float+0x218>
 8010c52:	e76b      	b.n	8010b2c <_printf_float+0x9c>
 8010c54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010c58:	f240 80de 	bls.w	8010e18 <_printf_float+0x388>
 8010c5c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010c60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c68:	d133      	bne.n	8010cd2 <_printf_float+0x242>
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	4a42      	ldr	r2, [pc, #264]	; (8010d78 <_printf_float+0x2e8>)
 8010c6e:	4631      	mov	r1, r6
 8010c70:	4628      	mov	r0, r5
 8010c72:	47b8      	blx	r7
 8010c74:	3001      	adds	r0, #1
 8010c76:	f43f af59 	beq.w	8010b2c <_printf_float+0x9c>
 8010c7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	db02      	blt.n	8010c88 <_printf_float+0x1f8>
 8010c82:	6823      	ldr	r3, [r4, #0]
 8010c84:	07d8      	lsls	r0, r3, #31
 8010c86:	d50f      	bpl.n	8010ca8 <_printf_float+0x218>
 8010c88:	9b05      	ldr	r3, [sp, #20]
 8010c8a:	465a      	mov	r2, fp
 8010c8c:	4631      	mov	r1, r6
 8010c8e:	4628      	mov	r0, r5
 8010c90:	47b8      	blx	r7
 8010c92:	3001      	adds	r0, #1
 8010c94:	f43f af4a 	beq.w	8010b2c <_printf_float+0x9c>
 8010c98:	f04f 0800 	mov.w	r8, #0
 8010c9c:	f104 091a 	add.w	r9, r4, #26
 8010ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ca2:	3b01      	subs	r3, #1
 8010ca4:	4543      	cmp	r3, r8
 8010ca6:	dc09      	bgt.n	8010cbc <_printf_float+0x22c>
 8010ca8:	6823      	ldr	r3, [r4, #0]
 8010caa:	079b      	lsls	r3, r3, #30
 8010cac:	f100 8105 	bmi.w	8010eba <_printf_float+0x42a>
 8010cb0:	68e0      	ldr	r0, [r4, #12]
 8010cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cb4:	4298      	cmp	r0, r3
 8010cb6:	bfb8      	it	lt
 8010cb8:	4618      	movlt	r0, r3
 8010cba:	e739      	b.n	8010b30 <_printf_float+0xa0>
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	464a      	mov	r2, r9
 8010cc0:	4631      	mov	r1, r6
 8010cc2:	4628      	mov	r0, r5
 8010cc4:	47b8      	blx	r7
 8010cc6:	3001      	adds	r0, #1
 8010cc8:	f43f af30 	beq.w	8010b2c <_printf_float+0x9c>
 8010ccc:	f108 0801 	add.w	r8, r8, #1
 8010cd0:	e7e6      	b.n	8010ca0 <_printf_float+0x210>
 8010cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	dc2b      	bgt.n	8010d30 <_printf_float+0x2a0>
 8010cd8:	2301      	movs	r3, #1
 8010cda:	4a27      	ldr	r2, [pc, #156]	; (8010d78 <_printf_float+0x2e8>)
 8010cdc:	4631      	mov	r1, r6
 8010cde:	4628      	mov	r0, r5
 8010ce0:	47b8      	blx	r7
 8010ce2:	3001      	adds	r0, #1
 8010ce4:	f43f af22 	beq.w	8010b2c <_printf_float+0x9c>
 8010ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cea:	b923      	cbnz	r3, 8010cf6 <_printf_float+0x266>
 8010cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cee:	b913      	cbnz	r3, 8010cf6 <_printf_float+0x266>
 8010cf0:	6823      	ldr	r3, [r4, #0]
 8010cf2:	07d9      	lsls	r1, r3, #31
 8010cf4:	d5d8      	bpl.n	8010ca8 <_printf_float+0x218>
 8010cf6:	9b05      	ldr	r3, [sp, #20]
 8010cf8:	465a      	mov	r2, fp
 8010cfa:	4631      	mov	r1, r6
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	47b8      	blx	r7
 8010d00:	3001      	adds	r0, #1
 8010d02:	f43f af13 	beq.w	8010b2c <_printf_float+0x9c>
 8010d06:	f04f 0900 	mov.w	r9, #0
 8010d0a:	f104 0a1a 	add.w	sl, r4, #26
 8010d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d10:	425b      	negs	r3, r3
 8010d12:	454b      	cmp	r3, r9
 8010d14:	dc01      	bgt.n	8010d1a <_printf_float+0x28a>
 8010d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d18:	e795      	b.n	8010c46 <_printf_float+0x1b6>
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	4652      	mov	r2, sl
 8010d1e:	4631      	mov	r1, r6
 8010d20:	4628      	mov	r0, r5
 8010d22:	47b8      	blx	r7
 8010d24:	3001      	adds	r0, #1
 8010d26:	f43f af01 	beq.w	8010b2c <_printf_float+0x9c>
 8010d2a:	f109 0901 	add.w	r9, r9, #1
 8010d2e:	e7ee      	b.n	8010d0e <_printf_float+0x27e>
 8010d30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010d34:	429a      	cmp	r2, r3
 8010d36:	bfa8      	it	ge
 8010d38:	461a      	movge	r2, r3
 8010d3a:	2a00      	cmp	r2, #0
 8010d3c:	4691      	mov	r9, r2
 8010d3e:	dd07      	ble.n	8010d50 <_printf_float+0x2c0>
 8010d40:	4613      	mov	r3, r2
 8010d42:	4631      	mov	r1, r6
 8010d44:	4642      	mov	r2, r8
 8010d46:	4628      	mov	r0, r5
 8010d48:	47b8      	blx	r7
 8010d4a:	3001      	adds	r0, #1
 8010d4c:	f43f aeee 	beq.w	8010b2c <_printf_float+0x9c>
 8010d50:	f104 031a 	add.w	r3, r4, #26
 8010d54:	f04f 0a00 	mov.w	sl, #0
 8010d58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d5c:	9307      	str	r3, [sp, #28]
 8010d5e:	e017      	b.n	8010d90 <_printf_float+0x300>
 8010d60:	ffffffff 	.word	0xffffffff
 8010d64:	7fefffff 	.word	0x7fefffff
 8010d68:	08015948 	.word	0x08015948
 8010d6c:	08015944 	.word	0x08015944
 8010d70:	08015950 	.word	0x08015950
 8010d74:	0801594c 	.word	0x0801594c
 8010d78:	08015954 	.word	0x08015954
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	9a07      	ldr	r2, [sp, #28]
 8010d80:	4631      	mov	r1, r6
 8010d82:	4628      	mov	r0, r5
 8010d84:	47b8      	blx	r7
 8010d86:	3001      	adds	r0, #1
 8010d88:	f43f aed0 	beq.w	8010b2c <_printf_float+0x9c>
 8010d8c:	f10a 0a01 	add.w	sl, sl, #1
 8010d90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010d92:	9306      	str	r3, [sp, #24]
 8010d94:	eba3 0309 	sub.w	r3, r3, r9
 8010d98:	4553      	cmp	r3, sl
 8010d9a:	dcef      	bgt.n	8010d7c <_printf_float+0x2ec>
 8010d9c:	9b06      	ldr	r3, [sp, #24]
 8010d9e:	4498      	add	r8, r3
 8010da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010da4:	429a      	cmp	r2, r3
 8010da6:	db15      	blt.n	8010dd4 <_printf_float+0x344>
 8010da8:	6823      	ldr	r3, [r4, #0]
 8010daa:	07da      	lsls	r2, r3, #31
 8010dac:	d412      	bmi.n	8010dd4 <_printf_float+0x344>
 8010dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010db0:	9a06      	ldr	r2, [sp, #24]
 8010db2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010db4:	1a9a      	subs	r2, r3, r2
 8010db6:	eba3 0a01 	sub.w	sl, r3, r1
 8010dba:	4592      	cmp	sl, r2
 8010dbc:	bfa8      	it	ge
 8010dbe:	4692      	movge	sl, r2
 8010dc0:	f1ba 0f00 	cmp.w	sl, #0
 8010dc4:	dc0e      	bgt.n	8010de4 <_printf_float+0x354>
 8010dc6:	f04f 0800 	mov.w	r8, #0
 8010dca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010dce:	f104 091a 	add.w	r9, r4, #26
 8010dd2:	e019      	b.n	8010e08 <_printf_float+0x378>
 8010dd4:	9b05      	ldr	r3, [sp, #20]
 8010dd6:	465a      	mov	r2, fp
 8010dd8:	4631      	mov	r1, r6
 8010dda:	4628      	mov	r0, r5
 8010ddc:	47b8      	blx	r7
 8010dde:	3001      	adds	r0, #1
 8010de0:	d1e5      	bne.n	8010dae <_printf_float+0x31e>
 8010de2:	e6a3      	b.n	8010b2c <_printf_float+0x9c>
 8010de4:	4653      	mov	r3, sl
 8010de6:	4642      	mov	r2, r8
 8010de8:	4631      	mov	r1, r6
 8010dea:	4628      	mov	r0, r5
 8010dec:	47b8      	blx	r7
 8010dee:	3001      	adds	r0, #1
 8010df0:	d1e9      	bne.n	8010dc6 <_printf_float+0x336>
 8010df2:	e69b      	b.n	8010b2c <_printf_float+0x9c>
 8010df4:	2301      	movs	r3, #1
 8010df6:	464a      	mov	r2, r9
 8010df8:	4631      	mov	r1, r6
 8010dfa:	4628      	mov	r0, r5
 8010dfc:	47b8      	blx	r7
 8010dfe:	3001      	adds	r0, #1
 8010e00:	f43f ae94 	beq.w	8010b2c <_printf_float+0x9c>
 8010e04:	f108 0801 	add.w	r8, r8, #1
 8010e08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e0c:	1a9b      	subs	r3, r3, r2
 8010e0e:	eba3 030a 	sub.w	r3, r3, sl
 8010e12:	4543      	cmp	r3, r8
 8010e14:	dcee      	bgt.n	8010df4 <_printf_float+0x364>
 8010e16:	e747      	b.n	8010ca8 <_printf_float+0x218>
 8010e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e1a:	2a01      	cmp	r2, #1
 8010e1c:	dc01      	bgt.n	8010e22 <_printf_float+0x392>
 8010e1e:	07db      	lsls	r3, r3, #31
 8010e20:	d539      	bpl.n	8010e96 <_printf_float+0x406>
 8010e22:	2301      	movs	r3, #1
 8010e24:	4642      	mov	r2, r8
 8010e26:	4631      	mov	r1, r6
 8010e28:	4628      	mov	r0, r5
 8010e2a:	47b8      	blx	r7
 8010e2c:	3001      	adds	r0, #1
 8010e2e:	f43f ae7d 	beq.w	8010b2c <_printf_float+0x9c>
 8010e32:	9b05      	ldr	r3, [sp, #20]
 8010e34:	465a      	mov	r2, fp
 8010e36:	4631      	mov	r1, r6
 8010e38:	4628      	mov	r0, r5
 8010e3a:	47b8      	blx	r7
 8010e3c:	3001      	adds	r0, #1
 8010e3e:	f108 0801 	add.w	r8, r8, #1
 8010e42:	f43f ae73 	beq.w	8010b2c <_printf_float+0x9c>
 8010e46:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e54:	f103 33ff 	add.w	r3, r3, #4294967295
 8010e58:	d018      	beq.n	8010e8c <_printf_float+0x3fc>
 8010e5a:	4642      	mov	r2, r8
 8010e5c:	4631      	mov	r1, r6
 8010e5e:	4628      	mov	r0, r5
 8010e60:	47b8      	blx	r7
 8010e62:	3001      	adds	r0, #1
 8010e64:	d10e      	bne.n	8010e84 <_printf_float+0x3f4>
 8010e66:	e661      	b.n	8010b2c <_printf_float+0x9c>
 8010e68:	2301      	movs	r3, #1
 8010e6a:	464a      	mov	r2, r9
 8010e6c:	4631      	mov	r1, r6
 8010e6e:	4628      	mov	r0, r5
 8010e70:	47b8      	blx	r7
 8010e72:	3001      	adds	r0, #1
 8010e74:	f43f ae5a 	beq.w	8010b2c <_printf_float+0x9c>
 8010e78:	f108 0801 	add.w	r8, r8, #1
 8010e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e7e:	3b01      	subs	r3, #1
 8010e80:	4543      	cmp	r3, r8
 8010e82:	dcf1      	bgt.n	8010e68 <_printf_float+0x3d8>
 8010e84:	4653      	mov	r3, sl
 8010e86:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010e8a:	e6dd      	b.n	8010c48 <_printf_float+0x1b8>
 8010e8c:	f04f 0800 	mov.w	r8, #0
 8010e90:	f104 091a 	add.w	r9, r4, #26
 8010e94:	e7f2      	b.n	8010e7c <_printf_float+0x3ec>
 8010e96:	2301      	movs	r3, #1
 8010e98:	e7df      	b.n	8010e5a <_printf_float+0x3ca>
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	464a      	mov	r2, r9
 8010e9e:	4631      	mov	r1, r6
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	47b8      	blx	r7
 8010ea4:	3001      	adds	r0, #1
 8010ea6:	f43f ae41 	beq.w	8010b2c <_printf_float+0x9c>
 8010eaa:	f108 0801 	add.w	r8, r8, #1
 8010eae:	68e3      	ldr	r3, [r4, #12]
 8010eb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010eb2:	1a9b      	subs	r3, r3, r2
 8010eb4:	4543      	cmp	r3, r8
 8010eb6:	dcf0      	bgt.n	8010e9a <_printf_float+0x40a>
 8010eb8:	e6fa      	b.n	8010cb0 <_printf_float+0x220>
 8010eba:	f04f 0800 	mov.w	r8, #0
 8010ebe:	f104 0919 	add.w	r9, r4, #25
 8010ec2:	e7f4      	b.n	8010eae <_printf_float+0x41e>
 8010ec4:	2900      	cmp	r1, #0
 8010ec6:	f43f ae8a 	beq.w	8010bde <_printf_float+0x14e>
 8010eca:	f04f 0c00 	mov.w	ip, #0
 8010ece:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8010ed2:	e9cd 0900 	strd	r0, r9, [sp]
 8010ed6:	6022      	str	r2, [r4, #0]
 8010ed8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010edc:	4628      	mov	r0, r5
 8010ede:	f7ff fd52 	bl	8010986 <__cvt>
 8010ee2:	4680      	mov	r8, r0
 8010ee4:	e64a      	b.n	8010b7c <_printf_float+0xec>
 8010ee6:	bf00      	nop

08010ee8 <_printf_common>:
 8010ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010eec:	4691      	mov	r9, r2
 8010eee:	461f      	mov	r7, r3
 8010ef0:	688a      	ldr	r2, [r1, #8]
 8010ef2:	690b      	ldr	r3, [r1, #16]
 8010ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	bfb8      	it	lt
 8010efc:	4613      	movlt	r3, r2
 8010efe:	f8c9 3000 	str.w	r3, [r9]
 8010f02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010f06:	4606      	mov	r6, r0
 8010f08:	460c      	mov	r4, r1
 8010f0a:	b112      	cbz	r2, 8010f12 <_printf_common+0x2a>
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	f8c9 3000 	str.w	r3, [r9]
 8010f12:	6823      	ldr	r3, [r4, #0]
 8010f14:	0699      	lsls	r1, r3, #26
 8010f16:	bf42      	ittt	mi
 8010f18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010f1c:	3302      	addmi	r3, #2
 8010f1e:	f8c9 3000 	strmi.w	r3, [r9]
 8010f22:	6825      	ldr	r5, [r4, #0]
 8010f24:	f015 0506 	ands.w	r5, r5, #6
 8010f28:	d107      	bne.n	8010f3a <_printf_common+0x52>
 8010f2a:	f104 0a19 	add.w	sl, r4, #25
 8010f2e:	68e3      	ldr	r3, [r4, #12]
 8010f30:	f8d9 2000 	ldr.w	r2, [r9]
 8010f34:	1a9b      	subs	r3, r3, r2
 8010f36:	42ab      	cmp	r3, r5
 8010f38:	dc28      	bgt.n	8010f8c <_printf_common+0xa4>
 8010f3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010f3e:	6822      	ldr	r2, [r4, #0]
 8010f40:	3300      	adds	r3, #0
 8010f42:	bf18      	it	ne
 8010f44:	2301      	movne	r3, #1
 8010f46:	0692      	lsls	r2, r2, #26
 8010f48:	d42d      	bmi.n	8010fa6 <_printf_common+0xbe>
 8010f4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f4e:	4639      	mov	r1, r7
 8010f50:	4630      	mov	r0, r6
 8010f52:	47c0      	blx	r8
 8010f54:	3001      	adds	r0, #1
 8010f56:	d020      	beq.n	8010f9a <_printf_common+0xb2>
 8010f58:	6823      	ldr	r3, [r4, #0]
 8010f5a:	68e5      	ldr	r5, [r4, #12]
 8010f5c:	f8d9 2000 	ldr.w	r2, [r9]
 8010f60:	f003 0306 	and.w	r3, r3, #6
 8010f64:	2b04      	cmp	r3, #4
 8010f66:	bf08      	it	eq
 8010f68:	1aad      	subeq	r5, r5, r2
 8010f6a:	68a3      	ldr	r3, [r4, #8]
 8010f6c:	6922      	ldr	r2, [r4, #16]
 8010f6e:	bf0c      	ite	eq
 8010f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f74:	2500      	movne	r5, #0
 8010f76:	4293      	cmp	r3, r2
 8010f78:	bfc4      	itt	gt
 8010f7a:	1a9b      	subgt	r3, r3, r2
 8010f7c:	18ed      	addgt	r5, r5, r3
 8010f7e:	f04f 0900 	mov.w	r9, #0
 8010f82:	341a      	adds	r4, #26
 8010f84:	454d      	cmp	r5, r9
 8010f86:	d11a      	bne.n	8010fbe <_printf_common+0xd6>
 8010f88:	2000      	movs	r0, #0
 8010f8a:	e008      	b.n	8010f9e <_printf_common+0xb6>
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	4652      	mov	r2, sl
 8010f90:	4639      	mov	r1, r7
 8010f92:	4630      	mov	r0, r6
 8010f94:	47c0      	blx	r8
 8010f96:	3001      	adds	r0, #1
 8010f98:	d103      	bne.n	8010fa2 <_printf_common+0xba>
 8010f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fa2:	3501      	adds	r5, #1
 8010fa4:	e7c3      	b.n	8010f2e <_printf_common+0x46>
 8010fa6:	18e1      	adds	r1, r4, r3
 8010fa8:	1c5a      	adds	r2, r3, #1
 8010faa:	2030      	movs	r0, #48	; 0x30
 8010fac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010fb0:	4422      	add	r2, r4
 8010fb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010fb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010fba:	3302      	adds	r3, #2
 8010fbc:	e7c5      	b.n	8010f4a <_printf_common+0x62>
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	4622      	mov	r2, r4
 8010fc2:	4639      	mov	r1, r7
 8010fc4:	4630      	mov	r0, r6
 8010fc6:	47c0      	blx	r8
 8010fc8:	3001      	adds	r0, #1
 8010fca:	d0e6      	beq.n	8010f9a <_printf_common+0xb2>
 8010fcc:	f109 0901 	add.w	r9, r9, #1
 8010fd0:	e7d8      	b.n	8010f84 <_printf_common+0x9c>
	...

08010fd4 <_printf_i>:
 8010fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010fd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010fdc:	460c      	mov	r4, r1
 8010fde:	7e09      	ldrb	r1, [r1, #24]
 8010fe0:	b085      	sub	sp, #20
 8010fe2:	296e      	cmp	r1, #110	; 0x6e
 8010fe4:	4617      	mov	r7, r2
 8010fe6:	4606      	mov	r6, r0
 8010fe8:	4698      	mov	r8, r3
 8010fea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010fec:	f000 80b3 	beq.w	8011156 <_printf_i+0x182>
 8010ff0:	d822      	bhi.n	8011038 <_printf_i+0x64>
 8010ff2:	2963      	cmp	r1, #99	; 0x63
 8010ff4:	d036      	beq.n	8011064 <_printf_i+0x90>
 8010ff6:	d80a      	bhi.n	801100e <_printf_i+0x3a>
 8010ff8:	2900      	cmp	r1, #0
 8010ffa:	f000 80b9 	beq.w	8011170 <_printf_i+0x19c>
 8010ffe:	2958      	cmp	r1, #88	; 0x58
 8011000:	f000 8083 	beq.w	801110a <_printf_i+0x136>
 8011004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011008:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801100c:	e032      	b.n	8011074 <_printf_i+0xa0>
 801100e:	2964      	cmp	r1, #100	; 0x64
 8011010:	d001      	beq.n	8011016 <_printf_i+0x42>
 8011012:	2969      	cmp	r1, #105	; 0x69
 8011014:	d1f6      	bne.n	8011004 <_printf_i+0x30>
 8011016:	6820      	ldr	r0, [r4, #0]
 8011018:	6813      	ldr	r3, [r2, #0]
 801101a:	0605      	lsls	r5, r0, #24
 801101c:	f103 0104 	add.w	r1, r3, #4
 8011020:	d52a      	bpl.n	8011078 <_printf_i+0xa4>
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	6011      	str	r1, [r2, #0]
 8011026:	2b00      	cmp	r3, #0
 8011028:	da03      	bge.n	8011032 <_printf_i+0x5e>
 801102a:	222d      	movs	r2, #45	; 0x2d
 801102c:	425b      	negs	r3, r3
 801102e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011032:	486f      	ldr	r0, [pc, #444]	; (80111f0 <_printf_i+0x21c>)
 8011034:	220a      	movs	r2, #10
 8011036:	e039      	b.n	80110ac <_printf_i+0xd8>
 8011038:	2973      	cmp	r1, #115	; 0x73
 801103a:	f000 809d 	beq.w	8011178 <_printf_i+0x1a4>
 801103e:	d808      	bhi.n	8011052 <_printf_i+0x7e>
 8011040:	296f      	cmp	r1, #111	; 0x6f
 8011042:	d020      	beq.n	8011086 <_printf_i+0xb2>
 8011044:	2970      	cmp	r1, #112	; 0x70
 8011046:	d1dd      	bne.n	8011004 <_printf_i+0x30>
 8011048:	6823      	ldr	r3, [r4, #0]
 801104a:	f043 0320 	orr.w	r3, r3, #32
 801104e:	6023      	str	r3, [r4, #0]
 8011050:	e003      	b.n	801105a <_printf_i+0x86>
 8011052:	2975      	cmp	r1, #117	; 0x75
 8011054:	d017      	beq.n	8011086 <_printf_i+0xb2>
 8011056:	2978      	cmp	r1, #120	; 0x78
 8011058:	d1d4      	bne.n	8011004 <_printf_i+0x30>
 801105a:	2378      	movs	r3, #120	; 0x78
 801105c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011060:	4864      	ldr	r0, [pc, #400]	; (80111f4 <_printf_i+0x220>)
 8011062:	e055      	b.n	8011110 <_printf_i+0x13c>
 8011064:	6813      	ldr	r3, [r2, #0]
 8011066:	1d19      	adds	r1, r3, #4
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	6011      	str	r1, [r2, #0]
 801106c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011074:	2301      	movs	r3, #1
 8011076:	e08c      	b.n	8011192 <_printf_i+0x1be>
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	6011      	str	r1, [r2, #0]
 801107c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011080:	bf18      	it	ne
 8011082:	b21b      	sxthne	r3, r3
 8011084:	e7cf      	b.n	8011026 <_printf_i+0x52>
 8011086:	6813      	ldr	r3, [r2, #0]
 8011088:	6825      	ldr	r5, [r4, #0]
 801108a:	1d18      	adds	r0, r3, #4
 801108c:	6010      	str	r0, [r2, #0]
 801108e:	0628      	lsls	r0, r5, #24
 8011090:	d501      	bpl.n	8011096 <_printf_i+0xc2>
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	e002      	b.n	801109c <_printf_i+0xc8>
 8011096:	0668      	lsls	r0, r5, #25
 8011098:	d5fb      	bpl.n	8011092 <_printf_i+0xbe>
 801109a:	881b      	ldrh	r3, [r3, #0]
 801109c:	4854      	ldr	r0, [pc, #336]	; (80111f0 <_printf_i+0x21c>)
 801109e:	296f      	cmp	r1, #111	; 0x6f
 80110a0:	bf14      	ite	ne
 80110a2:	220a      	movne	r2, #10
 80110a4:	2208      	moveq	r2, #8
 80110a6:	2100      	movs	r1, #0
 80110a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80110ac:	6865      	ldr	r5, [r4, #4]
 80110ae:	60a5      	str	r5, [r4, #8]
 80110b0:	2d00      	cmp	r5, #0
 80110b2:	f2c0 8095 	blt.w	80111e0 <_printf_i+0x20c>
 80110b6:	6821      	ldr	r1, [r4, #0]
 80110b8:	f021 0104 	bic.w	r1, r1, #4
 80110bc:	6021      	str	r1, [r4, #0]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d13d      	bne.n	801113e <_printf_i+0x16a>
 80110c2:	2d00      	cmp	r5, #0
 80110c4:	f040 808e 	bne.w	80111e4 <_printf_i+0x210>
 80110c8:	4665      	mov	r5, ip
 80110ca:	2a08      	cmp	r2, #8
 80110cc:	d10b      	bne.n	80110e6 <_printf_i+0x112>
 80110ce:	6823      	ldr	r3, [r4, #0]
 80110d0:	07db      	lsls	r3, r3, #31
 80110d2:	d508      	bpl.n	80110e6 <_printf_i+0x112>
 80110d4:	6923      	ldr	r3, [r4, #16]
 80110d6:	6862      	ldr	r2, [r4, #4]
 80110d8:	429a      	cmp	r2, r3
 80110da:	bfde      	ittt	le
 80110dc:	2330      	movle	r3, #48	; 0x30
 80110de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80110e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80110e6:	ebac 0305 	sub.w	r3, ip, r5
 80110ea:	6123      	str	r3, [r4, #16]
 80110ec:	f8cd 8000 	str.w	r8, [sp]
 80110f0:	463b      	mov	r3, r7
 80110f2:	aa03      	add	r2, sp, #12
 80110f4:	4621      	mov	r1, r4
 80110f6:	4630      	mov	r0, r6
 80110f8:	f7ff fef6 	bl	8010ee8 <_printf_common>
 80110fc:	3001      	adds	r0, #1
 80110fe:	d14d      	bne.n	801119c <_printf_i+0x1c8>
 8011100:	f04f 30ff 	mov.w	r0, #4294967295
 8011104:	b005      	add	sp, #20
 8011106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801110a:	4839      	ldr	r0, [pc, #228]	; (80111f0 <_printf_i+0x21c>)
 801110c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011110:	6813      	ldr	r3, [r2, #0]
 8011112:	6821      	ldr	r1, [r4, #0]
 8011114:	1d1d      	adds	r5, r3, #4
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	6015      	str	r5, [r2, #0]
 801111a:	060a      	lsls	r2, r1, #24
 801111c:	d50b      	bpl.n	8011136 <_printf_i+0x162>
 801111e:	07ca      	lsls	r2, r1, #31
 8011120:	bf44      	itt	mi
 8011122:	f041 0120 	orrmi.w	r1, r1, #32
 8011126:	6021      	strmi	r1, [r4, #0]
 8011128:	b91b      	cbnz	r3, 8011132 <_printf_i+0x15e>
 801112a:	6822      	ldr	r2, [r4, #0]
 801112c:	f022 0220 	bic.w	r2, r2, #32
 8011130:	6022      	str	r2, [r4, #0]
 8011132:	2210      	movs	r2, #16
 8011134:	e7b7      	b.n	80110a6 <_printf_i+0xd2>
 8011136:	064d      	lsls	r5, r1, #25
 8011138:	bf48      	it	mi
 801113a:	b29b      	uxthmi	r3, r3
 801113c:	e7ef      	b.n	801111e <_printf_i+0x14a>
 801113e:	4665      	mov	r5, ip
 8011140:	fbb3 f1f2 	udiv	r1, r3, r2
 8011144:	fb02 3311 	mls	r3, r2, r1, r3
 8011148:	5cc3      	ldrb	r3, [r0, r3]
 801114a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801114e:	460b      	mov	r3, r1
 8011150:	2900      	cmp	r1, #0
 8011152:	d1f5      	bne.n	8011140 <_printf_i+0x16c>
 8011154:	e7b9      	b.n	80110ca <_printf_i+0xf6>
 8011156:	6813      	ldr	r3, [r2, #0]
 8011158:	6825      	ldr	r5, [r4, #0]
 801115a:	6961      	ldr	r1, [r4, #20]
 801115c:	1d18      	adds	r0, r3, #4
 801115e:	6010      	str	r0, [r2, #0]
 8011160:	0628      	lsls	r0, r5, #24
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	d501      	bpl.n	801116a <_printf_i+0x196>
 8011166:	6019      	str	r1, [r3, #0]
 8011168:	e002      	b.n	8011170 <_printf_i+0x19c>
 801116a:	066a      	lsls	r2, r5, #25
 801116c:	d5fb      	bpl.n	8011166 <_printf_i+0x192>
 801116e:	8019      	strh	r1, [r3, #0]
 8011170:	2300      	movs	r3, #0
 8011172:	6123      	str	r3, [r4, #16]
 8011174:	4665      	mov	r5, ip
 8011176:	e7b9      	b.n	80110ec <_printf_i+0x118>
 8011178:	6813      	ldr	r3, [r2, #0]
 801117a:	1d19      	adds	r1, r3, #4
 801117c:	6011      	str	r1, [r2, #0]
 801117e:	681d      	ldr	r5, [r3, #0]
 8011180:	6862      	ldr	r2, [r4, #4]
 8011182:	2100      	movs	r1, #0
 8011184:	4628      	mov	r0, r5
 8011186:	f7ef f863 	bl	8000250 <memchr>
 801118a:	b108      	cbz	r0, 8011190 <_printf_i+0x1bc>
 801118c:	1b40      	subs	r0, r0, r5
 801118e:	6060      	str	r0, [r4, #4]
 8011190:	6863      	ldr	r3, [r4, #4]
 8011192:	6123      	str	r3, [r4, #16]
 8011194:	2300      	movs	r3, #0
 8011196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801119a:	e7a7      	b.n	80110ec <_printf_i+0x118>
 801119c:	6923      	ldr	r3, [r4, #16]
 801119e:	462a      	mov	r2, r5
 80111a0:	4639      	mov	r1, r7
 80111a2:	4630      	mov	r0, r6
 80111a4:	47c0      	blx	r8
 80111a6:	3001      	adds	r0, #1
 80111a8:	d0aa      	beq.n	8011100 <_printf_i+0x12c>
 80111aa:	6823      	ldr	r3, [r4, #0]
 80111ac:	079b      	lsls	r3, r3, #30
 80111ae:	d413      	bmi.n	80111d8 <_printf_i+0x204>
 80111b0:	68e0      	ldr	r0, [r4, #12]
 80111b2:	9b03      	ldr	r3, [sp, #12]
 80111b4:	4298      	cmp	r0, r3
 80111b6:	bfb8      	it	lt
 80111b8:	4618      	movlt	r0, r3
 80111ba:	e7a3      	b.n	8011104 <_printf_i+0x130>
 80111bc:	2301      	movs	r3, #1
 80111be:	464a      	mov	r2, r9
 80111c0:	4639      	mov	r1, r7
 80111c2:	4630      	mov	r0, r6
 80111c4:	47c0      	blx	r8
 80111c6:	3001      	adds	r0, #1
 80111c8:	d09a      	beq.n	8011100 <_printf_i+0x12c>
 80111ca:	3501      	adds	r5, #1
 80111cc:	68e3      	ldr	r3, [r4, #12]
 80111ce:	9a03      	ldr	r2, [sp, #12]
 80111d0:	1a9b      	subs	r3, r3, r2
 80111d2:	42ab      	cmp	r3, r5
 80111d4:	dcf2      	bgt.n	80111bc <_printf_i+0x1e8>
 80111d6:	e7eb      	b.n	80111b0 <_printf_i+0x1dc>
 80111d8:	2500      	movs	r5, #0
 80111da:	f104 0919 	add.w	r9, r4, #25
 80111de:	e7f5      	b.n	80111cc <_printf_i+0x1f8>
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d1ac      	bne.n	801113e <_printf_i+0x16a>
 80111e4:	7803      	ldrb	r3, [r0, #0]
 80111e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111ee:	e76c      	b.n	80110ca <_printf_i+0xf6>
 80111f0:	08015956 	.word	0x08015956
 80111f4:	08015967 	.word	0x08015967

080111f8 <_scanf_float>:
 80111f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111fc:	469a      	mov	sl, r3
 80111fe:	688b      	ldr	r3, [r1, #8]
 8011200:	4616      	mov	r6, r2
 8011202:	1e5a      	subs	r2, r3, #1
 8011204:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011208:	b087      	sub	sp, #28
 801120a:	bf83      	ittte	hi
 801120c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8011210:	189b      	addhi	r3, r3, r2
 8011212:	9301      	strhi	r3, [sp, #4]
 8011214:	2300      	movls	r3, #0
 8011216:	bf86      	itte	hi
 8011218:	f240 135d 	movwhi	r3, #349	; 0x15d
 801121c:	608b      	strhi	r3, [r1, #8]
 801121e:	9301      	strls	r3, [sp, #4]
 8011220:	680b      	ldr	r3, [r1, #0]
 8011222:	4688      	mov	r8, r1
 8011224:	f04f 0b00 	mov.w	fp, #0
 8011228:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801122c:	f848 3b1c 	str.w	r3, [r8], #28
 8011230:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8011234:	4607      	mov	r7, r0
 8011236:	460c      	mov	r4, r1
 8011238:	4645      	mov	r5, r8
 801123a:	465a      	mov	r2, fp
 801123c:	46d9      	mov	r9, fp
 801123e:	f8cd b008 	str.w	fp, [sp, #8]
 8011242:	68a1      	ldr	r1, [r4, #8]
 8011244:	b181      	cbz	r1, 8011268 <_scanf_float+0x70>
 8011246:	6833      	ldr	r3, [r6, #0]
 8011248:	781b      	ldrb	r3, [r3, #0]
 801124a:	2b49      	cmp	r3, #73	; 0x49
 801124c:	d071      	beq.n	8011332 <_scanf_float+0x13a>
 801124e:	d84d      	bhi.n	80112ec <_scanf_float+0xf4>
 8011250:	2b39      	cmp	r3, #57	; 0x39
 8011252:	d840      	bhi.n	80112d6 <_scanf_float+0xde>
 8011254:	2b31      	cmp	r3, #49	; 0x31
 8011256:	f080 8088 	bcs.w	801136a <_scanf_float+0x172>
 801125a:	2b2d      	cmp	r3, #45	; 0x2d
 801125c:	f000 8090 	beq.w	8011380 <_scanf_float+0x188>
 8011260:	d815      	bhi.n	801128e <_scanf_float+0x96>
 8011262:	2b2b      	cmp	r3, #43	; 0x2b
 8011264:	f000 808c 	beq.w	8011380 <_scanf_float+0x188>
 8011268:	f1b9 0f00 	cmp.w	r9, #0
 801126c:	d003      	beq.n	8011276 <_scanf_float+0x7e>
 801126e:	6823      	ldr	r3, [r4, #0]
 8011270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011274:	6023      	str	r3, [r4, #0]
 8011276:	3a01      	subs	r2, #1
 8011278:	2a01      	cmp	r2, #1
 801127a:	f200 80ea 	bhi.w	8011452 <_scanf_float+0x25a>
 801127e:	4545      	cmp	r5, r8
 8011280:	f200 80dc 	bhi.w	801143c <_scanf_float+0x244>
 8011284:	2601      	movs	r6, #1
 8011286:	4630      	mov	r0, r6
 8011288:	b007      	add	sp, #28
 801128a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801128e:	2b2e      	cmp	r3, #46	; 0x2e
 8011290:	f000 809f 	beq.w	80113d2 <_scanf_float+0x1da>
 8011294:	2b30      	cmp	r3, #48	; 0x30
 8011296:	d1e7      	bne.n	8011268 <_scanf_float+0x70>
 8011298:	6820      	ldr	r0, [r4, #0]
 801129a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801129e:	d064      	beq.n	801136a <_scanf_float+0x172>
 80112a0:	9b01      	ldr	r3, [sp, #4]
 80112a2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80112a6:	6020      	str	r0, [r4, #0]
 80112a8:	f109 0901 	add.w	r9, r9, #1
 80112ac:	b11b      	cbz	r3, 80112b6 <_scanf_float+0xbe>
 80112ae:	3b01      	subs	r3, #1
 80112b0:	3101      	adds	r1, #1
 80112b2:	9301      	str	r3, [sp, #4]
 80112b4:	60a1      	str	r1, [r4, #8]
 80112b6:	68a3      	ldr	r3, [r4, #8]
 80112b8:	3b01      	subs	r3, #1
 80112ba:	60a3      	str	r3, [r4, #8]
 80112bc:	6923      	ldr	r3, [r4, #16]
 80112be:	3301      	adds	r3, #1
 80112c0:	6123      	str	r3, [r4, #16]
 80112c2:	6873      	ldr	r3, [r6, #4]
 80112c4:	3b01      	subs	r3, #1
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	6073      	str	r3, [r6, #4]
 80112ca:	f340 80ac 	ble.w	8011426 <_scanf_float+0x22e>
 80112ce:	6833      	ldr	r3, [r6, #0]
 80112d0:	3301      	adds	r3, #1
 80112d2:	6033      	str	r3, [r6, #0]
 80112d4:	e7b5      	b.n	8011242 <_scanf_float+0x4a>
 80112d6:	2b45      	cmp	r3, #69	; 0x45
 80112d8:	f000 8085 	beq.w	80113e6 <_scanf_float+0x1ee>
 80112dc:	2b46      	cmp	r3, #70	; 0x46
 80112de:	d06a      	beq.n	80113b6 <_scanf_float+0x1be>
 80112e0:	2b41      	cmp	r3, #65	; 0x41
 80112e2:	d1c1      	bne.n	8011268 <_scanf_float+0x70>
 80112e4:	2a01      	cmp	r2, #1
 80112e6:	d1bf      	bne.n	8011268 <_scanf_float+0x70>
 80112e8:	2202      	movs	r2, #2
 80112ea:	e046      	b.n	801137a <_scanf_float+0x182>
 80112ec:	2b65      	cmp	r3, #101	; 0x65
 80112ee:	d07a      	beq.n	80113e6 <_scanf_float+0x1ee>
 80112f0:	d818      	bhi.n	8011324 <_scanf_float+0x12c>
 80112f2:	2b54      	cmp	r3, #84	; 0x54
 80112f4:	d066      	beq.n	80113c4 <_scanf_float+0x1cc>
 80112f6:	d811      	bhi.n	801131c <_scanf_float+0x124>
 80112f8:	2b4e      	cmp	r3, #78	; 0x4e
 80112fa:	d1b5      	bne.n	8011268 <_scanf_float+0x70>
 80112fc:	2a00      	cmp	r2, #0
 80112fe:	d146      	bne.n	801138e <_scanf_float+0x196>
 8011300:	f1b9 0f00 	cmp.w	r9, #0
 8011304:	d145      	bne.n	8011392 <_scanf_float+0x19a>
 8011306:	6821      	ldr	r1, [r4, #0]
 8011308:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801130c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011310:	d13f      	bne.n	8011392 <_scanf_float+0x19a>
 8011312:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011316:	6021      	str	r1, [r4, #0]
 8011318:	2201      	movs	r2, #1
 801131a:	e02e      	b.n	801137a <_scanf_float+0x182>
 801131c:	2b59      	cmp	r3, #89	; 0x59
 801131e:	d01e      	beq.n	801135e <_scanf_float+0x166>
 8011320:	2b61      	cmp	r3, #97	; 0x61
 8011322:	e7de      	b.n	80112e2 <_scanf_float+0xea>
 8011324:	2b6e      	cmp	r3, #110	; 0x6e
 8011326:	d0e9      	beq.n	80112fc <_scanf_float+0x104>
 8011328:	d815      	bhi.n	8011356 <_scanf_float+0x15e>
 801132a:	2b66      	cmp	r3, #102	; 0x66
 801132c:	d043      	beq.n	80113b6 <_scanf_float+0x1be>
 801132e:	2b69      	cmp	r3, #105	; 0x69
 8011330:	d19a      	bne.n	8011268 <_scanf_float+0x70>
 8011332:	f1bb 0f00 	cmp.w	fp, #0
 8011336:	d138      	bne.n	80113aa <_scanf_float+0x1b2>
 8011338:	f1b9 0f00 	cmp.w	r9, #0
 801133c:	d197      	bne.n	801126e <_scanf_float+0x76>
 801133e:	6821      	ldr	r1, [r4, #0]
 8011340:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011344:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011348:	d195      	bne.n	8011276 <_scanf_float+0x7e>
 801134a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801134e:	6021      	str	r1, [r4, #0]
 8011350:	f04f 0b01 	mov.w	fp, #1
 8011354:	e011      	b.n	801137a <_scanf_float+0x182>
 8011356:	2b74      	cmp	r3, #116	; 0x74
 8011358:	d034      	beq.n	80113c4 <_scanf_float+0x1cc>
 801135a:	2b79      	cmp	r3, #121	; 0x79
 801135c:	d184      	bne.n	8011268 <_scanf_float+0x70>
 801135e:	f1bb 0f07 	cmp.w	fp, #7
 8011362:	d181      	bne.n	8011268 <_scanf_float+0x70>
 8011364:	f04f 0b08 	mov.w	fp, #8
 8011368:	e007      	b.n	801137a <_scanf_float+0x182>
 801136a:	eb12 0f0b 	cmn.w	r2, fp
 801136e:	f47f af7b 	bne.w	8011268 <_scanf_float+0x70>
 8011372:	6821      	ldr	r1, [r4, #0]
 8011374:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8011378:	6021      	str	r1, [r4, #0]
 801137a:	702b      	strb	r3, [r5, #0]
 801137c:	3501      	adds	r5, #1
 801137e:	e79a      	b.n	80112b6 <_scanf_float+0xbe>
 8011380:	6821      	ldr	r1, [r4, #0]
 8011382:	0608      	lsls	r0, r1, #24
 8011384:	f57f af70 	bpl.w	8011268 <_scanf_float+0x70>
 8011388:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801138c:	e7f4      	b.n	8011378 <_scanf_float+0x180>
 801138e:	2a02      	cmp	r2, #2
 8011390:	d047      	beq.n	8011422 <_scanf_float+0x22a>
 8011392:	f1bb 0f01 	cmp.w	fp, #1
 8011396:	d003      	beq.n	80113a0 <_scanf_float+0x1a8>
 8011398:	f1bb 0f04 	cmp.w	fp, #4
 801139c:	f47f af64 	bne.w	8011268 <_scanf_float+0x70>
 80113a0:	f10b 0b01 	add.w	fp, fp, #1
 80113a4:	fa5f fb8b 	uxtb.w	fp, fp
 80113a8:	e7e7      	b.n	801137a <_scanf_float+0x182>
 80113aa:	f1bb 0f03 	cmp.w	fp, #3
 80113ae:	d0f7      	beq.n	80113a0 <_scanf_float+0x1a8>
 80113b0:	f1bb 0f05 	cmp.w	fp, #5
 80113b4:	e7f2      	b.n	801139c <_scanf_float+0x1a4>
 80113b6:	f1bb 0f02 	cmp.w	fp, #2
 80113ba:	f47f af55 	bne.w	8011268 <_scanf_float+0x70>
 80113be:	f04f 0b03 	mov.w	fp, #3
 80113c2:	e7da      	b.n	801137a <_scanf_float+0x182>
 80113c4:	f1bb 0f06 	cmp.w	fp, #6
 80113c8:	f47f af4e 	bne.w	8011268 <_scanf_float+0x70>
 80113cc:	f04f 0b07 	mov.w	fp, #7
 80113d0:	e7d3      	b.n	801137a <_scanf_float+0x182>
 80113d2:	6821      	ldr	r1, [r4, #0]
 80113d4:	0588      	lsls	r0, r1, #22
 80113d6:	f57f af47 	bpl.w	8011268 <_scanf_float+0x70>
 80113da:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80113de:	6021      	str	r1, [r4, #0]
 80113e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80113e4:	e7c9      	b.n	801137a <_scanf_float+0x182>
 80113e6:	6821      	ldr	r1, [r4, #0]
 80113e8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80113ec:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80113f0:	d006      	beq.n	8011400 <_scanf_float+0x208>
 80113f2:	0548      	lsls	r0, r1, #21
 80113f4:	f57f af38 	bpl.w	8011268 <_scanf_float+0x70>
 80113f8:	f1b9 0f00 	cmp.w	r9, #0
 80113fc:	f43f af3b 	beq.w	8011276 <_scanf_float+0x7e>
 8011400:	0588      	lsls	r0, r1, #22
 8011402:	bf58      	it	pl
 8011404:	9802      	ldrpl	r0, [sp, #8]
 8011406:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801140a:	bf58      	it	pl
 801140c:	eba9 0000 	subpl.w	r0, r9, r0
 8011410:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8011414:	bf58      	it	pl
 8011416:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801141a:	6021      	str	r1, [r4, #0]
 801141c:	f04f 0900 	mov.w	r9, #0
 8011420:	e7ab      	b.n	801137a <_scanf_float+0x182>
 8011422:	2203      	movs	r2, #3
 8011424:	e7a9      	b.n	801137a <_scanf_float+0x182>
 8011426:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801142a:	9205      	str	r2, [sp, #20]
 801142c:	4631      	mov	r1, r6
 801142e:	4638      	mov	r0, r7
 8011430:	4798      	blx	r3
 8011432:	9a05      	ldr	r2, [sp, #20]
 8011434:	2800      	cmp	r0, #0
 8011436:	f43f af04 	beq.w	8011242 <_scanf_float+0x4a>
 801143a:	e715      	b.n	8011268 <_scanf_float+0x70>
 801143c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011440:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011444:	4632      	mov	r2, r6
 8011446:	4638      	mov	r0, r7
 8011448:	4798      	blx	r3
 801144a:	6923      	ldr	r3, [r4, #16]
 801144c:	3b01      	subs	r3, #1
 801144e:	6123      	str	r3, [r4, #16]
 8011450:	e715      	b.n	801127e <_scanf_float+0x86>
 8011452:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011456:	2b06      	cmp	r3, #6
 8011458:	d80a      	bhi.n	8011470 <_scanf_float+0x278>
 801145a:	f1bb 0f02 	cmp.w	fp, #2
 801145e:	d966      	bls.n	801152e <_scanf_float+0x336>
 8011460:	f1ab 0b03 	sub.w	fp, fp, #3
 8011464:	fa5f fb8b 	uxtb.w	fp, fp
 8011468:	eba5 0b0b 	sub.w	fp, r5, fp
 801146c:	455d      	cmp	r5, fp
 801146e:	d149      	bne.n	8011504 <_scanf_float+0x30c>
 8011470:	6823      	ldr	r3, [r4, #0]
 8011472:	05da      	lsls	r2, r3, #23
 8011474:	d51f      	bpl.n	80114b6 <_scanf_float+0x2be>
 8011476:	055b      	lsls	r3, r3, #21
 8011478:	d466      	bmi.n	8011548 <_scanf_float+0x350>
 801147a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801147e:	6923      	ldr	r3, [r4, #16]
 8011480:	2965      	cmp	r1, #101	; 0x65
 8011482:	f103 33ff 	add.w	r3, r3, #4294967295
 8011486:	f105 3bff 	add.w	fp, r5, #4294967295
 801148a:	6123      	str	r3, [r4, #16]
 801148c:	d00d      	beq.n	80114aa <_scanf_float+0x2b2>
 801148e:	2945      	cmp	r1, #69	; 0x45
 8011490:	d00b      	beq.n	80114aa <_scanf_float+0x2b2>
 8011492:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011496:	4632      	mov	r2, r6
 8011498:	4638      	mov	r0, r7
 801149a:	4798      	blx	r3
 801149c:	6923      	ldr	r3, [r4, #16]
 801149e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80114a2:	3b01      	subs	r3, #1
 80114a4:	f1a5 0b02 	sub.w	fp, r5, #2
 80114a8:	6123      	str	r3, [r4, #16]
 80114aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80114ae:	4632      	mov	r2, r6
 80114b0:	4638      	mov	r0, r7
 80114b2:	4798      	blx	r3
 80114b4:	465d      	mov	r5, fp
 80114b6:	6826      	ldr	r6, [r4, #0]
 80114b8:	f016 0610 	ands.w	r6, r6, #16
 80114bc:	d170      	bne.n	80115a0 <_scanf_float+0x3a8>
 80114be:	702e      	strb	r6, [r5, #0]
 80114c0:	6823      	ldr	r3, [r4, #0]
 80114c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80114c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80114ca:	d140      	bne.n	801154e <_scanf_float+0x356>
 80114cc:	9b02      	ldr	r3, [sp, #8]
 80114ce:	eba9 0303 	sub.w	r3, r9, r3
 80114d2:	425a      	negs	r2, r3
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d147      	bne.n	8011568 <_scanf_float+0x370>
 80114d8:	2200      	movs	r2, #0
 80114da:	4638      	mov	r0, r7
 80114dc:	4641      	mov	r1, r8
 80114de:	f000 fee7 	bl	80122b0 <_strtod_r>
 80114e2:	6820      	ldr	r0, [r4, #0]
 80114e4:	f8da 3000 	ldr.w	r3, [sl]
 80114e8:	f010 0f02 	tst.w	r0, #2
 80114ec:	f103 0204 	add.w	r2, r3, #4
 80114f0:	f8ca 2000 	str.w	r2, [sl]
 80114f4:	d043      	beq.n	801157e <_scanf_float+0x386>
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	ed83 0b00 	vstr	d0, [r3]
 80114fc:	68e3      	ldr	r3, [r4, #12]
 80114fe:	3301      	adds	r3, #1
 8011500:	60e3      	str	r3, [r4, #12]
 8011502:	e6c0      	b.n	8011286 <_scanf_float+0x8e>
 8011504:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011508:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801150c:	4632      	mov	r2, r6
 801150e:	4638      	mov	r0, r7
 8011510:	4798      	blx	r3
 8011512:	6923      	ldr	r3, [r4, #16]
 8011514:	3b01      	subs	r3, #1
 8011516:	6123      	str	r3, [r4, #16]
 8011518:	e7a8      	b.n	801146c <_scanf_float+0x274>
 801151a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801151e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011522:	4632      	mov	r2, r6
 8011524:	4638      	mov	r0, r7
 8011526:	4798      	blx	r3
 8011528:	6923      	ldr	r3, [r4, #16]
 801152a:	3b01      	subs	r3, #1
 801152c:	6123      	str	r3, [r4, #16]
 801152e:	4545      	cmp	r5, r8
 8011530:	d8f3      	bhi.n	801151a <_scanf_float+0x322>
 8011532:	e6a7      	b.n	8011284 <_scanf_float+0x8c>
 8011534:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011538:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801153c:	4632      	mov	r2, r6
 801153e:	4638      	mov	r0, r7
 8011540:	4798      	blx	r3
 8011542:	6923      	ldr	r3, [r4, #16]
 8011544:	3b01      	subs	r3, #1
 8011546:	6123      	str	r3, [r4, #16]
 8011548:	4545      	cmp	r5, r8
 801154a:	d8f3      	bhi.n	8011534 <_scanf_float+0x33c>
 801154c:	e69a      	b.n	8011284 <_scanf_float+0x8c>
 801154e:	9b03      	ldr	r3, [sp, #12]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d0c1      	beq.n	80114d8 <_scanf_float+0x2e0>
 8011554:	9904      	ldr	r1, [sp, #16]
 8011556:	230a      	movs	r3, #10
 8011558:	4632      	mov	r2, r6
 801155a:	3101      	adds	r1, #1
 801155c:	4638      	mov	r0, r7
 801155e:	f000 ff33 	bl	80123c8 <_strtol_r>
 8011562:	9b03      	ldr	r3, [sp, #12]
 8011564:	9d04      	ldr	r5, [sp, #16]
 8011566:	1ac2      	subs	r2, r0, r3
 8011568:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801156c:	429d      	cmp	r5, r3
 801156e:	bf28      	it	cs
 8011570:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8011574:	490b      	ldr	r1, [pc, #44]	; (80115a4 <_scanf_float+0x3ac>)
 8011576:	4628      	mov	r0, r5
 8011578:	f000 f898 	bl	80116ac <siprintf>
 801157c:	e7ac      	b.n	80114d8 <_scanf_float+0x2e0>
 801157e:	f010 0004 	ands.w	r0, r0, #4
 8011582:	d1b8      	bne.n	80114f6 <_scanf_float+0x2fe>
 8011584:	eeb4 0b40 	vcmp.f64	d0, d0
 8011588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801158c:	681d      	ldr	r5, [r3, #0]
 801158e:	d704      	bvc.n	801159a <_scanf_float+0x3a2>
 8011590:	f000 f886 	bl	80116a0 <nanf>
 8011594:	ed85 0a00 	vstr	s0, [r5]
 8011598:	e7b0      	b.n	80114fc <_scanf_float+0x304>
 801159a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801159e:	e7f9      	b.n	8011594 <_scanf_float+0x39c>
 80115a0:	2600      	movs	r6, #0
 80115a2:	e670      	b.n	8011286 <_scanf_float+0x8e>
 80115a4:	08015978 	.word	0x08015978

080115a8 <iprintf>:
 80115a8:	b40f      	push	{r0, r1, r2, r3}
 80115aa:	4b0a      	ldr	r3, [pc, #40]	; (80115d4 <iprintf+0x2c>)
 80115ac:	b513      	push	{r0, r1, r4, lr}
 80115ae:	681c      	ldr	r4, [r3, #0]
 80115b0:	b124      	cbz	r4, 80115bc <iprintf+0x14>
 80115b2:	69a3      	ldr	r3, [r4, #24]
 80115b4:	b913      	cbnz	r3, 80115bc <iprintf+0x14>
 80115b6:	4620      	mov	r0, r4
 80115b8:	f001 fea2 	bl	8013300 <__sinit>
 80115bc:	ab05      	add	r3, sp, #20
 80115be:	9a04      	ldr	r2, [sp, #16]
 80115c0:	68a1      	ldr	r1, [r4, #8]
 80115c2:	9301      	str	r3, [sp, #4]
 80115c4:	4620      	mov	r0, r4
 80115c6:	f003 f90f 	bl	80147e8 <_vfiprintf_r>
 80115ca:	b002      	add	sp, #8
 80115cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115d0:	b004      	add	sp, #16
 80115d2:	4770      	bx	lr
 80115d4:	20000198 	.word	0x20000198

080115d8 <_puts_r>:
 80115d8:	b570      	push	{r4, r5, r6, lr}
 80115da:	460e      	mov	r6, r1
 80115dc:	4605      	mov	r5, r0
 80115de:	b118      	cbz	r0, 80115e8 <_puts_r+0x10>
 80115e0:	6983      	ldr	r3, [r0, #24]
 80115e2:	b90b      	cbnz	r3, 80115e8 <_puts_r+0x10>
 80115e4:	f001 fe8c 	bl	8013300 <__sinit>
 80115e8:	69ab      	ldr	r3, [r5, #24]
 80115ea:	68ac      	ldr	r4, [r5, #8]
 80115ec:	b913      	cbnz	r3, 80115f4 <_puts_r+0x1c>
 80115ee:	4628      	mov	r0, r5
 80115f0:	f001 fe86 	bl	8013300 <__sinit>
 80115f4:	4b23      	ldr	r3, [pc, #140]	; (8011684 <_puts_r+0xac>)
 80115f6:	429c      	cmp	r4, r3
 80115f8:	d117      	bne.n	801162a <_puts_r+0x52>
 80115fa:	686c      	ldr	r4, [r5, #4]
 80115fc:	89a3      	ldrh	r3, [r4, #12]
 80115fe:	071b      	lsls	r3, r3, #28
 8011600:	d51d      	bpl.n	801163e <_puts_r+0x66>
 8011602:	6923      	ldr	r3, [r4, #16]
 8011604:	b1db      	cbz	r3, 801163e <_puts_r+0x66>
 8011606:	3e01      	subs	r6, #1
 8011608:	68a3      	ldr	r3, [r4, #8]
 801160a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801160e:	3b01      	subs	r3, #1
 8011610:	60a3      	str	r3, [r4, #8]
 8011612:	b9e9      	cbnz	r1, 8011650 <_puts_r+0x78>
 8011614:	2b00      	cmp	r3, #0
 8011616:	da2e      	bge.n	8011676 <_puts_r+0x9e>
 8011618:	4622      	mov	r2, r4
 801161a:	210a      	movs	r1, #10
 801161c:	4628      	mov	r0, r5
 801161e:	f000 fee5 	bl	80123ec <__swbuf_r>
 8011622:	3001      	adds	r0, #1
 8011624:	d011      	beq.n	801164a <_puts_r+0x72>
 8011626:	200a      	movs	r0, #10
 8011628:	e011      	b.n	801164e <_puts_r+0x76>
 801162a:	4b17      	ldr	r3, [pc, #92]	; (8011688 <_puts_r+0xb0>)
 801162c:	429c      	cmp	r4, r3
 801162e:	d101      	bne.n	8011634 <_puts_r+0x5c>
 8011630:	68ac      	ldr	r4, [r5, #8]
 8011632:	e7e3      	b.n	80115fc <_puts_r+0x24>
 8011634:	4b15      	ldr	r3, [pc, #84]	; (801168c <_puts_r+0xb4>)
 8011636:	429c      	cmp	r4, r3
 8011638:	bf08      	it	eq
 801163a:	68ec      	ldreq	r4, [r5, #12]
 801163c:	e7de      	b.n	80115fc <_puts_r+0x24>
 801163e:	4621      	mov	r1, r4
 8011640:	4628      	mov	r0, r5
 8011642:	f000 ff25 	bl	8012490 <__swsetup_r>
 8011646:	2800      	cmp	r0, #0
 8011648:	d0dd      	beq.n	8011606 <_puts_r+0x2e>
 801164a:	f04f 30ff 	mov.w	r0, #4294967295
 801164e:	bd70      	pop	{r4, r5, r6, pc}
 8011650:	2b00      	cmp	r3, #0
 8011652:	da04      	bge.n	801165e <_puts_r+0x86>
 8011654:	69a2      	ldr	r2, [r4, #24]
 8011656:	429a      	cmp	r2, r3
 8011658:	dc06      	bgt.n	8011668 <_puts_r+0x90>
 801165a:	290a      	cmp	r1, #10
 801165c:	d004      	beq.n	8011668 <_puts_r+0x90>
 801165e:	6823      	ldr	r3, [r4, #0]
 8011660:	1c5a      	adds	r2, r3, #1
 8011662:	6022      	str	r2, [r4, #0]
 8011664:	7019      	strb	r1, [r3, #0]
 8011666:	e7cf      	b.n	8011608 <_puts_r+0x30>
 8011668:	4622      	mov	r2, r4
 801166a:	4628      	mov	r0, r5
 801166c:	f000 febe 	bl	80123ec <__swbuf_r>
 8011670:	3001      	adds	r0, #1
 8011672:	d1c9      	bne.n	8011608 <_puts_r+0x30>
 8011674:	e7e9      	b.n	801164a <_puts_r+0x72>
 8011676:	6823      	ldr	r3, [r4, #0]
 8011678:	200a      	movs	r0, #10
 801167a:	1c5a      	adds	r2, r3, #1
 801167c:	6022      	str	r2, [r4, #0]
 801167e:	7018      	strb	r0, [r3, #0]
 8011680:	e7e5      	b.n	801164e <_puts_r+0x76>
 8011682:	bf00      	nop
 8011684:	08015a00 	.word	0x08015a00
 8011688:	08015a20 	.word	0x08015a20
 801168c:	080159e0 	.word	0x080159e0

08011690 <puts>:
 8011690:	4b02      	ldr	r3, [pc, #8]	; (801169c <puts+0xc>)
 8011692:	4601      	mov	r1, r0
 8011694:	6818      	ldr	r0, [r3, #0]
 8011696:	f7ff bf9f 	b.w	80115d8 <_puts_r>
 801169a:	bf00      	nop
 801169c:	20000198 	.word	0x20000198

080116a0 <nanf>:
 80116a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80116a8 <nanf+0x8>
 80116a4:	4770      	bx	lr
 80116a6:	bf00      	nop
 80116a8:	7fc00000 	.word	0x7fc00000

080116ac <siprintf>:
 80116ac:	b40e      	push	{r1, r2, r3}
 80116ae:	b500      	push	{lr}
 80116b0:	b09c      	sub	sp, #112	; 0x70
 80116b2:	ab1d      	add	r3, sp, #116	; 0x74
 80116b4:	9002      	str	r0, [sp, #8]
 80116b6:	9006      	str	r0, [sp, #24]
 80116b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80116bc:	4809      	ldr	r0, [pc, #36]	; (80116e4 <siprintf+0x38>)
 80116be:	9107      	str	r1, [sp, #28]
 80116c0:	9104      	str	r1, [sp, #16]
 80116c2:	4909      	ldr	r1, [pc, #36]	; (80116e8 <siprintf+0x3c>)
 80116c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80116c8:	9105      	str	r1, [sp, #20]
 80116ca:	6800      	ldr	r0, [r0, #0]
 80116cc:	9301      	str	r3, [sp, #4]
 80116ce:	a902      	add	r1, sp, #8
 80116d0:	f002 ff68 	bl	80145a4 <_svfiprintf_r>
 80116d4:	9b02      	ldr	r3, [sp, #8]
 80116d6:	2200      	movs	r2, #0
 80116d8:	701a      	strb	r2, [r3, #0]
 80116da:	b01c      	add	sp, #112	; 0x70
 80116dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80116e0:	b003      	add	sp, #12
 80116e2:	4770      	bx	lr
 80116e4:	20000198 	.word	0x20000198
 80116e8:	ffff0208 	.word	0xffff0208

080116ec <sulp>:
 80116ec:	b570      	push	{r4, r5, r6, lr}
 80116ee:	4604      	mov	r4, r0
 80116f0:	460d      	mov	r5, r1
 80116f2:	4616      	mov	r6, r2
 80116f4:	ec45 4b10 	vmov	d0, r4, r5
 80116f8:	f002 fd10 	bl	801411c <__ulp>
 80116fc:	b17e      	cbz	r6, 801171e <sulp+0x32>
 80116fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011702:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011706:	2b00      	cmp	r3, #0
 8011708:	dd09      	ble.n	801171e <sulp+0x32>
 801170a:	051b      	lsls	r3, r3, #20
 801170c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011710:	2000      	movs	r0, #0
 8011712:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8011716:	ec41 0b17 	vmov	d7, r0, r1
 801171a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801171e:	bd70      	pop	{r4, r5, r6, pc}

08011720 <_strtod_l>:
 8011720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011724:	ed2d 8b0c 	vpush	{d8-d13}
 8011728:	4698      	mov	r8, r3
 801172a:	b09d      	sub	sp, #116	; 0x74
 801172c:	2300      	movs	r3, #0
 801172e:	4604      	mov	r4, r0
 8011730:	4640      	mov	r0, r8
 8011732:	460e      	mov	r6, r1
 8011734:	9214      	str	r2, [sp, #80]	; 0x50
 8011736:	9318      	str	r3, [sp, #96]	; 0x60
 8011738:	f002 f995 	bl	8013a66 <__localeconv_l>
 801173c:	4681      	mov	r9, r0
 801173e:	6800      	ldr	r0, [r0, #0]
 8011740:	f7ee fd7e 	bl	8000240 <strlen>
 8011744:	f04f 0a00 	mov.w	sl, #0
 8011748:	4607      	mov	r7, r0
 801174a:	f04f 0b00 	mov.w	fp, #0
 801174e:	9617      	str	r6, [sp, #92]	; 0x5c
 8011750:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011752:	781a      	ldrb	r2, [r3, #0]
 8011754:	2a0d      	cmp	r2, #13
 8011756:	d834      	bhi.n	80117c2 <_strtod_l+0xa2>
 8011758:	2a09      	cmp	r2, #9
 801175a:	d238      	bcs.n	80117ce <_strtod_l+0xae>
 801175c:	2a00      	cmp	r2, #0
 801175e:	d040      	beq.n	80117e2 <_strtod_l+0xc2>
 8011760:	2300      	movs	r3, #0
 8011762:	930d      	str	r3, [sp, #52]	; 0x34
 8011764:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8011766:	782b      	ldrb	r3, [r5, #0]
 8011768:	2b30      	cmp	r3, #48	; 0x30
 801176a:	f040 80b3 	bne.w	80118d4 <_strtod_l+0x1b4>
 801176e:	786b      	ldrb	r3, [r5, #1]
 8011770:	2b58      	cmp	r3, #88	; 0x58
 8011772:	d001      	beq.n	8011778 <_strtod_l+0x58>
 8011774:	2b78      	cmp	r3, #120	; 0x78
 8011776:	d169      	bne.n	801184c <_strtod_l+0x12c>
 8011778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801177a:	9301      	str	r3, [sp, #4]
 801177c:	ab18      	add	r3, sp, #96	; 0x60
 801177e:	9300      	str	r3, [sp, #0]
 8011780:	f8cd 8008 	str.w	r8, [sp, #8]
 8011784:	ab19      	add	r3, sp, #100	; 0x64
 8011786:	4a8f      	ldr	r2, [pc, #572]	; (80119c4 <_strtod_l+0x2a4>)
 8011788:	a917      	add	r1, sp, #92	; 0x5c
 801178a:	4620      	mov	r0, r4
 801178c:	f001 fe91 	bl	80134b2 <__gethex>
 8011790:	f010 0607 	ands.w	r6, r0, #7
 8011794:	4607      	mov	r7, r0
 8011796:	d005      	beq.n	80117a4 <_strtod_l+0x84>
 8011798:	2e06      	cmp	r6, #6
 801179a:	d12c      	bne.n	80117f6 <_strtod_l+0xd6>
 801179c:	3501      	adds	r5, #1
 801179e:	2300      	movs	r3, #0
 80117a0:	9517      	str	r5, [sp, #92]	; 0x5c
 80117a2:	930d      	str	r3, [sp, #52]	; 0x34
 80117a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	f040 855e 	bne.w	8012268 <_strtod_l+0xb48>
 80117ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117ae:	b1eb      	cbz	r3, 80117ec <_strtod_l+0xcc>
 80117b0:	ec4b ab17 	vmov	d7, sl, fp
 80117b4:	eeb1 0b47 	vneg.f64	d0, d7
 80117b8:	b01d      	add	sp, #116	; 0x74
 80117ba:	ecbd 8b0c 	vpop	{d8-d13}
 80117be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117c2:	2a2b      	cmp	r2, #43	; 0x2b
 80117c4:	d015      	beq.n	80117f2 <_strtod_l+0xd2>
 80117c6:	2a2d      	cmp	r2, #45	; 0x2d
 80117c8:	d004      	beq.n	80117d4 <_strtod_l+0xb4>
 80117ca:	2a20      	cmp	r2, #32
 80117cc:	d1c8      	bne.n	8011760 <_strtod_l+0x40>
 80117ce:	3301      	adds	r3, #1
 80117d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80117d2:	e7bd      	b.n	8011750 <_strtod_l+0x30>
 80117d4:	2201      	movs	r2, #1
 80117d6:	920d      	str	r2, [sp, #52]	; 0x34
 80117d8:	1c5a      	adds	r2, r3, #1
 80117da:	9217      	str	r2, [sp, #92]	; 0x5c
 80117dc:	785b      	ldrb	r3, [r3, #1]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d1c0      	bne.n	8011764 <_strtod_l+0x44>
 80117e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80117e4:	9617      	str	r6, [sp, #92]	; 0x5c
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	f040 853c 	bne.w	8012264 <_strtod_l+0xb44>
 80117ec:	ec4b ab10 	vmov	d0, sl, fp
 80117f0:	e7e2      	b.n	80117b8 <_strtod_l+0x98>
 80117f2:	2200      	movs	r2, #0
 80117f4:	e7ef      	b.n	80117d6 <_strtod_l+0xb6>
 80117f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80117f8:	b13a      	cbz	r2, 801180a <_strtod_l+0xea>
 80117fa:	2135      	movs	r1, #53	; 0x35
 80117fc:	a81a      	add	r0, sp, #104	; 0x68
 80117fe:	f002 fd86 	bl	801430e <__copybits>
 8011802:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011804:	4620      	mov	r0, r4
 8011806:	f002 f9f1 	bl	8013bec <_Bfree>
 801180a:	3e01      	subs	r6, #1
 801180c:	2e04      	cmp	r6, #4
 801180e:	d806      	bhi.n	801181e <_strtod_l+0xfe>
 8011810:	e8df f006 	tbb	[pc, r6]
 8011814:	1714030a 	.word	0x1714030a
 8011818:	0a          	.byte	0x0a
 8011819:	00          	.byte	0x00
 801181a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801181e:	073b      	lsls	r3, r7, #28
 8011820:	d5c0      	bpl.n	80117a4 <_strtod_l+0x84>
 8011822:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011826:	e7bd      	b.n	80117a4 <_strtod_l+0x84>
 8011828:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801182c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801182e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011832:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011836:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801183a:	e7f0      	b.n	801181e <_strtod_l+0xfe>
 801183c:	f8df b188 	ldr.w	fp, [pc, #392]	; 80119c8 <_strtod_l+0x2a8>
 8011840:	e7ed      	b.n	801181e <_strtod_l+0xfe>
 8011842:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011846:	f04f 3aff 	mov.w	sl, #4294967295
 801184a:	e7e8      	b.n	801181e <_strtod_l+0xfe>
 801184c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801184e:	1c5a      	adds	r2, r3, #1
 8011850:	9217      	str	r2, [sp, #92]	; 0x5c
 8011852:	785b      	ldrb	r3, [r3, #1]
 8011854:	2b30      	cmp	r3, #48	; 0x30
 8011856:	d0f9      	beq.n	801184c <_strtod_l+0x12c>
 8011858:	2b00      	cmp	r3, #0
 801185a:	d0a3      	beq.n	80117a4 <_strtod_l+0x84>
 801185c:	2301      	movs	r3, #1
 801185e:	930a      	str	r3, [sp, #40]	; 0x28
 8011860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011862:	930c      	str	r3, [sp, #48]	; 0x30
 8011864:	2300      	movs	r3, #0
 8011866:	9306      	str	r3, [sp, #24]
 8011868:	9308      	str	r3, [sp, #32]
 801186a:	461d      	mov	r5, r3
 801186c:	220a      	movs	r2, #10
 801186e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011870:	f890 8000 	ldrb.w	r8, [r0]
 8011874:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8011878:	b2d9      	uxtb	r1, r3
 801187a:	2909      	cmp	r1, #9
 801187c:	d92c      	bls.n	80118d8 <_strtod_l+0x1b8>
 801187e:	463a      	mov	r2, r7
 8011880:	f8d9 1000 	ldr.w	r1, [r9]
 8011884:	f003 f919 	bl	8014aba <strncmp>
 8011888:	2800      	cmp	r0, #0
 801188a:	d035      	beq.n	80118f8 <_strtod_l+0x1d8>
 801188c:	2000      	movs	r0, #0
 801188e:	4642      	mov	r2, r8
 8011890:	462b      	mov	r3, r5
 8011892:	4601      	mov	r1, r0
 8011894:	9004      	str	r0, [sp, #16]
 8011896:	2a65      	cmp	r2, #101	; 0x65
 8011898:	d001      	beq.n	801189e <_strtod_l+0x17e>
 801189a:	2a45      	cmp	r2, #69	; 0x45
 801189c:	d117      	bne.n	80118ce <_strtod_l+0x1ae>
 801189e:	b923      	cbnz	r3, 80118aa <_strtod_l+0x18a>
 80118a0:	b910      	cbnz	r0, 80118a8 <_strtod_l+0x188>
 80118a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d09c      	beq.n	80117e2 <_strtod_l+0xc2>
 80118a8:	2300      	movs	r3, #0
 80118aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80118ac:	1c72      	adds	r2, r6, #1
 80118ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80118b0:	7872      	ldrb	r2, [r6, #1]
 80118b2:	2a2b      	cmp	r2, #43	; 0x2b
 80118b4:	f000 8082 	beq.w	80119bc <_strtod_l+0x29c>
 80118b8:	2a2d      	cmp	r2, #45	; 0x2d
 80118ba:	d079      	beq.n	80119b0 <_strtod_l+0x290>
 80118bc:	f04f 0e00 	mov.w	lr, #0
 80118c0:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80118c4:	f1bc 0f09 	cmp.w	ip, #9
 80118c8:	f240 8086 	bls.w	80119d8 <_strtod_l+0x2b8>
 80118cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80118ce:	f04f 0800 	mov.w	r8, #0
 80118d2:	e0a8      	b.n	8011a26 <_strtod_l+0x306>
 80118d4:	2300      	movs	r3, #0
 80118d6:	e7c2      	b.n	801185e <_strtod_l+0x13e>
 80118d8:	2d08      	cmp	r5, #8
 80118da:	bfd5      	itete	le
 80118dc:	9908      	ldrle	r1, [sp, #32]
 80118de:	9906      	ldrgt	r1, [sp, #24]
 80118e0:	fb02 3301 	mlale	r3, r2, r1, r3
 80118e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80118e8:	f100 0001 	add.w	r0, r0, #1
 80118ec:	bfd4      	ite	le
 80118ee:	9308      	strle	r3, [sp, #32]
 80118f0:	9306      	strgt	r3, [sp, #24]
 80118f2:	3501      	adds	r5, #1
 80118f4:	9017      	str	r0, [sp, #92]	; 0x5c
 80118f6:	e7ba      	b.n	801186e <_strtod_l+0x14e>
 80118f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80118fa:	19da      	adds	r2, r3, r7
 80118fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80118fe:	5dda      	ldrb	r2, [r3, r7]
 8011900:	2d00      	cmp	r5, #0
 8011902:	d038      	beq.n	8011976 <_strtod_l+0x256>
 8011904:	4601      	mov	r1, r0
 8011906:	462b      	mov	r3, r5
 8011908:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801190c:	2f09      	cmp	r7, #9
 801190e:	d913      	bls.n	8011938 <_strtod_l+0x218>
 8011910:	2701      	movs	r7, #1
 8011912:	9704      	str	r7, [sp, #16]
 8011914:	e7bf      	b.n	8011896 <_strtod_l+0x176>
 8011916:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011918:	1c5a      	adds	r2, r3, #1
 801191a:	9217      	str	r2, [sp, #92]	; 0x5c
 801191c:	785a      	ldrb	r2, [r3, #1]
 801191e:	3001      	adds	r0, #1
 8011920:	2a30      	cmp	r2, #48	; 0x30
 8011922:	d0f8      	beq.n	8011916 <_strtod_l+0x1f6>
 8011924:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011928:	2b08      	cmp	r3, #8
 801192a:	f200 84a2 	bhi.w	8012272 <_strtod_l+0xb52>
 801192e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011930:	930c      	str	r3, [sp, #48]	; 0x30
 8011932:	4601      	mov	r1, r0
 8011934:	2000      	movs	r0, #0
 8011936:	4603      	mov	r3, r0
 8011938:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 801193c:	f100 0701 	add.w	r7, r0, #1
 8011940:	d013      	beq.n	801196a <_strtod_l+0x24a>
 8011942:	4439      	add	r1, r7
 8011944:	eb00 0e03 	add.w	lr, r0, r3
 8011948:	461f      	mov	r7, r3
 801194a:	f04f 0c0a 	mov.w	ip, #10
 801194e:	45be      	cmp	lr, r7
 8011950:	d113      	bne.n	801197a <_strtod_l+0x25a>
 8011952:	181f      	adds	r7, r3, r0
 8011954:	2f08      	cmp	r7, #8
 8011956:	f103 0301 	add.w	r3, r3, #1
 801195a:	4403      	add	r3, r0
 801195c:	dc1d      	bgt.n	801199a <_strtod_l+0x27a>
 801195e:	9a08      	ldr	r2, [sp, #32]
 8011960:	200a      	movs	r0, #10
 8011962:	fb00 8202 	mla	r2, r0, r2, r8
 8011966:	9208      	str	r2, [sp, #32]
 8011968:	2700      	movs	r7, #0
 801196a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801196c:	1c50      	adds	r0, r2, #1
 801196e:	9017      	str	r0, [sp, #92]	; 0x5c
 8011970:	7852      	ldrb	r2, [r2, #1]
 8011972:	4638      	mov	r0, r7
 8011974:	e7c8      	b.n	8011908 <_strtod_l+0x1e8>
 8011976:	4628      	mov	r0, r5
 8011978:	e7d2      	b.n	8011920 <_strtod_l+0x200>
 801197a:	2f08      	cmp	r7, #8
 801197c:	f107 0701 	add.w	r7, r7, #1
 8011980:	dc04      	bgt.n	801198c <_strtod_l+0x26c>
 8011982:	9a08      	ldr	r2, [sp, #32]
 8011984:	fb0c f202 	mul.w	r2, ip, r2
 8011988:	9208      	str	r2, [sp, #32]
 801198a:	e7e0      	b.n	801194e <_strtod_l+0x22e>
 801198c:	2f10      	cmp	r7, #16
 801198e:	bfde      	ittt	le
 8011990:	9a06      	ldrle	r2, [sp, #24]
 8011992:	fb0c f202 	mulle.w	r2, ip, r2
 8011996:	9206      	strle	r2, [sp, #24]
 8011998:	e7d9      	b.n	801194e <_strtod_l+0x22e>
 801199a:	2b10      	cmp	r3, #16
 801199c:	bfdf      	itttt	le
 801199e:	9a06      	ldrle	r2, [sp, #24]
 80119a0:	200a      	movle	r0, #10
 80119a2:	fb00 8202 	mlale	r2, r0, r2, r8
 80119a6:	9206      	strle	r2, [sp, #24]
 80119a8:	e7de      	b.n	8011968 <_strtod_l+0x248>
 80119aa:	2301      	movs	r3, #1
 80119ac:	9304      	str	r3, [sp, #16]
 80119ae:	e777      	b.n	80118a0 <_strtod_l+0x180>
 80119b0:	f04f 0e01 	mov.w	lr, #1
 80119b4:	1cb2      	adds	r2, r6, #2
 80119b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80119b8:	78b2      	ldrb	r2, [r6, #2]
 80119ba:	e781      	b.n	80118c0 <_strtod_l+0x1a0>
 80119bc:	f04f 0e00 	mov.w	lr, #0
 80119c0:	e7f8      	b.n	80119b4 <_strtod_l+0x294>
 80119c2:	bf00      	nop
 80119c4:	08015980 	.word	0x08015980
 80119c8:	7ff00000 	.word	0x7ff00000
 80119cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80119ce:	f102 0c01 	add.w	ip, r2, #1
 80119d2:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80119d6:	7852      	ldrb	r2, [r2, #1]
 80119d8:	2a30      	cmp	r2, #48	; 0x30
 80119da:	d0f7      	beq.n	80119cc <_strtod_l+0x2ac>
 80119dc:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 80119e0:	f1bc 0f08 	cmp.w	ip, #8
 80119e4:	f63f af73 	bhi.w	80118ce <_strtod_l+0x1ae>
 80119e8:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 80119ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80119ee:	920e      	str	r2, [sp, #56]	; 0x38
 80119f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80119f2:	f102 0c01 	add.w	ip, r2, #1
 80119f6:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80119fa:	7852      	ldrb	r2, [r2, #1]
 80119fc:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8011a00:	f1b9 0f09 	cmp.w	r9, #9
 8011a04:	d939      	bls.n	8011a7a <_strtod_l+0x35a>
 8011a06:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8011a08:	ebac 0c07 	sub.w	ip, ip, r7
 8011a0c:	f1bc 0f08 	cmp.w	ip, #8
 8011a10:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8011a14:	dc37      	bgt.n	8011a86 <_strtod_l+0x366>
 8011a16:	45e0      	cmp	r8, ip
 8011a18:	bfa8      	it	ge
 8011a1a:	46e0      	movge	r8, ip
 8011a1c:	f1be 0f00 	cmp.w	lr, #0
 8011a20:	d001      	beq.n	8011a26 <_strtod_l+0x306>
 8011a22:	f1c8 0800 	rsb	r8, r8, #0
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d151      	bne.n	8011ace <_strtod_l+0x3ae>
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	f47f aeba 	bne.w	80117a4 <_strtod_l+0x84>
 8011a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	f47f aeb6 	bne.w	80117a4 <_strtod_l+0x84>
 8011a38:	9b04      	ldr	r3, [sp, #16]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	f47f aed1 	bne.w	80117e2 <_strtod_l+0xc2>
 8011a40:	2a4e      	cmp	r2, #78	; 0x4e
 8011a42:	d027      	beq.n	8011a94 <_strtod_l+0x374>
 8011a44:	dc21      	bgt.n	8011a8a <_strtod_l+0x36a>
 8011a46:	2a49      	cmp	r2, #73	; 0x49
 8011a48:	f47f aecb 	bne.w	80117e2 <_strtod_l+0xc2>
 8011a4c:	499a      	ldr	r1, [pc, #616]	; (8011cb8 <_strtod_l+0x598>)
 8011a4e:	a817      	add	r0, sp, #92	; 0x5c
 8011a50:	f001 ff62 	bl	8013918 <__match>
 8011a54:	2800      	cmp	r0, #0
 8011a56:	f43f aec4 	beq.w	80117e2 <_strtod_l+0xc2>
 8011a5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a5c:	4997      	ldr	r1, [pc, #604]	; (8011cbc <_strtod_l+0x59c>)
 8011a5e:	3b01      	subs	r3, #1
 8011a60:	a817      	add	r0, sp, #92	; 0x5c
 8011a62:	9317      	str	r3, [sp, #92]	; 0x5c
 8011a64:	f001 ff58 	bl	8013918 <__match>
 8011a68:	b910      	cbnz	r0, 8011a70 <_strtod_l+0x350>
 8011a6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a6c:	3301      	adds	r3, #1
 8011a6e:	9317      	str	r3, [sp, #92]	; 0x5c
 8011a70:	f8df b260 	ldr.w	fp, [pc, #608]	; 8011cd4 <_strtod_l+0x5b4>
 8011a74:	f04f 0a00 	mov.w	sl, #0
 8011a78:	e694      	b.n	80117a4 <_strtod_l+0x84>
 8011a7a:	270a      	movs	r7, #10
 8011a7c:	fb07 2808 	mla	r8, r7, r8, r2
 8011a80:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8011a84:	e7b4      	b.n	80119f0 <_strtod_l+0x2d0>
 8011a86:	46e0      	mov	r8, ip
 8011a88:	e7c8      	b.n	8011a1c <_strtod_l+0x2fc>
 8011a8a:	2a69      	cmp	r2, #105	; 0x69
 8011a8c:	d0de      	beq.n	8011a4c <_strtod_l+0x32c>
 8011a8e:	2a6e      	cmp	r2, #110	; 0x6e
 8011a90:	f47f aea7 	bne.w	80117e2 <_strtod_l+0xc2>
 8011a94:	498a      	ldr	r1, [pc, #552]	; (8011cc0 <_strtod_l+0x5a0>)
 8011a96:	a817      	add	r0, sp, #92	; 0x5c
 8011a98:	f001 ff3e 	bl	8013918 <__match>
 8011a9c:	2800      	cmp	r0, #0
 8011a9e:	f43f aea0 	beq.w	80117e2 <_strtod_l+0xc2>
 8011aa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011aa4:	781b      	ldrb	r3, [r3, #0]
 8011aa6:	2b28      	cmp	r3, #40	; 0x28
 8011aa8:	d10e      	bne.n	8011ac8 <_strtod_l+0x3a8>
 8011aaa:	aa1a      	add	r2, sp, #104	; 0x68
 8011aac:	4985      	ldr	r1, [pc, #532]	; (8011cc4 <_strtod_l+0x5a4>)
 8011aae:	a817      	add	r0, sp, #92	; 0x5c
 8011ab0:	f001 ff46 	bl	8013940 <__hexnan>
 8011ab4:	2805      	cmp	r0, #5
 8011ab6:	d107      	bne.n	8011ac8 <_strtod_l+0x3a8>
 8011ab8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011aba:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8011abe:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011ac2:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011ac6:	e66d      	b.n	80117a4 <_strtod_l+0x84>
 8011ac8:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8011cd8 <_strtod_l+0x5b8>
 8011acc:	e7d2      	b.n	8011a74 <_strtod_l+0x354>
 8011ace:	eddd 7a08 	vldr	s15, [sp, #32]
 8011ad2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011ad6:	eba8 0201 	sub.w	r2, r8, r1
 8011ada:	2d00      	cmp	r5, #0
 8011adc:	bf08      	it	eq
 8011ade:	461d      	moveq	r5, r3
 8011ae0:	2b10      	cmp	r3, #16
 8011ae2:	9204      	str	r2, [sp, #16]
 8011ae4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011ae8:	461a      	mov	r2, r3
 8011aea:	bfa8      	it	ge
 8011aec:	2210      	movge	r2, #16
 8011aee:	2b09      	cmp	r3, #9
 8011af0:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8011af4:	dc14      	bgt.n	8011b20 <_strtod_l+0x400>
 8011af6:	9904      	ldr	r1, [sp, #16]
 8011af8:	2900      	cmp	r1, #0
 8011afa:	f43f ae53 	beq.w	80117a4 <_strtod_l+0x84>
 8011afe:	9904      	ldr	r1, [sp, #16]
 8011b00:	dd72      	ble.n	8011be8 <_strtod_l+0x4c8>
 8011b02:	2916      	cmp	r1, #22
 8011b04:	dc5a      	bgt.n	8011bbc <_strtod_l+0x49c>
 8011b06:	4970      	ldr	r1, [pc, #448]	; (8011cc8 <_strtod_l+0x5a8>)
 8011b08:	9b04      	ldr	r3, [sp, #16]
 8011b0a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011b0e:	ed91 7b00 	vldr	d7, [r1]
 8011b12:	ec4b ab16 	vmov	d6, sl, fp
 8011b16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011b1a:	ec5b ab17 	vmov	sl, fp, d7
 8011b1e:	e641      	b.n	80117a4 <_strtod_l+0x84>
 8011b20:	4969      	ldr	r1, [pc, #420]	; (8011cc8 <_strtod_l+0x5a8>)
 8011b22:	eddd 7a06 	vldr	s15, [sp, #24]
 8011b26:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011b2a:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8011b2e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8011b32:	2b0f      	cmp	r3, #15
 8011b34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011b38:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011b3c:	ec5b ab17 	vmov	sl, fp, d7
 8011b40:	ddd9      	ble.n	8011af6 <_strtod_l+0x3d6>
 8011b42:	9904      	ldr	r1, [sp, #16]
 8011b44:	1a9a      	subs	r2, r3, r2
 8011b46:	440a      	add	r2, r1
 8011b48:	2a00      	cmp	r2, #0
 8011b4a:	f340 8096 	ble.w	8011c7a <_strtod_l+0x55a>
 8011b4e:	f012 000f 	ands.w	r0, r2, #15
 8011b52:	d00a      	beq.n	8011b6a <_strtod_l+0x44a>
 8011b54:	495c      	ldr	r1, [pc, #368]	; (8011cc8 <_strtod_l+0x5a8>)
 8011b56:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011b5a:	ed91 7b00 	vldr	d7, [r1]
 8011b5e:	ec4b ab16 	vmov	d6, sl, fp
 8011b62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011b66:	ec5b ab17 	vmov	sl, fp, d7
 8011b6a:	f032 020f 	bics.w	r2, r2, #15
 8011b6e:	d072      	beq.n	8011c56 <_strtod_l+0x536>
 8011b70:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8011b74:	dd45      	ble.n	8011c02 <_strtod_l+0x4e2>
 8011b76:	2500      	movs	r5, #0
 8011b78:	46a8      	mov	r8, r5
 8011b7a:	9506      	str	r5, [sp, #24]
 8011b7c:	46a9      	mov	r9, r5
 8011b7e:	2322      	movs	r3, #34	; 0x22
 8011b80:	f8df b150 	ldr.w	fp, [pc, #336]	; 8011cd4 <_strtod_l+0x5b4>
 8011b84:	6023      	str	r3, [r4, #0]
 8011b86:	f04f 0a00 	mov.w	sl, #0
 8011b8a:	9b06      	ldr	r3, [sp, #24]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	f43f ae09 	beq.w	80117a4 <_strtod_l+0x84>
 8011b92:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011b94:	4620      	mov	r0, r4
 8011b96:	f002 f829 	bl	8013bec <_Bfree>
 8011b9a:	4649      	mov	r1, r9
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	f002 f825 	bl	8013bec <_Bfree>
 8011ba2:	4641      	mov	r1, r8
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	f002 f821 	bl	8013bec <_Bfree>
 8011baa:	9906      	ldr	r1, [sp, #24]
 8011bac:	4620      	mov	r0, r4
 8011bae:	f002 f81d 	bl	8013bec <_Bfree>
 8011bb2:	4629      	mov	r1, r5
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	f002 f819 	bl	8013bec <_Bfree>
 8011bba:	e5f3      	b.n	80117a4 <_strtod_l+0x84>
 8011bbc:	9804      	ldr	r0, [sp, #16]
 8011bbe:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8011bc2:	4281      	cmp	r1, r0
 8011bc4:	dbbd      	blt.n	8011b42 <_strtod_l+0x422>
 8011bc6:	4a40      	ldr	r2, [pc, #256]	; (8011cc8 <_strtod_l+0x5a8>)
 8011bc8:	f1c3 030f 	rsb	r3, r3, #15
 8011bcc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011bd0:	ed91 7b00 	vldr	d7, [r1]
 8011bd4:	ec4b ab16 	vmov	d6, sl, fp
 8011bd8:	1ac3      	subs	r3, r0, r3
 8011bda:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011bde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011be2:	ed92 6b00 	vldr	d6, [r2]
 8011be6:	e796      	b.n	8011b16 <_strtod_l+0x3f6>
 8011be8:	3116      	adds	r1, #22
 8011bea:	dbaa      	blt.n	8011b42 <_strtod_l+0x422>
 8011bec:	4936      	ldr	r1, [pc, #216]	; (8011cc8 <_strtod_l+0x5a8>)
 8011bee:	9b04      	ldr	r3, [sp, #16]
 8011bf0:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8011bf4:	ed91 7b00 	vldr	d7, [r1]
 8011bf8:	ec4b ab16 	vmov	d6, sl, fp
 8011bfc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011c00:	e78b      	b.n	8011b1a <_strtod_l+0x3fa>
 8011c02:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8011c06:	2000      	movs	r0, #0
 8011c08:	4e30      	ldr	r6, [pc, #192]	; (8011ccc <_strtod_l+0x5ac>)
 8011c0a:	1112      	asrs	r2, r2, #4
 8011c0c:	4601      	mov	r1, r0
 8011c0e:	2a01      	cmp	r2, #1
 8011c10:	dc23      	bgt.n	8011c5a <_strtod_l+0x53a>
 8011c12:	b108      	cbz	r0, 8011c18 <_strtod_l+0x4f8>
 8011c14:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8011c18:	4a2c      	ldr	r2, [pc, #176]	; (8011ccc <_strtod_l+0x5ac>)
 8011c1a:	482d      	ldr	r0, [pc, #180]	; (8011cd0 <_strtod_l+0x5b0>)
 8011c1c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8011c20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011c24:	ed91 7b00 	vldr	d7, [r1]
 8011c28:	ec4b ab16 	vmov	d6, sl, fp
 8011c2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011c30:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011c34:	9907      	ldr	r1, [sp, #28]
 8011c36:	4a27      	ldr	r2, [pc, #156]	; (8011cd4 <_strtod_l+0x5b4>)
 8011c38:	400a      	ands	r2, r1
 8011c3a:	4282      	cmp	r2, r0
 8011c3c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8011c40:	d899      	bhi.n	8011b76 <_strtod_l+0x456>
 8011c42:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8011c46:	4282      	cmp	r2, r0
 8011c48:	bf86      	itte	hi
 8011c4a:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 8011cdc <_strtod_l+0x5bc>
 8011c4e:	f04f 3aff 	movhi.w	sl, #4294967295
 8011c52:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 8011c56:	2700      	movs	r7, #0
 8011c58:	e070      	b.n	8011d3c <_strtod_l+0x61c>
 8011c5a:	07d7      	lsls	r7, r2, #31
 8011c5c:	d50a      	bpl.n	8011c74 <_strtod_l+0x554>
 8011c5e:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 8011c62:	ed90 7b00 	vldr	d7, [r0]
 8011c66:	ed9d 6b06 	vldr	d6, [sp, #24]
 8011c6a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011c6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011c72:	2001      	movs	r0, #1
 8011c74:	3101      	adds	r1, #1
 8011c76:	1052      	asrs	r2, r2, #1
 8011c78:	e7c9      	b.n	8011c0e <_strtod_l+0x4ee>
 8011c7a:	d0ec      	beq.n	8011c56 <_strtod_l+0x536>
 8011c7c:	4252      	negs	r2, r2
 8011c7e:	f012 000f 	ands.w	r0, r2, #15
 8011c82:	d00a      	beq.n	8011c9a <_strtod_l+0x57a>
 8011c84:	4910      	ldr	r1, [pc, #64]	; (8011cc8 <_strtod_l+0x5a8>)
 8011c86:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011c8a:	ed91 7b00 	vldr	d7, [r1]
 8011c8e:	ec4b ab16 	vmov	d6, sl, fp
 8011c92:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011c96:	ec5b ab17 	vmov	sl, fp, d7
 8011c9a:	1112      	asrs	r2, r2, #4
 8011c9c:	d0db      	beq.n	8011c56 <_strtod_l+0x536>
 8011c9e:	2a1f      	cmp	r2, #31
 8011ca0:	dd1e      	ble.n	8011ce0 <_strtod_l+0x5c0>
 8011ca2:	2500      	movs	r5, #0
 8011ca4:	46a8      	mov	r8, r5
 8011ca6:	9506      	str	r5, [sp, #24]
 8011ca8:	46a9      	mov	r9, r5
 8011caa:	2322      	movs	r3, #34	; 0x22
 8011cac:	f04f 0a00 	mov.w	sl, #0
 8011cb0:	f04f 0b00 	mov.w	fp, #0
 8011cb4:	6023      	str	r3, [r4, #0]
 8011cb6:	e768      	b.n	8011b8a <_strtod_l+0x46a>
 8011cb8:	08015949 	.word	0x08015949
 8011cbc:	080159d3 	.word	0x080159d3
 8011cc0:	08015951 	.word	0x08015951
 8011cc4:	08015994 	.word	0x08015994
 8011cc8:	08015a78 	.word	0x08015a78
 8011ccc:	08015a50 	.word	0x08015a50
 8011cd0:	7ca00000 	.word	0x7ca00000
 8011cd4:	7ff00000 	.word	0x7ff00000
 8011cd8:	fff80000 	.word	0xfff80000
 8011cdc:	7fefffff 	.word	0x7fefffff
 8011ce0:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8011ce4:	f012 0710 	ands.w	r7, r2, #16
 8011ce8:	49ab      	ldr	r1, [pc, #684]	; (8011f98 <_strtod_l+0x878>)
 8011cea:	bf18      	it	ne
 8011cec:	276a      	movne	r7, #106	; 0x6a
 8011cee:	2000      	movs	r0, #0
 8011cf0:	2a00      	cmp	r2, #0
 8011cf2:	f300 8113 	bgt.w	8011f1c <_strtod_l+0x7fc>
 8011cf6:	b108      	cbz	r0, 8011cfc <_strtod_l+0x5dc>
 8011cf8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8011cfc:	b1bf      	cbz	r7, 8011d2e <_strtod_l+0x60e>
 8011cfe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011d02:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8011d06:	2a00      	cmp	r2, #0
 8011d08:	4659      	mov	r1, fp
 8011d0a:	dd10      	ble.n	8011d2e <_strtod_l+0x60e>
 8011d0c:	2a1f      	cmp	r2, #31
 8011d0e:	f340 8113 	ble.w	8011f38 <_strtod_l+0x818>
 8011d12:	2a34      	cmp	r2, #52	; 0x34
 8011d14:	bfde      	ittt	le
 8011d16:	3a20      	suble	r2, #32
 8011d18:	f04f 30ff 	movle.w	r0, #4294967295
 8011d1c:	fa00 f202 	lslle.w	r2, r0, r2
 8011d20:	f04f 0a00 	mov.w	sl, #0
 8011d24:	bfcc      	ite	gt
 8011d26:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011d2a:	ea02 0b01 	andle.w	fp, r2, r1
 8011d2e:	ec4b ab17 	vmov	d7, sl, fp
 8011d32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d3a:	d0b2      	beq.n	8011ca2 <_strtod_l+0x582>
 8011d3c:	9a08      	ldr	r2, [sp, #32]
 8011d3e:	9200      	str	r2, [sp, #0]
 8011d40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011d42:	462a      	mov	r2, r5
 8011d44:	4620      	mov	r0, r4
 8011d46:	f001 ffa3 	bl	8013c90 <__s2b>
 8011d4a:	9006      	str	r0, [sp, #24]
 8011d4c:	2800      	cmp	r0, #0
 8011d4e:	f43f af12 	beq.w	8011b76 <_strtod_l+0x456>
 8011d52:	9a04      	ldr	r2, [sp, #16]
 8011d54:	9b04      	ldr	r3, [sp, #16]
 8011d56:	2a00      	cmp	r2, #0
 8011d58:	f1c3 0300 	rsb	r3, r3, #0
 8011d5c:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8011f80 <_strtod_l+0x860>
 8011d60:	bfa8      	it	ge
 8011d62:	2300      	movge	r3, #0
 8011d64:	ed9f ab88 	vldr	d10, [pc, #544]	; 8011f88 <_strtod_l+0x868>
 8011d68:	ed9f bb89 	vldr	d11, [pc, #548]	; 8011f90 <_strtod_l+0x870>
 8011d6c:	930e      	str	r3, [sp, #56]	; 0x38
 8011d6e:	2500      	movs	r5, #0
 8011d70:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011d74:	9310      	str	r3, [sp, #64]	; 0x40
 8011d76:	46a8      	mov	r8, r5
 8011d78:	9b06      	ldr	r3, [sp, #24]
 8011d7a:	4620      	mov	r0, r4
 8011d7c:	6859      	ldr	r1, [r3, #4]
 8011d7e:	f001 ff01 	bl	8013b84 <_Balloc>
 8011d82:	4681      	mov	r9, r0
 8011d84:	2800      	cmp	r0, #0
 8011d86:	f43f aefa 	beq.w	8011b7e <_strtod_l+0x45e>
 8011d8a:	9b06      	ldr	r3, [sp, #24]
 8011d8c:	691a      	ldr	r2, [r3, #16]
 8011d8e:	3202      	adds	r2, #2
 8011d90:	f103 010c 	add.w	r1, r3, #12
 8011d94:	0092      	lsls	r2, r2, #2
 8011d96:	300c      	adds	r0, #12
 8011d98:	f7fe fde2 	bl	8010960 <memcpy>
 8011d9c:	aa1a      	add	r2, sp, #104	; 0x68
 8011d9e:	a919      	add	r1, sp, #100	; 0x64
 8011da0:	ec4b ab10 	vmov	d0, sl, fp
 8011da4:	4620      	mov	r0, r4
 8011da6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8011daa:	f002 fa2d 	bl	8014208 <__d2b>
 8011dae:	9018      	str	r0, [sp, #96]	; 0x60
 8011db0:	2800      	cmp	r0, #0
 8011db2:	f43f aee4 	beq.w	8011b7e <_strtod_l+0x45e>
 8011db6:	2101      	movs	r1, #1
 8011db8:	4620      	mov	r0, r4
 8011dba:	f001 fff5 	bl	8013da8 <__i2b>
 8011dbe:	4680      	mov	r8, r0
 8011dc0:	2800      	cmp	r0, #0
 8011dc2:	f43f aedc 	beq.w	8011b7e <_strtod_l+0x45e>
 8011dc6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8011dc8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011dca:	2e00      	cmp	r6, #0
 8011dcc:	bfb1      	iteee	lt
 8011dce:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8011dd0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011dd2:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8011dd4:	18f3      	addge	r3, r6, r3
 8011dd6:	bfba      	itte	lt
 8011dd8:	1b98      	sublt	r0, r3, r6
 8011dda:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011ddc:	9308      	strge	r3, [sp, #32]
 8011dde:	eba6 0607 	sub.w	r6, r6, r7
 8011de2:	bfb8      	it	lt
 8011de4:	9308      	strlt	r3, [sp, #32]
 8011de6:	4416      	add	r6, r2
 8011de8:	4b6c      	ldr	r3, [pc, #432]	; (8011f9c <_strtod_l+0x87c>)
 8011dea:	3e01      	subs	r6, #1
 8011dec:	429e      	cmp	r6, r3
 8011dee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011df2:	f280 80b4 	bge.w	8011f5e <_strtod_l+0x83e>
 8011df6:	1b9b      	subs	r3, r3, r6
 8011df8:	2b1f      	cmp	r3, #31
 8011dfa:	eba2 0203 	sub.w	r2, r2, r3
 8011dfe:	f04f 0101 	mov.w	r1, #1
 8011e02:	f300 80a0 	bgt.w	8011f46 <_strtod_l+0x826>
 8011e06:	fa01 f303 	lsl.w	r3, r1, r3
 8011e0a:	9311      	str	r3, [sp, #68]	; 0x44
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e10:	9b08      	ldr	r3, [sp, #32]
 8011e12:	4413      	add	r3, r2
 8011e14:	4402      	add	r2, r0
 8011e16:	18be      	adds	r6, r7, r2
 8011e18:	9a08      	ldr	r2, [sp, #32]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	bfa8      	it	ge
 8011e1e:	461a      	movge	r2, r3
 8011e20:	42b2      	cmp	r2, r6
 8011e22:	bfa8      	it	ge
 8011e24:	4632      	movge	r2, r6
 8011e26:	2a00      	cmp	r2, #0
 8011e28:	dd04      	ble.n	8011e34 <_strtod_l+0x714>
 8011e2a:	9908      	ldr	r1, [sp, #32]
 8011e2c:	1a9b      	subs	r3, r3, r2
 8011e2e:	1ab6      	subs	r6, r6, r2
 8011e30:	1a8a      	subs	r2, r1, r2
 8011e32:	9208      	str	r2, [sp, #32]
 8011e34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e36:	b1c2      	cbz	r2, 8011e6a <_strtod_l+0x74a>
 8011e38:	4641      	mov	r1, r8
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	9315      	str	r3, [sp, #84]	; 0x54
 8011e3e:	f002 f853 	bl	8013ee8 <__pow5mult>
 8011e42:	4680      	mov	r8, r0
 8011e44:	2800      	cmp	r0, #0
 8011e46:	f43f ae9a 	beq.w	8011b7e <_strtod_l+0x45e>
 8011e4a:	4601      	mov	r1, r0
 8011e4c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011e4e:	4620      	mov	r0, r4
 8011e50:	f001 ffb3 	bl	8013dba <__multiply>
 8011e54:	900c      	str	r0, [sp, #48]	; 0x30
 8011e56:	2800      	cmp	r0, #0
 8011e58:	f43f ae91 	beq.w	8011b7e <_strtod_l+0x45e>
 8011e5c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011e5e:	4620      	mov	r0, r4
 8011e60:	f001 fec4 	bl	8013bec <_Bfree>
 8011e64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e68:	9218      	str	r2, [sp, #96]	; 0x60
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	dc7c      	bgt.n	8011f68 <_strtod_l+0x848>
 8011e6e:	9b04      	ldr	r3, [sp, #16]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	dd08      	ble.n	8011e86 <_strtod_l+0x766>
 8011e74:	4649      	mov	r1, r9
 8011e76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011e78:	4620      	mov	r0, r4
 8011e7a:	f002 f835 	bl	8013ee8 <__pow5mult>
 8011e7e:	4681      	mov	r9, r0
 8011e80:	2800      	cmp	r0, #0
 8011e82:	f43f ae7c 	beq.w	8011b7e <_strtod_l+0x45e>
 8011e86:	2e00      	cmp	r6, #0
 8011e88:	dd08      	ble.n	8011e9c <_strtod_l+0x77c>
 8011e8a:	4649      	mov	r1, r9
 8011e8c:	4632      	mov	r2, r6
 8011e8e:	4620      	mov	r0, r4
 8011e90:	f002 f878 	bl	8013f84 <__lshift>
 8011e94:	4681      	mov	r9, r0
 8011e96:	2800      	cmp	r0, #0
 8011e98:	f43f ae71 	beq.w	8011b7e <_strtod_l+0x45e>
 8011e9c:	9b08      	ldr	r3, [sp, #32]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	dd08      	ble.n	8011eb4 <_strtod_l+0x794>
 8011ea2:	4641      	mov	r1, r8
 8011ea4:	461a      	mov	r2, r3
 8011ea6:	4620      	mov	r0, r4
 8011ea8:	f002 f86c 	bl	8013f84 <__lshift>
 8011eac:	4680      	mov	r8, r0
 8011eae:	2800      	cmp	r0, #0
 8011eb0:	f43f ae65 	beq.w	8011b7e <_strtod_l+0x45e>
 8011eb4:	464a      	mov	r2, r9
 8011eb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011eb8:	4620      	mov	r0, r4
 8011eba:	f002 f8d1 	bl	8014060 <__mdiff>
 8011ebe:	4605      	mov	r5, r0
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	f43f ae5c 	beq.w	8011b7e <_strtod_l+0x45e>
 8011ec6:	68c3      	ldr	r3, [r0, #12]
 8011ec8:	930c      	str	r3, [sp, #48]	; 0x30
 8011eca:	2300      	movs	r3, #0
 8011ecc:	60c3      	str	r3, [r0, #12]
 8011ece:	4641      	mov	r1, r8
 8011ed0:	f002 f8ac 	bl	801402c <__mcmp>
 8011ed4:	2800      	cmp	r0, #0
 8011ed6:	da63      	bge.n	8011fa0 <_strtod_l+0x880>
 8011ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011eda:	b9e3      	cbnz	r3, 8011f16 <_strtod_l+0x7f6>
 8011edc:	f1ba 0f00 	cmp.w	sl, #0
 8011ee0:	d119      	bne.n	8011f16 <_strtod_l+0x7f6>
 8011ee2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011ee6:	b9b3      	cbnz	r3, 8011f16 <_strtod_l+0x7f6>
 8011ee8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011eec:	0d1b      	lsrs	r3, r3, #20
 8011eee:	051b      	lsls	r3, r3, #20
 8011ef0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011ef4:	d90f      	bls.n	8011f16 <_strtod_l+0x7f6>
 8011ef6:	696b      	ldr	r3, [r5, #20]
 8011ef8:	b913      	cbnz	r3, 8011f00 <_strtod_l+0x7e0>
 8011efa:	692b      	ldr	r3, [r5, #16]
 8011efc:	2b01      	cmp	r3, #1
 8011efe:	dd0a      	ble.n	8011f16 <_strtod_l+0x7f6>
 8011f00:	4629      	mov	r1, r5
 8011f02:	2201      	movs	r2, #1
 8011f04:	4620      	mov	r0, r4
 8011f06:	f002 f83d 	bl	8013f84 <__lshift>
 8011f0a:	4641      	mov	r1, r8
 8011f0c:	4605      	mov	r5, r0
 8011f0e:	f002 f88d 	bl	801402c <__mcmp>
 8011f12:	2800      	cmp	r0, #0
 8011f14:	dc75      	bgt.n	8012002 <_strtod_l+0x8e2>
 8011f16:	2f00      	cmp	r7, #0
 8011f18:	d17f      	bne.n	801201a <_strtod_l+0x8fa>
 8011f1a:	e63a      	b.n	8011b92 <_strtod_l+0x472>
 8011f1c:	07d6      	lsls	r6, r2, #31
 8011f1e:	d508      	bpl.n	8011f32 <_strtod_l+0x812>
 8011f20:	ed9d 6b06 	vldr	d6, [sp, #24]
 8011f24:	ed91 7b00 	vldr	d7, [r1]
 8011f28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011f2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011f30:	2001      	movs	r0, #1
 8011f32:	1052      	asrs	r2, r2, #1
 8011f34:	3108      	adds	r1, #8
 8011f36:	e6db      	b.n	8011cf0 <_strtod_l+0x5d0>
 8011f38:	f04f 31ff 	mov.w	r1, #4294967295
 8011f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8011f40:	ea02 0a0a 	and.w	sl, r2, sl
 8011f44:	e6f3      	b.n	8011d2e <_strtod_l+0x60e>
 8011f46:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011f4a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011f4e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011f52:	36e2      	adds	r6, #226	; 0xe2
 8011f54:	fa01 f306 	lsl.w	r3, r1, r6
 8011f58:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f5a:	9111      	str	r1, [sp, #68]	; 0x44
 8011f5c:	e758      	b.n	8011e10 <_strtod_l+0x6f0>
 8011f5e:	2300      	movs	r3, #0
 8011f60:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f62:	2301      	movs	r3, #1
 8011f64:	9311      	str	r3, [sp, #68]	; 0x44
 8011f66:	e753      	b.n	8011e10 <_strtod_l+0x6f0>
 8011f68:	461a      	mov	r2, r3
 8011f6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011f6c:	4620      	mov	r0, r4
 8011f6e:	f002 f809 	bl	8013f84 <__lshift>
 8011f72:	9018      	str	r0, [sp, #96]	; 0x60
 8011f74:	2800      	cmp	r0, #0
 8011f76:	f47f af7a 	bne.w	8011e6e <_strtod_l+0x74e>
 8011f7a:	e600      	b.n	8011b7e <_strtod_l+0x45e>
 8011f7c:	f3af 8000 	nop.w
 8011f80:	94a03595 	.word	0x94a03595
 8011f84:	3fdfffff 	.word	0x3fdfffff
 8011f88:	35afe535 	.word	0x35afe535
 8011f8c:	3fe00000 	.word	0x3fe00000
 8011f90:	94a03595 	.word	0x94a03595
 8011f94:	3fcfffff 	.word	0x3fcfffff
 8011f98:	080159a8 	.word	0x080159a8
 8011f9c:	fffffc02 	.word	0xfffffc02
 8011fa0:	f8cd b020 	str.w	fp, [sp, #32]
 8011fa4:	f040 8085 	bne.w	80120b2 <_strtod_l+0x992>
 8011fa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011faa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011fae:	b322      	cbz	r2, 8011ffa <_strtod_l+0x8da>
 8011fb0:	4ab7      	ldr	r2, [pc, #732]	; (8012290 <_strtod_l+0xb70>)
 8011fb2:	4293      	cmp	r3, r2
 8011fb4:	d154      	bne.n	8012060 <_strtod_l+0x940>
 8011fb6:	4651      	mov	r1, sl
 8011fb8:	b1e7      	cbz	r7, 8011ff4 <_strtod_l+0x8d4>
 8011fba:	4bb6      	ldr	r3, [pc, #728]	; (8012294 <_strtod_l+0xb74>)
 8011fbc:	465a      	mov	r2, fp
 8011fbe:	4013      	ands	r3, r2
 8011fc0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8011fc8:	d803      	bhi.n	8011fd2 <_strtod_l+0x8b2>
 8011fca:	0d1b      	lsrs	r3, r3, #20
 8011fcc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011fd0:	409a      	lsls	r2, r3
 8011fd2:	4291      	cmp	r1, r2
 8011fd4:	d144      	bne.n	8012060 <_strtod_l+0x940>
 8011fd6:	4bb0      	ldr	r3, [pc, #704]	; (8012298 <_strtod_l+0xb78>)
 8011fd8:	9a08      	ldr	r2, [sp, #32]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d102      	bne.n	8011fe4 <_strtod_l+0x8c4>
 8011fde:	3101      	adds	r1, #1
 8011fe0:	f43f adcd 	beq.w	8011b7e <_strtod_l+0x45e>
 8011fe4:	4bab      	ldr	r3, [pc, #684]	; (8012294 <_strtod_l+0xb74>)
 8011fe6:	9a08      	ldr	r2, [sp, #32]
 8011fe8:	401a      	ands	r2, r3
 8011fea:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 8011fee:	f04f 0a00 	mov.w	sl, #0
 8011ff2:	e790      	b.n	8011f16 <_strtod_l+0x7f6>
 8011ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ff8:	e7eb      	b.n	8011fd2 <_strtod_l+0x8b2>
 8011ffa:	bb8b      	cbnz	r3, 8012060 <_strtod_l+0x940>
 8011ffc:	f1ba 0f00 	cmp.w	sl, #0
 8012000:	d12e      	bne.n	8012060 <_strtod_l+0x940>
 8012002:	465b      	mov	r3, fp
 8012004:	4aa3      	ldr	r2, [pc, #652]	; (8012294 <_strtod_l+0xb74>)
 8012006:	b30f      	cbz	r7, 801204c <_strtod_l+0x92c>
 8012008:	ea02 010b 	and.w	r1, r2, fp
 801200c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012010:	dc1c      	bgt.n	801204c <_strtod_l+0x92c>
 8012012:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012016:	f77f ae48 	ble.w	8011caa <_strtod_l+0x58a>
 801201a:	4aa0      	ldr	r2, [pc, #640]	; (801229c <_strtod_l+0xb7c>)
 801201c:	2300      	movs	r3, #0
 801201e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8012022:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8012026:	ec4b ab17 	vmov	d7, sl, fp
 801202a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801202e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012032:	9b05      	ldr	r3, [sp, #20]
 8012034:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012038:	2b00      	cmp	r3, #0
 801203a:	f47f adaa 	bne.w	8011b92 <_strtod_l+0x472>
 801203e:	9b04      	ldr	r3, [sp, #16]
 8012040:	2b00      	cmp	r3, #0
 8012042:	f47f ada6 	bne.w	8011b92 <_strtod_l+0x472>
 8012046:	2322      	movs	r3, #34	; 0x22
 8012048:	6023      	str	r3, [r4, #0]
 801204a:	e5a2      	b.n	8011b92 <_strtod_l+0x472>
 801204c:	4013      	ands	r3, r2
 801204e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012052:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012056:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801205a:	f04f 3aff 	mov.w	sl, #4294967295
 801205e:	e75a      	b.n	8011f16 <_strtod_l+0x7f6>
 8012060:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012062:	b18b      	cbz	r3, 8012088 <_strtod_l+0x968>
 8012064:	9a08      	ldr	r2, [sp, #32]
 8012066:	4213      	tst	r3, r2
 8012068:	f43f af55 	beq.w	8011f16 <_strtod_l+0x7f6>
 801206c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801206e:	463a      	mov	r2, r7
 8012070:	4650      	mov	r0, sl
 8012072:	4659      	mov	r1, fp
 8012074:	b163      	cbz	r3, 8012090 <_strtod_l+0x970>
 8012076:	f7ff fb39 	bl	80116ec <sulp>
 801207a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801207e:	ee37 7b00 	vadd.f64	d7, d7, d0
 8012082:	ec5b ab17 	vmov	sl, fp, d7
 8012086:	e746      	b.n	8011f16 <_strtod_l+0x7f6>
 8012088:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801208a:	ea13 0f0a 	tst.w	r3, sl
 801208e:	e7eb      	b.n	8012068 <_strtod_l+0x948>
 8012090:	f7ff fb2c 	bl	80116ec <sulp>
 8012094:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8012098:	ee37 7b40 	vsub.f64	d7, d7, d0
 801209c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80120a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80120a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80120ac:	f43f adfd 	beq.w	8011caa <_strtod_l+0x58a>
 80120b0:	e731      	b.n	8011f16 <_strtod_l+0x7f6>
 80120b2:	4641      	mov	r1, r8
 80120b4:	4628      	mov	r0, r5
 80120b6:	f002 f8f6 	bl	80142a6 <__ratio>
 80120ba:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80120be:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80120c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120c6:	d869      	bhi.n	801219c <_strtod_l+0xa7c>
 80120c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d045      	beq.n	801215a <_strtod_l+0xa3a>
 80120ce:	4b74      	ldr	r3, [pc, #464]	; (80122a0 <_strtod_l+0xb80>)
 80120d0:	2200      	movs	r2, #0
 80120d2:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80120d6:	9808      	ldr	r0, [sp, #32]
 80120d8:	496e      	ldr	r1, [pc, #440]	; (8012294 <_strtod_l+0xb74>)
 80120da:	ea00 0601 	and.w	r6, r0, r1
 80120de:	4871      	ldr	r0, [pc, #452]	; (80122a4 <_strtod_l+0xb84>)
 80120e0:	4286      	cmp	r6, r0
 80120e2:	f040 8089 	bne.w	80121f8 <_strtod_l+0xad8>
 80120e6:	910f      	str	r1, [sp, #60]	; 0x3c
 80120e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80120ec:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80120f0:	9908      	ldr	r1, [sp, #32]
 80120f2:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 80120f6:	ec4b ab10 	vmov	d0, sl, fp
 80120fa:	ec43 2b1c 	vmov	d12, r2, r3
 80120fe:	f002 f80d 	bl	801411c <__ulp>
 8012102:	ec4b ab1d 	vmov	d13, sl, fp
 8012106:	eeac db00 	vfma.f64	d13, d12, d0
 801210a:	ed8d db08 	vstr	d13, [sp, #32]
 801210e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012110:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012112:	4a65      	ldr	r2, [pc, #404]	; (80122a8 <_strtod_l+0xb88>)
 8012114:	4019      	ands	r1, r3
 8012116:	4291      	cmp	r1, r2
 8012118:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 801211c:	d948      	bls.n	80121b0 <_strtod_l+0xa90>
 801211e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012120:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012124:	4293      	cmp	r3, r2
 8012126:	d103      	bne.n	8012130 <_strtod_l+0xa10>
 8012128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801212a:	3301      	adds	r3, #1
 801212c:	f43f ad27 	beq.w	8011b7e <_strtod_l+0x45e>
 8012130:	f8df b164 	ldr.w	fp, [pc, #356]	; 8012298 <_strtod_l+0xb78>
 8012134:	f04f 3aff 	mov.w	sl, #4294967295
 8012138:	9918      	ldr	r1, [sp, #96]	; 0x60
 801213a:	4620      	mov	r0, r4
 801213c:	f001 fd56 	bl	8013bec <_Bfree>
 8012140:	4649      	mov	r1, r9
 8012142:	4620      	mov	r0, r4
 8012144:	f001 fd52 	bl	8013bec <_Bfree>
 8012148:	4641      	mov	r1, r8
 801214a:	4620      	mov	r0, r4
 801214c:	f001 fd4e 	bl	8013bec <_Bfree>
 8012150:	4629      	mov	r1, r5
 8012152:	4620      	mov	r0, r4
 8012154:	f001 fd4a 	bl	8013bec <_Bfree>
 8012158:	e60e      	b.n	8011d78 <_strtod_l+0x658>
 801215a:	f1ba 0f00 	cmp.w	sl, #0
 801215e:	d113      	bne.n	8012188 <_strtod_l+0xa68>
 8012160:	9b08      	ldr	r3, [sp, #32]
 8012162:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012166:	b9b3      	cbnz	r3, 8012196 <_strtod_l+0xa76>
 8012168:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801216c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012174:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8012178:	d401      	bmi.n	801217e <_strtod_l+0xa5e>
 801217a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801217e:	eeb1 7b48 	vneg.f64	d7, d8
 8012182:	ec53 2b17 	vmov	r2, r3, d7
 8012186:	e7a6      	b.n	80120d6 <_strtod_l+0x9b6>
 8012188:	f1ba 0f01 	cmp.w	sl, #1
 801218c:	d103      	bne.n	8012196 <_strtod_l+0xa76>
 801218e:	9b08      	ldr	r3, [sp, #32]
 8012190:	2b00      	cmp	r3, #0
 8012192:	f43f ad8a 	beq.w	8011caa <_strtod_l+0x58a>
 8012196:	2200      	movs	r2, #0
 8012198:	4b44      	ldr	r3, [pc, #272]	; (80122ac <_strtod_l+0xb8c>)
 801219a:	e79a      	b.n	80120d2 <_strtod_l+0x9b2>
 801219c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801219e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80121a2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d0e9      	beq.n	801217e <_strtod_l+0xa5e>
 80121aa:	ec53 2b18 	vmov	r2, r3, d8
 80121ae:	e792      	b.n	80120d6 <_strtod_l+0x9b6>
 80121b0:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80121b4:	2f00      	cmp	r7, #0
 80121b6:	d1bf      	bne.n	8012138 <_strtod_l+0xa18>
 80121b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80121bc:	0d1b      	lsrs	r3, r3, #20
 80121be:	051b      	lsls	r3, r3, #20
 80121c0:	429e      	cmp	r6, r3
 80121c2:	d1b9      	bne.n	8012138 <_strtod_l+0xa18>
 80121c4:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 80121c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121ca:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 80121ce:	ee38 8b40 	vsub.f64	d8, d8, d0
 80121d2:	b92b      	cbnz	r3, 80121e0 <_strtod_l+0xac0>
 80121d4:	f1ba 0f00 	cmp.w	sl, #0
 80121d8:	d102      	bne.n	80121e0 <_strtod_l+0xac0>
 80121da:	f3cb 0213 	ubfx	r2, fp, #0, #20
 80121de:	b3d2      	cbz	r2, 8012256 <_strtod_l+0xb36>
 80121e0:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80121e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121e8:	f53f acd3 	bmi.w	8011b92 <_strtod_l+0x472>
 80121ec:	eeb4 8bca 	vcmpe.f64	d8, d10
 80121f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f4:	dda0      	ble.n	8012138 <_strtod_l+0xa18>
 80121f6:	e4cc      	b.n	8011b92 <_strtod_l+0x472>
 80121f8:	b1ef      	cbz	r7, 8012236 <_strtod_l+0xb16>
 80121fa:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 80121fe:	d81a      	bhi.n	8012236 <_strtod_l+0xb16>
 8012200:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8012288 <_strtod_l+0xb68>
 8012204:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801220c:	d810      	bhi.n	8012230 <_strtod_l+0xb10>
 801220e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8012212:	ee17 3a90 	vmov	r3, s15
 8012216:	2b00      	cmp	r3, #0
 8012218:	bf08      	it	eq
 801221a:	2301      	moveq	r3, #1
 801221c:	ee07 3a90 	vmov	s15, r3
 8012220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012222:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8012226:	b99b      	cbnz	r3, 8012250 <_strtod_l+0xb30>
 8012228:	eeb1 7b48 	vneg.f64	d7, d8
 801222c:	ec53 2b17 	vmov	r2, r3, d7
 8012230:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8012234:	1b8b      	subs	r3, r1, r6
 8012236:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801223a:	ec43 2b1c 	vmov	d12, r2, r3
 801223e:	f001 ff6d 	bl	801411c <__ulp>
 8012242:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8012246:	eeac 7b00 	vfma.f64	d7, d12, d0
 801224a:	ec5b ab17 	vmov	sl, fp, d7
 801224e:	e7b1      	b.n	80121b4 <_strtod_l+0xa94>
 8012250:	ec53 2b18 	vmov	r2, r3, d8
 8012254:	e7ec      	b.n	8012230 <_strtod_l+0xb10>
 8012256:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801225a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801225e:	f57f af6b 	bpl.w	8012138 <_strtod_l+0xa18>
 8012262:	e496      	b.n	8011b92 <_strtod_l+0x472>
 8012264:	2300      	movs	r3, #0
 8012266:	930d      	str	r3, [sp, #52]	; 0x34
 8012268:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801226a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801226c:	6013      	str	r3, [r2, #0]
 801226e:	f7ff ba9d 	b.w	80117ac <_strtod_l+0x8c>
 8012272:	2a65      	cmp	r2, #101	; 0x65
 8012274:	f04f 0100 	mov.w	r1, #0
 8012278:	f43f ab97 	beq.w	80119aa <_strtod_l+0x28a>
 801227c:	2701      	movs	r7, #1
 801227e:	460b      	mov	r3, r1
 8012280:	9704      	str	r7, [sp, #16]
 8012282:	f7ff bb0a 	b.w	801189a <_strtod_l+0x17a>
 8012286:	bf00      	nop
 8012288:	ffc00000 	.word	0xffc00000
 801228c:	41dfffff 	.word	0x41dfffff
 8012290:	000fffff 	.word	0x000fffff
 8012294:	7ff00000 	.word	0x7ff00000
 8012298:	7fefffff 	.word	0x7fefffff
 801229c:	39500000 	.word	0x39500000
 80122a0:	3ff00000 	.word	0x3ff00000
 80122a4:	7fe00000 	.word	0x7fe00000
 80122a8:	7c9fffff 	.word	0x7c9fffff
 80122ac:	bff00000 	.word	0xbff00000

080122b0 <_strtod_r>:
 80122b0:	4b05      	ldr	r3, [pc, #20]	; (80122c8 <_strtod_r+0x18>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	b410      	push	{r4}
 80122b6:	6a1b      	ldr	r3, [r3, #32]
 80122b8:	4c04      	ldr	r4, [pc, #16]	; (80122cc <_strtod_r+0x1c>)
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	bf08      	it	eq
 80122be:	4623      	moveq	r3, r4
 80122c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122c4:	f7ff ba2c 	b.w	8011720 <_strtod_l>
 80122c8:	20000198 	.word	0x20000198
 80122cc:	200001fc 	.word	0x200001fc

080122d0 <_strtol_l.isra.0>:
 80122d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122d4:	4680      	mov	r8, r0
 80122d6:	4689      	mov	r9, r1
 80122d8:	4692      	mov	sl, r2
 80122da:	461e      	mov	r6, r3
 80122dc:	460f      	mov	r7, r1
 80122de:	463d      	mov	r5, r7
 80122e0:	9808      	ldr	r0, [sp, #32]
 80122e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80122e6:	f001 fbbb 	bl	8013a60 <__locale_ctype_ptr_l>
 80122ea:	4420      	add	r0, r4
 80122ec:	7843      	ldrb	r3, [r0, #1]
 80122ee:	f013 0308 	ands.w	r3, r3, #8
 80122f2:	d132      	bne.n	801235a <_strtol_l.isra.0+0x8a>
 80122f4:	2c2d      	cmp	r4, #45	; 0x2d
 80122f6:	d132      	bne.n	801235e <_strtol_l.isra.0+0x8e>
 80122f8:	787c      	ldrb	r4, [r7, #1]
 80122fa:	1cbd      	adds	r5, r7, #2
 80122fc:	2201      	movs	r2, #1
 80122fe:	2e00      	cmp	r6, #0
 8012300:	d05d      	beq.n	80123be <_strtol_l.isra.0+0xee>
 8012302:	2e10      	cmp	r6, #16
 8012304:	d109      	bne.n	801231a <_strtol_l.isra.0+0x4a>
 8012306:	2c30      	cmp	r4, #48	; 0x30
 8012308:	d107      	bne.n	801231a <_strtol_l.isra.0+0x4a>
 801230a:	782b      	ldrb	r3, [r5, #0]
 801230c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012310:	2b58      	cmp	r3, #88	; 0x58
 8012312:	d14f      	bne.n	80123b4 <_strtol_l.isra.0+0xe4>
 8012314:	786c      	ldrb	r4, [r5, #1]
 8012316:	2610      	movs	r6, #16
 8012318:	3502      	adds	r5, #2
 801231a:	2a00      	cmp	r2, #0
 801231c:	bf14      	ite	ne
 801231e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8012322:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8012326:	2700      	movs	r7, #0
 8012328:	fbb1 fcf6 	udiv	ip, r1, r6
 801232c:	4638      	mov	r0, r7
 801232e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8012332:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012336:	2b09      	cmp	r3, #9
 8012338:	d817      	bhi.n	801236a <_strtol_l.isra.0+0x9a>
 801233a:	461c      	mov	r4, r3
 801233c:	42a6      	cmp	r6, r4
 801233e:	dd23      	ble.n	8012388 <_strtol_l.isra.0+0xb8>
 8012340:	1c7b      	adds	r3, r7, #1
 8012342:	d007      	beq.n	8012354 <_strtol_l.isra.0+0x84>
 8012344:	4584      	cmp	ip, r0
 8012346:	d31c      	bcc.n	8012382 <_strtol_l.isra.0+0xb2>
 8012348:	d101      	bne.n	801234e <_strtol_l.isra.0+0x7e>
 801234a:	45a6      	cmp	lr, r4
 801234c:	db19      	blt.n	8012382 <_strtol_l.isra.0+0xb2>
 801234e:	fb00 4006 	mla	r0, r0, r6, r4
 8012352:	2701      	movs	r7, #1
 8012354:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012358:	e7eb      	b.n	8012332 <_strtol_l.isra.0+0x62>
 801235a:	462f      	mov	r7, r5
 801235c:	e7bf      	b.n	80122de <_strtol_l.isra.0+0xe>
 801235e:	2c2b      	cmp	r4, #43	; 0x2b
 8012360:	bf04      	itt	eq
 8012362:	1cbd      	addeq	r5, r7, #2
 8012364:	787c      	ldrbeq	r4, [r7, #1]
 8012366:	461a      	mov	r2, r3
 8012368:	e7c9      	b.n	80122fe <_strtol_l.isra.0+0x2e>
 801236a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801236e:	2b19      	cmp	r3, #25
 8012370:	d801      	bhi.n	8012376 <_strtol_l.isra.0+0xa6>
 8012372:	3c37      	subs	r4, #55	; 0x37
 8012374:	e7e2      	b.n	801233c <_strtol_l.isra.0+0x6c>
 8012376:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801237a:	2b19      	cmp	r3, #25
 801237c:	d804      	bhi.n	8012388 <_strtol_l.isra.0+0xb8>
 801237e:	3c57      	subs	r4, #87	; 0x57
 8012380:	e7dc      	b.n	801233c <_strtol_l.isra.0+0x6c>
 8012382:	f04f 37ff 	mov.w	r7, #4294967295
 8012386:	e7e5      	b.n	8012354 <_strtol_l.isra.0+0x84>
 8012388:	1c7b      	adds	r3, r7, #1
 801238a:	d108      	bne.n	801239e <_strtol_l.isra.0+0xce>
 801238c:	2322      	movs	r3, #34	; 0x22
 801238e:	f8c8 3000 	str.w	r3, [r8]
 8012392:	4608      	mov	r0, r1
 8012394:	f1ba 0f00 	cmp.w	sl, #0
 8012398:	d107      	bne.n	80123aa <_strtol_l.isra.0+0xda>
 801239a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801239e:	b102      	cbz	r2, 80123a2 <_strtol_l.isra.0+0xd2>
 80123a0:	4240      	negs	r0, r0
 80123a2:	f1ba 0f00 	cmp.w	sl, #0
 80123a6:	d0f8      	beq.n	801239a <_strtol_l.isra.0+0xca>
 80123a8:	b10f      	cbz	r7, 80123ae <_strtol_l.isra.0+0xde>
 80123aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80123ae:	f8ca 9000 	str.w	r9, [sl]
 80123b2:	e7f2      	b.n	801239a <_strtol_l.isra.0+0xca>
 80123b4:	2430      	movs	r4, #48	; 0x30
 80123b6:	2e00      	cmp	r6, #0
 80123b8:	d1af      	bne.n	801231a <_strtol_l.isra.0+0x4a>
 80123ba:	2608      	movs	r6, #8
 80123bc:	e7ad      	b.n	801231a <_strtol_l.isra.0+0x4a>
 80123be:	2c30      	cmp	r4, #48	; 0x30
 80123c0:	d0a3      	beq.n	801230a <_strtol_l.isra.0+0x3a>
 80123c2:	260a      	movs	r6, #10
 80123c4:	e7a9      	b.n	801231a <_strtol_l.isra.0+0x4a>
	...

080123c8 <_strtol_r>:
 80123c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80123ca:	4c06      	ldr	r4, [pc, #24]	; (80123e4 <_strtol_r+0x1c>)
 80123cc:	4d06      	ldr	r5, [pc, #24]	; (80123e8 <_strtol_r+0x20>)
 80123ce:	6824      	ldr	r4, [r4, #0]
 80123d0:	6a24      	ldr	r4, [r4, #32]
 80123d2:	2c00      	cmp	r4, #0
 80123d4:	bf08      	it	eq
 80123d6:	462c      	moveq	r4, r5
 80123d8:	9400      	str	r4, [sp, #0]
 80123da:	f7ff ff79 	bl	80122d0 <_strtol_l.isra.0>
 80123de:	b003      	add	sp, #12
 80123e0:	bd30      	pop	{r4, r5, pc}
 80123e2:	bf00      	nop
 80123e4:	20000198 	.word	0x20000198
 80123e8:	200001fc 	.word	0x200001fc

080123ec <__swbuf_r>:
 80123ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ee:	460e      	mov	r6, r1
 80123f0:	4614      	mov	r4, r2
 80123f2:	4605      	mov	r5, r0
 80123f4:	b118      	cbz	r0, 80123fe <__swbuf_r+0x12>
 80123f6:	6983      	ldr	r3, [r0, #24]
 80123f8:	b90b      	cbnz	r3, 80123fe <__swbuf_r+0x12>
 80123fa:	f000 ff81 	bl	8013300 <__sinit>
 80123fe:	4b21      	ldr	r3, [pc, #132]	; (8012484 <__swbuf_r+0x98>)
 8012400:	429c      	cmp	r4, r3
 8012402:	d12a      	bne.n	801245a <__swbuf_r+0x6e>
 8012404:	686c      	ldr	r4, [r5, #4]
 8012406:	69a3      	ldr	r3, [r4, #24]
 8012408:	60a3      	str	r3, [r4, #8]
 801240a:	89a3      	ldrh	r3, [r4, #12]
 801240c:	071a      	lsls	r2, r3, #28
 801240e:	d52e      	bpl.n	801246e <__swbuf_r+0x82>
 8012410:	6923      	ldr	r3, [r4, #16]
 8012412:	b363      	cbz	r3, 801246e <__swbuf_r+0x82>
 8012414:	6923      	ldr	r3, [r4, #16]
 8012416:	6820      	ldr	r0, [r4, #0]
 8012418:	1ac0      	subs	r0, r0, r3
 801241a:	6963      	ldr	r3, [r4, #20]
 801241c:	b2f6      	uxtb	r6, r6
 801241e:	4283      	cmp	r3, r0
 8012420:	4637      	mov	r7, r6
 8012422:	dc04      	bgt.n	801242e <__swbuf_r+0x42>
 8012424:	4621      	mov	r1, r4
 8012426:	4628      	mov	r0, r5
 8012428:	f000 ff00 	bl	801322c <_fflush_r>
 801242c:	bb28      	cbnz	r0, 801247a <__swbuf_r+0x8e>
 801242e:	68a3      	ldr	r3, [r4, #8]
 8012430:	3b01      	subs	r3, #1
 8012432:	60a3      	str	r3, [r4, #8]
 8012434:	6823      	ldr	r3, [r4, #0]
 8012436:	1c5a      	adds	r2, r3, #1
 8012438:	6022      	str	r2, [r4, #0]
 801243a:	701e      	strb	r6, [r3, #0]
 801243c:	6963      	ldr	r3, [r4, #20]
 801243e:	3001      	adds	r0, #1
 8012440:	4283      	cmp	r3, r0
 8012442:	d004      	beq.n	801244e <__swbuf_r+0x62>
 8012444:	89a3      	ldrh	r3, [r4, #12]
 8012446:	07db      	lsls	r3, r3, #31
 8012448:	d519      	bpl.n	801247e <__swbuf_r+0x92>
 801244a:	2e0a      	cmp	r6, #10
 801244c:	d117      	bne.n	801247e <__swbuf_r+0x92>
 801244e:	4621      	mov	r1, r4
 8012450:	4628      	mov	r0, r5
 8012452:	f000 feeb 	bl	801322c <_fflush_r>
 8012456:	b190      	cbz	r0, 801247e <__swbuf_r+0x92>
 8012458:	e00f      	b.n	801247a <__swbuf_r+0x8e>
 801245a:	4b0b      	ldr	r3, [pc, #44]	; (8012488 <__swbuf_r+0x9c>)
 801245c:	429c      	cmp	r4, r3
 801245e:	d101      	bne.n	8012464 <__swbuf_r+0x78>
 8012460:	68ac      	ldr	r4, [r5, #8]
 8012462:	e7d0      	b.n	8012406 <__swbuf_r+0x1a>
 8012464:	4b09      	ldr	r3, [pc, #36]	; (801248c <__swbuf_r+0xa0>)
 8012466:	429c      	cmp	r4, r3
 8012468:	bf08      	it	eq
 801246a:	68ec      	ldreq	r4, [r5, #12]
 801246c:	e7cb      	b.n	8012406 <__swbuf_r+0x1a>
 801246e:	4621      	mov	r1, r4
 8012470:	4628      	mov	r0, r5
 8012472:	f000 f80d 	bl	8012490 <__swsetup_r>
 8012476:	2800      	cmp	r0, #0
 8012478:	d0cc      	beq.n	8012414 <__swbuf_r+0x28>
 801247a:	f04f 37ff 	mov.w	r7, #4294967295
 801247e:	4638      	mov	r0, r7
 8012480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012482:	bf00      	nop
 8012484:	08015a00 	.word	0x08015a00
 8012488:	08015a20 	.word	0x08015a20
 801248c:	080159e0 	.word	0x080159e0

08012490 <__swsetup_r>:
 8012490:	4b32      	ldr	r3, [pc, #200]	; (801255c <__swsetup_r+0xcc>)
 8012492:	b570      	push	{r4, r5, r6, lr}
 8012494:	681d      	ldr	r5, [r3, #0]
 8012496:	4606      	mov	r6, r0
 8012498:	460c      	mov	r4, r1
 801249a:	b125      	cbz	r5, 80124a6 <__swsetup_r+0x16>
 801249c:	69ab      	ldr	r3, [r5, #24]
 801249e:	b913      	cbnz	r3, 80124a6 <__swsetup_r+0x16>
 80124a0:	4628      	mov	r0, r5
 80124a2:	f000 ff2d 	bl	8013300 <__sinit>
 80124a6:	4b2e      	ldr	r3, [pc, #184]	; (8012560 <__swsetup_r+0xd0>)
 80124a8:	429c      	cmp	r4, r3
 80124aa:	d10f      	bne.n	80124cc <__swsetup_r+0x3c>
 80124ac:	686c      	ldr	r4, [r5, #4]
 80124ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124b2:	b29a      	uxth	r2, r3
 80124b4:	0715      	lsls	r5, r2, #28
 80124b6:	d42c      	bmi.n	8012512 <__swsetup_r+0x82>
 80124b8:	06d0      	lsls	r0, r2, #27
 80124ba:	d411      	bmi.n	80124e0 <__swsetup_r+0x50>
 80124bc:	2209      	movs	r2, #9
 80124be:	6032      	str	r2, [r6, #0]
 80124c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124c4:	81a3      	strh	r3, [r4, #12]
 80124c6:	f04f 30ff 	mov.w	r0, #4294967295
 80124ca:	e03e      	b.n	801254a <__swsetup_r+0xba>
 80124cc:	4b25      	ldr	r3, [pc, #148]	; (8012564 <__swsetup_r+0xd4>)
 80124ce:	429c      	cmp	r4, r3
 80124d0:	d101      	bne.n	80124d6 <__swsetup_r+0x46>
 80124d2:	68ac      	ldr	r4, [r5, #8]
 80124d4:	e7eb      	b.n	80124ae <__swsetup_r+0x1e>
 80124d6:	4b24      	ldr	r3, [pc, #144]	; (8012568 <__swsetup_r+0xd8>)
 80124d8:	429c      	cmp	r4, r3
 80124da:	bf08      	it	eq
 80124dc:	68ec      	ldreq	r4, [r5, #12]
 80124de:	e7e6      	b.n	80124ae <__swsetup_r+0x1e>
 80124e0:	0751      	lsls	r1, r2, #29
 80124e2:	d512      	bpl.n	801250a <__swsetup_r+0x7a>
 80124e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80124e6:	b141      	cbz	r1, 80124fa <__swsetup_r+0x6a>
 80124e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80124ec:	4299      	cmp	r1, r3
 80124ee:	d002      	beq.n	80124f6 <__swsetup_r+0x66>
 80124f0:	4630      	mov	r0, r6
 80124f2:	f001 ff55 	bl	80143a0 <_free_r>
 80124f6:	2300      	movs	r3, #0
 80124f8:	6363      	str	r3, [r4, #52]	; 0x34
 80124fa:	89a3      	ldrh	r3, [r4, #12]
 80124fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012500:	81a3      	strh	r3, [r4, #12]
 8012502:	2300      	movs	r3, #0
 8012504:	6063      	str	r3, [r4, #4]
 8012506:	6923      	ldr	r3, [r4, #16]
 8012508:	6023      	str	r3, [r4, #0]
 801250a:	89a3      	ldrh	r3, [r4, #12]
 801250c:	f043 0308 	orr.w	r3, r3, #8
 8012510:	81a3      	strh	r3, [r4, #12]
 8012512:	6923      	ldr	r3, [r4, #16]
 8012514:	b94b      	cbnz	r3, 801252a <__swsetup_r+0x9a>
 8012516:	89a3      	ldrh	r3, [r4, #12]
 8012518:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801251c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012520:	d003      	beq.n	801252a <__swsetup_r+0x9a>
 8012522:	4621      	mov	r1, r4
 8012524:	4630      	mov	r0, r6
 8012526:	f001 fad3 	bl	8013ad0 <__smakebuf_r>
 801252a:	89a2      	ldrh	r2, [r4, #12]
 801252c:	f012 0301 	ands.w	r3, r2, #1
 8012530:	d00c      	beq.n	801254c <__swsetup_r+0xbc>
 8012532:	2300      	movs	r3, #0
 8012534:	60a3      	str	r3, [r4, #8]
 8012536:	6963      	ldr	r3, [r4, #20]
 8012538:	425b      	negs	r3, r3
 801253a:	61a3      	str	r3, [r4, #24]
 801253c:	6923      	ldr	r3, [r4, #16]
 801253e:	b953      	cbnz	r3, 8012556 <__swsetup_r+0xc6>
 8012540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012544:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012548:	d1ba      	bne.n	80124c0 <__swsetup_r+0x30>
 801254a:	bd70      	pop	{r4, r5, r6, pc}
 801254c:	0792      	lsls	r2, r2, #30
 801254e:	bf58      	it	pl
 8012550:	6963      	ldrpl	r3, [r4, #20]
 8012552:	60a3      	str	r3, [r4, #8]
 8012554:	e7f2      	b.n	801253c <__swsetup_r+0xac>
 8012556:	2000      	movs	r0, #0
 8012558:	e7f7      	b.n	801254a <__swsetup_r+0xba>
 801255a:	bf00      	nop
 801255c:	20000198 	.word	0x20000198
 8012560:	08015a00 	.word	0x08015a00
 8012564:	08015a20 	.word	0x08015a20
 8012568:	080159e0 	.word	0x080159e0

0801256c <quorem>:
 801256c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012570:	6903      	ldr	r3, [r0, #16]
 8012572:	690c      	ldr	r4, [r1, #16]
 8012574:	42a3      	cmp	r3, r4
 8012576:	4680      	mov	r8, r0
 8012578:	f2c0 8082 	blt.w	8012680 <quorem+0x114>
 801257c:	3c01      	subs	r4, #1
 801257e:	f101 0714 	add.w	r7, r1, #20
 8012582:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012586:	f100 0614 	add.w	r6, r0, #20
 801258a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801258e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012592:	eb06 030c 	add.w	r3, r6, ip
 8012596:	3501      	adds	r5, #1
 8012598:	eb07 090c 	add.w	r9, r7, ip
 801259c:	9301      	str	r3, [sp, #4]
 801259e:	fbb0 f5f5 	udiv	r5, r0, r5
 80125a2:	b395      	cbz	r5, 801260a <quorem+0x9e>
 80125a4:	f04f 0a00 	mov.w	sl, #0
 80125a8:	4638      	mov	r0, r7
 80125aa:	46b6      	mov	lr, r6
 80125ac:	46d3      	mov	fp, sl
 80125ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80125b2:	b293      	uxth	r3, r2
 80125b4:	fb05 a303 	mla	r3, r5, r3, sl
 80125b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80125bc:	b29b      	uxth	r3, r3
 80125be:	ebab 0303 	sub.w	r3, fp, r3
 80125c2:	0c12      	lsrs	r2, r2, #16
 80125c4:	f8de b000 	ldr.w	fp, [lr]
 80125c8:	fb05 a202 	mla	r2, r5, r2, sl
 80125cc:	fa13 f38b 	uxtah	r3, r3, fp
 80125d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80125d4:	fa1f fb82 	uxth.w	fp, r2
 80125d8:	f8de 2000 	ldr.w	r2, [lr]
 80125dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80125e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80125ea:	4581      	cmp	r9, r0
 80125ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80125f0:	f84e 3b04 	str.w	r3, [lr], #4
 80125f4:	d2db      	bcs.n	80125ae <quorem+0x42>
 80125f6:	f856 300c 	ldr.w	r3, [r6, ip]
 80125fa:	b933      	cbnz	r3, 801260a <quorem+0x9e>
 80125fc:	9b01      	ldr	r3, [sp, #4]
 80125fe:	3b04      	subs	r3, #4
 8012600:	429e      	cmp	r6, r3
 8012602:	461a      	mov	r2, r3
 8012604:	d330      	bcc.n	8012668 <quorem+0xfc>
 8012606:	f8c8 4010 	str.w	r4, [r8, #16]
 801260a:	4640      	mov	r0, r8
 801260c:	f001 fd0e 	bl	801402c <__mcmp>
 8012610:	2800      	cmp	r0, #0
 8012612:	db25      	blt.n	8012660 <quorem+0xf4>
 8012614:	3501      	adds	r5, #1
 8012616:	4630      	mov	r0, r6
 8012618:	f04f 0c00 	mov.w	ip, #0
 801261c:	f857 2b04 	ldr.w	r2, [r7], #4
 8012620:	f8d0 e000 	ldr.w	lr, [r0]
 8012624:	b293      	uxth	r3, r2
 8012626:	ebac 0303 	sub.w	r3, ip, r3
 801262a:	0c12      	lsrs	r2, r2, #16
 801262c:	fa13 f38e 	uxtah	r3, r3, lr
 8012630:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012634:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012638:	b29b      	uxth	r3, r3
 801263a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801263e:	45b9      	cmp	r9, r7
 8012640:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012644:	f840 3b04 	str.w	r3, [r0], #4
 8012648:	d2e8      	bcs.n	801261c <quorem+0xb0>
 801264a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801264e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012652:	b92a      	cbnz	r2, 8012660 <quorem+0xf4>
 8012654:	3b04      	subs	r3, #4
 8012656:	429e      	cmp	r6, r3
 8012658:	461a      	mov	r2, r3
 801265a:	d30b      	bcc.n	8012674 <quorem+0x108>
 801265c:	f8c8 4010 	str.w	r4, [r8, #16]
 8012660:	4628      	mov	r0, r5
 8012662:	b003      	add	sp, #12
 8012664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012668:	6812      	ldr	r2, [r2, #0]
 801266a:	3b04      	subs	r3, #4
 801266c:	2a00      	cmp	r2, #0
 801266e:	d1ca      	bne.n	8012606 <quorem+0x9a>
 8012670:	3c01      	subs	r4, #1
 8012672:	e7c5      	b.n	8012600 <quorem+0x94>
 8012674:	6812      	ldr	r2, [r2, #0]
 8012676:	3b04      	subs	r3, #4
 8012678:	2a00      	cmp	r2, #0
 801267a:	d1ef      	bne.n	801265c <quorem+0xf0>
 801267c:	3c01      	subs	r4, #1
 801267e:	e7ea      	b.n	8012656 <quorem+0xea>
 8012680:	2000      	movs	r0, #0
 8012682:	e7ee      	b.n	8012662 <quorem+0xf6>
 8012684:	0000      	movs	r0, r0
	...

08012688 <_dtoa_r>:
 8012688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801268c:	ec57 6b10 	vmov	r6, r7, d0
 8012690:	b095      	sub	sp, #84	; 0x54
 8012692:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012694:	9108      	str	r1, [sp, #32]
 8012696:	4604      	mov	r4, r0
 8012698:	920a      	str	r2, [sp, #40]	; 0x28
 801269a:	9311      	str	r3, [sp, #68]	; 0x44
 801269c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80126a0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80126a4:	b93d      	cbnz	r5, 80126b6 <_dtoa_r+0x2e>
 80126a6:	2010      	movs	r0, #16
 80126a8:	f001 fa52 	bl	8013b50 <malloc>
 80126ac:	6260      	str	r0, [r4, #36]	; 0x24
 80126ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80126b2:	6005      	str	r5, [r0, #0]
 80126b4:	60c5      	str	r5, [r0, #12]
 80126b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126b8:	6819      	ldr	r1, [r3, #0]
 80126ba:	b151      	cbz	r1, 80126d2 <_dtoa_r+0x4a>
 80126bc:	685a      	ldr	r2, [r3, #4]
 80126be:	604a      	str	r2, [r1, #4]
 80126c0:	2301      	movs	r3, #1
 80126c2:	4093      	lsls	r3, r2
 80126c4:	608b      	str	r3, [r1, #8]
 80126c6:	4620      	mov	r0, r4
 80126c8:	f001 fa90 	bl	8013bec <_Bfree>
 80126cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126ce:	2200      	movs	r2, #0
 80126d0:	601a      	str	r2, [r3, #0]
 80126d2:	1e3b      	subs	r3, r7, #0
 80126d4:	bfb9      	ittee	lt
 80126d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80126da:	9303      	strlt	r3, [sp, #12]
 80126dc:	2300      	movge	r3, #0
 80126de:	f8c8 3000 	strge.w	r3, [r8]
 80126e2:	9d03      	ldr	r5, [sp, #12]
 80126e4:	4bac      	ldr	r3, [pc, #688]	; (8012998 <_dtoa_r+0x310>)
 80126e6:	bfbc      	itt	lt
 80126e8:	2201      	movlt	r2, #1
 80126ea:	f8c8 2000 	strlt.w	r2, [r8]
 80126ee:	43ab      	bics	r3, r5
 80126f0:	d11b      	bne.n	801272a <_dtoa_r+0xa2>
 80126f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80126f4:	f242 730f 	movw	r3, #9999	; 0x270f
 80126f8:	6013      	str	r3, [r2, #0]
 80126fa:	9b02      	ldr	r3, [sp, #8]
 80126fc:	b923      	cbnz	r3, 8012708 <_dtoa_r+0x80>
 80126fe:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012702:	2d00      	cmp	r5, #0
 8012704:	f000 84dd 	beq.w	80130c2 <_dtoa_r+0xa3a>
 8012708:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801270a:	b953      	cbnz	r3, 8012722 <_dtoa_r+0x9a>
 801270c:	4ba3      	ldr	r3, [pc, #652]	; (801299c <_dtoa_r+0x314>)
 801270e:	e020      	b.n	8012752 <_dtoa_r+0xca>
 8012710:	4ba3      	ldr	r3, [pc, #652]	; (80129a0 <_dtoa_r+0x318>)
 8012712:	9304      	str	r3, [sp, #16]
 8012714:	3308      	adds	r3, #8
 8012716:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012718:	6013      	str	r3, [r2, #0]
 801271a:	9804      	ldr	r0, [sp, #16]
 801271c:	b015      	add	sp, #84	; 0x54
 801271e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012722:	4b9e      	ldr	r3, [pc, #632]	; (801299c <_dtoa_r+0x314>)
 8012724:	9304      	str	r3, [sp, #16]
 8012726:	3303      	adds	r3, #3
 8012728:	e7f5      	b.n	8012716 <_dtoa_r+0x8e>
 801272a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801272e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012736:	ed8d 7b04 	vstr	d7, [sp, #16]
 801273a:	d10c      	bne.n	8012756 <_dtoa_r+0xce>
 801273c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801273e:	2301      	movs	r3, #1
 8012740:	6013      	str	r3, [r2, #0]
 8012742:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012744:	2b00      	cmp	r3, #0
 8012746:	f000 84b9 	beq.w	80130bc <_dtoa_r+0xa34>
 801274a:	4b96      	ldr	r3, [pc, #600]	; (80129a4 <_dtoa_r+0x31c>)
 801274c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801274e:	6013      	str	r3, [r2, #0]
 8012750:	3b01      	subs	r3, #1
 8012752:	9304      	str	r3, [sp, #16]
 8012754:	e7e1      	b.n	801271a <_dtoa_r+0x92>
 8012756:	a913      	add	r1, sp, #76	; 0x4c
 8012758:	aa12      	add	r2, sp, #72	; 0x48
 801275a:	ed9d 0b04 	vldr	d0, [sp, #16]
 801275e:	4620      	mov	r0, r4
 8012760:	f001 fd52 	bl	8014208 <__d2b>
 8012764:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8012768:	9001      	str	r0, [sp, #4]
 801276a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801276c:	2e00      	cmp	r6, #0
 801276e:	d046      	beq.n	80127fe <_dtoa_r+0x176>
 8012770:	9805      	ldr	r0, [sp, #20]
 8012772:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801277a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801277e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012782:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8012786:	2700      	movs	r7, #0
 8012788:	ee07 aa90 	vmov	s15, sl
 801278c:	ec43 2b16 	vmov	d6, r2, r3
 8012790:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8012794:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8012980 <_dtoa_r+0x2f8>
 8012798:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801279c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80127a0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8012988 <_dtoa_r+0x300>
 80127a4:	eea7 6b04 	vfma.f64	d6, d7, d4
 80127a8:	eeb0 7b46 	vmov.f64	d7, d6
 80127ac:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8012990 <_dtoa_r+0x308>
 80127b0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80127b4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80127b8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80127bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127c0:	ee16 ba90 	vmov	fp, s13
 80127c4:	d508      	bpl.n	80127d8 <_dtoa_r+0x150>
 80127c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80127ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80127ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127d2:	bf18      	it	ne
 80127d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80127d8:	f1bb 0f16 	cmp.w	fp, #22
 80127dc:	d834      	bhi.n	8012848 <_dtoa_r+0x1c0>
 80127de:	4b72      	ldr	r3, [pc, #456]	; (80129a8 <_dtoa_r+0x320>)
 80127e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80127e4:	ed93 7b00 	vldr	d7, [r3]
 80127e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80127ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80127f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127f4:	dd01      	ble.n	80127fa <_dtoa_r+0x172>
 80127f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80127fa:	2300      	movs	r3, #0
 80127fc:	e025      	b.n	801284a <_dtoa_r+0x1c2>
 80127fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012800:	eb01 0a03 	add.w	sl, r1, r3
 8012804:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8012808:	2b20      	cmp	r3, #32
 801280a:	dd17      	ble.n	801283c <_dtoa_r+0x1b4>
 801280c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8012810:	9a02      	ldr	r2, [sp, #8]
 8012812:	409d      	lsls	r5, r3
 8012814:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8012818:	fa22 f303 	lsr.w	r3, r2, r3
 801281c:	432b      	orrs	r3, r5
 801281e:	ee07 3a90 	vmov	s15, r3
 8012822:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012826:	f10a 3aff 	add.w	sl, sl, #4294967295
 801282a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801282e:	9805      	ldr	r0, [sp, #20]
 8012830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012834:	2701      	movs	r7, #1
 8012836:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801283a:	e7a5      	b.n	8012788 <_dtoa_r+0x100>
 801283c:	9a02      	ldr	r2, [sp, #8]
 801283e:	f1c3 0320 	rsb	r3, r3, #32
 8012842:	fa02 f303 	lsl.w	r3, r2, r3
 8012846:	e7ea      	b.n	801281e <_dtoa_r+0x196>
 8012848:	2301      	movs	r3, #1
 801284a:	eba1 0a0a 	sub.w	sl, r1, sl
 801284e:	9310      	str	r3, [sp, #64]	; 0x40
 8012850:	f1ba 0301 	subs.w	r3, sl, #1
 8012854:	9307      	str	r3, [sp, #28]
 8012856:	bf43      	ittte	mi
 8012858:	2300      	movmi	r3, #0
 801285a:	f1ca 0a01 	rsbmi	sl, sl, #1
 801285e:	9307      	strmi	r3, [sp, #28]
 8012860:	f04f 0a00 	movpl.w	sl, #0
 8012864:	f1bb 0f00 	cmp.w	fp, #0
 8012868:	db19      	blt.n	801289e <_dtoa_r+0x216>
 801286a:	9b07      	ldr	r3, [sp, #28]
 801286c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012870:	445b      	add	r3, fp
 8012872:	9307      	str	r3, [sp, #28]
 8012874:	f04f 0800 	mov.w	r8, #0
 8012878:	9b08      	ldr	r3, [sp, #32]
 801287a:	2b09      	cmp	r3, #9
 801287c:	d866      	bhi.n	801294c <_dtoa_r+0x2c4>
 801287e:	2b05      	cmp	r3, #5
 8012880:	bfc4      	itt	gt
 8012882:	3b04      	subgt	r3, #4
 8012884:	9308      	strgt	r3, [sp, #32]
 8012886:	9b08      	ldr	r3, [sp, #32]
 8012888:	f1a3 0302 	sub.w	r3, r3, #2
 801288c:	bfcc      	ite	gt
 801288e:	2500      	movgt	r5, #0
 8012890:	2501      	movle	r5, #1
 8012892:	2b03      	cmp	r3, #3
 8012894:	d866      	bhi.n	8012964 <_dtoa_r+0x2dc>
 8012896:	e8df f003 	tbb	[pc, r3]
 801289a:	5755      	.short	0x5755
 801289c:	4909      	.short	0x4909
 801289e:	2300      	movs	r3, #0
 80128a0:	ebaa 0a0b 	sub.w	sl, sl, fp
 80128a4:	f1cb 0800 	rsb	r8, fp, #0
 80128a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80128aa:	e7e5      	b.n	8012878 <_dtoa_r+0x1f0>
 80128ac:	2301      	movs	r3, #1
 80128ae:	9309      	str	r3, [sp, #36]	; 0x24
 80128b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	dd59      	ble.n	801296a <_dtoa_r+0x2e2>
 80128b6:	9306      	str	r3, [sp, #24]
 80128b8:	4699      	mov	r9, r3
 80128ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80128bc:	2200      	movs	r2, #0
 80128be:	6072      	str	r2, [r6, #4]
 80128c0:	2204      	movs	r2, #4
 80128c2:	f102 0014 	add.w	r0, r2, #20
 80128c6:	4298      	cmp	r0, r3
 80128c8:	6871      	ldr	r1, [r6, #4]
 80128ca:	d953      	bls.n	8012974 <_dtoa_r+0x2ec>
 80128cc:	4620      	mov	r0, r4
 80128ce:	f001 f959 	bl	8013b84 <_Balloc>
 80128d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80128d4:	6030      	str	r0, [r6, #0]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	9304      	str	r3, [sp, #16]
 80128da:	f1b9 0f0e 	cmp.w	r9, #14
 80128de:	f200 80c2 	bhi.w	8012a66 <_dtoa_r+0x3de>
 80128e2:	2d00      	cmp	r5, #0
 80128e4:	f000 80bf 	beq.w	8012a66 <_dtoa_r+0x3de>
 80128e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80128ec:	f1bb 0f00 	cmp.w	fp, #0
 80128f0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80128f4:	f340 80e6 	ble.w	8012ac4 <_dtoa_r+0x43c>
 80128f8:	4a2b      	ldr	r2, [pc, #172]	; (80129a8 <_dtoa_r+0x320>)
 80128fa:	f00b 030f 	and.w	r3, fp, #15
 80128fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012902:	ed93 7b00 	vldr	d7, [r3]
 8012906:	ea4f 132b 	mov.w	r3, fp, asr #4
 801290a:	06da      	lsls	r2, r3, #27
 801290c:	f140 80d8 	bpl.w	8012ac0 <_dtoa_r+0x438>
 8012910:	4a26      	ldr	r2, [pc, #152]	; (80129ac <_dtoa_r+0x324>)
 8012912:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8012916:	ed92 6b08 	vldr	d6, [r2, #32]
 801291a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801291e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012922:	f003 030f 	and.w	r3, r3, #15
 8012926:	2203      	movs	r2, #3
 8012928:	4920      	ldr	r1, [pc, #128]	; (80129ac <_dtoa_r+0x324>)
 801292a:	e04a      	b.n	80129c2 <_dtoa_r+0x33a>
 801292c:	2301      	movs	r3, #1
 801292e:	9309      	str	r3, [sp, #36]	; 0x24
 8012930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012932:	445b      	add	r3, fp
 8012934:	f103 0901 	add.w	r9, r3, #1
 8012938:	9306      	str	r3, [sp, #24]
 801293a:	464b      	mov	r3, r9
 801293c:	2b01      	cmp	r3, #1
 801293e:	bfb8      	it	lt
 8012940:	2301      	movlt	r3, #1
 8012942:	e7ba      	b.n	80128ba <_dtoa_r+0x232>
 8012944:	2300      	movs	r3, #0
 8012946:	e7b2      	b.n	80128ae <_dtoa_r+0x226>
 8012948:	2300      	movs	r3, #0
 801294a:	e7f0      	b.n	801292e <_dtoa_r+0x2a6>
 801294c:	2501      	movs	r5, #1
 801294e:	2300      	movs	r3, #0
 8012950:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8012954:	f04f 33ff 	mov.w	r3, #4294967295
 8012958:	9306      	str	r3, [sp, #24]
 801295a:	4699      	mov	r9, r3
 801295c:	2200      	movs	r2, #0
 801295e:	2312      	movs	r3, #18
 8012960:	920a      	str	r2, [sp, #40]	; 0x28
 8012962:	e7aa      	b.n	80128ba <_dtoa_r+0x232>
 8012964:	2301      	movs	r3, #1
 8012966:	9309      	str	r3, [sp, #36]	; 0x24
 8012968:	e7f4      	b.n	8012954 <_dtoa_r+0x2cc>
 801296a:	2301      	movs	r3, #1
 801296c:	9306      	str	r3, [sp, #24]
 801296e:	4699      	mov	r9, r3
 8012970:	461a      	mov	r2, r3
 8012972:	e7f5      	b.n	8012960 <_dtoa_r+0x2d8>
 8012974:	3101      	adds	r1, #1
 8012976:	6071      	str	r1, [r6, #4]
 8012978:	0052      	lsls	r2, r2, #1
 801297a:	e7a2      	b.n	80128c2 <_dtoa_r+0x23a>
 801297c:	f3af 8000 	nop.w
 8012980:	636f4361 	.word	0x636f4361
 8012984:	3fd287a7 	.word	0x3fd287a7
 8012988:	8b60c8b3 	.word	0x8b60c8b3
 801298c:	3fc68a28 	.word	0x3fc68a28
 8012990:	509f79fb 	.word	0x509f79fb
 8012994:	3fd34413 	.word	0x3fd34413
 8012998:	7ff00000 	.word	0x7ff00000
 801299c:	080159d9 	.word	0x080159d9
 80129a0:	080159d0 	.word	0x080159d0
 80129a4:	08015955 	.word	0x08015955
 80129a8:	08015a78 	.word	0x08015a78
 80129ac:	08015a50 	.word	0x08015a50
 80129b0:	07de      	lsls	r6, r3, #31
 80129b2:	d504      	bpl.n	80129be <_dtoa_r+0x336>
 80129b4:	ed91 6b00 	vldr	d6, [r1]
 80129b8:	3201      	adds	r2, #1
 80129ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80129be:	105b      	asrs	r3, r3, #1
 80129c0:	3108      	adds	r1, #8
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d1f4      	bne.n	80129b0 <_dtoa_r+0x328>
 80129c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80129ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80129ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80129d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	f000 80a7 	beq.w	8012b28 <_dtoa_r+0x4a0>
 80129da:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80129de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80129e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80129e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ea:	f140 809d 	bpl.w	8012b28 <_dtoa_r+0x4a0>
 80129ee:	f1b9 0f00 	cmp.w	r9, #0
 80129f2:	f000 8099 	beq.w	8012b28 <_dtoa_r+0x4a0>
 80129f6:	9b06      	ldr	r3, [sp, #24]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	dd30      	ble.n	8012a5e <_dtoa_r+0x3d6>
 80129fc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012a00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012a04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012a08:	9d06      	ldr	r5, [sp, #24]
 8012a0a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012a0e:	3201      	adds	r2, #1
 8012a10:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012a14:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012a18:	ee07 2a90 	vmov	s15, r2
 8012a1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012a20:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012a24:	ed8d 5b02 	vstr	d5, [sp, #8]
 8012a28:	9a03      	ldr	r2, [sp, #12]
 8012a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012a2e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8012a32:	2d00      	cmp	r5, #0
 8012a34:	d17b      	bne.n	8012b2e <_dtoa_r+0x4a6>
 8012a36:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012a3a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012a3e:	ec41 0b17 	vmov	d7, r0, r1
 8012a42:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a4a:	f300 8253 	bgt.w	8012ef4 <_dtoa_r+0x86c>
 8012a4e:	eeb1 7b47 	vneg.f64	d7, d7
 8012a52:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a5a:	f100 8249 	bmi.w	8012ef0 <_dtoa_r+0x868>
 8012a5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012a62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012a66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	f2c0 8119 	blt.w	8012ca0 <_dtoa_r+0x618>
 8012a6e:	f1bb 0f0e 	cmp.w	fp, #14
 8012a72:	f300 8115 	bgt.w	8012ca0 <_dtoa_r+0x618>
 8012a76:	4bc3      	ldr	r3, [pc, #780]	; (8012d84 <_dtoa_r+0x6fc>)
 8012a78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012a7c:	ed93 6b00 	vldr	d6, [r3]
 8012a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	f280 80ba 	bge.w	8012bfc <_dtoa_r+0x574>
 8012a88:	f1b9 0f00 	cmp.w	r9, #0
 8012a8c:	f300 80b6 	bgt.w	8012bfc <_dtoa_r+0x574>
 8012a90:	f040 822d 	bne.w	8012eee <_dtoa_r+0x866>
 8012a94:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012a98:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012a9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012aa0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aa8:	464d      	mov	r5, r9
 8012aaa:	464f      	mov	r7, r9
 8012aac:	f280 8204 	bge.w	8012eb8 <_dtoa_r+0x830>
 8012ab0:	9b04      	ldr	r3, [sp, #16]
 8012ab2:	9a04      	ldr	r2, [sp, #16]
 8012ab4:	1c5e      	adds	r6, r3, #1
 8012ab6:	2331      	movs	r3, #49	; 0x31
 8012ab8:	7013      	strb	r3, [r2, #0]
 8012aba:	f10b 0b01 	add.w	fp, fp, #1
 8012abe:	e1ff      	b.n	8012ec0 <_dtoa_r+0x838>
 8012ac0:	2202      	movs	r2, #2
 8012ac2:	e731      	b.n	8012928 <_dtoa_r+0x2a0>
 8012ac4:	d02e      	beq.n	8012b24 <_dtoa_r+0x49c>
 8012ac6:	f1cb 0300 	rsb	r3, fp, #0
 8012aca:	4aae      	ldr	r2, [pc, #696]	; (8012d84 <_dtoa_r+0x6fc>)
 8012acc:	f003 010f 	and.w	r1, r3, #15
 8012ad0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012ad4:	ed92 7b00 	vldr	d7, [r2]
 8012ad8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8012adc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012ae0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012ae4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8012ae8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012aec:	49a6      	ldr	r1, [pc, #664]	; (8012d88 <_dtoa_r+0x700>)
 8012aee:	111b      	asrs	r3, r3, #4
 8012af0:	2000      	movs	r0, #0
 8012af2:	2202      	movs	r2, #2
 8012af4:	b93b      	cbnz	r3, 8012b06 <_dtoa_r+0x47e>
 8012af6:	2800      	cmp	r0, #0
 8012af8:	f43f af6b 	beq.w	80129d2 <_dtoa_r+0x34a>
 8012afc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012b00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b04:	e765      	b.n	80129d2 <_dtoa_r+0x34a>
 8012b06:	07dd      	lsls	r5, r3, #31
 8012b08:	d509      	bpl.n	8012b1e <_dtoa_r+0x496>
 8012b0a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8012b0e:	ed91 7b00 	vldr	d7, [r1]
 8012b12:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012b16:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012b1a:	3201      	adds	r2, #1
 8012b1c:	2001      	movs	r0, #1
 8012b1e:	105b      	asrs	r3, r3, #1
 8012b20:	3108      	adds	r1, #8
 8012b22:	e7e7      	b.n	8012af4 <_dtoa_r+0x46c>
 8012b24:	2202      	movs	r2, #2
 8012b26:	e754      	b.n	80129d2 <_dtoa_r+0x34a>
 8012b28:	465b      	mov	r3, fp
 8012b2a:	464d      	mov	r5, r9
 8012b2c:	e770      	b.n	8012a10 <_dtoa_r+0x388>
 8012b2e:	4a95      	ldr	r2, [pc, #596]	; (8012d84 <_dtoa_r+0x6fc>)
 8012b30:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8012b34:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b3a:	ec41 0b17 	vmov	d7, r0, r1
 8012b3e:	b35a      	cbz	r2, 8012b98 <_dtoa_r+0x510>
 8012b40:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012b44:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012b48:	9e04      	ldr	r6, [sp, #16]
 8012b4a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012b4e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012b52:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012b56:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012b5a:	ee14 2a90 	vmov	r2, s9
 8012b5e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012b62:	3230      	adds	r2, #48	; 0x30
 8012b64:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012b68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b70:	f806 2b01 	strb.w	r2, [r6], #1
 8012b74:	d43b      	bmi.n	8012bee <_dtoa_r+0x566>
 8012b76:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012b7a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b82:	d472      	bmi.n	8012c6a <_dtoa_r+0x5e2>
 8012b84:	9a04      	ldr	r2, [sp, #16]
 8012b86:	1ab2      	subs	r2, r6, r2
 8012b88:	4295      	cmp	r5, r2
 8012b8a:	f77f af68 	ble.w	8012a5e <_dtoa_r+0x3d6>
 8012b8e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012b92:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012b96:	e7de      	b.n	8012b56 <_dtoa_r+0x4ce>
 8012b98:	9a04      	ldr	r2, [sp, #16]
 8012b9a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012b9e:	1956      	adds	r6, r2, r5
 8012ba0:	4611      	mov	r1, r2
 8012ba2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012ba6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012baa:	ee14 2a90 	vmov	r2, s9
 8012bae:	3230      	adds	r2, #48	; 0x30
 8012bb0:	f801 2b01 	strb.w	r2, [r1], #1
 8012bb4:	42b1      	cmp	r1, r6
 8012bb6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012bba:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012bbe:	d11a      	bne.n	8012bf6 <_dtoa_r+0x56e>
 8012bc0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012bc4:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012bc8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd0:	dc4b      	bgt.n	8012c6a <_dtoa_r+0x5e2>
 8012bd2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012bd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bde:	f57f af3e 	bpl.w	8012a5e <_dtoa_r+0x3d6>
 8012be2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012be6:	2a30      	cmp	r2, #48	; 0x30
 8012be8:	f106 31ff 	add.w	r1, r6, #4294967295
 8012bec:	d001      	beq.n	8012bf2 <_dtoa_r+0x56a>
 8012bee:	469b      	mov	fp, r3
 8012bf0:	e02a      	b.n	8012c48 <_dtoa_r+0x5c0>
 8012bf2:	460e      	mov	r6, r1
 8012bf4:	e7f5      	b.n	8012be2 <_dtoa_r+0x55a>
 8012bf6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012bfa:	e7d4      	b.n	8012ba6 <_dtoa_r+0x51e>
 8012bfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012c00:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012c04:	9e04      	ldr	r6, [sp, #16]
 8012c06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012c0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012c0e:	ee15 3a10 	vmov	r3, s10
 8012c12:	3330      	adds	r3, #48	; 0x30
 8012c14:	f806 3b01 	strb.w	r3, [r6], #1
 8012c18:	9b04      	ldr	r3, [sp, #16]
 8012c1a:	1af3      	subs	r3, r6, r3
 8012c1c:	4599      	cmp	r9, r3
 8012c1e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012c22:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012c26:	d133      	bne.n	8012c90 <_dtoa_r+0x608>
 8012c28:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012c2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c34:	dc18      	bgt.n	8012c68 <_dtoa_r+0x5e0>
 8012c36:	eeb4 7b46 	vcmp.f64	d7, d6
 8012c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c3e:	d103      	bne.n	8012c48 <_dtoa_r+0x5c0>
 8012c40:	ee15 3a10 	vmov	r3, s10
 8012c44:	07db      	lsls	r3, r3, #31
 8012c46:	d40f      	bmi.n	8012c68 <_dtoa_r+0x5e0>
 8012c48:	9901      	ldr	r1, [sp, #4]
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	f000 ffce 	bl	8013bec <_Bfree>
 8012c50:	2300      	movs	r3, #0
 8012c52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012c54:	7033      	strb	r3, [r6, #0]
 8012c56:	f10b 0301 	add.w	r3, fp, #1
 8012c5a:	6013      	str	r3, [r2, #0]
 8012c5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	f43f ad5b 	beq.w	801271a <_dtoa_r+0x92>
 8012c64:	601e      	str	r6, [r3, #0]
 8012c66:	e558      	b.n	801271a <_dtoa_r+0x92>
 8012c68:	465b      	mov	r3, fp
 8012c6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012c6e:	2939      	cmp	r1, #57	; 0x39
 8012c70:	f106 32ff 	add.w	r2, r6, #4294967295
 8012c74:	d106      	bne.n	8012c84 <_dtoa_r+0x5fc>
 8012c76:	9904      	ldr	r1, [sp, #16]
 8012c78:	4291      	cmp	r1, r2
 8012c7a:	d107      	bne.n	8012c8c <_dtoa_r+0x604>
 8012c7c:	2230      	movs	r2, #48	; 0x30
 8012c7e:	700a      	strb	r2, [r1, #0]
 8012c80:	3301      	adds	r3, #1
 8012c82:	460a      	mov	r2, r1
 8012c84:	7811      	ldrb	r1, [r2, #0]
 8012c86:	3101      	adds	r1, #1
 8012c88:	7011      	strb	r1, [r2, #0]
 8012c8a:	e7b0      	b.n	8012bee <_dtoa_r+0x566>
 8012c8c:	4616      	mov	r6, r2
 8012c8e:	e7ec      	b.n	8012c6a <_dtoa_r+0x5e2>
 8012c90:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012c94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c9c:	d1b3      	bne.n	8012c06 <_dtoa_r+0x57e>
 8012c9e:	e7d3      	b.n	8012c48 <_dtoa_r+0x5c0>
 8012ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ca2:	2a00      	cmp	r2, #0
 8012ca4:	f000 808d 	beq.w	8012dc2 <_dtoa_r+0x73a>
 8012ca8:	9a08      	ldr	r2, [sp, #32]
 8012caa:	2a01      	cmp	r2, #1
 8012cac:	dc72      	bgt.n	8012d94 <_dtoa_r+0x70c>
 8012cae:	2f00      	cmp	r7, #0
 8012cb0:	d06c      	beq.n	8012d8c <_dtoa_r+0x704>
 8012cb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012cb6:	4645      	mov	r5, r8
 8012cb8:	4656      	mov	r6, sl
 8012cba:	9a07      	ldr	r2, [sp, #28]
 8012cbc:	2101      	movs	r1, #1
 8012cbe:	441a      	add	r2, r3
 8012cc0:	4620      	mov	r0, r4
 8012cc2:	449a      	add	sl, r3
 8012cc4:	9207      	str	r2, [sp, #28]
 8012cc6:	f001 f86f 	bl	8013da8 <__i2b>
 8012cca:	4607      	mov	r7, r0
 8012ccc:	2e00      	cmp	r6, #0
 8012cce:	dd0b      	ble.n	8012ce8 <_dtoa_r+0x660>
 8012cd0:	9b07      	ldr	r3, [sp, #28]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	dd08      	ble.n	8012ce8 <_dtoa_r+0x660>
 8012cd6:	42b3      	cmp	r3, r6
 8012cd8:	9a07      	ldr	r2, [sp, #28]
 8012cda:	bfa8      	it	ge
 8012cdc:	4633      	movge	r3, r6
 8012cde:	ebaa 0a03 	sub.w	sl, sl, r3
 8012ce2:	1af6      	subs	r6, r6, r3
 8012ce4:	1ad3      	subs	r3, r2, r3
 8012ce6:	9307      	str	r3, [sp, #28]
 8012ce8:	f1b8 0f00 	cmp.w	r8, #0
 8012cec:	d01d      	beq.n	8012d2a <_dtoa_r+0x6a2>
 8012cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d06a      	beq.n	8012dca <_dtoa_r+0x742>
 8012cf4:	b18d      	cbz	r5, 8012d1a <_dtoa_r+0x692>
 8012cf6:	4639      	mov	r1, r7
 8012cf8:	462a      	mov	r2, r5
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	f001 f8f4 	bl	8013ee8 <__pow5mult>
 8012d00:	9a01      	ldr	r2, [sp, #4]
 8012d02:	4601      	mov	r1, r0
 8012d04:	4607      	mov	r7, r0
 8012d06:	4620      	mov	r0, r4
 8012d08:	f001 f857 	bl	8013dba <__multiply>
 8012d0c:	9901      	ldr	r1, [sp, #4]
 8012d0e:	900c      	str	r0, [sp, #48]	; 0x30
 8012d10:	4620      	mov	r0, r4
 8012d12:	f000 ff6b 	bl	8013bec <_Bfree>
 8012d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d18:	9301      	str	r3, [sp, #4]
 8012d1a:	ebb8 0205 	subs.w	r2, r8, r5
 8012d1e:	d004      	beq.n	8012d2a <_dtoa_r+0x6a2>
 8012d20:	9901      	ldr	r1, [sp, #4]
 8012d22:	4620      	mov	r0, r4
 8012d24:	f001 f8e0 	bl	8013ee8 <__pow5mult>
 8012d28:	9001      	str	r0, [sp, #4]
 8012d2a:	2101      	movs	r1, #1
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	f001 f83b 	bl	8013da8 <__i2b>
 8012d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d34:	4605      	mov	r5, r0
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	f000 81ca 	beq.w	80130d0 <_dtoa_r+0xa48>
 8012d3c:	461a      	mov	r2, r3
 8012d3e:	4601      	mov	r1, r0
 8012d40:	4620      	mov	r0, r4
 8012d42:	f001 f8d1 	bl	8013ee8 <__pow5mult>
 8012d46:	9b08      	ldr	r3, [sp, #32]
 8012d48:	2b01      	cmp	r3, #1
 8012d4a:	4605      	mov	r5, r0
 8012d4c:	dc44      	bgt.n	8012dd8 <_dtoa_r+0x750>
 8012d4e:	9b02      	ldr	r3, [sp, #8]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d13c      	bne.n	8012dce <_dtoa_r+0x746>
 8012d54:	9b03      	ldr	r3, [sp, #12]
 8012d56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d137      	bne.n	8012dce <_dtoa_r+0x746>
 8012d5e:	9b03      	ldr	r3, [sp, #12]
 8012d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d64:	0d1b      	lsrs	r3, r3, #20
 8012d66:	051b      	lsls	r3, r3, #20
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d033      	beq.n	8012dd4 <_dtoa_r+0x74c>
 8012d6c:	9b07      	ldr	r3, [sp, #28]
 8012d6e:	3301      	adds	r3, #1
 8012d70:	f10a 0a01 	add.w	sl, sl, #1
 8012d74:	9307      	str	r3, [sp, #28]
 8012d76:	f04f 0801 	mov.w	r8, #1
 8012d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d7c:	bb73      	cbnz	r3, 8012ddc <_dtoa_r+0x754>
 8012d7e:	2001      	movs	r0, #1
 8012d80:	e034      	b.n	8012dec <_dtoa_r+0x764>
 8012d82:	bf00      	nop
 8012d84:	08015a78 	.word	0x08015a78
 8012d88:	08015a50 	.word	0x08015a50
 8012d8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012d8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012d92:	e790      	b.n	8012cb6 <_dtoa_r+0x62e>
 8012d94:	f109 35ff 	add.w	r5, r9, #4294967295
 8012d98:	45a8      	cmp	r8, r5
 8012d9a:	bfbf      	itttt	lt
 8012d9c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8012d9e:	eba5 0808 	sublt.w	r8, r5, r8
 8012da2:	4443      	addlt	r3, r8
 8012da4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8012da6:	bfb6      	itet	lt
 8012da8:	46a8      	movlt	r8, r5
 8012daa:	eba8 0505 	subge.w	r5, r8, r5
 8012dae:	2500      	movlt	r5, #0
 8012db0:	f1b9 0f00 	cmp.w	r9, #0
 8012db4:	bfb9      	ittee	lt
 8012db6:	ebaa 0609 	sublt.w	r6, sl, r9
 8012dba:	2300      	movlt	r3, #0
 8012dbc:	4656      	movge	r6, sl
 8012dbe:	464b      	movge	r3, r9
 8012dc0:	e77b      	b.n	8012cba <_dtoa_r+0x632>
 8012dc2:	4645      	mov	r5, r8
 8012dc4:	4656      	mov	r6, sl
 8012dc6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012dc8:	e780      	b.n	8012ccc <_dtoa_r+0x644>
 8012dca:	4642      	mov	r2, r8
 8012dcc:	e7a8      	b.n	8012d20 <_dtoa_r+0x698>
 8012dce:	f04f 0800 	mov.w	r8, #0
 8012dd2:	e7d2      	b.n	8012d7a <_dtoa_r+0x6f2>
 8012dd4:	4698      	mov	r8, r3
 8012dd6:	e7d0      	b.n	8012d7a <_dtoa_r+0x6f2>
 8012dd8:	f04f 0800 	mov.w	r8, #0
 8012ddc:	692b      	ldr	r3, [r5, #16]
 8012dde:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012de2:	6918      	ldr	r0, [r3, #16]
 8012de4:	f000 ff92 	bl	8013d0c <__hi0bits>
 8012de8:	f1c0 0020 	rsb	r0, r0, #32
 8012dec:	9b07      	ldr	r3, [sp, #28]
 8012dee:	4418      	add	r0, r3
 8012df0:	f010 001f 	ands.w	r0, r0, #31
 8012df4:	d047      	beq.n	8012e86 <_dtoa_r+0x7fe>
 8012df6:	f1c0 0320 	rsb	r3, r0, #32
 8012dfa:	2b04      	cmp	r3, #4
 8012dfc:	dd3b      	ble.n	8012e76 <_dtoa_r+0x7ee>
 8012dfe:	9b07      	ldr	r3, [sp, #28]
 8012e00:	f1c0 001c 	rsb	r0, r0, #28
 8012e04:	4482      	add	sl, r0
 8012e06:	4406      	add	r6, r0
 8012e08:	4403      	add	r3, r0
 8012e0a:	9307      	str	r3, [sp, #28]
 8012e0c:	f1ba 0f00 	cmp.w	sl, #0
 8012e10:	dd05      	ble.n	8012e1e <_dtoa_r+0x796>
 8012e12:	4652      	mov	r2, sl
 8012e14:	9901      	ldr	r1, [sp, #4]
 8012e16:	4620      	mov	r0, r4
 8012e18:	f001 f8b4 	bl	8013f84 <__lshift>
 8012e1c:	9001      	str	r0, [sp, #4]
 8012e1e:	9b07      	ldr	r3, [sp, #28]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	dd05      	ble.n	8012e30 <_dtoa_r+0x7a8>
 8012e24:	4629      	mov	r1, r5
 8012e26:	461a      	mov	r2, r3
 8012e28:	4620      	mov	r0, r4
 8012e2a:	f001 f8ab 	bl	8013f84 <__lshift>
 8012e2e:	4605      	mov	r5, r0
 8012e30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012e32:	b353      	cbz	r3, 8012e8a <_dtoa_r+0x802>
 8012e34:	4629      	mov	r1, r5
 8012e36:	9801      	ldr	r0, [sp, #4]
 8012e38:	f001 f8f8 	bl	801402c <__mcmp>
 8012e3c:	2800      	cmp	r0, #0
 8012e3e:	da24      	bge.n	8012e8a <_dtoa_r+0x802>
 8012e40:	2300      	movs	r3, #0
 8012e42:	220a      	movs	r2, #10
 8012e44:	9901      	ldr	r1, [sp, #4]
 8012e46:	4620      	mov	r0, r4
 8012e48:	f000 fee7 	bl	8013c1a <__multadd>
 8012e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e4e:	9001      	str	r0, [sp, #4]
 8012e50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	f000 8142 	beq.w	80130de <_dtoa_r+0xa56>
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	4639      	mov	r1, r7
 8012e5e:	220a      	movs	r2, #10
 8012e60:	4620      	mov	r0, r4
 8012e62:	f000 feda 	bl	8013c1a <__multadd>
 8012e66:	9b06      	ldr	r3, [sp, #24]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	4607      	mov	r7, r0
 8012e6c:	dc4b      	bgt.n	8012f06 <_dtoa_r+0x87e>
 8012e6e:	9b08      	ldr	r3, [sp, #32]
 8012e70:	2b02      	cmp	r3, #2
 8012e72:	dd48      	ble.n	8012f06 <_dtoa_r+0x87e>
 8012e74:	e011      	b.n	8012e9a <_dtoa_r+0x812>
 8012e76:	d0c9      	beq.n	8012e0c <_dtoa_r+0x784>
 8012e78:	9a07      	ldr	r2, [sp, #28]
 8012e7a:	331c      	adds	r3, #28
 8012e7c:	441a      	add	r2, r3
 8012e7e:	449a      	add	sl, r3
 8012e80:	441e      	add	r6, r3
 8012e82:	4613      	mov	r3, r2
 8012e84:	e7c1      	b.n	8012e0a <_dtoa_r+0x782>
 8012e86:	4603      	mov	r3, r0
 8012e88:	e7f6      	b.n	8012e78 <_dtoa_r+0x7f0>
 8012e8a:	f1b9 0f00 	cmp.w	r9, #0
 8012e8e:	dc34      	bgt.n	8012efa <_dtoa_r+0x872>
 8012e90:	9b08      	ldr	r3, [sp, #32]
 8012e92:	2b02      	cmp	r3, #2
 8012e94:	dd31      	ble.n	8012efa <_dtoa_r+0x872>
 8012e96:	f8cd 9018 	str.w	r9, [sp, #24]
 8012e9a:	9b06      	ldr	r3, [sp, #24]
 8012e9c:	b963      	cbnz	r3, 8012eb8 <_dtoa_r+0x830>
 8012e9e:	4629      	mov	r1, r5
 8012ea0:	2205      	movs	r2, #5
 8012ea2:	4620      	mov	r0, r4
 8012ea4:	f000 feb9 	bl	8013c1a <__multadd>
 8012ea8:	4601      	mov	r1, r0
 8012eaa:	4605      	mov	r5, r0
 8012eac:	9801      	ldr	r0, [sp, #4]
 8012eae:	f001 f8bd 	bl	801402c <__mcmp>
 8012eb2:	2800      	cmp	r0, #0
 8012eb4:	f73f adfc 	bgt.w	8012ab0 <_dtoa_r+0x428>
 8012eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012eba:	9e04      	ldr	r6, [sp, #16]
 8012ebc:	ea6f 0b03 	mvn.w	fp, r3
 8012ec0:	f04f 0900 	mov.w	r9, #0
 8012ec4:	4629      	mov	r1, r5
 8012ec6:	4620      	mov	r0, r4
 8012ec8:	f000 fe90 	bl	8013bec <_Bfree>
 8012ecc:	2f00      	cmp	r7, #0
 8012ece:	f43f aebb 	beq.w	8012c48 <_dtoa_r+0x5c0>
 8012ed2:	f1b9 0f00 	cmp.w	r9, #0
 8012ed6:	d005      	beq.n	8012ee4 <_dtoa_r+0x85c>
 8012ed8:	45b9      	cmp	r9, r7
 8012eda:	d003      	beq.n	8012ee4 <_dtoa_r+0x85c>
 8012edc:	4649      	mov	r1, r9
 8012ede:	4620      	mov	r0, r4
 8012ee0:	f000 fe84 	bl	8013bec <_Bfree>
 8012ee4:	4639      	mov	r1, r7
 8012ee6:	4620      	mov	r0, r4
 8012ee8:	f000 fe80 	bl	8013bec <_Bfree>
 8012eec:	e6ac      	b.n	8012c48 <_dtoa_r+0x5c0>
 8012eee:	2500      	movs	r5, #0
 8012ef0:	462f      	mov	r7, r5
 8012ef2:	e7e1      	b.n	8012eb8 <_dtoa_r+0x830>
 8012ef4:	469b      	mov	fp, r3
 8012ef6:	462f      	mov	r7, r5
 8012ef8:	e5da      	b.n	8012ab0 <_dtoa_r+0x428>
 8012efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012efc:	f8cd 9018 	str.w	r9, [sp, #24]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	f000 80f3 	beq.w	80130ec <_dtoa_r+0xa64>
 8012f06:	2e00      	cmp	r6, #0
 8012f08:	dd05      	ble.n	8012f16 <_dtoa_r+0x88e>
 8012f0a:	4639      	mov	r1, r7
 8012f0c:	4632      	mov	r2, r6
 8012f0e:	4620      	mov	r0, r4
 8012f10:	f001 f838 	bl	8013f84 <__lshift>
 8012f14:	4607      	mov	r7, r0
 8012f16:	f1b8 0f00 	cmp.w	r8, #0
 8012f1a:	d04c      	beq.n	8012fb6 <_dtoa_r+0x92e>
 8012f1c:	6879      	ldr	r1, [r7, #4]
 8012f1e:	4620      	mov	r0, r4
 8012f20:	f000 fe30 	bl	8013b84 <_Balloc>
 8012f24:	693a      	ldr	r2, [r7, #16]
 8012f26:	3202      	adds	r2, #2
 8012f28:	4606      	mov	r6, r0
 8012f2a:	0092      	lsls	r2, r2, #2
 8012f2c:	f107 010c 	add.w	r1, r7, #12
 8012f30:	300c      	adds	r0, #12
 8012f32:	f7fd fd15 	bl	8010960 <memcpy>
 8012f36:	2201      	movs	r2, #1
 8012f38:	4631      	mov	r1, r6
 8012f3a:	4620      	mov	r0, r4
 8012f3c:	f001 f822 	bl	8013f84 <__lshift>
 8012f40:	9b02      	ldr	r3, [sp, #8]
 8012f42:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012f46:	f003 0301 	and.w	r3, r3, #1
 8012f4a:	46b9      	mov	r9, r7
 8012f4c:	9307      	str	r3, [sp, #28]
 8012f4e:	4607      	mov	r7, r0
 8012f50:	4629      	mov	r1, r5
 8012f52:	9801      	ldr	r0, [sp, #4]
 8012f54:	f7ff fb0a 	bl	801256c <quorem>
 8012f58:	4649      	mov	r1, r9
 8012f5a:	4606      	mov	r6, r0
 8012f5c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012f60:	9801      	ldr	r0, [sp, #4]
 8012f62:	f001 f863 	bl	801402c <__mcmp>
 8012f66:	463a      	mov	r2, r7
 8012f68:	9002      	str	r0, [sp, #8]
 8012f6a:	4629      	mov	r1, r5
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	f001 f877 	bl	8014060 <__mdiff>
 8012f72:	68c3      	ldr	r3, [r0, #12]
 8012f74:	4602      	mov	r2, r0
 8012f76:	bb03      	cbnz	r3, 8012fba <_dtoa_r+0x932>
 8012f78:	4601      	mov	r1, r0
 8012f7a:	9009      	str	r0, [sp, #36]	; 0x24
 8012f7c:	9801      	ldr	r0, [sp, #4]
 8012f7e:	f001 f855 	bl	801402c <__mcmp>
 8012f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f84:	4603      	mov	r3, r0
 8012f86:	4611      	mov	r1, r2
 8012f88:	4620      	mov	r0, r4
 8012f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8012f8c:	f000 fe2e 	bl	8013bec <_Bfree>
 8012f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f92:	b9a3      	cbnz	r3, 8012fbe <_dtoa_r+0x936>
 8012f94:	9a08      	ldr	r2, [sp, #32]
 8012f96:	b992      	cbnz	r2, 8012fbe <_dtoa_r+0x936>
 8012f98:	9a07      	ldr	r2, [sp, #28]
 8012f9a:	b982      	cbnz	r2, 8012fbe <_dtoa_r+0x936>
 8012f9c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012fa0:	d029      	beq.n	8012ff6 <_dtoa_r+0x96e>
 8012fa2:	9b02      	ldr	r3, [sp, #8]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	dd01      	ble.n	8012fac <_dtoa_r+0x924>
 8012fa8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8012fac:	f10a 0601 	add.w	r6, sl, #1
 8012fb0:	f88a 8000 	strb.w	r8, [sl]
 8012fb4:	e786      	b.n	8012ec4 <_dtoa_r+0x83c>
 8012fb6:	4638      	mov	r0, r7
 8012fb8:	e7c2      	b.n	8012f40 <_dtoa_r+0x8b8>
 8012fba:	2301      	movs	r3, #1
 8012fbc:	e7e3      	b.n	8012f86 <_dtoa_r+0x8fe>
 8012fbe:	9a02      	ldr	r2, [sp, #8]
 8012fc0:	2a00      	cmp	r2, #0
 8012fc2:	db04      	blt.n	8012fce <_dtoa_r+0x946>
 8012fc4:	d124      	bne.n	8013010 <_dtoa_r+0x988>
 8012fc6:	9a08      	ldr	r2, [sp, #32]
 8012fc8:	bb12      	cbnz	r2, 8013010 <_dtoa_r+0x988>
 8012fca:	9a07      	ldr	r2, [sp, #28]
 8012fcc:	bb02      	cbnz	r2, 8013010 <_dtoa_r+0x988>
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	ddec      	ble.n	8012fac <_dtoa_r+0x924>
 8012fd2:	2201      	movs	r2, #1
 8012fd4:	9901      	ldr	r1, [sp, #4]
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	f000 ffd4 	bl	8013f84 <__lshift>
 8012fdc:	4629      	mov	r1, r5
 8012fde:	9001      	str	r0, [sp, #4]
 8012fe0:	f001 f824 	bl	801402c <__mcmp>
 8012fe4:	2800      	cmp	r0, #0
 8012fe6:	dc03      	bgt.n	8012ff0 <_dtoa_r+0x968>
 8012fe8:	d1e0      	bne.n	8012fac <_dtoa_r+0x924>
 8012fea:	f018 0f01 	tst.w	r8, #1
 8012fee:	d0dd      	beq.n	8012fac <_dtoa_r+0x924>
 8012ff0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012ff4:	d1d8      	bne.n	8012fa8 <_dtoa_r+0x920>
 8012ff6:	2339      	movs	r3, #57	; 0x39
 8012ff8:	f10a 0601 	add.w	r6, sl, #1
 8012ffc:	f88a 3000 	strb.w	r3, [sl]
 8013000:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013004:	2b39      	cmp	r3, #57	; 0x39
 8013006:	f106 32ff 	add.w	r2, r6, #4294967295
 801300a:	d04c      	beq.n	80130a6 <_dtoa_r+0xa1e>
 801300c:	3301      	adds	r3, #1
 801300e:	e051      	b.n	80130b4 <_dtoa_r+0xa2c>
 8013010:	2b00      	cmp	r3, #0
 8013012:	f10a 0601 	add.w	r6, sl, #1
 8013016:	dd05      	ble.n	8013024 <_dtoa_r+0x99c>
 8013018:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801301c:	d0eb      	beq.n	8012ff6 <_dtoa_r+0x96e>
 801301e:	f108 0801 	add.w	r8, r8, #1
 8013022:	e7c5      	b.n	8012fb0 <_dtoa_r+0x928>
 8013024:	9b04      	ldr	r3, [sp, #16]
 8013026:	9a06      	ldr	r2, [sp, #24]
 8013028:	f806 8c01 	strb.w	r8, [r6, #-1]
 801302c:	1af3      	subs	r3, r6, r3
 801302e:	4293      	cmp	r3, r2
 8013030:	d021      	beq.n	8013076 <_dtoa_r+0x9ee>
 8013032:	2300      	movs	r3, #0
 8013034:	220a      	movs	r2, #10
 8013036:	9901      	ldr	r1, [sp, #4]
 8013038:	4620      	mov	r0, r4
 801303a:	f000 fdee 	bl	8013c1a <__multadd>
 801303e:	45b9      	cmp	r9, r7
 8013040:	9001      	str	r0, [sp, #4]
 8013042:	f04f 0300 	mov.w	r3, #0
 8013046:	f04f 020a 	mov.w	r2, #10
 801304a:	4649      	mov	r1, r9
 801304c:	4620      	mov	r0, r4
 801304e:	d105      	bne.n	801305c <_dtoa_r+0x9d4>
 8013050:	f000 fde3 	bl	8013c1a <__multadd>
 8013054:	4681      	mov	r9, r0
 8013056:	4607      	mov	r7, r0
 8013058:	46b2      	mov	sl, r6
 801305a:	e779      	b.n	8012f50 <_dtoa_r+0x8c8>
 801305c:	f000 fddd 	bl	8013c1a <__multadd>
 8013060:	4639      	mov	r1, r7
 8013062:	4681      	mov	r9, r0
 8013064:	2300      	movs	r3, #0
 8013066:	220a      	movs	r2, #10
 8013068:	4620      	mov	r0, r4
 801306a:	f000 fdd6 	bl	8013c1a <__multadd>
 801306e:	4607      	mov	r7, r0
 8013070:	e7f2      	b.n	8013058 <_dtoa_r+0x9d0>
 8013072:	f04f 0900 	mov.w	r9, #0
 8013076:	2201      	movs	r2, #1
 8013078:	9901      	ldr	r1, [sp, #4]
 801307a:	4620      	mov	r0, r4
 801307c:	f000 ff82 	bl	8013f84 <__lshift>
 8013080:	4629      	mov	r1, r5
 8013082:	9001      	str	r0, [sp, #4]
 8013084:	f000 ffd2 	bl	801402c <__mcmp>
 8013088:	2800      	cmp	r0, #0
 801308a:	dcb9      	bgt.n	8013000 <_dtoa_r+0x978>
 801308c:	d102      	bne.n	8013094 <_dtoa_r+0xa0c>
 801308e:	f018 0f01 	tst.w	r8, #1
 8013092:	d1b5      	bne.n	8013000 <_dtoa_r+0x978>
 8013094:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013098:	2b30      	cmp	r3, #48	; 0x30
 801309a:	f106 32ff 	add.w	r2, r6, #4294967295
 801309e:	f47f af11 	bne.w	8012ec4 <_dtoa_r+0x83c>
 80130a2:	4616      	mov	r6, r2
 80130a4:	e7f6      	b.n	8013094 <_dtoa_r+0xa0c>
 80130a6:	9b04      	ldr	r3, [sp, #16]
 80130a8:	4293      	cmp	r3, r2
 80130aa:	d105      	bne.n	80130b8 <_dtoa_r+0xa30>
 80130ac:	9a04      	ldr	r2, [sp, #16]
 80130ae:	f10b 0b01 	add.w	fp, fp, #1
 80130b2:	2331      	movs	r3, #49	; 0x31
 80130b4:	7013      	strb	r3, [r2, #0]
 80130b6:	e705      	b.n	8012ec4 <_dtoa_r+0x83c>
 80130b8:	4616      	mov	r6, r2
 80130ba:	e7a1      	b.n	8013000 <_dtoa_r+0x978>
 80130bc:	4b16      	ldr	r3, [pc, #88]	; (8013118 <_dtoa_r+0xa90>)
 80130be:	f7ff bb48 	b.w	8012752 <_dtoa_r+0xca>
 80130c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	f47f ab23 	bne.w	8012710 <_dtoa_r+0x88>
 80130ca:	4b14      	ldr	r3, [pc, #80]	; (801311c <_dtoa_r+0xa94>)
 80130cc:	f7ff bb41 	b.w	8012752 <_dtoa_r+0xca>
 80130d0:	9b08      	ldr	r3, [sp, #32]
 80130d2:	2b01      	cmp	r3, #1
 80130d4:	f77f ae3b 	ble.w	8012d4e <_dtoa_r+0x6c6>
 80130d8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80130dc:	e64f      	b.n	8012d7e <_dtoa_r+0x6f6>
 80130de:	9b06      	ldr	r3, [sp, #24]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	dc03      	bgt.n	80130ec <_dtoa_r+0xa64>
 80130e4:	9b08      	ldr	r3, [sp, #32]
 80130e6:	2b02      	cmp	r3, #2
 80130e8:	f73f aed7 	bgt.w	8012e9a <_dtoa_r+0x812>
 80130ec:	9e04      	ldr	r6, [sp, #16]
 80130ee:	9801      	ldr	r0, [sp, #4]
 80130f0:	4629      	mov	r1, r5
 80130f2:	f7ff fa3b 	bl	801256c <quorem>
 80130f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80130fa:	f806 8b01 	strb.w	r8, [r6], #1
 80130fe:	9b04      	ldr	r3, [sp, #16]
 8013100:	9a06      	ldr	r2, [sp, #24]
 8013102:	1af3      	subs	r3, r6, r3
 8013104:	429a      	cmp	r2, r3
 8013106:	ddb4      	ble.n	8013072 <_dtoa_r+0x9ea>
 8013108:	2300      	movs	r3, #0
 801310a:	220a      	movs	r2, #10
 801310c:	9901      	ldr	r1, [sp, #4]
 801310e:	4620      	mov	r0, r4
 8013110:	f000 fd83 	bl	8013c1a <__multadd>
 8013114:	9001      	str	r0, [sp, #4]
 8013116:	e7ea      	b.n	80130ee <_dtoa_r+0xa66>
 8013118:	08015954 	.word	0x08015954
 801311c:	080159d0 	.word	0x080159d0

08013120 <__sflush_r>:
 8013120:	898a      	ldrh	r2, [r1, #12]
 8013122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013126:	4605      	mov	r5, r0
 8013128:	0710      	lsls	r0, r2, #28
 801312a:	460c      	mov	r4, r1
 801312c:	d458      	bmi.n	80131e0 <__sflush_r+0xc0>
 801312e:	684b      	ldr	r3, [r1, #4]
 8013130:	2b00      	cmp	r3, #0
 8013132:	dc05      	bgt.n	8013140 <__sflush_r+0x20>
 8013134:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013136:	2b00      	cmp	r3, #0
 8013138:	dc02      	bgt.n	8013140 <__sflush_r+0x20>
 801313a:	2000      	movs	r0, #0
 801313c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013142:	2e00      	cmp	r6, #0
 8013144:	d0f9      	beq.n	801313a <__sflush_r+0x1a>
 8013146:	2300      	movs	r3, #0
 8013148:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801314c:	682f      	ldr	r7, [r5, #0]
 801314e:	6a21      	ldr	r1, [r4, #32]
 8013150:	602b      	str	r3, [r5, #0]
 8013152:	d032      	beq.n	80131ba <__sflush_r+0x9a>
 8013154:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013156:	89a3      	ldrh	r3, [r4, #12]
 8013158:	075a      	lsls	r2, r3, #29
 801315a:	d505      	bpl.n	8013168 <__sflush_r+0x48>
 801315c:	6863      	ldr	r3, [r4, #4]
 801315e:	1ac0      	subs	r0, r0, r3
 8013160:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013162:	b10b      	cbz	r3, 8013168 <__sflush_r+0x48>
 8013164:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013166:	1ac0      	subs	r0, r0, r3
 8013168:	2300      	movs	r3, #0
 801316a:	4602      	mov	r2, r0
 801316c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801316e:	6a21      	ldr	r1, [r4, #32]
 8013170:	4628      	mov	r0, r5
 8013172:	47b0      	blx	r6
 8013174:	1c43      	adds	r3, r0, #1
 8013176:	89a3      	ldrh	r3, [r4, #12]
 8013178:	d106      	bne.n	8013188 <__sflush_r+0x68>
 801317a:	6829      	ldr	r1, [r5, #0]
 801317c:	291d      	cmp	r1, #29
 801317e:	d848      	bhi.n	8013212 <__sflush_r+0xf2>
 8013180:	4a29      	ldr	r2, [pc, #164]	; (8013228 <__sflush_r+0x108>)
 8013182:	40ca      	lsrs	r2, r1
 8013184:	07d6      	lsls	r6, r2, #31
 8013186:	d544      	bpl.n	8013212 <__sflush_r+0xf2>
 8013188:	2200      	movs	r2, #0
 801318a:	6062      	str	r2, [r4, #4]
 801318c:	04d9      	lsls	r1, r3, #19
 801318e:	6922      	ldr	r2, [r4, #16]
 8013190:	6022      	str	r2, [r4, #0]
 8013192:	d504      	bpl.n	801319e <__sflush_r+0x7e>
 8013194:	1c42      	adds	r2, r0, #1
 8013196:	d101      	bne.n	801319c <__sflush_r+0x7c>
 8013198:	682b      	ldr	r3, [r5, #0]
 801319a:	b903      	cbnz	r3, 801319e <__sflush_r+0x7e>
 801319c:	6560      	str	r0, [r4, #84]	; 0x54
 801319e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80131a0:	602f      	str	r7, [r5, #0]
 80131a2:	2900      	cmp	r1, #0
 80131a4:	d0c9      	beq.n	801313a <__sflush_r+0x1a>
 80131a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131aa:	4299      	cmp	r1, r3
 80131ac:	d002      	beq.n	80131b4 <__sflush_r+0x94>
 80131ae:	4628      	mov	r0, r5
 80131b0:	f001 f8f6 	bl	80143a0 <_free_r>
 80131b4:	2000      	movs	r0, #0
 80131b6:	6360      	str	r0, [r4, #52]	; 0x34
 80131b8:	e7c0      	b.n	801313c <__sflush_r+0x1c>
 80131ba:	2301      	movs	r3, #1
 80131bc:	4628      	mov	r0, r5
 80131be:	47b0      	blx	r6
 80131c0:	1c41      	adds	r1, r0, #1
 80131c2:	d1c8      	bne.n	8013156 <__sflush_r+0x36>
 80131c4:	682b      	ldr	r3, [r5, #0]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d0c5      	beq.n	8013156 <__sflush_r+0x36>
 80131ca:	2b1d      	cmp	r3, #29
 80131cc:	d001      	beq.n	80131d2 <__sflush_r+0xb2>
 80131ce:	2b16      	cmp	r3, #22
 80131d0:	d101      	bne.n	80131d6 <__sflush_r+0xb6>
 80131d2:	602f      	str	r7, [r5, #0]
 80131d4:	e7b1      	b.n	801313a <__sflush_r+0x1a>
 80131d6:	89a3      	ldrh	r3, [r4, #12]
 80131d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131dc:	81a3      	strh	r3, [r4, #12]
 80131de:	e7ad      	b.n	801313c <__sflush_r+0x1c>
 80131e0:	690f      	ldr	r7, [r1, #16]
 80131e2:	2f00      	cmp	r7, #0
 80131e4:	d0a9      	beq.n	801313a <__sflush_r+0x1a>
 80131e6:	0793      	lsls	r3, r2, #30
 80131e8:	680e      	ldr	r6, [r1, #0]
 80131ea:	bf08      	it	eq
 80131ec:	694b      	ldreq	r3, [r1, #20]
 80131ee:	600f      	str	r7, [r1, #0]
 80131f0:	bf18      	it	ne
 80131f2:	2300      	movne	r3, #0
 80131f4:	eba6 0807 	sub.w	r8, r6, r7
 80131f8:	608b      	str	r3, [r1, #8]
 80131fa:	f1b8 0f00 	cmp.w	r8, #0
 80131fe:	dd9c      	ble.n	801313a <__sflush_r+0x1a>
 8013200:	4643      	mov	r3, r8
 8013202:	463a      	mov	r2, r7
 8013204:	6a21      	ldr	r1, [r4, #32]
 8013206:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013208:	4628      	mov	r0, r5
 801320a:	47b0      	blx	r6
 801320c:	2800      	cmp	r0, #0
 801320e:	dc06      	bgt.n	801321e <__sflush_r+0xfe>
 8013210:	89a3      	ldrh	r3, [r4, #12]
 8013212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013216:	81a3      	strh	r3, [r4, #12]
 8013218:	f04f 30ff 	mov.w	r0, #4294967295
 801321c:	e78e      	b.n	801313c <__sflush_r+0x1c>
 801321e:	4407      	add	r7, r0
 8013220:	eba8 0800 	sub.w	r8, r8, r0
 8013224:	e7e9      	b.n	80131fa <__sflush_r+0xda>
 8013226:	bf00      	nop
 8013228:	20400001 	.word	0x20400001

0801322c <_fflush_r>:
 801322c:	b538      	push	{r3, r4, r5, lr}
 801322e:	690b      	ldr	r3, [r1, #16]
 8013230:	4605      	mov	r5, r0
 8013232:	460c      	mov	r4, r1
 8013234:	b1db      	cbz	r3, 801326e <_fflush_r+0x42>
 8013236:	b118      	cbz	r0, 8013240 <_fflush_r+0x14>
 8013238:	6983      	ldr	r3, [r0, #24]
 801323a:	b90b      	cbnz	r3, 8013240 <_fflush_r+0x14>
 801323c:	f000 f860 	bl	8013300 <__sinit>
 8013240:	4b0c      	ldr	r3, [pc, #48]	; (8013274 <_fflush_r+0x48>)
 8013242:	429c      	cmp	r4, r3
 8013244:	d109      	bne.n	801325a <_fflush_r+0x2e>
 8013246:	686c      	ldr	r4, [r5, #4]
 8013248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801324c:	b17b      	cbz	r3, 801326e <_fflush_r+0x42>
 801324e:	4621      	mov	r1, r4
 8013250:	4628      	mov	r0, r5
 8013252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013256:	f7ff bf63 	b.w	8013120 <__sflush_r>
 801325a:	4b07      	ldr	r3, [pc, #28]	; (8013278 <_fflush_r+0x4c>)
 801325c:	429c      	cmp	r4, r3
 801325e:	d101      	bne.n	8013264 <_fflush_r+0x38>
 8013260:	68ac      	ldr	r4, [r5, #8]
 8013262:	e7f1      	b.n	8013248 <_fflush_r+0x1c>
 8013264:	4b05      	ldr	r3, [pc, #20]	; (801327c <_fflush_r+0x50>)
 8013266:	429c      	cmp	r4, r3
 8013268:	bf08      	it	eq
 801326a:	68ec      	ldreq	r4, [r5, #12]
 801326c:	e7ec      	b.n	8013248 <_fflush_r+0x1c>
 801326e:	2000      	movs	r0, #0
 8013270:	bd38      	pop	{r3, r4, r5, pc}
 8013272:	bf00      	nop
 8013274:	08015a00 	.word	0x08015a00
 8013278:	08015a20 	.word	0x08015a20
 801327c:	080159e0 	.word	0x080159e0

08013280 <std>:
 8013280:	2300      	movs	r3, #0
 8013282:	b510      	push	{r4, lr}
 8013284:	4604      	mov	r4, r0
 8013286:	e9c0 3300 	strd	r3, r3, [r0]
 801328a:	6083      	str	r3, [r0, #8]
 801328c:	8181      	strh	r1, [r0, #12]
 801328e:	6643      	str	r3, [r0, #100]	; 0x64
 8013290:	81c2      	strh	r2, [r0, #14]
 8013292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013296:	6183      	str	r3, [r0, #24]
 8013298:	4619      	mov	r1, r3
 801329a:	2208      	movs	r2, #8
 801329c:	305c      	adds	r0, #92	; 0x5c
 801329e:	f7fd fb6a 	bl	8010976 <memset>
 80132a2:	4b05      	ldr	r3, [pc, #20]	; (80132b8 <std+0x38>)
 80132a4:	6263      	str	r3, [r4, #36]	; 0x24
 80132a6:	4b05      	ldr	r3, [pc, #20]	; (80132bc <std+0x3c>)
 80132a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80132aa:	4b05      	ldr	r3, [pc, #20]	; (80132c0 <std+0x40>)
 80132ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80132ae:	4b05      	ldr	r3, [pc, #20]	; (80132c4 <std+0x44>)
 80132b0:	6224      	str	r4, [r4, #32]
 80132b2:	6323      	str	r3, [r4, #48]	; 0x30
 80132b4:	bd10      	pop	{r4, pc}
 80132b6:	bf00      	nop
 80132b8:	08014a35 	.word	0x08014a35
 80132bc:	08014a57 	.word	0x08014a57
 80132c0:	08014a8f 	.word	0x08014a8f
 80132c4:	08014ab3 	.word	0x08014ab3

080132c8 <_cleanup_r>:
 80132c8:	4901      	ldr	r1, [pc, #4]	; (80132d0 <_cleanup_r+0x8>)
 80132ca:	f000 b885 	b.w	80133d8 <_fwalk_reent>
 80132ce:	bf00      	nop
 80132d0:	0801322d 	.word	0x0801322d

080132d4 <__sfmoreglue>:
 80132d4:	b570      	push	{r4, r5, r6, lr}
 80132d6:	1e4a      	subs	r2, r1, #1
 80132d8:	2568      	movs	r5, #104	; 0x68
 80132da:	4355      	muls	r5, r2
 80132dc:	460e      	mov	r6, r1
 80132de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80132e2:	f001 f8ab 	bl	801443c <_malloc_r>
 80132e6:	4604      	mov	r4, r0
 80132e8:	b140      	cbz	r0, 80132fc <__sfmoreglue+0x28>
 80132ea:	2100      	movs	r1, #0
 80132ec:	e9c0 1600 	strd	r1, r6, [r0]
 80132f0:	300c      	adds	r0, #12
 80132f2:	60a0      	str	r0, [r4, #8]
 80132f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80132f8:	f7fd fb3d 	bl	8010976 <memset>
 80132fc:	4620      	mov	r0, r4
 80132fe:	bd70      	pop	{r4, r5, r6, pc}

08013300 <__sinit>:
 8013300:	6983      	ldr	r3, [r0, #24]
 8013302:	b510      	push	{r4, lr}
 8013304:	4604      	mov	r4, r0
 8013306:	bb33      	cbnz	r3, 8013356 <__sinit+0x56>
 8013308:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801330c:	6503      	str	r3, [r0, #80]	; 0x50
 801330e:	4b12      	ldr	r3, [pc, #72]	; (8013358 <__sinit+0x58>)
 8013310:	4a12      	ldr	r2, [pc, #72]	; (801335c <__sinit+0x5c>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	6282      	str	r2, [r0, #40]	; 0x28
 8013316:	4298      	cmp	r0, r3
 8013318:	bf04      	itt	eq
 801331a:	2301      	moveq	r3, #1
 801331c:	6183      	streq	r3, [r0, #24]
 801331e:	f000 f81f 	bl	8013360 <__sfp>
 8013322:	6060      	str	r0, [r4, #4]
 8013324:	4620      	mov	r0, r4
 8013326:	f000 f81b 	bl	8013360 <__sfp>
 801332a:	60a0      	str	r0, [r4, #8]
 801332c:	4620      	mov	r0, r4
 801332e:	f000 f817 	bl	8013360 <__sfp>
 8013332:	2200      	movs	r2, #0
 8013334:	60e0      	str	r0, [r4, #12]
 8013336:	2104      	movs	r1, #4
 8013338:	6860      	ldr	r0, [r4, #4]
 801333a:	f7ff ffa1 	bl	8013280 <std>
 801333e:	2201      	movs	r2, #1
 8013340:	2109      	movs	r1, #9
 8013342:	68a0      	ldr	r0, [r4, #8]
 8013344:	f7ff ff9c 	bl	8013280 <std>
 8013348:	2202      	movs	r2, #2
 801334a:	2112      	movs	r1, #18
 801334c:	68e0      	ldr	r0, [r4, #12]
 801334e:	f7ff ff97 	bl	8013280 <std>
 8013352:	2301      	movs	r3, #1
 8013354:	61a3      	str	r3, [r4, #24]
 8013356:	bd10      	pop	{r4, pc}
 8013358:	08015940 	.word	0x08015940
 801335c:	080132c9 	.word	0x080132c9

08013360 <__sfp>:
 8013360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013362:	4b1b      	ldr	r3, [pc, #108]	; (80133d0 <__sfp+0x70>)
 8013364:	681e      	ldr	r6, [r3, #0]
 8013366:	69b3      	ldr	r3, [r6, #24]
 8013368:	4607      	mov	r7, r0
 801336a:	b913      	cbnz	r3, 8013372 <__sfp+0x12>
 801336c:	4630      	mov	r0, r6
 801336e:	f7ff ffc7 	bl	8013300 <__sinit>
 8013372:	3648      	adds	r6, #72	; 0x48
 8013374:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013378:	3b01      	subs	r3, #1
 801337a:	d503      	bpl.n	8013384 <__sfp+0x24>
 801337c:	6833      	ldr	r3, [r6, #0]
 801337e:	b133      	cbz	r3, 801338e <__sfp+0x2e>
 8013380:	6836      	ldr	r6, [r6, #0]
 8013382:	e7f7      	b.n	8013374 <__sfp+0x14>
 8013384:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013388:	b16d      	cbz	r5, 80133a6 <__sfp+0x46>
 801338a:	3468      	adds	r4, #104	; 0x68
 801338c:	e7f4      	b.n	8013378 <__sfp+0x18>
 801338e:	2104      	movs	r1, #4
 8013390:	4638      	mov	r0, r7
 8013392:	f7ff ff9f 	bl	80132d4 <__sfmoreglue>
 8013396:	6030      	str	r0, [r6, #0]
 8013398:	2800      	cmp	r0, #0
 801339a:	d1f1      	bne.n	8013380 <__sfp+0x20>
 801339c:	230c      	movs	r3, #12
 801339e:	603b      	str	r3, [r7, #0]
 80133a0:	4604      	mov	r4, r0
 80133a2:	4620      	mov	r0, r4
 80133a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133a6:	4b0b      	ldr	r3, [pc, #44]	; (80133d4 <__sfp+0x74>)
 80133a8:	6665      	str	r5, [r4, #100]	; 0x64
 80133aa:	e9c4 5500 	strd	r5, r5, [r4]
 80133ae:	60a5      	str	r5, [r4, #8]
 80133b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80133b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80133b8:	2208      	movs	r2, #8
 80133ba:	4629      	mov	r1, r5
 80133bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80133c0:	f7fd fad9 	bl	8010976 <memset>
 80133c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80133c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80133cc:	e7e9      	b.n	80133a2 <__sfp+0x42>
 80133ce:	bf00      	nop
 80133d0:	08015940 	.word	0x08015940
 80133d4:	ffff0001 	.word	0xffff0001

080133d8 <_fwalk_reent>:
 80133d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133dc:	4680      	mov	r8, r0
 80133de:	4689      	mov	r9, r1
 80133e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80133e4:	2600      	movs	r6, #0
 80133e6:	b914      	cbnz	r4, 80133ee <_fwalk_reent+0x16>
 80133e8:	4630      	mov	r0, r6
 80133ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80133f2:	3f01      	subs	r7, #1
 80133f4:	d501      	bpl.n	80133fa <_fwalk_reent+0x22>
 80133f6:	6824      	ldr	r4, [r4, #0]
 80133f8:	e7f5      	b.n	80133e6 <_fwalk_reent+0xe>
 80133fa:	89ab      	ldrh	r3, [r5, #12]
 80133fc:	2b01      	cmp	r3, #1
 80133fe:	d907      	bls.n	8013410 <_fwalk_reent+0x38>
 8013400:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013404:	3301      	adds	r3, #1
 8013406:	d003      	beq.n	8013410 <_fwalk_reent+0x38>
 8013408:	4629      	mov	r1, r5
 801340a:	4640      	mov	r0, r8
 801340c:	47c8      	blx	r9
 801340e:	4306      	orrs	r6, r0
 8013410:	3568      	adds	r5, #104	; 0x68
 8013412:	e7ee      	b.n	80133f2 <_fwalk_reent+0x1a>

08013414 <rshift>:
 8013414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013416:	6906      	ldr	r6, [r0, #16]
 8013418:	114b      	asrs	r3, r1, #5
 801341a:	429e      	cmp	r6, r3
 801341c:	f100 0414 	add.w	r4, r0, #20
 8013420:	dd30      	ble.n	8013484 <rshift+0x70>
 8013422:	f011 011f 	ands.w	r1, r1, #31
 8013426:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801342a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801342e:	d108      	bne.n	8013442 <rshift+0x2e>
 8013430:	4621      	mov	r1, r4
 8013432:	42b2      	cmp	r2, r6
 8013434:	460b      	mov	r3, r1
 8013436:	d211      	bcs.n	801345c <rshift+0x48>
 8013438:	f852 3b04 	ldr.w	r3, [r2], #4
 801343c:	f841 3b04 	str.w	r3, [r1], #4
 8013440:	e7f7      	b.n	8013432 <rshift+0x1e>
 8013442:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8013446:	f1c1 0c20 	rsb	ip, r1, #32
 801344a:	40cd      	lsrs	r5, r1
 801344c:	3204      	adds	r2, #4
 801344e:	4623      	mov	r3, r4
 8013450:	42b2      	cmp	r2, r6
 8013452:	4617      	mov	r7, r2
 8013454:	d30c      	bcc.n	8013470 <rshift+0x5c>
 8013456:	601d      	str	r5, [r3, #0]
 8013458:	b105      	cbz	r5, 801345c <rshift+0x48>
 801345a:	3304      	adds	r3, #4
 801345c:	1b1a      	subs	r2, r3, r4
 801345e:	42a3      	cmp	r3, r4
 8013460:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013464:	bf08      	it	eq
 8013466:	2300      	moveq	r3, #0
 8013468:	6102      	str	r2, [r0, #16]
 801346a:	bf08      	it	eq
 801346c:	6143      	streq	r3, [r0, #20]
 801346e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013470:	683f      	ldr	r7, [r7, #0]
 8013472:	fa07 f70c 	lsl.w	r7, r7, ip
 8013476:	433d      	orrs	r5, r7
 8013478:	f843 5b04 	str.w	r5, [r3], #4
 801347c:	f852 5b04 	ldr.w	r5, [r2], #4
 8013480:	40cd      	lsrs	r5, r1
 8013482:	e7e5      	b.n	8013450 <rshift+0x3c>
 8013484:	4623      	mov	r3, r4
 8013486:	e7e9      	b.n	801345c <rshift+0x48>

08013488 <__hexdig_fun>:
 8013488:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801348c:	2b09      	cmp	r3, #9
 801348e:	d802      	bhi.n	8013496 <__hexdig_fun+0xe>
 8013490:	3820      	subs	r0, #32
 8013492:	b2c0      	uxtb	r0, r0
 8013494:	4770      	bx	lr
 8013496:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801349a:	2b05      	cmp	r3, #5
 801349c:	d801      	bhi.n	80134a2 <__hexdig_fun+0x1a>
 801349e:	3847      	subs	r0, #71	; 0x47
 80134a0:	e7f7      	b.n	8013492 <__hexdig_fun+0xa>
 80134a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80134a6:	2b05      	cmp	r3, #5
 80134a8:	d801      	bhi.n	80134ae <__hexdig_fun+0x26>
 80134aa:	3827      	subs	r0, #39	; 0x27
 80134ac:	e7f1      	b.n	8013492 <__hexdig_fun+0xa>
 80134ae:	2000      	movs	r0, #0
 80134b0:	4770      	bx	lr

080134b2 <__gethex>:
 80134b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134b6:	b08b      	sub	sp, #44	; 0x2c
 80134b8:	468a      	mov	sl, r1
 80134ba:	9002      	str	r0, [sp, #8]
 80134bc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80134be:	9306      	str	r3, [sp, #24]
 80134c0:	4690      	mov	r8, r2
 80134c2:	f000 fad0 	bl	8013a66 <__localeconv_l>
 80134c6:	6803      	ldr	r3, [r0, #0]
 80134c8:	9303      	str	r3, [sp, #12]
 80134ca:	4618      	mov	r0, r3
 80134cc:	f7ec feb8 	bl	8000240 <strlen>
 80134d0:	9b03      	ldr	r3, [sp, #12]
 80134d2:	9001      	str	r0, [sp, #4]
 80134d4:	4403      	add	r3, r0
 80134d6:	f04f 0b00 	mov.w	fp, #0
 80134da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80134de:	9307      	str	r3, [sp, #28]
 80134e0:	f8da 3000 	ldr.w	r3, [sl]
 80134e4:	3302      	adds	r3, #2
 80134e6:	461f      	mov	r7, r3
 80134e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80134ec:	2830      	cmp	r0, #48	; 0x30
 80134ee:	d06c      	beq.n	80135ca <__gethex+0x118>
 80134f0:	f7ff ffca 	bl	8013488 <__hexdig_fun>
 80134f4:	4604      	mov	r4, r0
 80134f6:	2800      	cmp	r0, #0
 80134f8:	d16a      	bne.n	80135d0 <__gethex+0x11e>
 80134fa:	9a01      	ldr	r2, [sp, #4]
 80134fc:	9903      	ldr	r1, [sp, #12]
 80134fe:	4638      	mov	r0, r7
 8013500:	f001 fadb 	bl	8014aba <strncmp>
 8013504:	2800      	cmp	r0, #0
 8013506:	d166      	bne.n	80135d6 <__gethex+0x124>
 8013508:	9b01      	ldr	r3, [sp, #4]
 801350a:	5cf8      	ldrb	r0, [r7, r3]
 801350c:	18fe      	adds	r6, r7, r3
 801350e:	f7ff ffbb 	bl	8013488 <__hexdig_fun>
 8013512:	2800      	cmp	r0, #0
 8013514:	d062      	beq.n	80135dc <__gethex+0x12a>
 8013516:	4633      	mov	r3, r6
 8013518:	7818      	ldrb	r0, [r3, #0]
 801351a:	2830      	cmp	r0, #48	; 0x30
 801351c:	461f      	mov	r7, r3
 801351e:	f103 0301 	add.w	r3, r3, #1
 8013522:	d0f9      	beq.n	8013518 <__gethex+0x66>
 8013524:	f7ff ffb0 	bl	8013488 <__hexdig_fun>
 8013528:	fab0 f580 	clz	r5, r0
 801352c:	096d      	lsrs	r5, r5, #5
 801352e:	4634      	mov	r4, r6
 8013530:	f04f 0b01 	mov.w	fp, #1
 8013534:	463a      	mov	r2, r7
 8013536:	4616      	mov	r6, r2
 8013538:	3201      	adds	r2, #1
 801353a:	7830      	ldrb	r0, [r6, #0]
 801353c:	f7ff ffa4 	bl	8013488 <__hexdig_fun>
 8013540:	2800      	cmp	r0, #0
 8013542:	d1f8      	bne.n	8013536 <__gethex+0x84>
 8013544:	9a01      	ldr	r2, [sp, #4]
 8013546:	9903      	ldr	r1, [sp, #12]
 8013548:	4630      	mov	r0, r6
 801354a:	f001 fab6 	bl	8014aba <strncmp>
 801354e:	b950      	cbnz	r0, 8013566 <__gethex+0xb4>
 8013550:	b954      	cbnz	r4, 8013568 <__gethex+0xb6>
 8013552:	9b01      	ldr	r3, [sp, #4]
 8013554:	18f4      	adds	r4, r6, r3
 8013556:	4622      	mov	r2, r4
 8013558:	4616      	mov	r6, r2
 801355a:	3201      	adds	r2, #1
 801355c:	7830      	ldrb	r0, [r6, #0]
 801355e:	f7ff ff93 	bl	8013488 <__hexdig_fun>
 8013562:	2800      	cmp	r0, #0
 8013564:	d1f8      	bne.n	8013558 <__gethex+0xa6>
 8013566:	b10c      	cbz	r4, 801356c <__gethex+0xba>
 8013568:	1ba4      	subs	r4, r4, r6
 801356a:	00a4      	lsls	r4, r4, #2
 801356c:	7833      	ldrb	r3, [r6, #0]
 801356e:	2b50      	cmp	r3, #80	; 0x50
 8013570:	d001      	beq.n	8013576 <__gethex+0xc4>
 8013572:	2b70      	cmp	r3, #112	; 0x70
 8013574:	d140      	bne.n	80135f8 <__gethex+0x146>
 8013576:	7873      	ldrb	r3, [r6, #1]
 8013578:	2b2b      	cmp	r3, #43	; 0x2b
 801357a:	d031      	beq.n	80135e0 <__gethex+0x12e>
 801357c:	2b2d      	cmp	r3, #45	; 0x2d
 801357e:	d033      	beq.n	80135e8 <__gethex+0x136>
 8013580:	1c71      	adds	r1, r6, #1
 8013582:	f04f 0900 	mov.w	r9, #0
 8013586:	7808      	ldrb	r0, [r1, #0]
 8013588:	f7ff ff7e 	bl	8013488 <__hexdig_fun>
 801358c:	1e43      	subs	r3, r0, #1
 801358e:	b2db      	uxtb	r3, r3
 8013590:	2b18      	cmp	r3, #24
 8013592:	d831      	bhi.n	80135f8 <__gethex+0x146>
 8013594:	f1a0 0210 	sub.w	r2, r0, #16
 8013598:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801359c:	f7ff ff74 	bl	8013488 <__hexdig_fun>
 80135a0:	1e43      	subs	r3, r0, #1
 80135a2:	b2db      	uxtb	r3, r3
 80135a4:	2b18      	cmp	r3, #24
 80135a6:	d922      	bls.n	80135ee <__gethex+0x13c>
 80135a8:	f1b9 0f00 	cmp.w	r9, #0
 80135ac:	d000      	beq.n	80135b0 <__gethex+0xfe>
 80135ae:	4252      	negs	r2, r2
 80135b0:	4414      	add	r4, r2
 80135b2:	f8ca 1000 	str.w	r1, [sl]
 80135b6:	b30d      	cbz	r5, 80135fc <__gethex+0x14a>
 80135b8:	f1bb 0f00 	cmp.w	fp, #0
 80135bc:	bf0c      	ite	eq
 80135be:	2706      	moveq	r7, #6
 80135c0:	2700      	movne	r7, #0
 80135c2:	4638      	mov	r0, r7
 80135c4:	b00b      	add	sp, #44	; 0x2c
 80135c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ca:	f10b 0b01 	add.w	fp, fp, #1
 80135ce:	e78a      	b.n	80134e6 <__gethex+0x34>
 80135d0:	2500      	movs	r5, #0
 80135d2:	462c      	mov	r4, r5
 80135d4:	e7ae      	b.n	8013534 <__gethex+0x82>
 80135d6:	463e      	mov	r6, r7
 80135d8:	2501      	movs	r5, #1
 80135da:	e7c7      	b.n	801356c <__gethex+0xba>
 80135dc:	4604      	mov	r4, r0
 80135de:	e7fb      	b.n	80135d8 <__gethex+0x126>
 80135e0:	f04f 0900 	mov.w	r9, #0
 80135e4:	1cb1      	adds	r1, r6, #2
 80135e6:	e7ce      	b.n	8013586 <__gethex+0xd4>
 80135e8:	f04f 0901 	mov.w	r9, #1
 80135ec:	e7fa      	b.n	80135e4 <__gethex+0x132>
 80135ee:	230a      	movs	r3, #10
 80135f0:	fb03 0202 	mla	r2, r3, r2, r0
 80135f4:	3a10      	subs	r2, #16
 80135f6:	e7cf      	b.n	8013598 <__gethex+0xe6>
 80135f8:	4631      	mov	r1, r6
 80135fa:	e7da      	b.n	80135b2 <__gethex+0x100>
 80135fc:	1bf3      	subs	r3, r6, r7
 80135fe:	3b01      	subs	r3, #1
 8013600:	4629      	mov	r1, r5
 8013602:	2b07      	cmp	r3, #7
 8013604:	dc49      	bgt.n	801369a <__gethex+0x1e8>
 8013606:	9802      	ldr	r0, [sp, #8]
 8013608:	f000 fabc 	bl	8013b84 <_Balloc>
 801360c:	9b01      	ldr	r3, [sp, #4]
 801360e:	f100 0914 	add.w	r9, r0, #20
 8013612:	f04f 0b00 	mov.w	fp, #0
 8013616:	f1c3 0301 	rsb	r3, r3, #1
 801361a:	4605      	mov	r5, r0
 801361c:	f8cd 9010 	str.w	r9, [sp, #16]
 8013620:	46da      	mov	sl, fp
 8013622:	9308      	str	r3, [sp, #32]
 8013624:	42b7      	cmp	r7, r6
 8013626:	d33b      	bcc.n	80136a0 <__gethex+0x1ee>
 8013628:	9804      	ldr	r0, [sp, #16]
 801362a:	f840 ab04 	str.w	sl, [r0], #4
 801362e:	eba0 0009 	sub.w	r0, r0, r9
 8013632:	1080      	asrs	r0, r0, #2
 8013634:	6128      	str	r0, [r5, #16]
 8013636:	0147      	lsls	r7, r0, #5
 8013638:	4650      	mov	r0, sl
 801363a:	f000 fb67 	bl	8013d0c <__hi0bits>
 801363e:	f8d8 6000 	ldr.w	r6, [r8]
 8013642:	1a3f      	subs	r7, r7, r0
 8013644:	42b7      	cmp	r7, r6
 8013646:	dd64      	ble.n	8013712 <__gethex+0x260>
 8013648:	1bbf      	subs	r7, r7, r6
 801364a:	4639      	mov	r1, r7
 801364c:	4628      	mov	r0, r5
 801364e:	f000 fe78 	bl	8014342 <__any_on>
 8013652:	4682      	mov	sl, r0
 8013654:	b178      	cbz	r0, 8013676 <__gethex+0x1c4>
 8013656:	1e7b      	subs	r3, r7, #1
 8013658:	1159      	asrs	r1, r3, #5
 801365a:	f003 021f 	and.w	r2, r3, #31
 801365e:	f04f 0a01 	mov.w	sl, #1
 8013662:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013666:	fa0a f202 	lsl.w	r2, sl, r2
 801366a:	420a      	tst	r2, r1
 801366c:	d003      	beq.n	8013676 <__gethex+0x1c4>
 801366e:	4553      	cmp	r3, sl
 8013670:	dc46      	bgt.n	8013700 <__gethex+0x24e>
 8013672:	f04f 0a02 	mov.w	sl, #2
 8013676:	4639      	mov	r1, r7
 8013678:	4628      	mov	r0, r5
 801367a:	f7ff fecb 	bl	8013414 <rshift>
 801367e:	443c      	add	r4, r7
 8013680:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013684:	42a3      	cmp	r3, r4
 8013686:	da52      	bge.n	801372e <__gethex+0x27c>
 8013688:	4629      	mov	r1, r5
 801368a:	9802      	ldr	r0, [sp, #8]
 801368c:	f000 faae 	bl	8013bec <_Bfree>
 8013690:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013692:	2300      	movs	r3, #0
 8013694:	6013      	str	r3, [r2, #0]
 8013696:	27a3      	movs	r7, #163	; 0xa3
 8013698:	e793      	b.n	80135c2 <__gethex+0x110>
 801369a:	3101      	adds	r1, #1
 801369c:	105b      	asrs	r3, r3, #1
 801369e:	e7b0      	b.n	8013602 <__gethex+0x150>
 80136a0:	1e73      	subs	r3, r6, #1
 80136a2:	9305      	str	r3, [sp, #20]
 80136a4:	9a07      	ldr	r2, [sp, #28]
 80136a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80136aa:	4293      	cmp	r3, r2
 80136ac:	d018      	beq.n	80136e0 <__gethex+0x22e>
 80136ae:	f1bb 0f20 	cmp.w	fp, #32
 80136b2:	d107      	bne.n	80136c4 <__gethex+0x212>
 80136b4:	9b04      	ldr	r3, [sp, #16]
 80136b6:	f8c3 a000 	str.w	sl, [r3]
 80136ba:	3304      	adds	r3, #4
 80136bc:	f04f 0a00 	mov.w	sl, #0
 80136c0:	9304      	str	r3, [sp, #16]
 80136c2:	46d3      	mov	fp, sl
 80136c4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80136c8:	f7ff fede 	bl	8013488 <__hexdig_fun>
 80136cc:	f000 000f 	and.w	r0, r0, #15
 80136d0:	fa00 f00b 	lsl.w	r0, r0, fp
 80136d4:	ea4a 0a00 	orr.w	sl, sl, r0
 80136d8:	f10b 0b04 	add.w	fp, fp, #4
 80136dc:	9b05      	ldr	r3, [sp, #20]
 80136de:	e00d      	b.n	80136fc <__gethex+0x24a>
 80136e0:	9b05      	ldr	r3, [sp, #20]
 80136e2:	9a08      	ldr	r2, [sp, #32]
 80136e4:	4413      	add	r3, r2
 80136e6:	42bb      	cmp	r3, r7
 80136e8:	d3e1      	bcc.n	80136ae <__gethex+0x1fc>
 80136ea:	4618      	mov	r0, r3
 80136ec:	9a01      	ldr	r2, [sp, #4]
 80136ee:	9903      	ldr	r1, [sp, #12]
 80136f0:	9309      	str	r3, [sp, #36]	; 0x24
 80136f2:	f001 f9e2 	bl	8014aba <strncmp>
 80136f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136f8:	2800      	cmp	r0, #0
 80136fa:	d1d8      	bne.n	80136ae <__gethex+0x1fc>
 80136fc:	461e      	mov	r6, r3
 80136fe:	e791      	b.n	8013624 <__gethex+0x172>
 8013700:	1eb9      	subs	r1, r7, #2
 8013702:	4628      	mov	r0, r5
 8013704:	f000 fe1d 	bl	8014342 <__any_on>
 8013708:	2800      	cmp	r0, #0
 801370a:	d0b2      	beq.n	8013672 <__gethex+0x1c0>
 801370c:	f04f 0a03 	mov.w	sl, #3
 8013710:	e7b1      	b.n	8013676 <__gethex+0x1c4>
 8013712:	da09      	bge.n	8013728 <__gethex+0x276>
 8013714:	1bf7      	subs	r7, r6, r7
 8013716:	4629      	mov	r1, r5
 8013718:	463a      	mov	r2, r7
 801371a:	9802      	ldr	r0, [sp, #8]
 801371c:	f000 fc32 	bl	8013f84 <__lshift>
 8013720:	1be4      	subs	r4, r4, r7
 8013722:	4605      	mov	r5, r0
 8013724:	f100 0914 	add.w	r9, r0, #20
 8013728:	f04f 0a00 	mov.w	sl, #0
 801372c:	e7a8      	b.n	8013680 <__gethex+0x1ce>
 801372e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013732:	42a0      	cmp	r0, r4
 8013734:	dd6a      	ble.n	801380c <__gethex+0x35a>
 8013736:	1b04      	subs	r4, r0, r4
 8013738:	42a6      	cmp	r6, r4
 801373a:	dc2e      	bgt.n	801379a <__gethex+0x2e8>
 801373c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013740:	2b02      	cmp	r3, #2
 8013742:	d022      	beq.n	801378a <__gethex+0x2d8>
 8013744:	2b03      	cmp	r3, #3
 8013746:	d024      	beq.n	8013792 <__gethex+0x2e0>
 8013748:	2b01      	cmp	r3, #1
 801374a:	d115      	bne.n	8013778 <__gethex+0x2c6>
 801374c:	42a6      	cmp	r6, r4
 801374e:	d113      	bne.n	8013778 <__gethex+0x2c6>
 8013750:	2e01      	cmp	r6, #1
 8013752:	dc0b      	bgt.n	801376c <__gethex+0x2ba>
 8013754:	9a06      	ldr	r2, [sp, #24]
 8013756:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801375a:	6013      	str	r3, [r2, #0]
 801375c:	2301      	movs	r3, #1
 801375e:	612b      	str	r3, [r5, #16]
 8013760:	f8c9 3000 	str.w	r3, [r9]
 8013764:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013766:	2762      	movs	r7, #98	; 0x62
 8013768:	601d      	str	r5, [r3, #0]
 801376a:	e72a      	b.n	80135c2 <__gethex+0x110>
 801376c:	1e71      	subs	r1, r6, #1
 801376e:	4628      	mov	r0, r5
 8013770:	f000 fde7 	bl	8014342 <__any_on>
 8013774:	2800      	cmp	r0, #0
 8013776:	d1ed      	bne.n	8013754 <__gethex+0x2a2>
 8013778:	4629      	mov	r1, r5
 801377a:	9802      	ldr	r0, [sp, #8]
 801377c:	f000 fa36 	bl	8013bec <_Bfree>
 8013780:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013782:	2300      	movs	r3, #0
 8013784:	6013      	str	r3, [r2, #0]
 8013786:	2750      	movs	r7, #80	; 0x50
 8013788:	e71b      	b.n	80135c2 <__gethex+0x110>
 801378a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801378c:	2b00      	cmp	r3, #0
 801378e:	d0e1      	beq.n	8013754 <__gethex+0x2a2>
 8013790:	e7f2      	b.n	8013778 <__gethex+0x2c6>
 8013792:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013794:	2b00      	cmp	r3, #0
 8013796:	d1dd      	bne.n	8013754 <__gethex+0x2a2>
 8013798:	e7ee      	b.n	8013778 <__gethex+0x2c6>
 801379a:	1e67      	subs	r7, r4, #1
 801379c:	f1ba 0f00 	cmp.w	sl, #0
 80137a0:	d131      	bne.n	8013806 <__gethex+0x354>
 80137a2:	b127      	cbz	r7, 80137ae <__gethex+0x2fc>
 80137a4:	4639      	mov	r1, r7
 80137a6:	4628      	mov	r0, r5
 80137a8:	f000 fdcb 	bl	8014342 <__any_on>
 80137ac:	4682      	mov	sl, r0
 80137ae:	117a      	asrs	r2, r7, #5
 80137b0:	2301      	movs	r3, #1
 80137b2:	f007 071f 	and.w	r7, r7, #31
 80137b6:	fa03 f707 	lsl.w	r7, r3, r7
 80137ba:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80137be:	4621      	mov	r1, r4
 80137c0:	421f      	tst	r7, r3
 80137c2:	4628      	mov	r0, r5
 80137c4:	bf18      	it	ne
 80137c6:	f04a 0a02 	orrne.w	sl, sl, #2
 80137ca:	1b36      	subs	r6, r6, r4
 80137cc:	f7ff fe22 	bl	8013414 <rshift>
 80137d0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80137d4:	2702      	movs	r7, #2
 80137d6:	f1ba 0f00 	cmp.w	sl, #0
 80137da:	d048      	beq.n	801386e <__gethex+0x3bc>
 80137dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80137e0:	2b02      	cmp	r3, #2
 80137e2:	d015      	beq.n	8013810 <__gethex+0x35e>
 80137e4:	2b03      	cmp	r3, #3
 80137e6:	d017      	beq.n	8013818 <__gethex+0x366>
 80137e8:	2b01      	cmp	r3, #1
 80137ea:	d109      	bne.n	8013800 <__gethex+0x34e>
 80137ec:	f01a 0f02 	tst.w	sl, #2
 80137f0:	d006      	beq.n	8013800 <__gethex+0x34e>
 80137f2:	f8d9 3000 	ldr.w	r3, [r9]
 80137f6:	ea4a 0a03 	orr.w	sl, sl, r3
 80137fa:	f01a 0f01 	tst.w	sl, #1
 80137fe:	d10e      	bne.n	801381e <__gethex+0x36c>
 8013800:	f047 0710 	orr.w	r7, r7, #16
 8013804:	e033      	b.n	801386e <__gethex+0x3bc>
 8013806:	f04f 0a01 	mov.w	sl, #1
 801380a:	e7d0      	b.n	80137ae <__gethex+0x2fc>
 801380c:	2701      	movs	r7, #1
 801380e:	e7e2      	b.n	80137d6 <__gethex+0x324>
 8013810:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013812:	f1c3 0301 	rsb	r3, r3, #1
 8013816:	9315      	str	r3, [sp, #84]	; 0x54
 8013818:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801381a:	2b00      	cmp	r3, #0
 801381c:	d0f0      	beq.n	8013800 <__gethex+0x34e>
 801381e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013822:	f105 0314 	add.w	r3, r5, #20
 8013826:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801382a:	eb03 010a 	add.w	r1, r3, sl
 801382e:	f04f 0c00 	mov.w	ip, #0
 8013832:	4618      	mov	r0, r3
 8013834:	f853 2b04 	ldr.w	r2, [r3], #4
 8013838:	f1b2 3fff 	cmp.w	r2, #4294967295
 801383c:	d01c      	beq.n	8013878 <__gethex+0x3c6>
 801383e:	3201      	adds	r2, #1
 8013840:	6002      	str	r2, [r0, #0]
 8013842:	2f02      	cmp	r7, #2
 8013844:	f105 0314 	add.w	r3, r5, #20
 8013848:	d138      	bne.n	80138bc <__gethex+0x40a>
 801384a:	f8d8 2000 	ldr.w	r2, [r8]
 801384e:	3a01      	subs	r2, #1
 8013850:	42b2      	cmp	r2, r6
 8013852:	d10a      	bne.n	801386a <__gethex+0x3b8>
 8013854:	1171      	asrs	r1, r6, #5
 8013856:	2201      	movs	r2, #1
 8013858:	f006 061f 	and.w	r6, r6, #31
 801385c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013860:	fa02 f606 	lsl.w	r6, r2, r6
 8013864:	421e      	tst	r6, r3
 8013866:	bf18      	it	ne
 8013868:	4617      	movne	r7, r2
 801386a:	f047 0720 	orr.w	r7, r7, #32
 801386e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013870:	601d      	str	r5, [r3, #0]
 8013872:	9b06      	ldr	r3, [sp, #24]
 8013874:	601c      	str	r4, [r3, #0]
 8013876:	e6a4      	b.n	80135c2 <__gethex+0x110>
 8013878:	4299      	cmp	r1, r3
 801387a:	f843 cc04 	str.w	ip, [r3, #-4]
 801387e:	d8d8      	bhi.n	8013832 <__gethex+0x380>
 8013880:	68ab      	ldr	r3, [r5, #8]
 8013882:	4599      	cmp	r9, r3
 8013884:	db12      	blt.n	80138ac <__gethex+0x3fa>
 8013886:	6869      	ldr	r1, [r5, #4]
 8013888:	9802      	ldr	r0, [sp, #8]
 801388a:	3101      	adds	r1, #1
 801388c:	f000 f97a 	bl	8013b84 <_Balloc>
 8013890:	692a      	ldr	r2, [r5, #16]
 8013892:	3202      	adds	r2, #2
 8013894:	f105 010c 	add.w	r1, r5, #12
 8013898:	4683      	mov	fp, r0
 801389a:	0092      	lsls	r2, r2, #2
 801389c:	300c      	adds	r0, #12
 801389e:	f7fd f85f 	bl	8010960 <memcpy>
 80138a2:	4629      	mov	r1, r5
 80138a4:	9802      	ldr	r0, [sp, #8]
 80138a6:	f000 f9a1 	bl	8013bec <_Bfree>
 80138aa:	465d      	mov	r5, fp
 80138ac:	692b      	ldr	r3, [r5, #16]
 80138ae:	1c5a      	adds	r2, r3, #1
 80138b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80138b4:	612a      	str	r2, [r5, #16]
 80138b6:	2201      	movs	r2, #1
 80138b8:	615a      	str	r2, [r3, #20]
 80138ba:	e7c2      	b.n	8013842 <__gethex+0x390>
 80138bc:	692a      	ldr	r2, [r5, #16]
 80138be:	454a      	cmp	r2, r9
 80138c0:	dd0b      	ble.n	80138da <__gethex+0x428>
 80138c2:	2101      	movs	r1, #1
 80138c4:	4628      	mov	r0, r5
 80138c6:	f7ff fda5 	bl	8013414 <rshift>
 80138ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80138ce:	3401      	adds	r4, #1
 80138d0:	42a3      	cmp	r3, r4
 80138d2:	f6ff aed9 	blt.w	8013688 <__gethex+0x1d6>
 80138d6:	2701      	movs	r7, #1
 80138d8:	e7c7      	b.n	801386a <__gethex+0x3b8>
 80138da:	f016 061f 	ands.w	r6, r6, #31
 80138de:	d0fa      	beq.n	80138d6 <__gethex+0x424>
 80138e0:	449a      	add	sl, r3
 80138e2:	f1c6 0620 	rsb	r6, r6, #32
 80138e6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80138ea:	f000 fa0f 	bl	8013d0c <__hi0bits>
 80138ee:	42b0      	cmp	r0, r6
 80138f0:	dbe7      	blt.n	80138c2 <__gethex+0x410>
 80138f2:	e7f0      	b.n	80138d6 <__gethex+0x424>

080138f4 <L_shift>:
 80138f4:	f1c2 0208 	rsb	r2, r2, #8
 80138f8:	0092      	lsls	r2, r2, #2
 80138fa:	b570      	push	{r4, r5, r6, lr}
 80138fc:	f1c2 0620 	rsb	r6, r2, #32
 8013900:	6843      	ldr	r3, [r0, #4]
 8013902:	6804      	ldr	r4, [r0, #0]
 8013904:	fa03 f506 	lsl.w	r5, r3, r6
 8013908:	432c      	orrs	r4, r5
 801390a:	40d3      	lsrs	r3, r2
 801390c:	6004      	str	r4, [r0, #0]
 801390e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013912:	4288      	cmp	r0, r1
 8013914:	d3f4      	bcc.n	8013900 <L_shift+0xc>
 8013916:	bd70      	pop	{r4, r5, r6, pc}

08013918 <__match>:
 8013918:	b530      	push	{r4, r5, lr}
 801391a:	6803      	ldr	r3, [r0, #0]
 801391c:	3301      	adds	r3, #1
 801391e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013922:	b914      	cbnz	r4, 801392a <__match+0x12>
 8013924:	6003      	str	r3, [r0, #0]
 8013926:	2001      	movs	r0, #1
 8013928:	bd30      	pop	{r4, r5, pc}
 801392a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801392e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013932:	2d19      	cmp	r5, #25
 8013934:	bf98      	it	ls
 8013936:	3220      	addls	r2, #32
 8013938:	42a2      	cmp	r2, r4
 801393a:	d0f0      	beq.n	801391e <__match+0x6>
 801393c:	2000      	movs	r0, #0
 801393e:	e7f3      	b.n	8013928 <__match+0x10>

08013940 <__hexnan>:
 8013940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013944:	680b      	ldr	r3, [r1, #0]
 8013946:	6801      	ldr	r1, [r0, #0]
 8013948:	115f      	asrs	r7, r3, #5
 801394a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801394e:	f013 031f 	ands.w	r3, r3, #31
 8013952:	b087      	sub	sp, #28
 8013954:	bf18      	it	ne
 8013956:	3704      	addne	r7, #4
 8013958:	2500      	movs	r5, #0
 801395a:	1f3e      	subs	r6, r7, #4
 801395c:	4682      	mov	sl, r0
 801395e:	4690      	mov	r8, r2
 8013960:	9301      	str	r3, [sp, #4]
 8013962:	f847 5c04 	str.w	r5, [r7, #-4]
 8013966:	46b1      	mov	r9, r6
 8013968:	4634      	mov	r4, r6
 801396a:	9502      	str	r5, [sp, #8]
 801396c:	46ab      	mov	fp, r5
 801396e:	784a      	ldrb	r2, [r1, #1]
 8013970:	1c4b      	adds	r3, r1, #1
 8013972:	9303      	str	r3, [sp, #12]
 8013974:	b342      	cbz	r2, 80139c8 <__hexnan+0x88>
 8013976:	4610      	mov	r0, r2
 8013978:	9105      	str	r1, [sp, #20]
 801397a:	9204      	str	r2, [sp, #16]
 801397c:	f7ff fd84 	bl	8013488 <__hexdig_fun>
 8013980:	2800      	cmp	r0, #0
 8013982:	d143      	bne.n	8013a0c <__hexnan+0xcc>
 8013984:	9a04      	ldr	r2, [sp, #16]
 8013986:	9905      	ldr	r1, [sp, #20]
 8013988:	2a20      	cmp	r2, #32
 801398a:	d818      	bhi.n	80139be <__hexnan+0x7e>
 801398c:	9b02      	ldr	r3, [sp, #8]
 801398e:	459b      	cmp	fp, r3
 8013990:	dd13      	ble.n	80139ba <__hexnan+0x7a>
 8013992:	454c      	cmp	r4, r9
 8013994:	d206      	bcs.n	80139a4 <__hexnan+0x64>
 8013996:	2d07      	cmp	r5, #7
 8013998:	dc04      	bgt.n	80139a4 <__hexnan+0x64>
 801399a:	462a      	mov	r2, r5
 801399c:	4649      	mov	r1, r9
 801399e:	4620      	mov	r0, r4
 80139a0:	f7ff ffa8 	bl	80138f4 <L_shift>
 80139a4:	4544      	cmp	r4, r8
 80139a6:	d944      	bls.n	8013a32 <__hexnan+0xf2>
 80139a8:	2300      	movs	r3, #0
 80139aa:	f1a4 0904 	sub.w	r9, r4, #4
 80139ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80139b2:	f8cd b008 	str.w	fp, [sp, #8]
 80139b6:	464c      	mov	r4, r9
 80139b8:	461d      	mov	r5, r3
 80139ba:	9903      	ldr	r1, [sp, #12]
 80139bc:	e7d7      	b.n	801396e <__hexnan+0x2e>
 80139be:	2a29      	cmp	r2, #41	; 0x29
 80139c0:	d14a      	bne.n	8013a58 <__hexnan+0x118>
 80139c2:	3102      	adds	r1, #2
 80139c4:	f8ca 1000 	str.w	r1, [sl]
 80139c8:	f1bb 0f00 	cmp.w	fp, #0
 80139cc:	d044      	beq.n	8013a58 <__hexnan+0x118>
 80139ce:	454c      	cmp	r4, r9
 80139d0:	d206      	bcs.n	80139e0 <__hexnan+0xa0>
 80139d2:	2d07      	cmp	r5, #7
 80139d4:	dc04      	bgt.n	80139e0 <__hexnan+0xa0>
 80139d6:	462a      	mov	r2, r5
 80139d8:	4649      	mov	r1, r9
 80139da:	4620      	mov	r0, r4
 80139dc:	f7ff ff8a 	bl	80138f4 <L_shift>
 80139e0:	4544      	cmp	r4, r8
 80139e2:	d928      	bls.n	8013a36 <__hexnan+0xf6>
 80139e4:	4643      	mov	r3, r8
 80139e6:	f854 2b04 	ldr.w	r2, [r4], #4
 80139ea:	f843 2b04 	str.w	r2, [r3], #4
 80139ee:	42a6      	cmp	r6, r4
 80139f0:	d2f9      	bcs.n	80139e6 <__hexnan+0xa6>
 80139f2:	2200      	movs	r2, #0
 80139f4:	f843 2b04 	str.w	r2, [r3], #4
 80139f8:	429e      	cmp	r6, r3
 80139fa:	d2fb      	bcs.n	80139f4 <__hexnan+0xb4>
 80139fc:	6833      	ldr	r3, [r6, #0]
 80139fe:	b91b      	cbnz	r3, 8013a08 <__hexnan+0xc8>
 8013a00:	4546      	cmp	r6, r8
 8013a02:	d127      	bne.n	8013a54 <__hexnan+0x114>
 8013a04:	2301      	movs	r3, #1
 8013a06:	6033      	str	r3, [r6, #0]
 8013a08:	2005      	movs	r0, #5
 8013a0a:	e026      	b.n	8013a5a <__hexnan+0x11a>
 8013a0c:	3501      	adds	r5, #1
 8013a0e:	2d08      	cmp	r5, #8
 8013a10:	f10b 0b01 	add.w	fp, fp, #1
 8013a14:	dd06      	ble.n	8013a24 <__hexnan+0xe4>
 8013a16:	4544      	cmp	r4, r8
 8013a18:	d9cf      	bls.n	80139ba <__hexnan+0x7a>
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	f844 3c04 	str.w	r3, [r4, #-4]
 8013a20:	2501      	movs	r5, #1
 8013a22:	3c04      	subs	r4, #4
 8013a24:	6822      	ldr	r2, [r4, #0]
 8013a26:	f000 000f 	and.w	r0, r0, #15
 8013a2a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013a2e:	6020      	str	r0, [r4, #0]
 8013a30:	e7c3      	b.n	80139ba <__hexnan+0x7a>
 8013a32:	2508      	movs	r5, #8
 8013a34:	e7c1      	b.n	80139ba <__hexnan+0x7a>
 8013a36:	9b01      	ldr	r3, [sp, #4]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d0df      	beq.n	80139fc <__hexnan+0xbc>
 8013a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8013a40:	f1c3 0320 	rsb	r3, r3, #32
 8013a44:	fa22 f303 	lsr.w	r3, r2, r3
 8013a48:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8013a4c:	401a      	ands	r2, r3
 8013a4e:	f847 2c04 	str.w	r2, [r7, #-4]
 8013a52:	e7d3      	b.n	80139fc <__hexnan+0xbc>
 8013a54:	3e04      	subs	r6, #4
 8013a56:	e7d1      	b.n	80139fc <__hexnan+0xbc>
 8013a58:	2004      	movs	r0, #4
 8013a5a:	b007      	add	sp, #28
 8013a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a60 <__locale_ctype_ptr_l>:
 8013a60:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013a64:	4770      	bx	lr

08013a66 <__localeconv_l>:
 8013a66:	30f0      	adds	r0, #240	; 0xf0
 8013a68:	4770      	bx	lr
	...

08013a6c <_localeconv_r>:
 8013a6c:	4b04      	ldr	r3, [pc, #16]	; (8013a80 <_localeconv_r+0x14>)
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	6a18      	ldr	r0, [r3, #32]
 8013a72:	4b04      	ldr	r3, [pc, #16]	; (8013a84 <_localeconv_r+0x18>)
 8013a74:	2800      	cmp	r0, #0
 8013a76:	bf08      	it	eq
 8013a78:	4618      	moveq	r0, r3
 8013a7a:	30f0      	adds	r0, #240	; 0xf0
 8013a7c:	4770      	bx	lr
 8013a7e:	bf00      	nop
 8013a80:	20000198 	.word	0x20000198
 8013a84:	200001fc 	.word	0x200001fc

08013a88 <__swhatbuf_r>:
 8013a88:	b570      	push	{r4, r5, r6, lr}
 8013a8a:	460e      	mov	r6, r1
 8013a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a90:	2900      	cmp	r1, #0
 8013a92:	b096      	sub	sp, #88	; 0x58
 8013a94:	4614      	mov	r4, r2
 8013a96:	461d      	mov	r5, r3
 8013a98:	da07      	bge.n	8013aaa <__swhatbuf_r+0x22>
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	602b      	str	r3, [r5, #0]
 8013a9e:	89b3      	ldrh	r3, [r6, #12]
 8013aa0:	061a      	lsls	r2, r3, #24
 8013aa2:	d410      	bmi.n	8013ac6 <__swhatbuf_r+0x3e>
 8013aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013aa8:	e00e      	b.n	8013ac8 <__swhatbuf_r+0x40>
 8013aaa:	466a      	mov	r2, sp
 8013aac:	f001 f846 	bl	8014b3c <_fstat_r>
 8013ab0:	2800      	cmp	r0, #0
 8013ab2:	dbf2      	blt.n	8013a9a <__swhatbuf_r+0x12>
 8013ab4:	9a01      	ldr	r2, [sp, #4]
 8013ab6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013aba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013abe:	425a      	negs	r2, r3
 8013ac0:	415a      	adcs	r2, r3
 8013ac2:	602a      	str	r2, [r5, #0]
 8013ac4:	e7ee      	b.n	8013aa4 <__swhatbuf_r+0x1c>
 8013ac6:	2340      	movs	r3, #64	; 0x40
 8013ac8:	2000      	movs	r0, #0
 8013aca:	6023      	str	r3, [r4, #0]
 8013acc:	b016      	add	sp, #88	; 0x58
 8013ace:	bd70      	pop	{r4, r5, r6, pc}

08013ad0 <__smakebuf_r>:
 8013ad0:	898b      	ldrh	r3, [r1, #12]
 8013ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013ad4:	079d      	lsls	r5, r3, #30
 8013ad6:	4606      	mov	r6, r0
 8013ad8:	460c      	mov	r4, r1
 8013ada:	d507      	bpl.n	8013aec <__smakebuf_r+0x1c>
 8013adc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013ae0:	6023      	str	r3, [r4, #0]
 8013ae2:	6123      	str	r3, [r4, #16]
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	6163      	str	r3, [r4, #20]
 8013ae8:	b002      	add	sp, #8
 8013aea:	bd70      	pop	{r4, r5, r6, pc}
 8013aec:	ab01      	add	r3, sp, #4
 8013aee:	466a      	mov	r2, sp
 8013af0:	f7ff ffca 	bl	8013a88 <__swhatbuf_r>
 8013af4:	9900      	ldr	r1, [sp, #0]
 8013af6:	4605      	mov	r5, r0
 8013af8:	4630      	mov	r0, r6
 8013afa:	f000 fc9f 	bl	801443c <_malloc_r>
 8013afe:	b948      	cbnz	r0, 8013b14 <__smakebuf_r+0x44>
 8013b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b04:	059a      	lsls	r2, r3, #22
 8013b06:	d4ef      	bmi.n	8013ae8 <__smakebuf_r+0x18>
 8013b08:	f023 0303 	bic.w	r3, r3, #3
 8013b0c:	f043 0302 	orr.w	r3, r3, #2
 8013b10:	81a3      	strh	r3, [r4, #12]
 8013b12:	e7e3      	b.n	8013adc <__smakebuf_r+0xc>
 8013b14:	4b0d      	ldr	r3, [pc, #52]	; (8013b4c <__smakebuf_r+0x7c>)
 8013b16:	62b3      	str	r3, [r6, #40]	; 0x28
 8013b18:	89a3      	ldrh	r3, [r4, #12]
 8013b1a:	6020      	str	r0, [r4, #0]
 8013b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b20:	81a3      	strh	r3, [r4, #12]
 8013b22:	9b00      	ldr	r3, [sp, #0]
 8013b24:	6163      	str	r3, [r4, #20]
 8013b26:	9b01      	ldr	r3, [sp, #4]
 8013b28:	6120      	str	r0, [r4, #16]
 8013b2a:	b15b      	cbz	r3, 8013b44 <__smakebuf_r+0x74>
 8013b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b30:	4630      	mov	r0, r6
 8013b32:	f001 f815 	bl	8014b60 <_isatty_r>
 8013b36:	b128      	cbz	r0, 8013b44 <__smakebuf_r+0x74>
 8013b38:	89a3      	ldrh	r3, [r4, #12]
 8013b3a:	f023 0303 	bic.w	r3, r3, #3
 8013b3e:	f043 0301 	orr.w	r3, r3, #1
 8013b42:	81a3      	strh	r3, [r4, #12]
 8013b44:	89a3      	ldrh	r3, [r4, #12]
 8013b46:	431d      	orrs	r5, r3
 8013b48:	81a5      	strh	r5, [r4, #12]
 8013b4a:	e7cd      	b.n	8013ae8 <__smakebuf_r+0x18>
 8013b4c:	080132c9 	.word	0x080132c9

08013b50 <malloc>:
 8013b50:	4b02      	ldr	r3, [pc, #8]	; (8013b5c <malloc+0xc>)
 8013b52:	4601      	mov	r1, r0
 8013b54:	6818      	ldr	r0, [r3, #0]
 8013b56:	f000 bc71 	b.w	801443c <_malloc_r>
 8013b5a:	bf00      	nop
 8013b5c:	20000198 	.word	0x20000198

08013b60 <__ascii_mbtowc>:
 8013b60:	b082      	sub	sp, #8
 8013b62:	b901      	cbnz	r1, 8013b66 <__ascii_mbtowc+0x6>
 8013b64:	a901      	add	r1, sp, #4
 8013b66:	b142      	cbz	r2, 8013b7a <__ascii_mbtowc+0x1a>
 8013b68:	b14b      	cbz	r3, 8013b7e <__ascii_mbtowc+0x1e>
 8013b6a:	7813      	ldrb	r3, [r2, #0]
 8013b6c:	600b      	str	r3, [r1, #0]
 8013b6e:	7812      	ldrb	r2, [r2, #0]
 8013b70:	1c10      	adds	r0, r2, #0
 8013b72:	bf18      	it	ne
 8013b74:	2001      	movne	r0, #1
 8013b76:	b002      	add	sp, #8
 8013b78:	4770      	bx	lr
 8013b7a:	4610      	mov	r0, r2
 8013b7c:	e7fb      	b.n	8013b76 <__ascii_mbtowc+0x16>
 8013b7e:	f06f 0001 	mvn.w	r0, #1
 8013b82:	e7f8      	b.n	8013b76 <__ascii_mbtowc+0x16>

08013b84 <_Balloc>:
 8013b84:	b570      	push	{r4, r5, r6, lr}
 8013b86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013b88:	4604      	mov	r4, r0
 8013b8a:	460e      	mov	r6, r1
 8013b8c:	b93d      	cbnz	r5, 8013b9e <_Balloc+0x1a>
 8013b8e:	2010      	movs	r0, #16
 8013b90:	f7ff ffde 	bl	8013b50 <malloc>
 8013b94:	6260      	str	r0, [r4, #36]	; 0x24
 8013b96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013b9a:	6005      	str	r5, [r0, #0]
 8013b9c:	60c5      	str	r5, [r0, #12]
 8013b9e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013ba0:	68eb      	ldr	r3, [r5, #12]
 8013ba2:	b183      	cbz	r3, 8013bc6 <_Balloc+0x42>
 8013ba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ba6:	68db      	ldr	r3, [r3, #12]
 8013ba8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013bac:	b9b8      	cbnz	r0, 8013bde <_Balloc+0x5a>
 8013bae:	2101      	movs	r1, #1
 8013bb0:	fa01 f506 	lsl.w	r5, r1, r6
 8013bb4:	1d6a      	adds	r2, r5, #5
 8013bb6:	0092      	lsls	r2, r2, #2
 8013bb8:	4620      	mov	r0, r4
 8013bba:	f000 fbe3 	bl	8014384 <_calloc_r>
 8013bbe:	b160      	cbz	r0, 8013bda <_Balloc+0x56>
 8013bc0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013bc4:	e00e      	b.n	8013be4 <_Balloc+0x60>
 8013bc6:	2221      	movs	r2, #33	; 0x21
 8013bc8:	2104      	movs	r1, #4
 8013bca:	4620      	mov	r0, r4
 8013bcc:	f000 fbda 	bl	8014384 <_calloc_r>
 8013bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013bd2:	60e8      	str	r0, [r5, #12]
 8013bd4:	68db      	ldr	r3, [r3, #12]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d1e4      	bne.n	8013ba4 <_Balloc+0x20>
 8013bda:	2000      	movs	r0, #0
 8013bdc:	bd70      	pop	{r4, r5, r6, pc}
 8013bde:	6802      	ldr	r2, [r0, #0]
 8013be0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013be4:	2300      	movs	r3, #0
 8013be6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013bea:	e7f7      	b.n	8013bdc <_Balloc+0x58>

08013bec <_Bfree>:
 8013bec:	b570      	push	{r4, r5, r6, lr}
 8013bee:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013bf0:	4606      	mov	r6, r0
 8013bf2:	460d      	mov	r5, r1
 8013bf4:	b93c      	cbnz	r4, 8013c06 <_Bfree+0x1a>
 8013bf6:	2010      	movs	r0, #16
 8013bf8:	f7ff ffaa 	bl	8013b50 <malloc>
 8013bfc:	6270      	str	r0, [r6, #36]	; 0x24
 8013bfe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c02:	6004      	str	r4, [r0, #0]
 8013c04:	60c4      	str	r4, [r0, #12]
 8013c06:	b13d      	cbz	r5, 8013c18 <_Bfree+0x2c>
 8013c08:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013c0a:	686a      	ldr	r2, [r5, #4]
 8013c0c:	68db      	ldr	r3, [r3, #12]
 8013c0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013c12:	6029      	str	r1, [r5, #0]
 8013c14:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013c18:	bd70      	pop	{r4, r5, r6, pc}

08013c1a <__multadd>:
 8013c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c1e:	690d      	ldr	r5, [r1, #16]
 8013c20:	461f      	mov	r7, r3
 8013c22:	4606      	mov	r6, r0
 8013c24:	460c      	mov	r4, r1
 8013c26:	f101 0c14 	add.w	ip, r1, #20
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	f8dc 0000 	ldr.w	r0, [ip]
 8013c30:	b281      	uxth	r1, r0
 8013c32:	fb02 7101 	mla	r1, r2, r1, r7
 8013c36:	0c0f      	lsrs	r7, r1, #16
 8013c38:	0c00      	lsrs	r0, r0, #16
 8013c3a:	fb02 7000 	mla	r0, r2, r0, r7
 8013c3e:	b289      	uxth	r1, r1
 8013c40:	3301      	adds	r3, #1
 8013c42:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013c46:	429d      	cmp	r5, r3
 8013c48:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013c4c:	f84c 1b04 	str.w	r1, [ip], #4
 8013c50:	dcec      	bgt.n	8013c2c <__multadd+0x12>
 8013c52:	b1d7      	cbz	r7, 8013c8a <__multadd+0x70>
 8013c54:	68a3      	ldr	r3, [r4, #8]
 8013c56:	42ab      	cmp	r3, r5
 8013c58:	dc12      	bgt.n	8013c80 <__multadd+0x66>
 8013c5a:	6861      	ldr	r1, [r4, #4]
 8013c5c:	4630      	mov	r0, r6
 8013c5e:	3101      	adds	r1, #1
 8013c60:	f7ff ff90 	bl	8013b84 <_Balloc>
 8013c64:	6922      	ldr	r2, [r4, #16]
 8013c66:	3202      	adds	r2, #2
 8013c68:	f104 010c 	add.w	r1, r4, #12
 8013c6c:	4680      	mov	r8, r0
 8013c6e:	0092      	lsls	r2, r2, #2
 8013c70:	300c      	adds	r0, #12
 8013c72:	f7fc fe75 	bl	8010960 <memcpy>
 8013c76:	4621      	mov	r1, r4
 8013c78:	4630      	mov	r0, r6
 8013c7a:	f7ff ffb7 	bl	8013bec <_Bfree>
 8013c7e:	4644      	mov	r4, r8
 8013c80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013c84:	3501      	adds	r5, #1
 8013c86:	615f      	str	r7, [r3, #20]
 8013c88:	6125      	str	r5, [r4, #16]
 8013c8a:	4620      	mov	r0, r4
 8013c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c90 <__s2b>:
 8013c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c94:	460c      	mov	r4, r1
 8013c96:	4615      	mov	r5, r2
 8013c98:	461f      	mov	r7, r3
 8013c9a:	2209      	movs	r2, #9
 8013c9c:	3308      	adds	r3, #8
 8013c9e:	4606      	mov	r6, r0
 8013ca0:	fb93 f3f2 	sdiv	r3, r3, r2
 8013ca4:	2100      	movs	r1, #0
 8013ca6:	2201      	movs	r2, #1
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	db20      	blt.n	8013cee <__s2b+0x5e>
 8013cac:	4630      	mov	r0, r6
 8013cae:	f7ff ff69 	bl	8013b84 <_Balloc>
 8013cb2:	9b08      	ldr	r3, [sp, #32]
 8013cb4:	6143      	str	r3, [r0, #20]
 8013cb6:	2d09      	cmp	r5, #9
 8013cb8:	f04f 0301 	mov.w	r3, #1
 8013cbc:	6103      	str	r3, [r0, #16]
 8013cbe:	dd19      	ble.n	8013cf4 <__s2b+0x64>
 8013cc0:	f104 0809 	add.w	r8, r4, #9
 8013cc4:	46c1      	mov	r9, r8
 8013cc6:	442c      	add	r4, r5
 8013cc8:	f819 3b01 	ldrb.w	r3, [r9], #1
 8013ccc:	4601      	mov	r1, r0
 8013cce:	3b30      	subs	r3, #48	; 0x30
 8013cd0:	220a      	movs	r2, #10
 8013cd2:	4630      	mov	r0, r6
 8013cd4:	f7ff ffa1 	bl	8013c1a <__multadd>
 8013cd8:	45a1      	cmp	r9, r4
 8013cda:	d1f5      	bne.n	8013cc8 <__s2b+0x38>
 8013cdc:	eb08 0405 	add.w	r4, r8, r5
 8013ce0:	3c08      	subs	r4, #8
 8013ce2:	1b2d      	subs	r5, r5, r4
 8013ce4:	1963      	adds	r3, r4, r5
 8013ce6:	42bb      	cmp	r3, r7
 8013ce8:	db07      	blt.n	8013cfa <__s2b+0x6a>
 8013cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cee:	0052      	lsls	r2, r2, #1
 8013cf0:	3101      	adds	r1, #1
 8013cf2:	e7d9      	b.n	8013ca8 <__s2b+0x18>
 8013cf4:	340a      	adds	r4, #10
 8013cf6:	2509      	movs	r5, #9
 8013cf8:	e7f3      	b.n	8013ce2 <__s2b+0x52>
 8013cfa:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013cfe:	4601      	mov	r1, r0
 8013d00:	3b30      	subs	r3, #48	; 0x30
 8013d02:	220a      	movs	r2, #10
 8013d04:	4630      	mov	r0, r6
 8013d06:	f7ff ff88 	bl	8013c1a <__multadd>
 8013d0a:	e7eb      	b.n	8013ce4 <__s2b+0x54>

08013d0c <__hi0bits>:
 8013d0c:	0c02      	lsrs	r2, r0, #16
 8013d0e:	0412      	lsls	r2, r2, #16
 8013d10:	4603      	mov	r3, r0
 8013d12:	b9b2      	cbnz	r2, 8013d42 <__hi0bits+0x36>
 8013d14:	0403      	lsls	r3, r0, #16
 8013d16:	2010      	movs	r0, #16
 8013d18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013d1c:	bf04      	itt	eq
 8013d1e:	021b      	lsleq	r3, r3, #8
 8013d20:	3008      	addeq	r0, #8
 8013d22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013d26:	bf04      	itt	eq
 8013d28:	011b      	lsleq	r3, r3, #4
 8013d2a:	3004      	addeq	r0, #4
 8013d2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013d30:	bf04      	itt	eq
 8013d32:	009b      	lsleq	r3, r3, #2
 8013d34:	3002      	addeq	r0, #2
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	db06      	blt.n	8013d48 <__hi0bits+0x3c>
 8013d3a:	005b      	lsls	r3, r3, #1
 8013d3c:	d503      	bpl.n	8013d46 <__hi0bits+0x3a>
 8013d3e:	3001      	adds	r0, #1
 8013d40:	4770      	bx	lr
 8013d42:	2000      	movs	r0, #0
 8013d44:	e7e8      	b.n	8013d18 <__hi0bits+0xc>
 8013d46:	2020      	movs	r0, #32
 8013d48:	4770      	bx	lr

08013d4a <__lo0bits>:
 8013d4a:	6803      	ldr	r3, [r0, #0]
 8013d4c:	f013 0207 	ands.w	r2, r3, #7
 8013d50:	4601      	mov	r1, r0
 8013d52:	d00b      	beq.n	8013d6c <__lo0bits+0x22>
 8013d54:	07da      	lsls	r2, r3, #31
 8013d56:	d423      	bmi.n	8013da0 <__lo0bits+0x56>
 8013d58:	0798      	lsls	r0, r3, #30
 8013d5a:	bf49      	itett	mi
 8013d5c:	085b      	lsrmi	r3, r3, #1
 8013d5e:	089b      	lsrpl	r3, r3, #2
 8013d60:	2001      	movmi	r0, #1
 8013d62:	600b      	strmi	r3, [r1, #0]
 8013d64:	bf5c      	itt	pl
 8013d66:	600b      	strpl	r3, [r1, #0]
 8013d68:	2002      	movpl	r0, #2
 8013d6a:	4770      	bx	lr
 8013d6c:	b298      	uxth	r0, r3
 8013d6e:	b9a8      	cbnz	r0, 8013d9c <__lo0bits+0x52>
 8013d70:	0c1b      	lsrs	r3, r3, #16
 8013d72:	2010      	movs	r0, #16
 8013d74:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013d78:	bf04      	itt	eq
 8013d7a:	0a1b      	lsreq	r3, r3, #8
 8013d7c:	3008      	addeq	r0, #8
 8013d7e:	071a      	lsls	r2, r3, #28
 8013d80:	bf04      	itt	eq
 8013d82:	091b      	lsreq	r3, r3, #4
 8013d84:	3004      	addeq	r0, #4
 8013d86:	079a      	lsls	r2, r3, #30
 8013d88:	bf04      	itt	eq
 8013d8a:	089b      	lsreq	r3, r3, #2
 8013d8c:	3002      	addeq	r0, #2
 8013d8e:	07da      	lsls	r2, r3, #31
 8013d90:	d402      	bmi.n	8013d98 <__lo0bits+0x4e>
 8013d92:	085b      	lsrs	r3, r3, #1
 8013d94:	d006      	beq.n	8013da4 <__lo0bits+0x5a>
 8013d96:	3001      	adds	r0, #1
 8013d98:	600b      	str	r3, [r1, #0]
 8013d9a:	4770      	bx	lr
 8013d9c:	4610      	mov	r0, r2
 8013d9e:	e7e9      	b.n	8013d74 <__lo0bits+0x2a>
 8013da0:	2000      	movs	r0, #0
 8013da2:	4770      	bx	lr
 8013da4:	2020      	movs	r0, #32
 8013da6:	4770      	bx	lr

08013da8 <__i2b>:
 8013da8:	b510      	push	{r4, lr}
 8013daa:	460c      	mov	r4, r1
 8013dac:	2101      	movs	r1, #1
 8013dae:	f7ff fee9 	bl	8013b84 <_Balloc>
 8013db2:	2201      	movs	r2, #1
 8013db4:	6144      	str	r4, [r0, #20]
 8013db6:	6102      	str	r2, [r0, #16]
 8013db8:	bd10      	pop	{r4, pc}

08013dba <__multiply>:
 8013dba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dbe:	4614      	mov	r4, r2
 8013dc0:	690a      	ldr	r2, [r1, #16]
 8013dc2:	6923      	ldr	r3, [r4, #16]
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	bfb8      	it	lt
 8013dc8:	460b      	movlt	r3, r1
 8013dca:	4688      	mov	r8, r1
 8013dcc:	bfbc      	itt	lt
 8013dce:	46a0      	movlt	r8, r4
 8013dd0:	461c      	movlt	r4, r3
 8013dd2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013dd6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013dda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013dde:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013de2:	eb07 0609 	add.w	r6, r7, r9
 8013de6:	42b3      	cmp	r3, r6
 8013de8:	bfb8      	it	lt
 8013dea:	3101      	addlt	r1, #1
 8013dec:	f7ff feca 	bl	8013b84 <_Balloc>
 8013df0:	f100 0514 	add.w	r5, r0, #20
 8013df4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013df8:	462b      	mov	r3, r5
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	4573      	cmp	r3, lr
 8013dfe:	d316      	bcc.n	8013e2e <__multiply+0x74>
 8013e00:	f104 0214 	add.w	r2, r4, #20
 8013e04:	f108 0114 	add.w	r1, r8, #20
 8013e08:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013e0c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013e10:	9300      	str	r3, [sp, #0]
 8013e12:	9b00      	ldr	r3, [sp, #0]
 8013e14:	9201      	str	r2, [sp, #4]
 8013e16:	4293      	cmp	r3, r2
 8013e18:	d80c      	bhi.n	8013e34 <__multiply+0x7a>
 8013e1a:	2e00      	cmp	r6, #0
 8013e1c:	dd03      	ble.n	8013e26 <__multiply+0x6c>
 8013e1e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d05d      	beq.n	8013ee2 <__multiply+0x128>
 8013e26:	6106      	str	r6, [r0, #16]
 8013e28:	b003      	add	sp, #12
 8013e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e2e:	f843 2b04 	str.w	r2, [r3], #4
 8013e32:	e7e3      	b.n	8013dfc <__multiply+0x42>
 8013e34:	f8b2 b000 	ldrh.w	fp, [r2]
 8013e38:	f1bb 0f00 	cmp.w	fp, #0
 8013e3c:	d023      	beq.n	8013e86 <__multiply+0xcc>
 8013e3e:	4689      	mov	r9, r1
 8013e40:	46ac      	mov	ip, r5
 8013e42:	f04f 0800 	mov.w	r8, #0
 8013e46:	f859 4b04 	ldr.w	r4, [r9], #4
 8013e4a:	f8dc a000 	ldr.w	sl, [ip]
 8013e4e:	b2a3      	uxth	r3, r4
 8013e50:	fa1f fa8a 	uxth.w	sl, sl
 8013e54:	fb0b a303 	mla	r3, fp, r3, sl
 8013e58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013e5c:	f8dc 4000 	ldr.w	r4, [ip]
 8013e60:	4443      	add	r3, r8
 8013e62:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013e66:	fb0b 840a 	mla	r4, fp, sl, r8
 8013e6a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013e6e:	46e2      	mov	sl, ip
 8013e70:	b29b      	uxth	r3, r3
 8013e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013e76:	454f      	cmp	r7, r9
 8013e78:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013e7c:	f84a 3b04 	str.w	r3, [sl], #4
 8013e80:	d82b      	bhi.n	8013eda <__multiply+0x120>
 8013e82:	f8cc 8004 	str.w	r8, [ip, #4]
 8013e86:	9b01      	ldr	r3, [sp, #4]
 8013e88:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013e8c:	3204      	adds	r2, #4
 8013e8e:	f1ba 0f00 	cmp.w	sl, #0
 8013e92:	d020      	beq.n	8013ed6 <__multiply+0x11c>
 8013e94:	682b      	ldr	r3, [r5, #0]
 8013e96:	4689      	mov	r9, r1
 8013e98:	46a8      	mov	r8, r5
 8013e9a:	f04f 0b00 	mov.w	fp, #0
 8013e9e:	f8b9 c000 	ldrh.w	ip, [r9]
 8013ea2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013ea6:	fb0a 440c 	mla	r4, sl, ip, r4
 8013eaa:	445c      	add	r4, fp
 8013eac:	46c4      	mov	ip, r8
 8013eae:	b29b      	uxth	r3, r3
 8013eb0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013eb4:	f84c 3b04 	str.w	r3, [ip], #4
 8013eb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8013ebc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013ec0:	0c1b      	lsrs	r3, r3, #16
 8013ec2:	fb0a b303 	mla	r3, sl, r3, fp
 8013ec6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013eca:	454f      	cmp	r7, r9
 8013ecc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013ed0:	d805      	bhi.n	8013ede <__multiply+0x124>
 8013ed2:	f8c8 3004 	str.w	r3, [r8, #4]
 8013ed6:	3504      	adds	r5, #4
 8013ed8:	e79b      	b.n	8013e12 <__multiply+0x58>
 8013eda:	46d4      	mov	ip, sl
 8013edc:	e7b3      	b.n	8013e46 <__multiply+0x8c>
 8013ede:	46e0      	mov	r8, ip
 8013ee0:	e7dd      	b.n	8013e9e <__multiply+0xe4>
 8013ee2:	3e01      	subs	r6, #1
 8013ee4:	e799      	b.n	8013e1a <__multiply+0x60>
	...

08013ee8 <__pow5mult>:
 8013ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013eec:	4615      	mov	r5, r2
 8013eee:	f012 0203 	ands.w	r2, r2, #3
 8013ef2:	4606      	mov	r6, r0
 8013ef4:	460f      	mov	r7, r1
 8013ef6:	d007      	beq.n	8013f08 <__pow5mult+0x20>
 8013ef8:	3a01      	subs	r2, #1
 8013efa:	4c21      	ldr	r4, [pc, #132]	; (8013f80 <__pow5mult+0x98>)
 8013efc:	2300      	movs	r3, #0
 8013efe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013f02:	f7ff fe8a 	bl	8013c1a <__multadd>
 8013f06:	4607      	mov	r7, r0
 8013f08:	10ad      	asrs	r5, r5, #2
 8013f0a:	d035      	beq.n	8013f78 <__pow5mult+0x90>
 8013f0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013f0e:	b93c      	cbnz	r4, 8013f20 <__pow5mult+0x38>
 8013f10:	2010      	movs	r0, #16
 8013f12:	f7ff fe1d 	bl	8013b50 <malloc>
 8013f16:	6270      	str	r0, [r6, #36]	; 0x24
 8013f18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013f1c:	6004      	str	r4, [r0, #0]
 8013f1e:	60c4      	str	r4, [r0, #12]
 8013f20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013f24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013f28:	b94c      	cbnz	r4, 8013f3e <__pow5mult+0x56>
 8013f2a:	f240 2171 	movw	r1, #625	; 0x271
 8013f2e:	4630      	mov	r0, r6
 8013f30:	f7ff ff3a 	bl	8013da8 <__i2b>
 8013f34:	2300      	movs	r3, #0
 8013f36:	f8c8 0008 	str.w	r0, [r8, #8]
 8013f3a:	4604      	mov	r4, r0
 8013f3c:	6003      	str	r3, [r0, #0]
 8013f3e:	f04f 0800 	mov.w	r8, #0
 8013f42:	07eb      	lsls	r3, r5, #31
 8013f44:	d50a      	bpl.n	8013f5c <__pow5mult+0x74>
 8013f46:	4639      	mov	r1, r7
 8013f48:	4622      	mov	r2, r4
 8013f4a:	4630      	mov	r0, r6
 8013f4c:	f7ff ff35 	bl	8013dba <__multiply>
 8013f50:	4639      	mov	r1, r7
 8013f52:	4681      	mov	r9, r0
 8013f54:	4630      	mov	r0, r6
 8013f56:	f7ff fe49 	bl	8013bec <_Bfree>
 8013f5a:	464f      	mov	r7, r9
 8013f5c:	106d      	asrs	r5, r5, #1
 8013f5e:	d00b      	beq.n	8013f78 <__pow5mult+0x90>
 8013f60:	6820      	ldr	r0, [r4, #0]
 8013f62:	b938      	cbnz	r0, 8013f74 <__pow5mult+0x8c>
 8013f64:	4622      	mov	r2, r4
 8013f66:	4621      	mov	r1, r4
 8013f68:	4630      	mov	r0, r6
 8013f6a:	f7ff ff26 	bl	8013dba <__multiply>
 8013f6e:	6020      	str	r0, [r4, #0]
 8013f70:	f8c0 8000 	str.w	r8, [r0]
 8013f74:	4604      	mov	r4, r0
 8013f76:	e7e4      	b.n	8013f42 <__pow5mult+0x5a>
 8013f78:	4638      	mov	r0, r7
 8013f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f7e:	bf00      	nop
 8013f80:	08015b40 	.word	0x08015b40

08013f84 <__lshift>:
 8013f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f88:	460c      	mov	r4, r1
 8013f8a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013f8e:	6923      	ldr	r3, [r4, #16]
 8013f90:	6849      	ldr	r1, [r1, #4]
 8013f92:	eb0a 0903 	add.w	r9, sl, r3
 8013f96:	68a3      	ldr	r3, [r4, #8]
 8013f98:	4607      	mov	r7, r0
 8013f9a:	4616      	mov	r6, r2
 8013f9c:	f109 0501 	add.w	r5, r9, #1
 8013fa0:	42ab      	cmp	r3, r5
 8013fa2:	db32      	blt.n	801400a <__lshift+0x86>
 8013fa4:	4638      	mov	r0, r7
 8013fa6:	f7ff fded 	bl	8013b84 <_Balloc>
 8013faa:	2300      	movs	r3, #0
 8013fac:	4680      	mov	r8, r0
 8013fae:	f100 0114 	add.w	r1, r0, #20
 8013fb2:	461a      	mov	r2, r3
 8013fb4:	4553      	cmp	r3, sl
 8013fb6:	db2b      	blt.n	8014010 <__lshift+0x8c>
 8013fb8:	6920      	ldr	r0, [r4, #16]
 8013fba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013fbe:	f104 0314 	add.w	r3, r4, #20
 8013fc2:	f016 021f 	ands.w	r2, r6, #31
 8013fc6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013fca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013fce:	d025      	beq.n	801401c <__lshift+0x98>
 8013fd0:	f1c2 0e20 	rsb	lr, r2, #32
 8013fd4:	2000      	movs	r0, #0
 8013fd6:	681e      	ldr	r6, [r3, #0]
 8013fd8:	468a      	mov	sl, r1
 8013fda:	4096      	lsls	r6, r2
 8013fdc:	4330      	orrs	r0, r6
 8013fde:	f84a 0b04 	str.w	r0, [sl], #4
 8013fe2:	f853 0b04 	ldr.w	r0, [r3], #4
 8013fe6:	459c      	cmp	ip, r3
 8013fe8:	fa20 f00e 	lsr.w	r0, r0, lr
 8013fec:	d814      	bhi.n	8014018 <__lshift+0x94>
 8013fee:	6048      	str	r0, [r1, #4]
 8013ff0:	b108      	cbz	r0, 8013ff6 <__lshift+0x72>
 8013ff2:	f109 0502 	add.w	r5, r9, #2
 8013ff6:	3d01      	subs	r5, #1
 8013ff8:	4638      	mov	r0, r7
 8013ffa:	f8c8 5010 	str.w	r5, [r8, #16]
 8013ffe:	4621      	mov	r1, r4
 8014000:	f7ff fdf4 	bl	8013bec <_Bfree>
 8014004:	4640      	mov	r0, r8
 8014006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801400a:	3101      	adds	r1, #1
 801400c:	005b      	lsls	r3, r3, #1
 801400e:	e7c7      	b.n	8013fa0 <__lshift+0x1c>
 8014010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014014:	3301      	adds	r3, #1
 8014016:	e7cd      	b.n	8013fb4 <__lshift+0x30>
 8014018:	4651      	mov	r1, sl
 801401a:	e7dc      	b.n	8013fd6 <__lshift+0x52>
 801401c:	3904      	subs	r1, #4
 801401e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014022:	f841 2f04 	str.w	r2, [r1, #4]!
 8014026:	459c      	cmp	ip, r3
 8014028:	d8f9      	bhi.n	801401e <__lshift+0x9a>
 801402a:	e7e4      	b.n	8013ff6 <__lshift+0x72>

0801402c <__mcmp>:
 801402c:	6903      	ldr	r3, [r0, #16]
 801402e:	690a      	ldr	r2, [r1, #16]
 8014030:	1a9b      	subs	r3, r3, r2
 8014032:	b530      	push	{r4, r5, lr}
 8014034:	d10c      	bne.n	8014050 <__mcmp+0x24>
 8014036:	0092      	lsls	r2, r2, #2
 8014038:	3014      	adds	r0, #20
 801403a:	3114      	adds	r1, #20
 801403c:	1884      	adds	r4, r0, r2
 801403e:	4411      	add	r1, r2
 8014040:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014044:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014048:	4295      	cmp	r5, r2
 801404a:	d003      	beq.n	8014054 <__mcmp+0x28>
 801404c:	d305      	bcc.n	801405a <__mcmp+0x2e>
 801404e:	2301      	movs	r3, #1
 8014050:	4618      	mov	r0, r3
 8014052:	bd30      	pop	{r4, r5, pc}
 8014054:	42a0      	cmp	r0, r4
 8014056:	d3f3      	bcc.n	8014040 <__mcmp+0x14>
 8014058:	e7fa      	b.n	8014050 <__mcmp+0x24>
 801405a:	f04f 33ff 	mov.w	r3, #4294967295
 801405e:	e7f7      	b.n	8014050 <__mcmp+0x24>

08014060 <__mdiff>:
 8014060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014064:	460d      	mov	r5, r1
 8014066:	4607      	mov	r7, r0
 8014068:	4611      	mov	r1, r2
 801406a:	4628      	mov	r0, r5
 801406c:	4614      	mov	r4, r2
 801406e:	f7ff ffdd 	bl	801402c <__mcmp>
 8014072:	1e06      	subs	r6, r0, #0
 8014074:	d108      	bne.n	8014088 <__mdiff+0x28>
 8014076:	4631      	mov	r1, r6
 8014078:	4638      	mov	r0, r7
 801407a:	f7ff fd83 	bl	8013b84 <_Balloc>
 801407e:	2301      	movs	r3, #1
 8014080:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014088:	bfa4      	itt	ge
 801408a:	4623      	movge	r3, r4
 801408c:	462c      	movge	r4, r5
 801408e:	4638      	mov	r0, r7
 8014090:	6861      	ldr	r1, [r4, #4]
 8014092:	bfa6      	itte	ge
 8014094:	461d      	movge	r5, r3
 8014096:	2600      	movge	r6, #0
 8014098:	2601      	movlt	r6, #1
 801409a:	f7ff fd73 	bl	8013b84 <_Balloc>
 801409e:	692b      	ldr	r3, [r5, #16]
 80140a0:	60c6      	str	r6, [r0, #12]
 80140a2:	6926      	ldr	r6, [r4, #16]
 80140a4:	f105 0914 	add.w	r9, r5, #20
 80140a8:	f104 0214 	add.w	r2, r4, #20
 80140ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80140b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80140b4:	f100 0514 	add.w	r5, r0, #20
 80140b8:	f04f 0e00 	mov.w	lr, #0
 80140bc:	f852 ab04 	ldr.w	sl, [r2], #4
 80140c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80140c4:	fa1e f18a 	uxtah	r1, lr, sl
 80140c8:	b2a3      	uxth	r3, r4
 80140ca:	1ac9      	subs	r1, r1, r3
 80140cc:	0c23      	lsrs	r3, r4, #16
 80140ce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80140d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80140d6:	b289      	uxth	r1, r1
 80140d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80140dc:	45c8      	cmp	r8, r9
 80140de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80140e2:	4694      	mov	ip, r2
 80140e4:	f845 3b04 	str.w	r3, [r5], #4
 80140e8:	d8e8      	bhi.n	80140bc <__mdiff+0x5c>
 80140ea:	45bc      	cmp	ip, r7
 80140ec:	d304      	bcc.n	80140f8 <__mdiff+0x98>
 80140ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80140f2:	b183      	cbz	r3, 8014116 <__mdiff+0xb6>
 80140f4:	6106      	str	r6, [r0, #16]
 80140f6:	e7c5      	b.n	8014084 <__mdiff+0x24>
 80140f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80140fc:	fa1e f381 	uxtah	r3, lr, r1
 8014100:	141a      	asrs	r2, r3, #16
 8014102:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014106:	b29b      	uxth	r3, r3
 8014108:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801410c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014110:	f845 3b04 	str.w	r3, [r5], #4
 8014114:	e7e9      	b.n	80140ea <__mdiff+0x8a>
 8014116:	3e01      	subs	r6, #1
 8014118:	e7e9      	b.n	80140ee <__mdiff+0x8e>
	...

0801411c <__ulp>:
 801411c:	4b12      	ldr	r3, [pc, #72]	; (8014168 <__ulp+0x4c>)
 801411e:	ee10 2a90 	vmov	r2, s1
 8014122:	401a      	ands	r2, r3
 8014124:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8014128:	2b00      	cmp	r3, #0
 801412a:	dd04      	ble.n	8014136 <__ulp+0x1a>
 801412c:	2000      	movs	r0, #0
 801412e:	4619      	mov	r1, r3
 8014130:	ec41 0b10 	vmov	d0, r0, r1
 8014134:	4770      	bx	lr
 8014136:	425b      	negs	r3, r3
 8014138:	151b      	asrs	r3, r3, #20
 801413a:	2b13      	cmp	r3, #19
 801413c:	f04f 0000 	mov.w	r0, #0
 8014140:	f04f 0100 	mov.w	r1, #0
 8014144:	dc04      	bgt.n	8014150 <__ulp+0x34>
 8014146:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801414a:	fa42 f103 	asr.w	r1, r2, r3
 801414e:	e7ef      	b.n	8014130 <__ulp+0x14>
 8014150:	3b14      	subs	r3, #20
 8014152:	2b1e      	cmp	r3, #30
 8014154:	f04f 0201 	mov.w	r2, #1
 8014158:	bfda      	itte	le
 801415a:	f1c3 031f 	rsble	r3, r3, #31
 801415e:	fa02 f303 	lslle.w	r3, r2, r3
 8014162:	4613      	movgt	r3, r2
 8014164:	4618      	mov	r0, r3
 8014166:	e7e3      	b.n	8014130 <__ulp+0x14>
 8014168:	7ff00000 	.word	0x7ff00000

0801416c <__b2d>:
 801416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801416e:	6905      	ldr	r5, [r0, #16]
 8014170:	f100 0714 	add.w	r7, r0, #20
 8014174:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014178:	1f2e      	subs	r6, r5, #4
 801417a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801417e:	4620      	mov	r0, r4
 8014180:	f7ff fdc4 	bl	8013d0c <__hi0bits>
 8014184:	f1c0 0320 	rsb	r3, r0, #32
 8014188:	280a      	cmp	r0, #10
 801418a:	600b      	str	r3, [r1, #0]
 801418c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8014204 <__b2d+0x98>
 8014190:	dc14      	bgt.n	80141bc <__b2d+0x50>
 8014192:	f1c0 0e0b 	rsb	lr, r0, #11
 8014196:	fa24 f10e 	lsr.w	r1, r4, lr
 801419a:	42b7      	cmp	r7, r6
 801419c:	ea41 030c 	orr.w	r3, r1, ip
 80141a0:	bf34      	ite	cc
 80141a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80141a6:	2100      	movcs	r1, #0
 80141a8:	3015      	adds	r0, #21
 80141aa:	fa04 f000 	lsl.w	r0, r4, r0
 80141ae:	fa21 f10e 	lsr.w	r1, r1, lr
 80141b2:	ea40 0201 	orr.w	r2, r0, r1
 80141b6:	ec43 2b10 	vmov	d0, r2, r3
 80141ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141bc:	42b7      	cmp	r7, r6
 80141be:	bf3a      	itte	cc
 80141c0:	f1a5 0608 	subcc.w	r6, r5, #8
 80141c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80141c8:	2100      	movcs	r1, #0
 80141ca:	380b      	subs	r0, #11
 80141cc:	d015      	beq.n	80141fa <__b2d+0x8e>
 80141ce:	4084      	lsls	r4, r0
 80141d0:	f1c0 0520 	rsb	r5, r0, #32
 80141d4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80141d8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80141dc:	42be      	cmp	r6, r7
 80141de:	fa21 fc05 	lsr.w	ip, r1, r5
 80141e2:	ea44 030c 	orr.w	r3, r4, ip
 80141e6:	bf8c      	ite	hi
 80141e8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80141ec:	2400      	movls	r4, #0
 80141ee:	fa01 f000 	lsl.w	r0, r1, r0
 80141f2:	40ec      	lsrs	r4, r5
 80141f4:	ea40 0204 	orr.w	r2, r0, r4
 80141f8:	e7dd      	b.n	80141b6 <__b2d+0x4a>
 80141fa:	ea44 030c 	orr.w	r3, r4, ip
 80141fe:	460a      	mov	r2, r1
 8014200:	e7d9      	b.n	80141b6 <__b2d+0x4a>
 8014202:	bf00      	nop
 8014204:	3ff00000 	.word	0x3ff00000

08014208 <__d2b>:
 8014208:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801420c:	460e      	mov	r6, r1
 801420e:	2101      	movs	r1, #1
 8014210:	ec59 8b10 	vmov	r8, r9, d0
 8014214:	4615      	mov	r5, r2
 8014216:	f7ff fcb5 	bl	8013b84 <_Balloc>
 801421a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801421e:	4607      	mov	r7, r0
 8014220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014224:	bb34      	cbnz	r4, 8014274 <__d2b+0x6c>
 8014226:	9301      	str	r3, [sp, #4]
 8014228:	f1b8 0300 	subs.w	r3, r8, #0
 801422c:	d027      	beq.n	801427e <__d2b+0x76>
 801422e:	a802      	add	r0, sp, #8
 8014230:	f840 3d08 	str.w	r3, [r0, #-8]!
 8014234:	f7ff fd89 	bl	8013d4a <__lo0bits>
 8014238:	9900      	ldr	r1, [sp, #0]
 801423a:	b1f0      	cbz	r0, 801427a <__d2b+0x72>
 801423c:	9a01      	ldr	r2, [sp, #4]
 801423e:	f1c0 0320 	rsb	r3, r0, #32
 8014242:	fa02 f303 	lsl.w	r3, r2, r3
 8014246:	430b      	orrs	r3, r1
 8014248:	40c2      	lsrs	r2, r0
 801424a:	617b      	str	r3, [r7, #20]
 801424c:	9201      	str	r2, [sp, #4]
 801424e:	9b01      	ldr	r3, [sp, #4]
 8014250:	61bb      	str	r3, [r7, #24]
 8014252:	2b00      	cmp	r3, #0
 8014254:	bf14      	ite	ne
 8014256:	2102      	movne	r1, #2
 8014258:	2101      	moveq	r1, #1
 801425a:	6139      	str	r1, [r7, #16]
 801425c:	b1c4      	cbz	r4, 8014290 <__d2b+0x88>
 801425e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014262:	4404      	add	r4, r0
 8014264:	6034      	str	r4, [r6, #0]
 8014266:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801426a:	6028      	str	r0, [r5, #0]
 801426c:	4638      	mov	r0, r7
 801426e:	b003      	add	sp, #12
 8014270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014278:	e7d5      	b.n	8014226 <__d2b+0x1e>
 801427a:	6179      	str	r1, [r7, #20]
 801427c:	e7e7      	b.n	801424e <__d2b+0x46>
 801427e:	a801      	add	r0, sp, #4
 8014280:	f7ff fd63 	bl	8013d4a <__lo0bits>
 8014284:	9b01      	ldr	r3, [sp, #4]
 8014286:	617b      	str	r3, [r7, #20]
 8014288:	2101      	movs	r1, #1
 801428a:	6139      	str	r1, [r7, #16]
 801428c:	3020      	adds	r0, #32
 801428e:	e7e5      	b.n	801425c <__d2b+0x54>
 8014290:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014294:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014298:	6030      	str	r0, [r6, #0]
 801429a:	6918      	ldr	r0, [r3, #16]
 801429c:	f7ff fd36 	bl	8013d0c <__hi0bits>
 80142a0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80142a4:	e7e1      	b.n	801426a <__d2b+0x62>

080142a6 <__ratio>:
 80142a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142aa:	4688      	mov	r8, r1
 80142ac:	4669      	mov	r1, sp
 80142ae:	4681      	mov	r9, r0
 80142b0:	f7ff ff5c 	bl	801416c <__b2d>
 80142b4:	a901      	add	r1, sp, #4
 80142b6:	4640      	mov	r0, r8
 80142b8:	ec57 6b10 	vmov	r6, r7, d0
 80142bc:	ee10 4a10 	vmov	r4, s0
 80142c0:	f7ff ff54 	bl	801416c <__b2d>
 80142c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80142c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80142cc:	eba3 0c02 	sub.w	ip, r3, r2
 80142d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80142d4:	1a9b      	subs	r3, r3, r2
 80142d6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80142da:	ec51 0b10 	vmov	r0, r1, d0
 80142de:	2b00      	cmp	r3, #0
 80142e0:	ee10 aa10 	vmov	sl, s0
 80142e4:	bfce      	itee	gt
 80142e6:	463a      	movgt	r2, r7
 80142e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80142ec:	460a      	movle	r2, r1
 80142ee:	463d      	mov	r5, r7
 80142f0:	468b      	mov	fp, r1
 80142f2:	bfcc      	ite	gt
 80142f4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80142f8:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80142fc:	ec45 4b17 	vmov	d7, r4, r5
 8014300:	ec4b ab16 	vmov	d6, sl, fp
 8014304:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8014308:	b003      	add	sp, #12
 801430a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801430e <__copybits>:
 801430e:	3901      	subs	r1, #1
 8014310:	b510      	push	{r4, lr}
 8014312:	1149      	asrs	r1, r1, #5
 8014314:	6914      	ldr	r4, [r2, #16]
 8014316:	3101      	adds	r1, #1
 8014318:	f102 0314 	add.w	r3, r2, #20
 801431c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014320:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014324:	42a3      	cmp	r3, r4
 8014326:	4602      	mov	r2, r0
 8014328:	d303      	bcc.n	8014332 <__copybits+0x24>
 801432a:	2300      	movs	r3, #0
 801432c:	428a      	cmp	r2, r1
 801432e:	d305      	bcc.n	801433c <__copybits+0x2e>
 8014330:	bd10      	pop	{r4, pc}
 8014332:	f853 2b04 	ldr.w	r2, [r3], #4
 8014336:	f840 2b04 	str.w	r2, [r0], #4
 801433a:	e7f3      	b.n	8014324 <__copybits+0x16>
 801433c:	f842 3b04 	str.w	r3, [r2], #4
 8014340:	e7f4      	b.n	801432c <__copybits+0x1e>

08014342 <__any_on>:
 8014342:	f100 0214 	add.w	r2, r0, #20
 8014346:	6900      	ldr	r0, [r0, #16]
 8014348:	114b      	asrs	r3, r1, #5
 801434a:	4298      	cmp	r0, r3
 801434c:	b510      	push	{r4, lr}
 801434e:	db11      	blt.n	8014374 <__any_on+0x32>
 8014350:	dd0a      	ble.n	8014368 <__any_on+0x26>
 8014352:	f011 011f 	ands.w	r1, r1, #31
 8014356:	d007      	beq.n	8014368 <__any_on+0x26>
 8014358:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801435c:	fa24 f001 	lsr.w	r0, r4, r1
 8014360:	fa00 f101 	lsl.w	r1, r0, r1
 8014364:	428c      	cmp	r4, r1
 8014366:	d10b      	bne.n	8014380 <__any_on+0x3e>
 8014368:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801436c:	4293      	cmp	r3, r2
 801436e:	d803      	bhi.n	8014378 <__any_on+0x36>
 8014370:	2000      	movs	r0, #0
 8014372:	bd10      	pop	{r4, pc}
 8014374:	4603      	mov	r3, r0
 8014376:	e7f7      	b.n	8014368 <__any_on+0x26>
 8014378:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801437c:	2900      	cmp	r1, #0
 801437e:	d0f5      	beq.n	801436c <__any_on+0x2a>
 8014380:	2001      	movs	r0, #1
 8014382:	e7f6      	b.n	8014372 <__any_on+0x30>

08014384 <_calloc_r>:
 8014384:	b538      	push	{r3, r4, r5, lr}
 8014386:	fb02 f401 	mul.w	r4, r2, r1
 801438a:	4621      	mov	r1, r4
 801438c:	f000 f856 	bl	801443c <_malloc_r>
 8014390:	4605      	mov	r5, r0
 8014392:	b118      	cbz	r0, 801439c <_calloc_r+0x18>
 8014394:	4622      	mov	r2, r4
 8014396:	2100      	movs	r1, #0
 8014398:	f7fc faed 	bl	8010976 <memset>
 801439c:	4628      	mov	r0, r5
 801439e:	bd38      	pop	{r3, r4, r5, pc}

080143a0 <_free_r>:
 80143a0:	b538      	push	{r3, r4, r5, lr}
 80143a2:	4605      	mov	r5, r0
 80143a4:	2900      	cmp	r1, #0
 80143a6:	d045      	beq.n	8014434 <_free_r+0x94>
 80143a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143ac:	1f0c      	subs	r4, r1, #4
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	bfb8      	it	lt
 80143b2:	18e4      	addlt	r4, r4, r3
 80143b4:	f000 fc0f 	bl	8014bd6 <__malloc_lock>
 80143b8:	4a1f      	ldr	r2, [pc, #124]	; (8014438 <_free_r+0x98>)
 80143ba:	6813      	ldr	r3, [r2, #0]
 80143bc:	4610      	mov	r0, r2
 80143be:	b933      	cbnz	r3, 80143ce <_free_r+0x2e>
 80143c0:	6063      	str	r3, [r4, #4]
 80143c2:	6014      	str	r4, [r2, #0]
 80143c4:	4628      	mov	r0, r5
 80143c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80143ca:	f000 bc05 	b.w	8014bd8 <__malloc_unlock>
 80143ce:	42a3      	cmp	r3, r4
 80143d0:	d90c      	bls.n	80143ec <_free_r+0x4c>
 80143d2:	6821      	ldr	r1, [r4, #0]
 80143d4:	1862      	adds	r2, r4, r1
 80143d6:	4293      	cmp	r3, r2
 80143d8:	bf04      	itt	eq
 80143da:	681a      	ldreq	r2, [r3, #0]
 80143dc:	685b      	ldreq	r3, [r3, #4]
 80143de:	6063      	str	r3, [r4, #4]
 80143e0:	bf04      	itt	eq
 80143e2:	1852      	addeq	r2, r2, r1
 80143e4:	6022      	streq	r2, [r4, #0]
 80143e6:	6004      	str	r4, [r0, #0]
 80143e8:	e7ec      	b.n	80143c4 <_free_r+0x24>
 80143ea:	4613      	mov	r3, r2
 80143ec:	685a      	ldr	r2, [r3, #4]
 80143ee:	b10a      	cbz	r2, 80143f4 <_free_r+0x54>
 80143f0:	42a2      	cmp	r2, r4
 80143f2:	d9fa      	bls.n	80143ea <_free_r+0x4a>
 80143f4:	6819      	ldr	r1, [r3, #0]
 80143f6:	1858      	adds	r0, r3, r1
 80143f8:	42a0      	cmp	r0, r4
 80143fa:	d10b      	bne.n	8014414 <_free_r+0x74>
 80143fc:	6820      	ldr	r0, [r4, #0]
 80143fe:	4401      	add	r1, r0
 8014400:	1858      	adds	r0, r3, r1
 8014402:	4282      	cmp	r2, r0
 8014404:	6019      	str	r1, [r3, #0]
 8014406:	d1dd      	bne.n	80143c4 <_free_r+0x24>
 8014408:	6810      	ldr	r0, [r2, #0]
 801440a:	6852      	ldr	r2, [r2, #4]
 801440c:	605a      	str	r2, [r3, #4]
 801440e:	4401      	add	r1, r0
 8014410:	6019      	str	r1, [r3, #0]
 8014412:	e7d7      	b.n	80143c4 <_free_r+0x24>
 8014414:	d902      	bls.n	801441c <_free_r+0x7c>
 8014416:	230c      	movs	r3, #12
 8014418:	602b      	str	r3, [r5, #0]
 801441a:	e7d3      	b.n	80143c4 <_free_r+0x24>
 801441c:	6820      	ldr	r0, [r4, #0]
 801441e:	1821      	adds	r1, r4, r0
 8014420:	428a      	cmp	r2, r1
 8014422:	bf04      	itt	eq
 8014424:	6811      	ldreq	r1, [r2, #0]
 8014426:	6852      	ldreq	r2, [r2, #4]
 8014428:	6062      	str	r2, [r4, #4]
 801442a:	bf04      	itt	eq
 801442c:	1809      	addeq	r1, r1, r0
 801442e:	6021      	streq	r1, [r4, #0]
 8014430:	605c      	str	r4, [r3, #4]
 8014432:	e7c7      	b.n	80143c4 <_free_r+0x24>
 8014434:	bd38      	pop	{r3, r4, r5, pc}
 8014436:	bf00      	nop
 8014438:	20010330 	.word	0x20010330

0801443c <_malloc_r>:
 801443c:	b570      	push	{r4, r5, r6, lr}
 801443e:	1ccd      	adds	r5, r1, #3
 8014440:	f025 0503 	bic.w	r5, r5, #3
 8014444:	3508      	adds	r5, #8
 8014446:	2d0c      	cmp	r5, #12
 8014448:	bf38      	it	cc
 801444a:	250c      	movcc	r5, #12
 801444c:	2d00      	cmp	r5, #0
 801444e:	4606      	mov	r6, r0
 8014450:	db01      	blt.n	8014456 <_malloc_r+0x1a>
 8014452:	42a9      	cmp	r1, r5
 8014454:	d903      	bls.n	801445e <_malloc_r+0x22>
 8014456:	230c      	movs	r3, #12
 8014458:	6033      	str	r3, [r6, #0]
 801445a:	2000      	movs	r0, #0
 801445c:	bd70      	pop	{r4, r5, r6, pc}
 801445e:	f000 fbba 	bl	8014bd6 <__malloc_lock>
 8014462:	4a21      	ldr	r2, [pc, #132]	; (80144e8 <_malloc_r+0xac>)
 8014464:	6814      	ldr	r4, [r2, #0]
 8014466:	4621      	mov	r1, r4
 8014468:	b991      	cbnz	r1, 8014490 <_malloc_r+0x54>
 801446a:	4c20      	ldr	r4, [pc, #128]	; (80144ec <_malloc_r+0xb0>)
 801446c:	6823      	ldr	r3, [r4, #0]
 801446e:	b91b      	cbnz	r3, 8014478 <_malloc_r+0x3c>
 8014470:	4630      	mov	r0, r6
 8014472:	f000 facf 	bl	8014a14 <_sbrk_r>
 8014476:	6020      	str	r0, [r4, #0]
 8014478:	4629      	mov	r1, r5
 801447a:	4630      	mov	r0, r6
 801447c:	f000 faca 	bl	8014a14 <_sbrk_r>
 8014480:	1c43      	adds	r3, r0, #1
 8014482:	d124      	bne.n	80144ce <_malloc_r+0x92>
 8014484:	230c      	movs	r3, #12
 8014486:	6033      	str	r3, [r6, #0]
 8014488:	4630      	mov	r0, r6
 801448a:	f000 fba5 	bl	8014bd8 <__malloc_unlock>
 801448e:	e7e4      	b.n	801445a <_malloc_r+0x1e>
 8014490:	680b      	ldr	r3, [r1, #0]
 8014492:	1b5b      	subs	r3, r3, r5
 8014494:	d418      	bmi.n	80144c8 <_malloc_r+0x8c>
 8014496:	2b0b      	cmp	r3, #11
 8014498:	d90f      	bls.n	80144ba <_malloc_r+0x7e>
 801449a:	600b      	str	r3, [r1, #0]
 801449c:	50cd      	str	r5, [r1, r3]
 801449e:	18cc      	adds	r4, r1, r3
 80144a0:	4630      	mov	r0, r6
 80144a2:	f000 fb99 	bl	8014bd8 <__malloc_unlock>
 80144a6:	f104 000b 	add.w	r0, r4, #11
 80144aa:	1d23      	adds	r3, r4, #4
 80144ac:	f020 0007 	bic.w	r0, r0, #7
 80144b0:	1ac3      	subs	r3, r0, r3
 80144b2:	d0d3      	beq.n	801445c <_malloc_r+0x20>
 80144b4:	425a      	negs	r2, r3
 80144b6:	50e2      	str	r2, [r4, r3]
 80144b8:	e7d0      	b.n	801445c <_malloc_r+0x20>
 80144ba:	428c      	cmp	r4, r1
 80144bc:	684b      	ldr	r3, [r1, #4]
 80144be:	bf16      	itet	ne
 80144c0:	6063      	strne	r3, [r4, #4]
 80144c2:	6013      	streq	r3, [r2, #0]
 80144c4:	460c      	movne	r4, r1
 80144c6:	e7eb      	b.n	80144a0 <_malloc_r+0x64>
 80144c8:	460c      	mov	r4, r1
 80144ca:	6849      	ldr	r1, [r1, #4]
 80144cc:	e7cc      	b.n	8014468 <_malloc_r+0x2c>
 80144ce:	1cc4      	adds	r4, r0, #3
 80144d0:	f024 0403 	bic.w	r4, r4, #3
 80144d4:	42a0      	cmp	r0, r4
 80144d6:	d005      	beq.n	80144e4 <_malloc_r+0xa8>
 80144d8:	1a21      	subs	r1, r4, r0
 80144da:	4630      	mov	r0, r6
 80144dc:	f000 fa9a 	bl	8014a14 <_sbrk_r>
 80144e0:	3001      	adds	r0, #1
 80144e2:	d0cf      	beq.n	8014484 <_malloc_r+0x48>
 80144e4:	6025      	str	r5, [r4, #0]
 80144e6:	e7db      	b.n	80144a0 <_malloc_r+0x64>
 80144e8:	20010330 	.word	0x20010330
 80144ec:	20010334 	.word	0x20010334

080144f0 <__ssputs_r>:
 80144f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144f4:	688e      	ldr	r6, [r1, #8]
 80144f6:	429e      	cmp	r6, r3
 80144f8:	4682      	mov	sl, r0
 80144fa:	460c      	mov	r4, r1
 80144fc:	4690      	mov	r8, r2
 80144fe:	4699      	mov	r9, r3
 8014500:	d837      	bhi.n	8014572 <__ssputs_r+0x82>
 8014502:	898a      	ldrh	r2, [r1, #12]
 8014504:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014508:	d031      	beq.n	801456e <__ssputs_r+0x7e>
 801450a:	6825      	ldr	r5, [r4, #0]
 801450c:	6909      	ldr	r1, [r1, #16]
 801450e:	1a6f      	subs	r7, r5, r1
 8014510:	6965      	ldr	r5, [r4, #20]
 8014512:	2302      	movs	r3, #2
 8014514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014518:	fb95 f5f3 	sdiv	r5, r5, r3
 801451c:	f109 0301 	add.w	r3, r9, #1
 8014520:	443b      	add	r3, r7
 8014522:	429d      	cmp	r5, r3
 8014524:	bf38      	it	cc
 8014526:	461d      	movcc	r5, r3
 8014528:	0553      	lsls	r3, r2, #21
 801452a:	d530      	bpl.n	801458e <__ssputs_r+0x9e>
 801452c:	4629      	mov	r1, r5
 801452e:	f7ff ff85 	bl	801443c <_malloc_r>
 8014532:	4606      	mov	r6, r0
 8014534:	b950      	cbnz	r0, 801454c <__ssputs_r+0x5c>
 8014536:	230c      	movs	r3, #12
 8014538:	f8ca 3000 	str.w	r3, [sl]
 801453c:	89a3      	ldrh	r3, [r4, #12]
 801453e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014542:	81a3      	strh	r3, [r4, #12]
 8014544:	f04f 30ff 	mov.w	r0, #4294967295
 8014548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801454c:	463a      	mov	r2, r7
 801454e:	6921      	ldr	r1, [r4, #16]
 8014550:	f7fc fa06 	bl	8010960 <memcpy>
 8014554:	89a3      	ldrh	r3, [r4, #12]
 8014556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801455a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801455e:	81a3      	strh	r3, [r4, #12]
 8014560:	6126      	str	r6, [r4, #16]
 8014562:	6165      	str	r5, [r4, #20]
 8014564:	443e      	add	r6, r7
 8014566:	1bed      	subs	r5, r5, r7
 8014568:	6026      	str	r6, [r4, #0]
 801456a:	60a5      	str	r5, [r4, #8]
 801456c:	464e      	mov	r6, r9
 801456e:	454e      	cmp	r6, r9
 8014570:	d900      	bls.n	8014574 <__ssputs_r+0x84>
 8014572:	464e      	mov	r6, r9
 8014574:	4632      	mov	r2, r6
 8014576:	4641      	mov	r1, r8
 8014578:	6820      	ldr	r0, [r4, #0]
 801457a:	f000 fb13 	bl	8014ba4 <memmove>
 801457e:	68a3      	ldr	r3, [r4, #8]
 8014580:	1b9b      	subs	r3, r3, r6
 8014582:	60a3      	str	r3, [r4, #8]
 8014584:	6823      	ldr	r3, [r4, #0]
 8014586:	441e      	add	r6, r3
 8014588:	6026      	str	r6, [r4, #0]
 801458a:	2000      	movs	r0, #0
 801458c:	e7dc      	b.n	8014548 <__ssputs_r+0x58>
 801458e:	462a      	mov	r2, r5
 8014590:	f000 fb23 	bl	8014bda <_realloc_r>
 8014594:	4606      	mov	r6, r0
 8014596:	2800      	cmp	r0, #0
 8014598:	d1e2      	bne.n	8014560 <__ssputs_r+0x70>
 801459a:	6921      	ldr	r1, [r4, #16]
 801459c:	4650      	mov	r0, sl
 801459e:	f7ff feff 	bl	80143a0 <_free_r>
 80145a2:	e7c8      	b.n	8014536 <__ssputs_r+0x46>

080145a4 <_svfiprintf_r>:
 80145a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145a8:	461d      	mov	r5, r3
 80145aa:	898b      	ldrh	r3, [r1, #12]
 80145ac:	061f      	lsls	r7, r3, #24
 80145ae:	b09d      	sub	sp, #116	; 0x74
 80145b0:	4680      	mov	r8, r0
 80145b2:	460c      	mov	r4, r1
 80145b4:	4616      	mov	r6, r2
 80145b6:	d50f      	bpl.n	80145d8 <_svfiprintf_r+0x34>
 80145b8:	690b      	ldr	r3, [r1, #16]
 80145ba:	b96b      	cbnz	r3, 80145d8 <_svfiprintf_r+0x34>
 80145bc:	2140      	movs	r1, #64	; 0x40
 80145be:	f7ff ff3d 	bl	801443c <_malloc_r>
 80145c2:	6020      	str	r0, [r4, #0]
 80145c4:	6120      	str	r0, [r4, #16]
 80145c6:	b928      	cbnz	r0, 80145d4 <_svfiprintf_r+0x30>
 80145c8:	230c      	movs	r3, #12
 80145ca:	f8c8 3000 	str.w	r3, [r8]
 80145ce:	f04f 30ff 	mov.w	r0, #4294967295
 80145d2:	e0c8      	b.n	8014766 <_svfiprintf_r+0x1c2>
 80145d4:	2340      	movs	r3, #64	; 0x40
 80145d6:	6163      	str	r3, [r4, #20]
 80145d8:	2300      	movs	r3, #0
 80145da:	9309      	str	r3, [sp, #36]	; 0x24
 80145dc:	2320      	movs	r3, #32
 80145de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80145e2:	2330      	movs	r3, #48	; 0x30
 80145e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80145e8:	9503      	str	r5, [sp, #12]
 80145ea:	f04f 0b01 	mov.w	fp, #1
 80145ee:	4637      	mov	r7, r6
 80145f0:	463d      	mov	r5, r7
 80145f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80145f6:	b10b      	cbz	r3, 80145fc <_svfiprintf_r+0x58>
 80145f8:	2b25      	cmp	r3, #37	; 0x25
 80145fa:	d13e      	bne.n	801467a <_svfiprintf_r+0xd6>
 80145fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8014600:	d00b      	beq.n	801461a <_svfiprintf_r+0x76>
 8014602:	4653      	mov	r3, sl
 8014604:	4632      	mov	r2, r6
 8014606:	4621      	mov	r1, r4
 8014608:	4640      	mov	r0, r8
 801460a:	f7ff ff71 	bl	80144f0 <__ssputs_r>
 801460e:	3001      	adds	r0, #1
 8014610:	f000 80a4 	beq.w	801475c <_svfiprintf_r+0x1b8>
 8014614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014616:	4453      	add	r3, sl
 8014618:	9309      	str	r3, [sp, #36]	; 0x24
 801461a:	783b      	ldrb	r3, [r7, #0]
 801461c:	2b00      	cmp	r3, #0
 801461e:	f000 809d 	beq.w	801475c <_svfiprintf_r+0x1b8>
 8014622:	2300      	movs	r3, #0
 8014624:	f04f 32ff 	mov.w	r2, #4294967295
 8014628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801462c:	9304      	str	r3, [sp, #16]
 801462e:	9307      	str	r3, [sp, #28]
 8014630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014634:	931a      	str	r3, [sp, #104]	; 0x68
 8014636:	462f      	mov	r7, r5
 8014638:	2205      	movs	r2, #5
 801463a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801463e:	4850      	ldr	r0, [pc, #320]	; (8014780 <_svfiprintf_r+0x1dc>)
 8014640:	f7eb fe06 	bl	8000250 <memchr>
 8014644:	9b04      	ldr	r3, [sp, #16]
 8014646:	b9d0      	cbnz	r0, 801467e <_svfiprintf_r+0xda>
 8014648:	06d9      	lsls	r1, r3, #27
 801464a:	bf44      	itt	mi
 801464c:	2220      	movmi	r2, #32
 801464e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014652:	071a      	lsls	r2, r3, #28
 8014654:	bf44      	itt	mi
 8014656:	222b      	movmi	r2, #43	; 0x2b
 8014658:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801465c:	782a      	ldrb	r2, [r5, #0]
 801465e:	2a2a      	cmp	r2, #42	; 0x2a
 8014660:	d015      	beq.n	801468e <_svfiprintf_r+0xea>
 8014662:	9a07      	ldr	r2, [sp, #28]
 8014664:	462f      	mov	r7, r5
 8014666:	2000      	movs	r0, #0
 8014668:	250a      	movs	r5, #10
 801466a:	4639      	mov	r1, r7
 801466c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014670:	3b30      	subs	r3, #48	; 0x30
 8014672:	2b09      	cmp	r3, #9
 8014674:	d94d      	bls.n	8014712 <_svfiprintf_r+0x16e>
 8014676:	b1b8      	cbz	r0, 80146a8 <_svfiprintf_r+0x104>
 8014678:	e00f      	b.n	801469a <_svfiprintf_r+0xf6>
 801467a:	462f      	mov	r7, r5
 801467c:	e7b8      	b.n	80145f0 <_svfiprintf_r+0x4c>
 801467e:	4a40      	ldr	r2, [pc, #256]	; (8014780 <_svfiprintf_r+0x1dc>)
 8014680:	1a80      	subs	r0, r0, r2
 8014682:	fa0b f000 	lsl.w	r0, fp, r0
 8014686:	4318      	orrs	r0, r3
 8014688:	9004      	str	r0, [sp, #16]
 801468a:	463d      	mov	r5, r7
 801468c:	e7d3      	b.n	8014636 <_svfiprintf_r+0x92>
 801468e:	9a03      	ldr	r2, [sp, #12]
 8014690:	1d11      	adds	r1, r2, #4
 8014692:	6812      	ldr	r2, [r2, #0]
 8014694:	9103      	str	r1, [sp, #12]
 8014696:	2a00      	cmp	r2, #0
 8014698:	db01      	blt.n	801469e <_svfiprintf_r+0xfa>
 801469a:	9207      	str	r2, [sp, #28]
 801469c:	e004      	b.n	80146a8 <_svfiprintf_r+0x104>
 801469e:	4252      	negs	r2, r2
 80146a0:	f043 0302 	orr.w	r3, r3, #2
 80146a4:	9207      	str	r2, [sp, #28]
 80146a6:	9304      	str	r3, [sp, #16]
 80146a8:	783b      	ldrb	r3, [r7, #0]
 80146aa:	2b2e      	cmp	r3, #46	; 0x2e
 80146ac:	d10c      	bne.n	80146c8 <_svfiprintf_r+0x124>
 80146ae:	787b      	ldrb	r3, [r7, #1]
 80146b0:	2b2a      	cmp	r3, #42	; 0x2a
 80146b2:	d133      	bne.n	801471c <_svfiprintf_r+0x178>
 80146b4:	9b03      	ldr	r3, [sp, #12]
 80146b6:	1d1a      	adds	r2, r3, #4
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	9203      	str	r2, [sp, #12]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	bfb8      	it	lt
 80146c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80146c4:	3702      	adds	r7, #2
 80146c6:	9305      	str	r3, [sp, #20]
 80146c8:	4d2e      	ldr	r5, [pc, #184]	; (8014784 <_svfiprintf_r+0x1e0>)
 80146ca:	7839      	ldrb	r1, [r7, #0]
 80146cc:	2203      	movs	r2, #3
 80146ce:	4628      	mov	r0, r5
 80146d0:	f7eb fdbe 	bl	8000250 <memchr>
 80146d4:	b138      	cbz	r0, 80146e6 <_svfiprintf_r+0x142>
 80146d6:	2340      	movs	r3, #64	; 0x40
 80146d8:	1b40      	subs	r0, r0, r5
 80146da:	fa03 f000 	lsl.w	r0, r3, r0
 80146de:	9b04      	ldr	r3, [sp, #16]
 80146e0:	4303      	orrs	r3, r0
 80146e2:	3701      	adds	r7, #1
 80146e4:	9304      	str	r3, [sp, #16]
 80146e6:	7839      	ldrb	r1, [r7, #0]
 80146e8:	4827      	ldr	r0, [pc, #156]	; (8014788 <_svfiprintf_r+0x1e4>)
 80146ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80146ee:	2206      	movs	r2, #6
 80146f0:	1c7e      	adds	r6, r7, #1
 80146f2:	f7eb fdad 	bl	8000250 <memchr>
 80146f6:	2800      	cmp	r0, #0
 80146f8:	d038      	beq.n	801476c <_svfiprintf_r+0x1c8>
 80146fa:	4b24      	ldr	r3, [pc, #144]	; (801478c <_svfiprintf_r+0x1e8>)
 80146fc:	bb13      	cbnz	r3, 8014744 <_svfiprintf_r+0x1a0>
 80146fe:	9b03      	ldr	r3, [sp, #12]
 8014700:	3307      	adds	r3, #7
 8014702:	f023 0307 	bic.w	r3, r3, #7
 8014706:	3308      	adds	r3, #8
 8014708:	9303      	str	r3, [sp, #12]
 801470a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801470c:	444b      	add	r3, r9
 801470e:	9309      	str	r3, [sp, #36]	; 0x24
 8014710:	e76d      	b.n	80145ee <_svfiprintf_r+0x4a>
 8014712:	fb05 3202 	mla	r2, r5, r2, r3
 8014716:	2001      	movs	r0, #1
 8014718:	460f      	mov	r7, r1
 801471a:	e7a6      	b.n	801466a <_svfiprintf_r+0xc6>
 801471c:	2300      	movs	r3, #0
 801471e:	3701      	adds	r7, #1
 8014720:	9305      	str	r3, [sp, #20]
 8014722:	4619      	mov	r1, r3
 8014724:	250a      	movs	r5, #10
 8014726:	4638      	mov	r0, r7
 8014728:	f810 2b01 	ldrb.w	r2, [r0], #1
 801472c:	3a30      	subs	r2, #48	; 0x30
 801472e:	2a09      	cmp	r2, #9
 8014730:	d903      	bls.n	801473a <_svfiprintf_r+0x196>
 8014732:	2b00      	cmp	r3, #0
 8014734:	d0c8      	beq.n	80146c8 <_svfiprintf_r+0x124>
 8014736:	9105      	str	r1, [sp, #20]
 8014738:	e7c6      	b.n	80146c8 <_svfiprintf_r+0x124>
 801473a:	fb05 2101 	mla	r1, r5, r1, r2
 801473e:	2301      	movs	r3, #1
 8014740:	4607      	mov	r7, r0
 8014742:	e7f0      	b.n	8014726 <_svfiprintf_r+0x182>
 8014744:	ab03      	add	r3, sp, #12
 8014746:	9300      	str	r3, [sp, #0]
 8014748:	4622      	mov	r2, r4
 801474a:	4b11      	ldr	r3, [pc, #68]	; (8014790 <_svfiprintf_r+0x1ec>)
 801474c:	a904      	add	r1, sp, #16
 801474e:	4640      	mov	r0, r8
 8014750:	f7fc f99e 	bl	8010a90 <_printf_float>
 8014754:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014758:	4681      	mov	r9, r0
 801475a:	d1d6      	bne.n	801470a <_svfiprintf_r+0x166>
 801475c:	89a3      	ldrh	r3, [r4, #12]
 801475e:	065b      	lsls	r3, r3, #25
 8014760:	f53f af35 	bmi.w	80145ce <_svfiprintf_r+0x2a>
 8014764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014766:	b01d      	add	sp, #116	; 0x74
 8014768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801476c:	ab03      	add	r3, sp, #12
 801476e:	9300      	str	r3, [sp, #0]
 8014770:	4622      	mov	r2, r4
 8014772:	4b07      	ldr	r3, [pc, #28]	; (8014790 <_svfiprintf_r+0x1ec>)
 8014774:	a904      	add	r1, sp, #16
 8014776:	4640      	mov	r0, r8
 8014778:	f7fc fc2c 	bl	8010fd4 <_printf_i>
 801477c:	e7ea      	b.n	8014754 <_svfiprintf_r+0x1b0>
 801477e:	bf00      	nop
 8014780:	08015b4c 	.word	0x08015b4c
 8014784:	08015b52 	.word	0x08015b52
 8014788:	08015b56 	.word	0x08015b56
 801478c:	08010a91 	.word	0x08010a91
 8014790:	080144f1 	.word	0x080144f1

08014794 <__sfputc_r>:
 8014794:	6893      	ldr	r3, [r2, #8]
 8014796:	3b01      	subs	r3, #1
 8014798:	2b00      	cmp	r3, #0
 801479a:	b410      	push	{r4}
 801479c:	6093      	str	r3, [r2, #8]
 801479e:	da08      	bge.n	80147b2 <__sfputc_r+0x1e>
 80147a0:	6994      	ldr	r4, [r2, #24]
 80147a2:	42a3      	cmp	r3, r4
 80147a4:	db01      	blt.n	80147aa <__sfputc_r+0x16>
 80147a6:	290a      	cmp	r1, #10
 80147a8:	d103      	bne.n	80147b2 <__sfputc_r+0x1e>
 80147aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147ae:	f7fd be1d 	b.w	80123ec <__swbuf_r>
 80147b2:	6813      	ldr	r3, [r2, #0]
 80147b4:	1c58      	adds	r0, r3, #1
 80147b6:	6010      	str	r0, [r2, #0]
 80147b8:	7019      	strb	r1, [r3, #0]
 80147ba:	4608      	mov	r0, r1
 80147bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147c0:	4770      	bx	lr

080147c2 <__sfputs_r>:
 80147c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147c4:	4606      	mov	r6, r0
 80147c6:	460f      	mov	r7, r1
 80147c8:	4614      	mov	r4, r2
 80147ca:	18d5      	adds	r5, r2, r3
 80147cc:	42ac      	cmp	r4, r5
 80147ce:	d101      	bne.n	80147d4 <__sfputs_r+0x12>
 80147d0:	2000      	movs	r0, #0
 80147d2:	e007      	b.n	80147e4 <__sfputs_r+0x22>
 80147d4:	463a      	mov	r2, r7
 80147d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147da:	4630      	mov	r0, r6
 80147dc:	f7ff ffda 	bl	8014794 <__sfputc_r>
 80147e0:	1c43      	adds	r3, r0, #1
 80147e2:	d1f3      	bne.n	80147cc <__sfputs_r+0xa>
 80147e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080147e8 <_vfiprintf_r>:
 80147e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147ec:	460c      	mov	r4, r1
 80147ee:	b09d      	sub	sp, #116	; 0x74
 80147f0:	4617      	mov	r7, r2
 80147f2:	461d      	mov	r5, r3
 80147f4:	4606      	mov	r6, r0
 80147f6:	b118      	cbz	r0, 8014800 <_vfiprintf_r+0x18>
 80147f8:	6983      	ldr	r3, [r0, #24]
 80147fa:	b90b      	cbnz	r3, 8014800 <_vfiprintf_r+0x18>
 80147fc:	f7fe fd80 	bl	8013300 <__sinit>
 8014800:	4b7c      	ldr	r3, [pc, #496]	; (80149f4 <_vfiprintf_r+0x20c>)
 8014802:	429c      	cmp	r4, r3
 8014804:	d158      	bne.n	80148b8 <_vfiprintf_r+0xd0>
 8014806:	6874      	ldr	r4, [r6, #4]
 8014808:	89a3      	ldrh	r3, [r4, #12]
 801480a:	0718      	lsls	r0, r3, #28
 801480c:	d55e      	bpl.n	80148cc <_vfiprintf_r+0xe4>
 801480e:	6923      	ldr	r3, [r4, #16]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d05b      	beq.n	80148cc <_vfiprintf_r+0xe4>
 8014814:	2300      	movs	r3, #0
 8014816:	9309      	str	r3, [sp, #36]	; 0x24
 8014818:	2320      	movs	r3, #32
 801481a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801481e:	2330      	movs	r3, #48	; 0x30
 8014820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014824:	9503      	str	r5, [sp, #12]
 8014826:	f04f 0b01 	mov.w	fp, #1
 801482a:	46b8      	mov	r8, r7
 801482c:	4645      	mov	r5, r8
 801482e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014832:	b10b      	cbz	r3, 8014838 <_vfiprintf_r+0x50>
 8014834:	2b25      	cmp	r3, #37	; 0x25
 8014836:	d154      	bne.n	80148e2 <_vfiprintf_r+0xfa>
 8014838:	ebb8 0a07 	subs.w	sl, r8, r7
 801483c:	d00b      	beq.n	8014856 <_vfiprintf_r+0x6e>
 801483e:	4653      	mov	r3, sl
 8014840:	463a      	mov	r2, r7
 8014842:	4621      	mov	r1, r4
 8014844:	4630      	mov	r0, r6
 8014846:	f7ff ffbc 	bl	80147c2 <__sfputs_r>
 801484a:	3001      	adds	r0, #1
 801484c:	f000 80c2 	beq.w	80149d4 <_vfiprintf_r+0x1ec>
 8014850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014852:	4453      	add	r3, sl
 8014854:	9309      	str	r3, [sp, #36]	; 0x24
 8014856:	f898 3000 	ldrb.w	r3, [r8]
 801485a:	2b00      	cmp	r3, #0
 801485c:	f000 80ba 	beq.w	80149d4 <_vfiprintf_r+0x1ec>
 8014860:	2300      	movs	r3, #0
 8014862:	f04f 32ff 	mov.w	r2, #4294967295
 8014866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801486a:	9304      	str	r3, [sp, #16]
 801486c:	9307      	str	r3, [sp, #28]
 801486e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014872:	931a      	str	r3, [sp, #104]	; 0x68
 8014874:	46a8      	mov	r8, r5
 8014876:	2205      	movs	r2, #5
 8014878:	f818 1b01 	ldrb.w	r1, [r8], #1
 801487c:	485e      	ldr	r0, [pc, #376]	; (80149f8 <_vfiprintf_r+0x210>)
 801487e:	f7eb fce7 	bl	8000250 <memchr>
 8014882:	9b04      	ldr	r3, [sp, #16]
 8014884:	bb78      	cbnz	r0, 80148e6 <_vfiprintf_r+0xfe>
 8014886:	06d9      	lsls	r1, r3, #27
 8014888:	bf44      	itt	mi
 801488a:	2220      	movmi	r2, #32
 801488c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014890:	071a      	lsls	r2, r3, #28
 8014892:	bf44      	itt	mi
 8014894:	222b      	movmi	r2, #43	; 0x2b
 8014896:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801489a:	782a      	ldrb	r2, [r5, #0]
 801489c:	2a2a      	cmp	r2, #42	; 0x2a
 801489e:	d02a      	beq.n	80148f6 <_vfiprintf_r+0x10e>
 80148a0:	9a07      	ldr	r2, [sp, #28]
 80148a2:	46a8      	mov	r8, r5
 80148a4:	2000      	movs	r0, #0
 80148a6:	250a      	movs	r5, #10
 80148a8:	4641      	mov	r1, r8
 80148aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80148ae:	3b30      	subs	r3, #48	; 0x30
 80148b0:	2b09      	cmp	r3, #9
 80148b2:	d969      	bls.n	8014988 <_vfiprintf_r+0x1a0>
 80148b4:	b360      	cbz	r0, 8014910 <_vfiprintf_r+0x128>
 80148b6:	e024      	b.n	8014902 <_vfiprintf_r+0x11a>
 80148b8:	4b50      	ldr	r3, [pc, #320]	; (80149fc <_vfiprintf_r+0x214>)
 80148ba:	429c      	cmp	r4, r3
 80148bc:	d101      	bne.n	80148c2 <_vfiprintf_r+0xda>
 80148be:	68b4      	ldr	r4, [r6, #8]
 80148c0:	e7a2      	b.n	8014808 <_vfiprintf_r+0x20>
 80148c2:	4b4f      	ldr	r3, [pc, #316]	; (8014a00 <_vfiprintf_r+0x218>)
 80148c4:	429c      	cmp	r4, r3
 80148c6:	bf08      	it	eq
 80148c8:	68f4      	ldreq	r4, [r6, #12]
 80148ca:	e79d      	b.n	8014808 <_vfiprintf_r+0x20>
 80148cc:	4621      	mov	r1, r4
 80148ce:	4630      	mov	r0, r6
 80148d0:	f7fd fdde 	bl	8012490 <__swsetup_r>
 80148d4:	2800      	cmp	r0, #0
 80148d6:	d09d      	beq.n	8014814 <_vfiprintf_r+0x2c>
 80148d8:	f04f 30ff 	mov.w	r0, #4294967295
 80148dc:	b01d      	add	sp, #116	; 0x74
 80148de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148e2:	46a8      	mov	r8, r5
 80148e4:	e7a2      	b.n	801482c <_vfiprintf_r+0x44>
 80148e6:	4a44      	ldr	r2, [pc, #272]	; (80149f8 <_vfiprintf_r+0x210>)
 80148e8:	1a80      	subs	r0, r0, r2
 80148ea:	fa0b f000 	lsl.w	r0, fp, r0
 80148ee:	4318      	orrs	r0, r3
 80148f0:	9004      	str	r0, [sp, #16]
 80148f2:	4645      	mov	r5, r8
 80148f4:	e7be      	b.n	8014874 <_vfiprintf_r+0x8c>
 80148f6:	9a03      	ldr	r2, [sp, #12]
 80148f8:	1d11      	adds	r1, r2, #4
 80148fa:	6812      	ldr	r2, [r2, #0]
 80148fc:	9103      	str	r1, [sp, #12]
 80148fe:	2a00      	cmp	r2, #0
 8014900:	db01      	blt.n	8014906 <_vfiprintf_r+0x11e>
 8014902:	9207      	str	r2, [sp, #28]
 8014904:	e004      	b.n	8014910 <_vfiprintf_r+0x128>
 8014906:	4252      	negs	r2, r2
 8014908:	f043 0302 	orr.w	r3, r3, #2
 801490c:	9207      	str	r2, [sp, #28]
 801490e:	9304      	str	r3, [sp, #16]
 8014910:	f898 3000 	ldrb.w	r3, [r8]
 8014914:	2b2e      	cmp	r3, #46	; 0x2e
 8014916:	d10e      	bne.n	8014936 <_vfiprintf_r+0x14e>
 8014918:	f898 3001 	ldrb.w	r3, [r8, #1]
 801491c:	2b2a      	cmp	r3, #42	; 0x2a
 801491e:	d138      	bne.n	8014992 <_vfiprintf_r+0x1aa>
 8014920:	9b03      	ldr	r3, [sp, #12]
 8014922:	1d1a      	adds	r2, r3, #4
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	9203      	str	r2, [sp, #12]
 8014928:	2b00      	cmp	r3, #0
 801492a:	bfb8      	it	lt
 801492c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014930:	f108 0802 	add.w	r8, r8, #2
 8014934:	9305      	str	r3, [sp, #20]
 8014936:	4d33      	ldr	r5, [pc, #204]	; (8014a04 <_vfiprintf_r+0x21c>)
 8014938:	f898 1000 	ldrb.w	r1, [r8]
 801493c:	2203      	movs	r2, #3
 801493e:	4628      	mov	r0, r5
 8014940:	f7eb fc86 	bl	8000250 <memchr>
 8014944:	b140      	cbz	r0, 8014958 <_vfiprintf_r+0x170>
 8014946:	2340      	movs	r3, #64	; 0x40
 8014948:	1b40      	subs	r0, r0, r5
 801494a:	fa03 f000 	lsl.w	r0, r3, r0
 801494e:	9b04      	ldr	r3, [sp, #16]
 8014950:	4303      	orrs	r3, r0
 8014952:	f108 0801 	add.w	r8, r8, #1
 8014956:	9304      	str	r3, [sp, #16]
 8014958:	f898 1000 	ldrb.w	r1, [r8]
 801495c:	482a      	ldr	r0, [pc, #168]	; (8014a08 <_vfiprintf_r+0x220>)
 801495e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014962:	2206      	movs	r2, #6
 8014964:	f108 0701 	add.w	r7, r8, #1
 8014968:	f7eb fc72 	bl	8000250 <memchr>
 801496c:	2800      	cmp	r0, #0
 801496e:	d037      	beq.n	80149e0 <_vfiprintf_r+0x1f8>
 8014970:	4b26      	ldr	r3, [pc, #152]	; (8014a0c <_vfiprintf_r+0x224>)
 8014972:	bb1b      	cbnz	r3, 80149bc <_vfiprintf_r+0x1d4>
 8014974:	9b03      	ldr	r3, [sp, #12]
 8014976:	3307      	adds	r3, #7
 8014978:	f023 0307 	bic.w	r3, r3, #7
 801497c:	3308      	adds	r3, #8
 801497e:	9303      	str	r3, [sp, #12]
 8014980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014982:	444b      	add	r3, r9
 8014984:	9309      	str	r3, [sp, #36]	; 0x24
 8014986:	e750      	b.n	801482a <_vfiprintf_r+0x42>
 8014988:	fb05 3202 	mla	r2, r5, r2, r3
 801498c:	2001      	movs	r0, #1
 801498e:	4688      	mov	r8, r1
 8014990:	e78a      	b.n	80148a8 <_vfiprintf_r+0xc0>
 8014992:	2300      	movs	r3, #0
 8014994:	f108 0801 	add.w	r8, r8, #1
 8014998:	9305      	str	r3, [sp, #20]
 801499a:	4619      	mov	r1, r3
 801499c:	250a      	movs	r5, #10
 801499e:	4640      	mov	r0, r8
 80149a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149a4:	3a30      	subs	r2, #48	; 0x30
 80149a6:	2a09      	cmp	r2, #9
 80149a8:	d903      	bls.n	80149b2 <_vfiprintf_r+0x1ca>
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d0c3      	beq.n	8014936 <_vfiprintf_r+0x14e>
 80149ae:	9105      	str	r1, [sp, #20]
 80149b0:	e7c1      	b.n	8014936 <_vfiprintf_r+0x14e>
 80149b2:	fb05 2101 	mla	r1, r5, r1, r2
 80149b6:	2301      	movs	r3, #1
 80149b8:	4680      	mov	r8, r0
 80149ba:	e7f0      	b.n	801499e <_vfiprintf_r+0x1b6>
 80149bc:	ab03      	add	r3, sp, #12
 80149be:	9300      	str	r3, [sp, #0]
 80149c0:	4622      	mov	r2, r4
 80149c2:	4b13      	ldr	r3, [pc, #76]	; (8014a10 <_vfiprintf_r+0x228>)
 80149c4:	a904      	add	r1, sp, #16
 80149c6:	4630      	mov	r0, r6
 80149c8:	f7fc f862 	bl	8010a90 <_printf_float>
 80149cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80149d0:	4681      	mov	r9, r0
 80149d2:	d1d5      	bne.n	8014980 <_vfiprintf_r+0x198>
 80149d4:	89a3      	ldrh	r3, [r4, #12]
 80149d6:	065b      	lsls	r3, r3, #25
 80149d8:	f53f af7e 	bmi.w	80148d8 <_vfiprintf_r+0xf0>
 80149dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149de:	e77d      	b.n	80148dc <_vfiprintf_r+0xf4>
 80149e0:	ab03      	add	r3, sp, #12
 80149e2:	9300      	str	r3, [sp, #0]
 80149e4:	4622      	mov	r2, r4
 80149e6:	4b0a      	ldr	r3, [pc, #40]	; (8014a10 <_vfiprintf_r+0x228>)
 80149e8:	a904      	add	r1, sp, #16
 80149ea:	4630      	mov	r0, r6
 80149ec:	f7fc faf2 	bl	8010fd4 <_printf_i>
 80149f0:	e7ec      	b.n	80149cc <_vfiprintf_r+0x1e4>
 80149f2:	bf00      	nop
 80149f4:	08015a00 	.word	0x08015a00
 80149f8:	08015b4c 	.word	0x08015b4c
 80149fc:	08015a20 	.word	0x08015a20
 8014a00:	080159e0 	.word	0x080159e0
 8014a04:	08015b52 	.word	0x08015b52
 8014a08:	08015b56 	.word	0x08015b56
 8014a0c:	08010a91 	.word	0x08010a91
 8014a10:	080147c3 	.word	0x080147c3

08014a14 <_sbrk_r>:
 8014a14:	b538      	push	{r3, r4, r5, lr}
 8014a16:	4c06      	ldr	r4, [pc, #24]	; (8014a30 <_sbrk_r+0x1c>)
 8014a18:	2300      	movs	r3, #0
 8014a1a:	4605      	mov	r5, r0
 8014a1c:	4608      	mov	r0, r1
 8014a1e:	6023      	str	r3, [r4, #0]
 8014a20:	f7f2 fce4 	bl	80073ec <_sbrk>
 8014a24:	1c43      	adds	r3, r0, #1
 8014a26:	d102      	bne.n	8014a2e <_sbrk_r+0x1a>
 8014a28:	6823      	ldr	r3, [r4, #0]
 8014a2a:	b103      	cbz	r3, 8014a2e <_sbrk_r+0x1a>
 8014a2c:	602b      	str	r3, [r5, #0]
 8014a2e:	bd38      	pop	{r3, r4, r5, pc}
 8014a30:	20024154 	.word	0x20024154

08014a34 <__sread>:
 8014a34:	b510      	push	{r4, lr}
 8014a36:	460c      	mov	r4, r1
 8014a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a3c:	f000 f8f4 	bl	8014c28 <_read_r>
 8014a40:	2800      	cmp	r0, #0
 8014a42:	bfab      	itete	ge
 8014a44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014a46:	89a3      	ldrhlt	r3, [r4, #12]
 8014a48:	181b      	addge	r3, r3, r0
 8014a4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014a4e:	bfac      	ite	ge
 8014a50:	6563      	strge	r3, [r4, #84]	; 0x54
 8014a52:	81a3      	strhlt	r3, [r4, #12]
 8014a54:	bd10      	pop	{r4, pc}

08014a56 <__swrite>:
 8014a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a5a:	461f      	mov	r7, r3
 8014a5c:	898b      	ldrh	r3, [r1, #12]
 8014a5e:	05db      	lsls	r3, r3, #23
 8014a60:	4605      	mov	r5, r0
 8014a62:	460c      	mov	r4, r1
 8014a64:	4616      	mov	r6, r2
 8014a66:	d505      	bpl.n	8014a74 <__swrite+0x1e>
 8014a68:	2302      	movs	r3, #2
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a70:	f000 f886 	bl	8014b80 <_lseek_r>
 8014a74:	89a3      	ldrh	r3, [r4, #12]
 8014a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014a7e:	81a3      	strh	r3, [r4, #12]
 8014a80:	4632      	mov	r2, r6
 8014a82:	463b      	mov	r3, r7
 8014a84:	4628      	mov	r0, r5
 8014a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a8a:	f000 b835 	b.w	8014af8 <_write_r>

08014a8e <__sseek>:
 8014a8e:	b510      	push	{r4, lr}
 8014a90:	460c      	mov	r4, r1
 8014a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a96:	f000 f873 	bl	8014b80 <_lseek_r>
 8014a9a:	1c43      	adds	r3, r0, #1
 8014a9c:	89a3      	ldrh	r3, [r4, #12]
 8014a9e:	bf15      	itete	ne
 8014aa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8014aa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014aa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014aaa:	81a3      	strheq	r3, [r4, #12]
 8014aac:	bf18      	it	ne
 8014aae:	81a3      	strhne	r3, [r4, #12]
 8014ab0:	bd10      	pop	{r4, pc}

08014ab2 <__sclose>:
 8014ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ab6:	f000 b831 	b.w	8014b1c <_close_r>

08014aba <strncmp>:
 8014aba:	b510      	push	{r4, lr}
 8014abc:	b16a      	cbz	r2, 8014ada <strncmp+0x20>
 8014abe:	3901      	subs	r1, #1
 8014ac0:	1884      	adds	r4, r0, r2
 8014ac2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014ac6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014aca:	4293      	cmp	r3, r2
 8014acc:	d103      	bne.n	8014ad6 <strncmp+0x1c>
 8014ace:	42a0      	cmp	r0, r4
 8014ad0:	d001      	beq.n	8014ad6 <strncmp+0x1c>
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d1f5      	bne.n	8014ac2 <strncmp+0x8>
 8014ad6:	1a98      	subs	r0, r3, r2
 8014ad8:	bd10      	pop	{r4, pc}
 8014ada:	4610      	mov	r0, r2
 8014adc:	e7fc      	b.n	8014ad8 <strncmp+0x1e>

08014ade <__ascii_wctomb>:
 8014ade:	b149      	cbz	r1, 8014af4 <__ascii_wctomb+0x16>
 8014ae0:	2aff      	cmp	r2, #255	; 0xff
 8014ae2:	bf85      	ittet	hi
 8014ae4:	238a      	movhi	r3, #138	; 0x8a
 8014ae6:	6003      	strhi	r3, [r0, #0]
 8014ae8:	700a      	strbls	r2, [r1, #0]
 8014aea:	f04f 30ff 	movhi.w	r0, #4294967295
 8014aee:	bf98      	it	ls
 8014af0:	2001      	movls	r0, #1
 8014af2:	4770      	bx	lr
 8014af4:	4608      	mov	r0, r1
 8014af6:	4770      	bx	lr

08014af8 <_write_r>:
 8014af8:	b538      	push	{r3, r4, r5, lr}
 8014afa:	4c07      	ldr	r4, [pc, #28]	; (8014b18 <_write_r+0x20>)
 8014afc:	4605      	mov	r5, r0
 8014afe:	4608      	mov	r0, r1
 8014b00:	4611      	mov	r1, r2
 8014b02:	2200      	movs	r2, #0
 8014b04:	6022      	str	r2, [r4, #0]
 8014b06:	461a      	mov	r2, r3
 8014b08:	f7f2 fc1f 	bl	800734a <_write>
 8014b0c:	1c43      	adds	r3, r0, #1
 8014b0e:	d102      	bne.n	8014b16 <_write_r+0x1e>
 8014b10:	6823      	ldr	r3, [r4, #0]
 8014b12:	b103      	cbz	r3, 8014b16 <_write_r+0x1e>
 8014b14:	602b      	str	r3, [r5, #0]
 8014b16:	bd38      	pop	{r3, r4, r5, pc}
 8014b18:	20024154 	.word	0x20024154

08014b1c <_close_r>:
 8014b1c:	b538      	push	{r3, r4, r5, lr}
 8014b1e:	4c06      	ldr	r4, [pc, #24]	; (8014b38 <_close_r+0x1c>)
 8014b20:	2300      	movs	r3, #0
 8014b22:	4605      	mov	r5, r0
 8014b24:	4608      	mov	r0, r1
 8014b26:	6023      	str	r3, [r4, #0]
 8014b28:	f7f2 fc2b 	bl	8007382 <_close>
 8014b2c:	1c43      	adds	r3, r0, #1
 8014b2e:	d102      	bne.n	8014b36 <_close_r+0x1a>
 8014b30:	6823      	ldr	r3, [r4, #0]
 8014b32:	b103      	cbz	r3, 8014b36 <_close_r+0x1a>
 8014b34:	602b      	str	r3, [r5, #0]
 8014b36:	bd38      	pop	{r3, r4, r5, pc}
 8014b38:	20024154 	.word	0x20024154

08014b3c <_fstat_r>:
 8014b3c:	b538      	push	{r3, r4, r5, lr}
 8014b3e:	4c07      	ldr	r4, [pc, #28]	; (8014b5c <_fstat_r+0x20>)
 8014b40:	2300      	movs	r3, #0
 8014b42:	4605      	mov	r5, r0
 8014b44:	4608      	mov	r0, r1
 8014b46:	4611      	mov	r1, r2
 8014b48:	6023      	str	r3, [r4, #0]
 8014b4a:	f7f2 fc26 	bl	800739a <_fstat>
 8014b4e:	1c43      	adds	r3, r0, #1
 8014b50:	d102      	bne.n	8014b58 <_fstat_r+0x1c>
 8014b52:	6823      	ldr	r3, [r4, #0]
 8014b54:	b103      	cbz	r3, 8014b58 <_fstat_r+0x1c>
 8014b56:	602b      	str	r3, [r5, #0]
 8014b58:	bd38      	pop	{r3, r4, r5, pc}
 8014b5a:	bf00      	nop
 8014b5c:	20024154 	.word	0x20024154

08014b60 <_isatty_r>:
 8014b60:	b538      	push	{r3, r4, r5, lr}
 8014b62:	4c06      	ldr	r4, [pc, #24]	; (8014b7c <_isatty_r+0x1c>)
 8014b64:	2300      	movs	r3, #0
 8014b66:	4605      	mov	r5, r0
 8014b68:	4608      	mov	r0, r1
 8014b6a:	6023      	str	r3, [r4, #0]
 8014b6c:	f7f2 fc25 	bl	80073ba <_isatty>
 8014b70:	1c43      	adds	r3, r0, #1
 8014b72:	d102      	bne.n	8014b7a <_isatty_r+0x1a>
 8014b74:	6823      	ldr	r3, [r4, #0]
 8014b76:	b103      	cbz	r3, 8014b7a <_isatty_r+0x1a>
 8014b78:	602b      	str	r3, [r5, #0]
 8014b7a:	bd38      	pop	{r3, r4, r5, pc}
 8014b7c:	20024154 	.word	0x20024154

08014b80 <_lseek_r>:
 8014b80:	b538      	push	{r3, r4, r5, lr}
 8014b82:	4c07      	ldr	r4, [pc, #28]	; (8014ba0 <_lseek_r+0x20>)
 8014b84:	4605      	mov	r5, r0
 8014b86:	4608      	mov	r0, r1
 8014b88:	4611      	mov	r1, r2
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	6022      	str	r2, [r4, #0]
 8014b8e:	461a      	mov	r2, r3
 8014b90:	f7f2 fc1e 	bl	80073d0 <_lseek>
 8014b94:	1c43      	adds	r3, r0, #1
 8014b96:	d102      	bne.n	8014b9e <_lseek_r+0x1e>
 8014b98:	6823      	ldr	r3, [r4, #0]
 8014b9a:	b103      	cbz	r3, 8014b9e <_lseek_r+0x1e>
 8014b9c:	602b      	str	r3, [r5, #0]
 8014b9e:	bd38      	pop	{r3, r4, r5, pc}
 8014ba0:	20024154 	.word	0x20024154

08014ba4 <memmove>:
 8014ba4:	4288      	cmp	r0, r1
 8014ba6:	b510      	push	{r4, lr}
 8014ba8:	eb01 0302 	add.w	r3, r1, r2
 8014bac:	d807      	bhi.n	8014bbe <memmove+0x1a>
 8014bae:	1e42      	subs	r2, r0, #1
 8014bb0:	4299      	cmp	r1, r3
 8014bb2:	d00a      	beq.n	8014bca <memmove+0x26>
 8014bb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014bb8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014bbc:	e7f8      	b.n	8014bb0 <memmove+0xc>
 8014bbe:	4283      	cmp	r3, r0
 8014bc0:	d9f5      	bls.n	8014bae <memmove+0xa>
 8014bc2:	1881      	adds	r1, r0, r2
 8014bc4:	1ad2      	subs	r2, r2, r3
 8014bc6:	42d3      	cmn	r3, r2
 8014bc8:	d100      	bne.n	8014bcc <memmove+0x28>
 8014bca:	bd10      	pop	{r4, pc}
 8014bcc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014bd0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014bd4:	e7f7      	b.n	8014bc6 <memmove+0x22>

08014bd6 <__malloc_lock>:
 8014bd6:	4770      	bx	lr

08014bd8 <__malloc_unlock>:
 8014bd8:	4770      	bx	lr

08014bda <_realloc_r>:
 8014bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bdc:	4607      	mov	r7, r0
 8014bde:	4614      	mov	r4, r2
 8014be0:	460e      	mov	r6, r1
 8014be2:	b921      	cbnz	r1, 8014bee <_realloc_r+0x14>
 8014be4:	4611      	mov	r1, r2
 8014be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014bea:	f7ff bc27 	b.w	801443c <_malloc_r>
 8014bee:	b922      	cbnz	r2, 8014bfa <_realloc_r+0x20>
 8014bf0:	f7ff fbd6 	bl	80143a0 <_free_r>
 8014bf4:	4625      	mov	r5, r4
 8014bf6:	4628      	mov	r0, r5
 8014bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bfa:	f000 f827 	bl	8014c4c <_malloc_usable_size_r>
 8014bfe:	42a0      	cmp	r0, r4
 8014c00:	d20f      	bcs.n	8014c22 <_realloc_r+0x48>
 8014c02:	4621      	mov	r1, r4
 8014c04:	4638      	mov	r0, r7
 8014c06:	f7ff fc19 	bl	801443c <_malloc_r>
 8014c0a:	4605      	mov	r5, r0
 8014c0c:	2800      	cmp	r0, #0
 8014c0e:	d0f2      	beq.n	8014bf6 <_realloc_r+0x1c>
 8014c10:	4631      	mov	r1, r6
 8014c12:	4622      	mov	r2, r4
 8014c14:	f7fb fea4 	bl	8010960 <memcpy>
 8014c18:	4631      	mov	r1, r6
 8014c1a:	4638      	mov	r0, r7
 8014c1c:	f7ff fbc0 	bl	80143a0 <_free_r>
 8014c20:	e7e9      	b.n	8014bf6 <_realloc_r+0x1c>
 8014c22:	4635      	mov	r5, r6
 8014c24:	e7e7      	b.n	8014bf6 <_realloc_r+0x1c>
	...

08014c28 <_read_r>:
 8014c28:	b538      	push	{r3, r4, r5, lr}
 8014c2a:	4c07      	ldr	r4, [pc, #28]	; (8014c48 <_read_r+0x20>)
 8014c2c:	4605      	mov	r5, r0
 8014c2e:	4608      	mov	r0, r1
 8014c30:	4611      	mov	r1, r2
 8014c32:	2200      	movs	r2, #0
 8014c34:	6022      	str	r2, [r4, #0]
 8014c36:	461a      	mov	r2, r3
 8014c38:	f7f2 fb6a 	bl	8007310 <_read>
 8014c3c:	1c43      	adds	r3, r0, #1
 8014c3e:	d102      	bne.n	8014c46 <_read_r+0x1e>
 8014c40:	6823      	ldr	r3, [r4, #0]
 8014c42:	b103      	cbz	r3, 8014c46 <_read_r+0x1e>
 8014c44:	602b      	str	r3, [r5, #0]
 8014c46:	bd38      	pop	{r3, r4, r5, pc}
 8014c48:	20024154 	.word	0x20024154

08014c4c <_malloc_usable_size_r>:
 8014c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c50:	1f18      	subs	r0, r3, #4
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	bfbc      	itt	lt
 8014c56:	580b      	ldrlt	r3, [r1, r0]
 8014c58:	18c0      	addlt	r0, r0, r3
 8014c5a:	4770      	bx	lr

08014c5c <_init>:
 8014c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c5e:	bf00      	nop
 8014c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c62:	bc08      	pop	{r3}
 8014c64:	469e      	mov	lr, r3
 8014c66:	4770      	bx	lr

08014c68 <_fini>:
 8014c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c6a:	bf00      	nop
 8014c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c6e:	bc08      	pop	{r3}
 8014c70:	469e      	mov	lr, r3
 8014c72:	4770      	bx	lr
